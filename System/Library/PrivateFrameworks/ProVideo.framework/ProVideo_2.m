void sub_1B28D89F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10, OZChannelQuad *a11, OZChannel *a12, OZChannel *a13, OZChannel2D *a14, OZChannel *a15, OZChannel2D *a16, OZChannelPercent *a17, OZChannelColorNoAlpha *a18, OZChannelQuad *a19, OZChannelEnum *a20,OZChannelPosition *a21,OZChannel2D *a22,OZChannel *a23,OZChannel *a24,OZChannel2D *a25,OZChannelPercent *a26,OZChannelColorNoAlpha *a27,OZChannelQuad *a28,OZChannelEnum *a29,OZChannel *a30,OZChannel *a31,OZChannel2D *a32,OZChannelPercent *a33,OZChannelColorNoAlpha *a34,OZChannelFolder *a35,OZChannelQuad *a36,OZChannel *a37)
{
  uint64_t v37;
  OZChannel *v38;
  OZChannel2D *v39;
  OZChannelEnum *v40;
  OZChannelFolder *v41;
  OZChannelFolder *v42;
  OZChannelFolder *v43;
  uint64_t v44;
  void *v46;

  OZChannel2D::~OZChannel2D(v39);
  OZChannel::~OZChannel(v38);
  OZChannelFolder::~OZChannelFolder(v43);
  OZChannelEnum::~OZChannelEnum(v40);
  OZChannel::~OZChannel(a10);
  OZChannelQuad::~OZChannelQuad(a11);
  OZChannel::~OZChannel(a12);
  OZChannel::~OZChannel(a13);
  OZChannel2D::~OZChannel2D(a14);
  OZChannel::~OZChannel(a15);
  OZChannel2D::~OZChannel2D(a16);
  OZChannelPercent::~OZChannelPercent(a17);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a18);
  OZChannelFolder::~OZChannelFolder(v42);
  OZChannelQuad::~OZChannelQuad(a19);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannelPosition::~OZChannelPosition(a21);
  OZChannel2D::~OZChannel2D(a22);
  OZChannel::~OZChannel(a23);
  OZChannel::~OZChannel(a24);
  OZChannel2D::~OZChannel2D(a25);
  OZChannelPercent::~OZChannelPercent(a26);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a27);
  OZChannelFolder::~OZChannelFolder(v41);
  OZChannelQuad::~OZChannelQuad(a28);
  OZChannelEnum::~OZChannelEnum(a29);
  OZChannel::~OZChannel(a30);
  OZChannel::~OZChannel(a31);
  OZChannel2D::~OZChannel2D(a32);
  OZChannelPercent::~OZChannelPercent(a33);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a34);
  OZChannelFolder::~OZChannelFolder(a35);
  OZChannelQuad::~OZChannelQuad(a36);
  OZChannel::~OZChannel(a37);
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v44 - 216));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v44 - 208));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v44 - 200));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v44 - 192));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v44 - 184));
  OZChannel::~OZChannel(*(OZChannel **)(v44 - 176));
  OZChannel::~OZChannel(*(OZChannel **)(v44 - 168));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v44 - 160));
  OZChannel::~OZChannel(*(OZChannel **)(v44 - 152));
  OZChannel::~OZChannel(*(OZChannel **)(v44 - 144));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v44 - 136));
  OZChannelScale3D::~OZChannelScale3D(*(OZChannelScale3D **)(v44 - 128));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v44 - 120));
  OZChannelPosition3D::~OZChannelPosition3D(*(OZChannelPosition3D **)(v44 - 112));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v44 - 104));
  v46 = **(void ***)(v44 - 96);
  if (v46)
  {
    *(_QWORD *)(v37 + 16) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(a1);
}

void TXSequenceChannels::copyMaterialSequenceFolders(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  OZChannelBase *v12;
  unint64_t isEnabled;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  OZChannelBase *v18;
  unint64_t v19;
  OZChannelBase **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  OZChannelBase **v27;
  char *v28;
  char *v29;
  OZChannelBase *v30;

  v2 = (a2[1] - *a2) >> 3;
  v3 = (v2 - 6);
  if ((_DWORD)v2 != 6)
  {
    v6 = 0;
    v7 = (char **)(a1 + 8);
    v8 = a1 + 24;
    do
    {
      v9 = (v6 + 6);
      if (v9 >= (uint64_t)(a2[1] - *a2) >> 3)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      v10 = *(_QWORD *)(*a2 + 8 * v9);
      v11 = *(_DWORD *)(v10 + 24);
      v12 = (OZChannelBase *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v10 + 8) + 24))(*(_QWORD *)(v10 + 8), v10, 0);
      OZChannelFolder::push_back(*(OZChannelFolder **)(a1 + 27160), v12);
      OZChannelBase::setID(v12, v11);
      isEnabled = OZChannelBase::isEnabled((OZChannelBase *)v10, 1, 1);
      (*((void (**)(OZChannelBase *, unint64_t, _QWORD))v12->var0 + 13))(v12, isEnabled, 0);
      OZChannelBase::setFlag(v12, 0x100000000, 0);
      v14 = *(uint64_t ***)(v10 + 112);
      if (v14)
      {
        v15 = *v14;
        v16 = v14[1];
        while (v15 != v16)
        {
          v17 = *v15++;
          v18 = (OZChannelBase *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v17 + 8) + 24))(*(_QWORD *)(v17 + 8), v17, 0);
          OZChannelFolder::push_back((OZChannelFolder *)v12, v18);
        }
      }
      v20 = *(OZChannelBase ***)(a1 + 16);
      v19 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v20 >= v19)
      {
        v22 = ((char *)v20 - *v7) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v23 = v19 - (_QWORD)*v7;
        v24 = v23 >> 2;
        if (v23 >> 2 <= (unint64_t)(v22 + 1))
          v24 = v22 + 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v25);
        else
          v26 = 0;
        v27 = (OZChannelBase **)&v26[8 * v22];
        *v27 = v12;
        v21 = v27 + 1;
        v29 = *(char **)(a1 + 8);
        v28 = *(char **)(a1 + 16);
        if (v28 != v29)
        {
          do
          {
            v30 = (OZChannelBase *)*((_QWORD *)v28 - 1);
            v28 -= 8;
            *--v27 = v30;
          }
          while (v28 != v29);
          v28 = *v7;
        }
        *(_QWORD *)(a1 + 8) = v27;
        *(_QWORD *)(a1 + 16) = v21;
        *(_QWORD *)(a1 + 24) = &v26[8 * v25];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v20 = v12;
        v21 = v20 + 1;
      }
      *(_QWORD *)(a1 + 16) = v21;
      ++v6;
    }
    while (v6 != v3);
  }
}

uint64_t TXSequenceChannels::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  OZChannelFolder::operator=(a1 + 32);
  OZChannelPosition::operator=(a1 + 160, a2 + 160);
  OZChannelFolder::operator=(a1 + 1200);
  OZChannelBase::operator=(a1 + 1336, a2 + 1336);
  OZChannelBase::operator=(a1 + 1488, a2 + 1488);
  OZChannelBase::operator=(a1 + 1640, a2 + 1640);
  OZChannelPosition::operator=(a1 + 1792, a2 + 1792);
  OZChannelBase::operator=(a1 + 2648, a2 + 2648);
  OZChannelBase::operator=(a1 + 2800, a2 + 2800);
  OZChannelBase::operator=(a1 + 2952, a2 + 2952);
  OZChannelBase::operator=(a1 + 3104, a2 + 3104);
  OZChannelBase::operator=(a1 + 3256, a2 + 3256);
  OZChannelFolder::operator=(a1 + 3560);
  OZChannelFolder::operator=(a1 + 3688);
  OZChannelBase::operator=(a1 + 3824, a2 + 3824);
  OZChannelBase::operator=(a1 + 3976, a2 + 3976);
  OZChannelBase::operator=(a1 + 4128, a2 + 4128);
  OZChannelBase::operator=(a1 + 4280, a2 + 4280);
  OZChannelBase::operator=(a1 + 4432, a2 + 4432);
  *(_BYTE *)(a1 + 4688) = *(_BYTE *)(a2 + 4688);
  OZChannelBase::operator=(a1 + 4696, a2 + 4696);
  OZChannelFolder::operator=(a1 + 4848);
  OZChannelBase::operator=(a1 + 4984, a2 + 4984);
  OZChannelBase::operator=(a1 + 5136, a2 + 5136);
  OZChannelFolder::operator=(a1 + 5440);
  OZChannelPosition::operator=(a1 + 5576, a2 + 5576);
  OZChannelPosition::operator=(a1 + 6280, a2 + 6280);
  OZChannelPosition::operator=(a1 + 6984, a2 + 6984);
  OZChannelPosition::operator=(a1 + 7688, a2 + 7688);
  OZChannelFolder::operator=(a1 + 8392);
  OZChannelFolder::operator=(a1 + 8520);
  OZChannelBase::operator=(a1 + 8656, a2 + 8656);
  OZChannelBase::operator=(a1 + 8808, a2 + 8808);
  OZChannelBase::operator=(a1 + 8960, a2 + 8960);
  OZChannelBase::operator=(a1 + 9112, a2 + 9112);
  OZChannelBase::operator=(a1 + 9264, a2 + 9264);
  *(_BYTE *)(a1 + 9520) = *(_BYTE *)(a2 + 9520);
  OZChannelBase::operator=(a1 + 9528, a2 + 9528);
  OZChannelFolder::operator=(a1 + 9680);
  OZChannelBase::operator=(a1 + 9816, a2 + 9816);
  OZChannelBase::operator=(a1 + 9968, a2 + 9968);
  OZChannelBase::operator=(a1 + 10272, a2 + 10272);
  OZChannelBase::operator=(a1 + 10424, a2 + 10424);
  OZChannelFolder::operator=(a1 + 10680);
  OZChannelPosition::operator=(a1 + 10816, a2 + 10816);
  OZChannelPosition::operator=(a1 + 11520, a2 + 11520);
  OZChannelPosition::operator=(a1 + 12224, a2 + 12224);
  OZChannelPosition::operator=(a1 + 12928, a2 + 12928);
  OZChannelFolder::operator=(a1 + 13632);
  OZChannelFolder::operator=(a1 + 13760);
  OZChannelBase::operator=(a1 + 13896, a2 + 13896);
  OZChannelBase::operator=(a1 + 14048, a2 + 14048);
  OZChannelBase::operator=(a1 + 14200, a2 + 14200);
  OZChannelBase::operator=(a1 + 14352, a2 + 14352);
  OZChannelBase::operator=(a1 + 14504, a2 + 14504);
  *(_BYTE *)(a1 + 14760) = *(_BYTE *)(a2 + 14760);
  OZChannelBase::operator=(a1 + 14768, a2 + 14768);
  OZChannelFolder::operator=(a1 + 14920);
  OZChannelBase::operator=(a1 + 15056, a2 + 15056);
  OZChannelBase::operator=(a1 + 15208, a2 + 15208);
  OZChannelBase::operator=(a1 + 15512, a2 + 15512);
  OZChannelFolder::operator=(a1 + 15664);
  OZChannelBase::operator=(a1 + 15800, a2 + 15800);
  OZChannelBase::operator=(a1 + 15952, a2 + 15952);
  OZChannelPosition::operator=(a1 + 16104, a2 + 16104);
  OZChannelBase::operator=(a1 + 16808, a2 + 16808);
  OZChannelFolder::operator=(a1 + 17064);
  OZChannelPosition::operator=(a1 + 17200, a2 + 17200);
  OZChannelPosition::operator=(a1 + 17904, a2 + 17904);
  OZChannelPosition::operator=(a1 + 18608, a2 + 18608);
  OZChannelPosition::operator=(a1 + 19312, a2 + 19312);
  OZChannelFolder::operator=(a1 + 20016);
  OZChannelFolder::operator=(a1 + 20144);
  OZChannelBase::operator=(a1 + 20280, a2 + 20280);
  OZChannelBase::operator=(a1 + 20432, a2 + 20432);
  OZChannelBase::operator=(a1 + 20584, a2 + 20584);
  OZChannelBase::operator=(a1 + 20736, a2 + 20736);
  OZChannelBase::operator=(a1 + 20888, a2 + 20888);
  *(_BYTE *)(a1 + 21144) = *(_BYTE *)(a2 + 21144);
  OZChannelBase::operator=(a1 + 21152, a2 + 21152);
  OZChannelFolder::operator=(a1 + 21304);
  OZChannelBase::operator=(a1 + 21440, a2 + 21440);
  OZChannelBase::operator=(a1 + 21592, a2 + 21592);
  OZChannelFolder::operator=(a1 + 21896);
  OZChannelBase::operator=(a1 + 22032, a2 + 22032);
  OZChannelBase::operator=(a1 + 22184, a2 + 22184);
  OZChannelBase::operator=(a1 + 22336, a2 + 22336);
  OZChannelBase::operator=(a1 + 22488, a2 + 22488);
  OZChannelFolder::operator=(a1 + 22640);
  OZChannelPosition::operator=(a1 + 22776, a2 + 22776);
  OZChannelPosition::operator=(a1 + 23480, a2 + 23480);
  OZChannelPosition::operator=(a1 + 24184, a2 + 24184);
  OZChannelPosition::operator=(a1 + 24888, a2 + 24888);
  OZChannelBase::operator=(a1 + 25592, a2 + 25592);
  OZChannelBase::operator=(a1 + 25744, a2 + 25744);
  OZChannelFolder::operator=(a1 + 26000);
  OZChannelBase::operator=(a1 + 26128, a2 + 26128);
  OZChannelFolder::operator=(a1 + 26280);
  OZChannelBase::operator=(a1 + 26416, a2 + 26416);
  OZChannelBase::operator=(a1 + 26568, a2 + 26568);
  OZChannelFolder::operator=(a1 + 26720);
  OZChannelBase::operator=(a1 + 26856, a2 + 26856);
  result = OZChannelBase::operator=(a1 + 27008, a2 + 27008);
  *(_QWORD *)(a1 + 27160) = *(_QWORD *)(a2 + 27160);
  return result;
}

void TXSequenceChannels::~TXSequenceChannels(TXSequenceChannels *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E64F80F8;
  while (*((_QWORD *)this + 2) - *((_QWORD *)this + 1) >= 0x31uLL)
    TXSequenceChannels::removeMaterialChannelsAtIndex(this, 0);
  OZChannel2D::~OZChannel2D((TXSequenceChannels *)((char *)this + 26720));
  OZChannel2D::~OZChannel2D((TXSequenceChannels *)((char *)this + 26280));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 26000));
  OZChannelEnum::~OZChannelEnum((TXSequenceChannels *)((char *)this + 25744));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 25592));
  OZChannelQuad::~OZChannelQuad((TXSequenceChannels *)((char *)this + 22640));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 22488));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 22336));
  OZChannel2D::~OZChannel2D((TXSequenceChannels *)((char *)this + 21896));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 21744));
  OZChannel2D::~OZChannel2D((TXSequenceChannels *)((char *)this + 21304));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 21152));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXSequenceChannels *)((char *)this + 20144));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 20016));
  OZChannelQuad::~OZChannelQuad((TXSequenceChannels *)((char *)this + 17064));
  OZChannelEnum::~OZChannelEnum((TXSequenceChannels *)((char *)this + 16808));
  OZChannelPosition::~OZChannelPosition((TXSequenceChannels *)((char *)this + 16104));
  OZChannel2D::~OZChannel2D((TXSequenceChannels *)((char *)this + 15664));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 15512));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 15360));
  OZChannel2D::~OZChannel2D((TXSequenceChannels *)((char *)this + 14920));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 14768));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXSequenceChannels *)((char *)this + 13760));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 13632));
  OZChannelQuad::~OZChannelQuad((TXSequenceChannels *)((char *)this + 10680));
  OZChannelEnum::~OZChannelEnum((TXSequenceChannels *)((char *)this + 10424));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10272));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10120));
  OZChannel2D::~OZChannel2D((TXSequenceChannels *)((char *)this + 9680));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 9528));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXSequenceChannels *)((char *)this + 8520));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 8392));
  OZChannelQuad::~OZChannelQuad((TXSequenceChannels *)((char *)this + 5440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5288));
  OZChannel2D::~OZChannel2D((TXSequenceChannels *)((char *)this + 4848));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 4696));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXSequenceChannels *)((char *)this + 3688));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 3560));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 3408));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3256));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3104));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 2952));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2800));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2648));
  OZChannelRotation3D::~OZChannelRotation3D((TXSequenceChannels *)((char *)this + 1792));
  *((_QWORD *)this + 150) = &off_1E6560F48;
  *((_QWORD *)this + 152) = &unk_1E65612A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1640));
  OZChannel2D::~OZChannel2D((TXSequenceChannels *)((char *)this + 1200));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1048));
  OZChannelPosition3D::~OZChannelPosition3D((TXSequenceChannels *)((char *)this + 160));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 32));
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  TXSequenceChannels::~TXSequenceChannels(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t TXSequenceChannels::removeMaterialChannelsAtIndex(TXSequenceChannels *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  OZChannelBase *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = a2 + 6;
  if (v5 >= (v4 - v3) >> 3)
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v6 = *(OZChannelBase **)(v3 + 8 * v5);
  v7 = v3 + 8 * a2;
  v8 = v7 + 48;
  v9 = v4 - (v7 + 56);
  if (v4 != v7 + 56)
    memmove((void *)(v7 + 48), (const void *)(v7 + 56), v4 - (v7 + 56));
  *((_QWORD *)this + 2) = v8 + v9;
  OZChannelFolder::removeDescendant(v6->var6, v6);
  if (v10)
    OZLayeredMaterialSequenceFolder::deleteLayerSequenceFolders(v10);
  return (*((uint64_t (**)(OZChannelBase *))v6->var0 + 1))(v6);
}

BOOL TXSequenceChannels::removeTrackingChannel(TXSequenceChannels *this, int a2)
{
  OZChannelFolder *v3;
  uint64_t Descendant;
  OZChannelBase *v5;

  v3 = (OZChannelFolder *)((char *)this + 32);
  Descendant = OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 32), a2);
  if (Descendant)
  {
    v5 = (OZChannelBase *)OZChannelFolder::getDescendant(v3, a2);
    OZChannelFolder::removeDescendant(v3, v5);
  }
  return Descendant != 0;
}

void TXSequenceChannels::getChannelList(uint64_t a1, char **a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;

  v4 = a1 + 32;
  v6 = a2 + 2;
  v5 = (unint64_t)a2[2];
  v7 = a2[1];
  if ((unint64_t)v7 >= v5)
  {
    v9 = (v7 - *a2) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_117;
    v10 = v5 - (_QWORD)*a2;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v4;
    v8 = v14 + 8;
    v17 = *a2;
    v16 = a2[1];
    if (v16 != *a2)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *a2;
    }
    *a2 = v14;
    a2[1] = (char *)v8;
    a2[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_QWORD *)v7 = v4;
    v8 = v7 + 8;
  }
  a2[1] = (char *)v8;
  v19 = a1 + 26000;
  v20 = (unint64_t)a2[2];
  if ((unint64_t)v8 >= v20)
  {
    v22 = ((char *)v8 - *a2) >> 3;
    if ((unint64_t)(v22 + 1) >> 61)
      goto LABEL_117;
    v23 = v20 - (_QWORD)*a2;
    v24 = v23 >> 2;
    if (v23 >> 2 <= (unint64_t)(v22 + 1))
      v24 = v22 + 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v25);
    else
      v26 = 0;
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *(_QWORD *)v27 = v19;
    v21 = v27 + 8;
    v30 = *a2;
    v29 = a2[1];
    if (v29 != *a2)
    {
      do
      {
        v31 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *((_QWORD *)v27 - 1) = v31;
        v27 -= 8;
      }
      while (v29 != v30);
      v29 = *a2;
    }
    *a2 = v27;
    a2[1] = v21;
    a2[2] = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v8 = v19;
    v21 = (char *)(v8 + 1);
  }
  a2[1] = v21;
  v32 = a1 + 3560;
  v33 = (unint64_t)a2[2];
  if ((unint64_t)v21 >= v33)
  {
    v35 = (v21 - *a2) >> 3;
    if ((unint64_t)(v35 + 1) >> 61)
      goto LABEL_117;
    v36 = v33 - (_QWORD)*a2;
    v37 = v36 >> 2;
    if (v36 >> 2 <= (unint64_t)(v35 + 1))
      v37 = v35 + 1;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    if (v38)
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v38);
    else
      v39 = 0;
    v40 = &v39[8 * v35];
    v41 = &v39[8 * v38];
    *(_QWORD *)v40 = v32;
    v34 = v40 + 8;
    v43 = *a2;
    v42 = a2[1];
    if (v42 != *a2)
    {
      do
      {
        v44 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *((_QWORD *)v40 - 1) = v44;
        v40 -= 8;
      }
      while (v42 != v43);
      v42 = *a2;
    }
    *a2 = v40;
    a2[1] = v34;
    a2[2] = v41;
    if (v42)
      operator delete(v42);
  }
  else
  {
    *(_QWORD *)v21 = v32;
    v34 = v21 + 8;
  }
  a2[1] = v34;
  v45 = a1 + 8392;
  v46 = (unint64_t)a2[2];
  if ((unint64_t)v34 >= v46)
  {
    v48 = (v34 - *a2) >> 3;
    if ((unint64_t)(v48 + 1) >> 61)
      goto LABEL_117;
    v49 = v46 - (_QWORD)*a2;
    v50 = v49 >> 2;
    if (v49 >> 2 <= (unint64_t)(v48 + 1))
      v50 = v48 + 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v50;
    if (v51)
      v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v51);
    else
      v52 = 0;
    v53 = &v52[8 * v48];
    v54 = &v52[8 * v51];
    *(_QWORD *)v53 = v45;
    v47 = v53 + 8;
    v56 = *a2;
    v55 = a2[1];
    if (v55 != *a2)
    {
      do
      {
        v57 = *((_QWORD *)v55 - 1);
        v55 -= 8;
        *((_QWORD *)v53 - 1) = v57;
        v53 -= 8;
      }
      while (v55 != v56);
      v55 = *a2;
    }
    *a2 = v53;
    a2[1] = v47;
    a2[2] = v54;
    if (v55)
      operator delete(v55);
  }
  else
  {
    *(_QWORD *)v34 = v45;
    v47 = v34 + 8;
  }
  a2[1] = v47;
  v58 = a1 + 13632;
  v59 = (unint64_t)a2[2];
  if ((unint64_t)v47 >= v59)
  {
    v61 = (v47 - *a2) >> 3;
    if ((unint64_t)(v61 + 1) >> 61)
      goto LABEL_117;
    v62 = v59 - (_QWORD)*a2;
    v63 = v62 >> 2;
    if (v62 >> 2 <= (unint64_t)(v61 + 1))
      v63 = v61 + 1;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v64 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v64 = v63;
    if (v64)
      v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v64);
    else
      v65 = 0;
    v66 = &v65[8 * v61];
    v67 = &v65[8 * v64];
    *(_QWORD *)v66 = v58;
    v60 = v66 + 8;
    v69 = *a2;
    v68 = a2[1];
    if (v68 != *a2)
    {
      do
      {
        v70 = *((_QWORD *)v68 - 1);
        v68 -= 8;
        *((_QWORD *)v66 - 1) = v70;
        v66 -= 8;
      }
      while (v68 != v69);
      v68 = *a2;
    }
    *a2 = v66;
    a2[1] = v60;
    a2[2] = v67;
    if (v68)
      operator delete(v68);
  }
  else
  {
    *(_QWORD *)v47 = v58;
    v60 = v47 + 8;
  }
  a2[1] = v60;
  v71 = a1 + 20016;
  v72 = (unint64_t)a2[2];
  if ((unint64_t)v60 < v72)
  {
    *(_QWORD *)v60 = v71;
    v73 = v60 + 8;
    goto LABEL_97;
  }
  v74 = (v60 - *a2) >> 3;
  if ((unint64_t)(v74 + 1) >> 61)
LABEL_117:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v75 = v72 - (_QWORD)*a2;
  v76 = v75 >> 2;
  if (v75 >> 2 <= (unint64_t)(v74 + 1))
    v76 = v74 + 1;
  if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
    v77 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v77 = v76;
  if (v77)
    v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v77);
  else
    v78 = 0;
  v79 = &v78[8 * v74];
  v80 = &v78[8 * v77];
  *(_QWORD *)v79 = v71;
  v73 = v79 + 8;
  v82 = *a2;
  v81 = a2[1];
  if (v81 != *a2)
  {
    do
    {
      v83 = *((_QWORD *)v81 - 1);
      v81 -= 8;
      *((_QWORD *)v79 - 1) = v83;
      v79 -= 8;
    }
    while (v81 != v82);
    v81 = *a2;
  }
  *a2 = v79;
  a2[1] = v73;
  a2[2] = v80;
  if (v81)
    operator delete(v81);
LABEL_97:
  a2[1] = v73;
  v84 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(*(_QWORD *)(a1 + 16) - v84) >= 0x31)
  {
    v85 = 6;
    do
    {
      if ((unint64_t)v73 >= *v6)
      {
        v86 = (v73 - *a2) >> 3;
        if ((unint64_t)(v86 + 1) >> 61)
          goto LABEL_117;
        v87 = *v6 - (_QWORD)*a2;
        v88 = v87 >> 2;
        if (v87 >> 2 <= (unint64_t)(v86 + 1))
          v88 = v86 + 1;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v88;
        if (v89)
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v89);
        else
          v90 = 0;
        v91 = &v90[8 * v86];
        *(_QWORD *)v91 = *(_QWORD *)(v84 + 8 * v85);
        v73 = v91 + 8;
        v93 = *a2;
        v92 = a2[1];
        if (v92 != *a2)
        {
          do
          {
            v94 = *((_QWORD *)v92 - 1);
            v92 -= 8;
            *((_QWORD *)v91 - 1) = v94;
            v91 -= 8;
          }
          while (v92 != v93);
          v92 = *a2;
        }
        *a2 = v91;
        a2[1] = v73;
        a2[2] = &v90[8 * v89];
        if (v92)
          operator delete(v92);
      }
      else
      {
        *(_QWORD *)v73 = *(_QWORD *)(v84 + 8 * v85);
        v73 += 8;
      }
      a2[1] = v73;
      v85 = (v85 + 1);
      v84 = *(_QWORD *)(a1 + 8);
    }
    while (v85 < (*(_QWORD *)(a1 + 16) - v84) >> 3);
  }
}

char *std::vector<OZChannelBase *>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1B28DA05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *TXSequenceChannels::findChannel(TXSequenceChannels *this, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *result;
  int v10;
  BOOL v11;
  _BOOL4 v12;
  OZChannelFolder *v13;
  const void *Descendant;
  OZChannelFolder *v15;

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  if (v4 == v5)
    return 0;
  while (1)
  {
    result = *(_BYTE **)v4;
    v10 = *(_DWORD *)(*(_QWORD *)v4 + 24);
    if (v10 == a2)
      break;
    v11 = !a3 || v10 == a3;
    v12 = v11;
    if ((result[57] & 0x10) != 0 && v12)
    {
      result = (_BYTE *)OZChannelFolder::getDescendant(v13, a2);
      if (result)
        break;
      if (*((_DWORD *)v13 + 6) == a3)
      {
        Descendant = (const void *)OZChannelFolder::getDescendant(v13, a4);
        if (Descendant)
        {
          if (v15)
          {
            result = (_BYTE *)OZChannelFolder::getDescendant(v15, a2);
            if (result)
              break;
          }
        }
      }
    }
    v4 += 8;
    if (v4 == v5)
      return 0;
  }
  return result;
}

uint64_t TXSequenceChannels::getColorChannelID(TXSequenceChannels *this)
{
  if (this > 3)
    return 0;
  else
    return dword_1B3054030[(int)this];
}

void *TXSequenceChannels::materialSequenceFolder(TXSequenceChannels *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  const void *v5;

  v2 = *((_QWORD *)this + 1);
  v3 = (*((_QWORD *)this + 2) - v2) >> 3;
  v4 = (a2 + 6);
  if (v3 < v4)
    return 0;
  if (v3 <= v4)
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v5 = *(const void **)(v2 + 8 * v4);
  if (v5)
  else
    return 0;
}

void TXSequenceChannels::renameMaterialAtIndex(TXSequenceChannels *this, const PCString *a2, int a3, int a4)
{
  OZChannelBase *v6;
  OZChannelBase *v7;
  PCString v8;

  v6 = (OZChannelBase *)TXSequenceChannels::materialSequenceFolder(this, a3);
  if (v6)
  {
    v7 = v6;
    if (a4)
    {
      PCURL::PCURL((PCURL *)&v8, CFSTR("Undo Name Change"));
      (*((void (**)(OZChannelBase *, PCString *))v7->var0 + 43))(v7, &v8);
      PCString::~PCString(&v8);
    }
    OZChannelBase::setName(v7, a2, 0);
  }
}

void sub_1B28DA28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

char *TXSequenceChannels::addMaterialChannels(TXSequenceChannels *this, OZMaterialBase *a2, unsigned int a3)
{
  unsigned int ValueAsInt;
  unsigned int v7;
  OZLayeredMaterial *v8;
  OZLayeredMaterial *v9;
  const void *v10;
  OZChannelFolder *v11;
  OZChannelBase *SequenceChannelFolder;
  char *v13;
  OZChannelBase *v15;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 720), MEMORY[0x1E0CA2E68], 0.0);
  if (a2
    && (v7 = ValueAsInt,
  {
    v9 = v8;
    v10 = (const void *)*((_QWORD *)this + 3395);
    if (v10)
    else
      v11 = 0;
    SequenceChannelFolder = (OZChannelBase *)OZLayeredMaterial::makeSequenceChannelFolder(v9, v11, v7);
    (*((void (**)(OZChannelBase *, _QWORD, _QWORD))SequenceChannelFolder->var0 + 13))(SequenceChannelFolder, 0, 0);
    OZChannelBase::setFlag(SequenceChannelFolder, 0x300000002, 0);
  }
  else
  {
    SequenceChannelFolder = 0;
  }
  v13 = (char *)(*((_QWORD *)this + 1) + 8 * a3 + 48);
  v15 = SequenceChannelFolder;
  return std::vector<OZChannelBase *>::insert((uint64_t)this + 8, v13, &v15);
}

char *std::vector<OZChannelBase *>::insert(uint64_t a1, char *__src, _QWORD *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v15 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 3;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 2 > v15)
      v15 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[8 * v16];
    v23 = v22;
    v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long *>::push_back(&__p, a3);
    v4 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v10 = __src + 8;
    v11 = v6 - 8;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    *(_QWORD *)v4 = *a3;
  }
  return v4;
}

void sub_1B28DA504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *TXSequenceChannels::moveMaterialLayerChannels(TXSequenceChannels *this, unsigned int a2, unsigned int a3, int a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  OZChannelBase *v12;
  const OZChannelBase *v13;
  char *result;

  v5 = (a5 + 6);
  v6 = *((_QWORD *)this + 1);
  if (v5 >= (*((_QWORD *)this + 2) - v6) >> 3
    || (v7 = *(_QWORD *)(v6 + 8 * v5), v8 = *(uint64_t **)(v7 + 112), v9 = *v8, v10 = (v8[1] - *v8) >> 3, v10 <= a2)
    || v10 <= a3)
  {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  v12 = *(OZChannelBase **)(v9 + 8 * a2);
  v13 = *(const OZChannelBase **)(v9 + 8 * a3);
  result = (char *)OZChannelFolder::removeDescendant((OZChannelFolder *)v7, v12);
  if (a4 == 2)
    return OZChannelFolder::insertDescendantBefore((OZChannelFolder *)v7, v13, v12);
  if (a4 == 3)
    return OZChannelFolder::insertDescendantAfter((OZChannelFolder *)v7, v13, v12);
  return result;
}

OZChannelFolder *TXSequenceChannels::removeMaterialLayerChannelsAtIndex(TXSequenceChannels *this, unsigned int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  OZChannelBase *v7;
  OZChannelFolder *result;

  v3 = *((_QWORD *)this + 1);
  v4 = (a3 + 6);
  if (v4 >= (*((_QWORD *)this + 2) - v3) >> 3)
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v5 = *(_QWORD *)(v3 + 8 * v4);
  v6 = *(_QWORD **)(v5 + 112);
  if (a2 >= (unint64_t)((uint64_t)(v6[1] - *v6) >> 3))
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v7 = *(OZChannelBase **)(*v6 + 8 * a2);
  result = OZChannelFolder::removeDescendant((OZChannelFolder *)v5, v7);
  if (v7)
    return (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 1))(v7);
  return result;
}

uint64_t TXSequenceChannels::materialLayerSequenceFolder(TXSequenceChannels *this, unsigned int a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)*((_QWORD *)TXSequenceChannels::materialSequenceFolder(this, a3) + 14);
  if (v4)
    v5 = (v4[1] - *v4) >> 3;
  else
    LODWORD(v5) = 0;
  if (v5 < a2)
    return 0;
  if (a2 >= (unint64_t)((uint64_t)(v4[1] - *v4) >> 3))
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(*v4 + 8 * a2);
}

void OZChannelAngle::OZChannelAngle(OZChannelAngle *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *OZChannelAngle_FactoryBase;
  OZChannelAngle *v15;
  OZChannelAngle *OZChannelAngleInfo;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelAngle_FactoryBase = (OZFactory *)getOZChannelAngle_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelAngle_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&off_1E6551728;
  this->var2 = (void **)&unk_1E6551A88;
  OZChannelAngleInfo = (OZChannelAngle *)OZChannelAngle::createOZChannelAngleInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelAngle::_OZChannelAngleInfo;
    this->var17 = (OZChannelInfo *)OZChannelAngle::_OZChannelAngleInfo;
  }
  this->var16 = var17;
  OZChannelAngle::createOZChannelAngleImpl(OZChannelAngleInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelAngle::_OZChannelAngleImpl;
    this->var15 = (OZChannelImpl *)OZChannelAngle::_OZChannelAngleImpl;
  }
  this->var14 = var15;
}

void sub_1B28DA7C0(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelAngle::createOZChannelAngleInfo(OZChannelAngle *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelAngle::createOZChannelAngleInfo(void)::_OZChannelAngleInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelAngle::createOZChannelAngleInfo(void)::_OZChannelAngleInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelAngle::createOZChannelAngleInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelAngle::_OZChannelAngleInfo;
}

uint64_t OZChannelAngle::createOZChannelAngleImpl(OZChannelAngle *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelAngle::createOZChannelAngleImpl(void)::_OZChannelAngleImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelAngle::createOZChannelAngleImpl(void)::_OZChannelAngleImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelAngle::createOZChannelAngleImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelAngle::_OZChannelAngleImpl;
}

void std::__call_once_param<std::tuple<OZChannelAngle::createOZChannelAngleInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelAngleInfo *v0;

  if (!OZChannelAngle::_OZChannelAngleInfo)
  {
    v0 = (OZChannelAngleInfo *)operator new();
    OZChannelAngleInfo::OZChannelAngleInfo(v0);
    OZChannelAngle::_OZChannelAngleInfo = (uint64_t)v0;
  }
}

void sub_1B28DA8E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelAngleInfo::OZChannelAngleInfo(OZChannelAngleInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -3.40282347e38, 3.40282347e38, 0.0174532925, 0.000174532925, 57.2957795, "°");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E64F8128;
  *((_QWORD *)this + 10) = &unk_1E64F8148;
}

void sub_1B28DA980(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelAngle::createOZChannelAngleImpl(void)::{lambda(void)#1} &&>>()
{
  OZChannelAngle::createOZChannelAngleImpl(void)::{lambda(void)#1}::operator()();
}

void OZChannelAngle::createOZChannelAngleImpl(void)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  OZCurveAngle *v1;

  if (!OZChannelAngle::_OZChannelAngleImpl)
  {
    v0 = operator new();
    v1 = (OZCurveAngle *)operator new();
    OZCurveAngle::OZCurveAngle(v1, 0.0);
    OZChannelImpl::OZChannelImpl((OZChannelImpl *)v0, (OZCurve *)v1, 0.0, 1, 1);
    PCSingleton::PCSingleton((PCSingleton *)(v0 + 40), 100);
    *(_QWORD *)v0 = &unk_1E64F81A0;
    *(_QWORD *)(v0 + 40) = &unk_1E64F81C0;
    OZChannelAngle::_OZChannelAngleImpl = v0;
  }
}

void sub_1B28DAA50(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelAngleImpl::~OZChannelAngleImpl(OZChannelAngleImpl *this)
{
  PCSingleton::~PCSingleton((OZChannelAngleImpl *)((char *)this + 40));
  OZChannelImpl::~OZChannelImpl((OZChannelImpl *)this);
}

{
  PCSingleton::~PCSingleton((OZChannelAngleImpl *)((char *)this + 40));
  OZChannelImpl::~OZChannelImpl((OZChannelImpl *)this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelAngleImpl::~OZChannelAngleImpl(OZChannelAngleImpl *this)
{
  OZChannelImpl *v1;

  v1 = (OZChannelImpl *)((char *)this - 40);
  PCSingleton::~PCSingleton(this);
  OZChannelImpl::~OZChannelImpl(v1);
}

{
  OZChannelImpl *v1;

  v1 = (OZChannelImpl *)((char *)this - 40);
  PCSingleton::~PCSingleton(this);
  OZChannelImpl::~OZChannelImpl(v1);
  JUMPOUT(0x1B5E29170);
}

void OZCurveAngle::OZCurveAngle(OZCurveAngle *this, double a2)
{
  OZCurveAngleSplineState *v3;
  uint64_t Instance;
  uint64_t v5;

  OZCurve::OZCurve((OZCurve *)this, -1.79769313e308, 1.79769313e308, 0.000174532925, a2);
  *(_QWORD *)v3 = &unk_1E64F8218;
  Instance = OZCurveAngleSplineState::getInstance(v3);
  if (Instance)
    v5 = Instance + 8;
  else
    v5 = 0;
  OZCurve::setSplineState((uint64_t)this, v5);
}

void sub_1B28DABD0(_Unwind_Exception *a1)
{
  OZCurve *v1;

  OZCurve::~OZCurve(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCurveAngleSplineState::getInstance(OZCurveAngleSplineState *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCurveAngleSplineState::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCurveAngleSplineState::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCurveAngleSplineState::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCurveAngleSplineState::_instance;
}

void OZCurveAngle::~OZCurveAngle(OZCurve *this)
{
  OZCurve::~OZCurve(this);
  JUMPOUT(0x1B5E29170);
}

OZCurve *OZCurveAngle::getCurveWorkingCopy(const OZCurve *this)
{
  OZCurve *v2;

  v2 = (OZCurve *)operator new();
  OZCurve::OZCurve(v2, this, 1);
  *(_QWORD *)v2 = &unk_1E64F8218;
  return v2;
}

void sub_1B28DACC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

OZCurve *OZCurveAngle::cloneCurve(const OZCurve *this)
{
  OZCurve *v2;

  v2 = (OZCurve *)operator new();
  OZCurve::OZCurve(v2, this, 0);
  *(_QWORD *)v2 = &unk_1E64F8218;
  return v2;
}

void sub_1B28DAD40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZCurveAngleSplineState::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  uint64_t v0;

  v0 = operator new();
  OZSplineState::OZSplineState((OZSplineState *)(v0 + 8));
  PCSingleton::PCSingleton((PCSingleton *)v0, 200);
  *(_QWORD *)v0 = &unk_1E64F8730;
  OZCurveAngleSplineState::_instance = v0;
}

void sub_1B28DADCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C401D9FA3FDLL);
  _Unwind_Resume(a1);
}

void OZCurveAngleSplineState::~OZCurveAngleSplineState(OZCurveAngleSplineState *this)
{
  PCSingleton::~PCSingleton(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t TXSequenceChannels::TXSequenceChannels_trackingImpl::getInstance(TXSequenceChannels::TXSequenceChannels_trackingImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_trackingImpl::getInstance(void)::TXSequenceChannels_trackingImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_trackingImpl::getInstance(void)::TXSequenceChannels_trackingImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_trackingImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_trackingImpl::_TXSequenceChannels_tracking;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_trackingImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!TXSequenceChannels::TXSequenceChannels_trackingImpl::_TXSequenceChannels_tracking)
  {
    v0 = (OZChannelPercent *)operator new();
    TXSequenceChannels::TXSequenceChannels_trackingImpl::TXSequenceChannels_trackingImpl(v0);
    TXSequenceChannels::TXSequenceChannels_trackingImpl::_TXSequenceChannels_tracking = (uint64_t)v0;
  }
}

void sub_1B28DAEC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *TXSequenceChannels::TXSequenceChannels_trackingImpl::TXSequenceChannels_trackingImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E64F8788;
  this->var5 = (PCString *)&unk_1E64F87A8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1000.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1000.0);
  return this;
}

void sub_1B28DAF74(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

OZCurvePercent *OZChannelPercent::createOZChannelPercentCurve(OZChannelPercent *this, double a2)
{
  OZCurvePercent *v3;

  v3 = (OZCurvePercent *)operator new();
  OZCurvePercent::OZCurvePercent(v3, a2);
  return v3;
}

void sub_1B28DAFE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

void OZCurvePercent::OZCurvePercent(OZCurvePercent *this, double a2)
{
  OZCurvePercentSplineState *v3;
  uint64_t Instance;
  uint64_t v5;

  OZCurve::OZCurve((OZCurve *)this, 0.0, 1.0, 0.0001, a2);
  *(_QWORD *)v3 = &unk_1E64F8800;
  Instance = OZCurvePercentSplineState::getInstance(v3);
  if (Instance)
    v5 = Instance + 8;
  else
    v5 = 0;
  OZCurve::setSplineState((uint64_t)this, v5);
}

void sub_1B28DB068(_Unwind_Exception *a1)
{
  OZCurve *v1;

  OZCurve::~OZCurve(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCurvePercentSplineState::getInstance(OZCurvePercentSplineState *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCurvePercentSplineState::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCurvePercentSplineState::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCurvePercentSplineState::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCurvePercentSplineState::_instance;
}

OZCurve *OZCurvePercent::getCurveWorkingCopy(const OZCurve *this)
{
  OZCurve *v2;

  v2 = (OZCurve *)operator new();
  OZCurve::OZCurve(v2, this, 1);
  *(_QWORD *)v2 = &unk_1E64F8800;
  return v2;
}

void sub_1B28DB134(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

OZCurve *OZCurvePercent::cloneCurve(const OZCurve *this)
{
  OZCurve *v2;

  v2 = (OZCurve *)operator new();
  OZCurve::OZCurve(v2, this, 0);
  *(_QWORD *)v2 = &unk_1E64F8800;
  return v2;
}

void sub_1B28DB1B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_trackingInfo::getInstance(TXSequenceChannels::TXSequenceChannels_trackingInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_trackingInfo::getInstance(void)::TXSequenceChannels_trackingInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_trackingInfo::getInstance(void)::TXSequenceChannels_trackingInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_trackingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_trackingInfo::_TXSequenceChannels_trackingInfo;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_trackingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_trackingInfo *v0;

  if (!TXSequenceChannels::TXSequenceChannels_trackingInfo::_TXSequenceChannels_trackingInfo)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_trackingInfo *)operator new();
    TXSequenceChannels::TXSequenceChannels_trackingInfo::TXSequenceChannels_trackingInfo(v0);
    TXSequenceChannels::TXSequenceChannels_trackingInfo::_TXSequenceChannels_trackingInfo = (uint64_t)v0;
  }
}

void sub_1B28DB280(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_trackingInfo *TXSequenceChannels::TXSequenceChannels_trackingInfo::TXSequenceChannels_trackingInfo(TXSequenceChannels::TXSequenceChannels_trackingInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_trackingInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64F8D70;
  *((_QWORD *)this + 10) = &unk_1E64F8D90;
  return this;
}

void sub_1B28DB334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_faceBlurImpl::getInstance(TXSequenceChannels::TXSequenceChannels_faceBlurImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_faceBlurImpl::getInstance(void)::TXSequenceChannels_faceBlurImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_faceBlurImpl::getInstance(void)::TXSequenceChannels_faceBlurImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_faceBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_faceBlurImpl::_TXSequenceChannels_faceBlur;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_faceBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_faceBlurImpl *v0;

  if (!TXSequenceChannels::TXSequenceChannels_faceBlurImpl::_TXSequenceChannels_faceBlur)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_faceBlurImpl *)operator new();
    TXSequenceChannels::TXSequenceChannels_faceBlurImpl::TXSequenceChannels_faceBlurImpl(v0);
    TXSequenceChannels::TXSequenceChannels_faceBlurImpl::_TXSequenceChannels_faceBlur = (uint64_t)v0;
  }
}

void sub_1B28DB400(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_faceBlurImpl *TXSequenceChannels::TXSequenceChannels_faceBlurImpl::TXSequenceChannels_faceBlurImpl(TXSequenceChannels::TXSequenceChannels_faceBlurImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_faceBlurImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64F8DE8;
  *((_QWORD *)this + 5) = &unk_1E64F8E08;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B28DB4B0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

OZCurveDouble *OZChannelDouble::createOZChannelDoubleCurve(OZChannelDouble *this, double a2)
{
  OZCurveDouble *v3;

  v3 = (OZCurveDouble *)operator new();
  OZCurveDouble::OZCurveDouble(v3, a2);
  return v3;
}

void sub_1B28DB520(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_faceBlurInfo::getInstance(TXSequenceChannels::TXSequenceChannels_faceBlurInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_faceBlurInfo::getInstance(void)::TXSequenceChannels_faceBlurInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_faceBlurInfo::getInstance(void)::TXSequenceChannels_faceBlurInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_faceBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_faceBlurInfo::_TXSequenceChannels_faceBlurInfo;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_faceBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_faceBlurInfo *v0;

  if (!TXSequenceChannels::TXSequenceChannels_faceBlurInfo::_TXSequenceChannels_faceBlurInfo)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_faceBlurInfo *)operator new();
    TXSequenceChannels::TXSequenceChannels_faceBlurInfo::TXSequenceChannels_faceBlurInfo(v0);
    TXSequenceChannels::TXSequenceChannels_faceBlurInfo::_TXSequenceChannels_faceBlurInfo = (uint64_t)v0;
  }
}

void sub_1B28DB5EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_faceBlurInfo *TXSequenceChannels::TXSequenceChannels_faceBlurInfo::TXSequenceChannels_faceBlurInfo(TXSequenceChannels::TXSequenceChannels_faceBlurInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_faceBlurInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64F8E60;
  *((_QWORD *)this + 10) = &unk_1E64F8E80;
  return this;
}

void sub_1B28DB698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_outlineBlurImpl::getInstance(TXSequenceChannels::TXSequenceChannels_outlineBlurImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_outlineBlurImpl::getInstance(void)::TXSequenceChannels_outlineBlurImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_outlineBlurImpl::getInstance(void)::TXSequenceChannels_outlineBlurImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_outlineBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_outlineBlurImpl::_TXSequenceChannels_outlineBlur;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_outlineBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_outlineBlurImpl *v0;

  if (!TXSequenceChannels::TXSequenceChannels_outlineBlurImpl::_TXSequenceChannels_outlineBlur)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_outlineBlurImpl *)operator new();
    TXSequenceChannels::TXSequenceChannels_outlineBlurImpl::TXSequenceChannels_outlineBlurImpl(v0);
    TXSequenceChannels::TXSequenceChannels_outlineBlurImpl::_TXSequenceChannels_outlineBlur = (uint64_t)v0;
  }
}

void sub_1B28DB764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_outlineBlurImpl *TXSequenceChannels::TXSequenceChannels_outlineBlurImpl::TXSequenceChannels_outlineBlurImpl(TXSequenceChannels::TXSequenceChannels_outlineBlurImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_outlineBlurImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64F8ED8;
  *((_QWORD *)this + 5) = &unk_1E64F8EF8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B28DB814(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_outlineBlurInfo::getInstance(TXSequenceChannels::TXSequenceChannels_outlineBlurInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_outlineBlurInfo::getInstance(void)::TXSequenceChannels_outlineBlurInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_outlineBlurInfo::getInstance(void)::TXSequenceChannels_outlineBlurInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_outlineBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_outlineBlurInfo::_TXSequenceChannels_outlineBlurInfo;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_outlineBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_outlineBlurInfo *v0;

  if (!TXSequenceChannels::TXSequenceChannels_outlineBlurInfo::_TXSequenceChannels_outlineBlurInfo)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_outlineBlurInfo *)operator new();
    TXSequenceChannels::TXSequenceChannels_outlineBlurInfo::TXSequenceChannels_outlineBlurInfo(v0);
    TXSequenceChannels::TXSequenceChannels_outlineBlurInfo::_TXSequenceChannels_outlineBlurInfo = (uint64_t)v0;
  }
}

void sub_1B28DB8E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_outlineBlurInfo *TXSequenceChannels::TXSequenceChannels_outlineBlurInfo::TXSequenceChannels_outlineBlurInfo(TXSequenceChannels::TXSequenceChannels_outlineBlurInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_outlineBlurInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64F8F50;
  *((_QWORD *)this + 10) = &unk_1E64F8F70;
  return this;
}

void sub_1B28DB98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_outlineWidthImpl::getInstance(TXSequenceChannels::TXSequenceChannels_outlineWidthImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_outlineWidthImpl::getInstance(void)::TXSequenceChannels_outlineWidthImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_outlineWidthImpl::getInstance(void)::TXSequenceChannels_outlineWidthImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_outlineWidthImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_outlineWidthImpl::_TXSequenceChannels_outlineWidth;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_outlineWidthImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_outlineWidthImpl *v0;

  if (!TXSequenceChannels::TXSequenceChannels_outlineWidthImpl::_TXSequenceChannels_outlineWidth)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_outlineWidthImpl *)operator new();
    TXSequenceChannels::TXSequenceChannels_outlineWidthImpl::TXSequenceChannels_outlineWidthImpl(v0);
    TXSequenceChannels::TXSequenceChannels_outlineWidthImpl::_TXSequenceChannels_outlineWidth = (uint64_t)v0;
  }
}

void sub_1B28DBA58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_outlineWidthImpl *TXSequenceChannels::TXSequenceChannels_outlineWidthImpl::TXSequenceChannels_outlineWidthImpl(TXSequenceChannels::TXSequenceChannels_outlineWidthImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_outlineWidthImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64F8FC8;
  *((_QWORD *)this + 5) = &unk_1E64F8FE8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B28DBB08(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_outlineWidthInfo::getInstance(TXSequenceChannels::TXSequenceChannels_outlineWidthInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_outlineWidthInfo::getInstance(void)::TXSequenceChannels_outlineWidthInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_outlineWidthInfo::getInstance(void)::TXSequenceChannels_outlineWidthInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_outlineWidthInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_outlineWidthInfo::_TXSequenceChannels_outlineWidthInfo;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_outlineWidthInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_outlineWidthInfo *v0;

  if (!TXSequenceChannels::TXSequenceChannels_outlineWidthInfo::_TXSequenceChannels_outlineWidthInfo)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_outlineWidthInfo *)operator new();
    TXSequenceChannels::TXSequenceChannels_outlineWidthInfo::TXSequenceChannels_outlineWidthInfo(v0);
    TXSequenceChannels::TXSequenceChannels_outlineWidthInfo::_TXSequenceChannels_outlineWidthInfo = (uint64_t)v0;
  }
}

void sub_1B28DBBD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_outlineWidthInfo *TXSequenceChannels::TXSequenceChannels_outlineWidthInfo::TXSequenceChannels_outlineWidthInfo(TXSequenceChannels::TXSequenceChannels_outlineWidthInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_outlineWidthInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64F9040;
  *((_QWORD *)this + 10) = &unk_1E64F9060;
  return this;
}

void sub_1B28DBC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_glowBlurImpl::getInstance(TXSequenceChannels::TXSequenceChannels_glowBlurImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_glowBlurImpl::getInstance(void)::TXSequenceChannels_glowBlurImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_glowBlurImpl::getInstance(void)::TXSequenceChannels_glowBlurImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_glowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_glowBlurImpl::_TXSequenceChannels_glowBlur;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_glowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_glowBlurImpl *v0;

  if (!TXSequenceChannels::TXSequenceChannels_glowBlurImpl::_TXSequenceChannels_glowBlur)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_glowBlurImpl *)operator new();
    TXSequenceChannels::TXSequenceChannels_glowBlurImpl::TXSequenceChannels_glowBlurImpl(v0);
    TXSequenceChannels::TXSequenceChannels_glowBlurImpl::_TXSequenceChannels_glowBlur = (uint64_t)v0;
  }
}

void sub_1B28DBD50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_glowBlurImpl *TXSequenceChannels::TXSequenceChannels_glowBlurImpl::TXSequenceChannels_glowBlurImpl(TXSequenceChannels::TXSequenceChannels_glowBlurImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_glowBlurImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64F90B8;
  *((_QWORD *)this + 5) = &unk_1E64F90D8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B28DBE00(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_glowBlurInfo::getInstance(TXSequenceChannels::TXSequenceChannels_glowBlurInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_glowBlurInfo::getInstance(void)::TXSequenceChannels_glowBlurInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_glowBlurInfo::getInstance(void)::TXSequenceChannels_glowBlurInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_glowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_glowBlurInfo::_TXSequenceChannels_glowBlurInfo;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_glowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_glowBlurInfo *v0;

  if (!TXSequenceChannels::TXSequenceChannels_glowBlurInfo::_TXSequenceChannels_glowBlurInfo)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_glowBlurInfo *)operator new();
    TXSequenceChannels::TXSequenceChannels_glowBlurInfo::TXSequenceChannels_glowBlurInfo(v0);
    TXSequenceChannels::TXSequenceChannels_glowBlurInfo::_TXSequenceChannels_glowBlurInfo = (uint64_t)v0;
  }
}

void sub_1B28DBECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_glowBlurInfo *TXSequenceChannels::TXSequenceChannels_glowBlurInfo::TXSequenceChannels_glowBlurInfo(TXSequenceChannels::TXSequenceChannels_glowBlurInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_glowBlurInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64F9130;
  *((_QWORD *)this + 10) = &unk_1E64F9150;
  return this;
}

void sub_1B28DBF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl::getInstance(TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl::getInstance(void)::TXSequenceChannels_glowBlurObsoleteImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl::getInstance(void)::TXSequenceChannels_glowBlurObsoleteImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl::_TXSequenceChannels_glowBlurObsolete;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl *v0;

  if (!TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl::_TXSequenceChannels_glowBlurObsolete)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl *)operator new();
    TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl::TXSequenceChannels_glowBlurObsoleteImpl(v0);
    TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl::_TXSequenceChannels_glowBlurObsolete = (uint64_t)v0;
  }
}

void sub_1B28DC044(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl *TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl::TXSequenceChannels_glowBlurObsoleteImpl(TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64F91A8;
  *((_QWORD *)this + 5) = &unk_1E64F91C8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B28DC0F8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_glowRadiusImpl::getInstance(TXSequenceChannels::TXSequenceChannels_glowRadiusImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_glowRadiusImpl::getInstance(void)::TXSequenceChannels_glowRadiusImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_glowRadiusImpl::getInstance(void)::TXSequenceChannels_glowRadiusImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_glowRadiusImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_glowRadiusImpl::_TXSequenceChannels_glowRadius;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_glowRadiusImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_glowRadiusImpl *v0;

  if (!TXSequenceChannels::TXSequenceChannels_glowRadiusImpl::_TXSequenceChannels_glowRadius)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_glowRadiusImpl *)operator new();
    TXSequenceChannels::TXSequenceChannels_glowRadiusImpl::TXSequenceChannels_glowRadiusImpl(v0);
    TXSequenceChannels::TXSequenceChannels_glowRadiusImpl::_TXSequenceChannels_glowRadius = (uint64_t)v0;
  }
}

void sub_1B28DC1C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_glowRadiusImpl *TXSequenceChannels::TXSequenceChannels_glowRadiusImpl::TXSequenceChannels_glowRadiusImpl(TXSequenceChannels::TXSequenceChannels_glowRadiusImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_glowRadiusImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64F9220;
  *((_QWORD *)this + 5) = &unk_1E64F9240;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B28DC274(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_glowRadiusInfo::getInstance(TXSequenceChannels::TXSequenceChannels_glowRadiusInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_glowRadiusInfo::getInstance(void)::TXSequenceChannels_glowRadiusInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_glowRadiusInfo::getInstance(void)::TXSequenceChannels_glowRadiusInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_glowRadiusInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_glowRadiusInfo::_TXSequenceChannels_glowRadiusInfo;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_glowRadiusInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_glowRadiusInfo *v0;

  if (!TXSequenceChannels::TXSequenceChannels_glowRadiusInfo::_TXSequenceChannels_glowRadiusInfo)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_glowRadiusInfo *)operator new();
    TXSequenceChannels::TXSequenceChannels_glowRadiusInfo::TXSequenceChannels_glowRadiusInfo(v0);
    TXSequenceChannels::TXSequenceChannels_glowRadiusInfo::_TXSequenceChannels_glowRadiusInfo = (uint64_t)v0;
  }
}

void sub_1B28DC340(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_glowRadiusInfo *TXSequenceChannels::TXSequenceChannels_glowRadiusInfo::TXSequenceChannels_glowRadiusInfo(TXSequenceChannels::TXSequenceChannels_glowRadiusInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_glowRadiusInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64F9298;
  *((_QWORD *)this + 10) = &unk_1E64F92B8;
  return this;
}

void sub_1B28DC3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl::getInstance(TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl::getInstance(void)::TXSequenceChannels_dropShadowBlurImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl::getInstance(void)::TXSequenceChannels_dropShadowBlurImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl::_TXSequenceChannels_dropShadowBlur;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl *v0;

  if (!TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl::_TXSequenceChannels_dropShadowBlur)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl *)operator new();
    TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl::TXSequenceChannels_dropShadowBlurImpl(v0);
    TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl::_TXSequenceChannels_dropShadowBlur = (uint64_t)v0;
  }
}

void sub_1B28DC4BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl *TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl::TXSequenceChannels_dropShadowBlurImpl(TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64F9310;
  *((_QWORD *)this + 5) = &unk_1E64F9330;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B28DC56C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo::getInstance(TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo::getInstance(void)::TXSequenceChannels_dropShadowBlurInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo::getInstance(void)::TXSequenceChannels_dropShadowBlurInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo::_TXSequenceChannels_dropShadowBlurInfo;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo *v0;

  if (!TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo::_TXSequenceChannels_dropShadowBlurInfo)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo *)operator new();
    TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo::TXSequenceChannels_dropShadowBlurInfo(v0);
    TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo::_TXSequenceChannels_dropShadowBlurInfo = (uint64_t)v0;
  }
}

void sub_1B28DC638(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo *TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo::TXSequenceChannels_dropShadowBlurInfo(TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64F9388;
  *((_QWORD *)this + 10) = &unk_1E64F93A8;
  return this;
}

void sub_1B28DC6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl::getInstance(TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl::getInstance(void)::TXSequenceChannels_dropShadowDistanceImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl::getInstance(void)::TXSequenceChannels_dropShadowDistanceImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl::_TXSequenceChannels_dropShadowDistance;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl *v0;

  if (!TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl::_TXSequenceChannels_dropShadowDistance)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl *)operator new();
    TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl::TXSequenceChannels_dropShadowDistanceImpl(v0);
    TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl::_TXSequenceChannels_dropShadowDistance = (uint64_t)v0;
  }
}

void sub_1B28DC7B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl *TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl::TXSequenceChannels_dropShadowDistanceImpl(TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64F9400;
  *((_QWORD *)this + 5) = &unk_1E64F9420;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B28DC860(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo::getInstance(TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo::getInstance(void)::TXSequenceChannels_dropShadowDistanceInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo::getInstance(void)::TXSequenceChannels_dropShadowDistanceInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo::_TXSequenceChannels_dropShadowDistanceInfo;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo *v0;

  if (!TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo::_TXSequenceChannels_dropShadowDistanceInfo)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo *)operator new();
    TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo::TXSequenceChannels_dropShadowDistanceInfo(v0);
    TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo::_TXSequenceChannels_dropShadowDistanceInfo = (uint64_t)v0;
  }
}

void sub_1B28DC92C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo *TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo::TXSequenceChannels_dropShadowDistanceInfo(TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64F9478;
  *((_QWORD *)this + 10) = &unk_1E64F9498;
  return this;
}

void sub_1B28DC9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_characterOffsetImpl::getInstance(TXSequenceChannels::TXSequenceChannels_characterOffsetImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_characterOffsetImpl::getInstance(void)::TXSequenceChannels_characterOffsetImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_characterOffsetImpl::getInstance(void)::TXSequenceChannels_characterOffsetImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_characterOffsetImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_characterOffsetImpl::_TXSequenceChannels_characterOffset;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_characterOffsetImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!TXSequenceChannels::TXSequenceChannels_characterOffsetImpl::_TXSequenceChannels_characterOffset)
  {
    v0 = (OZChannelUint32 *)operator new();
    TXSequenceChannels::TXSequenceChannels_characterOffsetImpl::TXSequenceChannels_characterOffsetImpl(v0);
    TXSequenceChannels::TXSequenceChannels_characterOffsetImpl::_TXSequenceChannels_characterOffset = (uint64_t)v0;
  }
}

void sub_1B28DCAA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *TXSequenceChannels::TXSequenceChannels_characterOffsetImpl::TXSequenceChannels_characterOffsetImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E64F94F0;
  this->var5 = (PCString *)&unk_1E64F9510;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B28DCB58(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

OZCurveInt *OZChannelUint32::createOZChannelUint32Curve(OZChannelUint32 *this, double a2)
{
  OZCurveInt *v3;

  v3 = (OZCurveInt *)operator new();
  OZCurveInt::OZCurveInt(v3, a2);
  return v3;
}

void sub_1B28DCBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

void OZCurveInt::OZCurveInt(OZCurveInt *this, double a2)
{
  OZCurveIntSplineState *v3;
  uint64_t Instance;
  uint64_t v5;

  OZCurve::OZCurve((OZCurve *)this, 0.0, 4294967300.0, 1.0, a2);
  *(_QWORD *)v3 = &unk_1E64F9568;
  Instance = OZCurveIntSplineState::getInstance(v3);
  if (Instance)
    v5 = Instance + 8;
  else
    v5 = 0;
  OZCurve::setSplineState((uint64_t)this, v5);
}

void sub_1B28DCC4C(_Unwind_Exception *a1)
{
  OZCurve *v1;

  OZCurve::~OZCurve(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCurveIntSplineState::getInstance(OZCurveIntSplineState *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCurveIntSplineState::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCurveIntSplineState::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCurveIntSplineState::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCurveIntSplineState::_instance;
}

OZCurve *OZCurveInt::getCurveWorkingCopy(const OZCurve *this)
{
  OZCurve *v2;

  v2 = (OZCurve *)operator new();
  OZCurve::OZCurve(v2, this, 1);
  *(_QWORD *)v2 = &unk_1E64F9568;
  return v2;
}

void sub_1B28DCD18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

OZCurve *OZCurveInt::cloneCurve(const OZCurve *this)
{
  OZCurve *v2;

  v2 = (OZCurve *)operator new();
  OZCurve::OZCurve(v2, this, 0);
  *(_QWORD *)v2 = &unk_1E64F9568;
  return v2;
}

void sub_1B28DCD94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceChannels::TXSequenceChannels_characterOffsetInfo::getInstance(TXSequenceChannels::TXSequenceChannels_characterOffsetInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceChannels::TXSequenceChannels_characterOffsetInfo::getInstance(void)::TXSequenceChannels_characterOffsetInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceChannels::TXSequenceChannels_characterOffsetInfo::getInstance(void)::TXSequenceChannels_characterOffsetInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceChannels::TXSequenceChannels_characterOffsetInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceChannels::TXSequenceChannels_characterOffsetInfo::_TXSequenceChannels_characterOffsetInfo;
}

void std::__call_once_param<std::tuple<TXSequenceChannels::TXSequenceChannels_characterOffsetInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceChannels::TXSequenceChannels_characterOffsetInfo *v0;

  if (!TXSequenceChannels::TXSequenceChannels_characterOffsetInfo::_TXSequenceChannels_characterOffsetInfo)
  {
    v0 = (TXSequenceChannels::TXSequenceChannels_characterOffsetInfo *)operator new();
    TXSequenceChannels::TXSequenceChannels_characterOffsetInfo::TXSequenceChannels_characterOffsetInfo(v0);
    TXSequenceChannels::TXSequenceChannels_characterOffsetInfo::_TXSequenceChannels_characterOffsetInfo = (uint64_t)v0;
  }
}

void sub_1B28DCE64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXSequenceChannels::TXSequenceChannels_characterOffsetInfo *TXSequenceChannels::TXSequenceChannels_characterOffsetInfo::TXSequenceChannels_characterOffsetInfo(TXSequenceChannels::TXSequenceChannels_characterOffsetInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXSequenceChannels::TXSequenceChannels_characterOffsetInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64F9AD8;
  *((_QWORD *)this + 10) = &unk_1E64F9AF8;
  return this;
}

void sub_1B28DCF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelUint32::OZChannelUint32(OZChannelUint32 *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *OZChannelUint32_FactoryBase;
  OZChannelUint32 *v15;
  OZChannelUint32 *OZChannelUint32Info;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelUint32_FactoryBase = (OZFactory *)getOZChannelUint32_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelUint32_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&off_1E6551AF8;
  this->var2 = (void **)&unk_1E6551E58;
  OZChannelUint32Info = (OZChannelUint32 *)OZChannelUint32::createOZChannelUint32Info(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
    this->var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
  }
  this->var16 = var17;
  OZChannelUint32::createOZChannelUint32Impl(OZChannelUint32Info);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
    this->var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
  }
  this->var14 = var15;
}

void sub_1B28DD00C(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelUint32::createOZChannelUint32Info(OZChannelUint32 *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelUint32::createOZChannelUint32Info(void)::_OZChannelUint32Info_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelUint32::createOZChannelUint32Info(void)::_OZChannelUint32Info_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelUint32::createOZChannelUint32Info(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelUint32::_OZChannelUint32Info;
}

uint64_t OZChannelUint32::createOZChannelUint32Impl(OZChannelUint32 *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelUint32::createOZChannelUint32Impl(void)::_OZChannelUint32Impl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelUint32::createOZChannelUint32Impl(void)::_OZChannelUint32Impl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelUint32::createOZChannelUint32Impl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelUint32::_OZChannelUint32Impl;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelUint32::createOZChannelUint32Impl(void)::{lambda(void)#1} &&>>()
{
  OZChannelUint32::createOZChannelUint32Impl(void)::{lambda(void)#1}::operator()();
}

void OZChannelUint32::createOZChannelUint32Impl(void)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  OZCurveInt *v1;

  if (!OZChannelUint32::_OZChannelUint32Impl)
  {
    v0 = operator new();
    v1 = (OZCurveInt *)operator new();
    OZCurveInt::OZCurveInt(v1, 0.0);
    OZChannelImpl::OZChannelImpl((OZChannelImpl *)v0, (OZCurve *)v1, 0.0, 1, 1);
    PCSingleton::PCSingleton((PCSingleton *)(v0 + 40), 100);
    *(_QWORD *)v0 = &unk_1E65E99C0;
    *(_QWORD *)(v0 + 40) = &unk_1E65E99E0;
    OZChannelUint32::_OZChannelUint32Impl = v0;
  }
}

void sub_1B28DD1A0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannel2D::~OZChannel2D(OZChannel2D *this)
{
  *(_QWORD *)this = &off_1E6556518;
  *((_QWORD *)this + 2) = &unk_1E6556870;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

{
  OZChannel2D::~OZChannel2D(this);
  JUMPOUT(0x1B5E29170);
}

void OZChannelQuad::~OZChannelQuad(OZChannelQuad *this)
{
  *(_QWORD *)this = &off_1E655FD58;
  *((_QWORD *)this + 2) = &unk_1E65600A0;
  OZChannelPosition::~OZChannelPosition((OZChannelQuad *)((char *)this + 2248));
  OZChannelPosition::~OZChannelPosition((OZChannelQuad *)((char *)this + 1544));
  OZChannelPosition::~OZChannelPosition((OZChannelQuad *)((char *)this + 840));
  OZChannelPosition::~OZChannelPosition((OZChannelQuad *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

{
  OZChannelQuad::~OZChannelQuad(this);
  JUMPOUT(0x1B5E29170);
}

void OZChannelColorNoAlpha::~OZChannelColorNoAlpha(OZChannelColorNoAlpha *this)
{
  *(_QWORD *)this = &off_1E65582D0;
  *((_QWORD *)this + 2) = &unk_1E6558640;
  OZChannelEnum::~OZChannelEnum((OZChannelColorNoAlpha *)((char *)this + 744));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 592));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

{
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(this);
  JUMPOUT(0x1B5E29170);
}

char *std::vector<OZChannelBase *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void TXFont::~TXFont(TXFont *this)
{
  PCMutex *v2;
  TXFont *v3;
  uint64_t v4;
  TXFont *v5;
  TXFont *v6;
  BOOL v7;

  *(_QWORD *)this = off_1E64F9BC0;
  v2 = (PCMutex *)((char *)this + 32);
  PCMutex::lock((PCMutex *)((char *)this + 32));
  v3 = (TXFont *)*((_QWORD *)this + 1);
  if (v3 != (TXFont *)((char *)this + 16))
  {
    do
    {
      v4 = *((_QWORD *)v3 + 5);
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      *((_QWORD *)v3 + 5) = 0;
      v5 = (TXFont *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(TXFont **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (TXFont *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != (TXFont *)((char *)this + 16));
  }
  PCMutex::unlock(v2);
  PCMutex::~PCMutex(v2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

uint64_t *TXFont::getGlyph(TXFont *this, uint64_t a2, uint64_t a3)
{
  PCMutex *v6;
  uint64_t **i;
  unsigned int v8;
  uint64_t *v9;
  unsigned __int16 v11;
  unsigned __int16 *v12;

  v11 = a2;
  v6 = (PCMutex *)((char *)this + 32);
  PCMutex::lock((PCMutex *)((char *)this + 32));
  for (i = (uint64_t **)*((_QWORD *)this + 2); i; i = (uint64_t **)*i)
  {
    v8 = *((unsigned __int16 *)i + 16);
    if (v8 <= a2)
    {
      if (v8 >= a2)
      {
        v12 = &v11;
        v9 = std::__tree<std::__value_type<unsigned short,TXGlyph *>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TXGlyph *>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TXGlyph *>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)this + 1, &v11, (uint64_t)&std::piecewise_construct, &v12)[5];
        goto LABEL_8;
      }
      ++i;
    }
  }
  v9 = (uint64_t *)(*(uint64_t (**)(TXFont *, uint64_t, uint64_t))(*(_QWORD *)this + 72))(this, a2, a3);
  v12 = &v11;
  std::__tree<std::__value_type<unsigned short,TXGlyph *>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TXGlyph *>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TXGlyph *>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)this + 1, &v11, (uint64_t)&std::piecewise_construct, &v12)[5] = v9;
LABEL_8:
  PCMutex::unlock(v6);
  return v9;
}

void sub_1B28DD594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TXCoreTextFont::TXCoreTextFont(TXCoreTextFont *this, int a2, PCString *a3)
{
  uint64_t v6;
  __CFString *v7;

  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  TXFont::TXFont(this);
  *(_QWORD *)v6 = &off_1E64F9C20;
  *(_DWORD *)(v6 + 104) = a2;
  PCString::PCString((PCString *)(v6 + 112), a3);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0x408F400000000000;
  *((_BYTE *)this + 136) = 0;
  v7 = PCString::cf_str(a3);
  *((_QWORD *)this + 15) = OZCreateFontWithName(v7, *((CGFloat *)this + 16), 0);
}

void sub_1B28DD638(_Unwind_Exception *a1)
{
  TXFont *v1;

  TXFont::~TXFont(v1);
  _Unwind_Resume(a1);
}

void TXFont::TXFont(TXFont *this)
{
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E64F9BC0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 32));
}

void sub_1B28DD6AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void TXCoreTextFont::TXCoreTextFont(TXCoreTextFont *this, int a2, const PCString *a3, const __CTFont *a4)
{
  uint64_t v8;

  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  TXFont::TXFont(this);
  *(_QWORD *)v8 = &off_1E64F9C20;
  *(_DWORD *)(v8 + 104) = a2;
  PCString::PCString((PCString *)(v8 + 112), a3);
  *((_QWORD *)this + 15) = a4;
  *((_BYTE *)this + 136) = 0;
  if (a4)
  {
    CFRetain(a4);
    *((CGFloat *)this + 16) = CTFontGetSize(a4);
  }
}

void sub_1B28DD754(_Unwind_Exception *a1)
{
  TXFont *v1;

  TXFont::~TXFont(v1);
  _Unwind_Resume(a1);
}

void TXCoreTextFont::~TXCoreTextFont(PCString *this)
{
  __CFString *var0;

  this->var0 = (__CFString *)&off_1E64F9C20;
  var0 = this[15].var0;
  if (var0)
    CFRelease(var0);
  PCString::~PCString(this + 14);
  TXFont::~TXFont((TXFont *)this);
}

{
  TXCoreTextFont::~TXCoreTextFont(this);
  JUMPOUT(0x1B5E29170);
}

TXCoreTextGlyph *TXCoreTextFont::createGlyph(TXCoreTextFont *this, __int16 a2, __int16 a3)
{
  TXCoreTextGlyph *v6;

  v6 = (TXCoreTextGlyph *)operator new();
  TXCoreTextGlyph::TXCoreTextGlyph(v6, a2, a3, this);
  return v6;
}

void sub_1B28DD844(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C400757F7B3);
  _Unwind_Resume(a1);
}

void TXCoreTextFont::getMetricsForGlyph(uint64_t a1@<X0>, CGGlyph a2@<W1>, double *a3@<X2>, float64x2_t *a4@<X8>, double a5@<D0>)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGGlyph glyphs;
  CGRect BoundingRectsForGlyphs;

  glyphs = a2;
  BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs((CTFontRef)*(_QWORD *)(a1 + 120), kCTFontOrientationHorizontal, &glyphs, 0, 1);
  if (fabs(BoundingRectsForGlyphs.origin.x) == INFINITY)
    BoundingRectsForGlyphs.origin.x = 0.0;
  if (fabs(BoundingRectsForGlyphs.origin.y) == INFINITY)
    BoundingRectsForGlyphs.origin.y = 0.0;
  v9 = a5 / *(double *)(a1 + 128);
  a4->f64[0] = v9 * BoundingRectsForGlyphs.origin.x;
  a4->f64[1] = v9 * BoundingRectsForGlyphs.origin.y;
  a4[1].f64[0] = v9 * BoundingRectsForGlyphs.size.width;
  a4[1].f64[1] = v9 * BoundingRectsForGlyphs.size.height;
  a4[2].f64[0] = -(v9 * BoundingRectsForGlyphs.origin.x);
  a4[2].f64[1] = -(v9 * BoundingRectsForGlyphs.origin.y);
  if (a3)
  {
    PCMatrix33Tmpl<double>::transform<double>(a3, a4->f64, a4);
    v10 = a4[2].f64[0];
    v11 = a4[2].f64[1];
    v12 = a3[2] + v10 * *a3 + v11 * a3[1];
    v13 = a3[5] + v10 * a3[3] + v11 * a3[4];
    a4[2].f64[0] = v12;
    a4[2].f64[1] = v13;
  }
}

float TXCoreTextFont::getCapHeight(TXCoreTextFont *this, double a2)
{
  double v2;

  v2 = a2 / *((double *)this + 16);
  return v2 * CTFontGetCapHeight(*((CTFontRef *)this + 15));
}

float TXCoreTextFont::getXHeight(TXCoreTextFont *this, double a2)
{
  double v2;

  v2 = a2 / *((double *)this + 16);
  return v2 * CTFontGetXHeight(*((CTFontRef *)this + 15));
}

float TXCoreTextFont::getAscender(TXCoreTextFont *this, double a2)
{
  double v2;

  v2 = a2 / *((double *)this + 16);
  return v2 * CTFontGetAscent(*((CTFontRef *)this + 15));
}

float TXCoreTextFont::getDescender(TXCoreTextFont *this, double a2)
{
  double v2;

  v2 = a2 / *((double *)this + 16);
  return v2 * CTFontGetDescent(*((CTFontRef *)this + 15));
}

float TXCoreTextFont::getLeading(TXCoreTextFont *this, double a2)
{
  double v2;

  v2 = a2 / *((double *)this + 16);
  return v2 * CTFontGetLeading(*((CTFontRef *)this + 15));
}

double TXCoreTextFont::getBoundingRectForGlyph@<D0>(TXCoreTextFont *this@<X0>, double a2@<D0>, CGGlyph a3@<W1>, double *a4@<X8>)
{
  double v7;
  double result;
  CGGlyph glyphs;
  CGRect BoundingRectsForGlyphs;

  glyphs = a3;
  BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs((CTFontRef)*((_QWORD *)this + 15), kCTFontOrientationHorizontal, &glyphs, 0, 1);
  v7 = a2 / *((double *)this + 16);
  *a4 = v7 * BoundingRectsForGlyphs.origin.x;
  a4[1] = v7 * BoundingRectsForGlyphs.origin.y;
  result = v7 * BoundingRectsForGlyphs.size.height;
  a4[2] = v7 * BoundingRectsForGlyphs.size.width;
  a4[3] = v7 * BoundingRectsForGlyphs.size.height;
  return result;
}

uint64_t TXCoreTextFont::getFontID(TXCoreTextFont *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t **std::__tree<std::__value_type<unsigned short,TXGlyph *>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TXGlyph *>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TXGlyph *>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

float64x2_t PCMatrix33Tmpl<double>::transform<double>(double *a1, double *a2, float64x2_t *a3)
{
  double v4;
  double v5;
  uint64_t v7;
  double v8;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t result;
  double v20[9];

  v20[8] = *(double *)MEMORY[0x1E0C80C00];
  v4 = a2[2];
  if (v4 < 0.0 || (v5 = a2[3], v5 < 0.0))
  {
    __asm { FMOV            V0.2D, #-1.0 }
    a3[1] = result;
  }
  else
  {
    v7 = 0;
    v8 = a2[1];
    v20[0] = *a2;
    v20[1] = v8 + v5;
    v20[2] = v4 + v20[0];
    v20[3] = v8 + v5;
    v20[4] = v4 + v20[0];
    v20[5] = v8;
    v20[6] = v20[0];
    v20[7] = v8;
    __asm { FMOV            V0.2D, #-1.0 }
    a3[1] = _Q0;
    do
    {
      v14 = &v20[v7];
      v15 = v20[v7];
      v16 = v20[v7 + 1];
      v17 = a1[2] + v15 * *a1 + v16 * a1[1];
      v18 = a1[5] + v15 * a1[3] + v16 * a1[4];
      *v14 = v17;
      v14[1] = v18;
      *(_QWORD *)&result.f64[0] = *(_OWORD *)&PCRect<double>::operator|=(a3, (float64x2_t *)&v20[v7]);
      v7 += 2;
    }
    while (v7 != 8);
  }
  return result;
}

void TXCoreTextTypeface::TXCoreTextTypeface(TXCoreTextTypeface *this, const PCString *a2, const PCString *a3, unsigned int a4, OZFontFamily *a5)
{
  _QWORD *v8;
  TXCoreTextFont *v9;

  OZCoreTextTypeface::OZCoreTextTypeface(this, a2, a3, a4, a5);
  *v8 = &off_1E64F9CA8;
  v9 = (TXCoreTextFont *)operator new();
  TXCoreTextFont::TXCoreTextFont(v9, a4, a3);
  *((_QWORD *)this + 5) = v9;
}

void sub_1B28DDCE8(_Unwind_Exception *a1)
{
  PCString *v1;
  uint64_t v2;

  MEMORY[0x1B5E29170](v2, 0x10E1C40F10BFBABLL);
  OZCoreTextTypeface::~OZCoreTextTypeface(v1);
  _Unwind_Resume(a1);
}

void TXCoreTextTypeface::TXCoreTextTypeface(TXCoreTextTypeface *this, const PCString *a2, const PCString *a3, unsigned int a4, OZFontFamily *a5, const __CTFont *a6)
{
  _QWORD *v10;
  TXCoreTextFont *v11;

  OZCoreTextTypeface::OZCoreTextTypeface(this, a2, a3, a4, a5);
  *v10 = &off_1E64F9CA8;
  v11 = (TXCoreTextFont *)operator new();
  TXCoreTextFont::TXCoreTextFont(v11, a4, a3, a6);
  *((_QWORD *)this + 5) = v11;
}

void sub_1B28DDD9C(_Unwind_Exception *a1)
{
  PCString *v1;
  uint64_t v2;

  MEMORY[0x1B5E29170](v2, 0x10E1C40F10BFBABLL);
  OZCoreTextTypeface::~OZCoreTextTypeface(v1);
  _Unwind_Resume(a1);
}

void TXCoreTextTypeface::~TXCoreTextTypeface(PCString *this)
{
  __CFString *var0;

  this->var0 = (__CFString *)&off_1E64F9CA8;
  var0 = this[5].var0;
  if (var0)
    (*((void (**)(__CFString *))var0->isa + 1))(var0);
  this[5].var0 = 0;
  OZCoreTextTypeface::~OZCoreTextTypeface(this);
}

{
  __CFString *var0;

  this->var0 = (__CFString *)&off_1E64F9CA8;
  var0 = this[5].var0;
  if (var0)
    (*((void (**)(__CFString *))var0->isa + 1))(var0);
  this[5].var0 = 0;
  OZCoreTextTypeface::~OZCoreTextTypeface(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t TXFontManager::getInstance(TXFontManager *this)
{
  if (TXFontManager::getInstance(void)::once != -1)
    dispatch_once(&TXFontManager::getInstance(void)::once, &__block_literal_global_48);
  return TXFontManager::_instance;
}

uint64_t ___ZN13TXFontManager11getInstanceEv_block_invoke()
{
  TXFontManager *v0;

  v0 = (TXFontManager *)operator new();
  TXFontManager::TXFontManager(v0);
  TXFontManager::_instance = (uint64_t)v0;
  return (*(uint64_t (**)(TXFontManager *))(*(_QWORD *)v0 + 16))(v0);
}

void sub_1B28DDEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40E11E66D3);
  _Unwind_Resume(a1);
}

uint64_t TXFontManager::cleanup(TXFontManager *this)
{
  uint64_t result;

  result = TXFontManager::_instance;
  if (TXFontManager::_instance)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)TXFontManager::_instance + 8))(TXFontManager::_instance);
  TXFontManager::_instance = 0;
  return result;
}

void TXFontManager::TXFontManager(TXFontManager *this)
{
  uint64_t v2;

  OZFontManagerBase::OZFontManagerBase(this);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 160), 0);
  *(_QWORD *)this = &off_1E64F9D28;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = &unk_1E64F9D80;
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = (char *)this + 200;
}

void sub_1B28DDFB0(_Unwind_Exception *a1)
{
  OZFontManagerBase *v1;

  OZFontManagerBase::~OZFontManagerBase(v1);
  _Unwind_Resume(a1);
}

void TXFontManager::~TXFontManager(TXFontManager *this)
{
  PCSingleton *v2;

  *(_QWORD *)this = &off_1E64F9D28;
  *((_QWORD *)this + 20) = &unk_1E64F9D80;
  v2 = (TXFontManager *)((char *)this + 160);
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy((uint64_t)this + 192, *((_QWORD **)this + 25));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  PCSingleton::~PCSingleton(v2);
  OZFontManagerBase::~OZFontManagerBase(this);
}

{
  TXFontManager::~TXFontManager(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXFontManager::~TXFontManager(TXFontManager *this)
{
  TXFontManager::~TXFontManager((TXFontManager *)((char *)this - 160));
}

{
  TXFontManager::~TXFontManager((TXFontManager *)((char *)this - 160));
  JUMPOUT(0x1B5E29170);
}

uint64_t TXFontManager::getFontFace@<X0>(TXFontManager *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  PCMutex *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  BOOL v12;
  char **v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = (PCMutex *)((char *)this + 64);
  PCMutex::lock((PCMutex *)((char *)this + 64));
  v9 = (char *)*((_QWORD *)this + 25);
  v8 = (char *)this + 200;
  v7 = v9;
  if (!v9)
    goto LABEL_12;
  v10 = v8;
  do
  {
    v11 = *((_DWORD *)v7 + 8);
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = (char **)v7;
    else
      v13 = (char **)(v7 + 8);
    if (v12)
      v10 = v7;
    v7 = *v13;
  }
  while (*v13);
  if (v10 != v8 && *((_DWORD *)v10 + 8) <= a2)
  {
    v16 = *((_QWORD *)v10 + 5);
    v15 = *((_QWORD *)v10 + 6);
    *a3 = v16;
    a3[1] = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
  }
  return PCMutex::unlock(v6);
}

uint64_t TXFontManager::getCoreTextFont(TXFontManager *this, unsigned int a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  BOOL v13;
  void *lpsrc;
  std::__shared_weak_count *v16;
  PCMutex *v17;
  char v18;

  v17 = (PCMutex *)((char *)this + 64);
  PCMutex::lock((PCMutex *)((char *)this + 64));
  v18 = 1;
  TXFontManager::getFontFace(this, a2, &lpsrc);
  if (lpsrc
  {
    v5 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = v4[5];
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v8 = v4[5];
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v17)
    v13 = v18 == 0;
  else
    v13 = 1;
  if (!v13)
    PCMutex::unlock(v17);
  return v8;
}

void sub_1B28DE240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

PCMutex *TXFontManager::addFontFace(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _DWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t **v14;
  unint64_t *v15;
  unint64_t v16;
  PCMutex *result;
  BOOL v18;
  unsigned int v19;
  _DWORD *v20;
  std::__shared_weak_count *v21;
  const void *v22;
  std::__shared_weak_count *v23;
  PCMutex *v24;
  char v25;
  unsigned int *v26;

  v24 = (PCMutex *)(a1 + 64);
  PCMutex::lock((PCMutex *)(a1 + 64));
  v25 = 1;
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v22 = *(const void **)a2;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  OZFontManagerBase::addFontFace(a1, (uint64_t *)&v22);
  v7 = v23;
  if (v23)
  {
    v8 = (unint64_t *)&v23->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v11 = *(std::__shared_weak_count **)(a2 + 8);
  v20 = v10;
  v21 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v19 = v10[8];
  v26 = &v19;
  v14 = std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)(a1 + 192), &v19, (uint64_t)&std::piecewise_construct, &v26);
  std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v14 + 5, (uint64_t *)a2);
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result = v24;
  if (v24)
    v18 = v25 == 0;
  else
    v18 = 1;
  if (!v18)
    return (PCMutex *)PCMutex::unlock(v24);
  return result;
}

void sub_1B28DE3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t TXFontManager::getCoreTextFont(TXFontManager *this, const PCString *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t CoreTextFont;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 56))(&v13);
  v15 = v13;
  v16 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    v5 = v14;
    if (v14)
    {
      v6 = (unint64_t *)&v14->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (v15)
    CoreTextFont = TXFontManager::getCoreTextFont(this, *(_DWORD *)(v15 + 32));
  else
    CoreTextFont = 0;
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return CoreTextFont;
}

void sub_1B28DE4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

PCString *TXFontManager::getDefaultFontKey@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "TXFontManager::kDefaultFont");
}

PCString *TXFontManager::getDefaultFontSizeKey@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "TXFontManager::kDefaultFontSize");
}

void std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy(a1, a2[1]);
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x38uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0;
    v15 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

OZFontManagerBase *TXFontManager::initFonts(OZFontManagerBase *this)
{
  OZFontManagerBase *v1;

  if (!*((_BYTE *)this + 136))
  {
    v1 = this;
    TXFontManager::registerCustomFonts(this);
    return (OZFontManagerBase *)OZFontManagerBase::initFonts(v1);
  }
  return this;
}

void TXFontManager::registerCustomFonts(TXFontManager *this)
{
  void *v1;
  const PCString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFURL *v6;
  const __CFURL *v7;
  CFStringRef v8;
  PCString v9;
  CFErrorRef error;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  OZChannelBase v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((TXFontManager::registerCustomFonts(void)::customFontsRegistered & 1) == 0)
  {
    OZChannelBase::setRangeName(&v15, (const PCString *)CFSTR("Motion Effect"));
    v1 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "pathsForResourcesOfType:inDirectory:", 0, CFSTR("Fonts"));
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, (char *)&v15.var0 + 1, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v12;
      do
      {
        v5 = 0;
        do
        {
          if (*(_QWORD *)v12 != v4)
            objc_enumerationMutation(v1);
          v6 = CFURLCreateWithFileSystemPath(0, *(CFStringRef *)(*((_QWORD *)&v11 + 1) + 8 * v5), kCFURLPOSIXPathStyle, 0);
          v7 = v6;
          if (v6)
          {
            error = 0;
            if (!CTFontManagerRegisterFontsForURL(v6, kCTFontManagerScopeProcess, &error))
            {
              v8 = CFErrorCopyDescription(error);
              PCURL::PCURL((PCURL *)&v9, v8);
              PCString::~PCString(&v9);
            }
            CFRelease(v7);
          }
          ++v5;
        }
        while (v3 != v5);
        v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, (char *)&v15.var0 + 1, 16);
      }
      while (v3);
    }
    TXFontManager::registerCustomFonts(void)::customFontsRegistered = 1;
    OZChannelBase::setRangeName(&v15, v2);
  }
}

void sub_1B28DE848(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, OZChannelBase *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  OZChannelBase::setRangeName((OZChannelBase *)&a24, a2);
  _Unwind_Resume(a1);
}

PCMutex *TXFontManager::getFontFace@<X0>(const PCString *this@<X0>, PCString *a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  PCMutex *result;
  BOOL v11;
  __CFString *v12;
  unsigned int v13;
  TXCoreTextTypeface *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  PCString v23;
  PCString v24;
  __CFString *v25;
  std::__shared_weak_count *v26;
  PCMutex *v27;
  char v28;

  v27 = (PCMutex *)&this[8];
  PCMutex::lock((PCMutex *)&this[8]);
  v28 = 1;
  OZFontManagerBase::getFontFace(this, a2, &v25);
  if (v25)
  {
    v6 = v26;
    *a3 = (uint64_t)v25;
    a3[1] = (uint64_t)v6;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v12 = PCString::cf_str(a2);
    v13 = OZGetNewFontID(v12);
    v14 = (TXCoreTextTypeface *)operator new();
    PCString::PCString(&v24, a2);
    PCString::PCString(&v23, a2);
    TXCoreTextTypeface::TXCoreTextTypeface(v14, &v24, &v23, v13, 0);
    std::shared_ptr<OZFontFace>::shared_ptr[abi:ne180100]<TXCoreTextTypeface,void>(a3, (uint64_t)v14);
    PCString::~PCString(&v23);
    PCString::~PCString(&v24);
    v15 = (std::__shared_weak_count *)a3[1];
    v21 = *a3;
    v22 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    ((void (*)(const PCString *, uint64_t *))this->var0[1].data)(this, &v21);
    v18 = v22;
    if (v22)
    {
      v19 = (unint64_t *)&v22->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v7 = v26;
  if (v26)
  {
    v8 = (unint64_t *)&v26->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = v27;
  if (v27)
    v11 = v28 == 0;
  else
    v11 = 1;
  if (!v11)
    return (PCMutex *)PCMutex::unlock(v27);
  return result;
}

void sub_1B28DEA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v15);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL TXFontManager::containsFontWithName(const PCString *this, PCString *a2)
{
  std::__shared_weak_count *v4;
  __CFString *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  BOOL v8;
  __CFString *v10;
  std::__shared_weak_count *v11;
  PCMutex *v12;
  char v13;

  v12 = (PCMutex *)&this[8];
  PCMutex::lock((PCMutex *)&this[8]);
  v13 = 1;
  OZFontManagerBase::getFontFace(this, a2, &v10);
  v5 = v10;
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v12)
    v8 = v13 == 0;
  else
    v8 = 1;
  if (!v8)
    PCMutex::unlock(v12);
  return v5 != 0;
}

void sub_1B28DEB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<OZFontFace>::shared_ptr[abi:ne180100]<TXCoreTextTypeface,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E64F9DD8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B28DEBDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<TXCoreTextTypeface *,std::shared_ptr<OZFontFace>::__shared_ptr_default_delete<OZFontFace,TXCoreTextTypeface>,std::allocator<TXCoreTextTypeface>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_pointer<TXCoreTextTypeface *,std::shared_ptr<OZFontFace>::__shared_ptr_default_delete<OZFontFace,TXCoreTextTypeface>,std::allocator<TXCoreTextTypeface>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<TXCoreTextTypeface *,std::shared_ptr<OZFontFace>::__shared_ptr_default_delete<OZFontFace,TXCoreTextTypeface>,std::allocator<TXCoreTextTypeface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void TXTimeGlyphPropertiesMap::TXTimeGlyphPropertiesMap(TXTimeGlyphPropertiesMap *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
}

_OWORD *TXTimeGlyphPropertiesMap::preSelectGlyphMap(uint64_t **this, CMTime *a2)
{
  _OWORD *result;
  const CMTime *v4;

  v4 = a2;
  result = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>(this, a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4);
  this[12] = (uint64_t *)result + 7;
  return result;
}

uint64_t TXTimeGlyphPropertiesMap::clearPreSelectedGlyphMap(uint64_t this)
{
  *(_QWORD *)(this + 96) = 0;
  return this;
}

__n128 TXTimeGlyphPropertiesMap::setPosition(uint64_t a1, _DWORD *a2, _DWORD *a3, __n128 *a4)
{
  uint64_t **v7;
  uint64_t **v8;
  __n128 result;
  _DWORD *v10;

  v7 = *(uint64_t ***)(a1 + 96);
  if (!v7)
  {
    v10 = a2;
    v7 = (uint64_t **)std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)a1, (CMTime *)a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10)+ 7;
  }
  v10 = a3;
  v8 = std::__tree<std::__value_type<unsigned int,GlyphProperties>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,GlyphProperties>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,GlyphProperties>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7, a3, (uint64_t)&std::piecewise_construct, &v10);
  result = *a4;
  v8[7] = (uint64_t *)a4[1].n128_u64[0];
  *(__n128 *)(v8 + 5) = result;
  return result;
}

_OWORD *TXTimeGlyphPropertiesMap::getPosition@<X0>(_OWORD *this@<X0>, CMTime *a2@<X1>, unsigned int *a3@<X2>, _QWORD *a4@<X8>)
{
  char *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  __int128 v17;
  uint64_t v18;
  const CMTime *v19;

  v6 = (char *)*((_QWORD *)this + 12);
  if (!v6)
  {
    v19 = a2;
    this = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)this, a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v19);
    v6 = (char *)this + 56;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = v6 + 8;
  v7 = *((_QWORD *)v6 + 1);
  if (!v7)
  {
    if (*((_QWORD *)v6 + 2))
    {
      do
      {
        v15 = *((_QWORD *)v8 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v8;
        v8 = (char *)v15;
      }
      while (v16);
      goto LABEL_19;
    }
LABEL_20:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return this;
  }
  v9 = *a3;
  v10 = v6 + 8;
  v11 = *((_QWORD *)v6 + 1);
  do
  {
    v12 = *(_DWORD *)(v11 + 32);
    v13 = v12 >= v9;
    if (v12 >= v9)
      v14 = (uint64_t *)v11;
    else
      v14 = (uint64_t *)(v11 + 8);
    if (v13)
      v10 = (char *)v11;
    v11 = *v14;
  }
  while (*v14);
  if (v10 != v8 && v9 >= *((_DWORD *)v10 + 8))
  {
    v17 = *(_OWORD *)(v10 + 40);
    v18 = *((_QWORD *)v10 + 7);
    goto LABEL_22;
  }
  if (!*((_QWORD *)v6 + 2))
    goto LABEL_20;
  do
  {
    v15 = v7;
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7);
LABEL_19:
  v17 = *(_OWORD *)(v15 + 40);
  v18 = *(_QWORD *)(v15 + 56);
LABEL_22:
  a4[2] = v18;
  *(_OWORD *)a4 = v17;
  return this;
}

__n128 TXTimeGlyphPropertiesMap::setPathRotation(uint64_t a1, _DWORD *a2, _DWORD *a3, __n128 *a4)
{
  uint64_t **v7;
  __n128 *v8;
  __n128 result;
  _DWORD *v10;

  v7 = *(uint64_t ***)(a1 + 96);
  if (!v7)
  {
    v10 = a2;
    v7 = (uint64_t **)std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)a1, (CMTime *)a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10)+ 7;
  }
  v10 = a3;
  v8 = (__n128 *)std::__tree<std::__value_type<unsigned int,GlyphProperties>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,GlyphProperties>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,GlyphProperties>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7, a3, (uint64_t)&std::piecewise_construct, &v10);
  result = *a4;
  v8[5].n128_u64[0] = a4[1].n128_u64[0];
  v8[4] = result;
  return result;
}

_OWORD *TXTimeGlyphPropertiesMap::getPathRotation@<X0>(_OWORD *this@<X0>, CMTime *a2@<X1>, unsigned int *a3@<X2>, _QWORD *a4@<X8>)
{
  char *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  __int128 v17;
  uint64_t v18;
  const CMTime *v19;

  v6 = (char *)*((_QWORD *)this + 12);
  if (!v6)
  {
    v19 = a2;
    this = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)this, a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v19);
    v6 = (char *)this + 56;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = v6 + 8;
  v7 = *((_QWORD *)v6 + 1);
  if (!v7)
  {
    if (*((_QWORD *)v6 + 2))
    {
      do
      {
        v15 = *((_QWORD *)v8 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v8;
        v8 = (char *)v15;
      }
      while (v16);
      goto LABEL_19;
    }
LABEL_20:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return this;
  }
  v9 = *a3;
  v10 = v6 + 8;
  v11 = *((_QWORD *)v6 + 1);
  do
  {
    v12 = *(_DWORD *)(v11 + 32);
    v13 = v12 >= v9;
    if (v12 >= v9)
      v14 = (uint64_t *)v11;
    else
      v14 = (uint64_t *)(v11 + 8);
    if (v13)
      v10 = (char *)v11;
    v11 = *v14;
  }
  while (*v14);
  if (v10 != v8 && v9 >= *((_DWORD *)v10 + 8))
  {
    v17 = *((_OWORD *)v10 + 4);
    v18 = *((_QWORD *)v10 + 10);
    goto LABEL_22;
  }
  if (!*((_QWORD *)v6 + 2))
    goto LABEL_20;
  do
  {
    v15 = v7;
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7);
LABEL_19:
  v17 = *(_OWORD *)(v15 + 64);
  v18 = *(_QWORD *)(v15 + 80);
LABEL_22:
  a4[2] = v18;
  *(_OWORD *)a4 = v17;
  return this;
}

uint64_t **TXTimeGlyphPropertiesMap::setTypeOn(TXTimeGlyphPropertiesMap *this, double a2, unsigned int a3, CMTime *a4)
{
  uint64_t **v6;
  uint64_t **result;
  unsigned int v8;
  unsigned int *v9;

  v8 = a3;
  v6 = (uint64_t **)*((_QWORD *)this + 12);
  if (!v6)
  {
    v9 = (unsigned int *)a4;
    v6 = (uint64_t **)std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)this, a4, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7;
  }
  v9 = &v8;
  result = std::__tree<std::__value_type<unsigned int,GlyphProperties>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,GlyphProperties>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,GlyphProperties>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, &v8, (uint64_t)&std::piecewise_construct, &v9);
  *((double *)result + 11) = a2;
  return result;
}

double TXTimeGlyphPropertiesMap::getTypeOn(TXTimeGlyphPropertiesMap *this, unsigned int a2, CMTime *a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  char *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  const CMTime *v13;

  v4 = (char *)*((_QWORD *)this + 12);
  if (!v4)
  {
    v13 = a3;
    v4 = (char *)std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)this, a3, (uint64_t)&std::piecewise_construct, (_OWORD **)&v13)+ 56;
  }
  v7 = *((_QWORD *)v4 + 1);
  v5 = v4 + 8;
  v6 = v7;
  result = 1.0;
  if (v7)
  {
    v9 = v5;
    do
    {
      v10 = *(_DWORD *)(v6 + 32);
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = (uint64_t *)v6;
      else
        v12 = (uint64_t *)(v6 + 8);
      if (v11)
        v9 = (char *)v6;
      v6 = *v12;
    }
    while (*v12);
    if (v9 != v5 && *((_DWORD *)v9 + 8) <= a2)
      return *((double *)v9 + 11);
  }
  return result;
}

double TXTimeGlyphPropertiesMap::setHash(TXTimeGlyphPropertiesMap *this, CMTime *a2, const PCHash128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  CMTimeEpoch v9;
  CMTime v11;

  if (*((_QWORD *)this + 11) >= 0x19uLL)
  {
    v6 = 8;
    do
    {
      v7 = *((_QWORD *)this + 11) - 1;
      v8 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * ((v7 + *((_QWORD *)this + 10)) / 0xAAuLL))
         + 24 * ((v7 + *((_QWORD *)this + 10)) % 0xAAuLL);
      v9 = *(_QWORD *)(v8 + 16);
      *(_OWORD *)&v11.value = *(_OWORD *)v8;
      v11.epoch = v9;
      *((_QWORD *)this + 11) = v7;
      std::deque<CMTime>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 6, 1);
      TXTimeGlyphPropertiesMap::evict((uint64_t **)this, &v11);
      --v6;
    }
    while (v6);
  }
  v11.value = (CMTimeValue)a2;
  *(_OWORD *)((char *)std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)this + 3, a2, (uint64_t)&std::piecewise_construct, &v11)+ 52) = *(_OWORD *)a3;
  return TXTimeGlyphPropertiesMap::promoteTime((int64x2_t *)this, a2);
}

void TXTimeGlyphPropertiesMap::evict(uint64_t **this, CMTime *a2)
{
  TXTimeGlyphPropertiesMap *v4;
  uint64_t *v5;
  uint64_t *v6;

  v4 = (TXTimeGlyphPropertiesMap *)std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::find<CMTime>((uint64_t)this, a2);
  if (this + 1 != (uint64_t **)v4)
    std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::erase(this, (uint64_t)v4);
  v5 = (uint64_t *)std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::find<CMTime>((uint64_t)(this + 3), a2);
  if (this + 4 != (uint64_t **)v5)
  {
    v6 = v5;
    std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(this + 3, v5);
    operator delete(v6);
  }
}

double TXTimeGlyphPropertiesMap::promoteTime(int64x2_t *this, const CMTime *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 **v7;
  __int128 *v8;
  unint64_t v9;
  __int128 **v10;
  __int128 *v11;
  char *v12;
  __int128 **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double result;

  v4 = this[5].u64[0];
  v5 = this[3].i64[1];
  v6 = this[4].i64[0];
  v7 = (__int128 **)(v5 + 8 * (v4 / 0xAA));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (__int128 **)(v5 + 8 * ((this[5].i64[1] + v4) / 0xAA));
  }
  else
  {
    v8 = (__int128 *)(*(_QWORD *)(v5 + 8 * (v4 / 0xAA)) + 24 * (v4 % 0xAA));
    v9 = this[5].i64[1] + v4;
    v10 = (__int128 **)(v5 + 8 * (v9 / 0xAA));
    v11 = (__int128 *)((char *)*v10 + 24 * (v9 % 0xAA));
  }
  v13 = std::__find_segment_if[abi:ne180100]<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__find_segment<CMTime>,std::__identity>(v7, v8, v10, v11, (__int128 *)&a2->value);
  v14 = this[3].i64[1];
  if (this[4].i64[0] == v14)
  {
    v16 = 0;
  }
  else
  {
    v15 = this[5].i64[1] + this[5].i64[0];
    v16 = *(_QWORD *)(v14 + 8 * (v15 / 0xAA)) + 24 * (v15 % 0xAA);
  }
  if ((char *)v16 != v12)
    std::deque<CMTime>::erase(this + 3, v13, v12);
  *(_QWORD *)&result = std::deque<CMTime>::push_front((uint64_t)this[3].i64, (__int128 *)&a2->value).u64[0];
  return result;
}

unint64_t std::deque<CMTime>::erase(int64x2_t *a1, _QWORD *a2, char *a3)
{
  unint64_t v4;
  uint64_t v5;
  char **v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE **v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  __n128 v27[2];

  v4 = a1[2].u64[0];
  v5 = a1->i64[1];
  v6 = (char **)(v5 + 8 * (v4 / 0xAA));
  if (a1[1].i64[0] == v5)
    v7 = 0;
  else
    v7 = &(*v6)[24 * (v4 % 0xAA)];
  if (a3 == v7)
    v8 = 0;
  else
    v8 = 170 * ((char **)a2 - v6)
       - 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 3)
       + 0x5555555555555555 * ((v7 - *v6) >> 3);
  v27[0].n128_u64[0] = v5 + 8 * (v4 / 0xAA);
  v27[0].n128_u64[1] = (unint64_t)v7;
  std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>::operator+=[abi:ne180100](v27, v8);
  v9 = a1[2].i64[1];
  v10 = v27[0].n128_u64[1] - *(_QWORD *)v27[0].n128_u64[0];
  v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
  if (v8 <= (unint64_t)(v9 - 1) >> 1)
  {
    if (v10 < -23)
    {
      v15 = (_QWORD *)(v27[0].n128_u64[0] - 8 * ((168 - v11) / 0xAA));
      v16 = (char *)(*v15 + 24 * (170 * ((168 - v11) / 0xAA) - (168 - v11)) + 4056);
    }
    else
    {
      v15 = (_QWORD *)(v27[0].n128_u64[0] + 8 * ((v11 + 1) / 0xAA));
      v16 = (char *)(*v15 + 24 * ((v11 + 1) % 0xAA));
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,0>(v6, v7, (char **)v27[0].n128_u64[0], (char *)v27[0].n128_u64[1], v15, v16, v27);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B304F0B0);
    std::deque<CMTime>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
  }
  else
  {
    if (v10 < -23)
    {
      v17 = 168 - v11;
      v13 = (_QWORD *)(v27[0].n128_u64[0] - 8 * (v17 / 0xAA));
      v14 = (_BYTE *)(*v13 + 24 * (170 * (v17 / 0xAA) - v17) + 4056);
    }
    else
    {
      v12 = v11 + 1;
      v13 = (_QWORD *)(v27[0].n128_u64[0] + 8 * (v12 / 0xAA));
      v14 = (_BYTE *)(*v13 + 24 * (v12 % 0xAA));
    }
    v18 = a1[2].i64[0] + v9;
    v19 = a1->i64[1];
    v20 = (_BYTE **)(v19 + 8 * (v18 / 0xAA));
    if (a1[1].i64[0] == v19)
      v21 = 0;
    else
      v21 = &(*v20)[24 * (v18 % 0xAA)];
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>>>(v13, v14, v20, v21, (uint64_t)v27);
    --a1[2].i64[1];
    std::deque<CMTime>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
  }
  v22 = a1[2].u64[0];
  v23 = a1->i64[1];
  v24 = (_QWORD *)(v23 + 8 * (v22 / 0xAA));
  if (a1[1].i64[0] == v23)
    v25 = 0;
  else
    v25 = *v24 + 24 * (v22 % 0xAA);
  v27[0].n128_u64[0] = (unint64_t)v24;
  v27[0].n128_u64[1] = v25;
  std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>::operator+=[abi:ne180100](v27, v8);
  return v27[0].n128_u64[0];
}

int64x2_t std::deque<CMTime>::push_front(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<CMTime>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0xAA));
  v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4080;
  v8 = *a2;
  *(_QWORD *)(v7 - 8) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v7 - 24) = v8;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B304F0C0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

__n128 TXTimeGlyphPropertiesMap::getHash@<Q0>(TXTimeGlyphPropertiesMap *this@<X0>, CMTime *a2@<X1>, PCWorkingColorVector *a3@<X8>)
{
  uint64_t v6;
  __n128 result;

  PCWorkingColorVector::PCWorkingColorVector(a3);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6 = std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::find<CMTime>((uint64_t)this + 24, a2);
  if ((TXTimeGlyphPropertiesMap *)((char *)this + 32) != (TXTimeGlyphPropertiesMap *)v6)
  {
    result = *(__n128 *)(v6 + 52);
    *(__n128 *)a3 = result;
  }
  return result;
}

void TXTimeGlyphPropertiesMap::flush(TXTimeGlyphPropertiesMap *this)
{
  unint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  CMTimeEpoch v6;
  CMTime v7;

  v1 = *((_QWORD *)this + 11);
  if (v1 >= 2)
  {
    v3 = (_QWORD *)((char *)this + 48);
    do
    {
      v4 = v1 - 1;
      v5 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * ((*((_QWORD *)this + 10) + v4) / 0xAA))
         + 24 * ((*((_QWORD *)this + 10) + v4) % 0xAA);
      v6 = *(_QWORD *)(v5 + 16);
      *(_OWORD *)&v7.value = *(_OWORD *)v5;
      v7.epoch = v6;
      *((_QWORD *)this + 11) = v4;
      std::deque<CMTime>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      TXTimeGlyphPropertiesMap::evict((uint64_t **)this, &v7);
      v1 = *((_QWORD *)this + 11);
    }
    while (v1 > 1);
  }
}

_OWORD *std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>(uint64_t **a1, CMTime *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  v6 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__find_equal<CMTime>((uint64_t)a1, &v11, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v9 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 6) = v9;
    *((_QWORD *)v7 + 7) = v7 + 4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__find_equal<CMTime>(uint64_t a1, _QWORD *a2, CMTime *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;
  CMTime v9;
  CMTime time1;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        time1 = *a3;
        v9 = *(CMTime *)(v4 + 4);
        if ((CMTimeCompare(&time1, &v9) & 0x80000000) == 0)
          break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      time1 = *(CMTime *)(v7 + 4);
      v9 = *a3;
      if ((CMTimeCompare(&time1, &v9) & 0x80000000) == 0)
        break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t **std::__tree<std::__value_type<unsigned int,GlyphProperties>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,GlyphProperties>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,GlyphProperties>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x60uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *((_QWORD *)v11 + 11) = 0x3FF0000000000000;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::deque<CMTime>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 170 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA)
    a2 = 1;
  if (v5 < 0x154)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>(uint64_t **a1, CMTime *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__find_equal<CMTime>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__find_equal<CMTime>(uint64_t a1, _QWORD *a2, CMTime *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;
  CMTime v9;
  CMTime time1;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        time1 = *a3;
        v9 = *(CMTime *)((char *)v4 + 28);
        if ((CMTimeCompare(&time1, &v9) & 0x80000000) == 0)
          break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      time1 = *(CMTime *)((char *)v7 + 28);
      v9 = *a3;
      if ((CMTimeCompare(&time1, &v9) & 0x80000000) == 0)
        break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = *((_QWORD *)*a2 + 2);
  *(_OWORD *)(v6 + 28) = **a2;
  *(_QWORD *)(v6 + 44) = v7;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v6 + 52));
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B28DFD80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

__int128 **std::__find_segment_if[abi:ne180100]<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__find_segment<CMTime>,std::__identity>(__int128 **a1, __int128 *a2, __int128 **a3, __int128 *a4, __int128 *a5)
{
  __int128 *v7;
  __int128 **v8;
  __int128 **v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 **v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  CMTime v26;
  CMTime time1;

  v7 = a2;
  v8 = a1;
  if (a1 == a3)
  {
    if (a2 != a4)
    {
      while (1)
      {
        v13 = *v7;
        time1.epoch = *((_QWORD *)v7 + 2);
        *(_OWORD *)&time1.value = v13;
        v14 = *a5;
        v26.epoch = *((_QWORD *)a5 + 2);
        *(_OWORD *)&v26.value = v14;
        if (!CMTimeCompare(&time1, &v26))
          break;
        v7 = (__int128 *)((char *)v7 + 24);
        if (v7 == a4)
        {
          v7 = a4;
          break;
        }
      }
    }
    if (!v8)
      return 0;
    v9 = v8;
    if (*v8 + 255 == v7)
      return v8 + 1;
  }
  else
  {
    v9 = a3;
    v10 = (uint64_t)(*a1 + 255);
    if ((__int128 *)v10 == a2)
      goto LABEL_21;
    while (1)
    {
      v11 = *v7;
      time1.epoch = *((_QWORD *)v7 + 2);
      *(_OWORD *)&time1.value = v11;
      v12 = *a5;
      v26.epoch = *((_QWORD *)a5 + 2);
      *(_OWORD *)&v26.value = v12;
      if (!CMTimeCompare(&time1, &v26))
        break;
      v7 = (__int128 *)((char *)v7 + 24);
      if (v7 == (__int128 *)v10)
        goto LABEL_21;
    }
    if (v7 == (__int128 *)v10)
    {
LABEL_21:
      v20 = (uint64_t *)(v8 + 1);
      if (v8 + 1 == v9)
      {
        v21 = *v9;
        if (*v9 == a4)
        {
          v24 = *v9;
        }
        else
        {
          while (1)
          {
            v22 = *v21;
            time1.epoch = *((_QWORD *)v21 + 2);
            *(_OWORD *)&time1.value = v22;
            v23 = *a5;
            v26.epoch = *((_QWORD *)a5 + 2);
            *(_OWORD *)&v26.value = v23;
            if (!CMTimeCompare(&time1, &v26))
              break;
            v21 = (__int128 *)((char *)v21 + 24);
            if (v21 == a4)
            {
              v21 = a4;
              break;
            }
          }
          v24 = v21;
          v21 = *v9;
        }
        if (v21 + 255 == v24)
          return v8 + 2;
      }
      else
      {
        v15 = 0;
        v16 = v8++;
        v17 = *v20;
        while (1)
        {
          v18 = *(_OWORD *)(v17 + v15);
          time1.epoch = *(_QWORD *)(v17 + v15 + 16);
          *(_OWORD *)&time1.value = v18;
          v19 = *a5;
          v26.epoch = *((_QWORD *)a5 + 2);
          *(_OWORD *)&v26.value = v19;
          if (!CMTimeCompare(&time1, &v26))
            break;
          v15 += 24;
          if (v15 == 4080)
            goto LABEL_21;
        }
        v9 = v8;
        if ((__int128 *)(v17 + v15) == *v8 + 255)
          return v16 + 2;
      }
    }
    else
    {
      v9 = v8;
      if (v7 == *v8 + 255)
        return v8 + 1;
    }
  }
  return v9;
}

uint64_t std::deque<CMTime>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0xAA)
    a2 = 1;
  if (v2 < 0x154)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 170;
  }
  return v4 ^ 1u;
}

_QWORD *std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>::operator+=[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 169 - v3;
      v6 = &v2[-(v5 / 0xAA)];
      *result = v6;
      v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }
    else
    {
      *result = &v2[v3 / 0xAA];
      v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }
    result[1] = v4;
  }
  return result;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,0>@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CMTime *,std::__deque_iterator<CMTime,CMTime *,CMTime&,CMTime **,long,170l>,0>(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4080;
    }
    v18 = *a1 + 4080;
    v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CMTime *,std::__deque_iterator<CMTime,CMTime *,CMTime&,CMTime **,long,170l>,0>(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CMTime *,std::__deque_iterator<CMTime,CMTime *,CMTime&,CMTime **,long,170l>,0>@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 3)) < v12)
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 3);
      v11 -= 24 * v12;
      a4 -= 24 * v12;
      if (v12)
        result = memmove(a4, v11, 24 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>>>(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4080); ; i = v12 + 4080)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CMTime *,std::__deque_iterator<CMTime,CMTime *,CMTime&,CMTime **,long,170l>,0>(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CMTime *,std::__deque_iterator<CMTime,CMTime *,CMTime&,CMTime **,long,170l>,0>(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CMTime *,std::__deque_iterator<CMTime,CMTime *,CMTime&,CMTime **,long,170l>,0>@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4080) >> 3);
      v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 24 * v12);
      v7 += 24 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 24 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void std::deque<CMTime>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 170 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0xAA)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFF0uLL);
      std::__split_buffer<unsigned long *>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 85;
      else
        v40 = (uint64_t)a1[4] + 170;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF0uLL);
        std::__split_buffer<unsigned long *>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFF0uLL);
      }
      std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 85;
      else
        v35 = (uint64_t)a1[4] + 170;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 170;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B28E06B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::find<CMTime>(uint64_t a1, CMTime *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CMTime v7;
  CMTime time1;

  v3 = a1 + 8;
  v4 = std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__lower_bound<CMTime>(a1, a2, *(_QWORD *)(a1 + 8), a1 + 8);
  if (v3 == v4)
    return v3;
  v5 = v4;
  time1 = *a2;
  v7 = *(CMTime *)(v4 + 28);
  if (CMTimeCompare(&time1, &v7) < 0)
    return v3;
  return v5;
}

uint64_t std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__lower_bound<CMTime>(uint64_t a1, CMTime *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int32_t v7;
  uint64_t *v8;
  CMTime v10;
  CMTime time1;

  if (a3)
  {
    v5 = a3;
    do
    {
      time1 = *(CMTime *)(v5 + 28);
      v10 = *a2;
      v7 = CMTimeCompare(&time1, &v10);
      v8 = (uint64_t *)(v5 + 8);
      if (v7 >= 0)
      {
        v8 = (uint64_t *)v5;
        a4 = v5;
      }
      v5 = *v8;
    }
    while (*v8);
  }
  return a4;
}

uint64_t std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::find<CMTime>(uint64_t a1, CMTime *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CMTime v7;
  CMTime time1;

  v3 = a1 + 8;
  v4 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__lower_bound<CMTime>(a1, a2, *(_QWORD *)(a1 + 8), a1 + 8);
  if (v3 == v4)
    return v3;
  v5 = v4;
  time1 = *a2;
  v7 = *(CMTime *)(v4 + 32);
  if (CMTimeCompare(&time1, &v7) < 0)
    return v3;
  return v5;
}

uint64_t std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__lower_bound<CMTime>(uint64_t a1, CMTime *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int32_t v7;
  uint64_t *v8;
  CMTime v10;
  CMTime time1;

  if (a3)
  {
    v5 = a3;
    do
    {
      time1 = *(CMTime *)(v5 + 32);
      v10 = *a2;
      v7 = CMTimeCompare(&time1, &v10);
      v8 = (uint64_t *)(v5 + 8);
      if (v7 >= 0)
      {
        v8 = (uint64_t *)v5;
        a4 = v5;
      }
      v5 = *v8;
    }
    while (*v8);
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a2 + 56, *(_QWORD **)(a2 + 64));
  operator delete((void *)a2);
  return v3;
}

void TXGlyph::~TXGlyph(TXGlyph *this)
{
  JUMPOUT(0x1B5E29170);
}

void TXGlyph::TXGlyph(TXGlyph *this, __int16 a2, __int16 a3, TXFont *a4)
{
  *(_QWORD *)this = &off_1E64F9E50;
  *((_WORD *)this + 4) = a2;
  *((_WORD *)this + 5) = a3;
  *((_QWORD *)this + 2) = a4;
}

void TXGrowShrinkCurveNode1D::TXGrowShrinkCurveNode1D(OZBehaviorCurveNode *a1, OZBehavior *a2, OZChannel *a3)
{
  _QWORD *v4;

  OZBehaviorCurveNode::OZBehaviorCurveNode(a1, a2, a3);
  *v4 = &off_1E64F9E80;
  v4[4] = a2;
}

void TXGrowShrinkCurveNode1D::~TXGrowShrinkCurveNode1D(TXGrowShrinkCurveNode1D *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double TXGrowShrinkCurveNode1D::solveNode(TXGrowShrinkCurveNode1D *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v4;
  CMTime v6;

  v4 = *((_QWORD *)this + 4);
  v6 = *a2;
  return (*(double (**)(uint64_t, CMTime *))(*(_QWORD *)v4 + 680))(v4, &v6) + a4;
}

void TXGrowShrinkCurveNode1D::solveNode(TXGrowShrinkCurveNode1D *this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  double v7;
  uint64_t v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;

  v2 = *((_QWORD *)a2 + 19);
  v3 = *((_QWORD *)a2 + 10);
  v11 = *(CMTime *)((_BYTE *)a2 + 5);
  v10 = *(CMTime *)((_BYTE *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    v6 = 0;
    do
    {
      v7 = *(double *)(v3 + 8 * v6);
      v8 = *((_QWORD *)this + 4);
      v9 = v10;
      *(double *)(v2 + 8 * v6) = v7 * (*(double (**)(uint64_t, CMTime *))(*(_QWORD *)v8 + 680))(v8, &v9);
      v13 = v10;
      v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v10);
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 36));
  }
}

OZBehaviorCurveNode *TXGrowShrinkCurveNode1D::cloneNode(TXGrowShrinkCurveNode1D *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *(_QWORD *)v2 = &off_1E64F9E80;
  return v2;
}

void sub_1B28E0B48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t TXGrowShrinkCurveNode1D::compare(int a1, void *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 TXGrowShrinkCurveNode1D::getNeededRange(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 112);
  result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 152);
  return result;
}

__n128 OZCurveNode::getCurrentRange@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)a1 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 + 16);
  return result;
}

__n128 OZCurveNode::getNeededTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

char *AddMaterialToSequenceChannels(TXSequenceChannels *a1, OZMaterialBase *a2, unsigned int a3)
{
  OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 720), MEMORY[0x1E0CA2E68], 0.0);
  return TXSequenceChannels::addMaterialChannels(a1, a2, a3);
}

char *AddAllMaterialsToSequenceChannels(char *result, TXSequenceChannels *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  const CMTime *v5;
  uint64_t v6;
  unsigned int v7;

  v2 = *(uint64_t **)(*(_QWORD *)result + 480);
  v3 = *(uint64_t **)(*(_QWORD *)result + 488);
  if (v2 != v3)
  {
    v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v6 = *v2++;
      v7 = ((*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3) - 6;
      OZChannel::getValueAsInt((OZChannel *)(v6 + 720), v5, 0.0);
      result = TXSequenceChannels::addMaterialChannels(a2, (OZMaterialBase *)v6, v7);
    }
    while (v2 != v3);
  }
  return result;
}

TXSequenceChannels *RemoveAllMaterialsFromSequenceChannels(TXSequenceChannels *this)
{
  uint64_t v1;
  int v2;
  TXSequenceChannels *v3;

  v1 = (*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
  v2 = v1 - 6;
  if ((_DWORD)v1 != 6)
  {
    v3 = this;
    do
    {
      this = (TXSequenceChannels *)TXSequenceChannels::removeMaterialChannelsAtIndex(v3, 0);
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t TXTextLayout::pixelTransformSupport(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 144))
    return 0;
  else
    return 6;
}

void TXTextLayout::updateStringTokenizer(TXTextLayout *this)
{
  OZScene **v2;
  CFStringTokenizerRef *v3;
  const void *v4;
  TXChannelString *v5;
  char *StringPtr;
  __CFString *v7;
  char *v8;
  __CFString *v9;
  _BYTE v10[8];
  CFRange v11;

  v2 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v10, v2);
  v3 = (CFStringTokenizerRef *)((char *)this + 63872);
  v4 = (const void *)*((_QWORD *)this + 7984);
  if (v4)
    CFRelease(v4);
  v5 = (TXTextLayout *)((char *)this + 19048);
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  v7 = PCString::cf_str((PCString *)StringPtr);
  v8 = TXChannelString::getStringPtr(v5);
  v9 = PCString::cf_str((PCString *)v8);
  v11.length = CFStringGetLength(v9);
  v11.location = 0;
  *v3 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, v11, 4uLL, 0);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v10);
}

void sub_1B28E0DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

CFIndex TXTextLayout::getWordRange(__CFStringTokenizer **this, unsigned int a2, char a3)
{
  OZScene **v6;
  __CFStringTokenizer *v7;
  CFStringTokenizerTokenType v8;
  CFIndex location;
  char v10;
  _BYTE v12[8];

  v6 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v12, v6);
  v7 = this[7984];
  if (!v7)
  {
    TXTextLayout::updateStringTokenizer((TXTextLayout *)this);
    v7 = this[7984];
  }
  v8 = CFStringTokenizerGoToTokenAtIndex(v7, a2);
  location = CFStringTokenizerGetCurrentTokenRange(v7).location;
  if (location == a2)
    v10 = a3;
  else
    v10 = 1;
  if (!v8 || (v10 & 1) == 0)
  {
    if (CFStringTokenizerGoToTokenAtIndex(v7, a2 - 1))
      location = CFStringTokenizerGetCurrentTokenRange(v7).location;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v12);
  return location;
}

void sub_1B28E0ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout(TXTextLayout *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  char *v5;
  uint64_t v6;
  char **v7;
  PCURL *v8;
  TXTextLayout::TXTextLayout_oldTrackingInfo *v9;
  OZChannelInfo *Instance;
  PCURL *v11;
  TXTextLayout::TXTextLayout_trackingImpl *v12;
  TXTextLayout::TXTextLayout_trackingInfo *v13;
  OZChannelInfo *v14;
  PCURL *v15;
  PCURL *v16;
  PCURL *v17;
  PCURL *v18;
  PCURL *v19;
  PCURL *v20;
  PCURL *v21;
  PCURL *v22;
  PCURL *v23;
  TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo *v24;
  OZChannelInfo *v25;
  PCURL *v26;
  PCURL *v27;
  PCURL *v28;
  PCURL *v29;
  PCURL *v30;
  PCURL *v31;
  PCURL *v32;
  PCURL *v33;
  TXTextLayout::TXTextLayout_leftMarginImpl *v34;
  OZChannelImpl *v35;
  PCURL *v36;
  TXTextLayout::TXTextLayout_rightMarginImpl *v37;
  OZChannelImpl *v38;
  PCURL *v39;
  TXTextLayout::TXTextLayout_topMarginImpl *v40;
  OZChannelImpl *v41;
  PCURL *v42;
  TXTextLayout::TXTextLayout_bottomMarginImpl *v43;
  OZChannelImpl *v44;
  PCURL *v45;
  PCURL *v51;
  PCURL *v52;
  PCURL *v53;
  PCURL *v54;
  PCURL *v55;
  TXTextLayout::TXTextLayout_radiusImpl *v56;
  TXTextLayout::TXTextLayout_radiusInfo *v57;
  OZChannelInfo *v58;
  PCURL *v59;
  TXTextLayout::TXTextLayout_rectSizeImpl *v60;
  TXTextLayout::TXTextLayout_rectSizeInfo *v61;
  OZChannelInfo *v62;
  PCURL *v63;
  PCURL *v64;
  PCURL *v65;
  TXTextLayout::TXTextLayout_waveAmplitudeImpl *v66;
  TXTextLayout::TXTextLayout_waveAmplitudeInfo *v67;
  OZChannelInfo *v68;
  PCURL *v69;
  TXTextLayout::TXTextLayout_waveFrequencyImpl *v70;
  TXTextLayout::TXTextLayout_waveFrequencyInfo *v71;
  OZChannelInfo *v72;
  PCURL *v73;
  PCURL *v74;
  TXTextLayout::TXTextLayout_waveDampingImpl *v75;
  TXTextLayout::TXTextLayout_waveDampingInfo *v76;
  OZChannelInfo *v77;
  PCURL *v78;
  PCURL *v79;
  TXTextLayout::TXTextLayout_pathOffsetImpl *v80;
  TXTextLayout::TXTextLayout_pathOffsetInfo *v81;
  OZChannelInfo *v82;
  PCURL *v83;
  PCURL *v84;
  PCURL *v85;
  PCString *v86;
  PCURL *v87;
  PCURL *v88;
  PCURL *v89;
  PCURL *v90;
  PCURL *v91;
  TXTextLayout::TXTextLayout_showScrollBarsImpl *v92;
  OZChannelImpl *v93;
  PCURL *v94;
  TXTextLayout::TXTextLayout_showRulersImpl *v95;
  OZChannelImpl *v96;
  PCURL *v97;
  PCString *v98;
  TXTextLayout::TXTextLayout_versionImpl *v99;
  OZChannelImpl *v100;
  PCURL *v101;
  PCString *v102;
  PCURL *v103;
  PCString *v104;
  PCString *v105;
  PCString *v106;
  PCString *v107;
  TXTextStyleManager *v108;
  uint64_t v109;
  __CFString *v110;
  std::__shared_weak_count *v111;
  unint64_t *p_shared_owners;
  unint64_t v113;
  TXFontManager *v114;
  OZFontManagerBase *v115;
  __CFString *var0;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  char *v123;
  TXParagraphStyle *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  __int128 v132;
  OZChannelBase *v133;
  char *v134;
  TXParagraphStyle *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  PCString v138;
  std::__shared_weak_count *v139;
  PCString v140;
  std::__shared_weak_count *v141;

  v5 = (char *)this + 18984;
  OZTextLayout::OZTextLayout(this, a2, a3, a4);
  *(_QWORD *)v6 = off_1E64F9F78;
  *(_QWORD *)(v6 + 200) = &unk_1E64FA440;
  *(_QWORD *)(v6 + 216) = &unk_1E64FAD18;
  *(_QWORD *)(v6 + 248) = &unk_1E64FAF70;
  *(_QWORD *)(v6 + 6728) = &off_1E64F9F78[522];
  *(_QWORD *)(v6 + 18976) = &off_1E64F9F78[549];
  *(_DWORD *)v5 = -1;
  v134 = v5;
  v5[4] = 1;
  v7 = (char **)(v6 + 19024);
  *(_OWORD *)(v6 + 19000) = 0u;
  *(_OWORD *)(v6 + 19016) = 0u;
  *(_OWORD *)(v6 + 19032) = 0u;
  PCURL::PCURL((PCURL *)&v140, CFSTR("Text Layout String"));
  TXChannelString::TXChannelString((TXTextLayout *)((char *)this + 19048), &v140, (OZChannelFolder *)((char *)this + 648), 0x171u, 0);
  PCString::~PCString(&v140);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 2402);
  *((_QWORD *)this + 2405) = 0;
  *((_QWORD *)this + 2404) = 0;
  *((_QWORD *)this + 2403) = (char *)this + 19232;
  *((_QWORD *)this + 2406) = &unk_1E64FB120;
  *((_QWORD *)this + 2407) = 0;
  TXDiscontinuousSelection::TXDiscontinuousSelection((TXTextLayout *)((char *)this + 19272));
  *((_WORD *)v5 + 168) = 0;
  *((_DWORD *)v5 + 85) = 1;
  v5[348] = 0;
  *((_DWORD *)v5 + 88) = 0;
  *((_QWORD *)this + 2418) = (char *)this + 19344;
  *((_QWORD *)this + 2419) = (char *)this + 19344;
  *((_QWORD *)this + 2420) = 0;
  *((_QWORD *)this + 2421) = (char *)this + 19368;
  *((_QWORD *)this + 2422) = (char *)this + 19368;
  v5[408] = 1;
  *((_QWORD *)this + 2423) = 0;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 19396));
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 19412));
  PCURL::PCURL((PCURL *)&v140, CFSTR("Text Face Opacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 19448), 1.0, &v140, (OZChannelFolder *)((char *)this + 648), 0x16Eu, 0, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v8, CFSTR("Text Layout Tracking"));
  Instance = (OZChannelInfo *)TXTextLayout::TXTextLayout_oldTrackingInfo::getInstance(v9);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 19600), &v140, (OZChannelFolder *)((char *)this + 648), 0x152u, 2, 0, Instance);
  PCString::~PCString(&v140);
  PCURL::PCURL(v11, CFSTR("Text Layout Tracking"));
  v13 = (TXTextLayout::TXTextLayout_trackingInfo *)TXTextLayout::TXTextLayout_trackingImpl::getInstance(v12);
  v14 = (OZChannelInfo *)TXTextLayout::TXTextLayout_trackingInfo::getInstance(v13);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 19752), 0.0, &v140, (OZChannelFolder *)((char *)this + 648), 0x170u, 2u, (OZChannelImpl *)v13, v14);
  PCString::~PCString(&v140);
  PCURL::PCURL(v15, CFSTR("Text Layout Flatten"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19904), 0, &v140, (OZChannelFolder *)((char *)this + 648), 0x15Fu, 0, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v16, CFSTR("Text Layout Render Space Enum"));
  PCURL::PCURL((PCURL *)&v138, CFSTR("Text Layout Render Space"));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 20056), &v140, &v138, (OZChannelFolder *)((char *)this + 648), 0x168u, 0, 0, 0);
  PCString::~PCString(&v138);
  PCString::~PCString(&v140);
  PCURL::PCURL(v17, CFSTR("Text Layout Face Camera"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 20312), 0, &v140, (OZChannelFolder *)((char *)this + 648), 0x160u, 0, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v18, CFSTR("Text Layout Method Enum"));
  PCURL::PCURL((PCURL *)&v138, CFSTR("Text Layout Method"));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 20464), 0, &v140, &v138, (OZChannelFolder *)((char *)this + 648), 0x13Au, 0, 0, 0);
  PCString::~PCString(&v138);
  PCString::~PCString(&v140);
  PCURL::PCURL(v19, CFSTR("Text Layout Direction Enum"));
  PCURL::PCURL((PCURL *)&v138, CFSTR("Text Layout Direction"));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 20720), 0, &v140, &v138, (OZChannelFolder *)((char *)this + 648), 0x13Cu, 0, 0, 0);
  PCString::~PCString(&v138);
  PCString::~PCString(&v140);
  PCURL::PCURL(v20, CFSTR("Text Layout Alignment"));
  v133 = (OZChannelBase *)((char *)this + 20976);
  TXChannelAlignment::TXChannelAlignment((TXTextLayout *)((char *)this + 20976), &v140, (OZChannelFolder *)((char *)this + 648), 0x175u, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v21, CFSTR("Text Layout Alignment Enum"));
  PCURL::PCURL((PCURL *)&v138, CFSTR("Text Layout Alignment"));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 21624), 0, &v140, &v138, (OZChannelFolder *)((char *)this + 648), 0x13Du, 0, 0, 0);
  PCString::~PCString(&v138);
  PCString::~PCString(&v140);
  PCURL::PCURL(v22, CFSTR("Text Layout Justification Enum"));
  PCURL::PCURL((PCURL *)&v138, CFSTR("Text Layout Justification"));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 21880), &v140, &v138, (OZChannelFolder *)((char *)this + 648), 0x13Eu, 0, 0, 0);
  PCString::~PCString(&v138);
  PCString::~PCString(&v140);
  PCURL::PCURL(v23, CFSTR("Text Layout Line Spacing"));
  v25 = (OZChannelInfo *)TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::getInstance(v24);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 22136), &v140, (OZChannelFolder *)((char *)this + 648), 0x138u, 8, 0, v25);
  PCString::~PCString(&v140);
  PCURL::PCURL(v26, CFSTR("Text Layout Anchor Point Enum"));
  PCURL::PCURL((PCURL *)&v138, CFSTR("Text Layout Anchor Point"));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 22288), &v140, &v138, (OZChannelFolder *)((char *)this + 648), 0x165u, 0, 0, 0);
  PCString::~PCString(&v138);
  PCString::~PCString(&v140);
  PCURL::PCURL(v27, CFSTR("Text Layout Anchor Position Enum"));
  PCURL::PCURL((PCURL *)&v138, CFSTR("Text Layout Anchor Position"));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 22544), &v140, &v138, (OZChannelFolder *)((char *)this + 648), 0x177u, 0, 0, 0);
  PCString::~PCString(&v138);
  PCString::~PCString(&v140);
  PCURL::PCURL(v28, CFSTR("Text Layout Anchor Point Position"));
  OZChannelPosition3D::OZChannelPosition3D((TXTextLayout *)((char *)this + 22800), &v140, (OZChannelFolder *)((char *)this + 648), 0x166u, 0, 3u);
  PCString::~PCString(&v140);
  PCURL::PCURL(v29, CFSTR("Text Layout Type On"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 23688), &v140, (OZChannelFolder *)((char *)this + 648), 0x13Fu, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v30, CFSTR("Text Layout Type On Start"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 23816), 0.0, &v140, (OZChannelFolder *)((char *)this + 23688), 0x140u, 0, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v31, CFSTR("Text Layout Type On End"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 23968), 1.0, &v140, (OZChannelFolder *)((char *)this + 23688), 0x141u, 0, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v32, CFSTR("Text Layout Type On Fade In"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 24120), 1, &v140, (OZChannelFolder *)((char *)this + 23688), 0x142u, 0, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v33, CFSTR("Text Layout Left Margin"));
  v35 = (OZChannelImpl *)TXTextLayout::TXTextLayout_leftMarginImpl::getInstance(v34);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 24272), &v140, (OZChannelFolder *)((char *)this + 648), 0x143u, 0, v35, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v36, CFSTR("Text Layout Right Margin"));
  v38 = (OZChannelImpl *)TXTextLayout::TXTextLayout_rightMarginImpl::getInstance(v37);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 24424), &v140, (OZChannelFolder *)((char *)this + 648), 0x144u, 0, v38, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v39, CFSTR("Text Layout Top Margin"));
  v41 = (OZChannelImpl *)TXTextLayout::TXTextLayout_topMarginImpl::getInstance(v40);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 24576), &v140, (OZChannelFolder *)((char *)this + 648), 0x145u, 0, v41, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v42, CFSTR("Text Layout Bottom Margin"));
  v44 = (OZChannelImpl *)TXTextLayout::TXTextLayout_bottomMarginImpl::getInstance(v43);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 24728), &v140, (OZChannelFolder *)((char *)this + 648), 0x146u, 0, v44, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v45, CFSTR("Text Layout Sequence"));
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 24880), &v140, (OZChannelFolder *)((char *)this + 648), 0x148u, 10, 0, 0);
  PCString::~PCString(&v140);
  TXSequenceChannels::TXSequenceChannels((TXTextLayout *)((char *)this + 25032), (OZChannelFolder *)((char *)this + 648), 0x148u);
  *((_QWORD *)this + 6525) = &unk_1E64FC330;
  *((_OWORD *)this + 3263) = 0u;
  *((_OWORD *)this + 3264) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  v132 = _Q0;
  *((_OWORD *)this + 3265) = _Q0;
  *((_WORD *)this + 26128) = 0;
  *((_BYTE *)this + 52258) = 0;
  *((_DWORD *)this + 13090) = 16777472;
  *((_BYTE *)this + 52364) = 0;
  *((_DWORD *)this + 13092) = 0;
  PCURL::PCURL((PCURL *)&v140, CFSTR("Text Layout Path Heading"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 52376), &v140, (OZChannelFolder *)((char *)this + 648), 0x149u, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v51, CFSTR("Text Layout Line Path"));
  OZChannelPosition3D::OZChannelPosition3D((TXTextLayout *)((char *)this + 52504), &v140, (OZChannelFolder *)((char *)this + 52376), 0x14Eu, 0x28000002u, 3u);
  PCString::~PCString(&v140);
  PCURL::PCURL(v52, CFSTR("Text Layout Loop Path"));
  OZChannelPosition3D::OZChannelPosition3D((TXTextLayout *)((char *)this + 53392), &v140, (OZChannelFolder *)((char *)this + 52376), 0x14Fu, 0x28000002u, 3u);
  PCString::~PCString(&v140);
  PCURL::PCURL(v53, CFSTR("Text Layout Path Shape Enum"));
  PCURL::PCURL((PCURL *)&v138, CFSTR("Text Layout Path Shape"));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 54280), &v140, &v138, (OZChannelFolder *)((char *)this + 52376), 0x14Au, 0, 0, 0);
  PCString::~PCString(&v138);
  PCString::~PCString(&v140);
  PCURL::PCURL(v54, CFSTR("Text Layout Path Type Enum"));
  PCURL::PCURL((PCURL *)&v138, CFSTR("Text Layout Path Type"));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 54536), 0, &v140, &v138, (OZChannelFolder *)((char *)this + 52376), 0x151u, 0, 0, 0);
  PCString::~PCString(&v138);
  PCString::~PCString(&v140);
  PCURL::PCURL(v55, CFSTR("Motion Path Behavior Circle Radius"));
  v57 = (TXTextLayout::TXTextLayout_radiusInfo *)TXTextLayout::TXTextLayout_radiusImpl::getInstance(v56);
  v58 = (OZChannelInfo *)TXTextLayout::TXTextLayout_radiusInfo::getInstance(v57);
  OZChannel2D::OZChannel2D((TXTextLayout *)((char *)this + 54792), 200.0, 200.0, &v140, (OZChannelFolder *)((char *)this + 52376), 0x154u, 0, 2u, (OZChannelImpl *)v57, v58);
  PCString::~PCString(&v140);
  PCURL::PCURL(v59, CFSTR("Motion Path Behavior Rect Size"));
  v61 = (TXTextLayout::TXTextLayout_rectSizeInfo *)TXTextLayout::TXTextLayout_rectSizeImpl::getInstance(v60);
  v62 = (OZChannelInfo *)TXTextLayout::TXTextLayout_rectSizeInfo::getInstance(v61);
  OZChannel2D::OZChannel2D((TXTextLayout *)((char *)this + 55232), 400.0, 400.0, &v140, (OZChannelFolder *)((char *)this + 52376), 0x155u, 0, 2u, (OZChannelImpl *)v61, v62);
  PCString::~PCString(&v140);
  PCURL::PCURL(v63, CFSTR("Motion Path Behavior Wave Start Point"));
  OZChannelPosition::OZChannelPosition((TXTextLayout *)((char *)this + 55672), 0.0, 0.0, &v140, (OZChannelFolder *)((char *)this + 52376), 0x156u, 0, 2u, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v64, CFSTR("Motion Path Behavior Wave End Point"));
  OZChannelPosition::OZChannelPosition((TXTextLayout *)((char *)this + 56376), 400.0, 0.0, &v140, (OZChannelFolder *)((char *)this + 52376), 0x157u, 0, 2u, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v65, CFSTR("Motion Path Behavior Wave Amplitude"));
  v67 = (TXTextLayout::TXTextLayout_waveAmplitudeInfo *)TXTextLayout::TXTextLayout_waveAmplitudeImpl::getInstance(v66);
  v68 = (OZChannelInfo *)TXTextLayout::TXTextLayout_waveAmplitudeInfo::getInstance(v67);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 57080), 100.0, &v140, (OZChannelFolder *)((char *)this + 52376), 0x158u, 0, (OZChannelImpl *)v67, v68);
  PCString::~PCString(&v140);
  PCURL::PCURL(v69, CFSTR("Motion Path Behavior Wave Frequency"));
  v71 = (TXTextLayout::TXTextLayout_waveFrequencyInfo *)TXTextLayout::TXTextLayout_waveFrequencyImpl::getInstance(v70);
  v72 = (OZChannelInfo *)TXTextLayout::TXTextLayout_waveFrequencyInfo::getInstance(v71);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 57232), 1.0, &v140, (OZChannelFolder *)((char *)this + 52376), 0x159u, 0, (OZChannelImpl *)v71, v72);
  PCString::~PCString(&v140);
  v131 = (uint64_t)v7;
  PCURL::PCURL(v73, CFSTR("Motion Path Behavior Wave Phase"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 57384), 0.0, &v140, (OZChannelFolder *)((char *)this + 52376), 0x15Au, 0, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v74, CFSTR("Motion Path Behavior Wave Damping"));
  v76 = (TXTextLayout::TXTextLayout_waveDampingInfo *)TXTextLayout::TXTextLayout_waveDampingImpl::getInstance(v75);
  v77 = (OZChannelInfo *)TXTextLayout::TXTextLayout_waveDampingInfo::getInstance(v76);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 57536), 0.0, &v140, (OZChannelFolder *)((char *)this + 52376), 0x15Du, 0, (OZChannelImpl *)v76, v77);
  PCString::~PCString(&v140);
  PCURL::PCURL(v78, CFSTR("Text Layout Path Align To Shape"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 57688), 1, &v140, (OZChannelFolder *)((char *)this + 52376), 0x15Cu, 0, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v79, CFSTR("Text Layout Path Offset"));
  v81 = (TXTextLayout::TXTextLayout_pathOffsetInfo *)TXTextLayout::TXTextLayout_pathOffsetImpl::getInstance(v80);
  v82 = (OZChannelInfo *)TXTextLayout::TXTextLayout_pathOffsetInfo::getInstance(v81);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 57840), 0.0, &v140, (OZChannelFolder *)((char *)this + 52376), 0x14Bu, 0, (OZChannelImpl *)v81, v82);
  PCString::~PCString(&v140);
  PCURL::PCURL(v83, CFSTR("Text Layout Path Wrap Around"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 57992), 1, &v140, (OZChannelFolder *)((char *)this + 52376), 0x15Bu, 0, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v84, CFSTR("Text Layout Path Inside Path"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 58144), &v140, (OZChannelFolder *)((char *)this + 52376), 0x14Cu, 0, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v85, CFSTR("Text Layout Path Align To Path"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 58296), 1, &v140, (OZChannelFolder *)((char *)this + 52376), 0x14Du, 0, 0, 0);
  PCString::~PCString(&v140);
  PCString::PCString(v86, "Align To Text");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 58448), 0, &v140, (OZChannelFolder *)((char *)this + 52376), 0x161u, 0, 0, 0);
  PCString::~PCString(&v140);
  PCEvaluator::PCEvaluator((TXTextLayout *)((char *)this + 58600));
  PCString::PCString(&v140, "Text Object Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 58696), &v140, (OZChannelFolder *)((char *)this + 648), 0x150u, 0x801000Au, 0);
  PCString::~PCString(&v140);
  *((_QWORD *)this + 7355) = 0;
  *(_OWORD *)((char *)this + 58824) = 0u;
  *((_DWORD *)this + 14712) = -1;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7357);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7358);
  PCURL::PCURL((PCURL *)&v140, CFSTR("Text Paragraph Style Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 58880), &v140, (OZChannelFolder *)((char *)this + 648), 0x162u, 0, 0);
  PCString::~PCString(&v140);
  *((_OWORD *)this + 3688) = 0u;
  *((_OWORD *)this + 3689) = v132;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 59040));
  *((_OWORD *)this + 3693) = xmmword_1B304F270;
  *((_OWORD *)this + 3692) = xmmword_1B304F270;
  *((_OWORD *)this + 3691) = xmmword_1B304F270;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 59104));
  PCURL::PCURL((PCURL *)&v140, CFSTR("Text Layout Is FCP Editable"));
  OZChannelBool::OZChannelBool((OZChannelBool *)this + 389, 1, &v140, (OZChannelFolder *)((char *)this + 648), 0x15Eu, 0x80u, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v87, CFSTR("Text Layout Scale Heading"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 59280), &v140, (OZChannelFolder *)((char *)this + 648), 0x163u, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v88, CFSTR("Text Layout Scale Affects Layout"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 59408), 1, &v140, (OZChannelFolder *)((char *)this + 59280), 0x164u, 0, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v89, CFSTR("Text Layout Credit Scroll Line Spacing"));
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 59560), &v140, (OZChannelFolder *)((char *)this + 648), 0x167u, 134283274, 0, 0);
  PCString::~PCString(&v140);
  *((_OWORD *)this + 3733) = xmmword_1B30503B0;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 59744));
  PCURL::PCURL((PCURL *)&v140, CFSTR("Text Layout Pan Heading"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 59760), &v140, (OZChannelFolder *)((char *)this + 648), 0x169u, 0xAu, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v90, CFSTR("Text Layout Pan Position"));
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 59888), 0.0, &v140, (OZChannelFolder *)((char *)this + 59760), 0x16Au, 10, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v91, CFSTR("Text Layout Show Scroll Bars"));
  v93 = (OZChannelImpl *)TXTextLayout::TXTextLayout_showScrollBarsImpl::getInstance(v92);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 60056), 1, &v140, (OZChannelFolder *)((char *)this + 648), 0x16Bu, 0x41000Au, v93, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v94, CFSTR("Text Layout Show Rulers"));
  v96 = (OZChannelImpl *)TXTextLayout::TXTextLayout_showRulersImpl::getInstance(v95);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 60208), 1, &v140, (OZChannelFolder *)((char *)this + 648), 0x16Cu, 0x41000Au, v96, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v97, CFSTR("Text Layout Ticker Position"));
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 60360), 0.0, &v140, (OZChannelFolder *)((char *)this + 59760), 0x16Du, 10, 0, 0);
  PCString::~PCString(&v140);
  v99 = (TXTextLayout::TXTextLayout_versionImpl *)PCString::PCString(v98, "Hidden Channel");
  v100 = (OZChannelImpl *)TXTextLayout::TXTextLayout_versionImpl::getInstance(v99);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 60520), 5, &v140, (OZChannelFolder *)((char *)this + 648), 0x16Fu, 2, v100, 0);
  PCString::~PCString(&v140);
  *((int64x2_t *)this + 3792) = vdupq_n_s64((unint64_t)this + 60672);
  *((_QWORD *)this + 7586) = 0;
  *((_QWORD *)this + 7589) = 0;
  *((_QWORD *)this + 7588) = 0;
  *((_QWORD *)this + 7587) = (char *)this + 60704;
  *((_OWORD *)this + 3795) = 0u;
  *((_OWORD *)this + 3796) = 0u;
  *((_OWORD *)this + 3797) = 0u;
  PCSharedMutex::PCSharedMutex((TXTextLayout *)((char *)this + 60768));
  *((_QWORD *)this + 7613) = 0;
  *((_QWORD *)this + 7612) = (char *)this + 60904;
  *((_QWORD *)this + 7609) = (char *)this + 60872;
  *((_QWORD *)this + 7610) = (char *)this + 60872;
  *((_QWORD *)this + 7611) = 0;
  *((_QWORD *)this + 7614) = 0;
  *(_OWORD *)((char *)this + 60920) = 0u;
  *(_OWORD *)((char *)this + 60936) = 0u;
  *(_OWORD *)((char *)this + 60952) = 0u;
  *((_QWORD *)this + 7623) = 0;
  *((_QWORD *)this + 7622) = (char *)this + 60984;
  *((_QWORD *)this + 7624) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 61000));
  *(_OWORD *)((char *)this + 61080) = 0u;
  *((_QWORD *)this + 7634) = (char *)this + 61080;
  *(_OWORD *)((char *)this + 61096) = 0u;
  *((_QWORD *)this + 7648) = 0;
  *(_OWORD *)((char *)this + 61112) = 0u;
  *(_OWORD *)((char *)this + 61128) = 0u;
  *(_OWORD *)((char *)this + 61160) = 0u;
  PCURL::PCURL((PCURL *)&v140, CFSTR("Text Layout Scale To Margins Enum"));
  PCURL::PCURL((PCURL *)&v138, CFSTR("Text Layout Scale To Margins"));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 61208), 0, &v140, &v138, (OZChannelFolder *)((char *)this + 648), 0x172u, 0, 0, 0);
  PCString::~PCString(&v138);
  PCString::~PCString(&v140);
  PCURL::PCURL(v101, CFSTR("Text Layout Margin Scale"));
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 61464), 1.0, &v140, (OZChannelFolder *)((char *)this + 648), 0x178u, 0x400000, 0, 0);
  PCString::~PCString(&v140);
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 61632));
  PCURL::PCURL((PCURL *)&v140, CFSTR("Text Layout Crop To Margins"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 61648), 0, &v140, (OZChannelFolder *)((char *)this + 648), 0x174u, 0, 0, 0);
  PCString::~PCString(&v140);
  PCString::PCString(v102, "Wrap To Bottom Margin");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 61800), &v140, (OZChannelFolder *)((char *)this + 648), 0x17Du, 0, 0, 0);
  PCString::~PCString(&v140);
  PCURL::PCURL(v103, CFSTR("Text Background Color"));
  OZChannelColor::OZChannelColor((TXTextLayout *)((char *)this + 61952), 0.0, 0.0, 0.0, 1.0, &v140, (OZChannelFolder *)((char *)this + 648), 0x176u, 0, 6u);
  PCString::~PCString(&v140);
  PCString::PCString(v104, "Add Extra Line Spacing For Diacritics");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 63112), 0, &v140, (OZChannelFolder *)((char *)this + 648), 0x17Bu, 0, 0, 0);
  PCString::~PCString(&v140);
  PCString::PCString(v105, "Extra Line Spacing");
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 63264), 0.0, &v140, (OZChannelFolder *)((char *)this + 648), 0x17Cu, 0, 0, 0);
  PCString::~PCString(&v140);
  PCString::PCString(v106, "Dynamic Line Spacing for Diacritics");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 63416), 0, &v140, (OZChannelFolder *)((char *)this + 648), 0x17Eu, 0, 0, 0);
  PCString::~PCString(&v140);
  PCString::PCString(v107, "Minimum Line Spacing");
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 63568), 0.0, &v140, (OZChannelFolder *)((char *)this + 648), 0x17Fu, 0, 0, 0);
  PCString::~PCString(&v140);
  *((_QWORD *)this + 7967) = 0;
  *((_QWORD *)this + 7968) = 0;
  *((_QWORD *)this + 7969) = 0;
  *((_BYTE *)this + 63761) = 0;
  *((_DWORD *)this + 15951) = 0;
  *((_DWORD *)this + 15952) = 0;
  *(_OWORD *)((char *)this + 63816) = 0u;
  *((_DWORD *)this + 15953) = -1;
  *((_QWORD *)this + 7984) = 0;
  *(_OWORD *)((char *)this + 63832) = 0u;
  *(_OWORD *)((char *)this + 63848) = 0u;
  OZValueCache<OZBoundsCacheItem>::OZValueCache((uint64_t)this + 63888);
  OZValueCache<OZProjectedBoundsCacheItem>::OZValueCache((uint64_t)this + 64032);
  *((_BYTE *)this + 64176) = 0;
  *((_QWORD *)this + 8023) = 0;
  *((_OWORD *)this + 4012) = xmmword_1B304EED0;
  *(_OWORD *)((char *)this + 64216) = 0u;
  *((_QWORD *)this + 8026) = (char *)this + 64216;
  *((_OWORD *)this + 4015) = 0u;
  *((_QWORD *)this + 8029) = (char *)this + 64240;
  *((_OWORD *)this + 4016) = 0u;
  *((_OWORD *)this + 4017) = 0u;
  *((_OWORD *)this + 4019) = 0u;
  *((_DWORD *)this + 16072) = 1065353216;
  *((_QWORD *)this + 8037) = (char *)this + 64304;
  *((_DWORD *)this + 16080) = 0;
  *((_BYTE *)this + 64324) = 1;
  *(_OWORD *)((char *)this + 64328) = 0u;
  *(_OWORD *)((char *)this + 64344) = v132;
  *((_DWORD *)this + 16090) = 0;
  *((_QWORD *)this + 8047) = 0;
  *((_QWORD *)this + 8046) = (char *)this + 64376;
  *((_QWORD *)this + 8048) = 0;
  *((_QWORD *)this + 8051) = 0;
  *((_QWORD *)this + 7649) = 0;
  *((_QWORD *)this + 7621) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25064), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 28592), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 33424), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 38664), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 45048), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 256), 0x2000000, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 256));
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 256), CFSTR("TXTextLayoutChanObjectRootController"));
  v109 = TXTextStyleManager::getInstance(v108);
  v110 = *(__CFString **)(v109 + 8);
  v111 = *(std::__shared_weak_count **)(v109 + 16);
  v140.var0 = v110;
  v141 = v111;
  if (v111)
  {
    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
    do
      v113 = __ldxr(p_shared_owners);
    while (__stxr(v113 + 1, p_shared_owners));
  }
  std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>((OZSceneNode **)v110, &v138);
  v115 = (OZFontManagerBase *)TXFontManager::getInstance(v114);
  var0 = v138.var0;
  OZFontManagerBase::getDefaultSystemFontFace(v115, &v136);
  TXTextStyle::setFont((uint64_t)var0, &v136);
  v117 = v137;
  if (v137)
  {
    v118 = (unint64_t *)&v137->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  TXTextLayout::addStyle((uint64_t)this, (OZChannelBase **)&v138, 1);
  v120 = (_QWORD *)operator new();
  TXTextStyleRun::TXTextStyleRun(v120, (uint64_t *)&v138);
  v121 = operator new(0x18uLL);
  v122 = *((_QWORD *)this + 2421);
  v121[1] = (char *)this + 19368;
  v121[2] = v120;
  *v121 = v122;
  *(_QWORD *)(v122 + 8) = v121;
  *((_QWORD *)this + 2421) = v121;
  ++*((_QWORD *)this + 2423);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 24272), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 24424), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 24728), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 24576), 0);
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 52376), TXPathResetCallback, 0, 0);
  *((_BYTE *)this + 53832) = 0;
  *((_BYTE *)this + 52944) = 0;
  OZChannel::setDiscrete((OZChannel *)((char *)this + 52640), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 52792), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53240), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53528), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53680), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 54128), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6880), 2048, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 6880));
  *((_QWORD *)this + 2408) = 0;
  *((_QWORD *)this + 2429) = 0;
  v134[456] = 0;
  *((_DWORD *)this + 14718) = 0;
  *(_OWORD *)((char *)this + 60040) = 0u;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 60056), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 60208), 0);
  std::vector<TXParagraphStyle *>::resize((uint64_t)v7, 0);
  v123 = *v7;
  v124 = (TXParagraphStyle *)operator new();
  TXParagraphStyle::TXParagraphStyle(v124, this);
  v135 = v124;
  std::vector<TXParagraphStyle *>::insert(v131, v123, &v135);
  std::vector<TXParagraphStyle *>::resize((uint64_t)this + 63736, 0);
  (*(void (**)(TXTextLayout *, uint64_t))(*(_QWORD *)this + 336))(this, 1);
  *(_WORD *)((char *)this + 52257) = 0;
  *((_BYTE *)this + 63720) = 0;
  *((_BYTE *)this + 63728) = 0;
  *((_BYTE *)this + 63760) = 0;
  *((_WORD *)v134 + 4) = 1;
  v134[10] = 0;
  *((_DWORD *)this + 15128) = 0;
  *((_BYTE *)this + 61200) = 0;
  *((_BYTE *)this + 63776) = 0;
  *((_QWORD *)this + 7971) = 0x3FF0000000000000;
  *((_DWORD *)this + 15288) = 0;
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 19048), CFSTR("TXTextViewController"));
  OZChannelBase::setLabelCtlrClassName(v133, CFSTR("OZMoChanLabelCltr"));
  OZChannelBase::setParameterCtlrClassName(v133, CFSTR("TXAligmentController"));
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 21368), CFSTR("TXVerticalAlignmentController"));
  OZChannelEnum::setTags((TXTextLayout *)((char *)this + 22544), TXTextLayout::getAnchorPositionTags(unsigned int &)::anchorPositionTags, 6);
  *((_WORD *)this + 31900) = 1;
  *((_BYTE *)this + 64392) = 0;
  *((_QWORD *)this + 8050) = 0;
  v125 = v139;
  if (v139)
  {
    v126 = (unint64_t *)&v139->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v141;
  if (v141)
  {
    v129 = (unint64_t *)&v141->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
}

void sub_1B28E2C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, OZChannel *a16, OZChannelBool *a17, OZChannel *a18, OZChannelBool *a19, OZChannelColor *a20,OZChannelBool *a21,OZChannelBool *a22,OZChannel *a23,OZChannelEnum *a24,void **a25,PCString **a26,PCMutex *a27,_QWORD *a28,_QWORD **a29,uint64_t *a30,std::mutex *a31,uint64_t *a32,OZChannel *a33,OZChannel *a34,OZChannel *a35,OZChannel *a36,OZChannelBool *a37,OZChannelBool *a38,OZChannelFolder *a39,PCString *a40,PCString *a41,uint64_t a42,OZChannelFolder *a43,PCEvaluator *a44,OZChannelBool *a45,OZChannelBool *a46,OZChannelBool *a47,OZChannelBool *a48,OZChannelPercent *a49,OZChannelBool *a50,OZChannel *a51,OZChannel *a52,uint64_t *a53,_QWORD **a54,PCString *a55,uint64_t a56,OZChannel *a57,OZChannel *a58,OZChannelPosition *a59,OZChannelPosition *a60,OZChannel2D *a61,OZChannel2D *a62,OZChannelEnum *a63)
{
  OZChannelEnum *a64;
  OZChannelPosition3D *a65;
  OZChannelPosition3D *a66;
  TXSequenceChannels *a67;
  OZChannel *a68;
  OZChannelBool *a69;
  OZChannelPercent *a70;
  OZChannelPercent *a71;
  OZChannelPosition3D *a72;
  OZLockingElement *v72;
  OZChannelFolder *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void **v86;
  _Unwind_Exception *v87;
  OZChannelEnum *v88;
  void *v89;
  void *v90;

  *(_QWORD *)(v80 - 168) = a1;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v80 - 120);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v80 - 104);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v79, *(_QWORD **)(v77 + 168));
  std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::destroy(a11, *(PCString **)(v77 + 96));
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::~__hash_table((uint64_t)v72 + 64256);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a12, *(_QWORD **)(v77 + 32));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v77, *(_QWORD **)(v77 + 8));
  OZValueCache<OZProjectedBoundsCacheItem>::~OZValueCache(a13);
  OZValueCache<OZBoundsCacheItem>::~OZValueCache(a14);
  v81 = *(void **)(v76 + 104);
  if (v81)
  {
    *(_QWORD *)(v76 + 112) = v81;
    operator delete(v81);
  }
  v82 = *a15;
  if (*a15)
  {
    *(_QWORD *)(v76 + 88) = v82;
    operator delete(v82);
  }
  v83 = *(void **)v76;
  if (*(_QWORD *)v76)
  {
    *(_QWORD *)(v76 + 8) = v83;
    operator delete(v83);
  }
  OZChannel::~OZChannel(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZChannel::~OZChannel(a18);
  OZChannelBool::~OZChannelBool(a19);
  OZChannelColor::~OZChannelColor(a20);
  OZChannelBool::~OZChannelBool(a21);
  OZChannelBool::~OZChannelBool(a22);
  OZChannel::~OZChannel(a23);
  OZChannelEnum::~OZChannelEnum(a24);
  v84 = *(void **)(v74 + 144);
  if (v84)
  {
    *(_QWORD *)(v74 + 152) = v84;
    operator delete(v84);
  }
  v85 = *a25;
  if (*a25)
  {
    *(_QWORD *)(v74 + 128) = v85;
    operator delete(v85);
  }
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(v78, *a26);
  PCMutex::~PCMutex(a27);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v74, *(_QWORD **)(v74 + 8));
  std::deque<PCHash128>::~deque[abi:ne180100](a28);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v75, *a29);
  std::__list_imp<TXTextLayout::HGMetalNodeCacheEntry>::clear(a30);
  PCSharedMutex::~PCSharedMutex(a31);
  std::deque<PCHash128>::~deque[abi:ne180100]((_QWORD *)v72 + 7590);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(STACK[0x270], *(_QWORD **)(STACK[0x270] + 8));
  std::__list_imp<TXTextLayout::HGNodeCacheEntry>::clear(a32);
  OZChannel::~OZChannel(a33);
  OZChannel::~OZChannel(a34);
  OZChannelBool::~OZChannelBool((OZChannelBool *)STACK[0x260]);
  OZChannelBool::~OZChannelBool((OZChannelBool *)STACK[0x268]);
  OZChannel::~OZChannel(a35);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v80 - 184));
  OZChannel::~OZChannel(a36);
  OZChannelBool::~OZChannelBool(a37);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)STACK[0x280]);
  OZChannelBool::~OZChannelBool(a38);
  OZChannelFolder::~OZChannelFolder(a39);
  PCString::~PCString(a40);
  PCString::~PCString(a41);
  *(_QWORD *)(v80 - 104) = a42;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v80 - 104));
  OZChannelFolder::~OZChannelFolder(a43);
  PCEvaluator::~PCEvaluator(a44);
  OZChannelBool::~OZChannelBool(a45);
  OZChannelBool::~OZChannelBool(a46);
  OZChannelBool::~OZChannelBool(a47);
  OZChannelBool::~OZChannelBool(a48);
  OZChannelPercent::~OZChannelPercent(a49);
  OZChannelBool::~OZChannelBool(a50);
  OZChannel::~OZChannel(a51);
  OZChannel::~OZChannel(a52);
  OZChannel::~OZChannel(a57);
  v86 = (void **)STACK[0x278];
  v87 = *(_Unwind_Exception **)(v80 - 168);
  OZChannel::~OZChannel(a58);
  v88 = *(OZChannelEnum **)(v80 - 232);
  OZChannelPosition::~OZChannelPosition(a59);
  OZChannelPosition::~OZChannelPosition(a60);
  OZChannel2D::~OZChannel2D(a61);
  OZChannel2D::~OZChannel2D(a62);
  OZChannelEnum::~OZChannelEnum(a63);
  OZChannelEnum::~OZChannelEnum(a64);
  OZChannelPosition3D::~OZChannelPosition3D(a65);
  OZChannelPosition3D::~OZChannelPosition3D(a66);
  OZChannelFolder::~OZChannelFolder(v73);
  PCArray<unsigned long,PCArray_Traits<unsigned long>>::~PCArray(*(_QWORD *)(v80 - 152));
  TXSequenceChannels::~TXSequenceChannels(a67);
  OZChannel::~OZChannel(a68);
  OZChannel::~OZChannel((OZChannel *)STACK[0x288]);
  OZChannel::~OZChannel(*(OZChannel **)(v80 - 256));
  OZChannel::~OZChannel(*(OZChannel **)(v80 - 248));
  OZChannel::~OZChannel(*(OZChannel **)(v80 - 240));
  OZChannelBool::~OZChannelBool(a69);
  OZChannelPercent::~OZChannelPercent(a70);
  OZChannelPercent::~OZChannelPercent(a71);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v80 - 160));
  OZChannelPosition3D::~OZChannelPosition3D(a72);
  OZChannelEnum::~OZChannelEnum(v88);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x200]);
  OZChannel::~OZChannel((OZChannel *)STACK[0x208]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x210]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x218]);
  TXChannelAlignment::~TXChannelAlignment(*(TXChannelAlignment **)(v80 - 176));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x220]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x228]);
  OZChannelBool::~OZChannelBool((OZChannelBool *)STACK[0x230]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x238]);
  OZChannelBool::~OZChannelBool((OZChannelBool *)STACK[0x240]);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)STACK[0x248]);
  OZChannel::~OZChannel((OZChannel *)STACK[0x250]);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)STACK[0x258]);
  std::__list_imp<unsigned int>::clear(*(_QWORD **)(v80 - 216));
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear(a53);
  v89 = (void *)*((_QWORD *)v72 + 2409);
  *((_QWORD *)v72 + 2410) = v89;
  if (v89)
    operator delete(v89);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v72 + 19224, *a54);
  PCString::~PCString(a55);
  OZChannelText::~OZChannelText(*(OZChannelText **)(v80 - 224));
  v90 = *v86;
  if (*v86)
  {
    *((_QWORD *)v72 + 2379) = v90;
    operator delete(v90);
  }
  *(_QWORD *)(v80 - 104) = a56;
  std::vector<TXTabStop>::__destroy_vector::operator()[abi:ne180100]((void ***)(v80 - 104));
  OZLockingElement::~OZLockingElement(v72);
  _Unwind_Resume(v87);
}

void TXTextLayout::addStyle(uint64_t a1, OZChannelBase **a2, int a3)
{
  OZChannelBase *updated;
  OZChannelBase *v6;
  unsigned int NextUniqueID;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  OZChannelBase *v24;
  uint64_t v25;
  int var12;
  uint64_t v27;
  uint64_t v28;
  OZMaterialBase **var0;
  OZMaterialBase **var5;
  const CMTime *v31;
  OZMaterialBase *v32;
  OZChannel *v33;
  unsigned int AvailableMaterialSequenceID;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  OZChannelBase **v46;
  OZChannelBase *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;

  if (a3)
  {
    updated = OZChannelBase::updateIDGenerator((OZChannelBase *)(*(_DWORD *)(a1 + 280) + 1));
    v6 = *a2;
    NextUniqueID = OZChannelBase::getNextUniqueID(updated);
    OZChannelBase::setID((OZChannelBase *)&v6->var9, NextUniqueID);
    OZStyle::assignUniqueIDsToAllMaterials(*a2);
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 19352);
    if (v8 != (_QWORD *)(a1 + 19344))
    {
      while (1)
      {
        v9 = v8[2];
        if (*(_DWORD *)(v9 + 96) == LODWORD((*a2)->var12))
          break;
        v8 = (_QWORD *)v8[1];
        if (v8 == (_QWORD *)(a1 + 19344))
          goto LABEL_26;
      }
      v10 = (std::__shared_weak_count *)v8[3];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = a1 + 19368;
      for (i = *(_QWORD *)(a1 + 19376); i != v13; i = *(_QWORD *)(i + 8))
      {
        v15 = *(_QWORD *)(i + 16);
        v18 = *(_QWORD *)(v15 + 8);
        v17 = *(std::__shared_weak_count **)(v15 + 16);
        v16 = (_QWORD *)(v15 + 8);
        if (v17)
        {
          v19 = (unint64_t *)&v17->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
          do
            v21 = __ldaxr(v19);
          while (__stlxr(v21 - 1, v19));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (v18 == v9)
          std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v16, (uint64_t *)a2);
      }
      if (v10)
      {
        v22 = (unint64_t *)&v10->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
LABEL_26:
  OZStyle::setSceneNode((uint64_t)*a2, (OZSceneNode *)(a1 + 200));
  v24 = *a2;
  (*a2)[437].var0 = (void **)a1;
  v49 = 0;
  v50 = 0;
  v25 = *(_QWORD *)(a1 + 19352);
  if (v25 == a1 + 19344)
    goto LABEL_34;
  var12 = (int)v24->var12;
  while (*(_DWORD *)(*(_QWORD *)(v25 + 16) + 96) != var12)
  {
    v25 = *(_QWORD *)(v25 + 8);
    if (v25 == a1 + 19344)
      goto LABEL_34;
  }
  std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v49, (uint64_t *)(v25 + 16));
  if (v49 && *(_BYTE *)(a1 + 61200))
  {
    v27 = (*(uint64_t (**)(void))(*(_QWORD *)v49 + 112))();
    v28 = (*((uint64_t (**)(OZChannelBase *))(*a2)->var0 + 14))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 256))(v27, v28);
  }
  else
  {
LABEL_34:
    v46 = a2;
    if (!*(_QWORD *)(a1 + 19360))
    {
      var0 = (OZMaterialBase **)(*a2)[4].var4.var0;
      var5 = (OZMaterialBase **)(*a2)[4].var5;
      if (var0 != var5)
      {
        v31 = (const CMTime *)MEMORY[0x1E0CA2E68];
        do
        {
          v32 = *var0;
          v33 = (OZChannel *)((char *)*var0 + 720);
          if (!OZChannel::getValueAsInt(v33, v31, 0.0))
          {
            AvailableMaterialSequenceID = NextAvailableMaterialSequenceID((TXSequenceChannels *)(a1 + 25032));
            OZMaterialBase::setSequenceID(v32, AvailableMaterialSequenceID);
          }
          v35 = *(_QWORD *)(a1 + 25048);
          v36 = *(_QWORD *)(a1 + 25040);
          OZChannel::getValueAsInt(v33, v31, 0.0);
          TXSequenceChannels::addMaterialChannels((TXSequenceChannels *)(a1 + 25032), v32, ((unint64_t)(v35 - v36) >> 3) - 6);
          ++var0;
        }
        while (var0 != var5);
      }
    }
    std::list<std::shared_ptr<TXTextStyle>>::push_back((uint64_t *)(a1 + 19344), v46);
    v37 = (std::__shared_weak_count *)v46[1];
    v47 = *v46;
    v48 = v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    OZSceneNode::addStyle(a1 + 200, (OZScene **)&v47);
    v40 = v48;
    if (v48)
    {
      v41 = (unint64_t *)&v48->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  v43 = v50;
  if (v50)
  {
    v44 = (unint64_t *)&v50->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1B28E3BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void TXPathResetCallback(OZChannelBase *a1, void *a2)
{
  const void *ObjectManipulator;
  void *v4;
  uint64_t v5;
  OZScene *v6;
  __n128 v12;
  __int128 v13;
  OZRenderState v14;

  if (a1)
  {
    (*((void (**)(OZChannelBase *, _QWORD))a1->var0 + 35))(a1, 0);
    ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a1);
    if (ObjectManipulator)
    {
      if (v4)
      {
        v5 = (uint64_t)v4;
        OZRenderState::OZRenderState(&v14);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 200) + 272))(v5 + 200))
        {
          v6 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 200) + 272))(v5 + 200);
          OZScene::getCurrentTime(v6, &v12);
          *(__n128 *)&v14.var0.var0 = v12;
          v14.var0.var3 = v13;
        }
        v12 = 0uLL;
        __asm { FMOV            V0.2D, #-1.0 }
        v13 = _Q0;
        TXTextLayout::getTypographicBounds(v5, (uint64_t)&v12, (CMTime *)&v14, 1, 0);
        TXTextLayout::initializePaths(v5, (uint64_t)&v12);
      }
    }
  }
}

void std::vector<TXParagraphStyle *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<TXParagraphStyle *>::__append((void **)a1, a2 - v2);
  }
}

char *std::vector<TXParagraphStyle *>::insert(uint64_t a1, char *__src, _QWORD *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v15 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 3;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 2 > v15)
      v15 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[8 * v16];
    v23 = v22;
    v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long *>::push_back(&__p, a3);
    v4 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v10 = __src + 8;
    v11 = v6 - 8;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    *(_QWORD *)v4 = *a3;
  }
  return v4;
}

void sub_1B28E3E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZChannelColor::~OZChannelColor(OZChannelColor *this)
{
  *(_QWORD *)this = &off_1E6557D88;
  *((_QWORD *)this + 2) = &unk_1E65580F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1008));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(this);
}

{
  *(_QWORD *)this = &off_1E6557D88;
  *((_QWORD *)this + 2) = &unk_1E65580F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1008));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t PCArray<unsigned long,PCArray_Traits<unsigned long>>::~PCArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E64FC330;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    v5 = *(char **)(a1 + 16);
    if ((v4 & 0x80000000) != 0)
      bzero(&v5[8 * v4], 8 * ~(_DWORD)v4 + 8);
  }
  else
  {
    if (v3)
    {
      v5 = (char *)operator new[]();
      bzero(v5, 8 * v3);
    }
    else
    {
      v5 = 0;
    }
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v5;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void TXTextLayout::TXTextLayout(TXTextLayout *this, const TXTextLayout *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  OZChannelFolder *v7;
  OZChannel *v13;
  OZChannel *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  v5 = (char *)this + 18984;
  OZTextLayout::OZTextLayout(this, a2, a3);
  *(_QWORD *)v6 = off_1E64F9F78;
  *(_QWORD *)(v6 + 200) = &unk_1E64FA440;
  *(_QWORD *)(v6 + 216) = &unk_1E64FAD18;
  *(_QWORD *)(v6 + 248) = &unk_1E64FAF70;
  *(_QWORD *)(v6 + 6728) = &off_1E64F9F78[522];
  *(_QWORD *)(v6 + 18976) = &off_1E64F9F78[549];
  *(_DWORD *)v5 = -1;
  v5[4] = 1;
  v7 = (OZChannelFolder *)(v6 + 648);
  *(_OWORD *)(v6 + 19000) = 0u;
  *(_OWORD *)(v6 + 19016) = 0u;
  *(_OWORD *)(v6 + 19032) = 0u;
  TXChannelString::TXChannelString((TXChannelString *)(v6 + 19048), (const OZChannelBase *)((char *)a2 + 19048), (OZChannelFolder *)(v6 + 648));
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 2402);
  std::map<long,double>::map[abi:ne180100]((uint64_t *)this + 2403, (uint64_t)a2 + 19224);
  *((_QWORD *)this + 2406) = &unk_1E64FB120;
  *((_QWORD *)this + 2407) = 0;
  TXDiscontinuousSelection::TXDiscontinuousSelection((TXTextLayout *)((char *)this + 19272));
  *((_WORD *)v5 + 168) = *((_WORD *)a2 + 9660);
  *((_DWORD *)v5 + 85) = *((_DWORD *)a2 + 4831);
  v5[348] = 0;
  *((_DWORD *)v5 + 88) = 0;
  *((_QWORD *)this + 2418) = (char *)this + 19344;
  *((_QWORD *)this + 2419) = (char *)this + 19344;
  *((_QWORD *)this + 2420) = 0;
  *((_QWORD *)this + 2421) = (char *)this + 19368;
  *((_QWORD *)this + 2422) = (char *)this + 19368;
  *((_QWORD *)this + 2423) = 0;
  v5[408] = 1;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 19396));
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 19412));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 19448), (const OZChannelBase *)((char *)a2 + 19448), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 19600), (const OZChannelBase *)a2 + 175, v7);
  *((_QWORD *)this + 2450) = &off_1E6551358;
  *((_QWORD *)this + 2452) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 19752), (const OZChannelBase *)((char *)a2 + 19752), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19904), (const OZChannelBase *)((char *)a2 + 19904), v7);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 20056), (const TXTextLayout *)((char *)a2 + 20056), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 20312), (const OZChannelBase *)((char *)a2 + 20312), v7);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 20464), (const TXTextLayout *)((char *)a2 + 20464), v7);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 20720), (const TXTextLayout *)((char *)a2 + 20720), v7);
  TXChannelAlignment::TXChannelAlignment((TXTextLayout *)((char *)this + 20976), (const TXTextLayout *)((char *)a2 + 20976), v7);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 21624), (const TXTextLayout *)((char *)a2 + 21624), v7);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 21880), (const TXTextLayout *)((char *)a2 + 21880), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 22136), (const OZChannelBase *)((char *)a2 + 22136), v7);
  *((_QWORD *)this + 2767) = &off_1E6551358;
  *((_QWORD *)this + 2769) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 22288), (const TXTextLayout *)((char *)a2 + 22288), v7);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 22544), (const TXTextLayout *)((char *)a2 + 22544), v7);
  OZChannelPosition3D::OZChannelPosition3D((TXTextLayout *)((char *)this + 22800), (const TXTextLayout *)((char *)a2 + 22800), v7);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 23688), (const OZChannelFolder *)((char *)a2 + 23688), v7);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 23816), (const OZChannelBase *)((char *)a2 + 23816), (OZChannelFolder *)((char *)this + 23688));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 23968), (const OZChannelBase *)a2 + 214, (OZChannelFolder *)((char *)this + 23688));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 24120), (const OZChannelBase *)((char *)a2 + 24120), (OZChannelFolder *)((char *)this + 23688));
  OZChannel::OZChannel((OZChannel *)((char *)this + 24272), (const OZChannelBase *)((char *)a2 + 24272), v7);
  *((_QWORD *)this + 3034) = &off_1E6551358;
  *((_QWORD *)this + 3036) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24424), (const OZChannelBase *)((char *)a2 + 24424), v7);
  *((_QWORD *)this + 3053) = &off_1E6551358;
  *((_QWORD *)this + 3055) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24576), (const OZChannelBase *)((char *)a2 + 24576), v7);
  *((_QWORD *)this + 3072) = &off_1E6551358;
  *((_QWORD *)this + 3074) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24728), (const OZChannelBase *)((char *)a2 + 24728), v7);
  *((_QWORD *)this + 3091) = &off_1E6551358;
  *((_QWORD *)this + 3093) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24880), (const OZChannelBase *)((char *)a2 + 24880), v7);
  *((_QWORD *)this + 3110) = &off_1E6551358;
  *((_QWORD *)this + 3112) = &unk_1E65516B8;
  TXSequenceChannels::TXSequenceChannels((TXTextLayout *)((char *)this + 25032), (const TXTextLayout *)((char *)a2 + 25032), v7);
  *((_QWORD *)this + 6525) = &unk_1E64FC330;
  *((_OWORD *)this + 3263) = 0u;
  *((_OWORD *)this + 3264) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  v21 = _Q0;
  *((_OWORD *)this + 3265) = _Q0;
  *((_WORD *)this + 26128) = *((_WORD *)a2 + 26128);
  *((_DWORD *)this + 13090) = 16777217;
  *((_BYTE *)this + 52364) = 0;
  *((_DWORD *)this + 13092) = *((_DWORD *)a2 + 13092);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 52376), (const OZChannelFolder *)((char *)a2 + 52376), v7);
  OZChannelPosition3D::OZChannelPosition3D((TXTextLayout *)((char *)this + 52504), (const TXTextLayout *)((char *)a2 + 52504), (OZChannelFolder *)((char *)this + 52376));
  OZChannelPosition3D::OZChannelPosition3D((TXTextLayout *)((char *)this + 53392), (const TXTextLayout *)((char *)a2 + 53392), (OZChannelFolder *)((char *)this + 52376));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 54280), (const TXTextLayout *)((char *)a2 + 54280), (OZChannelFolder *)((char *)this + 52376));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 54536), (const TXTextLayout *)((char *)a2 + 54536), (OZChannelFolder *)((char *)this + 52376));
  OZChannel2D::OZChannel2D((TXTextLayout *)((char *)this + 54792), (const TXTextLayout *)((char *)a2 + 54792), (OZChannelFolder *)((char *)this + 52376));
  OZChannel2D::OZChannel2D((TXTextLayout *)((char *)this + 55232), (const TXTextLayout *)((char *)a2 + 55232), (OZChannelFolder *)((char *)this + 52376));
  OZChannelPosition::OZChannelPosition((TXTextLayout *)((char *)this + 55672), (const TXTextLayout *)((char *)a2 + 55672), (OZChannelFolder *)((char *)this + 52376));
  OZChannelPosition::OZChannelPosition((TXTextLayout *)((char *)this + 56376), (const TXTextLayout *)((char *)a2 + 56376), (OZChannelFolder *)((char *)this + 52376));
  OZChannel::OZChannel((OZChannel *)((char *)this + 57080), (const OZChannelBase *)((char *)a2 + 57080), (OZChannelFolder *)((char *)this + 52376));
  v13->var0 = (void **)&off_1E6551358;
  v14 = v13;
  v13->var2 = (void **)&unk_1E65516B8;
  OZChannel::OZChannel(v13 + 1, (const OZChannelBase *)a2 + 511, (OZChannelFolder *)((char *)this + 52376));
  v14[1].var0 = (void **)&off_1E6551358;
  v14[1].var2 = (void **)&unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 57384), (const OZChannelBase *)((char *)a2 + 57384), (OZChannelFolder *)((char *)this + 52376));
  *((_QWORD *)this + 7173) = &off_1E6551728;
  *((_QWORD *)this + 7175) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 57536), (const OZChannelBase *)((char *)a2 + 57536), (OZChannelFolder *)((char *)this + 52376));
  *((_QWORD *)this + 7192) = &off_1E6551358;
  *((_QWORD *)this + 7194) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 57688), (const OZChannelBase *)((char *)a2 + 57688), (OZChannelFolder *)((char *)this + 52376));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 57840), (const OZChannelBase *)((char *)a2 + 57840), (OZChannelFolder *)((char *)this + 52376));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 57992), (const OZChannelBase *)((char *)a2 + 57992), (OZChannelFolder *)((char *)this + 52376));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 58144), (const OZChannelBase *)((char *)a2 + 58144), (OZChannelFolder *)((char *)this + 52376));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 58296), (const OZChannelBase *)((char *)a2 + 58296), (OZChannelFolder *)((char *)this + 52376));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 58448), (const OZChannelBase *)((char *)a2 + 58448), (OZChannelFolder *)((char *)this + 52376));
  PCEvaluator::PCEvaluator((TXTextLayout *)((char *)this + 58600));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 58696), (const OZChannelFolder *)((char *)a2 + 58696), v7);
  *((_QWORD *)this + 7355) = 0;
  *(_OWORD *)((char *)this + 58824) = 0u;
  *((_DWORD *)this + 14712) = -1;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7357);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7358);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 58880), (const OZChannelFolder *)((char *)a2 + 58880), v7);
  *((_OWORD *)this + 3688) = 0u;
  *((_OWORD *)this + 3689) = v21;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 59040));
  *((_OWORD *)this + 3693) = xmmword_1B304F270;
  *((_OWORD *)this + 3692) = xmmword_1B304F270;
  *((_OWORD *)this + 3691) = xmmword_1B304F270;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 59104));
  OZChannelBool::OZChannelBool((OZChannelBool *)this + 389, (const OZChannelBase *)((char *)a2 + 59128), v7);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 59280), (const OZChannelFolder *)((char *)a2 + 59280), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 59408), (const OZChannelBase *)((char *)a2 + 59408), (OZChannelFolder *)((char *)this + 59280));
  OZChannel::OZChannel((OZChannel *)((char *)this + 59560), (const OZChannelBase *)((char *)a2 + 59560), v7);
  *((_QWORD *)this + 7445) = &off_1E6551358;
  *((_QWORD *)this + 7447) = &unk_1E65516B8;
  *((_OWORD *)this + 3733) = xmmword_1B30503B0;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 59744));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 59760), (const OZChannelFolder *)((char *)a2 + 59760), v7);
  OZChannel::OZChannel((OZChannel *)this + 394, (const OZChannelBase *)((char *)a2 + 59888), (OZChannelFolder *)((char *)this + 59760));
  *((_QWORD *)this + 7486) = &off_1E6551358;
  *((_QWORD *)this + 7488) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 60056), (const OZChannelBase *)((char *)a2 + 60056), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 60208), (const OZChannelBase *)((char *)a2 + 60208), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 60360), (const OZChannelBase *)((char *)a2 + 60360), (OZChannelFolder *)((char *)this + 59760));
  *(_QWORD *)v15 = &off_1E6551358;
  v16 = (_QWORD *)v15;
  *(_QWORD *)(v15 + 16) = &unk_1E65516B8;
  v20 = v15;
  OZChannel::OZChannel((OZChannel *)(v15 + 160), (const OZChannelBase *)((char *)a2 + 60520), v7);
  v16[20] = &off_1E6551358;
  v16[22] = &unk_1E65516B8;
  *((int64x2_t *)this + 3792) = vdupq_n_s64((unint64_t)this + 60672);
  v16[41] = 0;
  *((_QWORD *)this + 7589) = 0;
  *((_QWORD *)this + 7588) = 0;
  *((_QWORD *)this + 7587) = (char *)this + 60704;
  *((_OWORD *)this + 3795) = 0u;
  *((_OWORD *)this + 3796) = 0u;
  *((_OWORD *)this + 3797) = 0u;
  PCSharedMutex::PCSharedMutex((TXTextLayout *)((char *)this + 60768));
  *((_QWORD *)this + 7613) = 0;
  *((_QWORD *)this + 7612) = (char *)this + 60904;
  *((_QWORD *)this + 7609) = (char *)this + 60872;
  *((_QWORD *)this + 7610) = (char *)this + 60872;
  *((_QWORD *)this + 7611) = 0;
  *((_QWORD *)this + 7614) = 0;
  *(_OWORD *)((char *)this + 60920) = 0u;
  *(_OWORD *)((char *)this + 60936) = 0u;
  *(_OWORD *)((char *)this + 60952) = 0u;
  *((_QWORD *)this + 7623) = 0;
  *((_QWORD *)this + 7622) = (char *)this + 60984;
  *((_QWORD *)this + 7624) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 61000));
  *(_OWORD *)((char *)this + 61080) = 0u;
  *((_QWORD *)this + 7634) = (char *)this + 61080;
  *(_OWORD *)((char *)this + 61096) = 0u;
  *((_QWORD *)this + 7648) = 0;
  *(_OWORD *)((char *)this + 61112) = 0u;
  *(_OWORD *)((char *)this + 61160) = 0u;
  *(_OWORD *)((char *)this + 61128) = 0u;
  *((_BYTE *)this + 61200) = *((_BYTE *)a2 + 61200);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 61208), (const TXTextLayout *)((char *)a2 + 61208), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 61464), (const OZChannelBase *)((char *)a2 + 61464), v7);
  *v17 = &off_1E6551358;
  v19 = (uint64_t)v17;
  v17[2] = &unk_1E65516B8;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 61632));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 61648), (const OZChannelBase *)((char *)a2 + 61648), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 61800), (const OZChannelBase *)((char *)a2 + 61800), v7);
  OZChannelColor::OZChannelColor((TXTextLayout *)((char *)this + 61952), (const TXTextLayout *)((char *)a2 + 61952), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 63112), (const OZChannelBase *)((char *)a2 + 63112), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 63264), (const OZChannelBase *)((char *)a2 + 63264), v7);
  *v18 = &off_1E6551358;
  v18[2] = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 63416), (const OZChannelBase *)((char *)a2 + 63416), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 63568), (const OZChannelBase *)((char *)a2 + 63568), v7);
  *((_QWORD *)this + 7946) = &off_1E6551358;
  *((_QWORD *)this + 7948) = &unk_1E65516B8;
  *((_QWORD *)this + 7967) = 0;
  *((_QWORD *)this + 7968) = 0;
  *((_QWORD *)this + 7969) = 0;
  *((_BYTE *)this + 63761) = *((_BYTE *)a2 + 63761);
  *((_QWORD *)this + 7971) = *((_QWORD *)a2 + 7971);
  *((_BYTE *)this + 63776) = *((_BYTE *)a2 + 63776);
  *((_DWORD *)this + 15951) = 0;
  *((_DWORD *)this + 15952) = 0;
  *(_OWORD *)((char *)this + 63816) = 0u;
  *((_DWORD *)this + 15953) = -1;
  *((_QWORD *)this + 7984) = 0;
  *(_OWORD *)((char *)this + 63832) = 0u;
  *(_OWORD *)((char *)this + 63848) = 0u;
  OZValueCache<OZBoundsCacheItem>::OZValueCache((uint64_t)this + 63888);
  OZValueCache<OZProjectedBoundsCacheItem>::OZValueCache((uint64_t)this + 64032);
  *((_BYTE *)this + 64176) = 0;
  *((_QWORD *)this + 8023) = 0;
  *((_OWORD *)this + 4012) = xmmword_1B304EED0;
  *(_OWORD *)((char *)this + 64216) = 0u;
  *((_QWORD *)this + 8026) = (char *)this + 64216;
  *((_OWORD *)this + 4015) = 0u;
  *((_QWORD *)this + 8029) = (char *)this + 64240;
  *((_OWORD *)this + 4016) = 0u;
  *((_OWORD *)this + 4017) = 0u;
  *((_DWORD *)this + 16072) = 1065353216;
  *((_OWORD *)this + 4019) = 0u;
  *((_QWORD *)this + 8037) = (char *)this + 64304;
  *((_DWORD *)this + 16080) = 0;
  *((_BYTE *)this + 64324) = 1;
  *(_OWORD *)((char *)this + 64328) = 0u;
  *(_OWORD *)((char *)this + 64344) = v21;
  *((_DWORD *)this + 16090) = 0;
  *((_QWORD *)this + 8048) = 0;
  *((_QWORD *)this + 8047) = 0;
  *((_QWORD *)this + 8046) = (char *)this + 64376;
  *((_QWORD *)this + 8051) = 0;
  *((_QWORD *)this + 7649) = 0;
  *((_QWORD *)this + 7621) = 0;
  TXTextLayout::copyLayout(this, a2);
  TXTextLayout::updateLineBreaksByHardLine(this);
  (*(void (**)(TXTextLayout *, uint64_t))(*(_QWORD *)this + 336))(this, 1);
  *((_WORD *)v5 + 4) = *((_WORD *)a2 + 9496);
  v5[10] = *((_BYTE *)a2 + 18994);
  *(_DWORD *)(v20 + 152) = *((_DWORD *)a2 + 15128);
  std::vector<TXParagraphStyle *>::resize((uint64_t)this + 63736, 0);
  OZChannelBase::operator=(v19, (uint64_t)a2 + 61464);
  *((_BYTE *)this + 63720) = 0;
  *((_BYTE *)this + 63728) = 0;
  *((_DWORD *)this + 15288) = 0;
  v5[456] = *((_BYTE *)a2 + 19440);
  PCString::set((PCString *)this + 7357, (const PCString *)a2 + 7357);
  PCString::set((PCString *)this + 7358, (const PCString *)a2 + 7358);
  *((_DWORD *)this + 14718) = *((_DWORD *)a2 + 14718);
  *((_BYTE *)this + 63760) = *((_BYTE *)a2 + 63760);
  *((_BYTE *)this + 63800) = *((_BYTE *)a2 + 63800);
  if (this != a2)
  {
    std::vector<PCVector3<double>>::__assign_with_size[abi:ne180100]<PCVector3<double>*,PCVector3<double>*>((_QWORD *)this + 7977, *((__int128 **)a2 + 7977), *((__int128 **)a2 + 7978), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7978) - *((_QWORD *)a2 + 7977)) >> 3));
    std::vector<PCVector2<double>>::__assign_with_size[abi:ne180100]<PCVector2<double>*,PCVector2<double>*>((_QWORD *)this + 7980, *((__int128 **)a2 + 7980), *((__int128 **)a2 + 7981), (uint64_t)(*((_QWORD *)a2 + 7981) - *((_QWORD *)a2 + 7980)) >> 4);
  }
  *((_QWORD *)this + 7983) = *((_QWORD *)a2 + 7983);
  *((_BYTE *)this + 63801) = *((_BYTE *)a2 + 63801);
  *((_BYTE *)this + 64392) = *((_BYTE *)a2 + 64392);
  *((_QWORD *)this + 8050) = *((_QWORD *)a2 + 8050);
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 52376), TXPathResetCallback, 0, 0);
}

void sub_1B28E4D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, OZChannelBool *a13, OZChannel *a14, OZChannelBool *a15, OZChannelColor *a16, OZChannelBool *a17, OZChannelBool *a18, OZChannelEnum *a19, void **a20,uint64_t a21,PCString **a22,PCMutex *a23,_QWORD *a24,uint64_t a25,_QWORD **a26,uint64_t *a27,std::mutex *a28,uint64_t *a29,uint64_t a30,OZChannel *a31,OZChannelBool *a32,OZChannelBool *a33,OZChannel *a34,OZChannel *a35,OZChannelBool *a36,OZChannelFolder *a37,OZChannelBool *a38,OZChannelFolder *a39,uint64_t a40,OZChannelFolder *a41,PCEvaluator *a42,OZChannelBool *a43,OZChannelBool *a44,OZChannelBool *a45,OZChannelBool *a46,OZChannelPercent *a47,OZChannelBool *a48,OZChannel *a49,OZChannel *a50,OZChannel *a51,OZChannelPosition *a52,OZChannelPosition *a53,OZChannel2D *a54,OZChannel2D *a55,OZChannelEnum *a56,OZChannelEnum *a57,OZChannelPosition3D *a58,OZChannelPosition3D *a59,uint64_t a60,TXSequenceChannels *a61,OZChannel *a62,OZChannel *a63)
{
  OZChannel *a64;
  OZChannel *a65;
  OZChannel *a66;
  OZChannelBool *a67;
  OZChannelPercent *a68;
  OZChannelPercent *a69;
  OZChannelFolder *a70;
  OZChannelPosition3D *a71;
  OZChannelEnum *a72;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;

  OZValueCache<OZBoundsCacheItem>::~OZValueCache(a12);
  v78 = *(void **)v75;
  if (*(_QWORD *)v75)
  {
    *(_QWORD *)(v75 + 8) = v78;
    operator delete(v78);
  }
  v79 = *v73;
  if (*v73)
  {
    *(_QWORD *)(v74 + 256) = v79;
    operator delete(v79);
  }
  v80 = **(void ***)(v76 - 208);
  if (v80)
  {
    *(_QWORD *)(v74 + 176) = v80;
    operator delete(v80);
  }
  OZChannel::~OZChannel((OZChannel *)v74);
  OZChannelBool::~OZChannelBool(a13);
  OZChannel::~OZChannel(a14);
  OZChannelBool::~OZChannelBool(a15);
  OZChannelColor::~OZChannelColor(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZChannelBool::~OZChannelBool(a18);
  OZChannel::~OZChannel(*(OZChannel **)(v76 - 200));
  OZChannelEnum::~OZChannelEnum(a19);
  v81 = *(void **)(*(_QWORD *)(v76 - 120) + 144);
  if (v81)
  {
    *(_QWORD *)(*(_QWORD *)(v76 - 120) + 152) = v81;
    operator delete(v81);
  }
  v82 = *a20;
  if (*a20)
  {
    *(_QWORD *)(*(_QWORD *)(v76 - 120) + 128) = v82;
    operator delete(v82);
  }
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(a21, *a22);
  PCMutex::~PCMutex(a23);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*(_QWORD *)(v76 - 120), *(_QWORD **)(*(_QWORD *)(v76 - 120) + 8));
  std::deque<PCHash128>::~deque[abi:ne180100](a24);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a25, *a26);
  std::__list_imp<TXTextLayout::HGMetalNodeCacheEntry>::clear(a27);
  PCSharedMutex::~PCSharedMutex(a28);
  std::deque<PCHash128>::~deque[abi:ne180100]((_QWORD *)(v72 + 60720));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a30, *(_QWORD **)(a30 + 8));
  std::__list_imp<TXTextLayout::HGNodeCacheEntry>::clear(a29);
  OZChannel::~OZChannel(a31);
  OZChannel::~OZChannel(*(OZChannel **)(v76 - 192));
  OZChannelBool::~OZChannelBool(a32);
  OZChannelBool::~OZChannelBool(a33);
  OZChannel::~OZChannel(a34);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v76 - 176));
  OZChannel::~OZChannel(a35);
  OZChannelBool::~OZChannelBool(a36);
  OZChannelFolder::~OZChannelFolder(a37);
  OZChannelBool::~OZChannelBool(a38);
  OZChannelFolder::~OZChannelFolder(a39);
  PCString::~PCString(*(PCString **)(v76 - 184));
  PCString::~PCString(*(PCString **)(v76 - 168));
  *(_QWORD *)(v76 - 96) = a40;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v76 - 96));
  OZChannelFolder::~OZChannelFolder(a41);
  PCEvaluator::~PCEvaluator(a42);
  OZChannelBool::~OZChannelBool(a43);
  OZChannelBool::~OZChannelBool(a44);
  OZChannelBool::~OZChannelBool(a45);
  OZChannelBool::~OZChannelBool(a46);
  OZChannelPercent::~OZChannelPercent(a47);
  OZChannelBool::~OZChannelBool(a48);
  OZChannel::~OZChannel(a49);
  OZChannel::~OZChannel(*(OZChannel **)(v76 - 160));
  OZChannel::~OZChannel(a50);
  OZChannel::~OZChannel(a51);
  OZChannelPosition::~OZChannelPosition(a52);
  OZChannelPosition::~OZChannelPosition(a53);
  OZChannel2D::~OZChannel2D(a54);
  OZChannel2D::~OZChannel2D(a55);
  OZChannelEnum::~OZChannelEnum(a56);
  OZChannelEnum::~OZChannelEnum(a57);
  OZChannelPosition3D::~OZChannelPosition3D(a58);
  OZChannelPosition3D::~OZChannelPosition3D(a59);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v76 - 152));
  PCArray<unsigned long,PCArray_Traits<unsigned long>>::~PCArray(a60);
  TXSequenceChannels::~TXSequenceChannels(a61);
  OZChannel::~OZChannel(a62);
  OZChannel::~OZChannel(a63);
  OZChannel::~OZChannel(a64);
  OZChannel::~OZChannel(a65);
  OZChannel::~OZChannel(a66);
  OZChannelBool::~OZChannelBool(a67);
  OZChannelPercent::~OZChannelPercent(a68);
  OZChannelPercent::~OZChannelPercent(a69);
  OZChannelFolder::~OZChannelFolder(a70);
  OZChannelPosition3D::~OZChannelPosition3D(a71);
  OZChannelEnum::~OZChannelEnum(a72);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x200]);
  OZChannel::~OZChannel((OZChannel *)STACK[0x208]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x210]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x218]);
  TXChannelAlignment::~TXChannelAlignment((TXChannelAlignment *)STACK[0x220]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x228]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x230]);
  OZChannelBool::~OZChannelBool((OZChannelBool *)STACK[0x238]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x240]);
  OZChannelBool::~OZChannelBool((OZChannelBool *)STACK[0x248]);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)STACK[0x250]);
  OZChannel::~OZChannel((OZChannel *)STACK[0x258]);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)STACK[0x260]);
  std::__list_imp<unsigned int>::clear((_QWORD *)STACK[0x268]);
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear(*(uint64_t **)(v76 - 256));
  v83 = *(void **)(v72 + 19272);
  *(_QWORD *)(v72 + 19280) = v83;
  if (v83)
    operator delete(v83);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*(_QWORD *)(v76 - 248), *(_QWORD **)(v72 + 19232));
  PCString::~PCString(*(PCString **)(v76 - 240));
  OZChannelText::~OZChannelText(*(OZChannelText **)(v76 - 232));
  v84 = *(void **)(v72 + 19024);
  if (v84)
  {
    *(_QWORD *)(v72 + 19032) = v84;
    operator delete(v84);
  }
  *(_QWORD *)(v76 - 96) = *(_QWORD *)(v76 - 224);
  std::vector<TXTabStop>::__destroy_vector::operator()[abi:ne180100]((void ***)(v76 - 96));
  OZLockingElement::~OZLockingElement((OZLockingElement *)v72);
  _Unwind_Resume(a1);
}

void TXTextLayout::copyLayout(TXTextLayout *this, const TXTextLayout *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t i;
  uint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;
  TXParagraphStyle **v12;
  TXParagraphStyle **v13;
  TXParagraphStyle *v14;
  OZChannelBase *HeadingChannel;
  uint64_t v16;
  TXParagraphStyle **v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  TXParagraphStyle **v25;
  _QWORD *v26;
  _QWORD *v27;
  TXParagraphStyle *v28;

  v4 = (char *)a2 + 19208;
  v5 = (char *)this + 58824;
  v6 = (char *)this + 19208;
  v8 = *((_QWORD *)this + 7353);
  for (i = *((_QWORD *)this + 7354);
        i != v8;
  *((_QWORD *)v5 + 1) = v8;
  OZChannelBase::operator=((uint64_t)this + 19048, (uint64_t)a2 + 19048);
  PCString::set((PCString *)this + 2400, (const PCString *)a2 + 2400);
  *v6 = *v4;
  (*(void (**)(TXTextLayout *))(*(_QWORD *)this + 1096))(this);
  TXTextLayout::updateDisplayString((PCString *)this, MEMORY[0x1E0CA2E68]);
  v9 = (_QWORD **)((char *)this + 19024);
  v10 = (_QWORD *)*((_QWORD *)this + 2378);
  v11 = (_QWORD *)*((_QWORD *)this + 2379);
  if (v10 != v11)
  {
    do
    {
      if (*v10)
        (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 8))(*v10);
      ++v10;
    }
    while (v10 != v11);
    v10 = *v9;
  }
  *((_QWORD *)this + 2379) = v10;
  v12 = (TXParagraphStyle **)*((_QWORD *)a2 + 2378);
  v13 = (TXParagraphStyle **)*((_QWORD *)a2 + 2379);
  if (v12 == v13)
    goto LABEL_28;
  do
  {
    v14 = (TXParagraphStyle *)operator new();
    TXParagraphStyle::TXParagraphStyle(v14, this, *v12, 0);
    HeadingChannel = (OZChannelBase *)TXParagraphStyle::getHeadingChannel(v14);
    v16 = TXParagraphStyle::getHeadingChannel(*v12);
    OZChannelBase::setID(HeadingChannel, *(_DWORD *)(v16 + 24));
    v17 = (TXParagraphStyle **)*((_QWORD *)this + 2379);
    v18 = *((_QWORD *)this + 2380);
    if ((unint64_t)v17 >= v18)
    {
      v20 = v17 - (TXParagraphStyle **)*v9;
      if ((unint64_t)(v20 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v21 = v18 - (_QWORD)*v9;
      v22 = v21 >> 2;
      if (v21 >> 2 <= (unint64_t)(v20 + 1))
        v22 = v20 + 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 19040, v23);
      else
        v24 = 0;
      v25 = (TXParagraphStyle **)&v24[8 * v20];
      *v25 = v14;
      v19 = v25 + 1;
      v26 = (_QWORD *)*((_QWORD *)this + 2379);
      v27 = (_QWORD *)*((_QWORD *)this + 2378);
      if (v26 != v27)
      {
        do
        {
          v28 = (TXParagraphStyle *)*--v26;
          *--v25 = v28;
        }
        while (v26 != v27);
        v26 = *v9;
      }
      *((_QWORD *)this + 2378) = v25;
      *((_QWORD *)this + 2379) = v19;
      *((_QWORD *)this + 2380) = &v24[8 * v23];
      if (v26)
        operator delete(v26);
    }
    else
    {
      *v17 = v14;
      v19 = v17 + 1;
    }
    *((_QWORD *)this + 2379) = v19;
    ++v12;
  }
  while (v12 != v13);
  if (v19 == *v9)
LABEL_28:
    TXTextLayout::createParagraphStylesFromNewLines(this, 1);
  TXTextLayout::rebuildParagraphStyles((PCString *)this);
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
  v6[112] = v4[112];
  TXSelectionRange::operator=((uint64_t)this + 19248, (uint64_t)a2 + 19248);
  *((_DWORD *)v6 + 29) = *((_DWORD *)v4 + 29);
  OZChannelBase::operator=((uint64_t)this + 57688, (uint64_t)a2 + 57688);
  OZChannelFolder::operator=((uint64_t)this + 54792);
  OZChannelBase::operator=((uint64_t)this + 54928, (uint64_t)a2 + 54928);
  OZChannelBase::operator=((uint64_t)this + 55080, (uint64_t)a2 + 55080);
  OZChannelFolder::operator=((uint64_t)this + 55232);
  OZChannelBase::operator=((uint64_t)this + 55368, (uint64_t)a2 + 55368);
  OZChannelBase::operator=((uint64_t)this + 55520, (uint64_t)a2 + 55520);
  OZChannelPosition::operator=((uint64_t)this + 55672, (uint64_t)a2 + 55672);
  OZChannelPosition::operator=((uint64_t)this + 56376, (uint64_t)a2 + 56376);
  OZChannelBase::operator=((uint64_t)this + 57080, (uint64_t)a2 + 57080);
  OZChannelBase::operator=((uint64_t)this + 57232, (uint64_t)a2 + 57232);
  OZChannelBase::operator=((uint64_t)this + 57384, (uint64_t)a2 + 57384);
  OZChannelBase::operator=((uint64_t)this + 57992, (uint64_t)a2 + 57992);
  *((_BYTE *)this + 52256) = *((_BYTE *)a2 + 52256);
  *(_WORD *)((char *)this + 52257) = *(_WORD *)((char *)a2 + 52257);
  *((_QWORD *)this + 2429) = *((_QWORD *)a2 + 2429);
  OZChannelBase::operator=((uint64_t)this + 60360, (uint64_t)a2 + 60360);
  *((_QWORD *)this + 2408) = *((_QWORD *)a2 + 2408);
  if (this != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 19272, *((char **)a2 + 2409), *((_QWORD *)a2 + 2410), (uint64_t)(*((_QWORD *)a2 + 2410) - *((_QWORD *)a2 + 2409)) >> 2);
  *(_OWORD *)((char *)this + 52264) = *(_OWORD *)((char *)a2 + 52264);
  *(_OWORD *)((char *)this + 52280) = *(_OWORD *)((char *)a2 + 52280);
  *(_OWORD *)((char *)this + 52296) = *(_OWORD *)((char *)a2 + 52296);
  *(_OWORD *)((char *)this + 52312) = *(_OWORD *)((char *)a2 + 52312);
  *(_OWORD *)((char *)this + 52328) = *(_OWORD *)((char *)a2 + 52328);
  *(_OWORD *)((char *)this + 52344) = *(_OWORD *)((char *)a2 + 52344);
  *((_BYTE *)this + 52360) = *((_BYTE *)a2 + 52360);
  *((_BYTE *)this + 61200) = *((_BYTE *)a2 + 61200);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 52640), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 52792), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53240), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53528), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53680), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 54128), 0, 0);
  *((_DWORD *)this + 15288) = 0;
  *((_QWORD *)this + 7638) = *((_QWORD *)this + 7637);
  *((_QWORD *)this + 7641) = *((_QWORD *)this + 7640);
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::clear((uint64_t)this + 64256);
  *((_BYTE *)this + 63776) = *((_BYTE *)a2 + 63776);
}

void sub_1B28E5814(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4017F5857CLL);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::deleteThis(TXTextLayout *this, OZChannelBase *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char *v11;
  int64_t v12;
  unsigned int v13;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int ValueAsInt;
  char *i;
  std::__shared_weak_count *v21;
  OZStyle *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;

  v4 = (char *)this + 19344;
  v5 = (char *)*((_QWORD *)this + 2419);
  if (v5 == (char *)this + 19344)
    return OZSceneNode::deleteThis((TXTextLayout *)((char *)this + 200), a2);
  do
  {
    v6 = *((_QWORD *)v5 + 2);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 3);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = *(char **)(v6 + 480);
    v11 = *(char **)(v6 + 488);
    v12 = v11 - v10;
    v13 = 0;
    if (v11 - v10 == 8 || v10 == v11)
    {
LABEL_11:
      v15 = 0;
      if (!v7)
        goto LABEL_18;
LABEL_14:
      v16 = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      goto LABEL_18;
    }
    while ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v10 + 208))(*(_QWORD *)v10) != a2)
    {
      v10 += 8;
      ++v13;
      if (v10 == v11)
        goto LABEL_11;
    }
    v15 = *(_QWORD *)v10;
    if (v7)
      goto LABEL_14;
LABEL_18:
    if (v12 == 8)
      break;
    v5 = (char *)*((_QWORD *)v5 + 1);
  }
  while (v5 != v4 && v15 == 0);
  if (!v15)
    return OZSceneNode::deleteThis((TXTextLayout *)((char *)this + 200), a2);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v15 + 568), MEMORY[0x1E0CA2E68], 0.0);
  TXTextLayout::removeMaterialFromSequenceBehaviors(this, v13);
  TXSequenceChannels::removeMaterialChannelsAtIndex((TXTextLayout *)((char *)this + 25032), v13);
  for (i = (char *)*((_QWORD *)this + 2419); i != v4; i = (char *)*((_QWORD *)i + 1))
  {
    v22 = (OZStyle *)*((_QWORD *)i + 2);
    v21 = (std::__shared_weak_count *)*((_QWORD *)i + 3);
    if (v21)
    {
      v23 = (unint64_t *)&v21->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = *((_QWORD *)v22 + 60);
    if (v13 >= (unint64_t)((*((_QWORD *)v22 + 61) - v25) >> 3))
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    OZStyle::unregisterMaterial(v22, *(OZMaterialBase **)(v25 + 8 * v13));
    OZStyle::removeMaterialAtIndex(v22, v13);
    OZStyle::didDeleteMaterialWithFacetAssignment(v22, ValueAsInt);
    if (v21)
    {
      v26 = (unint64_t *)&v21->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  return 1;
}

void sub_1B28E5A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *TXTextLayout::removeMaterialFromSequenceBehaviors(_QWORD *this, unsigned int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = this + 150;
  v3 = (_QWORD *)this[151];
  if (v3 != this + 150)
  {
    do
    {
      this = (_QWORD *)v3[2];
      if (this)
      {
        if (this)
          this = (_QWORD *)TXSequenceBehavior::removeMaterial((TXSequenceBehavior *)this, a2);
      }
      v3 = (_QWORD *)v3[1];
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t `non-virtual thunk to'TXTextLayout::deleteThis(TXTextLayout *this, OZChannelBase *a2)
{
  return TXTextLayout::deleteThis((TXTextLayout *)((char *)this - 200), a2);
}

{
  return TXTextLayout::deleteThis((TXTextLayout *)((char *)this - 216), a2);
}

void TXTextLayout::~TXTextLayout(TXTextLayout *this)
{
  char *v2;
  char *v3;
  uint64_t i;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  void **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  void *v24;
  uint64_t v25;
  int v26;
  const void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void **v40;

  v2 = (char *)this + 60696;
  v3 = (char *)this + 58824;
  *(_QWORD *)this = off_1E64F9F78;
  *((_QWORD *)this + 25) = &unk_1E64FA440;
  *((_QWORD *)this + 27) = &unk_1E64FAD18;
  *((_QWORD *)this + 31) = &unk_1E64FAF70;
  *((_QWORD *)this + 841) = &off_1E64F9F78[522];
  *((_QWORD *)this + 2372) = &off_1E64F9F78[549];
  v5 = *((_QWORD *)this + 7353);
  for (i = *((_QWORD *)this + 7354);
        i != v5;
  *((_QWORD *)v3 + 1) = v5;
  std::__list_imp<TXTextLayout::HGNodeCacheEntry>::clear((uint64_t *)this + 7584);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v2, *((_QWORD **)v2 + 1));
  *(_QWORD *)v2 = v2 + 8;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 1) = 0;
  v6 = (void **)*((_QWORD *)v2 + 4);
  v7 = *((_QWORD *)v2 + 5);
  *((_QWORD *)v2 + 8) = 0;
  v8 = v7 - (_QWORD)v6;
  if (v8 >= 0x11)
  {
    do
    {
      operator delete(*v6);
      v9 = *((_QWORD *)v2 + 5);
      v6 = (void **)(*((_QWORD *)v2 + 4) + 8);
      *((_QWORD *)v2 + 4) = v6;
      v8 = v9 - (_QWORD)v6;
    }
    while (v8 > 0x10);
  }
  if (v8 >> 3 == 1)
  {
    v10 = 128;
  }
  else
  {
    if (v8 >> 3 != 2)
      goto LABEL_11;
    v10 = 256;
  }
  *((_QWORD *)v2 + 7) = v10;
LABEL_11:
  v11 = (void **)*((_QWORD *)v2 + 29);
  v12 = *((_QWORD *)v2 + 30);
  *((_QWORD *)v2 + 33) = 0;
  v13 = v12 - (_QWORD)v11;
  if (v13 >= 0x11)
  {
    do
    {
      operator delete(*v11);
      v14 = *((_QWORD *)v2 + 30);
      v11 = (void **)(*((_QWORD *)v2 + 29) + 8);
      *((_QWORD *)v2 + 29) = v11;
      v13 = v14 - (_QWORD)v11;
    }
    while (v13 > 0x10);
  }
  if (v13 >> 3 == 1)
  {
    v15 = 128;
  }
  else
  {
    if (v13 >> 3 != 2)
      goto LABEL_18;
    v15 = 256;
  }
  *((_QWORD *)v2 + 32) = v15;
LABEL_18:
  v16 = (_QWORD *)*((_QWORD *)this + 2378);
  v17 = (_QWORD *)*((_QWORD *)this + 2379);
  if (v16 != v17)
  {
    do
    {
      if (*v16)
        (*(void (**)(_QWORD))(*(_QWORD *)*v16 + 8))(*v16);
      ++v16;
    }
    while (v16 != v17);
    v16 = (_QWORD *)*((_QWORD *)this + 2378);
  }
  *((_QWORD *)this + 2379) = v16;
  TXTextLayout::clearStyleRuns(this);
  v18 = (void **)((char *)this + 63736);
  v19 = (void **)((char *)this + 61096);
  v20 = *((_QWORD *)this + 7649);
  if (v20)
  {
    std::deque<CMTime>::~deque[abi:ne180100]((_QWORD *)(v20 + 48));
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v20 + 24, *(_QWORD **)(v20 + 32));
    std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::destroy(v20, *(_QWORD **)(v20 + 8));
    MEMORY[0x1B5E29170](v20, 0x10A0C4023076DA7);
    *((_QWORD *)this + 7649) = 0;
  }
  v21 = (uint64_t *)*((_QWORD *)v2 + 34);
  if (v21)
  {
    v22 = PCCache<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::~PCCache(v21);
    MEMORY[0x1B5E29170](v22, 0x20C4093837F09);
    *((_QWORD *)v2 + 34) = 0;
  }
  v23 = (const void *)*((_QWORD *)this + 7984);
  if (v23)
    CFRelease(v23);
  v24 = (void *)*((_QWORD *)this + 8051);
  if (v24)
    CFRelease(v24);
  v25 = (*((_QWORD *)this + 3131) - *((_QWORD *)this + 3130)) >> 3;
  v26 = v25 - 6;
  if ((_DWORD)v25 != 6)
  {
    do
    {
      v24 = (void *)TXSequenceChannels::removeMaterialChannelsAtIndex((TXTextLayout *)((char *)this + 25032), 0);
      --v26;
    }
    while (v26);
  }
  if (TXTextLayout::scaleEmojiToCapHeight((TXTextLayout *)v24))
  {
    v27 = (const void *)*((_QWORD *)this + 8023);
    if (v27)
    {
      CFRelease(v27);
      *((_QWORD *)this + 8023) = 0;
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64368, *((_QWORD **)this + 8047));
  std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::destroy((uint64_t)this + 64296, *((PCString **)this + 8038));
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::~__hash_table((uint64_t)this + 64256);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64232, *((_QWORD **)this + 8030));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64208, *((_QWORD **)this + 8027));
  OZValueCache<OZProjectedBoundsCacheItem>::~OZValueCache((uint64_t)this + 64032);
  OZValueCache<OZBoundsCacheItem>::~OZValueCache((uint64_t)this + 63888);
  v28 = (void *)*((_QWORD *)this + 7980);
  if (v28)
  {
    *((_QWORD *)this + 7981) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 7977);
  if (v29)
  {
    *((_QWORD *)this + 7978) = v29;
    operator delete(v29);
  }
  v30 = *v18;
  if (*v18)
  {
    *((_QWORD *)this + 7968) = v30;
    operator delete(v30);
  }
  OZChannel::~OZChannel((OZChannel *)((char *)this + 63568));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 63416));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 63264));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 63112));
  *((_QWORD *)this + 7744) = &off_1E6557D88;
  *((_QWORD *)this + 7746) = &unk_1E65580F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 62960));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXTextLayout *)((char *)this + 61952));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 61800));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 61648));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 61464));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 61208));
  v31 = (void *)*((_QWORD *)this + 7640);
  if (v31)
  {
    *((_QWORD *)this + 7641) = v31;
    operator delete(v31);
  }
  v32 = *v19;
  if (*v19)
  {
    *((_QWORD *)this + 7638) = v32;
    operator delete(v32);
  }
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy((uint64_t)this + 61072, *((PCString **)v2 + 48));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 61000));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 60976, *((_QWORD **)v2 + 36));
  std::deque<PCHash128>::~deque[abi:ne180100]((_QWORD *)this + 7615);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 60896, *((_QWORD **)v2 + 26));
  std::__list_imp<TXTextLayout::HGMetalNodeCacheEntry>::clear((uint64_t *)this + 7609);
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 60768));
  std::deque<PCHash128>::~deque[abi:ne180100]((_QWORD *)this + 7590);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v2, *((_QWORD **)v2 + 1));
  std::__list_imp<TXTextLayout::HGNodeCacheEntry>::clear((uint64_t *)this + 7584);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 60520));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 60360));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 60208));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 60056));
  OZChannel::~OZChannel((OZChannel *)this + 394);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 59760));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 59560));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 59408));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 59280));
  OZChannelBool::~OZChannelBool((OZChannelBool *)this + 389);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 58880));
  PCString::~PCString((PCString *)this + 7358);
  PCString::~PCString((PCString *)this + 7357);
  v40 = (void **)v3;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v40);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 58696));
  PCEvaluator::~PCEvaluator((TXTextLayout *)((char *)this + 58600));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 58448));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 58296));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 58144));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 57992));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 57840));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 57688));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 57536));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 57384));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 57232));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 57080));
  OZChannelPosition::~OZChannelPosition((TXTextLayout *)((char *)this + 56376));
  OZChannelPosition::~OZChannelPosition((TXTextLayout *)((char *)this + 55672));
  OZChannel2D::~OZChannel2D((TXTextLayout *)((char *)this + 55232));
  OZChannel2D::~OZChannel2D((TXTextLayout *)((char *)this + 54792));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 54536));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 54280));
  OZChannelPosition3D::~OZChannelPosition3D((TXTextLayout *)((char *)this + 53392));
  OZChannelPosition3D::~OZChannelPosition3D((TXTextLayout *)((char *)this + 52504));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 52376));
  *((_QWORD *)this + 6525) = &unk_1E64FC330;
  v33 = *((_DWORD *)this + 13052);
  if (v33 < 0)
    v34 = 1;
  else
    v34 = v33 & ~(v33 >> 31);
  if (v34 == v33)
  {
    v35 = *((int *)this + 13053);
    v36 = (char *)*((_QWORD *)this + 6527);
    if ((v35 & 0x80000000) != 0)
      bzero(&v36[8 * v35], 8 * ~(_DWORD)v35 + 8);
  }
  else
  {
    if (v34)
    {
      v36 = (char *)operator new[]();
      bzero(v36, 8 * v34);
    }
    else
    {
      v36 = 0;
    }
    v37 = *((_QWORD *)this + 6527);
    if (v37)
      MEMORY[0x1B5E2914C](v37, 0x1000C8077774924);
    *((_QWORD *)this + 6527) = v36;
  }
  *((_DWORD *)this + 13052) = v34;
  *((_DWORD *)this + 13053) = 0;
  if (v36)
    MEMORY[0x1B5E2914C](v36, 0x1000C8077774924);
  *((_QWORD *)this + 6527) = 0;
  *((_DWORD *)this + 13052) = 0;
  TXSequenceChannels::~TXSequenceChannels((TXTextLayout *)((char *)this + 25032));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24880));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24728));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24576));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24424));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24272));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 24120));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 23968));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 23816));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 23688));
  OZChannelPosition3D::~OZChannelPosition3D((TXTextLayout *)((char *)this + 22800));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 22544));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 22288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 22136));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 21880));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 21624));
  TXChannelAlignment::~TXChannelAlignment((TXTextLayout *)((char *)this + 20976));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 20720));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 20464));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 20312));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 20056));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19904));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 19752));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19600));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 19448));
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 2421);
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)this + 2418);
  v38 = (void *)*((_QWORD *)this + 2409);
  *((_QWORD *)this + 2410) = v38;
  if (v38)
    operator delete(v38);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 19224, *((_QWORD **)this + 2404));
  PCString::~PCString((PCString *)this + 2402);
  OZChannelText::~OZChannelText((OZChannelText *)((char *)this + 19048));
  v39 = (void *)*((_QWORD *)this + 2378);
  if (v39)
  {
    *((_QWORD *)this + 2379) = v39;
    operator delete(v39);
  }
  v40 = (void **)((char *)this + 19000);
  std::vector<TXTabStop>::__destroy_vector::operator()[abi:ne180100](&v40);
  OZLockingElement::~OZLockingElement(this);
}

{
  TXTextLayout::~TXTextLayout(this);
  JUMPOUT(0x1B5E29170);
}

_QWORD *TXTextLayout::clearStyleRuns(TXTextLayout *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;

  v1 = (_QWORD *)((char *)this + 19368);
  v2 = (_QWORD *)*((_QWORD *)this + 2422);
  if (v2 != (_QWORD *)((char *)this + 19368))
  {
    do
    {
      v4 = (_QWORD *)v2[1];
      v15 = (_QWORD *)v2[2];
      v6 = v15[1];
      v5 = (std::__shared_weak_count *)v15[2];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v13 = v6;
      v14 = v5;
      (*(void (**)(TXTextLayout *, uint64_t *))(*(_QWORD *)this + 272))(this, &v13);
      v9 = v14;
      if (v14)
      {
        v10 = (unint64_t *)&v14->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      std::list<TXTextStyleRun *>::remove((uint64_t)v1, &v15);
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
      v2 = v4;
    }
    while (v4 != v1);
  }
  return std::__list_imp<unsigned int>::clear(v1);
}

void sub_1B28E64D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::~TXTextLayout(TXTextLayout *this)
{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 200));
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 216));
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 248));
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 6728));
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 18976));
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 200));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 216));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 248));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 6728));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 18976));
  JUMPOUT(0x1B5E29170);
}

void TXTextLayout::updateDisplayString(PCString *this, const CMTime *a2)
{
  OZScene **v4;
  __CFString *v5;
  CFMutableStringRef MutableCopy;
  PCString v7;
  _BYTE v8[8];

  v4 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v8, v4);
  TXChannelString::getString(this + 2381, &v7);
  v5 = PCString::cf_str(&v7);
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v5);
  PCString::~PCString(&v7);
  TXTextLayout::applyAllCaps((TXTextLayout *)this, MutableCopy);
  TXTextLayout::applySequenceCharacterOffsets((TXTextLayout *)this, MutableCopy, a2);
  PCString::set(this + 2402, MutableCopy);
  CFRelease(MutableCopy);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v8);
}

void sub_1B28E66D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::createParagraphStylesFromNewLines(TXTextLayout *this, int a2)
{
  const CMTime *v4;
  int ValueAsInt;
  int v6;
  char **v7;
  char *v8;
  TXParagraphStyle *v9;
  TXParagraphStyle **v10;
  TXParagraphStyle **v11;
  _DWORD *v12;
  char *StringPtr;
  unsigned int v14;
  int i;
  UniChar CharacterAtIndex;
  TXParagraphStyle *v17;
  TXParagraphStyle **v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  TXParagraphStyle **v26;
  char *v27;
  char *v28;
  TXParagraphStyle *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  TXParagraphStyle *v33;
  TXParagraphStyle *v34;
  int Alignment;
  int Justification;
  CFStringRef theString;

  v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21624), MEMORY[0x1E0CA2E68], 0.0);
  v6 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21880), v4, 0.0);
  v7 = (char **)((char *)this + 19024);
  v8 = (char *)*((_QWORD *)this + 2379);
  if (v8 == *((char **)this + 2378))
  {
    v9 = (TXParagraphStyle *)operator new();
    TXParagraphStyle::TXParagraphStyle(v9, this);
    theString = (CFStringRef)v9;
    std::vector<TXParagraphStyle *>::insert((uint64_t)this + 19024, v8, &theString);
    if (a2)
    {
      v10 = (TXParagraphStyle **)*((_QWORD *)this + 2378);
      if (*((TXParagraphStyle ***)this + 2379) == v10
        || (TXParagraphStyle::setAlignment(*v10, ValueAsInt, 0),
            v11 = (TXParagraphStyle **)*((_QWORD *)this + 2378),
            *((TXParagraphStyle ***)this + 2379) == v11))
      {
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      }
      TXParagraphStyle::setJustification(*v11, v6);
    }
  }
  v12 = (_DWORD *)((char *)this + 19324);
  *((_DWORD *)this + 4831) = 1;
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  v14 = PCString::size((PCString *)StringPtr);
  TXChannelString::getString((PCString *)this + 2381, (PCString *)&theString);
  if (v14)
  {
    for (i = 0; i != v14; ++i)
    {
      CharacterAtIndex = CFStringGetCharacterAtIndex(theString, i);
      if (TXCharacterSetIsNewline(CharacterAtIndex))
      {
        v17 = (TXParagraphStyle *)operator new();
        TXParagraphStyle::TXParagraphStyle(v17, this);
        v18 = (TXParagraphStyle **)*((_QWORD *)this + 2379);
        v19 = *((_QWORD *)this + 2380);
        if ((unint64_t)v18 >= v19)
        {
          v21 = ((char *)v18 - *v7) >> 3;
          if ((unint64_t)(v21 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v22 = v19 - (_QWORD)*v7;
          v23 = v22 >> 2;
          if (v22 >> 2 <= (unint64_t)(v21 + 1))
            v23 = v21 + 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 19040, v24);
          else
            v25 = 0;
          v26 = (TXParagraphStyle **)&v25[8 * v21];
          *v26 = v17;
          v20 = (char *)(v26 + 1);
          v27 = (char *)*((_QWORD *)this + 2379);
          v28 = (char *)*((_QWORD *)this + 2378);
          if (v27 != v28)
          {
            do
            {
              v29 = (TXParagraphStyle *)*((_QWORD *)v27 - 1);
              v27 -= 8;
              *--v26 = v29;
            }
            while (v27 != v28);
            v27 = *v7;
          }
          *((_QWORD *)this + 2378) = v26;
          *((_QWORD *)this + 2379) = v20;
          *((_QWORD *)this + 2380) = &v25[8 * v24];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v18 = v17;
          v20 = (char *)(v18 + 1);
        }
        *((_QWORD *)this + 2379) = v20;
        v30 = *v12;
        if (a2)
        {
          if (v30 >= (v20 - *v7) >> 3
            || (TXParagraphStyle::setAlignment(*(TXParagraphStyle **)&(*v7)[8 * v30], ValueAsInt, 0),
                v31 = *v12,
                v32 = *((_QWORD *)this + 2378),
                v31 >= (*((_QWORD *)this + 2379) - v32) >> 3))
          {
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          }
          TXParagraphStyle::setJustification(*(TXParagraphStyle **)(v32 + 8 * v31), v6);
        }
        else
        {
          v33 = *(TXParagraphStyle **)&(*v7)[8 * (int)v30 - 8];
          v34 = *(TXParagraphStyle **)&(*v7)[8 * (int)v30];
          Alignment = TXParagraphStyle::getAlignment(v33);
          TXParagraphStyle::setAlignment(v34, Alignment, 0);
          Justification = TXParagraphStyle::getJustification(v33);
          TXParagraphStyle::setJustification(v34, Justification);
        }
        ++*v12;
      }
    }
  }
  PCString::~PCString((PCString *)&theString);
}

void sub_1B28E6A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  MEMORY[0x1B5E29170](v10, 0x10F1C4017F5857CLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::rebuildParagraphStyles(PCString *this)
{
  PCString *v1;
  uint64_t *var0;
  TXParagraphStyle *v4;
  void **HostApplicationDelegate;
  int v6;
  __CFString *v7;
  int info;
  int info_high;
  int data_high;
  int data;
  int v15;
  UniChar *v16;
  unint64_t v17;
  unint64_t v18;
  int Alignment;
  __CFString *v20;
  unint64_t v21;
  TXParagraphStyle *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *p_info;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  TXParagraphStyle **v31;
  __CFString *v32;
  __CFString *v33;
  TXParagraphStyle *length;
  unsigned int v35;
  unint64_t v36;
  __CFString *v37;
  __CFString *i;
  void **v39;
  void *v40;
  int64_t v41;
  PCString v42;

  v1 = this + 2378;
  var0 = (uint64_t *)this[2378].var0;
  if ((uint64_t *)this[2379].var0 == var0)
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v4 = (TXParagraphStyle *)*var0;
  TXParagraphStyle::setStart(*var0, 0);
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  v6 = OZHostApplicationDelegateHandler::wantsSameAlignmentForAllLinesOfText(HostApplicationDelegate);
  v7 = this[26].var0;
  info = v7->info;
  info_high = HIDWORD(v7->info);
  data = (int)v7->data;
  data_high = HIDWORD(v7->data);
  if (info == 792898163 && info_high == 1337411563 && data == -1926054385 && data_high == 1588990368)
    v15 = 1;
  else
    v15 = v6;
  TXChannelString::getString(this + 2381, &v42);
  v16 = PCString::createUniStr(&v42);
  v17 = 0;
  LODWORD(v18) = 0;
  while (v17 < PCString::size(&v42))
  {
    if (TXCharacterSetIsNewline(v16[v17]))
    {
      TXParagraphStyle::setLength((uint64_t)v4, ++v17 - *((_QWORD *)v4 + 107));
      Alignment = TXParagraphStyle::getAlignment(v4);
      v18 = (v18 + 1);
      v20 = this[2378].var0;
      v21 = ((char *)this[2379].var0 - (char *)v20) >> 3;
      if (v21 <= v18)
      {
        v22 = (TXParagraphStyle *)operator new();
        TXParagraphStyle::TXParagraphStyle(v22, (TXTextLayout *)this, v4, 0);
        v23 = this[2379].var0;
        v24 = this[2380].var0;
        if (v23 >= v24)
        {
          v26 = ((char *)v23 - (char *)v1->var0) >> 3;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v27 = (char *)v24 - (char *)v1->var0;
          v28 = v27 >> 2;
          if (v27 >> 2 <= (unint64_t)(v26 + 1))
            v28 = v26 + 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          if (v29)
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&this[2380], v29);
          else
            v30 = 0;
          v31 = (TXParagraphStyle **)&v30[8 * v26];
          *v31 = v22;
          p_info = (__CFString *)(v31 + 1);
          v32 = this[2379].var0;
          v33 = this[2378].var0;
          if (v32 != v33)
          {
            do
            {
              length = (TXParagraphStyle *)v32[-1].length;
              v32 = (__CFString *)((char *)v32 - 8);
              *--v31 = length;
            }
            while (v32 != v33);
            v32 = v1->var0;
          }
          this[2378].var0 = (__CFString *)v31;
          this[2379].var0 = p_info;
          this[2380].var0 = (__CFString *)&v30[8 * v29];
          if (v32)
            operator delete(v32);
        }
        else
        {
          v23->isa = v22;
          p_info = (__CFString *)&v23->info;
        }
        this[2379].var0 = p_info;
        v20 = this[2378].var0;
        v21 = ((char *)p_info - (char *)v20) >> 3;
      }
      if (v21 <= v18)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      v4 = (TXParagraphStyle *)*((_QWORD *)&v20->isa + v18);
      if (v15)
        TXParagraphStyle::setAlignment(*((TXParagraphStyle **)&v20->isa + v18), Alignment, 1);
      TXParagraphStyle::setStart((uint64_t)v4, v17);
    }
    else
    {
      ++v17;
    }
  }
  v35 = PCString::size(&v42);
  TXParagraphStyle::setLength((uint64_t)v4, v35 - *((_QWORD *)v4 + 107));
  v36 = (v18 + 1);
  v37 = this[2379].var0;
  for (i = this[2378].var0; v36 < ((char *)v37 - (char *)i) >> 3; i = v1->var0)
  {
    v39 = &i->isa + v36;
    v40 = *v39;
    v41 = (char *)v37 - (char *)(v39 + 1);
    if (v37 != (__CFString *)(v39 + 1))
      memmove(&i->isa + v36, v39 + 1, (char *)v37 - (char *)(v39 + 1));
    v37 = (__CFString *)((char *)v39 + v41);
    this[2379].var0 = (__CFString *)((char *)v39 + v41);
    if (v40)
    {
      (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
      v37 = this[2379].var0;
    }
  }
  if (v16)
    MEMORY[0x1B5E2914C](v16, 0x1000C80BDFB0063);
  PCString::~PCString(&v42);
}

void sub_1B28E6D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void TXTextLayout::setAllParagraphsDirty(TXParagraphStyle ***this)
{
  OZScene **v2;
  TXParagraphStyle **v3;
  TXParagraphStyle **v4;
  _BYTE v5[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v5, v2);
  v3 = this[2378];
  v4 = this[2379];
  while (v3 != v4)
    TXParagraphStyle::dirty(*v3++, 1);
  *((_BYTE *)this + 19392) = 1;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v5);
}

void sub_1B28E6E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::operator=(uint64_t a1, const void *a2)
{
  std::mutex *v4;
  const TXTextLayout *v5;
  const TXTextLayout *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  __int128 v13;

  v4 = (std::mutex *)(a1 + 8);
  PCSharedMutex::lock((std::mutex *)(a1 + 8));
  OZElement::operator=(a1 + 200, a2);
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  OZChannelBase::operator=(a1 + 24272, (uint64_t)v5 + 24272);
  OZChannelBase::operator=(a1 + 24424, (uint64_t)v6 + 24424);
  OZChannelBase::operator=(a1 + 24576, (uint64_t)v6 + 24576);
  OZChannelBase::operator=(a1 + 24728, (uint64_t)v6 + 24728);
  v7 = (uint64_t *)(a1 + 1200);
  if (a1 + 1200 != *(_QWORD *)(a1 + 1208))
  {
    v8 = (uint64_t *)(a1 + 1200);
    do
    {
      v9 = *(_QWORD **)(*v8 + 16);
      v10 = v9[1];
      v13 = xmmword_1B30541D0;
      if ((OZFactory::isKindOfClass(v10, (int32x4_t *)&v13) & 1) == 0)
        (*(void (**)(_QWORD *))(*v9 + 120))(v9);
      v8 = (uint64_t *)*v8;
    }
    while (v8 != *(uint64_t **)(a1 + 1208));
  }
  TXTextLayout::copyLayout((TXTextLayout *)a1, v6);
  if (v6 != (const TXTextLayout *)a1)
    std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<long,double>,std::__tree_node<std::__value_type<long,double>,void *> *,long>>((uint64_t **)(a1 + 19224), *((_QWORD **)v6 + 2403), (_QWORD *)v6 + 2404);
  OZChannelFolder::operator=(a1 + 648);
  for (; v7 != *(uint64_t **)(a1 + 1208); v7 = (uint64_t *)*v7)
  {
    v11 = *(_QWORD **)(*v7 + 16);
    v12 = v11[1];
    v13 = xmmword_1B30541D0;
    if ((OZFactory::isKindOfClass(v12, (int32x4_t *)&v13) & 1) == 0)
      (*(void (**)(_QWORD *, uint64_t))(*v11 + 96))(v11, a1 + 200);
  }
  TXTextLayout::updateLineBreaksByHardLine((TXTextLayout *)a1);
  PCSharedMutex::unlock(v4);
}

void sub_1B28E7034(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::operator=(uint64_t a1, const void *a2)
{
  TXTextLayout::operator=(a1 - 200, a2);
}

char *TXTextLayout::cloneBehaviorsEffects(TXTextLayout *this, const OZSceneNode *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  OZChannelBase *v9;
  uint64_t v10;
  OZObjectManipulator *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  OZChannelBase *v42;
  std::__shared_weak_count *v43;

  v6 = (uint64_t *)((char *)this + 200);
  (*(void (**)(char *))(*((_QWORD *)this + 25) + 768))((char *)this + 200);
  v7 = v6 + 2393;
  v8 = v6[2394];
  if ((uint64_t *)v8 != v6 + 2393)
  {
    do
    {
      v9 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 112))(*(_QWORD *)(v8 + 16));
      OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 1032), v9);
      if (*((_QWORD *)this + 146))
      {
        OZStyle::unregisterAllMaterials(*(OZStyle **)(v8 + 16));
        v10 = *(_QWORD *)(v8 + 16);
        if (v10)
          v11 = (OZObjectManipulator *)(v10 + 16);
        else
          v11 = 0;
        OZScene::unregisterObject(*((OZScene **)this + 146), v11);
        OZScene::removeAllDependencies(*((OZScene **)this + 146), *(_DWORD *)(*(_QWORD *)(v8 + 16) + 96));
      }
      v8 = *(_QWORD *)(v8 + 8);
    }
    while ((uint64_t *)v8 != v7);
  }
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear(v6 + 2393);
  TXTextLayout::clearStyleRuns(this);
  if (!v12)
    __cxa_bad_cast();
  v13 = v12;
  v14 = (char *)(v12 + 2418);
  v15 = v12[2419];
  if ((_QWORD *)v15 != v12 + 2418)
  {
    do
    {
      std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,decltype(nullptr),void>(*(const TXTextStyle **)(v15 + 16), &v42);
      if (*(_QWORD *)(v15 + 16) == *(_QWORD *)(v13[2419] + 16))
        RemoveAllMaterialsFromSequenceChannels((TXTextLayout *)((char *)this + 25032));
      TXTextLayout::addStyle((uint64_t)this, &v42, 0);
      v16 = v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v15 = *(_QWORD *)(v15 + 8);
    }
    while ((char *)v15 != v14);
  }
  v19 = v13 + 2421;
  v20 = (_QWORD *)v13[2422];
  if (v20 != v13 + 2421)
  {
    do
    {
      v21 = v20[2];
      v22 = operator new();
      v23.n128_f64[0] = TXTextStyleRun::TXTextStyleRun(v22, v21);
      v24 = *(_QWORD *)(v21 + 8);
      v25 = *(std::__shared_weak_count **)(v21 + 16);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = (uint64_t *)*((_QWORD *)this + 2419);
      if (v28 == v7)
      {
LABEL_26:
        v42 = 0;
        v43 = 0;
      }
      else
      {
        v29 = *(_DWORD *)(v24 + 96);
        while (1)
        {
          v30 = v28[2];
          if (*(_DWORD *)(v30 + 96) == v29)
            break;
          v28 = (uint64_t *)v28[1];
          if (v28 == v7)
            goto LABEL_26;
        }
        v31 = (std::__shared_weak_count *)v28[3];
        v42 = (OZChannelBase *)v30;
        v43 = v31;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
      }
      if (v25)
      {
        v34 = (unint64_t *)&v25->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v25->__on_zero_shared)(v25, v23);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(v22 + 8), (uint64_t *)&v42);
      v36 = operator new(0x18uLL);
      v36[1] = (char *)this + 19368;
      v36[2] = v22;
      v37 = *((_QWORD *)this + 2421);
      *v36 = v37;
      *(_QWORD *)(v37 + 8) = v36;
      *((_QWORD *)this + 2421) = v36;
      ++*((_QWORD *)this + 2423);
      v38 = v43;
      if (v43)
      {
        v39 = (unint64_t *)&v43->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v20 = (_QWORD *)v20[1];
    }
    while (v20 != v19);
  }
  (*(void (**)(uint64_t *))(*v6 + 776))(v6);
  return OZSceneNode::cloneBehaviorsEffects((char *)v6, a2, a3);
}

void sub_1B28E7398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'TXTextLayout::cloneBehaviorsEffects(TXTextLayout *this, const OZSceneNode *a2, uint64_t a3)
{
  return TXTextLayout::cloneBehaviorsEffects((TXTextLayout *)((char *)this - 200), a2, a3);
}

double TXTextLayout::didChangeChannelState(TXTextLayout *this, OZChannelBase *a2)
{
  PCString *p_var4;
  double result;
  TXParagraphStyle *ParagraphStyleContainingCurrentInsertionPoint;
  PCString v6;

  p_var4 = &a2->var4;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Format Kerning"));
  LODWORD(p_var4) = PCString::compare(p_var4, &v6);
  PCString::~PCString(&v6);
  if (!(_DWORD)p_var4)
  {
    ParagraphStyleContainingCurrentInsertionPoint = (TXParagraphStyle *)TXTextLayout::getParagraphStyleContainingCurrentInsertionPoint(this);
    if (ParagraphStyleContainingCurrentInsertionPoint)
      return TXParagraphStyle::dirty(ParagraphStyleContainingCurrentInsertionPoint, 1);
  }
  return result;
}

void sub_1B28E7454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getParagraphStyleContainingCurrentInsertionPoint(TXTextLayout *this)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;

  v2 = (char *)this + 19256;
  v3 = *((_DWORD *)this + 4814);
  v4 = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 216))(this);
  if (v3 >= v4)
    v5 = v4;
  else
    v5 = v3;
  if (v2[40])
  {
    v6 = *(_DWORD *)v2;
    v7 = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 216))(this);
    if (v6 >= v7)
      v8 = v7;
    else
      v8 = v6;
  }
  else
  {
    v8 = v5 - 1;
  }
  v9 = *((_QWORD *)this + 2378);
  v10 = *((_QWORD *)this + 2379);
  if (v9 == v10)
    return *(_QWORD *)(v10 - 8);
  while (1)
  {
    result = *(_QWORD *)v9;
    v12 = *(_QWORD *)(*(_QWORD *)v9 + 856);
    if (v12 <= v8 && *(_QWORD *)(result + 864) + v12 > v8)
      break;
    v9 += 8;
    if (v9 == v10)
      return *(_QWORD *)(v10 - 8);
  }
  return result;
}

double `non-virtual thunk to'TXTextLayout::didChangeChannelState(TXTextLayout *this, OZChannelBase *a2)
{
  return TXTextLayout::didChangeChannelState((TXTextLayout *)((char *)this - 216), a2);
}

void TXTextLayout::getIconName(TXTextLayout *this@<X0>, PCURL *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL4 v9;
  int v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  unint64_t *v14;
  unint64_t v15;

  if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this))
  {
    v4 = *((_QWORD *)this + 2419);
    v6 = *(_QWORD *)(v4 + 16);
    v5 = *(std::__shared_weak_count **)(v4 + 24);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (OZChannel::getValueAsInt((OZChannel *)(v6 + 43240), MEMORY[0x1E0CA2E68], 0.0))
      v9 = 0;
    else
      v9 = OZ3DExtrusionProperties::environmentType((OZ3DExtrusionProperties *)(v6 + 40520)) == 0;
    v10 = (*(uint64_t (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 936))(this, MEMORY[0x1E0CA2E68]);
    v11 = CFSTR("M_LayersList_ObjectIconColor-3DTextWithLighting");
    if (v9)
      v11 = CFSTR("M_LayersList_ObjectIconColor-3DText");
    v12 = CFSTR("M_LayersList_ObjectIconColor-3DTextRasterized");
    if (!v9)
      v12 = CFSTR("M_LayersList_ObjectIconColor-3DTextWithLightingRasterized");
    if (v10)
      v13 = v12;
    else
      v13 = v11;
    PCURL::PCURL(a2, v13);
    if (v5)
    {
      v14 = (unint64_t *)&v5->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else if ((*(unsigned int (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 936))(this, MEMORY[0x1E0CA2E68]))
  {
    PCURL::PCURL(a2, CFSTR("M_LayersList_ObjectIconColor-TextRasterized"));
  }
  else
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 80))(*((_QWORD *)this + 26));
  }
}

void sub_1B28E76BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::getIconName(TXTextLayout *this@<X0>, PCURL *a2@<X8>)
{
  TXTextLayout::getIconName((TXTextLayout *)((char *)this - 200), a2);
}

void TXTextLayout::getIconNameBW(TXTextLayout *this@<X0>, PCURL *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL4 v9;
  int v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  unint64_t *v14;
  unint64_t v15;

  if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this))
  {
    v4 = *((_QWORD *)this + 2419);
    v6 = *(_QWORD *)(v4 + 16);
    v5 = *(std::__shared_weak_count **)(v4 + 24);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (OZChannel::getValueAsInt((OZChannel *)(v6 + 43240), MEMORY[0x1E0CA2E68], 0.0))
      v9 = 0;
    else
      v9 = OZ3DExtrusionProperties::environmentType((OZ3DExtrusionProperties *)(v6 + 40520)) == 0;
    v10 = (*(uint64_t (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 936))(this, MEMORY[0x1E0CA2E68]);
    v11 = CFSTR("M_LayersList_ObjectIconGrey-3DTextWithLighting");
    if (v9)
      v11 = CFSTR("M_LayersList_ObjectIconGrey-3DText");
    v12 = CFSTR("M_LayersList_ObjectIconGrey-3DTextRasterized");
    if (!v9)
      v12 = CFSTR("M_LayersList_ObjectIconGrey-3DTextWithLightingRasterized");
    if (v10)
      v13 = v12;
    else
      v13 = v11;
    PCURL::PCURL(a2, v13);
    if (v5)
    {
      v14 = (unint64_t *)&v5->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else if ((*(unsigned int (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 936))(this, MEMORY[0x1E0CA2E68]))
  {
    PCURL::PCURL(a2, CFSTR("M_LayersList_ObjectIconGrey-TextRasterized"));
  }
  else
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 88))(*((_QWORD *)this + 26));
  }
}

void sub_1B28E786C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::getIconNameBW(TXTextLayout *this@<X0>, PCURL *a2@<X8>)
{
  TXTextLayout::getIconNameBW((TXTextLayout *)((char *)this - 200), a2);
}

uint64_t TXTextLayout::getIconID(TXTextLayout *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;

  if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this))
  {
    v2 = *((_QWORD *)this + 2419);
    v4 = *(_QWORD *)(v2 + 16);
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    if (OZChannel::getValueAsInt((OZChannel *)(v4 + 43240), MEMORY[0x1E0CA2E68], 0.0))
      v7 = 0;
    else
      v7 = OZ3DExtrusionProperties::environmentType((OZ3DExtrusionProperties *)(v4 + 40520)) == 0;
    v10 = (*(uint64_t (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 936))(this, MEMORY[0x1E0CA2E68]);
    if (v7)
      v11 = 39;
    else
      v11 = 40;
    if (v7)
      v12 = 37;
    else
      v12 = 38;
    if (v10)
      v8 = v11;
    else
      v8 = v12;
    if (v3)
    {
      v13 = (unint64_t *)&v3->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    if (((*(uint64_t (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 936))(this, MEMORY[0x1E0CA2E68]) & 1) == 0)
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 96))(*((_QWORD *)this + 26));
    return 28;
  }
  return v8;
}

void sub_1B28E79D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTextLayout::getIconID(TXTextLayout *this)
{
  return TXTextLayout::getIconID((TXTextLayout *)((char *)this - 200));
}

void TXTextLayout::didUndoLastChange(TXTextLayout *this)
{
  char *v2;
  uint64_t v3;
  OZDocument **v4;
  uint64_t i;
  uint64_t v6;
  OZObjectManipulator *v7;

  v2 = (char *)this + 200;
  OZSceneNode::didUndoLastChange((uint64_t)this + 200);
  (*(void (**)(char *))(*((_QWORD *)this + 25) + 232))(v2);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))(v2);
  if (v3)
  {
    v4 = (OZDocument **)v3;
    for (i = *((_QWORD *)this + 2419); (TXTextLayout *)i != (TXTextLayout *)((char *)this + 19344); i = *(_QWORD *)(i + 8))
    {
      v6 = *(_QWORD *)(i + 16);
      if (v6)
        v7 = (OZObjectManipulator *)(v6 + 16);
      else
        v7 = 0;
      OZScene::registerObject((OZScene *)v4, v7);
      OZScene::addNodeDependency((uint64_t)v4, *(_DWORD *)(*(_QWORD *)(i + 16) + 96), *((_DWORD *)this + 70));
      OZStyle::registerAllMaterials(*(OZScene **)(i + 16));
    }
    OZDocument::postNotification(v4[198], 0x80000);
  }
}

void `non-virtual thunk to'TXTextLayout::didUndoLastChange(TXTextLayout *this)
{
  TXTextLayout::didUndoLastChange((TXTextLayout *)((char *)this - 200));
}

void TXTextLayout::setString(TXTextLayout *this, const PCString *a2, char a3)
{
  OZScene **v6;
  PCString v7;
  PCString v8;
  _BYTE v9[8];

  v6 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v9, v6);
  PCString::PCString(&v8, a2);
  v7.var0 = (__CFString *)&v8;
  TXChannelString::setString((OZChannelBase *)((char *)this + 19048), v7, a3, 0);
  PCString::~PCString(&v8);
  (*(void (**)(TXTextLayout *))(*(_QWORD *)this + 1096))(this);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v9);
}

void sub_1B28E7B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  PCString::~PCString((PCString *)&a9);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a10);
  _Unwind_Resume(a1);
}

void TXTextLayout::getString(PCString *this, PCString *a2)
{
  PCString v3;

  TXChannelString::getString(this + 2381, &v3);
  PCString::set(a2, &v3);
  PCString::~PCString(&v3);
}

void sub_1B28E7BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void TXTextLayout::getDisplayString(PCString *this@<X0>, PCString *a2@<X8>)
{
  OZScene **v4;
  _BYTE v5[8];

  v4 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v5, v4);
  PCString::PCString(a2, this + 2402);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v5);
}

void sub_1B28E7C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::resetState(TXTextLayout *this)
{
  char *v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v2 = (char *)this + 58824;
  v4 = *((_QWORD *)this + 7353);
  for (i = *((_QWORD *)this + 7354);
        i != v4;
  *((_QWORD *)v2 + 1) = v4;
  v5 = *((_QWORD *)this + 2379);
  v6 = *((_QWORD *)this + 2378);
  if ((unint64_t)(v5 - v6) >= 9)
  {
    do
    {
      v7 = *(_QWORD *)(v5 - 8);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v5 = *((_QWORD *)this + 2379);
        v6 = *((_QWORD *)this + 2378);
      }
      v5 -= 8;
      *((_QWORD *)this + 2379) = v5;
    }
    while ((unint64_t)(v5 - v6) > 8);
  }
  if (v5 != v6)
  {
    v8 = *(_QWORD *)(v5 - 8);
    TXParagraphStyle::setStart(v8, 0);
    TXParagraphStyle::setLength(v8, 0);
  }
  if (*((_QWORD *)this + 2423) >= 2uLL)
  {
    do
    {
      v9 = *(_QWORD **)(*((_QWORD *)this + 2421) + 16);
      v11 = v9[1];
      v10 = (std::__shared_weak_count *)v9[2];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v21 = v11;
      v22 = v10;
      (*(void (**)(TXTextLayout *, uint64_t *))(*(_QWORD *)this + 272))(this, &v21);
      v14 = v22;
      if (v22)
      {
        v15 = (unint64_t *)&v22->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
      v17 = (uint64_t *)*((_QWORD *)this + 2421);
      v18 = *v17;
      *(_QWORD *)(v18 + 8) = v17[1];
      *(_QWORD *)v17[1] = v18;
      --*((_QWORD *)this + 2423);
      operator delete(v17);
    }
    while (*((_QWORD *)this + 2423) > 1uLL);
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2421) + 16) + 24) = 0;
  *((_BYTE *)this + 19320) = 0;
  TXTextLayout::resetKernings(this);
  *((_QWORD *)this + 2407) = 0;
  if (*((_BYTE *)this + 19296)
    && OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 4)
  {
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v20 = 1;
    v19 = -1;
  }
  *((_DWORD *)this + 4746) = v19;
  *((_BYTE *)this + 18988) = v20;
}

void sub_1B28E7E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TXTextLayout::resetKernings(TXTextLayout *this)
{
  OZScene **v2;
  _BYTE v3[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v3, v2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 19224, *((_QWORD **)this + 2404));
  *((_QWORD *)this + 2403) = (char *)this + 19232;
  *((_QWORD *)this + 2405) = 0;
  *((_QWORD *)this + 2404) = 0;
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
  (*(void (**)(TXTextLayout *))(*(_QWORD *)this + 544))(this);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v3);
}

void sub_1B28E7ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::resetName(PCString *this)
{
  int v2;
  uint64_t v3;
  PCString v4;
  PCString v5;
  PCSharedCount v6;

  if (!BYTE2(this[6545].var0))
  {
    PCSharedCount::PCSharedCount(&v6);
    TXChannelString::getString(this + 2381, &v5);
    if (PCString::size(&v5))
    {
      PCString::PCString(&v4, "\n");
      v2 = PCString::find(&v5, &v4);
      PCString::~PCString(&v4);
      v3 = (v2 - 1);
      if (v3 > 0x1C)
      {
        if (PCString::size(&v5) < 0x1F)
        {
          PCString::set((PCString *)&v6, &v5);
          goto LABEL_9;
        }
        PCString::substrTo(&v5, 30, (CFStringRef *)&v4.var0);
        PCString::set((PCString *)&v6, &v4);
      }
      else
      {
        PCString::substrTo(&v5, v3, (CFStringRef *)&v4.var0);
        PCString::set((PCString *)&v6, &v4);
      }
    }
    else
    {
      PCURL::PCURL((PCURL *)&v4, CFSTR("Text Name"));
      PCString::set((PCString *)&v6, &v4);
    }
    PCString::~PCString(&v4);
LABEL_9:
    OZObjectManipulator::setName((OZObjectManipulator *)&this[27], (const PCString *)&v6, 0);
    PCString::~PCString(&v5);
    PCString::~PCString((PCString *)&v6);
  }
}

void sub_1B28E8028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a10);
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void TXTextLayout::updateDisplayStringAndAffectedState(PCString *this, const CMTime *a2)
{
  PCString v4;

  TXChannelString::getString(this + 2381, &v4);
  PCString::size(&v4);
  PCString::~PCString(&v4);
  TXTextLayout::updateDisplayString(this, a2);
  TXTextLayout::rebuildParagraphStyles(this);
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
}

void sub_1B28E80E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getNumWords(TXTextLayout *this)
{
  _DWORD *v1;
  uint64_t result;

  v1 = (_DWORD *)((char *)this + 63812);
  result = *((unsigned int *)this + 15953);
  if ((result & 0x80000000) != 0)
  {
    result = 0;
    *v1 = 0;
  }
  return result;
}

void TXTextLayout::getTextObject(TXTextLayout *this@<X0>, TXTextLayout *a2@<X1>, _QWORD *a3@<X8>)
{
  TXHelperFunctions::GetTextObjectContainingCharIndex(this, a2, 1, 0, a3);
}

uint64_t TXTextLayout::setSelection(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 19256) = a2;
  *(_DWORD *)(this + 19260) = a3;
  return this;
}

void TXTextLayout::selectAllGlyphs(TXTextLayout *this)
{
  OZScene **v2;
  TXDiscontinuousSelection *v3;
  int v4;
  TXChannelString *v5;
  char *StringPtr;
  char *v7;
  UniChar CharacterAtIndex;
  _BYTE v9[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v9, v2);
  v3 = (TXTextLayout *)((char *)this + 19272);
  TXDiscontinuousSelection::removeAll((_QWORD *)this + 2409);
  v4 = 0;
  v5 = (TXTextLayout *)((char *)this + 19048);
  while (1)
  {
    StringPtr = TXChannelString::getStringPtr(v5);
    if (v4 >= PCString::size((PCString *)StringPtr))
      break;
    v7 = TXChannelString::getStringPtr(v5);
    CharacterAtIndex = CFStringGetCharacterAtIndex(*(CFStringRef *)v7, v4);
    if (!TXCharacterSetIsWhitespace(CharacterAtIndex))
      TXDiscontinuousSelection::addChar(v3, v4);
    ++v4;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v9);
}

void sub_1B28E81D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getParagraphStyleContainingOffset(TXTextLayout *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;

  v2 = *((_QWORD *)this + 2378);
  v3 = *((_QWORD *)this + 2379);
  while (v2 != v3)
  {
    result = *(_QWORD *)v2;
    v5 = *(_QWORD *)(*(_QWORD *)v2 + 856);
    if (v5 <= a2 && *(_QWORD *)(result + 864) + v5 > a2)
      return result;
    v2 += 8;
  }
  return *(_QWORD *)(v3 - 8);
}

uint64_t TXTextLayout::doLayout(TXTextLayout *this, const OZRenderState *a2, PCHash128 *a3)
{
  Li3DEngineScene *v3;
  _OWORD *v4;
  _OWORD *v5;
  CMTime *v6;
  CMTime *v7;
  uint64_t v8;
  OZScene **v9;
  uint64_t v10;
  char *StringPtr;
  double v12;
  float v13;
  TXTimeGlyphPropertiesMap *v14;
  TXTimeGlyphPropertiesMap *v15;
  uint64_t i;
  uint64_t v17;
  TXTextStyle *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int8x8_t *Hash;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  TXTimeGlyphPropertiesMap *v35;
  CMTime *v36;
  uint64_t v37;
  const CMTime *v38;
  double v39;
  int8x8_t *v40;
  __int32 v41;
  __int32 v42;
  __int32 v43;
  _BOOL4 v47;
  uint64_t j;
  char v49;
  char v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  int v61;
  std::vector<int>::size_type v62;
  TXParagraphStyle **v63;
  TXParagraphStyle **v64;
  int v65;
  double k;
  TXParagraphStyle *v67;
  uint64_t v68;
  uint64_t v70;
  const void *v71;
  _QWORD *v72;
  _QWORD *v73;
  double v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t m;
  const void *v79;
  _BYTE *v80;
  BOOL ComputeOffsetForPreInceptionProjects;
  uint64_t (*v83)(_QWORD *);
  double v84;
  int v85;
  uint64_t v86;
  double v87;
  double v88;
  int v89;
  double v90;
  uint64_t v91;
  int HostAppProjectHeight;
  double v93;
  OZMEChannelTimeConverter *v94;
  _QWORD *CurrentConversion;
  _QWORD *v96;
  uint64_t v97;
  Float64 v98;
  double v99;
  double v100;
  __int128 v101;
  __int128 v102;
  int8x16_t v103;
  CMTime *v104;
  _DWORD *v105;
  CMTime time;
  CMTime v107;
  __int128 v108;
  CMTime v109;
  CMTime v110;
  CMTime v111;
  CMTime v112;
  CMTime v113;
  CMTime time2[59];
  _QWORD **v115;
  _QWORD *v116;
  uint64_t v117;
  CMTime v118;
  char v119[8];
  CMTime v120;
  CMTime time1;
  CMTime v122;
  int8x8_t v123[523];

  v3 = (Li3DEngineScene *)MEMORY[0x1E0C80A78](this);
  v5 = v4;
  v7 = v6;
  v8 = (uint64_t)v3;
  v123[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  v9 = (OZScene **)Li3DEngineScene::sceneManager(v3);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v119, v9);
  v10 = v8 + 200;
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 200) + 272))(v8 + 200)
    || *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v8 + 200) + 1584) + 324) != 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 296))(v8) & 1) == 0)
  {
    StringPtr = TXChannelString::getStringPtr((TXChannelString *)(v8 + 19048));
    if (PCString::size((PCString *)StringPtr))
    {
      v118 = *v7;
      v117 = 0;
      v116 = 0;
      v115 = &v116;
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v123);
      OZRenderParams::OZRenderParams((OZRenderParams *)time2);
      v120.value = (CMTimeValue)&v120;
      *(_QWORD *)&v120.timescale = &v120;
      v120.epoch = 0;
      v12 = OZRenderParams::setState((OZRenderParams *)time2, (const OZRenderState *)v7);
      v105 = (_DWORD *)(v8 + 18984);
      if ((*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v10 + 272))(v8 + 200, v12)
        && *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v8 + 200) + 1579)
        && *(double *)(v8 + 19432) != 0.0)
      {
        (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v8 + 824))(v8, 1, 0.0);
        *(_BYTE *)(v8 + 19392) = 1;
      }
      OZRenderParams::setWorkingColorDescriptionFromRenderNode((uint64_t)time2, v8 + 6728, 0);
      v13 = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 296))(v8 + 200);
      OZRenderParams::setBlendingGamma((uint64_t)time2, v13);
      TXTextLayout::getTextHashForState(v123, v8, time2, 1, (int8x8_t *)&v112);
      if (v5)
        *v5 = *(_OWORD *)&v112.value;
      v14 = TXTextLayout::timeGlyphPropertiesMap((TXTextLayout *)v8);
      TXTimeGlyphPropertiesMap::getHash(v14, v7, (PCWorkingColorVector *)&time1);
      v103 = (int8x16_t)vceqq_s32(*(int32x4_t *)&time1.value, *(int32x4_t *)&v112.value);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(v103))) & 1) == 0)
      {
        v15 = TXTextLayout::timeGlyphPropertiesMap((TXTextLayout *)v8);
        TXTimeGlyphPropertiesMap::promoteTime((int64x2_t *)v15, &v118);
      }
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&time1);
      for (i = *(_QWORD *)(v8 + 19376); i != v8 + 19368; i = *(_QWORD *)(i + 8))
      {
        v17 = *(_QWORD *)(i + 16);
        PCHashWriteStream::reset((uint64_t)&time1);
        v18 = *(TXTextStyle **)(v17 + 8);
        v19 = *(std::__shared_weak_count **)(v17 + 16);
        v111.value = (CMTimeValue)v18;
        *(_QWORD *)&v111.timescale = v19;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        v113 = time2[0];
        TXTextStyle::calcHashForStateAffectingLayout(v18, (PCSerializerWriteStream *)&time1, &v113);
        Hash = PCHashWriteStream::getHash((int8x8_t *)&time1);
        LODWORD(v110.value) = *(_DWORD *)(v17 + 24);
        v113.value = (CMTimeValue)&v110;
        *((_OWORD *)std::__tree<std::__value_type<unsigned int,PCHash128>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCHash128>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCHash128>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)&v115, (unsigned int *)&v110, (uint64_t)&std::piecewise_construct, &v113)+ 2) = *(_OWORD *)Hash->i8;
        if (v19)
        {
          v23 = (unint64_t *)&v19->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      v25 = *(uint64_t **)(v8 + 19024);
      v26 = *(uint64_t **)(v8 + 19032);
      while (v25 != v26)
        TXParagraphStyle::calcHashForStateAndSetDirty(*v25++);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)&v112.value, *(int32x4_t *)(v8 + 19396))))) & 1) == 0&& !*(_BYTE *)(v8 + 19392))
      {
        v27 = !TXTextLayout::isAnyParagraphDirty((TXTextLayout *)v8);
        if ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1B30541E0, v103)) & 0xF) != 0)
          v27 = 0;
        if (v27)
        {
          PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&time1);
          std::__list_imp<unsigned int>::clear(&v120);
          OZRenderParams::~OZRenderParams((OZRenderParams *)time2);
LABEL_151:
          PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v123);
          std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v115, v116);
          goto LABEL_152;
        }
      }
      v104 = v7;
      v28 = v8 + 1200;
      v29 = *(_QWORD *)(v8 + 1208);
      if (v29 != v8 + 1200)
      {
        do
        {
          v30 = *(const void **)(v29 + 16);
          if (v30)
          {
            if (v31)
            {
              v32 = v31;
              if (OZChannelBase::testFlag((OZChannelBase *)(v31 + 3336), 2)
                && OZChannelBase::testFlag((OZChannelBase *)(v32 + 3488), 2))
              {
                goto LABEL_43;
              }
              goto LABEL_42;
            }
            if (v33)
            {
              v34 = v33;
              if (((*(uint64_t (**)(void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v33 + 616))(v33, 1045, 0, 0) & 1) == 0&& ((*(uint64_t (**)(void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v34 + 616))(v34, 1004, 0, 0) & 1) == 0)
              {
                goto LABEL_43;
              }
LABEL_42:
              TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)v8);
              goto LABEL_43;
            }
            {
              goto LABEL_42;
            }
          }
LABEL_43:
          v29 = *(_QWORD *)(v29 + 8);
        }
        while (v29 != v28);
      }
      *(_OWORD *)(v8 + 19396) = *(_OWORD *)&v112.value;
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&time1);
      std::__list_imp<unsigned int>::clear(&v120);
      OZRenderParams::~OZRenderParams((OZRenderParams *)time2);
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v123);
      v35 = TXTextLayout::timeGlyphPropertiesMap((TXTextLayout *)v8);
      TXTimeGlyphPropertiesMap::setHash(v35, &v118, (const PCHash128 *)(v8 + 19396));
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v123);
      v36 = v104;
      v37 = *(_QWORD *)(v8 + 19352);
      if (v37 != v8 + 19344)
      {
        v38 = (const CMTime *)MEMORY[0x1E0CA2E68];
        do
        {
          OZChannel::getValueAsDouble((OZChannel *)(*(_QWORD *)(v37 + 16) + 5504), v38, 0.0);
          PCHashWriteStream::writeValue(v123, v39);
          v37 = *(_QWORD *)(v37 + 8);
        }
        while (v37 != v8 + 19344);
      }
      v40 = PCHashWriteStream::getHash(v123);
      v41 = v40->i32[1];
      v42 = v40[1].i32[0];
      v43 = v40[1].i32[1];
      v47 = *(_DWORD *)(v8 + 19412) != v40->i32[0]
         || *(_DWORD *)(v8 + 19416) != v41
         || *(_DWORD *)(v8 + 19420) != v42
         || *(_DWORD *)(v8 + 19424) != v43;
      *(_DWORD *)(v8 + 19412) = v40->i32[0];
      *(_DWORD *)(v8 + 19416) = v41;
      *(_DWORD *)(v8 + 19420) = v42;
      *(_DWORD *)(v8 + 19424) = v43;
      for (j = *(_QWORD *)(v8 + 19024); ; j += 8)
      {
        if (j == *(_QWORD *)(v8 + 19032))
        {
          v49 = 1;
          goto LABEL_66;
        }
        if (*(_BYTE *)(*(_QWORD *)j + 872))
          break;
      }
      v49 = 0;
      *(_DWORD *)(v8 + 61152) = 0;
      *(_QWORD *)(v8 + 61104) = *(_QWORD *)(v8 + 61096);
      *(_QWORD *)(v8 + 61128) = *(_QWORD *)(v8 + 61120);
LABEL_66:
      if (*(_BYTE *)(v8 + 19321))
        v47 = 1;
      if (v47)
        (*(void (**)(uint64_t, CMTime *))(*(_QWORD *)v8 + 1088))(v8, &v118);
      if ((TXTextLayout::shouldScaleToBothMargins((TXTextLayout *)v8) & 1) == 0)
        OZChannel::setInitialValue((OZChannel *)(v8 + 61464), 1.0, 1);
      __asm { FMOV            V0.2D, #1.0 }
      v101 = _Q0;
      if (*(_BYTE *)(v8 + 19392) || TXTextLayout::isAnyParagraphDirty((TXTextLayout *)v8))
      {
        *(_OWORD *)(v8 + 61616) = v101;
        v54 = 1;
      }
      else
      {
        v54 = 0;
      }
      if ((TXTextLayout::shouldScaleToLRMargins((TXTextLayout *)v8) & 1) != 0
        || (TXTextLayout::shouldScaleProportionallyToLeftRightMargins((TXTextLayout *)v8) & 1) != 0
        || (TXTextLayout::shouldScaleToTBMargins((TXTextLayout *)v8) & 1) != 0
        || TXTextLayout::hasLinkedMarginScale((TXTextLayout *)v8))
      {
        if ((v54 & 1) == 0)
          *(_OWORD *)(v8 + 61616) = v101;
        TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)v8);
      }
      if (OZChannel::getValueAsInt((OZChannel *)(v8 + 20720), MEMORY[0x1E0CA2E68], 0.0))
      {
        if (OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 1
          || (v55 = 0.0, OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 3))
        {
          OZChannel::getValueAsDouble((OZChannel *)(v8 + 24576), MEMORY[0x1E0CA2E68], 0.0);
          v57 = v56;
          OZChannel::getValueAsDouble((OZChannel *)(v8 + 24728), MEMORY[0x1E0CA2E68], 0.0);
LABEL_89:
          v55 = v57 - v58 + 1.0;
        }
      }
      else if (OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 1
             || (v55 = 0.0,
                 OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 3))
      {
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 24424), MEMORY[0x1E0CA2E68], 0.0);
        v57 = v59;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 24272), MEMORY[0x1E0CA2E68], 0.0);
        goto LABEL_89;
      }
      if (((TXTextLayout::shouldScaleToLRMargins((TXTextLayout *)v8) & 1) != 0
         || TXTextLayout::shouldScaleProportionallyToLeftRightMargins((TXTextLayout *)v8))
        && !OZChannel::getValueAsInt((OZChannel *)(v8 + 20720), MEMORY[0x1E0CA2E68], 0.0)
        || TXTextLayout::shouldScaleToTBMargins((TXTextLayout *)v8)
        && OZChannel::getValueAsInt((OZChannel *)(v8 + 20720), MEMORY[0x1E0CA2E68], 0.0))
      {
        v55 = 0.0;
      }
      v60 = fabs(v55);
      v61 = TXTextLayout::doLayoutForParagraphs((TXTextLayout *)v8, v60, v104);
      if ((v49 & 1) == 0
        && OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 3
        && OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 4)
      {
        v62 = ((*(_QWORD *)(v8 + 58832) - *(_QWORD *)(v8 + 58824)) >> 4);
        std::vector<unsigned int>::resize((std::vector<int> *)(v8 + 61096), v62);
        std::vector<unsigned int>::resize((std::vector<int> *)(v8 + 61120), v62);
        *(_QWORD *)(v8 + 61144) = 0;
        *(_BYTE *)(v8 + 61154) = 0;
      }
      if (!OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0)
        || OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 2)
      {
        v63 = *(TXParagraphStyle ***)(v8 + 19024);
        v64 = *(TXParagraphStyle ***)(v8 + 19032);
        if ((((char *)v64 - (char *)v63) & 0x7FFFFFFF0) != 0)
          v65 = v61;
        else
          v65 = 0;
        for (k = 0.0; v63 != v64; ++v63)
        {
          v67 = *v63;
          if (k < *((double *)*v63 + 115))
            k = *((double *)*v63 + 115);
          if (v65
            && (TXParagraphStyle::getJustification(*v63)
             || TXParagraphStyle::getAlignment(v67)))
          {
            TXParagraphStyle::dirty(v67, 1);
          }
        }
        *(double *)(v8 + 59720) = k;
        v36 = v104;
        TXTextLayout::doLayoutForParagraphs((TXTextLayout *)v8, k, v104);
      }
      if (v61)
      {
        if ((OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 1
           || OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 3
           || OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 4)
          && ((TXTextLayout::shouldScaleToLRMargins((TXTextLayout *)v8) & 1) != 0
           || TXTextLayout::shouldScaleProportionallyToLeftRightMargins((TXTextLayout *)v8)))
        {
          TXTextLayout::shrinkToLeftRightMargins((TXTextLayout *)v8, v36);
        }
        if ((OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 1
           || OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 3
           || OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 4)
          && TXTextLayout::shouldScaleToTBMargins((TXTextLayout *)v8))
        {
          TXTextLayout::shrinkToTopBottomMargins((TXTextLayout *)v8, v60, v36);
        }
      }
      TXTextLayout::getNumLinesInParagraphBounds((TXTextLayout *)v8);
      if (TXTextLayout::shouldScaleToBothMargins((TXTextLayout *)v8)
        && (((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 1144))(v8) & v61 & 1) != 0
         || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1144))(v8) & 1) == 0))
      {
        (*(void (**)(uint64_t, CMTime *))(*(_QWORD *)v8 + 1152))(v8, v36);
      }
      TXTextLayout::doMotionLayout((TXTextLayout *)v8, (const OZRenderState *)v36);
      v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v8 + 200);
      __asm { FMOV            V0.2D, #-1.0 }
      v102 = _Q0;
      if (!v68)
        goto LABEL_139;
      v70 = *(_QWORD *)(v8 + 1208);
      if (v70 == v28)
      {
LABEL_137:
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 59560), MEMORY[0x1E0CA2E68], 0.0);
        v36 = v104;
        if (v74 != 0.0)
        {
          OZChannel::setValue((OZChannel *)(v8 + 59560), MEMORY[0x1E0CA2E68], 0.0, 1);
          *(_DWORD *)(v8 + 59712) = 0;
          TXTextLayout::doMotionLayout((TXTextLayout *)v8, (const OZRenderState *)v104);
        }
LABEL_139:
        TXTextLayout::updateLineBreaks((TXTextLayout *)v8);
        TXTextLayout::performLayoutWithPath((TXTextLayout *)v8, v36);
        *(_BYTE *)(v8 + 19392) = 0;
        *(_BYTE *)(v8 + 19321) = 0;
        *(_OWORD *)(v8 + 59024) = v102;
        *(_OWORD *)(v8 + 59088) = xmmword_1B304F270;
        *(_OWORD *)(v8 + 59072) = xmmword_1B304F270;
        *(_OWORD *)(v8 + 59056) = xmmword_1B304F270;
        if (v117)
        {
          OZRenderParams::OZRenderParams((OZRenderParams *)&time1);
          OZRenderParams::setState((OZRenderParams *)&time1, (const OZRenderState *)v36);
          v75 = *(uint64_t **)(v8 + 19024);
          v76 = *(uint64_t **)(v8 + 19032);
          while (v75 != v76)
            TXParagraphStyle::calcHashForStateAndSetDirty(*v75++);
          OZRenderParams::~OZRenderParams((OZRenderParams *)&time1);
        }
        v77 = *v105;
        if ((_DWORD)v77 != -1)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)v8 + 832))(v8, v77, *(unsigned __int8 *)(v8 + 18988), 0.0);
          *v105 = -1;
        }
        for (m = *(_QWORD *)(v8 + 1208); m != v28; m = *(_QWORD *)(m + 8))
        {
          v79 = *(const void **)(m + 16);
          if (v79)
          {
            if (v80)
              v80[584] = 1;
          }
        }
        goto LABEL_151;
      }
      while (1)
      {
        v71 = *(const void **)(v70 + 16);
        if (v71)
        {
          if (v72)
          {
            v73 = v72;
            if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v72[2] + 24))(v72 + 2, 1, 0))
            {
              if ((*(unsigned int (**)(_QWORD *))(*v73 + 760))(v73))
                break;
            }
          }
        }
        v70 = *(_QWORD *)(v70 + 8);
        if (v70 == v28)
          goto LABEL_137;
      }
      ComputeOffsetForPreInceptionProjects = TXTextScrollBehavior::getComputeOffsetForPreInceptionProjects((TXTextScrollBehavior *)v73);
      v36 = v104;
      v83 = *(uint64_t (**)(_QWORD *))(*v73 + 760);
      if (ComputeOffsetForPreInceptionProjects)
      {
        *(_DWORD *)(v8 + 59712) = v83(v73);
        *(_OWORD *)&time2[0].value = 0uLL;
        *(_OWORD *)&time2[0].epoch = v102;
        TXTextLayout::getTypographicBounds(v8, (uint64_t)time2, v104, 1, 0);
        v84 = *(double *)&time2[1].value;
        v85 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v8 + 200) + 348);
        (*(void (**)(CMTime *__return_ptr, _QWORD *))(*v73 + 608))(&time1, v73);
        v120 = v122;
        v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v8 + 200);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v86 + 336), (__n128 *)&v113);
        operator/((__int128 *)&v120.value, (uint64_t)&v113, (uint64_t)&time);
        v87 = (CMTimeGetSeconds(&time) + -1.0) * *((double *)v73 + 483) - (v84 + (double)v85);
        if (v87 > 0.0)
        {
          v88 = *(_DWORD *)(v8 + 59712) == 1
              ? (double)(*(_DWORD *)(v8 + 19324) - 1)
              : (double)(unint64_t)(((uint64_t)(*(_QWORD *)(v8 + 19032) - *(_QWORD *)(v8 + 19024)) >> 3) - 1);
          if (v88 > 0.0)
          {
            OZChannel::setValue((OZChannel *)(v8 + 59560), MEMORY[0x1E0CA2E68], v87 / v88, 1);
            TXTextLayout::doMotionLayout((TXTextLayout *)v8, (const OZRenderState *)v104);
          }
        }
        goto LABEL_139;
      }
      *(_DWORD *)(v8 + 59712) = v83(v73);
      v89 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 200) + 272))(v8 + 200) + 348);
      v90 = 1.0;
      if (*(_BYTE *)(theApp + 81) && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v8 + 200))
      {
        v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v8 + 200);
        HostAppProjectHeight = OZSceneSettings::getHostAppProjectHeight((OZSceneSettings *)(v91 + 336));
        v90 = (double)HostAppProjectHeight
            / (float)*(int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v8 + 200) + 348);
      }
      TXTextScrollBehavior::getContentBounds((TXTextScrollBehavior *)v73, v104, (uint64_t)&time1);
      v93 = *(double *)&v122.value;
      CurrentConversion = OZMEChannelTimeConverter::GetCurrentConversion(v94);
      v96 = CurrentConversion;
      memset(&v113, 0, sizeof(v113));
      if (CurrentConversion
        && (time1 = *(CMTime *)((char *)CurrentConversion + 76),
            time2[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
            CMTimeCompare(&time1, time2)))
      {
        v113 = *(CMTime *)((char *)v96 + 76);
      }
      else
      {
        v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v8 + 200);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v97 + 336), (__n128 *)&v113);
        memset(&v112, 0, sizeof(v112));
        if (!v96)
        {
          CMTimeMake(&v112, 1, 1);
          goto LABEL_171;
        }
      }
      v112 = *(CMTime *)((char *)v96 + 52);
LABEL_171:
      (*(void (**)(CMTime *__return_ptr, _QWORD *))(*v73 + 608))(&time1, v73);
      memset(&v111, 0, sizeof(v111));
      time2[0] = v122;
      operator*((__int128 *)&time2[0].value, (uint64_t)&v112, (uint64_t)&v111);
      memset(&v110, 0, sizeof(v110));
      OZChannel::getValueAsDouble((OZChannel *)(v73 + 386), MEMORY[0x1E0CA2E68], 0.0);
      operator*(&v112, &v110, v98);
      operator*((__int128 *)&v113.value, (uint64_t)&v110, (uint64_t)&v107);
      time2[0] = v111;
      v120 = v107;
      PC_CMTimeSaferSubtract(time2, &v120, (uint64_t)&v108);
      operator/(&v108, (uint64_t)&v113, (uint64_t)&v109);
      v99 = (CMTimeGetSeconds(&v109) + -1.0) * *((double *)v73 + 483) - (v90 * (double)v89 + v90 * v93);
      if (v99 > 0.0)
      {
        v100 = *(_DWORD *)(v8 + 59712) == 1
             ? (double)(*(_DWORD *)(v8 + 19324) - 1)
             : (double)(unint64_t)(((uint64_t)(*(_QWORD *)(v8 + 19032) - *(_QWORD *)(v8 + 19024)) >> 3) - 1);
        if (v100 > 0.0)
        {
          OZChannel::setValue((OZChannel *)(v8 + 59560), MEMORY[0x1E0CA2E68], v99 / v100 / v90, 1);
          TXTextLayout::doMotionLayout((TXTextLayout *)v8, (const OZRenderState *)v104);
        }
      }
      goto LABEL_139;
    }
    TXTextLayout::doLayoutForEmptyString((TXTextLayout *)v8);
  }
LABEL_152:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v119);
  return 0;
}

void sub_1B28E9318(_Unwind_Exception *a1)
{
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x1738]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&STACK[0x698], (_QWORD *)STACK[0x6A0]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&STACK[0x6C8]);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getHardLine(TXTextLayout *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;

  v2 = *((_QWORD *)this + 2378);
  v3 = *((_QWORD *)this + 2379);
  if (v2 == v3)
    return ((unint64_t)(v3 - v2) >> 3) - 1;
  result = 0;
  v5 = v2;
  while (1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)v5 + 856);
    if (v6 <= a2 && *(_QWORD *)(*(_QWORD *)v5 + 864) + v6 > a2)
      break;
    v5 += 8;
    result = (result + 1);
    if (v5 == v3)
      return ((unint64_t)(v3 - v2) >> 3) - 1;
  }
  return result;
}

uint64_t TXTextLayout::getParagraphStyleAtIndex(TXTextLayout *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2378);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 2379) - v2) >> 3))
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(v2 + 8 * a2);
}

uint64_t *TXTextLayout::getComposedCharacter(TXTextLayout *this, unsigned int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *i;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;

  v2 = (_QWORD *)((char *)this + 64296);
  v15 = a2;
  v3 = v2 + 1;
  for (i = (uint64_t *)v2[1]; i; i = (uint64_t *)*i)
  {
    v5 = *((_DWORD *)i + 8);
    if (v5 <= a2)
    {
      if (v5 >= a2)
      {
        v16 = &v15;
        v13 = std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v2, &v15, (uint64_t)&std::piecewise_construct, &v16);
        return v13 + 5;
      }
      ++i;
    }
  }
  v6 = (_QWORD *)*v2;
  if ((_QWORD *)*v2 == v3)
    goto LABEL_21;
  while (1)
  {
    v7 = v6[6];
    if (v7 <= a2 && v6[7] + v7 > a2)
      break;
    v9 = (_QWORD *)v6[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v6[2];
        v11 = *v10 == (_QWORD)v6;
        v6 = v10;
      }
      while (!v11);
    }
    v6 = v10;
    if (v10 == v3)
      goto LABEL_21;
  }
  if (v6 == v3)
  {
LABEL_21:
    v14 = 0;
    v16 = &v14;
    v13 = std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v2, &v14, (uint64_t)&std::piecewise_construct, &v16);
    return v13 + 5;
  }
  return v6 + 5;
}

void TXTextLayout::addStyle(uint64_t a1, uint64_t a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;

  if (*(_QWORD *)a2)
  {
    if (v4)
    {
      v5 = *(std::__shared_weak_count **)(a2 + 8);
      v11 = v4;
      v12 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 280))(a1, &v11, 0);
      v8 = v12;
      if (v12)
      {
        v9 = (unint64_t *)&v12->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1B28E969C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::addStyle(uint64_t a1, uint64_t a2)
{
  TXTextLayout::addStyle(a1 - 200, a2);
}

void TXTextLayout::addStyle(TXTextLayout *this, OZSceneNode **a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle const&,void>(a2, &v13);
  v11 = v13;
  v12 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  (*(void (**)(TXTextLayout *, uint64_t *))(*(_QWORD *)this + 264))(this, &v11);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1B28E978C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::addStyle(TXTextLayout *this, OZSceneNode **a2)
{
  TXTextLayout::addStyle((TXTextLayout *)((char *)this - 200), a2);
}

uint64_t MaterialSequenceIDIncrement(void)
{
  return 200;
}

uint64_t NextAvailableMaterialSequenceID(TXSequenceChannels *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void **v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  void **v11;
  uint64_t i;
  void *v14;
  void **v15;
  uint64_t v16;
  char v17;

  v1 = &v14;
  v14 = &v14;
  v15 = &v14;
  v16 = 0;
  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 2) - v2;
  if ((unint64_t)v3 < 0x29)
  {
    v10 = 0;
  }
  else
  {
    v4 = v3 >> 3;
    v5 = 5;
    v6 = 1;
    v7 = &v14;
    do
    {
      v9 = operator new(0x18uLL);
      *v9 = v7;
      v9[1] = &v14;
      v7[1] = v9;
      v5 = (v6 + 5);
      v14 = v9;
      v16 = v6++;
      v7 = (void **)v9;
      *((_DWORD *)v9 + 4) = v8;
    }
    while (v4 > v5);
    v1 = v15;
    v10 = v6 - 1;
  }
  std::list<unsigned int>::__sort<std::__less<void,void>>((uint64_t)v1, (uint64_t)&v14, v10, (uint64_t)&v17);
  v11 = v15;
  for (i = 2000; v11 != &v14; v11 = (void **)v11[1])
  {
    if ((_DWORD)i == *((_DWORD *)v11 + 4))
      i = (i + 200);
    else
      i = i;
  }
  std::__list_imp<unsigned int>::clear(&v14);
  return i;
}

void sub_1B28E98D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__list_imp<unsigned int>::clear(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialBase::setSequenceID(OZMaterialBase *this, unsigned int a2)
{
  OZChannelBase *v2;

  v2 = (OZChannelBase *)((char *)this + 720);
  OZChannel::setValue((OZChannel *)((char *)this + 720), MEMORY[0x1E0CA2E68], (double)a2, 0);
  OZChannelBase::finishInitializing(v2);
  return OZChannel::setDefaultToCurrentValue((OZChannel *)v2);
}

_QWORD *std::list<std::shared_ptr<TXTextStyle>>::push_back(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  result = operator new(0x20uLL);
  v5 = a2[1];
  result[2] = *a2;
  result[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a1;
  *result = *a1;
  result[1] = a1;
  *(_QWORD *)(v8 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

_QWORD *RemoveAllMaterialsFromSequenceBehaviors(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = result + 150;
  v2 = (_QWORD *)result[151];
  if (v2 != result + 150)
  {
    do
    {
      result = (_QWORD *)v2[2];
      if (result)
      {
        if (result)
          result = RemoveAllMaterialsFromSequenceChannels((TXSequenceChannels *)(result + 102));
      }
      v2 = (_QWORD *)v2[1];
    }
    while (v2 != v1);
  }
  return result;
}

_QWORD *AddAllMaterialsToSequenceBehaviors(_QWORD *result, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = result + 150;
  v3 = (_QWORD *)result[151];
  if (v3 != result + 150)
  {
    do
    {
      result = (_QWORD *)v3[2];
      if (result)
      {
        if (result)
          result = AddAllMaterialsToSequenceChannels(a2, (TXSequenceChannels *)(result + 102));
      }
      v3 = (_QWORD *)v3[1];
    }
    while (v3 != v2);
  }
  return result;
}

OZScene *ReplaceAllMaterialsInStyles(OZScene *result, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  OZMaterialBase **v5;
  _QWORD *v6;
  _QWORD *v7;
  const void *v8;
  OZMaterialBase *v9;

  v2 = (char *)result + 19344;
  v3 = *((_QWORD *)result + 2419);
  if ((OZScene *)v3 != (OZScene *)((char *)result + 19344))
  {
    do
    {
      while (1)
      {
        result = *(OZScene **)(v3 + 16);
        v5 = (OZMaterialBase **)*((_QWORD *)result + 60);
        if (*((OZMaterialBase ***)result + 61) == v5)
          break;
        OZStyle::unregisterMaterial(result, *v5);
        OZStyle::removeMaterialAtIndex(*(OZStyle **)(v3 + 16), 0);
      }
      v6 = *(_QWORD **)a2;
      v7 = *(_QWORD **)(a2 + 8);
      while (v6 != v7)
      {
        v8 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*v6 + 8) + 24))(*(_QWORD *)(*v6 + 8), *v6, 2);
        if (v8)
        else
          v9 = 0;
        OZStyle::addMaterial(*(OZStyle **)(v3 + 16), v9);
        result = OZStyle::registerMaterial(*(OZStyle **)(v3 + 16), v9);
        ++v6;
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while ((char *)v3 != v2);
  }
  return result;
}

void TXTextLayout::setStyle(unsigned int *a1, TXTextStyle **a2, _BYTE *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const TXTextStyle *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t isEnabled;
  TXTextStyle *v12;
  int v13;
  uint64_t v14;
  OZMaterialBase *v15;
  unsigned int AvailableMaterialSequenceID;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  TXTextStyle **j;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t i;
  TXTextStyle *v35;
  TXTextStyle **v36;
  uint64_t v37;
  unsigned int v38[2];
  const TXTextStyle *v39;
  std::__shared_weak_count *v40;
  int v41[2];

  if (*((_QWORD *)a1 + 2420))
  {
    v6 = *((_QWORD *)a1 + 2419);
    v8 = *(const TXTextStyle **)(v6 + 16);
    v7 = *(std::__shared_weak_count **)(v6 + 24);
    v39 = v8;
    v40 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    isEnabled = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 296))(a1);
    v12 = *a2;
    if (*((_DWORD *)*a2 + 12238) != 1)
    {
      isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)v12 + 40520), 1, 1);
      v12 = *a2;
    }
    v13 = StyleWillReplaceMaterial(v12, v8);
    if ((_DWORD)isEnabled != (*(unsigned int (**)(unsigned int *))(*(_QWORD *)a1 + 296))(a1))
      TXTextLayout::didToggleIs3D((TXTextLayout *)a1, isEnabled);
    v14 = *((_QWORD *)*a2 + 60);
    if (*((_QWORD *)*a2 + 61) == v14)
    {
      TXTextStyle::addDefaultMaterial(*a2);
      v14 = *((_QWORD *)*a2 + 60);
    }
    if (!OZChannel::getValueAsInt((OZChannel *)(*(_QWORD *)v14 + 720), MEMORY[0x1E0CA2E68], 0.0))
    {
      v15 = (OZMaterialBase *)**((_QWORD **)*a2 + 60);
      AvailableMaterialSequenceID = NextAvailableMaterialSequenceID((TXSequenceChannels *)(a1 + 6258));
      OZMaterialBase::setSequenceID(v15, AvailableMaterialSequenceID);
    }
    v17 = a1 + 4814;
    if (a3)
      *a3 = v13;
    v18 = *v17;
    v19 = a1[4815];
    if (*v17 == v19)
    {
      if (v13)
      {
        RemoveAllMaterialsFromSequenceBehaviors(a1);
        RemoveAllMaterialsFromSequenceChannels((TXSequenceChannels *)(a1 + 6258));
        ReplaceAllMaterialsInStyles((OZScene *)a1, (uint64_t)*a2 + 480);
      }
      if (*((_BYTE *)*a2 + 49857))
      {
        TXTextLayout::getCurrentStyleForInsertion((uint64_t)a1, &v35);
        TXTextStyle::copyStyle((Li3DEngineScene **)v35, *a2);
        v20 = (std::__shared_weak_count *)v36;
        if (v36)
        {
          v21 = (unint64_t *)(v36 + 1);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
      else
      {
        for (i = *((_QWORD *)a1 + 2419); (unsigned int *)i != a1 + 4836; i = *(_QWORD *)(i + 8))
          TXTextStyle::copyStyle(*(Li3DEngineScene ***)(i + 16), *a2);
      }
      if (v13)
      {
        AddAllMaterialsToSequenceChannels((char *)a2, (TXSequenceChannels *)(a1 + 6258));
        AddAllMaterialsToSequenceBehaviors(a1, (char *)a2);
      }
    }
    else
    {
      v23 = v19 - v18;
      v25 = v18 - v19;
      v24 = v18 > v19;
      if (v18 >= v19)
        v18 = a1[4815];
      if (v24)
        v26 = v25;
      else
        v26 = v23;
      v38[0] = v18;
      v38[1] = v26;
      if (*((_DWORD *)*a2 + 12238) != 0xFFFF)
        TXTextLayout::splitStyleRunsInRange((Li3DEngineScene *)a1, v38);
      if (v13)
      {
        RemoveAllMaterialsFromSequenceBehaviors(a1);
        RemoveAllMaterialsFromSequenceChannels((TXSequenceChannels *)(a1 + 6258));
        ReplaceAllMaterialsInStyles((OZScene *)a1, (uint64_t)*a2 + 480);
      }
      v35 = (TXTextStyle *)&v35;
      v36 = &v35;
      v37 = 0;
      v27 = *v17;
      v28 = a1[4815];
      if (*v17 >= v28)
        v27 = a1[4815];
      if (*v17 <= v28)
        v29 = v28 - *v17;
      else
        v29 = *v17 - v28;
      v41[0] = v27;
      v41[1] = v29;
      TXTextLayout::getStylesInRange(a1, (uint64_t *)&v35, v41);
      for (j = v36; j != &v35; j = (TXTextStyle **)j[1])
        TXTextStyle::copyStyle((Li3DEngineScene **)j[2], *a2);
      if ((v13 & 1) != 0)
      {
        AddAllMaterialsToSequenceChannels((char *)a2, (TXSequenceChannels *)(a1 + 6258));
        AddAllMaterialsToSequenceBehaviors(a1, (char *)a2);
      }
      std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)&v35);
    }
    v31 = v40;
    if (v40)
    {
      v32 = (unint64_t *)&v40->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_1B28E9EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::didToggleIs3D(TXTextLayout *this, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  OZChannelBase *v7;
  OZChannelBase *v8;
  char __str[64];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 19344;
  v4 = (char *)*((_QWORD *)this + 2419);
  if (v4 != (char *)this + 19344)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*((_QWORD *)v4 + 2) + 40520) + 104))(*((_QWORD *)v4 + 2) + 40520, a2, 0);
      v5 = *((_QWORD *)v4 + 2);
      if ((a2 & 1) != 0)
      {
        OZChannelFolder::setFoldFlag((OZChannelFolder *)(v5 + 31080), 4);
        OZChannelFolder::setFoldFlag((OZChannelFolder *)(*((_QWORD *)v4 + 2) + 13848), 4);
        v6 = MEMORY[0x1E0CA2E68];
        (*(void (**)(uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)(*((_QWORD *)v4 + 2) + 31208) + 712))(*((_QWORD *)v4 + 2) + 31208, MEMORY[0x1E0CA2E68], 0, 0.0);
        (*(void (**)(uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)(*((_QWORD *)v4 + 2) + 13976) + 712))(*((_QWORD *)v4 + 2) + 13976, v6, 0, 0.0);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(*((_QWORD *)v4 + 2) + 31208) + 104))(*((_QWORD *)v4 + 2) + 31208, 0, 0);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(*((_QWORD *)v4 + 2) + 13976) + 104))(*((_QWORD *)v4 + 2) + 13976, 0, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 31208), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 36168), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 37568), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 13976), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 19528), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 18784), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 19680), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 5960), 2, 1);
        OZChannelBase::setFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 22632), 2, 1);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 + 31208) + 104))(v5 + 31208, 1, 0);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*((_QWORD *)v4 + 2) + 13976) + 104))(*((_QWORD *)v4 + 2) + 13976, 1, 0);
        OZChannelFolder::resetFoldFlag((OZChannelFolder *)(*((_QWORD *)v4 + 2) + 31080), 4);
        OZChannelFolder::resetFoldFlag((OZChannelFolder *)(*((_QWORD *)v4 + 2) + 13848), 4);
        OZChannelBase::resetFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 31208), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 36168), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 37568), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 13976), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 19528), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 18784), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 19680), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 5960), 2, 1);
        OZChannelBase::resetFlag((OZChannelBase *)(*((_QWORD *)v4 + 2) + 22632), 2, 1);
      }
      v4 = (char *)*((_QWORD *)v4 + 1);
    }
    while (v4 != v3);
  }
  v7 = (OZChannelBase *)((char *)this + 9120);
  v8 = (OZChannelBase *)((char *)this + 8968);
  if ((a2 & 1) != 0)
  {
    OZChannelBase::setFlag(v7, 0x400000, 0);
    OZChannelBase::setFlag(v8, 0x400000, 0);
  }
  else
  {
    OZChannelBase::resetFlag(v7, 0x400000, 0);
    OZChannelBase::resetFlag(v8, 0x400000, 0);
  }
  snprintf(__str, 0x40uLL, "%d", a2);
  return OZChannelBase::setRangeName((OZChannelBase *)"3D Text Toggle", (const PCString *)"3D Text");
}

uint64_t TXTextLayout::getCurrentStyleForInsertion@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *(_DWORD *)(this + 19256);
  v3 = *(_DWORD *)(this + 19260);
  if (v2 != v3)
  {
    v4 = v3 - v2;
    v6 = v2 - v3;
    v5 = v2 > v3;
    if (v2 < v3)
      v3 = *(_DWORD *)(this + 19256);
    if (v5)
      v4 = v6;
    for (i = *(_QWORD *)(this + 19376); i != this + 19368; i = *(_QWORD *)(i + 8))
    {
      v8 = *(_QWORD *)(i + 16);
      if (*(_DWORD *)(v8 + 24) == v3 && *(_DWORD *)(v8 + 28) == v4)
      {
        v9 = *(_QWORD *)(v8 + 16);
        *a2 = *(_QWORD *)(v8 + 8);
        a2[1] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        return this;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 288))(this);
}

uint64_t TXTextLayout::splitStyleRunsInRange(Li3DEngineScene *a1, unsigned int *a2)
{
  OZScene **v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  OZSceneNode **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  double v18;
  double v19;
  unsigned int v21;
  TXTextStyleRun *v22;
  _QWORD *v23;
  uint64_t v24;
  TXTextStyleRun *v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  TXTextStyleRun *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  TXTextStyleRun *v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  OZChannelBase *v46;
  std::__shared_weak_count *v47;
  double v48;
  OZChannelBase *v49;
  std::__shared_weak_count *v50;
  PCSharedCount v51;
  double v52[2];
  std::__shared_weak_count *v53;
  _BYTE v54[15];

  v4 = (OZScene **)Li3DEngineScene::sceneManager(a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v54, v4);
  v5 = (uint64_t *)*((_QWORD *)a1 + 2422);
  if (v5 != (uint64_t *)((char *)a1 + 19368))
  {
    v6 = 0;
    while (1)
    {
      v7 = v5[2];
      v8 = *(OZSceneNode ***)(v7 + 8);
      v9 = *(std::__shared_weak_count **)(v7 + 16);
      *(_QWORD *)&v52[1] = v8;
      v53 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v13 = *(_DWORD *)(v7 + 24);
      v12 = *(_DWORD *)(v7 + 28);
      v14 = *a2;
      v15 = a2[1] + *a2;
      v16 = v12 + v13;
      if ((int)(v12 + v13 - 1) < (int)*a2 || (int)v13 > (int)(v15 - 1))
      {
        v5 = (uint64_t *)v5[1];
        if (v9)
          goto LABEL_46;
        goto LABEL_50;
      }
      v18 = (double)v14;
      v19 = (double)v15;
      v52[0] = 0.0;
      if ((double)v14 <= (double)v13)
        v18 = (double)v13;
      if (v19 >= (double)v16)
        v19 = (double)v16;
      if (v18 <= v19)
      {
        LODWORD(v52[0]) = v18;
        HIDWORD(v52[0]) = v19 - v18;
      }
      PCSharedCount::PCSharedCount(&v51);
      TXTextLayout::getString((PCString *)a1, (PCString *)&v51);
      if (LODWORD(v52[0]) == v13 && HIDWORD(v52[0]) == v12)
      {
        v5 = (uint64_t *)v5[1];
        goto LABEL_45;
      }
      v21 = LODWORD(v52[0]) - v13;
      if (LODWORD(v52[0]) <= v13)
        goto LABEL_39;
      if (HIDWORD(v52[0]) + LODWORD(v52[0]) < v16)
      {
        *(_DWORD *)(v7 + 24) = v13;
        *(_DWORD *)(v7 + 28) = v21;
        std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v8, &v49);
        v22 = (TXTextStyleRun *)operator new();
        TXTextStyleRun::TXTextStyleRun(v22, (uint64_t *)&v49, v52);
        TXTextLayout::addStyle((uint64_t)a1, &v49, 1);
        v5 = (uint64_t *)v5[1];
        v23 = operator new(0x18uLL);
        v23[2] = v22;
        v24 = *v5;
        *(_QWORD *)(v24 + 8) = v23;
        *v23 = v24;
        *v5 = (uint64_t)v23;
        v23[1] = v5;
        ++*((_QWORD *)a1 + 2423);
        TXTextLayout::updateStyleRun(a1, v22);
        LODWORD(v48) = HIDWORD(v52[0]) + LODWORD(v52[0]);
        HIDWORD(v48) = v16 - (HIDWORD(v52[0]) + LODWORD(v52[0]));
        std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v8, &v46);
        v25 = (TXTextStyleRun *)operator new();
        TXTextStyleRun::TXTextStyleRun(v25, (uint64_t *)&v46, &v48);
        TXTextLayout::addStyle((uint64_t)a1, &v46, 1);
        v26 = operator new(0x18uLL);
        v26[2] = v25;
        v27 = *v5;
        *(_QWORD *)(v27 + 8) = v26;
        *v26 = v27;
        *v5 = (uint64_t)v26;
        v26[1] = v5;
        ++*((_QWORD *)a1 + 2423);
        TXTextLayout::updateStyleRun(a1, v25);
        v28 = v47;
        if (v47)
        {
          v29 = (unint64_t *)&v47->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = v50;
        if (!v50)
          goto LABEL_44;
        v32 = (unint64_t *)&v50->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        goto LABEL_42;
      }
      if (v16 == HIDWORD(v52[0]) + LODWORD(v52[0]))
      {
        *(_DWORD *)(v7 + 24) = v13;
        *(_DWORD *)(v7 + 28) = v21;
        std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v8, &v49);
        v34 = (TXTextStyleRun *)operator new();
        TXTextStyleRun::TXTextStyleRun(v34, (uint64_t *)&v49, v52);
        TXTextLayout::addStyle((uint64_t)a1, &v49, 1);
        v5 = (uint64_t *)v5[1];
        v35 = operator new(0x18uLL);
        v35[2] = v34;
        v36 = *v5;
        *(_QWORD *)(v36 + 8) = v35;
        *v35 = v36;
        *v5 = (uint64_t)v35;
        v35[1] = v5;
        ++*((_QWORD *)a1 + 2423);
        TXTextLayout::updateStyleRun(a1, v34);
        v31 = v50;
        if (v50)
        {
          v37 = (unint64_t *)&v50->__shared_owners_;
          do
            v33 = __ldaxr(v37);
          while (__stlxr(v33 - 1, v37));
          goto LABEL_42;
        }
      }
      else
      {
LABEL_39:
        std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v8, &v49);
        v38 = (TXTextStyleRun *)operator new();
        TXTextStyleRun::TXTextStyleRun(v38, (uint64_t *)&v49, v52);
        TXTextLayout::addStyle((uint64_t)a1, &v49, 1);
        v39 = operator new(0x18uLL);
        v39[2] = v38;
        v40 = *v5;
        *(_QWORD *)(v40 + 8) = v39;
        *v39 = v40;
        *v5 = (uint64_t)v39;
        v39[1] = v5;
        ++*((_QWORD *)a1 + 2423);
        TXTextLayout::updateStyleRun(a1, v38);
        v41 = LODWORD(v52[0]) + HIDWORD(v52[0]);
        *(_DWORD *)(v7 + 24) = LODWORD(v52[0]) + HIDWORD(v52[0]);
        *(_DWORD *)(v7 + 28) = v16 - v41;
        v31 = v50;
        if (v50)
        {
          v42 = (unint64_t *)&v50->__shared_owners_;
          do
            v33 = __ldaxr(v42);
          while (__stlxr(v33 - 1, v42));
LABEL_42:
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }
LABEL_44:
      v6 = 1;
LABEL_45:
      PCString::~PCString((PCString *)&v51);
      v9 = v53;
      if (v53)
      {
LABEL_46:
        v43 = (unint64_t *)&v9->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
LABEL_50:
      if (v5 == (uint64_t *)((char *)a1 + 19368))
        goto LABEL_53;
    }
  }
  v6 = 0;
LABEL_53:
  TXTextLayout::updateStyleNames(a1);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v54);
  return v6 & 1;
}

void sub_1B28EA810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, PCString a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;

  MEMORY[0x1B5E29170](v19, 0x10A1C40CEA811D0);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  PCString::~PCString(&a15);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a19);
  _Unwind_Resume(a1);
}

void TXTextLayout::removeStyle(uint64_t a1, _QWORD *a2)
{
  OZStyle *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t i;
  const void *v9;
  OZSingleChannelBehavior *v10;
  OZSingleChannelBehavior *v11;
  OZChannelBase *ChanBase;
  OZChannelBase *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  OZStyle *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  OZStyle *v24;
  std::__shared_weak_count *v25;
  OZStyle *v26;
  std::__shared_weak_count *v27;

  if (*a2)
  {
    if (v4)
    {
      v5 = (std::__shared_weak_count *)a2[1];
      v26 = v4;
      v27 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      for (i = *(_QWORD *)(a1 + 1208); i != a1 + 1200; i = *(_QWORD *)(i + 8))
      {
        v9 = *(const void **)(i + 16);
        if (v9)
        {
          if (v10)
          {
            v11 = v10;
            if (OZSingleChannelBehavior::getChanBase(v10))
            {
              ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(v11);
              v13 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
              OZChannelBase::isDescendantOf(ChanBase, v13);
              if (*a2)
                v14 = *a2 + 16;
              else
                v14 = 0;
              (*(void (**)(OZSingleChannelBehavior *, uint64_t))(*(_QWORD *)v11 + 152))(v11, v14);
            }
          }
        }
      }
      std::list<std::shared_ptr<TXTextStyle>>::remove(a1 + 19344, &v26);
      v24 = v26;
      v25 = v27;
      if (v27)
      {
        v15 = (unint64_t *)&v27->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      OZSceneNode::removeStyle((OZScene **)(a1 + 200), &v24);
      v17 = v25;
      if (v25)
      {
        v18 = (unint64_t *)&v25->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = v26;
      *((_QWORD *)v26 + 6118) = 0;
      OZStyle::setSceneNode((uint64_t)v20, 0);
      v21 = v27;
      if (v27)
      {
        v22 = (unint64_t *)&v27->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
}

void sub_1B28EAAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::list<std::shared_ptr<TXTextStyle>>::remove(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9[3];

  v9[0] = (uint64_t)v9;
  v9[1] = (uint64_t)v9;
  v9[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)a1)
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        std::list<std::shared_ptr<TXTextStyle>>::splice((uint64_t)v9, v9, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
  }
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear(v9);
}

void sub_1B28EAB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::removeStyle(uint64_t a1, _QWORD *a2)
{
  TXTextLayout::removeStyle(a1 - 200, a2);
}

uint64_t TXTextLayout::getStyleAtInsertionPoint@<X0>(TXTextLayout *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = TXTextLayout::getStyleRunAtInsertionPoint(this, a2);
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    *a3 = *(_QWORD *)(result + 8);
    a3[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t TXTextLayout::getStyleRunAtInsertionPoint(TXTextLayout *this, unsigned int a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t Instance;
  OZSceneNode **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  OZChannelBase *v21;
  std::__shared_weak_count *v22;
  OZSceneNode **v23;
  std::__shared_weak_count *v24;

  v2 = (char *)this + 19368;
  v3 = (char *)*((_QWORD *)this + 2422);
  if (v3 == (char *)this + 19368)
  {
    Instance = TXTextStyleManager::getInstance(this);
    v8 = *(OZSceneNode ***)(Instance + 8);
    v9 = *(std::__shared_weak_count **)(Instance + 16);
    v23 = v8;
    v24 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v8, &v21);
    TXTextLayout::addStyle((uint64_t)this, &v21, 1);
    v4 = operator new();
    TXTextStyleRun::TXTextStyleRun((_QWORD *)v4, (uint64_t *)&v21);
    v12 = operator new(0x18uLL);
    v12[1] = v2;
    v12[2] = v4;
    v13 = *((_QWORD *)this + 2421);
    *v12 = v13;
    *(_QWORD *)(v13 + 8) = v12;
    *((_QWORD *)this + 2421) = v12;
    ++*((_QWORD *)this + 2423);
    v14 = v22;
    if (v22)
    {
      v15 = (unint64_t *)&v22->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    do
    {
      v4 = *((_QWORD *)v3 + 2);
      v5 = *(_DWORD *)(v4 + 24);
      if (v5 <= a2 && *(_DWORD *)(v4 + 28) + v5 >= a2)
        break;
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4;
}

void sub_1B28EAD64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E29170](v2, 0x10A1C40CEA811D0);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getStyleAtCharOffset@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(this + 19376);
  if (v3 == this + 19368)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    do
    {
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(_DWORD *)(v4 + 24);
      if (v5 <= a2 && *(_DWORD *)(v4 + 28) + v5 > a2)
        break;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != this + 19368);
    v6 = *(_QWORD *)(v4 + 16);
    *a3 = *(_QWORD *)(v4 + 8);
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return this;
}

uint64_t TXTextLayout::getStyleRunAtCharOffset(TXTextLayout *this, unsigned int a2)
{
  char *v2;
  char *v3;
  uint64_t result;
  unsigned int v5;

  v2 = (char *)this + 19368;
  v3 = (char *)*((_QWORD *)this + 2422);
  if (v3 == (char *)this + 19368)
    return 0;
  do
  {
    result = *((_QWORD *)v3 + 2);
    v5 = *(_DWORD *)(result + 24);
    if (v5 <= a2 && *(_DWORD *)(result + 28) + v5 > a2)
      break;
    v3 = (char *)*((_QWORD *)v3 + 1);
  }
  while (v3 != v2);
  return result;
}

void TXTextLayout::getGlyphSelectedStyles(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int CharOffsetAt;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  if (((*(_QWORD *)(a1 + 19280) - *(_QWORD *)(a1 + 19272)) & 0x3FFFFFFFCLL) != 0)
  {
    v4 = 0;
    do
    {
      CharOffsetAt = TXDiscontinuousSelection::getCharOffsetAt((TXDiscontinuousSelection *)(a1 + 19272), v4);
      TXTextLayout::getStyleAtCharOffset(a1, CharOffsetAt, &v15);
      std::list<std::shared_ptr<TXTextStyle>>::push_back(a2, &v15);
      v6 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      ++v4;
    }
    while (v4 < ((*(_QWORD *)(a1 + 19280) - *(_QWORD *)(a1 + 19272)) >> 2));
  }
  if (!a2[2])
  {
    v9 = *(_DWORD *)(a1 + 19256);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
    if (v9 >= v10)
      v11 = v10;
    else
      v11 = v9;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(&v15, a1, v11);
    std::list<std::shared_ptr<TXTextStyle>>::push_back(a2, &v15);
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_1B28EAFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TXTextLayout::getStylesInRange(_QWORD *a1, uint64_t *a2, int *a3)
{
  _QWORD *v5;
  _QWORD *i;
  uint64_t v7;
  int v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  if (a3[1])
  {
    v5 = a1 + 2421;
    for (i = (_QWORD *)a1[2422]; i != v5; i = (_QWORD *)i[1])
    {
      v7 = i[2];
      v8 = *(_DWORD *)(v7 + 24);
      if (v8 <= *a3 + a3[1] - 1 && v8 + *(_DWORD *)(v7 + 28) - 1 >= *a3)
      {
        v10 = *(_QWORD *)(v7 + 8);
        v11 = *(std::__shared_weak_count **)(v7 + 16);
        v19 = v10;
        v20 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
        }
        v14 = operator new(0x20uLL);
        v14[2] = v10;
        v14[3] = v11;
        v15 = *a2;
        *v14 = *a2;
        v14[1] = a2;
        *(_QWORD *)(v15 + 8) = v14;
        *a2 = (uint64_t)v14;
        ++a2[2];
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*a1 + 288))(&v19, a1, *a3);
    std::list<std::shared_ptr<TXTextStyle>>::push_back(a2, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void sub_1B28EB0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TXTextLayout::updateStyleRun(TXTextLayout *this, TXTextStyleRun *a2)
{
  char *v3;
  OZScene **v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE v9[8];

  v3 = (char *)this + 58824;
  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v9, v4);
  v5 = *(uint64_t **)v3;
  v6 = (uint64_t *)*((_QWORD *)v3 + 1);
  while (v5 != v6)
  {
    v7 = *(_DWORD *)(*v5 + 736);
    v8 = *((_DWORD *)a2 + 6);
    if (v8 <= v7 && *((_DWORD *)a2 + 7) + v8 > v7)
      TXTextObject::setStyleRun(*v5, (uint64_t)a2);
    v5 += 2;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v9);
}

void sub_1B28EB198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::list<TXTextStyleRun *>::remove(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10[3];

  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)a1)
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        std::list<std::shared_ptr<TXTextStyle>>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
  }
  return std::__list_imp<unsigned int>::clear(v10);
}

void sub_1B28EB264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL TXTextLayout::isAnyParagraphDirty(TXTextLayout *this)
{
  OZScene **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  BOOL v7;
  _BYTE v9[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v9, v2);
  v3 = *((_QWORD *)this + 2378);
  v4 = *((_QWORD *)this + 2379);
  if (v3 == v4)
  {
    v6 = 0;
  }
  else
  {
    v5 = v3 + 8;
    do
    {
      v6 = *(_BYTE *)(*(_QWORD *)(v5 - 8) + 872) != 0;
      if (*(_BYTE *)(*(_QWORD *)(v5 - 8) + 872))
        v7 = 1;
      else
        v7 = v5 == v4;
      v5 += 8;
    }
    while (!v7);
  }
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v9);
  return v6;
}

void TXTextLayout::updateParagraphStylesAfterTextDelete(uint64_t **this, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  int HardLine;
  unint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  TXParagraphStyle *v27;
  unint64_t v28;
  unint64_t v29;
  double v30;

  v6 = a2;
  HardLine = TXTextLayout::getHardLine((TXTextLayout *)this, a2);
  v8 = a3 + a2;
  v9 = TXTextLayout::getHardLine((TXTextLayout *)this, v8);
  v10 = this[2378];
  v11 = this[2379];
  if (v10 != v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = this[2378];
    while (1)
    {
      if (HardLine == v12)
        v13 = *v14;
      if (v9 == v12)
        break;
      ++v12;
      if (++v14 == v11)
        return;
    }
    if (v13)
    {
      v15 = v10[v9];
      if (v15)
      {
        v29 = v6 - *(_QWORD *)(v13 + 856);
        v16 = *(_QWORD *)(v15 + 856) - v8 + *(_QWORD *)(v15 + 864);
        v17 = v9 - HardLine;
        if (v9 != HardLine)
        {
          v18 = (HardLine + 1);
          if (v18 < v9 + 1)
          {
            do
            {
              v19 = &this[2378][v18];
              v20 = *v19;
              v21 = (char *)this[2379];
              v22 = v21 - (char *)(v19 + 1);
              if (v21 != (char *)(v19 + 1))
                memmove(&this[2378][v18], v19 + 1, v21 - (char *)(v19 + 1));
              this[2379] = (uint64_t *)((char *)v19 + v22);
              if (v20)
                (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
              --v17;
            }
            while (v17);
          }
        }
        TXParagraphStyle::setLength(v13, v16 + v29);
        TXParagraphStyle::dirty((TXParagraphStyle *)v13, 1);
        if (!(v16 + v29))
        {
          *(_QWORD *)&v30 = *(unsigned int *)(v13 + 1032);
          TXParagraphStyle::setGlyphRange(v13, &v30);
        }
        v23 = this[2378];
        v24 = this[2379];
        if (v23 != v24)
        {
          v25 = a3;
          v26 = -a3;
          do
          {
            v27 = (TXParagraphStyle *)*v23;
            v28 = *(_QWORD *)(*v23 + 856);
            if (v28 > v6)
            {
              TXParagraphStyle::setStart(*v23, v28 - v25);
              TXParagraphStyle::shiftLineBreaksBy((uint64_t)v27, v26);
              TXParagraphStyle::shiftDirectionalRunsBy((uint64_t)v27, v26);
              TXParagraphStyle::shiftCaretInsertionIndices(v27, v26);
            }
            ++v23;
          }
          while (v23 != v24);
        }
      }
    }
  }
}

void TXTextLayout::updateParagraphStylesAfterTextInsert(TXTextLayout *this, unsigned int a2, unsigned int a3)
{
  TXParagraphStyle **v3;
  TXParagraphStyle **v4;
  unsigned int v7;
  unint64_t v8;
  TXParagraphStyle *v9;
  TXParagraphStyle *v10;
  unint64_t v11;
  uint64_t v12;
  TXParagraphStyle **v13;
  unsigned int v14;
  TXParagraphStyle *v15;

  v3 = (TXParagraphStyle **)*((_QWORD *)this + 2378);
  v4 = (TXParagraphStyle **)*((_QWORD *)this + 2379);
  if (v3 != v4)
  {
    v7 = 0;
    v8 = v4 - v3 - 1;
    while (1)
    {
      v9 = *v3;
      if (v8 <= v7 || (v10 = v3[1]) == 0 || *((_QWORD *)v10 + 107) != a2)
      {
        v11 = *((_QWORD *)v9 + 107);
        if (v11 <= a2)
        {
          v12 = *((_QWORD *)v9 + 108);
          if (v12 + v11 >= a2)
            break;
        }
      }
      ++v3;
      ++v7;
      if (v3 == v4)
      {
        v12 = *((_QWORD *)v9 + 108);
        v3 = (TXParagraphStyle **)*((_QWORD *)this + 2379);
        break;
      }
    }
    TXParagraphStyle::setLength((uint64_t)v9, v12 + a3);
    TXParagraphStyle::dirty(v9, 1);
    v13 = v3 + 1;
    if (v13 != v4)
    {
      v14 = v7 + 1;
      do
      {
        if (v14 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 2379) - *((_QWORD *)this + 2378)) >> 3))
          break;
        v15 = *v13++;
        TXParagraphStyle::setStart((uint64_t)v15, *((_QWORD *)v15 + 107) + a3);
        TXParagraphStyle::shiftLineBreaksBy((uint64_t)v15, a3);
        TXParagraphStyle::shiftDirectionalRunsBy((uint64_t)v15, a3);
        TXParagraphStyle::shiftCaretInsertionIndices(v15, a3);
        ++v14;
      }
      while (v13 != v4);
    }
  }
}

double TXTextLayout::updateParagraphStylesAfterNewLineInsert(TXTextLayout *this, unsigned int a2)
{
  char **v3;
  char *v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  TXParagraphStyle *v11;
  uint64_t v12;
  uint64_t v13;
  int Alignment;
  int Justification;
  BOOL v16;
  char *v17;
  TXParagraphStyle *v18;
  double result;
  TXParagraphStyle **v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  TXParagraphStyle **v28;
  char *v29;
  char *v30;
  char *v31;
  TXParagraphStyle *v32;
  _QWORD v33[2];
  BOOL v34;
  TXParagraphStyle *v35;

  v3 = (char **)((char *)this + 19024);
  v4 = (char *)*((_QWORD *)this + 2378);
  v5 = (char *)*((_QWORD *)this + 2379);
  if (v4 == v5)
  {
    std::vector<TXParagraphStyle *>::resize((uint64_t)this + 19024, 0);
    v17 = (char *)*((_QWORD *)this + 2378);
    v18 = (TXParagraphStyle *)operator new();
    TXParagraphStyle::TXParagraphStyle(v18, this);
    v35 = v18;
    std::vector<TXParagraphStyle *>::insert((uint64_t)v3, v17, &v35);
  }
  else
  {
    v7 = a2;
    while (1)
    {
      v8 = *(_QWORD *)v4;
      v9 = *(_QWORD *)(*(_QWORD *)v4 + 856);
      if (v9 <= a2)
      {
        v10 = *(_QWORD *)(v8 + 864);
        if (v10 + v9 > a2)
          break;
      }
      v4 += 8;
      if (v4 == v5)
      {
        v10 = *(_QWORD *)(v8 + 864);
        v4 = (char *)*((_QWORD *)this + 2379);
        break;
      }
    }
    v11 = (TXParagraphStyle *)operator new();
    TXParagraphStyle::TXParagraphStyle(v11, this, (TXParagraphStyle *)v8, 1);
    v35 = v11;
    v12 = a2 + 1;
    v13 = v9 - v12 + v10;
    Alignment = TXParagraphStyle::getAlignment((TXParagraphStyle *)v8);
    TXParagraphStyle::setAlignment(v11, Alignment, 0);
    Justification = TXParagraphStyle::getJustification((TXParagraphStyle *)v8);
    TXParagraphStyle::setJustification(v11, Justification);
    TXParagraphStyle::setStart((uint64_t)v11, v12);
    TXParagraphStyle::setLength((uint64_t)v11, v13);
    TXParagraphStyle::dirty(v11, 1);
    TXParagraphStyle::clearDirectionalRuns((uint64_t)v11);
    v16 = *(_DWORD *)(v8 + 960) == 0;
    v33[0] = v12;
    v33[1] = v13;
    v34 = v16;
    TXParagraphStyle::pushDirectionalRun((uint64_t *)v11, (uint64_t)v33);
    if (v4 + 8 == v5)
    {
      v20 = (TXParagraphStyle **)*((_QWORD *)this + 2379);
      v21 = *((_QWORD *)this + 2380);
      if ((unint64_t)v20 >= v21)
      {
        v23 = ((char *)v20 - *v3) >> 3;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v24 = v21 - (_QWORD)*v3;
        v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1))
          v25 = v23 + 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 19040, v26);
        else
          v27 = 0;
        v28 = (TXParagraphStyle **)&v27[8 * v23];
        v29 = &v27[8 * v26];
        *v28 = v11;
        v22 = v28 + 1;
        v30 = (char *)*((_QWORD *)this + 2379);
        v31 = (char *)*((_QWORD *)this + 2378);
        if (v30 != v31)
        {
          do
          {
            v32 = (TXParagraphStyle *)*((_QWORD *)v30 - 1);
            v30 -= 8;
            *--v28 = v32;
          }
          while (v30 != v31);
          v30 = *v3;
        }
        *((_QWORD *)this + 2378) = v28;
        *((_QWORD *)this + 2379) = v22;
        *((_QWORD *)this + 2380) = v29;
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v20 = v11;
        v22 = v20 + 1;
      }
      *((_QWORD *)this + 2379) = v22;
    }
    else
    {
      std::vector<TXParagraphStyle *>::insert((uint64_t)v3, v4 + 8, (char *)&v35);
    }
    TXParagraphStyle::setLength(v8, v7 - v9 + 1);
    return TXParagraphStyle::dirty((TXParagraphStyle *)v8, 1);
  }
  return result;
}

void sub_1B28EB890(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4017F5857CLL);
  _Unwind_Resume(a1);
}

char *std::vector<TXParagraphStyle *>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1B28EBAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::updateStyleRunsAfterTextInsert(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  unsigned int v7;

  v3 = this + 19368;
  for (i = *(_QWORD *)(this + 19376); i != v3; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD *)(i + 16);
    v7 = *(_DWORD *)(v5 + 24);
    v6 = *(_DWORD *)(v5 + 28);
    if (v7 <= a2 && v6 + v7 >= a2)
    {
      *(_DWORD *)(v5 + 28) = v6 + a3;
      while (1)
      {
        i = *(_QWORD *)(i + 8);
        if (i == v3)
          break;
        *(_DWORD *)(*(_QWORD *)(i + 16) + 24) += a3;
      }
      return this;
    }
  }
  return this;
}

void TXTextLayout::updateStyleRunsAfterTextDelete(TXTextLayout *this, int a2, int a3)
{
  char *v3;
  TXTextLayout *v4;
  int v7;
  double v8;
  double v9;
  TXTextLayout *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  double v15;
  double v16;
  unsigned int v17;
  unsigned int v18;
  int v20;
  char *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v3 = (char *)this + 19368;
  v4 = (TXTextLayout *)*((_QWORD *)this + 2422);
  if (v4 == (TXTextLayout *)((char *)this + 19368))
    return;
  v7 = a3 + a2 - 1;
  v8 = (double)a2;
  v9 = (double)(a3 + a2);
  v10 = (TXTextLayout *)*((_QWORD *)this + 2422);
  do
  {
    v11 = *((_QWORD *)v10 + 2);
    v13 = *(_DWORD *)(v11 + 24);
    v12 = *(_DWORD *)(v11 + 28);
    if ((int)v13 > v7 || (int)(v12 + v13 - 1) < a2)
      goto LABEL_34;
    v15 = (double)v13;
    v16 = (double)(v12 + v13);
    if (v8 > (double)v13)
      v15 = v8;
    if (v9 < v16)
      v16 = v9;
    if (v15 <= v16)
      v17 = v15;
    else
      v17 = 0;
    if (v15 <= v16)
      v18 = v16 - v15;
    else
      v18 = 0;
    if (v17 != v13 || v12 != v18)
    {
      v20 = v12 - v18;
LABEL_33:
      *(_DWORD *)(v11 + 28) = v20;
LABEL_34:
      v21 = (char *)*((_QWORD *)v10 + 1);
      goto LABEL_35;
    }
    if (v10 == v4)
    {
      v20 = 0;
      goto LABEL_33;
    }
    v21 = (char *)*((_QWORD *)v10 + 1);
    v23 = *(_QWORD *)(v11 + 8);
    v22 = *(std::__shared_weak_count **)(v11 + 16);
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    v34 = v23;
    v35 = v22;
    (*(void (**)(TXTextLayout *, uint64_t *))(*(_QWORD *)this + 272))(this, &v34);
    v26 = v35;
    if (v35)
    {
      v27 = (unint64_t *)&v35->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v29 = *(_QWORD *)v10;
    *(_QWORD *)(v29 + 8) = *((_QWORD *)v10 + 1);
    **((_QWORD **)v10 + 1) = v29;
    --*((_QWORD *)this + 2423);
    operator delete(v10);
LABEL_35:
    v10 = (TXTextLayout *)v21;
  }
  while (v21 != v3);
  v30 = *((_QWORD *)this + 2422);
  if ((char *)v30 != v3)
  {
    v31 = 0;
    do
    {
      v32 = *(_QWORD *)(v30 + 16);
      v33 = *(_DWORD *)(v32 + 28);
      *(_DWORD *)(v32 + 24) = v31;
      v31 += v33;
      v30 = *(_QWORD *)(v30 + 8);
    }
    while ((char *)v30 != v3);
  }
}

void sub_1B28EBD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TXTextLayout::setKerningAtCharOffset(TXParagraphStyle ***this, double a2, int64_t a3)
{
  OZScene **v6;
  uint64_t **v7;
  TXParagraphStyle **i;
  int64_t v9;
  TXParagraphStyle **v10;
  TXParagraphStyle **v11;
  TXParagraphStyle *v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;

  v16 = a3;
  v6 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v15, v6);
  if (a3 < 0)
    goto LABEL_19;
  v7 = (uint64_t **)(this + 2403);
  if (a2 <= -0.0000001 || a2 >= 0.0000001)
  {
    v17 = &v16;
    *((double *)std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(v7, (uint64_t *)&v16, (uint64_t)&std::piecewise_construct, (uint64_t **)&v17)+ 5) = a2;
LABEL_12:
    v10 = this[2378];
    v11 = this[2379];
    if (v10 == v11)
    {
LABEL_16:
      v12 = *(v11 - 1);
      if (!v12)
      {
LABEL_18:
        ((void (*)(TXParagraphStyle ***, __n128))(*this)[68])(this, v14);
        goto LABEL_19;
      }
    }
    else
    {
      while (1)
      {
        v12 = *v10;
        v13 = *((_QWORD *)*v10 + 107);
        if (v13 <= v16 && *((_QWORD *)v12 + 108) + v13 > v16)
          break;
        if (++v10 == v11)
          goto LABEL_16;
      }
    }
    v14.n128_f64[0] = TXParagraphStyle::dirty(v12, 1);
    goto LABEL_18;
  }
  for (i = this[2404]; i; i = (TXParagraphStyle **)*i)
  {
    v9 = (int64_t)i[4];
    if (v9 <= a3)
    {
      if (v9 >= a3)
      {
        std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__erase_unique<long>((uint64_t)v7, (uint64_t *)&v16);
        goto LABEL_12;
      }
      ++i;
    }
  }
LABEL_19:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v15);
}

void sub_1B28EBEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getOutlineOrder(TXTextLayout *this, TXTextObject *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  OZChannel *v7;
  uint64_t ValueAsInt;
  unint64_t *v9;
  unint64_t v10;
  CMTime v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = *((_QWORD *)a2 + 33);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    v13 = v4;
    v14 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v13 = 0;
    v14 = 0;
  }
  v7 = (OZChannel *)((char *)this + 35456);
  if (OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 35456), 0, 1))
  {
    ValueAsInt = OZChannel::getValueAsInt(v7, MEMORY[0x1E0CA2E68], 0.0);
    if (!v3)
      return ValueAsInt;
  }
  else
  {
    v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v4 + 27720), &v12, 0.0);
    v3 = v14;
    if (!v14)
      return ValueAsInt;
  }
  v9 = (unint64_t *)&v3->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return ValueAsInt;
}

void sub_1B28EBFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getGlowOrder(TXTextLayout *this, TXTextObject *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  OZChannel *v7;
  uint64_t ValueAsInt;
  unint64_t *v9;
  unint64_t v10;
  CMTime v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = *((_QWORD *)a2 + 33);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    v13 = v4;
    v14 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v13 = 0;
    v14 = 0;
  }
  v7 = (OZChannel *)((char *)this + 41840);
  if (OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 41840), 0, 1))
  {
    ValueAsInt = OZChannel::getValueAsInt(v7, MEMORY[0x1E0CA2E68], 0.0);
    if (!v3)
      return ValueAsInt;
  }
  else
  {
    v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v4 + 37312), &v12, 0.0);
    v3 = v14;
    if (!v14)
      return ValueAsInt;
  }
  v9 = (unint64_t *)&v3->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return ValueAsInt;
}

void sub_1B28EC0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double TXTextLayout::cacheMargins(TXTextLayout *this, int a2)
{
  double *v3;
  const CMTime *v4;
  double result;
  const CMTime *v6;
  const CMTime *v7;

  v3 = (double *)((char *)this + 52264);
  switch(a2)
  {
    case 4:
      v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
      *((double *)this + 6541) = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0);
      v3[9] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24424), v6, 0.0);
      v3[10] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24576), v6, 0.0);
      result = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24728), v6, 0.0);
      v3[11] = result;
      break;
    case 3:
      v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
      *((double *)this + 6537) = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0);
      v3[5] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24424), v7, 0.0);
      v3[6] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24576), v7, 0.0);
      result = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24728), v7, 0.0);
      v3[7] = result;
      break;
    case 1:
      v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
      *v3 = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0);
      v3[1] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24424), v4, 0.0);
      v3[2] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24576), v4, 0.0);
      result = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24728), v4, 0.0);
      v3[3] = result;
      break;
  }
  return result;
}

CGColorSpace **TXTextLayout::initializeScrollMargins(TXTextLayout *this)
{
  OZTransformNode *v2;
  uint64_t v3;
  OZPreferenceManager *v4;
  int v5;
  int v6;
  OZPreferenceManager *v7;
  OZPreferenceManager *SafeZonesTitlePercentage;
  float v9;
  float v10;
  int v11;
  OZPreferenceManager *v12;
  float v13;
  float v14;
  uint64_t v15;
  double v16;
  OZScene *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v27;
  double v28;
  double v29;
  CMTime v30;
  double v31;
  double v32;
  void (**v33)(OZSceneSettings *__hidden);
  int v34;
  int v35;
  CGColorSpace *v36;
  PCString v37;

  v2 = (OZTransformNode *)((char *)this + 200);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  v4 = OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v33, (const OZSceneSettings *)(v3 + 336));
  v5 = v34;
  v6 = v35;
  v7 = (OZPreferenceManager *)OZPreferenceManager::Instance(v4);
  SafeZonesTitlePercentage = (OZPreferenceManager *)OZPreferenceManager::getSafeZonesTitlePercentage(v7);
  v10 = v9;
  v11 = v35;
  v12 = (OZPreferenceManager *)OZPreferenceManager::Instance(SafeZonesTitlePercentage);
  OZPreferenceManager::getSafeZonesTitlePercentage(v12);
  v14 = v13;
  v15 = (*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)v2 + 272))(v2);
  v16 = (*(double (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15);
  v31 = 0.0;
  v32 = 0.0;
  memset(&v30, 0, sizeof(v30));
  v17 = (OZScene *)(*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)v2 + 272))(v2);
  OZScene::getCurrentTime(v17, (__n128 *)&v30);
  OZTransformNode::getTranslation(v2, &v32, &v31, &v30);
  v32 = v16 * v32;
  v28 = 0.0;
  v29 = 0.0;
  v27 = 0;
  OZTransformNode::getPivot(v2, &v29, &v28, (double *)&v27, &v30);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0))
  {
    v18 = (double)v5;
    v19 = (float)(v14 * (float)v11);
  }
  else
  {
    v19 = (double)v6;
    v18 = (float)(v10 * (float)v5);
  }
  v20 = v16 * v18;
  v21 = v31;
  v22 = v28;
  v23 = v20 * -0.5 - v32 + v29;
  v24 = v20 * 0.5 - v32 + v29;
  v25 = v19 * -0.5 - v31 + v28;
  OZChannel::setMax((OZChannel *)((char *)this + 24272), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24272), -1.79769313e308);
  OZChannel::setMax((OZChannel *)((char *)this + 24424), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24424), -1.79769313e308);
  OZChannel::setMax((OZChannel *)((char *)this + 24728), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24728), -1.79769313e308);
  OZChannel::setMax((OZChannel *)((char *)this + 24576), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24576), -1.79769313e308);
  OZChannel::setValue((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], v23, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], v24, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 24728), MEMORY[0x1E0CA2E68], v25, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], v19 * 0.5 - v21 + v22, 0);
  *((_BYTE *)this + 52257) = 1;
  v33 = &off_1E658F368;
  PCString::~PCString(&v37);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v36);
}

void sub_1B28EC568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CGColorSpace *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,PCString a40)
{
  PCString::~PCString(&a40);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a33);
  _Unwind_Resume(a1);
}

BOOL TXTextLayout::isVerticalLayout(TXTextLayout *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

CGColorSpace **TXTextLayout::initializeTickerMargins(TXTextLayout *this)
{
  OZTransformNode *v2;
  uint64_t v3;
  OZPreferenceManager *v4;
  int v5;
  int v6;
  OZPreferenceManager *v7;
  OZPreferenceManager *SafeZonesTitlePercentage;
  float v9;
  float v10;
  int v11;
  OZPreferenceManager *v12;
  float v13;
  float v14;
  uint64_t v15;
  double v16;
  OZScene *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v29;
  double v30;
  double v31;
  CMTime v32;
  double v33;
  double v34;
  void (**v35)(OZSceneSettings *__hidden);
  int v36;
  int v37;
  CGColorSpace *v38;
  PCString v39;

  v2 = (OZTransformNode *)((char *)this + 200);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  v4 = OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v35, (const OZSceneSettings *)(v3 + 336));
  v6 = v36;
  v5 = v37;
  v7 = (OZPreferenceManager *)OZPreferenceManager::Instance(v4);
  SafeZonesTitlePercentage = (OZPreferenceManager *)OZPreferenceManager::getSafeZonesTitlePercentage(v7);
  v10 = v9;
  v11 = v36;
  v12 = (OZPreferenceManager *)OZPreferenceManager::Instance(SafeZonesTitlePercentage);
  OZPreferenceManager::getSafeZonesTitlePercentage(v12);
  v14 = v13;
  v15 = (*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)v2 + 272))(v2);
  v16 = (*(double (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15);
  v33 = 0.0;
  v34 = 0.0;
  memset(&v32, 0, sizeof(v32));
  v17 = (OZScene *)(*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)v2 + 272))(v2);
  OZScene::getCurrentTime(v17, (__n128 *)&v32);
  OZTransformNode::getTranslation(v2, &v34, &v33, &v32);
  v34 = v16 * v34;
  v30 = 0.0;
  v31 = 0.0;
  v29 = 0;
  OZTransformNode::getPivot(v2, &v31, &v30, (double *)&v29, &v32);
  v18 = *((_QWORD *)this + 2378);
  v19 = 0.0;
  while (v18 != *((_QWORD *)this + 2379))
  {
    v20 = *(unsigned int *)(*(_QWORD *)v18 + 876);
    if ((_DWORD)v20)
    {
      v21 = (double *)(*(_QWORD *)(*(_QWORD *)v18 + 888) + 8);
      do
      {
        if (*(v21 - 1) - *v21 > v19)
          v19 = *(v21 - 1) - *v21;
        v21 += 8;
        --v20;
      }
      while (v20);
    }
    v18 += 8;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0))
  {
    v22 = v16 * (float)(v14 * (float)v11);
    v23 = (double)v5 * 0.5 - v33 + v30;
    v24 = (double)v5 * -0.5 - v33 + v30;
    v25 = v22 * 0.5 - v34 + v31;
    v26 = v25 - v19;
  }
  else
  {
    v27 = v16 * (double)v6;
    v26 = v27 * -0.5 - v34 + v31;
    v25 = v27 * 0.5 - v34 + v31;
    v24 = (float)(v10 * (float)v5) * -0.5 - v33 + v30;
    v23 = v19 + v24;
  }
  OZChannel::setMax((OZChannel *)((char *)this + 24272), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24272), -1.79769313e308);
  OZChannel::setMax((OZChannel *)((char *)this + 24424), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24424), -1.79769313e308);
  OZChannel::setMax((OZChannel *)((char *)this + 24728), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24728), -1.79769313e308);
  OZChannel::setMax((OZChannel *)((char *)this + 24576), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24576), -1.79769313e308);
  OZChannel::setValue((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], v26, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], v25, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 24728), MEMORY[0x1E0CA2E68], v24, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], v23, 0);
  *((_BYTE *)this + 52258) = 1;
  v35 = &off_1E658F368;
  PCString::~PCString(&v39);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v38);
}

void sub_1B28EC92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CGColorSpace *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,PCString a40)
{
  PCString::~PCString(&a40);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a33);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::setCachedMargins(uint64_t this, int a2)
{
  uint64_t v2;
  double *v3;
  const CMTime *v4;
  double *v5;
  const CMTime *v6;
  const CMTime *v7;

  v2 = this;
  v3 = (double *)(this + 52264);
  switch(a2)
  {
    case 4:
      v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::setValue((OZChannel *)(this + 24272), MEMORY[0x1E0CA2E68], *(double *)(this + 52328), 0);
      OZChannel::setValue((OZChannel *)(v2 + 24424), v6, v3[9], 0);
      OZChannel::setValue((OZChannel *)(v2 + 24728), v6, v3[11], 0);
      v5 = v3 + 10;
      break;
    case 3:
      v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::setValue((OZChannel *)(this + 24272), MEMORY[0x1E0CA2E68], *(double *)(this + 52296), 0);
      OZChannel::setValue((OZChannel *)(v2 + 24424), v7, v3[5], 0);
      OZChannel::setValue((OZChannel *)(v2 + 24728), v7, v3[7], 0);
      v5 = v3 + 6;
      break;
    case 1:
      v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::setValue((OZChannel *)(this + 24272), MEMORY[0x1E0CA2E68], *v3, 0);
      OZChannel::setValue((OZChannel *)(v2 + 24424), v4, v3[1], 0);
      OZChannel::setValue((OZChannel *)(v2 + 24728), v4, v3[3], 0);
      v5 = v3 + 2;
      break;
    default:
      return this;
  }
  return OZChannel::setValue((OZChannel *)(v2 + 24576), MEMORY[0x1E0CA2E68], *v5, 0);
}

void TXTextLayout::setLayoutMethod(TXTextLayout *this, int a2)
{
  char *v4;
  OZChannel *v5;
  CMTime *v6;
  int ValueAsInt;
  char *StringPtr;
  double v14;
  uint64_t v15;
  __n128 v16;
  OZScene *v17;
  char *v18;
  float Size;
  double v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  OZRenderState v25;
  __n128 v26;
  __int128 v27;
  CMTime v28;

  v4 = (char *)this + 52256;
  v5 = (OZChannel *)((char *)this + 20464);
  v6 = (CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::setValue((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], (double)a2, 0);
  ValueAsInt = OZChannel::getValueAsInt(v5, v6, 0.0);
  __asm { FMOV            V0.2D, #-1.0 }
  v24 = _Q0;
  if (ValueAsInt == 1)
  {
    if (!*v4)
    {
      StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
      if (PCString::size((PCString *)StringPtr))
      {
        v26 = 0uLL;
        v27 = v24;
        OZRenderState::OZRenderState(&v25);
        TXTextLayout::getTypographicBounds((uint64_t)this, (uint64_t)&v26, (CMTime *)&v25, 1, 0);
        v14 = *(double *)&v27 + 2.0;
        *(double *)&v27 = *(double *)&v27 + 2.0;
        v15 = *((_QWORD *)this + 2378);
        if (*((_QWORD *)this + 2379) == v15)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        if (*(_DWORD *)(*(_QWORD *)v15 + 960) == 1)
        {
          v16.n128_u64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)v26, (float64x2_t)*(unint64_t *)&v14);
          v16.n128_u64[1] = *(_QWORD *)&vaddq_f64(*(float64x2_t *)&v26, (float64x2_t)0).f64[1];
          v26 = v16;
        }
        (*(void (**)(TXTextLayout *, __n128 *))(*(_QWORD *)this + 344))(this, &v26);
      }
      else
      {
        TXTextLayout::getStyleAtCharOffset((uint64_t)this, 0, &v25);
        v28 = *v6;
        Size = TXTextStyle::getSize((OZChannel *)v25.var0.var0, &v28, 0.0);
        OZChannel::setValue((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0, 0);
        OZChannel::setValue((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 300.0, 0);
        v20 = Size;
        OZChannel::setValue((OZChannel *)((char *)this + 24728), MEMORY[0x1E0CA2E68], v20 + -300.0, 0);
        OZChannel::setValue((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], v20, 0);
        v21 = *(std::__shared_weak_count **)&v25.var0.var1;
        if (*(_QWORD *)&v25.var0.var1)
        {
          v22 = (unint64_t *)(*(_QWORD *)&v25.var0.var1 + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      *v4 = 1;
      goto LABEL_28;
    }
LABEL_14:
    TXTextLayout::setCachedMargins((uint64_t)this, a2);
LABEL_29:
    TXTextLayout::interlockMargins(this, 0);
    goto LABEL_30;
  }
  if (OZChannel::getValueAsInt(v5, MEMORY[0x1E0CA2E68], 0.0) == 3)
  {
    if (v4[1])
      goto LABEL_14;
    TXTextLayout::initializeScrollMargins(this);
LABEL_28:
    TXTextLayout::cacheMargins(this, a2);
    goto LABEL_29;
  }
  if (OZChannel::getValueAsInt(v5, MEMORY[0x1E0CA2E68], 0.0) == 4)
  {
    if (v4[2])
      goto LABEL_14;
    TXTextLayout::initializeTickerMargins(this);
    goto LABEL_28;
  }
  if (OZChannel::getValueAsInt(v5, MEMORY[0x1E0CA2E68], 0.0))
  {
    OZRenderState::OZRenderState(&v25);
    v17 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
    OZScene::getCurrentTime(v17, &v26);
    *(__n128 *)&v25.var0.var0 = v26;
    v25.var0.var3 = v27;
    v26 = 0uLL;
    v27 = v24;
    TXTextLayout::getTypographicBounds((uint64_t)this, (uint64_t)&v26, (CMTime *)&v25, 1, 0);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 54280), MEMORY[0x1E0CA2E68], 0.0))
      v18 = (char *)this + 53528;
    else
      v18 = (char *)this + 52640;
    if (((*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)v18 + 552))(v18, 0) & 1) == 0)
    {
      TXTextLayout::initializePaths((uint64_t)this, (uint64_t)&v26);
      *((_BYTE *)this + 63760) = 1;
    }
    TXTextLayout::doLayout(this, &v25, 0);
  }
  else
  {
    TXTextLayout::updateLineBreaksByHardLine(this);
  }
LABEL_30:
  *((_OWORD *)this + 3689) = v24;
  *((_OWORD *)this + 3693) = xmmword_1B304F270;
  *((_OWORD *)this + 3692) = xmmword_1B304F270;
  *((_OWORD *)this + 3691) = xmmword_1B304F270;
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
}

void sub_1B28ECEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::getTypographicBounds(uint64_t a1, uint64_t a2, CMTime *a3, char a4, int a5)
{
  char *StringPtr;
  const CMTime *v15;
  int ValueAsInt;
  int v17;
  double v18;
  _QWORD *v19;
  int v20;
  const CMTime *v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  unint64_t v27;
  double v28;
  double *v29;
  double v30;
  double v31;
  uint64_t v32;
  TXTextLayout *v33;
  TXTextLayout *v34;
  TXTextStyle *v35;
  float Size;
  uint64_t Font;
  double v38;
  float v39;
  float v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  float64_t v44;
  unint64_t *v45;
  unint64_t v46;
  double v47;
  double v48;
  int v50;
  double v51;
  int v52;
  double v53;
  double v54;
  double v55;
  double v56;
  BOOL v57;
  double v58;
  double v59;
  __int128 v60;
  double v61;
  CMTime *v63;
  char v64;
  uint64_t v65;
  double v66;
  double v67;
  _QWORD *v68;
  _QWORD *v69;
  double v70;
  __int128 v71;
  float64x2_t v72;
  __int128 v73;
  PCString v74;
  CMTime v75;
  TXTextStyle *v76;
  std::__shared_weak_count *v77;
  CMTime v78;
  CMTime v79;
  float64x2_t v80;
  __int128 v81;

  StringPtr = TXChannelString::getStringPtr((TXChannelString *)(a1 + 19048));
  if (PCString::size((PCString *)StringPtr))
  {
    v64 = a4;
    v65 = a2;
    v80 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v71 = _Q0;
    v81 = _Q0;
    v79 = *a3;
    v63 = a3;
    v15 = (const CMTime *)MEMORY[0x1E0CA2E68];
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E0CA2E68], 0.0);
    v17 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), v15, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 22136), &v79, 0.0);
    v67 = v18;
    v19 = *(_QWORD **)(a1 + 19024);
    v68 = *(_QWORD **)(a1 + 19032);
    if (v19 != v68)
    {
      v20 = 0;
      v66 = *(double *)(a1 + 64400);
      v21 = (const CMTime *)MEMORY[0x1E0CA2E68];
      v22 = 0.0;
      v70 = 0.0;
      do
      {
        v69 = v19;
        v23 = *v19;
        v78 = v79;
        OZChannel::getValueAsDouble((OZChannel *)(v23 + 680), &v78, 0.0);
        v25 = v24;
        (*(void (**)(uint64_t, CMTime *))(*(_QWORD *)a1 + 712))(a1, &v79);
        if (*(_DWORD *)(v23 + 876))
        {
          v27 = 0;
          v28 = v66 + (v67 + v25) * v26;
          do
          {
            v29 = (double *)(*(_QWORD *)(v23 + 888) + (v27 << 6));
            v30 = *v29;
            v31 = v29[1];
            if (a5 && v30 == 0.0 && v31 == 0.0)
            {
              v32 = *(_QWORD *)(v23 + 856);
              _CF = v32 != 0;
              v33 = (TXTextLayout *)(v32 - 1);
              if (_CF)
                v34 = v33;
              else
                v34 = 0;
              TXHelperFunctions::GetTextObjectContainingCharIndex((TXHelperFunctions *)a1, v34, 1, 0, &v72);
              if (*(_QWORD *)&v72.f64[0])
              {
                TXTextLayout::getStyleAtCharOffset(a1, v34, &v76);
                v35 = v76;
                v75 = v79;
                Size = TXTextStyle::getSize((OZChannel *)v76, &v75, 0.0);
                TXTextStyle::getFontName(v35, &v74);
                Font = TXTextLayout::getFont((const PCString *)a1, &v74);
                PCString::~PCString(&v74);
                if (Font)
                {
                  v38 = Size;
                  v39 = (*(float (**)(uint64_t, double))(*(_QWORD *)Font + 40))(Font, v38);
                  v40 = (*(float (**)(uint64_t, double))(*(_QWORD *)Font + 48))(Font, v38);
                  v30 = v39;
                  v31 = (float)(0.0
                              - (float)(v40
                                      + (*(float (**)(uint64_t, double))(*(_QWORD *)Font + 56))(Font, v38)));
                }
                v41 = v77;
                if (v77)
                {
                  p_shared_owners = (unint64_t *)&v77->__shared_owners_;
                  do
                    v43 = __ldaxr(p_shared_owners);
                  while (__stlxr(v43 - 1, p_shared_owners));
                  if (!v43)
                  {
                    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                    std::__shared_weak_count::__release_weak(v41);
                  }
                }
              }
              v44 = v72.f64[1];
              if (*(_QWORD *)&v72.f64[1])
              {
                v45 = (unint64_t *)(*(_QWORD *)&v72.f64[1] + 8);
                do
                  v46 = __ldaxr(v45);
                while (__stlxr(v46 - 1, v45));
                if (!v46)
                {
                  (*(void (**)(float64_t))(**(_QWORD **)&v44 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v44));
                  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v44);
                }
              }
            }
            v47 = fabs(*(double *)(v23 + 920));
            v48 = vabdd_f64(v30, v31);
            if (v20)
              _ZF = ValueAsInt == 4;
            else
              _ZF = 1;
            v50 = _ZF;
            if (v17)
              v51 = v22;
            else
              v51 = v31;
            if (!v50)
              v31 = v51;
            v72 = 0uLL;
            v73 = v71;
            v52 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), v21, 0.0);
            if (v17)
            {
              v72.f64[0] = v31;
              v53 = 0.0 - v70 - v47;
              if (v52 != 4)
                v53 = 0.0 - v47;
              v54 = v48;
            }
            else
            {
              if (v50)
                v55 = v30;
              else
                v55 = v22;
              v53 = v55 - v48;
              if (v52 == 4)
                v72.f64[0] = v70;
              else
                v72.f64[0] = 0.0;
              v54 = v47;
              v47 = v48;
            }
            v56 = v28 - v31;
            if (v20)
            {
              v56 = v28 + v48;
              v57 = 1;
            }
            else
            {
              v57 = v17 == 0;
            }
            v72.f64[1] = v53;
            *(double *)&v73 = v54;
            *((double *)&v73 + 1) = v47;
            v58 = v22 - v56;
            if (v57)
              v59 = 0.0;
            else
              v59 = v28 + v48;
            PCRect<double>::operator|=(&v80, &v72);
            v22 = v58 - v59;
            ++v27;
            ++v20;
          }
          while (v27 < *(unsigned int *)(v23 + 876));
        }
        v70 = v70 + *(double *)(v23 + 920);
        v19 = v69 + 1;
      }
      while (v69 + 1 != v68);
    }
    v60 = v81;
    *(float64x2_t *)v65 = v80;
    *(_OWORD *)(v65 + 16) = v60;
    if ((v64 & 1) != 0
      && (OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 1
       && *(_BYTE *)(a1 + 52256)
       || OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 3
       && *(_BYTE *)(a1 + 52257)
       || ValueAsInt == 4 && *(_BYTE *)(a1 + 52258)))
    {
      v72.f64[0] = 0.0;
      *(double *)&v76 = 0.0;
      (*(void (**)(uint64_t, float64x2_t *, TXTextStyle **, CMTime *))(*(_QWORD *)a1 + 1016))(a1, &v72, &v76, v63);
      v61 = *(double *)&v76 + *(double *)(v65 + 8);
      *(double *)v65 = v72.f64[0] + *(double *)v65;
      *(double *)(v65 + 8) = v61;
    }
  }
  return 0;
}

void sub_1B28ED3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,PCString a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  PCString::~PCString(&a26);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::interlockMargins(TXTextLayout *this, char a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  const CMTime *v32;
  double v33;
  double v34;
  OZChannel *v35;
  OZChannel *v36;
  double v37;
  double v38;

  if ((a2 & 1) != 0)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 24272), v4);
  }
  else
  {
    v5 = *(double *)(*((_QWORD *)this + 3050) + 8);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
    if (v5 < v6)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 24272), v7);
    }
    v8 = *(double *)(*((_QWORD *)this + 3050) + 16);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0);
    if (v8 <= v9)
      goto LABEL_8;
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 24272), v10);
  if ((a2 & 1) != 0)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 24424), v11);
    goto LABEL_11;
  }
LABEL_8:
  v12 = *(double *)(*((_QWORD *)this + 3069) + 8);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
  if (v12 < v13)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 24424), v14);
  }
  v15 = *(double *)(*((_QWORD *)this + 3069) + 16);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0);
  if (v15 <= v16)
  {
LABEL_13:
    v19 = *(double *)(*((_QWORD *)this + 3107) + 8);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], 0.0);
    if (v19 < v20)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 24728), v21);
    }
    v22 = *(double *)(*((_QWORD *)this + 3107) + 16);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E0CA2E68], 0.0);
    if (v22 <= v23)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_11:
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 24424), v17);
  if ((a2 & 1) == 0)
    goto LABEL_13;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 24728), v18);
LABEL_16:
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E0CA2E68], 0.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 24728), v24);
  if ((a2 & 1) != 0)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 24576), v25);
LABEL_21:
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::setSliderMin((OZChannel *)((char *)this + 24576), v31);
    goto LABEL_22;
  }
LABEL_18:
  v26 = *(double *)(*((_QWORD *)this + 3088) + 8);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], 0.0);
  if (v26 < v27)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 24576), v28);
  }
  v29 = *(double *)(*((_QWORD *)this + 3088) + 16);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E0CA2E68], 0.0);
  if (v29 > v30)
    goto LABEL_21;
LABEL_22:
  v32 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 24272), v33);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), v32, 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 24424), v34);
  v35 = (OZChannel *)((char *)this + 24728);
  v36 = (OZChannel *)((char *)this + 24576);
  OZChannel::getValueAsDouble(v36, v32, 0.0);
  OZChannel::setMax(v35, v37);
  OZChannel::getValueAsDouble(v35, v32, 0.0);
  return OZChannel::setMin(v36, v38);
}

void TXTextLayout::initializePaths(uint64_t a1, uint64_t a2)
{
  OZChannel *v4;
  int ValueAsInt;
  double *v6;
  double v8;
  TXParagraphStyle **v9;
  unsigned int Alignment;
  OZCurrentThread *v11;
  OZCurrentThread *Instance;
  double v13;
  const CMTime *v14;
  double v15;
  const CMTime *v16;
  const CMTime *v17;
  double v18;
  double v19;
  const CMTime *v20;
  OZChannel *v21;
  double v22;
  double v23;
  uint64_t v29;
  double v30;
  const CMTime *v31;
  void *Keyframe;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  OZCurrentThread *v40;
  OZCurrentThread *v41;
  uint64_t v42;
  CMTime v43;
  _BYTE v44[32];

  v4 = (OZChannel *)(a1 + 20720);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), MEMORY[0x1E0CA2E68], 0.0);
  v6 = (double *)(a2 + 16);
  if (ValueAsInt)
    v6 = (double *)(a2 + 24);
  if (*v6 >= 0.0000001 || *v6 <= -0.0000001)
    v8 = *v6;
  else
    v8 = 300.0;
  v9 = *(TXParagraphStyle ***)(a1 + 19024);
  if (*(TXParagraphStyle ***)(a1 + 19032) == v9)
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  Alignment = TXParagraphStyle::getAlignment(*v9);
  v11 = (OZCurrentThread *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 52640) + 552))(a1 + 52640, 0);
  if ((v11 & 1) == 0)
  {
    Instance = OZCurrentThread::getInstance(v11);
    if (PCThread::isSelf(*((_opaque_pthread_t ***)Instance + 1)))
    {
      OZChannelPosition3D::willBeModified((os_unfair_lock_s *)(a1 + 52504), 1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 52640) + 480))(a1 + 52640, 1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 52792) + 480))(a1 + 52792, 1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 53240) + 480))(a1 + 53240, 1);
    }
    OZChannel::setDiscrete((OZChannel *)(a1 + 52640), 0, 0);
    OZChannel::setDiscrete((OZChannel *)(a1 + 52792), 0, 0);
    OZChannel::setDiscrete((OZChannel *)(a1 + 53240), 0, 0);
    OZChannel::setParametric((OZChannel *)(a1 + 52640), 1);
    OZChannel::setParametric((OZChannel *)(a1 + 52792), 1);
    OZChannel::setParametric((OZChannel *)(a1 + 53240), 1);
    v13 = 0.0;
    if (OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0))
    {
      if (Alignment > 6)
        goto LABEL_23;
      if (((1 << Alignment) & 0x49) != 0)
      {
        v14 = (const CMTime *)MEMORY[0x1E0CA2E68];
        OZChannel::setKeyframe((OZChannel *)(a1 + 52640), MEMORY[0x1E0CA2E68], 0.0, 0);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52792), v14, 0.0, 0);
        OZChannel::setKeyframe((OZChannel *)(a1 + 53240), v14, 0.0, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52640), (const CMTime *)v44, 0.0, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52792), (const CMTime *)v44, -v8, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 53240), (const CMTime *)v44, 0.0, 0);
        CMTimeMake((CMTime *)v44, 1, 1);
        v15 = -0.5;
LABEL_24:
        v18 = v8 * v15;
        v19 = 0.0;
LABEL_41:
        OZChannelPosition3D::insertBezierPoint((OZChannelPosition3D *)(a1 + 52504), (const CMTime *)v44, v19, v18, 0.0);
        goto LABEL_42;
      }
      if (((1 << Alignment) & 0x12) == 0)
      {
LABEL_23:
        v17 = (const CMTime *)MEMORY[0x1E0CA2E68];
        OZChannel::setKeyframe((OZChannel *)(a1 + 52792), MEMORY[0x1E0CA2E68], v8, 0);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52640), v17, 0.0, 0);
        OZChannel::setKeyframe((OZChannel *)(a1 + 53240), v17, 0.0, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52640), (const CMTime *)v44, 0.0, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52792), (const CMTime *)v44, 0.0, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 53240), (const CMTime *)v44, 0.0, 0);
        CMTimeMake((CMTime *)v44, 1, 1);
        v15 = 0.5;
        goto LABEL_24;
      }
      v16 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::setKeyframe((OZChannel *)(a1 + 52640), MEMORY[0x1E0CA2E68], 0.0, 0);
      OZChannel::setKeyframe((OZChannel *)(a1 + 52792), v16, v8 * 0.5, 0);
      OZChannel::setKeyframe((OZChannel *)(a1 + 53240), v16, 0.0, 0);
      OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
      OZChannel::setKeyframe((OZChannel *)(a1 + 52640), (const CMTime *)v44, 0.0, 0);
      OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
      OZChannel::setKeyframe((OZChannel *)(a1 + 52792), (const CMTime *)v44, v8 * -0.5, 0);
      OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
      OZChannel::setKeyframe((OZChannel *)(a1 + 53240), (const CMTime *)v44, 0.0, 0);
      goto LABEL_37;
    }
    if (Alignment <= 6)
    {
      if (((1 << Alignment) & 0x49) != 0)
      {
LABEL_26:
        v20 = (const CMTime *)MEMORY[0x1E0CA2E68];
        OZChannel::setKeyframe((OZChannel *)(a1 + 52640), MEMORY[0x1E0CA2E68], v13, 0);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52792), v20, 0.0, 0);
        OZChannel::setKeyframe((OZChannel *)(a1 + 53240), v20, 0.0, 0);
        if (Alignment > 6)
          goto LABEL_31;
        if (((1 << Alignment) & 0x49) != 0)
        {
          OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
          v21 = (OZChannel *)(a1 + 52640);
          v22 = v8;
          goto LABEL_33;
        }
        if (((1 << Alignment) & 0x12) != 0)
        {
          OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
          v22 = v8 * 0.5;
        }
        else
        {
LABEL_31:
          OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
          v22 = 0.0;
        }
        v21 = (OZChannel *)(a1 + 52640);
LABEL_33:
        OZChannel::setKeyframe(v21, (const CMTime *)v44, v22, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52792), (const CMTime *)v44, 0.0, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 53240), (const CMTime *)v44, 0.0, 0);
        if (Alignment <= 6)
        {
          if (((1 << Alignment) & 0x49) != 0)
          {
            CMTimeMake((CMTime *)v44, 1, 1);
            v23 = 0.5;
LABEL_39:
            v19 = v8 * v23;
            goto LABEL_40;
          }
          if (((1 << Alignment) & 0x12) != 0)
          {
LABEL_37:
            CMTimeMake((CMTime *)v44, 1, 1);
            v19 = 0.0;
LABEL_40:
            v18 = 0.0;
            goto LABEL_41;
          }
        }
        CMTimeMake((CMTime *)v44, 1, 1);
        v23 = -0.5;
        goto LABEL_39;
      }
      if (((1 << Alignment) & 0x12) != 0)
      {
        v13 = v8 * -0.5;
        goto LABEL_26;
      }
    }
    v13 = -v8;
    goto LABEL_26;
  }
LABEL_42:
  if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 53528) + 552))(a1 + 53528, 0) & 1) == 0)
  {
    *(_OWORD *)v44 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v44[16] = _Q0;
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 200) + 272))(a1 + 200);
    OZScene::getSceneBounds(v29, (float64x2_t *)v44);
    if (*(double *)&v44[16] * 0.75 <= *(double *)&v44[24] * 0.75)
      v30 = *(double *)&v44[16] * 0.75;
    else
      v30 = *(double *)&v44[24] * 0.75;
    OZChannelPosition3D::willBeModified((os_unfair_lock_s *)(a1 + 53392), 1);
    OZChannel::setDiscrete((OZChannel *)(a1 + 53528), 0, 0);
    OZChannel::setDiscrete((OZChannel *)(a1 + 53680), 0, 0);
    OZChannel::setDiscrete((OZChannel *)(a1 + 54128), 0, 0);
    OZChannel::setParametric((OZChannel *)(a1 + 53528), 1);
    OZChannel::setParametric((OZChannel *)(a1 + 53680), 1);
    OZChannel::setParametric((OZChannel *)(a1 + 54128), 1);
    v31 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::setKeyframe((OZChannel *)(a1 + 53528), MEMORY[0x1E0CA2E68], 0.0, 1);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53680), v31, 0.0, 1);
    OZChannel::setKeyframe((OZChannel *)(a1 + 54128), v31, 0.0, 1);
    CMTimeMake(&v43, 1, 1);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53528), &v43, v30 * 0.5, 1);
    CMTimeMake(&v43, 1, 1);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53680), &v43, v30 * 0.5, 1);
    CMTimeMake(&v43, 1, 1);
    Keyframe = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53528), &v43);
    CMTimeMake(&v43, 1, 1);
    v33 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53680), &v43);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53528), Keyframe, 0.0, v30 * 0.5 * -0.546761902, 1);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53680), v33, 0.0, 0.0, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53528), Keyframe, 0.0, v30 * 0.5 * 0.546761902, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53680), v33, 0.0, 0.0, 1);
    CMTimeMake(&v43, 1, 1);
    OZChannel::setKeyframe((OZChannel *)(a1 + 54128), &v43, 0.0, 1);
    OZFigTimeForChannelSeconds(&v43, 2.0, 0x40000);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53528), &v43, v30 * 0.5 + v30 * 0.5, 1);
    OZFigTimeForChannelSeconds(&v43, 2.0, 0x40000);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53680), &v43, 0.0, 1);
    OZFigTimeForChannelSeconds(&v43, 2.0, 0x40000);
    v34 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53528), &v43);
    OZFigTimeForChannelSeconds(&v43, 2.0, 0x40000);
    v35 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53680), &v43);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53528), v34, 0.0, 0.0, 1);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53680), v35, 0.0, v30 * 0.5 * 0.546761902, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53528), v34, 0.0, 0.0, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53680), v35, 0.0, v30 * 0.5 * -0.546761902, 1);
    OZFigTimeForChannelSeconds(&v43, 2.0, 0x40000);
    OZChannel::setKeyframe((OZChannel *)(a1 + 54128), &v43, 0.0, 1);
    OZFigTimeForChannelSeconds(&v43, 3.0, 0x40000);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53528), &v43, v30 * 0.5, 1);
    OZFigTimeForChannelSeconds(&v43, 3.0, 0x40000);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53680), &v43, -(v30 * 0.5), 1);
    OZFigTimeForChannelSeconds(&v43, 3.0, 0x40000);
    v36 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53528), &v43);
    OZFigTimeForChannelSeconds(&v43, 3.0, 0x40000);
    v37 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53680), &v43);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53528), v36, 0.0, v30 * 0.5 * 0.546761902, 1);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53680), v37, 0.0, 0.0, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53528), v36, 0.0, v30 * 0.5 * -0.546761902, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53680), v37, 0.0, 0.0, 1);
    OZFigTimeForChannelSeconds(&v43, 3.0, 0x40000);
    OZChannel::setKeyframe((OZChannel *)(a1 + 54128), &v43, 0.0, 1);
    v38 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53528), v31);
    v39 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53680), v31);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53528), v38, 0.0, 0.0, 1);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53680), v39, 0.0, v30 * 0.5 * -0.546761902, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53528), v38, 0.0, 0.0, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53680), v39, 0.0, v30 * 0.5 * 0.546761902, 1);
    OZChannel::closeParametricCurve((OZChannel *)(a1 + 53528));
    OZChannel::closeParametricCurve((OZChannel *)(a1 + 53680));
    OZChannel::closeParametricCurve((OZChannel *)(a1 + 54128));
  }
  initializeNormalsForPath((OZChannelPosition3D *)(a1 + 52504));
  initializeNormalsForPath((OZChannelPosition3D *)(a1 + 53392));
  v41 = OZCurrentThread::getInstance(v40);
  if (PCThread::isSelf(*((_opaque_pthread_t ***)v41 + 1)))
  {
    v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 200) + 272))(a1 + 200);
    OZDocument::postNotification(*(OZDocument **)(v42 + 1584), 8);
  }
}

BOOL TXTextLayout::isFlattened(TXTextLayout *this)
{
  if (((*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this) & 1) != 0)
    return 0;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 3
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 4)
  {
    return 1;
  }
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 19904), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

BOOL `non-virtual thunk to'TXTextLayout::isFlattened(TXTextLayout *this)
{
  return TXTextLayout::isFlattened((TXTextLayout *)((char *)this - 200));
}

BOOL TXTextLayout::alignToPath(TXTextLayout *this)
{
  double v2;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 60520), MEMORY[0x1E0CA2E68], 0.0);
  return (v2 < 4.0
       || !OZChannel::getValueAsInt((OZChannel *)((char *)this + 20312), MEMORY[0x1E0CA2E68], 0.0))
      && OZChannel::getValueAsInt((OZChannel *)((char *)this + 58296), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

uint64_t TXTextLayout::canFourCorner(TXTextLayout *this)
{
  uint64_t result;

  result = OZElement::canFourCorner((OZElement *)((char *)this + 200));
  if ((_DWORD)result)
    return (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this);
  return result;
}

uint64_t `non-virtual thunk to'TXTextLayout::canFourCorner(OZElement *this)
{
  uint64_t result;

  result = OZElement::canFourCorner(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(char *))(*((_QWORD *)this - 25) + 304))((char *)this - 200);
  return result;
}

uint64_t TXTextLayout::canCrop(TXTextLayout *this)
{
  uint64_t result;

  result = OZElement::canCrop((OZElement *)((char *)this + 200));
  if ((_DWORD)result)
    return (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this);
  return result;
}

uint64_t `non-virtual thunk to'TXTextLayout::canCrop(OZElement *this)
{
  uint64_t result;

  result = OZElement::canCrop(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(char *))(*((_QWORD *)this - 25) + 304))((char *)this - 200);
  return result;
}

uint64_t TXTextLayout::updateHiddenChannels(TXTextLayout *this, char a2)
{
  char *v4;
  char v5;
  const PCString *v6;
  int ValueAsInt;
  OZChannelBase *v8;
  char *v9;
  uint64_t v10;

  v4 = (char *)this + 53233;
  if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this))
  {
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 12872), 2, a2);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 20056), 2, a2);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 20312), 2, a2);
    v5 = 1;
  }
  else
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 12872), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20056), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20312), 2, a2);
    OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 200), v6);
    v5 = 0;
  }
  *v4 = v5;
  v4[888] = v5;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20312), MEMORY[0x1E0CA2E68], 0.0);
  v8 = (OZChannelBase *)((char *)this + 58296);
  if (ValueAsInt)
    OZChannelBase::resetFlag(v8, 2, a2);
  else
    OZChannelBase::setFlag(v8, 2, a2);
  v9 = (char *)this + 200;
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200)
    && *(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v9 + 272))((char *)this + 200) + 1584))
  {
    v10 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 272))((char *)this + 200);
    OZDocument::postNotification(*(OZDocument **)(v10 + 1584), 32);
  }
  *((_BYTE *)this + 19392) = 1;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 3689) = _Q0;
  *((_OWORD *)this + 3693) = xmmword_1B304F270;
  *((_OWORD *)this + 3692) = xmmword_1B304F270;
  *((_OWORD *)this + 3691) = xmmword_1B304F270;
  return OZElement::updateHiddenChannels((OZElement *)((char *)this + 200), a2);
}

double TXTextLayout::invalidateLayout(TXTextLayout *this)
{
  double result;

  *((_BYTE *)this + 19392) = 1;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 3689) = _Q0;
  result = 1.0;
  *((_OWORD *)this + 3693) = xmmword_1B304F270;
  *((_OWORD *)this + 3692) = xmmword_1B304F270;
  *((_OWORD *)this + 3691) = xmmword_1B304F270;
  return result;
}

uint64_t `non-virtual thunk to'TXTextLayout::updateHiddenChannels(TXTextLayout *this, char a2)
{
  return TXTextLayout::updateHiddenChannels((TXTextLayout *)((char *)this - 200), a2);
}

double TXTextLayout::setAlignmentAtCursor(TXTextLayout *this, double a2, int a3)
{
  char *StringPtr;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int HardLine;
  uint64_t v11;
  TXParagraphStyle *v12;
  int v13;
  char *v14;
  double result;

  if (a3)
  {
    StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
    v6 = PCString::size((PCString *)StringPtr);
    v7 = 0;
  }
  else
  {
    v9 = *((_DWORD *)this + 4814);
    v8 = *((_DWORD *)this + 4815);
    if (v9 >= v8)
      v7 = *((_DWORD *)this + 4815);
    else
      v7 = *((_DWORD *)this + 4814);
    if (v9 <= v8)
      v6 = *((_DWORD *)this + 4815);
    else
      v6 = *((_DWORD *)this + 4814);
  }
  do
  {
    HardLine = TXTextLayout::getHardLine(this, v7);
    v11 = *((_QWORD *)this + 2378);
    if (HardLine >= (unint64_t)((*((_QWORD *)this + 2379) - v11) >> 3))
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    v12 = *(TXParagraphStyle **)(v11 + 8 * HardLine);
    TXParagraphStyle::setAlignment(v12, (int)a2, 0);
    TXParagraphStyle::dirty(v12, 1);
    v13 = *((_DWORD *)v12 + 216) + *((_DWORD *)v12 + 214);
    v14 = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
    if (PCString::size((PCString *)v14) == v13)
      v7 = v13 + 1;
    else
      v7 = v13;
  }
  while (v7 <= v6);
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 3689) = _Q0;
  result = 1.0;
  *((_OWORD *)this + 3693) = xmmword_1B304F270;
  *((_OWORD *)this + 3692) = xmmword_1B304F270;
  *((_OWORD *)this + 3691) = xmmword_1B304F270;
  return result;
}

double TXTextLayout::getAlignmentAtCursor(TXTextLayout *this)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int HardLine;
  uint64_t v6;

  v3 = *((_DWORD *)this + 4814);
  v2 = *((_DWORD *)this + 4815);
  if (v3 >= v2)
    v4 = v2;
  else
    v4 = v3;
  HardLine = TXTextLayout::getHardLine(this, v4);
  v6 = *((_QWORD *)this + 2378);
  if (HardLine >= (unint64_t)((*((_QWORD *)this + 2379) - v6) >> 3))
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  return (double)(int)TXParagraphStyle::getAlignment(*(TXParagraphStyle **)(v6 + 8 * HardLine));
}

void TXTextLayout::setParagraphBounds(uint64_t a1, double *a2)
{
  const CMTime *v4;

  v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::setValue((OZChannel *)(a1 + 24272), MEMORY[0x1E0CA2E68], *a2, 0);
  OZChannel::setValue((OZChannel *)(a1 + 24424), v4, *a2 + a2[2], 0);
  OZChannel::setValue((OZChannel *)(a1 + 24728), v4, a2[1], 0);
  OZChannel::setValue((OZChannel *)(a1 + 24576), v4, a2[1] + a2[3], 0);
  TXTextLayout::interlockMargins((TXTextLayout *)a1, 0);
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)a1);
}

double TXTextLayout::getParagraphBounds(uint64_t a1, double *a2)
{
  const CMTime *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double result;

  v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24272), MEMORY[0x1E0CA2E68], 0.0);
  v6 = v5;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24576), v4, 0.0);
  v8 = v7;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24424), v4, 0.0);
  v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24728), v4, 0.0);
  if (v6 <= v10)
    v12 = v6;
  else
    v12 = v10;
  if (v6 <= v10)
    v13 = v10;
  else
    v13 = v6;
  if (v8 >= v11)
    v14 = v8;
  else
    v14 = v11;
  if (v8 < v11)
    v11 = v8;
  *a2 = v12;
  a2[1] = v11;
  result = v14 - v11;
  a2[2] = v13 - v12;
  a2[3] = result;
  return result;
}

double TXTextLayout::getScrollableHeight(TXTextLayout *this, CMTime *a2)
{
  OZScene **v4;
  double *v10;
  OZChannel *v11;
  double v12;
  _QWORD v14[2];
  __int128 v15;
  _BYTE v16[8];

  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v16, v4);
  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v15 = _Q0;
  TXTextLayout::getTypographicBounds((uint64_t)this, (uint64_t)v14, a2, 0, 0);
  v10 = (double *)&v15;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0)
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) != 4)
  {
    if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0)
      || (v11 = (OZChannel *)((char *)this + 20464),
          OZChannel::getValueAsInt(v11, MEMORY[0x1E0CA2E68], 0.0) != 3)
      && OZChannel::getValueAsInt(v11, MEMORY[0x1E0CA2E68], 0.0) != 1)
    {
      v10 = (double *)&v15 + 1;
    }
  }
  v12 = *v10;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v16);
  return v12;
}

void sub_1B28EEB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

__CFString *TXTextLayout::setScrollPosition(TXTextLayout *this, double a2, int a3)
{
  uint64_t v5;
  __CFString *result;
  OZScene *v7;
  __n128 v8;
  double *v9;
  double ScrollableHeight;
  double v16;
  char *StringPtr;
  double v18;
  OZRenderState v19;
  __n128 v20;
  __int128 v21;
  OZRenderState v22;

  v5 = *((_QWORD *)this + 25);
  *((double *)this + 2429) = a2;
  result = (__CFString *)(*(uint64_t (**)(void))(v5 + 272))();
  if (a3)
  {
    v7 = (OZScene *)result;
    if (result)
    {
      OZRenderState::OZRenderState(&v22);
      OZScene::getCurrentTime(v7, &v20);
      v8 = v20;
      v22.var0.var3 = v21;
      v9 = (double *)&v21;
      v20 = 0uLL;
      __asm { FMOV            V1.2D, #-1.0 }
      v21 = _Q1;
      *(__n128 *)&v22.var0.var0 = v8;
      OZRenderState::OZRenderState(&v19, &v22);
      ScrollableHeight = TXTextLayout::getScrollableHeight(this, (CMTime *)&v19);
      (*(void (**)(TXTextLayout *, __n128 *))(*(_QWORD *)this + 352))(this, &v20);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0)
        || (result = (__CFString *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0), (_DWORD)result != 4))
      {
        result = (__CFString *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0);
        if (!(_DWORD)result
          || (result = (__CFString *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0), (_DWORD)result != 3)&& (result = (__CFString *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0), (_DWORD)result != 1))
        {
          v9 = (double *)&v21 + 1;
        }
      }
      v16 = 0.0;
      if (ScrollableHeight <= *v9
        || (StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048)),
            result = PCString::size((PCString *)StringPtr),
            !(_DWORD)result)
        || (v18 = *((double *)this + 2429), v18 < 0.0)
        || (v16 = 1.0, v18 > 1.0))
      {
        *((double *)this + 2429) = v16;
      }
    }
  }
  return result;
}

double TXTextLayout::scrollToFitCharOffset(TXTextLayout *this, unsigned int a2, int a3, double a4)
{
  OZChannel *v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  OZScene *v12;
  __n128 v13;
  double *v14;
  double ScrollableHeight;
  double v20;
  double v22;
  double v23;
  double v24;
  TXParagraphStyle **v25;
  double *v26;
  TXParagraphStyle **v27;
  TXParagraphStyle *v28;
  unint64_t v29;
  double v30;
  __n128 v31;
  double v32;
  double v33;
  double v35;
  uint64_t v36;
  unsigned int v37;
  TXTextLayout *v38;
  uint64_t TypographicBounds;
  double v40;
  double *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  int ValueAsInt;
  __n128 v47;
  double v48;
  double v49;
  double v50;
  double v51;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  TXTextObject *v56[2];
  TXTextObject *v57;
  std::__shared_weak_count *v58;
  OZRenderState v59;
  __n128 v60;
  __int128 v61;
  OZRenderState v62;

  v8 = (OZChannel *)((char *)this + 20464);
  v9 = 0.0;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0))
  {
    if (OZChannel::getValueAsInt(v8, MEMORY[0x1E0CA2E68], 0.0) != 2)
    {
      v10 = (*((_QWORD *)this + 7354) - *((_QWORD *)this + 7353)) >> 4;
      if ((_DWORD)v10)
      {
        if (v10 <= a2)
          v11 = (v10 - 1);
        else
          v11 = a2;
        OZRenderState::OZRenderState(&v62);
        v12 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
        if (v12)
        {
          OZScene::getCurrentTime(v12, &v60);
          v13 = v60;
          v62.var0.var3 = v61;
          v14 = (double *)&v61;
          v60 = 0uLL;
          __asm { FMOV            V1.2D, #-1.0 }
          v61 = _Q1;
          *(__n128 *)&v62.var0.var0 = v13;
          OZRenderState::OZRenderState(&v59, &v62);
          ScrollableHeight = TXTextLayout::getScrollableHeight(this, (CMTime *)&v59);
          (*(void (**)(TXTextLayout *, __n128 *))(*(_QWORD *)this + 352))(this, &v60);
          if ((OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0)
             || OZChannel::getValueAsInt(v8, MEMORY[0x1E0CA2E68], 0.0) != 4)
            && (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0)
             || OZChannel::getValueAsInt(v8, MEMORY[0x1E0CA2E68], 0.0) != 3
             && OZChannel::getValueAsInt(v8, MEMORY[0x1E0CA2E68], 0.0) != 1))
          {
            v14 = (double *)&v61 + 1;
          }
          v20 = *v14;
          if (ScrollableHeight >= *v14)
          {
            TXHelperFunctions::GetTextObjectContainingCharIndex(this, (TXTextLayout *)v11, 1, 0, &v57);
            if (v57)
            {
              if (OZChannel::getValueAsInt(v8, MEMORY[0x1E0CA2E68], 0.0) == 4)
              {
                if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0))
                {
                  v22 = *((double *)v57 + 25);
                  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], 0.0);
                }
                else
                {
                  v22 = *((double *)v57 + 24);
                  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
                }
                v35 = v22 - v23;
                v36 = (*((_QWORD *)this + 7354) - *((_QWORD *)this + 7353)) >> 4;
                _CF = (_DWORD)v36 != 0;
                v37 = v36 - 1;
                if (_CF)
                  v38 = (TXTextLayout *)v37;
                else
                  v38 = 0;
                TXHelperFunctions::GetTextObjectContainingCharIndex(this, v38, 1, 0, v56);
                if (v56[0])
                {
                  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0))
                  {
                    TypographicBounds = TXTextObject::getTypographicBounds(v56[0]);
                    v40 = *(double *)(TypographicBounds + 8) + *(double *)(TypographicBounds + 24);
                  }
                  else
                  {
                    v40 = *(double *)TXTextObject::getTypographicBounds(v56[0]);
                  }
                }
                else
                {
                  v40 = 0.0;
                }
                v41 = (double *)TXTextObject::getTypographicBounds(v57);
                v42 = *v41;
                v43 = v41[1];
                v44 = v41[2];
                v45 = v41[3];
                ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0);
                v47.n128_f64[0] = vabdd_f64(v35 - v40, v43 + v45) / (ScrollableHeight - v20);
                v48 = (fabs(v35 - v40 + v43) - v20) / (ScrollableHeight - v20);
                v49 = (fabs(v35 + v40 + v42) - v20) / (ScrollableHeight - v20);
                v50 = fabs(v35 + v40 + v42 + v44) / (ScrollableHeight - v20);
                if (ValueAsInt)
                  v50 = v48;
                else
                  v47.n128_f64[0] = v49;
                v51 = *((double *)this + 2429);
                if (v50 < v51 || v47.n128_f64[0] > v51)
                {
                  if (!a3)
                    v47.n128_f64[0] = v50;
                  (*(void (**)(TXTextLayout *, uint64_t, __n128))(*(_QWORD *)this + 824))(this, 1, v47);
                }
                std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v56);
              }
              else
              {
                v24 = *((double *)v57 + 25);
                if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0))v24 = *((double *)v57 + 24);
                v25 = (TXParagraphStyle **)*((_QWORD *)this + 2378);
                v26 = (double *)*((_QWORD *)*v25 + 111);
                v27 = (TXParagraphStyle **)*((_QWORD *)this + 2379);
                while (v25 != v27)
                {
                  v28 = *v25;
                  v29 = *((_QWORD *)*v25 + 107);
                  if (v29 <= v11 && *((_QWORD *)v28 + 108) + v29 > v11)
                    goto LABEL_31;
                  ++v25;
                }
                v28 = *(v27 - 1);
LABEL_31:
                v30 = *v26;
                v31.n128_f64[0] = fabs(v24 - *v26 + TXParagraphStyle::getAscenderForCharOffset(v28, v11))
                                / (ScrollableHeight - v20);
                v32 = (vabdd_f64(v24, v30) - v20) / (ScrollableHeight - v20);
                v33 = *((double *)this + 2429);
                if (v32 - a4 > v33 || v31.n128_f64[0] - a4 < v33)
                {
                  if (!a3)
                    v31.n128_f64[0] = v32;
                  (*(void (**)(TXTextLayout *, uint64_t, __n128))(*(_QWORD *)this + 824))(this, 1, v31);
                }
              }
              v9 = *((double *)this + 2429);
            }
            else
            {
              v9 = 0.0;
            }
            v53 = v58;
            if (v58)
            {
              p_shared_owners = (unint64_t *)&v58->__shared_owners_;
              do
                v55 = __ldaxr(p_shared_owners);
              while (__stlxr(v55 - 1, p_shared_owners));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
          }
          else
          {
            v9 = 0.0;
            (*(void (**)(TXTextLayout *, _QWORD, double))(*(_QWORD *)this + 824))(this, 0, 0.0);
          }
        }
        else
        {
          (*(void (**)(TXTextLayout *, _QWORD, double))(*(_QWORD *)this + 824))(this, 0, 0.0);
        }
      }
    }
  }
  return v9;
}

void sub_1B28EF1A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getEnableScroll(TXTextLayout *this)
{
  uint64_t result;

  if (!*((_BYTE *)this + 19440)
    || *(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200) + 1579))
  {
    return 0;
  }
  if (!TXTextLayout::shouldScaleToTBMargins(this)
    || (result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0), (_DWORD)result))
  {
    if ((TXTextLayout::shouldScaleToLRMargins(this) & 1) == 0
      && !TXTextLayout::shouldScaleProportionallyToLeftRightMargins(this)
      || !OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0))
    {
      return TXTextLayout::shouldScaleToBothMargins(this) ^ 1;
    }
    return 0;
  }
  return result;
}

uint64_t TXTextLayout::shouldScaleToTBMargins(TXTextLayout *this)
{
  OZChannel *v2;
  uint64_t result;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 61208), MEMORY[0x1E0CA2E68], 0.0) != 2)
    return 0;
  v2 = (OZChannel *)((char *)this + 20464);
  result = OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result != 1)
    return OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) == 3
        || OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) == 4;
  return result;
}

uint64_t TXTextLayout::shouldScaleToLRMargins(TXTextLayout *this)
{
  OZChannel *v2;
  uint64_t result;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 61208), MEMORY[0x1E0CA2E68], 0.0) != 1)
    return 0;
  v2 = (OZChannel *)((char *)this + 20464);
  result = OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result != 1)
    return OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) == 3
        || OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) == 4;
  return result;
}

uint64_t TXTextLayout::shouldScaleProportionallyToLeftRightMargins(TXTextLayout *this)
{
  OZChannel *v2;
  uint64_t result;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 61208), MEMORY[0x1E0CA2E68], 0.0) != 4)
    return 0;
  v2 = (OZChannel *)((char *)this + 20464);
  result = OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result != 1)
    return OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) == 3
        || OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) == 4;
  return result;
}

uint64_t TXTextLayout::shouldScaleToBothMargins(TXTextLayout *this)
{
  OZChannel *v2;
  uint64_t result;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 61208), MEMORY[0x1E0CA2E68], 0.0) != 3)
    return 0;
  v2 = (OZChannel *)((char *)this + 20464);
  result = OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result != 1)
    return OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) == 3
        || OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) == 4;
  return result;
}

double TXTextLayout::getScrollPositionInPixels(TXTextLayout *this)
{
  OZChannel *v2;
  double v3;
  double *v4;
  OZScene *v10;
  double ScrollableHeight;
  double v12;
  char *StringPtr;
  double v14;
  OZRenderState v16;
  __n128 v17;
  int64_t v18;
  OZRenderState v19;
  _QWORD v20[2];
  __int128 v21;

  v2 = (OZChannel *)((char *)this + 20464);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 1
    || (v3 = 0.0, OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) == 3)
    || OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) == 4)
  {
    v3 = 0.0;
    if (TXTextLayout::getEnableScroll(this))
    {
      v4 = (double *)&v21;
      v20[0] = 0;
      v20[1] = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      v21 = _Q0;
      OZRenderState::OZRenderState(&v19);
      if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
        v10 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
      else
        v10 = (OZScene *)*((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
      OZScene::getCurrentTime(v10, &v17);
      *(__n128 *)&v19.var0.var0 = v17;
      v19.var0.var3 = v18;
      OZRenderState::OZRenderState(&v16, &v19);
      ScrollableHeight = TXTextLayout::getScrollableHeight(this, (CMTime *)&v16);
      (*(void (**)(TXTextLayout *, _QWORD *))(*(_QWORD *)this + 352))(this, v20);
      if ((OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0)
         || OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) != 4)
        && (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0)
         || OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) != 3
         && OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) != 1))
      {
        v4 = (double *)&v21 + 1;
      }
      v12 = *v4;
      if (ScrollableHeight > *v4
        && (StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048)),
            PCString::size((PCString *)StringPtr)))
      {
        v14 = *((double *)this + 2429);
      }
      else
      {
        *((_QWORD *)this + 2429) = 0;
        v14 = 0.0;
      }
      return (ScrollableHeight - v12) * v14;
    }
  }
  return v3;
}

uint64_t *TXTextLayout::updateKerningsAfterTextInsertion(uint64_t *this, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = this + 2404;
  if (this + 2404 != (uint64_t *)this[2403])
  {
    v6 = (uint64_t **)(this + 2403);
    do
    {
      v18 = 0;
      v7 = (uint64_t *)*v3;
      v8 = (uint64_t *)*v3;
      v9 = v3;
      if (*v3)
      {
        do
        {
          v10 = v8;
          v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v10 = (uint64_t *)v9[2];
          v11 = *v10 == (_QWORD)v9;
          v9 = v10;
        }
        while (v11);
      }
      v18 = v10[4];
      if (v18 < a2)
        break;
      v12 = v3;
      if (v7)
      {
        do
        {
          v13 = v7;
          v7 = (uint64_t *)v7[1];
        }
        while (v7);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v12[2];
          v11 = *v13 == (_QWORD)v12;
          v12 = v13;
        }
        while (v11);
      }
      v14 = v13[5];
      std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__erase_unique<long>((uint64_t)v6, &v18);
      v17 = v18 + a3;
      v19 = &v17;
      this = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(v6, &v17, (uint64_t)&std::piecewise_construct, &v19);
      this[5] = v14;
      v15 = (uint64_t *)*v3;
      if (*v3)
      {
        do
        {
          v16 = v15;
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v3[2];
          v11 = *v16 == (_QWORD)v3;
          v3 = v16;
        }
        while (v11);
      }
      v3 = v16;
    }
    while (v16 != *v6);
  }
  return this;
}

void TXTextLayout::updateKerningsAfterTextDeletion(TXTextLayout *this, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18[2];

  v3 = (uint64_t *)*((_QWORD *)this + 2403);
  v4 = (uint64_t *)((char *)this + 19232);
  if (v3 != (uint64_t *)((char *)this + 19232))
  {
    v7 = a3 + a2;
    v8 = (uint64_t **)((char *)this + 19224);
    do
    {
      v9 = v3[4];
      if (v9 >= a2 && v9 < v7)
      {
        v12 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v8, v3);
        operator delete(v3);
      }
      else if (v9 >= v7)
      {
        v14 = v3[5];
        v15 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v8, v3);
        operator delete(v3);
        v18[0] = v9 - a3;
        v18[1] = v14;
        v16 = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_hint_unique_key_args<long,std::pair<long,double>>(v8, v15, v18, v18);
        v17 = (uint64_t *)v16[1];
        if (v17)
        {
          do
          {
            v12 = v17;
            v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v12 = (uint64_t *)v16[2];
            v13 = *v12 == (_QWORD)v16;
            v16 = v12;
          }
          while (!v13);
        }
      }
      else
      {
        v11 = (uint64_t *)v3[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (uint64_t *)v3[2];
            v13 = *v12 == (_QWORD)v3;
            v3 = v12;
          }
          while (!v13);
        }
      }
      v3 = v12;
    }
    while (v12 != v4);
  }
}

uint64_t *TXTextLayout::getKerningsForRange(uint64_t *result, _QWORD *a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t *v13;

  v3 = (uint64_t *)result[2403];
  v4 = result + 2404;
  if (v3 != result + 2404)
  {
    do
    {
      v7 = v3[4];
      if (v7 >= *a2)
      {
        if (v7 >= a2[1] + *a2)
          return result;
        v8 = v3[5];
        v12 = v7 - *a2;
        v13 = &v12;
        result = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(a3, (uint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v13);
        result[5] = v8;
      }
      v9 = (uint64_t *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (uint64_t *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != v4);
  }
  return result;
}

void TXTextLayout::shiftKerningsToLeft(uint64_t **this)
{
  OZScene **v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE v5[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v5, v2);
  v3 = this[2403];
  if (this + 2404 != (uint64_t **)v3)
  {
    do
    {
      TXTextLayout::setKerningAtCharOffset((TXParagraphStyle ***)this, *((double *)v3 + 5), v3[4] - 1);
      v4 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(this + 2403, v3);
      operator delete(v3);
      v3 = v4;
    }
    while (this + 2404 != (uint64_t **)v4);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v5);
}

void sub_1B28EFB68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::getTrackingForRange(uint64_t a1, uint64_t *a2, CMTime *a3, uint64_t a4)
{
  PCString *v4;
  uint64_t v5;
  uint64_t v10;
  PCString *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  unsigned int v16;
  PCString *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  PCString *var0;
  PCString *v22;
  BOOL v23;
  __CFString *v24;
  __CFString *v25;
  uint64_t var0_low;
  OZChannel *v27;
  float Size;
  unsigned int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  __CFString *v49;
  PCString *v50;
  uint64_t v51;
  CMTime v52;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  CMTime v56;
  CMTime v57;
  CMTime v58;
  OZChannel *v59;
  std::__shared_weak_count *v60;
  uint64_t *v61[3];

  v4 = (PCString *)(a1 + 64304);
  v5 = *(_QWORD *)(a1 + 64304);
  if (!v5)
    return;
  v10 = *a2;
  v11 = (PCString *)(a1 + 64304);
  v12 = *(_QWORD *)(a1 + 64304);
  do
  {
    v13 = *(_DWORD *)(v12 + 32);
    v14 = v13 >= v10;
    if (v13 >= v10)
      v15 = (uint64_t *)v12;
    else
      v15 = (uint64_t *)(v12 + 8);
    if (v14)
      v11 = (PCString *)v12;
    v12 = *v15;
  }
  while (*v15);
  if (v11 == v4 || LODWORD(v11[4].var0) > v10)
    return;
  v16 = *((_DWORD *)a2 + 2) + v10;
  v17 = (PCString *)(a1 + 64304);
  do
  {
    v18 = *(_DWORD *)(v5 + 32);
    v19 = v18 >= v16;
    if (v18 >= v16)
      v20 = (uint64_t *)v5;
    else
      v20 = (uint64_t *)(v5 + 8);
    if (v19)
      v17 = (PCString *)v5;
    v5 = *v20;
  }
  while (*v20);
  if (v17 == v4 || LODWORD(v17[4].var0) > v16)
    v17 = (PCString *)(a1 + 64304);
  var0 = (PCString *)v17->var0;
  if (v17->var0)
  {
    do
    {
      v22 = var0;
      var0 = (PCString *)var0[1].var0;
    }
    while (var0);
  }
  else
  {
    do
    {
      v22 = (PCString *)v17[2].var0;
      v23 = v22->var0 == (__CFString *)v17;
      v17 = v22;
    }
    while (v23);
  }
  if (v11 == v22)
    return;
  while (v22 == v4 || PCString::isWhitespaceAndNewline(v22 + 5))
  {
    v24 = v22->var0;
    if (v22->var0)
    {
      do
      {
        v25 = v24;
        v24 = (__CFString *)v24->info;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = v22[2].var0;
        v23 = v25->isa == v22;
        v22 = (PCString *)v25;
      }
      while (v23);
    }
    v22 = (PCString *)v25;
    if (v11 == (PCString *)v25)
      return;
  }
  if (v11 == v22)
    return;
  do
  {
    var0_low = LODWORD(v11[4].var0);
    if ((PCString::isNewline(v11 + 5) & 1) != 0)
      goto LABEL_50;
    TXTextLayout::getStyleAtCharOffset(a1, var0_low, &v59);
    v27 = v59;
    v58 = *a3;
    Size = TXTextStyle::getSize(v59, &v58, 0.0);
    v29 = v11[8].var0;
    v57 = *a3;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 19600), &v57, 0.0);
    v31 = v30;
    v56 = *a3;
    OZChannel::getValueAsDouble((OZChannel *)((char *)v27 + 2256), &v56, 0.0);
    v33 = v32;
    v55 = *a3;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 27832), &v55, (double)v29);
    v35 = v34;
    v54 = *a3;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 19752), &v54, 0.0);
    v37 = v36;
    v53 = *a3;
    OZChannel::getValueAsDouble((OZChannel *)((char *)v27 + 49416), &v53, 0.0);
    v39 = v38;
    v52 = *a3;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 27984), &v52, (double)v29);
    v41 = (v31 + v33 + v35 + (v37 + v39 + v40) * Size) * TXTextLayout::getXMarginScale((TXTextLayout *)a1);
    v42 = var0_low - *a2;
    v51 = v42;
    v43 = *(_QWORD **)(a4 + 8);
    if (!v43)
    {
LABEL_43:
      v61[0] = &v51;
      *((double *)std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)a4, &v51, (uint64_t)&std::piecewise_construct, v61)+ 5) = v41;
      goto LABEL_45;
    }
    while (1)
    {
      v44 = v43[4];
      if (v42 >= v44)
        break;
LABEL_42:
      v43 = (_QWORD *)*v43;
      if (!v43)
        goto LABEL_43;
    }
    if (v44 < v42)
    {
      ++v43;
      goto LABEL_42;
    }
    v61[0] = &v51;
    v45 = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)a4, &v51, (uint64_t)&std::piecewise_construct, v61);
    *((double *)v45 + 5) = v41 + *((double *)v45 + 5);
LABEL_45:
    v46 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
LABEL_50:
    v49 = v11[1].var0;
    if (v49)
    {
      do
      {
        v50 = (PCString *)v49;
        v49 = (__CFString *)v49->isa;
      }
      while (v49);
    }
    else
    {
      do
      {
        v50 = (PCString *)v11[2].var0;
        v23 = v50->var0 == (__CFString *)v11;
        v11 = v50;
      }
      while (!v23);
    }
    v11 = v50;
  }
  while (v50 != v22);
}

void sub_1B28EFF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 192);
  _Unwind_Resume(a1);
}

double TXTextLayout::getXMarginScale(TXTextLayout *this)
{
  int shouldScaleProportionallyToLeftRightMargins;
  double result;
  int ValueAsInt;
  char *v5;

  if ((TXTextLayout::shouldScaleToLRMargins(this) & 1) != 0
    || (shouldScaleProportionallyToLeftRightMargins = TXTextLayout::shouldScaleProportionallyToLeftRightMargins(this),
        result = 1.0,
        shouldScaleProportionallyToLeftRightMargins))
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0);
    v5 = (char *)this + 61624;
    if (!ValueAsInt)
      v5 = (char *)this + 61616;
    return *(double *)v5;
  }
  return result;
}

void TXTextLayout::applyKerningAndTrackingToAttributedString(TXTextLayout *this, __CFAttributedString *a2, CMTime *a3, const CFRange *a4)
{
  OZScene **v8;
  uint64_t v9[3];
  _QWORD **v10;
  _QWORD *v11[2];
  uint64_t *v12;
  _QWORD *v13[2];
  _BYTE v14[8];

  v8 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v14, v8);
  v13[0] = 0;
  v13[1] = 0;
  v11[1] = 0;
  v12 = (uint64_t *)v13;
  v10 = v11;
  v11[0] = 0;
  *(CFRange *)v9 = *a4;
  TXTextLayout::getKerningsForRange((uint64_t *)this, v9, &v12);
  TXTextLayout::getTrackingForRange((uint64_t)this, v9, a3, (uint64_t)&v10);
  applyKerningsToAttributedString(&v12, CFSTR("SimpeValueDict::kerning"), a2);
  applyKerningsToAttributedString(&v10, CFSTR("SimpeValueDict::tracking"), a2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v10, v11[0]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v12, v13[0]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v14);
}

void sub_1B28F00F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, char a15, _QWORD *a16)
{
  uint64_t v16;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a12, a13);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a15, a16);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v16 - 40));
  _Unwind_Resume(a1);
}

void applyKerningsToAttributedString(_QWORD *a1, const __CFString *a2, CFMutableAttributedStringRef aStr)
{
  const __CFString *String;
  CFIndex Length;
  double *v8;
  double *v9;
  double *v10;
  unint64_t v11;
  const __CFString *v12;
  unint64_t v13;
  double v14;
  CFRange RangeOfComposedCharactersAtIndex;
  const __CFNumber *Attribute;
  int Value;
  double v18;
  CFNumberRef v19;
  CFNumberRef v20;
  double *v21;
  double *v22;
  BOOL v23;
  double v24;
  double valuePtr;
  double v26;

  CFAttributedStringBeginEditing(aStr);
  String = CFAttributedStringGetString(aStr);
  Length = CFStringGetLength(String);
  v10 = (double *)*a1;
  v8 = (double *)(a1 + 1);
  v9 = v10;
  if (v10 != v8)
  {
    v11 = Length;
    v12 = (const __CFString *)*MEMORY[0x1E0CA8588];
    do
    {
      v13 = *((_QWORD *)v9 + 4);
      if (v13 >= v11)
        break;
      v14 = v9[5];
      v26 = v14;
      if (v14 <= -0.0000001 || v14 >= 0.0000001)
      {
        RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(String, v13);
        valuePtr = 0.0;
        Attribute = (const __CFNumber *)CFAttributedStringGetAttribute(aStr, v13, v12, 0);
        if (Attribute)
        {
          Value = CFNumberGetValue(Attribute, kCFNumberDoubleType, &valuePtr);
          v18 = valuePtr;
          if (!Value)
            v18 = -0.0;
        }
        else
        {
          v18 = -0.0;
        }
        v24 = v18 + v26;
        v19 = CFNumberCreate(0, kCFNumberDoubleType, &v24);
        CFAttributedStringSetAttribute(aStr, RangeOfComposedCharactersAtIndex, v12, v19);
        CFRelease(v19);
        if (a2)
        {
          v20 = CFNumberCreate(0, kCFNumberDoubleType, &v26);
          CFAttributedStringSetAttribute(aStr, RangeOfComposedCharactersAtIndex, a2, v20);
          CFRelease(v20);
        }
      }
      v21 = (double *)*((_QWORD *)v9 + 1);
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = *(double **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (double *)*((_QWORD *)v9 + 2);
          v23 = *(_QWORD *)v22 == (_QWORD)v9;
          v9 = v22;
        }
        while (!v23);
      }
      v9 = v22;
    }
    while (v22 != v8);
  }
  CFAttributedStringEndEditing(aStr);
}

uint64_t TXTextLayout::getAlignmentOffset(TXTextLayout *this, double *a2, double *a3, CMTime *a4)
{
  CMTime *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int ValueAsInt;
  int v18;
  int v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  double v23;
  double Size;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  const OZRenderState *v36;
  double DiffBetweenTopImageBoundAndTopTypographicBound;
  char v38;
  _BOOL4 v40;
  _BOOL4 v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  OZChannel *v46;
  CMTime *v47;
  uint64_t *v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  uint64_t *v53;
  uint64_t *v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  double v62;
  double *v63;
  uint64_t v64;
  double v65;
  float v66;
  _QWORD *v67;
  double v68;
  uint64_t v69;
  double *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  double v74;
  double v75;
  unint64_t *v76;
  uint64_t v77;
  double v78;
  void **HostApplicationDelegate;
  uint64_t v80;
  int v81;
  double v82;
  TXChannelString *v83;
  char *StringPtr;
  unsigned int v85;
  UniChar CharacterAtIndex;
  uint64_t v87;
  TXTextObject *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  double v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v102;
  CMTime v103;
  TXTextObject *v104;
  std::__shared_weak_count *v105;
  CFStringRef theString;
  CMTime v107;
  CMTime v108;
  CMTime v109;
  CMTime v110;
  CMTime v111;
  _BYTE v112[32];
  _QWORD v113[2];
  __int128 v114;
  __int128 v115;
  double v116[4];

  v8 = (CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E0CA2E68], 0.0);
  v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), v8, 0.0);
  v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), v8, 0.0);
  v14 = v13;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), v8, 0.0);
  v16 = v15;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), v8, 0.0);
  v18 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v8, 0.0);
  v19 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v8, 0.0);
  v20 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v8, 0.0);
  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v8, 0.0))
    goto LABEL_14;
  if (v18 != 1 && v19 != 3)
  {
    if (v20 == 4)
    {
      TXTextLayout::getStyleAtCharOffset((uint64_t)this, 0, &v115);
      v21 = (uint64_t *)*((_QWORD *)this + 2379);
      v22 = (uint64_t *)*((_QWORD *)this + 2378);
      if (v21 == v22)
      {
        v103 = *v8;
        v23 = 0.0;
        Size = TXTextStyle::getSize((OZChannel *)v115, &v103, 0.0);
      }
      else
      {
        v23 = 0.0;
        Size = 0.0;
        do
        {
          v25 = *v22;
          v26 = *(unsigned int *)(*v22 + 876);
          if ((_DWORD)v26)
          {
            v27 = *(double *)(v25 + 920);
            v28 = (double *)(*(_QWORD *)(v25 + 888) + 8);
            do
            {
              v23 = v23 + v27;
              v29 = *v28;
              v28 += 8;
              v30 = v29;
              if (v29 < Size)
                Size = v30;
              --v26;
            }
            while (v26);
          }
          ++v22;
        }
        while (v22 != v21);
      }
      v74 = v10 - Size;
      if (!ValueAsInt)
        Size = -v23;
      v75 = v16 + Size;
      if (ValueAsInt)
        v74 = v14;
      *a2 = v75;
      *a3 = v74;
      v71 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
      if (*((_QWORD *)&v115 + 1))
      {
        v76 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
        do
          v73 = __ldaxr(v76);
        while (__stlxr(v73 - 1, v76));
        goto LABEL_71;
      }
      return 0;
    }
LABEL_14:
    *a2 = 0.0;
    *a3 = 0.0;
    return 0;
  }
  if (ValueAsInt)
    v31 = v16;
  else
    v31 = v12;
  *a2 = v31;
  v115 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)v116 = _Q0;
  v113[0] = 0;
  v113[1] = 0;
  v114 = _Q0;
  TXTextLayout::getTypographicBounds((uint64_t)this, (uint64_t)&v115, a4, 0, 0);
  if (TXTextLayout::shouldScaleToBothMargins(this) && *(_BYTE *)(theApp + 82))
  {
    TXTextLayout::_getImageBoundsFromParagraphs(this, a4, (uint64_t)v112);
    v115 = *(_OWORD *)v112;
    *(_OWORD *)v116 = *(_OWORD *)&v112[16];
    DiffBetweenTopImageBoundAndTopTypographicBound = TXTextLayout::_getDiffBetweenTopImageBoundAndTopTypographicBound(this, v36);
    v116[1] = DiffBetweenTopImageBoundAndTopTypographicBound + v116[1];
    v38 = 1;
  }
  else
  {
    v38 = 0;
  }
  v40 = v19 == 3 || v18 == 1;
  if (ValueAsInt)
    v41 = v40;
  else
    v41 = v20 == 4;
  v42 = v116[1];
  if (v41)
    v43 = v116[0];
  else
    v43 = v116[1];
  (*(void (**)(TXTextLayout *, _QWORD *))(*(_QWORD *)this + 352))(this, v113);
  v44 = 3;
  if (v41)
    v44 = 2;
  v45 = *(double *)&v113[v44];
  v46 = (OZChannel *)((char *)this + 21368);
  v47 = (CMTime *)MEMORY[0x1E0CA2E68];
  v48 = (uint64_t *)((char *)this + 58824);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 21368), MEMORY[0x1E0CA2E68], 0.0)
    && (v43 <= v45 || !*((_BYTE *)this + 19440)))
  {
    *(_OWORD *)v112 = *(_OWORD *)&a4->value;
    *(_QWORD *)&v112[16] = a4->epoch;
    v51 = **(double **)(**((_QWORD **)this + 2378) + 888);
    if ((v38 & 1) == 0)
    {
      v42 = 0.0;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), (const CMTime *)v112, 0.0);
      v53 = (uint64_t *)*((_QWORD *)this + 2378);
      v54 = (uint64_t *)*((_QWORD *)this + 2379);
      if (v53 == v54)
        goto LABEL_75;
      v55 = v52;
      v102 = v51;
      v56 = *((double *)this + 8050);
      do
      {
        v57 = *v53;
        v109 = *(CMTime *)v112;
        OZChannel::getValueAsDouble((OZChannel *)(v57 + 680), &v109, 0.0);
        v59 = v58;
        (*(void (**)(TXTextLayout *, _BYTE *))(*(_QWORD *)this + 712))(this, v112);
        v61 = *(unsigned int *)(v57 + 876);
        if ((_DWORD)v61)
        {
          v62 = v56 + v59 * v60;
          v63 = (double *)(*(_QWORD *)(v57 + 888) + 8);
          do
          {
            v42 = v42 + v55 + v62 + *(v63 - 1) - *v63;
            v63 += 8;
            --v61;
          }
          while (v61);
        }
        ++v53;
      }
      while (v53 != v54);
      if (v42 <= 0.0)
      {
        v51 = v102;
      }
      else
      {
        v64 = *(_QWORD *)(*((_QWORD *)this + 2379) - 8);
        v108 = *(CMTime *)v112;
        OZChannel::getValueAsDouble((OZChannel *)(v64 + 680), &v108, 0.0);
        v51 = v102;
        v42 = v42 - v65 * (*(double (**)(TXTextLayout *, _BYTE *))(*(_QWORD *)this + 712))(this, v112);
      }
      if (v42 <= 0.0)
      {
LABEL_75:
        v77 = **((_QWORD **)this + 2378);
        v107 = *(CMTime *)v112;
        OZChannel::getValueAsDouble((OZChannel *)(v77 + 680), &v107, 0.0);
        v42 = v42 - v78 * (*(double (**)(TXTextLayout *, _BYTE *))(*(_QWORD *)this + 712))(this, v112);
      }
      HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
      if (OZHostApplicationDelegateHandler::wantsToComputeTypographicHeightWithoutLastLineLeading(HostApplicationDelegate))
      {
        v80 = *(_QWORD *)(*((_QWORD *)this + 2379) - 8);
        v81 = *(_DWORD *)(v80 + 876);
        if (v81)
          v82 = 0.0 - *(double *)(*(_QWORD *)(v80 + 888) + ((unint64_t)(v81 - 1) << 6) + 16);
        else
          v82 = 0.0;
        v42 = v42 - v82;
      }
    }
    v83 = (TXTextLayout *)((char *)this + 19048);
    StringPtr = TXChannelString::getStringPtr(v83);
    v85 = PCString::size((PCString *)StringPtr);
    TXChannelString::getString((PCString *)v83, (PCString *)&theString);
    CharacterAtIndex = CFStringGetCharacterAtIndex(theString, (int)(v85 - 1));
    if (TXCharacterSetIsNewline(CharacterAtIndex))
    {
      v87 = *v48;
      if (*v48 != v48[1])
      {
        v88 = *(TXTextObject **)v87;
        v89 = *(std::__shared_weak_count **)(v87 + 8);
        v104 = *(TXTextObject **)v87;
        v105 = v89;
        if (v89)
        {
          p_shared_owners = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldxr(p_shared_owners);
          while (__stxr(v91 + 1, p_shared_owners));
        }
        v92 = *(double *)(TXTextObject::getTypographicBounds(v88) + 24);
        if (v89)
        {
          v93 = (unint64_t *)&v89->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v42 = v42 + v92;
      }
    }
    v95 = OZChannel::getValueAsInt(v46, MEMORY[0x1E0CA2E68], 0.0);
    v96 = v14 - v10;
    v97 = v16 - v12;
    if (v95 == 1)
    {
      v98 = v42 * 0.5;
      if (ValueAsInt)
      {
        *a3 = v14;
        v99 = v16 + v97 * -0.5 + v98;
LABEL_97:
        *a2 = v99 - v51;
LABEL_101:
        PCString::~PCString((PCString *)&theString);
        return 0;
      }
      v100 = v14 - v51 + v96 * -0.5 + v98;
    }
    else
    {
      if (ValueAsInt)
      {
        *a3 = v14;
        v99 = v16 - v97 + v42;
        goto LABEL_97;
      }
      v100 = v14 - v51 - v96 + v42;
    }
    *a3 = v100;
    goto LABEL_101;
  }
  TXTextLayout::getStyleAtCharOffset((uint64_t)this, 0, v112);
  v49 = *((_QWORD *)this + 2378);
  if (*((_QWORD *)this + 2379) == v49)
  {
    v111 = *v47;
    v50 = TXTextStyle::getSize(*(OZChannel **)v112, &v111, 0.0);
  }
  else
  {
    v50 = **(double **)(*(_QWORD *)v49 + 888);
  }
  if (*((_DWORD *)this + 15128) == 1)
  {
    v110 = *v47;
    v66 = TXTextStyle::getSize(*(OZChannel **)v112, &v110, 0.0);
    v67 = (_QWORD *)*((_QWORD *)this + 2419);
    if (v67 != (_QWORD *)((char *)this + 19344))
    {
      v68 = v50 - v66;
      v69 = MEMORY[0x1E0CA2E68];
      do
      {
        (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)(v67[2] + 2560) + 768))(v67[2] + 2560, v69, v68);
        v67 = (_QWORD *)v67[1];
      }
      while (v67 != (_QWORD *)((char *)this + 19344));
    }
    *((_DWORD *)this + 15128) = 2;
  }
  if (ValueAsInt)
  {
    v70 = *(double **)(**((_QWORD **)this + 2378) + 888);
    *a2 = *a2 + (*v70 - v70[1]) * -0.5;
  }
  else
  {
    v14 = v14 - v50;
  }
  *a3 = v14;
  v71 = *(std::__shared_weak_count **)&v112[8];
  if (*(_QWORD *)&v112[8])
  {
    v72 = (unint64_t *)(*(_QWORD *)&v112[8] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
LABEL_71:
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  return 0;
}

void sub_1B28F0AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, PCString a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  PCString::~PCString(&a16);
  _Unwind_Resume(a1);
}

void TXTextLayout::_getImageBoundsFromParagraphs(TXTextLayout *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  double v11;
  uint64_t *v12;
  uint64_t *v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  float64x2_t v26;
  uint64_t v27;
  float64x2_t v28[2];
  CMTime v29;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 16) = _Q0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), a2, 0.0);
  v12 = (uint64_t *)*((_QWORD *)this + 2378);
  v13 = (uint64_t *)*((_QWORD *)this + 2379);
  if (v12 != v13)
  {
    v14 = v11;
    v15 = 1;
    v16 = 0.0;
    do
    {
      v17 = *v12;
      v29 = *a2;
      OZChannel::getValueAsDouble((OZChannel *)(v17 + 680), &v29, 0.0);
      v19 = v18;
      (*(void (**)(TXTextLayout *, const CMTime *))(*(_QWORD *)this + 712))(this, a2);
      v21 = *(unsigned int *)(*v12 + 876);
      if ((_DWORD)v21)
      {
        v22 = 0;
        v23 = (v14 + v19) * v20;
        v24 = *(_QWORD *)(*v12 + 888);
        v25 = v21 << 6;
        do
        {
          v26 = *(float64x2_t *)(v24 + v22 + 48);
          v28[0] = *(float64x2_t *)(v24 + v22 + 32);
          v28[1] = v26;
          if ((v15 & 1) == 0)
            v16 = v16 - (v23 + *(double *)(v24 + v22));
          v28[0].f64[0] = v28[0].f64[0] + 0.0;
          v28[0].f64[1] = v16 + v28[0].f64[1];
          PCRect<double>::operator|=((float64x2_t *)a3, v28);
          v27 = 0;
          LOBYTE(v15) = 0;
          v24 = *(_QWORD *)(*v12 + 888);
          v16 = v16 + *(double *)(v24 + v22 + 8);
          v22 += 64;
        }
        while (v25 != v22);
      }
      else
      {
        v27 = v15;
      }
      ++v12;
      v15 = v27;
    }
    while (v12 != v13);
  }
}

double TXTextLayout::_getDiffBetweenTopImageBoundAndTopTypographicBound(TXTextLayout *this, const OZRenderState *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2378);
  if (*((_QWORD *)this + 2379) == v2)
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  return **(double **)(*(_QWORD *)v2 + 888)
       - (*(double *)(*(_QWORD *)(*(_QWORD *)v2 + 888) + 40)
        + *(double *)(*(_QWORD *)(*(_QWORD *)v2 + 888) + 56));
}

uint64_t TXTextLayout::_computeTypographicHeightWithoutLastLineLeading(TXTextLayout *this)
{
  void **HostApplicationDelegate;

  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  return OZHostApplicationDelegateHandler::wantsToComputeTypographicHeightWithoutLastLineLeading(HostApplicationDelegate);
}

double TXTextLayout::_lastLineLeading(TXTextLayout *this)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2379) - 8);
  v2 = *(_DWORD *)(v1 + 876);
  if (v2)
    return 0.0 - *(double *)(*(_QWORD *)(v1 + 888) + ((unint64_t)(v2 - 1) << 6) + 16);
  else
    return 0.0;
}

OZRenderState *TXTextLayout::getAlignmentOffsetForParagraph(OZRenderState *this, const TXParagraphStyle *a2, double *a3, double *a4, int a5, unsigned int a6, double a7, double a8)
{
  uint64_t v12;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  OZChannel *v21;
  double v22;
  OZRenderState v23;
  double v24;
  double v25;

  v12 = (uint64_t)this;
  if (a6 <= 4 && ((1 << a6) & 0x1A) != 0)
  {
    v24 = 0.0;
    v25 = 0.0;
    this = OZRenderState::OZRenderState(&v23);
    if (a7 == -1.0 || a8 == -1.0)
    {
      this = (OZRenderState *)(*(uint64_t (**)(uint64_t, double *, double *, OZRenderState *))(*(_QWORD *)v12 + 1016))(v12, &v25, &v24, &v23);
      a8 = v24;
      a7 = v25;
    }
    *a3 = a7;
    *a4 = a8;
    return this;
  }
  if (!a5)
    goto LABEL_18;
  if (a6)
  {
    v16 = *((double *)a2 + 115);
    v17 = *(double *)&this[226].var5;
    if (a5 != 1)
    {
      if (a5 != 2)
        return this;
      v18 = -(v16 - v17);
LABEL_21:
      *a3 = v18;
      return this;
    }
    v19 = v16 - v17;
    v20 = -0.5;
LABEL_20:
    v18 = v19 * v20;
    goto LABEL_21;
  }
  if (a5 == 3 || a5 == 6)
  {
LABEL_18:
    *a3 = 0.0;
    return this;
  }
  v21 = (OZChannel *)&this[78].var7.var0[1][3];
  this = (OZRenderState *)OZChannel::getValueAsInt((OZChannel *)&this[78].var7.var0[1][3], MEMORY[0x1E0CA2E68], 0.0);
  v22 = *((double *)a2 + 115);
  if ((_DWORD)this)
    *a4 = v22;
  else
    *a3 = -v22;
  if (a5 == 4 || a5 == 1)
  {
    this = (OZRenderState *)OZChannel::getValueAsInt(v21, MEMORY[0x1E0CA2E68], 0.0);
    if ((_DWORD)this)
    {
      *a4 = *a4 * 0.5;
      return this;
    }
    v19 = *a3;
    v20 = 0.5;
    goto LABEL_20;
  }
  return this;
}

uint64_t TXTextLayout::getBaseline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  OZChannel *v8;
  const CMTime *v9;
  uint64_t result;
  TXParagraphStyle **v11;
  int v12;
  TXParagraphStyle *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  v6 = *(_QWORD *)(a1 + 19024);
  if (*(_QWORD *)(a1 + 19032) == v6)
    v7 = -0.0;
  else
    v7 = (**(double **)(*(_QWORD *)v6 + 888) - *(double *)(*(_QWORD *)(*(_QWORD *)v6 + 888) + 8)) * -0.5;
  v8 = (OZChannel *)(a1 + 20720);
  v9 = (const CMTime *)MEMORY[0x1E0CA2E68];
  if (!OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), MEMORY[0x1E0CA2E68], 0.0))
    v7 = 0.0;
  result = OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), v9, 0.0);
  *(double *)a2 = v7;
  *(_QWORD *)(a2 + 8) = 0;
  v11 = *(TXParagraphStyle ***)(a1 + 19024);
  if (*(TXParagraphStyle ***)(a1 + 19032) == v11)
  {
LABEL_33:
    *(double *)a3 = v7;
    *(_QWORD *)(a3 + 8) = 0;
    return result;
  }
  v12 = result;
  v13 = *v11;
  v14 = *((double *)*v11 + 115);
  if ((_DWORD)result)
    v15 = *((double *)*v11 + 115);
  else
    v15 = 0.0;
  if ((_DWORD)result)
    v16 = v7;
  else
    v16 = *((double *)*v11 + 115);
  *(double *)a3 = v16;
  *(double *)(a3 + 8) = v15;
  result = TXParagraphStyle::getAlignment(v13);
  if ((_DWORD)result != 1)
  {
    result = TXParagraphStyle::getAlignment(v13);
    if ((_DWORD)result != 2)
      return result;
    result = OZChannel::getValueAsInt(v8, MEMORY[0x1E0CA2E68], 0.0);
    v21 = -v14;
    if ((_DWORD)result)
      v21 = v14;
    if (v12)
      v22 = v21;
    else
      v22 = 0.0;
    if (v12)
      v21 = v7;
    *(double *)a2 = v21;
    *(double *)(a2 + 8) = v22;
    goto LABEL_33;
  }
  v17 = v14 * -0.5;
  if (v12)
    v18 = v7;
  else
    v18 = v14 * -0.5;
  v19 = 0.0;
  if (v12)
    v19 = v14 * 0.5;
  else
    v17 = 0.0;
  *(double *)a2 = v18;
  *(double *)(a2 + 8) = v17;
  if (v12)
    v20 = v7;
  else
    v20 = v14 * 0.5;
  *(double *)a3 = v20;
  *(double *)(a3 + 8) = v19;
  return result;
}

void TXTextLayout::getOriginalBounds(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  OZRenderState *v3;
  float64x2_t *v4;
  unsigned int *v5;
  OZRenderState *v6;
  uint64_t v7;
  int8x8_t *Hash;
  OZScene **v9;
  float64x2_t *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int ValueAsInt;
  int v16;
  uint64_t v22;
  uint64_t v23;
  void **HostApplicationDelegate;
  int v25;
  int v26;
  int v27;
  _BOOL4 v29;
  int v30;
  double FaceOpacity;
  int v32;
  int v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t TypographicBounds;
  float64x2_t v46;
  uint64_t v47;
  OZChannel *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  OZChannel *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  TXTextObject *v57;
  uint64_t v58;
  OZChannel *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  float Size;
  unint64_t *v64;
  unint64_t v65;
  double v66;
  float CapHeight;
  unint64_t v68;
  float64_t v69;
  float v70;
  unint64_t *v71;
  unint64_t v72;
  double v73;
  double v74;
  BOOL v75;
  float v77;
  unint64_t *v78;
  unint64_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  _BOOL4 v83;
  int v84;
  float64x2_t *v85;
  unsigned int *v86;
  float64x2_t v87;
  _BYTE v88[40];
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  CMTime v96;
  CMTime v97;
  CMTime v98;
  float64x2_t v99;
  float64x2_t v100;
  OZRenderState v101[5];
  CMTime v102;
  CMTime var0;
  char v104[8];
  int32x4_t v105;
  int8x8_t v106[522];

  v1 = MEMORY[0x1E0C80A78](a1);
  v4 = (float64x2_t *)v2;
  v106[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  v5 = (unsigned int *)(v1 + 52212);
  if (!*(_BYTE *)(v1 + 52360))
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v2 + 16) = _Q0;
    return;
  }
  v6 = v3;
  v7 = v1;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v105);
  TXTextLayout::doLayout((TXTextLayout *)v7, v6, (PCHash128 *)&v105);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v106);
  PCHashWriteStream::writeValue(v106, v6->var20);
  PCHashWriteStream::writeValue(v106, v6->var29);
  Hash = PCHashWriteStream::getHash(v106);
  PCHash128::operator+=(v105.i32, (int *)Hash);
  v9 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)v7);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v104, v9);
  v10 = (float64x2_t *)(v7 + 59008);
  if (*(double *)(v7 + 59024) >= 0.0
    && *(double *)(v7 + 59032) >= 0.0
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v105, *(int32x4_t *)(v7 + 59040))))) & 1) == 0
    && !*(_BYTE *)(v7 + 19392)
    && !TXTextLayout::isAnyParagraphDirty((TXTextLayout *)v7)
    && OZChannel::getValueAsInt((OZChannel *)(v7 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 2
    && !v6->var22)
  {
    v82 = *(float64x2_t *)(v7 + 59024);
    *v4 = *v10;
    v4[1] = v82;
    goto LABEL_114;
  }
  var0 = (CMTime)v6->var0;
  OZChannel::getValueAsDouble((OZChannel *)(v7 + 59888), &var0, 0.0);
  v12 = v11;
  v102 = (CMTime)v6->var0;
  OZChannel::getValueAsDouble((OZChannel *)(v7 + 60360), &v102, 0.0);
  v14 = v13;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v7 + 20464), MEMORY[0x1E0CA2E68], 0.0);
  v16 = OZChannel::getValueAsInt((OZChannel *)(v7 + 20464), MEMORY[0x1E0CA2E68], 0.0);
  __asm { FMOV            V0.2D, #-1.0 }
  v87 = _Q0;
  v4[1] = _Q0;
  if (OZChannel::getValueAsInt((OZChannel *)(v7 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 1 || !v6->var20)
  {
    v22 = *(_QWORD *)(v7 + 58824);
    v23 = *(_QWORD *)(v7 + 58832);
    OZRenderParams::OZRenderParams((OZRenderParams *)v101);
    v86 = v5;
    OZRenderParams::setState((OZRenderParams *)v101, v6);
    v101[0].var4 = 1;
    HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
    v84 = OZHostApplicationDelegateHandler::wantsToAdjustTextBoundsHeightUsingCapHeight(HostApplicationDelegate);
    v85 = v4;
    v25 = OZHostApplicationDelegateHandler::wantsToIgnoreTextBoundsOfTransparentObjects(HostApplicationDelegate);
    v26 = OZHostApplicationDelegateHandler::wantsToIgnoreTextBoundsOfNewlinesOfTranscriptions(HostApplicationDelegate);
    if (v22 == v23)
    {
LABEL_112:
      OZRenderParams::~OZRenderParams((OZRenderParams *)v101);
      v4 = v85;
      v10 = (float64x2_t *)(v7 + 59008);
      goto LABEL_113;
    }
    v27 = v26;
    v29 = ValueAsInt == 3 || v16 == 4;
    v83 = v29;
    while (1)
    {
      v30 = *(unsigned __int16 *)(*(_QWORD *)v22 + 120);
      if (!v25
        || (FaceOpacity = TXTextObject::getFaceOpacity(*(TXTextObject **)v22, (CMTime *)v6), v6->var25)
        || FaceOpacity <= -0.0000001
        || FaceOpacity >= 0.0000001)
      {
        v32 = v30 == 10 ? v27 : 0;
        if (v32 != 1
          || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)(v7 + 208) + 8), (int32x4_t)xmmword_1B30541F0)))) & 1) != 0)
        {
          v99 = 0uLL;
          v100 = v87;
          if (*(_BYTE *)(*(_QWORD *)v22 + 138))
            break;
        }
      }
LABEL_103:
      v22 += 16;
      if (v22 == v23)
        goto LABEL_112;
    }
    v33 = *(unsigned __int16 *)(*(_QWORD *)v22 + 120);
    if (v22 + 16 == v23)
    {
      if (v30 == 10)
      {
        TXTextLayout::getCursorRectForNewline((TXTextLayout *)v7, *(TXTextObject **)v22, (CMTime *)v6, (double *)v88);
        v99 = *(float64x2_t *)v88;
        v100 = *(float64x2_t *)&v88[16];
        if (*(double *)&v88[16] > 0.0)
        {
LABEL_101:
          if (v100.f64[1] > 0.0)
            PCRect<double>::operator|=(v85, &v99);
        }
        goto LABEL_103;
      }
      v38 = 1;
      goto LABEL_54;
    }
    v34 = *(_QWORD *)(v22 + 16);
    v35 = *(std::__shared_weak_count **)(v22 + 24);
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
    }
    if (*(_WORD *)(v34 + 120) == 10)
    {
      v38 = 1;
      if (!v35)
        goto LABEL_54;
    }
    else
    {
      v39 = *(unsigned int *)(v34 + 736);
      v40 = *v86;
      if ((int)v40 < 1)
      {
        if (!(_DWORD)v40)
        {
          v38 = 0;
          if (!v35)
            goto LABEL_54;
          goto LABEL_50;
        }
        v41 = 0;
      }
      else
      {
        v41 = *(_QWORD *)(v86 + 1);
      }
      v42 = 0;
      v38 = 1;
      do
      {
        if (v41 && *(_QWORD *)(v41 + 8 * v42) == v39)
          break;
        v38 = ++v42 < v40;
      }
      while (v40 != v42);
      if (!v35)
      {
LABEL_54:
        if (v30 != 10 && (!v38 || v33 != 32 || *(_QWORD *)(v7 + 58832) - *(_QWORD *)(v7 + 58824) <= 0x10uLL))
        {
          switch(v6->var29)
          {
            case 0:
              TypographicBounds = TXTextObject::getTypographicBounds(*(TXTextObject **)v22);
              v46 = *(float64x2_t *)(TypographicBounds + 16);
              v99 = *(float64x2_t *)TypographicBounds;
              v100 = v46;
              goto LABEL_97;
            case 1:
              v47 = *(_QWORD *)(*(_QWORD *)v22 + 264);
              if (v47)
              {
                v48 = *(OZChannel **)(v47 + 8);
                v49 = *(std::__shared_weak_count **)(v47 + 16);
                *(_QWORD *)v88 = v48;
                *(_QWORD *)&v88[8] = v49;
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldxr(v50);
                  while (__stxr(v51 + 1, v50));
                }
              }
              else
              {
                v49 = 0;
                v48 = 0;
                *(_OWORD *)v88 = 0uLL;
              }
              v97 = (CMTime)v6->var0;
              Size = TXTextStyle::getSize(v48, &v97, 0.0);
              if (v49)
              {
                v64 = (unint64_t *)&v49->__shared_owners_;
                do
                  v65 = __ldaxr(v64);
                while (__stlxr(v65 - 1, v64));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v66 = Size;
              CapHeight = TXTextObject::getCapHeight(*(TXTextObject **)v22, Size);
              TXTextObject::getBoundingRectForGlyph(*(TXTextObject **)v22, v66);
              goto LABEL_95;
            case 2:
              v52 = *(_QWORD *)(*(_QWORD *)v22 + 264);
              if (v52)
              {
                v53 = *(OZChannel **)(v52 + 8);
                v54 = *(std::__shared_weak_count **)(v52 + 16);
                *(_QWORD *)v88 = v53;
                *(_QWORD *)&v88[8] = v54;
                if (v54)
                {
                  v55 = (unint64_t *)&v54->__shared_owners_;
                  do
                    v56 = __ldxr(v55);
                  while (__stxr(v56 + 1, v55));
                }
              }
              else
              {
                v54 = 0;
                v53 = 0;
                *(_OWORD *)v88 = 0uLL;
              }
              v96 = (CMTime)v6->var0;
              v70 = TXTextStyle::getSize(v53, &v96, 0.0);
              if (v54)
              {
                v71 = (unint64_t *)&v54->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (!v72)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              v73 = v70;
              CapHeight = TXTextObject::getXHeight(*(TXTextObject **)v22, v70);
              TXTextObject::getBoundingRectForGlyph(*(TXTextObject **)v22, v73);
LABEL_95:
              v99 = (float64x2_t)v68;
              v74 = CapHeight;
              v100.f64[0] = v69;
              goto LABEL_96;
            case 3:
              v57 = *(TXTextObject **)v22;
              if (v83)
                TXTextObject::getImageBoundsOfAttribute((uint64_t)v57, v99.f64, v101, 5, 1, 1, 1, 0, 0.0, 0.0, 0.0, 0.0);
              else
                TXTextObject::getImageBoundsWithFourCornerPinning(v57, (CMTime *)v101, &v99, 5);
              if (*(_WORD *)(*(_QWORD *)v22 + 120) != 32)
                goto LABEL_97;
              v100.f64[0] = *(float64_t *)(TXTextObject::getTypographicBounds(*(TXTextObject **)v22) + 16);
              if (!v84)
                goto LABEL_97;
              v58 = *(_QWORD *)(*(_QWORD *)v22 + 264);
              if (v58)
              {
                v59 = *(OZChannel **)(v58 + 8);
                v60 = *(std::__shared_weak_count **)(v58 + 16);
                *(_QWORD *)v88 = v59;
                *(_QWORD *)&v88[8] = v60;
                if (v60)
                {
                  v61 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldxr(v61);
                  while (__stxr(v62 + 1, v61));
                }
              }
              else
              {
                v60 = 0;
                v59 = 0;
                *(_OWORD *)v88 = 0uLL;
              }
              v98 = (CMTime)v6->var0;
              v77 = TXTextStyle::getSize(v59, &v98, 0.0);
              if (v60)
              {
                v78 = (unint64_t *)&v60->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              v74 = TXTextObject::getCapHeight(*(TXTextObject **)v22, v77);
LABEL_96:
              v100.f64[1] = v74;
LABEL_97:
              v95 = 0x3FF0000000000000;
              v92 = 0x3FF0000000000000;
              v89 = 0x3FF0000000000000;
              *(_QWORD *)v88 = 0x3FF0000000000000;
              memset(&v88[8], 0, 32);
              v90 = 0u;
              v91 = 0u;
              v93 = 0u;
              v94 = 0u;
              TXTextObject::getTransformMatrix(*(_QWORD *)v22, (uint64_t)v88, (uint64_t)v101, 1, 0, 0, 0, v14, v12);
              v75 = PCMatrix44Tmpl<double>::transformRect<double>((double *)v88, v99.f64, (uint64_t)&v99);
              if (v100.f64[0] > 0.0 && v75)
                goto LABEL_101;
              goto LABEL_103;
            default:
              goto LABEL_97;
          }
        }
        goto LABEL_103;
      }
    }
LABEL_50:
    v43 = (unint64_t *)&v35->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
    goto LABEL_54;
  }
  (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v7 + 352))(v7, v4);
LABEL_113:
  *(_BYTE *)(v7 + 64324) = 0;
  v80 = v4[1];
  *(float64x2_t *)(v7 + 64328) = *v4;
  *(float64x2_t *)(v7 + 64344) = v80;
  TXTextLayout::offsetBoundsBasedOnScrollPosition((TXTextLayout *)v7, v4);
  v81 = v4[1];
  *v10 = *v4;
  v10[1] = v81;
  *(int32x4_t *)(v7 + 59040) = v105;
LABEL_114:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v104);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v106);
}

void sub_1B28F18D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a53);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&STACK[0x728]);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x740]);
  _Unwind_Resume(a1);
}

void TXTextLayout::getCursorRectForNewline(TXTextLayout *this@<X0>, TXTextObject *a2@<X1>, CMTime *a3@<X2>, double *a4@<X8>)
{
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  double DescenderForCharOffset;
  int ValueAsInt;
  uint64_t TypographicBounds;
  double *v16;
  double v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  double v37[3];
  CMTime v38;
  CMTime v39;
  double v40;
  double v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v8 = *((unsigned int *)a2 + 184);
  v9 = (uint64_t *)*((_QWORD *)this + 2378);
  v10 = (uint64_t *)*((_QWORD *)this + 2379);
  while (v9 != v10)
  {
    v11 = *v9;
    v12 = *(_QWORD *)(*v9 + 856);
    if (v12 <= v8 && *(_QWORD *)(v11 + 864) + v12 > v8)
      goto LABEL_7;
    ++v9;
  }
  v11 = *(v10 - 1);
LABEL_7:
  DescenderForCharOffset = TXParagraphStyle::getDescenderForCharOffset((TXParagraphStyle *)v11, v8);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0);
  TypographicBounds = TXTextObject::getTypographicBounds(a2);
  v16 = (double *)(TypographicBounds + 16);
  if (!ValueAsInt)
    v16 = (double *)(TypographicBounds + 24);
  v17 = *v16;
  v18 = *((_QWORD *)a2 + 33);
  if (v18)
  {
    v20 = *(_QWORD *)(v18 + 8);
    v19 = *(std::__shared_weak_count **)(v18 + 16);
    v42 = v20;
    v43 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
  }
  else
  {
    v20 = 0;
    v42 = 0;
    v43 = 0;
  }
  v23 = v17;
  if (!TXTextLayout::scaleAffectsLayout(this))
  {
    v37[0] = 0.0;
    v40 = 0.0;
    v41 = 0.0;
    v39 = *a3;
    OZChannelScale3D::getValue((OZChannelScale3D *)(v20 + 2864), &v39, v37, &v41, &v40, 0.0);
    v23 = v17 * v41;
    DescenderForCharOffset = DescenderForCharOffset * v41;
  }
  v38 = *a3;
  OZChannel::getValueAsDouble((OZChannel *)(v11 + 680), &v38, 0.0);
  v25 = v24;
  v26 = (*(double (**)(TXTextLayout *, CMTime *))(*(_QWORD *)this + 712))(this, a3);
  v40 = 0.0;
  v41 = 0.0;
  TXTextLayout::getCursorOrigin(this, &v41, &v40);
  v27 = v25 * v26;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0))
  {
    TXTextObject::getPosition(a2, a3, v37);
    v28 = DescenderForCharOffset + v37[0] - v17 - v27;
    v29 = v40;
    v30 = v23;
    v23 = 1.0;
  }
  else
  {
    OZChannel::getValueAsDouble((OZChannel *)(v42 + 3592), a3, 0.0);
    v32 = v31;
    v33 = v41;
    TXTextObject::getPosition(a2, a3, v37);
    v28 = v32 + v33;
    v29 = DescenderForCharOffset + v37[1] - v17 - v27;
    v30 = 1.0;
  }
  *a4 = v28;
  a4[1] = v29;
  a4[2] = v30;
  a4[3] = v23;
  v34 = v43;
  if (v43)
  {
    v35 = (unint64_t *)&v43->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_1B28F1C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::offsetBoundsBasedOnScrollPosition(TXTextLayout *a1, float64x2_t *a2)
{
  OZChannel *v4;
  uint64_t result;
  float64_t v6;
  float64x2_t v7;
  double ScrollPositionInPixels;

  ScrollPositionInPixels = TXTextLayout::getScrollPositionInPixels(a1);
  v4 = (OZChannel *)((char *)a1 + 20464);
  result = OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result == 1 || (result = OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0), (_DWORD)result == 3))
  {
    v6 = a2->f64[1] - ScrollPositionInPixels;
    a2->f64[0] = a2->f64[0] + 0.0;
    a2->f64[1] = v6;
  }
  else
  {
    result = OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0);
    if ((_DWORD)result == 4)
    {
      *(_QWORD *)&v7.f64[0] = *(_OWORD *)&vsubq_f64(*a2, (float64x2_t)*(unint64_t *)&ScrollPositionInPixels);
      v7.f64[1] = vaddq_f64(*a2, (float64x2_t)0).f64[1];
      *a2 = v7;
    }
  }
  return result;
}

void `non-virtual thunk to'TXTextLayout::getOriginalBounds(uint64_t a1)
{
  TXTextLayout::getOriginalBounds(a1 - 200);
}

BOOL TXTextLayout::getProjectedBounds(uint64_t a1, float64x2_t *a2, uint64_t *a3, uint64_t a4)
{
  OZScene **v8;
  int v9;
  unint64_t v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  float64x2_t v21;
  uint64_t *v22;
  uint64_t *v23;
  OZChannel *v24;
  const CMTime *v25;
  _BOOL4 v26;
  _BOOL4 v27;
  float64x2_t v28;
  uint64_t i;
  _OWORD *v30;
  __int128 v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  float64x2_t v36;
  double v37[16];
  float64x2_t v38;
  float64x2_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  float64x2_t v50[2];
  _BYTE v51[128];
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  OZRenderState v62[5];
  _BYTE v63[16];
  void *v64;
  double Seconds;
  float64x2_t v66;
  float64x2_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  CMTime time;
  _BYTE v79[24];

  v8 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v79, v8);
  v9 = *(unsigned __int8 *)(a1 + 52360);
  if (*(_BYTE *)(a1 + 52360))
  {
    time = *(CMTime *)a4;
    Seconds = CMTimeGetSeconds(&time);
    v66 = 0uLL;
    __asm { FMOV            V1.2D, #-1.0 }
    v36 = _Q1;
    v67 = _Q1;
    v64 = &unk_1E64FC188;
    v77 = 0x3FF0000000000000;
    v74 = 0x3FF0000000000000;
    v71 = 0x3FF0000000000000;
    v68 = 0x3FF0000000000000;
    v69 = 0u;
    v70 = 0u;
    v72 = 0u;
    v73 = 0u;
    v75 = 0u;
    v76 = 0u;
    if (OZValueCache<OZProjectedBoundsCacheItem>::find(a1 + 64032, (uint64_t)&v64, Seconds))
    {
      v15 = 0;
      v16 = 0;
      v17 = &v68;
      v18 = a3;
LABEL_4:
      v19 = 0;
      while (vabdd_f64(*(double *)&v17[v19], *(double *)&v18[v19]) < 0.0000001)
      {
        if (++v19 == 4)
        {
          v16 = v15 > 2;
          v18 += 4;
          v17 += 4;
          if (++v15 != 4)
            goto LABEL_4;
          goto LABEL_11;
        }
      }
      if (!v16)
        goto LABEL_13;
LABEL_11:
      if (a2)
      {
        v21 = v67;
        *a2 = v66;
        a2[1] = v21;
      }
    }
    else
    {
LABEL_13:
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v63);
      TXTextLayout::doLayout((TXTextLayout *)a1, (const OZRenderState *)a4, (PCHash128 *)v63);
      a2[1] = v36;
      OZRenderParams::OZRenderParams((OZRenderParams *)v62);
      OZRenderParams::setState((OZRenderParams *)v62, (const OZRenderState *)a4);
      v62[0].var4 = 1;
      v61 = 0x3FF0000000000000;
      v58 = 0x3FF0000000000000;
      v55 = 0x3FF0000000000000;
      v52 = 0x3FF0000000000000;
      v53 = 0u;
      v54 = 0u;
      v56 = 0u;
      v57 = 0u;
      v59 = 0u;
      v60 = 0u;
      (*(void (**)(uint64_t, uint64_t *, OZRenderState *))(*(_QWORD *)(a1 + 200) + 1256))(a1 + 200, &v52, v62);
      v33 = a1 + 200;
      v34 = a1 + 64032;
      v35 = v9;
      PCMatrix44Tmpl<double>::operator*((uint64_t)a3, (__int128 *)&v52, (uint64_t)v51);
      v23 = *(uint64_t **)(a1 + 58824);
      v22 = *(uint64_t **)(a1 + 58832);
      if (v23 != v22)
      {
        v24 = (OZChannel *)(a1 + 20464);
        v25 = (const CMTime *)MEMORY[0x1E0CA2E68];
        do
        {
          v50[0] = 0uLL;
          v50[1] = v36;
          if (*(_BYTE *)(*v23 + 138))
          {
            if (OZChannel::getValueAsInt(v24, v25, 0.0) == 3
              || OZChannel::getValueAsInt(v24, v25, 0.0) == 4)
            {
              TXTextObject::getImageBoundsOfAttribute(*v23, v50[0].f64, v62, 5, 1, 1, 1, 0, 0.0, 0.0, 0.0, 0.0);
            }
            else
            {
              TXTextObject::getImageBoundsWithFourCornerPinning((TXTextObject *)*v23, (CMTime *)v62, v50, 5);
            }
            v49 = 0x3FF0000000000000;
            v46 = 0x3FF0000000000000;
            v43 = 0x3FF0000000000000;
            v40 = 0x3FF0000000000000;
            v41 = 0u;
            v42 = 0u;
            v44 = 0u;
            v45 = 0u;
            v47 = 0u;
            v48 = 0u;
            TXTextObject::getTransformMatrix(*v23, (uint64_t)&v40, (uint64_t)v62, 1, 1, 0, 1, 0.0, 0.0);
            v38 = 0uLL;
            v39 = v36;
            PCMatrix44Tmpl<double>::operator*((uint64_t)v51, (__int128 *)&v40, (uint64_t)v37);
            v26 = PCMatrix44Tmpl<double>::transformRect<double>(v37, v50[0].f64, (uint64_t)&v38);
            v27 = v39.f64[0] > 0.0 && v26;
            if (v27 && v39.f64[1] > 0.0)
              PCRect<double>::operator|=(a2, &v38);
          }
          v23 += 2;
        }
        while (v23 != v22);
      }
      v9 = v35;
      if (*(_BYTE *)(a4 + 241))
        OZElement::expandBoundsToIncludeDropShadow(v33, a2, (const CMTime *)a4);
      v28 = a2[1];
      v66 = *a2;
      v67 = v28;
      if (&v68 != a3)
      {
        for (i = 0; i != 16; i += 4)
        {
          v30 = (_OWORD *)((char *)&v68 + i * 8);
          v31 = *(_OWORD *)&a3[i + 2];
          *v30 = *(_OWORD *)&a3[i];
          v30[1] = v31;
        }
      }
      OZValueCache<OZProjectedBoundsCacheItem>::add(v34, (uint64_t)&v64);
      OZRenderParams::~OZRenderParams((OZRenderParams *)v62);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    a2[1] = _Q0;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v79);
  return v9 != 0;
}

void sub_1B28F219C(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x280]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t OZValueCache<OZProjectedBoundsCacheItem>::find(uint64_t a1, uint64_t a2, double a3)
{
  std::mutex *v6;
  uint64_t i;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;

  v6 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 40));
  for (i = *(_QWORD *)(a1 + 16); ; i = *(_QWORD *)(i + 8))
  {
    if (i == a1 + 8)
    {
      v9 = 0;
      goto LABEL_12;
    }
    v8 = *(double *)(i + 24);
    if (v8 == a3)
      break;
  }
  *(double *)(a2 + 8) = v8;
  v10 = *(_OWORD *)(i + 48);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(i + 32);
  *(_OWORD *)(a2 + 32) = v10;
  if (i + 16 != a2)
  {
    v11 = 0;
    v12 = a2 + 48;
    v13 = i + 64;
    do
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v12 + j) = *(_QWORD *)(v13 + j);
      ++v11;
      v12 += 32;
      v13 += 32;
    }
    while (v11 != 4);
  }
  v9 = 1;
LABEL_12:
  PCSharedMutex::unlock_shared(v6);
  return v9;
}

void OZValueCache<OZProjectedBoundsCacheItem>::add(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v4 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock((std::mutex *)(a1 + 40));
  std::list<OZProjectedBoundsCacheItem>::remove_if<OZ_VC_SameKey<OZProjectedBoundsCacheItem>>(a1 + 8, *(double *)(a2 + 8));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 >= *(_QWORD *)(a1 + 32))
  {
    v6 = *(uint64_t **)(a1 + 16);
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = v6[1];
    *(_QWORD *)v6[1] = v7;
    *(_QWORD *)(a1 + 24) = v5 - 1;
    (*(void (**)(uint64_t *))v6[2])(v6 + 2);
    operator delete(v6);
  }
  v8 = operator new(0xC0uLL);
  v8[3] = *(_QWORD *)(a2 + 8);
  v9 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 3) = v9;
  v8[1] = a1 + 8;
  v8[2] = &unk_1E64FC188;
  v10 = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v8 + 8) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v8 + 9) = v10;
  v11 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v8 + 10) = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v8 + 11) = v11;
  v12 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v8 + 4) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v8 + 5) = v12;
  v13 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v8 + 6) = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v8 + 7) = v13;
  v14 = *(_QWORD *)(a1 + 8);
  *v8 = v14;
  *(_QWORD *)(v14 + 8) = v8;
  *(_QWORD *)(a1 + 8) = v8;
  ++*(_QWORD *)(a1 + 24);
  PCSharedMutex::unlock(v4);
}

void sub_1B28F23B4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL `non-virtual thunk to'TXTextLayout::getProjectedBounds(uint64_t a1, float64x2_t *a2, uint64_t *a3, uint64_t a4)
{
  return TXTextLayout::getProjectedBounds(a1 - 200, a2, a3, a4);
}

void TXTextLayout::getBoundsIgnoringParagraphMargins(TXTextLayout *this@<X0>, OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  __int128 v12;
  OZScene **v13;
  TXTextObject **v14;
  TXTextObject **v15;
  TXTextObject *v16;
  TXTextObject **v17;
  int v18;
  char v19;
  char v20;
  uint64_t TypographicBounds;
  __int128 v22;
  uint64_t v23;
  OZChannel *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  OZChannel *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  double v37;
  uint64_t v38;
  OZChannel *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  float Size;
  unint64_t *v44;
  unint64_t v45;
  double v46;
  float CapHeight;
  unint64_t v48;
  double v49;
  float v50;
  unint64_t *v51;
  unint64_t v52;
  double v53;
  float v54;
  unint64_t *v55;
  unint64_t v56;
  double v57;
  float v58;
  unint64_t v59;
  double v60;
  __int128 v61;
  char *v62;
  BOOL v63;
  __int128 v64;
  _BYTE v65[40];
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  CMTime v73;
  CMTime var0;
  CMTime v75;
  float64x2_t v76;
  double v77[3];
  _BYTE v78[48];
  int v79;
  _BYTE v80[16];
  _BYTE v81[8];
  void *v82;
  double Seconds;
  float64x2_t v84;
  __int128 v85;
  CMTime time;

  v6 = (char *)this + 58824;
  time = (CMTime)a2->var0;
  Seconds = CMTimeGetSeconds(&time);
  v82 = &unk_1E64FC1E8;
  v84 = 0uLL;
  __asm { FMOV            V1.2D, #-1.0 }
  v64 = _Q1;
  v85 = _Q1;
  if (OZValueCache<OZBoundsCacheItem>::find((uint64_t)this + 63888, (uint64_t)&v82, Seconds)
    && a2->var29 == *((_DWORD *)v6 + 1264))
  {
    v12 = v85;
    *(float64x2_t *)a3 = v84;
    *(_OWORD *)(a3 + 16) = v12;
    return;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a3 + 16) = v64;
  v13 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v81, v13);
  if (*((_BYTE *)this + 52360))
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v80);
    TXTextLayout::doLayout(this, a2, (PCHash128 *)v80);
    v14 = *(TXTextObject ***)v6;
    v15 = (TXTextObject **)*((_QWORD *)v6 + 1);
    OZRenderParams::OZRenderParams((OZRenderParams *)v78);
    v62 = v6;
    OZRenderParams::setState((OZRenderParams *)v78, a2);
    v79 = 1;
    v63 = *((_QWORD *)this + 2423) == 1;
    if (v14 != v15)
    {
      while (1)
      {
        if (!*((_BYTE *)*v14 + 138))
          goto LABEL_20;
        v76 = 0uLL;
        *(_OWORD *)v77 = v64;
        v17 = v14 + 2;
        v16 = *v14;
        v18 = *((unsigned __int16 *)*v14 + 60);
        if (v14 + 2 == v15 && v18 == 10)
        {
          TXTextLayout::getCursorRectForNewline(this, v16, (CMTime *)a2, (double *)v65);
          v19 = 0;
          v76 = *(float64x2_t *)v65;
          *(_OWORD *)v77 = *(_OWORD *)&v65[16];
LABEL_10:
          if (v77[0] <= 0.0 || v77[1] <= 0.0)
          {
LABEL_60:
            if ((v19 & 1) != 0)
              break;
            v14 += 2;
            if (v17 == v15)
              break;
          }
          else
          {
            PCRect<double>::operator|=((float64x2_t *)a3, &v76);
            if (v17 == v15)
              v20 = 1;
            else
              v20 = v19;
            v14 += 2;
            if ((v20 & 1) != 0)
              break;
          }
        }
        else
        {
          if (v18 != 10)
          {
            switch(a2->var29)
            {
              case 0:
                TypographicBounds = TXTextObject::getTypographicBounds(*v14);
                v19 = 0;
                v22 = *(_OWORD *)(TypographicBounds + 16);
                v76 = *(float64x2_t *)TypographicBounds;
                *(_OWORD *)v77 = v22;
                break;
              case 1:
                v23 = *((_QWORD *)v16 + 33);
                if (v23)
                {
                  v24 = *(OZChannel **)(v23 + 8);
                  v25 = *(std::__shared_weak_count **)(v23 + 16);
                  *(_QWORD *)v65 = v24;
                  *(_QWORD *)&v65[8] = v25;
                  if (v25)
                  {
                    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
                    do
                      v27 = __ldxr(p_shared_owners);
                    while (__stxr(v27 + 1, p_shared_owners));
                  }
                }
                else
                {
                  v25 = 0;
                  v24 = 0;
                  *(_OWORD *)v65 = 0uLL;
                }
                var0 = (CMTime)a2->var0;
                Size = TXTextStyle::getSize(v24, &var0, 0.0);
                if (v25)
                {
                  v44 = (unint64_t *)&v25->__shared_owners_;
                  do
                    v45 = __ldaxr(v44);
                  while (__stlxr(v45 - 1, v44));
                  if (!v45)
                  {
                    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                    std::__shared_weak_count::__release_weak(v25);
                  }
                }
                v46 = Size;
                CapHeight = TXTextObject::getCapHeight(*v14, Size);
                TXTextObject::getBoundingRectForGlyph(*v14, v46);
                goto LABEL_56;
              case 2:
                v28 = *((_QWORD *)v16 + 33);
                if (v28)
                {
                  v29 = *(OZChannel **)(v28 + 8);
                  v30 = *(std::__shared_weak_count **)(v28 + 16);
                  *(_QWORD *)v65 = v29;
                  *(_QWORD *)&v65[8] = v30;
                  if (v30)
                  {
                    v31 = (unint64_t *)&v30->__shared_owners_;
                    do
                      v32 = __ldxr(v31);
                    while (__stxr(v32 + 1, v31));
                  }
                }
                else
                {
                  v30 = 0;
                  v29 = 0;
                  *(_OWORD *)v65 = 0uLL;
                }
                v73 = (CMTime)a2->var0;
                v50 = TXTextStyle::getSize(v29, &v73, 0.0);
                if (v30)
                {
                  v51 = (unint64_t *)&v30->__shared_owners_;
                  do
                    v52 = __ldaxr(v51);
                  while (__stlxr(v52 - 1, v51));
                  if (!v52)
                  {
                    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                    std::__shared_weak_count::__release_weak(v30);
                  }
                }
                v53 = v50;
                CapHeight = TXTextObject::getXHeight(*v14, v50);
                TXTextObject::getBoundingRectForGlyph(*v14, v53);
LABEL_56:
                v76 = (float64x2_t)v48;
                v37 = CapHeight;
                v77[0] = v49;
                goto LABEL_57;
              case 3:
                TXTextObject::getImageBounds(*v14, a2, (uint64_t)v65);
                v76 = *(float64x2_t *)v65;
                *(_OWORD *)v77 = *(_OWORD *)&v65[16];
                if (!*((_BYTE *)*v14 + 64))
                  goto LABEL_34;
                v19 = 0;
                v77[1] = 0.0;
                break;
              case 4:
                v33 = TXTextObject::getTypographicBounds(*v14);
                v34 = *(_OWORD *)(v33 + 16);
                v76 = *(float64x2_t *)v33;
                *(_QWORD *)&v77[0] = v34;
                v77[1] = v76.f64[1] + *((double *)&v34 + 1);
                v76.f64[1] = 0.0;
                goto LABEL_58;
              case 5:
                v35 = TXTextObject::getTypographicBounds(*v14);
                v36 = *(_OWORD *)(v35 + 16);
                v76 = *(float64x2_t *)v35;
                *(_OWORD *)v77 = v36;
                v37 = -v76.f64[1];
LABEL_57:
                v77[1] = v37;
LABEL_58:
                v19 = v63;
                break;
              case 6:
                v38 = *((_QWORD *)v16 + 33);
                if (v38)
                {
                  v39 = *(OZChannel **)(v38 + 8);
                  v40 = *(std::__shared_weak_count **)(v38 + 16);
                  *(_QWORD *)v65 = v39;
                  *(_QWORD *)&v65[8] = v40;
                  if (v40)
                  {
                    v41 = (unint64_t *)&v40->__shared_owners_;
                    do
                      v42 = __ldxr(v41);
                    while (__stxr(v42 + 1, v41));
                  }
                }
                else
                {
                  v40 = 0;
                  v39 = 0;
                  *(_OWORD *)v65 = 0uLL;
                }
                v75 = (CMTime)a2->var0;
                v54 = TXTextStyle::getSize(v39, &v75, 0.0);
                if (v40)
                {
                  v55 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                    std::__shared_weak_count::__release_weak(v40);
                  }
                }
                v57 = v54;
                v58 = TXTextObject::getCapHeight(*v14, v54);
                TXTextObject::getBoundingRectForGlyph(*v14, v57);
                v19 = 0;
                v76 = (float64x2_t)v59;
                v77[0] = v60;
                v77[1] = v58;
                break;
              default:
LABEL_34:
                v19 = 0;
                break;
            }
            v72 = 0x3FF0000000000000;
            v69 = 0x3FF0000000000000;
            v66 = 0x3FF0000000000000;
            *(_QWORD *)v65 = 0x3FF0000000000000;
            memset(&v65[8], 0, 32);
            v67 = 0u;
            v68 = 0u;
            v70 = 0u;
            v71 = 0u;
            TXTextObject::getTransformMatrix((uint64_t)*v14, (uint64_t)v65, (uint64_t)v78, 1, 1, 0, 1, 0.0, 0.0);
            if (!PCMatrix44Tmpl<double>::transformRect<double>((double *)v65, v76.f64, (uint64_t)&v76))
              goto LABEL_60;
            goto LABEL_10;
          }
LABEL_20:
          v14 += 2;
          if (v14 == v15)
            break;
        }
      }
    }
    v61 = *(_OWORD *)(a3 + 16);
    v84 = *(float64x2_t *)a3;
    v85 = v61;
    OZValueCache<OZBoundsCacheItem>::add((uint64_t)this + 63888, (uint64_t)&v82);
    *((_DWORD *)v62 + 1264) = a2->var29;
    OZRenderParams::~OZRenderParams((OZRenderParams *)v78);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v81);
}

void sub_1B28F2974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;

  OZRenderParams::~OZRenderParams((OZRenderParams *)&a48);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v48 - 184));
  _Unwind_Resume(a1);
}

uint64_t OZValueCache<OZBoundsCacheItem>::find(uint64_t a1, uint64_t a2, double a3)
{
  std::mutex *v6;
  uint64_t i;
  double v8;
  uint64_t v9;
  __int128 v10;

  v6 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 40));
  for (i = *(_QWORD *)(a1 + 16); ; i = *(_QWORD *)(i + 8))
  {
    if (i == a1 + 8)
    {
      v9 = 0;
      goto LABEL_7;
    }
    v8 = *(double *)(i + 24);
    if (v8 == a3)
      break;
  }
  *(double *)(a2 + 8) = v8;
  v10 = *(_OWORD *)(i + 48);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(i + 32);
  *(_OWORD *)(a2 + 32) = v10;
  v9 = 1;
LABEL_7:
  PCSharedMutex::unlock_shared(v6);
  return v9;
}

void OZValueCache<OZBoundsCacheItem>::add(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;

  v4 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock((std::mutex *)(a1 + 40));
  std::list<OZProjectedBoundsCacheItem>::remove_if<OZ_VC_SameKey<OZProjectedBoundsCacheItem>>(a1 + 8, *(double *)(a2 + 8));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 >= *(_QWORD *)(a1 + 32))
  {
    v6 = *(uint64_t **)(a1 + 16);
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = v6[1];
    *(_QWORD *)v6[1] = v7;
    *(_QWORD *)(a1 + 24) = v5 - 1;
    (*(void (**)(uint64_t *))v6[2])(v6 + 2);
    operator delete(v6);
  }
  v8 = operator new(0x40uLL);
  v8[3] = *(_QWORD *)(a2 + 8);
  v8[1] = a1 + 8;
  v8[2] = &unk_1E64FC1E8;
  v9 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 3) = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *v8 = v10;
  *(_QWORD *)(v10 + 8) = v8;
  *(_QWORD *)(a1 + 8) = v8;
  ++*(_QWORD *)(a1 + 24);
  PCSharedMutex::unlock(v4);
}

void sub_1B28F2B48(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::getBoundsForLinkBehavior(TXTextLayout *this@<X0>, OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  TXTextLayout::getBoundsIgnoringParagraphMargins((TXTextLayout *)((char *)this - 200), a2, a3);
}

uint64_t TXTextLayout::getBoundsForHitCheck(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 200) + 1488))(a1 + 200);
}

uint64_t TXTextLayout::getLocalVolumeForHitCheck(PCString *a1, uint64_t a2, uint64_t a3)
{
  OZChannel *v6;
  char *StringPtr;
  uint64_t result;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;

  v6 = (OZChannel *)&a1[2558];
  if (OZChannel::getValueAsInt((OZChannel *)&a1[2558], MEMORY[0x1E0CA2E68], 0.0) == 1)
    return ((uint64_t (*)(PCString *, uint64_t, uint64_t))a1->var0[13].length)(a1, a2, a3);
  if (OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0) == 3)
    return ((uint64_t (*)(PCString *, uint64_t, uint64_t))a1->var0[13].length)(a1, a2, a3);
  if (OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0) == 4)
    return ((uint64_t (*)(PCString *, _QWORD, _QWORD))a1->var0[13].length)(a1, a2, a3);
  StringPtr = TXChannelString::getStringPtr((TXChannelString *)&a1[2381]);
  if (PCString::size((PCString *)StringPtr))
  {
    if ((TXTextLayout::isAllWhitespace(a1) & 1) == 0)
      return ((uint64_t (*)(PCString *, _QWORD, _QWORD))a1->var0[13].length)(a1, a2, a3);
  }
  v17 = 0.0;
  v18 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v19 = _Q0;
  result = ((uint64_t (*)(PCString *, double *, uint64_t))a1->var0[14].isa)(a1, &v17, a3);
  v14 = v18;
  v15 = v17 + *(double *)&v19;
  v16 = v18 + *((double *)&v19 + 1);
  *(double *)a2 = v17;
  *(double *)(a2 + 8) = v15;
  *(double *)(a2 + 16) = v14;
  *(double *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void TXTextLayout::getLocalVolume(uint64_t a1)
{
  uint64_t v1;
  const OZRenderState *v2;
  const OZRenderState *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  OZScene **v13;
  TXTextObject ***v14;
  TXTextObject **v15;
  TXTextObject **v16;
  const CMTime *v17;
  double ExtrusionDepth;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int ValueAsInt;
  unint64_t *v25;
  unint64_t v26;
  int8x8_t *Hash;
  __int128 v28;
  __int128 v29;
  TXTextObject **v30;
  TXTextObject **v31;
  uint64_t TypographicBounds;
  __int128 v34;
  uint64_t v35;
  OZChannel *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t v40;
  OZChannel *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  float Size;
  unint64_t *v46;
  unint64_t v47;
  double v48;
  float CapHeight;
  unint64_t v50;
  uint64_t v51;
  float v52;
  unint64_t *v53;
  unint64_t v54;
  double v55;
  int v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  __int128 *v63;
  double v64;
  __int128 *v65;
  double v66;
  __int128 *v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v77;
  double v78;
  double *v79;
  double ScrollPositionInPixels;
  __int128 v81;
  __int128 v82;
  double v83;
  double v84;
  double v85;
  OZChannel *v86;
  __int128 v87;
  char v88;
  double *v89;
  double *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  CMTime v101;
  CMTime var0;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  float64x2_t v106;
  __int128 v107;
  int32x4_t v108;
  _BYTE v109[8];
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115[4];
  int v116;
  uint64_t v117;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v117 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 304))(v1))
  {
    OZElement::getLocalVolume(v6 + 200, v5);
    return;
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 296))(v6);
  if (OZChannel::getValueAsInt((OZChannel *)(v6 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 1 || (v7 & 1) != 0)
  {
    v13 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)v6);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v109, v13);
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v108);
    TXTextLayout::doLayout((TXTextLayout *)v6, v3, (PCHash128 *)&v108);
    v14 = (TXTextObject ***)(v6 + 58824);
    v88 = v7;
    if (v7)
    {
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v113);
      PCHashWriteStream::writeValue((int8x8_t *)&v113, 1);
      v15 = *v14;
      v16 = *(TXTextObject ***)(v6 + 58832);
      if (*v14 != v16)
      {
        v17 = (const CMTime *)MEMORY[0x1E0CA2E68];
        do
        {
          ExtrusionDepth = TXTextObject::getExtrusionDepth(*v15, (const CMTime *)v3);
          PCHashWriteStream::writeValue((int8x8_t *)&v113, ExtrusionDepth);
          v19 = *((_QWORD *)*v15 + 33);
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 8);
            v21 = *(_QWORD *)(v19 + 16);
            v91 = v20;
            *(_QWORD *)&v92 = v21;
            if (v21)
            {
              v22 = (unint64_t *)(v21 + 8);
              do
                v23 = __ldxr(v22);
              while (__stxr(v23 + 1, v22));
            }
          }
          else
          {
            v20 = 0;
            v91 = 0;
            *(_QWORD *)&v92 = 0;
          }
          ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v20 + 41056), v17, 0.0);
          PCHashWriteStream::writeValue((int8x8_t *)&v113, ValueAsInt);
          if ((_QWORD)v92)
          {
            v25 = (unint64_t *)(v92 + 8);
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              (*(void (**)(_QWORD))(*(_QWORD *)v92 + 16))(v92);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v92);
            }
          }
          v15 += 2;
        }
        while (v15 != v16);
      }
      Hash = PCHashWriteStream::getHash((int8x8_t *)&v113);
      PCHash128::operator+=(v108.i32, (int *)Hash);
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v113);
    }
    v90 = (double *)(v6 + 59056);
    if (*(double *)(v6 + 59056) <= *(double *)(v6 + 59064)
      && *(double *)(v6 + 59072) <= *(double *)(v6 + 59080)
      && *(double *)(v6 + 59088) <= *(double *)(v6 + 59096)
      && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v108, *(int32x4_t *)(v6 + 59104))))) & 1) == 0
      && !*(_BYTE *)(v6 + 19392)
      && !TXTextLayout::isAnyParagraphDirty((TXTextLayout *)v6)
      && OZChannel::getValueAsInt((OZChannel *)(v6 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 2
      && !v3->var22)
    {
      v28 = *(_OWORD *)v90;
      v29 = *(_OWORD *)(v6 + 59088);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)(v6 + 59072);
      *(_OWORD *)(v5 + 32) = v29;
      *(_OWORD *)v5 = v28;
LABEL_123:
      OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v109);
      return;
    }
    *(_OWORD *)(v6 + 59088) = xmmword_1B304F270;
    *(_OWORD *)(v6 + 59072) = xmmword_1B304F270;
    *(_OWORD *)(v6 + 59056) = xmmword_1B304F270;
    OZRenderParams::OZRenderParams((OZRenderParams *)&v113);
    OZRenderParams::setState((OZRenderParams *)&v113, v3);
    v89 = (double *)(v6 + 59064);
    v86 = (OZChannel *)(v6 + 20464);
    v116 = 1;
    v31 = *v14;
    v30 = *(TXTextObject ***)(v6 + 58832);
    if (*v14 != v30)
    {
      __asm { FMOV            V0.2D, #-1.0 }
      v87 = _Q0;
      do
      {
        v106 = 0uLL;
        v107 = v87;
        v104 = xmmword_1B304F270;
        v105 = xmmword_1B304F270;
        v103 = xmmword_1B304F270;
        if ((v88 & 1) != 0)
        {
          TXTextObject::getBoundingImageVolume(*v31, (uint64_t)&v103, (uint64_t)&v113);
        }
        else
        {
          switch(v3->var29)
          {
            case 0:
              TypographicBounds = TXTextObject::getTypographicBounds(*v31);
              v34 = *(_OWORD *)(TypographicBounds + 16);
              v106 = *(float64x2_t *)TypographicBounds;
              v107 = v34;
              break;
            case 1:
              v35 = *((_QWORD *)*v31 + 33);
              if (v35)
              {
                v36 = *(OZChannel **)(v35 + 8);
                v37 = *(std::__shared_weak_count **)(v35 + 16);
                v91 = (uint64_t)v36;
                *(_QWORD *)&v92 = v37;
                if (v37)
                {
                  p_shared_owners = (unint64_t *)&v37->__shared_owners_;
                  do
                    v39 = __ldxr(p_shared_owners);
                  while (__stxr(v39 + 1, p_shared_owners));
                }
              }
              else
              {
                v37 = 0;
                v36 = 0;
                v91 = 0;
                *(_QWORD *)&v92 = 0;
              }
              var0 = (CMTime)v3->var0;
              Size = TXTextStyle::getSize(v36, &var0, 0.0);
              if (v37)
              {
                v46 = (unint64_t *)&v37->__shared_owners_;
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 - 1, v46));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                  std::__shared_weak_count::__release_weak(v37);
                }
              }
              v48 = Size;
              CapHeight = TXTextObject::getCapHeight(*v31, Size);
              TXTextObject::getBoundingRectForGlyph(*v31, v48);
              goto LABEL_63;
            case 2:
              v40 = *((_QWORD *)*v31 + 33);
              if (v40)
              {
                v41 = *(OZChannel **)(v40 + 8);
                v42 = *(std::__shared_weak_count **)(v40 + 16);
                v91 = (uint64_t)v41;
                *(_QWORD *)&v92 = v42;
                if (v42)
                {
                  v43 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v44 = __ldxr(v43);
                  while (__stxr(v44 + 1, v43));
                }
              }
              else
              {
                v42 = 0;
                v41 = 0;
                v91 = 0;
                *(_QWORD *)&v92 = 0;
              }
              v101 = (CMTime)v3->var0;
              v52 = TXTextStyle::getSize(v41, &v101, 0.0);
              if (v42)
              {
                v53 = (unint64_t *)&v42->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              v55 = v52;
              CapHeight = TXTextObject::getXHeight(*v31, v52);
              TXTextObject::getBoundingRectForGlyph(*v31, v55);
LABEL_63:
              v106 = (float64x2_t)v50;
              *(_QWORD *)&v107 = v51;
              *((double *)&v107 + 1) = CapHeight;
              break;
            case 3:
              TXTextObject::getImageBoundsWithFourCornerPinning(*v31, (CMTime *)&v113, &v106, 5);
              break;
            default:
              break;
          }
          *(float64_t *)&v103 = v106.f64[0];
          *((double *)&v103 + 1) = v106.f64[0] + *(double *)&v107;
          *(float64_t *)&v104 = v106.f64[1];
          *((double *)&v104 + 1) = v106.f64[1] + *((double *)&v107 + 1);
          v105 = 0uLL;
        }
        v100 = 0x3FF0000000000000;
        v97 = 0x3FF0000000000000;
        v94 = 0x3FF0000000000000;
        v91 = 0x3FF0000000000000;
        v92 = 0u;
        v93 = 0u;
        v95 = 0u;
        v96 = 0u;
        v98 = 0u;
        v99 = 0u;
        TXTextObject::getTransformMatrix((uint64_t)*v31, (uint64_t)&v91, (uint64_t)&v113, 1, 1, 0, 1, 0.0, 0.0);
        v56 = 0;
        v57 = -1.0;
        v58 = 1.0;
        v59 = 1.0;
        v60 = -1.0;
        v61 = 1.0;
        v62 = -1.0;
        do
        {
          v63 = (__int128 *)((char *)&v103 + 8);
          if ((v56 & 1) != 0)
            v63 = &v103;
          v64 = *(double *)v63;
          v65 = (__int128 *)((char *)&v104 + 8);
          if ((v56 & 2) != 0)
            v65 = &v104;
          v66 = *(double *)v65;
          v67 = (__int128 *)((char *)&v105 + 8);
          if ((v56 & 4) != 0)
            v67 = &v105;
          v68 = *(double *)v67;
          v110 = v64;
          v111 = v66;
          v112 = v68;
          PCMatrix44Tmpl<double>::transform<double>((double *)&v91, &v110, &v110);
          if (v56)
          {
            if (v58 >= v110)
              v58 = v110;
            if (v57 <= v110)
              v57 = v110;
            if (v59 >= v111)
              v59 = v111;
            if (v60 <= v111)
              v60 = v111;
            if (v61 >= v112)
              v61 = v112;
            if (v62 <= v112)
              v62 = v112;
          }
          else
          {
            v60 = v111;
            v62 = v112;
            v57 = v110;
            v58 = v110;
            v59 = v111;
            v61 = v112;
          }
          ++v56;
        }
        while (v56 != 8);
        v69 = *v90;
        v70 = *v89;
        if (*v90 <= *v89
          && (v72 = *(double *)(v6 + 59072), v71 = *(double *)(v6 + 59080), v72 <= v71)
          && (v74 = *(double *)(v6 + 59088), v73 = *(double *)(v6 + 59096), v74 <= v73))
        {
          if (v58 > v57 || v59 > v60 || v61 > v62)
            goto LABEL_93;
          if (v69 >= v58)
            v69 = v58;
          if (v70 <= v57)
            v70 = v57;
          *(double *)(v6 + 59056) = v69;
          *(double *)(v6 + 59064) = v70;
          if (v72 >= v59)
            v77 = v59;
          else
            v77 = v72;
          if (v71 <= v60)
            v71 = v60;
          *(double *)(v6 + 59072) = v77;
          *(double *)(v6 + 59080) = v71;
          if (v74 >= v61)
            v78 = v61;
          else
            v78 = v74;
          *(double *)(v6 + 59088) = v78;
          if (v73 > v62)
            v62 = v73;
        }
        else
        {
          *(double *)(v6 + 59056) = v58;
          *(double *)(v6 + 59064) = v57;
          *(double *)(v6 + 59072) = v59;
          *(double *)(v6 + 59080) = v60;
          *(double *)(v6 + 59088) = v61;
        }
        *(double *)(v6 + 59096) = v62;
LABEL_93:
        v31 += 2;
      }
      while (v31 != v30);
    }
    v79 = (double *)(v6 + 59064);
    if (OZChannel::getValueAsInt(v86, MEMORY[0x1E0CA2E68], 0.0) == 1
      || OZChannel::getValueAsInt(v86, MEMORY[0x1E0CA2E68], 0.0) == 3)
    {
      *(double *)(v6 + 59072) = 0.0
                              - TXTextLayout::getScrollPositionInPixels((TXTextLayout *)v6)
                              + *(double *)(v6 + 59072);
      ScrollPositionInPixels = TXTextLayout::getScrollPositionInPixels((TXTextLayout *)v6);
      v79 = (double *)(v6 + 59080);
    }
    else
    {
      if (OZChannel::getValueAsInt(v86, MEMORY[0x1E0CA2E68], 0.0) != 4)
        goto LABEL_122;
      *v90 = 0.0 - TXTextLayout::getScrollPositionInPixels((TXTextLayout *)v6) + *v90;
      ScrollPositionInPixels = TXTextLayout::getScrollPositionInPixels((TXTextLayout *)v6);
    }
    *v79 = 0.0 - ScrollPositionInPixels + *v79;
LABEL_122:
    v81 = *(_OWORD *)v90;
    v82 = *(_OWORD *)(v6 + 59088);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(v6 + 59072);
    *(_OWORD *)(v5 + 32) = v82;
    *(_OWORD *)v5 = v81;
    *(int32x4_t *)(v6 + 59104) = v108;
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v113);
    goto LABEL_123;
  }
  v113 = 0.0;
  v114 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)v115 = _Q0;
  if (v3->var20)
    (*(void (**)(uint64_t, double *))(*(_QWORD *)v6 + 352))(v6, &v113);
  else
    (*(void (**)(uint64_t, double *, const OZRenderState *))(*(_QWORD *)(v6 + 200) + 1488))(v6 + 200, &v113, v3);
  v83 = v114;
  v84 = v113 + v115[0];
  v85 = v114 + v115[1];
  *(double *)v5 = v113;
  *(double *)(v5 + 8) = v84;
  *(double *)(v5 + 16) = v83;
  *(double *)(v5 + 24) = v85;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
}

void sub_1B28F354C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a57);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::getLocalVolume(uint64_t a1)
{
  TXTextLayout::getLocalVolume(a1 - 200);
}

uint64_t TXTextLayout::getResolution(TXTextLayout *this, double *a2, double *a3, const OZRenderState *a4)
{
  uint64_t v5;

  v5 = 0;
  return (*(uint64_t (**)(char *, double *, double *, uint64_t *, const OZRenderState *, uint64_t))(*((_QWORD *)this + 25) + 1312))((char *)this + 200, a2, a3, &v5, a4, 1);
}

void TXTextLayout::updateLineBreaksByHardLine(TXTextLayout *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  char *v7;
  int v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (char *)this + 52208;
  v3 = *((_QWORD *)this + 2379) - *((_QWORD *)this + 2378);
  if (v3)
  {
    v4 = v3 >> 3;
    v5 = -1;
    do
    {
      v6 = (v5 + 2);
      ++v5;
    }
    while (v4 > v6);
  }
  else
  {
    v5 = -1;
  }
  v7 = (char *)this + 52200;
  if (*(_DWORD *)v2 >= v5)
    v8 = *(_DWORD *)v2;
  else
    v8 = (2 * v5) | 1;
  PCArray<unsigned long,PCArray_Traits<unsigned long>>::resize((uint64_t)v7, v5, v8);
  if (v5)
  {
    v9 = (_QWORD *)*((_QWORD *)v2 + 1);
    v10 = (uint64_t *)*((_QWORD *)this + 2378);
    v11 = (uint64_t)(*((_QWORD *)this + 2379) - (_QWORD)v10) >> 3;
    v12 = v5;
    do
    {
      if (!v11)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      v13 = *v10++;
      *v9++ = *(_QWORD *)(v13 + 864) + *(_QWORD *)(v13 + 856);
      --v11;
      --v12;
    }
    while (v12);
  }
}

uint64_t TXTextLayout::getLineBreaks(TXTextLayout *this, unint64_t **a2)
{
  char *v2;
  uint64_t result;
  unint64_t *v4;

  if (!a2)
    return 0;
  v2 = (char *)this + 52212;
  result = *((unsigned int *)this + 13053);
  if ((int)result < 1)
    v4 = 0;
  else
    v4 = *(unint64_t **)(v2 + 4);
  *a2 = v4;
  return result;
}

void TXTextLayout::updateLineBreaks(TXTextLayout *this)
{
  char *v2;
  _DWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  TXChannelString *v24;
  char *StringPtr;
  unsigned int v26;
  UniChar CharacterAtIndex;
  CFStringRef theString;

  v2 = (char *)this + 52208;
  v3 = (_DWORD *)((char *)this + 19324);
  v4 = (uint64_t *)*((_QWORD *)this + 2378);
  v5 = (uint64_t *)*((_QWORD *)this + 2379);
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = v5 - v4 - 1;
    do
    {
      v9 = *v4++;
      v6 = v6 - (v8 == v7++) + *(_DWORD *)(v9 + 876);
    }
    while (v4 != v5);
  }
  v10 = (char *)this + 52200;
  if (*(_DWORD *)v2 >= v6)
    v11 = *(_DWORD *)v2;
  else
    v11 = (2 * v6) | 1;
  PCArray<unsigned long,PCArray_Traits<unsigned long>>::resize((uint64_t)v10, v6, v11);
  if (v6)
  {
    v12 = *((_QWORD *)this + 2378);
    v13 = *((_QWORD *)this + 2379);
    if (v12 != v13)
    {
      v14 = 0;
      v15 = 0;
      v16 = *((_QWORD *)v2 + 1);
      v17 = ((v13 - v12) >> 3) - 1;
      do
      {
        v18 = *(_QWORD **)v12;
        v19 = (*(_DWORD *)(*(_QWORD *)v12 + 876) - 1);
        if (*(_DWORD *)(*(_QWORD *)v12 + 876) == 1)
        {
          v23 = v14;
        }
        else
        {
          v20 = (unsigned int *)v18[114];
          v21 = v20;
          do
          {
            if (v20)
              v22 = *v21;
            else
              v22 = 0;
            v23 = (v14 + 1);
            *(_QWORD *)(v16 + 8 * v14) = v22;
            ++v21;
            LODWORD(v14) = v14 + 1;
            --v19;
          }
          while (v19);
        }
        if (v17 != v15)
        {
          *(_QWORD *)(v16 + 8 * v23) = v18[108] + v18[107];
          v23 = (v23 + 1);
        }
        v12 += 8;
        ++v15;
        v14 = v23;
      }
      while (v12 != v13);
    }
  }
  *v3 = v6 + 1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((_QWORD *)this + 26) + 8), (int32x4_t)xmmword_1B30541F0)))) & 1) == 0)
  {
    v24 = (TXTextLayout *)((char *)this + 19048);
    StringPtr = TXChannelString::getStringPtr(v24);
    v26 = PCString::size((PCString *)StringPtr);
    TXChannelString::getString((PCString *)v24, (PCString *)&theString);
    CharacterAtIndex = CFStringGetCharacterAtIndex(theString, (int)(v26 - 1));
    if (TXCharacterSetIsNewline(CharacterAtIndex))
      --*v3;
    PCString::~PCString((PCString *)&theString);
  }
}

void sub_1B28F38E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

BOOL TXTextLayout::isLineBreak(TXTextLayout *this, uint64_t a2, unint64_t *a3, unsigned int a4)
{
  uint64_t v4;
  BOOL v5;

  if (a4)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      if (a3 && a3[v4] == a2)
        break;
      v5 = ++v4 < (unint64_t)a4;
    }
    while (a4 != v4);
  }
  else
  {
    return 0;
  }
  return v5;
}

void TXTextLayout::computeLineOffsets(PCString *this, int a2, int a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  unsigned int v7;
  unint64_t v8;
  PCString v9;

  if (!a4)
  {
    *a5 = 0;
    TXChannelString::getString(this + 2381, &v9);
    v7 = PCString::size(&v9);
    goto LABEL_6;
  }
  if (a2)
  {
    *a5 = a4[a2 - 1];
    if (a3 - 1 == a2)
    {
      TXChannelString::getString(this + 2381, &v9);
      v7 = PCString::size(&v9);
LABEL_6:
      *a6 = v7;
      PCString::~PCString(&v9);
      return;
    }
    v8 = a4[a2];
  }
  else
  {
    *a5 = 0;
    v8 = *a4;
  }
  *a6 = v8;
}

void sub_1B28F39E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

TXTimeGlyphPropertiesMap *TXTextLayout::timeGlyphPropertiesMap(TXTextLayout *this)
{
  TXTimeGlyphPropertiesMap **v1;
  TXTimeGlyphPropertiesMap *v2;

  v1 = (TXTimeGlyphPropertiesMap **)((char *)this + 61192);
  v2 = (TXTimeGlyphPropertiesMap *)*((_QWORD *)this + 7649);
  if (!v2)
  {
    v2 = (TXTimeGlyphPropertiesMap *)operator new();
    TXTimeGlyphPropertiesMap::TXTimeGlyphPropertiesMap(v2);
    *v1 = v2;
  }
  return v2;
}

void sub_1B28F3A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C4023076DA7);
  _Unwind_Resume(a1);
}

_OWORD *TXTextLayout::getPosition@<X0>(TXTextLayout *this@<X0>, CMTime *a2@<X1>, unsigned int *a3@<X2>, _QWORD *a4@<X8>)
{
  TXTimeGlyphPropertiesMap *v7;

  v7 = TXTextLayout::timeGlyphPropertiesMap(this);
  return TXTimeGlyphPropertiesMap::getPosition(v7, a2, a3, a4);
}

double TXTextLayout::setPosition(TXTextLayout *a1, _DWORD *a2, _DWORD *a3, __n128 *a4)
{
  TXTimeGlyphPropertiesMap *v7;
  double result;

  v7 = TXTextLayout::timeGlyphPropertiesMap(a1);
  *(_QWORD *)&result = TXTimeGlyphPropertiesMap::setPosition((uint64_t)v7, a2, a3, a4).n128_u64[0];
  return result;
}

_OWORD *TXTextLayout::getPathRotation@<X0>(TXTextLayout *this@<X0>, CMTime *a2@<X1>, unsigned int *a3@<X2>, _QWORD *a4@<X8>)
{
  TXTimeGlyphPropertiesMap *v7;

  v7 = TXTextLayout::timeGlyphPropertiesMap(this);
  return TXTimeGlyphPropertiesMap::getPathRotation(v7, a2, a3, a4);
}

double TXTextLayout::setPathRotation(TXTextLayout *a1, _DWORD *a2, _DWORD *a3, __n128 *a4)
{
  TXTimeGlyphPropertiesMap *v7;
  double result;

  v7 = TXTextLayout::timeGlyphPropertiesMap(a1);
  *(_QWORD *)&result = TXTimeGlyphPropertiesMap::setPathRotation((uint64_t)v7, a2, a3, a4).n128_u64[0];
  return result;
}

double TXTextLayout::getTypeOn(TXTextLayout *this, unsigned int a2, CMTime *a3)
{
  TXTimeGlyphPropertiesMap *v5;

  v5 = TXTextLayout::timeGlyphPropertiesMap(this);
  return TXTimeGlyphPropertiesMap::getTypeOn(v5, a2, a3);
}

void TXTextLayout::getSelectionBounds(uint64_t a1, uint64_t a2, const OZRenderState *a3)
{
  unsigned int *v6;
  OZScene **v12;
  uint64_t v13;
  TXTextObject **v14;
  TXTextObject **v15;
  TXTextObject *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  __int128 v22;
  float64x2_t v23;
  __int128 v24;
  char v25[8];
  OZRenderState v26[5];

  v6 = (unsigned int *)(a1 + 19256);
  if (*(_BYTE *)(a1 + 19320))
    _ZF = 1;
  else
    _ZF = *(_DWORD *)(a1 + 19256) == *(_DWORD *)(a1 + 19260);
  if (_ZF)
  {
    (*(void (**)(uint64_t, uint64_t, const OZRenderState *))(*(_QWORD *)(a1 + 200) + 1488))(a1 + 200, a2, a3);
  }
  else
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)v26);
    OZRenderParams::setState((OZRenderParams *)v26, a3);
    __asm { FMOV            V0.2D, #-1.0 }
    v22 = _Q0;
    *(_OWORD *)(a2 + 16) = _Q0;
    v12 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v25, v12);
    v13 = a1 + 58824;
    v14 = *(TXTextObject ***)(a1 + 58824);
    v15 = *(TXTextObject ***)(v13 + 8);
    while (v14 != v15)
    {
      v16 = *v14;
      v17 = *((_DWORD *)*v14 + 184);
      v18 = *v6;
      v19 = v6[1];
      if (*v6 >= v19)
        v20 = v6[1];
      else
        v20 = *v6;
      if (v18 <= v19)
        v18 = v6[1];
      if (v20 <= v17 && v18 > v17)
      {
        v23 = 0uLL;
        v24 = v22;
        TXTextObject::getTransformedImageBoundsWithStyles(v16, &v23, v26);
        if (*(double *)&v24 >= 0.0 && *((double *)&v24 + 1) >= 0.0)
          PCRect<double>::operator|=((float64x2_t *)a2, &v23);
      }
      v14 += 2;
    }
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v25);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v26);
  }
}

void sub_1B28F3CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::getBothMarginScale(TXTextLayout *this, const CMTime *a2)
{
  char shouldScaleToBothMargins;
  int hasLinkedMarginScale;
  OZChannel *v6;

  shouldScaleToBothMargins = TXTextLayout::shouldScaleToBothMargins(this);
  hasLinkedMarginScale = TXTextLayout::hasLinkedMarginScale(this);
  if ((shouldScaleToBothMargins & 1) != 0 || hasLinkedMarginScale)
  {
    v6 = (OZChannel *)((char *)this + 61464);
    OZChannel::getInitialValue(v6);
    OZChannel::getValueAsDouble(v6, a2, 0.0);
  }
}

uint64_t TXTextLayout::hasLinkedMarginScale(TXTextLayout *this)
{
  uint64_t *v1;
  const void *v2;
  OZBehavior *v3;
  OZSingleChannelBehavior *v4;
  const void *ChanBase;
  void *v6;
  OZChannelBase *SourceChannel;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v11 = (uint64_t)&v11;
  v12 = &v11;
  v13 = 0;
  OZBehavior::GetBehaviorsAffectingChannel((_BYTE *)this + 61464, &v11, 1);
  v1 = v12;
  if (v12 == &v11)
  {
LABEL_13:
    v9 = 0;
  }
  else
  {
    while (1)
    {
      v2 = (const void *)v1[2];
      if (v2)
      {
        if (v3)
        {
          v4 = v3;
          if (OZBehavior::isEnabledAndUseBehaviors(v3))
          {
            ChanBase = (const void *)OZSingleChannelBehavior::getChanBase(v4);
            v6 = ChanBase
            SourceChannel = OZLinkBehavior::getSourceChannel(v4);
            if (SourceChannel)
            {
              if (v6)
              {
                if (v8 && v8[6] == 376)
                  break;
              }
            }
          }
        }
      }
      v1 = (uint64_t *)v1[1];
      if (v1 == &v11)
        goto LABEL_13;
    }
    v9 = 1;
  }
  std::__list_imp<unsigned int>::clear(&v11);
  return v9;
}

void sub_1B28F3EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

double TXTextLayout::getYMarginScale(TXTextLayout *this)
{
  int shouldScaleProportionallyToLeftRightMargins;
  double result;
  int ValueAsInt;
  char *v5;

  if ((TXTextLayout::shouldScaleToTBMargins(this) & 1) != 0
    || (shouldScaleProportionallyToLeftRightMargins = TXTextLayout::shouldScaleProportionallyToLeftRightMargins(this),
        result = 1.0,
        shouldScaleProportionallyToLeftRightMargins))
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0);
    v5 = (char *)this + 61624;
    if (ValueAsInt)
      v5 = (char *)this + 61616;
    return *(double *)v5;
  }
  return result;
}

BOOL TXTextLayout::scaleAffectsLayout(TXTextLayout *this)
{
  BOOL v1;
  OZChannel *v4;

  if (*((_BYTE *)this + 63728))
  {
    v1 = *((_DWORD *)this + 15933) == 0;
  }
  else
  {
    v4 = (OZChannel *)((char *)this + 20464);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 3
      || OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0) == 4)
    {
      return 1;
    }
    v1 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 59408), MEMORY[0x1E0CA2E68], 0.0) == 0;
  }
  return !v1;
}

void TXTextLayout::getWordVolume(TXTextLayout *this@<X0>, unint64_t a2@<X1>, int a3@<W2>, double *a4@<X8>)
{
  TXChannelString *v8;
  char *StringPtr;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  UniChar CharacterAtIndex;
  uint64_t v15;
  uint64_t v16;
  TXTextLayout *v17;
  unint64_t v18;
  OZScene **v20;
  uint64_t TextObjectIterWithCharOffset;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  __int128 v38;
  double v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[8];

  *((_OWORD *)a4 + 1) = xmmword_1B304F270;
  *((_OWORD *)a4 + 2) = xmmword_1B304F270;
  *(_OWORD *)a4 = xmmword_1B304F270;
  v8 = (TXTextLayout *)((char *)this + 19048);
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  v10 = PCString::size((PCString *)StringPtr);
  if (v10)
  {
    v11 = v10;
    v12 = 0;
    do
    {
      do
      {
        v13 = TXChannelString::getStringPtr(v8);
        CharacterAtIndex = CFStringGetCharacterAtIndex(*(CFStringRef *)v13, (int)v12);
        if (!TXCharacterSetIsWhitespace(CharacterAtIndex))
          break;
        v12 = (v12 + 1);
      }
      while (v12 < v11);
      v15 = (*(uint64_t (**)(TXTextLayout *, uint64_t, uint64_t))(*(_QWORD *)this + 1112))(this, v12, 1);
      if (v15 == -1)
        break;
      v17 = (TXTextLayout *)v15;
      v18 = (v15 + v16);
      if (v15 <= a2 && v18 > a2)
      {
        v20 = (OZScene **)Li3DEngineScene::sceneManager(this);
        OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v46, v20);
        TextObjectIterWithCharOffset = TXTextLayout::getTextObjectIterWithCharOffset(this, v17);
        v22 = TXTextLayout::getTextObjectIterWithCharOffset(this, (TXTextLayout *)v18);
        if (TextObjectIterWithCharOffset != v22)
        {
          v23 = MEMORY[0x1E0CA2E68];
          do
          {
            if (!TXCharacterSetIsWhitespaceOrNewline(*(_WORD *)(*(_QWORD *)TextObjectIterWithCharOffset + 120)))
            {
              v44 = xmmword_1B304F270;
              v45 = xmmword_1B304F270;
              v43 = xmmword_1B304F270;
              v24 = *(double **)TextObjectIterWithCharOffset;
              if (a3)
                TXTextObject::getBoundingTypographicVolume(v24, (uint64_t)&v43);
              else
                TXTextObject::getBoundingImageVolume((TXTextObject *)v24, (uint64_t)&v43, v23);
              v25 = *(double *)(*(_QWORD *)TextObjectIterWithCharOffset + 168);
              v26 = *(double *)(*(_QWORD *)TextObjectIterWithCharOffset + 176);
              v27 = v25 + *(double *)&v43;
              v28 = v25 + *((double *)&v43 + 1);
              *(double *)&v43 = v25 + *(double *)&v43;
              *((double *)&v43 + 1) = v25 + *((double *)&v43 + 1);
              v29 = v26 + *(double *)&v44;
              v30 = v26 + *((double *)&v44 + 1);
              *(double *)&v44 = v26 + *(double *)&v44;
              *((double *)&v44 + 1) = v26 + *((double *)&v44 + 1);
              v31 = *(double *)&v45 + 0.0;
              v32 = *((double *)&v45 + 1) + 0.0;
              *(double *)&v45 = *(double *)&v45 + 0.0;
              *((double *)&v45 + 1) = *((double *)&v45 + 1) + 0.0;
              v33 = a4[1];
              if (*a4 <= v33 && (v35 = a4[2], v34 = a4[3], v35 <= v34) && (v37 = a4[4], v36 = a4[5], v37 <= v36))
              {
                if (v27 <= v28 && v29 <= v30 && v31 <= v32)
                {
                  if (*a4 < v27)
                    v27 = *a4;
                  if (v33 > v28)
                    v28 = a4[1];
                  *a4 = v27;
                  a4[1] = v28;
                  if (v35 >= v29)
                    v41 = v29;
                  else
                    v41 = v35;
                  if (v34 > v30)
                    v30 = v34;
                  a4[2] = v41;
                  a4[3] = v30;
                  if (v37 >= v31)
                    v42 = v31;
                  else
                    v42 = v37;
                  if (v36 > v32)
                    v32 = v36;
                  a4[4] = v42;
                  a4[5] = v32;
                }
              }
              else
              {
                v38 = v44;
                *(_OWORD *)a4 = v43;
                *((_OWORD *)a4 + 1) = v38;
                *((_OWORD *)a4 + 2) = v45;
              }
            }
            TextObjectIterWithCharOffset += 16;
          }
          while (TextObjectIterWithCharOffset != v22);
        }
        OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v46);
        return;
      }
      v12 = v15 + v16;
    }
    while (v11 > (int)v15 + (int)v16);
  }
}

void sub_1B28F4220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getTextObjectIterWithCharOffset(TXTextLayout *this, TXTextLayout *a2)
{
  OZScene **v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE v12[8];

  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v12, v4);
  TXHelperFunctions::GetTextObjectContainingCharIndex(this, a2, 1, 0, &v10);
  if (v10)
    v5 = *((_QWORD *)this + 7353) + 16 * *(unsigned int *)(v10 + 388);
  else
    v5 = *((_QWORD *)this + 7354);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v12);
  return v5;
}

void sub_1B28F42F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::getLineVolume(TXTextLayout *this@<X0>, CMTime *a2@<X2>, unint64_t a3@<X1>, int a4@<W3>, double *a5@<X8>)
{
  uint64_t i;
  TXTextLayout *v10;
  TXTextLayout *v11;
  double **TextObjectIterWithCharOffset;
  uint64_t v13;
  double **v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  __int128 v29;
  double v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  for (i = *((_QWORD *)this + 2378); i != *((_QWORD *)this + 2379); i += 8)
  {
    v10 = *(TXTextLayout **)(*(_QWORD *)i + 856);
    if ((unint64_t)v10 <= a3)
    {
      v11 = (TXTextLayout *)((char *)v10 + *(_QWORD *)(*(_QWORD *)i + 864));
      if ((unint64_t)v11 > a3)
        goto LABEL_7;
    }
  }
  v11 = 0;
  v10 = 0;
LABEL_7:
  *((_OWORD *)a5 + 1) = xmmword_1B304F270;
  *((_OWORD *)a5 + 2) = xmmword_1B304F270;
  *(_OWORD *)a5 = xmmword_1B304F270;
  TextObjectIterWithCharOffset = (double **)TXTextLayout::getTextObjectIterWithCharOffset(this, v10);
  v13 = TXTextLayout::getTextObjectIterWithCharOffset(this, v11);
  if (TextObjectIterWithCharOffset != (double **)v13)
  {
    v14 = (double **)v13;
    do
    {
      if (!TXCharacterSetIsWhitespaceOrNewline(*((_WORD *)*TextObjectIterWithCharOffset + 60)))
      {
        v35 = xmmword_1B304F270;
        v36 = xmmword_1B304F270;
        v34 = xmmword_1B304F270;
        v15 = *((_DWORD *)*TextObjectIterWithCharOffset + 97);
        if (a4)
        {
          if (!TXTextLayout::getTextObjectTypographicVolumeFromMap((uint64_t)this, &v34, v15))
            TXTextObject::getBoundingTypographicVolume(*TextObjectIterWithCharOffset, (uint64_t)&v34);
        }
        else if (!TXTextLayout::getTextObjectVolumeFromMap((uint64_t)this, &v34, v15))
        {
          TXTextObject::getBoundingImageVolume((TXTextObject *)*TextObjectIterWithCharOffset, (uint64_t)&v34, (uint64_t)a2);
        }
        v16 = (*TextObjectIterWithCharOffset)[21];
        v17 = (*TextObjectIterWithCharOffset)[22];
        v18 = v16 + *(double *)&v34;
        v19 = v16 + *((double *)&v34 + 1);
        *(double *)&v34 = v16 + *(double *)&v34;
        *((double *)&v34 + 1) = v16 + *((double *)&v34 + 1);
        v20 = v17 + *(double *)&v35;
        v21 = v17 + *((double *)&v35 + 1);
        *(double *)&v35 = v17 + *(double *)&v35;
        *((double *)&v35 + 1) = v17 + *((double *)&v35 + 1);
        v22 = *(double *)&v36 + 0.0;
        v23 = *((double *)&v36 + 1) + 0.0;
        *(double *)&v36 = *(double *)&v36 + 0.0;
        *((double *)&v36 + 1) = *((double *)&v36 + 1) + 0.0;
        v24 = a5[1];
        if (*a5 <= v24 && (v26 = a5[2], v25 = a5[3], v26 <= v25) && (v28 = a5[4], v27 = a5[5], v28 <= v27))
        {
          if (v18 <= v19 && v20 <= v21 && v22 <= v23)
          {
            if (*a5 < v18)
              v18 = *a5;
            if (v24 > v19)
              v19 = a5[1];
            *a5 = v18;
            a5[1] = v19;
            if (v26 >= v20)
              v32 = v20;
            else
              v32 = v26;
            if (v25 > v21)
              v21 = v25;
            a5[2] = v32;
            a5[3] = v21;
            if (v28 >= v22)
              v33 = v22;
            else
              v33 = v28;
            if (v27 > v23)
              v23 = v27;
            a5[4] = v33;
            a5[5] = v23;
          }
        }
        else
        {
          v29 = v35;
          *(_OWORD *)a5 = v34;
          *((_OWORD *)a5 + 1) = v29;
          *((_OWORD *)a5 + 2) = v36;
        }
      }
      TextObjectIterWithCharOffset += 2;
    }
    while (TextObjectIterWithCharOffset != v14);
  }
}

BOOL TXTextLayout::getTextObjectTypographicVolumeFromMap(uint64_t a1, _OWORD *a2, unsigned int a3)
{
  uint64_t **v3;
  uint64_t **v5;
  __int128 v6;
  __int128 v7;
  unsigned int v9;
  unsigned int *v10;

  v9 = a3;
  v3 = *(uint64_t ***)(a1 + 61176);
  if (v3)
  {
    v10 = &v9;
    v5 = std::__tree<std::__value_type<unsigned int,PCBox<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCBox<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCBox<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v9, (uint64_t)&std::piecewise_construct, &v10);
    v6 = *(_OWORD *)(v5 + 5);
    v7 = *(_OWORD *)(v5 + 9);
    a2[1] = *(_OWORD *)(v5 + 7);
    a2[2] = v7;
    *a2 = v6;
  }
  return v3 != 0;
}

BOOL TXTextLayout::getTextObjectVolumeFromMap(uint64_t a1, _OWORD *a2, unsigned int a3)
{
  uint64_t **v3;
  uint64_t **v5;
  __int128 v6;
  __int128 v7;
  unsigned int v9;
  unsigned int *v10;

  v9 = a3;
  v3 = *(uint64_t ***)(a1 + 61168);
  if (v3)
  {
    v10 = &v9;
    v5 = std::__tree<std::__value_type<unsigned int,PCBox<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCBox<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCBox<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v9, (uint64_t)&std::piecewise_construct, &v10);
    v6 = *(_OWORD *)(v5 + 5);
    v7 = *(_OWORD *)(v5 + 9);
    a2[1] = *(_OWORD *)(v5 + 7);
    a2[2] = v7;
    *a2 = v6;
  }
  return v3 != 0;
}

void TXTextLayout::getWordBounds(TXTextLayout *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  OZScene **v8;
  int v9;
  int v10;
  uint64_t *i;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  float64x2_t *TypographicBounds;
  float64x2_t v22;
  float64x2_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t **v27;
  float64x2_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t **v33;
  __int128 v34;
  float64x2_t v35;
  _OWORD v36[2];
  OZRenderState v37;
  float64x2_t v38;
  float64x2_t v39;
  TXTextObject *v40;
  std::__shared_weak_count *v41;
  unsigned int v42;
  TXTextObject *v43;
  std::__shared_weak_count *v44;
  PCString v45;
  char v46[8];

  v8 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v46, v8);
  v9 = (*(uint64_t (**)(TXTextLayout *, uint64_t))(*(_QWORD *)this + 720))(this, a2);
  v10 = v9;
  for (i = (uint64_t *)*((_QWORD *)this + 8030); i; i = (uint64_t *)*i)
  {
    v12 = *((_DWORD *)i + 8);
    if (v9 >= v12)
    {
      if (v12 >= v9)
      {
        LODWORD(v38.f64[0]) = v9;
        v37.var0.var0 = (int64_t)&v38;
        v33 = std::__tree<std::__value_type<int,PCRect<double>>,std::__map_value_compare<int,std::__value_type<int,PCRect<double>>,std::less<int>,true>,std::allocator<std::__value_type<int,PCRect<double>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)this + 8029, (int *)&v38, (uint64_t)&std::piecewise_construct, &v37);
        v34 = *(_OWORD *)(v33 + 7);
        *(_OWORD *)a4 = *(_OWORD *)(v33 + 5);
        *(_OWORD *)(a4 + 16) = v34;
        goto LABEL_32;
      }
      ++i;
    }
  }
  TXChannelString::getString((PCString *)this + 2381, &v45);
  if (PCString::empty(&v45)
    || (v13 = (*(uint64_t (**)(TXTextLayout *, uint64_t, uint64_t))(*(_QWORD *)this + 1112))(this, a2, 1),
        v13 == -1))
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a4 + 16) = _Q0;
  }
  else
  {
    v15 = v13 + v14;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v35 = _Q0;
    *(float64x2_t *)(a4 + 16) = _Q0;
    v43 = 0;
    v44 = 0;
    v42 = v13;
    if (v13 < (int)v13 + v14)
    {
      do
      {
        if (std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::find<unsigned int>((_QWORD *)this + 8032, &v42))
        {
          TXTextLayout::cachedTextObjectForCharIndex(this, v42, &v40);
          if (v40 != v43)
          {
            v38 = 0uLL;
            v39 = v35;
            if (a3)
            {
              TypographicBounds = (float64x2_t *)TXTextObject::getTypographicBounds(v40);
              v22 = *TypographicBounds;
              v23 = TypographicBounds[1];
            }
            else
            {
              OZRenderState::OZRenderState(&v37);
              TXTextObject::getImageBounds(v40, &v37, (uint64_t)v36);
              v22 = (float64x2_t)v36[0];
              v23 = (float64x2_t)v36[1];
            }
            v38 = v22;
            v39 = v23;
            if (v23.f64[0] > 0.0 && v39.f64[1] > 0.0)
            {
              v38 = vaddq_f64(*(float64x2_t *)((char *)v40 + 168), v38);
              PCRect<double>::operator|=((float64x2_t *)a4, &v38);
            }
            std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v43, (uint64_t *)&v40);
          }
          v24 = v41;
          if (v41)
          {
            p_shared_owners = (unint64_t *)&v41->__shared_owners_;
            do
              v26 = __ldaxr(p_shared_owners);
            while (__stlxr(v26 - 1, p_shared_owners));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
        }
        ++v42;
      }
      while (v42 < v15);
    }
    LODWORD(v38.f64[0]) = v10;
    v37.var0.var0 = (int64_t)&v38;
    v27 = std::__tree<std::__value_type<int,PCRect<double>>,std::__map_value_compare<int,std::__value_type<int,PCRect<double>>,std::less<int>,true>,std::allocator<std::__value_type<int,PCRect<double>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)this + 8029, (int *)&v38, (uint64_t)&std::piecewise_construct, &v37);
    v28 = *(float64x2_t *)a4;
    *(_OWORD *)(v27 + 7) = *(_OWORD *)(a4 + 16);
    *(float64x2_t *)(v27 + 5) = v28;
    v29 = v44;
    if (v44)
    {
      v30 = (unint64_t *)&v44->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  PCString::~PCString(&v45);
LABEL_32:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v46);
}

void sub_1B28F48C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t *TXTextLayout::cachedTextObjectForCharIndex@<X0>(TXTextLayout *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int *v9;

  v8 = a2;
  v9 = &v8;
  result = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 64256, &v8, (uint64_t)&std::piecewise_construct, &v9);
  v5 = result[4];
  *a3 = result[3];
  a3[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void TXTextLayout::getLineBounds(TXTextLayout *this@<X0>, CMTime *a2@<X2>, unint64_t a3@<X1>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  double v16;
  double v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  double v25;
  double v26;
  double v27;
  __int128 v28;
  double v29;
  double v30;
  double v31;
  double v32;
  TXTextLayout *v33;
  double v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t v38;
  int Alignment;
  unsigned int ValueAsInt;
  double v41;
  double v43;
  uint64_t *v44;
  uint64_t *v45;
  double v46;
  double v47;
  double v48;
  TXTextObject *v49;
  std::__shared_weak_count *v50;
  OZRenderState v51;
  __int128 v52;
  double v53;
  double v54;
  CMTime v55;
  unint64_t v56;

  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a6 + 16) = _Q0;
  v16 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), a2, 0.0);
  v43 = v17;
  v18 = (uint64_t *)*((_QWORD *)this + 2378);
  v44 = (uint64_t *)*((_QWORD *)this + 2379);
  if (v18 != v44)
  {
    v19 = 0;
    do
    {
      v45 = v18;
      v20 = *v18;
      v56 = 0;
      v55 = *a2;
      OZChannel::getValueAsDouble((OZChannel *)(v20 + 680), &v55, 0.0);
      v22 = v21;
      (*(void (**)(TXTextLayout *, CMTime *))(*(_QWORD *)this + 712))(this, a2);
      if (*(_DWORD *)(v20 + 876))
      {
        v24 = 0;
        v25 = (v43 + v22) * v23;
        while (1)
        {
          TXParagraphStyle::getLineMetrics(v20, v24, &v52);
          v26 = v53;
          v27 = v53 + v54;
          v28 = v52;
          if ((a4 & 1) != 0)
          {
            v29 = vabdd_f64(v27, v53);
            v30 = vabdd_f64(*(double *)&v52, *((double *)&v52 + 1));
            v31 = v25 + v30;
            if (v19)
            {
              v32 = v16;
            }
            else
            {
              v31 = v25 - *((double *)&v52 + 1);
              v32 = *(double *)&v52;
            }
          }
          else
          {
            OZRenderState::OZRenderState(&v51);
            *(_OWORD *)&v51.var0.var0 = *(_OWORD *)&a2->value;
            v51.var0.var3 = a2->epoch;
            v33 = *(TXTextLayout **)(v20 + 856);
            v32 = 0.0;
            v34 = 3.40282347e38;
            if (v33 < (TXTextLayout *)((char *)v33 + *(_QWORD *)(v20 + 864)))
            {
              v34 = 3.40282347e38;
              do
              {
                TXHelperFunctions::GetTextObjectContainingCharIndex(this, v33, a5, &v56, &v49);
                if (!TXCharacterSetIsWhitespaceOrNewline(*((_WORD *)v49 + 60)))
                {
                  TXTextObject::getImageBounds(v49, &v51, (uint64_t)&v46);
                  if (v32 < v47 + v48)
                    v32 = v47 + v48;
                  if (v34 > v47)
                    v34 = v47;
                }
                v35 = v50;
                if (v50)
                {
                  p_shared_owners = (unint64_t *)&v50->__shared_owners_;
                  do
                    v37 = __ldaxr(p_shared_owners);
                  while (__stlxr(v37 - 1, p_shared_owners));
                  if (!v37)
                  {
                    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                    std::__shared_weak_count::__release_weak(v35);
                  }
                }
                v33 = (TXTextLayout *)((char *)v33 + 1);
              }
              while ((unint64_t)v33 < *(_QWORD *)(v20 + 864) + *(_QWORD *)(v20 + 856));
            }
            v29 = vabdd_f64(v27, v26);
            v30 = vabdd_f64(v32, v34);
            v31 = v25 + vabdd_f64(*(double *)&v28, *((double *)&v28 + 1));
            if (v19)
              v32 = v16 - (*(double *)&v28 - v32);
            else
              v31 = v25 - *((double *)&v28 + 1);
          }
          v16 = v16 - v31;
          v38 = *(_QWORD *)(v20 + 856);
          if (v38 <= a3 && *(_QWORD *)(v20 + 864) + v38 > a3)
            break;
          ++v24;
          ++v19;
          if (v24 >= *(_DWORD *)(v20 + 876))
            goto LABEL_30;
        }
        v51.var0.var0 = 0;
        v46 = 0.0;
        Alignment = TXParagraphStyle::getAlignment((TXParagraphStyle *)v20);
        ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0);
        TXTextLayout::getAlignmentOffsetForParagraph((OZRenderState *)this, (const TXParagraphStyle *)v20, (double *)&v51.var0.var0, &v46, Alignment, ValueAsInt, -1.0, -1.0);
        *(double *)(a6 + 16) = v29;
        *(double *)(a6 + 24) = v30;
        v41 = v32 - v30 + v46;
        *(double *)a6 = v26 + *(double *)&v51.var0.var0;
        *(double *)(a6 + 8) = v41;
      }
LABEL_30:
      v18 = v45 + 1;
    }
    while (v45 + 1 != v44);
  }
}

void sub_1B28F4CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getTypographicBox(uint64_t a1, float64x2_t *a2, CMTime *a3, int a4)
{
  char *StringPtr;
  _QWORD *v9;
  _QWORD *v10;
  const CMTime *v11;
  int ValueAsInt;
  int v13;
  double v14;
  int v15;
  double v16;
  const CMTime *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  unint64_t v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  BOOL v31;
  int v32;
  double v33;
  double v34;
  int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  TXTextLayout *v41;
  double v42;
  double v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  BOOL v57;
  double v58;
  double v59;
  double v60;
  double v61;
  BOOL v62;
  double v63;
  double v64;
  double v65;
  float64x2_t v66;
  CMTime *v68;
  int v69;
  float64x2_t *v70;
  double v71;
  _QWORD *v72;
  _QWORD *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  OZChannelBase *v84;
  std::__shared_weak_count *v85;
  CMTime v86;
  CMTime v87;

  StringPtr = TXChannelString::getStringPtr((TXChannelString *)(a1 + 19048));
  if (PCString::size((PCString *)StringPtr))
  {
    v69 = a4;
    v70 = a2;
    v87 = *a3;
    v68 = a3;
    v9 = *(_QWORD **)(a1 + 19024);
    v10 = *(_QWORD **)(a1 + 19032);
    v11 = (const CMTime *)MEMORY[0x1E0CA2E68];
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E0CA2E68], 0.0);
    v13 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), v11, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 22136), &v87, 0.0);
    v71 = v14;
    v72 = v10;
    if (v9 == v10)
    {
      v48 = -1.0;
      v43 = 1.0;
      v64 = 1.0;
      v47 = -1.0;
      v65 = 1.0;
      v42 = -1.0;
    }
    else
    {
      v15 = 0;
      v80 = 1.0;
      v16 = -1.0;
      v17 = (const CMTime *)MEMORY[0x1E0CA2E68];
      v18 = 0.0;
      v74 = 0.0;
      v19 = -1.0;
      v77 = 1.0;
      v20 = -1.0;
      v21 = 1.0;
      do
      {
        v73 = v9;
        v22 = *v9;
        v86 = v87;
        OZChannel::getValueAsDouble((OZChannel *)(v22 + 680), &v86, 0.0);
        v24 = v23;
        (*(void (**)(uint64_t, CMTime *))(*(_QWORD *)a1 + 712))(a1, &v87);
        if (*(_DWORD *)(v22 + 876))
        {
          v26 = 0;
          v75 = (v71 + v24) * v25;
          do
          {
            v76 = v16;
            v27 = (double *)(*(_QWORD *)(v22 + 888) + (v26 << 6));
            v28 = *v27;
            v29 = fabs(*(double *)(v22 + 920));
            v30 = vabdd_f64(*v27, v27[1]);
            if (v15)
              v31 = ValueAsInt == 4;
            else
              v31 = 1;
            v32 = v31;
            if (v13)
              v33 = v18;
            else
              v33 = v27[1];
            if (v32)
              v34 = v27[1];
            else
              v34 = v33;
            v35 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), v17, 0.0);
            v78 = v34;
            if (v13)
            {
              v36 = 0.0 - v74 - v29;
              if (v35 != 4)
                v36 = 0.0 - v29;
              v81 = v34;
              v82 = v36;
              v37 = v29;
              v29 = v30;
            }
            else
            {
              if (v32)
                v38 = v28;
              else
                v38 = v18;
              v39 = v38 - v30;
              v40 = 0.0;
              if (v35 == 4)
                v40 = v74;
              v81 = v40;
              v82 = v39;
              v37 = v30;
            }
            v79 = v30;
            v41 = *(TXTextLayout **)(v22 + 856);
            v42 = 0.0;
            if (v41 >= (TXTextLayout *)((char *)v41 + *(_QWORD *)(v22 + 864)))
            {
              v43 = 3.40282347e38;
            }
            else
            {
              v43 = 3.40282347e38;
              do
              {
                TXHelperFunctions::GetTextObjectContainingCharIndex((TXHelperFunctions *)a1, v41, 1, 0, &v84);
                v83 = 0.0;
                OZChannelBase::setRangeName(v84, (const PCString *)&v87);
                if (v43 > 0.0)
                  v43 = v83;
                v44 = v85;
                if (v85)
                {
                  p_shared_owners = (unint64_t *)&v85->__shared_owners_;
                  do
                    v46 = __ldaxr(p_shared_owners);
                  while (__stlxr(v46 - 1, p_shared_owners));
                  if (!v46)
                  {
                    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                    std::__shared_weak_count::__release_weak(v44);
                  }
                }
                v41 = (TXTextLayout *)((char *)v41 + 1);
              }
              while ((unint64_t)v41 < *(_QWORD *)(v22 + 864) + *(_QWORD *)(v22 + 856));
            }
            v47 = v81 + v29;
            v48 = v37 + v82;
            if (v80 > v19)
            {
              v59 = v81;
              v58 = v82;
              v49 = v78;
            }
            else
            {
              v49 = v78;
              if (v77 > v20 || v21 > v76)
              {
                v59 = v81;
                v58 = v82;
              }
              else
              {
                if (v80 >= v81)
                  v50 = v81;
                else
                  v50 = v80;
                if (v19 <= v47)
                  v51 = v81 + v29;
                else
                  v51 = v19;
                if (v77 >= v82)
                  v52 = v82;
                else
                  v52 = v77;
                if (v20 <= v48)
                  v53 = v37 + v82;
                else
                  v53 = v20;
                if (v21 >= v43)
                  v54 = v43;
                else
                  v54 = v21;
                if (v76 <= 0.0)
                  v55 = 0.0;
                else
                  v55 = v76;
                v57 = v81 <= v47 && v82 <= v48 && v43 <= 0.0;
                if (v57)
                  v43 = v54;
                else
                  v43 = v21;
                if (v57)
                  v48 = v53;
                else
                  v48 = v20;
                if (v57)
                  v58 = v52;
                else
                  v58 = v77;
                if (v57)
                  v47 = v51;
                else
                  v47 = v19;
                if (v57)
                  v59 = v50;
                else
                  v59 = v80;
                if (v57)
                  v42 = v55;
                else
                  v42 = v76;
              }
            }
            v60 = v75 - v49;
            v61 = v75 + v79;
            if (v15)
            {
              v60 = v75 + v79;
              v62 = 1;
            }
            else
            {
              v62 = v13 == 0;
            }
            v63 = v18 - v60;
            if (v62)
              v61 = 0.0;
            v18 = v63 - v61;
            ++v26;
            ++v15;
            v16 = v42;
            v80 = v59;
            v19 = v47;
            v64 = v58;
            v65 = v59;
            v77 = v64;
            v20 = v48;
            v21 = v43;
          }
          while (v26 < *(unsigned int *)(v22 + 876));
        }
        else
        {
          v43 = v21;
          v48 = v20;
          v64 = v77;
          v47 = v19;
          v65 = v80;
          v42 = v16;
        }
        v9 = v73 + 1;
        v16 = v42;
        v80 = v65;
        v19 = v47;
        v74 = v74 + *(double *)(v22 + 920);
        v77 = v64;
        v20 = v48;
        v21 = v43;
      }
      while (v73 + 1 != v72);
    }
    v70->f64[0] = v65;
    v70->f64[1] = v47;
    v70[1].f64[0] = v64;
    v70[1].f64[1] = v48;
    v70[2].f64[0] = v43;
    v70[2].f64[1] = v42;
    if (v69
      && (OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 1
       && *(_BYTE *)(a1 + 52256)
       || OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 3
       && *(_BYTE *)(a1 + 52257)
       || ValueAsInt == 4 && *(_BYTE *)(a1 + 52258)))
    {
      v83 = 0.0;
      v84 = 0;
      (*(void (**)(uint64_t, OZChannelBase **, double *, CMTime *))(*(_QWORD *)a1 + 1016))(a1, &v84, &v83, v68);
      v66 = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v83, 0), v70[1]);
      *v70 = vaddq_f64((float64x2_t)vdupq_lane_s64((uint64_t)v84, 0), *v70);
      v70[1] = v66;
    }
  }
  return 0;
}

void sub_1B28F520C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getFont(const PCString *this, PCString *a2)
{
  PCMutex *v4;
  PCString *v5;
  PCString *v6;
  uint64_t CoreTextFont;
  TXFontManager *Instance;
  const PCString *v10;

  v4 = (PCMutex *)&this[7625];
  PCMutex::lock((PCMutex *)&this[7625]);
  v5 = (PCString *)&this[7634];
  v6 = (PCString *)std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(this + 7634, a2);
  if (&this[7635] == v6)
  {
    Instance = (TXFontManager *)TXFontManager::getInstance((TXFontManager *)v6);
    CoreTextFont = TXFontManager::getCoreTextFont(Instance, a2);
    v10 = a2;
    std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(v5, a2, (uint64_t)&std::piecewise_construct, &v10)[5] = CoreTextFont;
  }
  else
  {
    CoreTextFont = (uint64_t)v6[5].var0;
  }
  PCMutex::unlock(v4);
  return CoreTextFont;
}

void sub_1B28F52DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TXTextLayout::getTypographicBoundsWithAlignment(TXTextLayout *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  char *StringPtr;
  double v11;
  double v12;
  uint64_t *v13;
  double v14;
  int v15;
  double v16;
  const CMTime *v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  unsigned int v22;
  double v23;
  int Alignment;
  unsigned int ValueAsInt;
  uint64_t *v26;
  double v28;
  double v29;
  float64x2_t v30[2];
  _OWORD v31[4];
  CMTime v32;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 16) = _Q0;
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  if (PCString::size((PCString *)StringPtr))
  {
    v11 = 0.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), a2, 0.0);
    v13 = (uint64_t *)*((_QWORD *)this + 2378);
    v26 = (uint64_t *)*((_QWORD *)this + 2379);
    if (v13 != v26)
    {
      v14 = v12;
      v15 = 0;
      v16 = *((double *)this + 8050);
      v17 = (const CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        v18 = *v13;
        v32 = *a2;
        OZChannel::getValueAsDouble((OZChannel *)(v18 + 680), &v32, 0.0);
        v20 = v19;
        (*(void (**)(TXTextLayout *, const CMTime *))(*(_QWORD *)this + 712))(this, a2);
        if (*(_DWORD *)(v18 + 876))
        {
          v22 = 0;
          v23 = v16 + (v14 + v20) * v21;
          do
          {
            TXParagraphStyle::getLineMetrics(v18, v22, v31);
            v30[0] = (float64x2_t)v31[2];
            v30[1] = (float64x2_t)v31[3];
            if ((int)(v15 + v22) >= 1)
              v30[0].f64[1] = v11;
            v28 = 0.0;
            v29 = 0.0;
            Alignment = TXParagraphStyle::getAlignment((TXParagraphStyle *)v18);
            ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v17, 0.0);
            TXTextLayout::getAlignmentOffsetForParagraph((OZRenderState *)this, (const TXParagraphStyle *)v18, &v29, &v28, Alignment, ValueAsInt, -1.0, -1.0);
            v30[0].f64[0] = v29 + v30[0].f64[0];
            v30[0].f64[1] = v28 + v30[0].f64[1];
            PCRect<double>::operator|=((float64x2_t *)a3, v30);
            v11 = v11 - (v23 + *(double *)v31 - *((double *)v31 + 1));
            ++v22;
          }
          while (v22 < *(_DWORD *)(v18 + 876));
          v15 += v22;
        }
        ++v13;
      }
      while (v13 != v26);
    }
  }
}

void TXTextLayout::doLineLayout(PCString *this, unsigned int a2, double a3, CMTime *a4)
{
  OZScene **v7;
  __CFString *var0;
  uint64_t v9;
  uint64_t v10;
  CFIndex v11;
  const __CFAllocator *v12;
  __CFString *v13;
  uint64_t v14;
  CGFloat a;
  CGFloat b;
  CTTextTabRef v17;
  CTParagraphStyleSetting *v18;
  CTParagraphStyleSetting *v19;
  __int128 *v20;
  CTParagraphStyleSetting *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  CTParagraphStyleSetting *v33;
  CTParagraphStyleSetting *v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  CTParagraphStyleSetting *v40;
  char *v41;
  CTParagraphStyleSetting *v42;
  CTParagraphStyleSetting *v43;
  __int128 v44;
  CTParagraphStyleRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  unint64_t v48;
  char *v49;
  const CMTime *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  CGFloat v55;
  CGFloat v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  __CFString *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  CGFloat v72;
  unint64_t *v73;
  unint64_t v74;
  double v75;
  double v76;
  TXTextLayout *v77;
  CFRange *v78;
  CFRange *v79;
  const __CFString *v80;
  unsigned int location;
  _QWORD *v82;
  uint64_t v83;
  unsigned int v84;
  OZChannel *v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  CGFloat Size;
  CTFontRef v90;
  unint64_t *v91;
  unint64_t v92;
  const __CFArray *GlyphRuns;
  CFIndex Count;
  CFIndex v95;
  CFIndex v96;
  uint64_t v97;
  uint64_t v98;
  const __CTRun *ValueAtIndex;
  CFRange StringRange;
  CFIndex v101;
  CFIndex length;
  const __CFDictionary *Attributes;
  const __CTFont *Value;
  const __CFString *v105;
  CFIndex GlyphCount;
  const CGGlyph *GlyphsPtr;
  char *v108;
  CFRange *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  CFRange *v116;
  CFRange *v117;
  CTRunStatus v118;
  _BOOL8 v119;
  OZChannel *v120;
  CGGlyph *glyphs;
  uint64_t *v122;
  void *key;
  CFTypeRef *v124;
  CFIndex v125;
  const __CFArray *theArray;
  unint64_t v128;
  __CFAttributedString *aStr;
  TXTextLayout *v130;
  _QWORD v131[2];
  BOOL v132;
  _QWORD v133[2];
  char v134;
  CGAffineTransform valuePtr;
  CMTime v136;
  OZChannel *v137;
  std::__shared_weak_count *v138;
  void *__p;
  char *v140;
  char *v141;
  uint64_t v142[2];
  CFRange v143;
  uint64_t v144;
  CGFloat v145;
  CGFloat v146;
  CGFloat v147;
  CGFloat v148;
  int v149;
  CFMutableArrayRef Mutable;
  CTParagraphStyleSetting *v151;
  CTParagraphStyleSetting *v152;
  unint64_t v153;
  PCString v154;
  PCString v155;
  _QWORD v156[2];
  char v157;
  _BYTE v158[16];
  CFRange v159;
  CFRange v160;
  CFRange v161;
  CFRange v162;
  CFRange v163;
  CGRect BoundingRectsForGlyphs;

  v7 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v158, v7);
  v130 = (TXTextLayout *)this;
  var0 = this[2378].var0;
  if (a2 >= (unint64_t)(((char *)this[2379].var0 - (char *)var0) >> 3))
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v9 = *((_QWORD *)&var0->isa + a2);
  v10 = *(_QWORD *)(v9 + 864);
  if (v10)
  {
    v11 = *(_QWORD *)(v9 + 856);
    TXChannelString::getString(this + 2381, (PCString *)&valuePtr);
    v128 = v11;
    PCString::substr((PCString *)&valuePtr, v11, v10, (CFStringRef *)&v155.var0);
    PCString::~PCString((PCString *)&valuePtr);
    TXTextLayout::getDisplayString(this, (PCString *)&valuePtr);
    PCString::substr((PCString *)&valuePtr, v11, v10, (CFStringRef *)&v154.var0);
    PCString::~PCString((PCString *)&valuePtr);
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    aStr = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    CFAttributedStringBeginEditing(aStr);
    v13 = PCString::cf_str(&v154);
    v159.location = 0;
    v159.length = 0;
    CFAttributedStringReplaceString(aStr, v159, v13);
    v151 = 0;
    v152 = 0;
    v153 = 0;
    Mutable = 0;
    TXParagraphStyle::getTabs((TXParagraphStyle *)v9, &valuePtr);
    v14 = *(_QWORD *)&valuePtr.b - *(_QWORD *)&valuePtr.a;
    if (*(_QWORD *)&valuePtr.a)
    {
      valuePtr.b = valuePtr.a;
      operator delete(*(void **)&valuePtr.a);
    }
    if (v14 <= 0)
    {
      v26 = v152;
    }
    else
    {
      Mutable = CFArrayCreateMutable(v12, v14 >> 3, MEMORY[0x1E0C9B378]);
      TXParagraphStyle::getTabs((TXParagraphStyle *)v9, &valuePtr);
      b = valuePtr.b;
      a = valuePtr.a;
      if (*(_QWORD *)&valuePtr.a != *(_QWORD *)&valuePtr.b)
      {
        do
        {
          v17 = TXMakeCTTextTab(**(TXTabStop ***)&a);
          CFArrayAppendValue(Mutable, v17);
          CFRelease(v17);
          *(_QWORD *)&a += 8;
        }
        while (*(_QWORD *)&a != *(_QWORD *)&b);
        a = valuePtr.a;
      }
      if (a != 0.0)
      {
        valuePtr.b = a;
        operator delete(*(void **)&a);
      }
      v18 = v152;
      if ((unint64_t)v152 >= v153)
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v152 - (char *)v151) >> 3);
        v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v153 - (_QWORD)v151) >> 3) > v28)
          v28 = 0x5555555555555556 * ((uint64_t)(v153 - (_QWORD)v151) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v153 - (_QWORD)v151) >> 3) >= 0x555555555555555)
          v29 = 0xAAAAAAAAAAAAAAALL;
        else
          v29 = v28;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v153, v29);
        else
          v30 = 0;
        v31 = &v30[24 * v27];
        v32 = &v30[24 * v29];
        *(_DWORD *)v31 = 4;
        *((_QWORD *)v31 + 1) = 8;
        *((_QWORD *)v31 + 2) = &Mutable;
        v19 = (CTParagraphStyleSetting *)(v31 + 24);
        v34 = v151;
        v33 = v152;
        if (v152 != v151)
        {
          do
          {
            v35 = *(_OWORD *)&v33[-1].spec;
            *((_QWORD *)v31 - 1) = v33[-1].value;
            *(_OWORD *)(v31 - 24) = v35;
            v31 -= 24;
            --v33;
          }
          while (v33 != v34);
          v33 = v151;
        }
        v151 = (CTParagraphStyleSetting *)v31;
        v152 = v19;
        v153 = (unint64_t)v32;
        if (v33)
          operator delete(v33);
      }
      else
      {
        v152->spec = kCTParagraphStyleSpecifierTabStops;
        v18->valueSize = 8;
        v18->value = &Mutable;
        v19 = v18 + 1;
      }
      v152 = v19;
      valuePtr.a = 28.0;
      if ((unint64_t)v19 >= v153)
      {
        v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v151) >> 3);
        if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v37 = 0x5555555555555556 * ((uint64_t)(v153 - (_QWORD)v151) >> 3);
        if (v37 <= v36 + 1)
          v37 = v36 + 1;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v153 - (_QWORD)v151) >> 3) >= 0x555555555555555)
          v38 = 0xAAAAAAAAAAAAAAALL;
        else
          v38 = v37;
        if (v38)
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v153, v38);
        else
          v39 = 0;
        v40 = (CTParagraphStyleSetting *)&v39[24 * v36];
        v41 = &v39[24 * v38];
        v40->spec = kCTParagraphStyleSpecifierDefaultTabInterval;
        v40->valueSize = 8;
        v40->value = &valuePtr;
        v26 = v40 + 1;
        v43 = v151;
        v42 = v152;
        if (v152 != v151)
        {
          do
          {
            v44 = *(_OWORD *)&v42[-1].spec;
            v40[-1].value = v42[-1].value;
            *(_OWORD *)&v40[-1].spec = v44;
            --v40;
            --v42;
          }
          while (v42 != v43);
          v42 = v151;
        }
        v151 = v40;
        v152 = v26;
        v153 = (unint64_t)v41;
        if (v42)
          operator delete(v42);
      }
      else
      {
        v19->spec = kCTParagraphStyleSpecifierDefaultTabInterval;
        v19->valueSize = 8;
        v19->value = &valuePtr;
        v26 = v19 + 1;
      }
      v152 = v26;
    }
    if (v26 != v151)
    {
      v45 = CTParagraphStyleCreate(v151, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v151) >> 3));
      v160.location = 0;
      v160.length = v10;
      CFAttributedStringSetAttribute(aStr, v160, (CFStringRef)*MEMORY[0x1E0CA85A0], v45);
      CFRelease(v45);
    }
    if (Mutable)
      CFRelease(Mutable);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)v130 + 20720), MEMORY[0x1E0CA2E68], 0.0))
    {
      v161.location = 0;
      v161.length = v10;
      CFAttributedStringSetAttribute(aStr, v161, (CFStringRef)*MEMORY[0x1E0CA86C8], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      LODWORD(valuePtr.a) = 2;
      v46 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      v162.location = 0;
      v162.length = v10;
      CFAttributedStringSetAttribute(aStr, v162, (CFStringRef)*MEMORY[0x1E0CA83A0], v46);
      CFRelease(v46);
    }
    v149 = 0;
    v47 = CFNumberCreate(0, kCFNumberIntType, &v149);
    v163.location = 0;
    v163.length = v10;
    CFAttributedStringSetAttribute(aStr, v163, (CFStringRef)*MEMORY[0x1E0CA8598], v47);
    CFRelease(v47);
    v48 = v128 + v10;
    if (v128 + v10 > v128)
    {
      v49 = (char *)v130 + 19368;
      v50 = (const CMTime *)MEMORY[0x1E0CA2E68];
      LODWORD(v51) = v128;
      do
      {
        v52 = *((_QWORD *)v130 + 2422);
        if ((char *)v52 == v49)
        {
          v53 = 0;
        }
        else
        {
          do
          {
            v53 = *(_QWORD *)(v52 + 16);
            v54 = *(_DWORD *)(v53 + 24);
            if (v54 <= v51 && *(_DWORD *)(v53 + 28) + v54 > v51)
              break;
            v52 = *(_QWORD *)(v52 + 8);
          }
          while ((char *)v52 != v49);
        }
        v56 = *(double *)(v53 + 8);
        v55 = *(double *)(v53 + 16);
        valuePtr.a = v56;
        valuePtr.b = v55;
        if (v55 != 0.0)
        {
          v57 = (unint64_t *)(*(_QWORD *)&v55 + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v60 = *(_DWORD *)(v53 + 24);
        v59 = *(_DWORD *)(v53 + 28);
        if (v60 <= (int)v51)
          v61 = v51;
        else
          v61 = v60;
        v62 = (v59 + v60);
        if (v62 >= v48)
          v51 = v128 + v10;
        else
          v51 = (v59 + v60);
        v143.location = v61 - v128;
        v143.length = v51 - v61;
        if (OZChannel::getValueAsInt((OZChannel *)(*(_QWORD *)&v56 + 5504), v50, 0.0))
        {
          v63 = PCString::cf_str(&v155);
          v147 = v56;
          v148 = v55;
          if (v55 != 0.0)
          {
            v64 = (unint64_t *)(*(_QWORD *)&v55 + 8);
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          TXTextLayout::applyAllCapsSizeToAttributedString(v130, aStr, v63, (TXTextStyle **)&v147, &v143, a4);
          v66 = *(std::__shared_weak_count **)&v148;
          if (v148 == 0.0)
            goto LABEL_85;
          v67 = (unint64_t *)(*(_QWORD *)&v148 + 8);
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
        }
        else
        {
          v145 = v56;
          v146 = v55;
          if (v55 != 0.0)
          {
            v69 = (unint64_t *)(*(_QWORD *)&v55 + 8);
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
          }
          TXTextLayout::applyFontToAttributedString(v130, aStr, (TXTextStyle **)&v145, &v143, a4, 0);
          v66 = *(std::__shared_weak_count **)&v146;
          if (v146 == 0.0)
            goto LABEL_85;
          v71 = (unint64_t *)(*(_QWORD *)&v146 + 8);
          do
            v68 = __ldaxr(v71);
          while (__stlxr(v68 - 1, v71));
        }
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
LABEL_85:
        v72 = valuePtr.b;
        if (*(_QWORD *)&valuePtr.b)
        {
          v73 = (unint64_t *)(*(_QWORD *)&valuePtr.b + 8);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            (*(void (**)(CGFloat))(**(_QWORD **)&v72 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v72));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v72);
          }
        }
      }
      while (v48 > v62);
    }
    CFAttributedStringEndEditing(aStr);
    v143.length = 0;
    v144 = 0;
    v142[1] = v10;
    v143.location = (CFIndex)&v143.length;
    v142[0] = v128;
    TXTextLayout::getKerningsForRange((uint64_t *)v130, v142, (uint64_t **)&v143);
    TXTextLayout::getTrackingForRange((uint64_t)v130, v142, a4, (uint64_t)&v143);
    applyKerningsToAttributedString(&v143, 0, aStr);
    __p = 0;
    v140 = 0;
    v141 = 0;
    v75 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v76 = *(double *)(MEMORY[0x1E0C9D648] + 24);
    v124 = (CFTypeRef *)((char *)v130 + 64184);
    if (TXTextLayout::scaleEmojiToCapHeight(v77) && *v124 && __p != v140)
    {
      CFAttributedStringBeginEditing(aStr);
      *((CGFloat *)v130 + 8024) = CTFontGetCapHeight(*((CTFontRef *)v130 + 8023)) / v76;
      *((double *)v130 + 8025) = -v75;
      v78 = (CFRange *)__p;
      v79 = (CFRange *)v140;
      if (__p != v140)
      {
        v80 = (const __CFString *)*MEMORY[0x1E0CA8188];
        do
        {
          location = v78->location;
          v82 = (_QWORD *)*((_QWORD *)v130 + 2422);
          do
          {
            v83 = v82[2];
            v84 = *(_DWORD *)(v83 + 24);
            if (v84 <= location && *(_DWORD *)(v83 + 28) + v84 > location)
              break;
            v82 = (_QWORD *)v82[1];
          }
          while (v82 != (_QWORD *)((char *)v130 + 19368));
          v85 = *(OZChannel **)(v83 + 8);
          v86 = *(std::__shared_weak_count **)(v83 + 16);
          v137 = v85;
          v138 = v86;
          if (v86)
          {
            p_shared_owners = (unint64_t *)&v86->__shared_owners_;
            do
              v88 = __ldxr(p_shared_owners);
            while (__stxr(v88 + 1, p_shared_owners));
          }
          v136 = *a4;
          Size = TXTextStyle::getSize(v85, &v136, 0.0);
          memset(&valuePtr, 0, sizeof(valuePtr));
          CGAffineTransformMakeScale(&valuePtr, *((CGFloat *)v130 + 8024), *((CGFloat *)v130 + 8024));
          v90 = CTFontCreateWithName(CFSTR("AppleColorEmoji"), Size, &valuePtr);
          CFAttributedStringSetAttribute(aStr, *v78, v80, v90);
          CFRelease(v90);
          if (v86)
          {
            v91 = (unint64_t *)&v86->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
          }
          ++v78;
        }
        while (v78 != v79);
      }
      CFAttributedStringEndEditing(aStr);
    }
    *(_QWORD *)&valuePtr.a = CTLineCreateWithAttributedString(aStr);
    TXParagraphStyle::clearDirectionalRuns(v9);
    GlyphRuns = CTLineGetGlyphRuns(*(CTLineRef *)&valuePtr.a);
    Count = CFArrayGetCount(GlyphRuns);
    v122 = (uint64_t *)v9;
    if (Count < 1)
    {
      length = 0;
      v101 = -1;
      LOBYTE(v119) = 1;
    }
    else
    {
      v125 = Count;
      theArray = GlyphRuns;
      v95 = 0;
      v96 = 0;
      key = (void *)*MEMORY[0x1E0CA8188];
      v97 = 1;
      v98 = -1;
      do
      {
        ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(theArray, v95);
        StringRange = CTRunGetStringRange(ValueAtIndex);
        v101 = StringRange.location;
        length = StringRange.length;
        if (TXTextLayout::scaleEmojiToCapHeight((TXTextLayout *)StringRange.location))
        {
          Attributes = CTRunGetAttributes(ValueAtIndex);
          Value = (const __CTFont *)CFDictionaryGetValue(Attributes, key);
          v105 = CTFontCopyPostScriptName(Value);
          GlyphCount = CTRunGetGlyphCount(ValueAtIndex);
          if (CFStringCompare(v105, CFSTR("AppleColorEmoji"), 0))
          {
            *v124 = CFRetain(Value);
          }
          else
          {
            GlyphsPtr = CTRunGetGlyphsPtr(ValueAtIndex);
            if (GlyphsPtr)
            {
              CTFontGetBoundingRectsForGlyphs(Value, kCTFontOrientationDefault, GlyphsPtr, 0, GlyphCount);
            }
            else
            {
              glyphs = (CGGlyph *)operator new[]();
              CTRunGetGlyphs(ValueAtIndex, StringRange, glyphs);
              BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs(Value, kCTFontOrientationDefault, glyphs, 0, GlyphCount);
              MEMORY[0x1B5E2914C](glyphs, 0x1000C80BDFB0063, (__n128)BoundingRectsForGlyphs.origin, *(__n128 *)&BoundingRectsForGlyphs.origin.y, (__n128)BoundingRectsForGlyphs.size, *(__n128 *)&BoundingRectsForGlyphs.size.height);
            }
            v108 = v140;
            if (v140 >= v141)
            {
              v110 = (char *)__p;
              v111 = (v140 - (_BYTE *)__p) >> 4;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 60)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v113 = v141 - (_BYTE *)__p;
              if ((v141 - (_BYTE *)__p) >> 3 > v112)
                v112 = v113 >> 3;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF0)
                v114 = 0xFFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
              {
                v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)&v141, v114);
                v110 = (char *)__p;
                v108 = v140;
              }
              else
              {
                v115 = 0;
              }
              v116 = (CFRange *)&v115[16 * v111];
              *v116 = StringRange;
              v117 = v116;
              if (v108 != v110)
              {
                do
                {
                  v117[-1] = *((CFRange *)v108 - 1);
                  --v117;
                  v108 -= 16;
                }
                while (v108 != v110);
                v110 = (char *)__p;
              }
              v109 = v116 + 1;
              __p = v117;
              v140 = (char *)&v116[1];
              v141 = &v115[16 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_QWORD *)v140 = StringRange.location;
              *((_QWORD *)v108 + 1) = StringRange.length;
              v109 = (CFRange *)(v108 + 16);
            }
            v140 = (char *)v109;
          }
          CFRelease(v105);
        }
        v118 = CTRunGetStatus(ValueAtIndex) & 1;
        v119 = v118 == 0;
        if (v95)
        {
          if ((v118 ^ 1) == v97)
          {
            length = StringRange.length + v96;
            if (!v118)
              v101 = v98;
            v119 = v97;
          }
          else
          {
            v133[0] = v98 + v128;
            v133[1] = v96;
            v134 = v97;
            TXParagraphStyle::pushDirectionalRun(v122, (uint64_t)v133);
          }
        }
        ++v95;
        v98 = v101;
        v96 = length;
        v97 = v119;
      }
      while (v95 != v125);
    }
    v131[0] = v101 + v128;
    v131[1] = length;
    v132 = v119;
    TXParagraphStyle::pushDirectionalRun(v122, (uint64_t)v131);
    v120 = (OZChannel *)((char *)v130 + 20464);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)v130 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 1
      || OZChannel::getValueAsInt(v120, MEMORY[0x1E0CA2E68], 0.0) == 3
      || OZChannel::getValueAsInt(v120, MEMORY[0x1E0CA2E68], 0.0) == 4)
    {
      TXTextLayout::doParagraphLayout(v130, (TXParagraphStyle *)v122, &v155, aStr, a3, (const OZRenderState *)a4);
    }
    else
    {
      TXTextLayout::doTypeLayout(v130, *(CTLineRef *)&valuePtr.a, (TXParagraphStyle *)v122, &v155, aStr, a3, (const OZRenderState *)a4);
    }
    TXParagraphStyle::dirty((TXParagraphStyle *)v122, 0);
    TXParagraphStyle::setAttributedString((TXParagraphStyle *)v122, aStr);
    PCCFRef<__CTLine const*>::~PCCFRef((const void **)&valuePtr);
    if (__p)
    {
      v140 = (char *)__p;
      operator delete(__p);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v143, (_QWORD *)v143.length);
    if (v151)
    {
      v152 = v151;
      operator delete(v151);
    }
    PCString::~PCString(&v154);
    PCString::~PCString(&v155);
  }
  else
  {
    TXParagraphStyle::dirty(*((TXParagraphStyle **)&var0->isa + a2), 0);
    *(_QWORD *)(v9 + 920) = 0;
    *(_DWORD *)(v9 + 876) = 1;
    v20 = (__int128 *)operator new(0x40uLL);
    *v20 = 0u;
    v20[1] = 0u;
    __asm { FMOV            V1.2D, #-1.0 }
    v20[2] = 0u;
    v20[3] = _Q1;
    std::vector<TXLineMetrics>::__assign_with_size[abi:ne180100]<TXLineMetrics*,TXLineMetrics*>((_QWORD *)(v9 + 888), v20, v20 + 4, 1uLL);
    TXParagraphStyle::clearDirectionalRuns(v9);
    v156[0] = *(_QWORD *)(v9 + 856);
    v156[1] = 0;
    v157 = 1;
    TXParagraphStyle::pushDirectionalRun((uint64_t *)v9, (uint64_t)v156);
    TXParagraphStyle::setCaretPositionPair(v9, *(_QWORD *)(v9 + 856), 0xFFFFFFFFLL, 0xFFFFFFFFLL);
    operator delete(v20);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v158);
}

void sub_1B28F6250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,_QWORD *a45)
{
  uint64_t v45;
  void *v47;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a44, a45);
  v47 = *(void **)(v45 - 192);
  if (v47)
  {
    *(_QWORD *)(v45 - 184) = v47;
    operator delete(v47);
  }
  PCString::~PCString((PCString *)(v45 - 168));
  PCString::~PCString((PCString *)(v45 - 160));
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v45 - 128));
  _Unwind_Resume(a1);
}

CTTextTabRef TXMakeCTTextTab(TXTabStop *a1)
{
  OZChannel *v2;
  unsigned int ValueAsInt;
  unsigned int v4;
  OZChannel *v5;
  const CMTime *v6;
  double v7;
  double v8;
  const __CFAllocator *v9;
  const __CFDictionary *v10;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v2 = (OZChannel *)((char *)a1 + 288);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)a1 + 288), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt >= 4)
  {
    printf("Unrecognized TXTabType");
    LOBYTE(v4) = 0;
  }
  else
  {
    v4 = 0x10200u >> (8 * ValueAsInt);
  }
  v5 = (OZChannel *)((char *)a1 + 136);
  v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble(v5, MEMORY[0x1E0CA2E68], 0.0);
  v8 = v7;
  if (OZChannel::getValueAsInt(v2, v6, 0.0) != 3)
    return CTTextTabCreate((CTTextAlignment)v4, v8, 0);
  keys[0] = *(void **)MEMORY[0x1E0CA85D8];
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFCharacterSetCreateWithCharactersInString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("."));
  v10 = CFDictionaryCreate(v9, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  return CTTextTabCreate(kCTTextAlignmentLeft, v8, v10);
}

void TXTextLayout::doParagraphLayout(TXTextLayout *this, TXParagraphStyle *a2, PCString *a3, __CFAttributedString *a4, double a5, const OZRenderState *a6)
{
  __CFString *v10;
  uint64_t v11;
  TXParagraphStyle **v12;
  TXParagraphStyle **v13;
  uint64_t v14;
  __CFAttributedString *v15;
  TXParagraphStyle *v16;
  void **HostApplicationDelegate;
  int v18;
  CFIndex v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  double v23;
  CFIndex v24;
  CFIndex v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t *v35;
  unint64_t v36;
  int Alignment;
  CGFloat v38;
  CFIndex v39;
  double v40;
  double TrailingKerningWidth;
  double PenOffsetForFlush;
  int ValueAsInt;
  const OZRenderState *v44;
  double v45;
  char *v46;
  __int128 *v47;
  char *v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  __int128 *v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  double TrailingWhitespaceWidth;
  double *v61;
  double TypographicBounds;
  double v63;
  double v64;
  double *v65;
  double *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  double *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  CFIndex GlyphCount;
  uint64_t v77;
  uint64_t v78;
  OZChannel *v79;
  __CFAttributedString *v80;
  int v81;
  int v82;
  CFIndex Length;
  TXTextLayout *v85;
  const __CTTypesetter *typesetter;
  void *v87;
  _BYTE *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  CTLineRef line;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  void *__p;
  char *v99;
  unint64_t v100;
  double *v101;
  double *v102;
  double *v103;
  unint64_t *v104;
  unint64_t *v105;
  unint64_t *v106;
  CFRange v107;

  v10 = PCString::cf_str(a3);
  Length = CFStringGetLength(v10);
  *((_QWORD *)a2 + 3) = *((_QWORD *)a2 + 2);
  TXParagraphStyle::clearLeftRightCaretPositionMaps(a2);
  v78 = *((_QWORD *)a2 + 107);
  v11 = *((_QWORD *)a2 + 108);
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  __p = 0;
  v99 = 0;
  v100 = 0;
  typesetter = CTTypesetterCreateWithAttributedString(a4);
  v12 = (TXParagraphStyle **)*((_QWORD *)this + 2378);
  v13 = (TXParagraphStyle **)*((_QWORD *)this + 2379);
  if (v12 == v13)
  {
    v15 = 0;
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = *v12;
      if (*v12 == a2)
        break;
      v15 = (__CFAttributedString *)((char *)v15 + *((unsigned int *)v16 + 259));
      v14 += *((_QWORD *)v16 + 108);
      ++v12;
    }
    while (v12 != v13);
  }
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  v18 = OZHostApplicationDelegateHandler::wantsToSkipSuggestedLineBreaksInParagraphLayout(HostApplicationDelegate);
  v82 = OZHostApplicationDelegateHandler::wantsToIncludeTrailingWhitespaceInParagraphLineWidth(HostApplicationDelegate);
  v95 = 0;
  v96 = 0;
  v97 = 0;
  if (Length < 1)
  {
    v20 = 0;
    v23 = 0.0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v77 = v11 + v78;
    v22 = v18 ^ 1;
    if (a5 <= 0.0)
      v22 = 0;
    v81 = v22;
    v85 = this;
    v79 = (OZChannel *)((char *)this + 20720);
    v80 = v15;
    v23 = 0.0;
    do
    {
      if (v81)
        v24 = (*(uint64_t (**)(TXTextLayout *, const __CTTypesetter *, CFIndex, uint64_t, double))(*(_QWORD *)v85 + 1120))(v85, typesetter, v19, v14, a5);
      else
        v24 = *((_QWORD *)a2 + 108);
      v15 = a4;
      v25 = v24 + v19;
      v26 = v24 + v19 + v14;
      v27 = v105;
      if (v105 >= v106)
      {
        v29 = v104;
        v30 = v105 - v104;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v32 = (char *)v106 - (char *)v104;
        if (((char *)v106 - (char *)v104) >> 2 > v31)
          v31 = v32 >> 2;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v106, v33);
          v29 = v104;
          v27 = v105;
        }
        else
        {
          v34 = 0;
        }
        v35 = (unint64_t *)&v34[8 * v30];
        *v35 = v26;
        v28 = v35 + 1;
        while (v27 != v29)
        {
          v36 = *--v27;
          *--v35 = v36;
        }
        v104 = v35;
        v105 = v28;
        v106 = (unint64_t *)&v34[8 * v33];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v105 = v26;
        v28 = v27 + 1;
      }
      v105 = v28;
      v107.location = v19;
      v107.length = v24;
      line = CTTypesetterCreateLine(typesetter, v107);
      Alignment = TXParagraphStyle::getAlignment(a2);
      a4 = v15;
      v38 = 0.0;
      LODWORD(v15) = (_DWORD)v80;
      v39 = v19 + v78 + v24;
      v40 = 1.0;
      switch(Alignment)
      {
        case 1:
          v38 = 0.5;
          break;
        case 2:
          v38 = 1.0;
          break;
        case 3:
          if (v39 == v77)
            v40 = 0.0;
          else
            v40 = 1.0;
          goto LABEL_43;
        case 4:
          if (v39 == v77)
            v40 = 0.0;
          else
            v40 = 1.0;
          v38 = 0.5;
          goto LABEL_43;
        case 5:
          v38 = 1.0;
          if (v39 == v77)
            v40 = 0.0;
          else
            v40 = 1.0;
          goto LABEL_43;
        case 6:
LABEL_43:
          if (a5 > 0.0 && v40 > 0.0)
          {
            *(_QWORD *)&v90 = CTLineCreateJustifiedLine(line, v40, a5);
            if ((_QWORD)v90)
              PCCFRef<__CTLine const*>::operator=((const void **)&line, (const void **)&v90);
            PCCFRef<__CTLine const*>::~PCCFRef((const void **)&v90);
          }
          break;
        default:
          break;
      }
      TrailingKerningWidth = getTrailingKerningWidth(line);
      PenOffsetForFlush = CTLineGetPenOffsetForFlush(line, v38, a5);
      ValueAsInt = OZChannel::getValueAsInt(v79, MEMORY[0x1E0CA2E68], 0.0);
      v45 = TrailingKerningWidth * 0.5 + PenOffsetForFlush;
      if (ValueAsInt)
        v45 = -v45;
      TXTextLayout::applyCTLineDataToTextObjects(v85, line, a2, a3, a4, v45, v44, (uint64_t)v80 + v21, (uint64_t)&v90);
      v46 = v99;
      if ((unint64_t)v99 >= v100)
      {
        v48 = (char *)__p;
        v49 = (v99 - (_BYTE *)__p) >> 6;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 58)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v51 = v100 - (_QWORD)__p;
        if ((uint64_t)(v100 - (_QWORD)__p) >> 5 > v50)
          v50 = v51 >> 5;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFC0)
          v52 = 0x3FFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)&v100, v52);
          v48 = (char *)__p;
          v46 = v99;
        }
        else
        {
          v53 = 0;
        }
        v54 = (__int128 *)&v53[64 * v49];
        *v54 = v90;
        v54[1] = v91;
        v54[2] = v92;
        v54[3] = v93;
        if (v46 == v48)
        {
          v56 = &v53[64 * v49];
        }
        else
        {
          v55 = &v53[64 * v49];
          do
          {
            v56 = v55 - 64;
            v57 = *((_OWORD *)v46 - 4);
            v58 = *((_OWORD *)v46 - 3);
            v59 = *((_OWORD *)v46 - 1);
            *((_OWORD *)v55 - 2) = *((_OWORD *)v46 - 2);
            *((_OWORD *)v55 - 1) = v59;
            *((_OWORD *)v55 - 4) = v57;
            *((_OWORD *)v55 - 3) = v58;
            v46 -= 64;
            v55 -= 64;
          }
          while (v46 != v48);
        }
        v47 = v54 + 4;
        __p = v56;
        v99 = (char *)(v54 + 4);
        v100 = (unint64_t)&v53[64 * v52];
        if (v48)
          operator delete(v48);
      }
      else
      {
        *(_OWORD *)v99 = v90;
        *((_OWORD *)v46 + 1) = v91;
        *((_OWORD *)v46 + 2) = v92;
        *((_OWORD *)v46 + 3) = v93;
        v47 = (__int128 *)(v46 + 64);
      }
      v99 = (char *)v47;
      TrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth(line);
      TypographicBounds = CTLineGetTypographicBounds(line, 0, 0, 0);
      if (v82)
        v63 = 0.0;
      else
        v63 = TrailingWhitespaceWidth;
      v64 = TypographicBounds - v63;
      if (TypographicBounds - v63 >= v23)
        v23 = TypographicBounds - v63;
      v65 = v102;
      if (v102 >= v103)
      {
        v61 = v101;
        v67 = v102 - v101;
        v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v69 = (char *)v103 - (char *)v101;
        if (((char *)v103 - (char *)v101) >> 2 > v68)
          v68 = v69 >> 2;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
          v70 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v103, v70);
          v61 = v101;
          v65 = v102;
        }
        else
        {
          v71 = 0;
        }
        v72 = (double *)&v71[8 * v67];
        *v72 = v64;
        v66 = v72 + 1;
        while (v65 != v61)
        {
          v73 = *((_QWORD *)v65-- - 1);
          *((_QWORD *)v72-- - 1) = v73;
        }
        v101 = v72;
        v102 = v66;
        v103 = (double *)&v71[8 * v70];
        if (v61)
          operator delete(v61);
      }
      else
      {
        *v102 = v64;
        v66 = v65 + 1;
      }
      v102 = v66;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      TXTextLayout::addCaretInsertionPoints((int)v61, a4, v19, v24, (uint64_t)a2, (uint64_t)&v87);
      v74 = v96;
      if ((unint64_t)v96 >= v97)
      {
        v75 = std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(&v95, (uint64_t)&v87);
      }
      else
      {
        *v96 = 0;
        v74[1] = 0;
        v74[2] = 0;
        std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(v74, v87, (uint64_t)v88, (v88 - (_BYTE *)v87) >> 3);
        v75 = (uint64_t)(v74 + 3);
      }
      v96 = (_QWORD *)v75;
      GlyphCount = CTLineGetGlyphCount(line);
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      v21 += GlyphCount;
      v20 += GlyphCount;
      PCCFRef<__CTLine const*>::~PCCFRef((const void **)&line);
      v19 = v25;
    }
    while (v25 < Length);
  }
  CFRelease(typesetter);
  TXHelperFunctions::SetCaretMovementMap((uint64_t)a2, &v95);
  if ((void **)((char *)a2 + 888) != &__p)
    std::vector<TXLineMetrics>::__assign_with_size[abi:ne180100]<TXLineMetrics*,TXLineMetrics*>((_QWORD *)a2 + 111, (__int128 *)__p, (__int128 *)v99, (v99 - (_BYTE *)__p) >> 6);
  *((_DWORD *)a2 + 219) = (unint64_t)(v99 - (_BYTE *)__p) >> 6;
  TXParagraphStyle::setLineBreaks(a2, v104, (unint64_t)((char *)v105 - (char *)v104) >> 3);
  *((double *)a2 + 115) = v23;
  *(_QWORD *)&v90 = __PAIR64__(v20, v15);
  TXParagraphStyle::setGlyphRange((uint64_t)a2, (double *)&v90);
  *(_QWORD *)&v90 = &v95;
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
  if (__p)
  {
    v99 = (char *)__p;
    operator delete(__p);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
}

void sub_1B28F6C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,__int16 *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  uint64_t v41;
  void *v43;
  void *v44;

  a25 = &a35;
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  v43 = *(void **)(v41 - 200);
  if (v43)
  {
    *(_QWORD *)(v41 - 192) = v43;
    operator delete(v43);
  }
  v44 = *(void **)(v41 - 176);
  if (v44)
  {
    *(_QWORD *)(v41 - 168) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

void TXTextLayout::doTypeLayout(TXTextLayout *this, CTLineRef line, TXParagraphStyle *a3, PCString *a4, __CFAttributedString *a5, double a6, const OZRenderState *a7)
{
  const __CTLine *v11;
  double TypographicBounds;
  double TrailingWhitespaceWidth;
  const OZRenderState *v15;
  double TrailingKerningWidth;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double v30;
  _OWORD v31[4];
  CFTypeRef cf;
  CGFloat leading;
  void *__p;
  char *v35;
  __int128 *v36;

  v11 = line;
  *((_QWORD *)a3 + 3) = *((_QWORD *)a3 + 2);
  __p = 0;
  v35 = 0;
  v36 = 0;
  leading = 0.0;
  TypographicBounds = CTLineGetTypographicBounds(line, 0, 0, &leading);
  TrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth(v11);
  TrailingKerningWidth = getTrailingKerningWidth(v11);
  v17 = *((_QWORD *)this + 2378);
  v18 = *((_QWORD *)this + 2379);
  if (v17 == v18)
  {
    v19 = 0;
  }
  else
  {
    v19 = 0;
    do
    {
      if (*(TXParagraphStyle **)v17 == a3)
        break;
      v19 += *(unsigned int *)(*(_QWORD *)v17 + 1036);
      v17 += 8;
    }
    while (v17 != v18);
  }
  cf = 0;
  if (a6 > 0.0 && TXParagraphStyle::getAlignment(a3) == 6)
  {
    cf = CTLineCreateJustifiedLine(v11, 1.0, a6);
    *(_QWORD *)&v31[0] = 0;
    PCCFRef<__CTLine const*>::~PCCFRef((const void **)v31);
    if (cf)
      v11 = (const __CTLine *)cf;
  }
  TXTextLayout::applyCTLineDataToTextObjects(this, v11, a3, a4, a5, 0.0, v15, v19, (uint64_t)v31);
  v20 = (__int128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)&v36, 1uLL);
  v21 = (char *)__p;
  v22 = v35;
  v24 = &v20[4 * v23];
  *v20 = v31[0];
  v20[1] = v31[1];
  v20[2] = v31[2];
  v20[3] = v31[3];
  v25 = v20 + 4;
  if (v22 != v21)
  {
    v26 = v20;
    do
    {
      v20 = v26 - 4;
      v27 = *((_OWORD *)v22 - 4);
      v28 = *((_OWORD *)v22 - 3);
      v29 = *((_OWORD *)v22 - 1);
      *(v26 - 2) = *((_OWORD *)v22 - 2);
      *(v26 - 1) = v29;
      *(v26 - 4) = v27;
      *(v26 - 3) = v28;
      v22 -= 64;
      v26 -= 4;
    }
    while (v22 != v21);
  }
  __p = v20;
  v35 = (char *)v25;
  v36 = v24;
  if (v21)
    operator delete(v21);
  v35 = (char *)v25;
  if ((void **)((char *)a3 + 888) != &__p)
    std::vector<TXLineMetrics>::__assign_with_size[abi:ne180100]<TXLineMetrics*,TXLineMetrics*>((_QWORD *)a3 + 111, (__int128 *)__p, v25, ((char *)v25 - (_BYTE *)__p) >> 6);
  *((_DWORD *)a3 + 219) = 1;
  TXParagraphStyle::setLineBreaks(a3, 0, 0);
  *((double *)a3 + 115) = TypographicBounds - TrailingWhitespaceWidth - TrailingKerningWidth;
  LODWORD(v30) = v19;
  HIDWORD(v30) = CTLineGetGlyphCount(v11);
  TXParagraphStyle::setGlyphRange((uint64_t)a3, &v30);
  PCCFRef<__CTLine const*>::~PCCFRef(&cf);
  if (__p)
  {
    v35 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B28F6FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void *a18, uint64_t a19, void *__p,uint64_t a21)
{
  PCCFRef<__CTLine const*>::~PCCFRef(&a10);
  PCCFRef<__CTLine const*>::~PCCFRef(&a18);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const void **PCCFRef<__CTLine const*>::operator=(const void **a1, const void **a2)
{
  const void *v3;
  const void *v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      CFRelease(v3);
      v4 = *a2;
    }
    *a1 = v4;
    if (*a2)
      CFRetain(v4);
  }
  return a1;
}

double getTrailingKerningWidth(const __CTLine *a1)
{
  const __CFArray *GlyphRuns;
  CFIndex Count;
  const __CTRun *ValueAtIndex;

  GlyphRuns = CTLineGetGlyphRuns(a1);
  Count = CFArrayGetCount(GlyphRuns);
  ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, Count - 1);
  return getTrailingKerningWidthForRun(ValueAtIndex);
}

void TXTextLayout::applyCTLineDataToTextObjects(TXTextLayout *this@<X0>, CTLineRef line@<X1>, TXParagraphStyle *a3@<X2>, PCString *a4@<X4>, const __CFAttributedString *a5@<X5>, double a6@<D0>, const OZRenderState *a7@<X6>, uint64_t a8@<X3>, uint64_t a9@<X8>)
{
  const __CFNumber *Attribute;
  const __CFNumber *v13;
  CFStringRef String;
  char v20;
  CFIndex v21;
  const __CFString *v22;
  int v23;
  double v24;
  uint64_t v25;
  const __CTRun *ValueAtIndex;
  uint64_t GlyphCount;
  const __CFDictionary *Attributes;
  const __CTFont *v29;
  char Status;
  CGSize *v31;
  CGSize *v32;
  CGRect *v33;
  uint64_t v34;
  const __CTRun *v35;
  const uint64_t *v36;
  CFIndex v37;
  int location;
  double v39;
  double v40;
  int v41;
  CGFloat width;
  double *p_x;
  double v44;
  double v45;
  double *v46;
  double b;
  double c;
  double d;
  double tx;
  double ty;
  __CFString *v52;
  UniChar CharacterAtIndex;
  const __CFString *v54;
  UniChar v55;
  _BOOL4 IsWhitespaceOrNewline;
  uint64_t v57;
  TXParagraphStyle *v58;
  uint64_t *ComposedCharacter;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  TXTextObject *v64;
  TXTextObject *v65;
  CFIndex v66;
  TXTextObject *v67;
  __int128 v68;
  __int128 v69;
  UniChar *v70;
  CFStringRef v71;
  TXTextObject *v72;
  uint64_t *v73;
  uint64_t v74;
  float64_t v75;
  float64_t v76;
  unint64_t *v77;
  unint64_t v78;
  TXTextLayout *v79;
  int v80;
  float64_t v81;
  unint64_t *v82;
  unint64_t v83;
  double v84;
  double v85;
  double v86;
  TXTextObject *v87;
  double v88;
  unint64_t v89;
  char *v90;
  double v91;
  _DWORD *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  int v100;
  TXFontManager *v101;
  BOOL v102;
  TXTextStyle *v103;
  std::__shared_weak_count *v104;
  unint64_t *p_shared_owners;
  unint64_t v106;
  int v107;
  unint64_t *v108;
  unint64_t v109;
  const PCString *Instance;
  BOOL v111;
  void *v112;
  float64_t v113;
  unint64_t *v114;
  unint64_t v115;
  float64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  float64_t v122;
  void *v123;
  float64_t v124;
  unint64_t *v125;
  unint64_t v126;
  TXCoreTextTypeface *v127;
  unsigned int v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  int v134;
  float64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  TXTextObject *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  float64_t v147;
  unint64_t *v148;
  unint64_t v149;
  TXTextObject *v150;
  CGFloat v151;
  CGFloat v152;
  double v153;
  double v154;
  double v155;
  double v156;
  CGFloat v157;
  CGFloat v158;
  double v159;
  double v160;
  double v161;
  double v162;
  uint64_t v163;
  double v164;
  double v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  __int128 v174;
  double v175;
  double v177;
  const __CFString *v178;
  CTFontOrientation orientation;
  const __CFArray *theArray;
  double v181;
  double v182;
  CFIndex Count;
  const __CFAttributedString *aStr;
  CFIndex v185;
  CGSize *v186;
  CFIndex *v187;
  CGPoint *v188;
  CGGlyph *v189;
  char *v190;
  const __CTFont *font;
  int v192;
  void **v193;
  char v194;
  CGSize *v195;
  double v196;
  double v197;
  uint64_t **v198;
  char *v199;
  const __CFAllocator *alloc;
  char v202;
  double v204;
  double v205;
  double v206;
  uint64_t v207;
  CGRect *v208;
  CGSize *AdvancesPtr;
  CGPoint *buffer;
  CFIndex *StringIndicesPtr;
  CGGlyph *glyphs;
  const __CTRun *run;
  double *v214;
  double v215;
  double v216;
  uint64_t *v217;
  double a;
  double v219;
  TXTextLayout *v220;
  double v221;
  double v222;
  unsigned int NumBytesForGlyph;
  double v224;
  int ValueAsInt;
  double v226;
  double TypographicBounds;
  uint64_t v228;
  _BOOL4 v229;
  char *v231;
  float64x2_t v232;
  double v233;
  double v234;
  float64x2_t v235;
  void *lpsrc;
  std::__shared_weak_count *v237;
  float64x2_t v238;
  PCString v239;
  unsigned int v240;
  TXTextObject *v241;
  std::__shared_weak_count *v242;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGAffineTransform v246;
  const __CFString *v247;
  const __CFString *v248;
  PCString v249;
  float64x2_t v250;
  __int128 v251;
  int valuePtr[5];
  CFRange v253;
  CFRange v254;
  CFRange v255;
  CFRange v256;
  CFRange v257;
  CFRange v258;

  theArray = CTLineGetGlyphRuns(line);
  Count = CFArrayGetCount(theArray);
  v197 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0);
  v202 = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this);
  aStr = a5;
  Attribute = (const __CFNumber *)CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E0CA83A0], 0);
  valuePtr[0] = 1;
  if (Attribute)
  {
    valuePtr[0] = 2;
    v13 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
    LODWORD(Attribute) = CFNumberCompare(v13, Attribute, 0) == kCFCompareEqualTo;
    CFRelease(v13);
  }
  v250 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v251 = _Q0;
  String = CFAttributedStringGetString(aStr);
  PCURL::PCURL((PCURL *)&v249, String);
  v20 = 1;
  if (Count < 1)
  {
    v169 = 0.0;
    v196 = 0.0;
    v219 = 0.0;
    v205 = 0.0;
    v206 = 0.0;
    v204 = 0.0;
    v181 = 0.0;
    v182 = 0.0;
    goto LABEL_195;
  }
  v21 = 0;
  v214 = (double *)((char *)this + 58824);
  v22 = (const __CFString *)*MEMORY[0x1E0CA8188];
  v194 = 1;
  if ((_DWORD)Attribute)
    v23 = 2;
  else
    v23 = 1;
  orientation = v23;
  v231 = (char *)this + 19368;
  v199 = (char *)this + 64256;
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v193 = (void **)((char *)a3 + 16);
  v190 = (char *)a3 + 32;
  v220 = this;
  v198 = (uint64_t **)((char *)this + 64208);
  v196 = 0.0;
  v197 = 0.0;
  v24 = 0.0;
  v219 = 0.0;
  v25 = *((_QWORD *)this + 7353) + 16 * a8;
  v205 = 0.0;
  v206 = 0.0;
  v204 = 0.0;
  v178 = (const __CFString *)*MEMORY[0x1E0CA8188];
  do
  {
    ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(theArray, v21);
    GlyphCount = CTRunGetGlyphCount(ValueAtIndex);
    run = ValueAtIndex;
    Attributes = CTRunGetAttributes(ValueAtIndex);
    font = (const __CTFont *)CFDictionaryGetValue(Attributes, v22);
    v29 = (const __CTFont *)CFAttributedStringGetAttribute(aStr, v21, v22, 0);
    CTRunGetStringRange(run);
    v248 = CTFontCopyPostScriptName(font);
    v247 = CTFontCopyPostScriptName(v29);
    v181 = CTFontGetAscent(v29);
    v177 = CTFontGetDescent(v29);
    v182 = CTFontGetLeading(v29);
    Status = CTRunGetStatus(run);
    glyphs = (CGGlyph *)CTRunGetGlyphsPtr(run);
    buffer = (CGPoint *)CTRunGetPositionsPtr(run);
    StringIndicesPtr = (CFIndex *)CTRunGetStringIndicesPtr(run);
    AdvancesPtr = (CGSize *)CTRunGetAdvancesPtr(run);
    if (glyphs)
    {
      v189 = 0;
    }
    else
    {
      glyphs = (CGGlyph *)operator new[]();
      v253.location = 0;
      v253.length = GlyphCount;
      CTRunGetGlyphs(run, v253, glyphs);
      v189 = glyphs;
    }
    if (buffer)
    {
      v188 = 0;
    }
    else
    {
      buffer = (CGPoint *)operator new[]();
      v254.location = 0;
      v254.length = GlyphCount;
      CTRunGetPositions(run, v254, buffer);
      v188 = buffer;
    }
    if (StringIndicesPtr)
    {
      v187 = 0;
    }
    else
    {
      StringIndicesPtr = (CFIndex *)operator new[]();
      v255.location = 0;
      v255.length = GlyphCount;
      CTRunGetStringIndices(run, v255, StringIndicesPtr);
      v187 = StringIndicesPtr;
    }
    if (AdvancesPtr)
    {
      v31 = 0;
    }
    else
    {
      AdvancesPtr = (CGSize *)operator new[]();
      v256.location = 0;
      v256.length = GlyphCount;
      v31 = AdvancesPtr;
      CTRunGetAdvances(run, v256, AdvancesPtr);
    }
    v186 = v31;
    if (ValueAsInt)
    {
      v32 = (CGSize *)operator new[]();
      CTFontGetVerticalTranslationsForGlyphs(font, glyphs, v32, GlyphCount);
    }
    else
    {
      v32 = 0;
    }
    v195 = v32;
    memset(&v246, 0, sizeof(v246));
    CTRunGetTextMatrix(&v246, run);
    v33 = (CGRect *)operator new[]();
    CTFontGetBoundingRectsForGlyphs(font, orientation, glyphs, v33, GlyphCount);
    v208 = v33;
    v229 = OZIsFontAppleColorEmoji(font);
    v185 = v21;
    if (GlyphCount >= 1)
    {
      v207 = GlyphCount;
      v34 = 0;
      v192 = Status & 1;
      v35 = run;
      v36 = StringIndicesPtr;
      do
      {
        v37 = v36[v34];
        location = CFStringGetRangeOfComposedCharactersAtIndex(String, v37).location;
        NumBytesForGlyph = GetNumBytesForGlyph(v35, v34, v36);
        ascent = 0.0;
        descent = 0.0;
        leading = 0.0;
        v228 = v34;
        v257.location = v34;
        v257.length = 1;
        v222 = v24;
        TypographicBounds = CTRunGetTypographicBounds(v35, v257, &ascent, &descent, &leading);
        v39 = TypographicBounds - getTrailingKerningWidthForRun(v35);
        v40 = v219;
        descent = leading + descent;
        v41 = glyphs[v34];
        if (v39 > v219)
          v40 = v39;
        width = AdvancesPtr[v34].width;
        p_x = &buffer[v34].x;
        v45 = *p_x;
        v44 = p_x[1];
        v46 = &v208[v34].origin.x;
        v221 = *v46;
        v226 = v46[2];
        v215 = v46[3];
        v216 = v46[1];
        a = v246.a;
        v219 = v40;
        b = v246.b;
        c = v246.c;
        d = v246.d;
        tx = v246.tx;
        ty = v246.ty;
        v52 = PCString::cf_str(a4);
        CharacterAtIndex = CFStringGetCharacterAtIndex(v52, v37);
        v54 = String;
        v55 = CFStringGetCharacterAtIndex(String, v37);
        IsWhitespaceOrNewline = TXCharacterSetIsWhitespaceOrNewline(v55);
        v57 = v25;
        v58 = a3;
        ComposedCharacter = TXTextLayout::getComposedCharacter(v220, *((_DWORD *)a3 + 214) + location);
        *(_QWORD *)&v232.f64[0] = v220;
        LODWORD(lpsrc) = a8;
        std::allocate_shared[abi:ne180100]<TXTextObject,std::allocator<TXTextObject>,TXTextLayout *,unsigned int,void>((TXTextLayout **)&v232, (int *)&lpsrc, &v241);
        v217 = std::vector<std::shared_ptr<TXTextObject>>::insert(v214, v57, (uint64_t *)&v241);
        v60 = *((_DWORD *)v58 + 214) + v37;
        v240 = v60;
        v61 = *((_QWORD *)v220 + 2422);
        if ((char *)v61 == v231)
        {
          v62 = 0;
        }
        else
        {
          do
          {
            v62 = *(_QWORD *)(v61 + 16);
            v63 = *(_DWORD *)(v62 + 24);
            if (v63 <= v60 && *(_DWORD *)(v62 + 28) + v63 > v60)
              break;
            v61 = *(_QWORD *)(v61 + 8);
          }
          while ((char *)v61 != v231);
        }
        TXTextObject::setStyleRun((uint64_t)v241, v62);
        TXTextObject::setGlyphID(v241, v41);
        v64 = v241;
        *((CGFloat *)v241 + 32) = width;
        TXTextObject::setUniChar(v64, v55);
        v65 = v241;
        v66 = NumBytesForGlyph >> 1;
        *((_BYTE *)v65 + 569) = TXCharacterSetIsLowercase(CharacterAtIndex);
        v67 = v241;
        *((_DWORD *)v241 + 185) = v66;
        *((_DWORD *)v67 + 97) = a8;
        *((_DWORD *)v67 + 184) = v240;
        PCString::set((PCString *)v67 + 9, (const PCString *)ComposedCharacter);
        v68 = *(_OWORD *)(ComposedCharacter + 1);
        v69 = *(_OWORD *)(ComposedCharacter + 3);
        *((_DWORD *)v67 + 28) = *((_DWORD *)ComposedCharacter + 10);
        *((_OWORD *)v67 + 5) = v68;
        *((_OWORD *)v67 + 6) = v69;
        *((_BYTE *)v241 + 160) = v202;
        v70 = (UniChar *)operator new[]();
        String = v54;
        v258.location = v37;
        v258.length = v66;
        CFStringGetCharacters(v54, v258, v70);
        v36 = StringIndicesPtr;
        v71 = CFStringCreateWithCharacters(alloc, v70, v66);
        a3 = v58;
        MEMORY[0x1B5E2914C](v70, 0x1000C80BDFB0063);
        v72 = v241;
        PCURL::PCURL((PCURL *)&v232, v71);
        PCString::set((PCString *)v72 + 16, (const PCString *)&v232);
        PCString::~PCString((PCString *)&v232);
        CFRelease(v71);
        TXTextObject::dirty(v241);
        *(_QWORD *)&v232.f64[0] = &v240;
        v73 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v199, &v240, (uint64_t)&std::piecewise_construct, &v232);
        std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v73 + 3, (uint64_t *)&v241);
        v74 = *((_QWORD *)v241 + 33);
        if (v74)
        {
          v75 = *(double *)(v74 + 8);
          v76 = *(double *)(v74 + 16);
          v232.f64[0] = v75;
          v232.f64[1] = v76;
          if (v76 != 0.0)
          {
            v77 = (unint64_t *)(*(_QWORD *)&v76 + 8);
            do
              v78 = __ldxr(v77);
            while (__stxr(v78 + 1, v77));
          }
        }
        else
        {
          v75 = 0.0;
          v232 = 0uLL;
        }
        v79 = (TXTextLayout *)OZChannel::getValueAsInt((OZChannel *)(*(_QWORD *)&v75 + 5352), MEMORY[0x1E0CA2E68], 0.0);
        v80 = (int)v79;
        v81 = v232.f64[1];
        if (!*(_QWORD *)&v232.f64[1])
          goto LABEL_43;
        v82 = (unint64_t *)(*(_QWORD *)&v232.f64[1] + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          (*(void (**)(float64_t))(**(_QWORD **)&v81 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v81));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v81);
          if (!v80)
          {
LABEL_48:
            v84 = 0.0;
            goto LABEL_49;
          }
        }
        else
        {
LABEL_43:
          if (!(_DWORD)v79)
            goto LABEL_48;
        }
        v84 = TypographicBounds * 0.5 + 0.0 - v221 - (v221 + v226) * 0.5;
        if (ValueAsInt)
          v84 = 0.0;
LABEL_49:
        v224 = v84;
        v85 = ty + v45 * b + v44 * d;
        if ((TXTextLayout::scaleEmojiToCapHeight(v79) & v229) == 1)
          v85 = v85 + v214[671] * v214[672];
        v86 = tx + v45 * a + v44 * c;
        if (ValueAsInt)
        {
          TXTextObject::setLayoutRealPos((uint64_t)v241, v224 + v195[v228].width * v246.a + v195[v228].height * v246.c - v86 + 0.0 + a6);
          v87 = v241;
        }
        else
        {
          v88 = v86 + a6 + v224;
          TXTextObject::setLayoutRealPos((uint64_t)v241, v88);
          v87 = v241;
          *((double *)v241 + 18) = v88;
          *((double *)v87 + 19) = v85;
        }
        *((_DWORD *)v87 + 4) = a8;
        v90 = (char *)*((_QWORD *)v58 + 3);
        v89 = *((_QWORD *)v58 + 4);
        v24 = v222;
        v91 = TypographicBounds;
        if ((unint64_t)v90 >= v89)
        {
          v93 = (char *)*v193;
          v94 = (v90 - (_BYTE *)*v193) >> 2;
          v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 62)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v96 = v89 - (_QWORD)v93;
          if (v96 >> 1 > v95)
            v95 = v96 >> 1;
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
            v97 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v97 = v95;
          if (v97)
          {
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v190, v97);
            v93 = (char *)*((_QWORD *)v58 + 2);
            v90 = (char *)*((_QWORD *)v58 + 3);
            v24 = v222;
            v91 = TypographicBounds;
          }
          else
          {
            v98 = 0;
          }
          v99 = &v98[4 * v94];
          *(_DWORD *)v99 = v240;
          v92 = v99 + 4;
          while (v90 != v93)
          {
            v100 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v99 - 1) = v100;
            v99 -= 4;
          }
          *((_QWORD *)v58 + 2) = v99;
          *((_QWORD *)v58 + 3) = v92;
          *((_QWORD *)v58 + 4) = &v98[4 * v97];
          if (v93)
            operator delete(v93);
        }
        else
        {
          *(_DWORD *)v90 = v240;
          v92 = v90 + 4;
        }
        *((_QWORD *)v58 + 3) = v92;
        if (v247)
        {
          v101 = (TXFontManager *)CFStringCompare(v247, v248, 0);
          v102 = v229;
          if (v101)
            v102 = 0;
          if (!v102)
          {
            if (!v101)
              goto LABEL_121;
            goto LABEL_85;
          }
        }
        else if (!v229)
        {
          goto LABEL_121;
        }
        v103 = *(TXTextStyle **)(v62 + 8);
        v104 = *(std::__shared_weak_count **)(v62 + 16);
        *(_QWORD *)&v232.f64[0] = v103;
        *(_QWORD *)&v232.f64[1] = v104;
        if (v104)
        {
          p_shared_owners = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldxr(p_shared_owners);
          while (__stxr(v106 + 1, p_shared_owners));
        }
        TXTextStyle::getFontName(v103, (PCString *)&lpsrc);
        PCURL::PCURL((PCURL *)&v239, v248);
        v107 = PCString::compare((PCString *)&lpsrc, &v239);
        PCString::~PCString(&v239);
        PCString::~PCString((PCString *)&lpsrc);
        if (!v104)
          goto LABEL_84;
        v108 = (unint64_t *)&v104->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
          if (!v107)
          {
LABEL_121:
            TXTextObject::setSubstituteFontID(v241, 0);
            v134 = 0;
            goto LABEL_148;
          }
        }
        else
        {
LABEL_84:
          if (!v107)
            goto LABEL_121;
        }
LABEL_85:
        Instance = (const PCString *)TXFontManager::getInstance(v101);
        v232 = 0uLL;
        if (CFStringHasPrefix(v248, CFSTR("."))
          && (PCURL::PCURL((PCURL *)&lpsrc, v248),
              v111 = TXFontManager::containsFontWithName(Instance, (PCString *)&lpsrc),
              PCString::~PCString((PCString *)&lpsrc),
              !v111))
        {
          v127 = (TXCoreTextTypeface *)operator new();
          PCURL::PCURL((PCURL *)&lpsrc, v248);
          PCURL::PCURL((PCURL *)&v239, v248);
          v128 = OZGetNewFontID(v248);
          TXCoreTextTypeface::TXCoreTextTypeface(v127, (const PCString *)&lpsrc, &v239, v128, 0, font);
          std::shared_ptr<OZCoreTextTypeface>::reset[abi:ne180100]<TXCoreTextTypeface,void>(&v232, (uint64_t)v127);
          PCString::~PCString(&v239);
          PCString::~PCString((PCString *)&lpsrc);
          v238 = v232;
          if (*(_QWORD *)&v232.f64[1])
          {
            v129 = (unint64_t *)(*(_QWORD *)&v232.f64[1] + 8);
            do
              v130 = __ldxr(v129);
            while (__stxr(v130 + 1, v129));
          }
          ((void (*)(const PCString *, float64x2_t *))Instance->var0[1].data)(Instance, &v238);
          v131 = *(std::__shared_weak_count **)&v238.f64[1];
          if (*(_QWORD *)&v238.f64[1])
          {
            v132 = (unint64_t *)(*(_QWORD *)&v238.f64[1] + 8);
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
        }
        else
        {
          PCURL::PCURL((PCURL *)&v239, v248);
          ((void (*)(void **__return_ptr, const PCString *, PCString *))Instance->var0[1].length)(&lpsrc, Instance, &v239);
          v112 = lpsrc;
          if (lpsrc
          {
            v113 = *(double *)&v237;
            if (*(double *)&v237 != 0.0)
            {
              v114 = (unint64_t *)&v237->__shared_owners_;
              do
                v115 = __ldxr(v114);
              while (__stxr(v115 + 1, v114));
            }
          }
          else
          {
            v113 = 0.0;
          }
          v116 = v232.f64[1];
          *(_QWORD *)&v232.f64[0] = v112;
          v232.f64[1] = v113;
          if (v116 != 0.0)
          {
            v117 = (unint64_t *)(*(_QWORD *)&v116 + 8);
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              (*(void (**)(float64_t))(**(_QWORD **)&v116 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v116));
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v116);
            }
          }
          v119 = v237;
          if (*(double *)&v237 != 0.0)
          {
            v120 = (unint64_t *)&v237->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          PCString::~PCString(&v239);
        }
        v122 = v232.f64[0];
        if (!*(_QWORD *)&v232.f64[0])
        {
          PCURL::PCURL((PCURL *)&v239, CFSTR("LucidaGrande"));
          ((void (*)(void **__return_ptr, const PCString *, PCString *))Instance->var0[1].length)(&lpsrc, Instance, &v239);
          v123 = lpsrc;
          if (lpsrc
          {
            v124 = *(double *)&v237;
            if (*(double *)&v237 != 0.0)
            {
              v125 = (unint64_t *)&v237->__shared_owners_;
              do
                v126 = __ldxr(v125);
              while (__stxr(v126 + 1, v125));
            }
          }
          else
          {
            v124 = 0.0;
          }
          v135 = v232.f64[1];
          *(_QWORD *)&v232.f64[0] = v123;
          v232.f64[1] = v124;
          if (v135 != 0.0)
          {
            v136 = (unint64_t *)(*(_QWORD *)&v135 + 8);
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 - 1, v136));
            if (!v137)
            {
              (*(void (**)(float64_t))(**(_QWORD **)&v135 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v135));
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v135);
            }
          }
          v138 = v237;
          if (*(double *)&v237 != 0.0)
          {
            v139 = (unint64_t *)&v237->__shared_owners_;
            do
              v140 = __ldaxr(v139);
            while (__stlxr(v140 - 1, v139));
            if (!v140)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
          }
          PCString::~PCString(&v239);
          v122 = v232.f64[0];
        }
        TXTextObject::setSubstituteFontID(v241, *(_DWORD *)(*(_QWORD *)&v122 + 32));
        v141 = v241;
        v235 = v232;
        if (*(_QWORD *)&v232.f64[1])
        {
          v142 = (unint64_t *)(*(_QWORD *)&v232.f64[1] + 8);
          do
            v143 = __ldxr(v142);
          while (__stxr(v143 + 1, v142));
        }
        std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)v141 + 66, (uint64_t *)&v235);
        v144 = *(std::__shared_weak_count **)&v235.f64[1];
        if (*(_QWORD *)&v235.f64[1])
        {
          v145 = (unint64_t *)(*(_QWORD *)&v235.f64[1] + 8);
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        v147 = v232.f64[1];
        if (*(_QWORD *)&v232.f64[1])
        {
          v148 = (unint64_t *)(*(_QWORD *)&v232.f64[1] + 8);
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            (*(void (**)(float64_t))(**(_QWORD **)&v147 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v147));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v147);
          }
        }
        v134 = 1;
LABEL_148:
        TXTextObject::setIsEmoji((uint64_t)v241, v229);
        LODWORD(lpsrc) = *((_DWORD *)v241 + 184);
        *(_QWORD *)&v232.f64[0] = &lpsrc;
        *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v198, (int *)&lpsrc, (uint64_t)&std::piecewise_construct, &v232)+ 32) = v229;
        v232 = 0uLL;
        if (ValueAsInt)
        {
          v150 = v241;
          v151 = (ascent + descent) * -0.5;
          v152 = (ascent + descent) * 0.5 - v151;
          *((CGFloat *)v241 + 53) = v151;
          *((double *)v150 + 54) = -v91;
          *((CGFloat *)v150 + 55) = v152;
          *((double *)v150 + 56) = v91 + 0.0;
          v35 = run;
          if (IsWhitespaceOrNewline)
          {
            *((_QWORD *)v150 + 49) = 0;
            *((_QWORD *)v150 + 50) = 0;
            v153 = 0.0;
            v154 = v91;
            v155 = v91;
            v156 = 0.0;
            *((double *)v150 + 51) = v91;
          }
          else
          {
            v156 = v216;
            v153 = 0.0 - v221 - v226;
            v154 = v216 + v215 - v216;
            v91 = v226 + v153 - v153;
            *((double *)v150 + 49) = v216;
            *((double *)v150 + 50) = v153;
            *((double *)v150 + 51) = v154;
            v155 = v91;
          }
        }
        else
        {
          v150 = v241;
          v157 = -descent;
          v158 = descent + ascent;
          *((double *)v241 + 53) = 0.0 - v224;
          *((CGFloat *)v150 + 54) = v157;
          *((double *)v150 + 55) = v91 - v224 - (0.0 - v224);
          *((CGFloat *)v150 + 56) = v158;
          v155 = v215;
          v91 = v216 + v215 - v216;
          *((double *)v150 + 50) = v216;
          v153 = v216;
          v154 = v226;
          *((double *)v150 + 49) = v221 + v224;
          *((double *)v150 + 51) = v221 + v226 + v224 - (v221 + v224);
          v156 = v221 + v224;
          v35 = run;
        }
        *((double *)v150 + 52) = v91;
        v233 = v154;
        v234 = v155;
        v159 = *((double *)v150 + 19) + v153;
        v232.f64[0] = *((double *)v150 + 18) + v156;
        v232.f64[1] = v159;
        PCRect<double>::operator|=(&v250, &v232);
        if (v37)
        {
          if (!IsWhitespaceOrNewline)
            goto LABEL_164;
        }
        else
        {
          *((_DWORD *)v58 + 240) = v192;
          if (!IsWhitespaceOrNewline)
          {
LABEL_164:
            v163 = v228;
            if (v134
              && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((_QWORD *)v220 + 26)+ 8), (int32x4_t)xmmword_1B30541F0)))) & 1) == 0)
            {
              v194 = 0;
            }
            else
            {
              if (v197 >= ascent)
                v164 = v197;
              else
                v164 = ascent;
              v165 = v196;
              if (v196 < descent)
                v165 = descent;
              v196 = v165;
              v197 = v164;
              v194 = 0;
              if (v24 < leading)
                v24 = leading;
            }
            goto LABEL_173;
          }
        }
        if (v206 >= ascent)
          v160 = v206;
        else
          v160 = ascent;
        v161 = v205;
        if (v205 < descent)
          v161 = descent;
        v205 = v161;
        v206 = v160;
        v162 = v204;
        if (v204 < leading)
          v162 = leading;
        v204 = v162;
        v163 = v228;
LABEL_173:
        v166 = v242;
        if (v242)
        {
          v167 = (unint64_t *)&v242->__shared_owners_;
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 - 1, v167));
          if (!v168)
          {
            ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
            std::__shared_weak_count::__release_weak(v166);
          }
        }
        LODWORD(a8) = a8 + 1;
        v25 = (uint64_t)(v217 + 2);
        v34 = v163 + 1;
      }
      while (v34 != v207);
    }
    if (v189)
      MEMORY[0x1B5E2914C](v189, 0x1000C80BDFB0063);
    v22 = v178;
    if (v188)
      MEMORY[0x1B5E2914C](v188, 0x1000C80451B5BE8);
    if (v187)
      MEMORY[0x1B5E2914C](v187, 0x1000C8000313F17);
    if (v186)
      MEMORY[0x1B5E2914C](v186, 0x1000C80451B5BE8);
    MEMORY[0x1B5E2914C](v208, 0x1000C80E0EAB150);
    if (v195)
      MEMORY[0x1B5E2914C](v195, 0x1000C80451B5BE8);
    PCCFRef<__CTLine const*>::~PCCFRef((const void **)&v247);
    PCCFRef<__CTLine const*>::~PCCFRef((const void **)&v248);
    v21 = v185 + 1;
  }
  while (v185 + 1 != Count);
  v169 = v177 + v182;
  v20 = v194;
  if ((v194 & 1) != 0)
LABEL_195:
    v24 = v204;
  v170 = v196;
  if ((v20 & 1) != 0)
    v170 = v205;
  v171 = v197;
  if ((v20 & 1) != 0)
    v171 = v206;
  if (v171 <= 0.0)
    v171 = v181;
  if (v170 > 0.0)
    v169 = v170;
  v172 = v182;
  if (v24 > 0.0)
    v172 = v24;
  if (v171 == 2.22507386e-308)
    v171 = 0.0;
  if (v169 == 2.22507386e-308)
    v173 = 0.0;
  else
    v173 = -v169;
  *(double *)a9 = v171;
  *(double *)(a9 + 8) = v173;
  v174 = v251;
  *(float64x2_t *)(a9 + 32) = v250;
  *(_OWORD *)(a9 + 48) = v174;
  if (v172 == 2.22507386e-308)
    v175 = 0.0;
  else
    v175 = -v172;
  *(double *)(a9 + 16) = v175;
  *(double *)(a9 + 24) = v219;
  PCString::~PCString(&v249);
}

void sub_1B28F83DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<__CTLine const*>::~PCCFRef((const void **)(v1 - 224));
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)(v1 - 216));
  PCString::~PCString((PCString *)(v1 - 208));
  _Unwind_Resume(a1);
}

void TXTextLayout::addCaretInsertionPoints(int a1, CFAttributedStringRef aStr, CFIndex a3, CFIndex a4, uint64_t a5, uint64_t a6)
{
  const __CFString *String;
  CFIndex Length;
  __CFAttributedString *AttributedStringCopyForCaretInsertionInfo;
  const __CTTypesetter *v13;
  const __CTLine *Line;
  uint64_t v15;
  _OWORD *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  CFIndex v25;
  char v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *__p;
  char *v79;
  char *v80;
  _QWORD block[10];
  _QWORD v82[3];
  char v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  BOOL v87;
  _QWORD v88[3];
  int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  __n128 (*v93)(_QWORD *, uint64_t);
  void (*v94)(uint64_t);
  void *v95;
  void *v96;
  _OWORD *v97;
  CFRange v98;

  String = CFAttributedStringGetString(aStr);
  Length = CFStringGetLength(String);
  AttributedStringCopyForCaretInsertionInfo = CreateAttributedStringCopyForCaretInsertionInfo(aStr);
  v13 = CTTypesetterCreateWithAttributedString(AttributedStringCopyForCaretInsertionInfo);
  v98.location = a3;
  v98.length = a4;
  Line = CTTypesetterCreateLine(v13, v98);
  CFRelease(AttributedStringCopyForCaretInsertionInfo);
  CFRelease(v13);
  v90 = 0;
  v91 = &v90;
  v92 = 0x4002000000;
  v93 = __Block_byref_object_copy__12;
  v94 = __Block_byref_object_dispose__12;
  v96 = 0;
  v97 = 0;
  v95 = 0;
  v88[0] = 0;
  v88[1] = v88;
  v88[2] = 0x2000000000;
  v89 = 0;
  v84 = 0;
  v85 = &v84;
  v86 = 0x2000000000;
  v87 = *(_DWORD *)(a5 + 960) == 0;
  v15 = *(_QWORD *)(a5 + 856);
  v82[0] = 0;
  v82[1] = v82;
  v82[2] = 0x2000000000;
  v83 = 0;
  v16 = operator new(0x20uLL);
  *v16 = xmmword_1B3050F80;
  v16[1] = xmmword_1B3050F80;
  v96 = v16 + 2;
  v97 = v16 + 2;
  v95 = v16;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN12TXTextLayout23addCaretInsertionPointsEPK20__CFAttributedString7CFRangeP16TXParagraphStyleRNSt3__16vectorImNS6_9allocatorImEEEE_block_invoke;
  block[3] = &unk_1E64FB0D8;
  block[4] = v82;
  block[5] = v88;
  block[8] = Line;
  block[9] = v15;
  block[6] = &v90;
  block[7] = &v84;
  CTLineEnumerateCaretOffsets(Line, block);
  v17 = Length >= 1 && (CFStringGetCharacterAtIndex(String, Length - 1) == 10 || a3 + a4 < Length);
  __p = 0;
  v79 = 0;
  v80 = 0;
  v19 = v91[5];
  v18 = v91[6];
  v20 = v18 - v19;
  if (v18 != v19)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = v20 >> 5;
    v25 = v15 + a3;
    do
    {
      if (v23)
      {
        if (v24 - 1 != v22)
        {
          v34 = (uint64_t *)(v19 + 32 * v22);
          v35 = *v34;
          v36 = v34[2];
          if ((v34[1] & 1) == (v34[3] & 1))
          {
            if ((v34[1] & 1) != 0)
            {
              v36 = v35 + 1;
              if (v21 < v80)
                goto LABEL_96;
              v27 = __p;
              v53 = (v21 - __p) >> 3;
              v54 = v53 + 1;
              if ((unint64_t)(v53 + 1) >> 61)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v55 = v80 - __p;
              if ((v80 - __p) >> 2 > v54)
                v54 = v55 >> 2;
              if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
                v31 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v31 = v54;
              if (v31)
              {
                v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
                v27 = __p;
                v21 = v79;
              }
              else
              {
                v32 = 0;
              }
              v60 = &v32[8 * v53];
              *(_QWORD *)v60 = v36;
              v59 = v60 + 8;
              while (v21 != v27)
              {
                v70 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *((_QWORD *)v60 - 1) = v70;
                v60 -= 8;
              }
            }
            else
            {
              ++v36;
              if (v21 < v80)
                goto LABEL_96;
              v27 = __p;
              v37 = (v21 - __p) >> 3;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 61)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v39 = v80 - __p;
              if ((v80 - __p) >> 2 > v38)
                v38 = v39 >> 2;
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                v31 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v31 = v38;
              if (v31)
              {
                v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
                v27 = __p;
                v21 = v79;
              }
              else
              {
                v32 = 0;
              }
              v60 = &v32[8 * v37];
              *(_QWORD *)v60 = v36;
              v59 = v60 + 8;
              while (v21 != v27)
              {
                v69 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *((_QWORD *)v60 - 1) = v69;
                v60 -= 8;
              }
            }
          }
          else
          {
            v43 = *((_BYTE *)v34 + 9);
            if (*((_BYTE *)v85 + 24))
            {
              if ((v43 & 1) != 0)
              {
                v36 = v35 + 1;
                if (v21 < v80)
                  goto LABEL_96;
                v27 = __p;
                v63 = (v21 - __p) >> 3;
                v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 61)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v65 = v80 - __p;
                if ((v80 - __p) >> 2 > v64)
                  v64 = v65 >> 2;
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
                  v31 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v31 = v64;
                if (v31)
                {
                  v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
                  v27 = __p;
                  v21 = v79;
                }
                else
                {
                  v32 = 0;
                }
                v60 = &v32[8 * v63];
                *(_QWORD *)v60 = v36;
                v59 = v60 + 8;
                while (v21 != v27)
                {
                  v74 = *((_QWORD *)v21 - 1);
                  v21 -= 8;
                  *((_QWORD *)v60 - 1) = v74;
                  v60 -= 8;
                }
              }
              else
              {
                if (v21 < v80)
                  goto LABEL_96;
                v27 = __p;
                v44 = (v21 - __p) >> 3;
                v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 61)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v46 = v80 - __p;
                if ((v80 - __p) >> 2 > v45)
                  v45 = v46 >> 2;
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
                  v31 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v31 = v45;
                if (v31)
                {
                  v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
                  v27 = __p;
                  v21 = v79;
                }
                else
                {
                  v32 = 0;
                }
                v60 = &v32[8 * v44];
                *(_QWORD *)v60 = v36;
                v59 = v60 + 8;
                while (v21 != v27)
                {
                  v73 = *((_QWORD *)v21 - 1);
                  v21 -= 8;
                  *((_QWORD *)v60 - 1) = v73;
                  v60 -= 8;
                }
              }
            }
            else if ((v43 & 1) != 0)
            {
              if (v21 < v80)
              {
                *(_QWORD *)v21 = v35;
                v33 = v21 + 8;
                goto LABEL_97;
              }
              v27 = __p;
              v66 = (v21 - __p) >> 3;
              v67 = v66 + 1;
              if ((unint64_t)(v66 + 1) >> 61)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v68 = v80 - __p;
              if ((v80 - __p) >> 2 > v67)
                v67 = v68 >> 2;
              if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
                v31 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v31 = v67;
              if (v31)
              {
                v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
                v27 = __p;
                v21 = v79;
              }
              else
              {
                v32 = 0;
              }
              v60 = &v32[8 * v66];
              *(_QWORD *)v60 = v35;
              v59 = v60 + 8;
              while (v21 != v27)
              {
                v76 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *((_QWORD *)v60 - 1) = v76;
                v60 -= 8;
              }
            }
            else
            {
              ++v36;
              if (v21 < v80)
                goto LABEL_96;
              v27 = __p;
              v56 = (v21 - __p) >> 3;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 61)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v58 = v80 - __p;
              if ((v80 - __p) >> 2 > v57)
                v57 = v58 >> 2;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
                v31 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v31 = v57;
              if (v31)
              {
                v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
                v27 = __p;
                v21 = v79;
              }
              else
              {
                v32 = 0;
              }
              v60 = &v32[8 * v56];
              *(_QWORD *)v60 = v36;
              v59 = v60 + 8;
              while (v21 != v27)
              {
                v75 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *((_QWORD *)v60 - 1) = v75;
                v60 -= 8;
              }
            }
          }
          goto LABEL_156;
        }
        if (*((_BYTE *)v85 + 24))
          v26 = v17;
        else
          v26 = 1;
        if ((v26 & 1) == 0)
        {
          v36 = v25 + CTLineGetStringRange(Line).length;
          v21 = v79;
          if (v79 >= v80)
          {
            v27 = __p;
            v40 = (v79 - __p) >> 3;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v42 = v80 - __p;
            if ((v80 - __p) >> 2 > v41)
              v41 = v42 >> 2;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
              v31 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v31 = v41;
            if (v31)
            {
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
              v27 = __p;
              v21 = v79;
            }
            else
            {
              v32 = 0;
            }
            v60 = &v32[8 * v40];
            *(_QWORD *)v60 = v36;
            v59 = v60 + 8;
            while (v21 != v27)
            {
              v62 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *((_QWORD *)v60 - 1) = v62;
              v60 -= 8;
            }
            goto LABEL_156;
          }
LABEL_96:
          *(_QWORD *)v21 = v36;
          v33 = v21 + 8;
LABEL_97:
          v59 = v33;
LABEL_158:
          v79 = v59;
          v21 = v59;
          goto LABEL_159;
        }
        if (!*((_BYTE *)v85 + 24))
        {
          if (v21 >= v80)
          {
            v27 = __p;
            v28 = (v21 - __p) >> 3;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v30 = v80 - __p;
            if ((v80 - __p) >> 2 > v29)
              v29 = v30 >> 2;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
              v31 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
              v27 = __p;
              v21 = v79;
            }
            else
            {
              v32 = 0;
            }
            v60 = &v32[8 * v28];
            *(_QWORD *)v60 = v25;
            v59 = v60 + 8;
            while (v21 != v27)
            {
              v72 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *((_QWORD *)v60 - 1) = v72;
              v60 -= 8;
            }
            goto LABEL_156;
          }
          goto LABEL_26;
        }
      }
      else
      {
        if (*((_BYTE *)v85 + 24))
        {
          if (v21 < v80)
          {
LABEL_26:
            *(_QWORD *)v21 = v25;
            v33 = v21 + 8;
            goto LABEL_97;
          }
          v27 = __p;
          v50 = (v21 - __p) >> 3;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v52 = v80 - __p;
          if ((v80 - __p) >> 2 > v51)
            v51 = v52 >> 2;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v51;
          if (v31)
          {
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
            v27 = __p;
            v21 = v79;
          }
          else
          {
            v32 = 0;
          }
          v60 = &v32[8 * v50];
          *(_QWORD *)v60 = v25;
          v59 = v60 + 8;
          while (v21 != v27)
          {
            v61 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v60 - 1) = v61;
            v60 -= 8;
          }
LABEL_156:
          __p = v60;
          v80 = &v32[8 * v31];
          if (v27)
            operator delete(v27);
          goto LABEL_158;
        }
        if (!v17)
        {
          v36 = v25 + CTLineGetStringRange(Line).length;
          v21 = v79;
          if (v79 < v80)
            goto LABEL_96;
          v27 = __p;
          v47 = (v79 - __p) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v49 = v80 - __p;
          if ((v80 - __p) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v48;
          if (v31)
          {
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
            v27 = __p;
            v21 = v79;
          }
          else
          {
            v32 = 0;
          }
          v60 = &v32[8 * v47];
          *(_QWORD *)v60 = v36;
          v59 = v60 + 8;
          while (v21 != v27)
          {
            v71 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v60 - 1) = v71;
            v60 -= 8;
          }
          goto LABEL_156;
        }
      }
LABEL_159:
      v19 = v91[5];
      v24 = (v91[6] - v19) >> 5;
      v22 = ++v23;
    }
    while (v24 > v23);
  }
  CFRelease(Line);
  std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(a6, *(_QWORD *)(a6 + 8), __p, v79, (v79 - __p) >> 3);
  if (__p)
    operator delete(__p);
  _Block_object_dispose(v82, 8);
  _Block_object_dispose(&v84, 8);
  _Block_object_dispose(v88, 8);
  _Block_object_dispose(&v90, 8);
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
}

void sub_1B28F8E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  void *v34;

  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  v34 = *(void **)(v32 - 112);
  if (v34)
  {
    *(_QWORD *)(v32 - 104) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

CFIndex TXTextLayout::suggestLineBreak(TXTextLayout *this, CTTypesetterRef typesetter, CFIndex startIndex, double a4)
{
  return CTTypesetterSuggestLineBreak(typesetter, startIndex, a4);
}

uint64_t GetNumBytesForGlyph(const __CTRun *a1, uint64_t a2, const uint64_t *a3)
{
  const uint64_t *v3;
  uint64_t v6;
  CFIndex GlyphCount;
  CFRange StringRange;
  CFIndex v9;
  CFIndex v10;
  uint64_t v11;
  CFIndex v14;
  CFRange v15;
  double v16;

  v3 = a3;
  v6 = a3[a2];
  GlyphCount = CTRunGetGlyphCount(a1);
  StringRange = CTRunGetStringRange(a1);
  if ((CTRunGetStatus(a1) & 1) != 0)
  {
    if (a2 < 1)
    {
      v15 = CTRunGetStringRange(a1);
      v14 = v15.length - v6 + v15.location;
    }
    else
    {
      v14 = v3[a2 - 1] - v6;
    }
    v16 = fabs((double)v14);
    return (v16 + v16);
  }
  else
  {
    v9 = StringRange.location + StringRange.length;
    if (GlyphCount >= 1)
    {
      do
      {
        v11 = *v3++;
        v10 = v11;
        if (v11 > v6 && v10 < v9)
          v9 = v10;
        --GlyphCount;
      }
      while (GlyphCount);
    }
    return (2 * (v9 - v6));
  }
}

double getTrailingKerningWidthForRun(const __CTRun *a1)
{
  const __CFDictionary *Attributes;
  const void *v2;
  const __CFNumber *Value;
  int v4;
  double result;
  double valuePtr;

  Attributes = CTRunGetAttributes(a1);
  v2 = (const void *)*MEMORY[0x1E0CA8588];
  if (!CFDictionaryContainsKey(Attributes, (const void *)*MEMORY[0x1E0CA8588]))
    return 0.0;
  Value = (const __CFNumber *)CFDictionaryGetValue(Attributes, v2);
  valuePtr = 0.0;
  v4 = CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
  result = valuePtr;
  if (valuePtr <= 0.0 || v4 == 0)
    return 0.0;
  return result;
}

uint64_t *std::vector<std::shared_ptr<TXTextObject>>::insert(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v36;
  __int128 v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  int64x2_t v41;
  char *v42;
  uint64_t v43;

  v4 = (uint64_t *)a2;
  v6 = a1[1];
  v8 = (uint64_t)(a1 + 2);
  v7 = a1[2];
  if (v6 >= v7)
  {
    v9 = (uint64_t *)*a1;
    v10 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if (v10 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = a2 - (_QWORD)v9;
    v12 = (a2 - (uint64_t)v9) >> 4;
    v13 = v7 - (_QWORD)v9;
    if (v13 >> 3 > v10)
      v10 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v10;
    v39 = a1 + 2;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a1 + 2), v14);
    else
      v15 = 0;
    v19 = (uint64_t *)&v15[16 * v12];
    v36 = v15;
    *(_QWORD *)&v37 = v19;
    *((_QWORD *)&v37 + 1) = v19;
    v38 = &v15[16 * v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if (v9 == v4)
          v21 = 1;
        else
          v21 = v11 >> 3;
        v43 = v8;
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v8, v21);
        v24 = v37;
        v25 = *((_QWORD *)&v37 + 1) - v37;
        if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
        {
          v30 = vdupq_n_s64(v37);
          v27 = (unint64_t)&v22[16 * (v21 >> 2)];
        }
        else
        {
          v26 = v25 >> 4;
          v27 = (unint64_t)&v22[16 * (v21 >> 2) + (v25 & 0xFFFFFFFFFFFFFFF0)];
          v28 = 16 * v26;
          v29 = &v22[16 * (v21 >> 2)];
          do
          {
            *(_OWORD *)v29 = *(_OWORD *)v24;
            v29 += 16;
            *(_QWORD *)v24 = 0;
            *(_QWORD *)(v24 + 8) = 0;
            v24 += 16;
            v28 -= 16;
          }
          while (v28);
          v30 = (int64x2_t)v37;
        }
        v31 = v38;
        v40 = v36;
        v36 = v22;
        *(_QWORD *)&v37 = &v22[16 * (v21 >> 2)];
        v41 = v30;
        *((_QWORD *)&v37 + 1) = v27;
        v38 = &v22[16 * v23];
        v42 = v31;
        std::__split_buffer<std::shared_ptr<TXTextObject>>::~__split_buffer((uint64_t)&v40);
        v19 = (uint64_t *)*((_QWORD *)&v37 + 1);
      }
      else
      {
        v20 = v12 + 2;
        if (v12 >= -1)
          v20 = v12 + 1;
        v19 -= 2 * (v20 >> 1);
        *(_QWORD *)&v37 = v19;
        *((_QWORD *)&v37 + 1) = v19;
      }
    }
    *v19 = *a3;
    v32 = a3[1];
    v19[1] = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v19 = (uint64_t *)*((_QWORD *)&v37 + 1);
    }
    *((_QWORD *)&v37 + 1) = v19 + 2;
    v4 = (uint64_t *)std::vector<std::shared_ptr<TXTextObject>>::__swap_out_circular_buffer(a1, &v36, v4);
    std::__split_buffer<std::shared_ptr<TXTextObject>>::~__split_buffer((uint64_t)&v36);
  }
  else if (a2 == v6)
  {
    v16 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    a1[1] = a2 + 16;
  }
  else
  {
    std::vector<std::shared_ptr<TXTextObject>>::__move_range((uint64_t)a1, a2, v6, (char *)(a2 + 16));
    if (v4 <= a3)
      a3 += 2 * (a1[1] > (unint64_t)a3);
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v4, a3);
  }
  return v4;
}

void sub_1B28F9258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::shared_ptr<TXTextObject>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::shared_ptr<OZCoreTextTypeface>::reset[abi:ne180100]<TXCoreTextTypeface,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<OZCoreTextTypeface>::shared_ptr[abi:ne180100]<TXCoreTextTypeface,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

__CFAttributedString *CreateAttributedStringCopyForCaretInsertionInfo(const __CFAttributedString *a1)
{
  const __CFString *String;
  CFIndex Length;
  __CFAttributedString *MutableCopy;
  uint64_t v5;
  uint64_t v6;
  CFIndex v7;
  const __CFString *v8;
  _OWORD *v9;
  CFRange v10;
  const __CTFont *AttributeAndLongestEffectiveRange;
  __int128 v12;
  CTFontRef v13;
  CGAffineTransform v15;
  CFRange longestEffectiveRange;
  CFRange v17;

  String = CFAttributedStringGetString(a1);
  Length = CFStringGetLength(String);
  MutableCopy = CFAttributedStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
  v17.location = 0;
  v17.length = Length;
  CFAttributedStringRemoveAttribute(MutableCopy, v17, (CFStringRef)*MEMORY[0x1E0CA8588]);
  v5 = CFAttributedStringGetLength(MutableCopy);
  if (v5 >= 1)
  {
    v6 = v5;
    v7 = 0;
    v8 = (const __CFString *)*MEMORY[0x1E0CA8188];
    v9 = (_OWORD *)MEMORY[0x1E0C9BAA8];
    v10.length = v5;
    do
    {
      v10.location = v7;
      AttributeAndLongestEffectiveRange = (const __CTFont *)CFAttributedStringGetAttributeAndLongestEffectiveRange(MutableCopy, v7, v8, v10, &longestEffectiveRange);
      v12 = v9[1];
      *(_OWORD *)&v15.a = *v9;
      *(_OWORD *)&v15.c = v12;
      *(_OWORD *)&v15.tx = v9[2];
      v13 = CTFontCreateCopyWithAttributes(AttributeAndLongestEffectiveRange, 72.0, &v15, 0);
      CFAttributedStringSetAttribute(MutableCopy, longestEffectiveRange, v8, v13);
      CFRelease(v13);
      v7 = longestEffectiveRange.length + longestEffectiveRange.location;
      v10.length = v6 - (longestEffectiveRange.length + longestEffectiveRange.location);
    }
    while (v6 > longestEffectiveRange.length + longestEffectiveRange.location);
  }
  return MutableCopy;
}

__n128 __Block_byref_object_copy__12(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN12TXTextLayout23addCaretInsertionPointsEPK20__CFAttributedString7CFRangeP16TXParagraphStyleRNSt3__16vectorImNS6_9allocatorImEEEE_block_invoke(uint64_t a1, CFIndex a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  _OWORD *v10;
  char v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  const __CFArray *GlyphRuns;
  uint64_t result;
  uint64_t v22;
  CFIndex v23;
  const __CTRun *ValueAtIndex;
  CFRange StringRange;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v6 + 24))
  {
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v7 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
    v9 = (char *)v7[6];
    v8 = v7[7];
    if ((unint64_t)v9 >= v8)
    {
      v12 = (char *)v7[5];
      v13 = (v9 - v12) >> 5;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 59)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v15 = v8 - (_QWORD)v12;
      if (v15 >> 4 > v14)
        v14 = v15 >> 4;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
        v16 = 0x7FFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v17 = (char *)operator new(32 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[32 * v13];
      *(_OWORD *)v18 = xmmword_1B3050F80;
      *((_OWORD *)v18 + 1) = xmmword_1B3050F80;
      v10 = v18 + 32;
      if (v9 != v12)
      {
        do
        {
          v19 = *((_OWORD *)v9 - 1);
          *((_OWORD *)v18 - 2) = *((_OWORD *)v9 - 2);
          *((_OWORD *)v18 - 1) = v19;
          v18 -= 32;
          v9 -= 32;
        }
        while (v9 != v12);
        v9 = (char *)v7[5];
      }
      v7[5] = v18;
      v7[6] = v10;
      v7[7] = &v17[32 * v16];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_OWORD *)v9 = xmmword_1B3050F80;
      *((_OWORD *)v9 + 1) = xmmword_1B3050F80;
      v10 = v9 + 32;
    }
    v7[6] = v10;
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v11 = *(_BYTE *)(v6 + 24) ^ 1;
  }
  else
  {
    v11 = 1;
  }
  *(_BYTE *)(v6 + 24) = v11;
  GlyphRuns = CTLineGetGlyphRuns(*(CTLineRef *)(a1 + 64));
  result = CFArrayGetCount(GlyphRuns);
  if (result < 1)
  {
LABEL_29:
    v27 = 0;
  }
  else
  {
    v22 = result;
    v23 = 0;
    while (1)
    {
      ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v23);
      StringRange = CTRunGetStringRange(ValueAtIndex);
      result = StringRange.location;
      if (StringRange.location <= a2 && StringRange.location + StringRange.length > a2)
        break;
      if (v22 == ++v23)
        goto LABEL_29;
    }
    result = CTRunGetStatus(ValueAtIndex);
    v27 = (result & 1) == 0;
  }
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v29 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v30 = *(_QWORD *)(v28 + 40);
  if (v29 >= (*(_QWORD *)(v28 + 48) - v30) >> 5)
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v31 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == v27;
  v32 = v30 + 32 * v29;
  if (v27 == a3)
    v32 += 16;
  *(_QWORD *)v32 = *(_QWORD *)(a1 + 72) + a2;
  *(_BYTE *)(v32 + 8) = v27;
  *(_BYTE *)(v32 + 9) = v31;
  *(_BYTE *)(v32 + 10) = a3;
  return result;
}

void TXTextLayout::computeComposedCharacterIndices(PCString *this)
{
  PCString *v2;
  OZScene **v3;
  uint64_t **v4;
  __CFString *v5;
  const __CFAttributedString *v6;
  const __CFArray *GlyphRuns;
  CFIndex Count;
  CFIndex i;
  const __CTRun *ValueAtIndex;
  CFRange StringRange;
  CTRunStatus v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  const __CTRun **v18;
  char *v19;
  const __CTRun *v20;
  uint64_t **v21;
  char *v22;
  unsigned int v23;
  int v24;
  const __CTRun *v25;
  char Status;
  CFRange v27;
  CFIndex location;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  __CFString *v35;
  CFRange RangeOfComposedCharactersAtIndex;
  uint64_t *v37;
  __int128 v38;
  CTRunRef *v39;
  unsigned int v40;
  int v41;
  const __CTRun *v42;
  char v43;
  CFRange v44;
  CFIndex v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  __CFString *v52;
  CFRange v53;
  uint64_t *v54;
  __int128 v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  BOOL v60;
  char *v61;
  char *v62;
  char *v63;
  const __CFAttributedString *cf;
  const __CTLine *v65;
  char *v66;
  int v67;
  CTRunRef *v68;
  uint64_t v69;
  char *__p;
  char *v71;
  char *v72;
  PCString v73;
  _BYTE v74[12];
  unsigned int v75;
  PCString v76;
  CFRange v77;
  __int128 v78;
  int v79;
  PCString v80;
  PCString v81;
  PCString v82;
  int v83[4];

  v2 = this + 8037;
  v3 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v74, v3);
  std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::destroy((uint64_t)v2, (PCString *)v2[1].var0);
  v2->var0 = (__CFString *)&v2[1];
  v2[2].var0 = 0;
  v2[1].var0 = 0;
  v4 = (uint64_t **)&v2[9];
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v2[9], &v2[10].var0->isa);
  v2[9].var0 = (__CFString *)&v2[10];
  v69 = (uint64_t)v2;
  v2[11].var0 = 0;
  v2[10].var0 = 0;
  TXChannelString::getString(this + 2381, &v73);
  v5 = PCString::cf_str(&v73);
  v6 = CFAttributedStringCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, 0);
  v65 = CTLineCreateWithAttributedString(v6);
  GlyphRuns = CTLineGetGlyphRuns(v65);
  Count = CFArrayGetCount(GlyphRuns);
  v63 = (char *)&v2[1];
  cf = v6;
  __p = 0;
  v71 = 0;
  v72 = 0;
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, i);
      StringRange = CTRunGetStringRange(ValueAtIndex);
      v12 = CTRunGetStatus(ValueAtIndex) & 1;
      if (!StringRange.location)
        *(_DWORD *)(v69 + 64) = v12;
      if (v71 >= v72)
      {
        v14 = (v71 - __p) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v15 = (v72 - __p) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)(v72 - __p) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v72, v16);
        else
          v17 = 0;
        v18 = (const __CTRun **)&v17[8 * v14];
        *v18 = ValueAtIndex;
        v13 = (char *)(v18 + 1);
        v19 = v71;
        if (v71 != __p)
        {
          do
          {
            v20 = (const __CTRun *)*((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v18 = v20;
          }
          while (v19 != __p);
          v19 = __p;
        }
        __p = (char *)v18;
        v72 = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v71 = ValueAtIndex;
        v13 = v71 + 8;
      }
      v71 = v13;
      v83[0] = StringRange.location;
      v76.var0 = (__CFString *)v83;
      v21 = std::__tree<std::__value_type<int,TXDirectionalRun>,std::__map_value_compare<int,std::__value_type<int,TXDirectionalRun>,std::less<int>,true>,std::allocator<std::__value_type<int,TXDirectionalRun>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v4, v83, (uint64_t)&std::piecewise_construct, &v76);
      *(CFRange *)(v21 + 5) = StringRange;
      *((_BYTE *)v21 + 56) = v12 == 0;
    }
  }
  v67 = *(_DWORD *)(v69 + 64);
  if (v67)
  {
    v22 = v71;
    if (v71 != __p)
    {
      v23 = 0;
      v24 = 0;
      do
      {
        v25 = (const __CTRun *)*((_QWORD *)v22 - 1);
        v66 = v22 - 8;
        Status = CTRunGetStatus(v25);
        v27 = CTRunGetStringRange(v25);
        location = v27.location;
        PCString::substr(&v73, LODWORD(v27.location), v27.length, (CFStringRef *)&v82.var0);
        v29 = Status & 1;
        v30 = v23 + PCString::composedCharacterCount(&v82) - 1;
        if (v29 == v67)
          v31 = v23;
        else
          v31 = v30;
        PCString::stringWithoutSpacesAndNewlines(&v82, &v81);
        v32 = PCString::composedCharacterCount(&v81);
        if (v27.length >= 1)
        {
          if (v29 == v67)
            v33 = v24;
          else
            v33 = v24 + v32 - 1;
          if (v29 == v67)
            v34 = 1;
          else
            v34 = -1;
          do
          {
            v35 = PCString::cf_str(&v73);
            RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v35, location);
            PCString::substr(&v73, LODWORD(RangeOfComposedCharactersAtIndex.location), RangeOfComposedCharactersAtIndex.length, (CFStringRef *)&v80.var0);
            PCString::PCString(&v76, &v80);
            v77 = RangeOfComposedCharactersAtIndex;
            *(_QWORD *)&v78 = __PAIR64__(v31, v23);
            *((_QWORD *)&v78 + 1) = __PAIR64__(v33, v24);
            v79 = v29;
            v75 = RangeOfComposedCharactersAtIndex.location;
            *(_QWORD *)v83 = &v75;
            v37 = std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v69, &v75, (uint64_t)&std::piecewise_construct, (_DWORD **)v83);
            PCString::set((PCString *)v37 + 5, &v76);
            v38 = v78;
            *((CFRange *)v37 + 3) = v77;
            *((_OWORD *)v37 + 4) = v38;
            *((_DWORD *)v37 + 20) = v79;
            if ((PCString::isWhitespaceAndNewline(&v80) & 1) == 0)
            {
              ++v24;
              if (v29 == v67)
                ++v33;
              else
                --v33;
            }
            location += RangeOfComposedCharactersAtIndex.length;
            v31 += v34;
            PCString::~PCString(&v76);
            PCString::~PCString(&v80);
            ++v23;
          }
          while (location < v27.location + v27.length);
        }
        PCString::~PCString(&v81);
        PCString::~PCString(&v82);
        v22 = v66;
      }
      while (v66 != __p);
    }
  }
  else
  {
    v39 = (CTRunRef *)__p;
    if (v71 != __p)
    {
      v40 = 0;
      v41 = 0;
      do
      {
        v68 = v39;
        v42 = *v39;
        v43 = CTRunGetStatus(*v39);
        v44 = CTRunGetStringRange(v42);
        v45 = v44.location;
        PCString::substr(&v73, LODWORD(v44.location), v44.length, (CFStringRef *)&v82.var0);
        v46 = v43 & 1;
        v47 = v40 + PCString::composedCharacterCount(&v82) - 1;
        if ((v43 & 1) != 0)
          v48 = v47;
        else
          v48 = v40;
        PCString::stringWithoutSpacesAndNewlines(&v82, &v81);
        v49 = PCString::composedCharacterCount(&v81);
        if (v44.length >= 1)
        {
          if ((v43 & 1) != 0)
            v50 = v41 + v49 - 1;
          else
            v50 = v41;
          if ((v43 & 1) != 0)
            v51 = -1;
          else
            v51 = 1;
          do
          {
            v52 = PCString::cf_str(&v73);
            v53 = CFStringGetRangeOfComposedCharactersAtIndex(v52, v45);
            PCString::substr(&v73, LODWORD(v53.location), v53.length, (CFStringRef *)&v80.var0);
            PCString::PCString(&v76, &v80);
            v77 = v53;
            *(_QWORD *)&v78 = __PAIR64__(v48, v40);
            *((_QWORD *)&v78 + 1) = __PAIR64__(v50, v41);
            v79 = v46;
            v75 = v53.location;
            *(_QWORD *)v83 = &v75;
            v54 = std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v69, &v75, (uint64_t)&std::piecewise_construct, (_DWORD **)v83);
            PCString::set((PCString *)v54 + 5, &v76);
            v55 = v78;
            *((CFRange *)v54 + 3) = v77;
            *((_OWORD *)v54 + 4) = v55;
            *((_DWORD *)v54 + 20) = v79;
            if ((PCString::isWhitespaceAndNewline(&v80) & 1) == 0)
            {
              ++v41;
              if (v46)
                --v50;
              else
                ++v50;
            }
            v45 += v53.length;
            v48 += v51;
            PCString::~PCString(&v76);
            PCString::~PCString(&v80);
            ++v40;
          }
          while (v45 < v44.location + v44.length);
        }
        PCString::~PCString(&v81);
        PCString::~PCString(&v82);
        v39 = v68 + 1;
      }
      while (v68 + 1 != (CTRunRef *)v71);
    }
  }
  CFRelease(cf);
  CFRelease(v65);
  *(_DWORD *)(v69 + 24) = 0;
  v56 = v63;
  if (v63 != *(char **)v69)
  {
    while (1)
    {
      v57 = *(char **)v56;
      v58 = v56;
      if (*(_QWORD *)v56)
      {
        do
        {
          v59 = v57;
          v57 = (char *)*((_QWORD *)v57 + 1);
        }
        while (v57);
      }
      else
      {
        do
        {
          v59 = (char *)*((_QWORD *)v58 + 2);
          v60 = *(_QWORD *)v59 == (_QWORD)v58;
          v58 = v59;
        }
        while (v60);
      }
      if ((PCString::isWhitespaceAndNewline((PCString *)v59 + 5) & 1) == 0)
        break;
      v61 = *(char **)v56;
      if (*(_QWORD *)v56)
      {
        do
        {
          v62 = v61;
          v61 = (char *)*((_QWORD *)v61 + 1);
        }
        while (v61);
      }
      else
      {
        do
        {
          v62 = (char *)*((_QWORD *)v56 + 2);
          v60 = *(_QWORD *)v62 == (_QWORD)v56;
          v56 = v62;
        }
        while (v60);
      }
      v56 = v62;
      if (v62 == *(char **)v69)
        goto LABEL_73;
    }
    *(_DWORD *)(v69 + 24) = *((_DWORD *)v59 + 18) + 1;
  }
LABEL_73:
  if (__p)
    operator delete(__p);
  PCString::~PCString(&v73);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v74);
}

void sub_1B28F9CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, PCString a20,char a21,uint64_t a22,PCString a23)
{
  PCString::~PCString(&a20);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a21);
  _Unwind_Resume(a1);
}

void TXTextLayout::updateTextStateInParagraph(TXTextLayout *this, unsigned int a2)
{
  OZScene **v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *ComposedCharacter;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t *v23;
  unsigned int v24;
  _BYTE v25[15];
  unsigned int *v26;

  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v25, v4);
  v5 = *((_QWORD *)this + 2378);
  v6 = *(_DWORD **)(v5 + 8 * (a2 - 1));
  v7 = *(_QWORD *)(v5 + 8 * a2);
  v8 = v6[259] + v6[258];
  v9 = v8 + *(_DWORD *)(v7 + 1036);
  *(_DWORD *)(v7 + 1032) = v8;
  if (v8 < v9)
  {
    v10 = (uint64_t *)(*((_QWORD *)this + 7353) + 16 * v8);
    v11 = -1;
    v12 = v8;
    do
    {
      v13 = *v10;
      v10 += 2;
      *(_DWORD *)(v13 + 388) = v12;
      v14 = *(_DWORD *)(v13 + 736);
      if (v14 < v11)
        v11 = v14;
      ++v12;
    }
    while (v9 > v12);
    v15 = v6[216] + v6[214] - v11;
    v16 = 16 * v8;
    do
    {
      v17 = (uint64_t *)(*((_QWORD *)this + 7353) + v16);
      v18 = *v17;
      v24 = *(_DWORD *)(*v17 + 736) + v15;
      *(_DWORD *)(v18 + 736) = v24;
      ComposedCharacter = TXTextLayout::getComposedCharacter(this, v15 + *(_DWORD *)(v18 + 80));
      v20 = *v17;
      PCString::set((PCString *)(*v17 + 72), (const PCString *)ComposedCharacter);
      v21 = *(_OWORD *)(ComposedCharacter + 1);
      v22 = *(_OWORD *)(ComposedCharacter + 3);
      *(_DWORD *)(v20 + 112) = *((_DWORD *)ComposedCharacter + 10);
      *(_OWORD *)(v20 + 80) = v21;
      *(_OWORD *)(v20 + 96) = v22;
      v26 = &v24;
      v23 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 64256, &v24, (uint64_t)&std::piecewise_construct, &v26);
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v23 + 3, v17);
      v16 += 16;
      ++v8;
    }
    while (v9 > v8);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v25);
}

void sub_1B28F9F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::clearInvalidTextObjects(TXTextLayout *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 *v7;
  unsigned int v8;

  v1 = (uint64_t *)((char *)this + 58824);
  v2 = *((_QWORD *)this + 7353);
  v3 = *((_QWORD *)this + 7354);
  if (v2 != v3)
  {
    v4 = (_QWORD *)((char *)this + 64256);
    do
    {
      if (!*(_BYTE *)(*(_QWORD *)v2 + 744))
      {
        v8 = *(_DWORD *)(*(_QWORD *)v2 + 736);
        std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__erase_unique<unsigned int>(v4, &v8);
      }
      v2 += 16;
    }
    while (v2 != v3);
    v5 = *v1;
    v2 = v1[1];
    while (v5 != v2)
    {
      if (!*(_BYTE *)(*(_QWORD *)v5 + 744))
      {
        if (v5 != v2)
        {
          v7 = (__int128 *)(v5 + 16);
          if (v5 + 16 != v2)
          {
            do
            {
              if (*(_BYTE *)(*(_QWORD *)v7 + 744))
              {
                std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v5, v7);
                v5 += 16;
              }
              ++v7;
            }
            while (v7 != (__int128 *)v2);
            v2 = v1[1];
          }
        }
        return std::vector<std::shared_ptr<TXTextObject>>::erase((uint64_t)v1, v5, v2);
      }
      v5 += 16;
    }
  }
  v5 = v2;
  return std::vector<std::shared_ptr<TXTextObject>>::erase((uint64_t)v1, v5, v2);
}

uint64_t std::vector<std::shared_ptr<TXTextObject>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 != a3)
  {
    v5 = a3;
    v6 = *(_QWORD *)(a1 + 8);
    if (a3 == v6)
    {
      v8 = a2;
    }
    else
    {
      v7 = 16 * ((a3 - a2) >> 4);
      v8 = a2;
      do
      {
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v8, (__int128 *)(v8 + v7));
        v8 += 16;
      }
      while (v8 + v7 != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    while (v5 != v8)
      v5 = std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v5 - 16);
    *(_QWORD *)(a1 + 8) = v8;
  }
  return a2;
}

char *TXTextLayout::getDirectionalRun(TXTextLayout *this, int a2)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  BOOL v8;
  char **v9;
  uint64_t v10;
  char *v12;
  char *v13;
  BOOL v14;

  v2 = (char **)((char *)this + 64368);
  v3 = (char *)this + 64376;
  v4 = (char *)*((_QWORD *)this + 8047);
  v5 = (char *)this + 64376;
  if (!v4)
    goto LABEL_11;
  v6 = (char *)this + 64376;
  do
  {
    v7 = *((_DWORD *)v4 + 8);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (char **)v4;
    else
      v9 = (char **)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *((_DWORD *)v6 + 8) <= a2)
    return v6 + 40;
LABEL_11:
  if (*v2 != v3)
  {
    v5 = *v2;
    while (1)
    {
      v10 = *((_QWORD *)v5 + 5);
      if (v10 <= a2 && *((_QWORD *)v5 + 6) + v10 > a2)
        break;
      v12 = (char *)*((_QWORD *)v5 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (char *)*((_QWORD *)v5 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v14);
      }
      v5 = v13;
      if (v13 == v3)
        return 0;
    }
  }
  if (v5 == v3)
    return 0;
  else
    return v5 + 40;
}

uint64_t TXTextLayout::getComposedCharacterCount(TXTextLayout *this)
{
  OZScene **v2;
  uint64_t v3;
  _BYTE v5[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v5, v2);
  v3 = *((unsigned int *)this + 16078);
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v5);
  return v3;
}

uint64_t TXTextLayout::getComposedCharacterCountIgnoringSpaces(TXTextLayout *this)
{
  OZScene **v2;
  uint64_t v3;
  _BYTE v5[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v5, v2);
  v3 = *((unsigned int *)this + 16080);
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v5);
  return v3;
}

void TXTextLayout::invalidateTextObjectsInRange(Li3DEngineScene *a1, int *a2)
{
  _QWORD *v3;
  OZScene **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[8];

  v3 = (_QWORD *)((char *)a1 + 58824);
  v4 = (OZScene **)Li3DEngineScene::sceneManager(a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v11, v4);
  v5 = *a2;
  v6 = (a2[1] + v5);
  if (v6 >= (uint64_t)(v3[1] - *v3) >> 4)
    v6 = (uint64_t)(v3[1] - *v3) >> 4;
  if ((int)v5 < (int)v6)
  {
    v7 = (uint64_t *)(*v3 + 16 * v5);
    v8 = v5 - (int)v6;
    do
    {
      v9 = *v7;
      v7 += 2;
      *(_BYTE *)(v9 + 744) = 0;
    }
    while (!__CFADD__(v8++, 1));
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v11);
}

double TXTextLayout::computeExtraLineSpacingForDiacritics(TXTextLayout *this, const CMTime *a2)
{
  double v4;
  double v5;
  uint64_t *v6;
  uint64_t *v7;
  double v8;
  double v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  BOOL v27;
  double v28;
  CMTime v30;

  v4 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 61464), a2, 0.0);
  v6 = (uint64_t *)*((_QWORD *)this + 2378);
  v7 = (uint64_t *)*((_QWORD *)this + 2379);
  v8 = 0.0;
  if (v6 != v7)
  {
    v9 = v5;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *v6;
      if (*(_QWORD *)(*v6 + 864))
        break;
LABEL_25:
      if (++v6 == v7)
        goto LABEL_26;
    }
    v14 = *(unsigned int *)(v13 + 876);
    v30 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v13 + 680), &v30, 0.0);
    if (v11)
    {
      v16 = (uint64_t)(*(_QWORD *)(v11 + 896) - *(_QWORD *)(v11 + 888)) >> 6;
      if ((_DWORD)v14)
        goto LABEL_6;
      goto LABEL_23;
    }
    v16 = 0;
    if (!(_DWORD)v14)
    {
LABEL_23:
      v22 = v8;
LABEL_24:
      v12 = *(_DWORD *)(v13 + 876);
      v8 = v22;
      v11 = v13;
      goto LABEL_25;
    }
LABEL_6:
    v17 = 0;
    v18 = v9 * v15;
    v19 = -1;
    while (1)
    {
      if (!v11 && !v17)
        goto LABEL_19;
      v20 = *(_QWORD *)(v13 + 888);
      if (*(_QWORD *)(v13 + 896) == v20)
        goto LABEL_19;
      v21 = v17 || !v16
          ? v20 + ((unint64_t)v19 << 6)
          : *(_QWORD *)(v11 + 888) + ((unint64_t)(v12 - 1) << 6);
      v22 = fabs(*(double *)(v21 + 40))
          + *(double *)(v20 + v17 + 40)
          + *(double *)(v20 + v17 + 56)
          - (v18
           + *(double *)(v20 + v17)
           + fabs(*(double *)(v21 + 8)));
      if (v22 <= v8)
        break;
      v4 = 0.0;
      v10 = 1;
LABEL_20:
      ++v19;
      v17 += 64;
      v8 = v22;
      if (v14 << 6 == v17)
        goto LABEL_24;
    }
    if (v22 < 0.0)
    {
      v23 = -v22;
      v24 = v10 ^ 1 | (v4 > v23);
      v10 |= v24;
      if ((v24 & 1) != 0)
        v4 = v23;
    }
LABEL_19:
    v22 = v8;
    goto LABEL_20;
  }
LABEL_26:
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 63568), MEMORY[0x1E0CA2E68], 0.0);
  v26 = v25 - v4;
  v27 = v4 < v25;
  v28 = -0.0;
  if (v27)
    v28 = v26;
  return v8 + v28;
}

uint64_t TXTextLayout::doMotionLayout(TXTextLayout *this, const OZRenderState *a2)
{
  OZScene **v4;
  uint64_t **v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  int EnableScroll;
  double v14;
  double v15;
  int v16;
  int ValueAsInt;
  int v18;
  int v19;
  _DWORD *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _BOOL4 v28;
  TXTextLayout *v29;
  _BOOL4 v30;
  double v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  double v37;
  double v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  unsigned int *v47;
  uint64_t v48;
  double *v49;
  double v50;
  double v51;
  int Alignment;
  int v53;
  uint64_t v54;
  double v55;
  char v56;
  double v57;
  TXTextObject **v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double LayoutRealPos;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  unsigned int v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  OZChannel *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  double v94;
  float Size;
  unint64_t *v96;
  unint64_t v97;
  float CapHeight;
  int v99;
  double v100;
  int v101;
  double v102;
  double v103;
  double v104;
  double v105;
  TXTextObject *v106;
  int v107;
  TXTextObject *v108;
  double v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  TXTimeGlyphPropertiesMap *v113;
  unsigned int v115;
  double v116;
  double v117;
  _BOOL4 v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  int NumLinesInParagraphBounds;
  double v124;
  _BOOL4 v125;
  int isExtraLineSpacingForDiacriticsEnabled;
  double v127;
  double v128;
  double v129;
  _BOOL4 v130;
  int v131;
  double ScrollPositionInPixels;
  int v133;
  int v134;
  uint64_t v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  CMTime v142;
  OZChannel *v143;
  std::__shared_weak_count *v144;
  CMTime v145;
  CMTime v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  CMTime v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  CMTime var0;
  _BYTE v157[16];

  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v157, v4);
  var0 = (CMTime)a2->var0;
  v5 = (uint64_t **)TXTextLayout::timeGlyphPropertiesMap(this);
  TXTimeGlyphPropertiesMap::preSelectGlyphMap(v5, &var0);
  v154 = 0.0;
  v155 = 0.0;
  v152 = 0.0;
  v153 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), &var0, 0.0);
  v117 = v6;
  ScrollPositionInPixels = 0.0;
  if (TXTextLayout::getEnableScroll(this))
    ScrollPositionInPixels = TXTextLayout::getScrollPositionInPixels(this);
  v7 = 0.0;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 4)
    v8 = 0.0;
  else
    v8 = ScrollPositionInPixels + 0.0;
  v9 = *((_DWORD *)this + 14928);
  if (v9 == 1)
  {
    v10 = 0.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 59560), MEMORY[0x1E0CA2E68], 0.0);
    v7 = v12;
  }
  else
  {
    v10 = 0.0;
    if (v9 == 2)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 59560), MEMORY[0x1E0CA2E68], 0.0);
      v10 = v11;
    }
  }
  EnableScroll = TXTextLayout::getEnableScroll(this);
  v14 = 0.0;
  if (EnableScroll)
    v15 = 0.0;
  else
    v15 = v7;
  v127 = v15;
  if (!EnableScroll)
    v14 = v10;
  v116 = v14;
  v119 = (uint64_t *)*((_QWORD *)this + 2378);
  v120 = (uint64_t *)*((_QWORD *)this + 2379);
  v16 = *(_DWORD *)(*v119 + 960);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0);
  v134 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0);
  v18 = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this);
  v19 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0);
  v20 = (_DWORD *)*((_QWORD *)this + 26);
  v21 = v20[2];
  v22 = v20[3];
  v24 = v20[4];
  v23 = v20[5];
  v28 = v21 == 792898163 && v22 == 1337411563 && v24 == -1926054385 && v23 == 1588990368;
  NumLinesInParagraphBounds = TXTextLayout::getNumLinesInParagraphBounds(this);
  v29 = (TXTextLayout *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 61800), MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)v29)
  {
    v30 = NumLinesInParagraphBounds > 0 && v28;
    v125 = v30;
  }
  else
  {
    v125 = 0;
  }
  isExtraLineSpacingForDiacriticsEnabled = TXTextLayout::isExtraLineSpacingForDiacriticsEnabled(v29);
  if (TXTextLayout::dynamicLineSpacingForDiacriticsEnabled(this))
  {
    v31 = TXTextLayout::computeExtraLineSpacingForDiacritics(this, &var0);
    (*(void (**)(TXTextLayout *, double))(*(_QWORD *)this + 1128))(this, v31);
  }
  v150 = 0.0;
  v151 = 0.0;
  (*(void (**)(TXTextLayout *, double *, double *, const OZRenderState *))(*(_QWORD *)this + 1016))(this, &v151, &v150, a2);
  v32 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0);
  v33 = v32;
  LODWORD(v34) = 0;
  LODWORD(v135) = 0;
  v35 = v134 == 4 || ValueAsInt == 3;
  v36 = v16 == 1 && v134 == 4;
  v118 = v36;
  v130 = v35;
  v131 = v35 | v18;
  v37 = 0.0;
  v124 = 0.0;
  v38 = 0.0;
  v40 = v119;
  v39 = v120;
  v128 = 0.0;
  v115 = v32;
  do
  {
    --v39;
    if (v118)
      v41 = v39;
    else
      v41 = v40;
    v42 = *v41;
    v149 = var0;
    OZChannel::getValueAsDouble((OZChannel *)(v42 + 680), &v149, 0.0);
    v44 = v43;
    v45 = *((double *)this + 7703);
    v46 = (*(double (**)(TXTextLayout *, CMTime *))(*(_QWORD *)this + 712))(this, &var0);
    if (*(_DWORD *)(v42 + 876) < 2u)
    {
      v48 = *(_QWORD *)(v42 + 856);
    }
    else
    {
      v47 = *(unsigned int **)(v42 + 912);
      if (v47)
        v48 = *v47;
      else
        v48 = 0;
    }
    if ((_DWORD)v135)
    {
      v49 = *(double **)(v42 + 888);
      v50 = v19 ? v49[3] : *v49 - v37;
      v8 = v8 - (v116 + v127 + v128 + v50);
      if (v125 && !(v135 % NumLinesInParagraphBounds))
        v8 = 0.0;
    }
    v51 = *((double *)this + 8050);
    Alignment = TXParagraphStyle::getAlignment((TXParagraphStyle *)v42);
    TXTextLayout::getAlignmentOffsetForParagraph((OZRenderState *)this, (const TXParagraphStyle *)v42, &v155, &v154, Alignment, v33, v151, v150);
    if (TXParagraphStyle::getAlignment((TXParagraphStyle *)v42) != 1)
      TXTextLayout::getAlignmentOffsetForParagraph((OZRenderState *)this, (const TXParagraphStyle *)v42, &v153, &v152, 1, v33, v151, v150);
    v124 = v124 + v38;
    if (v134 == 4)
    {
      if (v19)
        v154 = v154 - v124;
      else
        v155 = v124 + v155;
    }
    v128 = (v117 + v44) * v45 * v46 + v51;
    v147 = 0;
    v148 = 0;
    v133 = *(_DWORD *)(v42 + 1036);
    if (!v133)
    {
      v110 = 0;
      v57 = 0.0;
      goto LABEL_140;
    }
    v121 = v40;
    v122 = v39;
    v53 = 0;
    v54 = 0;
    v34 = (int)v34;
    v55 = 0.0;
    v56 = 1;
    v57 = 0.0;
    v136 = 0.0;
    v137 = 0.0;
    v138 = 0.0;
    do
    {
      v141 = v57;
      v58 = (TXTextObject **)(*((_QWORD *)this + 7353) + 16 * v34);
      LODWORD(v57) = *((_DWORD *)*v58 + 184);
      v59 = (double)*(unint64_t *)&v57;
      v60 = *((_QWORD *)*v58 + 33);
      if ((v56 & 1) == 0)
      {
        if (*(_DWORD *)(v54 + 24) == *(_DWORD *)(v60 + 24))
          goto LABEL_81;
LABEL_69:
        v62 = *(_QWORD *)(v60 + 8);
        v63 = *(std::__shared_weak_count **)(v60 + 16);
        if (v63)
        {
          p_shared_owners = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldxr(p_shared_owners);
          while (__stxr(v65 + 1, p_shared_owners));
        }
        v61 = v48;
        goto LABEL_73;
      }
      if (v60)
        goto LABEL_69;
      v61 = v48;
      v62 = 0;
      v63 = 0;
LABEL_73:
      v66 = v148;
      v147 = v62;
      v148 = v63;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v55 = 0.0;
      v69 = v147;
      v48 = v61;
      v35 = v130;
      if (!v130)
      {
        v146 = var0;
        OZChannel::getValueAsDouble((OZChannel *)(v147 + 2560), &v146, v59);
        v55 = v70;
      }
      OZChannel::getValueAsDouble((OZChannel *)(v69 + 3592), &var0, 0.0);
      v138 = v71;
      OZChannel::getValueAsDouble((OZChannel *)(v69 + 3744), &var0, 0.0);
      v137 = v72;
      OZChannel::getValueAsDouble((OZChannel *)(v69 + 4192), &var0, 0.0);
      v136 = v73;
      v54 = v60;
LABEL_81:
      v145 = var0;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 28136), &v145, v59);
      v139 = v55;
      v75 = v55 + v74;
      if (v19)
      {
        v76 = v155;
        LayoutRealPos = TXTextObject::getLayoutRealPos(*v58);
        v78 = 0.0 - v75 + v76;
        v140 = LayoutRealPos + v154;
      }
      else
      {
        v79 = TXTextObject::getLayoutRealPos(*v58);
        v76 = v79 + v155;
        v140 = v75 + v154;
        v78 = v79 + v155;
      }
      if (v35)
        v80 = -0.0;
      else
        v80 = v138;
      if (v35)
        v81 = -0.0;
      else
        v81 = v137;
      if (v131)
        v82 = 0.0;
      else
        v82 = v136 + 0.0;
      v83 = *(_DWORD *)(v42 + 876);
      if (v83 >= 2 && v59 >= (double)v48)
      {
        v84 = v141 + 1.0;
        if (v141 + 1.0 >= (double)(v83 - 1))
        {
          v48 = 0xFFFFFFFFLL;
        }
        else
        {
          v85 = *(_QWORD *)(v42 + 912);
          if (v85)
            v48 = *(unsigned int *)(v85 + 4 * v84);
          else
            v48 = 0;
        }
        v135 = (v135 + 1);
        v141 = v141 + 1.0;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((_QWORD *)this + 26)+ 8), (int32x4_t)xmmword_1B30541F0)))) & 1) != 0)
        {
          v86 = *(_QWORD *)(v42 + 888);
          v129 = *(double *)(v86 + ((unint64_t)v84 << 6));
          v87 = *(double *)(v86 + ((unint64_t)(v84 + -1.0) << 6) + 8);
          if (isExtraLineSpacingForDiacriticsEnabled)
          {
            v88 = v48;
            v89 = *((_QWORD *)*v58 + 33);
            if (v89)
            {
              v90 = *(OZChannel **)(v89 + 8);
              v91 = *(std::__shared_weak_count **)(v89 + 16);
              v143 = v90;
              v144 = v91;
              if (v91)
              {
                v92 = (unint64_t *)&v91->__shared_owners_;
                do
                  v93 = __ldxr(v92);
                while (__stxr(v93 + 1, v92));
              }
            }
            else
            {
              v91 = 0;
              v90 = 0;
              v143 = 0;
              v144 = 0;
            }
            v142 = var0;
            Size = TXTextStyle::getSize(v90, &v142, 0.0);
            if (v91)
            {
              v96 = (unint64_t *)&v91->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            CapHeight = TXTextObject::getCapHeight(*v58, Size);
            v99 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 63112), MEMORY[0x1E0CA2E68], 0.0);
            v48 = v88;
            v100 = 0.0;
            if (v99
              && *(double *)(*(_QWORD *)(v42 + 888) + (v135 << 6) + 40)
               + *(double *)(*(_QWORD *)(v42 + 888) + (v135 << 6) + 56)
               - CapHeight > 5.0)
            {
              OZChannel::getValueAsDouble((OZChannel *)((char *)this + 63264), &var0, 0.0);
            }
            v8 = v8 - v100;
          }
          v94 = v127 + v128 + v129 + 0.0 - v87;
        }
        else
        {
          (*(void (**)(TXTextLayout *))(*(_QWORD *)this + 1200))(this);
        }
        v8 = v8 - v94;
      }
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((_QWORD *)this + 26) + 8), (int32x4_t)xmmword_1B30541F0)))) & 1) == 0&& !*((_DWORD *)*v58 + 97))
      {
        v101 = *((_DWORD *)this + 15951);
        v8 = v8 - (*(double (**)(TXTextLayout *))(*(_QWORD *)this + 1200))(this) * (double)v101;
      }
      v102 = v80 + v78;
      v103 = v81 + v140;
      if (v134 == 4)
      {
        if (v19)
        {
          v104 = ScrollPositionInPixels + v103;
          v76 = v8;
LABEL_128:
          v105 = v103;
          goto LABEL_133;
        }
        v102 = ScrollPositionInPixels + v102;
        v104 = v81 + v140;
        v105 = v8;
      }
      else
      {
        v105 = v8 - ScrollPositionInPixels;
        if (v19)
        {
          v102 = v102 + v8;
          v76 = v8 - ScrollPositionInPixels;
          v104 = v103;
          goto LABEL_128;
        }
        if (v125 && !(v135 % NumLinesInParagraphBounds))
        {
          v8 = 0.0;
          v104 = v103;
        }
        else
        {
          v104 = v103 + v8;
        }
      }
LABEL_133:
      TXTextObject::setPosition(*v58, &var0, v102, v104, v82);
      v106 = *v58;
      *((double *)v106 + 21) = v102;
      *((double *)v106 + 22) = v104;
      *((double *)v106 + 23) = v82;
      *((double *)v106 + 24) = v76;
      *((double *)v106 + 25) = v105;
      *((_OWORD *)v106 + 13) = 0u;
      *((_OWORD *)v106 + 14) = 0u;
      v107 = TXParagraphStyle::getAlignment((TXParagraphStyle *)v42);
      v108 = *v58;
      if (v107 == 1)
      {
        *((_QWORD *)v108 + 30) = 0;
        *((_QWORD *)v108 + 31) = 0;
      }
      else
      {
        v109 = v154 - v152;
        *((double *)v108 + 30) = v155 - v153;
        *((double *)v108 + 31) = v109;
      }
      v57 = v141;
      v55 = v139;
      v56 = 0;
      ++v34;
      ++v53;
    }
    while (v53 != v133);
    v110 = v148;
    v33 = v115;
    v40 = v121;
    v39 = v122;
LABEL_140:
    v37 = *(double *)(*(_QWORD *)(v42 + 888) + ((unint64_t)v57 << 6) + 8);
    v38 = *(double *)(v42 + 920);
    if (v110)
    {
      v111 = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    if (++v40 == v120)
      break;
    LODWORD(v135) = v135 + 1;
  }
  while (v39 != v119);
  v113 = TXTextLayout::timeGlyphPropertiesMap(this);
  TXTimeGlyphPropertiesMap::clearPreSelectedGlyphMap((uint64_t)v113);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v157);
  return 0;
}

void sub_1B28FAF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 160));
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getNumLinesInParagraphBounds(TXTextLayout *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  CMTime *v20;
  double v21;
  double v22;
  float v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unsigned int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  CMTime v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  OZChannel *v43;
  std::__shared_weak_count *v44;

  v1 = (char *)this + 19332;
  if (*((_BYTE *)this + 19332))
    return *((unsigned int *)this + 4834);
  v5 = *((_QWORD *)this + 2419);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(std::__shared_weak_count **)(v5 + 24);
  v43 = (OZChannel *)v6;
  v44 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(const void **)(v6 + 520);
  v11 = *(std::__shared_weak_count **)(v6 + 528);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v10
  {
    v41 = v14;
    v42 = v11;
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
LABEL_17:
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v41 = 0;
    v42 = 0;
    if (v11)
      goto LABEL_17;
  }
  v19 = v41[5];
  v20 = (CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble(v43 + 13, MEMORY[0x1E0CA2E68], 0.0);
  v22 = v21;
  v23 = (*(float (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  LODWORD(v22) = (*(float (**)(uint64_t, double))(*(_QWORD *)v19 + 48))(v19, v22);
  v24 = **((_QWORD **)this + 2378);
  v40 = *v20;
  OZChannel::getValueAsDouble((OZChannel *)(v24 + 680), &v40, 0.0);
  v26 = v25;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], 0.0);
  v28 = v27;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E0CA2E68], 0.0);
  v30 = v23 + *(float *)&v22;
  v31 = v30 + v26;
  if (v30 + v26 <= 0.0)
  {
    v2 = 0xFFFFFFFFLL;
  }
  else
  {
    v32 = vabdd_f64(v28, v29);
    v33 = 0;
    while (v30 < v32)
    {
      v30 = v31 + v30;
      ++v33;
    }
    if (v33 <= 1)
      v2 = 1;
    else
      v2 = v33;
    *v1 = 1;
    *((_DWORD *)v1 + 1) = v2;
  }
  v34 = v42;
  if (v42)
  {
    v35 = (unint64_t *)&v42->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v44;
  if (v44)
  {
    v38 = (unint64_t *)&v44->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  return v2;
}

void sub_1B28FB29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::doLayoutForEmptyString(TXTextLayout *this)
{
  TXTextLayout *v2;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD v11[2];
  char v12;
  _QWORD v13[2];
  __int128 v14;

  *((_DWORD *)this + 4831) = 1;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 2)
  {
    v2 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 54280), MEMORY[0x1E0CA2E68], 0.0)
       ? (TXTextLayout *)((char *)this + 53528)
       : (TXTextLayout *)((char *)this + 52640);
    if (((*(uint64_t (**)(TXTextLayout *, _QWORD))(*(_QWORD *)v2 + 552))(v2, 0) & 1) == 0)
    {
      v13[0] = 0;
      v13[1] = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      v14 = _Q0;
      TXTextLayout::initializePaths((uint64_t)this, (uint64_t)v13);
    }
  }
  (*(void (**)(TXTextLayout *, uint64_t, double))(*(_QWORD *)this + 824))(this, 1, 0.0);
  TXTextLayout::updateStringTokenizer(this);
  v8 = (uint64_t *)*((_QWORD *)this + 2378);
  if (*((uint64_t **)this + 2379) == v8)
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v9 = (uint64_t *)*v8;
  if (*v8)
  {
    TXParagraphStyle::clearDirectionalRuns(*v8);
    v11[0] = 0;
    v11[1] = 0;
    v12 = 1;
    TXParagraphStyle::pushDirectionalRun(v9, (uint64_t)v11);
  }
  return TXTextLayout::clearInvalidTextObjects(this);
}

int *TXTextLayout::getTextHashForState@<X0>(void *lpsrc@<X1>, uint64_t a2@<X0>, CMTime *a3@<X2>, int a4@<W4>, int8x8_t *a5@<X8>)
{
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  TXParagraphStyle **v24;
  TXParagraphStyle **v25;
  TXParagraphStyle *v26;
  uint64_t LineSpacingChannel;
  int8x8_t *Hash;
  uint64_t v29;
  const void *v30;
  int8x8_t *v31;
  PCHashWriteStream *v33;
  CMTime v34;

  if (!v33)
    __cxa_bad_cast();
  if (a4)
  {
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 19600), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 19752), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 20312), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 20720), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 22136), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 59560), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannelFolder::calcHashForState((OZChannelFolder *)(a2 + 23688), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 24272), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 24424), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 24576), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 24728), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 24880), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 59128), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 59888), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 60360), (PCSerializerWriteStream *)lpsrc, &v34);
    v34 = *a3;
    OZChannelFolder::calcHashForState((OZChannelFolder *)(a2 + 20976), (PCSerializerWriteStream *)lpsrc, &v34);
  }
  OZChannel::getValueAsInt((OZChannel *)(a2 + 20464), MEMORY[0x1E0CA2E68], 0.0);
  for (i = *(_QWORD *)(a2 + 19352); i != a2 + 19344; i = *(_QWORD *)(i + 8))
  {
    v11 = *(_QWORD *)(i + 16) + 1304;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v11 + 448))(v11, lpsrc, &v34);
    v12 = *(_QWORD *)(i + 16) + 536;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v12 + 448))(v12, lpsrc, &v34);
    v13 = *(_QWORD *)(i + 16) + 1696;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v13 + 448))(v13, lpsrc, &v34);
    v14 = *(_QWORD *)(i + 16) + 1976;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v14 + 448))(v14, lpsrc, &v34);
    v15 = *(_QWORD *)(i + 16) + 2256;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v15 + 448))(v15, lpsrc, &v34);
    v16 = *(_QWORD *)(i + 16) + 49416;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v16 + 448))(v16, lpsrc, &v34);
    v17 = *(_QWORD *)(i + 16) + 2408;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v17 + 448))(v17, lpsrc, &v34);
    v18 = *(_QWORD *)(i + 16) + 2560;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v18 + 448))(v18, lpsrc, &v34);
    v19 = *(_QWORD *)(i + 16) + 5352;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v19 + 448))(v19, lpsrc, &v34);
    v20 = *(_QWORD *)(i + 16) + 5504;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v20 + 448))(v20, lpsrc, &v34);
    v21 = *(_QWORD *)(i + 16) + 2864;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v21 + 448))(v21, lpsrc, &v34);
    v22 = *(_QWORD *)(i + 16) + 3456;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v22 + 448))(v22, lpsrc, &v34);
    v23 = *(_QWORD *)(i + 16) + 4344;
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)v23 + 448))(v23, lpsrc, &v34);
  }
  v24 = *(TXParagraphStyle ***)(a2 + 19024);
  v25 = *(TXParagraphStyle ***)(a2 + 19032);
  while (v24 != v25)
  {
    v26 = *v24++;
    LineSpacingChannel = TXParagraphStyle::getLineSpacingChannel(v26);
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)LineSpacingChannel + 448))(LineSpacingChannel, lpsrc, &v34);
  }
  Hash = PCHashWriteStream::getHash((int8x8_t *)v33);
  *a5 = *Hash;
  a5[1] = Hash[1];
  v29 = *(_QWORD *)(a2 + 1208);
  if (v29 == a2 + 1200)
  {
LABEL_14:
    (*(void (**)(void *))(*(_QWORD *)lpsrc + 40))(lpsrc);
  }
  else
  {
    while (1)
    {
      v30 = *(const void **)(v29 + 16);
      if (v30)
      {
        {
          break;
        }
      }
      v29 = *(_QWORD *)(v29 + 8);
      if (v29 == a2 + 1200)
        goto LABEL_14;
    }
    (*(void (**)(void *))(*(_QWORD *)lpsrc + 40))(lpsrc);
    v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(_QWORD *)(a2 + 27984) + 448))(a2 + 27984, lpsrc, &v34);
    (*(void (**)(void *, CMTime *))(*(_QWORD *)lpsrc + 112))(lpsrc, &v34);
  }
  TXChannelString::getString((PCString *)(a2 + 19048), (PCString *)&v34);
  (*(void (**)(void *, CMTime *))(*(_QWORD *)lpsrc + 104))(lpsrc, &v34);
  PCString::~PCString((PCString *)&v34);
  OZChannel::getValueAsDouble((OZChannel *)(a2 + 61464), MEMORY[0x1E0CA2E68], 0.0);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 88))(lpsrc);
  v31 = PCHashWriteStream::getHash((int8x8_t *)v33);
  return PCHash128::operator+=((int *)a5, (int *)v31);
}

void sub_1B28FBAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::doLayoutForParagraphs(TXTextLayout *this, double a2, CMTime *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  TXTextLayout::clearInvalidTextObjects(this);
  v6 = *((_QWORD *)this + 2378);
  v7 = *((_QWORD *)this + 2379);
  if (v6 != v7)
  {
    LOBYTE(v8) = 0;
    v9 = 0;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)v6 + 872))
      {
        TXTextLayout::doLineLayout((PCString *)this, v9, a2, a3);
      }
      else
      {
        if ((v8 & 1) == 0)
        {
          v8 = 0;
          goto LABEL_8;
        }
        TXTextLayout::updateTextStateInParagraph(this, v9);
      }
      v8 = 1;
LABEL_8:
      ++v9;
      v6 += 8;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  v8 = 0;
LABEL_12:
  TXTextLayout::applyTypeOnToTextObjects(this, a3);
  return v8;
}

uint64_t TXTextLayout::shrinkToLeftRightMargins(TXTextLayout *this, CMTime *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  const CMTime *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int ValueAsInt;
  int v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  TXParagraphStyle **v31;
  TXParagraphStyle **v32;
  TXParagraphStyle *v33;
  TXTextLayout *v34;
  double v35;

  v4 = (uint64_t *)*((_QWORD *)this + 2378);
  v5 = (uint64_t *)*((_QWORD *)this + 2379);
  if (v4 == v5)
  {
    v9 = 0.0;
    v8 = 0.0;
    v7 = 0.0;
    v6 = 0.0;
  }
  else
  {
    v6 = 0.0;
    v7 = 0.0;
    v8 = 0.0;
    v9 = 0.0;
    do
    {
      v10 = *v4;
      v11 = *(unsigned int *)(*v4 + 876);
      if ((_DWORD)v11)
      {
        v12 = (double *)(*(_QWORD *)(v10 + 888) + 8);
        do
        {
          v13 = *(v12 - 1) - *v12;
          v6 = v6 + v13;
          if (v13 > v7)
            v7 = *(v12 - 1) - *v12;
          v12 += 8;
          --v11;
        }
        while (v11);
      }
      v14 = *(double *)(v10 + 920);
      v8 = v8 + v14;
      if (v14 > v9)
        v9 = *(double *)(v10 + 920);
      ++v4;
    }
    while (v4 != v5);
  }
  v15 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
  v17 = v16;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), v15, 0.0);
  v19 = v17 - v18;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v15, 0.0);
  v21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), v15, 0.0);
  if (v21)
    v22 = v7;
  else
    v22 = v8;
  if (v21)
    v23 = v6;
  else
    v23 = v9;
  if (ValueAsInt != 4)
    v22 = v23;
  v24 = v19 / v22;
  if (v19 / v22 >= 1.0)
  {
    __asm { FMOV            V0.2D, #1.0 }
    *((_OWORD *)this + 3851) = _Q0;
    v31 = (TXParagraphStyle **)*((_QWORD *)this + 2378);
    v32 = (TXParagraphStyle **)*((_QWORD *)this + 2379);
    while (v31 != v32)
    {
      v33 = *v31;
      if (TXParagraphStyle::getAlignment(*v31))
        TXParagraphStyle::dirty(v33, 1);
      ++v31;
    }
    v34 = this;
    v35 = v19;
  }
  else
  {
    v25 = (double *)((char *)this + 61616);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 61208), MEMORY[0x1E0CA2E68], 0.0) == 4)
    {
      *v25 = v24;
      v25 = (double *)((char *)this + 61624);
    }
    else if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0))
    {
      v25 = (double *)((char *)this + 61624);
    }
    *v25 = v24;
    TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
    v35 = v19 + 1.0;
    v34 = this;
  }
  return TXTextLayout::doLayoutForParagraphs(v34, v35, a2);
}

uint64_t TXTextLayout::shrinkToTopBottomMargins(TXTextLayout *this, double a2, CMTime *a3)
{
  double *v6;
  double v7;
  double v8;
  uint64_t *v9;
  uint64_t *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  const CMTime *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t result;
  double v34;
  double v35;
  double v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;

  v6 = (double *)((char *)this + 61616);
  v39 = *a3;
  v7 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), &v39, 0.0);
  v9 = (uint64_t *)*((_QWORD *)this + 2378);
  v10 = (uint64_t *)*((_QWORD *)this + 2379);
  if (v9 == v10)
  {
    v14 = 0.0;
    v13 = 0.0;
    v12 = 0.0;
  }
  else
  {
    v11 = v8;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    do
    {
      v15 = *v9;
      v38 = v39;
      OZChannel::getValueAsDouble((OZChannel *)(v15 + 680), &v38, 0.0);
      v17 = v16;
      (*(void (**)(TXTextLayout *, CMTime *))(*(_QWORD *)this + 712))(this, &v39);
      v19 = *(unsigned int *)(v15 + 876);
      if ((_DWORD)v19)
      {
        v20 = (v11 + v17) * v18;
        v21 = (double *)(*(_QWORD *)(v15 + 888) + 8);
        do
        {
          v22 = v20 + *(v21 - 1) - *v21;
          v12 = v12 + v22;
          if (v22 > v7)
            v7 = v20 + *(v21 - 1) - *v21;
          v21 += 8;
          --v19;
        }
        while (v19);
      }
      v23 = *(double *)(v15 + 920);
      v14 = v14 + v23;
      if (v23 > v13)
        v13 = *(double *)(v15 + 920);
      ++v9;
    }
    while (v9 != v10);
    v9 = (uint64_t *)*((_QWORD *)this + 2379);
  }
  v24 = *(v9 - 1);
  v37 = v39;
  OZChannel::getValueAsDouble((OZChannel *)(v24 + 680), &v37, 0.0);
  v26 = v25;
  v27 = (*(double (**)(TXTextLayout *, CMTime *))(*(_QWORD *)this + 712))(this, &v39);
  v28 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], 0.0);
  v30 = v29;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), v28, 0.0);
  v32 = v30 - v31;
  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), v28, 0.0))
    ++v6;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v28, 0.0) == 4)
  {
    result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0);
    if ((_DWORD)result)
      v34 = v14;
    else
      v34 = v7;
  }
  else
  {
    v35 = v12 - v26 * v27;
    result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0);
    if ((_DWORD)result)
      v34 = v13;
    else
      v34 = v35;
  }
  v36 = v32 / v34;
  *v6 = v36;
  if (v36 >= 1.0)
  {
    *v6 = 1.0;
  }
  else
  {
    TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
    return TXTextLayout::doLayoutForParagraphs(this, a2, a3);
  }
  return result;
}

BOOL TXTextScrollBehavior::getComputeOffsetForPreInceptionProjects(TXTextScrollBehavior *this)
{
  return (int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 3392), MEMORY[0x1E0CA2E68], 0.0) <= 5
      && (int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 3544), MEMORY[0x1E0CA2E68], 0.0) < 7;
}

void TXTextLayout::performLayoutWithPath(TXTextLayout *this, CMTime *a2)
{
  OZScene **v4;
  char *v5;
  __int128 v6;
  double PathLength;
  int v13;
  double v14;
  double v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  int32x2_t v21;
  int64x2_t v22;
  uint64_t v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __double2 v31;
  double v32;
  double v33;
  double AdvanceWidth;
  double v35;
  __double2 v36;
  double v37;
  _BOOL4 v38;
  double v39;
  double v40;
  double v41;
  double *v42;
  double v43;
  int8x16_t v44;
  int v45;
  int ValueAsInt;
  CMTime v47;
  CMTime v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  CMTime v55;
  double v56;
  double v57;
  __int128 v58;
  OZRenderState v59;
  _BYTE v60[16];

  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v60, v4);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 2)
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 54280), MEMORY[0x1E0CA2E68], 0.0))
      v5 = (char *)this + 53528;
    else
      v5 = (char *)this + 52640;
    if (((*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)v5 + 552))(v5, 0) & 1) == 0)
    {
      OZRenderState::OZRenderState(&v59);
      v6 = *(_OWORD *)&a2->value;
      v59.var0.var3 = a2->epoch;
      v56 = 0.0;
      v57 = 0.0;
      __asm { FMOV            V0.2D, #-1.0 }
      v58 = _Q0;
      *(_OWORD *)&v59.var0.var0 = v6;
      TXTextLayout::getTypographicBounds((uint64_t)this, (uint64_t)&v56, (CMTime *)&v59, 1, 0);
      TXTextLayout::initializePaths((uint64_t)this, (uint64_t)&v56);
    }
    v55 = *a2;
    PathLength = TXTextLayout::getPathLength(this, &v55);
    v13 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 58144), MEMORY[0x1E0CA2E68], 0.0)
        ? TXTextLayout::isLoopPath(this)
        : 0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 57840), a2, 0.0);
    v15 = v14;
    v45 = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this);
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0);
    v16 = (uint64_t *)((char *)this + 58824);
    v17 = *((_QWORD *)this + 7354) - *((_QWORD *)this + 7353);
    memset(&v59, 0, 24);
    if ((v17 & 0xFFFFFFFF0) != 0)
    {
      v18 = 0;
      v19 = PathLength * v15;
      v43 = fabs(PathLength);
      v20 = (v17 >> 4);
      v21 = vdup_n_s32(ValueAsInt == 0);
      v22.i64[0] = v21.u32[0];
      v22.i64[1] = v21.u32[1];
      v44 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v22, 0x3FuLL)), (int8x16_t)xmmword_1B304EEE0, (int8x16_t)xmmword_1B304EED0);
      do
      {
        v23 = *v16;
        TXTextObject::getPosition(*(TXTextObject **)(*v16 + v18), a2, &v56);
        v24 = v56;
        v25 = v57;
        v52 = 0.0;
        v53 = 0.0;
        v54 = 0.0;
        v50 = 0.0;
        v51 = 0.0;
        v49 = 0.0;
        *(int8x16_t *)&v59.var0.var0 = v44;
        v59.var0.var3 = 0;
        v26 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 58448), MEMORY[0x1E0CA2E68], 0.0);
        if (v13)
          v27 = PathLength - (v19 + v24);
        else
          v27 = v19 + v24;
        if (v13)
          v28 = PathLength - (v19 + 0.0 - v25);
        else
          v28 = v19 + 0.0 - v25;
        if (OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 57992), 0, 1)
          && OZChannel::getValueAsInt((OZChannel *)((char *)this + 57992), MEMORY[0x1E0CA2E68], 0.0)
          && v43 >= 0.0000001)
        {
          if (!ValueAsInt)
          {
            if (v27 <= 0.0 || v27 >= PathLength)
              v27 = PathLength * (v27 / PathLength - floor(v27 / PathLength));
LABEL_30:
            AdvanceWidth = TXTextObject::getAdvanceWidth(*(TXTextLayout ***)(v23 + v18), a2);
            v48 = *a2;
            TXTextLayout::getPathPosition((uint64_t)this, &v48, v13, &v52, &v51, &v50, &v49, v26 != 0, v27, AdvanceWidth, (int)&v59);
            v35 = v52;
            v36 = __sincos_stret(v49);
            v33 = v35 - v25 * v36.__sinval;
            v32 = v53 + v25 * v36.__cosval;
            goto LABEL_31;
          }
          if (v28 <= 0.0 || v28 >= PathLength)
            v28 = PathLength * (v28 / PathLength - floor(v28 / PathLength));
        }
        else if (!ValueAsInt)
        {
          goto LABEL_30;
        }
        v29 = TXTextObject::getAdvanceWidth(*(TXTextLayout ***)(v23 + v18), a2);
        v47 = *a2;
        TXTextLayout::getPathPosition((uint64_t)this, &v47, v13, &v52, &v51, &v50, &v49, v26 != 0, v28, v29, (int)&v59);
        v30 = v53;
        v31 = __sincos_stret(v49);
        v32 = v30 + v24 * v31.__sinval;
        v33 = v52 + v24 * v31.__cosval;
LABEL_31:
        if (v45)
          v37 = 0.0;
        else
          v37 = v54;
        v38 = TXTextLayout::alignToPath(this);
        v40 = v50;
        v39 = v51;
        v41 = v49;
        if (!v38)
        {
          v39 = 0.0;
          v40 = 0.0;
          v41 = 0.0;
        }
        TXTextObject::setPathRotation(*(TXTextObject **)(v23 + v18), a2, v39, v40, v41);
        TXTextObject::setPosition(*(TXTextObject **)(v23 + v18), a2, v33, v32, v37);
        v42 = *(double **)(v23 + v18);
        v42[21] = v33;
        v42[22] = v32;
        v42[23] = v37;
        v18 += 16;
        --v20;
      }
      while (v20);
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v60);
}

void sub_1B28FC520(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 160));
  _Unwind_Resume(a1);
}

double TXTextLayout::getPathLength(TXTextLayout *this, CMTime *a2)
{
  double v4;
  uint64_t v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  v4 = 0.0;
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 54280), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 0u:
      v5 = 52504;
      return OZChannelPosition3D::getLength((os_unfair_lock_s *)((char *)this + v5), MEMORY[0x1E0CA2E68]);
    case 1u:
      v5 = 53392;
      return OZChannelPosition3D::getLength((os_unfair_lock_s *)((char *)this + v5), MEMORY[0x1E0CA2E68]);
    case 2u:
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 54928), a2, 0.0);
      v8 = fabs(v7);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 55080), a2, 0.0);
      v10 = fabs(v9);
      if (v8 >= 0.001)
        v11 = v8;
      else
        v11 = 0.001;
      if (v10 < 0.001)
        v10 = 0.001;
      return PCEvaluator::findLengthOfEllipse((TXTextLayout *)((char *)this + 58600), v11, v10, 0.0, 0.0);
    case 3u:
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 55368), a2, 0.0);
      v13 = fabs(v12);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 55520), a2, 0.0);
      v15 = fabs(v14);
      v16 = v15 + v15;
      v17 = v15 < 0.001;
      v18 = 0.002;
      if (v17)
        v16 = 0.002;
      if (v13 >= 0.001)
        v18 = v13 + v13;
      return v18 + v16;
    case 4u:
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 56512), a2, 0.0);
      v20 = v19;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 56664), a2, 0.0);
      v22 = v21;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 57080), a2, 0.0);
      v24 = v23;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 57232), a2, 0.0);
      v26 = v25;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 57384), a2, 0.0);
      v28 = v27;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 57536), a2, 0.0);
      return PCEvaluator::findLengthOfSineWave((os_unfair_lock_s *)this + 14650, v24, v26, v28, v29, v20, v22, 400);
    default:
      return v4;
  }
}

uint64_t TXTextLayout::isLoopPath(TXTextLayout *this)
{
  OZChannel *v1;
  uint64_t result;

  v1 = (OZChannel *)((char *)this + 54280);
  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 54280), MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result)
    return OZChannel::getValueAsInt(v1, MEMORY[0x1E0CA2E68], 0.0) != 4;
  return result;
}

uint64_t TXTextLayout::getPathPosition(uint64_t a1, const CMTime *a2, int a3, double *a4, _QWORD *a5, _QWORD *a6, double *a7, int a8, double a9, double a10, int a11)
{
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t result;
  double v27;
  double v28;
  unint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  BOOL v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  BOOL v45;
  double v46;
  double v47;
  double v48;
  float64x2_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  BOOL v60;
  double v61;
  BOOL v62;
  _BOOL4 v63;
  double v64;
  char v66;
  double v67;
  double v68;
  double v69;
  double v70;
  OZChannel *v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  BOOL v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  int v109;
  double v110;
  double v111;
  CMTime v112[2];
  int v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  CMTime v117;
  uint64_t v118;
  double v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  double v130;
  double v131;
  double v132;
  double v133;
  Float64 v134;
  double v135;
  double v136;
  double v137[2];

  v136 = 0.0;
  v137[0] = 0.0;
  v134 = 0.0;
  v135 = 0.0;
  v21 = a10 * 0.5;
  v22 = 0.0;
  if (TXTextLayout::alignToPath((TXTextLayout *)a1))
    v23 = a10 * 0.5;
  else
    v23 = 0.0;
  v111 = v23;
  if (!OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E0CA2E68], 0.0))
  {
    OZChannelPosition3D::getPositionOnPath((OZChannelPosition3D *)(a1 + 52504), a2, v21 + a9, v137, &v136, &v135, 0, 0, 0, &v134);
    v111 = a10 * 0.5;
LABEL_11:
    v25 = 0.0;
    goto LABEL_12;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E0CA2E68], 0.0) == 1)
  {
    if (TXTextLayout::alignToPath((TXTextLayout *)a1))
      v24 = 0.0;
    else
      v24 = a10 * 0.5;
    v111 = v24;
    OZChannelPosition3D::getPositionOnPath((OZChannelPosition3D *)(a1 + 53392), a2, v24 + a9, v137, &v136, &v135, 0, 0, 0, &v134);
    goto LABEL_11;
  }
  v30 = 0.0;
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E0CA2E68], 0.0) == 2)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 54928), a2, 0.0);
    v32 = fabs(v31);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55080), a2, 0.0);
    v34 = fabs(v33);
    if (v32 < 0.001)
      v32 = 0.001;
    if (v34 >= 0.001)
      v35 = v34;
    else
      v35 = 0.001;
    v36 = sqrt((v32 * v32 + v35 * v35) * 0.5) * 6.28318531;
    if (fabs(v36) >= 0.0000001)
    {
      v37 = -v111;
      if (!a3)
        v37 = v111;
      v30 = (v37 + a9) / v36;
    }
    v38 = 0.0;
    v39 = v30 > 1.0 || v30 < 0.0;
    v40 = floor(v30);
    if (v39)
      v38 = v40;
    v41 = v30 - v38;
    v117.value = 0;
    v112[0].value = 0;
    v132 = 0.0;
    v133 = 0.0;
    PCEvaluator::findPointOnEllipse((PCEvaluator *)(a1 + 58600), v41, v32, v35, 0.0, 0.0, v137, &v136, 0);
    PCEvaluator::findPointOnEllipse((PCEvaluator *)(a1 + 58600), v41 + -0.01, v32, v35, 0.0, 0.0, (double *)&v117.value, &v133, 0);
    PCEvaluator::findPointOnEllipse((PCEvaluator *)(a1 + 58600), v41 + 0.01, v32, v35, 0.0, 0.0, (double *)&v112[0].value, &v132, 0);
    v137[0] = v32 + v137[0];
    v42 = sqrt((*(double *)&v112[0].value - *(double *)&v117.value) * (*(double *)&v112[0].value - *(double *)&v117.value)+ (v132 - v133) * (v132 - v133));
    v25 = -(v132 - v133) / v42;
    v22 = (*(double *)&v112[0].value - *(double *)&v117.value) / v42;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 54928), a2, 0.0);
    if (v43 < 0.0)
    {
      v137[0] = -v137[0];
      v25 = -v25;
    }
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55080), a2, 0.0);
    v45 = v44 < 0.0;
    if (v44 >= 0.0)
      v46 = v136;
    else
      v46 = -v136;
    if (v45)
      v22 = -v22;
    v47 = -v25;
    v48 = -v22;
    if (a3)
      v47 = v25;
    else
      v48 = v22;
    v136 = v46 - v111 * v47;
    v137[0] = v137[0] - v111 * v48;
    goto LABEL_12;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E0CA2E68], 0.0) == 3)
  {
    v109 = a8;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55368), a2, 0.0);
    v54 = fabs(v53);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55520), a2, 0.0);
    v56 = fabs(v55);
    v57 = v54 + v54;
    v58 = v54 + v54 + v56 + v56;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55520), a2, 0.0);
    v60 = v59 >= 0.0;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55368), a2, 0.0);
    v62 = v61 < 0.0;
    v63 = TXTextLayout::alignToPath((TXTextLayout *)a1);
    v64 = -a10;
    if (!a3)
      v64 = a10;
    if (!v63)
      v64 = 0.0;
    if (v58 < 0.0000001)
      a9 = 0.0;
    if (a9 < 0.0 || a9 > v58)
      a9 = v58 * (a9 / v58 - floor(a9 / v58));
    v66 = v60 ^ v62;
    v67 = -v111;
    if (!a3)
      v67 = v111;
    v68 = v67 + a9;
    v69 = v56 * 0.5;
    if (v68 <= v56 * 0.5)
    {
      v137[0] = 0.0;
      v136 = a9;
      v25 = -1.0;
      v54 = 0.0;
      if (((v60 ^ v62) & 1) != 0)
      {
        v69 = a9;
      }
      else
      {
        v69 = v64 + a9;
        v136 = v64 + a9;
      }
      v22 = 0.0;
    }
    else if (v68 <= v54 + v69)
    {
      v54 = a9 - v69;
      v136 = v56 * 0.5;
      v137[0] = a9 - v69;
      v25 = 0.0;
      v22 = 1.0;
      if (((v60 ^ v62) & 1) == 0)
      {
        v54 = v64 + v54;
        v137[0] = v54;
      }
    }
    else
    {
      v70 = v56 * 3.0 * 0.5;
      if (v68 > v54 + v70)
      {
        if (v68 <= v57 + v70)
        {
          v54 = v54 + v70 - (a9 - v54);
          v69 = v56 * -0.5;
          v136 = v56 * -0.5;
          v137[0] = v54;
          v25 = 0.0;
          v22 = -1.0;
          a8 = v109;
          v71 = (OZChannel *)(a1 + 55520);
          if ((v66 & 1) == 0)
          {
            v54 = v54 - v64;
            v137[0] = v54;
          }
        }
        else
        {
          v137[0] = 0.0;
          v69 = a9 - (v57 + v70) - v69;
          v136 = v69;
          v25 = -1.0;
          v54 = 0.0;
          a8 = v109;
          v71 = (OZChannel *)(a1 + 55520);
          if ((v66 & 1) == 0)
          {
            v69 = v64 + v69;
            v136 = v69;
          }
          v22 = 0.0;
        }
        goto LABEL_94;
      }
      v69 = v69 - (a9 - v54 - v69);
      v136 = v69;
      v137[0] = v54;
      v25 = 1.0;
      v22 = 0.0;
      if (((v60 ^ v62) & 1) == 0)
      {
        v69 = v69 - v64;
        v136 = v69;
      }
    }
    a8 = v109;
    v71 = (OZChannel *)(a1 + 55520);
LABEL_94:
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55368), a2, 0.0);
    if (v100 < 0.0)
    {
      v137[0] = -v54;
      v25 = -v25;
    }
    OZChannel::getValueAsDouble(v71, a2, 0.0);
    if (v101 < 0.0)
    {
      v136 = -v69;
      v22 = -v22;
    }
    goto LABEL_12;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E0CA2E68], 0.0) != 4)
  {
    OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E0CA2E68], 0.0);
    goto LABEL_11;
  }
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 55808), a2, 0.0);
  v74 = v73;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 55960), a2, 0.0);
  v76 = v75;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 56512), a2, 0.0);
  v78 = v77;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 56664), a2, 0.0);
  v105 = v76;
  v106 = v74;
  v79 = v78 - v74;
  v81 = v80 - v76;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 57080), a2, 0.0);
  v110 = v82;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 57232), a2, 0.0);
  v84 = v83;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 57384), a2, 0.0);
  v86 = v85;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 57536), a2, 0.0);
  v87 = sqrt(v79 * v79 + v81 * v81);
  v104 = v84;
  v108 = v88;
  v89 = (v111 + a9)
      / PCEvaluator::findLengthOfSineWave((os_unfair_lock_s *)(a1 + 58600), v110, v84, v86, v88, v79, v81, 400);
  v90 = v89 > 1.0 || v89 < 0.0;
  v91 = floor(v89);
  v107 = 0.0;
  if (!v90)
    v91 = 0.0;
  v103 = v91;
  v92 = v89 - v91;
  v117.value = 0;
  v112[0].value = 0;
  v93 = 0.0;
  if (v87 > 0.0)
  {
    v107 = -v81 / v87;
    v93 = v79 / v87;
  }
  v102 = v93;
  v132 = 0.0;
  v133 = 0.0;
  v130 = 0.0;
  v131 = 0.0;
  PCEvaluator::findPointOnSineWave((os_unfair_lock_s *)(a1 + 58600), v92, v110, v104, v86, v108, v79, v81, 400, (double *)&v117.value, (double *)&v112[0].value);
  PCEvaluator::findPointOnSineWave((os_unfair_lock_s *)(a1 + 58600), v92 + -0.0025, v110, v104, v86, v108, v79, v81, 400, &v133, &v131);
  PCEvaluator::findPointOnSineWave((os_unfair_lock_s *)(a1 + 58600), v92 + 0.0025, v110, v104, v86, v108, v79, v81, 400, &v132, &v130);
  v94 = v74 + v79 * v132 + v107 * v130 - (v74 + v79 * v133 + v107 * v131);
  v95 = v105 + v81 * v132 + v102 * v130 - (v105 + v81 * v133 + v102 * v131);
  v96 = -v95;
  v97 = sqrt(v95 * v95 + v94 * v94);
  v25 = v96 / v97;
  v22 = v94 / v97;
  v98 = -(v96 / v97);
  v99 = -v22;
  if (a3)
    v98 = v25;
  else
    v99 = v22;
  v136 = v102 * *(double *)&v112[0].value + v105 + v81 * (v103 + *(double *)&v117.value) - v111 * v98;
  v137[0] = v107 * *(double *)&v112[0].value + v106 + v79 * (v103 + *(double *)&v117.value) - v111 * v99;
LABEL_12:
  result = OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result != 5)
  {
    v27 = v136;
    v28 = v135;
    *a4 = v137[0];
    a4[1] = v27;
    a4[2] = v28;
    if (OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E0CA2E68], 0.0))
    {
      v29 = 0;
      if (OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E0CA2E68], 0.0) == 1)
      {
        OZFigTimeForChannelSeconds(&v117, v134, 0x40000);
        OZChannelPosition3D::getOrientations((OZChannelPosition3D *)(a1 + 53392), &v117, a5, a6, a7, 0, a8, a11, v21 + a9, a3);
      }
      else
      {
        v51 = -v25;
        if (a3)
        {
          v22 = -v22;
          v29 = 0x8000000000000000;
          v52 = v25;
        }
        else
        {
          v52 = -v25;
          v51 = v25;
        }
        *(double *)&v117.value = v22;
        *(double *)&v117.timescale = v51;
        v119 = v52;
        v120 = v22;
        v123 = v29;
        v124 = v29;
        v127 = 0;
        v128 = 0;
        v117.epoch = 0;
        v118 = 0;
        v121 = 0;
        v122 = 0;
        v125 = 0x3FF0000000000000;
        v126 = 0;
        v129 = xmmword_1B304EEE0;
        memset(v112, 0, sizeof(v112));
        v113 = 4;
        v114 = 0u;
        v115 = 0u;
        v116 = 0;
        PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v117.value, (uint64_t)v112);
        v72 = *((_QWORD *)&v114 + 1);
        *a5 = v114;
        *a6 = v72;
        *(_QWORD *)a7 = v115;
      }
      result = OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), MEMORY[0x1E0CA2E68], 0.0);
      if ((_DWORD)result)
        *a7 = *a7 + 1.57079633;
    }
    else
    {
      result = TXTextLayout::alignToPath((TXTextLayout *)a1);
      if ((_DWORD)result)
      {
        memset(&v117, 0, sizeof(v117));
        OZFigTimeForChannelSeconds(v112, v134, 0x40000);
        OZChannelPosition3D::getOrientations((OZChannelPosition3D *)(a1 + 52504), v112, a5, a6, a7, (uint64_t)&v117, a8, a11, v111 + a9, a3);
        result = OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), MEMORY[0x1E0CA2E68], 0.0);
        if ((_DWORD)result)
          *a7 = *a7 + 1.57079633;
        v49.f64[0] = v137[0];
        v50 = v135 - v111 * *(double *)&v117.epoch;
        v49.f64[1] = v136;
        *(float64x2_t *)a4 = vsubq_f64(v49, vmulq_n_f64(*(float64x2_t *)&v117.value, v111));
        a4[2] = v50;
      }
    }
  }
  return result;
}

uint64_t **TXTextLayout::applyTypeOnToTextObjects(TXTextLayout *this, CMTime *a2)
{
  OZChannel *v4;
  uint64_t **result;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  double v9;
  uint64_t v10;
  unsigned int v11;
  TXTimeGlyphPropertiesMap *v12;
  CMTime v13;

  v4 = (OZChannel *)((char *)this + 20464);
  result = (uint64_t **)OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result != 3)
  {
    result = (uint64_t **)OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0);
    if ((_DWORD)result != 4)
    {
      v6 = (uint64_t *)*((_QWORD *)this + 7353);
      v7 = (uint64_t *)*((_QWORD *)this + 7354);
      while (v6 != v7)
      {
        v8 = *(_DWORD *)(*v6 + 96);
        v13 = *a2;
        v9 = TXTextLayout::computeTypeOnFactor(this, v8, &v13);
        v10 = *v6;
        v6 += 2;
        v11 = *(_DWORD *)(v10 + 96);
        v12 = TXTextLayout::timeGlyphPropertiesMap(this);
        result = TXTimeGlyphPropertiesMap::setTypeOn(v12, v9, v11, a2);
      }
    }
  }
  return result;
}

double TXTextLayout::computeTypeOnFactor(TXTextLayout *this, unsigned int a2, CMTime *a3)
{
  int ComposedCharacterCount;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int ValueAsInt;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  ComposedCharacterCount = TXTextLayout::getComposedCharacterCount(this);
  v7 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 23816), a3, 0.0);
  v8 = (double)ComposedCharacterCount;
  v10 = v9 * (double)ComposedCharacterCount;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 23968), a3, 0.0);
  v12 = v11;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 24120), a3, 0.0);
  v14 = (double)a2;
  if (floor(v10 + 0.0000001) <= (double)a2)
  {
    v15 = ceil(v10);
    if (v15 <= v14)
    {
      v16 = v12 * v8;
      v17 = floor(v12 * v8 + 0.0000001);
      v7 = 1.0;
      if (v17 <= v14)
      {
        v18 = ceil(v16);
        v19 = v16 - v17;
        if (!ValueAsInt)
          v19 = 1.0;
        if (v18 > v14)
          return v19;
        else
          return 0.0;
      }
    }
    else if (ValueAsInt)
    {
      return v15 - v10;
    }
    else
    {
      return 0.0;
    }
  }
  return v7;
}

uint64_t TXTextLayout::hitCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 472))(a1, a2, a3, a4, a5, a6, 1, 0);
}

uint64_t `non-virtual thunk to'TXTextLayout::hitCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 - 200) + 472))(a1 - 200, a2, a3, a4, a5, a6, 1, 0);
}

PCString *TXTextLayout::hitCheckWithTransform(uint64_t a1, float32x2_t *a2, OZRenderState *a3, const LiCamera *a4, double *a5, unsigned int a6, int a7, double *a8)
{
  double v14;
  uint64_t v15;
  OZScene *v16;
  OZScene *v17;
  uint64_t v18;
  TXTextObject ***v19;
  _OWORD *v20;
  __int128 v21;
  OZScene **v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void **HostApplicationDelegate;
  TXTextObject **v28;
  char v29;
  int v30;
  TXTextObject *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  double FaceOpacity;
  uint64_t v38;
  double *v39;
  int v40;
  double v41;
  float64x2_t v42;
  TXTextObject *v43;
  double DropShadowDistance;
  TXTextObject *v45;
  double DropShadowAngle;
  __double2 v47;
  uint64_t i;
  double *v49;
  double v50;
  int v51;
  int v52;
  unint64_t *v53;
  unint64_t v54;
  OZChannelBase *v55;
  char *StringPtr;
  PCString *v57;
  const LiCamera *v59;
  uint64_t v60;
  PCString *v61;
  double *v62;
  TXTextObject **v63;
  int v65;
  CMTime v67;
  CMTime v68;
  float64x2_t v69;
  uint64_t v70;
  float64x2_t v71;
  uint64_t v72;
  float64x2_t v73;
  uint64_t v74;
  float64x2_t v75;
  uint64_t v76;
  uint64_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  CMTime v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  _OWORD v85[3];
  float64x2_t v86;
  _OWORD v87[2];
  CMTime v88;
  CMTime var0;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  double v100[6];
  int v101;
  OZRenderState v102[5];
  char v103[8];
  float64x2_t v104;
  uint64_t v105;
  _BYTE v106[16];
  __int128 v107;
  int64_t var3;
  _OWORD v109[3];
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  if ((a6 & 4) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 200) + 680))(a1 + 200) & 1) != 0)
    return 0;
  if ((a6 & 2) != 0)
  {
    v107 = *(_OWORD *)&a3->var0.var0;
    var3 = a3->var0.var3;
    if (!(*(unsigned int (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 216) + 104))(a1 + 216, &v107, 1, 1, 1))return 0;
  }
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v106);
  TXTextLayout::doLayout((TXTextLayout *)a1, a3, (PCHash128 *)v106);
  if ((a6 & 8) != 0)
    v14 = (double)HIBYTE(a6);
  else
    v14 = 0.0;
  v15 = a1 + 200;
  if (((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 200) + 680))(a1 + 200) & a7) == 1)
  {
    *(_OWORD *)&v102[0].var2 = xmmword_1B304F270;
    *(_OWORD *)&v102[0].var0.var3 = xmmword_1B304F270;
    *(_OWORD *)&v102[0].var0.var0 = xmmword_1B304F270;
    (*(void (**)(uint64_t, OZRenderState *, OZRenderState *))(*(_QWORD *)a1 + 440))(a1, v102, a3);
    v104 = vcvtq_f64_f32(*a2);
    v105 = 0;
    (*(void (**)(double *__return_ptr, uint64_t, float64x2_t *, const LiCamera *, OZRenderState *, _QWORD))(*(_QWORD *)v15 + 1384))(v100, a1 + 200, &v104, a4, a3, 0);
    if (!PCRayIntersectsBox(v100, (double *)&v102[0].var0.var0, a5))
      return 0;
    return (PCString *)v15;
  }
  v16 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 272))(a1 + 200);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v16, a4, &v104);
  v17 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 272))(a1 + 200);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v17, a4, v102);
  v59 = a4;
  v18 = 0;
  v19 = (TXTextObject ***)(a1 + 58824);
  do
  {
    v20 = (_OWORD *)&v104.f64[v18];
    v21 = *(_OWORD *)((char *)&v102[0].var0.var3 + v18 * 8);
    *v20 = *(_OWORD *)((char *)&v102[0].var0.var0 + v18 * 8);
    v20[1] = v21;
    v18 += 4;
  }
  while (v18 != 16);
  v22 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v103, v22);
  OZRenderParams::OZRenderParams((OZRenderParams *)v102);
  OZRenderParams::setState((OZRenderParams *)v102, a3);
  v102[0].var4 = 0;
  OZRenderParams::OZRenderParams((OZRenderParams *)v100, (const OZRenderParams *)v102);
  v101 = 1;
  v99 = 0x3FF0000000000000;
  v96 = 0x3FF0000000000000;
  v93 = 0x3FF0000000000000;
  v90 = 0x3FF0000000000000;
  v91 = 0u;
  v92 = 0u;
  v94 = 0u;
  v95 = 0u;
  v97 = 0u;
  v98 = 0u;
  if (!a8)
    (*(void (**)(uint64_t, uint64_t *, OZRenderState *))(*(_QWORD *)v15 + 1256))(a1 + 200, &v90, a3);
  var0 = (CMTime)a3->var0;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 59888), &var0, 0.0);
  v24 = v23;
  v88 = (CMTime)a3->var0;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 60360), &v88, 0.0);
  v26 = v25;
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  v65 = OZHostApplicationDelegateHandler::wantsToIgnoreTextBoundsOfTransparentObjects(HostApplicationDelegate);
  v60 = a1 + 200;
  v61 = (PCString *)a1;
  v28 = *v19;
  v62 = a5;
  v63 = *(TXTextObject ***)(a1 + 58832);
  if (*v19 != v63)
  {
    v29 = 0;
    while (1)
    {
      v30 = 0;
      memset(v87, 0, sizeof(v87));
      v86 = 0u;
      memset(v85, 0, sizeof(v85));
      do
      {
        v31 = *v28;
        v32 = *((_QWORD *)*v28 + 33);
        if (v32)
        {
          v34 = *(_QWORD *)(v32 + 8);
          v33 = *(std::__shared_weak_count **)(v32 + 16);
          v83 = v34;
          v84 = v33;
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v36 = __ldxr(p_shared_owners);
            while (__stxr(v36 + 1, p_shared_owners));
            v31 = *v28;
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v83 = 0;
          v84 = 0;
        }
        v82 = (CMTime)a3->var0;
        if (!TXTextObject::isAttributeEnabled(v31, v30, &v82)
          || v65
          && (FaceOpacity = TXTextObject::getFaceOpacity(*v28, (CMTime *)a3), !a3->var25)
          && FaceOpacity > -0.0000001
          && FaceOpacity < 0.0000001)
        {
          v52 = 6;
          if (!v33)
            goto LABEL_56;
LABEL_52:
          v53 = (unint64_t *)&v33->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          goto LABEL_56;
        }
        if (a8)
        {
          v115 = 0x3FF0000000000000;
          v112 = 0x3FF0000000000000;
          *((_QWORD *)&v109[2] + 1) = 0x3FF0000000000000;
          *(_QWORD *)&v109[0] = 0x3FF0000000000000;
          memset((char *)v109 + 8, 0, 32);
          v110 = 0u;
          v111 = 0u;
          v113 = 0u;
          v114 = 0u;
          TXTextObject::getTransformMatrix((uint64_t)*v28, (uint64_t)v109, (uint64_t)v100, 1, 0, 0, 1, v26, v24);
          PCMatrix44Tmpl<double>::leftMult((uint64_t)v109, a8);
          v81 = 0uLL;
          v80 = 0uLL;
          v79 = 0uLL;
          v78 = 0uLL;
          TXTextObject::getFourCornerPointsInObjectSpaceForAttribute((uint64_t)*v28, a3, &v81, &v80, &v79, &v78, v30, 1, 0.0, 0.0, 0.0, 0.0, 1u, 0);
          v77 = 0;
          OZChannelBase::setRangeName((OZChannelBase *)*v28, (const PCString *)a3);
          v75 = v78;
          v76 = v77;
          v73 = v79;
          v74 = v77;
          v71 = v81;
          v72 = v77;
          v69 = v80;
          v70 = v77;
          PCMatrix44Tmpl<double>::transform<double>((double *)v109, v75.f64, v75.f64);
          PCMatrix44Tmpl<double>::transform<double>((double *)v109, v73.f64, v73.f64);
          PCMatrix44Tmpl<double>::transform<double>((double *)v109, v71.f64, v71.f64);
          PCMatrix44Tmpl<double>::transform<double>((double *)v109, v69.f64, v69.f64);
          *(float64x2_t *)((char *)v87 + 8) = v75;
          *((_QWORD *)&v87[1] + 1) = v76;
          v86 = v73;
          *(_QWORD *)&v87[0] = v74;
          *(float64x2_t *)((char *)&v85[1] + 8) = v69;
          *((_QWORD *)&v85[2] + 1) = v70;
          *(_QWORD *)&v85[1] = v72;
          v85[0] = v71;
        }
        else
        {
          TXTextObject::getTransformedImageCornersWithFourCornerPinning((uint64_t)*v28, v102, (uint64_t)v85, v30, v26, v24, 1, 0, (uint64_t)&v90);
        }
        v38 = 0;
        v111 = 0u;
        v110 = 0u;
        v39 = (double *)v85;
        memset(v109, 0, sizeof(v109));
        do
        {
          v75 = 0uLL;
          v76 = 0;
          PCMatrix44Tmpl<double>::transform<double>(v104.f64, v39, v75.f64);
          if ((v38 - 1) < 2)
            v40 = 1;
          else
            v40 = -1;
          if ((v38 & 0x7FFFFFFE) == 2)
            v41 = v14;
          else
            v41 = -v14;
          v42.f64[1] = v41;
          v42.f64[0] = v14 * (double)v40;
          v109[v38++] = vaddq_f64(v42, v75);
          v39 += 3;
        }
        while (v38 != 4);
        v111 = v109[0];
        if (v30 == 3 && OZChannel::getValueAsInt((OZChannel *)(v34 + 19528), MEMORY[0x1E0CA2E68], 0.0))
        {
          v43 = *v28;
          v68 = (CMTime)a3->var0;
          DropShadowDistance = TXTextObject::getDropShadowDistance(v43, &v68);
          v45 = *v28;
          v67 = (CMTime)a3->var0;
          DropShadowAngle = TXTextObject::getDropShadowAngle(v45, &v67);
          v47 = __sincos_stret(DropShadowAngle);
          for (i = 0; i != 5; ++i)
          {
            v49 = (double *)&v109[i];
            v50 = DropShadowDistance * v47.__sinval + *((double *)&v109[i] + 1);
            *v49 = DropShadowDistance * v47.__cosval + *(double *)&v109[i];
            v49[1] = v50;
          }
        }
        v75 = vcvtq_f64_f32(*a2);
        v51 = pointInPolygon(v75.f64, (uint64_t)v109, 5);
        v29 |= v51;
        if (v51)
          v52 = 4;
        else
          v52 = 0;
        v33 = v84;
        if (v84)
          goto LABEL_52;
LABEL_56:
        if (v52 != 6 && v52)
          break;
        ++v30;
      }
      while (v30 != 4);
      v28 += 2;
      if (v28 == v63)
        goto LABEL_62;
    }
  }
  v29 = 0;
LABEL_62:
  v15 = v60;
  v55 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 272))(v60);
  if ((OZChannelBase::isObjectRef(v55) != 1) | v29 & 1)
    goto LABEL_67;
  StringPtr = TXChannelString::getStringPtr((TXChannelString *)&v61[2381]);
  if (PCString::size((PCString *)StringPtr))
  {
    if (!TXTextLayout::isAllWhitespace(v61))
      goto LABEL_67;
  }
  v109[2] = xmmword_1B304F270;
  v109[1] = xmmword_1B304F270;
  v109[0] = xmmword_1B304F270;
  TXTextLayout::getLocalVolumeForHitCheck(v61, (uint64_t)v109, (uint64_t)a3);
  v75 = vcvtq_f64_f32(*a2);
  v76 = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, float64x2_t *, const LiCamera *, OZRenderState *, _QWORD))(*(_QWORD *)v60 + 1384))(v85, v60, &v75, v59, a3, 0);
  if (!PCRayIntersectsBox((double *)v85, (double *)v109, v62))
  {
LABEL_67:
    OZRenderParams::~OZRenderParams((OZRenderParams *)v100);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v102);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v103);
    if ((v29 & 1) != 0)
      v57 = v61;
    else
      v57 = 0;
    if (v57)
      return v57 + 25;
    else
      return 0;
  }
  else
  {
    OZRenderParams::~OZRenderParams((OZRenderParams *)v100);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v102);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v103);
  }
  return (PCString *)v15;
}

void sub_1B28FDE60(_Unwind_Exception *a1)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x2E0]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x870]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&STACK[0xE08]);
  _Unwind_Resume(a1);
}

void *TXTextLayout::didAddToScene(TXTextLayout *this, OZScene *a2)
{
  void *result;
  uint64_t i;
  uint64_t v6;
  OZObjectManipulator *v7;

  OZTransformNode::didAddToScene((OZTransformNode *)((char *)this + 200), a2);
  result = OZDocument::addCPPObserver(*((_QWORD *)a2 + 198), (uint64_t)this + 18976, 1001);
  for (i = *((_QWORD *)this + 2419); (TXTextLayout *)i != (TXTextLayout *)((char *)this + 19344); i = *(_QWORD *)(i + 8))
  {
    v6 = *(_QWORD *)(i + 16);
    if (v6)
      v7 = (OZObjectManipulator *)(v6 + 16);
    else
      v7 = 0;
    OZScene::registerObject(a2, v7);
    OZScene::addNodeDependency((uint64_t)a2, *(_DWORD *)(*(_QWORD *)(i + 16) + 96), *((_DWORD *)this + 70));
    result = OZStyle::registerAllMaterials(*(OZScene **)(i + 16));
  }
  return result;
}

void *`non-virtual thunk to'TXTextLayout::didAddToScene(TXTextLayout *this, OZScene *a2)
{
  return TXTextLayout::didAddToScene((TXTextLayout *)((char *)this - 200), a2);
}

OZLockingElement *TXTextLayout::willRemoveFromScene(OZLockingElement *this, OZScene *a2)
{
  OZLockingElement *v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;
  OZObjectManipulator *v7;

  if (a2)
  {
    v3 = this;
    v4 = (_QWORD *)((char *)this + 19344);
    for (i = *((_QWORD *)this + 2419); (_QWORD *)i != v4; i = *(_QWORD *)(i + 8))
    {
      OZStyle::unregisterAllMaterials(*(OZStyle **)(i + 16));
      v6 = *(_QWORD *)(i + 16);
      if (v6)
        v7 = (OZObjectManipulator *)(v6 + 16);
      else
        v7 = 0;
      OZScene::unregisterObject(a2, v7);
      OZScene::removeAllDependencies(a2, *(_DWORD *)(*(_QWORD *)(i + 16) + 96));
    }
    OZLockingElement::willRemoveFromScene(v3, a2);
    return (OZLockingElement *)OZDocument::removeCPPObserver(*((_QWORD *)a2 + 198));
  }
  return this;
}

OZLockingElement *`non-virtual thunk to'TXTextLayout::willRemoveFromScene(TXTextLayout *this, OZScene *a2)
{
  return TXTextLayout::willRemoveFromScene((TXTextLayout *)((char *)this - 200), a2);
}

_QWORD *`non-virtual thunk to'TXTextLayout::willDeleteFromScene(TXTextLayout *this, OZScene *a2)
{
  return TXTextLayout::clearStyleRuns((TXTextLayout *)((char *)this - 200));
}

BOOL TXTextLayout::addEffect(TXTextLayout *this, OZEffect *a2, OZEffect *a3)
{
  return OZSceneNode::addEffect((TXTextLayout *)((char *)this + 200), a2, a3);
}

BOOL TXTextLayout::insertEffectAfter(TXTextLayout *this, OZEffect *a2, OZEffect *a3)
{
  return OZSceneNode::insertEffectAfter((TXTextLayout *)((char *)this + 200), a2, a3);
}

void TXTextLayout::setName(TXTextLayout *this, PCString *a2, int a3)
{
  PCString v6;

  if (PCString::size(a2) < 0x1F)
  {
    OZObjectManipulator::setName((TXTextLayout *)((char *)this + 216), a2, a3);
  }
  else
  {
    PCString::substrTo(a2, 30, (CFStringRef *)&v6.var0);
    OZObjectManipulator::setName((TXTextLayout *)((char *)this + 216), &v6, a3);
    PCString::~PCString(&v6);
  }
  *((_BYTE *)this + 52362) = 1;
}

void sub_1B28FE0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::setName(TXTextLayout *this, PCString *a2, int a3)
{
  TXTextLayout::setName((TXTextLayout *)((char *)this - 216), a2, a3);
}

__n128 TXTextLayout::getNaturalDuration@<Q0>(TXTextLayout *this@<X0>, __n128 *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  v3 = (char *)this + 200;
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
  {
    v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 272))(v3);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), a2).n128_u64[0];
  }
  else
  {
    v6 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *a2 = *(__n128 *)MEMORY[0x1E0CA2E68];
    a2[1].n128_u64[0] = *(_QWORD *)(v6 + 16);
  }
  return result;
}

double `non-virtual thunk to'TXTextLayout::getNaturalDuration@<D0>(TXTextLayout *this@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = TXTextLayout::getNaturalDuration((TXTextLayout *)((char *)this - 216), a2).n128_u64[0];
  return result;
}

void TXTextLayout::dirty(TXTextLayout *this)
{
  OZScene **v2;
  TXTimeGlyphPropertiesMap *v3;
  CFTypeRef *v4;
  _QWORD *v5;
  TXTextLayout *v6;
  _BYTE v7[8];

  (*(void (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 552))(this, 0);
  *((_OWORD *)this + 3852) = 0u;
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 63888);
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 64032);
  v2 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v7, v2);
  v3 = TXTextLayout::timeGlyphPropertiesMap(this);
  TXTimeGlyphPropertiesMap::flush(v3);
  v4 = (CFTypeRef *)((char *)this + 64184);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64232, *((_QWORD **)this + 8030));
  *((_QWORD *)this + 8029) = (char *)this + 64240;
  *((_QWORD *)this + 8030) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 8027);
  *((_QWORD *)this + 8031) = 0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64208, v5);
  *((_QWORD *)this + 8026) = (char *)this + 64216;
  *((_QWORD *)this + 8027) = 0;
  *((_QWORD *)this + 8028) = 0;
  if (TXTextLayout::scaleEmojiToCapHeight(v6) && *v4)
  {
    CFRelease(*v4);
    *v4 = 0;
    *((_OWORD *)this + 4012) = xmmword_1B304EED0;
  }
  *((_BYTE *)this + 19332) = 0;
  *((_BYTE *)this + 64324) = 1;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v7);
}

void sub_1B28FE278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void OZValueCache<OZBoundsCacheItem>::flush(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock((std::mutex *)(a1 + 40));
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)(a1 + 8));
  PCSharedMutex::unlock(v2);
}

void `non-virtual thunk to'TXTextLayout::dirty(TXTextLayout *this)
{
  TXTextLayout::dirty((TXTextLayout *)((char *)this - 200));
}

{
  TXTextLayout::dirty((TXTextLayout *)((char *)this - 216));
}

double TXTextLayout::dirtyTextAndObjects(TXTextLayout *this, int a2)
{
  double result;
  char *v5;
  TXTextObject **v6;
  TXTextObject **v7;
  TXTextObject *v8;

  OZElement::dirty((OZElement *)((char *)this + 200));
  *((_BYTE *)this + 19392) = 1;
  if (a2)
  {
    v5 = (char *)this + 58824;
    v6 = (TXTextObject **)*((_QWORD *)this + 7353);
    v7 = (TXTextObject **)*((_QWORD *)v5 + 1);
    while (v6 != v7)
    {
      v8 = *v6;
      v6 += 2;
      *(_QWORD *)&result = TXTextObject::dirty(v8).n128_u64[0];
    }
  }
  return result;
}

uint64_t TXTextLayout::doEval(TXTextLayout *this, OZChannelBase *a2, const CMTime *a3)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1552), a3, 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1704), a3, 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2152), a3, 0.0);
  return 1;
}

uint64_t `non-virtual thunk to'TXTextLayout::doEval(TXTextLayout *this, OZChannelBase *a2, const CMTime *a3)
{
  TXTextLayout::doEval((TXTextLayout *)((char *)this - 216), a2, a3);
  return 1;
}

void TXTextLayout::transform(Li3DEngineScene *a1, double *a2, const OZRenderState *a3)
{
  OZScene **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE v11[1424];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[8];

  v6 = (OZScene **)Li3DEngineScene::sceneManager(a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v22, v6);
  v21 = 0x3FF0000000000000;
  v18 = 0x3FF0000000000000;
  v15 = 0x3FF0000000000000;
  v12 = 0x3FF0000000000000;
  v13 = 0u;
  v14 = 0u;
  v16 = 0u;
  v17 = 0u;
  v19 = 0u;
  v20 = 0u;
  if (OZChannelBase::isObjectRef((OZChannelBase *)a1)
    && (v7 = *((_QWORD *)a1 + 7353), v8 = *((_QWORD *)a1 + 7354) - v7, (v8 & 0xFFFFFFFF0) != 0))
  {
    if (*((_QWORD *)a1 + 2408) >= (unint64_t)(v8 >> 4))
      v9 = 0;
    else
      v9 = *((_QWORD *)a1 + 2408);
    v10 = (uint64_t *)(v7 + 16 * v9);
    if (*v10)
    {
      OZRenderParams::OZRenderParams((OZRenderParams *)v11);
      OZRenderParams::setState((OZRenderParams *)v11, a3);
      TXTextObject::getTransformMatrix(*v10, (uint64_t)&v12, (uint64_t)v11, 1, 1, 0, 1, 0.0, 0.0);
      OZRenderParams::~OZRenderParams((OZRenderParams *)v11);
    }
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t *, const OZRenderState *))(*((_QWORD *)a1 + 25) + 1256))((_QWORD *)a1 + 25, &v12, a3);
  }
  PCMatrix44Tmpl<double>::transform<double>((double *)&v12, a2, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v22);
}

void sub_1B28FE4D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 56));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::transform(uint64_t a1, double *a2, const OZRenderState *a3)
{
  TXTextLayout::transform((Li3DEngineScene *)(a1 - 200), a2, a3);
}

void TXTextLayout::createSnapSetForCamera(_QWORD *a1, const LiCamera *a2, uint64_t **a3, OZRenderState *a4, int a5, int a6)
{
  uint64_t v17;
  OZScene *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _BYTE v46[16];
  double v47[16];
  double v48;
  __int128 v49;
  __int128 v50;
  double v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  double v57;
  OZRenderState v58;
  double v59;
  double v60;
  __int128 v61;

  v59 = 0.0;
  v60 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v61 = _Q0;
  OZRenderState::OZRenderState(&v58, a4);
  v58.var4 = 1;
  TXTextLayout::getSelectionBounds((uint64_t)a1, (uint64_t)&v59, &v58);
  v57 = 1.0;
  v54 = 0x3FF0000000000000;
  v51 = 1.0;
  v48 = 1.0;
  v49 = 0u;
  v50 = 0u;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v17 = a1[25];
  a1 += 25;
  (*(void (**)(_QWORD *, double *, OZRenderState *))(v17 + 1256))(a1, &v48, a4);
  v18 = (OZScene *)(*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v18, a2, v47);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v48, v47);
  v19 = v57 + v59 * *((double *)&v55 + 1) + (v60 + *((double *)&v61 + 1)) * *(double *)&v56;
  v20 = (*(double *)&v50 + v59 * v48 + (v60 + *((double *)&v61 + 1)) * *(double *)&v49) / v19;
  v21 = (v60 + *((double *)&v61 + 1)) * v51;
  v22 = (*((double *)&v52 + 1) + v59 * *((double *)&v50 + 1) + v21) / v19;
  v23 = v57 + (v59 + *(double *)&v61) * *((double *)&v55 + 1) + (v60 + *((double *)&v61 + 1)) * *(double *)&v56;
  v24 = (v59 + *(double *)&v61) * v48;
  v25 = (*(double *)&v50 + v24 + (v60 + *((double *)&v61 + 1)) * *(double *)&v49) / v23;
  v26 = (v59 + *(double *)&v61) * *((double *)&v50 + 1);
  v27 = (*((double *)&v52 + 1) + v26 + v21) / v23;
  v28 = v57 + v59 * *((double *)&v55 + 1) + v60 * *(double *)&v56;
  v29 = v60 * *(double *)&v49;
  v30 = (*(double *)&v50 + v59 * v48 + v60 * *(double *)&v49) / v28;
  v31 = (*((double *)&v52 + 1) + v59 * *((double *)&v50 + 1) + v60 * v51) / v28;
  v32 = v57 + (v59 + *(double *)&v61) * *((double *)&v55 + 1) + v60 * *(double *)&v56;
  v33 = (*(double *)&v50 + v24 + v60 * *(double *)&v49) / v32;
  v34 = (*((double *)&v52 + 1) + v26 + v60 * v51) / v32;
  if (v30 <= v33)
    v35 = (*(double *)&v50 + v59 * v48 + v60 * *(double *)&v49) / v28;
  else
    v35 = (*(double *)&v50 + v24 + v29) / v32;
  if (v30 >= v33)
    v36 = (*(double *)&v50 + v59 * v48 + v60 * *(double *)&v49) / v28;
  else
    v36 = (*(double *)&v50 + v24 + v29) / v32;
  if (v25 <= v35)
    v35 = v25;
  if (v20 <= v35)
    v35 = v20;
  if (v25 >= v36)
    v36 = v25;
  if (v20 >= v36)
    v36 = v20;
  if (v31 <= v34)
    v37 = (*((double *)&v52 + 1) + v59 * *((double *)&v50 + 1) + v60 * v51) / v28;
  else
    v37 = v34;
  if (v31 < v34)
    v31 = v34;
  if (v27 <= v37)
    v38 = v27;
  else
    v38 = v37;
  if (v22 <= v38)
    v38 = v22;
  if (v27 >= v31)
    v31 = v27;
  if (v22 >= v31)
    v39 = v22;
  else
    v39 = v31;
  if (v35 <= v36)
    v40 = v35;
  else
    v40 = v36;
  if (v35 <= v36)
    v35 = v36;
  if (v39 >= v38)
    v41 = v39;
  else
    v41 = v38;
  if (v39 < v38)
    v38 = v39;
  v59 = v40;
  v60 = v38;
  v42 = v35 - v40;
  *(double *)&v61 = v42;
  *((double *)&v61 + 1) = v41 - v38;
  if (a5)
  {
    OZSnap::OZSnap((OZSnap *)v46, 258, (v40 + v40 + v42) * 0.5, v38, v38 + v41 - v38);
    std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v46, (uint64_t)v46);
    OZSnap::OZSnap((OZSnap *)v46, 514, (v60 + v60 + *((double *)&v61 + 1)) * 0.5, v59, v59 + *(double *)&v61);
    std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v46, (uint64_t)v46);
  }
  if (a6)
  {
    if (*(double *)&v61 > 3.0)
    {
      v43 = *(double *)&v61 - (v59 + 1.0 - v59) + -2.0;
      v59 = v59 + 1.0;
      *(double *)&v61 = v43;
    }
    v44 = *((double *)&v61 + 1);
    v45 = v60;
    if (*((double *)&v61 + 1) > 3.0)
    {
      v44 = *((double *)&v61 + 1) - (v60 + 1.0 - v60) + -2.0;
      v60 = v60 + 1.0;
      *((double *)&v61 + 1) = v44;
      v45 = v45 + 1.0;
    }
    OZSnap::OZSnap((OZSnap *)v46, 257, v59, v45, v45 + v44);
    std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v46, (uint64_t)v46);
    OZSnap::OZSnap((OZSnap *)v46, 260, v59 + *(double *)&v61, v60, v60 + *((double *)&v61 + 1));
    std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v46, (uint64_t)v46);
    OZSnap::OZSnap((OZSnap *)v46, 513, v60, v59, v59 + *(double *)&v61);
    std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v46, (uint64_t)v46);
    OZSnap::OZSnap((OZSnap *)v46, 516, v60 + *((double *)&v61 + 1), v59, v59 + *(double *)&v61);
    std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v46, (uint64_t)v46);
  }
}

void `non-virtual thunk to'TXTextLayout::createSnapSetForCamera(uint64_t a1, const LiCamera *a2, uint64_t **a3, OZRenderState *a4, int a5, int a6)
{
  TXTextLayout::createSnapSetForCamera((_QWORD *)(a1 - 200), a2, a3, a4, a5, a6);
}

unint64_t TXTextLayout::isGlowEnabled(TXTextLayout *this, const CMTime *a2)
{
  unint64_t isEnabled;
  char *v4;
  uint64_t v5;

  isEnabled = 1;
  if ((OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 38664), 0, 1) & 1) == 0)
  {
    v4 = (char *)this + 19344;
    v5 = *((_QWORD *)this + 2419);
    if ((char *)v5 == v4)
    {
      return 0;
    }
    else
    {
      do
      {
        isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(*(_QWORD *)(v5 + 16) + 31080), 0, 1);
        if ((_DWORD)isEnabled)
          break;
        v5 = *(_QWORD *)(v5 + 8);
      }
      while ((char *)v5 != v4);
    }
  }
  return isEnabled;
}

unint64_t TXTextLayout::isTextDropShadowEnabled(TXTextLayout *this)
{
  unint64_t isEnabled;
  char *v3;
  uint64_t v4;

  isEnabled = 1;
  if ((OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 45048), 0, 1) & 1) == 0)
  {
    v3 = (char *)this + 19344;
    v4 = *((_QWORD *)this + 2419);
    if ((char *)v4 == v3)
    {
      return 0;
    }
    else
    {
      do
      {
        isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(*(_QWORD *)(v4 + 16) + 13848), 0, 1);
        if ((_DWORD)isEnabled)
          break;
        v4 = *(_QWORD *)(v4 + 8);
      }
      while ((char *)v4 != v3);
    }
  }
  return isEnabled;
}

double TXTextLayout::calcStaticHash(uint64_t a1, const void *a2, uint64_t **a3)
{
  int8x8_t *v6;
  int8x8_t *v7;
  unint64_t v8;
  unsigned int v9;
  const CMTime *v10;
  uint64_t v11;
  uint64_t i;
  int *StaticHash;
  int8x8_t *Hash;
  double result;
  PCString v16;
  __int128 v17;
  __n128 v18;

  (*(void (**)(uint64_t, const void *, uint64_t **, uint64_t))(*(_QWORD *)(a1 + 200) + 528))(a1 + 200, a2, a3, 1);
  if (!v6)
    __cxa_bad_cast();
  v7 = v6;
  v18 = *(__n128 *)PCHashWriteStream::getHash(v6)->i8;
  (*(void (**)(int8x8_t *))(*(_QWORD *)v7 + 40))(v7);
  v8 = *(_QWORD *)(a1 + 208);
  v17 = xmmword_1B3054200;
  if ((OZFactory::isKindOfClass(v8, (int32x4_t *)&v17) & 1) == 0)
  {
    TXChannelString::getString((PCString *)(a1 + 19048), &v16);
    v9 = PCString::size(&v16);
    PCString::~PCString(&v16);
    if (v9)
    {
      TXChannelString::getString((PCString *)(a1 + 19048), &v16);
      (*(void (**)(const void *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v16);
      PCString::~PCString(&v16);
    }
  }
  (*(void (**)(const void *, double))(*(_QWORD *)a2 + 88))(a2, *(double *)(a1 + 19432));
  v10 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24272), MEMORY[0x1E0CA2E68], 0.0);
  (*(void (**)(const void *))(*(_QWORD *)a2 + 88))(a2);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24424), v10, 0.0);
  (*(void (**)(const void *))(*(_QWORD *)a2 + 88))(a2);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24576), v10, 0.0);
  (*(void (**)(const void *))(*(_QWORD *)a2 + 88))(a2);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24728), v10, 0.0);
  (*(void (**)(const void *))(*(_QWORD *)a2 + 88))(a2);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 61464), v10, 0.0);
  (*(void (**)(const void *))(*(_QWORD *)a2 + 88))(a2);
  v11 = a1 + 19344;
  for (i = *(_QWORD *)(a1 + 19352); i != v11; i = *(_QWORD *)(i + 8))
  {
    StaticHash = (int *)OZObjectManipulator::getStaticHash((_OWORD *)(*(_QWORD *)(i + 16) + 16), a2, a3);
    PCHash128::operator+=((int *)&v18, StaticHash);
  }
  Hash = PCHashWriteStream::getHash(v7);
  PCHash128::operator+=((int *)&v18, (int *)Hash);
  *(_QWORD *)&result = PCHashWriteStream::setHash((__n128 *)v7, &v18).n128_u64[0];
  return result;
}

void sub_1B28FEC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'TXTextLayout::calcStaticHash(uint64_t a1, const void *a2, uint64_t **a3)
{
  return TXTextLayout::calcStaticHash(a1 - 200, a2, a3);
}

{
  return TXTextLayout::calcStaticHash(a1 - 216, a2, a3);
}

void TXTextLayout::calcStaticHash(PCString *a1, const void *a2, uint64_t **a3)
{
  int8x8_t *v6;
  int8x8_t *v7;
  OZScene **v8;
  unsigned int v9;
  PCString *i;
  int *StaticHash;
  uint64_t *var0;
  uint64_t *v13;
  int8x8_t *v14;
  int8x8_t *Hash;
  PCString v16;
  _BYTE v17[8];
  __n128 v18;

  OZTransformNode::calcStaticHash(&a1[25]);
  if (!v6)
    __cxa_bad_cast();
  v7 = v6;
  v18 = *(__n128 *)PCHashWriteStream::getHash(v6)->i8;
  (*(void (**)(int8x8_t *))(*(_QWORD *)v7 + 40))(v7);
  v8 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v17, v8);
  TXChannelString::getString(a1 + 2381, &v16);
  v9 = PCString::size(&v16);
  PCString::~PCString(&v16);
  if (v9)
  {
    TXChannelString::getString(a1 + 2381, &v16);
    (*(void (**)(const void *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v16);
    PCString::~PCString(&v16);
  }
  for (i = (PCString *)a1[2419].var0; i != &a1[2418]; i = (PCString *)i[1].var0)
  {
    StaticHash = (int *)OZObjectManipulator::getStaticHash(&i[2].var0->data, a2, a3);
    PCHash128::operator+=((int *)&v18, StaticHash);
  }
  var0 = (uint64_t *)a1[2378].var0;
  v13 = (uint64_t *)a1[2379].var0;
  while (var0 != v13)
  {
    v14 = TXParagraphStyle::getStaticHash(*var0, a2);
    PCHash128::operator+=((int *)&v18, (int *)v14);
    ++var0;
  }
  Hash = PCHashWriteStream::getHash(v7);
  PCHash128::operator+=((int *)&v18, (int *)Hash);
  PCHashWriteStream::setHash((__n128 *)v7, &v18);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v17);
}

void sub_1B28FEDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  PCString::~PCString((PCString *)&a9);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::calcStaticHash(uint64_t a1, const void *a2, uint64_t **a3)
{
  TXTextLayout::calcStaticHash((PCString *)(a1 - 200), a2, a3);
}

_QWORD *TXTextLayout::colorConversionCache(TXTextLayout *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)((char *)this + 60968);
  v2 = (_QWORD *)*((_QWORD *)this + 7621);
  if (!v2)
  {
    v2 = (_QWORD *)operator new();
    v3 = operator new();
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 24) = v3 + 32;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_QWORD *)(v3 + 80) = 0;
    *(_OWORD *)(v3 + 88) = xmmword_1B3054210;
    *(_QWORD *)(v3 + 104) = 0;
    *v2 = v3;
    *v1 = v2;
  }
  return v2;
}

void sub_1B28FEEA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void TXTextLayout::cacheColorConversion(TXTextLayout *a1, PCColor *this, uint64_t a3, int a4, int a5)
{
  CGColorSpace *CGColorSpace;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;
  int v16;
  int v17;
  uint64_t v18;

  HIDWORD(v15) = a4;
  v16 = a5;
  v17 = *(_DWORD *)(a3 + 24);
  v18 = *(_QWORD *)(a3 + 28);
  CGColorSpace = PCColor::getCGColorSpace(this);
  PCColor::getRGB(this, (float *)&v15, (float *)&v15 + 1, (float *)&v15 + 2, CGColorSpace);
  std::allocate_shared[abi:ne180100]<PCWorkingColor,std::allocator<PCWorkingColor>,PCWorkingColor const&,void>(a3, &v13);
  v9 = TXTextLayout::colorConversionCache(a1);
  PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::addValue(*v9, &v15, &v13, 0);
  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1B28FEFA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::workingColorFromColor(TXTextLayout *a1, PCColor *this, uint64_t a3, int a4, int a5)
{
  CGColorSpace *CGColorSpace;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  float v16;
  float v17;
  float v18[4];
  uint64_t v19;
  char v20;

  LODWORD(v18[1]) = a4;
  LODWORD(v18[2]) = a5;
  v18[3] = *(float *)(a3 + 24);
  v19 = *(_QWORD *)(a3 + 28);
  CGColorSpace = PCColor::getCGColorSpace(this);
  PCColor::getRGB(this, &v16, &v17, v18, CGColorSpace);
  v8 = (_QWORD *)*TXTextLayout::colorConversionCache(a1);
  v20 = 0;
  PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::findValue(v8, (uint64_t)&v16, &v20, &v14);
  v9 = v14;
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

double TXTextLayout::calcHashForState(PCString *a1, const void *a2, OZRenderParams *a3, uint64_t **a4)
{
  int8x8_t *v8;
  int8x8_t *v9;
  PCString *v10;
  __CFString *i;
  int8x8_t *Hash;
  double result;
  __int128 v14;
  __n128 v15;

  ((void (*)(PCString *, const void *, OZRenderParams *, uint64_t **, uint64_t))a1[25].var0[16].length)(&a1[25], a2, a3, a4, 1);
  if (!v8)
    __cxa_bad_cast();
  v9 = v8;
  v15 = *(__n128 *)PCHashWriteStream::getHash(v8)->i8;
  (*(void (**)(const void *))(*(_QWORD *)a2 + 40))(a2);
  TXChannelString::getString(a1 + 2381, (PCString *)&v14);
  (*(void (**)(const void *, __int128 *))(*(_QWORD *)a2 + 104))(a2, &v14);
  PCString::~PCString((PCString *)&v14);
  v10 = a1 + 2418;
  for (i = a1[2419].var0; i != (__CFString *)v10; i = (__CFString *)i->info)
  {
    OZObjectManipulator::getHashForState((_OWORD *)i->data + 1, a2, a3, a4, &v14);
    PCHash128::operator+=((int *)&v15, (int *)&v14);
  }
  Hash = PCHashWriteStream::getHash(v9);
  PCHash128::operator+=((int *)&v15, (int *)Hash);
  *(_QWORD *)&result = PCHashWriteStream::setHash((__n128 *)v9, &v15).n128_u64[0];
  return result;
}

void sub_1B28FF1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'TXTextLayout::calcHashForState(uint64_t a1, const void *a2, OZRenderParams *a3, uint64_t **a4)
{
  return TXTextLayout::calcHashForState((PCString *)(a1 - 200), a2, a3, a4);
}

{
  return TXTextLayout::calcHashForState((PCString *)(a1 - 216), a2, a3, a4);
}

void TXTextLayout::calcHashForState(uint64_t a1, void *lpsrc, CMTime *a3, uint64_t **a4, int a5)
{
  int8x8_t *v10;
  int8x8_t *v11;
  uint64_t v12;
  uint64_t v13;
  OZScene **v14;
  double *v15;
  double v16;
  double *v17;
  double *v18;
  BOOL v19;
  uint64_t i;
  _OWORD *v21;
  uint64_t j;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t **v26;
  CMTimeValue value;
  OZScene *v28;
  _QWORD *Node;
  _QWORD *v30;
  _OWORD *v31;
  CMTime *v32;
  CMTime *v33;
  __n128 v34;
  unint64_t v35;
  OZScene **v36;
  int8x8_t *Hash;
  uint64_t v38;
  uint64_t k;
  int8x8_t *v40;
  PCString v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  CMTimeEpoch v45;
  __int128 v46;
  CMTimeEpoch v47;
  __n128 v48;
  CMTime v49;
  __int128 v50;
  CMTimeEpoch epoch;

  if (!v10)
    __cxa_bad_cast();
  v11 = v10;
  v50 = *(_OWORD *)&a3->value;
  epoch = a3->epoch;
  v12 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 216) + 104))(a1 + 216, &v50, 1, 1, 1);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 48))(lpsrc, v12);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
  v13 = *(unsigned int *)(a1 + 1224);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 56))(lpsrc, v13);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
  v49 = *a3;
  OZChannelObjectRootBase::calcHashForStateSelfOnly((OZChannelObjectRootBase *)(a1 + 256), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 520), (PCSerializerWriteStream *)lpsrc, &v49);
  v14 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v48, v14);
  v49 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 19448), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 19600), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 19752), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 22136), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 20720), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 20976), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 22288), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 22544), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 22800), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 23688), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 24880), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 52376), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 58880), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 59280), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 59560), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 59760), (PCSerializerWriteStream *)lpsrc, &v49);
  v49 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 61648), (PCSerializerWriteStream *)lpsrc, &v49);
  v15 = *(double **)(a1 + 19224);
  if (v15 != (double *)(a1 + 19232))
  {
    do
    {
      v16 = v15[5];
      (*(void (**)(void *, _QWORD))(*(_QWORD *)lpsrc + 64))(lpsrc, *((_QWORD *)v15 + 4));
      (*(void (**)(void *, double))(*(_QWORD *)lpsrc + 88))(lpsrc, v16);
      v17 = (double *)*((_QWORD *)v15 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(double **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (double *)*((_QWORD *)v15 + 2);
          v19 = *(_QWORD *)v18 == (_QWORD)v15;
          v15 = v18;
        }
        while (!v19);
      }
      v15 = v18;
    }
    while (v18 != (double *)(a1 + 19232));
  }
  v49 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 1032), (PCSerializerWriteStream *)lpsrc, &v49);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v48);
  v48 = *(__n128 *)PCHashWriteStream::getHash(v11)->i8;
  if (a5)
  {
    for (i = *(_QWORD *)(a1 + 1184); i != a1 + 1176; i = *(_QWORD *)(i + 8))
    {
      v21 = *(_OWORD **)(i + 16);
      v46 = *(_OWORD *)&a3->value;
      v47 = a3->epoch;
      if ((*(unsigned int (**)(_OWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v21 + 280))(v21, &v46, 0, 1, 1))
      {
        OZObjectManipulator::getHashForState(v21 + 3, lpsrc, (OZRenderParams *)a3, a4, &v49);
        PCHash128::operator+=((int *)&v48, (int *)&v49);
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1))
  {
    for (j = *(_QWORD *)(a1 + 1208); j != a1 + 1200; j = *(_QWORD *)(j + 8))
    {
      v23 = *(_QWORD *)(j + 16);
      v25 = *(_QWORD *)(v23 + 16);
      v24 = (_OWORD *)(v23 + 16);
      if ((*(unsigned int (**)(_OWORD *, _QWORD, uint64_t))(v25 + 24))(v24, 0, 1))
      {
        OZObjectManipulator::getHashForState(v24, lpsrc, (OZRenderParams *)a3, a4, &v49);
        PCHash128::operator+=((int *)&v48, (int *)&v49);
      }
    }
  }
  *(_QWORD *)&v49.timescale = 0;
  v49.epoch = 0;
  v49.value = (CMTimeValue)&v49.timescale;
  v26 = *(uint64_t ***)(a1 + 1168);
  if (v26)
  {
    OZScene::getImmediatelyReferencedNodes(v26, *(_DWORD *)(a1 + 280), (uint64_t **)&v49);
    value = v49.value;
    if ((CMTimeScale *)v49.value != &v49.timescale)
    {
      do
      {
        v28 = *(OZScene **)(a1 + 1168);
        if (v28)
        {
          Node = OZScene::getNode(v28, *(_DWORD *)(value + 28));
          v30 = Node;
          if (Node)
          {
            if (Node[120] != a1 + 200
              || (v45 = a3->epoch,
                  v44 = *(_OWORD *)&a3->value,
                  ((*(uint64_t (**)(_QWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(Node[2] + 104))(Node + 2, &v44, 0, 1, 1) & 1) != 0))
            {
              v31 = v30 + 2;
              if (!OZObjectManipulator::isInObjectList((uint64_t)v31, (uint64_t)a4))
              {
                OZObjectManipulator::getHashForState(v31, lpsrc, (OZRenderParams *)a3, a4, &v43);
                PCHash128::operator+=((int *)&v48, (int *)&v43);
              }
            }
          }
        }
        v32 = *(CMTime **)(value + 8);
        if (v32)
        {
          do
          {
            v33 = v32;
            v32 = (CMTime *)v32->value;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = *(CMTime **)(value + 16);
            v19 = v33->value == value;
            value = (CMTimeValue)v33;
          }
          while (!v19);
        }
        value = (CMTimeValue)v33;
      }
      while (v33 != (CMTime *)&v49.timescale);
    }
  }
  v34 = PCHashWriteStream::setHash((__n128 *)v11, &v48);
  (*(void (**)(void *, __n128))(*(_QWORD *)lpsrc + 40))(lpsrc, v34);
  v35 = *(_QWORD *)(a1 + 208);
  v42 = xmmword_1B3054200;
  if (OZFactory::isKindOfClass(v35, (int32x4_t *)&v42))
  {
    v36 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v43, v36);
    TXChannelString::getString((PCString *)(a1 + 19048), &v41);
    (*(void (**)(void *, PCString *))(*(_QWORD *)lpsrc + 104))(lpsrc, &v41);
    PCString::~PCString(&v41);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v43);
  }
  else
  {
    TXChannelString::getString((PCString *)(a1 + 19048), (PCString *)&v43);
    (*(void (**)(void *, __int128 *))(*(_QWORD *)lpsrc + 104))(lpsrc, &v43);
    PCString::~PCString((PCString *)&v43);
  }
  (*(void (**)(void *, double))(*(_QWORD *)lpsrc + 88))(lpsrc, *(double *)(a1 + 19432));
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24272), MEMORY[0x1E0CA2E68], 0.0);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 88))(lpsrc);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24424), MEMORY[0x1E0CA2E68], 0.0);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 88))(lpsrc);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24576), MEMORY[0x1E0CA2E68], 0.0);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 88))(lpsrc);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24728), MEMORY[0x1E0CA2E68], 0.0);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 88))(lpsrc);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 61464), MEMORY[0x1E0CA2E68], 0.0);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 88))(lpsrc);
  Hash = PCHashWriteStream::getHash(v11);
  PCHash128::operator+=((int *)&v48, (int *)Hash);
  v38 = a1 + 19344;
  for (k = *(_QWORD *)(a1 + 19352); k != v38; k = *(_QWORD *)(k + 8))
  {
    OZObjectManipulator::getHashForState((_OWORD *)(*(_QWORD *)(k + 16) + 16), lpsrc, (OZRenderParams *)a3, a4, &v43);
    PCHash128::operator+=((int *)&v48, (int *)&v43);
  }
  v40 = PCHashWriteStream::getHash(v11);
  PCHash128::operator+=((int *)&v48, (int *)v40);
  PCHashWriteStream::setHash((__n128 *)v11, &v48);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v49, *(_QWORD **)&v49.timescale);
}

void sub_1B28FFA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,_QWORD *a26)
{
  PCString::~PCString(&a13);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4, int a5)
{
  TXTextLayout::calcHashForState(a1 - 200, a2, a3, a4, a5);
}

void TXTextLayout::getTextObjectWithIndex(TXTextLayout *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  OZScene **v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  _BYTE v10[8];

  v5 = (_QWORD *)((char *)this + 58824);
  v6 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v10, v6);
  if (a2 >= (unint64_t)((uint64_t)(v5[1] - *v5) >> 4))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v7 = *(_OWORD *)(*v5 + 16 * a2);
    *(_OWORD *)a3 = v7;
    if (*((_QWORD *)&v7 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v10);
}

uint64_t TXTextLayout::getDirectOffset(uint64_t a1, float32x2_t *a2, const OZRenderState *a3, _BYTE *a4, const LiCamera *a5, int a6, _BYTE *a7)
{
  char *StringPtr;
  OZScene *v12;
  OZScene **v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t **v18;
  uint64_t *v19;
  double v20;
  int i;
  TXTextObject *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  double *v29;
  TXTextObject *v30;
  double DropShadowDistance;
  TXTextObject *v32;
  double DropShadowAngle;
  __double2 v34;
  uint64_t j;
  double *v36;
  double v37;
  int v38;
  char v39;
  double v40;
  double v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v53;
  CMTime v55;
  CMTime v56;
  float64x2_t v57;
  uint64_t v58;
  float64x2_t v59;
  uint64_t v60;
  float64x2_t v61;
  uint64_t v62;
  float64x2_t v63;
  uint64_t v64;
  float64x2_t v65;
  uint64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  CMTime v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  CMTime v84;
  CMTime var0;
  _OWORD v86[3];
  float64x2_t v87;
  _OWORD v88[2];
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  OZRenderState v101;
  OZRenderState v102[5];
  char v103[8];
  double v104[16];
  _OWORD v105[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  if (a4)
    *a4 = 1;
  StringPtr = TXChannelString::getStringPtr((TXChannelString *)(a1 + 19048));
  if (!PCString::size((PCString *)StringPtr))
    return 0;
  v12 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 200) + 272))(a1 + 200);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v12, a5, v104);
  v13 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v103, v13);
  OZRenderParams::OZRenderParams((OZRenderParams *)v102);
  OZRenderParams::setState((OZRenderParams *)v102, a3);
  v102[0].var4 = 1;
  OZRenderState::OZRenderState(&v101, a3);
  v101.var4 = 0;
  v100 = 0x3FF0000000000000;
  v97 = 0x3FF0000000000000;
  v94 = 0x3FF0000000000000;
  v91 = 0x3FF0000000000000;
  v92 = 0u;
  v93 = 0u;
  v95 = 0u;
  v96 = 0u;
  v98 = 0u;
  v99 = 0u;
  (*(void (**)(uint64_t, uint64_t *, OZRenderState *))(*(_QWORD *)(a1 + 200) + 1256))(a1 + 200, &v91, &v101);
  v90 = 0;
  v89 = 0;
  memset(v88, 0, sizeof(v88));
  v87 = 0u;
  memset(v86, 0, sizeof(v86));
  var0 = (CMTime)a3->var0;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 59888), &var0, 0.0);
  v15 = v14;
  v84 = (CMTime)a3->var0;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 60360), &v84, 0.0);
  v17 = v16;
  v18 = (uint64_t **)(a1 + 58824);
  if (a7)
    *a7 = 0;
  v19 = *v18;
  v50 = v18[1];
  if (*v18 == v50)
  {
    v53 = 0;
  }
  else
  {
    v53 = 0;
    v20 = -1.0;
    while (2)
    {
      v83 = 0x3FF0000000000000;
      v80 = 0x3FF0000000000000;
      v77 = 0x3FF0000000000000;
      v74 = 0x3FF0000000000000;
      v75 = 0u;
      v76 = 0u;
      v78 = 0u;
      v79 = 0u;
      v81 = 0u;
      v82 = 0u;
      TXTextObject::getTransformMatrix(*v19, (uint64_t)&v74, (uint64_t)v102, 1, 0, 0, 1, v17, v15);
      for (i = 0; i != 4; ++i)
      {
        if (a6 == 5 || i == a6)
        {
          v22 = (TXTextObject *)*v19;
          v73 = (CMTime)a3->var0;
          if (TXTextObject::isAttributeEnabled(v22, i, &v73))
          {
            v23 = *(_QWORD *)(*v19 + 264);
            if (v23)
            {
              v25 = *(_QWORD *)(v23 + 8);
              v24 = *(std::__shared_weak_count **)(v23 + 16);
              v71 = v25;
              v72 = v24;
              if (v24)
              {
                p_shared_owners = (unint64_t *)&v24->__shared_owners_;
                do
                  v27 = __ldxr(p_shared_owners);
                while (__stxr(v27 + 1, p_shared_owners));
              }
            }
            else
            {
              v25 = 0;
              v71 = 0;
              v72 = 0;
            }
            v70 = 0uLL;
            v69 = 0uLL;
            v68 = 0uLL;
            v67 = 0uLL;
            TXTextObject::getFourCornerPointsInObjectSpaceForAttribute(*v19, v102, &v68, &v67, &v69, &v70, a6, 1, 0.0, 0.0, 0.0, 0.0, 1u, 0);
            v65 = v70;
            v66 = 0;
            v63 = v69;
            v64 = 0;
            v61 = v68;
            v62 = 0;
            v59 = v67;
            v60 = 0;
            PCMatrix44Tmpl<double>::transform<double>((double *)&v74, v65.f64, v65.f64);
            PCMatrix44Tmpl<double>::transform<double>((double *)&v74, v63.f64, v63.f64);
            PCMatrix44Tmpl<double>::transform<double>((double *)&v74, v61.f64, v61.f64);
            PCMatrix44Tmpl<double>::transform<double>((double *)&v74, v59.f64, v59.f64);
            PCMatrix44Tmpl<double>::transform<double>((double *)&v91, v65.f64, v65.f64);
            PCMatrix44Tmpl<double>::transform<double>((double *)&v91, v63.f64, v63.f64);
            PCMatrix44Tmpl<double>::transform<double>((double *)&v91, v61.f64, v61.f64);
            PCMatrix44Tmpl<double>::transform<double>((double *)&v91, v59.f64, v59.f64);
            v28 = 0;
            *(float64x2_t *)((char *)v88 + 8) = v65;
            *((_QWORD *)&v88[1] + 1) = v66;
            v87 = v63;
            *(_QWORD *)&v88[0] = v64;
            *(float64x2_t *)((char *)&v86[1] + 8) = v59;
            *((_QWORD *)&v86[2] + 1) = v60;
            *(_QWORD *)&v86[1] = v62;
            v86[0] = v61;
            v107 = 0u;
            v108 = 0u;
            v106 = 0u;
            v29 = (double *)v86;
            memset(v105, 0, sizeof(v105));
            do
            {
              v57 = 0uLL;
              v58 = 0;
              PCMatrix44Tmpl<double>::transform<double>((double *)&v91, v29, v57.f64);
              PCMatrix44Tmpl<double>::transform<double>(v104, v29, v57.f64);
              v105[v28++] = v57;
              v29 += 3;
            }
            while (v28 != 4);
            v108 = v105[0];
            if (i == 3 && OZChannel::getValueAsInt((OZChannel *)(v25 + 19528), MEMORY[0x1E0CA2E68], 0.0))
            {
              v30 = (TXTextObject *)*v19;
              v56 = (CMTime)a3->var0;
              DropShadowDistance = TXTextObject::getDropShadowDistance(v30, &v56);
              v32 = (TXTextObject *)*v19;
              v55 = (CMTime)a3->var0;
              DropShadowAngle = TXTextObject::getDropShadowAngle(v32, &v55);
              v34 = __sincos_stret(DropShadowAngle);
              for (j = 0; j != 5; ++j)
              {
                v36 = (double *)&v105[j];
                v37 = DropShadowDistance * v34.__sinval + *((double *)&v105[j] + 1);
                *v36 = DropShadowDistance * v34.__cosval + *(double *)&v105[j];
                v36[1] = v37;
              }
            }
            v57 = vcvtq_f64_f32(*a2);
            v38 = pointInPolygon(v57.f64, (uint64_t)v105, 5);
            v39 = v38;
            if (v38)
            {
              std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v89, v19);
              if (a7)
                *a7 = 1;
              v53 = *(_DWORD *)(*v19 + 388);
              v51 = v53;
            }
            else
            {
              v40 = hypot((*(double *)v105 + *(double *)&v106) * 0.5 - a2->f32[0], (*((double *)v105 + 1) + *((double *)&v106 + 1)) * 0.5 - a2->f32[1]);
              v41 = v40;
              if (v20 < 0.0 || v40 < v20)
              {
                std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v89, v19);
                v53 = *(_DWORD *)(*v19 + 736);
                v20 = v41;
              }
            }
            v42 = v72;
            if (v72)
            {
              v43 = (unint64_t *)&v72->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            if ((v39 & 1) != 0)
            {
              v45 = v51;
              goto LABEL_44;
            }
          }
        }
      }
      v19 += 2;
      if (v19 != v50)
        continue;
      break;
    }
  }
  v45 = v53;
LABEL_44:
  v46 = v90;
  if (v90)
  {
    v47 = (unint64_t *)&v90->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)v102);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v103);
  return v45;
}

void sub_1B2900258(_Unwind_Exception *a1)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D0]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x468]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&STACK[0x9F8]);
  _Unwind_Resume(a1);
}

void TXTextLayout::getCursorOrigin(TXTextLayout *this, double *a2, double *a3)
{
  OZChannel *v6;
  CMTime *v7;
  float Size;
  double v9;
  double v10;
  double v11;
  double v12;
  int AlignmentAtCursor;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  int ValueAsInt;
  OZChannel *v19;
  double v20;
  double v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  CMTime v25;
  TXTextStyle *v26;
  std::__shared_weak_count *v27;

  v6 = (OZChannel *)((char *)this + 20464);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0)
    && (v7 = (CMTime *)MEMORY[0x1E0CA2E68], OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0) != 2))
  {
    TXTextLayout::getStyleAtCharOffset((uint64_t)this, 0, &v26);
    v25 = *v7;
    Size = TXTextStyle::getSize((OZChannel *)v26, &v25, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
    v10 = v9;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0);
    v12 = v10 - v11;
    AlignmentAtCursor = (int)TXTextLayout::getAlignmentAtCursor(this);
    if (AlignmentAtCursor == 1)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0);
      v15 = v12 * 0.5 + v16;
    }
    else if (AlignmentAtCursor == 2)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0);
      v15 = v12 + v14;
    }
    else
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0);
    }
    *a2 = v15;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0))
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
      *(_QWORD *)a2 = v17;
    }
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0);
    v19 = (OZChannel *)((char *)this + 24576);
    if (ValueAsInt)
    {
      OZChannel::getValueAsDouble(v19, MEMORY[0x1E0CA2E68], 0.0);
    }
    else
    {
      OZChannel::getValueAsDouble(v19, MEMORY[0x1E0CA2E68], 0.0);
      v20 = v21 - Size;
    }
    *a3 = v20;
    v22 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  else
  {
    *a2 = 0.0;
    *a3 = 0.0;
  }
}

void sub_1B2900514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<TXTextObject>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void TXTextLayout::getVisibleCharacterRange(TXTextLayout *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  OZScene **v6;
  TXTextObject **v7;
  TXTextObject **v8;
  double FaceOpacity;
  int v10;
  int v11;
  double v12;
  TXTextObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _BYTE v18[8];

  v5 = (char *)this + 58824;
  v6 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v18, v6);
  *(_QWORD *)a3 = 0;
  v7 = *(TXTextObject ***)v5;
  v8 = (TXTextObject **)*((_QWORD *)v5 + 1);
  if (v7 == v8)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    while (1)
    {
      FaceOpacity = TXTextObject::getFaceOpacity(*v7, a2);
      if (FaceOpacity <= -0.0000001 || FaceOpacity >= 0.0000001)
        break;
      v7 += 2;
      if (v7 == v8)
        goto LABEL_16;
    }
    v11 = *((_DWORD *)*v7 + 184);
    v10 = *((_DWORD *)*v7 + 185);
    *(_DWORD *)a3 = v11;
    *(_DWORD *)(a3 + 4) = v10;
  }
  for (; v7 != v8; *(_DWORD *)(a3 + 4) = v17 - v11)
  {
    v12 = TXTextObject::getFaceOpacity(*v7, a2);
    if (v12 > -0.0000001 && v12 < 0.0000001)
      break;
    v13 = *v7;
    v7 += 2;
    v14 = *((_DWORD *)v13 + 184);
    v15 = *((_DWORD *)v13 + 185);
    v16 = v10 + v11;
    if (v11 >= v14)
      v11 = v14;
    v17 = v15 + v14;
    if (v16 > v17)
      v17 = v16;
    v10 = v17 - v11;
    *(_DWORD *)a3 = v11;
  }
LABEL_16:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v18);
}

void sub_1B29006C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t NumLinesInParagraphs(TXTextLayout *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = (uint64_t *)*((_QWORD *)a1 + 2378);
  v2 = *((_QWORD *)a1 + 2379) - (_QWORD)v1;
  if ((v2 & 0x7FFFFFFF8) == 0)
    return 0;
  LODWORD(result) = 0;
  v4 = (unint64_t)v2 >> 3;
  v5 = v2 >> 3;
  v6 = ((unint64_t)v2 >> 3);
  v7 = (v4 - 1);
  do
  {
    if (v5 <= v7)
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    v8 = *v1++;
    result = (*(_DWORD *)(v8 + 876) + result);
    --v6;
  }
  while (v6);
  return result;
}

uint64_t TXTextLayout::shouldUseBinarySearchForScalingToBothMargins(TXTextLayout *this)
{
  void **HostApplicationDelegate;

  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  return OZHostApplicationDelegateHandler::wantsToUseBinarySearchForScalingToBothMargins(HostApplicationDelegate);
}

void TXTextLayout::scaleToBothMargins(TXTextLayout *this, CMTime *a2)
{
  if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 1144))(this))
    TXTextLayout::shrinkToBothMarginsBinary(this, a2);
  else
    TXTextLayout::shrinkToBothMarginsLinear(this, a2);
}

void TXTextLayout::shrinkToBothMarginsBinary(TXTextLayout *this, CMTime *a2)
{
  int32x4_t v4;
  double v5;
  double v6;
  int v7;
  double v8;
  char v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double InitialValue;
  int isBiggerThanMargins;
  double v16;
  double v17;
  int v18;
  double v19;
  _BOOL4 v20;
  __int128 v21;
  int32x4_t v22;

  TXTextLayout::calcMarginScaleHash(this, a2);
  v4 = *((int32x4_t *)this + 3852);
  if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL))
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v22, v4)))) & 1) != 0)
  {
    v5 = TXTextLayout::computeMarginWidth(this);
    v6 = TXTextLayout::computeMarginHeight(this);
    v7 = 0;
    v8 = *((double *)this + 7971);
    v9 = 1;
    v10 = -1.0;
    v11 = 0.01;
    v12 = 8;
    v13 = 1.0;
    do
    {
      InitialValue = OZChannel::getInitialValue((OZChannel *)((char *)this + 61464));
      isBiggerThanMargins = TXTextLayout::isBiggerThanMargins(this, v5, v6, a2);
      if (v10 >= InitialValue)
        v16 = v10;
      else
        v16 = InitialValue;
      if (!isBiggerThanMargins)
        v10 = v16;
      if ((v9 & 1) != 0)
      {
        v17 = 1.0;
      }
      else
      {
        v18 = isBiggerThanMargins;
        v19 = OZChannel::getInitialValue((OZChannel *)((char *)this + 61464));
        if (v18)
          v13 = v19;
        else
          v11 = v19;
        v17 = (v13 + v11) * 0.5;
      }
      v20 = v12 == 1;
      if (v20 && v10 > 0.0)
        v17 = v10;
      OZChannel::setInitialValue((OZChannel *)((char *)this + 61464), v17, 1);
      TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
      TXTextLayout::doLayoutForParagraphs(this, v5, a2);
      v7 |= v20;
      if ((v7 & 1) != 0 && v8 < 1.0)
        TXTextLayout::shrinkDownToOneLine(this, v5, a2);
      v9 = 0;
      --v12;
    }
    while (v12);
    TXTextLayout::calcMarginScaleHash(this, a2);
    *((_OWORD *)this + 3852) = v21;
  }
}

void TXTextLayout::shrinkToBothMarginsLinear(TXTextLayout *this, const CMTime *a2)
{
  CMTime *v2;
  int32x4_t v4;
  double *v5;
  void **HostApplicationDelegate;
  double v7;
  double v8;
  int v9;
  int v10;
  const CMTime *v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  const OZRenderState *v22;
  unsigned int v23;
  double v24;
  double v25;
  uint64_t *v26;
  uint64_t *v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  double v35;
  double v36;
  double *TypographicBounds;
  double v38;
  double v39;
  double LayoutRealPos;
  _BOOL4 v41;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  double v49;
  int ValueAsInt;
  BOOL v51;
  OZChannel *v52;
  OZChannel *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  char v58;
  int v59;
  int v60;
  int isPunctuationSeparatedByLineBreaks;
  double v62;
  BOOL v63;
  int v65;
  double v66;
  double InitialValue;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  CMTime *v73;
  OZChannel *v74;
  unsigned int NumberOfLinesToLimitTextTo;
  char v76;
  int v77;
  OZChannel *v78;
  int v79;
  CMTime v80;
  CMTime v81;
  TXTextObject *v82[2];
  double v83;
  CMTime v84;
  int32x4_t v85;

  v2 = (CMTime *)a2;
  TXTextLayout::calcMarginScaleHash(this, a2);
  v4 = *((int32x4_t *)this + 3852);
  if (*(_QWORD *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL))
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v85, v4)))) & 1) == 0)
  {
    return;
  }
  v5 = (double *)((char *)this + 63768);
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  v76 = OZHostApplicationDelegateHandler::wantsToLimitLinesOfText(HostApplicationDelegate);
  NumberOfLinesToLimitTextTo = OZHostApplicationDelegateHandler::getNumberOfLinesToLimitTextTo(HostApplicationDelegate);
  v84 = *v2;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), &v84, 0.0);
  v8 = v7;
  v9 = 0;
  v10 = 0;
  v78 = (OZChannel *)((char *)this + 20720);
  v74 = (OZChannel *)((char *)this + 61464);
  v77 = 1;
  v11 = (const CMTime *)MEMORY[0x1E0CA2E68];
  v73 = v2;
  while (1)
  {
    v12 = v9;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), v11, 0.0);
    v14 = v13;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), v11, 0.0);
    v16 = v15;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v11, 0.0) == 4
      || OZChannel::getValueAsInt(v78, v11, 0.0))
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), v11, 0.0);
      v18 = v17;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), v11, 0.0);
      v20 = vabdd_f64(v18, v19);
    }
    else
    {
      v20 = vabdd_f64(v14, v16);
    }
    v79 = v12;
    if (*(_BYTE *)(theApp + 82))
    {
      TXTextLayout::_getImageBoundsFromParagraphs(this, v2, (uint64_t)v82);
      v21 = v83;
      v23 = 0;
      v24 = v21 + TXTextLayout::_getDiffBetweenTopImageBoundAndTopTypographicBound(this, v22);
    }
    else
    {
      v25 = v5[79];
      v26 = (uint64_t *)*((_QWORD *)this + 2378);
      v27 = (uint64_t *)*((_QWORD *)this + 2379);
      if (v26 == v27)
      {
        v23 = 0;
        v28 = 0.0;
        v2 = v73;
      }
      else
      {
        v23 = 0;
        v28 = 0.0;
        do
        {
          v29 = *v26;
          v81 = v84;
          OZChannel::getValueAsDouble((OZChannel *)(v29 + 680), &v81, 0.0);
          v31 = v30;
          v32 = (*(double (**)(TXTextLayout *, CMTime *))(*(_QWORD *)this + 712))(this, &v84);
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v11, 0.0) == 4)
          {
            v33 = 0.0;
            if (*(_QWORD *)(v29 + 856) < *(_DWORD *)(v29 + 864) + *(_QWORD *)(v29 + 856))
            {
              v34 = *(_QWORD *)(v29 + 856);
              v35 = 0.0;
              v36 = 0.0;
              do
              {
                TXHelperFunctions::GetTextObjectContainingCharIndex(this, (TXTextLayout *)v34, 1, 0, v82);
                TypographicBounds = (double *)TXTextObject::getTypographicBounds(v82[0]);
                v38 = *TypographicBounds;
                v39 = TypographicBounds[2];
                LayoutRealPos = TXTextObject::getLayoutRealPos(v82[0]);
                v41 = v34 == 0;
                if (v36 > LayoutRealPos || v34 == 0)
                  v36 = LayoutRealPos;
                if (v35 < v38 + v39 + LayoutRealPos)
                  v41 = 1;
                if (v41)
                  v35 = v38 + v39 + LayoutRealPos;
                v43 = (std::__shared_weak_count *)v82[1];
                if (v82[1])
                {
                  v44 = (unint64_t *)((char *)v82[1] + 8);
                  do
                    v45 = __ldaxr(v44);
                  while (__stlxr(v45 - 1, v44));
                  if (!v45)
                  {
                    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                    std::__shared_weak_count::__release_weak(v43);
                  }
                }
                ++v34;
              }
              while (v34 < (*(_DWORD *)(v29 + 864) + *(_DWORD *)(v29 + 856)));
              v33 = v35 - v36;
            }
            v28 = v28 + v33;
          }
          else
          {
            v46 = *(unsigned int *)(v29 + 876);
            v23 += v46;
            if ((_DWORD)v46)
            {
              v47 = (double *)(*(_QWORD *)(v29 + 888) + 8);
              do
              {
                v28 = v28 + v25 + (v8 + v31) * v32 + *(v47 - 1) - *v47;
                v47 += 8;
                --v46;
              }
              while (v46);
            }
          }
          ++v26;
        }
        while (v26 != v27);
        v26 = (uint64_t *)*((_QWORD *)this + 2379);
        v5 = (double *)((char *)this + 63768);
        v2 = v73;
      }
      v48 = *(v26 - 1);
      v80 = *v11;
      OZChannel::getValueAsDouble((OZChannel *)(v48 + 680), &v80, 0.0);
      v24 = v28
          - (v25
           + v49 * (*(double (**)(TXTextLayout *, CMTime *))(*(_QWORD *)this + 712))(this, &v84));
    }
    ValueAsInt = OZChannel::getValueAsInt(v78, v11, 0.0);
    v51 = ValueAsInt == 0;
    v52 = ValueAsInt ? (OZChannel *)((char *)this + 24576) : (OZChannel *)((char *)this + 24424);
    v53 = v51 ? (OZChannel *)((char *)this + 24272) : (OZChannel *)((char *)this + 24728);
    OZChannel::getValueAsDouble(v52, v11, 0.0);
    v55 = v54;
    OZChannel::getValueAsDouble(v53, v11, 0.0);
    v57 = v55 - v56;
    v58 = v23 > NumberOfLinesToLimitTextTo ? v76 : 0;
    v59 = TXTextLayout::linesFitInParagraphWidth(this, v57);
    v60 = TXTextLayout::wordsFitInParagraphWidth((uint64_t **)this, v57);
    isPunctuationSeparatedByLineBreaks = TXTextLayout::isPunctuationSeparatedByLineBreaks((uint64_t **)this);
    v62 = *v5;
    v63 = v24 > v20 || v59 == 0;
    if (!v63 && (v58 & 1) == 0 && v60 && isPunctuationSeparatedByLineBreaks == 0)
      break;
    if (((v77 | v10) & 1) != 0 && OZChannel::getInitialValue(v74) >= 0.02)
    {
      v10 = 1;
      v66 = -0.01;
      v65 = v79;
LABEL_65:
      InitialValue = OZChannel::getInitialValue(v74);
      OZChannel::setInitialValue(v74, InitialValue + v66, 1);
      TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
      TXTextLayout::doLayoutForParagraphs(this, v57, v2);
      v77 = 0;
      v9 = v65;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      if ((v79 & 1) == 0)
        goto LABEL_66;
    }
  }
  if (((v77 | v79) & 1) != 0 && OZChannel::getInitialValue(v74) < 1.0)
  {
    v65 = 1;
    v66 = 0.01;
    goto LABEL_65;
  }
LABEL_66:
  if (v62 < 1.0
    && (int)NumLinesInParagraphs(this) >= 2
    && ((*((_QWORD *)this + 2379) - *((_QWORD *)this + 2378)) & 0x7FFFFFFF8) == 8)
  {
    v68 = OZChannel::getInitialValue(v74);
    do
    {
      v69 = OZChannel::getInitialValue(v74);
      v70 = v69 + -0.05;
      v71 = *v5;
      if (v69 + -0.05 >= *v5)
        v72 = v69 + -0.05;
      else
        v72 = v68;
      OZChannel::setInitialValue(v74, v72, 1);
      TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
      TXTextLayout::doLayoutForParagraphs(this, v57, v2);
    }
    while (NumLinesInParagraphs(this) != 1 && v70 >= v71);
  }
  TXTextLayout::calcMarginScaleHash(this, v2);
  *((_OWORD *)this + 3852) = *(_OWORD *)v82;
}

void sub_1B2900FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void TXTextLayout::calcMarginScaleHash(TXTextLayout *this, const CMTime *a2)
{
  uint64_t v2;
  CMTime *v3;
  CMTime *v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  _QWORD *v8;
  _QWORD *i;
  std::__shared_weak_count *v10;
  OZChannel *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  float Size;
  PCString *var8;
  std::__shared_weak_count *var9;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  CMTime v24;
  OZChannel *v25;
  std::__shared_weak_count *v26;
  int8x8_t v27[521];

  v2 = MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v5 = v2;
  v7 = v6;
  v27[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v27);
  v8 = (_QWORD *)(v5 + 19344);
  for (i = *(_QWORD **)(v5 + 19352); i != v8; i = (_QWORD *)i[1])
  {
    v11 = (OZChannel *)i[2];
    v10 = (std::__shared_weak_count *)i[3];
    v25 = v11;
    v26 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v24 = *v4;
    Size = TXTextStyle::getSize(v11, &v24, 0.0);
    PCHashWriteStream::writeValue(v27, Size);
    var8 = (PCString *)v11[3].var8;
    var9 = (std::__shared_weak_count *)v11[3].var9;
    if (var9)
    {
      v17 = (unint64_t *)&var9->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    PCHashWriteStream::writeValue(v27, var8 + 1);
    if (var9)
    {
      v19 = (unint64_t *)&var9->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))var9->__on_zero_shared)(var9);
        std::__shared_weak_count::__release_weak(var9);
      }
    }
    v21 = v26;
    if (v26)
    {
      v22 = (unint64_t *)&v26->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  *v7 = *(_OWORD *)PCHashWriteStream::getHash(v27)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v27);
}

void sub_1B29011AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)va);
  _Unwind_Resume(a1);
}

double TXTextLayout::computeMarginWidth(TXTextLayout *this)
{
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0))
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], 0.0);
    v3 = v2;
    v4 = 24728;
  }
  else
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
    v3 = v5;
    v4 = 24272;
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + v4), MEMORY[0x1E0CA2E68], 0.0);
  return v3 - v6;
}

double TXTextLayout::computeMarginHeight(TXTextLayout *this)
{
  double v2;
  double v3;
  OZChannel *v4;
  double v5;
  double v6;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 4
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E0CA2E68], 0.0))
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E0CA2E68], 0.0);
    v3 = v2;
    v4 = (OZChannel *)((char *)this + 24424);
  }
  else
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E0CA2E68], 0.0);
    v3 = v5;
    v4 = (OZChannel *)((char *)this + 24576);
  }
  OZChannel::getValueAsDouble(v4, MEMORY[0x1E0CA2E68], 0.0);
  return vabdd_f64(v3, v6);
}

uint64_t TXTextLayout::isBiggerThanMargins(TXTextLayout *this, double a2, double a3, const CMTime *a4)
{
  double v7;

  TXTextLayout::computeTotalHeight(this, a4);
  if (v7 <= a3
    && TXTextLayout::linesFitInParagraphWidth(this, a2)
    && (TXTextLayout::isTooManyLines(this) & 1) == 0
    && TXTextLayout::wordsFitInParagraphWidth((uint64_t **)this, a2))
  {
    return TXTextLayout::isPunctuationSeparatedByLineBreaks((uint64_t **)this);
  }
  else
  {
    return 1;
  }
}

uint64_t TXTextLayout::shrinkDownToOneLine(TXTextLayout *this, double a2, CMTime *a3)
{
  uint64_t result;
  double InitialValue;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;

  result = NumLinesInParagraphs(this);
  if ((int)result >= 2 && ((*((_QWORD *)this + 2379) - *((_QWORD *)this + 2378)) & 0x7FFFFFFF8) == 8)
  {
    InitialValue = OZChannel::getInitialValue((OZChannel *)((char *)this + 61464));
    v8 = (double *)((char *)this + 63768);
    do
    {
      v9 = OZChannel::getInitialValue((OZChannel *)((char *)this + 61464));
      v10 = v9 + -0.05;
      v11 = *v8;
      if (v9 + -0.05 >= *v8)
        v12 = v9 + -0.05;
      else
        v12 = InitialValue;
      OZChannel::setInitialValue((OZChannel *)((char *)this + 61464), v12, 1);
      TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
      TXTextLayout::doLayoutForParagraphs(this, a2, a3);
      result = NumLinesInParagraphs(this);
    }
    while ((_DWORD)result != 1 && v10 >= v11);
  }
  return result;
}

void TXTextLayout::computeTotalHeight(TXTextLayout *this, const CMTime *a2)
{
  double v4;
  double v5;
  const OZRenderState *v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  double v10;
  const CMTime *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  double v18;
  double v19;
  double *TypographicBounds;
  double v21;
  double v22;
  double LayoutRealPos;
  _BOOL4 v24;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  CMTime v38;
  CMTime v39;
  TXTextObject *v40;
  std::__shared_weak_count *v41;

  v4 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), a2, 0.0);
  if (*(_BYTE *)(theApp + 82))
  {
    TXTextLayout::_getImageBoundsFromParagraphs(this, a2, (uint64_t)&v40);
    TXTextLayout::_getDiffBetweenTopImageBoundAndTopTypographicBound(this, v6);
  }
  else
  {
    v7 = *((double *)this + 8050);
    v8 = (uint64_t *)*((_QWORD *)this + 2378);
    v9 = (uint64_t *)*((_QWORD *)this + 2379);
    if (v8 != v9)
    {
      v10 = v5;
      v11 = (const CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        v12 = *v8;
        v39 = *a2;
        OZChannel::getValueAsDouble((OZChannel *)(v12 + 680), &v39, 0.0);
        v14 = v13;
        v15 = (*(double (**)(TXTextLayout *, const CMTime *))(*(_QWORD *)this + 712))(this, a2);
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v11, 0.0) == 4)
        {
          v16 = 0.0;
          if (*(_QWORD *)(v12 + 856) < *(_DWORD *)(v12 + 864) + *(_QWORD *)(v12 + 856))
          {
            v17 = *(_QWORD *)(v12 + 856);
            v18 = 0.0;
            v19 = 0.0;
            do
            {
              TXHelperFunctions::GetTextObjectContainingCharIndex(this, (TXTextLayout *)v17, 1, 0, &v40);
              TypographicBounds = (double *)TXTextObject::getTypographicBounds(v40);
              v21 = *TypographicBounds;
              v22 = TypographicBounds[2];
              LayoutRealPos = TXTextObject::getLayoutRealPos(v40);
              v24 = v17 == 0;
              if (v19 > LayoutRealPos || v17 == 0)
                v19 = LayoutRealPos;
              if (v18 < v21 + v22 + LayoutRealPos)
                v24 = 1;
              if (v24)
                v18 = v21 + v22 + LayoutRealPos;
              v26 = v41;
              if (v41)
              {
                p_shared_owners = (unint64_t *)&v41->__shared_owners_;
                do
                  v28 = __ldaxr(p_shared_owners);
                while (__stlxr(v28 - 1, p_shared_owners));
                if (!v28)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
              ++v17;
            }
            while (v17 < (*(_DWORD *)(v12 + 864) + *(_DWORD *)(v12 + 856)));
            v16 = v18 - v19;
          }
          v4 = v4 + v16;
        }
        else
        {
          v29 = *(unsigned int *)(v12 + 876);
          if ((_DWORD)v29)
          {
            v30 = 0;
            v31 = v7 + (v10 + v14) * v15;
            do
            {
              v32 = *(double *)(*(_QWORD *)(v12 + 888) + (v30 << 6))
                  - *(double *)(*(_QWORD *)(v12 + 888) + (v30 << 6) + 8);
              if (v32 == 0.0 && !*(_QWORD *)(v12 + 864))
              {
                v33 = *(_QWORD *)(v12 + 856);
                if (v33)
                {
                  TXHelperFunctions::GetTextObjectContainingCharIndex(this, (TXTextLayout *)(v33 - 1), 1, 0, &v40);
                  if (v40)
                    v32 = *(double *)(TXTextObject::getTypographicBounds(v40) + 24);
                  v34 = v41;
                  if (v41)
                  {
                    v35 = (unint64_t *)&v41->__shared_owners_;
                    do
                      v36 = __ldaxr(v35);
                    while (__stlxr(v36 - 1, v35));
                    if (!v36)
                    {
                      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                      std::__shared_weak_count::__release_weak(v34);
                    }
                  }
                }
              }
              v4 = v4 + v31 + v32;
              ++v30;
            }
            while (v30 != v29);
          }
        }
        ++v8;
      }
      while (v8 != v9);
      v8 = (uint64_t *)*((_QWORD *)this + 2379);
    }
    v37 = *(v8 - 1);
    v38 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble((OZChannel *)(v37 + 680), &v38, 0.0);
    (*(double (**)(TXTextLayout *, const CMTime *))(*(_QWORD *)this + 712))(this, a2);
  }
}

void sub_1B29017CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::computeNumberOfLines(TXTextLayout *this)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 4)
    return 1;
  v3 = (uint64_t *)*((_QWORD *)this + 2378);
  v4 = (uint64_t *)*((_QWORD *)this + 2379);
  if (v3 == v4)
    return 0;
  LODWORD(result) = 0;
  do
  {
    v5 = *v3++;
    result = (*(_DWORD *)(v5 + 876) + result);
  }
  while (v3 != v4);
  return result;
}

uint64_t TXTextLayout::isTooManyLines(TXTextLayout *this)
{
  void **HostApplicationDelegate;
  uint64_t result;
  unsigned int NumberOfLinesToLimitTextTo;

  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  result = OZHostApplicationDelegateHandler::wantsToLimitLinesOfText(HostApplicationDelegate);
  if ((_DWORD)result)
  {
    NumberOfLinesToLimitTextTo = OZHostApplicationDelegateHandler::getNumberOfLinesToLimitTextTo(HostApplicationDelegate);
    return TXTextLayout::computeNumberOfLines(this) > NumberOfLinesToLimitTextTo;
  }
  return result;
}

void TXTextLayout::updateShrinkToMarginsChannel(TXTextLayout *this)
{
  const PCString *v1;
  PCString v2;
  int v3[4];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v3 = xmmword_1B3054350;
  v4 = 3;
  v1 = (const PCString *)((char *)this + 61208);
  OZChannelEnum::setTags((TXTextLayout *)((char *)this + 61208), (char *)v3, 5);
  PCURL::PCURL((PCURL *)&v2, CFSTR("Text Layout Scale To Margins Proportional Enum"));
  OZChannelEnum::setStrings(v1, &v2, 1);
  PCString::~PCString(&v2);
}

void sub_1B290196C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::didReplaceString(TXTextLayout *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 232))((char *)this + 200);
}

double TXTextLayout::getSeqPosScaleForChar(TXTextLayout *this, unsigned int a2, CMTime *a3)
{
  float Size;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CMTime v9;
  TXTextStyle *v10;
  std::__shared_weak_count *v11;

  TXTextLayout::getStyleAtCharOffset((uint64_t)this, a2, &v10);
  v9 = *a3;
  Size = TXTextStyle::getSize((OZChannel *)v10, &v9, 0.0);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return Size / 100.0;
}

void sub_1B2901A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getComposedCharacterIndex(TXTextLayout *this, unsigned int a2)
{
  return *((unsigned int *)TXTextLayout::getComposedCharacter(this, a2) + 7);
}

uint64_t TXTextLayout::getComposedCharacterIndexWithoutSpaces(TXTextLayout *this, unsigned int a2)
{
  return *((unsigned int *)TXTextLayout::getComposedCharacter(this, a2) + 9);
}

uint64_t TXTextLayout::getWordIndex(TXTextLayout *this, int a2)
{
  OZScene **v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  _BYTE v12[8];

  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v12, v4);
  v5 = *((_QWORD *)this + 7623);
  if (!v5)
    goto LABEL_11;
  v6 = (_DWORD *)((char *)this + 60984);
  do
  {
    v7 = *(_DWORD *)(v5 + 28);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = (_DWORD *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != (_DWORD *)((char *)this + 60984) && v6[7] <= a2)
    v10 = v6[8];
  else
LABEL_11:
    v10 = 0;
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v12);
  return v10;
}

uint64_t TXTextLayout::getLineIndex(TXTextLayout *this, int a2)
{
  unint64_t v3;
  uint64_t v4;
  char *StringPtr;
  unsigned int v6;
  BOOL v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v3 = *((unsigned int *)this + 13053);
  if ((int)v3 < 1)
    v4 = 0;
  else
    v4 = *((_QWORD *)this + 6527);
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  v6 = PCString::size((PCString *)StringPtr);
  if (v6)
    v7 = a2 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  v9 = v6;
  v10 = 0;
  result = 0;
  v11 = v9 - 1;
  if (v11 >= a2 - 1)
    v11 = a2 - 1;
  v12 = v11 + 1;
  do
  {
    ++v10;
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = 1;
      do
      {
        if (v4 && *(_QWORD *)(v4 + 8 * v13) == v10)
          break;
        v14 = ++v13 < v3;
      }
      while (v3 != v13);
      result = result + v14;
    }
  }
  while (v10 != v12);
  return result;
}

uint64_t TXTextLayout::lineIndexToCharIndex(TXTextLayout *this, int a2)
{
  int v2;
  unint64_t *v3;
  unint64_t v5;
  unint64_t v6;

  v2 = *((_DWORD *)this + 13053);
  if (v2 >= 1 && (v3 = (unint64_t *)*((_QWORD *)this + 6527)) != 0)
  {
    v6 = 0;
    TXTextLayout::computeLineOffsets((PCString *)this, a2, v2 + 1, v3, &v6, &v5);
    return v6;
  }
  else if (a2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 0;
  }
}

uint64_t TXTextLayout::writeBody(TXTextLayout *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  double *v10;
  _BYTE *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *i;
  _DWORD *v19;
  TXTextLayout *v20;
  TXTextLayout *v21;
  TXTextLayout *v22;
  BOOL v23;

  v10 = (double *)((char *)this + 52256);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXLayoutScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 508);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, 1, *(unsigned __int8 *)v10);
  if (*(_BYTE *)v10)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 2, v10[1]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 3, v10[2]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 4, v10[3]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 5, v10[4]);
  }
  v11 = (char *)this + 61200;
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 509);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, 1, *((unsigned __int8 *)v10 + 1));
  if (*((_BYTE *)v10 + 1))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 2, v10[5]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 3, v10[6]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 4, v10[7]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 5, v10[8]);
  }
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 510);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, 1, *((unsigned __int8 *)v10 + 2));
  if (*((_BYTE *)v10 + 2))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 2, v10[9]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 3, v10[10]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 4, v10[11]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 5, v10[12]);
  }
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 511);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, 6, *v11);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 512);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, 7, *((unsigned __int8 *)this + 63760));
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v12 = (uint64_t *)*((_QWORD *)this + 2378);
  v13 = (uint64_t *)*((_QWORD *)this + 2379);
  while (v12 != v13)
  {
    v14 = *v12++;
    (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)v14 + 16))(v14, a2, 0);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, a2, 0, 1, a5);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  v15 = (_QWORD *)*((_QWORD *)this + 2419);
  if (v15 != (_QWORD *)((char *)this + 19344))
  {
    do
    {
      v16 = (_QWORD *)v15[2];
      v17 = v16[6];
      v16 += 6;
      (*(void (**)(_QWORD *, PCSerializerWriteStream *, _QWORD))(v17 + 16))(v16, a2, 0);
      (*(void (**)(_QWORD *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*v16 + 24))(v16, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v15 = (_QWORD *)v15[1];
    }
    while (v15 != (_QWORD *)((char *)this + 19344));
    if (!this)
      goto LABEL_14;
  }
  {
LABEL_14:
    for (i = (_QWORD *)*((_QWORD *)this + 2422); i != (_QWORD *)((char *)this + 19368); i = (_QWORD *)i[1])
    {
      v19 = (_DWORD *)i[2];
      if (v19[7] || *v11)
      {
        (*(void (**)(_QWORD, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)v19 + 16))(i[2], a2, 0);
        (*(void (**)(_DWORD *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      }
    }
    v20 = (TXTextLayout *)*((_QWORD *)this + 2403);
    if (v20 != (TXTextLayout *)((char *)this + 19232))
    {
      do
      {
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 513);
        (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, 9, *((_QWORD *)v20 + 4));
        (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 10, *((double *)v20 + 5));
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
        v21 = (TXTextLayout *)*((_QWORD *)v20 + 1);
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = *(TXTextLayout **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (TXTextLayout *)*((_QWORD *)v20 + 2);
            v23 = *(_QWORD *)v22 == (_QWORD)v20;
            v20 = v22;
          }
          while (!v23);
        }
        v20 = v22;
      }
      while (v22 != (TXTextLayout *)((char *)this + 19232));
    }
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZElement::writeBody((OZElement *)((char *)this + 200), a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'TXTextLayout::writeBody(TXTextLayout *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return TXTextLayout::writeBody((TXTextLayout *)((char *)this - 200), a2, a3, a4, a5);
}

{
  return TXTextLayout::writeBody((TXTextLayout *)((char *)this - 248), a2, a3, a4, a5);
}

void TXTextLayout::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  OZFactory *v4;
  OZFactory *i;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  OZSceneNode::markFactoriesForSerialization(this + 25, a2);
  v4 = (OZFactory *)(this + 2418);
  for (i = this[2419]; i != v4; i = (OZFactory *)*((_QWORD *)i + 1))
  {
    v6 = *((_QWORD *)i + 2);
    v7 = (std::__shared_weak_count *)*((_QWORD *)i + 3);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)v6 + 192))(v6, a2, 0);
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B29021F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  TXTextLayout::markFactoriesForSerialization(this - 25, a2);
}

{
  TXTextLayout::markFactoriesForSerialization(this - 31, a2);
}

uint64_t TXTextLayout::parseBegin(TXTextLayout *this, PCSerializerReadStream *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;

  if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this)
    && (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
  {
    v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
    OZScene::decNum3DTextObjects(v4);
  }
  *((_BYTE *)this + 52363) = 1;
  v5 = (_QWORD *)*((_QWORD *)this + 2378);
  v6 = (_QWORD *)*((_QWORD *)this + 2379);
  if (v5 != v6)
  {
    do
    {
      if (*v5)
        (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
      ++v5;
    }
    while (v5 != v6);
    v5 = (_QWORD *)*((_QWORD *)this + 2378);
  }
  *((_QWORD *)this + 2379) = v5;
  OZElement::parseBegin((OZElement *)((char *)this + 200), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXLayoutScope);
  LODWORD(v7) = *((_DWORD *)a2 + 26);
  OZChannel::setValue((OZChannel *)((char *)this + 60520), MEMORY[0x1E0CA2E68], (double)v7, 0);
  return 1;
}

uint64_t `non-virtual thunk to'TXTextLayout::parseBegin(TXTextLayout *this, PCSerializerReadStream *a2)
{
  TXTextLayout::parseBegin((TXTextLayout *)((char *)this - 200), a2);
  return 1;
}

{
  TXTextLayout::parseBegin((TXTextLayout *)((char *)this - 248), a2);
  return 1;
}

uint64_t TXTextLayout::parseEnd(TXTextLayout *this, PCSerializerReadStream *a2)
{
  uint64_t v4;
  char *v5;
  int *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  TXParagraphStyle **v12;
  TXParagraphStyle **v13;
  TXParagraphStyle *v14;
  uint64_t LineSpacingChannel;
  OZChannelBase *v16;
  OZChannelBase *v17;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  (*(void (**)(TXTextLayout *))(*(_QWORD *)this + 1096))(this);
  if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this)
    && (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
  {
    v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
    OZScene::incNum3DTextObjects(v4);
  }
  v5 = (char *)this + 200;
  OZElement::parseEnd((OZElement *)((char *)this + 200), a2);
  if (!*((_QWORD *)this + 2423))
  {
    v19 = *((_QWORD *)this + 2419);
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(std::__shared_weak_count **)(v19 + 24);
    v31 = v20;
    v32 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    if (v20)
    {
      v24 = operator new();
      v25 = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 216))(this);
      TXTextStyleRun::TXTextStyleRun(v24, &v31, 0, v25);
      v26 = operator new(0x18uLL);
      v26[1] = (char *)this + 19368;
      v26[2] = v24;
      v27 = *((_QWORD *)this + 2421);
      *v26 = v27;
      *(_QWORD *)(v27 + 8) = v26;
      *((_QWORD *)this + 2421) = v26;
      ++*((_QWORD *)this + 2423);
    }
    v28 = v32;
    if (v32)
    {
      v29 = (unint64_t *)&v32->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  v6 = (int *)((char *)this + 60512);
  v7 = *((_DWORD *)a2 + 26);
  if (v7 <= 2)
  {
    TXTextLayout::shiftKerningsToLeft((uint64_t **)this);
    v7 = *((_DWORD *)a2 + 26);
  }
  if (v7 <= 3
    && OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 1
    && !*v6)
  {
    v8 = 1;
  }
  else
  {
    v8 = 2;
  }
  *v6 = v8;
  v9 = *((_DWORD *)a2 + 26);
  if (v9 <= 5)
  {
    if (*((_DWORD *)a2 + 27) <= 6u)
      *((_BYTE *)this + 63801) = 1;
    if (v9 <= 2
      && (((*(uint64_t (**)(char *))(*(_QWORD *)v5 + 1600))((char *)this + 200) & 1) != 0
       || ((*(uint64_t (**)(char *))(*(_QWORD *)v5 + 1608))((char *)this + 200) & 1) != 0
       || ((*(uint64_t (**)(char *))(*(_QWORD *)v5 + 1624))((char *)this + 200) & 1) != 0
       || OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 2))
    {
      OZChannel::setValue((OZChannel *)((char *)this + 19904), MEMORY[0x1E0CA2E68], 1.0, 0);
    }
  }
  if ((*(unsigned int (**)(char *))(*(_QWORD *)v5 + 1864))((char *)this + 200)
    && ((*(uint64_t (**)(char *))(*(_QWORD *)v5 + 1888))((char *)this + 200) & 1) == 0)
  {
    OZChannel::setValue((OZChannel *)((char *)this + 19904), MEMORY[0x1E0CA2E68], 1.0, 0);
  }
  OZChannel::setDiscrete((OZChannel *)((char *)this + 52640), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 52792), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53240), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53528), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53680), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 54128), 0, 0);
  v10 = *((_DWORD *)a2 + 26);
  if (v10 < 3 || v10 == 3 && *((_DWORD *)a2 + 27) < 2u || !TXTextLayout::isPathNormalInitialized(this))
  {
    initializeNormalsForPath((TXTextLayout *)((char *)this + 52504));
    initializeNormalsForPath((TXTextLayout *)((char *)this + 53392));
  }
  v11 = *((_DWORD *)a2 + 26);
  if (v11 < 5 || v11 == 5 && *((_DWORD *)a2 + 27) <= 1u)
  {
    v12 = (TXParagraphStyle **)*((_QWORD *)this + 2378);
    v13 = (TXParagraphStyle **)*((_QWORD *)this + 2379);
    while (v12 != v13)
    {
      v14 = *v12++;
      LineSpacingChannel = TXParagraphStyle::getLineSpacingChannel(v14);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)LineSpacingChannel + 232))(LineSpacingChannel, (char *)this + 22136, 1);
      v16 = (OZChannelBase *)TXParagraphStyle::getLineSpacingChannel(v14);
      OZChannelBase::setID(v16, 0x194u);
      v17 = (OZChannelBase *)TXParagraphStyle::getLineSpacingChannel(v14);
      OZChannelBase::resetFlag(v17, 8, 0);
    }
    (*(void (**)(char *, _QWORD))(*((_QWORD *)this + 2767) + 280))((char *)this + 22136, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22136), 8, 0);
  }
  return 1;
}

void sub_1B2902754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL TXTextLayout::isPathNormalInitialized(TXTextLayout *this)
{
  OZChannel *v2;
  OZChannel *v3;
  OZChannel *v4;
  void **v5;
  unint64_t v6;
  unsigned int v7;
  double KeyframeNormal;
  double v9;
  double v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL8 v13;
  void *__p[3];
  void *v16[3];
  void *v17;
  _BYTE *v18;

  v2 = (OZChannel *)((char *)this + 52640);
  if (!(*(unsigned int (**)(char *))(*((_QWORD *)this + 6580) + 832))((char *)this + 52640))
    return 0;
  OZChannel::getKeyframes(v2, 0, &v17);
  v3 = (OZChannel *)((char *)this + 52792);
  OZChannel::getKeyframes((OZChannel *)((char *)this + 52792), 0, v16);
  v4 = (OZChannel *)((char *)this + 53240);
  OZChannel::getKeyframes(v4, 0, __p);
  v5 = (void **)v17;
  if (v18 == v17)
  {
    v13 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    do
    {
      KeyframeNormal = OZChannel::getKeyframeNormal(v2, v5[v6]);
      v9 = OZChannel::getKeyframeNormal(v3, *((void **)v16[0] + v6));
      v10 = OZChannel::getKeyframeNormal(v4, *((void **)__p[0] + v6));
      v11 = fabs(KeyframeNormal) < 0.0000001;
      if (fabs(v9) >= 0.0000001)
        v11 = 0;
      v12 = fabs(v10) < 0.0000001 && v11;
      if (!v12)
        break;
      v6 = v7;
      v5 = (void **)v17;
      ++v7;
    }
    while (v6 < (v18 - (_BYTE *)v17) >> 3);
    v13 = !v12;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  return v13;
}

void sub_1B2902900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'TXTextLayout::parseEnd(TXTextLayout *this, PCSerializerReadStream *a2)
{
  TXTextLayout::parseEnd((TXTextLayout *)((char *)this - 200), a2);
  return 1;
}

{
  TXTextLayout::parseEnd((TXTextLayout *)((char *)this - 248), a2);
  return 1;
}

uint64_t TXTextLayout::parseElement(TXTextLayout *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  TXParagraphStyle *v7;
  TXParagraphStyle **v8;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  void *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  OZObjectManipulator *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  TXParagraphStyle **v41;
  char *v42;
  char *v43;
  char *v44;
  TXParagraphStyle *v45;
  OZChannelBase *HeadingChannel;
  uint64_t v47;
  int v48;
  PCSerializer *v49;
  unint64_t *v50;
  PC_Sp_counted_base *v52;
  uint64_t v53;
  PC_Sp_counted_base *var0;
  std::__shared_weak_count *v55;
  PCSharedCount v56;
  std::__shared_weak_count *v57;
  OZChannelBase *v58;
  PCSharedCount v59;

  PCSharedCount::PCSharedCount(&v59);
  v58 = 0;
  OZElement::parseElement((OZElement *)((char *)this + 200), a2, a3);
  v6 = *((_DWORD *)a3 + 2);
  if (v6 <= 499)
  {
    if (v6 == 77)
    {
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)&v58);
      PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v59);
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v58 + 4);
      v18 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v58);
      if (v18)
      {
        if (v19)
        {
          v56.var0 = 0;
          v57 = 0;
          if (*((_BYTE *)this + 52363))
          {
            std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v56, (uint64_t *)(*((_QWORD *)this + 2419) + 16));
            var0 = v56.var0;
            v55 = v57;
            if (v57)
            {
              p_shared_owners = (unint64_t *)&v57->__shared_owners_;
              do
                v21 = __ldxr(p_shared_owners);
              while (__stxr(v21 + 1, p_shared_owners));
            }
            (*(void (**)(TXTextLayout *, PC_Sp_counted_base **))(*(_QWORD *)this + 272))(this, &var0);
            v22 = v55;
            if (v55)
            {
              v23 = (unint64_t *)&v55->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            TXTextLayout::clearStyleRuns(this);
            if (*((_QWORD *)this + 146))
            {
              OZStyle::unregisterAllMaterials((OZStyle *)v56.var0);
              if (v56.var0)
                v25 = (OZObjectManipulator *)((char *)v56.var0 + 16);
              else
                v25 = 0;
              OZScene::unregisterObject(*((OZScene **)this + 146), v25);
              OZScene::removeAllDependencies(*((OZScene **)this + 146), *((_DWORD *)v56.var0 + 24));
            }
            OZChannelBase::setID((OZChannelBase *)((char *)v56.var0 + 72), HIDWORD(v58));
            (*(void (**)(char *, PCSharedCount *, _QWORD))(*((_QWORD *)v56.var0 + 2) + 120))((char *)v56.var0 + 16, &v59, 0);
            OZChannelBase::updateIDGenerator((OZChannelBase *)HIDWORD(v58));
            OZStyle::assignUniqueIDsToAllMaterials((OZChannelBase *)v56.var0);
          }
          else
          {
            v47 = (*(uint64_t (**)(void *, PCSharedCount *, _QWORD))(*(_QWORD *)v19 + 168))(v19, &v59, HIDWORD(v58));
            std::shared_ptr<TXTextStyle>::reset[abi:ne180100]<TXTextStyle,void>(&v56, v47);
          }
          if (v56.var0)
          {
            v48 = *((unsigned __int8 *)this + 52363);
            if (*((_BYTE *)this + 52363))
            {
              RemoveAllMaterialsFromSequenceChannels((TXTextLayout *)((char *)this + 25032));
              TXTextLayout::clearStyleRuns(this);
              *((_BYTE *)this + 52363) = 0;
            }
            TXTextLayout::addStyle((uint64_t)this, (OZChannelBase **)&v56, 0);
            if (v56.var0)
              v49 = (PCSerializer *)((char *)v56.var0 + 48);
            else
              v49 = 0;
            PCSerializerReadStream::pushHandler(a2, v49);
            if (v48)
              RemoveAllMaterialsFromSequenceChannels((TXTextLayout *)((char *)this + 25032));
          }
          *((_BYTE *)this + 52363) = 0;
          v38 = v57;
          if (v57)
          {
            v50 = (unint64_t *)&v57->__shared_owners_;
            do
              v40 = __ldaxr(v50);
            while (__stlxr(v40 - 1, v50));
LABEL_88:
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
      }
    }
    else if (v6 == 110)
    {
      if (PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v59))
      {
        PCString::PCString((PCString *)&v56, "Kerning");
        v11 = PCString::compare((PCString *)&v59, (const PCString *)&v56);
        PCString::~PCString((PCString *)&v56);
        if (!v11)
        {
          var0 = 0;
          if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 114, (uint64_t)&var0))
          {
            v12 = (uint64_t)var0;
            v53 = *((int *)this + 14712);
            v56.var0 = (PC_Sp_counted_base *)&v53;
            v13 = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)this + 2403, &v53, (uint64_t)&std::piecewise_construct, (uint64_t **)&v56);
LABEL_28:
            v13[5] = v12;
          }
        }
      }
    }
  }
  else
  {
    switch(v6)
    {
      case 500:
        v7 = (TXParagraphStyle *)operator new();
        TXParagraphStyle::TXParagraphStyle(v7, this);
        v8 = (TXParagraphStyle **)*((_QWORD *)this + 2379);
        v9 = *((_QWORD *)this + 2380);
        if ((unint64_t)v8 >= v9)
        {
          v26 = *((_QWORD *)this + 2378);
          v27 = ((uint64_t)v8 - v26) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v28 = v9 - v26;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 19040, v30);
          else
            v31 = 0;
          v41 = (TXParagraphStyle **)&v31[8 * v27];
          v42 = &v31[8 * v30];
          *v41 = v7;
          v10 = v41 + 1;
          v43 = (char *)*((_QWORD *)this + 2379);
          v44 = (char *)*((_QWORD *)this + 2378);
          if (v43 != v44)
          {
            do
            {
              v45 = (TXParagraphStyle *)*((_QWORD *)v43 - 1);
              v43 -= 8;
              *--v41 = v45;
            }
            while (v43 != v44);
            v43 = (char *)*((_QWORD *)this + 2378);
          }
          *((_QWORD *)this + 2378) = v41;
          *((_QWORD *)this + 2379) = v10;
          *((_QWORD *)this + 2380) = v42;
          if (v43)
            operator delete(v43);
        }
        else
        {
          *v8 = v7;
          v10 = v8 + 1;
        }
        *((_QWORD *)this + 2379) = v10;
        LODWORD(v56.var0) = 0;
        if (PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 7, (uint64_t)&v56))
        {
          HeadingChannel = (OZChannelBase *)TXParagraphStyle::getHeadingChannel(v7);
          OZChannelBase::setID(HeadingChannel, v56.var0);
        }
        PCSerializerReadStream::pushHandler(a2, v7);
        goto LABEL_90;
      case 501:
        PCSharedCount::PCSharedCount(&v56);
        (*(void (**)(PCStreamElement *, PCSharedCount *))(*(_QWORD *)a3 + 16))(a3, &v56);
        TXTextLayout::setString(this, (const PCString *)&v56, 1);
        PCString::~PCString((PCString *)&v56);
        goto LABEL_90;
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 514:
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
        goto LABEL_90;
      case 508:
        PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)this + 52256);
        if (*((_BYTE *)this + 52256))
        {
          PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)this + 52264);
          PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 3, (uint64_t)this + 52272);
          PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 4, (uint64_t)this + 52280);
          v16 = 52288;
          goto LABEL_31;
        }
        goto LABEL_90;
      case 509:
        PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)this + 52257);
        if (*((_BYTE *)this + 52257))
        {
          PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)this + 52296);
          PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 3, (uint64_t)this + 52304);
          PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 4, (uint64_t)this + 52312);
          v16 = 52320;
          goto LABEL_31;
        }
        goto LABEL_90;
      case 510:
        PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)this + 52258);
        if (*((_BYTE *)this + 52258))
        {
          PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)this + 52328);
          PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 3, (uint64_t)this + 52336);
          PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 4, (uint64_t)this + 52344);
          v16 = 52352;
LABEL_31:
          PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 5, (uint64_t)this + v16);
        }
        goto LABEL_90;
      case 511:
        v14 = (char *)this + 61200;
        v15 = 6;
        goto LABEL_24;
      case 512:
        v14 = (char *)this + 63760;
        v15 = 7;
LABEL_24:
        PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, v15, (uint64_t)v14);
        goto LABEL_90;
      case 513:
        v53 = 0;
        var0 = 0;
        if (!PCSerializerReadStream::getAttributeAsInt64((uint64_t)a2, (uint64_t)a3, 9, (uint64_t)&var0)
          || !PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 10, (uint64_t)&v53))
        {
          goto LABEL_90;
        }
        v12 = v53;
        v52 = var0;
        v56.var0 = (PC_Sp_counted_base *)&v52;
        v13 = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)this + 2403, (uint64_t *)&v52, (uint64_t)&std::piecewise_construct, (uint64_t **)&v56);
        goto LABEL_28;
      case 520:
        LODWORD(var0) = 0;
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 7, (uint64_t)&var0);
        v17 = *((_QWORD *)this + 2419);
        if ((TXTextLayout *)v17 == (TXTextLayout *)((char *)this + 19344))
          goto LABEL_20;
        break;
      default:
        if (v6 == 600)
          ++*((_DWORD *)this + 14712);
        goto LABEL_90;
    }
    while (*(_DWORD *)(*(_QWORD *)(v17 + 16) + 96) != (_DWORD)var0)
    {
      v17 = *(_QWORD *)(v17 + 8);
      if ((TXTextLayout *)v17 == (TXTextLayout *)((char *)this + 19344))
      {
LABEL_20:
        v56.var0 = 0;
        v57 = 0;
        goto LABEL_60;
      }
    }
    v32 = *(std::__shared_weak_count **)(v17 + 24);
    v56.var0 = *(PC_Sp_counted_base **)(v17 + 16);
    v57 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
LABEL_60:
    LODWORD(v53) = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 9, (uint64_t)&v53);
    LODWORD(v52) = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 10, (uint64_t)&v52);
    if ((_DWORD)v52 || *((_BYTE *)this + 61200))
    {
      v35 = operator new();
      TXTextStyleRun::TXTextStyleRun(v35, (uint64_t *)&v56, v53, (int)v52);
      v36 = operator new(0x18uLL);
      v36[1] = (char *)this + 19368;
      v36[2] = v35;
      v37 = *((_QWORD *)this + 2421);
      *v36 = v37;
      *(_QWORD *)(v37 + 8) = v36;
      *((_QWORD *)this + 2421) = v36;
      ++*((_QWORD *)this + 2423);
    }
    v38 = v57;
    if (v57)
    {
      v39 = (unint64_t *)&v57->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      goto LABEL_88;
    }
  }
LABEL_90:
  PCString::~PCString((PCString *)&v59);
  return 1;
}

void sub_1B29031B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, PCString a14, uint64_t a15, uint64_t a16, PCString a17)
{
  PCString::~PCString(&a17);
  _Unwind_Resume(a1);
}

void std::shared_ptr<TXTextStyle>::reset[abi:ne180100]<TXTextStyle,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<TXTextStyle>::shared_ptr[abi:ne180100]<TXTextStyle,void>((uint64_t *)&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t `non-virtual thunk to'TXTextLayout::parseElement(TXTextLayout *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  TXTextLayout::parseElement((TXTextLayout *)((char *)this - 200), a2, a3);
  return 1;
}

{
  TXTextLayout::parseElement((TXTextLayout *)((char *)this - 248), a2, a3);
  return 1;
}

uint64_t TXTextLayout::centerAnchorPoint(TXTextLayout *this, double a2, int a3)
{
  OZTransformNode *v6;
  OZScene *v7;
  const CMTime *v8;
  double v9;
  OZChannel *v10;
  double v11;
  double v12;
  double v13;
  OZChannel *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v28;
  double v29;
  double v30;
  __int128 v31;
  double v32;
  OZRenderState v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  CMTime v44;
  __int128 v45;
  double v46;

  v45 = 0uLL;
  v46 = 0.0;
  v6 = (OZTransformNode *)((char *)this + 200);
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
    v7 = (OZScene *)(*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)v6 + 272))(v6);
  else
    v7 = (OZScene *)*((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
  memset(&v44, 0, sizeof(v44));
  OZScene::getCurrentTime(v7, (__n128 *)&v44);
  OZTransformNode::getPivot((uint64_t)v6, &v45, &v44);
  v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], 0.0);
  if (v9 == a2)
    v10 = (OZChannel *)((char *)this + 24728);
  else
    v10 = (OZChannel *)((char *)this + 24576);
  OZChannel::getValueAsDouble(v10, v8, 0.0);
  v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), v8, 0.0);
  if (v13 == a2)
    v14 = (OZChannel *)((char *)this + 24576);
  else
    v14 = (OZChannel *)((char *)this + 24728);
  OZChannel::getValueAsDouble(v14, v8, 0.0);
  v16 = v15;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), v8, 0.0);
  v18 = v17;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), v8, 0.0);
  v20 = v18 - v19;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), v8, 0.0);
  if (v21 == 0.0)
    v22 = a3;
  else
    v22 = 1;
  v23 = v12 - v16;
  if (!v22)
    v23 = v16 - v12;
  v24 = v23 * 0.5;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), v8, 0.0);
  if (v25 == 0.0)
    v26 = -(v20 * 0.5);
  else
    v26 = v20 * 0.5;
  OZTransformNode::setPivot(v6, v26, v24, v46, &v44);
  v43 = 0x3FF0000000000000;
  v40 = 0x3FF0000000000000;
  v37 = 0x3FF0000000000000;
  v34 = 0x3FF0000000000000;
  v35 = 0u;
  v36 = 0u;
  v38 = 0u;
  v39 = 0u;
  v41 = 0u;
  v42 = 0u;
  OZRenderState::OZRenderState(&v33);
  v33.var4 = 1;
  (*(void (**)(OZTransformNode *, uint64_t *, OZRenderState *))(*((_QWORD *)this + 25) + 1256))(v6, &v34, &v33);
  v31 = v45;
  v32 = v46;
  v28 = v26;
  v29 = v24;
  v30 = v46;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v34, &v28, &v28);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v34, (double *)&v31, (double *)&v31);
  return OZTransformNode::offsetTranslation(v6, v28 - *(double *)&v31, v29 - *((double *)&v31 + 1), v30 - v32, &v44, 1);
}

void TXTextLayout::didFinishInitializing(TXTextLayout *this, char a2)
{
  OZChannel *v3;
  char *v4;
  uint64_t v5;
  char *v7;
  OZChannelObjectRootBase *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  OZChannelObjectRootBase *v13;
  uint64_t v14;
  __n128 *v15;
  void **value;
  unint64_t v17;
  unsigned int v18;
  void **v19;
  unint64_t v20;
  unsigned int v21;
  OZChannel *v22;
  CMTime v23;
  CMTime v24;

  v22 = (OZChannel *)((char *)this + 54128);
  v3 = (OZChannel *)((char *)this + 53240);
  v4 = (char *)this + 19344;
  v5 = *((_QWORD *)this + 2419);
  if ((TXTextLayout *)v5 != (TXTextLayout *)((char *)this + 19344))
  {
    v7 = (char *)this + 200;
    do
    {
      v8 = (OZChannelObjectRootBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 112))(*(_QWORD *)(v5 + 16));
      (*(void (**)(CMTime *__return_ptr, char *))(*(_QWORD *)v7 + 1128))(&v24, (char *)this + 200);
      OZChannelObjectRootBase::setTimeExtent(v8, (const PCTimeRange *)&v24, a2);
      OZChannelObjectRootBase::getTimeOffset((__n128 *)this + 16, (__n128 *)&v24);
      v9 = OZChannelObjectRootBase::setTimeOffset((__n128 *)v8, &v24, a2);
      v10 = *(_QWORD *)(v5 + 16);
      v12 = *(uint64_t **)(v10 + 480);
      v11 = *(uint64_t **)(v10 + 488);
      while (v12 != v11)
      {
        v13 = (OZChannelObjectRootBase *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)*v12 + 208))(*v12, v9);
        (*(void (**)(CMTime *__return_ptr, char *))(*(_QWORD *)v7 + 1128))(&v24, (char *)this + 200);
        OZChannelObjectRootBase::setTimeExtent(v13, (const PCTimeRange *)&v24, 0);
        v14 = *v12++;
        v15 = (__n128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 208))(v14);
        OZChannelObjectRootBase::getTimeOffset((__n128 *)this + 16, (__n128 *)&v24);
        v9 = OZChannelObjectRootBase::setTimeOffset(v15, &v24, 0);
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while ((char *)v5 != v4);
  }
  OZChannelPosition3D::willBeModified((os_unfair_lock_s *)this + 13348, 1);
  OZChannelPosition3D::willBeModified((os_unfair_lock_s *)this + 13126, 1);
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 53528));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 53680));
  OZChannel::reparametrizeChannel(v22);
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 52640));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 52792));
  OZChannel::reparametrizeChannel(v3);
  if (!(*((unsigned int (**)(OZChannel *))v3->var0 + 104))(v3))
  {
    OZChannel::getKeyframes((OZChannel *)((char *)this + 52640), 0, &v24);
    value = *(void ***)&v24.timescale;
    if (*(_QWORD *)&v24.timescale != v24.value)
    {
      v17 = 0;
      v18 = 1;
      value = (void **)v24.value;
      do
      {
        OZChannel::getKeyframe((OZChannel *)((char *)this + 52640), value[v17], &v23, 0);
        OZChannel::setKeyframe(v3, &v23);
        v17 = v18;
        value = (void **)v24.value;
        ++v18;
      }
      while (v17 < (*(_QWORD *)&v24.timescale - v24.value) >> 3);
    }
    if (value)
    {
      *(_QWORD *)&v24.timescale = value;
      operator delete(value);
    }
  }
  if (!(*((unsigned int (**)(OZChannel *))v22->var0 + 104))(v22))
  {
    OZChannel::getKeyframes((OZChannel *)((char *)this + 53528), 0, &v24);
    v19 = *(void ***)&v24.timescale;
    if (*(_QWORD *)&v24.timescale != v24.value)
    {
      v20 = 0;
      v21 = 1;
      v19 = (void **)v24.value;
      do
      {
        OZChannel::getKeyframe((OZChannel *)((char *)this + 53528), v19[v20], &v23, 0);
        OZChannel::setKeyframe(v22, &v23);
        v20 = v21;
        v19 = (void **)v24.value;
        ++v21;
      }
      while (v20 < (*(_QWORD *)&v24.timescale - v24.value) >> 3);
    }
    if (v19)
    {
      *(_QWORD *)&v24.timescale = v19;
      operator delete(v19);
    }
  }
  *((_BYTE *)this + 52360) = 1;
  TXTextLayout::interlockMargins(this, 1);
  TXTextLayout::updateShrinkToMarginsChannel(this);
}

void sub_1B290388C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *TXTextLayout::validateStyleRunAndParagraphRanges(_QWORD *this)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;

  v1 = (uint64_t *)this[2378];
  v2 = (uint64_t *)this[2379];
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v4 = *v1++;
      v3 += *(_QWORD *)(v4 + 864);
    }
    while (v1 != v2);
  }
  v5 = (_QWORD *)this[2422];
  if (v5 != this + 2421)
  {
    v6 = 0;
    do
    {
      v8 = v5 + 1;
      v5 = (_QWORD *)v5[1];
      v7 = v8[1];
      v9 = *(_DWORD *)(v7 + 28);
      v6 += v9;
    }
    while (v5 != this + 2421);
    if (v3 > v6)
      *(_DWORD *)(v7 + 28) = v3 - v6 + v9;
  }
  return this;
}

uint64_t TXTextLayout::didFinishLoadingIntoScene(TXTextLayout *this)
{
  _BYTE *v2;
  const CMTime *v3;
  char *StringPtr;
  unsigned int v5;
  int ValueAsInt;
  OZRenderState v8;

  v2 = (char *)this + 18988;
  OZElement::didFinishLoadingIntoScene((OZElement *)((char *)this + 200));
  (*(void (**)(TXTextLayout *))(*(_QWORD *)this + 1096))(this);
  *((_BYTE *)this + 63761) = 0;
  if (*((_QWORD *)this + 2379) == *((_QWORD *)this + 2378))
    TXTextLayout::createParagraphStylesFromNewLines(this, 1);
  TXTextLayout::rebuildParagraphStyles((PCString *)this);
  v3 = (const CMTime *)MEMORY[0x1E0CA2E68];
  TXTextLayout::updateDisplayString((PCString *)this, MEMORY[0x1E0CA2E68]);
  TXTextLayout::validateStyleRunAndParagraphRanges(this);
  TXTextLayout::updateLineBreaksByHardLine(this);
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
  TXTextLayout::didFinishInitializing(this, 0);
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  v5 = PCString::size((PCString *)StringPtr);
  (*(void (**)(TXTextLayout *, _QWORD, _QWORD))(*(_QWORD *)this + 240))(this, 0, v5);
  (*(void (**)(TXTextLayout *, uint64_t))(*(_QWORD *)this + 336))(this, 1);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v3, 0.0);
  TXTextLayout::cacheMargins(this, ValueAsInt);
  *v2 = 1;
  OZRenderState::OZRenderState(&v8);
  return TXTextLayout::doLayout(this, &v8, 0);
}

uint64_t `non-virtual thunk to'TXTextLayout::didFinishLoadingIntoScene(TXTextLayout *this)
{
  return TXTextLayout::didFinishLoadingIntoScene((TXTextLayout *)((char *)this - 200));
}

{
  return TXTextLayout::didFinishLoadingIntoScene((TXTextLayout *)((char *)this - 216));
}

void TXTextLayout::didChangeString(PCString *this)
{
  TXTextLayout::computeComposedCharacterIndices(this);
  ((void (*)(PCString *))this->var0[34].data)(this);
  TXTextLayout::updateStringTokenizer((TXTextLayout *)this);
}

void initializeNormalsForPath(OZChannelPosition3D *a1)
{
  OZChannel *v2;
  OZChannel *v3;
  OZChannel *v4;
  void **v5;
  unint64_t v6;
  unsigned int v7;
  void *__p[3];
  void *v9[3];
  void *v10;
  _BYTE *v11;

  v2 = (OZChannel *)((char *)a1 + 136);
  if ((*(unsigned int (**)(char *))(*((_QWORD *)a1 + 17) + 832))((char *)a1 + 136) >= 2)
  {
    OZChannel::getKeyframes(v2, 0, &v10);
    v3 = (OZChannel *)((char *)a1 + 288);
    OZChannel::getKeyframes((OZChannel *)((char *)a1 + 288), 0, v9);
    v4 = (OZChannel *)((char *)a1 + 736);
    OZChannel::getKeyframes(v4, 0, __p);
    v5 = (void **)v10;
    if (v11 != v10)
    {
      v6 = 0;
      v7 = 1;
      do
      {
        OZChannel::setKeyframeNormal(v2, v5[v6], 0.0);
        OZChannel::setKeyframeNormal(v3, *((void **)v9[0] + v6), 1.0);
        OZChannel::setKeyframeNormal(v4, *((void **)__p[0] + v6), 0.0);
        v6 = v7;
        v5 = (void **)v10;
        ++v7;
      }
      while (v6 < (v11 - (_BYTE *)v10) >> 3);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9[0])
    {
      v9[1] = v9[0];
      operator delete(v9[0]);
    }
    if (v10)
    {
      v11 = v10;
      operator delete(v10);
    }
  }
}

void sub_1B2903BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

OZCurrentThread *OZCurrentThread::getInstance(OZCurrentThread *this)
{
  OZCurrentThread *v1;

  v1 = (OZCurrentThread *)OZCurrentThread::_instance;
  if (!OZCurrentThread::_instance)
  {
    v1 = (OZCurrentThread *)operator new();
    OZCurrentThread::OZCurrentThread(v1);
    OZCurrentThread::_instance = (uint64_t)v1;
  }
  return v1;
}

void sub_1B2903C50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

BOOL PCMatrix44Tmpl<double>::getTransformation(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 PartialTransformation;
  double v11;
  double v12;
  long double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  long double v18;
  double v19;
  double v20;
  double v21;
  long double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  long double v30;
  long double v31;
  double v32;
  double v33;
  double v35;
  __int128 v36;
  __int128 __x;
  long double v38;
  __int128 v39;
  __int128 __y;
  long double v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = 0x3FF0000000000000;
  v41 = 1.0;
  v38 = 1.0;
  v35 = 1.0;
  v36 = 0u;
  __x = 0u;
  v39 = 0u;
  __y = 0u;
  v42 = 0u;
  v43 = 0u;
  PartialTransformation = PCMatrix44Tmpl<double>::getPartialTransformation(a1, a2, (uint64_t)&v35);
  if (PartialTransformation)
  {
    switch(*(_DWORD *)(a2 + 48))
    {
      case 0:
        v11 = asin(-*(double *)&__y);
        *(double *)(a2 + 64) = v11;
        v12 = cos(v11);
        if (v12 > -0.0000001 && v12 < 0.0000001)
        {
          v13 = v38;
          v14 = -*(double *)&v39;
          goto LABEL_24;
        }
        *(long double *)(a2 + 56) = atan2(*((long double *)&__y + 1), v41);
        v29 = *((double *)&__x + 1);
        v30 = v35;
        goto LABEL_34;
      case 1:
        v15 = asin(*((long double *)&__x + 1));
        *(double *)(a2 + 72) = v15;
        v16 = cos(v15);
        if (v16 > -0.0000001 && v16 < 0.0000001)
        {
          v17 = *((double *)&__y + 1);
          v18 = v41;
          goto LABEL_16;
        }
        *(long double *)(a2 + 56) = atan2(-*(double *)&v39, v38);
        v31 = v35;
        v32 = -*(double *)&__y;
        goto LABEL_30;
      case 2:
        v19 = asin(*((long double *)&__y + 1));
        *(double *)(a2 + 56) = v19;
        v20 = cos(v19);
        if (v20 > -0.0000001 && v20 < 0.0000001)
        {
          v21 = *((double *)&v36 + 1);
          v22 = v35;
          goto LABEL_20;
        }
        *(long double *)(a2 + 64) = atan2(-*(double *)&__y, v41);
        v33 = *(double *)&v36;
        v30 = v38;
        goto LABEL_33;
      case 3:
        v23 = asin(-*(double *)&v36);
        *(double *)(a2 + 72) = v23;
        v24 = cos(v23);
        if (v24 <= -0.0000001 || v24 >= 0.0000001)
        {
          *(long double *)(a2 + 56) = atan2(*((long double *)&__y + 1), v38);
          v32 = *((double *)&v36 + 1);
          v31 = v35;
LABEL_30:
          *(long double *)(a2 + 64) = atan2(v32, v31);
        }
        else
        {
          v18 = v41;
          v17 = -*(double *)&v39;
LABEL_16:
          *(long double *)(a2 + 56) = atan2(v17, v18);
          *(_QWORD *)(a2 + 64) = 0;
        }
        return PartialTransformation;
      case 4:
        v25 = asin(-*(double *)&v39);
        *(double *)(a2 + 56) = v25;
        v26 = cos(v25);
        if (v26 <= -0.0000001 || v26 >= 0.0000001)
        {
          *(long double *)(a2 + 64) = atan2(*((long double *)&v36 + 1), v41);
          v29 = *((double *)&__x + 1);
          v30 = v38;
          goto LABEL_34;
        }
        v22 = v35;
        v21 = -*(double *)&__y;
LABEL_20:
        *(long double *)(a2 + 64) = atan2(v21, v22);
        goto LABEL_25;
      case 5:
        v27 = asin(*((long double *)&v36 + 1));
        *(double *)(a2 + 64) = v27;
        v28 = cos(v27);
        if (v28 <= -0.0000001 || v28 >= 0.0000001)
        {
          *(long double *)(a2 + 56) = atan2(-*(double *)&v39, v41);
          v30 = v35;
          v33 = *(double *)&v36;
LABEL_33:
          v29 = -v33;
LABEL_34:
          *(long double *)(a2 + 72) = atan2(v29, v30);
        }
        else
        {
          v14 = *((double *)&__y + 1);
          v13 = v38;
LABEL_24:
          *(long double *)(a2 + 56) = atan2(v14, v13);
LABEL_25:
          *(_QWORD *)(a2 + 72) = 0;
        }
        break;
      default:
        PCPrint("File %s, line %d should not have been reached:\n\t", v3, v4, v5, v6, v7, v8, v9, (char)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMatrix44.h");
        pcAbortImpl();
    }
  }
  return PartialTransformation;
}

void TXTextLayout::allowDrag(TXTextLayout *this, OZFactoryBase *lpsrc, OZChannelBase *a3, uint64_t a4, unsigned int *a5, unsigned int *a6, uint64_t a7)
{
  OZChannelBase *v13;
  void *v14;
  void *v15;
  void *v16;
  const void *ObjectManipulator;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  *a5 = 0;
  if (!lpsrc)
    goto LABEL_15;
  v22 = a6;
  if ((_DWORD)a7 != 1 && v16)
    return;
  if ((_DWORD)a7 != 1
    || !v13
    || (OZChannelBase *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 640))((char *)this + 200) != a3)
  {
    if ((_DWORD)a7 == 1 && v14)
    {
      *a5 = a4 & 1;
      return;
    }
    a6 = v22;
    if (v15)
    {
      ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a3);
      if (ObjectManipulator)
      {
        if (v18)
          (*(void (**)(void *, OZFactoryBase *, OZChannelBase *, uint64_t, unsigned int *, unsigned int *, uint64_t))(*(_QWORD *)v18 + 312))(v18, lpsrc, a3, a4, a5, v22, a7);
      }
      return;
    }
LABEL_15:
    OZElement::allowDrag((OZElement *)((char *)this + 200), lpsrc, a3, a4, a5, a6, a7);
    return;
  }
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)this, &v23);
  if (v23 && v13 != a3)
    *a5 = a4 & 1;
  v19 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void `non-virtual thunk to'TXTextLayout::allowDrag(TXTextLayout *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, unsigned int *a5, unsigned int *a6, uint64_t a7)
{
  TXTextLayout::allowDrag((TXTextLayout *)((char *)this - 200), a2, a3, a4, a5, a6, a7);
}

{
  TXTextLayout::allowDrag((TXTextLayout *)((char *)this - 216), a2, a3, a4, a5, a6, a7);
}

uint64_t TXTextLayout::prepareForDragOperation()
{
  return 1;
}

uint64_t `non-virtual thunk to'TXTextLayout::prepareForDragOperation()
{
  return 1;
}

{
  return 1;
}

uint64_t TXTextLayout::performDragOperation(OZChannelBase *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, uint64_t a6, const CMTime *a7, const CMTime *a8)
{
  uint64_t *v14;
  char *v15;
  void *v16;
  OZElement *p_var11;
  unint64_t v18;
  int isKindOfClass;
  int v20;
  _DWORD *v21;
  const void *ObjectManipulator;
  void *v23;
  __CFString *v24;
  __CFString *v25;
  void *v26;
  char *v27;
  std::__shared_weak_count *length;
  unint64_t *p_shared_owners;
  unint64_t v30;
  void **v31;
  void **v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  __CFString *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  const PCString *Name;
  unsigned int ValueAsInt;
  OZChannelBase *v43;
  const CMTime *v44;
  __CFString *v45;
  __CFString *v46;
  unint64_t *p_info;
  unint64_t v48;
  _QWORD *isa;
  uint64_t v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t v53;
  const void *v54;
  _QWORD *v55;
  _QWORD *v56;
  const CMTime *v57;
  OZChannelBase *v58;
  OZChannelBase *v59;
  OZChannelBase *v60;
  OZChannelBase *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  OZChannelBase *v68;
  int v69;
  int v70;
  const PCString *v71;
  OZChannelTimeConverter **p_var13;
  unsigned int var13;
  unsigned int var13_high;
  unsigned int v75;
  unsigned int v76;
  BOOL v77;
  unsigned int v78;
  unsigned int v79;
  BOOL v80;
  unsigned int v81;
  unsigned int v82;
  PCString *i;
  __CFString *var0;
  int data;
  int v86;
  OZScene **v87;
  __CFString **p_var10;
  __CFString *var11;
  const CMTime *v90;
  char *v91;
  OZMaterialBase **v92;
  OZMaterialBase *v93;
  unsigned int v94;
  OZChannelBase *v95;
  const OZChannelBase *v97;
  const OZChannelBase *v98;
  int v99;
  _BOOL4 v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  PCString *v106;
  char v107;
  uint64_t v108;
  OZChannelFolder *MatchingCompoundChannel;
  OZChannelFolder *MatchingDescendant;
  OZChannel *v111;
  const OZChannelInfo **v112;
  __n128 CurrentTime;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  unsigned int v119;
  OZMaterialLayersFolder *v120;
  unsigned int v121;
  unsigned int v122;
  const PCString *v123;
  BOOL v124;
  unsigned int v125;
  OZDocument **v128;
  char v129;
  OZChannelBase *v130;
  PCString v131;
  PCSharedCount v132;
  PCSharedCount v133;
  PCString v134;
  PCString v135;
  PCString v136[2];
  uint64_t v137;
  __n128 v138;
  PCString v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  if (lpsrc)
  {
  }
  else
  {
    v15 = 0;
    v14 = 0;
    v16 = 0;
  }
  p_var11 = (OZElement *)&this[1].var11;
  v130 = this;
  if (((uint64_t (*)(__CFString **))this[1].var11[8].data)(&this[1].var11))
    v128 = (OZDocument **)(*(uint64_t (**)(__CFString **))(*(_QWORD *)p_var11 + 272))(&this[1].var11);
  else
    v128 = (OZDocument **)*((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
  v18 = *((_QWORD *)lpsrc + 1);
  *(_OWORD *)&v136[0].var0 = xmmword_1B3054220;
  isKindOfClass = OZFactory::isKindOfClass(v18, (int32x4_t *)v136);
  if (v15)
    v20 = 1;
  else
    v20 = isKindOfClass;
  if (v20 == 1)
    OZDocument::postNotification(v128[198], 0x80000);
  if ((_DWORD)a6 == 1 && v14)
  {
    if (a3)
    else
      v21 = 0;
    v67 = (uint64_t)v128[198];
    PCURL::PCURL((PCURL *)v136, CFSTR("Undo Gradient Change"));
    OZDocument::startCaptureModifiedChannels(v67, v136);
    PCString::~PCString(v136);
    v68 = this;
    if (v21)
    {
      v69 = v21[30];
      OZChannelFolder::operator=((uint64_t)v21);
      OZChannelFolder::operator=((uint64_t)(v21 + 32));
      OZChannelFolder::operator=((uint64_t)(v21 + 64));
      OZChannelBase::operator=((uint64_t)(v21 + 96), (uint64_t)(v14 + 48));
      OZChannelBase::operator=((uint64_t)(v21 + 134), (uint64_t)(v14 + 67));
      v70 = *((_DWORD *)v14 + 198);
      *((_BYTE *)v21 + 796) = *((_BYTE *)v14 + 796);
      v21[198] = v70;
      OZChannelFolder::setFoldFlags((OZChannelFolder *)v21, v69);
    }
    else
    {
      p_var13 = &this[171].var13;
      var13 = v130[171].var13;
      var13_high = HIDWORD(v130[171].var13);
      v75 = var13;
      if (var13 != var13_high)
      {
        v76 = var13_high - var13;
        v78 = var13 - var13_high;
        v77 = var13 > var13_high;
        if (var13 >= var13_high)
          var13 = HIDWORD(v130[171].var13);
        if (v77)
          v76 = v78;
        v136[0].var0 = (__CFString *)__PAIR64__(v76, var13);
        TXTextLayout::splitStyleRunsInRange((Li3DEngineScene *)v130, (unsigned int *)v136);
        v75 = *(_DWORD *)p_var13;
        var13 = *((_DWORD *)p_var13 + 1);
        v68 = v130;
      }
      v136[0].var0 = (__CFString *)v136;
      v136[1].var0 = (__CFString *)v136;
      v137 = 0;
      v79 = var13 - v75;
      v81 = v75 - var13;
      v80 = v75 > var13;
      if (v75 < var13)
        var13 = v75;
      if (v80)
        v82 = v81;
      else
        v82 = v79;
      v138.n128_u64[0] = __PAIR64__(v82, var13);
      TXTextLayout::getStylesInRange(v68, (uint64_t *)v136, (int *)&v138);
      for (i = (PCString *)v136[1].var0; i != v136; i = (PCString *)i[1].var0)
      {
        OZChannel::setValue((OZChannel *)&i[2].var0[190].info, MEMORY[0x1E0CA2E68], 1.0, 0);
        var0 = i[2].var0;
        if (&var0[229].length != v14)
        {
          data = (int)var0[233].data;
          OZChannelFolder::operator=((uint64_t)&var0[229].length);
          OZChannelFolder::operator=((uint64_t)&var0[233].length);
          OZChannelFolder::operator=((uint64_t)&var0[237].length);
          OZChannelBase::operator=((uint64_t)&var0[241].length, (uint64_t)(v14 + 48));
          OZChannelBase::operator=((uint64_t)&var0[246].data, (uint64_t)(v14 + 67));
          v86 = *((_DWORD *)v14 + 198);
          BYTE4(var0[254].data) = *((_BYTE *)v14 + 796);
          LODWORD(var0[254].data) = v86;
          OZChannelFolder::setFoldFlags((OZChannelFolder *)&var0[229].length, data);
        }
      }
      std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)v136);
    }
    OZDocument::endCaptureModifiedChannels((OZChannelBase *)v128[198], v71);
    return 1;
  }
  if ((_DWORD)a6 == 1 && v15)
  {
    ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a3);
    v129 = (char)a7;
    if (!ObjectManipulator
      || (a7 = a8,
    {
      v87 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
      OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v136, v87);
      TXTextLayout::removeMaterialFromSequenceBehaviors(this, 0);
      TXSequenceChannels::removeMaterialChannelsAtIndex((TXSequenceChannels *)&this[223].var7, 0);
      p_var10 = &this[172].var10;
      var11 = v130[172].var11;
      if (var11 != (__CFString *)&v130[172].var10)
      {
        v90 = (const CMTime *)MEMORY[0x1E0CA2E68];
        do
        {
          v91 = var11->data;
          v92 = (OZMaterialBase **)*((_QWORD *)v91 + 60);
          if (*((OZMaterialBase ***)v91 + 61) == v92)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v93 = *v92;
          v94 = *((_DWORD *)*v92 + 44);
          (*(void (**)(OZMaterialBase *, char *))(*(_QWORD *)*v92 + 80))(*v92, v15);
          v95 = (OZChannelBase *)(*(uint64_t (**)(OZMaterialBase *))(*(_QWORD *)v93 + 208))(v93);
          OZChannelBase::setID(v95, v94);
          OZChannel::setValue((OZChannel *)((char *)v93 + 568), v90, 31.0, 0);
          OZStyle::didSetFacetAssignmentForMaterial((OZStyle *)var11->data, v93);
          var11 = (__CFString *)var11->info;
        }
        while (var11 != (__CFString *)p_var10);
      }
      OZChannel::getValueAsInt((OZChannel *)(v15 + 720), MEMORY[0x1E0CA2E68], 0.0);
      TXSequenceChannels::addMaterialChannels((TXSequenceChannels *)&v130[223].var7, (OZMaterialBase *)v15, 0);
      TXTextLayout::addMaterialToSequenceBehaviors(v130, (OZMaterialBase *)v15, 0);
      OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v136);
      return 1;
    }
    v125 = 1;
    v24 = (__CFString *)&this[172].var10;
    v25 = this[172].var11;
    if (v25 == (__CFString *)&v130[172].var10)
    {
      LOBYTE(a7) = v129;
    }
    else
    {
      v26 = v23;
      do
      {
        v27 = v25->data;
        length = (std::__shared_weak_count *)v25->length;
        if (length)
        {
          p_shared_owners = (unint64_t *)&length->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
        }
        v31 = (void **)*((_QWORD *)v27 + 60);
        v32 = (void **)*((_QWORD *)v27 + 61);
        if (v31 == v32)
        {
LABEL_29:
          v33 = 0xFFFFFFFFLL;
        }
        else
        {
          v33 = 0;
          while (*v31 != v26)
          {
            ++v31;
            v33 = (v33 + 1);
            if (v31 == v32)
              goto LABEL_29;
          }
        }
        if (length)
        {
          v34 = (unint64_t *)&length->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))length->__on_zero_shared)(length);
            std::__shared_weak_count::__release_weak(length);
          }
        }
        v25 = (__CFString *)v25->info;
      }
      while (v25 != v24 && (_DWORD)v33 == -1);
      a8 = a7;
      LOBYTE(a7) = v129;
      if ((_DWORD)v33 != -1)
      {
        TXTextLayout::removeMaterialFromSequenceBehaviors(v130, v33);
        TXSequenceChannels::removeMaterialChannelsAtIndex((TXSequenceChannels *)&v130[223].var7, v33);
        v37 = v130[172].var11;
        v38 = v37->data;
        v39 = *((_QWORD *)v38 + 60);
        if ((int)v33 >= (unint64_t)((*((_QWORD *)v38 + 61) - v39) >> 3))
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        v40 = *(_QWORD *)(v39 + 8 * (int)v33);
        Name = (const PCString *)OZObjectManipulator::getName((OZObjectManipulator *)(v15 + 16));
        PCString::PCString((PCString *)&v138, Name);
        ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v40 + 720), MEMORY[0x1E0CA2E68], 0.0);
        v43 = v130;
        OZMaterialBase::setSequenceID((OZMaterialBase *)v15, ValueAsInt);
        if (v37 != v24)
        {
          v44 = (const CMTime *)MEMORY[0x1E0CA2E68];
          do
          {
            v45 = (__CFString *)v37->data;
            v46 = (__CFString *)v37->length;
            v136[0].var0 = v45;
            v136[1].var0 = v46;
            if (v46)
            {
              p_info = (unint64_t *)&v46->info;
              do
                v48 = __ldxr(p_info);
              while (__stxr(v48 + 1, p_info));
            }
            isa = v45[15].isa;
            if ((int)v33 >= (unint64_t)((v45[15].info - (uint64_t)isa) >> 3))
              std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
            v50 = isa[(int)v33];
            v51 = OZChannel::getValueAsInt((OZChannel *)(v50 + 568), v44, 0.0);
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v50 + 336))(v50, v15);
            OZChannel::setValue((OZChannel *)(v50 + 568), v44, (double)v51, 0);
            v43 = v130;
            if (v46)
            {
              v52 = (unint64_t *)&v46->info;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                (*((void (**)(__CFString *))v46->isa + 2))(v46);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v46);
              }
            }
            v37 = (__CFString *)v37->info;
          }
          while (v37 != v24);
        }
        OZChannel::getValueAsInt((OZChannel *)(v15 + 720), MEMORY[0x1E0CA2E68], 0.0);
        TXSequenceChannels::addMaterialChannels((TXSequenceChannels *)&v130[223].var7, (OZMaterialBase *)v15, v33);
        TXTextLayout::addMaterialToSequenceBehaviors(v43, (OZMaterialBase *)v15, v33);
        (*((void (**)(OZChannelBase *, __n128 *, uint64_t, _QWORD, uint64_t))v43->var0 + 129))(v43, &v138, v33, 0, 1);
        PCString::~PCString((PCString *)&v138);
        return 1;
      }
    }
    return OZElement::performDragOperation(p_var11, lpsrc, a3, a4, a5, v125, (char)a7, a8);
  }
  v125 = a6;
  if (v16)
  {
    v54 = (const void *)OZChannelBase::getObjectManipulator(a3);
    if (v54)
    {
      if (v55)
      {
        v56 = v55;
        v57 = a8;
        if (a3)
        {
          v59 = v58;
          if (v59)
          {
            v61 = v60;
            if (v60)
            {
              v62 = OZChannelBase::getObjectManipulator(v59);
              v63 = v62 - 16;
              if (!v62)
                v63 = 0;
              v64 = *(_QWORD *)(v63 + 1280);
              if (v64)
                v65 = v64 - 16;
              else
                v65 = 0;
              if (*(OZChannelBase **)(v65 + 48944) == v130)
              {
                if ((*(uint64_t (**)(OZElement *))(*(_QWORD *)p_var11 + 272))(p_var11))
                  v66 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)p_var11 + 272))(p_var11);
                else
                  v66 = *((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
                v114 = *(_QWORD *)(v66 + 1584);
                PCURL::PCURL((PCURL *)v136, CFSTR("Undo Material Change"));
                OZDocument::startCaptureModifiedChannels(v114, v136);
                PCString::~PCString(v136);
                v115 = v56[160];
                v116 = v115 - 16;
                if (!v115)
                  v116 = 0;
                v117 = *(_QWORD **)(v116 + 480);
                v118 = *(_QWORD **)(v116 + 488);
                if (v117 == v118)
                {
LABEL_142:
                  v119 = -1;
                }
                else
                {
                  v119 = 0;
                  while ((_QWORD *)*v117 != v56)
                  {
                    ++v117;
                    ++v119;
                    if (v117 == v118)
                      goto LABEL_142;
                  }
                }
                v120 = (OZMaterialLayersFolder *)(v56 + 164);
                v121 = OZMaterialLayersFolder::indexOfDescendant((OZMaterialLayersFolder *)(v56 + 164), v59);
                v122 = OZMaterialLayersFolder::indexOfDescendant(v120, v61);
                TXTextLayout::moveMaterialLayer((TXTextLayout *)v130, v121, v122, v119, a5);
                OZDocument::endCaptureModifiedChannels(*(OZChannelBase **)(v66 + 1584), v123);
              }
              return 1;
            }
          }
        }
        a8 = v57;
        (*(void (**)(_QWORD *, OZFactoryBase *, OZChannelBase *, _QWORD, _QWORD, uint64_t, const CMTime *, const CMTime *))(*v56 + 328))(v56, lpsrc, a3, a4, a5, a6, a7, v57);
      }
    }
    return OZElement::performDragOperation(p_var11, lpsrc, a3, a4, a5, v125, (char)a7, a8);
  }
  if (!OZChannelBase::isObjectRef(this))
    return OZElement::performDragOperation(p_var11, lpsrc, a3, a4, a5, v125, (char)a7, a8);
  if (!v97)
    return OZElement::performDragOperation(p_var11, lpsrc, a3, a4, a5, v125, (char)a7, a8);
  v98 = v97;
  v136[0].var0 = (__CFString *)v136;
  v136[1].var0 = (__CFString *)v136;
  v137 = 0;
  TXTextLayout::getGlyphSelectedStyles((uint64_t)this, (uint64_t *)v136);
  PCURL::PCURL((PCURL *)&v135, CFSTR("Text Style Name"));
  PCString::PCString(&v134, &v98->var4);
  PCString::PCString((PCString *)&v138, ".");
  v99 = PCString::find(&v134, (const PCString *)&v138);
  PCString::~PCString((PCString *)&v138);
  PCSharedCount::PCSharedCount(&v133);
  if (v99 < 1)
  {
    v100 = 0;
  }
  else
  {
    PCString::substrTo(&v134, (v99 - 1), (CFStringRef *)&v138);
    PCString::set((PCString *)&v133, (const PCString *)&v138);
    PCString::~PCString((PCString *)&v138);
    v100 = (int)PCString::find((PCString *)&v133, &v135) >= 0;
  }
  PCSharedCount::PCSharedCount(&v132);
  if (v100)
  {
    PCString::substrFrom(&v134, v99 + 1, (CFStringRef *)&v138);
    PCString::set((PCString *)&v132, (const PCString *)&v138);
    PCString::~PCString((PCString *)&v138);
    PCString::PCString((PCString *)&v138, ".");
    v101 = PCString::find((PCString *)&v132, (const PCString *)&v138);
    PCString::~PCString((PCString *)&v138);
    if (v101 < 0)
      goto LABEL_113;
    PCString::substrTo((PCString *)&v132, v101 - 1, (CFStringRef *)&v138);
    PCString::set((PCString *)&v132, (const PCString *)&v138);
  }
  else
  {
    PCString::PCString((PCString *)&v138, "Transform");
    v102 = PCString::find(&v134, (const PCString *)&v138);
    PCString::~PCString((PCString *)&v138);
    if ((v102 & 0x80000000) == 0)
      PCString::erase(&v134, v102, 0xAu);
    PCString::PCString((PCString *)&v138, "Position");
    PCString::PCString(&v139, "Offset");
    if ((PCString::find(&v134, (const PCString *)&v138) & 0x80000000) == 0)
    {
      v103 = PCString::find(&v134, (const PCString *)&v138);
      v104 = PCString::size((PCString *)&v138);
      PCString::replace(&v134, v103, v104, &v139);
    }
    PCString::set((PCString *)&v132, &v134);
    PCString::PCString(&v131, ".");
    v105 = PCString::find((PCString *)&v132, &v131);
    PCString::~PCString(&v131);
    if ((v105 & 0x80000000) == 0)
    {
      PCString::substrTo((PCString *)&v132, v105 - 1, (CFStringRef *)&v131.var0);
      PCString::set((PCString *)&v132, &v131);
      PCString::~PCString(&v131);
    }
    PCString::~PCString(&v139);
  }
  PCString::~PCString((PCString *)&v138);
LABEL_113:
  v106 = (PCString *)v136[1].var0;
  if ((PCString *)v136[1].var0 == v136)
  {
    v107 = 0;
    v124 = 1;
  }
  else
  {
    v107 = 0;
    do
    {
      v108 = (*((uint64_t (**)(__CFString *))v106[2].var0->isa + 14))(v106[2].var0);
      PCString::PCString(&v139, (const PCString *)(v108 + 32));
      PCString::PCString((PCString *)&v138, &v139);
      PCString::append((PCString *)&v138, ".");
      PCString::PCString(&v131, (const PCString *)&v138);
      PCString::append(&v131, (const PCString *)&v132);
      PCString::~PCString((PCString *)&v138);
      MatchingCompoundChannel = (OZChannelFolder *)OZChannelFolder::findMatchingCompoundChannel((OZChannelFolder *)v108, &v131);
      if (MatchingCompoundChannel)
        MatchingDescendant = OZChannelFolder::findMatchingDescendant(MatchingCompoundChannel, v98);
      else
        MatchingDescendant = OZChannelFolder::findMatchingDescendant((OZChannelFolder *)v108, v98);
      a3 = (OZChannelBase *)MatchingDescendant;
      v124 = MatchingDescendant != 0;
      if (MatchingDescendant)
      {
        if (!v98->var6)
        {
          if (v111)
          {
            if (v112)
              OZChannel::setInfo(v111, v112[16]);
          }
        }
        PCSharedCount::PCSharedCount((PCSharedCount *)&v138);
        (*((void (**)(OZChannelBase *, __n128 *))a3->var0 + 43))(a3, &v138);
        PCString::~PCString((PCString *)&v138);
        if ((a7 & 2) != 0)
        {
          CurrentTime = OZScene::getCurrentTime((OZScene *)v128, &v138);
          (*((void (**)(OZChannelBase *, __n128 *, const OZChannelBase *, __n128))a3->var0 + 38))(a3, &v138, v98, CurrentTime);
        }
        else
        {
          OZChannelBase::operator=((uint64_t)a3, (uint64_t)v98);
        }
        (*((void (**)(OZChannelBase *))v130->var0 + 68))(v130);
        OZDocument::postNotification(v128[198], 8);
        v107 = 1;
      }
      PCString::~PCString(&v131);
      PCString::~PCString(&v139);
      if (!a3)
        break;
      v106 = (PCString *)v106[1].var0;
    }
    while (v106 != v136);
  }
  PCString::~PCString((PCString *)&v132);
  PCString::~PCString((PCString *)&v133);
  PCString::~PCString(&v134);
  PCString::~PCString(&v135);
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)v136);
  if (v124)
  {
    if ((v107 & 1) != 0)
      return 1;
    return OZElement::performDragOperation(p_var11, lpsrc, a3, a4, a5, v125, (char)a7, a8);
  }
  return 0;
}

void sub_1B2904FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14, PCString a15, PCString a16, PCString a17, PCString a18, PCString a19, uint64_t a20,uint64_t a21,PCString a22)
{
  PCString::~PCString(&a19);
  _Unwind_Resume(a1);
}

_QWORD *TXTextLayout::addMaterialToSequenceBehaviors(_QWORD *this, OZMaterialBase *a2, unsigned int a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = this + 150;
  v4 = (_QWORD *)this[151];
  if (v4 != this + 150)
  {
    do
    {
      this = (_QWORD *)v4[2];
      if (this)
      {
        if (this)
          this = TXSequenceBehavior::addMaterial((TXSequenceBehavior *)this, a2, a3);
      }
      v4 = (_QWORD *)v4[1];
    }
    while (v4 != v3);
  }
  return this;
}

char *TXTextLayout::moveMaterialLayer(TXTextLayout *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *result;
  _QWORD *i;

  v10 = (char *)this + 19344;
  v11 = (char *)*((_QWORD *)this + 2419);
  if (v11 != (char *)this + 19344)
  {
    do
    {
      v12 = *((_QWORD *)v11 + 2);
      v13 = *(_QWORD *)(v12 + 480);
      if (a4 >= (unint64_t)((*(_QWORD *)(v12 + 488) - v13) >> 3))
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      v14 = *(void **)(v13 + 8 * a4);
      if (v14)
      OZLayeredMaterial::moveMaterialLayer((OZLayeredMaterial *)v14, a2, a3, a5);
      v11 = (char *)*((_QWORD *)v11 + 1);
    }
    while (v11 != v10);
  }
  result = TXSequenceChannels::moveMaterialLayerChannels((TXTextLayout *)((char *)this + 25032), a2, a3, a5, a4);
  for (i = (_QWORD *)*((_QWORD *)this + 151); i != (_QWORD *)((char *)this + 1200); i = (_QWORD *)i[1])
  {
    result = (char *)i[2];
    if (result)
    {
      if (result)
        result = TXSequenceChannels::moveMaterialLayerChannels((TXSequenceChannels *)(result + 816), a2, a3, a5, a4);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'TXTextLayout::performDragOperation(TXTextLayout *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, uint64_t a6, const CMTime *a7, const CMTime *a8)
{
  return TXTextLayout::performDragOperation((OZChannelBase *)((char *)this - 200), a2, a3, a4, a5, a6, a7, a8);
}

{
  return TXTextLayout::performDragOperation((OZChannelBase *)((char *)this - 216), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t TXTextLayout::is3D(TXTextLayout *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v13;

  if (!*((_QWORD *)this + 2420))
  {
    v13 = 0;
LABEL_9:
    v8 = (char *)this + 1200;
    v9 = *((_QWORD *)this + 151);
    if ((TXTextLayout *)v9 == (TXTextLayout *)((char *)this + 1200))
    {
      v7 = 0;
    }
    else
    {
      do
      {
        v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v9 + 16) + 616))(*(_QWORD *)(v9 + 16), 1046, 0, 0);
        if ((_DWORD)v7)
          break;
        v9 = *(_QWORD *)(v9 + 8);
      }
      while ((char *)v9 != v8);
    }
    goto LABEL_14;
  }
  v2 = *((_QWORD *)this + 2419);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(std::__shared_weak_count **)(v2 + 24);
  v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (!v3 || (OZChannelBase::isEnabled((OZChannelBase *)(v3 + 40520), 0, 1) & 1) == 0)
    goto LABEL_9;
  v7 = 1;
LABEL_14:
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v7;
}

void sub_1B2905484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTextLayout::is3D(TXTextLayout *this)
{
  return TXTextLayout::is3D((TXTextLayout *)((char *)this - 200));
}

uint64_t TXTextLayout::hasSequenceCharacterOffset(TXTextLayout *this)
{
  char *v1;
  _QWORD *v2;
  const void *v3;
  void *v4;

  v1 = (char *)this + 1200;
  v2 = (_QWORD *)*((_QWORD *)this + 151);
  if (v2 == (_QWORD *)((char *)this + 1200))
    return 0;
  while (1)
  {
    v3 = (const void *)v2[2];
    if (v3)
    {
      if (v4)
      {
        if (((*(uint64_t (**)(void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 616))(v4, 1031, 0, 0) & 1) != 0)
          break;
      }
    }
    v2 = (_QWORD *)v2[1];
    if (v2 == (_QWORD *)v1)
      return 0;
  }
  return 1;
}

uint64_t TXTextLayout::isStyleEnabledBySequenceBehavior(TXTextLayout *this, uint64_t a2, CMTime *a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  const void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  CMTimeEpoch epoch;

  v3 = (char *)this + 1200;
  v4 = (char *)*((_QWORD *)this + 151);
  if (v4 == (char *)this + 1200)
    return 0;
  v7 = 1;
  while (1)
  {
    v8 = (const void *)*((_QWORD *)v4 + 2);
    if (v8)
    {
      if (v9)
      {
        v10 = v9;
        if ((*(unsigned int (**)(void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 616))(v9, a2, 0, 0))
        {
          v12 = *(_OWORD *)&a3->value;
          epoch = a3->epoch;
          if (((*(uint64_t (**)(void *, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 296))(v10, &v12, 1, 1, 1) & 1) != 0)break;
        }
      }
    }
    v4 = (char *)*((_QWORD *)v4 + 1);
    if (v4 == v3)
      return 0;
  }
  return v7;
}

uint64_t TXTextLayout::isStyleEnabledByOldSequenceBehavior(TXTextLayout *this, int a2, CMTime *a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  const void *v8;
  TXTextSequenceBehavior *v9;
  TXTextSequenceBehavior *v10;
  __int128 v12;
  CMTimeEpoch epoch;

  v3 = (char *)this + 1200;
  v4 = (char *)*((_QWORD *)this + 151);
  if (v4 == (char *)this + 1200)
    return 0;
  v7 = 1;
  while (1)
  {
    v8 = (const void *)*((_QWORD *)v4 + 2);
    if (v8)
    {
      if (v9)
      {
        v10 = v9;
        if (TXTextSequenceBehavior::isChannelEnabled(v9, a2))
        {
          v12 = *(_OWORD *)&a3->value;
          epoch = a3->epoch;
          if (((*(uint64_t (**)(TXTextSequenceBehavior *, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 296))(v10, &v12, 1, 1, 1) & 1) != 0)break;
        }
      }
    }
    v4 = (char *)*((_QWORD *)v4 + 1);
    if (v4 == v3)
      return 0;
  }
  return v7;
}

void TXTextLayout::prepareForRender(TXTextLayout *this, const OZRenderState *a2)
{
  _DWORD *v4;
  _QWORD *i;
  uint64_t v6;
  int v7;
  OZScene **v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  __n128 v15;
  CMTimeEpoch v16;
  __n128 v17;
  CMTimeEpoch v18;
  CMTime v19;
  CMTime v20;
  PCString v21[2];
  CMTimeEpoch v22;
  CMTime v23;
  _BYTE v24[8];
  PCString v25;
  CMTime v26;
  CMTime var0;
  CMTime v28;
  CMTime v29;
  CMTime time2;
  CMTime time1;

  v4 = (_DWORD *)((char *)this + 58872);
  if (TXTextLayout::hasSequenceCharacterOffset(this))
    *((_BYTE *)this + 19321) = 1;
  TXTextLayout::doLayout(this, a2, 0);
  var0 = (CMTime)a2->var0;
  for (i = (_QWORD *)*((_QWORD *)this + 2419); i != (_QWORD *)((char *)this + 19344); i = (_QWORD *)i[1])
  {
    v6 = i[2];
    v26 = var0;
    TXTextStyle::updateGradient(v6, &v26);
  }
  if (*v4 == 2)
  {
    PCString::PCString(&v25, (const PCString *)this + 7358);
    TXChannelString::getString((PCString *)this + 2381, v21);
    v7 = PCString::caseInsensitiveCompare(&v25, v21);
    PCString::~PCString(v21);
    if (v7)
    {
      v8 = (OZScene **)Li3DEngineScene::sceneManager(this);
      OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v24, v8);
      v9 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 640))((char *)this + 200);
      (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v9 + 712))(v21);
      v19 = (CMTime)a2->var0;
      v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v17);
      time1 = v19;
      *(__n128 *)&time2.value = v17;
      time2.epoch = v18;
      v11 = PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v20);
      v12 = (*(uint64_t (**)(char *, __n128))(*((_QWORD *)this + 25) + 272))((char *)this + 200, v11);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), &v15);
      *(_OWORD *)&time1.value = *(_OWORD *)&v21[0].var0;
      time1.epoch = v22;
      time2 = v20;
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        *(_OWORD *)&time1.value = *(_OWORD *)&v21[0].var0;
        time1.epoch = v22;
        time2 = v23;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v29);
        time1 = v29;
        *(__n128 *)&time2.value = v15;
        time2.epoch = v16;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        time1 = v20;
        time2 = v28;
        if (CMTimeCompare(&time1, &time2) <= 0 || (v23.flags & 1) != 0 && (v23.flags & 0x10) != 0)
        {
          TXTextLayout::setString(this, (const PCString *)this + 7358, 1);
          TXTextLayout::updateDisplayString((PCString *)this, &var0);
          v13 = *(_QWORD *)(*((_QWORD *)this + 2422) + 16);
          TXTextLayout::getDisplayString((PCString *)this, v21);
          v14 = PCString::size(v21);
          *(_DWORD *)(v13 + 24) = 0;
          *(_DWORD *)(v13 + 28) = v14;
          PCString::~PCString(v21);
          TXTextLayout::rebuildParagraphStyles((PCString *)this);
          TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
          TXTextLayout::doLayout(this, a2, 0);
        }
      }
      OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v24);
    }
    PCString::~PCString(&v25);
  }
}

void sub_1B29059E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCString a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,PCString a28)
{
  PCString::~PCString(&a21);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a27);
  PCString::~PCString(&a28);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::prepareForRender(TXTextLayout *this, const OZRenderState *a2)
{
  TXTextLayout::prepareForRender((TXTextLayout *)((char *)this - 200), a2);
}

uint64_t TXTextLayout::getNumberOfMissingFonts(TXTextLayout *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (char *)this + 19344;
  v2 = *((_QWORD *)this + 2419);
  if ((TXTextLayout *)v2 == (TXTextLayout *)((char *)this + 19344))
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v3 = (v3 + TXTextStyle::isMissingFont(*(TXTextStyle **)(v2 + 16)));
    v2 = *(_QWORD *)(v2 + 8);
  }
  while ((char *)v2 != v1);
  return v3;
}

uint64_t `non-virtual thunk to'TXTextLayout::getNumberOfMissingFonts(TXTextLayout *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (char *)this + 19144;
  v2 = *((_QWORD *)this + 2394);
  if ((TXTextLayout *)v2 == (TXTextLayout *)((char *)this + 19144))
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v3 = (v3 + TXTextStyle::isMissingFont(*(TXTextStyle **)(v2 + 16)));
    v2 = *(_QWORD *)(v2 + 8);
  }
  while ((char *)v2 != v1);
  return v3;
}

uint64_t TXTextLayout::getMissingFontName(TXTextLayout *this, int a2, int *a3, PCString *a4)
{
  char *v4;
  uint64_t v5;
  const PCString *MissingFontName;

  v4 = (char *)this + 19344;
  v5 = *((_QWORD *)this + 2419);
  if ((TXTextLayout *)v5 == (TXTextLayout *)((char *)this + 19344))
    return 0;
  while (!TXTextStyle::isMissingFont(*(TXTextStyle **)(v5 + 16)))
  {
LABEL_5:
    v5 = *(_QWORD *)(v5 + 8);
    if ((char *)v5 == v4)
      return 0;
  }
  if (*a3 != a2)
  {
    ++*a3;
    goto LABEL_5;
  }
  MissingFontName = (const PCString *)TXTextStyle::getMissingFontName(*(TXTextStyle **)(v5 + 16));
  PCString::set(a4, MissingFontName);
  return 1;
}

uint64_t `non-virtual thunk to'TXTextLayout::getMissingFontName(TXTextLayout *this, int a2, int *a3, PCString *a4)
{
  return TXTextLayout::getMissingFontName((TXTextLayout *)((char *)this - 200), a2, a3, a4);
}

uint64_t TXTextLayout::getMissingFontKind(TXTextLayout *this, int a2, int *a3, PCString *a4)
{
  char *v4;
  uint64_t v5;
  PCString v10;

  v4 = (char *)this + 19344;
  v5 = *((_QWORD *)this + 2419);
  if ((TXTextLayout *)v5 == (TXTextLayout *)((char *)this + 19344))
    return 0;
  while (!TXTextStyle::isMissingFont(*(TXTextStyle **)(v5 + 16)))
  {
LABEL_5:
    v5 = *(_QWORD *)(v5 + 8);
    if ((char *)v5 == v4)
      return 0;
  }
  if (*a3 != a2)
  {
    ++*a3;
    goto LABEL_5;
  }
  PCURL::PCURL((PCURL *)&v10, CFSTR("Missing Kind Font"));
  PCString::set(a4, &v10);
  PCString::~PCString(&v10);
  return 1;
}

void sub_1B2905C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTextLayout::getMissingFontKind(TXTextLayout *this, int a2, int *a3, PCString *a4)
{
  return TXTextLayout::getMissingFontKind((TXTextLayout *)((char *)this - 200), a2, a3, a4);
}

uint64_t TXTextLayout::acceptsShapeMasks(TXTextLayout *this)
{
  return (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this);
}

uint64_t `non-virtual thunk to'TXTextLayout::acceptsShapeMasks(TXTextLayout *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 25) + 304))((char *)this - 200);
}

uint64_t TXTextLayout::restrictImageMaskToStencil(TXTextLayout *this)
{
  return (*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this) ^ 1;
}

uint64_t `non-virtual thunk to'TXTextLayout::restrictImageMaskToStencil(TXTextLayout *this)
{
  return (*(unsigned int (**)(char *))(*((_QWORD *)this - 25) + 304))((char *)this - 200) ^ 1;
}

uint64_t TXTextLayout::areEffectsAppliedInScreenSpace(TXTextLayout *this)
{
  return (*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this) ^ 1;
}

uint64_t `non-virtual thunk to'TXTextLayout::areEffectsAppliedInScreenSpace(TXTextLayout *this)
{
  return (*(unsigned int (**)(char *))(*((_QWORD *)this - 841) + 304))((char *)this - 6728) ^ 1;
}

BOOL TXTextLayout::shouldRenumberChannel(TXTextLayout *this, OZChannelBase *a2)
{
  OZFactory *var1;
  __int128 v6;

  var1 = a2->var1;
  v6 = xmmword_1B3054230;
  return (OZFactory::isKindOfClass((unint64_t)var1, (int32x4_t *)&v6) & 1) == 0
      && OZObjectManipulator::shouldRenumberChannel((TXTextLayout *)((char *)this + 216), a2);
}

BOOL `non-virtual thunk to'TXTextLayout::shouldRenumberChannel(TXTextLayout *this, OZChannelBase *a2)
{
  return TXTextLayout::shouldRenumberChannel((TXTextLayout *)((char *)this - 216), a2);
}

void TXTextLayout::deleteMaterialLayer(TXTextLayout *this, unsigned int a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  OZLayeredMaterial *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *i;
  const void *v12;
  TXSequenceBehavior *v13;
  uint64_t v14;

  v4 = (char *)this + 19344;
  v5 = (char *)*((_QWORD *)this + 2419);
  if (v5 != (char *)this + 19344)
  {
    do
    {
      v6 = *((_QWORD *)v5 + 2);
      v7 = *(_QWORD *)(v6 + 480);
      if (a2 >= (unint64_t)((*(_QWORD *)(v6 + 488) - v7) >> 3))
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      v9 = (_QWORD *)*((_QWORD *)v8 + 178);
      if (a3 >= (unint64_t)((uint64_t)(v9[1] - *v9) >> 3))
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      (*(void (**)(void *))(*(_QWORD *)v10 + 712))(v10);
      OZLayeredMaterial::deleteLayer(v8, a3);
      v5 = (char *)*((_QWORD *)v5 + 1);
    }
    while (v5 != v4);
  }
  for (i = (_QWORD *)*((_QWORD *)this + 151); i != (_QWORD *)((char *)this + 1200); i = (_QWORD *)i[1])
  {
    v12 = (const void *)i[2];
    if (v12)
    {
      if (v13)
        TXSequenceBehavior::removeMaterialLayer(v13, a3, a2);
    }
  }
  TXSequenceChannels::removeMaterialLayerChannelsAtIndex((TXTextLayout *)((char *)this + 25032), a3, a2);
  v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  OZDocument::postNotification(*(OZDocument **)(v14 + 1584), 0x80000);
}

void TXTextLayout::setNameOfMaterialAtIndex(TXTextLayout *this, const PCString *a2, unsigned int a3, uint64_t a4, int a5)
{
  char *v5;
  char *v6;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *i;
  const void *v20;
  char *v21;

  v5 = (char *)this + 19344;
  v6 = (char *)*((_QWORD *)this + 2419);
  if (v6 != (char *)this + 19344)
  {
    v12 = 0;
    v13 = a3;
    do
    {
      v14 = *((_QWORD *)v6 + 2);
      v15 = *(_QWORD *)(v14 + 480);
      if (v13 >= (*(_QWORD *)(v14 + 488) - v15) >> 3)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (a5)
      {
        if (!*(_BYTE *)(v16 + 1288))
        {
          (*(void (**)(uint64_t, const PCString *, uint64_t))(*(_QWORD *)(v16 + 16) + 120))(v16 + 16, a2, a4);
          v12 = 1;
        }
      }
      else
      {
        v18 = *(_QWORD *)(v16 + 16);
        v17 = v16 + 16;
        (*(void (**)(uint64_t, const PCString *, uint64_t))(v18 + 120))(v17, a2, a4);
        v12 = 1;
        *(_BYTE *)(v17 + 1272) = 1;
      }
      v6 = (char *)*((_QWORD *)v6 + 1);
    }
    while (v6 != v5);
    if ((v12 & 1) != 0)
    {
      TXSequenceChannels::renameMaterialAtIndex((TXTextLayout *)((char *)this + 25032), a2, a3, a4);
      for (i = (_QWORD *)*((_QWORD *)this + 151); i != (_QWORD *)((char *)this + 1200); i = (_QWORD *)i[1])
      {
        v20 = (const void *)i[2];
        if (v20)
        {
          if (v21)
            TXSequenceChannels::renameMaterialAtIndex((TXSequenceChannels *)(v21 + 816), a2, a3, a4);
        }
      }
    }
  }
}

void `non-virtual thunk to'TXTextLayout::setNameOfMaterialAtIndex(TXTextLayout *this, const PCString *a2, unsigned int a3, uint64_t a4, int a5)
{
  TXTextLayout::setNameOfMaterialAtIndex((TXTextLayout *)((char *)this - 200), a2, a3, a4, a5);
}

uint64_t TXTextLayout::selectMaterialAtIndex(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = this + 19344;
  v3 = *(_QWORD *)(this + 19352);
  if (v3 != this + 19344)
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 232))(*(_QWORD *)(v3 + 16), a2);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t `non-virtual thunk to'TXTextLayout::selectMaterialAtIndex(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = this + 19128;
  v3 = *(_QWORD *)(this + 19136);
  if (v3 != this + 19128)
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 232))(*(_QWORD *)(v3 + 16), a2);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t TXTextLayout::deselectMaterialAtIndex(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = this + 19344;
  v3 = *(_QWORD *)(this + 19352);
  if (v3 != this + 19344)
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 240))(*(_QWORD *)(v3 + 16), a2);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t `non-virtual thunk to'TXTextLayout::deselectMaterialAtIndex(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = this + 19128;
  v3 = *(_QWORD *)(this + 19136);
  if (v3 != this + 19128)
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 240))(*(_QWORD *)(v3 + 16), a2);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t TXTextLayout::getMaterial(TXTextLayout *this, int a2)
{
  char *v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = (char *)this + 19344;
  for (i = *((_QWORD *)this + 2419); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    v5 = *(_QWORD *)(v4 + 480);
    v6 = *(_QWORD *)(v4 + 488);
    while (v5 != v6)
    {
      result = *(_QWORD *)v5;
      if (*(_DWORD *)(*(_QWORD *)v5 + 176) == a2)
        return result;
      v5 += 8;
    }
  }
  return 0;
}

uint64_t `non-virtual thunk to'TXTextLayout::getMaterial(TXTextLayout *this, int a2)
{
  char *v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = (char *)this + 19144;
  for (i = *((_QWORD *)this + 2394); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    v5 = *(_QWORD *)(v4 + 480);
    v6 = *(_QWORD *)(v4 + 488);
    while (v5 != v6)
    {
      result = *(_QWORD *)v5;
      if (*(_DWORD *)(*(_QWORD *)v5 + 176) == a2)
        return result;
      v5 += 8;
    }
  }
  return 0;
}

uint64_t TXTextLayout::getSequenceChannelsForMaterialLayer(TXTextLayout *this, unsigned int a2, int a3)
{
  return TXSequenceChannels::materialLayerSequenceFolder((TXTextLayout *)((char *)this + 25032), a2, a3);
}

uint64_t TXTextLayout::willResetMaterial(TXTextLayout *this, unsigned int a2)
{
  TXTextLayout::removeMaterialFromSequenceBehaviors(this, a2);
  return TXSequenceChannels::removeMaterialChannelsAtIndex((TXTextLayout *)((char *)this + 25032), a2);
}

uint64_t `non-virtual thunk to'TXTextLayout::willResetMaterial(TXTextLayout *this, unsigned int a2)
{
  TXTextLayout::removeMaterialFromSequenceBehaviors((_QWORD *)this - 27, a2);
  return TXSequenceChannels::removeMaterialChannelsAtIndex((TXTextLayout *)((char *)this + 24816), a2);
}

uint64_t TXTextLayout::doResetMaterial(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = this + 19344;
  v3 = *(_QWORD *)(this + 19352);
  if (v3 != this + 19344)
  {
    v4 = a2;
    do
    {
      v5 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v5 + 480);
      if (v4 >= (*(_QWORD *)(v5 + 488) - v6) >> 3)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8 * v4) + 208))(*(_QWORD *)(v6 + 8 * v4));
      this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 280))(v7, 0);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t `non-virtual thunk to'TXTextLayout::doResetMaterial(TXTextLayout *this, unsigned int a2)
{
  return TXTextLayout::doResetMaterial((uint64_t)this - 216, a2);
}

void TXTextLayout::didResetMaterial(TXTextLayout *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  TXTextLayout::getStyleAtCharOffset((uint64_t)this, 0, &v9);
  v4 = *(_QWORD *)(v9 + 480);
  if (a2 >= (unint64_t)((*(_QWORD *)(v9 + 488) - v4) >> 3))
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v5 = *(_QWORD *)(v4 + 8 * a2);
  TXTextLayout::addMaterialToSequenceBehaviors(this, (OZMaterialBase *)v5, a2);
  OZChannel::getValueAsInt((OZChannel *)(v5 + 720), MEMORY[0x1E0CA2E68], 0.0);
  TXSequenceChannels::addMaterialChannels((TXTextLayout *)((char *)this + 25032), (OZMaterialBase *)v5, a2);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B290644C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::didResetMaterial(TXTextLayout *this, unsigned int a2)
{
  TXTextLayout::didResetMaterial((TXTextLayout *)((char *)this - 216), a2);
}

_QWORD *TXTextLayout::doReset3DExtrusionProperties(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v1 = this + 2418;
  v2 = (_QWORD *)this[2419];
  if (v2 != this + 2418)
  {
    do
    {
      v3 = (_QWORD *)v2[2];
      v4 = v3[5079];
      v5 = *(_QWORD ***)v4;
      v6 = *(_QWORD ***)(v4 + 8);
      if (*(_QWORD ***)v4 != v6)
      {
        v7 = v3 + 6075;
        v8 = v3 + 5995;
        v9 = v3 + 6011;
        v10 = v3 + 6094;
        do
        {
          this = *v5;
          if (*v5 != v7 && this != v8 && this != v9 && this != v10)
            this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*this + 288))(this, 0);
          ++v5;
        }
        while (v5 != v6);
      }
      v2 = (_QWORD *)v2[1];
    }
    while (v2 != v1);
  }
  return this;
}

void TXTextLayout::buildRenderGraphForLayer(TXTextLayout *this@<X0>, CMTime *a2@<X1>, const OZRenderGraphState *a3@<X2>, unsigned int *a4@<X4>, int a5@<W3>, int a6@<W5>, PCSharedCount *a7@<X8>)
{
  LiGroup *v13;
  int PrecompType;
  TXTextObject **v15;
  TXTextObject **v16;
  _BOOL4 v18;
  PCSharedCount *v19;
  int OutlineOrder;
  int GlowOrder;
  const OZRenderGraphState *v22;
  _DWORD *v23;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v25;
  PC_Sp_counted_base *v26;
  PC_Sp_counted_base *v27;
  uint64_t v28;
  unsigned int v29;
  void *v30;
  char *v31;
  _BOOL4 v32;
  int v33;
  int v34;
  double v36;
  double v37;
  double v38;
  _BYTE v39[16];
  double v40;
  double v41;
  CMTime v42;
  PCSharedCount v43;
  PCSharedCount v44[2];

  v13 = (LiGroup *)operator new();
  LiGroup::LiGroup(v13);
  v43.var0 = (PC_Sp_counted_base *)v13;
  PCSharedCount::PCSharedCount(v44, (LiGroup *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
  if (!v13)
    throw_PCNullPointerException(1);
  *((_DWORD *)v13 + 130) = *((_DWORD *)this + 70);
  *((_DWORD *)v13 + 132) = a6;
  (*(void (**)(LiGroup *, _QWORD))(*(_QWORD *)v13 + 192))(v13, 0);
  v34 = a6;
  v42 = *a2;
  PrecompType = TXTextLayout::getPrecompType(this, &v42);
  v16 = (TXTextObject **)*((_QWORD *)this + 7353);
  v15 = (TXTextObject **)*((_QWORD *)this + 7354);
  if (v16 != v15)
  {
    v33 = 0;
    v18 = a5 != 3 && PrecompType != 0;
    v32 = v18;
    v31 = (char *)a3 + 224;
    do
    {
      if (!TXCharacterSetIsWhitespaceOrNewline(*((_WORD *)*v16 + 60)))
      {
        TXTextObject::getImageBounds(*v16, (const OZRenderState *)a2, (uint64_t)v39);
        if (v40 != 0.0 && v41 != 0.0)
        {
          v37 = 0.0;
          v38 = 0.0;
          v36 = 0.0;
          TXTextObject::getScale(*v16, a2, &v38, &v37, &v36, 1, 1, 1, 0, 0, 1);
          if ((v38 <= -0.0000001 || v38 >= 0.0000001)
            && (v37 <= -0.0000001 || v37 >= 0.0000001)
            && (v36 <= -0.0000001 || v36 >= 0.0000001))
          {
            v19 = a7;
            OutlineOrder = TXTextLayout::getOutlineOrder(this, *v16);
            GlowOrder = TXTextLayout::getGlowOrder(this, *v16);
            if (!(OutlineOrder | GlowOrder))
            {
              a7 = v19;
              switch(a5)
              {
                case 0:
                  v22 = a3;
                  v23 = (_DWORD *)TXTextLayout::buildSceneObjectForFace(this, (const OZRenderParams *)a2, a3, v16);
                  if (!v23)
                    goto LABEL_100;
                  var0 = v43.var0;
                  if (!v43.var0)
                    throw_PCNullPointerException(1);
                  goto LABEL_91;
                case 1:
                  v22 = a3;
                  v23 = (_DWORD *)TXTextLayout::buildSceneObjectForGlow(this, a2, a3, v16);
                  if (!v23)
                    goto LABEL_100;
                  v25 = v43.var0;
                  if (!v43.var0)
                    throw_PCNullPointerException(1);
                  goto LABEL_79;
                case 2:
                  v22 = a3;
                  v23 = (_DWORD *)TXTextLayout::buildSceneObjectForOutline(this, a2, a3, v16);
                  if (!v23)
                    goto LABEL_100;
                  v26 = v43.var0;
                  if (!v43.var0)
                    throw_PCNullPointerException(1);
                  goto LABEL_87;
                case 3:
                  v22 = a3;
                  v23 = (_DWORD *)TXTextLayout::buildSceneObjectForDropShadow(this, a2, (uint64_t)a3, v16);
                  if (!v23)
                    goto LABEL_100;
                  v27 = v43.var0;
                  if (!v43.var0)
                    throw_PCNullPointerException(1);
                  goto LABEL_95;
                default:
                  goto LABEL_42;
              }
            }
            if (OutlineOrder || GlowOrder != 1)
            {
              if (OutlineOrder != 1 || GlowOrder)
              {
                a7 = v19;
                switch(a5)
                {
                  case 0:
                    v22 = a3;
                    v23 = (_DWORD *)TXTextLayout::buildSceneObjectForGlow(this, a2, a3, v16);
                    if (!v23)
                      goto LABEL_100;
                    v25 = v43.var0;
                    if (!v43.var0)
                      throw_PCNullPointerException(1);
LABEL_79:
                    (*(void (**)(PC_Sp_counted_base *, _DWORD *))(*(_QWORD *)v25 + 152))(v25, v23);
                    v28 = 2;
                    break;
                  case 1:
                    v22 = a3;
                    v23 = (_DWORD *)TXTextLayout::buildSceneObjectForOutline(this, a2, a3, v16);
                    if (!v23)
                      goto LABEL_100;
                    v26 = v43.var0;
                    if (!v43.var0)
                      throw_PCNullPointerException(1);
LABEL_87:
                    (*(void (**)(PC_Sp_counted_base *, _DWORD *))(*(_QWORD *)v26 + 152))(v26, v23);
                    v28 = 1;
                    break;
                  case 2:
                    v22 = a3;
                    v23 = (_DWORD *)TXTextLayout::buildSceneObjectForFace(this, (const OZRenderParams *)a2, a3, v16);
                    if (!v23)
                      goto LABEL_100;
                    var0 = v43.var0;
                    if (!v43.var0)
                      throw_PCNullPointerException(1);
LABEL_91:
                    (*(void (**)(PC_Sp_counted_base *, _DWORD *))(*(_QWORD *)var0 + 152))(var0, v23);
                    v28 = 0;
                    break;
                  case 3:
                    v22 = a3;
                    v23 = (_DWORD *)TXTextLayout::buildSceneObjectForDropShadow(this, a2, (uint64_t)a3, v16);
                    if (!v23)
                      goto LABEL_100;
                    v27 = v43.var0;
                    if (!v43.var0)
                      throw_PCNullPointerException(1);
LABEL_95:
                    (*(void (**)(PC_Sp_counted_base *, _DWORD *))(*(_QWORD *)v27 + 152))(v27, v23);
                    v28 = 3;
                    break;
                  default:
                    goto LABEL_12;
                }
                v23[132] = v34;
                v23[133] = a5;
                v23[134] = ++v33;
                v29 = (*a4)++;
                v23[131] = v29;
                if (v32
                {
                  (*(void (**)(TXTextObject *, void *, char *, CMTime *, uint64_t))(*(_QWORD *)*v16 + 80))(*v16, v30, v31, a2, v28);
                  a7 = v19;
                  a3 = v22;
                }
                else
                {
                  a7 = v19;
LABEL_100:
                  a3 = v22;
                }
              }
              else
              {
                a7 = v19;
                switch(a5)
                {
                  case 0:
                    v22 = a3;
                    v23 = (_DWORD *)TXTextLayout::buildSceneObjectForOutline(this, a2, a3, v16);
                    if (!v23)
                      goto LABEL_100;
                    v26 = v43.var0;
                    if (!v43.var0)
                      throw_PCNullPointerException(1);
                    goto LABEL_87;
                  case 1:
                    v22 = a3;
                    v23 = (_DWORD *)TXTextLayout::buildSceneObjectForFace(this, (const OZRenderParams *)a2, a3, v16);
                    if (!v23)
                      goto LABEL_100;
                    var0 = v43.var0;
                    if (!v43.var0)
                      throw_PCNullPointerException(1);
                    goto LABEL_91;
                  case 2:
                    v22 = a3;
                    v23 = (_DWORD *)TXTextLayout::buildSceneObjectForGlow(this, a2, a3, v16);
                    if (!v23)
                      goto LABEL_100;
                    v25 = v43.var0;
                    if (!v43.var0)
                      throw_PCNullPointerException(1);
                    goto LABEL_79;
                  case 3:
                    v22 = a3;
                    v23 = (_DWORD *)TXTextLayout::buildSceneObjectForDropShadow(this, a2, (uint64_t)a3, v16);
                    if (!v23)
                      goto LABEL_100;
                    v27 = v43.var0;
                    if (!v43.var0)
                      throw_PCNullPointerException(1);
                    goto LABEL_95;
                  default:
                    break;
                }
              }
            }
            else
            {
              a7 = v19;
              switch(a5)
              {
                case 0:
                  v22 = a3;
                  v23 = (_DWORD *)TXTextLayout::buildSceneObjectForGlow(this, a2, a3, v16);
                  if (!v23)
                    goto LABEL_100;
                  v25 = v43.var0;
                  if (!v43.var0)
                    throw_PCNullPointerException(1);
                  goto LABEL_79;
                case 1:
                  v22 = a3;
                  v23 = (_DWORD *)TXTextLayout::buildSceneObjectForFace(this, (const OZRenderParams *)a2, a3, v16);
                  if (!v23)
                    goto LABEL_100;
                  var0 = v43.var0;
                  if (!v43.var0)
                    throw_PCNullPointerException(1);
                  goto LABEL_91;
                case 2:
                  v22 = a3;
                  v23 = (_DWORD *)TXTextLayout::buildSceneObjectForOutline(this, a2, a3, v16);
                  if (!v23)
                    goto LABEL_100;
                  v26 = v43.var0;
                  if (!v43.var0)
                    throw_PCNullPointerException(1);
                  goto LABEL_87;
                case 3:
                  v22 = a3;
                  v23 = (_DWORD *)TXTextLayout::buildSceneObjectForDropShadow(this, a2, (uint64_t)a3, v16);
                  if (!v23)
                    goto LABEL_100;
                  v27 = v43.var0;
                  if (!v43.var0)
                    throw_PCNullPointerException(1);
                  goto LABEL_95;
                default:
LABEL_42:
                  a7 = v19;
                  break;
              }
            }
          }
        }
      }
LABEL_12:
      v16 += 2;
    }
    while (v16 != v15);
  }
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a7, &v43);
  PCSharedCount::~PCSharedCount(v44);
}

void sub_1B2906D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCSharedCount *a15)
{
  PCSharedCount::~PCSharedCount(a15);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getPrecompType(TXTextLayout *this, CMTime *a2)
{
  uint64_t v2;
  char *v5;
  OZChannelBase *v6;
  OZChannelBase *v7;
  char v8;
  const void *v9;
  OZGroup *v10;
  OZGroup *v11;
  int v12;
  const void *v13;
  int v14;
  const CMTime *v15;
  CMTime v17;

  if (!*((_BYTE *)this + 63720))
  {
    v5 = (char *)this + 200;
    if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this))
      v6 = (OZChannelBase *)((char *)this + 6880);
    else
      v6 = 0;
    v7 = (OZChannelBase *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 640))((char *)this + 200);
    v8 = OZElement::checkForForcedPrecompose((OZElement *)((char *)this + 200), v7, v6);
    v9 = (const void *)*((_QWORD *)this + 145);
    if (v9
    {
      v11 = v10;
      do
      {
        v17 = *a2;
        v12 = OZGroup::appliesEffectToChildren(v11, &v17);
        if ((v12 & 1) != 0)
          break;
        v13 = (const void *)*((_QWORD *)v11 + 120);
        if (!v13)
          break;
      }
      while (v11);
    }
    else
    {
      v12 = 0;
    }
    v14 = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this);
    if ((v8 & 1) != 0
      || ((*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)v5 + 1592))((char *)this + 200, MEMORY[0x1E0CA2E68]) & 1) != 0
      || OZElement::getPreserveTransparency((OZElement *)((char *)this + 200), MEMORY[0x1E0CA2E68])
      || (TXTextLayout::isGlowEnabled(this, v15) & 1) != 0
      || ((*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 312))(this) & 1) != 0)
    {
      v2 = 1;
      if (!v14)
        return v2;
    }
    else
    {
      if ((v14 & 1) == 0)
      {
        if (((*(uint64_t (**)(char *))(*(_QWORD *)v5 + 416))((char *)this + 200) & 1) != 0
          || (v12 | (*(unsigned int (**)(char *))(*(_QWORD *)v5 + 1888))((char *)this + 200)) == 1)
        {
          return 1;
        }
        return 2;
      }
      LODWORD(v2) = 0;
    }
    if (((*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this) & 1) != 0
      || ((*(uint64_t (**)(char *))(*(_QWORD *)v5 + 416))((char *)this + 200) & 1) != 0
      || ((*(uint64_t (**)(char *))(*(_QWORD *)v5 + 1864))((char *)this + 200) & 1) != 0
      || ((*(uint64_t (**)(char *))(*(_QWORD *)v5 + 1600))((char *)this + 200) & 1) != 0
      || ((*(uint64_t (**)(char *))(*(_QWORD *)v5 + 1608))((char *)this + 200) & 1) != 0
      || (v2 | (*(unsigned int (**)(char *))(*(_QWORD *)v5 + 1624))((char *)this + 200)) == 1)
    {
      return 0;
    }
    return 2;
  }
  return *((unsigned int *)this + 15931);
}

uint64_t TXTextLayout::buildSceneObjectForFace(TXTextLayout *a1, const OZRenderParams *a2, const OZRenderGraphState *a3, TXTextObject **a4)
{
  TXTextObject *v8;
  _QWORD *v9;
  uint64_t v10;
  CMTime v12;

  v8 = *a4;
  v12 = *(CMTime *)a2;
  if (!TXTextObject::isFaceVisible(v8, &v12))
    return 0;
  v9 = (_QWORD *)operator new();
  TXCachedGlyphRender::TXCachedGlyphRender((uint64_t)v9, (uint64_t)a1, a4, a2, 0);
  v12.value = (CMTimeValue)v9;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v12.timescale, (PCShared_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  if (!v12.value)
    throw_PCNullPointerException(1);
  v10 = TXTextLayout::buildGlyphGeode(a1, (LiImageSource *)v12.value, a2, a3, *a4);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v12.timescale);
  return v10;
}

void sub_1B29070E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4086B62714);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::buildSceneObjectForGlow(TXTextLayout *a1, CMTime *a2, const OZRenderGraphState *a3, TXTextObject **a4)
{
  TXTextObject *v8;
  uint64_t v9;
  PC_Sp_counted_base *v10;
  PCSharedCount v12;
  PCSharedCount v13[2];
  PCSharedCount v14;
  CMTime v15;

  v8 = *a4;
  v15 = *a2;
  v9 = 0;
  if (TXTextObject::isGlowVisible(v8, &v15, 0, 0, 0))
  {
    v10 = (PC_Sp_counted_base *)operator new();
    TXCachedGlyphRender::TXCachedGlyphRender((uint64_t)v10, (uint64_t)a1, a4, (const OZRenderParams *)a2, 2);
    v13[1].var0 = v10;
    PCSharedCount::PCSharedCount(&v14, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    if (!v10)
      throw_PCNullPointerException(1);
    v9 = TXTextLayout::buildGlyphGeode(a1, (LiImageSource *)v10, (const OZRenderParams *)a2, a3, *a4);
    v12.var0 = 0;
    PCSharedCount::PCSharedCount(v13);
    LiSceneObject::setBlendMode(v9, 8, &v12);
    PCSharedCount::~PCSharedCount(v13);
    PCSharedCount::~PCSharedCount(&v14);
  }
  return v9;
}

void sub_1B2907240(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;

  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::buildSceneObjectForOutline(TXTextLayout *a1, CMTime *a2, const OZRenderGraphState *a3, TXTextObject **a4)
{
  TXTextObject *v8;
  uint64_t v9;
  LiImageSource *v10;
  PCSharedCount v12;
  CMTime v13;

  v8 = *a4;
  v13 = *a2;
  v9 = 0;
  if (TXTextObject::isOutlineVisible(v8, &v13, 0, 0))
  {
    v10 = (LiImageSource *)operator new();
    TXCachedGlyphRender::TXCachedGlyphRender((uint64_t)v10, (uint64_t)a1, a4, (const OZRenderParams *)a2, 1);
    PCSharedCount::PCSharedCount(&v12, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    if (!v10)
      throw_PCNullPointerException(1);
    v9 = TXTextLayout::buildGlyphGeode(a1, v10, (const OZRenderParams *)a2, a3, *a4);
    PCSharedCount::~PCSharedCount(&v12);
  }
  return v9;
}

void sub_1B2907378(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4086B62714);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::buildSceneObjectForDropShadow(_DWORD *a1, CMTime *a2, uint64_t a3, TXTextObject **a4)
{
  TXTextObject *v8;
  uint64_t v9;
  LiImageSource *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  TXTextObject *v16;
  double DropShadowDistance;
  TXTextObject *v18;
  double DropShadowAngle;
  double *v20;
  __double2 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  PCSharedCount v26;
  CMTime v27;
  CMTime v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  CMTimeEpoch epoch;
  int v43;
  uint64_t v44;
  uint64_t v45;
  LiImageSource *v46;
  PCSharedCount v47;
  CMTime v48;

  v8 = *a4;
  v48 = *a2;
  v9 = 0;
  if (TXTextObject::isDropShadowVisible(v8, &v48, 0))
  {
    v10 = (LiImageSource *)operator new();
    TXCachedGlyphRender::TXCachedGlyphRender((uint64_t)v10, (uint64_t)a1, a4, (const OZRenderParams *)a2, 3);
    v46 = v10;
    PCSharedCount::PCSharedCount(&v47, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    v9 = operator new();
    LiGeode::LiGeode((LiGeode *)v9, v10);
    *(_DWORD *)(v9 + 520) = a1[70];
    *(_QWORD *)(v9 + 544) = 0x3FF0000000000000;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 280))(v9, 0);
    OZRenderParams::OZRenderParams((OZRenderParams *)&v41);
    v43 = 1;
    v41 = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
    v45 = 0;
    v44 = 0;
    v40 = 0x3FF0000000000000;
    v37 = 0x3FF0000000000000;
    v34 = 0x3FF0000000000000;
    v31 = 0x3FF0000000000000;
    v32 = 0u;
    v33 = 0u;
    v35 = 0u;
    v36 = 0u;
    v38 = 0u;
    v39 = 0u;
    TXTextObject::getTransformMatrix((uint64_t)*a4, (uint64_t)&v31, (uint64_t)&v41, 1, 1, 0, 1, 0.0, 0.0);
    v11 = *((_QWORD *)*a4 + 33);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      v13 = *(std::__shared_weak_count **)(v11 + 16);
      v29 = v12;
      v30 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
    }
    else
    {
      v12 = 0;
      v29 = 0;
      v30 = 0;
    }
    if (OZChannel::getValueAsInt((OZChannel *)(v12 + 19528), MEMORY[0x1E0CA2E68], 0.0))
    {
      v16 = *a4;
      v28 = *a2;
      DropShadowDistance = TXTextObject::getDropShadowDistance(v16, &v28);
      v18 = *a4;
      v27 = *a2;
      DropShadowAngle = TXTextObject::getDropShadowAngle(v18, &v27);
      v20 = (double *)operator new();
      LiImageTransform::LiImageTransform((LiImageTransform *)v20);
      PCSharedCount::PCSharedCount(&v26, (PCShared_base *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
      if (!v20)
        throw_PCNullPointerException(1);
      v21 = __sincos_stret(DropShadowAngle);
      PCMatrix44Tmpl<double>::rightTranslate(v20 + 5, DropShadowDistance * v21.__cosval, DropShadowDistance * v21.__sinval, 0.0);
      LiImageFilterChain::append((LiImageFilterChain *)(v9 + 608), (LiImageFilter *)v20);
      PCSharedCount::~PCSharedCount(&v26);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v31);
    (*(void (**)(_DWORD *, CMTime *, uint64_t, uint64_t))(*(_QWORD *)a1 + 944))(a1, a2, a3, v9);
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 312))(a1) & 1) != 0
      || (*(unsigned int (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 936))(a1, MEMORY[0x1E0CA2E68]))
    {
      *(_BYTE *)(v9 + 554) = 0;
    }
    v22 = v30;
    if (v30)
    {
      v23 = (unint64_t *)&v30->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v41);
    PCSharedCount::~PCSharedCount(&v47);
  }
  return v9;
}

void sub_1B2907714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  PCSharedCount *v37;
  uint64_t v38;

  MEMORY[0x1B5E29170](v38, 0x10B1C40DE3F20C5);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a37);
  PCSharedCount::~PCSharedCount(v37);
  _Unwind_Resume(a1);
}

uint64_t getAttributeForLayer(unsigned int a1, int a2, int a3)
{
  __int128 *v3;

  if (a3 | a2)
  {
    if (a2 || a3 != 1)
    {
      if (a2 != 1 || a3)
      {
        if (a1 < 4)
        {
          v3 = &xmmword_1B3054280;
          return *((unsigned int *)v3 + (int)a1);
        }
      }
      else if (a1 < 4)
      {
        v3 = (__int128 *)&unk_1B3054270;
        return *((unsigned int *)v3 + (int)a1);
      }
    }
    else if (a1 < 4)
    {
      v3 = (__int128 *)&unk_1B3054260;
      return *((unsigned int *)v3 + (int)a1);
    }
  }
  else if (a1 < 3)
  {
    v3 = (__int128 *)&unk_1B3054B64;
    return *((unsigned int *)v3 + (int)a1);
  }
  return 0;
}

void TXTextLayout::buildRenderGraphForLayerAndPlanes(TXTextLayout *this@<X0>, CMTime *a2@<X1>, const OZRenderGraphState *a3@<X2>, unsigned int *a4@<X4>, int a5@<W3>, int a6@<W5>, PCSharedCount *a7@<X8>)
{
  LiGroup *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *i;
  unsigned int *v15;
  int OutlineOrder;
  int GlowOrder;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  PCSharedCount *v22;
  _QWORD *v25;
  _QWORD *v26;
  const OZRenderParams *v27;
  LiImageSource *v28;
  TXTextObject *v29;
  std::__shared_weak_count *v30;
  CMTime v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  CMTime v42;
  PCSharedCount v43;
  PCSharedCount v44;

  v10 = (LiGroup *)operator new();
  LiGroup::LiGroup(v10);
  v43.var0 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v44, (LiGroup *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  if (!v10)
    throw_PCNullPointerException(1);
  *((_DWORD *)v10 + 130) = *((_DWORD *)this + 70);
  *((_DWORD *)v10 + 132) = a6;
  (*(void (**)(LiGroup *, _QWORD))(*(_QWORD *)v10 + 192))(v10, 0);
  v22 = a7;
  v11 = (_QWORD *)*((_QWORD *)this + 7967);
  v12 = (_QWORD *)*((_QWORD *)this + 7968);
  v42 = *a2;
  TXTextLayout::getPrecompType(this, &v42);
  if (v11 != v12)
  {
    v27 = (const OZRenderParams *)a2;
    v25 = v12;
    do
    {
      v13 = *v11;
      v26 = v11;
      v28 = (LiImageSource *)operator new();
      TXGlyphGroupRender::TXGlyphGroupRender((TXGlyphGroupRender *)v28, this, (const OZRenderParams *)a2, (int)((uint64_t)(*(_QWORD *)(v13 + 184) - *(_QWORD *)(v13 + 176)) >> 2));
      v41 = 0x3FF0000000000000;
      v38 = 0x3FF0000000000000;
      v35 = 0x3FF0000000000000;
      v32 = 0x3FF0000000000000;
      v33 = 0u;
      v34 = 0u;
      v36 = 0u;
      v37 = 0u;
      v39 = 0u;
      v40 = 0u;
      v31 = *a2;
      v15 = *(unsigned int **)(v13 + 176);
      for (i = *(unsigned int **)(v13 + 184); v15 != i; ++v15)
      {
        TXTextLayout::getTextObjectWithIndex(this, *v15, &v29);
        if (!TXCharacterSetIsWhitespaceOrNewline(*((_WORD *)v29 + 60)))
        {
          OutlineOrder = TXTextLayout::getOutlineOrder(this, v29);
          GlowOrder = TXTextLayout::getGlowOrder(this, v29);
          v18 = (char *)&loc_1B2907B00
              + 4 * byte_1B305433A[getAttributeForLayer(3 - a5, OutlineOrder, GlowOrder)];
          __asm { BR              X9 }
        }
        v19 = v30;
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      (*(void (**)(LiImageSource *))(*(_QWORD *)v28 + 8))(v28);
      a2 = (CMTime *)v27;
      ++v11;
    }
    while (v26 + 1 != v25);
  }
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(v22, &v43);
  PCSharedCount::~PCSharedCount(&v44);
}

void sub_1B290823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10)
{
  PCSharedCount::~PCSharedCount(a10);
  _Unwind_Resume(a1);
}

_QWORD *TXGlyphGroupRender::addGlyph(_QWORD *result, int a2, uint64_t *a3, __int128 *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[5];

  v5 = result;
  v6 = *a3;
  v7 = a3[1];
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v25 = a4[4];
  v26 = a4[5];
  v27 = a4[6];
  v28 = a4[7];
  v21 = *a4;
  v22 = a4[1];
  v23 = a4[2];
  v24 = a4[3];
  v10 = result[182];
  v11 = result[183];
  if (v10 >= v11)
  {
    v13 = result[181];
    v14 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v10 - v13) >> 3);
    v15 = v14 + 1;
    if (v14 + 1 > 0x1AF286BCA1AF286)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v16 = (uint64_t)(result + 183);
    v17 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v11 - v13) >> 3);
    if (2 * v17 > v15)
      v15 = 2 * v17;
    if (v17 >= 0xD79435E50D7943)
      v18 = 0x1AF286BCA1AF286;
    else
      v18 = v15;
    v29[4] = v5 + 183;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXGlyphRender>>(v16, v18);
    else
      v19 = 0;
    v20 = &v19[152 * v14];
    v29[0] = v19;
    v29[1] = v20;
    v29[3] = &v19[152 * v18];
    *(_DWORD *)v20 = a2;
    *((_QWORD *)v20 + 1) = v6;
    *((_QWORD *)v20 + 2) = v7;
    *(_OWORD *)(v20 + 136) = v28;
    *(_OWORD *)(v20 + 88) = v25;
    *(_OWORD *)(v20 + 120) = v27;
    *(_OWORD *)(v20 + 104) = v26;
    *(_OWORD *)(v20 + 24) = v21;
    *(_OWORD *)(v20 + 40) = v22;
    *(_OWORD *)(v20 + 56) = v23;
    *(_OWORD *)(v20 + 72) = v24;
    v29[2] = v20 + 152;
    std::vector<TXGlyphRender>::__swap_out_circular_buffer(v5 + 181, v29);
    v12 = v5[182];
    result = (_QWORD *)std::__split_buffer<TXGlyphRender>::~__split_buffer((uint64_t)v29);
  }
  else
  {
    *(_DWORD *)v10 = a2;
    *(_QWORD *)(v10 + 8) = v6;
    *(_QWORD *)(v10 + 16) = v7;
    *(_OWORD *)(v10 + 72) = v24;
    *(_OWORD *)(v10 + 56) = v23;
    *(_OWORD *)(v10 + 40) = v22;
    *(_OWORD *)(v10 + 24) = v21;
    *(_OWORD *)(v10 + 136) = v28;
    *(_OWORD *)(v10 + 120) = v27;
    *(_OWORD *)(v10 + 104) = v26;
    *(_OWORD *)(v10 + 88) = v25;
    v12 = v10 + 152;
  }
  v5[182] = v12;
  return result;
}

void sub_1B29085A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__split_buffer<TXGlyphRender>::~__split_buffer(v2 - 120);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void LiImageTransform::LiImageTransform(LiImageTransform *this)
{
  *((_QWORD *)this + 44) = &off_1E65EB048;
  *((_QWORD *)this + 45) = 0;
  *((_BYTE *)this + 368) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E656D6C0);
  *(_QWORD *)this = &off_1E656D5B8;
  *((_QWORD *)this + 44) = &unk_1E656D6A0;
  *((_QWORD *)this + 15) = 0x3FF0000000000000;
  *((_QWORD *)this + 10) = 0x3FF0000000000000;
  *((_QWORD *)this + 5) = 0x3FF0000000000000;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 36) = 0x3FF0000000000000;
  *((_QWORD *)this + 31) = 0x3FF0000000000000;
  *((_QWORD *)this + 26) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 10) = _Q1;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_BYTE *)this + 296) = 0;
  LiClipSet::LiClipSet((LiImageTransform *)((char *)this + 304));
}

void sub_1B2908680(_Unwind_Exception *a1)
{
  uint64_t v1;
  const PCString *v2;
  uint64_t v3;
  const PCString *v4;

  v4 = v2;
  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, v4 + 1);
  *(_QWORD *)(v1 + 352) = v3 + 16;
  *(_BYTE *)(v1 + 368) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 360));
  _Unwind_Resume(a1);
}

uint64_t LiImageFilterChain::append(LiImageFilterChain *this, LiImageFilter *a2)
{
  char *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int (*v11)(const void *, const void *);
  LiImageFilter *v13;
  PCSharedCount v14;
  PCSharedCount v15;

  v3 = (char *)this + 16;
  v13 = a2;
  if (a2)
    a2 = (LiImageFilter *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  PCSharedCount::PCSharedCount(&v14, a2);
  v4 = *((_DWORD *)this + 7);
  if (*((_DWORD *)this + 6) <= v4)
    v5 = (2 * (v4 + 1)) | 1;
  else
    v5 = *((_DWORD *)this + 6);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)v3, v4 + 1, v5);
  v6 = *((_QWORD *)this + 4);
  v7 = *((int *)this + 7) - 1;
  *(_QWORD *)(v6 + 16 * v7) = v13;
  PCSharedCount::PCSharedCount(&v15, &v14);
  PCSharedCount::operator=((uint64_t *)(v6 + 16 * v7 + 8), (uint64_t *)&v15);
  PCSharedCount::~PCSharedCount(&v15);
  PCSharedCount::~PCSharedCount(&v14);
  return LiImageFilterChain::connect((uint64_t)this, v8, v9, v10, v11);
}

void sub_1B2908778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::setGlyphGeodeProperties(TXTextLayout *this, const OZRenderParams *a2, const OZRenderGraphState *a3, LiGeode *a4)
{
  uint64_t DoHighQualityResampling;
  double v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  BOOL v13;
  char v14;
  int ShowDepth;
  uint64_t result;

  DoHighQualityResampling = OZRenderParams::getDoHighQualityResampling(a2);
  (*(void (**)(LiGeode *, uint64_t))(*(_QWORD *)a4 + 280))(a4, DoHighQualityResampling);
  v9 = 0.0;
  if (!*(_BYTE *)a3 || !(*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 1008))(this))
  {
    v10 = 24;
    goto LABEL_8;
  }
  (*(void (**)(LiGeode *, double))(*(_QWORD *)a4 + 192))(a4, *((double *)a3 + 1));
  *((_DWORD *)a4 + 170) = *((_DWORD *)a3 + 12);
  if (*((_BYTE *)a3 + 16))
  {
    (*(void (**)(LiGeode *, double))(*(_QWORD *)a4 + 208))(a4, *((double *)a3 + 3));
    (*(void (**)(LiGeode *, double))(*(_QWORD *)a4 + 224))(a4, *((double *)a3 + 4));
    (*(void (**)(LiGeode *, double))(*(_QWORD *)a4 + 240))(a4, *((double *)a3 + 5));
  }
  v9 = *((double *)a3 + 7);
  if (v9 > 0.0)
  {
    v10 = 32;
LABEL_8:
    (*(void (**)(LiGeode *, double))(*(_QWORD *)a4 + 8 * v10))(a4, v9);
  }
  if (*((_BYTE *)a4 + 552))
    v11 = *((_BYTE *)a3 + 288) == 0;
  else
    v11 = 1;
  v12 = !v11;
  *((_BYTE *)a4 + 552) = v12;
  if (*((_BYTE *)a4 + 553))
    v13 = *((_BYTE *)a3 + 289) == 0;
  else
    v13 = 1;
  v14 = !v13;
  *((_BYTE *)a4 + 553) = v14;
  *((_BYTE *)a4 + 696) = *((_BYTE *)a3 + 88);
  (*(void (**)(TXTextLayout *, LiGeode *, char *, const OZRenderParams *))(*(_QWORD *)this + 976))(this, a4, (char *)a3 + 224, a2);
  ShowDepth = LiRenderingTechnology::getShowDepth((const OZRenderParams *)((char *)a2 + 1316));
  if (ShowDepth)
    LOBYTE(ShowDepth) = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 2104))((char *)this + 200);
  *((_BYTE *)a4 + 555) = ShowDepth;
  (*(void (**)(TXTextLayout *, const OZRenderParams *, const OZRenderGraphState *, LiGeode *))(*(_QWORD *)this + 944))(this, a2, a3, a4);
  result = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 312))(this);
  if ((result & 1) != 0
    || (result = (*(uint64_t (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 936))(this, MEMORY[0x1E0CA2E68]), (_DWORD)result))
  {
    *((_BYTE *)a4 + 554) = 0;
  }
  return result;
}

uint64_t TXTextLayout::clearFontMap(TXTextLayout *this)
{
  PCString **v1;
  PCMutex *v2;

  v1 = (PCString **)((char *)this + 61072);
  v2 = (PCMutex *)((char *)this + 61000);
  PCMutex::lock((PCMutex *)((char *)this + 61000));
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy((uint64_t)v1, v1[1]);
  *v1 = (PCString *)(v1 + 1);
  v1[2] = 0;
  v1[1] = 0;
  return PCMutex::unlock(v2);
}

void TXTextLayout::makeRenderGraphOfElements(TXTextLayout *this, OZRenderState *a2, PCSharedCount *a3, const OZRenderGraphState *a4, int a5)
{
  OZScene **v8;
  LiGroup *v9;
  const CMTime *v10;
  double v11;
  unint64_t isGlowEnabled;
  char *v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t **v24;
  __int128 v25;
  __int128 v26;
  uint64_t **v27;
  uint64_t **v28;
  __int128 v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  const CMTime *v51;
  PC_Sp_counted_base *v52;
  double v53;
  double v54;
  PC_Sp_counted_base *v55;
  uint64_t v56;
  uint64_t *v58;
  CMTime v60;
  CMTime v61;
  _BYTE v62[48];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  _BYTE v69[48];
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  CMTime v76;
  CMTime v77;
  unsigned int v78;
  _DWORD *v79[2];
  CMTime var0;
  PCSharedCount v81;
  PCSharedCount v82;
  OZRenderState v83;
  _BYTE v84[15];
  unsigned int v85[6];

  v8 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v84, v8);
  OZRenderState::OZRenderState(&v83, a2);
  v9 = (LiGroup *)operator new();
  LiGroup::LiGroup(v9);
  v81.var0 = (PC_Sp_counted_base *)v9;
  PCSharedCount::PCSharedCount(&v82, (LiGroup *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  if (!v9)
    throw_PCNullPointerException(1);
  *((_DWORD *)v81.var0 + 130) = *((_DWORD *)this + 70);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 60520), MEMORY[0x1E0CA2E68], 0.0);
  if (v11 >= 4.0)
  {
    if (!v81.var0)
      throw_PCNullPointerException(1);
    isGlowEnabled = TXTextLayout::isGlowEnabled(this, v10);
  }
  else
  {
    if (!v81.var0)
      throw_PCNullPointerException(1);
    isGlowEnabled = 0;
  }
  (*(void (**)(PC_Sp_counted_base *, unint64_t))(*(_QWORD *)v81.var0 + 192))(v81.var0, isGlowEnabled);
  v13 = (char *)this + 200;
  if (((*(unsigned int (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 936))(this, MEMORY[0x1E0CA2E68]) | a5) == 1)
  {
    if (!(*(unsigned int (**)(TXTextLayout *, OZRenderState *))(*(_QWORD *)this + 928))(this, a2)
      && (a5 & 1) == 0)
    {
      v75 = 0x3FF0000000000000;
      v72 = 0x3FF0000000000000;
      *(_QWORD *)&v69[40] = 0x3FF0000000000000;
      *(_QWORD *)v69 = 0x3FF0000000000000;
      memset(&v69[8], 0, 32);
      v70 = 0u;
      v71 = 0u;
      v73 = 0u;
      v74 = 0u;
      v83.var4 = 1;
      (*(void (**)(char *, _BYTE *, OZRenderState *))(*(_QWORD *)v13 + 1256))((char *)this + 200, v69, &v83);
      if (!v81.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, _BYTE *))(*(_QWORD *)v81.var0 + 16))(v81.var0, v69);
    }
  }
  else if ((char *)a2->var5 != v13)
  {
    (*(void (**)(char *, PC_Sp_counted_base *, OZRenderState *))(*(_QWORD *)v13 + 1912))((char *)this + 200, v81.var0, a2);
  }
  var0 = (CMTime)a2->var0;
  v14 = (uint64_t **)((char *)this + 58824);
  if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this)
    && (!*((_QWORD *)this + 7646) || !*((_QWORD *)this + 7647)))
  {
    v15 = (_QWORD *)operator new();
    v15[2] = 0;
    v15[1] = 0;
    *v15 = v15 + 1;
    *((_QWORD *)this + 7646) = v15;
    v16 = (_QWORD *)operator new();
    v16[1] = 0;
    v16[2] = 0;
    *v16 = v16 + 1;
    *((_QWORD *)this + 7647) = v16;
    v17 = *v14;
    v18 = (uint64_t *)*((_QWORD *)this + 7354);
    if (*v14 != v18)
    {
      do
      {
        v20 = (_DWORD *)*v17;
        v19 = (_DWORD *)v17[1];
        v79[0] = (_DWORD *)*v17;
        v79[1] = v19;
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 2);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        if (!TXCharacterSetIsWhitespaceOrNewline(*((_WORD *)v20 + 60)))
        {
          *(_OWORD *)&v69[16] = xmmword_1B304F270;
          *(_OWORD *)&v69[32] = xmmword_1B304F270;
          *(_OWORD *)v69 = xmmword_1B304F270;
          *(_OWORD *)&v62[16] = xmmword_1B304F270;
          *(_OWORD *)&v62[32] = xmmword_1B304F270;
          *(_OWORD *)v62 = xmmword_1B304F270;
          TXTextObject::getBoundingImageAndTypographicVolume((double *)v20, (uint64_t)v69, (uint64_t)v62, (uint64_t)&v83);
          v23 = (uint64_t **)*((_QWORD *)this + 7646);
          v78 = v20[97];
          *(_QWORD *)v85 = &v78;
          v24 = std::__tree<std::__value_type<unsigned int,PCBox<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCBox<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCBox<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v23, &v78, (uint64_t)&std::piecewise_construct, (_DWORD **)v85);
          v26 = *(_OWORD *)&v69[16];
          v25 = *(_OWORD *)&v69[32];
          *(_OWORD *)(v24 + 5) = *(_OWORD *)v69;
          *(_OWORD *)(v24 + 7) = v26;
          *(_OWORD *)(v24 + 9) = v25;
          v27 = (uint64_t **)*((_QWORD *)this + 7647);
          v78 = v20[97];
          *(_QWORD *)v85 = &v78;
          v28 = std::__tree<std::__value_type<unsigned int,PCBox<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCBox<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCBox<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v27, &v78, (uint64_t)&std::piecewise_construct, (_DWORD **)v85);
          v30 = *(_OWORD *)&v62[16];
          v29 = *(_OWORD *)&v62[32];
          *(_OWORD *)(v28 + 5) = *(_OWORD *)v62;
          *(_OWORD *)(v28 + 7) = v30;
          *(_OWORD *)(v28 + 9) = v29;
        }
        if (v19)
        {
          v31 = (unint64_t *)(v19 + 2);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v19);
          }
        }
        v17 += 2;
      }
      while (v17 != v18);
    }
  }
  v58 = (uint64_t *)((char *)this + 61160);
  if (!*((_QWORD *)this + 7645))
  {
    v33 = (_QWORD *)operator new();
    v33[2] = 0;
    v33[1] = 0;
    *v33 = v33 + 1;
    *v58 = (uint64_t)v33;
    v77 = var0;
    OZChannel::getValueAsDouble((OZChannel *)this + 394, &v77, 0.0);
    v35 = v34;
    v76 = var0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 60360), &v76, 0.0);
    v37 = v36;
    OZRenderParams::OZRenderParams((OZRenderParams *)v69, (const OZRenderParams *)a2);
    LODWORD(v70) = 1;
    v68 = 0x3FF0000000000000;
    v65 = 0x3FF0000000000000;
    *(_QWORD *)&v62[40] = 0x3FF0000000000000;
    *(_QWORD *)v62 = 0x3FF0000000000000;
    memset(&v62[8], 0, 32);
    v63 = 0u;
    v64 = 0u;
    v66 = 0u;
    v67 = 0u;
    v38 = *v14;
    v39 = (uint64_t *)*((_QWORD *)this + 7354);
    if (*v14 != v39)
    {
      do
      {
        if (!TXCharacterSetIsWhitespaceOrNewline(*(_WORD *)(*v38 + 120)))
        {
          TXTextObject::getTransformMatrix(*v38, (uint64_t)v62, (uint64_t)v69, 1, 0, 0, 0, v37, v35);
          v85[0] = *(_DWORD *)(*v38 + 388);
          v40 = (uint64_t **)*v58;
          v79[0] = v85;
          v41 = std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v40, v85, (uint64_t)&std::piecewise_construct, v79)+ 5;
          if (v62 != (_BYTE *)v41)
          {
            v42 = 0;
            v43 = v62;
            do
            {
              for (i = 0; i != 4; ++i)
                v41[i] = *(uint64_t **)&v43[i * 8];
              ++v42;
              v41 += 4;
              v43 += 32;
            }
            while (v42 != 4);
          }
        }
        v38 += 2;
      }
      while (v38 != v39);
    }
    OZRenderParams::~OZRenderParams((OZRenderParams *)v69);
  }
  if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this))
  {
    LiGraphBuilder::addGroupAndMakeCurrent(a3, &v81);
    LiGraphBuilder::endInsertingIntoGroup((LiGraphBuilder *)a3);
    v45 = *((_QWORD *)this + 7646);
    if (v45)
    {
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*((_QWORD *)this + 7646), *(_QWORD **)(v45 + 8));
      MEMORY[0x1B5E29170](v45, 0x1020C4062D53EE8);
    }
    *((_QWORD *)this + 7646) = 0;
    v46 = *((_QWORD *)this + 7647);
    if (v46)
    {
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*((_QWORD *)this + 7647), *(_QWORD **)(v46 + 8));
      MEMORY[0x1B5E29170](v46, 0x1020C4062D53EE8);
    }
    *((_QWORD *)this + 7647) = 0;
    v47 = *((_QWORD *)this + 7645);
    if (v47)
    {
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*((_QWORD *)this + 7645), *(_QWORD **)(v47 + 8));
      MEMORY[0x1B5E29170](v47, 0x1020C4062D53EE8);
    }
    *((_QWORD *)this + 7645) = 0;
    v48 = *((_QWORD *)this + 7648);
    if (v48)
    {
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*((_QWORD *)this + 7648), *(_QWORD **)(v48 + 8));
      MEMORY[0x1B5E29170](v48, 0x1020C4062D53EE8);
    }
    *((_QWORD *)this + 7648) = 0;
    TXTextLayout::clearFontMap(this);
    *(_OWORD *)v58 = 0u;
    *(_OWORD *)((char *)this + 61176) = 0u;
  }
  else
  {
    *(_DWORD *)v62 = 1;
    v49 = LiGraphBuilder::getAndIncrementCompositeOrder((LiGraphBuilder *)a3);
    v50 = 0;
    v51 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20312), v51, 0.0))
      {
        v52 = v81.var0;
        if (!v81.var0)
          throw_PCNullPointerException(1);
        TXTextLayout::buildRenderGraphForLayer(this, (CMTime *)a2, a4, (unsigned int *)v62, v50, v49, (PCSharedCount *)v69);
        (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v52 + 152))(v52, *(_QWORD *)v69);
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v69[8]);
      }
      else
      {
        v61 = (CMTime)a2->var0;
        OZChannel::getValueAsDouble((OZChannel *)this + 394, &v61, 0.0);
        v60 = (CMTime)a2->var0;
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 60360), &v60, 0.0);
        TXTextLayout::generateGlyphPlanes(this, (const OZRenderParams *)a2, v53, v54);
        v55 = v81.var0;
        if (!v81.var0)
          throw_PCNullPointerException(1);
        TXTextLayout::buildRenderGraphForLayerAndPlanes(this, (CMTime *)a2, a4, (unsigned int *)v62, v50, v49, (PCSharedCount *)v69);
        (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v55 + 152))(v55, *(_QWORD *)v69);
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v69[8]);
        TXTextLayout::clearGlyphGroups(this);
      }
      ++v50;
    }
    while (v50 != 4);
    v56 = *v58;
    if (*v58)
    {
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*v58, *(_QWORD **)(v56 + 8));
      MEMORY[0x1B5E29170](v56, 0x1020C4062D53EE8);
    }
    *v58 = 0;
    TXTextLayout::clearFontMap(this);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)v69, &v81);
    LiGraphBuilder::add2d(a3, v69);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v69[8]);
  }
  PCSharedCount::~PCSharedCount(&v82);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v84);
}

void sub_1B2909238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10)
{
  uint64_t v10;

  PCSharedCount::~PCSharedCount(a10);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v10 - 136));
  _Unwind_Resume(a1);
}

void TXTextLayout::generateGlyphPlanes(TXTextLayout *this, const OZRenderParams *a2, double a3, double a4)
{
  OZChannel *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  OZScene **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  TXGlyphGroup *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _BOOL4 v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t **v25;
  uint64_t **v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  TXGlyphGroup **v31;
  TXGlyphGroup **v32;
  unint64_t v33;
  TXGlyphGroup **v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  uint64_t shared_owners;
  unint64_t *v43;
  unint64_t v44;
  TXGlyphGroup **v45;
  char *v46;
  char *v47;
  TXGlyphGroup *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  _OWORD v63[3];
  __int128 v64;
  _BYTE v65[32];
  uint64_t v66;
  __int128 v67;
  float64x2_t v68;
  double v69;
  __int128 v70;
  uint64_t v71;
  float64x2_t v72;
  double v73;
  _OWORD v74[8];
  unsigned int v75;
  char v76[8];
  uint64_t v77;
  std::__shared_weak_count *v78;
  int32x4_t v79[3];
  int v80;

  v6 = (OZChannel *)((char *)this + 20464);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 2
    || (v7 = *((_QWORD *)this + 151), (TXTextLayout *)v7 == (TXTextLayout *)((char *)this + 1200)))
  {
LABEL_6:
    if (OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0) != 2)
    {
      v62 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    while (1)
    {
      v8 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 344))(*(_QWORD *)(v7 + 16)) + 8);
      v79[0] = (int32x4_t)xmmword_1B3054240;
      if ((OZFactory::isKindOfClass(v8, v79) & 1) != 0)
        break;
      v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 344))(*(_QWORD *)(v7 + 16)) + 8);
      v79[0] = (int32x4_t)xmmword_1B30541D0;
      if ((OZFactory::isKindOfClass(v9, v79) & 1) != 0)
        break;
      v7 = *(_QWORD *)(v7 + 8);
      if ((TXTextLayout *)v7 == (TXTextLayout *)((char *)this + 1200))
        goto LABEL_6;
    }
  }
  v62 = 0;
LABEL_9:
  OZRenderParams::OZRenderParams((OZRenderParams *)v79, a2);
  v80 = 1;
  v77 = 0;
  v78 = 0;
  v10 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v76, v10);
  v11 = (char *)this + 58824;
  v12 = *((_QWORD *)this + 7353);
  v13 = *((_QWORD *)this + 7354);
  if (v12 == v13)
  {
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v76);
    goto LABEL_86;
  }
  v14 = 0;
  v15 = (char *)this + 63736;
  do
  {
    if (!*(_QWORD *)v12 || TXCharacterSetIsWhitespaceOrNewline(*(_WORD *)(*(_QWORD *)v12 + 120)))
      goto LABEL_13;
    if (v62)
    {
      v16 = *(_QWORD *)(*(_QWORD *)v12 + 264);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        v18 = *(std::__shared_weak_count **)(v16 + 16);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
      }
      else
      {
        v18 = 0;
        v17 = 0;
      }
      if (v17 != v77 || v14 == 0)
      {
        v22 = 0;
        if (v18)
          goto LABEL_30;
      }
      else
      {
        v22 = (int)((*((_QWORD *)v14 + 23) - *((_QWORD *)v14 + 22)) >> 2) < 512;
        if (v18)
        {
LABEL_30:
          v23 = (unint64_t *)&v18->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
            if (v22)
            {
LABEL_34:
              TXGlyphGroup::addTextObjectIndex(v14, *(_DWORD *)(*(_QWORD *)v12 + 388));
              goto LABEL_13;
            }
            goto LABEL_36;
          }
        }
      }
      if (v22)
        goto LABEL_34;
    }
LABEL_36:
    v75 = *(_DWORD *)(*(_QWORD *)v12 + 388);
    v25 = (uint64_t **)*((_QWORD *)v11 + 292);
    *(_QWORD *)&v70 = &v75;
    v26 = std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v25, &v75, (uint64_t)&std::piecewise_construct, (_DWORD **)&v70);
    v27 = *(_OWORD *)(v26 + 15);
    v74[4] = *(_OWORD *)(v26 + 13);
    v74[5] = v27;
    v28 = *(_OWORD *)(v26 + 19);
    v74[6] = *(_OWORD *)(v26 + 17);
    v74[7] = v28;
    v29 = *(_OWORD *)(v26 + 7);
    v74[0] = *(_OWORD *)(v26 + 5);
    v74[1] = v29;
    v30 = *(_OWORD *)(v26 + 11);
    v74[2] = *(_OWORD *)(v26 + 9);
    v74[3] = v30;
    v70 = xmmword_1B304EEE0;
    v72 = 0uLL;
    v71 = 0;
    v73 = 1.0;
    v67 = 0u;
    v68 = 0u;
    v66 = 0x3FF0000000000000;
    v69 = 1.0;
    PCRay3<double>::transform((uint64_t)&v70, (double *)v74);
    PCRay3<double>::transform((uint64_t)&v66, (double *)v74);
    v64 = v70;
    *(_QWORD *)v65 = v71;
    *(float64x2_t *)&v65[8] = vmulq_f64(v72, v68);
    *(double *)&v65[24] = v73 * v69;
    v32 = *(TXGlyphGroup ***)v15;
    v31 = (TXGlyphGroup **)*((_QWORD *)v15 + 1);
    while (v32 != v31)
    {
      if (PCMath::equal((double *)&v64, (double *)*v32, 1.0e-10)
        && (int)((*((_QWORD *)*v32 + 23) - *((_QWORD *)*v32 + 22)) >> 2) < 512)
      {
        TXGlyphGroup::addTextObjectIndex(*v32, *(_DWORD *)(*(_QWORD *)v12 + 388));
        v41 = *(std::__shared_weak_count **)(*(_QWORD *)v12 + 264);
        if (v41)
        {
          shared_owners = v41->__shared_owners_;
          v41 = (std::__shared_weak_count *)v41->__shared_weak_owners_;
          if (v41)
          {
            v43 = (unint64_t *)&v41->__shared_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
        }
        else
        {
          shared_owners = 0;
        }
        v56 = v78;
        v77 = shared_owners;
        v78 = v41;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v14 = *v32;
        goto LABEL_13;
      }
      ++v32;
    }
    v14 = (TXGlyphGroup *)operator new();
    v63[0] = v64;
    v63[1] = *(_OWORD *)v65;
    v63[2] = *(_OWORD *)&v65[16];
    TXGlyphGroup::TXGlyphGroup(v14, v63, *(unsigned int *)(*(_QWORD *)v12 + 388), v74);
    v34 = (TXGlyphGroup **)*((_QWORD *)v15 + 1);
    v33 = *((_QWORD *)v15 + 2);
    if ((unint64_t)v34 >= v33)
    {
      v36 = ((uint64_t)v34 - *(_QWORD *)v15) >> 3;
      if ((unint64_t)(v36 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v37 = v33 - *(_QWORD *)v15;
      v38 = v37 >> 2;
      if (v37 >> 2 <= (unint64_t)(v36 + 1))
        v38 = v36 + 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      if (v39)
        v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v15 + 16), v39);
      else
        v40 = 0;
      v45 = (TXGlyphGroup **)&v40[8 * v36];
      *v45 = v14;
      v35 = v45 + 1;
      v47 = *(char **)v15;
      v46 = (char *)*((_QWORD *)v15 + 1);
      if (v46 != *(char **)v15)
      {
        do
        {
          v48 = (TXGlyphGroup *)*((_QWORD *)v46 - 1);
          v46 -= 8;
          *--v45 = v48;
        }
        while (v46 != v47);
        v46 = *(char **)v15;
      }
      *(_QWORD *)v15 = v45;
      *((_QWORD *)v15 + 1) = v35;
      *((_QWORD *)v15 + 2) = &v40[8 * v39];
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v34 = v14;
      v35 = v34 + 1;
    }
    *((_QWORD *)v15 + 1) = v35;
    v49 = *(std::__shared_weak_count **)(*(_QWORD *)v12 + 264);
    if (v49)
    {
      v50 = v49->__shared_owners_;
      v49 = (std::__shared_weak_count *)v49->__shared_weak_owners_;
      if (v49)
      {
        v51 = (unint64_t *)&v49->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
    }
    else
    {
      v50 = 0;
    }
    v53 = v78;
    v77 = v50;
    v78 = v49;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
LABEL_13:
    v12 += 16;
  }
  while (v12 != v13);
  v59 = v78;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v76);
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_86:
  OZRenderParams::~OZRenderParams((OZRenderParams *)v79);
}

void sub_1B29098C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,int a57,char a58,uint64_t a59,char a60)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a56);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a60);
  _Unwind_Resume(a1);
}

void TXTextLayout::clearGlyphGroups(TXTextLayout *this)
{
  TXGlyphGroup ***v1;
  TXGlyphGroup **v2;
  TXGlyphGroup **v3;

  v1 = (TXGlyphGroup ***)((char *)this + 63736);
  v2 = (TXGlyphGroup **)*((_QWORD *)this + 7967);
  v3 = (TXGlyphGroup **)*((_QWORD *)this + 7968);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
      {
        TXGlyphGroup::~TXGlyphGroup(*v2);
        MEMORY[0x1B5E29170]();
      }
      *v2++ = 0;
    }
    while (v2 != v3);
    v2 = *v1;
  }
  v1[1] = v2;
  std::vector<TXParagraphStyle *>::resize((uint64_t)v1, 0);
}

void `non-virtual thunk to'TXTextLayout::makeRenderGraphOfElements(TXTextLayout *this, OZRenderState *a2, PCSharedCount *a3, const OZRenderGraphState *a4, int a5)
{
  TXTextLayout::makeRenderGraphOfElements((TXTextLayout *)((char *)this - 200), a2, a3, a4, a5);
}

uint64_t TXTextLayout::getPrecompCameraType(TXTextLayout *this, const OZRenderState *a2)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;

  var0 = a2->var0;
  return 2 * (TXTextLayout::getPrecompType(this, (CMTime *)&var0) != 1);
}

uint64_t `non-virtual thunk to'TXTextLayout::getPrecompCameraType(TXTextLayout *this, const OZRenderState *a2)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;

  var0 = a2->var0;
  return 2
       * (TXTextLayout::getPrecompType((TXTextLayout *)((char *)this - 200), (CMTime *)&var0) != 1);
}

BOOL TXTextLayout::isPrecomposed(TXTextLayout *this, const CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return TXTextLayout::getPrecompType(this, &v3) != 2;
}

BOOL `non-virtual thunk to'TXTextLayout::isPrecomposed(TXTextLayout *this, const CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return TXTextLayout::getPrecompType((TXTextLayout *)((char *)this - 200), &v3) != 2;
}

void TXTextLayout::makeRenderImageSource(TXTextLayout *this@<X0>, OZChannelBase *a2@<X1>, const OZRenderGraphState *a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  char *StringPtr;
  LiGroup *v11;
  char *v12;
  LiGraphBuilder *v13;
  LiGraphBuilder *v14;
  const void *v15;
  OZGroup *v16;
  OZGroup *v17;
  const void *v18;
  OZScene **v19;
  OZScene *v20;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t i;
  uint64_t v30;
  int8x16_t v31;
  float64x2_t v32;
  int8x16_t v33;
  LiGraphBuilder *v34;
  __int128 v35;
  float64x2_t v36;
  __int128 v37;
  _BYTE v38[40];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  float64x2_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _OWORD v58[6];
  float64x2_t v59;
  __int128 v60;
  double v61[16];
  char v62[8];
  PCSharedCount v63;
  PCSharedCount v64;
  CMTime v65;
  LiCamera *v66;
  PCSharedCount v67;
  OZRenderState v68[5];
  _BYTE v69[64];
  uint64_t v70[20];
  _QWORD v71[10];
  LiGraphBuilder *v72;
  PCSharedCount v73;
  PCSharedCount v74[2];

  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  if (!PCString::size((PCString *)StringPtr))
  {
    a5->var0 = 0;
    PCSharedCount::PCSharedCount(a5 + 1);
    return;
  }
  v11 = (LiGroup *)operator new();
  LiGroup::LiGroup(v11);
  v73.var0 = (PC_Sp_counted_base *)v11;
  PCSharedCount::PCSharedCount(v74, (LiGroup *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  if (!v11)
    throw_PCNullPointerException(1);
  v12 = (char *)this + 200;
  *((_DWORD *)v11 + 130) = *((_DWORD *)this + 70);
  v13 = (LiGraphBuilder *)*((_QWORD *)a3 + 37);
  v72 = 0;
  if (v13)
  {
    if ((_DWORD)a4)
    {
LABEL_6:
      OZChannelBase::setRangeName(a2, (const PCString *)v68);
      v14 = (LiGraphBuilder *)operator new();
      LiGraphBuilder::LiGraphBuilder(v14, &v73, v68);
      goto LABEL_10;
    }
  }
  else
  {
    v13 = (LiGraphBuilder *)(*(uint64_t (**)(char *, OZChannelBase *))(*(_QWORD *)v12 + 1984))((char *)this + 200, a2);
    v72 = v13;
    if ((_DWORD)a4)
      goto LABEL_6;
  }
  v14 = (LiGraphBuilder *)operator new();
  LiGraphBuilder::LiGraphBuilder(v14, v13);
  LiGraphBuilder::addGroupAndMakeCurrent((PCSharedCount *)v14, &v73);
  LiGraphBuilder::setLights((uint64_t)v14, (uint64_t)a3 + 224);
LABEL_10:
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v69, a3);
  OZRenderParams::OZRenderParams((OZRenderParams *)v68, (const OZRenderParams *)a2);
  v34 = v14;
  v71[9] = v14;
  (*(void (**)(LiCamera **__return_ptr, char *, OZChannelBase *, uint64_t))(*(_QWORD *)v12 + 2088))(&v66, (char *)this + 200, a2, a4);
  v15 = (const void *)*((_QWORD *)this + 145);
  if (v15)
  {
    if (v16)
    {
      v17 = v16;
      do
      {
        v65 = *(CMTime *)&a2->var0;
        if ((OZGroup::appliesEffectToChildren(v17, &v65) & 1) != 0)
          break;
        v18 = (const void *)*((_QWORD *)v17 + 120);
        if (!v18)
          break;
      }
      while (v17);
    }
  }
  (*(void (**)(TXTextLayout *, OZRenderState *, LiGraphBuilder *, _BYTE *, uint64_t))(*(_QWORD *)this + 904))(this, v68, v14, v69, a4);
  LiGraphBuilder::render2d((const PCSharedCount *)v14, &v63);
  if ((_DWORD)a4)
  {
    v19 = (OZScene **)Li3DEngineScene::sceneManager(this);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v62, v19);
    if (!v63.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, LiCamera *))(*(_QWORD *)v63.var0 + 184))(v63.var0, v66);
    v68[0].var4 = 1;
    v68[0].var5 = (OZTransformNode *)((char *)this + 200);
    v20 = (OZScene *)(*(uint64_t (**)(char *))(*(_QWORD *)v12 + 272))((char *)this + 200);
    OZScene::calcWorldToFilmSpaceMatrixForCamera(v20, v66, v61);
    v59 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v35 = _Q0;
    v60 = _Q0;
    memset(v58, 0, sizeof(v58));
    v26 = (uint64_t *)*((_QWORD *)this + 7353);
    v27 = (uint64_t *)*((_QWORD *)this + 7354);
    if (v26 != v27)
    {
      do
      {
        if (!TXCharacterSetIsWhitespaceOrNewline(*(_WORD *)(*v26 + 120)))
        {
          v57 = 0x3FF0000000000000;
          v54 = 0x3FF0000000000000;
          v51 = 0x3FF0000000000000;
          v48 = 0x3FF0000000000000;
          v49 = 0u;
          v50 = 0u;
          v52 = 0u;
          v53 = 0u;
          v55 = 0u;
          v56 = 0u;
          TXTextObject::getTransformMatrix(*v26, (uint64_t)&v48, (uint64_t)v68, 1, 1, 0, 0, 0.0, 0.0);
          v46 = 0uLL;
          v47 = v35;
          v45 = 0x3FF0000000000000;
          v42 = 0x3FF0000000000000;
          v39 = 0x3FF0000000000000;
          *(_QWORD *)v38 = 0x3FF0000000000000;
          memset(&v38[8], 0, 32);
          v40 = 0u;
          v41 = 0u;
          v43 = 0u;
          v44 = 0u;
          TXTextObject::getTextureBounds((TXTextObject *)*v26, v68, 0, (float64x2_t *)v38, 0, 0, (uint64_t)&v36, 0.0);
          v46 = v36;
          v47 = v37;
          if (OZChannel::getValueAsInt((OZChannel *)(*(_QWORD *)(*v26 + 544) + 20720), MEMORY[0x1E0CA2E68], 0.0)|| (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*v26 + 544) + 296))(*(_QWORD *)(*v26 + 544)))
          {
            TXTextObject::getImageBounds((TXTextObject *)*v26, (const OZRenderState *)a2, (uint64_t)&v36);
            v46 = v36;
            v47 = v37;
          }
          v28 = 0;
          *(_OWORD *)v38 = 0uLL;
          *(_OWORD *)&v38[16] = v35;
          do
          {
            TXTextObject::getTransformedImageCornersWithFourCornerPinning(*v26, v68, v28, (double *)&v48, (uint64_t)v58, &v46);
            for (i = 0; i != 96; i += 24)
            {
              v30 = *(_QWORD *)((char *)&v58[1] + i);
              v36 = *(float64x2_t *)((char *)v58 + i);
              *(_QWORD *)&v37 = v30;
              *((_QWORD *)&v37 + 1) = 0x3FF0000000000000;
              PCMatrix44Tmpl<double>::transform<double>(v61, v36.f64, v36.f64);
              v31 = (int8x16_t)vmulq_n_f64(v36, 1.0 / *((double *)&v37 + 1));
              v32.f64[0] = *(float64_t *)&v38[16];
              if (*(double *)&v38[16] >= 0.0 && *(double *)&v38[24] >= 0.0)
              {
                v32.f64[1] = *(float64_t *)&v38[24];
                v33 = (int8x16_t)vaddq_f64(v32, *(float64x2_t *)v38);
                *(int8x16_t *)v38 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)v38, (float64x2_t)v31), v31, *(int8x16_t *)v38);
                *(float64x2_t *)&v38[16] = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v31, (float64x2_t)v33), v31, v33), *(float64x2_t *)v38);
              }
              else
              {
                *(int8x16_t *)v38 = v31;
                *(_OWORD *)&v38[16] = 0uLL;
              }
            }
            ++v28;
          }
          while (v28 != 4);
          PCRect<double>::operator|=(&v59, (float64x2_t *)v38);
        }
        v26 += 2;
      }
      while (v26 != v27);
      v14 = v34;
      if (*(double *)&v60 >= 0.0 && *((double *)&v60 + 1) >= 0.0)
      {
        if (!v63.var0)
          throw_PCNullPointerException(1);
        LiRenderer::setBoundary((uint64_t)v63.var0, (uint64_t)&v59);
      }
    }
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v62);
  }
  LiGraphBuilder::~LiGraphBuilder(v14);
  MEMORY[0x1B5E29170]();
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a5, &v63);
  PCSharedCount::~PCSharedCount(&v64);
  PCSharedCount::~PCSharedCount(&v67);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v68);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v71);
  std::__list_imp<unsigned int>::clear(v70);
  if (v72)
  {
    LiGraphBuilder::~LiGraphBuilder(v72);
    MEMORY[0x1B5E29170]();
  }
  PCSharedCount::~PCSharedCount(v74);
}

void sub_1B290A0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11)
{
  uint64_t v11;

  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&STACK[0x298]);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x2A8]);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x2D8]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x2E0]);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x950]);
  std::__list_imp<unsigned int>::clear(&STACK[0x8B0]);
  std::unique_ptr<LiGraphBuilder>::reset[abi:ne180100]((LiGraphBuilder **)(v11 - 128), 0);
  PCSharedCount::~PCSharedCount(a11);
  _Unwind_Resume(a1);
}

LiGraphBuilder *std::unique_ptr<LiGraphBuilder>::reset[abi:ne180100](LiGraphBuilder **a1, LiGraphBuilder *a2)
{
  LiGraphBuilder *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    LiGraphBuilder::~LiGraphBuilder(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

void `non-virtual thunk to'TXTextLayout::makeRenderImageSource(TXTextLayout *this@<X0>, OZChannelBase *a2@<X1>, const OZRenderGraphState *a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  TXTextLayout::makeRenderImageSource((TXTextLayout *)((char *)this - 200), a2, a3, a4, a5);
}

{
  TXTextLayout::makeRenderImageSource((TXTextLayout *)((char *)this - 6728), a2, a3, a4, a5);
}

void TXGlyphGroup::addTextObjectIndex(TXGlyphGroup *this, int a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = (char *)this + 192;
  v5 = *((_QWORD *)this + 24);
  v6 = (char *)*((_QWORD *)this + 23);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)*((_QWORD *)this + 22);
    v9 = (v6 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)v8;
    v11 = (uint64_t)(v5 - (_QWORD)v8) >> 1;
    if (v11 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v4, v12);
      v8 = (char *)*((_QWORD *)this + 22);
      v6 = (char *)*((_QWORD *)this + 23);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *((_QWORD *)this + 22) = v14;
    *((_QWORD *)this + 23) = v7;
    *((_QWORD *)this + 24) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v6 = a2;
    v7 = v6 + 4;
  }
  *((_QWORD *)this + 23) = v7;
}

BOOL PCRay3<double>::transform(uint64_t a1, double *a2)
{
  double v4;
  double *v5;
  double v6;
  float64x2_t v8;
  double v9;

  v4 = *(double *)(a1 + 16) + *(double *)(a1 + 40);
  v5 = (double *)(a1 + 24);
  v8 = vaddq_f64(*(float64x2_t *)a1, *(float64x2_t *)(a1 + 24));
  v9 = v4;
  PCMatrix44Tmpl<double>::transform<double>(a2, (double *)a1, (double *)a1);
  PCMatrix44Tmpl<double>::transform<double>(a2, v8.f64, v8.f64);
  v6 = v9 - *(double *)(a1 + 16);
  *(float64x2_t *)v5 = vsubq_f64(v8, *(float64x2_t *)a1);
  *(double *)(a1 + 40) = v6;
  return PCVector3<double>::normalize(v5, 0.000000100000001);
}

void TXTextLayout::buildRenderGraph(TXTextLayout *this, OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  OZScene **v8;
  char *StringPtr;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  const void *v20;
  TXSequenceBehavior *v21;
  TXSequenceBehavior *v22;
  char *v23;
  int v24;
  int PrecompType;
  uint64_t i;
  char *v27;
  __int128 v28;
  char *v29;
  int v30;
  _QWORD *v31;
  PCShared_base *v32;
  uint64_t j;
  const void *v34;
  TXSequenceBehavior *v35;
  LiGraphBuilder *v36;
  OZRenderGraphState *v37;
  _BYTE v38[128];
  CMTime v39;
  uint64_t v40[20];
  uint64_t v41;
  CMTime v42;
  CMTime v43;
  uint64_t v44[20];
  uint64_t v45;
  __int128 v46;
  int64_t var3;
  CMTime var0;
  OZRenderState v49;
  _BYTE v50[16];

  v8 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v50, v8);
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  if (PCString::size((PCString *)StringPtr)
    || this
  {
    OZRenderState::OZRenderState(&v49, a2);
    if (!v49.var31)
      goto LABEL_15;
    v10 = (_QWORD *)*((_QWORD *)v49.var31 + 1);
    if (!v10)
      goto LABEL_15;
    v11 = (char *)this + 200;
    v12 = (char *)v49.var31 + 8;
    do
    {
      v13 = v10[4];
      v14 = v13 >= (unint64_t)v11;
      if (v13 >= (unint64_t)v11)
        v15 = v10;
      else
        v15 = v10 + 1;
      if (v14)
        v12 = v10;
      v10 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 == (_QWORD *)v49.var31 + 1
      || (v16 = v12[4], (unint64_t)v11 < v16)
      || v16 == *((_QWORD *)v49.var31 + 5))
    {
LABEL_15:
      *((_BYTE *)this + 63720) = 0;
      *((_BYTE *)this + 63728) = 0;
      *((_QWORD *)this + 7968) = *((_QWORD *)this + 7967);
      std::vector<TXParagraphStyle *>::resize((uint64_t)this + 63736, 0);
      var0 = (CMTime)a2->var0;
      *((_DWORD *)this + 15931) = TXTextLayout::getPrecompType(this, &var0);
      *((_BYTE *)this + 63720) = 1;
      *((_DWORD *)this + 15933) = TXTextLayout::scaleAffectsLayout(this);
      *((_BYTE *)this + 63728) = 1;
      v17 = (char *)this + 200;
      if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 25) + 1440))((char *)this + 200))
      {
        (*(void (**)(char *, OZRenderState *, LiGraphBuilder *))(*(_QWORD *)v17 + 1976))((char *)this + 200, a2, a3);
      }
      else
      {
        v36 = a3;
        v37 = a4;
        v18 = (char *)this + 1200;
        v19 = (char *)*((_QWORD *)this + 151);
        if (v19 != (char *)this + 1200)
        {
          do
          {
            v20 = (const void *)*((_QWORD *)v19 + 2);
            if (v20)
            {
              if (v21)
              {
                v22 = v21;
                v46 = *(_OWORD *)&a2->var0.var0;
                var3 = a2->var0.var3;
                if ((*(unsigned int (**)(TXSequenceBehavior *, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 296))(v21, &v46, 1, 1, 1))
                {
                  v43 = (CMTime)a2->var0;
                  v23 = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
                  v24 = PCString::size((PCString *)v23);
                  TXSequenceBehavior::createInfluenceCache(v22, &v43, v24);
                }
              }
            }
            v19 = (char *)*((_QWORD *)v19 + 1);
          }
          while (v19 != v18);
        }
        OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v43, a4);
        (*(void (**)(char *, OZRenderState *, CMTime *))(*(_QWORD *)v17 + 2064))((char *)this + 200, a2, &v43);
        if ((*(unsigned int (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 936))(this, MEMORY[0x1E0CA2E68]))
        {
          TXTextLayout::doLayout(this, a2, 0);
          v42 = (CMTime)a2->var0;
          PrecompType = TXTextLayout::getPrecompType(this, &v42);
          if (PrecompType == 1)
            LiGraphBuilder::partitionWorld((uint64_t)v36);
          OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v39, v37);
          LiGraphBuilder::getCurrentLocalToWorld(v36, (uint64_t)v38);
          for (i = 0; i != 128; i += 32)
          {
            v27 = (char *)&v39 + i;
            v28 = *(_OWORD *)&v38[i + 16];
            *((_OWORD *)v27 + 6) = *(_OWORD *)&v38[i];
            *((_OWORD *)v27 + 7) = v28;
          }
          OZElement::buildRenderGraph((OZElement *)((char *)this + 200), (CMTime *)a2, v36, (const OZRenderGraphState *)&v39);
          if (PrecompType == 1)
            LiGraphBuilder::partitionWorld((uint64_t)v36);
          PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v41);
          std::__list_imp<unsigned int>::clear(v40);
        }
        else
        {
          (*(void (**)(TXTextLayout *, OZRenderState *))(*(_QWORD *)this + 576))(this, a2);
          (*(void (**)(TXTextLayout *, OZRenderState *, LiGraphBuilder *, CMTime *, _QWORD))(*(_QWORD *)this + 904))(this, a2, v36, &v43, 0);
        }
        v29 = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
        if (PCString::size((PCString *)v29))
        {
          v30 = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 1192))(this) ^ 1;
          if (!v36)
            LOBYTE(v30) = 1;
          if ((v30 & 1) == 0)
          {
            if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this))
            {
              LiGraphBuilder::getCurrentInsertionGroup(v36, (PCSharedCount *)&v39);
              if (!v39.value)
                throw_PCNullPointerException(1);
              (*(void (**)(CMTimeValue, uint64_t))(*(_QWORD *)v39.value + 192))(v39.value, 1);
              PCSharedCount::~PCSharedCount((PCSharedCount *)&v39.timescale);
            }
            v31 = (_QWORD *)TXTextLayout::buildBackgroundGeode(this, (CMTime *)a2, v37);
            v39.value = (CMTimeValue)v31;
            if (v31)
              v32 = (PCShared_base *)((char *)v31 + *(_QWORD *)(*v31 - 24));
            else
              v32 = 0;
            PCSharedCount::PCSharedCount((PCSharedCount *)&v39.timescale, v32);
            LiGraphBuilder::add2d((PCSharedCount *)v36, &v39);
            PCSharedCount::~PCSharedCount((PCSharedCount *)&v39.timescale);
          }
        }
        std::__list_imp<TXTextLayout::HGNodeCacheEntry>::clear((uint64_t *)this + 7584);
        PCSharedMutex::lock((std::mutex *)((char *)this + 60768));
        std::__list_imp<TXTextLayout::HGMetalNodeCacheEntry>::clear((uint64_t *)this + 7609);
        PCSharedMutex::unlock((std::mutex *)((char *)this + 60768));
        *((_BYTE *)this + 63720) = 0;
        *((_BYTE *)this + 63728) = 0;
        for (j = *((_QWORD *)this + 151); (char *)j != v18; j = *(_QWORD *)(j + 8))
        {
          v34 = *(const void **)(j + 16);
          if (v34)
          {
            if (v35)
            {
              v39 = (CMTime)a2->var0;
              TXSequenceBehavior::clearInfluenceCache(v35, &v39);
            }
          }
        }
        PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v45);
        std::__list_imp<unsigned int>::clear(v44);
      }
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v50);
}

void sub_1B290A880(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x2C0]);
  std::__list_imp<unsigned int>::clear(&STACK[0x220]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::buildBackgroundGeode(TXTextLayout *this, CMTime *a2, const OZRenderGraphState *a3)
{
  TXBackgroundRectImageSource *v11;
  CMTimeValue value;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _BYTE *v22;
  _BYTE *v24;
  CMTime v25;
  PCColor v26;
  __int128 v27;
  __int128 v28;

  v27 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v28 = _Q0;
  (*(void (**)(TXTextLayout *, __int128 *, CMTime *))(*(_QWORD *)this + 400))(this, &v27, a2);
  PCColor::PCColor(&v26);
  v25 = *a2;
  OZChannelColor::getColor((TXTextLayout *)((char *)this + 61952), &v25, &v26, 0.0);
  v11 = (TXBackgroundRectImageSource *)operator new();
  TXBackgroundRectImageSource::TXBackgroundRectImageSource(v11);
  v25.value = (CMTimeValue)v11;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v25.timescale, (TXBackgroundRectImageSource *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  value = v25.value;
  if (!v25.value)
    throw_PCNullPointerException(1);
  v13 = v28;
  *(_OWORD *)(v25.value + 16) = v27;
  *(_OWORD *)(value + 32) = v13;
  v14 = *(_OWORD *)&v26.var0.var1[1];
  *(_OWORD *)(value + 48) = *(_OWORD *)&v26.var0.var0;
  *(_OWORD *)(value + 64) = v14;
  *(_OWORD *)(value + 80) = *(_OWORD *)&v26.var0.var1[3];
  PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)(value + 96), &v26.var1._obj);
  v15 = operator new();
  LiGeode::LiGeode((LiGeode *)v15, (LiImageSource *)v25.value);
  *(_DWORD *)(v15 + 520) = *((_DWORD *)this + 70);
  *(_QWORD *)(v15 + 544) = 0x3FF0000000000000;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 280))(v15, 1);
  LiString::LiString((LiString *)&v24, "Background Rect");
  LiString::dec((LiString *)(v15 + 512));
  v16 = v24;
  *(_QWORD *)(v15 + 512) = v24;
  if (v16)
  {
    v17 = (unsigned int *)(v16 - 12);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    if (v24)
    {
      v19 = (unsigned int *)(v24 - 12);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        *v24 = 0;
        if (v24)
          v22 = v24 - 12;
        else
          v22 = 0;
        free(v22);
      }
    }
  }
  TXTextLayout::setGlyphGeodeProperties(this, (const OZRenderParams *)a2, a3, (LiGeode *)v15);
  (*(void (**)(char *, uint64_t, CMTime *))(*((_QWORD *)this + 25) + 1912))((char *)this + 200, v15, a2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v25.timescale);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v26.var1._obj);
  return v15;
}

void sub_1B290AB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _BYTE *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CGColorSpace *a20)
{
  PCSharedCount *v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  if (a10)
  {
    v22 = (unsigned int *)(a10 - 12);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  PCSharedCount::~PCSharedCount(v20);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a20);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout::buildRenderGraph(TXTextLayout *this, OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  TXTextLayout::buildRenderGraph((TXTextLayout *)((char *)this - 200), a2, a3, a4);
}

{
  TXTextLayout::buildRenderGraph((TXTextLayout *)((char *)this - 6728), a2, a3, a4);
}

uint64_t TXTextLayout::setGeodeProperties3D(TXTextLayout *this, CMTime *a2, const OZRenderGraphState *a3, LiGeode *a4)
{
  uint64_t result;
  BOOL v8;
  CMTime v9;

  OZElement::setGeodeProperties3D((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3, a4);
  result = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 312))(this);
  if ((_DWORD)result)
  {
    v9 = *a2;
    result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20312), &v9, 0.0);
    v8 = (_DWORD)result != 0;
  }
  else
  {
    v8 = 0;
  }
  *((_BYTE *)a4 + 556) = v8;
  return result;
}

uint64_t `non-virtual thunk to'TXTextLayout::setGeodeProperties3D(TXTextLayout *this, CMTime *a2, const OZRenderGraphState *a3, LiGeode *a4)
{
  return TXTextLayout::setGeodeProperties3D((TXTextLayout *)((char *)this - 200), a2, a3, a4);
}

uint64_t TXTextLayout::doesTransformFromLocalToScreenSpace(TXTextLayout *this, const OZRenderParams *a2)
{
  int v5;
  BOOL v6;

  if (*((_BYTE *)a2 + 1400))
    return 0;
  if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this))
    return OZElement::doesTransformFromLocalToScreenSpace((uint64_t)this + 200);
  v5 = (*(uint64_t (**)(TXTextLayout *, const OZRenderParams *))(*(_QWORD *)this + 928))(this, a2);
  if ((*(unsigned int (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 936))(this, MEMORY[0x1E0CA2E68]))
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6 || ((*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 312))(this) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(char *, const OZRenderParams *))(*((_QWORD *)this + 25) + 2224))((char *)this + 200, a2);
}

uint64_t `non-virtual thunk to'TXTextLayout::doesTransformFromLocalToScreenSpace(TXTextLayout *this, const OZRenderParams *a2)
{
  return TXTextLayout::doesTransformFromLocalToScreenSpace((TXTextLayout *)((char *)this - 200), a2);
}

PCSharedCount *TXTextLayout::makeGaussianBlur@<X0>(_QWORD *a1@<X1>, const OZRenderParams *a2@<X2>, PCSharedCount *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  PC_Sp_counted_base *v10;
  PCSharedCount *result;
  PC_Sp_counted_base *var0;

  v10 = (PC_Sp_counted_base *)operator new();
  LiCachedGaussianBlur::LiCachedGaussianBlur((uint64_t)v10, a1, a2);
  a3->var0 = v10;
  result = PCSharedCount::PCSharedCount(a3 + 1, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  var0 = a3->var0;
  if (!a3->var0)
    throw_PCNullPointerException(1);
  *((double *)var0 + 5) = a4;
  *((double *)var0 + 6) = a5;
  *((_BYTE *)var0 + 56) = 0;
  return result;
}

void sub_1B290AE08(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::buildGlyphGeode(TXTextLayout *this, LiImageSource *a2, const OZRenderParams *a3, const OZRenderGraphState *a4, const TXTextObject *a5)
{
  uint64_t v10;
  double v11;
  uint64_t **v12;
  uint64_t **v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v20[8];
  unsigned int v21;
  _BYTE v22[48];
  int v23;
  unsigned int *v24;

  v10 = operator new();
  LiGeode::LiGeode((LiGeode *)v10, a2);
  *(_DWORD *)(v10 + 520) = *((_DWORD *)this + 70);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 60520), MEMORY[0x1E0CA2E68], 0.0);
  *(_BYTE *)(v10 + 540) = v11 < 4.0;
  *(_QWORD *)(v10 + 544) = 0x3FF0000000000000;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 280))(v10, 0);
  TXTextLayout::setGlyphGeodeProperties(this, a3, a4, (LiGeode *)v10);
  OZRenderParams::OZRenderParams((OZRenderParams *)v22, a3);
  v23 = 1;
  v21 = *((_DWORD *)a5 + 97);
  v12 = (uint64_t **)*((_QWORD *)this + 7645);
  v24 = &v21;
  v13 = std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v12, &v21, (uint64_t)&std::piecewise_construct, &v24);
  v14 = *(_OWORD *)(v13 + 15);
  v20[4] = *(_OWORD *)(v13 + 13);
  v20[5] = v14;
  v15 = *(_OWORD *)(v13 + 19);
  v20[6] = *(_OWORD *)(v13 + 17);
  v20[7] = v15;
  v16 = *(_OWORD *)(v13 + 7);
  v17 = *(_OWORD *)(v13 + 5);
  v18 = *(_OWORD *)(v13 + 11);
  v20[2] = *(_OWORD *)(v13 + 9);
  v20[3] = v18;
  v20[0] = v17;
  v20[1] = v16;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v10 + 16))(v10, v20);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v22);
  return v10;
}

void sub_1B290AFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a27);
  _Unwind_Resume(a1);
}

void TXTextLayout::addFillSource(uint64_t a1@<X0>, const PCSharedCount *a2@<X1>, TXTextObject *a3@<X2>, CMTime *a4@<X3>, FxColorDescription *a5@<X4>, int a6@<W5>, int a7@<W6>, PCSharedCount *a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>, double a12@<D3>)
{
  PCSharedCount *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  TXTextStyle *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  int FillType;
  uint64_t TextureChannel;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  PC_Sp_counted_base *v40;
  PC_Sp_counted_base *v41;
  PC_Sp_counted_base *v42;
  double v43;
  PC_Sp_counted_base *v44;
  double v45;
  double v46;
  double v47;
  uint64_t GradientChannel;
  uint64_t Gradient;
  _BOOL4 v50;
  OZGradientSource *v51;
  double *TypographicBounds;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  PC_Sp_counted_base *v59;
  unint64_t *v60;
  unint64_t v61;
  PC_Sp_counted_base *v62;
  unint64_t *v63;
  unint64_t v64;
  double v65;
  double v66;
  int ValueAsInt;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  CMTimeValue value;
  double v74;
  __double2 v75;
  unint64_t *v76;
  unint64_t v77;
  double v78;
  double v79;
  CMTime v81;
  CMTime v82;
  PC_Sp_counted_base *var0;
  PCSharedCount v84;
  PCSharedCount v85;
  PCSharedCount v86;
  CMTime v87;
  PCSharedCount v88;
  PCSharedCount v89;
  CMTime v90;
  TXTextStyle *v91;
  std::__shared_weak_count *v92;
  PCSharedCount v93;
  PCSharedCount v94;
  double v95;
  double v96;
  double v97[2];

  a8->var0 = a2->var0;
  v23 = a8 + 1;
  PCSharedCount::PCSharedCount(a8 + 1, a2 + 1);
  v24 = *((_QWORD *)a3 + 33);
  if (v24)
  {
    v26 = *(TXTextStyle **)(v24 + 8);
    v25 = *(std::__shared_weak_count **)(v24 + 16);
    v91 = v26;
    v92 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v91 = 0;
    v92 = 0;
  }
  FillType = TXTextStyle::getFillType(v26, a6);
  if (FillType == 1)
  {
    v45 = 1.0;
    if (a7)
    {
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 60520), MEMORY[0x1E0CA2E68], 0.0);
      v46 = 1.0;
      if (v47 >= 4.0)
      {
        v45 = a9;
        v46 = a10;
      }
    }
    else
    {
      v46 = 1.0;
    }
    var0 = a8->var0;
    PCSharedCount::PCSharedCount(&v84, v23);
    GradientChannel = TXTextStyle::getGradientChannel(v26, a6);
    v82 = *a4;
    Gradient = TXTextStyle::getGradient(v26, a6, &v82, a5);
    v81 = *a4;
    v50 = TXTextLayout::scaleAffectsLayout((TXTextLayout *)a1);
    v51 = (OZGradientSource *)operator new();
    OZGradientSource::OZGradientSource(v51);
    v87.value = (CMTimeValue)v51;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v87.timescale, (OZGradientSource *)((char *)v51 + *(_QWORD *)(*(_QWORD *)v51 - 24)));
    if (!v87.value)
      throw_PCNullPointerException(1);
    (*(void (**)(CMTimeValue, PC_Sp_counted_base *))(*(_QWORD *)v87.value + 168))(v87.value, var0);
    if (!v87.value)
      throw_PCNullPointerException(1);
    *(_QWORD *)(v87.value + 72) = Gradient;
    TypographicBounds = (double *)TXTextObject::getTypographicBounds(a3);
    v53 = *TypographicBounds;
    v54 = TypographicBounds[1];
    v55 = TypographicBounds[2];
    v56 = TypographicBounds[3];
    if (v50)
    {
      v96 = 0.0;
      v97[0] = 0.0;
      v95 = 0.0;
      v57 = *((_QWORD *)a3 + 33);
      if (v57)
      {
        v58 = *(_QWORD *)(v57 + 8);
        v59 = *(PC_Sp_counted_base **)(v57 + 16);
        v93.var0 = (PC_Sp_counted_base *)v58;
        v94.var0 = v59;
        if (v59)
        {
          v60 = (unint64_t *)((char *)v59 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
      }
      else
      {
        v58 = 0;
        v93.var0 = 0;
        v94.var0 = 0;
      }
      v90 = v81;
      OZChannelScale3D::getValue((OZChannelScale3D *)(v58 + 2864), &v90, v97, &v96, &v95, 0.0);
      v62 = v94.var0;
      if (v94.var0)
      {
        v63 = (unint64_t *)((char *)v94.var0 + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v62 + 16))(v62);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v62);
        }
      }
      v53 = v53 * (1.0 / v97[0]);
      v54 = v54 * (1.0 / v96);
      v55 = v55 * (1.0 / v97[0]);
      v56 = v56 * (1.0 / v96);
    }
    OZChannel::getValueAsDouble((OZChannel *)(GradientChannel + 1056), &v81, 0.0);
    v66 = v65;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(GradientChannel + 800), MEMORY[0x1E0CA2E68], 0.0);
    v68 = v46 * v54;
    v69 = v45 * v55 * 0.5;
    v70 = v46 * v56 * 0.5;
    v71 = v45 * v53 + v69;
    v72 = v68 + v70;
    if (ValueAsInt)
    {
      value = v87.value;
      if (!v87.value)
        throw_PCNullPointerException(1);
      *(double *)(v87.value + 40) = v71;
      *(double *)(value + 48) = v72;
      v74 = v70 + v72;
    }
    else
    {
      v75 = __sincos_stret(v66);
      value = v87.value;
      if (!v87.value)
        throw_PCNullPointerException(1);
      *(double *)(v87.value + 40) = v71 - v69 * v75.__cosval;
      *(double *)(value + 48) = v72 - v70 * v75.__sinval;
      v71 = v71 + v69 * v75.__cosval;
      v74 = v72 + v70 * v75.__sinval;
    }
    *(double *)(value + 56) = v71;
    *(double *)(value + 64) = v74;
    *(_DWORD *)(value + 80) = ValueAsInt;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v85, (const PCSharedCount *)&v87);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v87.timescale);
    a8->var0 = v85.var0;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v90, &v86);
    PCSharedCount::operator=((uint64_t *)v23, &v90.value);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v90);
    PCSharedCount::~PCSharedCount(&v86);
    PCSharedCount::~PCSharedCount(&v84);
    v25 = v92;
  }
  else if (FillType == 2 && TXTextStyle::hasTexture(v26, a6))
  {
    TextureChannel = TXTextStyle::getTextureChannel(v26, a6);
    v90 = *a4;
    OZChannel::getValueAsDouble((OZChannel *)(TextureChannel + 760), &v90, 0.0);
    v32 = v31;
    OZChannel::getValueAsDouble((OZChannel *)(TextureChannel + 912), &v90, 0.0);
    v34 = v33;
    TXTextObject::getImageBounds(a3, (const OZRenderState *)a4, (uint64_t)&v90);
    v78 = v34;
    v79 = v32;
    v35 = TXTextObject::getTypographicBounds(a3);
    v36 = *(double *)(v35 + 8);
    v37 = *(double *)(v35 + 24);
    v38 = *(double *)&v90.epoch;
    if (*(double *)&v90.value <= 0.0)
      v39 = -0.0;
    else
      v39 = *(double *)&v90.value;
    v40 = (PC_Sp_counted_base *)operator new();
    TXTextStyle::getTextureLiImageSource(v26, a4, (OZChannelImageWithOptions *)TextureChannel);
    TXTextureDecal::TXTextureDecal((uint64_t)v40, &v88);
    v93.var0 = v40;
    PCSharedCount::PCSharedCount(&v94, (PCShared_base *)((char *)v40 + *(_QWORD *)(*(_QWORD *)v40 - 24)));
    PCSharedCount::~PCSharedCount(&v89);
    v41 = v93.var0;
    if (!v93.var0)
      throw_PCNullPointerException(1);
    v87 = *a4;
    *((_DWORD *)v41 + 90) = OZChannel::getValueAsInt((OZChannel *)(TextureChannel + 1328), &v87, 0.0);
    if (!v93.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v93.var0 + 168))(v93.var0, a2->var0);
    v42 = v93.var0;
    if (!v93.var0)
      throw_PCNullPointerException(1);
    *((double *)v93.var0 + 7) = v79 + v38 * 0.5 + v39;
    *((double *)v42 + 8) = v78 + (v36 + v37) / 3.0;
    if (a7)
    {
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 60520), MEMORY[0x1E0CA2E68], 0.0);
      if (v43 >= 4.0)
      {
        v44 = v93.var0;
        if (!v93.var0)
          throw_PCNullPointerException(1);
        *((double *)v93.var0 + 41) = a9;
        *((double *)v44 + 42) = a10;
        *((double *)v44 + 43) = a11;
        *((double *)v44 + 44) = a12;
      }
    }
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a8->var0, &v93);
    PCSharedCount::~PCSharedCount(&v94);
  }
  if (v25)
  {
    v76 = (unint64_t *)&v25->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B290B618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,PCSharedCount a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  PCSharedCount *v35;
  PCSharedCount *v36;
  PCSharedCount *v37;

  PCSharedCount::~PCSharedCount(v37);
  PCSharedCount::~PCSharedCount(v36);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  PCSharedCount::~PCSharedCount(v35);
  _Unwind_Resume(a1);
}

PC_Sp_counted_base **PCPtr<LiImageSource>::operator=<TXTextureDecal>(PC_Sp_counted_base **a1, const PCSharedCount *a2)
{
  PC_Sp_counted_base *var0;
  PCSharedCount *v4;
  PCSharedCount v6;
  PCSharedCount v7;

  var0 = a2->var0;
  *a1 = a2->var0;
  if (var0)
  {
    v4 = &v6;
    PCSharedCount::PCSharedCount(&v6, a2 + 1);
    PCSharedCount::operator=((uint64_t *)a1 + 1, (uint64_t *)&v6);
  }
  else
  {
    v4 = &v7;
    PCSharedCount::PCSharedCount(&v7);
    PCSharedCount::operator=((uint64_t *)a1 + 1, (uint64_t *)&v7);
  }
  PCSharedCount::~PCSharedCount(v4);
  return a1;
}

void sub_1B290B788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::getLiImageSourceForFace(uint64_t a1@<X0>, const OZRenderParams *a2@<X1>, FxColorDescription *a3@<X2>, TXTextObject **a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, int a7@<W6>, PCSharedCount *a8@<X8>)
{
  int isEmoji;
  PC_Sp_counted_base *var0;
  TXTextObject *v16;
  unint64_t v17;
  uint64_t v18;
  CMTime v19;
  PCSharedCount v20;
  PCSharedCount v21;
  PC_Sp_counted_base *v22;
  PCSharedCount v23;
  CMTime v24;
  double v25;
  double v26;
  PCSharedCount v27;
  PCSharedCount v28;
  PCSharedCount v29;

  *a6 = 1;
  makeTextObjectRender(a4, a2, a5, &v27);
  if (a7)
  {
    isEmoji = TXTextObject::isEmoji(*a4);
    var0 = v27.var0;
    if (isEmoji)
    {
      if (!v27.var0)
        throw_PCNullPointerException(1);
      *((_BYTE *)v27.var0 + 1528) = 0;
      *((_BYTE *)var0 + 13) = 1;
      *((_BYTE *)var0 + 26) = 1;
    }
    else
    {
      if (!v27.var0)
        throw_PCNullPointerException(1);
      *((_BYTE *)v27.var0 + 1528) = 1;
    }
  }
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a8, &v27);
  v25 = 0.0;
  v26 = 0.0;
  v16 = *a4;
  v24 = *(CMTime *)a2;
  TXTextObject::getFaceBlur(v16, &v24, &v26, &v25);
  if (v26 > 0.0 || v25 > 0.0)
  {
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a8->var0, &v27);
    TXTextLayout::makeGaussianBlur(a4, a2, (PCSharedCount *)&v19, v26, v25);
    if (!v19.value)
      throw_PCNullPointerException(1);
    (*(void (**)(CMTimeValue, PC_Sp_counted_base *))(*(_QWORD *)v19.value + 168))(v19.value, a8->var0);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a8->var0, (const PCSharedCount *)&v19);
    v22 = v27.var0;
    PCSharedCount::PCSharedCount(&v23, &v28);
    if (!v22)
      throw_PCNullPointerException(1);
    *((_BYTE *)v22 + 26) = 1;
    PCSharedCount::~PCSharedCount(&v23);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v19.timescale);
  }
  v20.var0 = a8->var0;
  PCSharedCount::PCSharedCount(&v21, a8 + 1);
  TXTextLayout::addFillSource(a1, &v20, *a4, (CMTime *)a2, a3, 0, 0, (PCSharedCount *)&v19, 1.0, 1.0, 0.0, 0.0);
  a8->var0 = (PC_Sp_counted_base *)v19.value;
  PCSharedCount::PCSharedCount(&v29, (const PCSharedCount *)&v19.timescale);
  PCSharedCount::operator=((uint64_t *)&a8[1], (uint64_t *)&v29);
  PCSharedCount::~PCSharedCount(&v29);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v19.timescale);
  PCSharedCount::~PCSharedCount(&v21);
  v19 = *(CMTime *)a2;
  HIDWORD(v17) = HIDWORD(v19.value);
  LODWORD(v17) = *((_DWORD *)*a4 + 97);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 28440), &v19, (double)v17);
  if (!v27.var0)
    throw_PCNullPointerException(1);
  *((_QWORD *)v27.var0 + 190) = v18;
  PCSharedCount::~PCSharedCount(&v28);
}

void sub_1B290BA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,PCSharedCount a23)
{
  PCSharedCount *v23;
  PCSharedCount *v24;

  PCSharedCount::~PCSharedCount(v24);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a10);
  PCSharedCount::~PCSharedCount(v23 + 1);
  PCSharedCount::~PCSharedCount(&a23);
  _Unwind_Resume(a1);
}

PCSharedCount *makeTextObjectRender@<X0>(_QWORD *a1@<X0>, const OZRenderParams *a2@<X1>, uint64_t a3@<X2>, PCSharedCount *a4@<X8>)
{
  PC_Sp_counted_base *v8;

  v8 = (PC_Sp_counted_base *)operator new();
  TXTextObjectRender::TXTextObjectRender((uint64_t)v8, a1, a2, a3);
  a4->var0 = v8;
  return PCSharedCount::PCSharedCount(a4 + 1, (PCShared_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
}

void sub_1B290BB40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C403D84D727);
  _Unwind_Resume(a1);
}

void TXTextLayout::getLiImageSourceForOutline(uint64_t a1@<X0>, const OZRenderParams *a2@<X1>, FxColorDescription *a3@<X2>, TXTextObject **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, char a8@<W7>, PCSharedCount *a9@<X8>, double a10@<D0>)
{
  uint64_t v19;
  uint64_t v20;
  PC_Sp_counted_base *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  PC_Sp_counted_base *var0;
  uint64_t v28;
  PC_Sp_counted_base *v29;
  PC_Sp_counted_base *v30;
  unint64_t *v31;
  unint64_t v32;
  float Size;
  unint64_t *v34;
  unint64_t v35;
  PC_Sp_counted_base *v36;
  PC_Sp_counted_base *v37;
  TXTextObject *v38;
  PCSharedCount *v39;
  PCSharedCount v40;
  PCSharedCount v41;
  PC_Sp_counted_base *v42;
  PCSharedCount v43;
  PC_Sp_counted_base *v44;
  PCSharedCount v45;
  CMTime v46;
  double v47;
  double v48;
  CMTime v49;
  PCSharedCount v50;
  PCSharedCount v51;
  PCSharedCount v52;
  PCSharedCount v53;
  PCSharedCount v54;

  *a7 = 1;
  v19 = *((_QWORD *)*a4 + 33);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(PC_Sp_counted_base **)(v19 + 16);
    v52.var0 = (PC_Sp_counted_base *)v20;
    v53.var0 = v21;
    if (v21)
    {
      v22 = (unint64_t *)((char *)v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
  }
  else
  {
    v20 = 0;
    v52.var0 = 0;
    v53.var0 = 0;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(v20 + 30928), MEMORY[0x1E0CA2E68], 0.0))
    v24 = TXTextObject::isEmoji(*a4) ^ 1;
  else
    v24 = 0;
  if (v53.var0)
  {
    v25 = (unint64_t *)((char *)v53.var0 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v53.var0 + 16))(v53.var0);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v53.var0);
    }
  }
  makeTextObjectRender(a4, a2, a6, &v52);
  var0 = v52.var0;
  if (!v52.var0)
    throw_PCNullPointerException(1);
  *((_BYTE *)v52.var0 + 1528) = a8;
  *((_BYTE *)var0 + 14) = v24;
  if (v24)
  {
    v28 = *((_QWORD *)*a4 + 33);
    if (v28)
    {
      v29 = *(PC_Sp_counted_base **)(v28 + 8);
      v30 = *(PC_Sp_counted_base **)(v28 + 16);
      v50.var0 = v29;
      v51.var0 = v30;
      if (v30)
      {
        v31 = (unint64_t *)((char *)v30 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
    }
    else
    {
      v30 = 0;
      v29 = 0;
      v50.var0 = 0;
      v51.var0 = 0;
    }
    v49 = *(CMTime *)a2;
    Size = TXTextStyle::getSize((OZChannel *)v29, &v49, 0.0);
    if (v30)
    {
      v34 = (unint64_t *)((char *)v30 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v30 + 16))(v30);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v30);
      }
    }
    if (!v52.var0)
      throw_PCNullPointerException(1);
    *((double *)v52.var0 + 2) = fmax(Size * a10 * 0.01, 1.0);
  }
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a9, &v52);
  if ((v24 & 1) == 0)
  {
    v36 = (PC_Sp_counted_base *)operator new();
    TXOutlineFilter::TXOutlineFilter((uint64_t)v36, a4, a2, a5, a6);
    v50.var0 = v36;
    PCSharedCount::PCSharedCount(&v51, (PCShared_base *)((char *)v36 + *(_QWORD *)(*(_QWORD *)v36 - 24)));
    v37 = v50.var0;
    if (!v50.var0)
      throw_PCNullPointerException(1);
    *((double *)v50.var0 + 187) = a10;
    (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v37 + 168))(v37, a9->var0);
    if (!v50.var0)
      throw_PCNullPointerException(1);
    *((_BYTE *)v50.var0 + 1544) = *(_BYTE *)(a1 + 64176);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a9->var0, &v50);
    PCSharedCount::~PCSharedCount(&v51);
  }
  v47 = 0.0;
  v48 = 0.0;
  v38 = *a4;
  v46 = *(CMTime *)a2;
  TXTextObject::getOutlineBlur(v38, &v46, &v48, &v47);
  if (v48 > 0.0 || v47 > 0.0)
  {
    TXTextLayout::makeGaussianBlur(a4, a2, &v50, v48, v47);
    if (!v50.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v50.var0 + 168))(v50.var0, a9->var0);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a9->var0, &v50);
    v44 = v52.var0;
    PCSharedCount::PCSharedCount(&v45, &v53);
    if (!v44)
      throw_PCNullPointerException(1);
    *((_BYTE *)v44 + 26) = 1;
    PCSharedCount::~PCSharedCount(&v45);
    v39 = &v51;
    goto LABEL_49;
  }
  if (*(_BYTE *)(a1 + 63776))
  {
    v42 = v52.var0;
    PCSharedCount::PCSharedCount(&v43, &v53);
    if (!v42)
      throw_PCNullPointerException(1);
    *((_BYTE *)v42 + 26) = 1;
    v39 = &v43;
LABEL_49:
    PCSharedCount::~PCSharedCount(v39);
  }
  v40.var0 = a9->var0;
  PCSharedCount::PCSharedCount(&v41, a9 + 1);
  TXTextLayout::addFillSource(a1, &v40, *a4, (CMTime *)a2, a3, 1, 0, &v50, 1.0, 1.0, 0.0, 0.0);
  a9->var0 = v50.var0;
  PCSharedCount::PCSharedCount(&v54, &v51);
  PCSharedCount::operator=((uint64_t *)&a9[1], (uint64_t *)&v54);
  PCSharedCount::~PCSharedCount(&v54);
  PCSharedCount::~PCSharedCount(&v51);
  PCSharedCount::~PCSharedCount(&v41);
  PCSharedCount::~PCSharedCount(&v53);
}

void sub_1B290BFE8(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  uint64_t v3;

  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1 + 1);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v3 - 120));
  _Unwind_Resume(a1);
}

void TXTextLayout::getLiImageSourceForGlow(uint64_t a1@<X0>, const OZRenderParams *a2@<X1>, FxColorDescription *a3@<X2>, TXTextObject **a4@<X3>, __n128 *a5@<X4>, _BYTE *a6@<X5>, PCSharedCount *a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  TXTextObject *v17;
  TXTextObject *v18;
  TXTextLayout **v19;
  uint64_t v20;
  CMTimeValue v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int ValueAsInt;
  LiImageTransform *v26;
  double v27;
  TXTextObject *v29;
  uint64_t v30;
  __n128 v31;
  PC_Sp_counted_base *var0;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  PCSharedCount v36;
  PCSharedCount v37;
  PC_Sp_counted_base *v38;
  PCSharedCount v39;
  PCSharedCount v40;
  PCSharedCount v41;
  CMTime v42;
  double v43;
  PCSharedCount v44;
  PCSharedCount v45;
  CMTime v46;
  double v47;
  double v48;
  double v49;
  CMTime v50;
  double v51;
  double v52;
  CMTime v53;
  double v54;
  double v55;
  PCSharedCount v56;
  PCSharedCount v57;
  PCSharedCount v58;

  *a6 = 1;
  makeTextObjectRender(a4, a2, (uint64_t)a5, &v56);
  if (!v56.var0)
    throw_PCNullPointerException(1);
  *((_BYTE *)v56.var0 + 25) = 1;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a7, &v56);
  v54 = 0.0;
  v55 = 0.0;
  v17 = *a4;
  v53 = *(CMTime *)a2;
  TXTextObject::getGlowScale(v17, &v53, &v55, &v54, 1);
  v52 = 0.0;
  v51 = 0.0;
  v18 = *a4;
  v50 = *(CMTime *)a2;
  TXTextObject::getGlowOffset(v18, &v50, &v52, &v51, 1);
  v48 = 0.0;
  v49 = 0.0;
  v19 = (TXTextLayout **)*a4;
  v46 = *(CMTime *)a2;
  v47 = 0.0;
  TXTextObject::getPivot(v19, &v49, &v48, &v47, &v46, 1);
  v20 = *((_QWORD *)*a4 + 33);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
    v46.value = v21;
    *(_QWORD *)&v46.timescale = v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v21 = 0;
    v46.value = 0;
    *(_QWORD *)&v46.timescale = 0;
  }
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v21 + 31208), MEMORY[0x1E0CA2E68], 0.0);
  v26 = (LiImageTransform *)operator new();
  LiImageTransform::LiImageTransform(v26, (LiImageSource *)a7->var0);
  v44.var0 = (PC_Sp_counted_base *)v26;
  PCSharedCount::PCSharedCount(&v45, (LiImageTransform *)((char *)v26 + *(_QWORD *)(*(_QWORD *)v26 - 24)));
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 60520), MEMORY[0x1E0CA2E68], 0.0);
  if (v27 < 4.0 && ValueAsInt != 0)
  {
    if (!v44.var0)
      throw_PCNullPointerException(1);
    PCMatrix44Tmpl<double>::rightTranslate((double *)v44.var0 + 5, v52, v51, 0.0);
  }
  if (!v44.var0)
    throw_PCNullPointerException(1);
  PCMatrix44Tmpl<double>::rightTranslate((double *)v44.var0 + 5, v49, v48, 0.0);
  PCMatrix44Tmpl<double>::rightScale((double *)v44.var0 + 5, v55, v54, 1.0);
  PCMatrix44Tmpl<double>::rightTranslate((double *)v44.var0 + 5, -v49, -v48, 0.0);
  PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a7->var0, &v44);
  v29 = *a4;
  v42 = *(CMTime *)a2;
  v43 = 0.0;
  TXTextObject::getGlowRadius(v29, &v42, &v43);
  if (a8 > 0.0 || a9 > 0.0)
  {
    v30 = operator new();
    TXGlowFilter::TXGlowFilter(v30, a4, a2);
    v40.var0 = (PC_Sp_counted_base *)v30;
    PCSharedCount::PCSharedCount(&v41, (PCShared_base *)(v30 + *(_QWORD *)(*(_QWORD *)v30 - 24)));
    if (!v30)
      throw_PCNullPointerException(1);
    *((double *)v40.var0 + 5) = a8;
    *(double *)(v30 + 48) = a9;
    *(double *)(v30 + 1520) = v43;
    v31 = PCWorkingColor::operator=((__n128 *)(v30 + 1528), a5);
    var0 = v40.var0;
    if (!v40.var0)
      throw_PCNullPointerException(1);
    *((_BYTE *)v40.var0 + 56) = 0;
    (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *, __n128))(*(_QWORD *)var0 + 168))(var0, a7->var0, v31);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a7->var0, &v40);
    v38 = v56.var0;
    PCSharedCount::PCSharedCount(&v39, &v57);
    if (!v38)
      throw_PCNullPointerException(1);
    *((_BYTE *)v38 + 26) = 1;
    PCSharedCount::~PCSharedCount(&v39);
    PCSharedCount::~PCSharedCount(&v41);
  }
  v36.var0 = a7->var0;
  PCSharedCount::PCSharedCount(&v37, a7 + 1);
  TXTextLayout::addFillSource(a1, &v36, *a4, (CMTime *)a2, a3, 2, 1, &v40, v55, v54, v49, v48);
  a7->var0 = v40.var0;
  PCSharedCount::PCSharedCount(&v58, &v41);
  PCSharedCount::operator=((uint64_t *)&a7[1], (uint64_t *)&v58);
  PCSharedCount::~PCSharedCount(&v58);
  PCSharedCount::~PCSharedCount(&v41);
  PCSharedCount::~PCSharedCount(&v37);
  PCSharedCount::~PCSharedCount(&v45);
  v33 = *(std::__shared_weak_count **)&v46.timescale;
  if (*(_QWORD *)&v46.timescale)
  {
    v34 = (unint64_t *)(*(_QWORD *)&v46.timescale + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  PCSharedCount::~PCSharedCount(&v57);
}

void sub_1B290C54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  PCSharedCount *v21;
  PCSharedCount *v22;
  PCSharedCount *v23;
  PCSharedCount *v24;
  uint64_t v25;

  PCSharedCount::~PCSharedCount(v23);
  PCSharedCount::~PCSharedCount(v24);
  PCSharedCount::~PCSharedCount(v22);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  PCSharedCount::~PCSharedCount(v21 + 1);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v25 - 112));
  _Unwind_Resume(a1);
}

void LiImageTransform::LiImageTransform(LiImageTransform *this, LiImageSource *a2)
{
  *((_QWORD *)this + 44) = &off_1E65EB048;
  *((_QWORD *)this + 45) = 0;
  *((_BYTE *)this + 368) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E656D6C0);
  *(_QWORD *)this = &off_1E656D5B8;
  *((_QWORD *)this + 44) = &unk_1E656D6A0;
  *((_QWORD *)this + 15) = 0x3FF0000000000000;
  *((_QWORD *)this + 10) = 0x3FF0000000000000;
  *((_QWORD *)this + 5) = 0x3FF0000000000000;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 36) = 0x3FF0000000000000;
  *((_QWORD *)this + 31) = 0x3FF0000000000000;
  *((_QWORD *)this + 26) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 10) = _Q1;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  LiClipSet::LiClipSet((LiImageTransform *)((char *)this + 304));
  (*(void (**)(LiImageTransform *, LiImageSource *))(*(_QWORD *)this + 168))(this, a2);
}

void sub_1B290C714(_Unwind_Exception *a1)
{
  uint64_t v1;
  LiClipSet *v2;
  uint64_t v3;
  const PCString *v4;

  LiClipSet::~LiClipSet(v2);
  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, v4 + 1);
  *(_QWORD *)(v1 + 352) = v3 + 16;
  *(_BYTE *)(v1 + 368) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 360));
  _Unwind_Resume(a1);
}

double PCMatrix44Tmpl<double>::rightScale(double *a1, double a2, double a3, double a4)
{
  double result;

  if (a2 != 1.0)
  {
    *a1 = *a1 * a2;
    a1[4] = a1[4] * a2;
    a1[8] = a1[8] * a2;
    a1[12] = a1[12] * a2;
  }
  if (a3 != 1.0)
  {
    a1[1] = a1[1] * a3;
    a1[5] = a1[5] * a3;
    a1[9] = a1[9] * a3;
    a1[13] = a1[13] * a3;
  }
  result = 1.0;
  if (a4 != 1.0)
  {
    a1[2] = a1[2] * a4;
    a1[6] = a1[6] * a4;
    a1[10] = a1[10] * a4;
    result = a1[14] * a4;
    a1[14] = result;
  }
  return result;
}

uint64_t TXGlowFilter::TXGlowFilter(uint64_t a1, _QWORD *a2, const OZRenderParams *a3)
{
  *(_QWORD *)(a1 + 1544) = &off_1E65EB048;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_BYTE *)(a1 + 1560) = 1;
  LiCachedGaussianBlur::LiCachedGaussianBlur((_QWORD *)a1, (uint64_t *)off_1E64FF468, a2, a3);
  *(_QWORD *)a1 = &unk_1E64FF358;
  *(_QWORD *)(a1 + 1544) = &unk_1E64FF448;
  *(_QWORD *)(a1 + 1520) = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 1528));
  return a1;
}

void sub_1B290C88C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const PCString *v2;
  uint64_t v3;
  const PCString *v4;

  v4 = v2;
  LiCachedGaussianBlur::~LiCachedGaussianBlur((PCSharedCount *)v1, v4 + 1);
  *(_QWORD *)(v1 + 1544) = v3 + 16;
  *(_BYTE *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));
  _Unwind_Resume(a1);
}

void TXTextLayout::getLiImageSourceForDropShadow(uint64_t a1@<X0>, const OZRenderParams *a2@<X1>, FxColorDescription *a3@<X2>, TXTextObject **a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, char a7@<W6>, PCSharedCount *a8@<X8>)
{
  PC_Sp_counted_base *var0;
  TXTextObject *v15;
  TXTextObject *v16;
  LiImageTransform *v17;
  CMTime v18;
  double v19;
  PCSharedCount v20;
  PCSharedCount v21;
  PC_Sp_counted_base *v22;
  PCSharedCount v23;
  PCSharedCount v24;
  PCSharedCount v25;
  CMTime v26;
  double v27;
  double v28;
  PCSharedCount v29;
  PCSharedCount v30;
  PCSharedCount v31;

  *a6 = 1;
  makeTextObjectRender(a4, a2, a5, &v29);
  var0 = v29.var0;
  if (!v29.var0)
    throw_PCNullPointerException(1);
  *((_BYTE *)v29.var0 + 24) = 1;
  *((_BYTE *)var0 + 1528) = a7;
  if (TXTextObject::isEmoji(*a4))
  {
    if (!v29.var0)
      throw_PCNullPointerException(1);
    *((_BYTE *)v29.var0 + 26) = 1;
  }
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a8, &v29);
  v28 = 0.0;
  v15 = *a4;
  v26 = *(CMTime *)a2;
  v27 = 0.0;
  TXTextObject::getDropShadowBlur(v15, &v26, &v28, &v27);
  if (v28 > 0.0 || v27 > 0.0)
  {
    TXTextLayout::makeGaussianBlur(a4, a2, &v24, v28, v27);
    if (!v24.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v24.var0 + 168))(v24.var0, a8->var0);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a8->var0, &v24);
    v22 = v29.var0;
    PCSharedCount::PCSharedCount(&v23, &v30);
    if (!v22)
      throw_PCNullPointerException(1);
    *((_BYTE *)v22 + 26) = 1;
    PCSharedCount::~PCSharedCount(&v23);
    PCSharedCount::~PCSharedCount(&v25);
  }
  v20.var0 = a8->var0;
  PCSharedCount::PCSharedCount(&v21, a8 + 1);
  TXTextLayout::addFillSource(a1, &v20, *a4, (CMTime *)a2, a3, 3, 0, &v24, 1.0, 1.0, 0.0, 0.0);
  a8->var0 = v24.var0;
  PCSharedCount::PCSharedCount(&v31, &v25);
  PCSharedCount::operator=((uint64_t *)&a8[1], (uint64_t *)&v31);
  PCSharedCount::~PCSharedCount(&v31);
  PCSharedCount::~PCSharedCount(&v25);
  PCSharedCount::~PCSharedCount(&v21);
  *(double *)&v31.var0 = 0.0;
  v16 = *a4;
  v18 = *(CMTime *)a2;
  v19 = 0.0;
  TXTextObject::getDropShadowScale(v16, &v18, (double *)&v31, &v19, 1);
  if (fabs(*(double *)&v31.var0 + -1.0) >= 0.0000001 || fabs(v19 + -1.0) >= 0.0000001)
  {
    v17 = (LiImageTransform *)operator new();
    LiImageTransform::LiImageTransform(v17, (LiImageSource *)a8->var0);
    v24.var0 = (PC_Sp_counted_base *)v17;
    PCSharedCount::PCSharedCount(&v25, (LiImageTransform *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
    if (!v24.var0)
      throw_PCNullPointerException(1);
    PCMatrix44Tmpl<double>::rightScale((double *)v24.var0 + 5, *(double *)&v31.var0, v19, 1.0);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a8->var0, &v24);
    PCSharedCount::~PCSharedCount(&v25);
  }
  PCSharedCount::~PCSharedCount(&v30);
}

void sub_1B290CBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, PCSharedCount a18)
{
  PCSharedCount *v18;
  PCSharedCount *v19;
  uint64_t v20;

  PCSharedCount::~PCSharedCount(v19);
  PCSharedCount::~PCSharedCount(&a18);
  PCSharedCount::~PCSharedCount(v18 + 1);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v20 - 80));
  _Unwind_Resume(a1);
}

void sub_1B290CC78()
{
  JUMPOUT(0x1B290CC64);
}

uint64_t TXTextLayout::buildLighting(TXTextLayout *this, LiGeode *a2, const LiLightSet *a3, const OZRenderParams *a4)
{
  int v8;
  BOOL v9;
  uint64_t result;

  v8 = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this);
  if ((*(unsigned int (**)(TXTextLayout *))(*(_QWORD *)this + 312))(this))
    v9 = v8 == 0;
  else
    v9 = 0;
  if (!v9)
  {
    OZElement::buildLighting((OZElement *)((char *)this + 200), a2, a3, a4);
    if ((((*(unsigned int (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 936))(this, MEMORY[0x1E0CA2E68]) ^ 1 | v8) & 1) == 0)
      LiGeode::setLit((uint64_t)a2, 0);
  }
  result = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this);
  if ((_DWORD)result)
    return LiGeode::setLit((uint64_t)a2, 0);
  return result;
}

uint64_t `non-virtual thunk to'TXTextLayout::buildLighting(TXTextLayout *this, LiGeode *a2, const LiLightSet *a3, const OZRenderParams *a4)
{
  return TXTextLayout::buildLighting((TXTextLayout *)((char *)this - 200), a2, a3, a4);
}

uint64_t TXTextLayout::buildMaterials@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;

  OZElement::buildMaterials((OZElement *)(a1 + 200), a2, a3, a4, a5);
  if (*(_BYTE *)(a5 + 101))
    *(_BYTE *)(a5 + 104) = OZRenderParams::getTextRenderQuality((OZRenderParams *)a2) == 6;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  if ((_DWORD)result)
    *(_WORD *)(a5 + 101) = 1;
  return result;
}

void sub_1B290CDCC(_Unwind_Exception *a1)
{
  LiMaterialProperties *v1;

  LiMaterialProperties::~LiMaterialProperties(v1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTextLayout::buildMaterials@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return TXTextLayout::buildMaterials(a1 - 200, a2, a3, a4, a5);
}

double TXTextLayout::castShadowMaxScale(TXTextLayout *this, const OZRenderParams *a2)
{
  double result;
  int TextRenderQuality;
  __int128 v6;
  uint64_t v7;

  v6 = *(_OWORD *)a2;
  v7 = *((_QWORD *)a2 + 2);
  if ((*(unsigned int (**)(TXTextLayout *, __int128 *))(*(_QWORD *)this + 936))(this, &v6))
    return OZElement::castShadowMaxScale((OZElement *)((char *)this + 200), a2);
  TextRenderQuality = OZRenderParams::getTextRenderQuality(a2);
  result = 1.0;
  if (TextRenderQuality == 6)
    return 10.0;
  return result;
}

double `non-virtual thunk to'TXTextLayout::castShadowMaxScale(TXTextLayout *this, const OZRenderParams *a2)
{
  return TXTextLayout::castShadowMaxScale((TXTextLayout *)((char *)this - 200), a2);
}

double TXTextLayout::setShadowBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1))
    *(_QWORD *)&result = OZElement::setShadowBounds(a1 + 200, a2, a3, a4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'TXTextLayout::setShadowBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 - 200) + 304))(a1 - 200))
    *(_QWORD *)&result = OZElement::setShadowBounds(a1, a2, a3, a4).n128_u64[0];
  return result;
}

uint64_t TXTextLayout::canReflect(TXTextLayout *this)
{
  uint64_t result;

  result = OZElement::canReflect((OZElement *)((char *)this + 200));
  if ((_DWORD)result)
    return (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 304))(this);
  return result;
}

uint64_t `non-virtual thunk to'TXTextLayout::canReflect(OZElement *this)
{
  uint64_t result;

  result = OZElement::canReflect(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(char *))(*((_QWORD *)this - 25) + 304))((char *)this - 200);
  return result;
}

__n128 PCRect<int>::operator|=(int32x2_t *a1, int32x2_t *a2)
{
  __int32 v2;
  __int32 v3;
  __n128 result;
  int32x2_t v5;

  v2 = a1[1].i32[0];
  if (v2 < 0 || (v3 = a1[1].i32[1], v3 < 0))
  {
    result = *(__n128 *)a2->i8;
    *(_OWORD *)a1->i8 = *(_OWORD *)a2->i8;
  }
  else
  {
    result.n128_u64[0] = (unint64_t)a2[1];
    if ((result.n128_u32[0] & 0x80000000) == 0 && (result.n128_u32[1] & 0x80000000) == 0)
    {
      v5 = vmin_s32(*a1, *a2);
      result.n128_u64[0] = (unint64_t)vsub_s32(vmax_s32(vadd_s32((int32x2_t)__PAIR64__(v3, v2), *a1), vadd_s32((int32x2_t)result.n128_u64[0], *a2)), v5);
      *a1 = v5;
      a1[1] = (int32x2_t)result.n128_u64[0];
    }
  }
  return result;
}

uint64_t TXTextLayout::isColorAnimated(TXTextLayout *this, OZChannelColorNoAlpha *a2, OZChannelPercent *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  const void *v12;
  void *v13;
  TXTextSequenceBehavior *v14;
  _BOOL4 isChannelEnabled;
  uint64_t result;
  int v18;

  if (a4)
  {
    if (((*((uint64_t (**)(OZChannelPercent *, _QWORD))a3->var0 + 69))(a3, 0) & 1) != 0)
      return 1;
  }
  else if (((*(uint64_t (**)(OZChannelColorNoAlpha *, _QWORD))(*(_QWORD *)a2 + 552))(a2, 0) & 1) != 0
         || ((*((uint64_t (**)(OZChannelPercent *, _QWORD))a3->var0 + 69))(a3, 0) & 1) != 0
         || (OZBehavior::IsChannelAffectedByBehaviors((OZChannelColorNoAlpha *)((char *)a2 + 136), 0) & 1) != 0
         || (OZBehavior::IsChannelAffectedByBehaviors((OZChannelColorNoAlpha *)((char *)a2 + 288), 0) & 1) != 0
         || (OZBehavior::IsChannelAffectedByBehaviors((OZChannelColorNoAlpha *)((char *)a2 + 440), 0) & 1) != 0)
  {
    return 1;
  }
  if ((OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)a3, 0) & 1) != 0)
    return 1;
  v11 = *((_QWORD *)this + 151);
  if ((TXTextLayout *)v11 == (TXTextLayout *)((char *)this + 1200))
    return 0;
  while (1)
  {
    v12 = *(const void **)(v11 + 16);
    if (!v12)
    {
      LODWORD(v13) = 0;
      goto LABEL_20;
    }
    if (v13)
      break;
LABEL_14:
    if (v14)
      goto LABEL_15;
LABEL_20:
    isChannelEnabled = 0;
LABEL_21:
    result = v13 | isChannelEnabled;
    if ((_DWORD)result != 1)
    {
      v11 = *(_QWORD *)(v11 + 8);
      if ((TXTextLayout *)v11 != (TXTextLayout *)((char *)this + 1200))
        continue;
    }
    return result;
  }
  if (!a4
    && ((*(uint64_t (**)(void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 616))(v13, a5, 0, 0) & 1) != 0)
  {
    LODWORD(v13) = 1;
    if (!v14)
    {
      v18 = 0;
      return v13 | v18;
    }
    goto LABEL_16;
  }
  if (((*(uint64_t (**)(void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 616))(v13, a6, 0, 0) & 1) != 0)
  {
    LODWORD(v13) = 1;
    goto LABEL_14;
  }
  LODWORD(v13) = (*(uint64_t (**)(void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 616))(v13, 1044, 0, 0);
  if (!v14)
    goto LABEL_20;
LABEL_15:
  if (a4)
    goto LABEL_17;
LABEL_16:
  if (TXTextSequenceBehavior::isChannelEnabled(v14, a5))
    goto LABEL_32;
LABEL_17:
  if (!TXTextSequenceBehavior::isChannelEnabled(v14, a6))
  {
    isChannelEnabled = TXTextSequenceBehavior::isChannelEnabled(v14, 1044);
    goto LABEL_21;
  }
LABEL_32:
  v18 = 1;
  return v13 | v18;
}

CGColorSpace **TXTextLayout::buildHGNodeForDropShadow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9, __int128 *a10, double *a11, _DWORD *a12, unsigned __int8 a13, char a14)
{
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  unsigned int v17;
  char v18;
  uint64_t *v19;
  uint64_t *v20;
  LiAgent *v21;
  const LiRenderParameters **v22;
  CMTime *v23;
  CMTime *v24;
  TXTextObject **v25;
  TXTextObject **v26;
  uint64_t v27;
  double *v28;
  double *v29;
  OZEaseInInterpolator *RequestedColorDescription;
  CGColorSpaceRef *v31;
  CGColorSpaceRef *v32;
  int DynamicRange;
  PCToneMapMethod *ToneMapMethod;
  TXTextObject *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  TXTextObject *v41;
  double DropShadowDistance;
  TXTextObject *v43;
  double DropShadowAngle;
  double ScenePixelAspectRatio;
  __double2 v46;
  double v47;
  double v48;
  float64x2_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  TXTextObject *v54;
  float64x2_t v55;
  float64x2_t v61;
  float64x2_t v63;
  TXTextObject *v64;
  int ValueAsInt;
  float64x2_t v66;
  int64x2_t v67;
  int v68;
  int isColorAnimated;
  FxColorDescription *v70;
  int64_t var0;
  double v72;
  double v73;
  _QWORD *RenderNodeList;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  double *v81;
  uint64_t i;
  _OWORD *v83;
  __int128 v84;
  int64x2_t v85;
  float64x2_t v87;
  double v88;
  __n128 v89;
  HgcTXColor *v90;
  uint64_t v91;
  unsigned __int8 v92;
  _DWORD *v93;
  OZRenderState *v94;
  uint64_t v95;
  OZRenderState *v96;
  uint64_t j;
  OZRenderState *v98;
  uint64_t v99;
  OZRenderState *v100;
  uint64_t k;
  _DWORD *v102;
  uint64_t m;
  unint64_t n;
  uint64_t v105;
  _OWORD *v106;
  int8x8_t *Hash;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v116;
  int v117;
  char v118;
  unsigned int v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  char v128;
  CGColorSpace *v129;
  std::__shared_weak_count *v130;
  LiImageSource *v131;
  PCSharedCount v132;
  float64x2_t v133;
  double v134;
  double v135;
  __n128 v136[5];
  _QWORD *v137;
  int32x4_t v138[8];
  _BYTE v139[40];
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  float64_t v147;
  __int128 v148;
  __int128 v149;
  float64_t v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  CMTime v157;
  float64_t v158;
  double v159;
  double v160;
  double v161;
  float64x2_t v162;
  CMTime v163;
  float64_t v164;
  float64_t v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  CMTime v176;
  CMTime v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  CMTime v180;
  __n128 v181;
  CGColorSpace *v182;
  OZRenderState v183;
  uint64_t v184;

  v14 = MEMORY[0x1E0C80A78](a1);
  v16 = v15;
  v118 = v18;
  v119 = v17;
  v20 = v19;
  v22 = (const LiRenderParameters **)v21;
  v24 = v23;
  v26 = v25;
  v27 = v14;
  v29 = v28;
  v184 = *MEMORY[0x1E0C80C00];
  RequestedColorDescription = (OZEaseInInterpolator *)LiAgent::getRequestedColorDescription(v21);
  OZEaseInInterpolator::~OZEaseInInterpolator(RequestedColorDescription);
  v32 = v31;
  DynamicRange = FxColorDescription::getDynamicRange((FxColorDescription *)RequestedColorDescription);
  ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod((FxColorDescription *)RequestedColorDescription);
  PCWorkingColor::PCWorkingColor((uint64_t)&v181, v32, DynamicRange, ToneMapMethod);
  v35 = *v26;
  v180 = *v24;
  if ((TXTextObject::isDropShadowVisible(v35, &v180, (PCWorkingColor *)&v181) & 1) == 0)
  {
    *v29 = 0.0;
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v182);
  }
  v36 = *((_QWORD *)*v26 + 33);
  if (v36)
  {
    v38 = *(_QWORD *)(v36 + 8);
    v37 = *(std::__shared_weak_count **)(v36 + 16);
    v178 = v38;
    v179 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v40 = __ldxr(p_shared_owners);
      while (__stxr(v40 + 1, p_shared_owners));
    }
    if (v38)
    {
      v41 = *v26;
      v177 = *v24;
      DropShadowDistance = TXTextObject::getDropShadowDistance(v41, &v177);
      v43 = *v26;
      v176 = *v24;
      DropShadowAngle = TXTextObject::getDropShadowAngle(v43, &v176);
      ScenePixelAspectRatio = OZSceneNode::getScenePixelAspectRatio((OZSceneNode *)(v27 + 200));
      v46 = __sincos_stret(DropShadowAngle);
      v175 = 0x3FF0000000000000;
      v172 = 0x3FF0000000000000;
      v169 = 0x3FF0000000000000;
      v166 = 0x3FF0000000000000;
      v167 = 0u;
      v168 = 0u;
      v170 = 0u;
      v171 = 0u;
      v173 = 0u;
      v174 = 0u;
      v47 = DropShadowDistance * v46.__sinval;
      v48 = DropShadowDistance * v46.__cosval;
      v49.f64[0] = v48 * ScenePixelAspectRatio;
      PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v166, v49, v47, 0.0);
      if (OZChannel::getValueAsInt((OZChannel *)(v27 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 3
        && OZChannel::getValueAsInt((OZChannel *)(v27 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 4
        && LiAgent::haveROI((LiAgent *)v22))
      {
        if (OZRenderParams::getTextRenderQuality((OZRenderParams *)v24))
        {
          v50 = a10[5];
          v124 = a10[4];
          v125 = v50;
          v51 = a10[7];
          v126 = a10[6];
          v127 = v51;
          v52 = a10[1];
          v120 = *a10;
          v121 = v52;
          v53 = a10[3];
          v122 = a10[2];
          v123 = v53;
        }
        else
        {
          LiAgent::getObjectToPixelTransform((LiAgent *)v22, (uint64_t)&v120);
        }
        OZRenderState::OZRenderState(&v183, (const OZRenderState *)v24);
        v183.var4 = 1;
        v165 = 0.0;
        v164 = 0.0;
        v54 = *v26;
        v163 = *v24;
        TXTextObject::getDropShadowBlur(v54, &v163, &v165, &v164);
        TXTextObject::getImageBounds(*v26, &v183, (uint64_t)&v160);
        v55.f64[0] = v165;
        v55.f64[1] = v164;
        __asm { FMOV            V3.2D, #3.0 }
        v61 = vmulq_f64(v55, _Q3);
        __asm { FMOV            V3.2D, #2.0 }
        v63 = vaddq_f64(v61, _Q3);
        v160 = v160 - v63.f64[0];
        v161 = v161 - v63.f64[1];
        v162 = vsubq_f64(v162, vsubq_f64(vnegq_f64(v63), v63));
        v159 = 0.0;
        v158 = 0.0;
        v64 = *v26;
        v157 = *v24;
        TXTextObject::getDropShadowScale(v64, &v157, &v159, &v158, 1);
        v156 = 0x3FF0000000000000;
        v153 = 0x3FF0000000000000;
        v150 = 1.0;
        v147 = 1.0;
        v148 = 0u;
        v149 = 0u;
        v151 = 0u;
        v152 = 0u;
        v154 = 0u;
        v155 = 0u;
        if (v159 != 1.0)
        {
          v147 = v159;
          *(double *)&v148 = v159 * 0.0;
          *((double *)&v148 + 1) = v159 * 0.0;
          *(double *)&v149 = v159 * 0.0;
        }
        if (v158 != 1.0)
        {
          *((double *)&v149 + 1) = v158 * 0.0;
          v150 = v158;
          *(double *)&v151 = v158 * 0.0;
          *((double *)&v151 + 1) = v158 * 0.0;
        }
        ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v38 + 19528), MEMORY[0x1E0CA2E68], 0.0);
        v146 = 0x3FF0000000000000;
        v143 = 0x3FF0000000000000;
        v140 = 0x3FF0000000000000;
        *(_QWORD *)v139 = 0x3FF0000000000000;
        v66.f64[1] = 0.0;
        memset(&v139[8], 0, 32);
        v141 = 0u;
        v142 = 0u;
        v144 = 0u;
        v145 = 0u;
        if (ValueAsInt)
        {
          v66.f64[0] = v48;
          PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v139, v66, v47, 0.0);
          PCMatrix44Tmpl<double>::operator*((uint64_t)v139, &v120, (uint64_t)&v131);
          PCMatrix44Tmpl<double>::operator*((uint64_t)&v131, a9, (uint64_t)&v133);
          PCMatrix44Tmpl<double>::operator*((uint64_t)&v133, v16, (uint64_t)v136);
        }
        else
        {
          PCMatrix44Tmpl<double>::operator*((uint64_t)&v120, a9, (uint64_t)&v131);
          PCMatrix44Tmpl<double>::operator*((uint64_t)&v131, v16, (uint64_t)&v133);
          PCMatrix44Tmpl<double>::operator*((uint64_t)&v133, (__int128 *)&v166, (uint64_t)v136);
        }
        PCMatrix44Tmpl<double>::operator*((uint64_t)v136, (__int128 *)&v147, (uint64_t)v138);
        LiAgent::getROI((__n128 *)v22, v136);
        v67.i64[0] = v136[0].n128_i32[0];
        v67.i64[1] = v136[0].n128_i32[1];
        v133 = vcvtq_f64_s64(v67);
        v134 = (double)v136[0].n128_i32[2];
        v135 = (double)v136[0].n128_i32[3];
        if ((v136[0].n128_u32[2] & 0x80000000) == 0 && (v136[0].n128_u32[3] & 0x80000000) == 0)
        {
          LiImagePolygon::LiImagePolygon((LiImagePolygon *)v136);
          LiImagePolygon::set((uint64_t)v136, &v160, 0);
          liTransformAndClip(v133.f64, (double *)v138[0].i64, (uint64_t **)v136);
          if (((v137[1] - *v137) & 0x1FFFFFFFE0) == 0)
          {
            *v29 = 0.0;
            LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v136);
            goto LABEL_131;
          }
          LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v136);
        }
        v38 = v178;
      }
      v68 = OZChannel::getValueAsInt((OZChannel *)(v38 + 13976), MEMORY[0x1E0CA2E68], 0.0);
      isColorAnimated = TXTextLayout::isColorAnimated((TXTextLayout *)v27, (OZChannelColorNoAlpha *)(v178 + 14232), (OZChannelPercent *)(v178 + 18040), v68, 1021, 1022);
      v117 = v68;
      v160 = 0.0;
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v138);
      v136[0] = (__n128)xmmword_1B30503B0;
      v165 = 1.0;
      v164 = 1.0;
      v70 = (FxColorDescription *)LiAgent::getRequestedColorDescription((LiAgent *)v22);
      v133 = 0uLL;
      v159 = 0.0;
      LOBYTE(v116) = a13;
      if ((TXTextLayout::getCachedTextureOrImage((Li3DEngineScene *)v27, *v26, (OZRenderParams *)v24, (LiAgent *)v22, 3u, isColorAnimated, a9, (uint64_t)a10, v138, &v165, &v164, (int32x4_t *)v136, v116, &v133, &v159, a14) & 1) != 0)
      {
        TXTextLayout::makeHGTextureOrBitmapNode((HGRenderJob *)v24, &v133, (HGBitmap **)&v159, (uint64_t *)v136, v22, a13, (HGBitmapLoader **)&v183);
        var0 = v183.var0.var0;
        if (*(_QWORD *)&v160 == v183.var0.var0)
        {
          if (v160 != 0.0)
            (*(void (**)(void))(**(_QWORD **)&v160 + 24))();
        }
        else
        {
          if (v160 != 0.0)
            (*(void (**)(void))(**(_QWORD **)&v160 + 24))();
          v160 = *(double *)&var0;
          v183.var0.var0 = 0;
        }
      }
      else
      {
        v148 = 0u;
        v149 = 0u;
        v147 = v165;
        v150 = v164;
        v151 = 0u;
        v152 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0x3FF0000000000000;
        v156 = 0x3FF0000000000000;
        if (v165 > -0.0000001 && v165 < 0.0000001 || v164 > -0.0000001 && v164 < 0.0000001)
        {
          *v29 = 0.0;
LABEL_122:
          if (v159 != 0.0)
            (*(void (**)(double))(**(_QWORD **)&v159 + 24))(COERCE_DOUBLE(*(_QWORD *)&v159));
          v110 = *(std::__shared_weak_count **)&v133.f64[1];
          if (*(_QWORD *)&v133.f64[1])
          {
            v111 = (unint64_t *)(*(_QWORD *)&v133.f64[1] + 8);
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 - 1, v111));
            if (!v112)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          if (v160 != 0.0)
            (*(void (**)(double))(**(_QWORD **)&v160 + 24))(COERCE_DOUBLE(*(_QWORD *)&v160));
LABEL_131:
          v37 = v179;
          if (!v179)
            return PCCFRef<CGColorSpace *>::~PCCFRef(&v182);
          goto LABEL_132;
        }
        LOBYTE(v158) = 0;
        TXTextLayout::getLiImageSourceForDropShadow(v27, (const OZRenderParams *)v24, v70, v26, (uint64_t)&v181, &v158, isColorAnimated ^ 1, (PCSharedCount *)&v131);
        LiRenderParameters::LiRenderParameters((LiRenderParameters *)&v120, v22[6]);
        v128 = 0;
        LiAgent::LiAgent(&v183, &v120, &v147, 1);
        LiAgent::getROI((__n128 *)v22, (__n128 *)v139);
        LiAgent::setClientROI((__n128 *)&v183, (__n128 *)v139);
        LiAgent::setRequestedColorDescription((CGColorSpace **)&v183, v70);
        LiAgent::getHelium((LiAgent *)&v183, v131, (HGNode **)v139);
        v72 = *(double *)v139;
        if (*(_QWORD *)&v160 == *(_QWORD *)v139)
        {
          if (v160 != 0.0)
            (*(void (**)(void))(**(_QWORD **)&v160 + 24))();
        }
        else
        {
          if (v160 != 0.0)
          {
            (*(void (**)(void))(**(_QWORD **)&v160 + 24))();
            v72 = *(double *)v139;
          }
          v160 = v72;
        }
        LiAgent::setActualColorDescription(v22, v70);
        v73 = v160;
        if (v160 == 0.0)
        {
          *v29 = 0.0;
          v160 = 0.0;
        }
        else
        {
          LiAgent::getDOD((uint64_t)&v183, (uint64_t)v139);
          v136[0] = *(__n128 *)v139;
          RenderNodeList = (_QWORD *)HGRenderJob::GetRenderNodeList((HGRenderJob *)v24);
          TXTextLayout::shouldCacheTexture((uint64_t)RenderNodeList, v75, v76, RenderNodeList);
        }
        LiAgent::~LiAgent((LiAgent *)&v183);
        v77 = v130;
        if (v130)
        {
          v78 = (unint64_t *)&v130->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        PCCFRef<CGColorSpace *>::~PCCFRef(&v129);
        *(_QWORD *)&v122 = &unk_1E64FC2F8;
        if (SDWORD2(v122) < 0)
          v80 = 1;
        else
          v80 = DWORD2(v122);
        PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v122, 0, v80);
        if ((_QWORD)v123)
          MEMORY[0x1B5E2914C](v123, 0x1000C8077774924);
        *(_QWORD *)&v123 = 0;
        DWORD2(v122) = 0;
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v121 + 1);
        PCSharedCount::~PCSharedCount(&v132);
        if (v73 == 0.0)
          goto LABEL_122;
      }
      v81 = a11;
      *a11 = 1.0 / v165;
      a11[5] = 1.0 / v164;
      v183.var7.var0[1][2] = 1.0;
      v183.var7.var0[0][1] = 1.0;
      v183.var3 = 1.0;
      v183.var0.var0 = 0x3FF0000000000000;
      memset(&v183.var0.var1, 0, 32);
      memset(&v183.var4, 0, 32);
      memset(&v183.var7.var0[0][2], 0, 32);
      if (!*v20)
      {
        PCMatrix44Tmpl<double>::operator*((uint64_t)a10, a9, (uint64_t)&v147);
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v147, v16, (uint64_t)&v120);
        for (i = 0; i != 128; i += 32)
        {
          v83 = (_OWORD *)((char *)&v183.var0.var0 + i);
          v84 = *(__int128 *)((char *)&v120 + i + 16);
          *v83 = *(__int128 *)((char *)&v120 + i);
          v83[1] = v84;
        }
        if (!OZChannel::getValueAsInt((OZChannel *)(v178 + 19528), MEMORY[0x1E0CA2E68], 0.0))
          PCMatrix44Tmpl<double>::rightMult((uint64_t)&v183, (double *)&v166);
        PCMatrix44Tmpl<double>::rightMult((uint64_t)&v183, a11);
      }
      if (!PCMatrix44Tmpl<double>::isIdentity((double *)&v183.var0.var0))
      {
        v85.i64[0] = v136[0].n128_i32[2];
        v85.i64[1] = v136[0].n128_i32[3];
        __asm { FMOV            V2.2D, #0.5 }
        v87 = vmulq_f64(vcvtq_f64_s64(v85), _Q2);
        v85.i64[0] = v136[0].n128_i32[0];
        v85.i64[1] = v136[0].n128_i32[1];
        v147 = COERCE_DOUBLE(vcvt_f32_f64(vaddq_f64(v87, vcvtq_f64_s64(v85))));
        LiAgent::makeHeliumXForm((uint64_t)v22, (uint64_t)&v183, (uint64_t *)&v160, &v120);
        v88 = *(double *)&v120;
        if (*(_QWORD *)&v160 == (_QWORD)v120)
        {
          if (v160 != 0.0)
            (*(void (**)(void))(**(_QWORD **)&v160 + 24))();
        }
        else
        {
          if (v160 != 0.0)
          {
            (*(void (**)(void))(**(_QWORD **)&v160 + 24))();
            v88 = *(double *)&v120;
          }
          v160 = v88;
        }
      }
      if ((TXTextObject::isEmoji(*v26) & isColorAnimated) != 1)
        goto LABEL_94;
      if (a12)
        *a12 = 1065353216;
      v89.n128_u32[0] = v181.n128_u32[3];
      if (v181.n128_f32[3] == 1.0 || (v117 - 1) >= 2)
      {
        if (v117)
          goto LABEL_87;
        *(double *)&v90 = COERCE_DOUBLE(HGObject::operator new(0x200uLL));
        HgcTXColor::HgcTXColor(v90);
      }
      else
      {
        if (a12)
        {
          *a12 = v181.n128_u32[3];
          *(double *)&v90 = v160;
          if (v160 != 0.0)
          {
            (*(void (**)(double, float))(**(_QWORD **)&v160 + 16))(COERCE_DOUBLE(*(_QWORD *)&v160), v89.n128_f32[0]);
            goto LABEL_89;
          }
LABEL_94:
          if (*v20)
          {
            v91 = v178;
            if (OZChannel::getValueAsInt((OZChannel *)(v178 + 13976), MEMORY[0x1E0CA2E68], 0.0) == 2)
              v92 = TXTextStyle::hasTexture((TXTextStyle *)v91, (OZChannelImageWithOptions *)(v91 + 16448));
            else
              v92 = 0;
            *(_DWORD *)*v20 = v119;
            if (OZChannel::getValueAsInt((OZChannel *)(v91 + 19528), MEMORY[0x1E0CA2E68], 0.0))
            {
              LiAgent::getObjectToPixelTransform((LiAgent *)v22, (uint64_t)v139);
              PCMatrix44Tmpl<double>::operator*((uint64_t)&v166, (__int128 *)v139, (uint64_t)&v147);
              PCMatrix44Tmpl<double>::operator*((uint64_t)&v147, a9, (uint64_t)&v120);
              PCMatrix44Tmpl<double>::operator*((uint64_t)&v120, v16, (uint64_t)&v183);
              v93 = (_DWORD *)*v20;
              v94 = (OZRenderState *)(*v20 + 8);
              if (&v183 != v94)
              {
                v95 = 0;
                v96 = &v183;
                do
                {
                  for (j = 0; j != 32; j += 8)
                    *(int64_t *)((char *)&v94->var0.var0 + j) = *(int64_t *)((char *)&v96->var0.var0 + j);
                  ++v95;
                  v94 = (OZRenderState *)((char *)v94 + 32);
                  v96 = (OZRenderState *)((char *)v96 + 32);
                }
                while (v95 != 4);
              }
            }
            else
            {
              LiAgent::getObjectToPixelTransform((LiAgent *)v22, (uint64_t)v139);
              PCMatrix44Tmpl<double>::operator*((uint64_t)v139, a9, (uint64_t)&v147);
              PCMatrix44Tmpl<double>::operator*((uint64_t)&v147, v16, (uint64_t)&v120);
              PCMatrix44Tmpl<double>::operator*((uint64_t)&v120, (__int128 *)&v166, (uint64_t)&v183);
              v93 = (_DWORD *)*v20;
              v98 = (OZRenderState *)(*v20 + 8);
              if (&v183 != v98)
              {
                v99 = 0;
                v100 = &v183;
                do
                {
                  for (k = 0; k != 32; k += 8)
                    *(int64_t *)((char *)&v98->var0.var0 + k) = *(int64_t *)((char *)&v100->var0.var0 + k);
                  ++v99;
                  v98 = (OZRenderState *)((char *)v98 + 32);
                  v100 = (OZRenderState *)((char *)v100 + 32);
                }
                while (v99 != 4);
              }
            }
            v102 = v93 + 66;
            if (v93 + 66 != (_DWORD *)a11)
            {
              for (m = 0; m != 4; ++m)
              {
                for (n = 0; n != 32; n += 8)
                  *(double *)&v102[n / 4] = v81[n / 8];
                v102 += 8;
                v81 += 4;
              }
            }
            v105 = 0;
            *((_BYTE *)v93 + 465) = 1;
            v183.var7.var0[1][2] = 1.0;
            v183.var7.var0[0][1] = 1.0;
            v183.var3 = 1.0;
            v183.var0.var0 = 0x3FF0000000000000;
            memset(&v183.var0.var1, 0, 32);
            memset(&v183.var4, 0, 32);
            memset(&v183.var7.var0[0][2], 0, 32);
            do
            {
              v106 = &v93[v105 + 34];
              *v106 = *(_OWORD *)((char *)&v183.var0.var0 + v105 * 4);
              v106[1] = *(_OWORD *)((char *)&v183.var0.var3 + v105 * 4);
              v105 += 8;
            }
            while (v105 != 32);
            if ((v118 & 1) != 0)
            {
              *(int32x4_t *)(v93 + 98) = v138[0];
            }
            else
            {
              PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v183);
              PCHashWriteStream::writeValue((int8x8_t *)&v183, v119);
              PCHashWriteStream::close((int8x8_t *)&v183);
              PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v120);
              Hash = PCHashWriteStream::getHash((int8x8_t *)&v183);
              v120 = *(_OWORD *)Hash->i8;
              *(_OWORD *)(*v20 + 392) = *(_OWORD *)Hash->i8;
              PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v183);
            }
            v108 = *v20;
            *(_BYTE *)(v108 + 456) = 1;
            std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(v108 + 472), (uint64_t *)v26);
            PCWorkingColor::operator=((__n128 *)(*v20 + 408), &v181);
            v109 = *v20;
            *(_DWORD *)(v109 + 460) = 3;
            *(_BYTE *)(v109 + 464) = v92;
          }
          *v29 = v160;
          v160 = 0.0;
          goto LABEL_122;
        }
        *(double *)&v90 = COERCE_DOUBLE(HGObject::operator new(0x200uLL));
        HgcTXAlpha::HgcTXAlpha(v90);
      }
      if (*(double *)&v90 != 0.0)
      {
        (*(void (**)(HgcTXColor *, _QWORD, double))(*(_QWORD *)v90 + 120))(v90, 0, COERCE_DOUBLE(*(_QWORD *)&v160));
        LODWORD(v183.var0.var0) = 0;
        LODWORD(v120) = 0;
        LODWORD(v147) = 0;
        *(_DWORD *)v139 = 0;
        PCWorkingColor::getRGBA((PCWorkingColor *)&v181, (float *)&v183, (float *)&v120, (float *)&v147, (float *)v139);
        (*(void (**)(HgcTXColor *, _QWORD, float, float, float, float))(*(_QWORD *)v90 + 96))(v90, 0, *(float *)&v183.var0.var0, *(float *)&v120, *(float *)&v147, *(float *)v139);
        goto LABEL_89;
      }
LABEL_87:
      *(double *)&v90 = v160;
      if (v160 == 0.0)
        goto LABEL_94;
      (*(void (**)(double, __n128))(**(_QWORD **)&v160 + 16))(COERCE_DOUBLE(*(_QWORD *)&v160), v89);
LABEL_89:
      if (*(HgcTXColor **)&v160 == v90)
      {
        (*(void (**)(HgcTXColor *))(*(_QWORD *)v90 + 24))(v90);
      }
      else
      {
        if (v160 != 0.0)
          (*(void (**)(void))(**(_QWORD **)&v160 + 24))();
        v160 = *(double *)&v90;
      }
      goto LABEL_94;
    }
  }
  else
  {
    v37 = 0;
    v179 = 0;
    v178 = 0;
  }
  *v29 = 0.0;
  if (!v37)
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v182);
LABEL_132:
  v113 = (unint64_t *)&v37->__shared_owners_;
  do
    v114 = __ldaxr(v113);
  while (__stlxr(v114 - 1, v113));
  if (!v114)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v182);
}

void sub_1B290E114(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

CGColorSpace **TXTextLayout::buildHGNodeForGlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9, __int128 *a10, uint64_t a11, _DWORD *a12, unsigned __int8 a13)
{
  uint64_t v13;
  __int128 *v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  CMTime *v20;
  CMTime *v21;
  TXTextObject **v22;
  TXTextObject **v23;
  uint64_t v24;
  double *v25;
  double *v26;
  LiAgent *v27;
  OZEaseInInterpolator *RequestedColorDescription;
  CGColorSpaceRef *v29;
  CGColorSpaceRef *v30;
  int DynamicRange;
  PCToneMapMethod *ToneMapMethod;
  TXTextObject *v33;
  TXTextObject *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  float64x2_t v39;
  float64x2_t v44;
  float64x2_t v46;
  TXTextObject *v47;
  TXTextObject *v48;
  float64x2_t v49;
  float64x2_t v50;
  int64x2_t v51;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  void *v55;
  TXTextSequenceBehavior *v56;
  int v57;
  uint64_t v58;
  double v59;
  double v60;
  unint64_t *v61;
  unint64_t v62;
  int ValueAsInt;
  float64x2_t v64;
  double *v66;
  FxColorDescription *v67;
  uint64_t v68;
  int64_t var0;
  TXTextObject **v70;
  uint64_t i;
  _OWORD *v72;
  __int128 v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  double v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  int v82;
  unint64_t v83;
  double v84;
  _QWORD *RenderNodeList;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  int v91;
  uint64_t j;
  _OWORD *v93;
  __int128 v94;
  int64x2_t v95;
  float64x2_t v97;
  double v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  PCWorkingColor *WorkingColorSpace;
  _BOOL4 v103;
  HgcTXAlpha *v104;
  uint64_t v105;
  uint64_t v106;
  LiImageSource *v107;
  unint64_t *v108;
  unint64_t v109;
  unsigned __int8 v110;
  _DWORD *v111;
  OZRenderState *v112;
  uint64_t v113;
  OZRenderState *v114;
  uint64_t k;
  _DWORD *v116;
  uint64_t m;
  uint64_t n;
  int8x8_t *Hash;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  __n128 v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  FxColorDescription *v136;
  char v137;
  __int128 *v138;
  HGRenderJob *v139;
  const LiRenderParameters **v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  char v149;
  CGColorSpace *v150[6];
  std::__shared_weak_count *v151;
  char v152;
  HGBitmap *v153;
  double v154;
  std::__shared_weak_count *v155;
  double v156;
  int32x4_t v157;
  int32x4_t v158;
  LiImageSource *v159[2];
  double v160;
  double v161;
  __n128 v162[5];
  _QWORD *v163;
  double v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  _BYTE v174[48];
  float64x2_t v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  double v181;
  double v182;
  CMTime v183;
  double v184;
  double v185;
  float64x2_t v186;
  CMTime v187;
  double v188;
  float64_t v189;
  CMTime v190;
  double v191;
  double v192;
  __n128 v193;
  CGColorSpace *v194;
  OZRenderState v195;
  uint64_t v196;

  v13 = MEMORY[0x1E0C80A78](a1);
  v138 = v14;
  v137 = v15;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = v13;
  v26 = v25;
  v196 = *MEMORY[0x1E0C80C00];
  v140 = (const LiRenderParameters **)v27;
  RequestedColorDescription = (OZEaseInInterpolator *)LiAgent::getRequestedColorDescription(v27);
  OZEaseInInterpolator::~OZEaseInInterpolator(RequestedColorDescription);
  v30 = v29;
  DynamicRange = FxColorDescription::getDynamicRange((FxColorDescription *)RequestedColorDescription);
  v136 = (FxColorDescription *)RequestedColorDescription;
  ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod((FxColorDescription *)RequestedColorDescription);
  PCWorkingColor::PCWorkingColor((uint64_t)&v193, v30, DynamicRange, ToneMapMethod);
  v192 = 0.0;
  v191 = 0.0;
  v33 = *v23;
  v190 = *v21;
  if ((TXTextObject::isGlowVisible(v33, &v190, (PCWorkingColor *)&v193, &v192, &v191) & 1) == 0)
  {
    *v26 = 0.0;
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v194);
  }
  v189 = 0.0;
  v188 = 0.0;
  v34 = *v23;
  v187 = *v21;
  TXTextObject::getGlowOffset(v34, &v187, &v189, &v188, 1);
  if (OZChannel::getValueAsInt((OZChannel *)(v24 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 3
    && OZChannel::getValueAsInt((OZChannel *)(v24 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 4
    && LiAgent::haveROI((LiAgent *)v140))
  {
    if (OZRenderParams::getTextRenderQuality((OZRenderParams *)v21))
    {
      v35 = a10[5];
      v145 = a10[4];
      v146 = v35;
      v36 = a10[7];
      v147 = a10[6];
      v148 = v36;
      v37 = a10[1];
      v141 = *a10;
      v142 = v37;
      v38 = a10[3];
      v143 = a10[2];
      v144 = v38;
    }
    else
    {
      LiAgent::getObjectToPixelTransform((LiAgent *)v140, (uint64_t)&v141);
    }
    OZRenderState::OZRenderState(&v195, (const OZRenderState *)v21);
    v195.var4 = 1;
    TXTextObject::getImageBounds(*v23, &v195, (uint64_t)&v184);
    v39.f64[0] = v192;
    v39.f64[1] = v191;
    __asm { FMOV            V3.2D, #3.0 }
    v44 = vmulq_f64(v39, _Q3);
    __asm { FMOV            V3.2D, #2.0 }
    v46 = vaddq_f64(v44, _Q3);
    v184 = v184 - v46.f64[0];
    v185 = v185 - v46.f64[1];
    v186 = vsubq_f64(v186, vsubq_f64(vnegq_f64(v46), v46));
    v158.i64[0] = 0;
    v157.i64[0] = 0;
    v47 = *v23;
    v183 = *v21;
    TXTextObject::getGlowScale(v47, &v183, (double *)v158.i64, (double *)v157.i64, 1);
    v154 = 0.0;
    v182 = 0.0;
    v181 = 0.0;
    v48 = *v23;
    *(_OWORD *)v174 = *(_OWORD *)&v21->value;
    *(_QWORD *)&v174[16] = v21->epoch;
    TXTextObject::getPivot((TXTextLayout **)v48, &v154, &v182, &v181, (CMTime *)v174, 1);
    v180 = 0x3FF0000000000000;
    v177 = 0x3FF0000000000000;
    memset(&v174[8], 0, 32);
    v175 = 0u;
    v176 = 0u;
    v178 = 0u;
    v179 = 0u;
    *(_QWORD *)&v174[40] = 0x3FF0000000000000;
    *(_QWORD *)v174 = 0x3FF0000000000000;
    v49 = PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v174, (float64x2_t)COERCE_UNSIGNED_INT64(-v154), -v182, 0.0);
    if (*(double *)v158.i64 != 1.0)
    {
      *(float64x2_t *)v174 = vmulq_n_f64(*(float64x2_t *)v174, *(double *)v158.i64);
      *(float64x2_t *)&v174[16] = vmulq_n_f64(*(float64x2_t *)&v174[16], *(double *)v158.i64);
    }
    if (*(double *)v157.i64 != 1.0)
    {
      v49 = vmulq_n_f64(v175, *(double *)v157.i64);
      *(float64x2_t *)&v174[32] = vmulq_n_f64(*(float64x2_t *)&v174[32], *(double *)v157.i64);
      v175 = v49;
    }
    v49.f64[0] = v154;
    v50 = PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v174, v49, v182, 0.0);
    v50.f64[0] = v189;
    PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v174, v50, v188, 0.0);
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v141, a9, (uint64_t)v159);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v159, v138, (uint64_t)v162);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v162, (__int128 *)v174, (uint64_t)&v164);
    LiAgent::getROI((__n128 *)v140, v162);
    v51.i64[0] = v162[0].n128_i32[0];
    v51.i64[1] = v162[0].n128_i32[1];
    *(float64x2_t *)v159 = vcvtq_f64_s64(v51);
    v160 = (double)v162[0].n128_i32[2];
    v161 = (double)v162[0].n128_i32[3];
    if ((v162[0].n128_u32[2] & 0x80000000) == 0 && (v162[0].n128_u32[3] & 0x80000000) == 0)
    {
      LiImagePolygon::LiImagePolygon((LiImagePolygon *)v162);
      LiImagePolygon::set((uint64_t)v162, &v184, 0);
      liTransformAndClip((double *)v159, &v164, (uint64_t **)v162);
      if (((v163[1] - *v163) & 0x1FFFFFFFE0) == 0)
      {
        *v26 = 0.0;
        LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v162);
        return PCCFRef<CGColorSpace *>::~PCCFRef(&v194);
      }
      LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v162);
    }
  }
  v135 = v17;
  v139 = (HGRenderJob *)v21;
  v52 = v24 + 1200;
  v53 = *(_QWORD *)(v24 + 1208);
  if (v53 == v24 + 1200)
  {
    v57 = 1;
  }
  else
  {
    v134 = v24;
    while (1)
    {
      v54 = *(const void **)(v53 + 16);
      if (v54)
      {
        if (v55)
        {
          if (((*(uint64_t (**)(void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v55 + 616))(v55, 1017, 0, 0) & 1) != 0)break;
        }
        if (v56 && TXTextSequenceBehavior::isChannelEnabled(v56, 1017))
          break;
      }
      v53 = *(_QWORD *)(v53 + 8);
      if (v53 == v52)
      {
        v57 = 1;
        goto LABEL_28;
      }
    }
    v57 = 0;
LABEL_28:
    v24 = v134;
  }
  v58 = *((_QWORD *)*v23 + 33);
  if (v58)
  {
    v59 = *(double *)(v58 + 8);
    v60 = *(double *)(v58 + 16);
    v184 = v59;
    v185 = v60;
    if (v60 != 0.0)
    {
      v61 = (unint64_t *)(*(_QWORD *)&v60 + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
  }
  else
  {
    v59 = 0.0;
    v185 = 0.0;
    v184 = 0.0;
  }
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*(_QWORD *)&v59 + 31208), MEMORY[0x1E0CA2E68], 0.0);
  v182 = 0.0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v158);
  v180 = 0x3FF0000000000000;
  v177 = 0x3FF0000000000000;
  *(_QWORD *)&v174[40] = 0x3FF0000000000000;
  *(_QWORD *)v174 = 0x3FF0000000000000;
  memset(&v174[8], 0, 32);
  v175 = 0u;
  v176 = 0u;
  v178 = 0u;
  v179 = 0u;
  OZChannel::getValueAsDouble((OZChannel *)(v24 + 60520), MEMORY[0x1E0CA2E68], 0.0);
  if (v64.f64[0] >= 4.0 || ValueAsInt == 0)
  {
    v64.f64[0] = v189;
    PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v174, v64, v188, 0.0);
  }
  v66 = v26;
  v157 = (int32x4_t)xmmword_1B30503B0;
  v181 = 1.0;
  v156 = 1.0;
  v67 = (FxColorDescription *)LiAgent::getRequestedColorDescription((LiAgent *)v140);
  v68 = a11;
  if (!v57)
  {
    LOBYTE(v154) = 0;
    TXTextLayout::getLiImageSourceForGlow(v24, (const OZRenderParams *)v21, v67, v23, &v193, &v154, (PCSharedCount *)v159, v192, v191);
    if (LOBYTE(v154))
    {
      v173 = 0x3FF0000000000000;
      v170 = 0x3FF0000000000000;
      v167 = 0x3FF0000000000000;
      v164 = 1.0;
      v165 = 0u;
      v166 = 0u;
      v168 = 0u;
      v169 = 0u;
      v171 = 0u;
      v172 = 0u;
      if (!*v19)
      {
        PCMatrix44Tmpl<double>::operator*((uint64_t)a10, a9, (uint64_t)v162);
        PCMatrix44Tmpl<double>::operator*((uint64_t)v162, v138, (uint64_t)&v141);
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v141, (__int128 *)v174, (uint64_t)&v195);
        for (i = 0; i != 128; i += 32)
        {
          v72 = (_OWORD *)((char *)&v164 + i);
          v73 = *(_OWORD *)((char *)&v195.var0.var3 + i);
          *v72 = *(_OWORD *)((char *)&v195.var0.var0 + i);
          v72[1] = v73;
        }
      }
      LiRenderParameters::LiRenderParameters((LiRenderParameters *)&v141, v140[6]);
      v149 = 0;
      LiAgent::LiAgent(&v195, &v141, &v164, 1);
      LiAgent::getROI((__n128 *)v140, v162);
      LiAgent::setClientROI((__n128 *)&v195, v162);
      LiAgent::setRequestedColorDescription((CGColorSpace **)&v195, v67);
      LiAgent::getHelium((LiAgent *)&v195, v159[0], (HGNode **)v162);
      v74 = v162[0].n128_u64[0];
      if (*(_QWORD *)&v182 == v162[0].n128_u64[0])
      {
        if (v182 != 0.0)
          (*(void (**)(void))(**(_QWORD **)&v182 + 24))();
      }
      else
      {
        if (v182 != 0.0)
        {
          (*(void (**)(void))(**(_QWORD **)&v182 + 24))();
          v74 = v162[0].n128_u64[0];
        }
        v182 = *(double *)&v74;
      }
      LiAgent::setActualColorDescription(v140, v67);
      v70 = v23;
      v78 = v182;
      if (v182 == 0.0)
      {
        *v66 = 0.0;
        v182 = 0.0;
      }
      LiAgent::~LiAgent((LiAgent *)&v195);
      v79 = v151;
      if (v151)
      {
        p_shared_owners = (unint64_t *)&v151->__shared_owners_;
        do
          v81 = __ldaxr(p_shared_owners);
        while (__stlxr(v81 - 1, p_shared_owners));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(v150);
      *(_QWORD *)&v143 = &unk_1E64FC2F8;
      if (SDWORD2(v143) < 0)
        v82 = 1;
      else
        v82 = DWORD2(v143);
      PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v143, 0, v82);
      if ((_QWORD)v144)
        MEMORY[0x1B5E2914C](v144, 0x1000C8077774924);
      *(_QWORD *)&v144 = 0;
      DWORD2(v143) = 0;
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v142 + 1);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v159[1]);
      if (v78 != 0.0)
        goto LABEL_125;
    }
    else
    {
      *v66 = 0.0;
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v159[1]);
    }
    goto LABEL_83;
  }
  v154 = 0.0;
  v155 = 0;
  v153 = 0;
  LOBYTE(v133) = a13;
  if ((TXTextLayout::getCachedTextureOrImage((Li3DEngineScene *)v24, *v23, (OZRenderParams *)v21, (LiAgent *)v140, 2u, 1, a9, (uint64_t)a10, &v158, &v181, &v156, &v157, v133, &v154, &v153, 1) & 1) == 0)
  {
    v165 = 0u;
    v166 = 0u;
    v164 = v181;
    v167 = *(_QWORD *)&v156;
    v168 = 0u;
    v169 = 0u;
    v171 = 0u;
    v172 = 0u;
    v170 = 0x3FF0000000000000;
    v173 = 0x3FF0000000000000;
    if ((v181 <= -0.0000001 || v181 >= 0.0000001) && (v156 <= -0.0000001 || v156 >= 0.0000001))
    {
      v152 = 0;
      TXTextLayout::getLiImageSourceForGlow(v24, (const OZRenderParams *)v21, v67, v23, &v193, &v152, (PCSharedCount *)v159, v192, v191);
      LiRenderParameters::LiRenderParameters((LiRenderParameters *)&v141, v140[6]);
      v149 = 0;
      LiAgent::LiAgent(&v195, &v141, &v164, 1);
      LiAgent::getROI((__n128 *)v140, v162);
      LiAgent::setClientROI((__n128 *)&v195, v162);
      LiAgent::setRequestedColorDescription((CGColorSpace **)&v195, v67);
      LiAgent::getHelium((LiAgent *)&v195, v159[0], (HGNode **)v162);
      v83 = v162[0].n128_u64[0];
      if (*(_QWORD *)&v182 == v162[0].n128_u64[0])
      {
        if (v182 != 0.0)
          (*(void (**)(void))(**(_QWORD **)&v182 + 24))();
      }
      else
      {
        if (v182 != 0.0)
        {
          (*(void (**)(void))(**(_QWORD **)&v182 + 24))();
          v83 = v162[0].n128_u64[0];
        }
        v182 = *(double *)&v83;
      }
      LiAgent::setActualColorDescription(v140, v67);
      v70 = v23;
      v84 = v182;
      if (v182 == 0.0)
      {
        *v66 = 0.0;
        v182 = 0.0;
      }
      else
      {
        LiAgent::getDOD((uint64_t)&v195, (uint64_t)v162);
        v157 = (int32x4_t)v162[0];
        RenderNodeList = (_QWORD *)HGRenderJob::GetRenderNodeList((HGRenderJob *)v21);
        TXTextLayout::shouldCacheTexture((uint64_t)RenderNodeList, v86, v87, RenderNodeList);
      }
      LiAgent::~LiAgent((LiAgent *)&v195);
      v88 = v151;
      if (v151)
      {
        v89 = (unint64_t *)&v151->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(v150);
      *(_QWORD *)&v143 = &unk_1E64FC2F8;
      if (SDWORD2(v143) < 0)
        v91 = 1;
      else
        v91 = DWORD2(v143);
      PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v143, 0, v91);
      if ((_QWORD)v144)
        MEMORY[0x1B5E2914C](v144, 0x1000C8077774924);
      *(_QWORD *)&v144 = 0;
      DWORD2(v143) = 0;
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v142 + 1);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v159[1]);
      if (v84 != 0.0)
        goto LABEL_108;
    }
    else
    {
      *v66 = 0.0;
    }
    if (v153)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v153 + 24))(v153);
    v75 = v155;
    if (v155)
    {
      v76 = (unint64_t *)&v155->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
LABEL_83:
    if (v182 != 0.0)
      (*(void (**)(double))(**(_QWORD **)&v182 + 24))(COERCE_DOUBLE(*(_QWORD *)&v182));
    goto LABEL_169;
  }
  TXTextLayout::makeHGTextureOrBitmapNode((HGRenderJob *)v21, &v154, &v153, v157.i64, v140, a13, (HGBitmapLoader **)&v195);
  var0 = v195.var0.var0;
  if (*(_QWORD *)&v182 == v195.var0.var0)
  {
    v70 = v23;
    if (v182 != 0.0)
      (*(void (**)(void))(**(_QWORD **)&v182 + 24))();
  }
  else
  {
    if (v182 != 0.0)
      (*(void (**)(void))(**(_QWORD **)&v182 + 24))();
    v70 = v23;
    v182 = *(double *)&var0;
    v195.var0.var0 = 0;
  }
LABEL_108:
  *(double *)a11 = 1.0 / v181;
  *(double *)(a11 + 40) = 1.0 / v156;
  v195.var7.var0[1][2] = 1.0;
  v195.var7.var0[0][1] = 1.0;
  v195.var3 = 1.0;
  v195.var0.var0 = 0x3FF0000000000000;
  memset(&v195.var0.var1, 0, 32);
  memset(&v195.var4, 0, 32);
  memset(&v195.var7.var0[0][2], 0, 32);
  if (!*v19)
  {
    PCMatrix44Tmpl<double>::operator*((uint64_t)a10, a9, (uint64_t)v159);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v159, v138, (uint64_t)v162);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v162, (__int128 *)v174, (uint64_t)&v164);
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v164, (__int128 *)a11, (uint64_t)&v141);
    for (j = 0; j != 128; j += 32)
    {
      v93 = (_OWORD *)((char *)&v195.var0.var0 + j);
      v94 = *(__int128 *)((char *)&v141 + j + 16);
      *v93 = *(__int128 *)((char *)&v141 + j);
      v93[1] = v94;
    }
  }
  if (!PCMatrix44Tmpl<double>::isIdentity((double *)&v195.var0.var0))
  {
    v95.i64[0] = v157.i32[2];
    v95.i64[1] = v157.i32[3];
    __asm { FMOV            V2.2D, #0.5 }
    v97 = vmulq_f64(vcvtq_f64_s64(v95), _Q2);
    v95.i64[0] = v157.i32[0];
    v95.i64[1] = v157.i32[1];
    *(float32x2_t *)&v164 = vcvt_f32_f64(vaddq_f64(v97, vcvtq_f64_s64(v95)));
    LiAgent::makeHeliumXForm((uint64_t)v140, (uint64_t)&v195, (uint64_t *)&v182, &v141);
    v98 = *(double *)&v141;
    if (*(_QWORD *)&v182 == (_QWORD)v141)
    {
      if (v182 != 0.0)
        (*(void (**)(void))(**(_QWORD **)&v182 + 24))();
    }
    else
    {
      if (v182 != 0.0)
      {
        (*(void (**)(void))(**(_QWORD **)&v182 + 24))();
        v98 = *(double *)&v141;
      }
      v182 = v98;
    }
  }
  if (v153)
    (*(void (**)(HGBitmap *))(*(_QWORD *)v153 + 24))(v153);
  v99 = v155;
  if (v155)
  {
    v100 = (unint64_t *)&v155->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
LABEL_125:
  WorkingColorSpace = (PCWorkingColor *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)v139);
  PCWorkingColor::WHITE(WorkingColorSpace, (PCWorkingColor *)&v195);
  v103 = operator!=((uint64_t)&v193, (uint64_t)&v195);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v195.var0.var3);
  if (v103 && v193.n128_f32[3] != 1.0)
  {
    if (a12)
    {
      *a12 = v193.n128_u32[3];
    }
    else
    {
      *(double *)&v104 = COERCE_DOUBLE(HGObject::operator new(0x200uLL));
      HgcTXAlpha::HgcTXAlpha(v104);
      if (*(double *)&v104 != 0.0)
      {
        (*(void (**)(HgcTXAlpha *, _QWORD, double))(*(_QWORD *)v104 + 120))(v104, 0, COERCE_DOUBLE(*(_QWORD *)&v182));
        LODWORD(v195.var0.var0) = 0;
        LODWORD(v141) = 0;
        LODWORD(v164) = 0;
        v162[0].n128_u32[0] = 0;
        PCWorkingColor::getRGBA((PCWorkingColor *)&v193, (float *)&v195, (float *)&v141, (float *)&v164, (float *)v162);
        (*(void (**)(HgcTXAlpha *, _QWORD, float, float, float, float))(*(_QWORD *)v104 + 96))(v104, 0, *(float *)&v195.var0.var0, *(float *)&v141, *(float *)&v164, v162[0].n128_f32[0]);
        if (*(HgcTXAlpha **)&v182 != v104)
        {
          if (v182 != 0.0)
            (*(void (**)(void))(**(_QWORD **)&v182 + 24))();
          v182 = *(double *)&v104;
          (*(void (**)(HgcTXAlpha *))(*(_QWORD *)v104 + 16))(v104);
        }
        (*(void (**)(HgcTXAlpha *))(*(_QWORD *)v104 + 24))(v104);
      }
    }
  }
  if (*v19)
  {
    v105 = *((_QWORD *)*v70 + 33);
    if (v105)
    {
      v106 = *(_QWORD *)(v105 + 8);
      v107 = *(LiImageSource **)(v105 + 16);
      v159[0] = (LiImageSource *)v106;
      v159[1] = v107;
      if (v107)
      {
        v108 = (unint64_t *)((char *)v107 + 8);
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
    }
    else
    {
      v106 = 0;
      v159[0] = 0;
      v159[1] = 0;
    }
    if (OZChannel::getValueAsInt((OZChannel *)(v106 + 31208), MEMORY[0x1E0CA2E68], 0.0) == 2)
      v110 = TXTextStyle::hasTexture((TXTextStyle *)v159[0], (OZChannelImageWithOptions *)((char *)v159[0] + 33680));
    else
      v110 = 0;
    *(_DWORD *)*v19 = v135;
    LiAgent::getObjectToPixelTransform((LiAgent *)v140, (uint64_t)v162);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v162, a9, (uint64_t)&v164);
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v164, v138, (uint64_t)&v141);
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v141, (__int128 *)v174, (uint64_t)&v195);
    v111 = (_DWORD *)*v19;
    v112 = (OZRenderState *)(*v19 + 8);
    if (&v195 != v112)
    {
      v113 = 0;
      v114 = &v195;
      do
      {
        for (k = 0; k != 32; k += 8)
          *(int64_t *)((char *)&v112->var0.var0 + k) = *(int64_t *)((char *)&v114->var0.var0 + k);
        ++v113;
        v112 = (OZRenderState *)((char *)v112 + 32);
        v114 = (OZRenderState *)((char *)v114 + 32);
      }
      while (v113 != 4);
    }
    v116 = v111 + 66;
    if (v111 + 66 != (_DWORD *)a11)
    {
      for (m = 0; m != 4; ++m)
      {
        for (n = 0; n != 8; n += 2)
          *(_QWORD *)&v116[n] = *(_QWORD *)(v68 + n * 4);
        v116 += 8;
        v68 += 32;
      }
    }
    *((_BYTE *)v111 + 465) = 1;
    if ((v137 & 1) != 0)
    {
      *(_QWORD *)&v141 = 0;
      v164 = 0.0;
      if (v57)
      {
        *(int32x4_t *)&v195.var0.var0 = v158;
      }
      else
      {
        TXTextObject::getTextureCacheHashForAttribute(*v70, (OZRenderParams *)v139, v136, 2u, (double *)&v141, &v164);
        v111 = (_DWORD *)*v19;
      }
      *(_OWORD *)(v111 + 98) = *(_OWORD *)&v195.var0.var0;
    }
    else
    {
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v195);
      PCHashWriteStream::writeValue((int8x8_t *)&v195, v135);
      PCHashWriteStream::close((int8x8_t *)&v195);
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v141);
      Hash = PCHashWriteStream::getHash((int8x8_t *)&v195);
      v141 = *(_OWORD *)Hash->i8;
      *(_OWORD *)(*v19 + 392) = *(_OWORD *)Hash->i8;
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v195);
    }
    v120 = 0;
    v195.var7.var0[1][2] = 1.0;
    v195.var7.var0[0][1] = 1.0;
    v195.var3 = 1.0;
    v195.var0.var0 = 0x3FF0000000000000;
    memset(&v195.var0.var1, 0, 32);
    memset(&v195.var7.var0[0][2], 0, 32);
    v121 = *v19;
    v122 = *v19 + 136;
    memset(&v195.var4, 0, 32);
    do
    {
      v123 = (_OWORD *)(v122 + v120);
      *v123 = *(_OWORD *)((char *)&v195.var0.var0 + v120);
      v123[1] = *(_OWORD *)((char *)&v195.var0.var3 + v120);
      v120 += 32;
    }
    while (v120 != 128);
    *(_BYTE *)(v121 + 456) = 1;
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(v121 + 472), (uint64_t *)v70);
    v124 = PCWorkingColor::operator=((__n128 *)(*v19 + 408), &v193);
    v125 = *v19;
    *(_DWORD *)(v125 + 460) = 2;
    *(_BYTE *)(v125 + 464) = v110;
    v126 = (std::__shared_weak_count *)v159[1];
    if (v159[1])
    {
      v127 = (unint64_t *)((char *)v159[1] + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v126->__on_zero_shared)(v126, v124);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
  }
  *v66 = v182;
LABEL_169:
  v129 = *(std::__shared_weak_count **)&v185;
  if (v185 != 0.0)
  {
    v130 = (unint64_t *)(*(_QWORD *)&v185 + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v194);
}

void sub_1B290F4E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

CGColorSpace **TXTextLayout::buildHGNodeForOutline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9, _OWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  char v18;
  uint64_t *v19;
  uint64_t *v20;
  LiAgent *v21;
  LiAgent *v22;
  CMTime *v23;
  CMTime *v24;
  TXTextObject **v25;
  TXTextObject **v26;
  uint64_t v27;
  _QWORD *v28;
  OZEaseInInterpolator *RequestedColorDescription;
  CGColorSpaceRef *v30;
  CGColorSpaceRef *v31;
  int DynamicRange;
  PCToneMapMethod *ToneMapMethod;
  TXTextObject *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  TXTextObject *v39;
  float64x2_t v40;
  float64x2_t v46;
  float64x2_t v48;
  int64x2_t v49;
  uint64_t v50;
  double v51;
  double v52;
  unint64_t *v53;
  unint64_t v54;
  int ValueAsInt;
  int isColorAnimated;
  int64_t var0;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  uint64_t v61;
  _QWORD *RenderNodeList;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  _OWORD *v67;
  __int128 v68;
  int64x2_t v69;
  float64x2_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  int v79;
  unint64_t *v80;
  unint64_t v81;
  unsigned __int8 v82;
  _DWORD *v83;
  OZRenderState *v84;
  uint64_t v85;
  OZRenderState *v86;
  uint64_t j;
  _DWORD *v88;
  uint64_t k;
  uint64_t m;
  _DWORD *v91;
  uint64_t n;
  uint64_t ii;
  int8x8_t *Hash;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v105;
  char v106;
  int v107;
  _QWORD *v108;
  HGBitmap *v109;
  float64_t v110;
  std::__shared_weak_count *v111;
  double v112;
  double v113;
  int32x4_t v114;
  uint64_t v115;
  int32x4_t v116;
  double v117;
  double v118;
  __n128 v119[5];
  _QWORD *v120;
  TXTextStyle *v121;
  std::__shared_weak_count *v122;
  CMTime v123;
  double v124;
  double v125;
  float64x2_t v126;
  _OWORD v127[8];
  CMTime v128;
  uint64_t v129;
  __n128 v130;
  CGColorSpace *v131;
  OZRenderState v132;
  uint64_t v133;

  v14 = MEMORY[0x1E0C80A78](a1);
  v16 = v15;
  v106 = v18;
  v107 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v27 = v14;
  v108 = v28;
  v133 = *MEMORY[0x1E0C80C00];
  RequestedColorDescription = (OZEaseInInterpolator *)LiAgent::getRequestedColorDescription(v21);
  OZEaseInInterpolator::~OZEaseInInterpolator(RequestedColorDescription);
  v31 = v30;
  DynamicRange = FxColorDescription::getDynamicRange((FxColorDescription *)RequestedColorDescription);
  ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod((FxColorDescription *)RequestedColorDescription);
  PCWorkingColor::PCWorkingColor((uint64_t)&v130, v31, DynamicRange, ToneMapMethod);
  v129 = 0;
  v34 = *v26;
  v128 = *v24;
  if ((TXTextObject::isOutlineVisible(v34, &v128, (PCWorkingColor *)&v130, (double *)&v129) & 1) == 0)
  {
    *v108 = 0;
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v131);
  }
  if (OZChannel::getValueAsInt((OZChannel *)(v27 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 3
    && OZChannel::getValueAsInt((OZChannel *)(v27 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 4
    && LiAgent::haveROI(v22))
  {
    if (OZRenderParams::getTextRenderQuality((OZRenderParams *)v24))
    {
      v35 = a10[5];
      v127[4] = a10[4];
      v127[5] = v35;
      v36 = a10[7];
      v127[6] = a10[6];
      v127[7] = v36;
      v37 = a10[1];
      v127[0] = *a10;
      v127[1] = v37;
      v38 = a10[3];
      v127[2] = a10[2];
      v127[3] = v38;
    }
    else
    {
      LiAgent::getObjectToPixelTransform(v22, (uint64_t)v127);
    }
    OZRenderState::OZRenderState(&v132, (const OZRenderState *)v24);
    v132.var4 = 1;
    TXTextObject::getImageBounds(*v26, &v132, (uint64_t)&v124);
    v114.i64[0] = 0;
    v110 = 0.0;
    v39 = *v26;
    v123 = *v24;
    TXTextObject::getOutlineBlur(v39, &v123, (double *)v114.i64, &v110);
    *(_QWORD *)&v40.f64[0] = v114.i64[0];
    v40.f64[1] = v110;
    __asm { FMOV            V4.2D, #3.0 }
    v46 = vaddq_f64((float64x2_t)vdupq_lane_s64(v129, 0), vmulq_f64(v40, _Q4));
    __asm { FMOV            V1.2D, #2.0 }
    v48 = vaddq_f64(v46, _Q1);
    v124 = v124 - v48.f64[0];
    v125 = v125 - v48.f64[1];
    v126 = vsubq_f64(v126, vsubq_f64(vnegq_f64(v48), v48));
    PCMatrix44Tmpl<double>::operator*((uint64_t)v127, a9, (uint64_t)v119);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v119, v16, (uint64_t)&v121);
    LiAgent::getROI((__n128 *)v22, v119);
    v49.i64[0] = v119[0].n128_i32[0];
    v49.i64[1] = v119[0].n128_i32[1];
    v116 = (int32x4_t)vcvtq_f64_s64(v49);
    v117 = (double)v119[0].n128_i32[2];
    v118 = (double)v119[0].n128_i32[3];
    if ((v119[0].n128_u32[2] & 0x80000000) == 0 && (v119[0].n128_u32[3] & 0x80000000) == 0)
    {
      LiImagePolygon::LiImagePolygon((LiImagePolygon *)v119);
      LiImagePolygon::set((uint64_t)v119, &v124, 0);
      liTransformAndClip((double *)v116.i64, (double *)&v121, (uint64_t **)v119);
      if (((v120[1] - *v120) & 0x1FFFFFFFE0) == 0)
      {
        *v108 = 0;
        LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v119);
        return PCCFRef<CGColorSpace *>::~PCCFRef(&v131);
      }
      LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v119);
    }
  }
  v50 = *((_QWORD *)*v26 + 33);
  if (v50)
  {
    v51 = *(double *)(v50 + 8);
    v52 = *(double *)(v50 + 16);
    v124 = v51;
    v125 = v52;
    if (v52 != 0.0)
    {
      v53 = (unint64_t *)(*(_QWORD *)&v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
  }
  else
  {
    v51 = 0.0;
    v124 = 0.0;
    v125 = 0.0;
  }
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*(_QWORD *)&v51 + 22760), MEMORY[0x1E0CA2E68], 0.0);
  isColorAnimated = TXTextLayout::isColorAnimated((TXTextLayout *)v27, (OZChannelColorNoAlpha *)(*(_QWORD *)&v124 + 23016), (OZChannelPercent *)(*(_QWORD *)&v124 + 26824), ValueAsInt, 1012, 1013);
  v115 = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v116);
  v114 = (int32x4_t)xmmword_1B30503B0;
  v112 = 1.0;
  v113 = 1.0;
  v110 = 0.0;
  v111 = 0;
  v109 = 0;
  LOBYTE(v105) = a14;
  if ((TXTextLayout::getCachedTextureOrImage((Li3DEngineScene *)v27, *v26, (OZRenderParams *)v24, v22, 1u, isColorAnimated, a9, (uint64_t)a10, &v116, &v113, &v112, &v114, v105, &v110, &v109, 1) & 1) != 0)
  {
    TXTextLayout::makeHGTextureOrBitmapNode((HGRenderJob *)v24, &v110, &v109, v114.i64, (LiRenderParameters **)v22, a14, (HGBitmapLoader **)&v132);
    var0 = v132.var0.var0;
    if (v115 == v132.var0.var0)
    {
      if (v115)
        (*(void (**)(void))(*(_QWORD *)v115 + 24))();
    }
    else
    {
      if (v115)
        (*(void (**)(void))(*(_QWORD *)v115 + 24))();
      v115 = var0;
      v132.var0.var0 = 0;
    }
    goto LABEL_48;
  }
  memset(&v132.var0.var1, 0, 32);
  memset(&v132.var4, 0, 32);
  memset(&v132.var7.var0[0][2], 0, 32);
  v132.var7.var0[0][1] = 1.0;
  v132.var7.var0[1][2] = 1.0;
  *(double *)&v132.var0.var0 = v113;
  v132.var3 = v112;
  if (v113 > -0.0000001 && v113 < 0.0000001 || v112 > -0.0000001 && v112 < 0.0000001)
  {
    *v108 = 0;
LABEL_29:
    if (v109)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v109 + 24))(v109);
    v58 = v111;
    if (v111)
    {
      p_shared_owners = (unint64_t *)&v111->__shared_owners_;
      do
        v60 = __ldaxr(p_shared_owners);
      while (__stlxr(v60 - 1, p_shared_owners));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v115)
      (*(void (**)(uint64_t))(*(_QWORD *)v115 + 24))(v115);
    goto LABEL_99;
  }
  TXTextLayout::outlineNodeFromTextObject((const LiRenderParameters **)v22, v27, v26, (const OZRenderParams *)v24, a12, isColorAnimated, (PCWorkingColor *)&v130, (uint64_t)&v132, (HGNode **)v127, *(double *)&v129, (__n128 *)&v114);
  v61 = *(_QWORD *)&v127[0];
  if (v115 == *(_QWORD *)&v127[0])
  {
    if (!v115 || ((*(void (**)(void))(*(_QWORD *)v115 + 24))(), !v115))
    {
LABEL_105:
      *v108 = 0;
      v115 = 0;
      goto LABEL_29;
    }
  }
  else
  {
    if (v115)
    {
      (*(void (**)(void))(*(_QWORD *)v115 + 24))();
      v61 = *(_QWORD *)&v127[0];
    }
    v115 = v61;
    if (!v61)
      goto LABEL_105;
  }
  RenderNodeList = (_QWORD *)HGRenderJob::GetRenderNodeList((HGRenderJob *)v24);
  TXTextLayout::shouldCacheTexture((uint64_t)RenderNodeList, v63, v64, RenderNodeList);
LABEL_48:
  v65 = a11;
  *(double *)a11 = 1.0 / v113;
  *(double *)(a11 + 40) = 1.0 / v112;
  v132.var7.var0[1][2] = 1.0;
  v132.var7.var0[0][1] = 1.0;
  v132.var3 = 1.0;
  v132.var0.var0 = 0x3FF0000000000000;
  memset(&v132.var0.var1, 0, 32);
  memset(&v132.var4, 0, 32);
  memset(&v132.var7.var0[0][2], 0, 32);
  if (!*v20)
  {
    PCMatrix44Tmpl<double>::operator*((uint64_t)a10, a9, (uint64_t)v119);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v119, v16, (uint64_t)&v121);
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v121, (__int128 *)a11, (uint64_t)v127);
    for (i = 0; i != 8; i += 2)
    {
      v67 = (_OWORD *)((char *)&v132.var0.var0 + i * 16);
      v68 = v127[i + 1];
      *v67 = v127[i];
      v67[1] = v68;
    }
  }
  if (!PCMatrix44Tmpl<double>::isIdentity((double *)&v132.var0.var0))
  {
    v69.i64[0] = v114.i32[2];
    v69.i64[1] = v114.i32[3];
    __asm { FMOV            V2.2D, #0.5 }
    v71 = vmulq_f64(vcvtq_f64_s64(v69), _Q2);
    v69.i64[0] = v114.i32[0];
    v69.i64[1] = v114.i32[1];
    v121 = (TXTextStyle *)vcvt_f32_f64(vaddq_f64(v71, vcvtq_f64_s64(v69)));
    LiAgent::makeHeliumXForm((uint64_t)v22, (uint64_t)&v132, &v115, v127);
    v72 = *(_QWORD *)&v127[0];
    if (v115 == *(_QWORD *)&v127[0])
    {
      if (v115)
        (*(void (**)(void))(*(_QWORD *)v115 + 24))();
    }
    else
    {
      if (v115)
      {
        (*(void (**)(void))(*(_QWORD *)v115 + 24))();
        v72 = *(_QWORD *)&v127[0];
      }
      v115 = v72;
    }
  }
  if (v109)
    (*(void (**)(HGBitmap *))(*(_QWORD *)v109 + 24))(v109);
  v73 = v111;
  if (v111)
  {
    v74 = (unint64_t *)&v111->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (*v20)
  {
    v76 = *((_QWORD *)*v26 + 33);
    if (v76)
    {
      v77 = *(_QWORD *)(v76 + 8);
      v78 = *(std::__shared_weak_count **)(v76 + 16);
      v121 = (TXTextStyle *)v77;
      v122 = v78;
      v79 = v107;
      if (v78)
      {
        v80 = (unint64_t *)&v78->__shared_owners_;
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
    }
    else
    {
      v77 = 0;
      v121 = 0;
      v122 = 0;
      v79 = v107;
    }
    if (OZChannel::getValueAsInt((OZChannel *)(v77 + 22760), MEMORY[0x1E0CA2E68], 0.0) == 2)
      v82 = TXTextStyle::hasTexture(v121, (TXTextStyle *)((char *)v121 + 25232));
    else
      v82 = 0;
    *(_DWORD *)*v20 = v79;
    LiAgent::getObjectToPixelTransform(v22, (uint64_t)v127);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v127, a9, (uint64_t)&v132);
    v83 = (_DWORD *)*v20;
    v84 = (OZRenderState *)(*v20 + 8);
    if (&v132 != v84)
    {
      v85 = 0;
      v86 = &v132;
      do
      {
        for (j = 0; j != 32; j += 8)
          *(int64_t *)((char *)&v84->var0.var0 + j) = *(int64_t *)((char *)&v86->var0.var0 + j);
        ++v85;
        v84 = (OZRenderState *)((char *)v84 + 32);
        v86 = (OZRenderState *)((char *)v86 + 32);
      }
      while (v85 != 4);
    }
    v88 = v83 + 34;
    if (v83 + 34 != (_DWORD *)v16)
    {
      for (k = 0; k != 4; ++k)
      {
        for (m = 0; m != 8; m += 2)
          *(_QWORD *)&v88[m] = *(_QWORD *)((char *)v16 + m * 4);
        v88 += 8;
        v16 += 2;
      }
    }
    *((_BYTE *)v83 + 465) = 1;
    v91 = v83 + 66;
    if (v83 + 66 != (_DWORD *)a11)
    {
      for (n = 0; n != 4; ++n)
      {
        for (ii = 0; ii != 8; ii += 2)
          *(_QWORD *)&v91[ii] = *(_QWORD *)(v65 + ii * 4);
        v91 += 8;
        v65 += 32;
      }
    }
    if ((v106 & 1) != 0)
    {
      *(int32x4_t *)(v83 + 98) = v116;
    }
    else
    {
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v132);
      PCHashWriteStream::writeValue((int8x8_t *)&v132, v79);
      PCHashWriteStream::close((int8x8_t *)&v132);
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v127);
      Hash = PCHashWriteStream::getHash((int8x8_t *)&v132);
      v127[0] = *(_OWORD *)Hash->i8;
      *(_OWORD *)(*v20 + 392) = *(_OWORD *)Hash->i8;
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v132);
    }
    v95 = *v20;
    *(_BYTE *)(v95 + 456) = 1;
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(v95 + 472), (uint64_t *)v26);
    v96 = PCWorkingColor::operator=((__n128 *)(*v20 + 408), &v130);
    v97 = *v20;
    *(_DWORD *)(v97 + 460) = 1;
    *(_BYTE *)(v97 + 464) = v82;
    v98 = v122;
    if (v122)
    {
      v99 = (unint64_t *)&v122->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v98->__on_zero_shared)(v98, v96);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
  }
  *v108 = v115;
LABEL_99:
  v101 = *(std::__shared_weak_count **)&v125;
  if (v125 != 0.0)
  {
    v102 = (unint64_t *)(*(_QWORD *)&v125 + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v131);
}

void sub_1B2910188(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void TXTextLayout::buildHGNodeForFace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9, uint64_t a10, uint64_t a11, unsigned __int8 *a12, uint64_t a13, unsigned __int8 a14, char a15)
{
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  char v18;
  char v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  const OZRenderParams *v24;
  OZRenderParams *v25;
  TXTextObject **v26;
  TXTextObject **v27;
  Li3DEngineScene *v28;
  _QWORD *v29;
  _QWORD *v30;
  OZEaseInInterpolator *RequestedColorDescription;
  CGColorSpaceRef *v32;
  CGColorSpaceRef *v33;
  int DynamicRange;
  PCToneMapMethod *ToneMapMethod;
  TXTextObject *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t jj;
  _OWORD *v46;
  __int128 v47;
  void *value;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  uint64_t i;
  _OWORD *v54;
  __int128 v55;
  int64x2_t v56;
  float64x2_t v62;
  _QWORD *RenderNodeList;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t *v71;
  unint64_t v72;
  unsigned __int8 v73;
  CMTime *v74;
  uint64_t v75;
  CMTime *v76;
  uint64_t j;
  uint64_t v78;
  uint64_t v79;
  uint64_t k;
  uint64_t m;
  uint64_t v82;
  uint64_t n;
  uint64_t ii;
  int8x8_t *Hash;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  BOOL hasParameter;
  _QWORD *v104;
  unsigned int v105;
  _QWORD *v106;
  void *lpsrc[2];
  double v108;
  double v109;
  double v110;
  PCSharedCount v111;
  void *v112;
  int v113;
  uint64_t v114;
  char v115;
  CGColorSpace *v116[6];
  std::__shared_weak_count *v117;
  __n128 v118;
  char v119;
  TXTextStyle *v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  HGBitmap *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  double v133;
  double v134;
  __int128 v135;
  int32x4_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  CGColorSpace *v140;
  CMTime v141[59];
  CMTime v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;

  v15 = MEMORY[0x1E0C80A78](a1);
  v17 = v16;
  v19 = v18;
  v105 = v20;
  v106 = v21;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v28 = (Li3DEngineScene *)v15;
  v30 = v29;
  v151 = *MEMORY[0x1E0C80C00];
  OZRenderParams::OZRenderParams((OZRenderParams *)v141, v24);
  RequestedColorDescription = (OZEaseInInterpolator *)LiAgent::getRequestedColorDescription((LiAgent *)v23);
  OZEaseInInterpolator::~OZEaseInInterpolator(RequestedColorDescription);
  v33 = v32;
  DynamicRange = FxColorDescription::getDynamicRange((FxColorDescription *)RequestedColorDescription);
  ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod((FxColorDescription *)RequestedColorDescription);
  PCWorkingColor::PCWorkingColor((uint64_t)&v139, v33, DynamicRange, ToneMapMethod);
  v36 = *v27;
  v142 = v141[0];
  if ((TXTextObject::isFaceVisible(v36, &v142, &v139, (uint64_t)(a12 + 8), *((_DWORD *)a12 + 17), *((_DWORD *)a12 + 16)) & 1) == 0)
  {
    *v30 = 0;
    goto LABEL_109;
  }
  hasParameter = OZRenderParams::hasParameter(v25, (const char *)kTXIsBestModeUnitTest);
  v37 = *((_QWORD *)*v27 + 33);
  if (v37)
  {
    v38 = *(_QWORD *)(v37 + 8);
    v39 = *(std::__shared_weak_count **)(v37 + 16);
    v137 = v38;
    v138 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(p_shared_owners);
      while (__stxr(v41 + 1, p_shared_owners));
    }
  }
  else
  {
    v38 = 0;
    v138 = 0;
    v137 = 0;
  }
  v104 = v30;
  OZChannel::getValueAsInt((OZChannel *)(v38 + 6088), MEMORY[0x1E0CA2E68], 0.0);
  v42 = *a12;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v136);
  v43 = a11;
  v135 = xmmword_1B30503B0;
  v134 = 1.0;
  v133 = 1.0;
  v132 = 0;
  v130 = 0;
  v131 = 0;
  if (!hasParameter)
  {
    LOBYTE(v102) = a14;
    if ((TXTextLayout::getCachedTextureOrImage(v28, *v27, (OZRenderParams *)v141, (LiAgent *)v23, 0, v42 != 0, a9, a10, &v136, &v134, &v133, (int32x4_t *)&v135, v102, &v131, &v130, a15) & 1) != 0)
    {
      TXTextLayout::makeHGTextureOrBitmapNode((HGRenderJob *)v141, &v131, &v130, (uint64_t *)&v135, (LiRenderParameters **)v23, a14, (HGBitmapLoader **)&v142);
      value = (void *)v142.value;
      v44 = v104;
    }
    else
    {
      v121 = 0u;
      v122 = 0u;
      v120 = *(TXTextStyle **)&v134;
      v123 = *(_QWORD *)&v133;
      v124 = 0u;
      v125 = 0u;
      v127 = 0u;
      v128 = 0u;
      v126 = 0x3FF0000000000000;
      v129 = 0x3FF0000000000000;
      if (v134 > -0.0000001 && v134 < 0.0000001 || v133 > -0.0000001 && v133 < 0.0000001)
      {
        *v104 = 0;
        goto LABEL_97;
      }
      v119 = 0;
      TXTextLayout::getLiImageSourceForFace((uint64_t)v28, (const OZRenderParams *)v141, (FxColorDescription *)RequestedColorDescription, v27, (uint64_t)&v139, &v119, v42 == 0, (PCSharedCount *)&v118);
      LiRenderParameters::LiRenderParameters((LiRenderParameters *)&v108, *(const LiRenderParameters **)(v23 + 48));
      v115 = 0;
      LiAgent::LiAgent(&v142, &v108, &v120, 1);
      v44 = v104;
      LiAgent::getROI((__n128 *)v23, (__n128 *)lpsrc);
      LiAgent::setClientROI((__n128 *)&v142, (__n128 *)lpsrc);
      LiAgent::setRequestedColorDescription((CGColorSpace **)&v142, (const FxColorDescription *)RequestedColorDescription);
      LiAgent::getHelium((LiAgent *)&v142, (LiImageSource *)v118.n128_u64[0], (HGNode **)lpsrc);
      value = lpsrc[0];
      LiAgent::setActualColorDescription((CGColorSpace **)v23, (const FxColorDescription *)RequestedColorDescription);
      if (value)
      {
        LiAgent::getDOD((uint64_t)&v142, (uint64_t)lpsrc);
        v135 = *(_OWORD *)lpsrc;
        RenderNodeList = (_QWORD *)HGRenderJob::GetRenderNodeList((HGRenderJob *)v141);
        TXTextLayout::shouldCacheTexture((uint64_t)RenderNodeList, v64, v65, RenderNodeList);
      }
      else
      {
        *v104 = 0;
      }
      LiAgent::~LiAgent((LiAgent *)&v142);
      v98 = v117;
      if (v117)
      {
        v99 = (unint64_t *)&v117->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(v116);
      v112 = &unk_1E64FC2F8;
      if (v113 < 0)
        v101 = 1;
      else
        v101 = v113;
      PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v112, 0, v101);
      if (v114)
        MEMORY[0x1B5E2914C](v114, 0x1000C8077774924);
      v114 = 0;
      v113 = 0;
      PCSharedCount::~PCSharedCount(&v111);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v118.n128_i8[8]);
      if (!value)
        goto LABEL_97;
    }
    *(double *)a11 = 1.0 / v134;
    *(double *)(a11 + 40) = 1.0 / v133;
    v150 = 0x3FF0000000000000;
    v147 = 0x3FF0000000000000;
    v144 = 0x3FF0000000000000;
    v142.value = 0x3FF0000000000000;
    *(_OWORD *)&v142.timescale = 0u;
    v143 = 0u;
    v145 = 0u;
    v146 = 0u;
    v148 = 0u;
    v149 = 0u;
    if (!*v106)
    {
      PCMatrix44Tmpl<double>::operator*(a10, a9, (uint64_t)&v120);
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v120, (__int128 *)a11, (uint64_t)&v108);
      for (i = 0; i != 128; i += 32)
      {
        v54 = (_OWORD *)((char *)&v142.value + i);
        v55 = *(_OWORD *)((char *)&v110 + i);
        *v54 = *(_OWORD *)((char *)&v108 + i);
        v54[1] = v55;
      }
    }
    if (PCMatrix44Tmpl<double>::isIdentity((double *)&v142.value))
    {
LABEL_59:
      TXTextObject::isEmoji(*v27);
      if (*v106)
      {
        v67 = *((_QWORD *)*v27 + 33);
        if (v67)
        {
          v68 = *(_QWORD *)(v67 + 8);
          v69 = *(_QWORD *)(v67 + 16);
          v120 = (TXTextStyle *)v68;
          *(_QWORD *)&v121 = v69;
          v70 = v106;
          if (v69)
          {
            v71 = (unint64_t *)(v69 + 8);
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
        }
        else
        {
          v68 = 0;
          v120 = 0;
          *(_QWORD *)&v121 = 0;
          v70 = v106;
        }
        if (OZChannel::getValueAsInt((OZChannel *)(v68 + 6088), MEMORY[0x1E0CA2E68], 0.0) == 2)
          v73 = TXTextStyle::hasTexture(v120, (TXTextStyle *)((char *)v120 + 8560));
        else
          v73 = 0;
        *(_DWORD *)*v70 = v105;
        LiAgent::getObjectToPixelTransform((LiAgent *)v23, (uint64_t)&v108);
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v108, a9, (uint64_t)&v142);
        v74 = (CMTime *)(*v70 + 8);
        if (&v142 != v74)
        {
          v75 = 0;
          v76 = &v142;
          do
          {
            for (j = 0; j != 32; j += 8)
              *(CMTimeValue *)((char *)&v74->value + j) = *(CMTimeValue *)((char *)&v76->value + j);
            ++v75;
            v74 = (CMTime *)((char *)v74 + 32);
            v76 = (CMTime *)((char *)v76 + 32);
          }
          while (v75 != 4);
        }
        v108 = 0.0;
        v109 = 0.0;
        v110 = 0.0;
        getScale(*(float64x2_t **)(v23 + 160), (uint64_t)&v108);
        PCMatrix44Tmpl<double>::rightScale((double *)(*v70 + 8), 1.0 / v108, 1.0 / v109, 1.0 / v110);
        v78 = *v70;
        *(_BYTE *)(v78 + 465) = 1;
        v79 = v78 + 136;
        if ((__int128 *)(v78 + 136) != v17)
        {
          for (k = 0; k != 4; ++k)
          {
            for (m = 0; m != 32; m += 8)
              *(_QWORD *)(v79 + m) = *(_QWORD *)((char *)v17 + m);
            v79 += 32;
            v17 += 2;
          }
        }
        v82 = v78 + 264;
        if (v78 + 264 != a11)
        {
          for (n = 0; n != 4; ++n)
          {
            for (ii = 0; ii != 32; ii += 8)
              *(_QWORD *)(v82 + ii) = *(_QWORD *)(v43 + ii);
            v82 += 32;
            v43 += 32;
          }
        }
        if ((v19 & 1) != 0)
        {
          if (hasParameter)
          {
            TXTextObject::getCacheHash(*v27, (OZRenderParams *)v141);
            v78 = *v70;
          }
          else
          {
            *(int32x4_t *)&v142.value = v136;
          }
          *(_OWORD *)(v78 + 392) = *(_OWORD *)&v142.value;
        }
        else
        {
          PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v142);
          PCHashWriteStream::reset((uint64_t)&v142);
          PCHashWriteStream::writeValue((int8x8_t *)&v142, v105);
          PCHashWriteStream::close((int8x8_t *)&v142);
          PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)lpsrc);
          Hash = PCHashWriteStream::getHash((int8x8_t *)&v142);
          *(_OWORD *)lpsrc = *(_OWORD *)Hash->i8;
          *(_OWORD *)(*v70 + 392) = *(_OWORD *)Hash->i8;
          PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v142);
        }
        v86 = *v70;
        *(_BYTE *)(v86 + 456) = 1;
        std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(v86 + 472), (uint64_t *)v27);
        v87 = PCWorkingColor::operator=((__n128 *)(*v70 + 408), &v139);
        v88 = *v70;
        *(_DWORD *)(v88 + 460) = 0;
        *(_BYTE *)(v88 + 464) = v73;
        v89 = (std::__shared_weak_count *)v121;
        if ((_QWORD)v121)
        {
          v90 = (unint64_t *)(v121 + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v87);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v44 = v104;
      }
      *v44 = value;
      goto LABEL_97;
    }
    v108 = *(double *)&value;
    if (value)
      (*(void (**)(void *))(*(_QWORD *)value + 16))(value);
    v56.i64[0] = SDWORD2(v135);
    v56.i64[1] = SHIDWORD(v135);
    __asm { FMOV            V2.2D, #0.5 }
    v62 = vmulq_f64(vcvtq_f64_s64(v56), _Q2);
    v56.i64[0] = (int)v135;
    v56.i64[1] = SDWORD1(v135);
    v120 = (TXTextStyle *)vcvt_f32_f64(vaddq_f64(v62, vcvtq_f64_s64(v56)));
    LiAgent::makeHeliumXForm(v23, (uint64_t)&v142, (uint64_t *)&v108, lpsrc);
    if (value == lpsrc[0])
    {
      if (!value)
      {
LABEL_57:
        if (v108 != 0.0)
          (*(void (**)(double))(**(_QWORD **)&v108 + 24))(COERCE_DOUBLE(*(_QWORD *)&v108));
        goto LABEL_59;
      }
      (*(void (**)(void *))(*(_QWORD *)value + 24))(value);
    }
    else
    {
      if (value)
        (*(void (**)(void *))(*(_QWORD *)value + 24))(value);
      value = lpsrc[0];
    }
    if (*(_BYTE *)(*(_QWORD *)(v23 + 48) + 144))
    {
      if (value)
      {
        if (v66)
          (*(void (**)(void *, float))(*(_QWORD *)v66 + 648))(v66, 0.001);
      }
    }
    goto LABEL_57;
  }
  v119 = 0;
  TXTextLayout::getLiImageSourceForFace((uint64_t)v28, (const OZRenderParams *)v141, (FxColorDescription *)RequestedColorDescription, v27, (uint64_t)&v139, &v119, 0, (PCSharedCount *)lpsrc);
  v44 = v104;
  if (v119)
  {
    v129 = 0x3FF0000000000000;
    v126 = 0x3FF0000000000000;
    v123 = 0x3FF0000000000000;
    v120 = (TXTextStyle *)0x3FF0000000000000;
    v121 = 0u;
    v122 = 0u;
    v124 = 0u;
    v125 = 0u;
    v127 = 0u;
    v128 = 0u;
    if (!*v106)
    {
      PCMatrix44Tmpl<double>::operator*(a10, a9, (uint64_t)&v108);
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v108, v17, (uint64_t)&v142);
      for (jj = 0; jj != 128; jj += 32)
      {
        v46 = (_OWORD *)((char *)&v120 + jj);
        v47 = *(_OWORD *)((char *)&v142.epoch + jj);
        *v46 = *(_OWORD *)((char *)&v142.value + jj);
        v46[1] = v47;
      }
    }
    LiRenderParameters::LiRenderParameters((LiRenderParameters *)&v108, *(const LiRenderParameters **)(v23 + 48));
    v115 = 0;
    LiAgent::LiAgent(&v142, &v108, &v120, 1);
    LiAgent::getROI((__n128 *)v23, &v118);
    LiAgent::setClientROI((__n128 *)&v142, &v118);
    LiAgent::setRequestedColorDescription((CGColorSpace **)&v142, (const FxColorDescription *)RequestedColorDescription);
    LiAgent::getHelium((LiAgent *)&v142, (LiImageSource *)lpsrc[0], (HGNode **)&v118);
    value = (void *)v118.n128_u64[0];
    LiAgent::setActualColorDescription((CGColorSpace **)v23, (const FxColorDescription *)RequestedColorDescription);
    if (!value)
    {
      if (OZRenderParams::hasParameter((OZRenderParams *)v141, (const char *)kTXIsBestModeUnitTest))
        OZRenderParams::setParameter((OZRenderParams *)v141, (const char *)kTXIsBestModeUnitTest, 2);
      *v104 = 0;
    }
    LiAgent::~LiAgent((LiAgent *)&v142);
    v49 = v117;
    if (v117)
    {
      v50 = (unint64_t *)&v117->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    PCCFRef<CGColorSpace *>::~PCCFRef(v116);
    v112 = &unk_1E64FC2F8;
    if (v113 < 0)
      v52 = 1;
    else
      v52 = v113;
    PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v112, 0, v52);
    if (v114)
      MEMORY[0x1B5E2914C](v114, 0x1000C8077774924);
    v114 = 0;
    v113 = 0;
    PCSharedCount::~PCSharedCount(&v111);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&lpsrc[1]);
    if (!value)
      goto LABEL_97;
    goto LABEL_59;
  }
  *v104 = 0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&lpsrc[1]);
LABEL_97:
  if (v130)
    (*(void (**)(HGBitmap *))(*(_QWORD *)v130 + 24))(v130);
  v92 = v132;
  if (v132)
  {
    v93 = (unint64_t *)&v132->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v138;
  if (v138)
  {
    v96 = (unint64_t *)&v138->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
LABEL_109:
  PCCFRef<CGColorSpace *>::~PCCFRef(&v140);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v141);
}

void sub_1B2910E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  uint64_t v72;

  if (a26)
    (*(void (**)(uint64_t))(*(_QWORD *)a26 + 24))(a26);
  if (a72)
    (*(void (**)(uint64_t))(*(_QWORD *)a72 + 24))(a72);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x248]);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x268]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x280]);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::shouldCacheTexture(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  if (*(_DWORD *)(*a4 + 8) == 1 && *(void (***)(HGGPUComputeDevice *__hidden))*a4 == off_1E6523A60)
  {
    v5 = (std::__shared_weak_count *)a4[1];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return 0;
}

uint64_t TXTextLayout::getCachedImage(Li3DEngineScene *a1, TXTextObject *a2, OZRenderParams *this, const FxColorDescription *a4, unsigned int a5, int a6, __int128 *a7, uint64_t a8, _QWORD *a9, int32x4_t *a10, double *a11, double *a12, int32x4_t *a13)
{
  uint64_t v19;
  int32x4_t *v20;
  OZScene **v21;
  OZCacheManager *RenderNodeList;
  uint64_t i;
  PGTextureCache *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  float64x2_t *v34;
  uint64_t v35;
  _BYTE v38[8];
  int32x4_t v39;
  int32x4_t v40;

  if (OZRenderParams::getTextRenderQuality(this) == 6)
  {
    PCMatrix44Tmpl<double>::operator*(a8, a7, (uint64_t)&v40);
    TXTextObject::getTextureCacheHashForAttribute(a2, this, a4, a5, a11, a12);
    *a10 = v39;
    v19 = (uint64_t)a2;
    v20 = a13;
    TXTextObject::getScaleAndHashForPixelTransform(v19);
    PCHash128::operator+=(a10->i32, v39.i32);
  }
  else
  {
    TXTextObject::getTextureCacheHashForAttribute(a2, this, a4, a5, a11, a12);
    *a10 = v40;
    v20 = a13;
  }
  v21 = (OZScene **)Li3DEngineScene::sceneManager(a1);
  RenderNodeList = OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v38, v21);
  for (i = *((_QWORD *)a1 + 7585); ; i = *(_QWORD *)(i + 8))
  {
    if ((Li3DEngineScene *)i == (Li3DEngineScene *)((char *)a1 + 60672))
    {
      v24 = (PGTextureCache *)OZCacheManager::Instance(RenderNodeList);
      if (*(_DWORD *)(*(_QWORD *)HGRenderJob::GetRenderNodeList((HGRenderJob *)this) + 8))
      {
        OZRenderParams::getRenderGPU((uint64_t)this, (void (****)(HGGPUComputeDevice *__hidden))&v39);
        OZCacheManager::getTextureForKey(v24, (HGGPUComputeDevice **)&v39, (const PCHash128 *)a10, 0, &v40);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a9, (__int128 *)v40.i8);
        v25 = (std::__shared_weak_count *)v40.i64[1];
        if (v40.i64[1])
        {
          v26 = (unint64_t *)(v40.i64[1] + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v28 = (std::__shared_weak_count *)v39.i64[1];
        if (v39.i64[1])
        {
          v29 = (unint64_t *)(v39.i64[1] + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        if (!*a9)
          goto LABEL_33;
      }
      else
      {
        OZCacheManager::getImageForKey((const PCHash128 *)a10, &v40);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a9, (__int128 *)v40.i8);
        v31 = (std::__shared_weak_count *)v40.i64[1];
        if (v40.i64[1])
        {
          v32 = (unint64_t *)(v40.i64[1] + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (!*a9)
          goto LABEL_33;
      }
      v34 = (float64x2_t *)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)a1 + 60696, (const PCHash128 *)a10);
      if ((float64x2_t *)((char *)a1 + 60704) != v34)
      {
        *v20 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v34[3]), (int32x4_t)vcvtq_s64_f64(v34[4]));
        goto LABEL_35;
      }
LABEL_33:
      v35 = 0;
      goto LABEL_36;
    }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(i + 80), *a10)))) & 1) != 0)
      continue;
    *v20 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(i + 48)), (int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(i + 64)));
    RenderNodeList = (OZCacheManager *)HGRenderJob::GetRenderNodeList((HGRenderJob *)this);
    if (*(_DWORD *)(*(_QWORD *)RenderNodeList + 8))
      break;
    if (*(_QWORD *)(i + 32))
    {
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](a9, (uint64_t *)(i + 32));
      goto LABEL_35;
    }
LABEL_11:
    ;
  }
  if (!*(_QWORD *)(i + 16))
    goto LABEL_11;
  std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](a9, (uint64_t *)(i + 16));
LABEL_35:
  v35 = 1;
LABEL_36:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v38);
  return v35;
}

void sub_1B2911460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void *PCDynamicCast<PCBitmap,PCImage>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *PCDynamicCast<PGTexture,PCImage>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

BOOL TXTextLayout::getCachedMetalTexture(uint64_t a1, TXTextObject *a2, OZRenderParams *this, LiAgent *a4, unsigned int a5, int a6, __int128 *a7, uint64_t a8, int32x4_t *a9, double *a10, double *a11, int32x4_t *a12, _QWORD *a13, char a14)
{
  const FxColorDescription *RequestedColorDescription;
  int32x4_t *v19;
  void **HostApplicationDelegate;
  char v21;
  const FxColorDescription *v22;
  HGGPURenderer *HeliumRenderer;
  void *v24;
  uint64_t v25;
  std::mutex *v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  OZCacheManager *v31;
  OZMetalTextureCache *v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  float64x2_t *v36;
  uint64_t v38;
  int v42[4];
  _OWORD v43[8];

  if (OZRenderParams::getTextRenderQuality(this) == 6)
  {
    RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a4);
    TXTextObject::getTextureCacheHashForAttribute(a2, this, RequestedColorDescription, a5, a10, a11);
    *a9 = (int32x4_t)v43[0];
    v19 = a12;
  }
  else
  {
    HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
    v21 = OZHostApplicationDelegateHandler::wantsToImproveQualityOfDraftQualityText(HostApplicationDelegate);
    v22 = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a4);
    TXTextObject::getTextureCacheHashForAttribute(a2, this, v22, a5, a10, a11);
    *a9 = (int32x4_t)v43[0];
    v19 = a12;
    if ((v21 & 1) == 0)
      goto LABEL_5;
  }
  PCMatrix44Tmpl<double>::operator*(a8, a7, (uint64_t)v43);
  TXTextObject::getScaleAndHashForPixelTransform((uint64_t)a2);
  PCHash128::operator+=(a9->i32, v42);
LABEL_5:
  HeliumRenderer = (HGGPURenderer *)LiAgent::getHeliumRenderer((LiRenderParameters **)a4);
  v24 = *(void **)(*(_QWORD *)(HGGPURenderer::GetMetalContext(HeliumRenderer) + 16) + 16);
  v25 = OZMetalUtils::registryID(v24);
  v26 = (std::mutex *)(a1 + 60768);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 60768));
  v27 = *(_QWORD *)(a1 + 60880);
  if (v27 == a1 + 60872)
  {
LABEL_12:
    v30 = 1;
    goto LABEL_13;
  }
  while (1)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v27 + 56), *a9)))) & 1) == 0)
    {
      v28 = *(_QWORD *)(v27 + 16);
      if (v28 && *(_QWORD *)(v27 + 72) == v25)
        break;
    }
    v27 = *(_QWORD *)(v27 + 8);
    if (v27 == a1 + 60872)
      goto LABEL_12;
  }
  *v19 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(v27 + 24)), (int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(v27 + 40)));
  v38 = *a13;
  if (*a13 != v28)
  {
    if (v38)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v38 + 24))(*a13);
      v28 = *(_QWORD *)(v27 + 16);
      *a13 = v28;
      if (!v28)
        goto LABEL_33;
    }
    else
    {
      *a13 = v28;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
  }
LABEL_33:
  v30 = 0;
LABEL_13:
  PCSharedMutex::unlock_shared(v26);
  if ((v30 & 1) == 0)
    return 1;
  v32 = (OZMetalTextureCache *)OZCacheManager::Instance(v31);
  OZCacheManager::getMetalTextureForKey(v32, v24, (const PCHash128 *)a9, v43);
  v33 = *a13;
  v34 = *(_QWORD *)&v43[0];
  if (*a13 == *(_QWORD *)&v43[0])
  {
    if (!v33)
      return 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
    if (!*a13)
      return 0;
  }
  else
  {
    if (v33)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
      v34 = *(_QWORD *)&v43[0];
    }
    *a13 = v34;
    if (!v34)
      return 0;
  }
  PCSharedMutex::lock_shared(v26);
  v36 = (float64x2_t *)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(a1 + 60896, (const PCHash128 *)a9);
  v35 = a1 + 60904 != (_QWORD)v36;
  if ((float64x2_t *)(a1 + 60904) != v36)
    *v19 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v36[3]), (int32x4_t)vcvtq_s64_f64(v36[4]));
  PCSharedMutex::unlock_shared(v26);
  return v35;
}

void sub_1B2911894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::mutex *v16;

  PCSharedMutex::unlock_shared(v16);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getCachedTextureOrImage(Li3DEngineScene *a1, TXTextObject *a2, OZRenderParams *this, LiAgent *a4, unsigned int a5, int a6, __int128 *a7, uint64_t a8, int32x4_t *a9, double *a10, double *a11, int32x4_t *a12, uint64_t a13, _QWORD *a14, _QWORD *a15, char a16)
{
  const FxColorDescription *RequestedColorDescription;

  if ((_BYTE)a13)
    return TXTextLayout::getCachedMetalTexture((uint64_t)a1, a2, this, a4, a5, a6, a7, a8, a9, a10, a11, a12, a15, a16);
  RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a4);
  return TXTextLayout::getCachedImage(a1, a2, this, RequestedColorDescription, a5, a6, a7, a8, a14, a9, a10, a11, a12);
}

void TXTextLayout::makeHGTextureOrBitmapNode(HGRenderJob *this@<X3>, _QWORD *a2@<X1>, HGBitmap **a3@<X2>, uint64_t *a4@<X4>, LiRenderParameters **a5@<X5>, int a6@<W6>, HGBitmapLoader **a7@<X8>)
{
  HGBitmap *v8;
  HGBitmapLoader *v9;
  const void *HeliumRenderer;
  void *v14;
  uint64_t v15;
  HGBitmapLoader *v16;

  *a7 = 0;
  if (a6)
  {
    v8 = *a3;
    v9 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
    HGBitmapLoader::HGBitmapLoader(v9, v8);
    if (v9)
      *a7 = v9;
  }
  else
  {
    if (*(_DWORD *)(*(_QWORD *)HGRenderJob::GetRenderNodeList(this) + 8))
    {
      HeliumRenderer = (const void *)LiAgent::getHeliumRenderer(a5);
      if (HeliumRenderer)
      else
        v14 = 0;
      v15 = *a4;
      PGHelium::createTextureNode(a2, (uint64_t)v14, (unsigned int *)&v15, 1, 0, &v16);
    }
    else
    {
      v15 = *a4;
      PGHelium::createBitmapNode(a2, (unsigned int *)&v15, 1, 0, &v16);
    }
    if (v16)
      *a7 = v16;
  }
}

void sub_1B2911AC8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL OZRenderParams::hasParameter(OZRenderParams *this, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;

  v7 = a2;
  v3 = *((_QWORD *)this + 155);
  if (!v3)
    throw_PCNullPointerException(1);
  v4 = std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::find<char const*>(v3 + 8, &v7);
  v5 = *((_QWORD *)this + 155);
  if (!v5)
    throw_PCNullPointerException(1);
  return v5 + 16 != v4;
}

void LiRenderParameters::LiRenderParameters(LiRenderParameters *this, const LiRenderParameters *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  CGColorSpace *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  *(_OWORD *)this = *(_OWORD *)a2;
  LiImageFilterChain::LiImageFilterChain((LiRenderParameters *)((char *)this + 16), (const LiRenderParameters *)((char *)a2 + 16));
  v4 = *(_OWORD *)((char *)a2 + 56);
  v5 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 72) = v5;
  *(_OWORD *)((char *)this + 56) = v4;
  v6 = *(_OWORD *)((char *)a2 + 104);
  v7 = *(_OWORD *)((char *)a2 + 120);
  v8 = *(_OWORD *)((char *)a2 + 136);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *(_OWORD *)((char *)this + 136) = v8;
  *(_OWORD *)((char *)this + 120) = v7;
  *(_OWORD *)((char *)this + 104) = v6;
  v9 = (CGColorSpace *)*((_QWORD *)a2 + 20);
  *((_QWORD *)this + 20) = v9;
  if (v9)
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  v10 = *((_QWORD *)a2 + 21);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_QWORD *)this + 21) = v10;
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  v11 = *((_QWORD *)a2 + 26);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)this + 26) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
}

void sub_1B2911C00(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 32) = &unk_1E64FC2F8;
  if (*(int *)(v1 + 40) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(v1 + 40);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(v1 + 32, 0, v3);
  v4 = *(_QWORD *)(v1 + 48);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_QWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 24));
  _Unwind_Resume(a1);
}

void LiRenderParameters::~LiRenderParameters(LiRenderParameters *this)
{
  int v2;
  uint64_t v3;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 20);
  *((_QWORD *)this + 4) = &unk_1E64FC2F8;
  if (*((int *)this + 10) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)this + 10);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)this + 32, 0, v2);
  v3 = *((_QWORD *)this + 6);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = 0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 3);
}

uint64_t *OZRenderParams::setParameter(OZRenderParams *this, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *result;
  const char *v6;
  const char **v7;

  v6 = a2;
  v4 = *((_QWORD *)this + 155);
  if (!v4)
    throw_PCNullPointerException(1);
  v7 = &v6;
  result = std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>((uint64_t **)(v4 + 8), &v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v7);
  result[5] = a3;
  return result;
}

void TXTextLayout::outlineNodeFromTextObject(const LiRenderParameters **this@<X3>, uint64_t a2@<X0>, TXTextObject **a3@<X1>, const OZRenderParams *a4@<X2>, uint64_t a5@<X4>, char a6@<W5>, PCWorkingColor *a7@<X6>, uint64_t a8@<X7>, HGNode **a9@<X8>, double a10@<D0>, __n128 *a11)
{
  FxColorDescription *RequestedColorDescription;
  uint64_t v22;
  TXTextStyle *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  int FillType;
  HgcTXColor *v28;
  HGNode *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  __n128 v36;
  float v37;
  uint64_t v38;
  TXTextStyle *v39;
  std::__shared_weak_count *v40;
  __n128 v41[29];
  _BYTE v42[24];
  PCSharedCount v43;
  void *v44;
  int v45;
  uint64_t v46;
  char v47;
  CGColorSpace *v48;
  std::__shared_weak_count *v49;
  PCSharedCount v50;
  PCSharedCount v51;
  _BYTE v52[9];

  RequestedColorDescription = (FxColorDescription *)LiAgent::getRequestedColorDescription((LiAgent *)this);
  v52[0] = 0;
  TXTextLayout::getLiImageSourceForOutline(a2, a4, RequestedColorDescription, a3, a5, (uint64_t)a7, v52, a6, &v50, a10);
  if (v52[0])
  {
    LiRenderParameters::LiRenderParameters((LiRenderParameters *)v42, this[6]);
    v47 = 0;
    LiAgent::LiAgent(v41, v42, a8, 1);
    LiAgent::getROI((__n128 *)this, &v36);
    LiAgent::setClientROI(v41, &v36);
    LiAgent::setRequestedColorDescription((CGColorSpace **)v41, RequestedColorDescription);
    LiAgent::getHelium((LiAgent *)v41, (LiImageSource *)v50.var0, a9);
    LiAgent::setActualColorDescription(this, RequestedColorDescription);
    v22 = *((_QWORD *)*a3 + 33);
    if (v22)
    {
      v23 = *(TXTextStyle **)(v22 + 8);
      v24 = *(std::__shared_weak_count **)(v22 + 16);
      v39 = v23;
      v40 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
      }
      if (v23)
      {
        FillType = TXTextStyle::getFillType(v23, 1);
        if ((a6 & 1) == 0 && !FillType)
        {
          v28 = (HgcTXColor *)HGObject::operator new(0x200uLL);
          HgcTXColor::HgcTXColor(v28);
          (*(void (**)(HgcTXColor *, _QWORD, HGNode *))(*(_QWORD *)v28 + 120))(v28, 0, *a9);
          v36.n128_u32[0] = 0;
          v38 = 0;
          v37 = 0.0;
          PCWorkingColor::getRGBA(a7, (float *)&v36, (float *)&v38 + 1, (float *)&v38, &v37);
          (*(void (**)(HgcTXColor *, _QWORD, float, float, float, float))(*(_QWORD *)v28 + 96))(v28, 0, v36.n128_f32[0], *((float *)&v38 + 1), *(float *)&v38, v37);
          v29 = *a9;
          if (*a9 != (HGNode *)v28)
          {
            if (v29)
              (*(void (**)(HGNode *))(*(_QWORD *)v29 + 24))(v29);
            *a9 = (HGNode *)v28;
            (*(void (**)(HgcTXColor *))(*(_QWORD *)v28 + 16))(v28);
          }
          (*(void (**)(HgcTXColor *))(*(_QWORD *)v28 + 24))(v28);
        }
      }
    }
    else
    {
      v24 = 0;
      v39 = 0;
      v40 = 0;
    }
    if (a11)
    {
      LiAgent::getDOD((uint64_t)v41, (uint64_t)&v36);
      *a11 = v36;
    }
    if (v24)
    {
      v30 = (unint64_t *)&v24->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    LiAgent::~LiAgent((LiAgent *)v41);
    v32 = v49;
    if (v49)
    {
      v33 = (unint64_t *)&v49->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    PCCFRef<CGColorSpace *>::~PCCFRef(&v48);
    v44 = &unk_1E64FC2F8;
    if (v45 < 0)
      v35 = 1;
    else
      v35 = v45;
    PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v44, 0, v35);
    if (v46)
      MEMORY[0x1B5E2914C](v46, 0x1000C8077774924);
    v46 = 0;
    v45 = 0;
    PCSharedCount::~PCSharedCount(&v43);
  }
  else
  {
    *a9 = 0;
  }
  PCSharedCount::~PCSharedCount(&v51);
}

void sub_1B2912070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (*v6)
    (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
  LiAgent::~LiAgent((LiAgent *)va1);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x208]);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v8 - 120));
  _Unwind_Resume(a1);
}

TXTextLayout *TXTextLayout::notify(TXTextLayout *this, char a2)
{
  if ((a2 & 0xC) != 0)
    return (TXTextLayout *)TXTextLayout::updateTextStyles(this);
  return this;
}

_QWORD *TXTextLayout::updateTextStyles(TXTextLayout *this)
{
  _QWORD *result;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t *i;
  const void *v7;
  OZRigBehavior *v8;
  OZRigBehavior *v9;
  const OZChannelBase *v10;
  OZNotificationManager *v11;
  OZNotificationManager *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  result = (_QWORD *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  if (!result)
    return result;
  v3 = result[198];
  if (!v3)
    return result;
  v4 = theApp && *(_BYTE *)(theApp + 81) && *(_BYTE *)(v3 + 184) == 0;
  v5 = *((_QWORD *)this + 2419);
  if ((TXTextLayout *)v5 == (TXTextLayout *)((char *)this + 19344))
    return result;
  do
  {
    v13 = (uint64_t)&v13;
    v14 = &v13;
    v15 = 0;
    OZBehavior::GetBehaviorsAffectingChannel((_BYTE *)(*(_QWORD *)(v5 + 16) + 1304), &v13, 1);
    for (i = v14; i != &v13; i = (uint64_t *)i[1])
    {
      v7 = (const void *)i[2];
      if (v7)
      {
        if (v8)
        {
          v9 = v8;
          if (OZRigBehavior::getWidget(v8))
          {
            v10 = (const OZChannelBase *)*((_QWORD *)OZRigBehavior::getWidget(v9) + 136);
            if (!v10)
            {
              if (!v4)
                continue;
LABEL_19:
              (*(void (**)(_QWORD, OZRigBehavior *))(**(_QWORD **)(v5 + 16) + 288))(*(_QWORD *)(v5 + 16), v9);
              continue;
            }
            v11 = *(OZNotificationManager **)(v3 + 168);
            if (v11)
              LODWORD(v11) = OZNotificationManager::wasChannelModified(v11, v10);
            if (((v4 | v11) & 1) != 0)
              goto LABEL_19;
          }
        }
      }
    }
    v12 = *(OZNotificationManager **)(v3 + 168);
    if (v12 && OZNotificationManager::wasChannelModified(v12, (const OZChannelBase *)(*(_QWORD *)(v5 + 16) + 1304)))
      TXTextStyle::updateFont(*(TXTextStyle **)(v5 + 16));
    result = std::__list_imp<unsigned int>::clear(&v13);
    v5 = *(_QWORD *)(v5 + 8);
  }
  while ((TXTextLayout *)v5 != (TXTextLayout *)((char *)this + 19344));
  return result;
}

void sub_1B29122A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *`non-virtual thunk to'TXTextLayout::notify(_QWORD *this, char a2)
{
  if ((a2 & 0xC) != 0)
    return TXTextLayout::updateTextStyles((TXTextLayout *)(this - 2372));
  return this;
}

void `non-virtual thunk to'TXTextLayout::didChangeDisplayAspectRatio(TXParagraphStyle ***this)
{
  TXTextLayout::setAllParagraphsDirty(this - 25);
}

OZChannelBase *TXTextLayout::didCreateCopyForCopyOnWrite(TXTextLayout *this)
{
  OZChannelBase *result;
  char *v3;
  uint64_t i;
  uint64_t v5;
  unsigned int NextUniqueID;

  result = OZChannelBase::updateIDGenerator((OZChannelBase *)*((unsigned int *)this + 70));
  v3 = (char *)this + 19344;
  for (i = *((_QWORD *)this + 2419); (char *)i != v3; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD *)(i + 16);
    NextUniqueID = OZChannelBase::getNextUniqueID(result);
    OZChannelBase::setID((OZChannelBase *)(v5 + 72), NextUniqueID);
    result = OZStyle::assignUniqueIDsToAllMaterials(*(OZChannelBase **)(i + 16));
  }
  return result;
}

OZChannelBase *`non-virtual thunk to'TXTextLayout::didCreateCopyForCopyOnWrite(TXTextLayout *this)
{
  return TXTextLayout::didCreateCopyForCopyOnWrite((TXTextLayout *)((char *)this - 200));
}

uint64_t TXTextLayout::setSingleLineScaleThreshold(uint64_t this, double a2)
{
  *(double *)(this + 63768) = a2;
  return this;
}

uint64_t TXTextLayout::setRecomputeGlyphPositions(uint64_t this)
{
  *(_BYTE *)(this + 63800) = 1;
  return this;
}

uint64_t TXTextLayout::openMedia(TXTextLayout *this)
{
  uint64_t v2;
  OZScene *v3;
  BOOL v4;
  const void **v5;
  const void **v6;
  void *v7;
  uint64_t *i;
  void *Node;
  unsigned int ValueAsUint;
  void *v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  TXTextLayout::getCurrentStyleForInsertion((uint64_t)this, &v25);
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  v3 = (OZScene *)v2;
  if (v25)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (((*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 296))(this) & 1) != 0)
    {
      v22 = (uint64_t)&v22;
      v23 = &v22;
      v24 = 0;
      v5 = *(const void ***)(v25 + 480);
      v6 = *(const void ***)(v25 + 488);
      if (v5 != v6)
      {
        do
        {
          if (*v5)
          {
            if (v7)
              (*(void (**)(void *, uint64_t *))(*(_QWORD *)v7 + 344))(v7, &v22);
          }
          ++v5;
        }
        while (v5 != v6);
        for (i = v23; i != &v22; i = (uint64_t *)i[1])
        {
          Node = OZScene::getNode(v3, *((_DWORD *)i + 4));
          if (Node)
            (*(void (**)(void *))(*(_QWORD *)Node + 104))(Node);
        }
      }
      std::__list_imp<unsigned int>::clear(&v22);
    }
    else
    {
      ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(v25 + 8696), MEMORY[0x1E0CA2E68], 0.0);
      v11 = OZScene::getNode(v3, ValueAsUint);
      if (v11)
        (*(void (**)(void *))(*(_QWORD *)v11 + 104))(v11);
      v12 = OZChannel::getValueAsUint((OZChannel *)(v25 + 16584), MEMORY[0x1E0CA2E68], 0.0);
      v13 = OZScene::getNode(v3, v12);
      if (v13)
        (*(void (**)(void *))(*(_QWORD *)v13 + 104))(v13);
      v14 = OZChannel::getValueAsUint((OZChannel *)(v25 + 25368), MEMORY[0x1E0CA2E68], 0.0);
      v15 = OZScene::getNode(v3, v14);
      if (v15)
        (*(void (**)(void *))(*(_QWORD *)v15 + 104))(v15);
      v16 = OZChannel::getValueAsUint((OZChannel *)(v25 + 33816), MEMORY[0x1E0CA2E68], 0.0);
      v17 = OZScene::getNode(v3, v16);
      if (v17)
        (*(void (**)(void *))(*(_QWORD *)v17 + 104))(v17);
    }
  }
  v18 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return 0;
}

void sub_1B29125A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTextLayout::openMedia(TXTextLayout *this)
{
  TXTextLayout::openMedia((TXTextLayout *)((char *)this - 200));
  return 0;
}

uint64_t TXTextLayout::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10;
  uint64_t i;

  OZSceneNode::prerollBegin(a1 + 200, a2, a3, a4, a5);
  v10 = a1 + 19344;
  for (i = *(_QWORD *)(a1 + 19352); i != v10; i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, double))(**(_QWORD **)(i + 16) + 304))(*(_QWORD *)(i + 16), a2, a3, a4, a5);
  return 0;
}

uint64_t `non-virtual thunk to'TXTextLayout::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  TXTextLayout::prerollBegin(a1 - 200, a2, a3, a4, a5);
  return 0;
}

uint64_t TXTextLayout::prerollEnd(TXTextLayout *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  char *v6;
  uint64_t i;

  OZSceneNode::prerollEnd((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3);
  v6 = (char *)this + 19344;
  for (i = *((_QWORD *)this + 2419); (char *)i != v6; i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD, const OZRenderParams *, PMFrameRequest *))(**(_QWORD **)(i + 16) + 312))(*(_QWORD *)(i + 16), a2, a3);
  return 0;
}

uint64_t `non-virtual thunk to'TXTextLayout::prerollEnd(TXTextLayout *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  TXTextLayout::prerollEnd((TXTextLayout *)((char *)this - 200), a2, a3);
  return 0;
}

uint64_t TXTextLayout::setRate(TXTextLayout *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  char *v8;
  uint64_t i;

  OZSceneNode::setRate((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3, a4);
  v8 = (char *)this + 19344;
  for (i = *((_QWORD *)this + 2419); (char *)i != v8; i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD, const OZRenderParams *, PMFrameRequest *, double))(**(_QWORD **)(i + 16) + 320))(*(_QWORD *)(i + 16), a2, a3, a4);
  return 0;
}

uint64_t `non-virtual thunk to'TXTextLayout::setRate(TXTextLayout *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  TXTextLayout::setRate((TXTextLayout *)((char *)this - 200), a2, a3, a4);
  return 0;
}

uint64_t TXTextLayout::scheduleTokens(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t i;
  _QWORD v12[3];
  void **v13;

  memset(v12, 0, sizeof(v12));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v12, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(a1 + 200) + 184))(a1 + 200, a2, v12, a4);
  OZSceneNode::scheduleTokens(a1 + 200, a2, (uint64_t)v12, a4, a5);
  v9 = a1 + 19344;
  for (i = *(_QWORD *)(a1 + 19352); i != v9; i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(i + 16) + 328))(*(_QWORD *)(i + 16), a2, v12, a4, a5);
  v13 = (void **)v12;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v13);
  return 0;
}

void sub_1B29128A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTextLayout::scheduleTokens(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  TXTextLayout::scheduleTokens(a1 - 200, a2, a3, a4, a5);
  return 0;
}

uint64_t TXTextLayout::hintTokensWillImage(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t i;
  _QWORD v10[3];
  void **v11;

  memset(v10, 0, sizeof(v10));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v10, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(a1 + 200) + 184))(a1 + 200, a2, v10, a4);
  OZSceneNode::hintTokensWillImage(a1 + 200, a2, (uint64_t)v10, a4);
  v7 = a1 + 19344;
  for (i = *(_QWORD *)(a1 + 19352); i != v7; i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(i + 16) + 336))(*(_QWORD *)(i + 16), a2, v10, a4);
  v11 = (void **)v10;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return 0;
}

void sub_1B29129BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTextLayout::hintTokensWillImage(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  TXTextLayout::hintTokensWillImage(a1 - 200, a2, a3, a4);
  return 0;
}

uint64_t TXTextLayout::getTokensImage(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t i;
  _QWORD v10[3];
  void **v11;

  memset(v10, 0, sizeof(v10));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v10, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(a1 + 200) + 184))(a1 + 200, a2, v10, a4);
  OZSceneNode::getTokensImage(a1 + 200, a2, (uint64_t)v10, a4);
  v7 = a1 + 19344;
  for (i = *(_QWORD *)(a1 + 19352); i != v7; i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(i + 16) + 344))(*(_QWORD *)(i + 16), a2, v10, a4);
  v11 = (void **)v10;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return 0;
}

void sub_1B2912AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTextLayout::getTokensImage(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  TXTextLayout::getTokensImage(a1 - 200, a2, a3, a4);
  return 0;
}

uint64_t TXTextLayout::pruneTokensAtTime(TXTextLayout *this, CMTime *a2, const char *a3)
{
  uint64_t result;
  char *v7;
  uint64_t i;
  uint64_t v9;
  __int128 v10;
  CMTimeEpoch epoch;
  CMTime v12;

  v12 = *a2;
  result = OZSceneNode::pruneTokensAtTime((uint64_t)this + 200, &v12, a3);
  v7 = (char *)this + 19344;
  for (i = *((_QWORD *)this + 2419); (char *)i != v7; i = *(_QWORD *)(i + 8))
  {
    v9 = *(_QWORD *)(i + 16);
    v10 = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
    result = (*(uint64_t (**)(uint64_t, __int128 *, const char *))(*(_QWORD *)v9 + 352))(v9, &v10, a3);
  }
  return result;
}

uint64_t `non-virtual thunk to'TXTextLayout::pruneTokensAtTime(TXTextLayout *this, CMTime *a2, const char *a3)
{
  return TXTextLayout::pruneTokensAtTime((TXTextLayout *)((char *)this - 200), a2, a3);
}

uint64_t TXTextLayout::pruneTokensExceptAtTime(TXTextLayout *this, CMTime *a2, const char *a3)
{
  uint64_t result;
  char *v7;
  uint64_t i;
  uint64_t v9;
  __int128 v10;
  CMTimeEpoch epoch;
  CMTime v12;

  v12 = *a2;
  result = OZSceneNode::pruneTokensExceptAtTime((uint64_t)this + 200, &v12, a3);
  v7 = (char *)this + 19344;
  for (i = *((_QWORD *)this + 2419); (char *)i != v7; i = *(_QWORD *)(i + 8))
  {
    v9 = *(_QWORD *)(i + 16);
    v10 = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
    result = (*(uint64_t (**)(uint64_t, __int128 *, const char *))(*(_QWORD *)v9 + 360))(v9, &v10, a3);
  }
  return result;
}

uint64_t `non-virtual thunk to'TXTextLayout::pruneTokensExceptAtTime(TXTextLayout *this, CMTime *a2, const char *a3)
{
  return TXTextLayout::pruneTokensExceptAtTime((TXTextLayout *)((char *)this - 200), a2, a3);
}

uint64_t TXTextLayout::pruneAllTokens(TXTextLayout *this, const char *a2)
{
  uint64_t result;
  char *v5;
  uint64_t i;

  result = OZSceneNode::pruneAllTokens((uint64_t)this + 200, a2);
  v5 = (char *)this + 19344;
  for (i = *((_QWORD *)this + 2419); (char *)i != v5; i = *(_QWORD *)(i + 8))
    result = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(i + 16) + 368))(*(_QWORD *)(i + 16), a2);
  return result;
}

uint64_t `non-virtual thunk to'TXTextLayout::pruneAllTokens(TXTextLayout *this, const char *a2)
{
  return TXTextLayout::pruneAllTokens((TXTextLayout *)((char *)this - 200), a2);
}

BOOL TXTextLayout::hasCustomGradientChannels(TXTextLayout *this)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  (*(void (**)(TXTextLayout *, void **))(*(_QWORD *)this + 376))(this, &v4);
  v1 = v4;
  v2 = v5;
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
  return v2 != v1;
}

void sub_1B2912D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL `non-virtual thunk to'TXTextLayout::hasCustomGradientChannels(TXTextLayout *this)
{
  return TXTextLayout::hasCustomGradientChannels((TXTextLayout *)((char *)this - 216));
}

uint64_t TXTextLayout::shouldDrawGradientOSC(TXTextLayout *this)
{
  return (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this + 368))(this);
}

uint64_t `non-virtual thunk to'TXTextLayout::shouldDrawGradientOSC(TXTextLayout *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 27) + 368))((char *)this - 216);
}

_QWORD *TXTextLayout::getCustomGradientChannels(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *i;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  _QWORD *v9;
  _QWORD **v10;
  _QWORD **v11;

  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 296))(a1);
  if ((_DWORD)result)
  {
    for (i = (_QWORD *)a1[2419]; i != a1 + 2418; i = (_QWORD *)i[1])
    {
      v6 = i[2];
      v7 = *(_QWORD ***)(v6 + 480);
      v8 = *(_QWORD ***)(v6 + 488);
      while (v7 != v8)
      {
        result = *v7;
        if (*v7)
        {
          if (result)
          {
            v9 = (_QWORD *)result[178];
            if (v9)
            {
              v11 = (_QWORD **)*v9;
              v10 = (_QWORD **)v9[1];
              while (v11 != v10)
              {
                result = *v11;
                if (*v11)
                {
                  if (result)
                    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 848))(result, a2);
                }
                ++v11;
              }
            }
          }
        }
        ++v7;
      }
    }
  }
  return result;
}

_QWORD *`non-virtual thunk to'TXTextLayout::getCustomGradientChannels(uint64_t a1, uint64_t a2)
{
  return TXTextLayout::getCustomGradientChannels((_QWORD *)(a1 - 216), a2);
}

void TXTextLayout::getLineOffset(TXTextLayout *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CMTime v6;

  v3 = *((_QWORD *)this + 2378);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 2379) - v3) >> 3))
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (v4)
  {
    v5 = MEMORY[0x1E0CA2E68];
    v6 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble((OZChannel *)(v4 + 680), &v6, 0.0);
    (*(double (**)(TXTextLayout *, uint64_t))(*(_QWORD *)this + 712))(this, v5);
  }
}

CGColorSpace **TXTextLayout::getSequencedColor@<X0>(TXTextLayout *this@<X0>, const CMTime *a2@<X1>, PCColor *a3@<X2>, double a4@<D0>, uint64_t a5@<X8>)
{
  __int128 v10;
  CGColorSpace *obj;
  OZChannelBase *v12;
  CGColorSpace **result;
  CMTime v14;
  CMTime v15;

  v10 = *(_OWORD *)&a3->var0.var1[1];
  *(_OWORD *)a5 = *(_OWORD *)&a3->var0.var0;
  *(_OWORD *)(a5 + 16) = v10;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)&a3->var0.var1[3];
  obj = a3->var1._obj;
  *(_QWORD *)(a5 + 48) = obj;
  if (obj)
    PCCFRefTraits<CGColorSpace *>::retain(obj);
  v12 = (OZChannelBase *)((char *)this + 28720);
  result = (CGColorSpace **)OZChannelBase::isEnabled(v12, 0, 1);
  if ((_DWORD)result)
  {
    v15 = *a2;
    OZChannelColorNoAlpha::setColor((OZChannelColorNoAlpha *)v12, &v15, a3, 1);
    v14 = *a2;
    return OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)v12, &v14, (PCColor *)a5, a4);
  }
  return result;
}

void sub_1B2913014(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

double TXTextLayout::getSequencedOpacity(TXTextLayout *this, OZChannel *a2, OZChannel *a3, const CMTime *a4, double a5, double a6)
{
  double v10;
  double v11;
  double v12;

  (*((void (**)(OZChannel *, const CMTime *, uint64_t, double))a3->var0 + 89))(a3, a4, 1, a5);
  OZChannel::getValueAsDouble(a3, a4, a6);
  v11 = v10;
  OZChannel::getValueAsDouble(a2, a4, a6);
  return v11 * v12;
}

void TXSelectionRange::~TXSelectionRange(TXSelectionRange *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t TXTextLayout::TXTextLayout_oldTrackingInfo::getInstance(TXTextLayout::TXTextLayout_oldTrackingInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_oldTrackingInfo::getInstance(void)::TXTextLayout_oldTrackingInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_oldTrackingInfo::getInstance(void)::TXTextLayout_oldTrackingInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_oldTrackingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_oldTrackingInfo::_TXTextLayout_oldTrackingInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_oldTrackingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_oldTrackingInfo *v0;

  if (!TXTextLayout::TXTextLayout_oldTrackingInfo::_TXTextLayout_oldTrackingInfo)
  {
    v0 = (TXTextLayout::TXTextLayout_oldTrackingInfo *)operator new();
    TXTextLayout::TXTextLayout_oldTrackingInfo::TXTextLayout_oldTrackingInfo(v0);
    TXTextLayout::TXTextLayout_oldTrackingInfo::_TXTextLayout_oldTrackingInfo = (uint64_t)v0;
  }
}

void sub_1B291315C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_oldTrackingInfo *TXTextLayout::TXTextLayout_oldTrackingInfo::TXTextLayout_oldTrackingInfo(TXTextLayout::TXTextLayout_oldTrackingInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -100.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_oldTrackingInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64FB150;
  *((_QWORD *)this + 10) = &unk_1E64FB170;
  return this;
}

void sub_1B2913210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_trackingImpl::getInstance(TXTextLayout::TXTextLayout_trackingImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_trackingImpl::getInstance(void)::TXTextLayout_trackingImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_trackingImpl::getInstance(void)::TXTextLayout_trackingImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_trackingImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_trackingImpl::_TXTextLayout_tracking;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_trackingImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!TXTextLayout::TXTextLayout_trackingImpl::_TXTextLayout_tracking)
  {
    v0 = (OZChannelPercent *)operator new();
    TXTextLayout::TXTextLayout_trackingImpl::TXTextLayout_trackingImpl(v0);
    TXTextLayout::TXTextLayout_trackingImpl::_TXTextLayout_tracking = (uint64_t)v0;
  }
}

void sub_1B29132DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *TXTextLayout::TXTextLayout_trackingImpl::TXTextLayout_trackingImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E64FB1C8;
  this->var5 = (PCString *)&unk_1E64FB1E8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1000.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1000.0);
  return this;
}

void sub_1B2913390(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_trackingInfo::getInstance(TXTextLayout::TXTextLayout_trackingInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_trackingInfo::getInstance(void)::TXTextLayout_trackingInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_trackingInfo::getInstance(void)::TXTextLayout_trackingInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_trackingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_trackingInfo::_TXTextLayout_trackingInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_trackingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_trackingInfo *v0;

  if (!TXTextLayout::TXTextLayout_trackingInfo::_TXTextLayout_trackingInfo)
  {
    v0 = (TXTextLayout::TXTextLayout_trackingInfo *)operator new();
    TXTextLayout::TXTextLayout_trackingInfo::TXTextLayout_trackingInfo(v0);
    TXTextLayout::TXTextLayout_trackingInfo::_TXTextLayout_trackingInfo = (uint64_t)v0;
  }
}

void sub_1B291345C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_trackingInfo *TXTextLayout::TXTextLayout_trackingInfo::TXTextLayout_trackingInfo(TXTextLayout::TXTextLayout_trackingInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_trackingInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64FB240;
  *((_QWORD *)this + 10) = &unk_1E64FB260;
  return this;
}

void sub_1B2913510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::getInstance(TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::getInstance(void)::TXTextLayout_lineSpacingObsoleteInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::getInstance(void)::TXTextLayout_lineSpacingObsoleteInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::_TXTextLayout_lineSpacingObsoleteInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo *v0;

  if (!TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::_TXTextLayout_lineSpacingObsoleteInfo)
  {
    v0 = (TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo *)operator new();
    TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::TXTextLayout_lineSpacingObsoleteInfo(v0);
    TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::_TXTextLayout_lineSpacingObsoleteInfo = (uint64_t)v0;
  }
}

void sub_1B29135DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo *TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::TXTextLayout_lineSpacingObsoleteInfo(TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -100.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64FB2B8;
  *((_QWORD *)this + 10) = &unk_1E64FB2D8;
  return this;
}

void sub_1B2913690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_leftMarginImpl::getInstance(TXTextLayout::TXTextLayout_leftMarginImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_leftMarginImpl::getInstance(void)::TXTextLayout_leftMarginImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_leftMarginImpl::getInstance(void)::TXTextLayout_leftMarginImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_leftMarginImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_leftMarginImpl::_TXTextLayout_leftMargin;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_leftMarginImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_leftMarginImpl *v0;

  if (!TXTextLayout::TXTextLayout_leftMarginImpl::_TXTextLayout_leftMargin)
  {
    v0 = (TXTextLayout::TXTextLayout_leftMarginImpl *)operator new();
    TXTextLayout::TXTextLayout_leftMarginImpl::TXTextLayout_leftMarginImpl(v0);
    TXTextLayout::TXTextLayout_leftMarginImpl::_TXTextLayout_leftMargin = (uint64_t)v0;
  }
}

void sub_1B291375C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_leftMarginImpl *TXTextLayout::TXTextLayout_leftMarginImpl::TXTextLayout_leftMarginImpl(TXTextLayout::TXTextLayout_leftMarginImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_leftMarginImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64FB330;
  *((_QWORD *)this + 5) = &unk_1E64FB350;
  OZChannelImpl::setMin((OZChannelImpl *)this, -3.40282347e38);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2913810(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_rightMarginImpl::getInstance(TXTextLayout::TXTextLayout_rightMarginImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_rightMarginImpl::getInstance(void)::TXTextLayout_rightMarginImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_rightMarginImpl::getInstance(void)::TXTextLayout_rightMarginImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_rightMarginImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_rightMarginImpl::_TXTextLayout_rightMargin;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_rightMarginImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_rightMarginImpl *v0;

  if (!TXTextLayout::TXTextLayout_rightMarginImpl::_TXTextLayout_rightMargin)
  {
    v0 = (TXTextLayout::TXTextLayout_rightMarginImpl *)operator new();
    TXTextLayout::TXTextLayout_rightMarginImpl::TXTextLayout_rightMarginImpl(v0);
    TXTextLayout::TXTextLayout_rightMarginImpl::_TXTextLayout_rightMargin = (uint64_t)v0;
  }
}

void sub_1B29138DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_rightMarginImpl *TXTextLayout::TXTextLayout_rightMarginImpl::TXTextLayout_rightMarginImpl(TXTextLayout::TXTextLayout_rightMarginImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_rightMarginImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64FB3A8;
  *((_QWORD *)this + 5) = &unk_1E64FB3C8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -3.40282347e38);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2913990(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_topMarginImpl::getInstance(TXTextLayout::TXTextLayout_topMarginImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_topMarginImpl::getInstance(void)::TXTextLayout_topMarginImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_topMarginImpl::getInstance(void)::TXTextLayout_topMarginImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_topMarginImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_topMarginImpl::_TXTextLayout_topMargin;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_topMarginImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_topMarginImpl *v0;

  if (!TXTextLayout::TXTextLayout_topMarginImpl::_TXTextLayout_topMargin)
  {
    v0 = (TXTextLayout::TXTextLayout_topMarginImpl *)operator new();
    TXTextLayout::TXTextLayout_topMarginImpl::TXTextLayout_topMarginImpl(v0);
    TXTextLayout::TXTextLayout_topMarginImpl::_TXTextLayout_topMargin = (uint64_t)v0;
  }
}

void sub_1B2913A5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_topMarginImpl *TXTextLayout::TXTextLayout_topMarginImpl::TXTextLayout_topMarginImpl(TXTextLayout::TXTextLayout_topMarginImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_topMarginImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64FB420;
  *((_QWORD *)this + 5) = &unk_1E64FB440;
  OZChannelImpl::setMin((OZChannelImpl *)this, -3.40282347e38);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2913B10(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_bottomMarginImpl::getInstance(TXTextLayout::TXTextLayout_bottomMarginImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_bottomMarginImpl::getInstance(void)::TXTextLayout_bottomMarginImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_bottomMarginImpl::getInstance(void)::TXTextLayout_bottomMarginImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_bottomMarginImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_bottomMarginImpl::_TXTextLayout_bottomMargin;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_bottomMarginImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_bottomMarginImpl *v0;

  if (!TXTextLayout::TXTextLayout_bottomMarginImpl::_TXTextLayout_bottomMargin)
  {
    v0 = (TXTextLayout::TXTextLayout_bottomMarginImpl *)operator new();
    TXTextLayout::TXTextLayout_bottomMarginImpl::TXTextLayout_bottomMarginImpl(v0);
    TXTextLayout::TXTextLayout_bottomMarginImpl::_TXTextLayout_bottomMargin = (uint64_t)v0;
  }
}

void sub_1B2913BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_bottomMarginImpl *TXTextLayout::TXTextLayout_bottomMarginImpl::TXTextLayout_bottomMarginImpl(TXTextLayout::TXTextLayout_bottomMarginImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_bottomMarginImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64FB498;
  *((_QWORD *)this + 5) = &unk_1E64FB4B8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -3.40282347e38);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2913C90(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_radiusImpl::getInstance(TXTextLayout::TXTextLayout_radiusImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_radiusImpl::getInstance(void)::TXTextLayout_radiusImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_radiusImpl::getInstance(void)::TXTextLayout_radiusImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_radiusImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_radiusImpl::_TXTextLayout_radius;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_radiusImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_radiusImpl *v0;

  if (!TXTextLayout::TXTextLayout_radiusImpl::_TXTextLayout_radius)
  {
    v0 = (TXTextLayout::TXTextLayout_radiusImpl *)operator new();
    TXTextLayout::TXTextLayout_radiusImpl::TXTextLayout_radiusImpl(v0);
    TXTextLayout::TXTextLayout_radiusImpl::_TXTextLayout_radius = (uint64_t)v0;
  }
}

void sub_1B2913D5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_radiusImpl *TXTextLayout::TXTextLayout_radiusImpl::TXTextLayout_radiusImpl(TXTextLayout::TXTextLayout_radiusImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 200.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 200.0, 1, 1);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_radiusImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64FB510;
  *((_QWORD *)this + 5) = &unk_1E64FB530;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2913E20(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_radiusInfo::getInstance(TXTextLayout::TXTextLayout_radiusInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_radiusInfo::getInstance(void)::TXTextLayout_radiusInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_radiusInfo::getInstance(void)::TXTextLayout_radiusInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_radiusInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_radiusInfo::_TXTextLayout_radiusInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_radiusInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_radiusInfo *v0;

  if (!TXTextLayout::TXTextLayout_radiusInfo::_TXTextLayout_radiusInfo)
  {
    v0 = (TXTextLayout::TXTextLayout_radiusInfo *)operator new();
    TXTextLayout::TXTextLayout_radiusInfo::TXTextLayout_radiusInfo(v0);
    TXTextLayout::TXTextLayout_radiusInfo::_TXTextLayout_radiusInfo = (uint64_t)v0;
  }
}

void sub_1B2913EEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_radiusInfo *TXTextLayout::TXTextLayout_radiusInfo::TXTextLayout_radiusInfo(TXTextLayout::TXTextLayout_radiusInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 400.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_radiusInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64FB588;
  *((_QWORD *)this + 10) = &unk_1E64FB5A8;
  return this;
}

void sub_1B2913F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_rectSizeImpl::getInstance(TXTextLayout::TXTextLayout_rectSizeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_rectSizeImpl::getInstance(void)::TXTextLayout_rectSizeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_rectSizeImpl::getInstance(void)::TXTextLayout_rectSizeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_rectSizeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_rectSizeImpl::_TXTextLayout_rectSize;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_rectSizeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_rectSizeImpl *v0;

  if (!TXTextLayout::TXTextLayout_rectSizeImpl::_TXTextLayout_rectSize)
  {
    v0 = (TXTextLayout::TXTextLayout_rectSizeImpl *)operator new();
    TXTextLayout::TXTextLayout_rectSizeImpl::TXTextLayout_rectSizeImpl(v0);
    TXTextLayout::TXTextLayout_rectSizeImpl::_TXTextLayout_rectSize = (uint64_t)v0;
  }
}

void sub_1B2914068(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_rectSizeImpl *TXTextLayout::TXTextLayout_rectSizeImpl::TXTextLayout_rectSizeImpl(TXTextLayout::TXTextLayout_rectSizeImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 400.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 400.0, 1, 1);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_rectSizeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64FB600;
  *((_QWORD *)this + 5) = &unk_1E64FB620;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B291412C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_rectSizeInfo::getInstance(TXTextLayout::TXTextLayout_rectSizeInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_rectSizeInfo::getInstance(void)::TXTextLayout_rectSizeInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_rectSizeInfo::getInstance(void)::TXTextLayout_rectSizeInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_rectSizeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_rectSizeInfo::_TXTextLayout_rectSizeInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_rectSizeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_rectSizeInfo *v0;

  if (!TXTextLayout::TXTextLayout_rectSizeInfo::_TXTextLayout_rectSizeInfo)
  {
    v0 = (TXTextLayout::TXTextLayout_rectSizeInfo *)operator new();
    TXTextLayout::TXTextLayout_rectSizeInfo::TXTextLayout_rectSizeInfo(v0);
    TXTextLayout::TXTextLayout_rectSizeInfo::_TXTextLayout_rectSizeInfo = (uint64_t)v0;
  }
}

void sub_1B29141F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_rectSizeInfo *TXTextLayout::TXTextLayout_rectSizeInfo::TXTextLayout_rectSizeInfo(TXTextLayout::TXTextLayout_rectSizeInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 800.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_rectSizeInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64FB678;
  *((_QWORD *)this + 10) = &unk_1E64FB698;
  return this;
}

void sub_1B29142A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_waveAmplitudeImpl::getInstance(TXTextLayout::TXTextLayout_waveAmplitudeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_waveAmplitudeImpl::getInstance(void)::TXTextLayout_waveAmplitudeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_waveAmplitudeImpl::getInstance(void)::TXTextLayout_waveAmplitudeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_waveAmplitudeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_waveAmplitudeImpl::_TXTextLayout_waveAmplitude;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_waveAmplitudeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_waveAmplitudeImpl *v0;

  if (!TXTextLayout::TXTextLayout_waveAmplitudeImpl::_TXTextLayout_waveAmplitude)
  {
    v0 = (TXTextLayout::TXTextLayout_waveAmplitudeImpl *)operator new();
    TXTextLayout::TXTextLayout_waveAmplitudeImpl::TXTextLayout_waveAmplitudeImpl(v0);
    TXTextLayout::TXTextLayout_waveAmplitudeImpl::_TXTextLayout_waveAmplitude = (uint64_t)v0;
  }
}

void sub_1B2914374(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_waveAmplitudeImpl *TXTextLayout::TXTextLayout_waveAmplitudeImpl::TXTextLayout_waveAmplitudeImpl(TXTextLayout::TXTextLayout_waveAmplitudeImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 100.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 100.0, 1, 1);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_waveAmplitudeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64FB6F0;
  *((_QWORD *)this + 5) = &unk_1E64FB710;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2914438(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_waveAmplitudeInfo::getInstance(TXTextLayout::TXTextLayout_waveAmplitudeInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_waveAmplitudeInfo::getInstance(void)::TXTextLayout_waveAmplitudeInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_waveAmplitudeInfo::getInstance(void)::TXTextLayout_waveAmplitudeInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_waveAmplitudeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_waveAmplitudeInfo::_TXTextLayout_waveAmplitudeInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_waveAmplitudeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_waveAmplitudeInfo *v0;

  if (!TXTextLayout::TXTextLayout_waveAmplitudeInfo::_TXTextLayout_waveAmplitudeInfo)
  {
    v0 = (TXTextLayout::TXTextLayout_waveAmplitudeInfo *)operator new();
    TXTextLayout::TXTextLayout_waveAmplitudeInfo::TXTextLayout_waveAmplitudeInfo(v0);
    TXTextLayout::TXTextLayout_waveAmplitudeInfo::_TXTextLayout_waveAmplitudeInfo = (uint64_t)v0;
  }
}

void sub_1B2914504(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_waveAmplitudeInfo *TXTextLayout::TXTextLayout_waveAmplitudeInfo::TXTextLayout_waveAmplitudeInfo(TXTextLayout::TXTextLayout_waveAmplitudeInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 500.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_waveAmplitudeInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64FB768;
  *((_QWORD *)this + 10) = &unk_1E64FB788;
  return this;
}

void sub_1B29145B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_waveFrequencyImpl::getInstance(TXTextLayout::TXTextLayout_waveFrequencyImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_waveFrequencyImpl::getInstance(void)::TXTextLayout_waveFrequencyImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_waveFrequencyImpl::getInstance(void)::TXTextLayout_waveFrequencyImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_waveFrequencyImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_waveFrequencyImpl::_TXTextLayout_waveFrequency;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_waveFrequencyImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_waveFrequencyImpl *v0;

  if (!TXTextLayout::TXTextLayout_waveFrequencyImpl::_TXTextLayout_waveFrequency)
  {
    v0 = (TXTextLayout::TXTextLayout_waveFrequencyImpl *)operator new();
    TXTextLayout::TXTextLayout_waveFrequencyImpl::TXTextLayout_waveFrequencyImpl(v0);
    TXTextLayout::TXTextLayout_waveFrequencyImpl::_TXTextLayout_waveFrequency = (uint64_t)v0;
  }
}

void sub_1B2914680(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_waveFrequencyImpl *TXTextLayout::TXTextLayout_waveFrequencyImpl::TXTextLayout_waveFrequencyImpl(TXTextLayout::TXTextLayout_waveFrequencyImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_waveFrequencyImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64FB7E0;
  *((_QWORD *)this + 5) = &unk_1E64FB800;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2914734(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_waveFrequencyInfo::getInstance(TXTextLayout::TXTextLayout_waveFrequencyInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_waveFrequencyInfo::getInstance(void)::TXTextLayout_waveFrequencyInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_waveFrequencyInfo::getInstance(void)::TXTextLayout_waveFrequencyInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_waveFrequencyInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_waveFrequencyInfo::_TXTextLayout_waveFrequencyInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_waveFrequencyInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_waveFrequencyInfo *v0;

  if (!TXTextLayout::TXTextLayout_waveFrequencyInfo::_TXTextLayout_waveFrequencyInfo)
  {
    v0 = (TXTextLayout::TXTextLayout_waveFrequencyInfo *)operator new();
    TXTextLayout::TXTextLayout_waveFrequencyInfo::TXTextLayout_waveFrequencyInfo(v0);
    TXTextLayout::TXTextLayout_waveFrequencyInfo::_TXTextLayout_waveFrequencyInfo = (uint64_t)v0;
  }
}

void sub_1B2914800(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_waveFrequencyInfo *TXTextLayout::TXTextLayout_waveFrequencyInfo::TXTextLayout_waveFrequencyInfo(TXTextLayout::TXTextLayout_waveFrequencyInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_waveFrequencyInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64FB858;
  *((_QWORD *)this + 10) = &unk_1E64FB878;
  return this;
}

void sub_1B29148AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelAngle::OZChannelAngle(OZChannelAngle *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *OZChannelAngle_FactoryBase;
  OZChannelAngle *v17;
  OZChannelAngle *OZChannelAngleInfo;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelAngle_FactoryBase = (OZFactory *)getOZChannelAngle_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelAngle_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->var0 = (void **)&off_1E6551728;
  this->var2 = (void **)&unk_1E6551A88;
  OZChannelAngleInfo = (OZChannelAngle *)OZChannelAngle::createOZChannelAngleInfo(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelAngle::_OZChannelAngleInfo;
    this->var17 = (OZChannelInfo *)OZChannelAngle::_OZChannelAngleInfo;
  }
  this->var16 = var17;
  OZChannelAngle::createOZChannelAngleImpl(OZChannelAngleInfo);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelAngle::_OZChannelAngleImpl;
    this->var15 = (OZChannelImpl *)OZChannelAngle::_OZChannelAngleImpl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  OZChannel::setInitialValue((OZChannel *)this, a2, 0);
}

void sub_1B29149D0(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_waveDampingImpl::getInstance(TXTextLayout::TXTextLayout_waveDampingImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_waveDampingImpl::getInstance(void)::TXTextLayout_waveDampingImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_waveDampingImpl::getInstance(void)::TXTextLayout_waveDampingImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_waveDampingImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_waveDampingImpl::_TXTextLayout_waveDamping;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_waveDampingImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_waveDampingImpl *v0;

  if (!TXTextLayout::TXTextLayout_waveDampingImpl::_TXTextLayout_waveDamping)
  {
    v0 = (TXTextLayout::TXTextLayout_waveDampingImpl *)operator new();
    TXTextLayout::TXTextLayout_waveDampingImpl::TXTextLayout_waveDampingImpl(v0);
    TXTextLayout::TXTextLayout_waveDampingImpl::_TXTextLayout_waveDamping = (uint64_t)v0;
  }
}

void sub_1B2914A8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_waveDampingImpl *TXTextLayout::TXTextLayout_waveDampingImpl::TXTextLayout_waveDampingImpl(TXTextLayout::TXTextLayout_waveDampingImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_waveDampingImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64FB8D0;
  *((_QWORD *)this + 5) = &unk_1E64FB8F0;
  OZChannelImpl::setMin((OZChannelImpl *)this, -20.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 20.0);
  return this;
}

void sub_1B2914B38(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_waveDampingInfo::getInstance(TXTextLayout::TXTextLayout_waveDampingInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_waveDampingInfo::getInstance(void)::TXTextLayout_waveDampingInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_waveDampingInfo::getInstance(void)::TXTextLayout_waveDampingInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_waveDampingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_waveDampingInfo::_TXTextLayout_waveDampingInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_waveDampingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_waveDampingInfo *v0;

  if (!TXTextLayout::TXTextLayout_waveDampingInfo::_TXTextLayout_waveDampingInfo)
  {
    v0 = (TXTextLayout::TXTextLayout_waveDampingInfo *)operator new();
    TXTextLayout::TXTextLayout_waveDampingInfo::TXTextLayout_waveDampingInfo(v0);
    TXTextLayout::TXTextLayout_waveDampingInfo::_TXTextLayout_waveDampingInfo = (uint64_t)v0;
  }
}

void sub_1B2914C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_waveDampingInfo *TXTextLayout::TXTextLayout_waveDampingInfo::TXTextLayout_waveDampingInfo(TXTextLayout::TXTextLayout_waveDampingInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -20.0, 20.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_waveDampingInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64FB948;
  *((_QWORD *)this + 10) = &unk_1E64FB968;
  return this;
}

void sub_1B2914CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_pathOffsetImpl::getInstance(TXTextLayout::TXTextLayout_pathOffsetImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_pathOffsetImpl::getInstance(void)::TXTextLayout_pathOffsetImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_pathOffsetImpl::getInstance(void)::TXTextLayout_pathOffsetImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_pathOffsetImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_pathOffsetImpl::_TXTextLayout_pathOffset;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_pathOffsetImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!TXTextLayout::TXTextLayout_pathOffsetImpl::_TXTextLayout_pathOffset)
  {
    v0 = (OZChannelPercent *)operator new();
    TXTextLayout::TXTextLayout_pathOffsetImpl::TXTextLayout_pathOffsetImpl(v0);
    TXTextLayout::TXTextLayout_pathOffsetImpl::_TXTextLayout_pathOffset = (uint64_t)v0;
  }
}

void sub_1B2914D7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *TXTextLayout::TXTextLayout_pathOffsetImpl::TXTextLayout_pathOffsetImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E64FB9C0;
  this->var5 = (PCString *)&unk_1E64FB9E0;
  OZChannelImpl::setMin((OZChannelImpl *)this, -3.40282347e38);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2914E30(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_pathOffsetInfo::getInstance(TXTextLayout::TXTextLayout_pathOffsetInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_pathOffsetInfo::getInstance(void)::TXTextLayout_pathOffsetInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_pathOffsetInfo::getInstance(void)::TXTextLayout_pathOffsetInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_pathOffsetInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_pathOffsetInfo::_TXTextLayout_pathOffsetInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_pathOffsetInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_pathOffsetInfo *v0;

  if (!TXTextLayout::TXTextLayout_pathOffsetInfo::_TXTextLayout_pathOffsetInfo)
  {
    v0 = (TXTextLayout::TXTextLayout_pathOffsetInfo *)operator new();
    TXTextLayout::TXTextLayout_pathOffsetInfo::TXTextLayout_pathOffsetInfo(v0);
    TXTextLayout::TXTextLayout_pathOffsetInfo::_TXTextLayout_pathOffsetInfo = (uint64_t)v0;
  }
}

void sub_1B2914EFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_pathOffsetInfo *TXTextLayout::TXTextLayout_pathOffsetInfo::TXTextLayout_pathOffsetInfo(TXTextLayout::TXTextLayout_pathOffsetInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_pathOffsetInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64FBA38;
  *((_QWORD *)this + 10) = &unk_1E64FBA58;
  return this;
}

void sub_1B2914FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_showScrollBarsImpl::getInstance(TXTextLayout::TXTextLayout_showScrollBarsImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_showScrollBarsImpl::getInstance(void)::TXTextLayout_showScrollBarsImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_showScrollBarsImpl::getInstance(void)::TXTextLayout_showScrollBarsImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_showScrollBarsImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_showScrollBarsImpl::_TXTextLayout_showScrollBars;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_showScrollBarsImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelBool *v0;

  if (!TXTextLayout::TXTextLayout_showScrollBarsImpl::_TXTextLayout_showScrollBars)
  {
    v0 = (OZChannelBool *)operator new();
    TXTextLayout::TXTextLayout_showScrollBarsImpl::TXTextLayout_showScrollBarsImpl(v0);
    TXTextLayout::TXTextLayout_showScrollBarsImpl::_TXTextLayout_showScrollBars = (uint64_t)v0;
  }
}

void sub_1B291507C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelBool *TXTextLayout::TXTextLayout_showScrollBarsImpl::TXTextLayout_showScrollBarsImpl(OZChannelBool *this)
{
  OZCurve *OZChannelBoolCurve;

  OZChannelBoolCurve = (OZCurve *)OZChannelBool::createOZChannelBoolCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelBoolCurve, 1.0, 0, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E64FBAB0;
  this->var5 = (PCString *)&unk_1E64FBAD0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2915128(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

OZCurveBool *OZChannelBool::createOZChannelBoolCurve(OZChannelBool *this, double a2)
{
  OZCurveBool *v3;

  v3 = (OZCurveBool *)operator new();
  OZCurveBool::OZCurveBool(v3, a2);
  return v3;
}

void sub_1B2915198(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

void OZCurveBool::OZCurveBool(OZCurveBool *this, double a2)
{
  OZCurveBoolSplineState *v3;
  uint64_t Instance;
  uint64_t v5;
  uint64_t v6;

  OZCurve::OZCurve((OZCurve *)this, 0.0, 1.0, 1.0, a2);
  *(_QWORD *)v3 = &unk_1E64FBB28;
  Instance = OZCurveBoolSplineState::getInstance(v3);
  if (Instance)
    v5 = Instance + 8;
  else
    v5 = 0;
  OZCurve::setSplineState((uint64_t)this, v5);
  v6 = *((_QWORD *)this + 20);
  *(_DWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 2) = 0;
}

void sub_1B2915224(_Unwind_Exception *a1)
{
  OZCurve *v1;

  OZCurve::~OZCurve(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCurveBoolSplineState::getInstance(OZCurveBoolSplineState *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCurveBoolSplineState::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCurveBoolSplineState::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCurveBoolSplineState::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCurveBoolSplineState::_instance;
}

OZCurve *OZCurveBool::getCurveWorkingCopy(const OZCurve *this)
{
  OZCurve *v2;

  v2 = (OZCurve *)operator new();
  OZCurve::OZCurve(v2, this, 1);
  *(_QWORD *)v2 = &unk_1E64FBB28;
  return v2;
}

void sub_1B29152F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

OZCurve *OZCurveBool::cloneCurve(const OZCurve *this)
{
  OZCurve *v2;

  v2 = (OZCurve *)operator new();
  OZCurve::OZCurve(v2, this, 0);
  *(_QWORD *)v2 = &unk_1E64FBB28;
  return v2;
}

void sub_1B291536C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

double OZCurveBool::getValue(OZCurve *this, const CMTime *a2, void *a3, __n128 a4, __n128 a5)
{
  double v5;
  _BOOL4 v6;

  OZCurve::getValue(this, a2, a3, a4, a5);
  v6 = v5 <= -0.0000001;
  if (v5 >= 0.0000001)
    return (double)1;
  return (double)v6;
}

double OZCurveBool::getValue(OZCurve *this, const CMTime *a2, double a3)
{
  double v3;
  _BOOL4 v4;

  OZCurve::getValue(this, a2, a3);
  v4 = v3 <= -0.0000001;
  if (v3 >= 0.0000001)
    return (double)1;
  return (double)v4;
}

uint64_t TXTextLayout::TXTextLayout_showRulersImpl::getInstance(TXTextLayout::TXTextLayout_showRulersImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_showRulersImpl::getInstance(void)::TXTextLayout_showRulersImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_showRulersImpl::getInstance(void)::TXTextLayout_showRulersImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_showRulersImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_showRulersImpl::_TXTextLayout_showRulers;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_showRulersImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelBool *v0;

  if (!TXTextLayout::TXTextLayout_showRulersImpl::_TXTextLayout_showRulers)
  {
    v0 = (OZChannelBool *)operator new();
    TXTextLayout::TXTextLayout_showRulersImpl::TXTextLayout_showRulersImpl(v0);
    TXTextLayout::TXTextLayout_showRulersImpl::_TXTextLayout_showRulers = (uint64_t)v0;
  }
}

void sub_1B29154AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelBool *TXTextLayout::TXTextLayout_showRulersImpl::TXTextLayout_showRulersImpl(OZChannelBool *this)
{
  OZCurve *OZChannelBoolCurve;

  OZChannelBoolCurve = (OZCurve *)OZChannelBool::createOZChannelBoolCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelBoolCurve, 1.0, 0, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E64FC098;
  this->var5 = (PCString *)&unk_1E64FC0B8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2915558(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_versionImpl::getInstance(TXTextLayout::TXTextLayout_versionImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout::TXTextLayout_versionImpl::getInstance(void)::TXTextLayout_versionImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout::TXTextLayout_versionImpl::getInstance(void)::TXTextLayout_versionImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_versionImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_versionImpl::_TXTextLayout_version;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_versionImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout::TXTextLayout_versionImpl *v0;

  if (!TXTextLayout::TXTextLayout_versionImpl::_TXTextLayout_version)
  {
    v0 = (TXTextLayout::TXTextLayout_versionImpl *)operator new();
    TXTextLayout::TXTextLayout_versionImpl::TXTextLayout_versionImpl(v0);
    TXTextLayout::TXTextLayout_versionImpl::_TXTextLayout_version = (uint64_t)v0;
  }
}

void sub_1B2915624(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_versionImpl *TXTextLayout::TXTextLayout_versionImpl::TXTextLayout_versionImpl(TXTextLayout::TXTextLayout_versionImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 5.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 5.0, 0, 1);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_versionImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E64FC110;
  *((_QWORD *)this + 5) = &unk_1E64FC130;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B29156D8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelDouble::OZChannelDouble(OZChannelDouble *this, int a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *OZChannelDouble_FactoryBase;
  OZChannelDouble *v17;
  OZChannelDouble *OZChannelDoubleInfo;
  uint64_t v19;
  uint64_t v20;

  OZChannelDouble_FactoryBase = (OZFactory *)getOZChannelDouble_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelDouble_FactoryBase, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = &off_1E6551358;
  *((_QWORD *)this + 2) = &unk_1E65516B8;
  OZChannelDoubleInfo = (OZChannelDouble *)OZChannelDouble::createOZChannelDoubleInfo(v17);
  if (a8)
  {
    v19 = *((_QWORD *)this + 17);
  }
  else
  {
    v19 = OZChannelDouble::_OZChannelDoubleInfo;
    *((_QWORD *)this + 17) = OZChannelDouble::_OZChannelDoubleInfo;
  }
  *((_QWORD *)this + 16) = v19;
  OZChannelDouble::createOZChannelDoubleImpl(OZChannelDoubleInfo);
  if (a7)
  {
    v20 = *((_QWORD *)this + 15);
  }
  else
  {
    v20 = OZChannelDouble::_OZChannelDoubleImpl;
    *((_QWORD *)this + 15) = OZChannelDouble::_OZChannelDoubleImpl;
  }
  *((_QWORD *)this + 14) = v20;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
}

void sub_1B2915800(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void std::__list_imp<TXTextLayout::HGMetalNodeCacheEntry>::clear(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      v5 = (uint64_t *)v2[1];
      std::__list_imp<TXTextLayout::HGMetalNodeCacheEntry>::__delete_node[abi:ne180100]<>((int)a1, v2);
      v2 = v5;
    }
  }
}

void std::__list_imp<TXTextLayout::HGMetalNodeCacheEntry>::__delete_node[abi:ne180100]<>(int a1, _QWORD *__p)
{
  uint64_t v3;

  v3 = __p[2];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  operator delete(__p);
}

void PCSharedMutex::~PCSharedMutex(std::mutex *this)
{
  void *v2;

  v2 = *(void **)&this[1].__m_.__opaque[8];
  if (v2)
  {
    *(_QWORD *)&this[1].__m_.__opaque[16] = v2;
    operator delete(v2);
  }
  std::mutex::~mutex(this);
}

void std::__list_imp<TXTextLayout::HGNodeCacheEntry>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 4));
        std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void TXChannelAlignment::~TXChannelAlignment(TXChannelAlignment *this)
{
  *(_QWORD *)this = &off_1E6502D50;
  *((_QWORD *)this + 2) = &unk_1E6503098;
  OZChannelEnum::~OZChannelEnum((TXChannelAlignment *)((char *)this + 392));
  OZChannelEnum::~OZChannelEnum((TXChannelAlignment *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

{
  TXChannelAlignment::~TXChannelAlignment(this);
  JUMPOUT(0x1B5E29170);
}

void std::__list_imp<std::shared_ptr<TXTextStyle>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t std::deque<CMTime>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(a2 + 7), (_QWORD *)a2[8]);
    operator delete(a2);
  }
}

void OZProjectedBoundsCacheItem::~OZProjectedBoundsCacheItem(OZProjectedBoundsCacheItem *this)
{
  JUMPOUT(0x1B5E29170);
}

void OZBoundsCacheItem::~OZBoundsCacheItem(OZBoundsCacheItem *this)
{
  JUMPOUT(0x1B5E29170);
}

_OWORD *std::vector<TXLineMetrics>::__assign_with_size[abi:ne180100]<TXLineMetrics*,TXLineMetrics*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  unint64_t v11;
  _OWORD **v12;
  _OWORD *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v6 = a2;
  v8 = a1[2];
  result = (_OWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 6)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 58)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    if (v8 >> 5 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
      v11 = 0x3FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<TXLineMetrics>::__vallocate[abi:ne180100](a1, v11);
    v13 = (_OWORD *)a1[1];
    v12 = (_OWORD **)(a1 + 1);
    result = v13;
    v14 = (char *)v13;
    if (v6 != a3)
    {
      v14 = (char *)result;
      do
      {
        v15 = *v6;
        v16 = v6[1];
        v17 = v6[3];
        *((_OWORD *)v14 + 2) = v6[2];
        *((_OWORD *)v14 + 3) = v17;
        *(_OWORD *)v14 = v15;
        *((_OWORD *)v14 + 1) = v16;
        v14 += 64;
        v6 += 4;
      }
      while (v6 != a3);
    }
LABEL_26:
    v31 = v14 - (char *)result;
    goto LABEL_27;
  }
  v19 = (_OWORD *)a1[1];
  v12 = (_OWORD **)(a1 + 1);
  v18 = v19;
  v20 = ((char *)v19 - (char *)result) >> 6;
  if (v20 >= a4)
  {
    v14 = (char *)result;
    if (a2 != a3)
    {
      v32 = result;
      do
      {
        v33 = *v6;
        v34 = v6[1];
        v35 = v6[3];
        v32[2] = v6[2];
        v32[3] = v35;
        *v32 = v33;
        v32[1] = v34;
        v32 += 4;
        v6 += 4;
        v14 += 64;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  v21 = &a2[4 * v20];
  if (v18 != result)
  {
    v22 = v20 << 6;
    do
    {
      v23 = *v6;
      v24 = v6[1];
      v25 = v6[3];
      result[2] = v6[2];
      result[3] = v25;
      *result = v23;
      result[1] = v24;
      result += 4;
      v6 += 4;
      v22 -= 64;
    }
    while (v22);
    result = *v12;
  }
  v26 = (char *)result;
  if (v21 != a3)
  {
    v26 = (char *)result;
    v27 = result;
    do
    {
      v28 = *v21;
      v29 = v21[1];
      v30 = v21[3];
      v27[2] = v21[2];
      v27[3] = v30;
      *v27 = v28;
      v27[1] = v29;
      v27 += 4;
      v21 += 4;
      v26 += 64;
    }
    while (v21 != a3);
  }
  v31 = v26 - (char *)result;
LABEL_27:
  *v12 = (_OWORD *)((char *)result + v31);
  return result;
}

void OZChannelScale3D::getValue(OZChannelScale3D *this, const CMTime *a2, double *a3, double *a4, double *a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, a6);
    *(_QWORD *)a3 = v12;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, a6);
    *(_QWORD *)a4 = v13;
  }
  if (a5)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 440), a2, a6);
    *(_QWORD *)a5 = v14;
  }
}

void OZCurrentThread::OZCurrentThread(OZCurrentThread *this)
{
  _QWORD *v2;
  PCThread *v3;

  PCSingleton::PCSingleton(this, 0);
  *v2 = &unk_1E64FC208;
  v3 = (PCThread *)operator new();
  PCThread::PCThread(v3);
  *((_QWORD *)this + 1) = v3;
}

void sub_1B2915D84(_Unwind_Exception *a1)
{
  PCSingleton *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1B5E29170](v3, 0x20C4093837F09);
  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

void OZCurrentThread::~OZCurrentThread(OZCurrentThread *this, const PCString *a2)
{
  OZCurrentThread::~OZCurrentThread(this, a2);
  JUMPOUT(0x1B5E29170);
}

{
  OZChannelBase *v3;
  uint64_t v4;

  *(_QWORD *)this = &unk_1E64FC208;
  v3 = (OZChannelBase *)*((_QWORD *)this + 1);
  if (v3)
  {
    v4 = OZChannelBase::setRangeName(v3, a2);
    MEMORY[0x1B5E29170](v4, 0x20C4093837F09);
  }
  *((_QWORD *)this + 1) = 0;
  PCSingleton::~PCSingleton(this);
}

uint64_t *std::vector<TXGlyphRender>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_DWORD *)(v6 - 152) = *(_DWORD *)(v2 + v5 - 152);
      *(_OWORD *)(v6 - 144) = *(_OWORD *)(v2 + v5 - 144);
      *(_QWORD *)(v7 - 144) = 0;
      *(_QWORD *)(v7 - 136) = 0;
      v8 = *(_OWORD *)(v2 + v5 - 16);
      v10 = *(_OWORD *)(v2 + v5 - 64);
      v9 = *(_OWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 16) = v8;
      *(_OWORD *)(v6 - 64) = v10;
      *(_OWORD *)(v6 - 48) = v9;
      v11 = *(_OWORD *)(v2 + v5 - 128);
      v12 = *(_OWORD *)(v2 + v5 - 112);
      v13 = *(_OWORD *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      *(_OWORD *)(v6 - 80) = v13;
      *(_OWORD *)(v6 - 128) = v11;
      *(_OWORD *)(v6 - 112) = v12;
      v5 -= 152;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v14 = *result;
  *result = v4;
  a2[1] = v14;
  v15 = result[1];
  result[1] = a2[2];
  a2[2] = v15;
  v16 = result[2];
  result[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TXGlyphRender>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(152 * a2);
}

uint64_t std::__split_buffer<TXGlyphRender>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](i - 144);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void LiImageFilter::LiImageFilter(LiImageFilter *this, _QWORD *a2)
{
  PC_Sp_counted_base *v4;
  PCSharedCount *v5;

  LiImageSource::LiImageSource((LiImageSource *)this, a2 + 1);
  v4 = (PC_Sp_counted_base *)*a2;
  v5->var0 = *(PC_Sp_counted_base **)a2;
  *(PCSharedCount *)((char *)v5 + *((_QWORD *)v4 - 3)) = (PCSharedCount)a2[5];
  v5[2].var0 = 0;
  PCSharedCount::PCSharedCount(v5 + 3);
  *((_DWORD *)this + 8) = 0;
}

void sub_1B2915FCC(_Unwind_Exception *a1)
{
  OZChannelBase *v1;
  const PCString *v2;

  OZChannelBase::setRangeName(v1, v2);
  _Unwind_Resume(a1);
}

void LiImageFilter::~LiImageFilter(PCSharedCount *this, const PCString *a2)
{
  __CFString *var0;

  var0 = a2->var0;
  this->var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[5].var0;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 1);
}

void PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const PCSharedCount *v16;
  uint64_t v17;
  PCSharedCount *v18;
  PCSharedCount *v19;
  uint64_t v20;
  PCException *exception;
  PCString v22;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v22, "PCArray::resize");
    PCException::PCException(exception, &v22);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if (a2 >= (int)v6)
    {
      if (a2 > (int)v6)
      {
        v10 = 16 * v6;
        v11 = a2 - v6;
        do
        {
          v12 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(v12 + v10) = 0;
          PCSharedCount::PCSharedCount((PCSharedCount *)(v12 + v10 + 8));
          v10 += 16;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v7 = a2;
      v8 = (16 * a2) | 8;
      do
      {
        PCSharedCount::~PCSharedCount((PCSharedCount *)(*(_QWORD *)(a1 + 16) + v8));
        ++v7;
        v8 += 16;
      }
      while (v7 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 16 * v3);
    }
    else
    {
      v9 = 0;
    }
    v13 = *(_DWORD *)(a1 + 12);
    if (a2 >= v13)
      v14 = *(_DWORD *)(a1 + 12);
    else
      v14 = a2;
    if (v14 < 1)
    {
      v14 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        v16 = (const PCSharedCount *)(*(_QWORD *)(a1 + 16) + v15);
        *(PCSharedCount *)&v9[v15] = (PCSharedCount)v16->var0;
        PCSharedCount::PCSharedCount((PCSharedCount *)&v9[v15 + 8], v16 + 1);
        PCSharedCount::~PCSharedCount((PCSharedCount *)(*(_QWORD *)(a1 + 16) + v15 + 8));
        v15 += 16;
      }
      while (16 * v14 != v15);
      v13 = *(_DWORD *)(a1 + 12);
    }
    if (v14 < v13)
    {
      v17 = (16 * v14) | 8;
      do
      {
        PCSharedCount::~PCSharedCount((PCSharedCount *)(*(_QWORD *)(a1 + 16) + v17));
        v17 += 16;
        ++v14;
      }
      while (*(_DWORD *)(a1 + 12) > v14);
    }
    if (v14 < a2)
    {
      v18 = (PCSharedCount *)&v9[16 * v14 + 8];
      do
      {
        v18[-1].var0 = 0;
        PCSharedCount::PCSharedCount(v18);
        v18 = v19 + 2;
        ++v14;
      }
      while (v14 < a2);
    }
    v20 = *(_QWORD *)(a1 + 16);
    if (v20)
      MEMORY[0x1B5E2914C](v20, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2916250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZRenderGraphState::OZRenderGraphState(OZRenderGraphState *this, const OZRenderGraphState *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = v6;
  *(_OWORD *)this = v4;
  *((_OWORD *)this + 1) = v5;
  std::list<OZEffect *>::list((_QWORD *)this + 8, (uint64_t)a2 + 64);
  v7 = *(_OWORD *)((char *)a2 + 168);
  v8 = *(_OWORD *)((char *)a2 + 184);
  v9 = *(_OWORD *)((char *)a2 + 200);
  v10 = *((_QWORD *)a2 + 27);
  v11 = *(_OWORD *)((char *)a2 + 104);
  v12 = *(_OWORD *)((char *)a2 + 120);
  v13 = *(_OWORD *)((char *)a2 + 136);
  v14 = *(_OWORD *)((char *)a2 + 152);
  v15 = *(_OWORD *)((char *)a2 + 88);
  *((_QWORD *)this + 28) = &unk_1E64FC250;
  *(_OWORD *)((char *)this + 88) = v15;
  *(_OWORD *)((char *)this + 152) = v14;
  *(_OWORD *)((char *)this + 136) = v13;
  *(_OWORD *)((char *)this + 120) = v12;
  *(_OWORD *)((char *)this + 104) = v11;
  *((_QWORD *)this + 27) = v10;
  *(_OWORD *)((char *)this + 200) = v9;
  *(_OWORD *)((char *)this + 184) = v8;
  *(_OWORD *)((char *)this + 168) = v7;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  v16 = *((_DWORD *)a2 + 59);
  if (v16 <= 0)
    v17 = 0;
  else
    v17 = (2 * v16) | 1;
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)this + 224, v16, v17);
  if (*((int *)a2 + 59) >= 1)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      LiLight::operator=(*((_QWORD *)this + 30) + v18, *((_QWORD *)a2 + 30) + v18);
      ++v19;
      v18 += 944;
    }
    while (v19 < *((int *)a2 + 59));
  }
  *((_BYTE *)this + 248) = *((_BYTE *)a2 + 248);
  v20 = *((_OWORD *)a2 + 16);
  v21 = *((_OWORD *)a2 + 18);
  *((_OWORD *)this + 17) = *((_OWORD *)a2 + 17);
  *((_OWORD *)this + 18) = v21;
  *((_OWORD *)this + 16) = v20;
}

void sub_1B29163A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E64FC250;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E64FC250;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<LiLight,PCArray_Traits<LiLight>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  LiLight *v16;
  uint64_t v17;
  uint64_t v18;
  PCException *exception;
  PCString v20;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v20, "PCArray::resize");
    PCException::PCException(exception, &v20);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(_DWORD *)(a1 + 12);
    if (a2 >= v6)
    {
      if (a2 > v6)
      {
        v10 = 944 * v6;
        v11 = a2 - v6;
        do
        {
          LiLight::LiLight((LiLight *)(*(_QWORD *)(a1 + 16) + v10));
          v10 += 944;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v7 = a2;
      v8 = 944 * a2;
      do
      {
        LiLight::~LiLight((PCSharedCount *)(*(_QWORD *)(a1 + 16) + v8));
        ++v7;
        v8 += 944;
      }
      while (v7 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 944 * v3);
    }
    else
    {
      v9 = 0;
    }
    v12 = *(_DWORD *)(a1 + 12);
    if (a2 >= v12)
      v13 = *(_DWORD *)(a1 + 12);
    else
      v13 = a2;
    if (v13 < 1)
    {
      v13 = 0;
    }
    else
    {
      v14 = 0;
      do
      {
        LiLight::LiLight((LiLight *)&v9[v14], (const LiLight *)(*(_QWORD *)(a1 + 16) + v14));
        LiLight::~LiLight((PCSharedCount *)(*(_QWORD *)(a1 + 16) + v14));
        v14 += 944;
      }
      while (944 * v13 != v14);
      v12 = *(_DWORD *)(a1 + 12);
    }
    if (v13 < v12)
    {
      v15 = 944 * v13;
      do
      {
        LiLight::~LiLight((PCSharedCount *)(*(_QWORD *)(a1 + 16) + v15));
        v15 += 944;
        ++v13;
      }
      while (*(_DWORD *)(a1 + 12) > v13);
    }
    if (v13 < a2)
    {
      v16 = (LiLight *)&v9[944 * v13];
      do
      {
        LiLight::LiLight(v16);
        v16 = (LiLight *)(v17 + 944);
        ++v13;
      }
      while (v13 < a2);
    }
    v18 = *(_QWORD *)(a1 + 16);
    if (v18)
      MEMORY[0x1B5E2914C](v18, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B29166C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void LiString::dec(LiString *this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;

  if (*(_QWORD *)this)
  {
    v2 = (unsigned int *)(*(_QWORD *)this - 12);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      **(_BYTE **)this = 0;
      if (*(_QWORD *)this)
        v5 = (void *)(*(_QWORD *)this - 12);
      else
        v5 = 0;
      free(v5);
      *(_QWORD *)this = 0;
    }
  }
}

void LiString::LiString(LiString *this, const char *a2)
{
  uint64_t v4;
  unsigned int *v6;

  if (a2 && *a2)
  {
    v4 = 0;
    while (a2[++v4])
      ;
    v6 = (unsigned int *)malloc_type_malloc(v4 + 13, 0x8903763CuLL);
    v6[2] = v4 + 1;
    atomic_store(1u, v6);
    *(_QWORD *)this = v6 + 3;
    v6[1] = v4;
    memcpy(v6 + 3, a2, v4 + 1);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

PCSharedCount *PCPtr<LiImageSource>::PCPtr<OZGradientSource>(PCSharedCount *a1, const PCSharedCount *a2)
{
  uint64_t *v4;
  PCSharedCount v6;

  a1->var0 = a2->var0;
  v4 = (uint64_t *)&a1[1];
  PCSharedCount::PCSharedCount(a1 + 1);
  if (a1->var0)
  {
    PCSharedCount::PCSharedCount(&v6, a2 + 1);
    PCSharedCount::operator=(v4, (uint64_t *)&v6);
    PCSharedCount::~PCSharedCount(&v6);
  }
  return a1;
}

void sub_1B2916850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount *v10;

  PCSharedCount::~PCSharedCount(&a10);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

void LiClipSet::~LiClipSet(LiClipSet *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *((_QWORD *)this + 3) = &unk_1E64FC288;
  v2 = *((_DWORD *)this + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *((int *)this + 9);
    v5 = (char *)*((_QWORD *)this + 5);
    if ((v4 & 0x80000000) != 0)
      bzero(&v5[4 * v4], 4 * ~(_DWORD)v4 + 4);
  }
  else
  {
    if (v3)
    {
      v5 = (char *)operator new[]();
      bzero(v5, 4 * v3);
    }
    else
    {
      v5 = 0;
    }
    v6 = *((_QWORD *)this + 5);
    if (v6)
      MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
    *((_QWORD *)this + 5) = v5;
  }
  *((_DWORD *)this + 8) = v3;
  *((_DWORD *)this + 9) = 0;
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 8) = 0;
  *(_QWORD *)this = &unk_1E64FC2C0;
  if (*((int *)this + 2) < 0)
    v7 = 1;
  else
    v7 = *((_DWORD *)this + 2);
  PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize((uint64_t)this, 0, v7);
  v8 = *((_QWORD *)this + 2);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = 0;
}

uint64_t PCArray<int,PCArray_Traits<int>>::~PCArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E64FC288;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    v5 = *(char **)(a1 + 16);
    if ((v4 & 0x80000000) != 0)
      bzero(&v5[4 * v4], 4 * ~(_DWORD)v4 + 4);
  }
  else
  {
    if (v3)
    {
      v5 = (char *)operator new[]();
      bzero(v5, 4 * v3);
    }
    else
    {
      v5 = 0;
    }
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v5;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E64FC2C0;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<int,PCArray_Traits<int>>::~PCArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E64FC288;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    v5 = *(char **)(a1 + 16);
    if ((v4 & 0x80000000) != 0)
      bzero(&v5[4 * v4], 4 * ~(_DWORD)v4 + 4);
  }
  else
  {
    if (v3)
    {
      v5 = (char *)operator new[]();
      bzero(v5, 4 * v3);
    }
    else
    {
      v5 = 0;
    }
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v5;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E64FC2C0;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  PCException *exception;
  PCString v18;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v18, "PCArray::resize");
    PCException::PCException(exception, &v18);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v5 = result;
  if (v3 == *(_DWORD *)(result + 8))
  {
    v6 = *(int *)(result + 12);
    if ((int)v6 < a2)
    {
      v7 = 32 * v6;
      v8 = a2 - v6;
      do
      {
        v9 = (_OWORD *)(*(_QWORD *)(result + 16) + v7);
        *v9 = 0uLL;
        v9[1] = 0uLL;
        v7 += 32;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    if (v3)
    {
      v10 = (_OWORD *)operator new[]();
      bzero(v10, 32 * v3);
    }
    else
    {
      v10 = 0;
    }
    LODWORD(v11) = *(_DWORD *)(v5 + 12);
    if (a2 >= (int)v11)
      v12 = v11;
    else
      v12 = a2;
    if ((int)v12 < 1)
    {
      LODWORD(v12) = 0;
    }
    else
    {
      v13 = (__int128 *)(*(_QWORD *)(v5 + 16) + 16);
      v14 = v10 + 1;
      v15 = v12;
      do
      {
        *(v14 - 1) = *(v13 - 1);
        v16 = *v13;
        v13 += 2;
        *v14 = v16;
        v14 += 2;
        --v15;
      }
      while (v15);
    }
    if ((int)v12 <= (int)v11)
      v11 = v11;
    else
      v11 = v12;
    if ((int)v11 < a2)
      bzero(&v10[2 * v11], 32 * (~(_DWORD)v11 + a2) + 32);
    result = *(_QWORD *)(v5 + 16);
    if (result)
      result = MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    *(_QWORD *)(v5 + 16) = v10;
  }
  *(_DWORD *)(v5 + 8) = v3;
  *(_DWORD *)(v5 + 12) = a2;
  return result;
}

void sub_1B2916E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void LiCachedGaussianBlur::~LiCachedGaussianBlur(PCSharedCount *this, const PCString *a2)
{
  __CFString *var0;
  __CFString *v5;

  var0 = a2->var0;
  this->var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[9].var0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[12]);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&this[10]);
  v5 = a2[2].var0;
  this->var0 = (PC_Sp_counted_base *)v5;
  *(__CFString **)((char *)this + v5[-1].info) = a2[7].var0;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 3);
}

void std::vector<LiPolygon::PosEdge>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (a1[1] - *a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + 32 * a2;
  }
  else
  {
    std::vector<LiPolygon::PosEdge>::__append(a1, a2 - v2);
  }
}

void std::vector<LiPolygon::PosEdge>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *__p;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(v4, v12);
    else
      v13 = 0;
    __p = v13;
    v15 = &v13[32 * v10];
    v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    v16 = &v15[32 * a2];
    std::vector<LiPolygon::PosEdge>::__swap_out_circular_buffer(a1, &__p);
    if (v16 != v15)
      v16 += (v15 - v16 + 31) & 0xFFFFFFFFFFFFFFE0;
    if (__p)
      operator delete(__p);
  }
}

void sub_1B2917014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<LiPolygon::PosEdge>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

double *PCMatrix44Tmpl<double>::transform_row<double>(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  *a3 = *a2 * *a1 + v4 * a1[4] + v5 * a1[8] + v6 * a1[12];
  a3[1] = v3 * a1[1] + v4 * a1[5] + v5 * a1[9] + v6 * a1[13];
  a3[2] = v3 * a1[2] + v4 * a1[6] + v5 * a1[10] + v6 * a1[14];
  a3[3] = v3 * a1[3] + v4 * a1[7] + v5 * a1[11] + v6 * a1[15];
  return a3;
}

{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a1[15] + *a2 * a1[3] + v4 * a1[7] + v5 * a1[11];
  *a3 = (a1[12] + *a2 * *a1 + v4 * a1[4] + v5 * a1[8]) / v6;
  a3[1] = (a1[13] + v3 * a1[1] + v4 * a1[5] + v5 * a1[9]) / v6;
  a3[2] = (a1[14] + v3 * a1[2] + v4 * a1[6] + v5 * a1[10]) / v6;
  return a3;
}

uint64_t std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::find<char const*>(uint64_t a1, const char **a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *a2;
  v5 = a1 + 8;
  do
  {
    v6 = strcmp(*(const char **)(v3 + 32), v4);
    v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || strcmp(v4, *(const char **)(v5 + 32)) < 0)
    return v2;
  return v5;
}

uint64_t PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E64FC2F8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E64FC2F8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t *std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(uint64_t **a1, const char **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__find_equal<char const*>((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = **a4;
    v7[5] = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__find_equal<char const*>(uint64_t a1, _QWORD *a2, const char **a3)
{
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  _QWORD *v7;
  const char *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = *a3;
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = *(const char **)(v4 + 32);
        if ((strcmp(v6, v8) & 0x80000000) == 0)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if ((strcmp(v8, v6) & 0x80000000) == 0)
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v7;
  return v5;
}

void PCArray<unsigned long,PCArray_Traits<unsigned long>>::~PCArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E64FC330;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    v5 = *(char **)(a1 + 16);
    if ((v4 & 0x80000000) != 0)
      bzero(&v5[8 * v4], 8 * ~(_DWORD)v4 + 8);
  }
  else
  {
    if (v3)
    {
      v5 = (char *)operator new[]();
      bzero(v5, 8 * v3);
    }
    else
    {
      v5 = 0;
    }
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v5;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t OZValueCache<OZBoundsCacheItem>::OZValueCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E64FC368;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_1B3054250;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(a1 + 40));
  return a1;
}

void sub_1B2917598(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<OZBoundsCacheItem>::clear(v1);
  _Unwind_Resume(a1);
}

void OZValueCache<OZBoundsCacheItem>::~OZValueCache(uint64_t a1)
{
  OZValueCache<OZBoundsCacheItem>::~OZValueCache(a1);
  JUMPOUT(0x1B5E29170);
}

void std::__list_imp<OZBoundsCacheItem>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        (*(void (**)(uint64_t *))v3[2])(v3 + 2);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t OZValueCache<OZProjectedBoundsCacheItem>::OZValueCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E64FC398;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_1B3054250;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(a1 + 40));
  return a1;
}

void sub_1B2917694(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<OZBoundsCacheItem>::clear(v1);
  _Unwind_Resume(a1);
}

void OZValueCache<OZProjectedBoundsCacheItem>::~OZValueCache(uint64_t a1)
{
  OZValueCache<OZProjectedBoundsCacheItem>::~OZValueCache(a1);
  JUMPOUT(0x1B5E29170);
}

void std::vector<TXTabStop>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v1 = *a1;
  v2 = (void (***)(_QWORD))**a1;
  if (v2)
  {
    v4 = (void (***)(_QWORD))v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 69;
      do
      {
        (**v6)(v6);
        v7 = v6 == v2;
        v6 -= 69;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::deque<PCHash128>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(uint64_t a1, PCString *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(a1, a2[1].var0);
    PCString::~PCString(a2 + 4);
    operator delete(a2);
  }
}

uint64_t OZValueCache<OZBoundsCacheItem>::~OZValueCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E64FC368;
  OZValueCache<OZBoundsCacheItem>::flush(a1);
  PCSharedMutex::~PCSharedMutex((std::mutex *)(a1 + 40));
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t OZValueCache<OZProjectedBoundsCacheItem>::~OZValueCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E64FC398;
  OZValueCache<OZBoundsCacheItem>::flush(a1);
  PCSharedMutex::~PCSharedMutex((std::mutex *)(a1 + 40));
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::destroy(uint64_t a1, PCString *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::destroy(a1, a2[1].var0);
    PCString::~PCString(a2 + 5);
    operator delete(a2);
  }
}

void std::vector<TXParagraphStyle *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t *std::map<long,double>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<long,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long,double>,std::__tree_node<std::__value_type<long,double>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1B2917AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<long,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long,double>,std::__tree_node<std::__value_type<long,double>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_hint_unique_key_args<long,std::pair<long const,double> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_hint_unique_key_args<long,std::pair<long const,double> const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, _OWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__find_equal<long>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__find_equal<long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *std::vector<PCVector3<double>>::__assign_with_size[abi:ne180100]<PCVector3<double>*,PCVector3<double>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD **v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  _QWORD *v23;
  int64_t v24;
  _QWORD *v25;
  __int128 v26;

  v6 = a2;
  v8 = a1[2];
  result = (_QWORD *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    std::vector<PCVector3<double>>::__vallocate[abi:ne180100](a1, v12);
    v14 = (_QWORD *)a1[1];
    v13 = (_QWORD **)(a1 + 1);
    result = v14;
    v15 = (char *)v14;
    if (v6 != a3)
    {
      v15 = (char *)result;
      do
      {
        *(_OWORD *)v15 = *v6;
        *((_QWORD *)v15 + 2) = *((_QWORD *)v6 + 2);
        v15 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
LABEL_26:
    v24 = v15 - (char *)result;
    goto LABEL_27;
  }
  v17 = (_QWORD *)a1[1];
  v13 = (_QWORD **)(a1 + 1);
  v16 = v17;
  v18 = 0xAAAAAAAAAAAAAAABLL * (v17 - result);
  if (v18 >= a4)
  {
    v15 = (char *)result;
    if (a2 != a3)
    {
      v25 = result;
      do
      {
        v26 = *v6;
        v25[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)v25 = v26;
        v25 += 3;
        v6 = (__int128 *)((char *)v6 + 24);
        v15 += 24;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  v19 = (uint64_t)a2 + 24 * v18;
  if (v16 != result)
  {
    v20 = 24 * v18;
    do
    {
      v21 = *v6;
      result[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)result = v21;
      result += 3;
      v6 = (__int128 *)((char *)v6 + 24);
      v20 -= 24;
    }
    while (v20);
    result = *v13;
  }
  v22 = (char *)result;
  if ((__int128 *)v19 != a3)
  {
    v22 = (char *)result;
    v23 = result;
    do
    {
      *(_OWORD *)v23 = *(_OWORD *)v19;
      v23[2] = *(_QWORD *)(v19 + 16);
      v22 += 24;
      v19 += 24;
      v23 += 3;
    }
    while ((__int128 *)v19 != a3);
  }
  v24 = v22 - (char *)result;
LABEL_27:
  *v13 = (_QWORD *)((char *)result + v24);
  return result;
}

char *std::vector<PCVector3<double>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t *PCCache<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::~PCCache(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1 + 32;
  std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::destroy(*a1 + 24, *(_QWORD **)v2);
  *(_QWORD *)(v2 - 8) = v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 48) = 0;
  std::unique_ptr<PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

void std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::destroy(a1, a2[1]);
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 8));
    operator delete(a2);
  }
}

uint64_t std::unique_ptr<PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::~PCCacheImpl(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::~PCCacheImpl(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t **std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<long,double>,std::__tree_node<std::__value_type<long,double>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          v8[5] = v9[5];
          std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__node_insert_multi(v5, v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_multi<std::pair<long const,double> const&>(v5, (_OWORD *)a2 + 2);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B2918248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (a2[4] >= v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

_OWORD *std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_multi<std::pair<long const,double> const&>(uint64_t **a1, _OWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = operator new(0x30uLL);
  v5 = v4;
  v4[2] = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*((_QWORD *)v4 + 4) >= v7[4])
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

void std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,decltype(nullptr),void>(const TXTextStyle *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0xC340uLL);
  std::__shared_ptr_emplace<TXTextStyle>::__shared_ptr_emplace[abi:ne180100]<TXTextStyle&,decltype(nullptr),std::allocator<TXTextStyle>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a2, v4 + 10, (uint64_t)(v4 + 3));
}

void sub_1B29183B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<TXTextStyle>::__shared_ptr_emplace[abi:ne180100]<TXTextStyle&,decltype(nullptr),std::allocator<TXTextStyle>,0>(_QWORD *a1, const TXTextStyle *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E64F80A8;
  a1[1] = 0;
  TXTextStyle::TXTextStyle((TXTextStyle *)(a1 + 3), a2, 0, 0);
  return a1;
}

void sub_1B2918404(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle const&,void>(OZSceneNode **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0xC340uLL);
  std::__shared_ptr_emplace<TXTextStyle>::__shared_ptr_emplace[abi:ne180100]<TXTextStyle&,std::allocator<TXTextStyle>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a2, v4 + 10, (uint64_t)(v4 + 3));
}

void sub_1B2918464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::list<std::shared_ptr<TXTextStyle>>::splice(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4 != a5)
  {
    v5 = (_QWORD *)*a5;
    if (result != a3)
    {
      v6 = 1;
      if (v5 != a4)
      {
        v7 = a4;
        do
        {
          v7 = (_QWORD *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(_QWORD *)(a3 + 16) -= v6;
      *(_QWORD *)(result + 16) += v6;
    }
    v8 = *a4;
    *(_QWORD *)(v8 + 8) = v5[1];
    *(_QWORD *)v5[1] = v8;
    v9 = *a2;
    *(_QWORD *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__erase_unique<long>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (!v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_hint_unique_key_args<long,std::pair<long,double>>(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__find_equal<long>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = *a4;
    v7[5] = a4[1];
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void std::list<OZProjectedBoundsCacheItem>::remove_if<OZ_VC_SameKey<OZProjectedBoundsCacheItem>>(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  double v6;
  BOOL v7;
  uint64_t v8[3];

  v8[0] = (uint64_t)v8;
  v8[1] = (uint64_t)v8;
  v8[2] = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != a1)
  {
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if (*(double *)(v2 + 24) == a2)
      {
        if (v5 == a1)
        {
          v7 = 1;
LABEL_8:
          v5 = a1;
        }
        else
        {
          while (1)
          {
            v6 = *(double *)(v5 + 24);
            v7 = v6 == a2;
            if (v6 != a2)
              break;
            v5 = *(_QWORD *)(v5 + 8);
            if (v5 == a1)
              goto LABEL_8;
          }
        }
        std::list<std::shared_ptr<TXTextStyle>>::splice((uint64_t)v8, v8, a1, (_QWORD *)v2, (_QWORD *)v5);
        if (!v7)
          v5 = *(_QWORD *)(v5 + 8);
      }
      v2 = v5;
    }
    while (v5 != a1);
  }
  std::__list_imp<OZBoundsCacheItem>::clear(v8);
}

void sub_1B2918770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void PCArray<unsigned long,PCArray_Traits<unsigned long>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  PCException *exception;
  PCString v16;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "PCArray::resize");
    PCException::PCException(exception, &v16);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if ((int)v6 < a2)
      bzero((void *)(*(_QWORD *)(a1 + 16) + 8 * v6), 8 * (~(_DWORD)v6 + a2) + 8);
  }
  else
  {
    if (v3)
    {
      v7 = (char *)operator new[]();
      bzero(v7, 8 * v3);
    }
    else
    {
      v7 = 0;
    }
    v8 = *(_DWORD *)(a1 + 12);
    if (a2 >= v8)
      v9 = v8;
    else
      v9 = a2;
    if ((int)v9 < 1)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v10 = *(uint64_t **)(a1 + 16);
      v11 = v9;
      v12 = v7;
      do
      {
        v13 = *v10++;
        *v12++ = v13;
        --v11;
      }
      while (v11);
    }
    if ((int)v9 > v8)
      v8 = v9;
    if (v8 < a2)
      bzero(&v7[8 * v8], 8 * (~v8 + a2) + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14)
      MEMORY[0x1B5E2914C](v14, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v7;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B291890C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,PCRect<double>>,std::__map_value_compare<int,std::__value_type<int,PCRect<double>>,std::less<int>,true>,std::allocator<std::__value_type<int,PCRect<double>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x48uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v11 + 56) = _Q0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

const void **PCCFRef<__CTLine const*>::~PCCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B2918BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<unsigned long>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<unsigned long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<TXTextObject,std::allocator<TXTextObject>,TXTextLayout *,unsigned int,void>@<X0>(TXTextLayout **a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x328uLL);
  result = std::__shared_ptr_emplace<TXTextObject>::__shared_ptr_emplace[abi:ne180100]<TXTextLayout *,unsigned int,std::allocator<TXTextObject>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B2918E64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<TXTextObject>::__shared_ptr_emplace[abi:ne180100]<TXTextLayout *,unsigned int,std::allocator<TXTextObject>,0>(_QWORD *a1, TXTextLayout **a2, int *a3)
{
  a1[2] = 0;
  *a1 = &unk_1E64FC3C8;
  a1[1] = 0;
  TXTextObject::TXTextObject((TXTextObject *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_1B2918EB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TXTextObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E64FC3C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TXTextObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E64FC3C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<TXTextObject>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::vector<std::shared_ptr<TXTextObject>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<TXTextObject>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<TXTextObject>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x28uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1B29192D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

_QWORD *std::shared_ptr<OZCoreTextTypeface>::shared_ptr[abi:ne180100]<TXCoreTextTypeface,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E64FC418;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2919384(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<TXCoreTextTypeface *,std::shared_ptr<OZCoreTextTypeface>::__shared_ptr_default_delete<OZCoreTextTypeface,TXCoreTextTypeface>,std::allocator<TXCoreTextTypeface>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<TXCoreTextTypeface *,std::shared_ptr<OZCoreTextTypeface>::__shared_ptr_default_delete<OZCoreTextTypeface,TXCoreTextTypeface>,std::allocator<TXCoreTextTypeface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t **std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_BYTE *)v11 + 32) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1B2919690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<int,TXDirectionalRun>,std::__map_value_compare<int,std::__value_type<int,TXDirectionalRun>,std::less<int>,true>,std::allocator<std::__value_type<int,TXDirectionalRun>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__erase_unique<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  uint64_t *result;
  _BYTE v4[24];

  result = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::find<unsigned int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v5;
        v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,TXComposedCharacter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,TXComposedCharacter>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = **a2;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)v6 + 5);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B2919A38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,TXComposedCharacter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,TXComposedCharacter>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,TXComposedCharacter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,TXComposedCharacter>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  PCString *v2;

  v2 = *(PCString **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      PCString::~PCString(v2 + 5);
    operator delete(v2);
  }
}

uint64_t std::vector<PCVector3<double>>::__push_back_slow_path<PCVector3<double> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  v11 = &v10[24 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[24 * v12];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  v17 = v11 + 24;
  std::vector<PCVector3<double>>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 24) % 0x18uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1B2919BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<PCVector3<double>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 24);
    v2 -= 24;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t *std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<OZSnap>::__find_equal<OZSnap>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<OZSnap>::__construct_node<OZSnap>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *std::__tree<OZSnap>::__find_equal<OZSnap>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)v4 + 28;
        if (!OZSnap::operator<(a3, (uint64_t)v4 + 28))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!OZSnap::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<OZSnap>::__construct_node<OZSnap>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;

  v5 = a1 + 8;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  OZSnap::OZSnap((uint64_t)v6 + 28, a2);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B2919DBC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<PCWorkingColor,std::allocator<PCWorkingColor>,PCWorkingColor const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x40uLL);
  result = std::__shared_ptr_emplace<PCWorkingColor>::__shared_ptr_emplace[abi:ne180100]<PCWorkingColor const&,std::allocator<PCWorkingColor>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B2919E18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PCWorkingColor>::__shared_ptr_emplace[abi:ne180100]<PCWorkingColor const&,std::allocator<PCWorkingColor>,0>(uint64_t a1, uint64_t a2)
{
  CGColorSpace *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E64FC480;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  v4 = *(CGColorSpace **)(a2 + 16);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    PCCFRefTraits<CGColorSpace *>::retain(v4);
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v5;
  return a1;
}

void sub_1B2919E8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCWorkingColor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E64FC480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCWorkingColor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E64FC480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

CGColorSpace **std::__shared_ptr_emplace<PCWorkingColor>::__on_zero_shared(uint64_t a1)
{
  return PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a1 + 40));
}

void PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::addValue(uint64_t a1, _OWORD *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33[3];
  std::__shared_weak_count *v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;

  if (*(_QWORD *)(a1 + 88) >= a4 || *(_QWORD *)(a1 + 104))
  {
    v8 = std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::find<ColorConversionKey>(a1 + 24, (uint64_t)a2);
    v37 = v8;
    if ((_QWORD *)(a1 + 32) == v8)
    {
      v9 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 72) = v9;
      v11 = *a3;
      v10 = a3[1];
      v33[2] = *a3;
      v34 = (std::__shared_weak_count *)v10;
      if (v10)
      {
        v12 = (unint64_t *)(v10 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      *(_QWORD *)&v35 = a4;
      *((_QWORD *)&v35 + 1) = v9;
      v36 = 0;
      v14 = a2[1];
      v28[0] = *a2;
      v28[1] = v14;
      v29 = v11;
      v30 = (std::__shared_weak_count *)v10;
      if (v10)
      {
        v15 = (unint64_t *)(v10 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v31 = v35;
      v32 = v36;
      v33[0] = (uint64_t)std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::__emplace_unique_key_args<ColorConversionKey,std::pair<ColorConversionKey const,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>((uint64_t **)(a1 + 24), (uint64_t)v28, (uint64_t)v28);
      v33[1] = v17;
      v18 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v33);
      v21 = *(_QWORD *)(a1 + 80) + a4;
      *(_QWORD *)(a1 + 80) = v21;
      if (!*(_QWORD *)(a1 + 104))
      {
        while (v21 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
        {
          v24 = *(_QWORD **)(a1 + 48);
          if (v24 == *(_QWORD **)(a1 + 56))
            break;
          *(_QWORD *)&v28[0] = *v24;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)v28);
          v22 = *(uint64_t **)&v28[0];
          v23 = *(_QWORD *)&v28[0] + 64;
          *(_QWORD *)(a1 + 80) -= *(_QWORD *)(*(_QWORD *)&v28[0] + 80);
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v22);
          std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v23);
          operator delete(v22);
          v21 = *(_QWORD *)(a1 + 80);
        }
      }
      v25 = v34;
      if (v34)
      {
        v26 = (unint64_t *)&v34->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v8 + 8, a3);
      PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::update(a1, (uint64_t)&v37, a4);
    }
  }
}

void sub_1B291A124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v4 = (char *)*a1;
  v5 = a1[1];
  v6 = ((char *)v5 - (_BYTE *)*a1) >> 3;
  v7 = *a2;
  *(_QWORD *)(*a2 + 96) = v6;
  v10 = (unint64_t)a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = v9 - (_QWORD)v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1))
      v13 = v6 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      v7 = *a2;
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v6];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v7;
    v11 = v16 + 8;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = v7;
    v11 = v5 + 1;
  }
  a1[1] = v11;
  v21 = *(_QWORD *)(*a2 + 96);
  if (v21)
  {
    v22 = (char *)*a1;
    v23 = *((_QWORD *)*a1 + v21);
    do
    {
      v24 = v21 - 1;
      v25 = (v21 - 1) >> 1;
      v26 = *(_QWORD *)&v22[8 * v25];
      if (*(_QWORD *)(v26 + 88) <= *(_QWORD *)(v23 + 88))
        break;
      *(_QWORD *)&v22[8 * v21] = v26;
      *(_QWORD *)&v22[8 * v25] = v23;
      v22 = (char *)*a1;
      *(_QWORD *)(*((_QWORD *)*a1 + v21) + 96) = v21;
      v23 = *(_QWORD *)&v22[8 * v25];
      *(_QWORD *)(v23 + 96) = v25;
      v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

void PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;

  v6 = *(_QWORD *)(a1 + 72) + 1;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(*(_QWORD *)a2 + 88) = v6;
  v7 = (uint64_t *)(a1 + 48);
  PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), a2);
  v8 = *(_QWORD *)a2;
  v9 = a3 - *(_QWORD *)(*(_QWORD *)a2 + 80);
  if (v9)
  {
    v10 = v9 + *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(v8 + 80) = a3;
    if (!*(_QWORD *)(a1 + 104))
    {
      while (v10 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
      {
        v11 = *(uint64_t ***)(a1 + 48);
        if (v11 == *(uint64_t ***)(a1 + 56))
          break;
        v14 = *v11;
        PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::remove(v7, (uint64_t)&v14);
        v12 = v14;
        v13 = (uint64_t)(v14 + 8);
        *(_QWORD *)(a1 + 80) -= v14[10];
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v12);
        std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v13);
        operator delete(v12);
        v10 = *(_QWORD *)(a1 + 80);
      }
    }
  }
}

_QWORD *std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::find<ColorConversionKey>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = ColorConversionKey::operator<((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || ColorConversionKey::operator<(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

BOOL ColorConversionKey::operator<(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  float v3;
  float v4;
  float v5;
  float v6;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v2 = *(float *)a1 < *(float *)a2;
  if (*(float *)a1 != *(float *)a2)
    return v2;
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a2 + 4);
  v2 = v3 < v4;
  if (v3 != v4)
    return v2;
  v5 = *(float *)(a1 + 8);
  v6 = *(float *)(a2 + 8);
  v2 = v5 < v6;
  if (v5 != v6)
    return v2;
  v8 = *(_DWORD *)(a1 + 12);
  v9 = *(_DWORD *)(a2 + 12);
  v10 = v8 < v9;
  if (v8 != v9)
    return v10;
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_DWORD *)(a2 + 16);
  v10 = v11 < v12;
  if (v11 != v12)
    return v10;
  v13 = *(_DWORD *)(a1 + 20);
  v14 = *(_DWORD *)(a2 + 20);
  v10 = v13 < v14;
  if (v13 != v14)
    return v10;
  return operator<((float *)(a1 + 24), a2 + 24);
}

uint64_t *std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::__emplace_unique_key_args<ColorConversionKey,std::pair<ColorConversionKey const,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[2];
  char v15;
  uint64_t v16;

  v5 = (uint64_t **)std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::__find_equal<ColorConversionKey>((uint64_t)a1, &v16, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v8 = (uint64_t *)operator new(0x68uLL);
    v6 = v8;
    v14[1] = a1 + 1;
    v9 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v8 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v8 + 3) = v9;
    v10 = *(_QWORD *)(a3 + 40);
    v8[8] = *(_QWORD *)(a3 + 32);
    v8[9] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *((_OWORD *)v8 + 5) = *(_OWORD *)(a3 + 48);
    v8[12] = *(_QWORD *)(a3 + 64);
    v15 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v16, v7, v8);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::__find_equal<ColorConversionKey>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!ColorConversionKey::operator<(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!ColorConversionKey::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 64);
    operator delete(v2);
  }
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 96);
  v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(_QWORD *)(*a1 + 8 * v3) = *(_QWORD *)(*a1 + 8 * v4);
    *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v3) + 96) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::bubble(a1, *a1 + 8 * v3);
  }
}

void std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::__append((void **)a1, a2 - v2);
  }
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *result;
  v3 = result[1] - *result;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 96);
  v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      v17 = *(_QWORD *)(v2 + 8 * v4);
      do
      {
        v18 = v4 - 1;
        v19 = (v4 - 1) >> 1;
        v20 = *(_QWORD *)(v2 + 8 * v19);
        if (*(_QWORD *)(v20 + 88) <= *(_QWORD *)(v17 + 88))
          break;
        *(_QWORD *)(v2 + 8 * v4) = v20;
        *(_QWORD *)(v2 + 8 * v19) = v17;
        v2 = *result;
        *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 96) = v4;
        v17 = *(_QWORD *)(v2 + 8 * v19);
        *(_QWORD *)(v17 + 96) = v19;
        v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  v6 = 0;
  v7 = v3 >> 3;
  v8 = 2 * v4;
  v9 = *(_QWORD *)(v2 + 8 * v4);
  while (1)
  {
    v10 = v8 + 2;
    v11 = *(_QWORD *)(v9 + 88);
    v12 = v10 < v7 && v11 > *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 88);
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * v5) + 88);
    if (v11 <= v13 && !v12)
      break;
    v15 = v11 > v13 && v12;
    if (v12)
      v16 = v10;
    else
      v16 = v5;
    if (v15)
    {
      if (v13 <= *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 88))
        v16 = v5;
      else
        v16 = v10;
    }
    *(_QWORD *)(v2 + 8 * v4) = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v2 + 8 * v16) = v9;
    v2 = *result;
    *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 96) = v4;
    v9 = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v9 + 96) = v16;
    v8 = 2 * v16;
    v6 = 1;
    v5 = (2 * v16) | 1;
    v4 = v16;
    if (v5 >= v7)
      return result;
  }
  if ((v6 & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 96);
    goto LABEL_24;
  }
  return result;
}

void std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
      v7 = (char *)a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v17 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v7 != v17);
      v7 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
      operator delete(v7);
  }
}

_QWORD *PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::findValue@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  result = std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::find<ColorConversionKey>((uint64_t)(a1 + 3), a2);
  v12 = result;
  if (a1 + 4 == result)
  {
    *a3 = 0;
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    v8 = result[9];
    *a4 = result[8];
    a4[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = a1[9] + 1;
    a1[9] = v11;
    result[11] = v11;
    result = PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::bubble(a1 + 6, (uint64_t)&v12);
    *a3 = 1;
  }
  return result;
}

void sub_1B291A9A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<TXTextStyle>::shared_ptr[abi:ne180100]<TXTextStyle,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E64FC4D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 56);
  else
    v5 = 0;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1B291AA2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<TXTextStyle *,std::shared_ptr<TXTextStyle>::__shared_ptr_default_delete<TXTextStyle,TXTextStyle>,std::allocator<TXTextStyle>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<TXTextStyle *,std::shared_ptr<TXTextStyle>::__shared_ptr_default_delete<TXTextStyle,TXTextStyle>,std::allocator<TXTextStyle>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL PCMatrix44Tmpl<double>::getPartialTransformation(__int128 *a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BOOL8 v7;
  uint64_t v11;
  __int128 *v12;
  uint64_t i;
  uint64_t v14;
  double *v15;
  __int128 v16;
  double v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  double *v72;
  __int128 v73;
  __int128 v74;
  double v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  double v85[6];
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v3 = a1[5];
  v98 = a1[4];
  v99 = v3;
  v4 = a1[7];
  v100 = a1[6];
  v101 = v4;
  v5 = a1[1];
  v94 = *a1;
  v95 = v5;
  v6 = a1[3];
  v96 = a1[2];
  v97 = v6;
  if (*((double *)&v4 + 1) == 0.0)
    return 0;
  v11 = 0;
  v12 = &v94;
  do
  {
    for (i = 0; i != 32; i += 8)
      *(double *)((char *)v12 + i) = *(double *)((char *)v12 + i) / *((double *)&v101 + 1);
    ++v11;
    v12 += 2;
  }
  while (v11 != 4);
  v14 = 0;
  v93 = 0x3FF0000000000000;
  v85[5] = 1.0;
  v84 = 0x3FF0000000000000;
  v85[0] = 1.0;
  memset(&v85[1], 0, 32);
  v86 = 0u;
  v87 = 0u;
  v88 = 0x3FF0000000000000;
  v89 = 0;
  v81 = 0x3FF0000000000000;
  v78 = 0x3FF0000000000000;
  v75 = 1.0;
  v76 = 0u;
  v77 = 0u;
  v79 = 0u;
  v80 = 0u;
  v82 = 0u;
  v83 = 0u;
  v73 = 0u;
  v74 = 0u;
  do
  {
    v15 = &v85[v14];
    v16 = *(__int128 *)((char *)&v94 + v14 * 8 + 16);
    *(_OWORD *)v15 = *(__int128 *)((char *)&v94 + v14 * 8);
    *((_OWORD *)v15 + 1) = v16;
    v14 += 4;
  }
  while (v14 != 16);
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0x3FF0000000000000;
  v17 = PCMatrix44Tmpl<double>::determinant(v85);
  v7 = v17 != 0.0;
  if (v17 != 0.0)
  {
    v18 = v100;
    v19 = v101;
    if (*(double *)&v100 != 0.0 || *((double *)&v100 + 1) != 0.0 || *(double *)&v101 != 0.0)
    {
      v20 = 0;
      v21 = *((_QWORD *)&v101 + 1);
      do
      {
        v22 = (_OWORD *)((char *)&v75 + v20 * 8);
        v23 = *(_OWORD *)&v85[v20 + 2];
        *v22 = *(_OWORD *)&v85[v20];
        v22[1] = v23;
        v20 += 4;
      }
      while (v20 != 16);
      PCMatrix44Tmpl<double>::invert(&v75, &v75, 0.0);
      v24 = v76;
      v25 = v77;
      v26 = *((_QWORD *)&v80 + 1);
      *(_QWORD *)&v76 = *((_QWORD *)&v77 + 1);
      *((_QWORD *)&v76 + 1) = v80;
      *(_QWORD *)&v77 = *((_QWORD *)&v82 + 1);
      v27 = v82;
      *((_QWORD *)&v77 + 1) = v24;
      v28 = *((_QWORD *)&v79 + 1);
      *(_QWORD *)&v80 = *((_QWORD *)&v24 + 1);
      *((_QWORD *)&v80 + 1) = v79;
      *(_QWORD *)&v79 = v26;
      *(_QWORD *)&v82 = *((_QWORD *)&v83 + 1);
      *((_QWORD *)&v79 + 1) = v83;
      *((_QWORD *)&v82 + 1) = v25;
      *(_QWORD *)&v83 = v28;
      *((_QWORD *)&v83 + 1) = v27;
      v73 = v18;
      *(_QWORD *)&v74 = v19;
      *((_QWORD *)&v74 + 1) = v21;
      PCMatrix44Tmpl<double>::transform<double>(&v75, (double *)&v73, (double *)&v73);
    }
    v29 = *((_QWORD *)&v97 + 1);
    *(_QWORD *)a2 = *((_QWORD *)&v95 + 1);
    *(_QWORD *)(a2 + 8) = v29;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)&v99 + 1);
    *(_OWORD *)a3 = v94;
    *(_QWORD *)(a3 + 16) = v95;
    *(_OWORD *)(a3 + 32) = v96;
    *(_OWORD *)(a3 + 64) = v98;
    v30 = *(double *)(a3 + 24);
    v31 = *(double *)a3 * *(double *)a3
        + *(double *)(a3 + 8) * *(double *)(a3 + 8)
        + *(double *)(a3 + 16) * *(double *)(a3 + 16);
    *(_QWORD *)(a3 + 48) = v97;
    *(_QWORD *)(a3 + 80) = v99;
    *(double *)(a2 + 24) = sqrt(v31 + v30 * v30);
    PCVector4<double>::scale((double *)a3, 1.0);
    v32 = *(double *)(a3 + 8);
    v33 = *(double *)(a3 + 32);
    v34 = *(double *)(a3 + 40);
    v35 = *(double *)(a3 + 16);
    v36 = *(double *)(a3 + 24);
    v37 = *(double *)(a3 + 48);
    v38 = *(double *)(a3 + 56);
    v39 = *(double *)a3 * v33 + v32 * v34 + v35 * v37 + v36 * v38;
    v40 = v33 - *(double *)a3 * v39;
    v41 = v34 - v32 * v39;
    v42 = v37 - v35 * v39;
    v43 = v38 - v36 * v39;
    *(double *)(a3 + 32) = v40;
    *(double *)(a3 + 40) = v41;
    *(double *)(a3 + 48) = v42;
    *(double *)(a3 + 56) = v43;
    *(double *)(a2 + 32) = sqrt(v43 * v43 + v42 * v42 + v40 * v40 + v41 * v41);
    PCVector4<double>::scale((double *)(a3 + 32), 1.0);
    v44 = *(double *)a3;
    v45 = *(double *)(a3 + 8);
    v46 = *(double *)(a3 + 64);
    v47 = *(double *)(a3 + 72);
    v48 = *(double *)(a3 + 16);
    v49 = *(double *)(a3 + 24);
    v50 = *(double *)(a3 + 80);
    v51 = *(double *)(a3 + 88);
    v52 = *(double *)a3 * v46 + v45 * v47 + v48 * v50 + v49 * v51;
    *(double *)(a2 + 80) = v52;
    v53 = v46 - v44 * v52;
    v54 = v47 - v45 * v52;
    v55 = v50 - v48 * v52;
    v56 = v51 - v49 * v52;
    v57 = *(double *)(a3 + 32);
    v58 = *(double *)(a3 + 40);
    v59 = *(double *)(a3 + 48);
    v60 = *(double *)(a3 + 56);
    v61 = v53 * v57 + v58 * v54 + v59 * v55 + v60 * v56;
    *(double *)(a2 + 88) = v61;
    v62 = v53 - v57 * v61;
    v63 = v54 - v58 * v61;
    v64 = v55 - v59 * v61;
    v65 = v56 - v60 * v61;
    *(double *)(a3 + 64) = v62;
    *(double *)(a3 + 72) = v63;
    *(double *)(a3 + 80) = v64;
    *(double *)(a3 + 88) = v65;
    *(double *)(a2 + 40) = sqrt(v65 * v65 + v64 * v64 + v62 * v62 + v63 * v63);
    PCVector4<double>::scale((double *)(a3 + 64), 1.0);
    v66 = *(uint64_t *)(a2 + 40);
    *(float64x2_t *)(a2 + 80) = vdivq_f64(*(float64x2_t *)(a2 + 80), (float64x2_t)vdupq_lane_s64(v66, 0));
    v67 = *(float64x2_t *)(a3 + 72);
    *(_QWORD *)&v68.f64[0] = vdupq_laneq_s64((int64x2_t)v67, 1).u64[0];
    v69 = *(float64x2_t *)(a3 + 40);
    v68.f64[1] = *(float64_t *)(a3 + 64);
    *(_QWORD *)&v70.f64[0] = vdupq_laneq_s64((int64x2_t)v69, 1).u64[0];
    v70.f64[1] = *(float64_t *)(a3 + 32);
    if (vaddvq_f64(vmulq_f64(vsubq_f64(vmulq_f64(v69, v68), vmulq_f64(v67, v70)), *(float64x2_t *)a3))
       + (v70.f64[1] * v67.f64[0] - v68.f64[1] * v69.f64[0]) * *(double *)(a3 + 16)
       + *(double *)(a3 + 24) * 0.0 < 0.0)
    {
      v71 = 0;
      *(float64x2_t *)(a2 + 24) = vnegq_f64(*(float64x2_t *)(a2 + 24));
      *(double *)(a2 + 40) = -*(double *)&v66;
      do
      {
        v72 = (double *)(a3 + v71);
        *v72 = -*(double *)(a3 + v71);
        v72[4] = -*(double *)(a3 + v71 + 32);
        v72[8] = -*(double *)(a3 + v71 + 64);
        v71 += 8;
      }
      while (v71 != 24);
    }
  }
  return v7;
}

double PCMatrix44Tmpl<double>::determinant(double *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v2 = a1[14];
  v1 = a1[15];
  v3 = a1[10];
  v4 = a1[11];
  v5 = v3 * v1 - v2 * v4;
  v7 = a1[8];
  v6 = a1[9];
  v9 = a1[12];
  v8 = a1[13];
  v10 = v1 * v6 - v4 * v8;
  v11 = v2 * v6 - v3 * v8;
  v12 = v1 * v7 - v4 * v9;
  v13 = v2 * v7 - v3 * v9;
  v14 = v8 * v7 - v6 * v9;
  v16 = a1[4];
  v15 = a1[5];
  v17 = a1[6];
  return (v14 * a1[7] + v10 * v16 - v15 * v12) * a1[2]
       + (v5 * v15 - v10 * v17 + v11 * a1[7]) * *a1
       - a1[1] * (v13 * a1[7] + v5 * v16 - v17 * v12)
       - (v17 * v14 + v11 * v16 - v15 * v13) * a1[3];
}

const PCString *std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(const PCString *a1, PCString *a2)
{
  const PCString *v2;
  PCString *var0;
  const PCString *v5;
  int v6;
  PCString *v7;

  v2 = a1 + 1;
  var0 = (PCString *)a1[1].var0;
  if (!var0)
    return v2;
  v5 = a1 + 1;
  do
  {
    v6 = PCString::compare(var0 + 4, a2);
    v7 = var0 + 1;
    if (v6 >= 0)
    {
      v7 = var0;
      v5 = var0;
    }
    var0 = (PCString *)v7->var0;
  }
  while (v7->var0);
  if (v5 == v2 || (PCString::compare(a2, v5 + 4) & 0x80000000) != 0)
    return v2;
  return v5;
}

uint64_t *std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(PCString *a1, PCString *this, uint64_t a3, const PCString **a4)
{
  const PCString *v6;
  uint64_t *var0;
  uint64_t **v8;
  uint64_t *v10[3];
  const PCString *v11;

  v6 = std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__find_equal<PCString>(a1, &v11, this);
  var0 = (uint64_t *)v6->var0;
  if (!v6->var0)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v11, v8, v10[0]);
    var0 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return var0;
}

const PCString *std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__find_equal<PCString>(const PCString *a1, const PCString **a2, PCString *this)
{
  const PCString *var0;
  const PCString *v5;
  const PCString *v7;
  PCString *v8;

  v5 = a1 + 1;
  var0 = (const PCString *)a1[1].var0;
  if (var0)
  {
    do
    {
      while (1)
      {
        v7 = var0;
        v8 = (PCString *)&var0[4];
        if ((PCString::compare(this, var0 + 4) & 0x80000000) == 0)
          break;
        var0 = (const PCString *)v7->var0;
        v5 = v7;
        if (!v7->var0)
          goto LABEL_9;
      }
      if ((PCString::compare(v8, this) & 0x80000000) == 0)
        break;
      v5 = v7 + 1;
      var0 = (const PCString *)v7[1].var0;
    }
    while (var0);
  }
  else
  {
    v7 = a1 + 1;
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(uint64_t a1@<X0>, const PCString **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  PCString *v6;

  v5 = a1 + 8;
  v6 = (PCString *)operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  PCString::PCString(v6 + 4, *a2);
  v6[5].var0 = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B291B210(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  PCString *v2;

  v2 = *(PCString **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      PCString::~PCString(v2 + 4);
    operator delete(v2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int,PCBox<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCBox<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCBox<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *(_OWORD *)(v11 + 72) = xmmword_1B304F270;
    *(_OWORD *)(v11 + 56) = xmmword_1B304F270;
    *(_OWORD *)(v11 + 40) = xmmword_1B304F270;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(uint64_t a1, const PCHash128 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = operator<((const PCHash128 *)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || operator<(a2, (const PCHash128 *)(v5 + 4)))
    return v2;
  return v5;
}

_DWORD *std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  _DWORD *v7;
  uint64_t **v8;
  _DWORD *v9;
  uint64_t v16;

  v6 = (void **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v16, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v9 = *a4;
    v7[8] = **a4;
    v7[9] = v9[1];
    v7[10] = v9[2];
    v7[11] = v9[3];
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *((_OWORD *)v7 + 4) = _Q0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v16, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>(uint64_t a1, _QWORD *a2, const PCHash128 *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  const PCHash128 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (const PCHash128 *)(v4 + 4);
        if (!operator<(a3, (const PCHash128 *)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<CMTime,std::vector<CMTime>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B291B550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<CMTime,std::vector<CMTime>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v4 = v7;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      std::vector<CMTime>::__init_with_size[abi:ne180100]<CMTime*,CMTime*>((_QWORD *)(v4 + 24), *((const void **)v6 + 3), *((_QWORD *)v6 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v6 + 4) - *((_QWORD *)v6 + 3)) >> 3));
      v4 = v12 + 48;
      v12 += 48;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B291B678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CMTime>::__init_with_size[abi:ne180100]<CMTime*,CMTime*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<PCVector3<double>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B291B6E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(_QWORD *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 48;
  }
}

void std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<CMTime,std::vector<CMTime>>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<CMTime,std::vector<CMTime>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t TXTextLayout_Factory::getInstance(TXTextLayout_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextLayout_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextLayout_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout_Factory::_instance;
}

uint64_t TXTextInput_Factory::getInstance(TXTextInput_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextInput_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextInput_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextInput_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextInput_Factory::_instance;
}

uint64_t TXTextBehavior_Factory::getInstance(TXTextBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextBehavior_Factory::_instance;
}

uint64_t TXTextTrackingBehavior_Factory::getInstance(TXTextTrackingBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextTrackingBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextTrackingBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextTrackingBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextTrackingBehavior_Factory::_instance;
}

uint64_t TXTypeOnBehavior_Factory::getInstance(TXTypeOnBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTypeOnBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTypeOnBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTypeOnBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTypeOnBehavior_Factory::_instance;
}

uint64_t TXCrawlLeftBehavior_Factory::getInstance(TXCrawlLeftBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXCrawlLeftBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXCrawlLeftBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXCrawlLeftBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXCrawlLeftBehavior_Factory::_instance;
}

uint64_t TXCrawlRightBehavior_Factory::getInstance(TXCrawlRightBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXCrawlRightBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXCrawlRightBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXCrawlRightBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXCrawlRightBehavior_Factory::_instance;
}

uint64_t TXScrollUpBehavior_Factory::getInstance(TXScrollUpBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXScrollUpBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXScrollUpBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXScrollUpBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXScrollUpBehavior_Factory::_instance;
}

uint64_t TXScrollDownBehavior_Factory::getInstance(TXScrollDownBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXScrollDownBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXScrollDownBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXScrollDownBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXScrollDownBehavior_Factory::_instance;
}

uint64_t TXTextSequenceBehavior_Factory::getInstance(TXTextSequenceBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextSequenceBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextSequenceBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextSequenceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextSequenceBehavior_Factory::_instance;
}

uint64_t TXSequenceBehavior_Factory::getInstance(TXSequenceBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXSequenceBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXSequenceBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceBehavior_Factory::_instance;
}

uint64_t TXTextScrollBehavior_Factory::getInstance(TXTextScrollBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextScrollBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextScrollBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextScrollBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextScrollBehavior_Factory::_instance;
}

uint64_t TXTextStyle_Factory::getInstance(TXTextStyle_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle_Factory::_instance;
}

_QWORD *TXNumberGenerator_Factory::getInstance(TXNumberGenerator_Factory *this)
{
  _QWORD *v1;
  __int128 v3;
  __int128 v4;

  v1 = (_QWORD *)TXNumberGenerator_Factory::_instance;
  if (!TXNumberGenerator_Factory::_instance)
  {
    v1 = (_QWORD *)operator new();
    v3 = xmmword_1B3054200;
    v4 = xmmword_1B3054B80;
    OZFactory::OZFactory((uint64_t)v1, &v4, &v3, 0);
    *v1 = &unk_1E64FD890;
    TXNumberGenerator_Factory::_instance = (uint64_t)v1;
  }
  return v1;
}

void sub_1B291BF80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40668DDC76);
  _Unwind_Resume(a1);
}

_QWORD *TXTimecodeGenerator_Factory::getInstance(TXTimecodeGenerator_Factory *this)
{
  _QWORD *v1;
  __int128 v3;
  __int128 v4;

  v1 = (_QWORD *)TXTimecodeGenerator_Factory::_instance;
  if (!TXTimecodeGenerator_Factory::_instance)
  {
    v1 = (_QWORD *)operator new();
    v3 = xmmword_1B3054200;
    v4 = xmmword_1B3054B90;
    OZFactory::OZFactory((uint64_t)v1, &v4, &v3, 0);
    *v1 = &unk_1E64FD998;
    TXTimecodeGenerator_Factory::_instance = (uint64_t)v1;
  }
  return v1;
}

void sub_1B291C02C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40668DDC76);
  _Unwind_Resume(a1);
}

_QWORD *TXTimeDateGenerator_Factory::getInstance(TXTimeDateGenerator_Factory *this)
{
  _QWORD *v1;
  __int128 v3;
  __int128 v4;

  v1 = (_QWORD *)TXTimeDateGenerator_Factory::_instance;
  if (!TXTimeDateGenerator_Factory::_instance)
  {
    v1 = (_QWORD *)operator new();
    v3 = xmmword_1B3054200;
    v4 = xmmword_1B3054BA0;
    OZFactory::OZFactory((uint64_t)v1, &v4, &v3, 0);
    *v1 = &unk_1E64FDA88;
    TXTimeDateGenerator_Factory::_instance = (uint64_t)v1;
  }
  return v1;
}

void sub_1B291C0D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40668DDC76);
  _Unwind_Resume(a1);
}

_QWORD *TXTextFromFileGenerator_Factory::getInstance(TXTextFromFileGenerator_Factory *this)
{
  _QWORD *v1;
  __int128 v3;
  __int128 v4;

  v1 = (_QWORD *)TXTextFromFileGenerator_Factory::_instance;
  if (!TXTextFromFileGenerator_Factory::_instance)
  {
    v1 = (_QWORD *)operator new();
    v3 = xmmword_1B3054200;
    v4 = xmmword_1B3054BB0;
    OZFactory::OZFactory((uint64_t)v1, &v4, &v3, 0);
    *v1 = &unk_1E64FDB78;
    TXTextFromFileGenerator_Factory::_instance = (uint64_t)v1;
  }
  return v1;
}

void sub_1B291C184(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40668DDC76);
  _Unwind_Resume(a1);
}

_QWORD *TXTranscriptionGenerator_Factory::getInstance(TXTranscriptionGenerator_Factory *this)
{
  _QWORD *v1;
  __int128 v3;
  __int128 v4;

  v1 = (_QWORD *)TXTranscriptionGenerator_Factory::_instance;
  if (!TXTranscriptionGenerator_Factory::_instance)
  {
    v1 = (_QWORD *)operator new();
    v3 = xmmword_1B3054200;
    v4 = xmmword_1B30541F0;
    OZFactory::OZFactory((uint64_t)v1, &v4, &v3, 0);
    *v1 = &unk_1E64FDC68;
    TXTranscriptionGenerator_Factory::_instance = (uint64_t)v1;
  }
  return v1;
}

void sub_1B291C230(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40668DDC76);
  _Unwind_Resume(a1);
}

_QWORD *TXTextGenerator_Factory::getInstance(TXTextGenerator_Factory *this)
{
  _QWORD *v1;
  __int128 v3;
  __int128 v4;

  v1 = (_QWORD *)TXTextGenerator_Factory::_instance;
  if (!TXTextGenerator_Factory::_instance)
  {
    v1 = (_QWORD *)operator new();
    v3 = xmmword_1B30541C0;
    v4 = xmmword_1B3054200;
    OZFactory::OZFactory((uint64_t)v1, &v4, &v3, 1);
    *v1 = &unk_1E64FDD58;
    TXTextGenerator_Factory::_instance = (uint64_t)v1;
  }
  return v1;
}

void sub_1B291C2DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40668DDC76);
  _Unwind_Resume(a1);
}

uint64_t TXChannelString_Factory::getInstance(TXChannelString_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXChannelString_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXChannelString_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXChannelString_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXChannelString_Factory::_instance;
}

uint64_t TXChannelFont_Factory::getInstance(TXChannelFont_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXChannelFont_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXChannelFont_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXChannelFont_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXChannelFont_Factory::_instance;
}

uint64_t TXChannelAlignment_Factory::getInstance(TXChannelAlignment_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXChannelAlignment_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXChannelAlignment_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXChannelAlignment_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXChannelAlignment_Factory::_instance;
}

void std::__call_once_param<std::tuple<TXTextLayout_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextLayout_Factory *v0;

  v0 = (TXTextLayout_Factory *)operator new();
  TXTextLayout_Factory::TXTextLayout_Factory(v0);
  TXTextLayout_Factory::_instance = (uint64_t)v0;
}

void sub_1B291C498(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void TXTextLayout_Factory::TXTextLayout_Factory(TXTextLayout_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BC0;
  v4 = xmmword_1B30541C0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E64FC568;
  *((_QWORD *)this + 16) = &unk_1E64FC638;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B291C538(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXTextLayout_Factory::~TXTextLayout_Factory(TXTextLayout_Factory *this)
{
  TXTextLayout_Factory::~TXTextLayout_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E64FC568;
  *((_QWORD *)this + 16) = &unk_1E64FC638;
  v2 = (TXTextLayout_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *TXTextLayout_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  TXTextLayout *v6;
  const PCString *v7;
  uint64_t v8;
  uint64_t v9;
  OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  const PCString *v13;
  char v15;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (TXTextLayout *)operator new();
    TXTextLayout::TXTextLayout(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(_QWORD *))(*((_QWORD *)v6 + 25) + 88))((_QWORD *)v6 + 25);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v15, (const PCString *)CFSTR("Motion Effect"));
  v8 = *((_QWORD *)this + 17);
  if (v8)
    v9 = v8 + 200;
  else
    v9 = 0;
  v10 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, uint64_t, uint64_t))(*(_QWORD *)this + 24))(this, v9, 40);
  v11 = v10;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v10);
  OZChannelBase::setID((OZChannelBase *)&v11->var7, NextUniqueID);
  v12 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v11->var0 + 80))(v11);
  OZChannelBase::setName(v12, a2, 0);
  (*((void (**)(OZChannelBase *))v11->var0 + 115))(v11);
  OZChannelBase::setRangeName((OZChannelBase *)&v15, v13);
  return v11;
}

void sub_1B291C6C4(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C4058E05BFCLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

_QWORD *TXTextLayout_Factory::createCopy(TXTextLayout_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  TXTextLayout *v5;
  const TXTextLayout *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (TXTextLayout *)operator new();
  TXTextLayout::TXTextLayout(v5, v6, a3);
  if (a2)
  else
    v7 = 0;
  v9 = *((_QWORD *)v5 + 25);
  v8 = (_QWORD *)((char *)v5 + 200);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 208))(v8, (uint64_t)v7 + 200, a3);
  return v8;
}

void sub_1B291C7B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4058E05BFCLL);
  _Unwind_Resume(a1);
}

void TXTextLayout_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Short Desc", "com.apple.ozone.framework");
}

PCString *TXTextLayout_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Short Desc");
}

PCString *TXTextLayout_Factory::manufacturer@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Apple");
}

const char *TXTextLayout_Factory::getBundleID(TXTextLayout_Factory *this)
{
  return "com.apple.ozone.framework";
}

PCString *TXTextLayout_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Text");
}

PCString *TXTextLayout_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Text");
}

uint64_t TXTextLayout_Factory::getIconIDInternal(TXTextLayout_Factory *this)
{
  return 2;
}

PCString *TXTextLayout_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "");
}

uint64_t TXTextLayout_Factory::createNodeCopy(TXTextLayout_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  TXTextLayout *v5;
  const TXTextLayout *v6;

  v5 = (TXTextLayout *)operator new();
  TXTextLayout::TXTextLayout(v5, v6, a3);
  return (uint64_t)v5 + 200;
}

void sub_1B291C8CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4058E05BFCLL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextLayout_Factory::~TXTextLayout_Factory(TXTextLayout_Factory *this)
{
  TXTextLayout_Factory::~TXTextLayout_Factory((TXTextLayout_Factory *)((char *)this - 128));
}

{
  TXTextLayout_Factory::~TXTextLayout_Factory((TXTextLayout_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<TXTextInput_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextInput_Factory *v0;

  v0 = (TXTextInput_Factory *)operator new();
  TXTextInput_Factory::TXTextInput_Factory(v0);
  TXTextInput_Factory::_instance = (uint64_t)v0;
}

void sub_1B291C9C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void TXTextInput_Factory::TXTextInput_Factory(TXTextInput_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B30541C0;
  v4 = xmmword_1B3053B10;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E64FC778;
  *((_QWORD *)this + 16) = &unk_1E64FC848;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B291CA64(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXTextInput_Factory::~TXTextInput_Factory(TXTextInput_Factory *this)
{
  TXTextInput_Factory::~TXTextInput_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E64FC778;
  *((_QWORD *)this + 16) = &unk_1E64FC848;
  v2 = (TXTextInput_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *TXTextInput_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  TXTextInput *v6;
  const PCString *v7;
  uint64_t v8;
  uint64_t v9;
  OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  const PCString *v13;
  char v15;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (TXTextInput *)operator new();
    TXTextInput::TXTextInput(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(_QWORD *))(*((_QWORD *)v6 + 25) + 88))((_QWORD *)v6 + 25);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v15, (const PCString *)CFSTR("Motion Effect"));
  v8 = *((_QWORD *)this + 17);
  if (v8)
    v9 = v8 + 200;
  else
    v9 = 0;
  v10 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, uint64_t, uint64_t))(*(_QWORD *)this + 24))(this, v9, 40);
  v11 = v10;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v10);
  OZChannelBase::setID((OZChannelBase *)&v11->var7, NextUniqueID);
  v12 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v11->var0 + 80))(v11);
  OZChannelBase::setName(v12, a2, 0);
  (*((void (**)(OZChannelBase *))v11->var0 + 115))(v11);
  OZChannelBase::setRangeName((OZChannelBase *)&v15, v13);
  return v11;
}

void sub_1B291CBF0(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C404D45619FLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

_QWORD *TXTextInput_Factory::createCopy(TXTextInput_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  TXTextInput *v5;
  const TXTextInput *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (TXTextInput *)operator new();
  TXTextInput::TXTextInput(v5, v6, a3);
  if (a2)
  else
    v7 = 0;
  v9 = *((_QWORD *)v5 + 25);
  v8 = (_QWORD *)((char *)v5 + 200);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 208))(v8, (uint64_t)v7 + 200, a3);
  return v8;
}

void sub_1B291CCE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404D45619FLL);
  _Unwind_Resume(a1);
}

uint64_t TXTextInput_Factory::createNodeCopy(TXTextInput_Factory *this, OZSceneNode *a2, uint64_t a3)
{
  TXTextInput *v5;
  const TXTextInput *v6;

  v5 = (TXTextInput *)operator new();
  TXTextInput::TXTextInput(v5, v6, a3);
  return (uint64_t)v5 + 200;
}

void sub_1B291CD7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404D45619FLL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextInput_Factory::~TXTextInput_Factory(TXTextInput_Factory *this)
{
  TXTextInput_Factory::~TXTextInput_Factory((TXTextInput_Factory *)((char *)this - 128));
}

{
  TXTextInput_Factory::~TXTextInput_Factory((TXTextInput_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<TXTextBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextBehavior_Factory *v0;

  v0 = (TXTextBehavior_Factory *)operator new();
  TXTextBehavior_Factory::TXTextBehavior_Factory(v0);
  TXTextBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B291CE74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void TXTextBehavior_Factory::TXTextBehavior_Factory(TXTextBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3054BD0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 128), 0);
  *(_QWORD *)this = &unk_1E64FC8A0;
  *((_QWORD *)this + 16) = &unk_1E64FC958;
}

void sub_1B291CF08(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PCString *TXTextBehavior_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-MissingObject");
}

PCString *TXTextBehavior_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-MissingObject");
}

uint64_t TXTextBehavior_Factory::getIconIDInternal(TXTextBehavior_Factory *this)
{
  return 18;
}

void std::__call_once_param<std::tuple<TXTextTrackingBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextTrackingBehavior_Factory *v0;

  v0 = (TXTextTrackingBehavior_Factory *)operator new();
  TXTextTrackingBehavior_Factory::TXTextTrackingBehavior_Factory(v0);
  TXTextTrackingBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B291CF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior_Factory::TXTextTrackingBehavior_Factory(TXTextTrackingBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BD0;
  v4 = xmmword_1B3054BF0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B30541C0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E64FC9B0;
  *((_QWORD *)this + 18) = &unk_1E64FCA90;
}

void sub_1B291D03C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior_Factory::~TXTextTrackingBehavior_Factory(TXTextTrackingBehavior_Factory *this)
{
  PCSingleton::~PCSingleton((TXTextTrackingBehavior_Factory *)((char *)this + 144));
  OZFactory::~OZFactory((OZFactory *)this);
}

{
  PCSingleton::~PCSingleton((TXTextTrackingBehavior_Factory *)((char *)this + 144));
  OZFactory::~OZFactory((OZFactory *)this);
  JUMPOUT(0x1B5E29170);
}

TXTextTrackingBehavior *TXTextTrackingBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXTextTrackingBehavior *v6;

  v6 = (TXTextTrackingBehavior *)operator new();
  TXTextTrackingBehavior::TXTextTrackingBehavior(v6, this, a2, a3);
  (*(void (**)(TXTextTrackingBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B291D120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C404834D347);
  _Unwind_Resume(a1);
}

TXTextTrackingBehavior *TXTextTrackingBehavior_Factory::createCopy(TXTextTrackingBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  TXTextTrackingBehavior *v5;
  const TXTextTrackingBehavior *v6;

  v5 = (TXTextTrackingBehavior *)operator new();
  TXTextTrackingBehavior::TXTextTrackingBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291D1B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C404834D347);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Tracking Behavior", "com.apple.ozone.framework");
}

PCString *TXTextTrackingBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Tracking Behavior");
}

void TXTextTrackingBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Animation Behavior Category", "com.apple.ozone.framework");
}

PCString *TXTextTrackingBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Animation");
}

PCString *TXTextTrackingBehavior_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-TextBehavior");
}

PCString *TXTextTrackingBehavior_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-TextBehavior");
}

uint64_t TXTextTrackingBehavior_Factory::getIconIDInternal(TXTextTrackingBehavior_Factory *this)
{
  return 12;
}

PCString *TXTextTrackingBehavior_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_TextBehavior_Icon");
}

TXTextTrackingBehavior *TXTextTrackingBehavior_Factory::createBehaviorCopy(TXTextTrackingBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  TXTextTrackingBehavior *v5;
  const TXTextTrackingBehavior *v6;

  v5 = (TXTextTrackingBehavior *)operator new();
  TXTextTrackingBehavior::TXTextTrackingBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291D2D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C404834D347);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Tracking Behavior Desc", "com.apple.ozone.framework");
}

void `non-virtual thunk to'TXTextTrackingBehavior_Factory::~TXTextTrackingBehavior_Factory(TXTextTrackingBehavior_Factory *this)
{
  OZFactory *v1;

  v1 = (OZFactory *)((char *)this - 144);
  PCSingleton::~PCSingleton(this);
  OZFactory::~OZFactory(v1);
}

{
  TXTextTrackingBehavior_Factory::~TXTextTrackingBehavior_Factory((TXTextTrackingBehavior_Factory *)((char *)this - 144));
}

void std::__call_once_param<std::tuple<TXTypeOnBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTypeOnBehavior_Factory *v0;

  v0 = (TXTypeOnBehavior_Factory *)operator new();
  TXTypeOnBehavior_Factory::TXTypeOnBehavior_Factory(v0);
  TXTypeOnBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B291D388(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXTypeOnBehavior_Factory::TXTypeOnBehavior_Factory(TXTypeOnBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BD0;
  v4 = xmmword_1B3054C00;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B30541C0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E64FCBE0;
  *((_QWORD *)this + 18) = &unk_1E64FCCC0;
}

void sub_1B291D438(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

TXTypeOnBehavior *TXTypeOnBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXTypeOnBehavior *v6;

  v6 = (TXTypeOnBehavior *)operator new();
  TXTypeOnBehavior::TXTypeOnBehavior(v6, this, a2, a3);
  (*(void (**)(TXTypeOnBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B291D4B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E7221E5ELL);
  _Unwind_Resume(a1);
}

TXTypeOnBehavior *TXTypeOnBehavior_Factory::createCopy(TXTypeOnBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  TXTypeOnBehavior *v5;
  const TXTypeOnBehavior *v6;

  v5 = (TXTypeOnBehavior *)operator new();
  TXTypeOnBehavior::TXTypeOnBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291D550(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E7221E5ELL);
  _Unwind_Resume(a1);
}

void TXTypeOnBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Type On Behavior", "com.apple.ozone.framework");
}

PCString *TXTypeOnBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Type On Behavior");
}

TXTypeOnBehavior *TXTypeOnBehavior_Factory::createBehaviorCopy(TXTypeOnBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  TXTypeOnBehavior *v5;
  const TXTypeOnBehavior *v6;

  v5 = (TXTypeOnBehavior *)operator new();
  TXTypeOnBehavior::TXTypeOnBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291D610(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E7221E5ELL);
  _Unwind_Resume(a1);
}

void TXTypeOnBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Type On Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<TXCrawlLeftBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXCrawlLeftBehavior_Factory *v0;

  v0 = (TXCrawlLeftBehavior_Factory *)operator new();
  TXCrawlLeftBehavior_Factory::TXCrawlLeftBehavior_Factory(v0);
  TXCrawlLeftBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B291D694(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXCrawlLeftBehavior_Factory::TXCrawlLeftBehavior_Factory(TXCrawlLeftBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BD0;
  v4 = xmmword_1B3054C10;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B30541C0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E64FCD18;
  *((_QWORD *)this + 18) = &unk_1E64FCDF8;
}

void sub_1B291D744(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

TXCrawlLeftBehavior *TXCrawlLeftBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXCrawlLeftBehavior *v6;

  v6 = (TXCrawlLeftBehavior *)operator new();
  TXCrawlLeftBehavior::TXCrawlLeftBehavior(v6, this, a2, a3);
  (*(void (**)(TXCrawlLeftBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B291D7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

TXCrawlLeftBehavior *TXCrawlLeftBehavior_Factory::createCopy(TXCrawlLeftBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  TXCrawlLeftBehavior *v5;
  const TXCrawlLeftBehavior *v6;

  v5 = (TXCrawlLeftBehavior *)operator new();
  TXCrawlLeftBehavior::TXCrawlLeftBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291D85C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXCrawlLeftBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Crawl Left Behavior", "com.apple.ozone.framework");
}

PCString *TXCrawlLeftBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Crawl Left Behavior");
}

TXCrawlLeftBehavior *TXCrawlLeftBehavior_Factory::createBehaviorCopy(TXCrawlLeftBehavior_Factory *this, OZBehavior *a2, char a3)
{
  TXCrawlLeftBehavior *v5;
  const TXCrawlLeftBehavior *v6;

  v5 = (TXCrawlLeftBehavior *)operator new();
  TXCrawlLeftBehavior::TXCrawlLeftBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291D91C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXCrawlLeftBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Crawl Left Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<TXCrawlRightBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXCrawlRightBehavior_Factory *v0;

  v0 = (TXCrawlRightBehavior_Factory *)operator new();
  TXCrawlRightBehavior_Factory::TXCrawlRightBehavior_Factory(v0);
  TXCrawlRightBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B291D9A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXCrawlRightBehavior_Factory::TXCrawlRightBehavior_Factory(TXCrawlRightBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BD0;
  v4 = xmmword_1B3054C20;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B30541C0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E64FCE50;
  *((_QWORD *)this + 18) = &unk_1E64FCF30;
}

void sub_1B291DA50(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

TXCrawlRightBehavior *TXCrawlRightBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXCrawlRightBehavior *v6;

  v6 = (TXCrawlRightBehavior *)operator new();
  TXCrawlRightBehavior::TXCrawlRightBehavior(v6, this, a2, a3);
  (*(void (**)(TXCrawlRightBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B291DAD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

TXCrawlRightBehavior *TXCrawlRightBehavior_Factory::createCopy(TXCrawlRightBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  TXCrawlRightBehavior *v5;
  const TXCrawlRightBehavior *v6;

  v5 = (TXCrawlRightBehavior *)operator new();
  TXCrawlRightBehavior::TXCrawlRightBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291DB68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXCrawlRightBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Crawl Right Behavior", "com.apple.ozone.framework");
}

PCString *TXCrawlRightBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Crawl Right Behavior");
}

TXCrawlRightBehavior *TXCrawlRightBehavior_Factory::createBehaviorCopy(TXCrawlRightBehavior_Factory *this, OZBehavior *a2, char a3)
{
  TXCrawlRightBehavior *v5;
  const TXCrawlRightBehavior *v6;

  v5 = (TXCrawlRightBehavior *)operator new();
  TXCrawlRightBehavior::TXCrawlRightBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291DC28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXCrawlRightBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Crawl Right Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<TXScrollUpBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXScrollUpBehavior_Factory *v0;

  v0 = (TXScrollUpBehavior_Factory *)operator new();
  TXScrollUpBehavior_Factory::TXScrollUpBehavior_Factory(v0);
  TXScrollUpBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B291DCAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXScrollUpBehavior_Factory::TXScrollUpBehavior_Factory(TXScrollUpBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BD0;
  v4 = xmmword_1B3054C30;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B30541C0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E64FCF88;
  *((_QWORD *)this + 18) = &unk_1E64FD068;
}

void sub_1B291DD5C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

TXScrollUpBehavior *TXScrollUpBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXScrollUpBehavior *v6;

  v6 = (TXScrollUpBehavior *)operator new();
  TXScrollUpBehavior::TXScrollUpBehavior(v6, this, a2, a3);
  (*(void (**)(TXScrollUpBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B291DDDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

TXScrollUpBehavior *TXScrollUpBehavior_Factory::createCopy(TXScrollUpBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  TXScrollUpBehavior *v5;
  const TXScrollUpBehavior *v6;

  v5 = (TXScrollUpBehavior *)operator new();
  TXScrollUpBehavior::TXScrollUpBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291DE74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXScrollUpBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Scroll Up Behavior", "com.apple.ozone.framework");
}

PCString *TXScrollUpBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Scroll Up Behavior");
}

TXScrollUpBehavior *TXScrollUpBehavior_Factory::createBehaviorCopy(TXScrollUpBehavior_Factory *this, OZBehavior *a2, char a3)
{
  TXScrollUpBehavior *v5;
  const TXScrollUpBehavior *v6;

  v5 = (TXScrollUpBehavior *)operator new();
  TXScrollUpBehavior::TXScrollUpBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291DF34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXScrollUpBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Scroll Up Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<TXScrollDownBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXScrollDownBehavior_Factory *v0;

  v0 = (TXScrollDownBehavior_Factory *)operator new();
  TXScrollDownBehavior_Factory::TXScrollDownBehavior_Factory(v0);
  TXScrollDownBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B291DFB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXScrollDownBehavior_Factory::TXScrollDownBehavior_Factory(TXScrollDownBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BD0;
  v4 = xmmword_1B3054C40;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B30541C0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E64FD0C0;
  *((_QWORD *)this + 18) = &unk_1E64FD1A0;
}

void sub_1B291E068(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

TXScrollDownBehavior *TXScrollDownBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXScrollDownBehavior *v6;

  v6 = (TXScrollDownBehavior *)operator new();
  TXScrollDownBehavior::TXScrollDownBehavior(v6, this, a2, a3);
  (*(void (**)(TXScrollDownBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B291E0E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

TXScrollDownBehavior *TXScrollDownBehavior_Factory::createCopy(TXScrollDownBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  TXScrollDownBehavior *v5;
  const TXScrollDownBehavior *v6;

  v5 = (TXScrollDownBehavior *)operator new();
  TXScrollDownBehavior::TXScrollDownBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291E180(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXScrollDownBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Scroll Down Behavior", "com.apple.ozone.framework");
}

PCString *TXScrollDownBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Scroll Down Behavior");
}

TXScrollDownBehavior *TXScrollDownBehavior_Factory::createBehaviorCopy(TXScrollDownBehavior_Factory *this, OZBehavior *a2, char a3)
{
  TXScrollDownBehavior *v5;
  const TXScrollDownBehavior *v6;

  v5 = (TXScrollDownBehavior *)operator new();
  TXScrollDownBehavior::TXScrollDownBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291E240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXScrollDownBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Scroll Down Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<TXTextSequenceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextSequenceBehavior_Factory *v0;

  v0 = (TXTextSequenceBehavior_Factory *)operator new();
  TXTextSequenceBehavior_Factory::TXTextSequenceBehavior_Factory(v0);
  TXTextSequenceBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B291E2C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXTextSequenceBehavior_Factory::TXTextSequenceBehavior_Factory(TXTextSequenceBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BD0;
  v4 = xmmword_1B3054240;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E64FD1F8;
  *((_QWORD *)this + 18) = &unk_1E64FD2D8;
}

void sub_1B291E368(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

TXTextSequenceBehavior *TXTextSequenceBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXTextSequenceBehavior *v6;

  v6 = (TXTextSequenceBehavior *)operator new();
  TXTextSequenceBehavior::TXTextSequenceBehavior(v6, this, a2, a3);
  (*(void (**)(TXTextSequenceBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B291E3E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40D1460FDBLL);
  _Unwind_Resume(a1);
}

TXTextSequenceBehavior *TXTextSequenceBehavior_Factory::createCopy(TXTextSequenceBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  TXTextSequenceBehavior *v5;
  const TXTextSequenceBehavior *v6;

  v5 = (TXTextSequenceBehavior *)operator new();
  TXTextSequenceBehavior::TXTextSequenceBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291E480(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40D1460FDBLL);
  _Unwind_Resume(a1);
}

void TXTextSequenceBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Sequence Behavior Old", "com.apple.ozone.framework");
}

PCString *TXTextSequenceBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Sequence Behavior Old");
}

TXTextSequenceBehavior *TXTextSequenceBehavior_Factory::createBehaviorCopy(TXTextSequenceBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  TXTextSequenceBehavior *v5;
  const TXTextSequenceBehavior *v6;

  v5 = (TXTextSequenceBehavior *)operator new();
  TXTextSequenceBehavior::TXTextSequenceBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291E540(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40D1460FDBLL);
  _Unwind_Resume(a1);
}

void TXTextSequenceBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Sequence Behavior Desc", "com.apple.ozone.framework");
}

BOOL OZChannelBehaviorFactory::canApplyToChannel(OZChannelBehaviorFactory *this, OZChannelBase *a2)
{
  return !OZChannelBase::testFlag(a2, 256);
}

void std::__call_once_param<std::tuple<TXSequenceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXSequenceBehavior_Factory *v0;

  v0 = (TXSequenceBehavior_Factory *)operator new();
  TXSequenceBehavior_Factory::TXSequenceBehavior_Factory(v0);
  TXSequenceBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B291E5E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior_Factory::TXSequenceBehavior_Factory(TXSequenceBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BD0;
  v4 = xmmword_1B30541D0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E64FD428;
  *((_QWORD *)this + 18) = &unk_1E64FD508;
}

void sub_1B291E688(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

TXSequenceBehavior *TXSequenceBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXSequenceBehavior *v6;

  v6 = (TXSequenceBehavior *)operator new();
  TXSequenceBehavior::TXSequenceBehavior(v6, this, a2, a3);
  (*(void (**)(TXSequenceBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B291E708(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C400D1D3198);
  _Unwind_Resume(a1);
}

TXSequenceBehavior *TXSequenceBehavior_Factory::createCopy(TXSequenceBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  TXSequenceBehavior *v5;
  const TXSequenceBehavior *v6;

  v5 = (TXSequenceBehavior *)operator new();
  TXSequenceBehavior::TXSequenceBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291E7A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C400D1D3198);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Sequence Behavior", "com.apple.ozone.framework");
}

PCString *TXSequenceBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Sequence Behavior");
}

TXSequenceBehavior *TXSequenceBehavior_Factory::createBehaviorCopy(TXSequenceBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  TXSequenceBehavior *v5;
  const TXSequenceBehavior *v6;

  v5 = (TXSequenceBehavior *)operator new();
  TXSequenceBehavior::TXSequenceBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291E860(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C400D1D3198);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<TXTextScrollBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextScrollBehavior_Factory *v0;

  v0 = (TXTextScrollBehavior_Factory *)operator new();
  TXTextScrollBehavior_Factory::TXTextScrollBehavior_Factory(v0);
  TXTextScrollBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B291E8CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXTextScrollBehavior_Factory::TXTextScrollBehavior_Factory(TXTextScrollBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3054C50;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E64FD560;
  *((_QWORD *)this + 18) = &unk_1E64FD640;
}

void sub_1B291E97C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

TXTextScrollBehavior *TXTextScrollBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXTextScrollBehavior *v6;

  v6 = (TXTextScrollBehavior *)operator new();
  TXTextScrollBehavior::TXTextScrollBehavior(v6, this, a2, a3);
  (*(void (**)(TXTextScrollBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B291E9FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408C491C18);
  _Unwind_Resume(a1);
}

TXTextScrollBehavior *TXTextScrollBehavior_Factory::createCopy(TXTextScrollBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  TXTextScrollBehavior *v5;
  const TXTextScrollBehavior *v6;

  v5 = (TXTextScrollBehavior *)operator new();
  TXTextScrollBehavior::TXTextScrollBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291EA94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408C491C18);
  _Unwind_Resume(a1);
}

void TXTextScrollBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Credit Scroll Behavior", "com.apple.ozone.framework");
}

PCString *TXTextScrollBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Credit Scroll Behavior");
}

PCString *TXTextScrollBehavior_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Behavior");
}

PCString *TXTextScrollBehavior_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Behavior");
}

uint64_t TXTextScrollBehavior_Factory::getIconIDInternal(TXTextScrollBehavior_Factory *this)
{
  return 10;
}

TXTextScrollBehavior *TXTextScrollBehavior_Factory::createBehaviorCopy(TXTextScrollBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  TXTextScrollBehavior *v5;
  const TXTextScrollBehavior *v6;

  v5 = (TXTextScrollBehavior *)operator new();
  TXTextScrollBehavior::TXTextScrollBehavior(v5, v6, a3);
  return v5;
}

void sub_1B291EB7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408C491C18);
  _Unwind_Resume(a1);
}

void TXTextScrollBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Credit Scroll Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<TXTextStyle_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle_Factory *v0;

  v0 = (TXTextStyle_Factory *)operator new();
  TXTextStyle_Factory::TXTextStyle_Factory(v0);
  TXTextStyle_Factory::_instance = (uint64_t)v0;
}

void sub_1B291EC00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void TXTextStyle_Factory::TXTextStyle_Factory(TXTextStyle_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054C70;
  v4 = xmmword_1B3054220;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FD7C0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E64FD698;
  *((_QWORD *)this + 16) = &unk_1E64FD768;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B291ECA0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXTextStyle_Factory::~TXTextStyle_Factory(TXTextStyle_Factory *this)
{
  TXTextStyle_Factory::~TXTextStyle_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E64FD698;
  *((_QWORD *)this + 16) = &unk_1E64FD768;
  v2 = (TXTextStyle_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *TXTextStyle_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  TXTextStyle *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (TXTextStyle *)operator new();
    TXTextStyle::TXTextStyle(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(TXTextStyle *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var9, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 14))(v9);
  OZChannelBase::setName(v10, a2, 0);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B291EE10(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C4053870830, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

TXTextStyle *TXTextStyle_Factory::createCopy(TXTextStyle_Factory *this, OZFactoryBase *a2, char a3)
{
  TXTextStyle *v5;
  OZSceneNode **v6;

  v5 = (TXTextStyle *)operator new();
  TXTextStyle::TXTextStyle(v5, v6, a3);
  return v5;
}

void sub_1B291EEC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4053870830);
  _Unwind_Resume(a1);
}

void TXTextStyle_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Style Name", "com.apple.ozone.framework");
}

PCString *TXTextStyle_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Style Name");
}

PCString *TXTextStyle_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_TextStyle_Icon");
}

TXTextStyle *TXTextStyle_Factory::createStyleCopy(TXTextStyle_Factory *this, OZStyle *a2, char a3)
{
  TXTextStyle *v5;
  OZSceneNode **v6;

  v5 = (TXTextStyle *)operator new();
  TXTextStyle::TXTextStyle(v5, v6, a3);
  return v5;
}

void sub_1B291EF94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4053870830);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextStyle_Factory::~TXTextStyle_Factory(TXTextStyle_Factory *this)
{
  TXTextStyle_Factory::~TXTextStyle_Factory((TXTextStyle_Factory *)((char *)this - 128));
}

{
  TXTextStyle_Factory::~TXTextStyle_Factory((TXTextStyle_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void TXNumberGenerator_Factory::~TXNumberGenerator_Factory(OZFactory *this)
{
  OZFactory::~OZFactory(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t TXNumberGenerator_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXNumberGenerator *v6;

  v6 = (TXNumberGenerator *)operator new();
  TXNumberGenerator::TXNumberGenerator(v6, this, a2, a3);
  return (uint64_t)v6 + 200;
}

void sub_1B291F0CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405BEC22D4);
  _Unwind_Resume(a1);
}

_QWORD *TXNumberGenerator_Factory::createCopy(TXNumberGenerator_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  TXNumberGenerator *v5;
  const TXNumberGenerator *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (TXNumberGenerator *)operator new();
  TXNumberGenerator::TXNumberGenerator(v5, v6, a3);
  if (a2)
  else
    v7 = 0;
  v9 = *((_QWORD *)v5 + 25);
  v8 = (_QWORD *)((char *)v5 + 200);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 208))(v8, (uint64_t)v7 + 200, a3);
  return v8;
}

void sub_1B291F1A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405BEC22D4);
  _Unwind_Resume(a1);
}

void TXNumberGenerator_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Number Generator", "com.apple.ozone.framework");
}

PCString *TXNumberGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Number Generator");
}

void TXNumberGenerator_Factory::getCategoryName(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Generator", "com.apple.ozone.framework");
}

PCString *TXNumberGenerator_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Generator");
}

uint64_t TXNumberGenerator_Factory::createNodeCopy(TXNumberGenerator_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  TXNumberGenerator *v5;
  const TXNumberGenerator *v6;

  v5 = (TXNumberGenerator *)operator new();
  TXNumberGenerator::TXNumberGenerator(v5, v6, a3);
  return (uint64_t)v5 + 200;
}

void sub_1B291F294(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405BEC22D4);
  _Unwind_Resume(a1);
}

void TXNumberGenerator_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Number Generator Desc", "com.apple.ozone.framework");
}

uint64_t TXTimecodeGenerator_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXTimecodeGenerator *v6;

  v6 = (TXTimecodeGenerator *)operator new();
  TXTimecodeGenerator::TXTimecodeGenerator(v6, this, a2, a3);
  return (uint64_t)v6 + 200;
}

void sub_1B291F330(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40D8132C04);
  _Unwind_Resume(a1);
}

_QWORD *TXTimecodeGenerator_Factory::createCopy(TXTimecodeGenerator_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  TXTimecodeGenerator *v5;
  const TXTimecodeGenerator *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (TXTimecodeGenerator *)operator new();
  TXTimecodeGenerator::TXTimecodeGenerator(v5, v6, a3);
  if (a2)
  else
    v7 = 0;
  v9 = *((_QWORD *)v5 + 25);
  v8 = (_QWORD *)((char *)v5 + 200);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 208))(v8, (uint64_t)v7 + 200, a3);
  return v8;
}

void sub_1B291F40C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40D8132C04);
  _Unwind_Resume(a1);
}

void TXTimecodeGenerator_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Timecode Generator", "com.apple.ozone.framework");
}

PCString *TXTimecodeGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Timecode Generator");
}

uint64_t TXTimecodeGenerator_Factory::createNodeCopy(TXTimecodeGenerator_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  TXTimecodeGenerator *v5;
  const TXTimecodeGenerator *v6;

  v5 = (TXTimecodeGenerator *)operator new();
  TXTimecodeGenerator::TXTimecodeGenerator(v5, v6, a3);
  return (uint64_t)v5 + 200;
}

void sub_1B291F4D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40D8132C04);
  _Unwind_Resume(a1);
}

void TXTimecodeGenerator_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Timecode Generator Desc", "com.apple.ozone.framework");
}

uint64_t TXTimeDateGenerator_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXTimeDateGenerator *v6;

  v6 = (TXTimeDateGenerator *)operator new();
  TXTimeDateGenerator::TXTimeDateGenerator(v6, this, a2, a3);
  return (uint64_t)v6 + 200;
}

void sub_1B291F56C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C400CF99334);
  _Unwind_Resume(a1);
}

_QWORD *TXTimeDateGenerator_Factory::createCopy(TXTimeDateGenerator_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  TXTimeDateGenerator *v5;
  const TXTimeDateGenerator *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (TXTimeDateGenerator *)operator new();
  TXTimeDateGenerator::TXTimeDateGenerator(v5, v6, a3);
  if (a2)
  else
    v7 = 0;
  v9 = *((_QWORD *)v5 + 25);
  v8 = (_QWORD *)((char *)v5 + 200);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 208))(v8, (uint64_t)v7 + 200, a3);
  return v8;
}

void sub_1B291F648(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C400CF99334);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Time Date Generator", "com.apple.ozone.framework");
}

PCString *TXTimeDateGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Time Date Generator");
}

uint64_t TXTimeDateGenerator_Factory::createNodeCopy(TXTimeDateGenerator_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  TXTimeDateGenerator *v5;
  const TXTimeDateGenerator *v6;

  v5 = (TXTimeDateGenerator *)operator new();
  TXTimeDateGenerator::TXTimeDateGenerator(v5, v6, a3);
  return (uint64_t)v5 + 200;
}

void sub_1B291F70C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C400CF99334);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Time Date Generator Desc", "com.apple.ozone.framework");
}

uint64_t TXTextFromFileGenerator_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXTextFromFileGenerator *v6;

  v6 = (TXTextFromFileGenerator *)operator new();
  TXTextFromFileGenerator::TXTextFromFileGenerator(v6, this, a2, a3);
  return (uint64_t)v6 + 200;
}

void sub_1B291F7A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409D16F43ALL);
  _Unwind_Resume(a1);
}

_QWORD *TXTextFromFileGenerator_Factory::createCopy(TXTextFromFileGenerator_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  TXTextFromFileGenerator *v5;
  const TXTextFromFileGenerator *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (TXTextFromFileGenerator *)operator new();
  TXTextFromFileGenerator::TXTextFromFileGenerator(v5, v6, a3);
  if (a2)
  else
    v7 = 0;
  v9 = *((_QWORD *)v5 + 25);
  v8 = (_QWORD *)((char *)v5 + 200);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 208))(v8, (uint64_t)v7 + 200, a3);
  return v8;
}

void sub_1B291F87C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409D16F43ALL);
  _Unwind_Resume(a1);
}

void TXTextFromFileGenerator_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text From File Generator", "com.apple.ozone.framework");
}

PCString *TXTextFromFileGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text From File Generator");
}

uint64_t TXTextFromFileGenerator_Factory::createNodeCopy(TXTextFromFileGenerator_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  TXTextFromFileGenerator *v5;
  const TXTextFromFileGenerator *v6;

  v5 = (TXTextFromFileGenerator *)operator new();
  TXTextFromFileGenerator::TXTextFromFileGenerator(v5, v6, a3);
  return (uint64_t)v5 + 200;
}

void sub_1B291F93C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409D16F43ALL);
  _Unwind_Resume(a1);
}

void TXTextFromFileGenerator_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text From File Generator Desc", "com.apple.ozone.framework");
}

uint64_t TXTranscriptionGenerator_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXTranscriptionGenerator *v6;

  v6 = (TXTranscriptionGenerator *)operator new();
  TXTranscriptionGenerator::TXTranscriptionGenerator(v6, this, a2, a3);
  return (uint64_t)v6 + 200;
}

void sub_1B291F9D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404F336E0DLL);
  _Unwind_Resume(a1);
}

_QWORD *TXTranscriptionGenerator_Factory::createCopy(TXTranscriptionGenerator_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  TXTranscriptionGenerator *v5;
  const TXTranscriptionGenerator *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (TXTranscriptionGenerator *)operator new();
  TXTranscriptionGenerator::TXTranscriptionGenerator(v5, v6, a3);
  if (a2)
  else
    v7 = 0;
  v9 = *((_QWORD *)v5 + 25);
  v8 = (_QWORD *)((char *)v5 + 200);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 208))(v8, (uint64_t)v7 + 200, a3);
  return v8;
}

void sub_1B291FAB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404F336E0DLL);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Transcription Generator", "com.apple.ozone.framework");
}

PCString *TXTranscriptionGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Transcription Generator");
}

uint64_t TXTranscriptionGenerator_Factory::createNodeCopy(TXTranscriptionGenerator_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  TXTranscriptionGenerator *v5;
  const TXTranscriptionGenerator *v6;

  v5 = (TXTranscriptionGenerator *)operator new();
  TXTranscriptionGenerator::TXTranscriptionGenerator(v5, v6, a3);
  return (uint64_t)v5 + 200;
}

void sub_1B291FB78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404F336E0DLL);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Text Transcription Generator Desc", "com.apple.ozone.framework");
}

uint64_t TXTextGenerator_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXTextGenerator *v6;

  v6 = (TXTextGenerator *)operator new();
  TXTextGenerator::TXTextGenerator(v6, this, a2, a3);
  return (uint64_t)v6 + 200;
}

void sub_1B291FC10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409229C0C3);
  _Unwind_Resume(a1);
}

_QWORD *TXTextGenerator_Factory::createCopy(TXTextGenerator_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  TXTextGenerator *v5;
  const TXTextGenerator *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (TXTextGenerator *)operator new();
  TXTextGenerator::TXTextGenerator(v5, v6, a3);
  if (a2)
  else
    v7 = 0;
  v9 = *((_QWORD *)v5 + 25);
  v8 = (_QWORD *)((char *)v5 + 200);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 208))(v8, (uint64_t)v7 + 200, a3);
  return v8;
}

void sub_1B291FCE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409229C0C3);
  _Unwind_Resume(a1);
}

PCString *TXTextGenerator_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_TextGenerator_Icon");
}

uint64_t TXTextGenerator_Factory::createNodeCopy(TXTextGenerator_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  TXTextGenerator *v5;
  const TXTextGenerator *v6;

  v5 = (TXTextGenerator *)operator new();
  TXTextGenerator::TXTextGenerator(v5, v6, a3);
  return (uint64_t)v5 + 200;
}

void sub_1B291FD90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409229C0C3);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<TXChannelString_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXChannelString_Factory *v0;

  v0 = (TXChannelString_Factory *)operator new();
  TXChannelString_Factory::TXChannelString_Factory(v0);
  TXChannelString_Factory::_instance = (uint64_t)v0;
}

void sub_1B291FDFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void TXChannelString_Factory::TXChannelString_Factory(TXChannelString_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054C90;
  v4 = xmmword_1B3054C80;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E64FDE48;
  *((_QWORD *)this + 16) = &unk_1E64FDF18;
}

void sub_1B291FE9C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

TXChannelString *TXChannelString_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXChannelString *v6;

  v6 = (TXChannelString *)operator new();
  TXChannelString::TXChannelString(v6, this, a2, a3);
  return v6;
}

void sub_1B291FF0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40BB3F29BDLL);
  _Unwind_Resume(a1);
}

TXChannelString *TXChannelString_Factory::createCopy(TXChannelString_Factory *this, OZFactoryBase *a2)
{
  TXChannelString *v3;
  const OZChannelBase *v4;

  v3 = (TXChannelString *)operator new();
  TXChannelString::TXChannelString(v3, v4, 0);
  return v3;
}

void sub_1B291FF98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40BB3F29BDLL);
  _Unwind_Resume(a1);
}

TXChannelString *TXChannelString_Factory::createChannelCopy(TXChannelString_Factory *this, OZChannelBase *a2)
{
  TXChannelString *v3;
  const OZChannelBase *v4;

  v3 = (TXChannelString *)operator new();
  TXChannelString::TXChannelString(v3, v4, 0);
  return v3;
}

void sub_1B2920024(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40BB3F29BDLL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<TXChannelFont_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXChannelFont_Factory *v0;

  v0 = (TXChannelFont_Factory *)operator new();
  TXChannelFont_Factory::TXChannelFont_Factory(v0);
  TXChannelFont_Factory::_instance = (uint64_t)v0;
}

void sub_1B2920090(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void TXChannelFont_Factory::TXChannelFont_Factory(TXChannelFont_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054CB0;
  v4 = xmmword_1B3054CA0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E64FDF70;
  *((_QWORD *)this + 16) = &unk_1E64FE040;
}

void sub_1B2920130(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

TXChannelFont *TXChannelFont_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXChannelFont *v6;

  v6 = (TXChannelFont *)operator new();
  TXChannelFont::TXChannelFont(v6, this, a2, a3);
  return v6;
}

void sub_1B29201A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

TXChannelFont *TXChannelFont_Factory::createCopy(TXChannelFont_Factory *this, OZFactoryBase *a2)
{
  TXChannelFont *v3;
  const TXChannelFont *v4;

  v3 = (TXChannelFont *)operator new();
  TXChannelFont::TXChannelFont(v3, v4, 0);
  return v3;
}

void sub_1B292022C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

TXChannelFont *TXChannelFont_Factory::createChannelCopy(TXChannelFont_Factory *this, OZChannelBase *a2)
{
  TXChannelFont *v3;
  const TXChannelFont *v4;

  v3 = (TXChannelFont *)operator new();
  TXChannelFont::TXChannelFont(v3, v4, 0);
  return v3;
}

void sub_1B29202B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<TXChannelAlignment_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXChannelAlignment_Factory *v0;

  v0 = (TXChannelAlignment_Factory *)operator new();
  TXChannelAlignment_Factory::TXChannelAlignment_Factory(v0);
  TXChannelAlignment_Factory::_instance = (uint64_t)v0;
}

void sub_1B2920324(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void TXChannelAlignment_Factory::TXChannelAlignment_Factory(TXChannelAlignment_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054CD0;
  v4 = xmmword_1B3054CC0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E64FE098;
  *((_QWORD *)this + 16) = &unk_1E64FE168;
}

void sub_1B29203C4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

TXChannelAlignment *TXChannelAlignment_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  TXChannelAlignment *v6;

  v6 = (TXChannelAlignment *)operator new();
  TXChannelAlignment::TXChannelAlignment(v6, this, a2, a3);
  return v6;
}

void sub_1B2920434(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4091C539B7);
  _Unwind_Resume(a1);
}

TXChannelAlignment *TXChannelAlignment_Factory::createCopy(TXChannelAlignment_Factory *this, OZFactoryBase *a2)
{
  TXChannelAlignment *v3;
  const TXChannelAlignment *v4;

  v3 = (TXChannelAlignment *)operator new();
  TXChannelAlignment::TXChannelAlignment(v3, v4, 0);
  return v3;
}

void sub_1B29204C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4091C539B7);
  _Unwind_Resume(a1);
}

TXChannelAlignment *TXChannelAlignment_Factory::createChannelCopy(TXChannelAlignment_Factory *this, OZChannelBase *a2)
{
  TXChannelAlignment *v3;
  const TXChannelAlignment *v4;

  v3 = (TXChannelAlignment *)operator new();
  TXChannelAlignment::TXChannelAlignment(v3, v4, 0);
  return v3;
}

void sub_1B292054C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4091C539B7);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::isExtraLineSpacingForDiacriticsEnabled(TXTextLayout *this)
{
  void **HostApplicationDelegate;
  int v2;

  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  v2 = OZHostApplicationDelegateHandler::wantsExtraLineSpacingForDiacritics(HostApplicationDelegate);
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("enableExtraLineSpacingForDiacritics")) | v2;
}

uint64_t TXTextLayout::dynamicLineSpacingForDiacriticsEnabled(TXTextLayout *this)
{
  void **HostApplicationDelegate;
  unsigned int v3;
  unsigned int v5;

  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  v3 = OZHostApplicationDelegateHandler::wantsDynamicLineSpacingForDiacritics(HostApplicationDelegate);
  if (*((_BYTE *)this + 64392))
    return 1;
  v5 = v3;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 63416), MEMORY[0x1E0CA2E68], 0.0) == 1)
    return 1;
  else
    return v5;
}

uint64_t TXTextLayout::scaleEmojiToCapHeight(TXTextLayout *this)
{
  void **HostApplicationDelegate;

  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  return OZHostApplicationDelegateHandler::wantsToScaleEmojiToCapHeight(HostApplicationDelegate);
}

uint64_t TXTextLayout::createTextStyleFromAttributedString(uint64_t a1, OZChannel **a2, void *a3, unsigned int a4, unsigned int a5, unsigned int *a6, _DWORD *a7)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFString *v20;
  OZChannel *v21;
  OZChannel *v22;
  double Size;
  OZChannel *v24;
  OZChannel *v25;
  double v26;
  OZChannel *v27;
  float v28;
  float v29;
  int v31;
  BOOL v32;
  CGColorSpace *ColorSpace;
  int v35;
  float v39;
  float v40;
  OZChannel *v41;
  float v42;
  float v43;
  float v44;
  void *v45;
  double v46;
  int v47;
  double v48;
  double v49;
  OZChannelColorNoAlpha *p_var14;
  float v52;
  float v53;
  float v54;
  CGColorSpace **v55;
  OZChannelColorNoAlpha *v56;
  CGColorSpace *DeviceRGB;
  int v59;
  double v60;
  float v61;
  double v62;
  float v63;
  double v64;
  double v65;
  float v66;
  void *v67;
  OZChannel *v69;
  double v70;
  double v71;
  double v72;
  OZChannel *v73;
  float v74;
  float v75;
  float v76;
  OZChannel *v77;
  float v78;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  CGColor *color;
  int v92;
  const __CTFont *font;
  void *v94;
  void *v95;
  void *v96;
  CGColorSpace *v98;
  PCColor v99;
  CMTime v100;
  CMTime v101;
  CMTime v102;
  _QWORD v103[2];
  _QWORD v104[2];
  _QWORD v105[2];
  _QWORD v106[2];
  _QWORD v107[2];
  _QWORD v108[2];
  _QWORD v109[2];
  _QWORD v110[2];
  _QWORD v111[2];
  _QWORD v112[2];
  _QWORD v113[2];
  OZChannelBase v114;

  v114.var4.var0 = (__CFString *)*MEMORY[0x1E0C80C00];
  v8 = a5;
  v9 = a4;
  v80 = (void *)objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E0CEA098], a4, v113, 0, a5);
  v84 = objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E0CEA0A0], v9, v112, 0, v8);
  v95 = (void *)objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E0CEA0F0], v9, v111, 0, v8);
  v81 = (void *)objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E0CEA068], v9, v110, 0, v8);
  v94 = (void *)objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E0CEA138], v9, v109, 0, v8);
  v85 = (void *)objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E0CEA130], v9, v108, 0, v8);
  font = (const __CTFont *)objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E0CA8188], v9, v107, 0, v8);
  color = (CGColor *)objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E0CA8550], v9, v106, 0, v8);
  v96 = (void *)objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E0CA85D0], v9, v105, 0, v8);
  v82 = objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E0CA85C8], v9, v104, 0, v8);
  v10 = (void *)objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", CFSTR("InvertBlack"), v9, 0, 0, v8);
  if (v10)
    v92 = objc_msgSend(v10, "BOOLValue");
  else
    v92 = 1;
  v83 = (void *)objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", MotionTextStyleAllCapsAttributeName, v9, v103, 0, v8);
  v87 = (void *)MEMORY[0x1E0C99D20];
  v86 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v112[1] + v112[0]);
  v11 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v113[1] + v113[0]);
  v12 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v111[1] + v111[0]);
  v13 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v110[1] + v110[0]);
  v14 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v109[1] + v109[0]);
  v15 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v108[1] + v108[0]);
  v16 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v107[1] + v107[0]);
  v17 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v106[1] + v106[0]);
  v18 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v105[1] + v105[0]);
  v19 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v104[1] + v104[0]);
  *a7 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v87, "arrayWithObjects:", v86, v11, v12, v13, v14, v15, v16, v17, v18, v19, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v103[1] + v103[0]), 0), "sortedArrayUsingComparator:", &__block_literal_global_50),
                "objectAtIndex:",
                0),
          "unsignedIntValue")
      - a4;
  *a6 = a4;
  if (font)
  {
    v20 = (__CFString *)CTFontCopyPostScriptName(font);
    v21 = *a2;
    *(_QWORD *)&v99.var0.var0 = 0;
    PCString::set((PCString *)&v99, v20);
    (*((void (**)(OZChannel *, PCColor *, uint64_t))v21->var0 + 21))(v21, &v99, 1);
    PCString::~PCString((PCString *)&v99);

    v22 = *a2;
    Size = CTFontGetSize(font);
    v102 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    OZChannel::setValue(v22 + 13, &v102, Size, 0);
  }
  else
  {
    v24 = *a2;
    PCURL::PCURL((PCURL *)&v99, (CFTypeRef)objc_msgSend(v80, "fontName"));
    (*((void (**)(OZChannel *, PCColor *, uint64_t))v24->var0 + 21))(v24, &v99, 1);
    PCString::~PCString((PCString *)&v99);
    v25 = *a2;
    objc_msgSend(v80, "pointSize");
    v101 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    OZChannel::setValue(v25 + 13, &v101, v26, 0);
  }
  if (v83 && objc_msgSend(v83, "BOOLValue"))
  {
    v27 = *a2;
    v100 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    OZChannel::setValue((OZChannel *)((char *)v27 + 5504), &v100, 1.0, 0);
  }
  OZChannel::setValue((OZChannel *)((char *)*a2 + 6088), MEMORY[0x1E0CA2E68], 0.0, 0);
  ((void (*)(PCString *, uint64_t, _QWORD))(*a2)[39].var4.var0[3].info)(&(*a2)[39].var4, 1, 0);
  if (v96 && (objc_msgSend(v96, "floatValue"), v28 > 0.0) || v94 && (objc_msgSend(v94, "floatValue"), v29 > 0.0))
    ((void (*)(PCString *, _QWORD, _QWORD))(*a2)[39].var4.var0[3].info)(&(*a2)[39].var4, 0, 0);
  if (v96)
    _ZF = v82 == 0;
  else
    _ZF = 1;
  v31 = !_ZF;
  if (v94)
    v32 = v85 == 0;
  else
    v32 = 1;
  if (!v32 || v31)
  {
    if (v31)
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA478], "colorWithCGColor:"), "getRed:green:blue:alpha:", &v114, &v114.var1, &v114.var2, &v114.var3);
      ColorSpace = CGColorGetColorSpace(color);
    }
    else
    {
      objc_msgSend(v85, "getRed:green:blue:alpha:", &v114, &v114.var1, &v114.var2, &v114.var3);
      ColorSpace = CGColorSpaceCreateDeviceRGB();
      v96 = v94;
    }
    *(_QWORD *)&_Q0 = v114.var0;
    if (*(double *)&v114.var0 == 0.0)
      v35 = v92;
    else
      v35 = 0;
    if (v35 == 1)
    {
      *(_QWORD *)&_Q0 = v114.var1;
      if (*(double *)&v114.var1 == 0.0)
      {
        *(_QWORD *)&_Q0 = v114.var2;
        if (*(double *)&v114.var2 == 0.0)
        {
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)&v114.var0 = _Q0;
          v114.var2 = (void **)0x3FF0000000000000;
        }
      }
    }
    objc_msgSend(v96, "floatValue", *(double *)&_Q0);
    v40 = v39;
    (*((void (**)(OZChannelInfo **, uint64_t, _QWORD))(*a2)[148].var17 + 13))(&(*a2)[148].var17, 1, 0);
    (*((void (**)(OZChannelImpl **, _QWORD, _QWORD, double))(*a2)[149].var14 + 89))(&(*a2)[149].var14, MEMORY[0x1E0CA2E68], 0, 0.0);
    (*(void (**)(unint64_t *, _QWORD, _QWORD, double))((*a2)[181].var7 + 712))(&(*a2)[181].var7, MEMORY[0x1E0CA2E68], 0, fmaxf(ceilf(fabsf(v40)), 1.0));
    v41 = *a2;
    v42 = *(double *)&v114.var0;
    v43 = *(double *)&v114.var1;
    v44 = *(double *)&v114.var2;
    PCColor::PCColor(&v99, v42, v43, v44, 1.0, ColorSpace);
    (*(void (**)(unint64_t *, _QWORD, PCColor *, _QWORD))(v41[151].var8 + 840))(&v41[151].var8, MEMORY[0x1E0CA2E68], &v99, 0);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v99.var1._obj);
  }
  else
  {
    (*((void (**)(OZChannelInfo **, _QWORD, _QWORD))(*a2)[148].var17 + 13))(&(*a2)[148].var17, 0, 0);
  }
  v45 = (void *)v84;
  if (v84 | (unint64_t)color)
  {
    if (color)
      v45 = (void *)objc_msgSend(MEMORY[0x1E0CEA478], "colorWithCGColor:");
    objc_msgSend(v45, "getRed:green:blue:alpha:", &v114, &v114.var1, &v114.var2, &v114.var3);
    v46 = *(double *)&v114.var0;
    v47 = v92;
    if (*(double *)&v114.var0 != 0.0)
      v47 = 0;
    v48 = *(double *)&v114.var1;
    v49 = *(double *)&v114.var2;
    if (v47 == 1 && *(double *)&v114.var1 == 0.0 && *(double *)&v114.var2 == 0.0)
    {
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)&v114.var0 = _Q0;
      v114.var2 = (void **)0x3FF0000000000000;
      v49 = 1.0;
      v48 = 1.0;
      v46 = 1.0;
    }
    p_var14 = (OZChannelColorNoAlpha *)&(*a2)[41].var14;
    OZChannelColorNoAlpha::getPCColorSpace(p_var14, &v98);
    v52 = v46;
    v53 = v48;
    v54 = v49;
    PCColor::PCColor(&v99, v52, v53, v54, 1.0, (OZChannelBase *)&v98);
    (*(void (**)(OZChannelColorNoAlpha *, _QWORD, PCColor *, _QWORD))(*(_QWORD *)p_var14 + 840))(p_var14, MEMORY[0x1E0CA2E68], &v99, 0);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v99.var1._obj);
    v55 = &v98;
  }
  else
  {
    v56 = (OZChannelColorNoAlpha *)&(*a2)[41].var14;
    OZChannelColorNoAlpha::getPCColorSpace(v56, (CGColorSpace **)&v114);
    PCColor::PCColor(&v99, 1.0, 1.0, 1.0, 1.0, &v114);
    (*(void (**)(OZChannelColorNoAlpha *, _QWORD, PCColor *, _QWORD))(*(_QWORD *)v56 + 840))(v56, MEMORY[0x1E0CA2E68], &v99, 0);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v99.var1._obj);
    v55 = (CGColorSpace **)&v114;
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(v55);
  if (v95)
  {
    objc_msgSend((id)objc_msgSend(v95, "shadowColor"), "getRed:green:blue:alpha:", &v114, &v114.var1, &v114.var2, &v114.var3);
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    *(_QWORD *)&_Q0 = v114.var0;
    if (*(double *)&v114.var0 == 0.0)
      v59 = v92;
    else
      v59 = 0;
    if (v59 == 1)
    {
      *(_QWORD *)&_Q0 = v114.var1;
      if (*(double *)&v114.var1 == 0.0)
      {
        *(_QWORD *)&_Q0 = v114.var2;
        if (*(double *)&v114.var2 == 0.0)
        {
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)&v114.var0 = _Q0;
          v114.var2 = (void **)0x3FF0000000000000;
        }
      }
    }
    objc_msgSend(v95, "shadowOffset", *(double *)&_Q0);
    v61 = v60;
    v63 = v62;
    if (v61 == 0.0)
    {
      v64 = 4.71238898;
      if (v63 >= 0.0)
        v64 = 0.0;
      if (v63 <= 0.0)
        v65 = v64;
      else
        v65 = 1.57079633;
      v66 = fabsf(v63);
      v67 = v95;
    }
    else
    {
      v64 = atanf(v63 / v61);
      if ((v61 >= 0.0 || v63 <= 0.0) && (v61 >= 0.0 || v63 >= 0.0))
      {
        if (v63 >= 0.0 || v61 <= 0.0)
          v65 = v64;
        else
          v65 = v64 + 6.28318531;
      }
      else
      {
        v65 = v64 + 3.14159265;
      }
      v67 = v95;
      if (v63 == 0.0)
      {
        v66 = fabsf(v61);
      }
      else
      {
        *(float *)&v64 = (float)(v61 * v61) + (float)(v63 * v63);
        v66 = sqrtf(*(float *)&v64);
      }
    }
    v69 = *a2;
    objc_msgSend(v67, "shadowBlurRadius", v64);
    v71 = v70;
    objc_msgSend(v95, "shadowBlurRadius");
    OZChannel2D::setValue((OZChannel2D *)&v69[119].var13, MEMORY[0x1E0CA2E68], v71 * 0.5, v72 * 0.5, 0);
    v73 = *a2;
    v74 = *(double *)&v114.var0;
    v75 = *(double *)&v114.var1;
    v76 = *(double *)&v114.var2;
    PCColor::PCColor(&v99, v74, v75, v76, 1.0, DeviceRGB);
    ((void (*)(__CFString **, _QWORD, PCColor *, _QWORD))v73[93].var12[26].info)(&v73[93].var12, MEMORY[0x1E0CA2E68], &v99, 0);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v99.var1._obj);
    (*((void (**)(OZChannelTimeConverter **, _QWORD, _QWORD, double))(*a2)[118].var13 + 89))(&(*a2)[118].var13, MEMORY[0x1E0CA2E68], 0, *(double *)&v114.var3);
    (*((void (**)(void **, _QWORD, _QWORD, double))(*a2)[127].var9 + 89))(&(*a2)[127].var9, MEMORY[0x1E0CA2E68], 0, v65);
    (*((void (**)(void **, _QWORD, _QWORD, double))(*a2)[126].var9 + 89))(&(*a2)[126].var9, MEMORY[0x1E0CA2E68], 0, v66);
    (*((void (**)(void ***, uint64_t, _QWORD))(*a2)[91].var2 + 13))(&(*a2)[91].var2, 1, 0);
  }
  else
  {
    (*((void (**)(void ***, _QWORD, _QWORD))(*a2)[91].var2 + 13))(&(*a2)[91].var2, 0, 0);
  }
  v77 = *a2;
  objc_msgSend(v81, "floatValue");
  return (*((uint64_t (**)(OZChannelInfo **, _QWORD, _QWORD, double))v77[16].var16 + 89))(&v77[16].var16, MEMORY[0x1E0CA2E68], 0, v78);
}

void sub_1B29211F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,PCString a40)
{
  PCString::~PCString(&a40);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12TXTextLayout35createTextStyleFromAttributedStringERKNSt3__110shared_ptrI11TXTextStyleEEP18NSAttributedStringjjPjS8__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

uint64_t TXTextLayout::createAttributedString(TXTextLayout *this, CMTime *a2, int a3)
{
  OZScene **v6;
  NSMutableAttributedString *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  PCSharedCount v14;
  _BYTE v15[8];
  CFRange v16;
  void (*v17)(uint64_t, void *, uint64_t, uint64_t);
  void *v18;
  NSMutableAttributedString *v19;

  v6 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v15, v6);
  PCSharedCount::PCSharedCount(&v14);
  TXTextLayout::getString((PCString *)this, (PCString *)&v14);
  v7 = (NSMutableAttributedString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:", PCString::ns_str((PCString *)&v14));
  v8 = PCString::size((PCString *)&v14);
  TXTextLayout::applyTextStylesToAttributedString(this, v7, a2, 0, v8, a3);
  v9 = PCString::size((PCString *)&v14);
  v16.location = 0;
  v16.length = v9;
  TXTextLayout::applyKerningAndTrackingToAttributedString(this, (__CFAttributedString *)v7, a2, &v16);
  v10 = PCString::size((PCString *)&v14);
  TXTextLayout::applyParagraphStylesToAttributedString(this, v7, a2, 0, v10);
  TXTextLayout::applyCustomLayoutInformationToAttributedString(this, v7, a2);
  v11 = -[NSMutableAttributedString length](v7, "length");
  v16.location = MEMORY[0x1E0C809B0];
  v16.length = 3221225472;
  v17 = ___ZN12TXTextLayout45applySimpleValuesDictionaryToAttributedStringEP25NSMutableAttributedString_block_invoke;
  v18 = &unk_1E64FE208;
  v19 = v7;
  -[NSMutableAttributedString enumerateAttributesInRange:options:usingBlock:](v7, "enumerateAttributesInRange:options:usingBlock:", 0, v11, 0, &v16);
  v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithAttributedString:", v7);

  PCString::~PCString((PCString *)&v14);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v15);
  return v12;
}

void sub_1B29213E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11)
{
  PCString::~PCString(&a10);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a11);
  _Unwind_Resume(a1);
}

void TXTextLayout::applyTextStylesToAttributedString(TXTextLayout *this, NSMutableAttributedString *a2, CMTime *a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v6;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t StyleRunAtCharOffset;
  unsigned int v18;
  int v19;
  double v20;
  unsigned int v21;
  double v22;
  int isEnabled;
  char v24;
  double v25;
  double v26;
  TXTextLayout *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  std::__shared_weak_count *var8;
  unint64_t *v38;
  unint64_t v39;
  float v40;
  float v41;
  float v42;
  BOOL v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  const PCString *v49;
  float Size;
  __CFString *v51;
  double v52;
  CTFontRef v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  TXTextLayout *v58;
  double DropShadowDistance;
  double DropShadowAngle;
  _BOOL4 isDropShadowFixedSource;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  id v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  int ValueAsInt;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  float v87;
  unint64_t *v88;
  unint64_t v89;
  _BOOL8 v90;
  uint64_t v91;
  std::__shared_weak_count *var2;
  unint64_t *v93;
  unint64_t v94;
  TXTextLayout *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void **v104;
  double v105;
  double v106;
  int v107;
  double v108;
  void *v109;
  double v110;
  int v111;
  int v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  const void *v119;
  OZElement *v120;
  OZElement *v121;
  uint64_t v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  _BOOL4 v129;
  double v130;
  double v131;
  float v132;
  id v133;
  _BOOL8 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  TXTextLayout *v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  CMTime v148;
  CMTime v149;
  CMTime v150;
  CMTime v151;
  CMTime v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  OZChannelBase v155;
  PCColor v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  CMTime v164;
  double v165;
  double v166;
  uint64_t v167;
  double v168;
  double v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  OZChannelBase v173;
  CMTime v174;
  double v175;
  CMTime v176;
  CMTime v177;
  OZChannelBase v178;
  OZRenderState v179;

  v6 = a5;
  HIDWORD(v135) = a4;
  v162 = a4;
  v163 = a5;
  v159 = (uint64_t)&v159;
  v160 = &v159;
  v161 = 0;
  TXTextLayout::getStylesInRange(this, &v159, (int *)&v162);
  v10 = v160;
  v11 = *MEMORY[0x1E0CEA0B8];
  if (v160 == &v159)
  {
    v142 = 1;
    goto LABEL_131;
  }
  v138 = *MEMORY[0x1E0CEA0B8];
  LODWORD(v135) = v6;
  v12 = v162;
  v146 = *MEMORY[0x1E0CEA0A0];
  v136 = *MEMORY[0x1E0CEA098];
  v145 = *MEMORY[0x1E0CEA0F0];
  v144 = *MEMORY[0x1E0CEA138];
  v142 = 1;
  v143 = *MEMORY[0x1E0CEA130];
  v137 = *MEMORY[0x1E0CEA068];
  do
  {
    v14 = v10[2];
    v13 = v10[3];
    v157 = v14;
    v158 = (std::__shared_weak_count *)v13;
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v140 = v10;
    StyleRunAtCharOffset = TXTextLayout::getStyleRunAtCharOffset(this, v12);
    v18 = *(_DWORD *)(StyleRunAtCharOffset + 24);
    v139 = StyleRunAtCharOffset;
    if ((double)v12 >= (double)v18)
      v20 = (double)v12;
    else
      v20 = (double)v18;
    v19 = *(_DWORD *)(StyleRunAtCharOffset + 28);
    v21 = v162;
    if ((double)(v19 + v18) <= (double)(v163 + v162))
      v22 = (double)(v19 + v18);
    else
      v22 = (double)(v163 + v162);
    PCColor::PCColor(&v156);
    v155.var12 = 0;
    v155.var13 = 0;
    (*(void (**)(uint64_t, CMTime *, PCColor *))(*(_QWORD *)(v14 + 6344) + 832))(v14 + 6344, a3, &v156);
    isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 28720), 0, 1);
    v24 = isEnabled;
    v25 = (double)v21;
    v26 = v20 - (double)v21;
    v27 = (TXTextLayout *)v26;
    v28 = (v22 - v25);
    v29 = v28 - v27;
    if (isEnabled)
      v30 = v28 - v27;
    else
      v30 = 1;
    v141 = (TXTextLayout *)v26;
    if (v30)
    {
      v31 = (unint64_t)v27 + v30;
      v32 = v26;
      do
      {
        if ((v24 & 1) != 0)
        {
          TXTextLayout::getTextObjectWithCharOffset((uint64_t *)&v178.var7, this, v32, 1, 0);
          if (v178.var7)
          {
            v33 = *(unsigned int *)(v178.var7 + 740);
            PCColor::getColorSpace(&v156, (CGColorSpace **)&v178);
            PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v179, &v178);
            PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v178);
            LODWORD(v34) = *(_DWORD *)(v178.var7 + 736);
            TXTextObject::getFaceColor((TXTextObject *)v178.var7, a3, (double)v34, (PCColorSpaceCache **)&v179);
            PCWorkingColor::getRGBA((PCWorkingColor *)&v179, (float *)&v155.var13 + 1, (float *)&v155.var13, (float *)&v155.var12 + 1, (float *)&v155.var12);
            PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v179.var0.var3);
          }
          else
          {
            v33 = 1;
          }
          var8 = (std::__shared_weak_count *)v178.var8;
          if (v178.var8)
          {
            v38 = (unint64_t *)(v178.var8 + 8);
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))var8->__on_zero_shared)(var8);
              std::__shared_weak_count::__release_weak(var8);
            }
          }
          v36 = v33;
        }
        else
        {
          PCColor::getColorSpace(&v156, (CGColorSpace **)&v179);
          PCColor::getRGB(&v156, (float *)&v155.var13 + 1, (float *)&v155.var13, (float *)&v155.var12 + 1, (const PCColorSpaceHandle *)&v179);
          PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v179);
          *(_OWORD *)&v155.var9 = *(_OWORD *)&a3->value;
          v155.var11 = (__CFString *)a3->epoch;
          OZChannel::getValueAsDouble((OZChannel *)(v157 + 10152), (const CMTime *)&v155.var9, 0.0);
          *(float *)&v35 = v35;
          LODWORD(v155.var12) = LODWORD(v35);
          v33 = v29;
          v36 = 1;
        }
        v40 = *((float *)&v155.var13 + 1);
        v41 = *(float *)&v155.var13;
        v42 = *((float *)&v155.var12 + 1);
        if (a6)
        {
          v43 = *((float *)&v155.var13 + 1) == 1.0 && *(float *)&v155.var13 == 1.0;
          if (v43 && *((float *)&v155.var12 + 1) == 1.0)
          {
            v155.var13 = 0;
            v42 = 0.0;
            v41 = 0.0;
            v40 = 0.0;
            HIDWORD(v155.var12) = 0;
          }
        }
        -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v146, objc_msgSend(MEMORY[0x1E0CEA478], "colorWithRed:green:blue:alpha:", v40, v41, v42, *(float *)&v155.var12, v135), v32, v33);
        v32 += v36;
      }
      while (v32 < v31);
      v14 = v157;
      v27 = v141;
    }
    v45 = *(_QWORD *)(v14 + 520);
    v46 = *(_QWORD *)(v14 + 528);
    v155.var7 = v45;
    v155.var8 = v46;
    if (v46)
    {
      v47 = (unint64_t *)(v46 + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v49 = (const PCString *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v45 + 16))(v45);
    PCString::PCString((PCString *)&v155.var6, v49);
    *(_OWORD *)&v155.var3 = *(_OWORD *)&a3->value;
    v155.var5 = (PCString *)a3->epoch;
    Size = TXTextStyle::getSize((OZChannel *)v14, (CMTime *)&v155.var3, 0.0);
    v51 = PCString::cf_str((PCString *)&v155.var6);
    v52 = Size;
    v53 = OZCreateFontWithName(v51, v52, 0);
    if (v53)
      -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v136, v53, v27, v29);

    if (OZChannel::getValueAsInt((OZChannel *)(v14 + 5504), MEMORY[0x1E0CA2E68], 0.0))
      -[NSMutableAttributedString replaceCharactersInRange:withString:](a2, "replaceCharactersInRange:withString:", v27, v29, objc_msgSend((id)objc_msgSend((id)-[NSMutableAttributedString string](a2, "string"), "substringWithRange:", v27, v29), "localizedUppercaseString"));
    v54 = v157;
    if (OZChannel::getValueAsInt((OZChannel *)(v157 + 5504), MEMORY[0x1E0CA2E68], 0.0))
      -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", MotionTextStyleAllCapsAttributeName, &unk_1E6649210, v27, v29);
    else
      -[NSMutableAttributedString removeAttribute:range:](a2, "removeAttribute:range:", MotionTextStyleAllCapsAttributeName, v27, v29);
    -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v138, &unk_1E6649228, v27, v29, v135);
    v55 = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 45048), 0, 1);
    if ((OZChannelBase::isEnabled((OZChannelBase *)(v54 + 13848), 0, 1) | v55) == 1)
    {
      v56 = v55 ? v29 : 1;
      if (v56)
      {
        v57 = (unint64_t)v27 + v56;
        v58 = v27;
        while (1)
        {
          if (v55)
          {
            TXTextLayout::getTextObject(this, v58, &v155.var1);
            PCColor::getColorSpace(&v156, (CGColorSpace **)&v155);
            if (v155.var1
              && (v177 = *a3, TXTextObject::isDropShadowEnabled((TXTextObject *)v155.var1, &v177)))
            {
              PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v173, &v155);
              v176 = *a3;
              if ((TXTextObject::isDropShadowVisible((TXTextObject *)v155.var1, &v176, (PCWorkingColor *)&v173) & 1) != 0)
              {
                v172 = 0;
                v171 = 0;
                PCWorkingColor::getRGBA((PCWorkingColor *)&v173, (float *)&v172 + 1, (float *)&v172, (float *)&v171 + 1, (float *)&v171);
                PCColor::PCColor((PCColor *)&v178.var7);
                PCColor::setRGBA((PCColor *)&v178.var7, *((float *)&v172 + 1), *(float *)&v172, *((float *)&v171 + 1), *(float *)&v171, &v155);
                v174 = *a3;
                DropShadowDistance = TXTextObject::getDropShadowDistance((TXTextObject *)v155.var1, &v174);
                *(_OWORD *)&v173.var10 = *(_OWORD *)&a3->value;
                v173.var12 = (__CFString *)a3->epoch;
                DropShadowAngle = TXTextObject::getDropShadowAngle((TXTextObject *)v155.var1, (CMTime *)&v173.var10);
                v175 = 0.0;
                v170 = 0.0;
                *(_OWORD *)&v173.var6 = *(_OWORD *)&a3->value;
                v173.var8 = a3->epoch;
                TXTextObject::getDropShadowBlur((TXTextObject *)v155.var1, (CMTime *)&v173.var6, &v175, &v170);
                OZRenderState::OZRenderState(&v179);
                *(_OWORD *)&v179.var0.var0 = *(_OWORD *)&a3->value;
                v179.var0.var3 = a3->epoch;
                v169 = 0.0;
                v168 = 0.0;
                v167 = 0;
                (*(void (**)(uint64_t, double *, double *, uint64_t *, OZRenderState *, uint64_t))(*(_QWORD *)(*((_QWORD *)v155.var1 + 68) + 200) + 1312))(*((_QWORD *)v155.var1 + 68) + 200, &v169, &v168, &v167, &v179, 1);
                if (v169 > 0.0)
                {
                  isDropShadowFixedSource = TXTextObject::isDropShadowFixedSource((TXTextObject *)v155.var1, a3);
                  v62 = 1.0;
                  if (isDropShadowFixedSource)
                    v62 = v169;
                  v175 = v175 / v169;
                  v170 = v170 / v168;
                  DropShadowDistance = DropShadowDistance / v62;
                }
                v166 = 0.0;
                v165 = 0.0;
                v164 = *a3;
                TXTextObject::getDropShadowScale((TXTextObject *)v155.var1, &v164, &v166, &v165, 1);
                v63 = v175;
                v64 = v170;
                v65 = v166;
                v66 = v165;
                *(_OWORD *)&v178.var0 = *(_OWORD *)&v178.var7;
                *(_OWORD *)&v178.var2 = *(_OWORD *)&v178.var9;
                *(_OWORD *)&v178.var4.var0 = *(_OWORD *)&v178.var11;
                v178.var6 = (OZChannelFolder *)v178.var13;
                if (v178.var13)
                  PCCFRefTraits<CGColorSpace *>::retain((CGColorSpaceRef)v178.var13);
                v67 = newNSShadow(DropShadowDistance, DropShadowAngle, v63, v64, v65, v66, (PCColor *)&v178);
                PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v178.var6);
                PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v178.var13);
              }
              else
              {
                v67 = 0;
              }
              PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v173.var2);
            }
            else
            {
              v67 = 0;
            }
            PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v155);
            v90 = TXTextObject::isDropShadowFixedSource((TXTextObject *)v155.var1, a3);
            var2 = (std::__shared_weak_count *)v155.var2;
            if (v155.var2)
            {
              v93 = (unint64_t *)(v155.var2 + 1);
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))var2->__on_zero_shared)(var2);
                std::__shared_weak_count::__release_weak(var2);
              }
            }
            v91 = 1;
            goto LABEL_95;
          }
          v68 = v157;
          v69 = v158;
          v153 = v157;
          v154 = v158;
          if (v158)
          {
            p_shared_owners = (unint64_t *)&v158->__shared_owners_;
            do
              v71 = __ldxr(p_shared_owners);
            while (__stxr(v71 + 1, p_shared_owners));
          }
          if (v68 && OZChannelBase::isEnabled((OZChannelBase *)(v68 + 13848), 0, 1))
            break;
          v67 = 0;
          if (v69)
            goto LABEL_81;
LABEL_85:
          v90 = OZChannel::getValueAsInt((OZChannel *)(v157 + 19528), MEMORY[0x1E0CA2E68], 0.0) != 0;
          v91 = v29;
LABEL_95:
          -[NSMutableAttributedString removeAttribute:range:](a2, "removeAttribute:range:", v145, v58, v91);
          -[NSMutableAttributedString removeAttribute:range:](a2, "removeAttribute:range:", CFSTR("TXTextDropShadowIsFixedSource"), v58, v91);
          if (v67)
          {
            -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v145, v67, v58, v91);
            -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", CFSTR("TXTextDropShadowIsFixedSource"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v90), v58, v91);

            v142 = 0;
          }
          v58 = (TXTextLayout *)((char *)v58 + 1);
          if ((unint64_t)v58 >= v57)
            goto LABEL_98;
        }
        *(_OWORD *)&v173.var0 = *(_OWORD *)&a3->value;
        v173.var2 = (void **)a3->epoch;
        OZChannel::getValueAsDouble((OZChannel *)(v68 + 19224), (const CMTime *)&v173, 0.0);
        v73 = v72;
        v177 = *a3;
        OZChannel::getValueAsDouble((OZChannel *)(v68 + 19376), &v177, 0.0);
        v75 = v74;
        v176 = *a3;
        OZChannel::getValueAsDouble((OZChannel *)(v68 + 18328), &v176, 0.0);
        v77 = v76;
        OZChannel::getValueAsDouble((OZChannel *)(v68 + 18480), &v176, 0.0);
        v79 = v78;
        OZRenderState::OZRenderState(&v179);
        *(_OWORD *)&v179.var0.var0 = *(_OWORD *)&a3->value;
        v179.var0.var3 = a3->epoch;
        v164.value = 0;
        v155.var1 = 0;
        v175 = 0.0;
        (*(void (**)(uint64_t, CMTime *, OZFactory **, double *, OZRenderState *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 48944) + 200) + 1312))(*(_QWORD *)(v68 + 48944) + 200, &v164, &v155.var1, &v175, &v179, 1);
        if (*(double *)&v164.value > 0.0)
        {
          ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v68 + 19528), MEMORY[0x1E0CA2E68], 0.0);
          v81 = 1.0;
          if (ValueAsInt)
            v81 = *(double *)&v164.value;
          v73 = v73 / v81;
          v77 = v77 / *(double *)&v164.value;
          v79 = v79 / *(double *)&v155.var1;
        }
        v174 = *a3;
        OZChannel::getValueAsDouble((OZChannel *)(v68 + 18920), &v174, 0.0);
        v83 = v82;
        OZChannel::getValueAsDouble((OZChannel *)(v68 + 19072), &v174, 0.0);
        v85 = v84;
        PCColor::PCColor((PCColor *)&v178.var7);
        *(_OWORD *)&v173.var10 = *(_OWORD *)&a3->value;
        v173.var12 = (__CFString *)a3->epoch;
        OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)(v68 + 14232), (const CMTime *)&v173.var10, (PCColor *)&v178.var7, 0.0);
        *(_OWORD *)&v173.var6 = *(_OWORD *)&a3->value;
        v173.var8 = a3->epoch;
        OZChannel::getValueAsDouble((OZChannel *)(v68 + 18040), (const CMTime *)&v173.var6, 0.0);
        v87 = v86 * PCColor::getAlpha((PCColor *)&v178.var7);
        PCColor::setAlpha((PCColor *)&v178.var7, v87);
        *(_OWORD *)&v178.var0 = *(_OWORD *)&v178.var7;
        *(_OWORD *)&v178.var2 = *(_OWORD *)&v178.var9;
        *(_OWORD *)&v178.var4.var0 = *(_OWORD *)&v178.var11;
        v178.var6 = (OZChannelFolder *)v178.var13;
        if (v178.var13)
          PCCFRefTraits<CGColorSpace *>::retain((CGColorSpaceRef)v178.var13);
        v67 = newNSShadow(v73, v75, v77, v79, v83, v85, (PCColor *)&v178);
        PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v178.var6);
        PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v178.var13);
        if (!v69)
          goto LABEL_85;
LABEL_81:
        v88 = (unint64_t *)&v69->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
        goto LABEL_85;
      }
    }
LABEL_98:
    v95 = v141;
    v96 = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 33424), 0, 1);
    v97 = v157;
    if ((OZChannelBase::isEnabled((OZChannelBase *)(v157 + 22632), 0, 1) | v96) == 1)
    {
      v98 = v96 ? v29 : 1;
      v178.var0 = 0;
      if (v98)
      {
        v99 = (unint64_t)v141 + v98;
        if (v96)
          v100 = 1;
        else
          v100 = v29;
        do
        {
          if ((v96 & 1) != 0)
          {
            TXTextLayout::getTextObject(this, v95, &v178.var7);
            PCColor::getColorSpace(&v156, (CGColorSpace **)&v173);
            PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v179, &v173);
            PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v173);
            v149 = *a3;
            TXTextObject::isOutlineVisible((TXTextObject *)v178.var7, &v149, (PCWorkingColor *)&v179, (double *)&v178);
            PCWorkingColor::getRGBA((PCWorkingColor *)&v179, (float *)&v155.var13 + 1, (float *)&v155.var13, (float *)&v155.var12 + 1, (float *)&v155.var12);
            PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v179.var0.var3);
            v101 = (std::__shared_weak_count *)v178.var8;
            if (v178.var8)
            {
              v102 = (unint64_t *)(v178.var8 + 8);
              do
                v103 = __ldaxr(v102);
              while (__stlxr(v103 - 1, v102));
              if (!v103)
              {
                ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                std::__shared_weak_count::__release_weak(v101);
              }
            }
            v97 = v157;
          }
          else
          {
            v152 = *a3;
            OZChannel::getValueAsDouble((OZChannel *)(v97 + 27568), &v152, 0.0);
            v178.var0 = v104;
            v97 = v157;
            v151 = *a3;
            OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)(v157 + 23016), &v151, &v156, 0.0);
            PCColor::getColorSpace(&v156, (CGColorSpace **)&v179);
            PCColor::getRGB(&v156, (float *)&v155.var13 + 1, (float *)&v155.var13, (float *)&v155.var12 + 1, (const PCColorSpaceHandle *)&v179);
            PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v179);
            v150 = *a3;
            OZChannel::getValueAsDouble((OZChannel *)(v97 + 26824), &v150, 0.0);
            *(float *)&v105 = v105;
            LODWORD(v155.var12) = LODWORD(v105);
          }
          v106 = fmax(*(double *)&v178.var0 * v52 * 0.01, 1.0);
          *(double *)&v178.var0 = v106;
          v107 = OZChannelBase::isEnabled((OZChannelBase *)(v97 + 5960), 0, 1);
          v108 = 0.0 - v106;
          if (!v107)
            v108 = *(double *)&v178.var0;
          -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v144, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v108), v95, v100);
          -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v143, objc_msgSend(MEMORY[0x1E0CEA478], "colorWithRed:green:blue:alpha:", *((float *)&v155.var13 + 1), *(float *)&v155.var13, *((float *)&v155.var12 + 1), *(float *)&v155.var12), v95, v100);
          v95 = (TXTextLayout *)((char *)v95 + 1);
        }
        while ((unint64_t)v95 < v99);
        v97 = v157;
        v95 = v141;
      }
    }
    v109 = (void *)MEMORY[0x1E0CB37E8];
    v148 = *a3;
    OZChannel::getValueAsDouble((OZChannel *)(v97 + 2560), &v148, 0.0);
    *(float *)&v110 = v110;
    -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v137, objc_msgSend(v109, "numberWithFloat:", v110), v95, v29);
    v111 = *(_DWORD *)(v139 + 24);
    v112 = *(_DWORD *)(v139 + 28);
    PCString::~PCString((PCString *)&v155.var6);
    v113 = (std::__shared_weak_count *)v155.var8;
    if (v155.var8)
    {
      v114 = (unint64_t *)(v155.var8 + 8);
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    PCCFRef<CGColorSpace *>::~PCCFRef(&v156.var1._obj);
    v116 = v158;
    if (v158)
    {
      v117 = (unint64_t *)&v158->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    v12 = v112 + v111;
    v10 = (uint64_t *)v140[1];
  }
  while (v10 != &v159);
  v6 = v135;
  v11 = v138;
LABEL_131:
  -[NSMutableAttributedString removeAttribute:range:](a2, "removeAttribute:range:", v11, HIDWORD(v135), v6);
  -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v11, MEMORY[0x1E0C9AAA0], HIDWORD(v135), v6);
  if ((v142 & 1) != 0)
  {
    v119 = (const void *)*((_QWORD *)this + 145);
    if (v119)
    {
      if (v120)
      {
        v121 = v120;
        v122 = *MEMORY[0x1E0CEA0F0];
        -[NSMutableAttributedString removeAttribute:range:](a2, "removeAttribute:range:", *MEMORY[0x1E0CEA0F0], HIDWORD(v135), v6);
        -[NSMutableAttributedString removeAttribute:range:](a2, "removeAttribute:range:", CFSTR("TXTextDropShadowIsFixedSource"), HIDWORD(v135), v6);
        if (((*(uint64_t (**)(OZElement *))(*(_QWORD *)v121 + 1624))(v121) & 1) != 0)
        {
          OZElement::getDropShadowDistance(v121, a3);
          v124 = v123;
          OZElement::getDropShadowAngle(v121, a3);
          v126 = v125;
          OZElement::getDropShadowBlur(v121, a3);
          v128 = v127;
          OZRenderState::OZRenderState(&v179);
          *(_OWORD *)&v179.var0.var0 = *(_OWORD *)&a3->value;
          v179.var0.var3 = a3->epoch;
          *(_QWORD *)&v156.var0.var0 = 0;
          v173.var0 = 0;
          v177.value = 0;
          (*(void (**)(OZElement *, PCColor *, OZChannelBase *, CMTime *, OZRenderState *, uint64_t))(*(_QWORD *)v121 + 1312))(v121, &v156, &v173, &v177, &v179, 1);
          if (*(double *)&v156.var0.var0 > 0.0)
          {
            v129 = OZElement::isDropShadowFixedSource(v121, a3);
            v130 = 1.0;
            if (v129)
              v130 = *(double *)&v156.var0.var0;
            v124 = v124 / v130;
            v128 = v128 / *(double *)&v156.var0.var0;
          }
          OZElement::getDropShadowColor(v121, a3, (PCColor *)&v178.var7);
          OZElement::getDropShadowOpacity(v121, a3);
          v132 = v131 * PCColor::getAlpha((PCColor *)&v178.var7);
          PCColor::setAlpha((PCColor *)&v178.var7, v132);
          *(_OWORD *)&v178.var0 = *(_OWORD *)&v178.var7;
          *(_OWORD *)&v178.var2 = *(_OWORD *)&v178.var9;
          *(_OWORD *)&v178.var4.var0 = *(_OWORD *)&v178.var11;
          v178.var6 = (OZChannelFolder *)v178.var13;
          if (v178.var13)
            PCCFRefTraits<CGColorSpace *>::retain((CGColorSpaceRef)v178.var13);
          v133 = newNSShadow(v124, v126, v128, v128, 1.0, 1.0, (PCColor *)&v178);
          PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v178.var6);
          PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v178.var13);
          if (v133)
          {
            v134 = OZElement::isDropShadowFixedSource(v121, a3);
            -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v122, v133, HIDWORD(v135), v6);
            -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", CFSTR("TXTextDropShadowIsFixedSource"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v134), HIDWORD(v135), v6);

          }
        }
      }
    }
  }
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear(&v159);
}

void sub_1B29225F4(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x3C8]);
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void TXTextLayout::applyParagraphStylesToAttributedString(TXTextLayout *this, NSMutableAttributedString *a2, const CMTime *a3, unsigned int a4, int a5)
{
  unsigned int v5;
  unsigned int v6;
  double v9;
  double *v10;
  uint64_t v11;
  CMTime *v12;
  uint64_t ParagraphStyleContainingOffset;
  id v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  int Alignment;
  double v21;
  CMTime v23;

  v5 = a5 + a4;
  if (a5 + a4 > a4)
  {
    v6 = a4;
    v9 = (double)a4;
    v10 = (double *)((char *)this + 64400);
    v11 = *MEMORY[0x1E0CEA0D0];
    v12 = (CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      ParagraphStyleContainingOffset = TXTextLayout::getParagraphStyleContainingOffset(this, v6);
      v14 = objc_alloc_init(MEMORY[0x1E0CEA230]);
      v15 = *(_QWORD *)(ParagraphStyleContainingOffset + 856);
      if ((double)v6 >= (double)v15)
        v16 = (double)v6;
      else
        v16 = (double)v15;
      v17 = *(_QWORD *)(ParagraphStyleContainingOffset + 864) + v15;
      if ((double)v17 <= (double)v5)
        v18 = (double)v17;
      else
        v18 = (double)v5;
      if ((int)TXParagraphStyle::getAlignment((TXParagraphStyle *)ParagraphStyleContainingOffset) <= 2)
      {
        Alignment = TXParagraphStyle::getAlignment((TXParagraphStyle *)ParagraphStyleContainingOffset);
        if (Alignment == 2)
          v19 = 2;
        else
          v19 = Alignment == 1;
      }
      else
      {
        v19 = 3;
      }
      objc_msgSend(v14, "setAlignment:", v19);
      v23 = *v12;
      OZChannel::getValueAsDouble((OZChannel *)(ParagraphStyleContainingOffset + 680), &v23, 0.0);
      objc_msgSend(v14, "setLineSpacing:", v21 * (*(double (**)(TXTextLayout *, const CMTime *))(*(_QWORD *)this + 712))(this, a3) + *v10);
      -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v11, v14, (v16 - v9), (v18 - v9) - (v16 - v9));

      v6 = *(_DWORD *)(ParagraphStyleContainingOffset + 864) + *(_DWORD *)(ParagraphStyleContainingOffset + 856);
    }
    while (v5 > v6);
  }
}

void TXTextLayout::applyCustomLayoutInformationToAttributedString(TXTextLayout *this, NSMutableAttributedString *a2, const CMTime *a3)
{
  uint64_t v6;
  uint64_t ValueAsInt;
  double v13;
  uint64_t v14;
  double XMarginScale;
  double YMarginScale;
  double v17;
  double v18;
  uint64_t v19;
  void **HostApplicationDelegate;
  int v21;
  int v22;
  TXTextLayout *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  TXTextObject *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  float Size;
  double v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  CMTime v54;
  CMTime v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  TXTextObject *v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  OZRenderState v61;
  _QWORD v62[2];
  _QWORD v63[2];
  const __CFString *v64;
  uint64_t v65;
  const __CFString *v66;
  _QWORD v67[3];

  v67[1] = *MEMORY[0x1E0C80C00];
  v6 = -[NSMutableAttributedString length](a2, "length");
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21368), MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)ValueAsInt)
  {
    OZRenderState::OZRenderState(&v61);
    *(_OWORD *)&v61.var0.var0 = *(_OWORD *)&a3->value;
    v61.var0.var3 = a3->epoch;
    TXTextLayout::doLayout(this, &v61, 0);
    v58 = 0;
    v59 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v60 = _Q0;
    TXTextLayout::getTypographicBounds((uint64_t)this, (uint64_t)&v58, (CMTime *)&v61, 1, 1);
    v13 = *((double *)&v60 + 1);
    if (TXTextLayout::_computeTypographicHeightWithoutLastLineLeading(this))
      v13 = v13 - TXTextLayout::_lastLineLeading(this);
    if (v13 > 0.0)
    {
      v66 = CFSTR("TXTextHeight");
      v67[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v13);
      -[NSMutableAttributedString addAttributes:range:](a2, "addAttributes:range:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v67, &v66, 1), 0, v6);
    }
    v64 = CFSTR("TXTextHeightWithLastLineLeading");
    v65 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v13 + TXTextLayout::_lastLineLeading(this));
    -[NSMutableAttributedString addAttributes:range:](a2, "addAttributes:range:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1), 0, v6);
  }
  v14 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 61208), MEMORY[0x1E0CA2E68], 0.0);
  XMarginScale = TXTextLayout::getXMarginScale(this);
  YMarginScale = TXTextLayout::getYMarginScale(this);
  v17 = (*(double (**)(TXTextLayout *, _QWORD))(*(_QWORD *)this + 712))(this, MEMORY[0x1E0CA2E68]);
  v18 = *((double *)this + 8050);
  v62[0] = CFSTR("TXTextVerticalAlignment");
  v19 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", ValueAsInt);
  v62[1] = CFSTR("TXTextMarginScaleOption");
  v63[0] = v19;
  v63[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v14);
  -[NSMutableAttributedString addAttributes:range:](a2, "addAttributes:range:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v63, v62, 2), 0, v6);
  if (XMarginScale != 1.0)
    -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", CFSTR("TXTextHorizontalScaleFactor"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", XMarginScale), 0, v6);
  if (YMarginScale != 1.0)
    -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", CFSTR("TXTextVerticalScaleFactor"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", YMarginScale), 0, v6);
  if (v17 != 1.0)
    -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", CFSTR("TXTextBothMarginScaleFactor"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v17), 0, v6);
  if (v18 != 0.0)
    -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", CFSTR("TXTextDynamicLineSpacing"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v18), 0, v6);
  -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", CFSTR("TXNumSoftLines"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", NumLinesInParagraphs(this)), 0, v6);
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  v21 = OZHostApplicationDelegateHandler::wantsToIncludeSubstituteFontNameInAttributedString(HostApplicationDelegate);
  v22 = OZHostApplicationDelegateHandler::wantsToIncludeTrackingValueInAttributedString(HostApplicationDelegate);
  if ((v21 | v22) == 1)
  {
    v61.var0.var0 = 0;
    *(_QWORD *)&v61.var0.var1 = 0;
    if (((*((_QWORD *)this + 7354) - *((_QWORD *)this + 7353)) & 0xFFFFFFFF0) == 0)
      goto LABEL_30;
    v23 = 0;
    while (1)
    {
      TXTextLayout::getTextObject(this, v23, &v58);
      if ((TXTextObject::isEmoji(v58) & 1) == 0)
        break;
      v24 = v59;
      if (v59)
      {
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v23 = (TXTextLayout *)((char *)v23 + 1);
      if ((unint64_t)v23 >= ((*((_QWORD *)this + 7354) - *((_QWORD *)this + 7353)) >> 4))
        goto LABEL_30;
    }
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v61, (uint64_t *)&v58);
    v27 = v59;
    if (!v59)
      goto LABEL_30;
    v28 = (unint64_t *)&v59->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (!v21)
        goto LABEL_54;
    }
    else
    {
LABEL_30:
      if (!v21)
        goto LABEL_54;
    }
    if (v61.var0.var0)
    {
      v30 = *(TXTextObject **)(v61.var0.var0 + 528);
      v31 = *(std::__shared_weak_count **)(v61.var0.var0 + 536);
      v58 = v30;
      v59 = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      if (v30)
      {
        if (v34)
        {
          v56 = v34;
          v57 = v31;
          if (v31)
          {
            v35 = (unint64_t *)&v31->__shared_owners_;
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }
        }
        else
        {
          v31 = 0;
          v56 = 0;
          v57 = 0;
        }
        -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", CFSTR("TXSubstituteFont"), *(_QWORD *)(v34[5] + 120), 0, v6);
        if (v31)
        {
          v37 = (unint64_t *)&v31->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v31 = v59;
      }
      if (v31)
      {
        v39 = (unint64_t *)&v31->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
          if (v22)
          {
LABEL_55:
            if (v61.var0.var0)
            {
              v41 = *(_QWORD *)(v61.var0.var0 + 264);
              if (v41)
              {
                v43 = *(_QWORD *)(v41 + 8);
                v42 = *(std::__shared_weak_count **)(v41 + 16);
                v58 = (TXTextObject *)v43;
                v59 = v42;
                if (v42)
                {
                  v44 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v45 = __ldxr(v44);
                  while (__stxr(v45 + 1, v44));
                }
              }
              else
              {
                v43 = 0;
                v58 = 0;
                v59 = 0;
              }
              v55 = *a3;
              Size = TXTextStyle::getSize((OZChannel *)v43, &v55, 0.0);
              v54 = *a3;
              OZChannel::getValueAsDouble((OZChannel *)(v43 + 49416), &v54, 0.0);
              -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", CFSTR("TXTrackingValue"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v47 * Size * TXTextLayout::getXMarginScale(this)), 0, v6);
              v48 = v59;
              if (v59)
              {
                v49 = (unint64_t *)&v59->__shared_owners_;
                do
                  v50 = __ldaxr(v49);
                while (__stlxr(v50 - 1, v49));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
            }
          }
LABEL_68:
          v51 = *(std::__shared_weak_count **)&v61.var0.var1;
          if (*(_QWORD *)&v61.var0.var1)
          {
            v52 = (unint64_t *)(*(_QWORD *)&v61.var0.var1 + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          return;
        }
      }
    }
LABEL_54:
    if (v22)
      goto LABEL_55;
    goto LABEL_68;
  }
}

void sub_1B2923048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void ___ZN12TXTextLayout45applySimpleValuesDictionaryToAttributedStringEP25NSMutableAttributedString_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  id v10;

  v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v8 = objc_msgSend(a2, "objectForKey:", CFSTR("SimpeValueDict::tracking"));
  if (v8)
  {
    objc_msgSend(v10, "setObject:forKey:", v8, CFSTR("tracking"));
    objc_msgSend(*(id *)(a1 + 32), "removeAttribute:range:", CFSTR("MotionTextSimpleValuesAttribute"), a3, a4);
  }
  v9 = objc_msgSend(a2, "objectForKey:", CFSTR("SimpeValueDict::kerning"));
  if (v9)
  {
    objc_msgSend(v10, "setObject:forKey:", v9, CFSTR("kerning"));
    objc_msgSend(*(id *)(a1 + 32), "removeAttribute:range:", CFSTR("SimpeValueDict::kerning"), a3, a4);
  }
  if (objc_msgSend(v10, "count"))
    objc_msgSend(*(id *)(a1 + 32), "addAttribute:value:range:", CFSTR("MotionTextSimpleValuesAttribute"), v10, a3, a4);

}

void TXTextLayout::createParagraphStyle(TXTextLayout *this, unsigned int a2, int a3, NSAttributedString *a4)
{
  uint64_t v8;
  TXParagraphStyle *v9;
  uint64_t v10;
  uint64_t v11;
  int Alignment;
  int Justification;
  uint64_t LineSpacingChannel;
  unsigned int v15;
  const CMTime *v16;
  uint64_t TabAtIndex;
  double v18;
  double v19;
  uint64_t ValueAsInt;
  uint64_t v21;
  const __CTParagraphStyle *v22;
  int v23;
  void *v24;
  double v25;
  int v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  const __CTTextTab *v32;
  double Location;
  int v34;
  uint64_t v35;
  double inserted;
  TXParagraphStyle **v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  TXParagraphStyle **v46;
  char *v47;
  char *v48;
  char *v49;
  TXParagraphStyle *v50;
  CMTime v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  double v56;
  id v57;
  unsigned __int8 valueBuffer;
  _QWORD v59[2];
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v8 = a3 - a2;
  v59[0] = 0;
  v59[1] = v8;
  v9 = (TXParagraphStyle *)operator new();
  TXParagraphStyle::TXParagraphStyle(v9, this);
  TXParagraphStyle::setStart((uint64_t)v9, a2);
  TXParagraphStyle::setLength((uint64_t)v9, v8);
  if (a3 == a2)
  {
    v10 = *((_QWORD *)this + 2379);
    if (v10 != *((_QWORD *)this + 2378))
    {
      v11 = *(_QWORD *)(v10 - 8);
      Alignment = TXParagraphStyle::getAlignment((TXParagraphStyle *)v11);
      TXParagraphStyle::setAlignment(v9, Alignment, 0);
      Justification = TXParagraphStyle::getJustification((TXParagraphStyle *)v11);
      TXParagraphStyle::setJustification(v9, Justification);
      LineSpacingChannel = TXParagraphStyle::getLineSpacingChannel(v9);
      v51 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      OZChannel::getValueAsDouble((OZChannel *)(v11 + 680), &v51, 0.0);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)LineSpacingChannel + 712))(LineSpacingChannel, MEMORY[0x1E0CA2E68], 0);
      if (((*(_QWORD *)(v11 + 840) - *(_QWORD *)(v11 + 832)) & 0x7FFFFFFF8) != 0)
      {
        v15 = 0;
        v16 = (const CMTime *)MEMORY[0x1E0CA2E68];
        do
        {
          TabAtIndex = TXParagraphStyle::getTabAtIndex((TXParagraphStyle *)v11, v15);
          OZChannel::getValueAsDouble((OZChannel *)(TabAtIndex + 136), v16, 0.0);
          v19 = v18;
          ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(TabAtIndex + 288), v16, 0.0);
          TXParagraphStyle::insertTab((uint64_t)v9, ValueAsInt, v19);
          ++v15;
        }
        while (v15 < ((*(_QWORD *)(v11 + 840) - *(_QWORD *)(v11 + 832)) >> 3));
      }
    }
  }
  else
  {
    valueBuffer = 0;
    v56 = 0.0;
    v57 = 0;
    v21 = *MEMORY[0x1E0CA85A0];
    if (-[NSAttributedString attribute:atIndex:effectiveRange:](a4, "attribute:atIndex:effectiveRange:", *MEMORY[0x1E0CA85A0], 0, v59))
    {
      v22 = -[NSAttributedString attribute:atIndex:effectiveRange:](a4, "attribute:atIndex:effectiveRange:", v21, 0, v59);
      CTParagraphStyleGetValueForSpecifier(v22, kCTParagraphStyleSpecifierAlignment, 1uLL, &valueBuffer);
      CTParagraphStyleGetValueForSpecifier(v22, kCTParagraphStyleSpecifierTabStops, 8uLL, &v57);
      CTParagraphStyleGetValueForSpecifier(v22, kCTParagraphStyleSpecifierLineSpacingAdjustment, 8uLL, &v56);
      v23 = valueBuffer;
    }
    else
    {
      v24 = (void *)-[NSAttributedString valueForKey:](a4, "valueForKey:", *MEMORY[0x1E0CEA0D0]);
      valueBuffer = objc_msgSend(v24, "alignment");
      v57 = (id)objc_msgSend(v24, "tabStops");
      objc_msgSend(v24, "lineSpacing");
      v23 = valueBuffer;
      v56 = v25;
    }
    if (v23 == 3)
    {
      TXParagraphStyle::setJustification(v9, 2);
      v26 = 3;
    }
    else if (v23 == 1)
    {
      v26 = 2;
    }
    else
    {
      v26 = v23 == 2;
    }
    TXParagraphStyle::setAlignment(v9, v26, 0);
    v27 = TXParagraphStyle::getLineSpacingChannel(v9);
    (*(void (**)(uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)v27 + 712))(v27, MEMORY[0x1E0CA2E68], 0, v56);
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v28 = v57;
    v29 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
    if (v29)
    {
      v30 = *(_QWORD *)v53;
      do
      {
        for (i = 0; i != v29; ++i)
        {
          if (*(_QWORD *)v53 != v30)
            objc_enumerationMutation(v28);
          v32 = *(const __CTTextTab **)(*((_QWORD *)&v52 + 1) + 8 * i);
          Location = CTTextTabGetLocation(v32);
          v34 = CTTextTabGetAlignment(v32);
          if (v34 == 1)
            v35 = 2;
          else
            v35 = v34 == 2;
          inserted = TXParagraphStyle::insertTab((uint64_t)v9, v35, Location);
        }
        v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v52, v60, 16, inserted);
      }
      while (v29);
    }
  }
  v37 = (TXParagraphStyle **)*((_QWORD *)this + 2379);
  v38 = *((_QWORD *)this + 2380);
  if ((unint64_t)v37 >= v38)
  {
    v40 = *((_QWORD *)this + 2378);
    v41 = ((uint64_t)v37 - v40) >> 3;
    if ((unint64_t)(v41 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v42 = v38 - v40;
    v43 = v42 >> 2;
    if (v42 >> 2 <= (unint64_t)(v41 + 1))
      v43 = v41 + 1;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v43;
    if (v44)
      v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 19040, v44);
    else
      v45 = 0;
    v46 = (TXParagraphStyle **)&v45[8 * v41];
    v47 = &v45[8 * v44];
    *v46 = v9;
    v39 = v46 + 1;
    v48 = (char *)*((_QWORD *)this + 2379);
    v49 = (char *)*((_QWORD *)this + 2378);
    if (v48 != v49)
    {
      do
      {
        v50 = (TXParagraphStyle *)*((_QWORD *)v48 - 1);
        v48 -= 8;
        *--v46 = v50;
      }
      while (v48 != v49);
      v48 = (char *)*((_QWORD *)this + 2378);
    }
    *((_QWORD *)this + 2378) = v46;
    *((_QWORD *)this + 2379) = v39;
    *((_QWORD *)this + 2380) = v47;
    if (v48)
      operator delete(v48);
  }
  else
  {
    *v37 = v9;
    v39 = v37 + 1;
  }
  *((_QWORD *)this + 2379) = v39;
}

void sub_1B2923628(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4017F5857CLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::applyAllCaps(TXTextLayout *this, __CFString *a2)
{
  char *v2;
  char *v3;
  _QWORD *v5;
  const CMTime *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;

  v2 = (char *)this + 19368;
  v3 = (char *)*((_QWORD *)this + 2422);
  if (v3 != (char *)this + 19368)
  {
    v5 = (_QWORD *)((char *)this + 64408);
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v7 = *((_QWORD *)v3 + 2);
      v8 = *(_QWORD *)(v7 + 8);
      v9 = *(std::__shared_weak_count **)(v7 + 16);
      v21 = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (OZChannel::getValueAsInt((OZChannel *)(v8 + 5504), v6, 0.0))
      {
        v13 = *(_DWORD *)(v7 + 24);
        v12 = *(_DWORD *)(v7 + 28);
        v14 = -[__CFString length](a2, "length", v21, v9);
        v15 = (double)(v12 + v13);
        v16 = fmax((double)v13, 0.0);
        if (v15 >= (double)v14)
          v15 = (double)v14;
        if (v16 <= v15)
          v17 = v16;
        else
          v17 = 0;
        if (v16 <= v15)
          v18 = v15 - v16;
        else
          v18 = 0;
        -[__CFString replaceCharactersInRange:withString:](a2, "replaceCharactersInRange:withString:", v17, v18, objc_msgSend((id)-[__CFString substringWithRange:](a2, "substringWithRange:", v17, v18), "uppercaseStringWithLocale:", *v5));
      }
      if (v9)
      {
        v19 = (unint64_t *)&v9->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
}

void sub_1B29237B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TXTextLayout::applySequenceCharacterOffsets(TXTextLayout *this, __CFString *a2, const CMTime *a3)
{
  std::vector<int>::size_type v6;
  uint64_t i;
  int v8;
  unint64_t v9;
  int ValueAsInt;
  uint64_t v11;
  _QWORD v12[7];
  void *__p;
  void *v14;
  uint64_t v15;
  _QWORD v16[3];
  int v17;
  CMTime v18;
  std::vector<int> v19;

  if (TXTextLayout::hasSequenceCharacterOffset(this))
  {
    v6 = -[__CFString composedCharacterCount](a2, "composedCharacterCount");
    std::vector<int>::vector(&v19, v6);
    for (i = *((_QWORD *)this + 151); (TXTextLayout *)i != (TXTextLayout *)((char *)this + 1200); i = *(_QWORD *)(i + 8))
    {
      v8 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(i + 16) + 616))(*(_QWORD *)(i + 16), 1031, 0, 0) ^ 1;
      if (!v6)
        LOBYTE(v8) = 1;
      if ((v8 & 1) == 0)
      {
        v9 = 0;
        do
        {
          v18 = *a3;
          ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 50624), &v18, (double)v9);
          v19.__begin_[v9++] += ValueAsInt;
        }
        while (v6 != v9);
      }
    }
    v16[0] = 0;
    v16[1] = v16;
    v16[2] = 0x2020000000;
    v17 = 0;
    v11 = -[__CFString length](a2, "length");
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3321888768;
    v12[2] = ___ZN12TXTextLayout29applySequenceCharacterOffsetsEP10__CFStringRK6CMTime_block_invoke;
    v12[3] = &unk_1E64FE230;
    v12[6] = this;
    __p = 0;
    v14 = 0;
    v15 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v19.__begin_, (uint64_t)v19.__end_, v19.__end_ - v19.__begin_);
    v12[4] = a2;
    v12[5] = v16;
    -[__CFString enumerateSubstringsInRange:options:usingBlock:](a2, "enumerateSubstringsInRange:options:usingBlock:", 0, v11, 2, v12);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(v16, 8);
    if (v19.__begin_)
    {
      v19.__end_ = v19.__begin_;
      operator delete(v19.__begin_);
    }
  }
}

void sub_1B2923980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a19, 8);
  v21 = *(void **)(v19 - 88);
  if (v21)
  {
    *(_QWORD *)(v19 - 80) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void ___ZN12TXTextLayout29applySequenceCharacterOffsetsEP10__CFStringRK6CMTime_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;

  v8 = *(_QWORD *)(a1 + 48);
  if (objc_msgSend(a2, "UTF32CharacterCount") == 1)
  {
    v11 = 0;
    if (objc_msgSend(a2, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", &v11, 4, 0, 2348810496, 0, 0, objc_msgSend(a2, "length"), 0))
    {
      if (OZChannel::getValueAsInt((OZChannel *)(v8 + 50776), MEMORY[0x1E0CA2E68], 0.0))
        v9 = v11 + *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
      else
        v9 = TXOffsetUnicodeChar(v11, *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
      v11 = v9;
      v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", &v11, 4, 2617245952);
      objc_msgSend(*(id *)(a1 + 32), "replaceCharactersInRange:withString:", a3, a4, v10);

    }
  }
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
}

_QWORD *__copy_helper_block_e8_56c39_ZTSNSt3__16vectorIiNS_9allocatorIiEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v2, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
}

void __destroy_helper_block_e8_56c39_ZTSNSt3__16vectorIiNS_9allocatorIiEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void TXTextLayout::applyFontToAllTextStyles(TXTextLayout *this, NSString *a2)
{
  OZScene **v4;
  char *v5;
  char *i;
  __CFString *v7;
  __CFString *v8;
  unint64_t *p_info;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  PCString v13[3];
  _BYTE v14[8];

  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v14, v4);
  v5 = (char *)this + 19344;
  for (i = (char *)*((_QWORD *)this + 2419); i != v5; i = (char *)*((_QWORD *)i + 1))
  {
    v8 = (__CFString *)*((_QWORD *)i + 2);
    v7 = (__CFString *)*((_QWORD *)i + 3);
    v13[1].var0 = v8;
    v13[2].var0 = v7;
    if (v7)
    {
      p_info = (unint64_t *)&v7->info;
      do
        v10 = __ldxr(p_info);
      while (__stxr(v10 + 1, p_info));
    }
    PCURL::PCURL((PCURL *)v13, a2);
    (*((void (**)(__CFString *, PCString *, uint64_t))v8->isa + 21))(v8, v13, 1);
    PCString::~PCString(v13);
    if (v7)
    {
      v11 = (unint64_t *)&v7->info;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        (*((void (**)(__CFString *))v7->isa + 2))(v7);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
      }
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v14);
}

void sub_1B2923C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  PCString::~PCString((PCString *)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a12);
  _Unwind_Resume(a1);
}

void TXTextLayout::applyFontScaleToAllTextStyles(TXTextLayout *this, float a2)
{
  OZScene **v4;
  char *v5;
  char *v6;
  double v7;
  const CMTime *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[8];

  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v15, v4);
  v5 = (char *)this + 19344;
  v6 = (char *)*((_QWORD *)this + 2419);
  if (v6 != (char *)this + 19344)
  {
    v7 = a2;
    v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v9 = *((_QWORD *)v6 + 2);
      v10 = (std::__shared_weak_count *)*((_QWORD *)v6 + 3);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      OZChannel3D::setValue((OZChannel3D *)(v9 + 2864), v8, v7, v7, v7);
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v6 = (char *)*((_QWORD *)v6 + 1);
    }
    while (v6 != v5);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v15);
}

void sub_1B2923D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va1);
  _Unwind_Resume(a1);
}

void TXTextLayout::applyFontSizeToAllTextStyles(TXTextLayout *this, float a2)
{
  OZScene **v4;
  char *v5;
  char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[8];

  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v15, v4);
  v5 = (char *)this + 19344;
  v6 = (char *)*((_QWORD *)this + 2419);
  if (v6 != (char *)this + 19344)
  {
    v7 = a2;
    v8 = MEMORY[0x1E0CA2E68];
    do
    {
      v9 = *((_QWORD *)v6 + 2);
      v10 = (std::__shared_weak_count *)*((_QWORD *)v6 + 3);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)(v9 + 1976) + 712))(v9 + 1976, v8, 0, v7);
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v6 = (char *)*((_QWORD *)v6 + 1);
    }
    while (v6 != v5);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v15);
}

void sub_1B2923E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va1);
  _Unwind_Resume(a1);
}

void TXTextLayout::applyAllCapsSizeToAttributedString(TXTextLayout *a1, __CFAttributedString *a2, __CFString *a3, TXTextStyle **a4, _QWORD *a5, CMTime *a6)
{
  uint64_t v12;
  TXTextStyle *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  TXTextStyle *v19;
  TXTextStyle *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  TXTextStyle *v25[2];
  TXTextStyle *v26[2];

  v12 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3500], "lowercaseLetterCharacterSet"), "invertedSet");
  v13 = a4[1];
  v26[0] = *a4;
  v26[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)((char *)v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  TXTextLayout::applyAllCapsSizeToCharacterSet(a1, a2, a3, v12, v26, a5, a6);
  if (v13)
  {
    v16 = (unint64_t *)((char *)v13 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      (*(void (**)(TXTextStyle *))(*(_QWORD *)v13 + 16))(v13);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
    }
  }
  v18 = objc_msgSend(MEMORY[0x1E0CB3500], "lowercaseLetterCharacterSet");
  v19 = *a4;
  v20 = a4[1];
  v25[0] = v19;
  v25[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)((char *)v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  TXTextLayout::applyAllCapsSizeToCharacterSet(a1, a2, a3, v18, v25, a5, a6);
  if (v20)
  {
    v23 = (unint64_t *)((char *)v20 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(TXTextStyle *))(*(_QWORD *)v20 + 16))(v20);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    }
  }
}

void sub_1B2923FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::applyAllCapsSizeToCharacterSet(TXTextLayout *a1, __CFAttributedString *a2, __CFString *a3, uint64_t a4, TXTextStyle **a5, _QWORD *a6, CMTime *a7)
{
  uint64_t result;
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  CFRange RangeOfComposedCharactersAtIndex;
  CFIndex location;
  uint64_t v19;
  TXTextStyle *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  CFRange v26;
  TXTextStyle *v27[2];

  result = -[__CFString rangeOfCharacterFromSet:options:range:](a3, "rangeOfCharacterFromSet:options:range:", a4, 0, *a6, a6[1]);
  if (result != 0x7FFFFFFFFFFFFFFFLL)
  {
    v15 = result;
    v16 = v14;
    do
    {
      RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(a3, v15);
      if (RangeOfComposedCharactersAtIndex.length == v16)
        location = v15;
      else
        location = RangeOfComposedCharactersAtIndex.location;
      v19 = objc_msgSend(MEMORY[0x1E0CB3500], "lowercaseLetterCharacterSet");
      v20 = a5[1];
      v27[0] = *a5;
      v27[1] = v20;
      if (v20)
      {
        v21 = (unint64_t *)((char *)v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v26.location = location;
      v26.length = RangeOfComposedCharactersAtIndex.length;
      TXTextLayout::applyFontToAttributedString(a1, a2, v27, &v26, a7, v19 == a4);
      if (v20)
      {
        v23 = (unint64_t *)((char *)v20 + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          (*(void (**)(TXTextStyle *))(*(_QWORD *)v20 + 16))(v20);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
        }
      }
      result = -[__CFString rangeOfCharacterFromSet:options:range:](a3, "rangeOfCharacterFromSet:options:range:", a4, 0, location + RangeOfComposedCharactersAtIndex.length, -[__CFString length](a3, "length") - (location + RangeOfComposedCharactersAtIndex.length));
      v15 = result;
      v16 = v25;
    }
    while (result != 0x7FFFFFFFFFFFFFFFLL);
  }
  return result;
}

void sub_1B2924134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::applyFontToAttributedString(TXTextLayout *a1, __CFAttributedString *a2, TXTextStyle **a3, CFRange *a4, CMTime *a5, int a6)
{
  __int128 v12;
  TXTextStyle *v13;
  double XMarginScale;
  double YMarginScale;
  TXTextStyle *v16;
  CGFloat v17;
  TXTextStyle *v18;
  float Size;
  int ValueAsInt;
  unsigned __int8 v21;
  CMTime v22;
  CGAffineTransform v23;
  CGAffineTransform sx;
  CMTime v25;
  CGAffineTransform v26;
  CMTime v27;
  double v28;
  double v29;
  CGAffineTransform v30;

  v12 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&v30.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v30.c = v12;
  *(_OWORD *)&v30.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  if (TXTextLayout::scaleAffectsLayout(a1))
  {
    sx.a = 0.0;
    v28 = 0.0;
    v29 = 0.0;
    v13 = *a3;
    v27 = *a5;
    OZChannelScale3D::getValue((TXTextStyle *)((char *)v13 + 2864), &v27, &sx.a, &v29, &v28, 0.0);
    XMarginScale = TXTextLayout::getXMarginScale(a1);
    sx.a = XMarginScale * sx.a;
    YMarginScale = TXTextLayout::getYMarginScale(a1);
    v29 = YMarginScale * v29;
    v26 = v30;
    CGAffineTransformScale(&v30, &v26, sx.a, v29);
  }
  if (a6)
  {
    v16 = *a3;
    v25 = *a5;
    OZChannel::getValueAsDouble((OZChannel *)((char *)v16 + 5656), &v25, 0.0);
    v23 = v30;
    CGAffineTransformScale(&sx, &v23, v17, v17);
    v30 = sx;
  }
  TXTextStyle::getFontName(*a3, (PCString *)&sx);
  v18 = *a3;
  v22 = *a5;
  Size = TXTextStyle::getSize((OZChannel *)v18, &v22, 0.0);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)*a3 + 5352), MEMORY[0x1E0CA2E68], 0.0);
  {
    PCCachedFunctionImpl<PCCFRef<__CTFont const*>,PCString const&,double,BOOL,CGAffineTransform const&>::PCCachedFunctionImpl<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>((uint64_t)&getFontCache(void)::sFontCache, (uint64_t)createFont, 32);
    __cxa_atexit((void (*)(void *))PCCachedFunction<PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::~PCCachedFunction, &getFontCache(void)::sFontCache, &dword_1B2737000);
  }
  PCCachedFunctionImpl<PCCFRef<__CTFont const*>,PCString const&,double,BOOL,CGAffineTransform const&>::operator()((uint64_t)&getFontCache(void)::sFontCache, (const PCString *)&sx, ValueAsInt != 0, (__int128 *)&v30, (const void **)&v29, Size);
  CFAttributedStringSetAttribute(a2, *a4, (CFStringRef)*MEMORY[0x1E0CA8188], *(CFTypeRef *)&v29);
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)&v29);
  PCString::~PCString((PCString *)&sx);
}

void sub_1B29243A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCString a19)
{
  PCString::~PCString(&a19);
  _Unwind_Resume(a1);
}

uint64_t operator<(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  if (*a1 < *a2)
    return 1;
  if (*a1 > *a2)
    return 0;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 < v3)
    return 1;
  if (v2 > v3)
    return 0;
  v4 = a1[2];
  v5 = a2[2];
  if (v4 >= v5
    && (v4 > v5
     || (v6 = a1[3], v7 = a2[3], v6 >= v7)
     && (v6 > v7 || (v8 = a1[4], v9 = a2[4], v8 >= v9) && (v8 > v9 || a1[5] >= a2[5]))))
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

void PCCachedFunctionImpl<PCCFRef<__CTFont const*>,PCString const&,double,BOOL,CGAffineTransform const&>::operator()(uint64_t a1@<X0>, const PCString *a2@<X1>, char a3@<W2>, __int128 *a4@<X3>, const void **a5@<X8>, double a6@<D0>)
{
  os_unfair_lock_s *v12;
  __int128 v13;
  const void *v14;
  const void *v15;
  const void *v16;
  char v17;
  PCString v18;
  double v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v12 = (os_unfair_lock_s *)(a1 + 32);
  v24 = a1 + 32;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 32));
  PCString::PCString(&v18, a2);
  v19 = a6;
  v20 = a3;
  v13 = a4[1];
  v21 = *a4;
  v22 = v13;
  v23 = a4[2];
  v17 = 0;
  PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::findValue(*(_QWORD *)(a1 + 40), &v18, &v17, a5);
  if (!v17)
  {
    std::function<PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::operator()(a1, (uint64_t)a2, a3, (uint64_t)a4, a6);
    v14 = *a5;
    v15 = v16;
    if (*a5 && v14 != v16)
    {
      CFRelease(v14);
      v15 = v16;
    }
    *a5 = v15;
    v16 = 0;
    PCCFRef<__CTLine const*>::~PCCFRef(&v16);
    PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::addValue(*(PCString **)(a1 + 40), &v18, a5, 0);
  }
  PCString::~PCString(&v18);
  PCSpinLock::unlock(v12);
}

void sub_1B2924578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  const void **v11;
  uint64_t v12;

  PCCFRef<__CTLine const*>::~PCCFRef((const void **)&a9);
  PCCFRef<__CTLine const*>::~PCCFRef(v11);
  PCString::~PCString(&a11);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)(v12 - 72));
  _Unwind_Resume(a1);
}

void TXTextLayout::setStringFromAttributedString(TXParagraphStyle ***this, NSAttributedString *a2, NSDictionary *a3)
{
  OZScene **v6;
  TXParagraphStyle **v7;
  TXParagraphStyle **i;
  int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  TXTextStyleManager *v20;
  TXParagraphStyle **j;
  OZSceneNode **v22;
  NSString *v23;
  PCURL *v24;
  UniChar *UniStr;
  unsigned int v26;
  TXParagraphStyle **v27;
  TXParagraphStyle **v28;
  uint64_t v29;
  uint64_t v30;
  TXParagraphStyle **v31;
  std::__shared_weak_count *v32;
  __CFString *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  TXParagraphStyle ***v39;
  double v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  int v44;
  NSUInteger v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t Instance;
  std::__shared_weak_count *v52;
  OZSceneNode **v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  OZChannelBase *HeadingChannel;
  unsigned int v60;
  char v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  TXParagraphStyle *v65;
  TXParagraphStyle **v66;
  TXParagraphStyle **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  PCString *v71;
  TXParagraphStyle **v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  TXParagraphStyle *v81;
  TXParagraphStyle **v82;
  TXParagraphStyle **v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  char *v87;
  PCString *v88;
  uint64_t v89;
  unint64_t v90;
  PCString v91;
  std::__shared_weak_count *v92;
  OZSceneNode **v93;
  std::__shared_weak_count *v94;
  void *__p;
  char *v96;
  char *v97;
  char v98[8];
  _NSRange v99;

  v6 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v98, v6);
  __p = 0;
  v96 = 0;
  v97 = 0;
  v7 = this[2378];
  for (i = this[2379]; v7 != i; ++v7)
  {
    v9 = *(_DWORD *)(TXParagraphStyle::getHeadingChannel(*v7) + 24);
    v10 = v96;
    if (v96 >= v97)
    {
      v12 = (char *)__p;
      v13 = (v96 - (_BYTE *)__p) >> 2;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v15 = v97 - (_BYTE *)__p;
      if ((v97 - (_BYTE *)__p) >> 1 > v14)
        v14 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v97, v16);
        v12 = (char *)__p;
        v10 = v96;
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[4 * v13];
      *(_DWORD *)v18 = v9;
      v11 = v18 + 4;
      while (v10 != v12)
      {
        v19 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v18 - 1) = v19;
        v18 -= 4;
      }
      __p = v18;
      v96 = v11;
      v97 = &v17[4 * v16];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_DWORD *)v96 = v9;
      v11 = v10 + 4;
    }
    v96 = v11;
  }
  v20 = (TXTextStyleManager *)((TXTextStyleManager *(*)(OZSceneNode ***__return_ptr, TXParagraphStyle ***, _QWORD))(*this)[36])(&v93, this, 0);
  if (!v93)
  {
    Instance = TXTextStyleManager::getInstance(v20);
    v53 = *(OZSceneNode ***)(Instance + 8);
    v52 = *(std::__shared_weak_count **)(Instance + 16);
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v55 = __ldxr(p_shared_owners);
      while (__stxr(v55 + 1, p_shared_owners));
    }
    v56 = v94;
    v93 = v53;
    v94 = v52;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  for (j = this[151]; j != (TXParagraphStyle **)(this + 150); j = (TXParagraphStyle **)j[1])
  {
    if (v93)
      v22 = v93 + 2;
    else
      v22 = 0;
    (*(void (**)(TXParagraphStyle *, OZSceneNode **))(*(_QWORD *)j[2] + 152))(j[2], v22);
  }
  TXTextLayout::resetState((TXTextLayout *)this);
  v23 = -[NSAttributedString string](a2, "string");
  v24 = (PCURL *)operator new();
  PCURL::PCURL(v24, v23);
  TXTextLayout::stripUnsupportedXMLChars((PCString *)v24, &v91);
  PCString::set((PCString *)v24, &v91);
  PCString::~PCString(&v91);
  UniStr = PCString::createUniStr((PCString *)v24);
  v26 = PCString::size((PCString *)v24);
  PCString::PCString(&v91, UniStr);
  v88 = (PCString *)v24;
  TXTextLayout::setString((TXTextLayout *)this, &v91, 0);
  PCString::~PCString(&v91);
  v27 = this[2378];
  v28 = this[2379];
  while (v27 != v28)
  {
    v30 = (uint64_t)*v27++;
    v29 = v30;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  TXTextLayout::clearStyleRuns((TXTextLayout *)this);
  while (this[2420])
  {
    v31 = this[2419];
    v33 = (__CFString *)v31[2];
    v32 = (std::__shared_weak_count *)v31[3];
    v91.var0 = v33;
    v92 = v32;
    if (v32)
    {
      v34 = (unint64_t *)&v32->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    ((void (*)(TXParagraphStyle ***, PCString *))(*this)[34])(this, &v91);
    v36 = v92;
    if (v92)
    {
      v37 = (unint64_t *)&v92->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  v39 = this + 2378;
  this[2379] = this[2378];
  std::vector<TXParagraphStyle *>::resize((uint64_t)(this + 2378), 0);
  if (v26)
  {
    v87 = (char *)(this + 2378);
    v41 = 0;
    v42 = 0;
    v43 = 0;
    do
    {
      v44 = UniStr[v41];
      if (v44 == 10 || v44 == 13)
      {
        v46 = v41++ - v42 + 1;
        TXTextLayout::createParagraphStyle((TXTextLayout *)this, v42, v41, -[NSAttributedString attributedSubstringFromRange:](a2, "attributedSubstringFromRange:", v42, v46));
        if (a3)
        {
          v99.location = v42;
          v99.length = v46;
          v40 = tailIntentFromAttributedStringAtRange(a2, v99);
        }
        v43 = 1;
        v42 = v41;
      }
      else
      {
        ++v41;
      }
    }
    while (v41 != v26);
    v47 = v26 - v42;
    if (v42)
      v48 = v42;
    else
      v48 = 0;
    if (!v42)
      v47 = v26 - 1;
    if ((v43 & 1) != 0)
      v49 = v48;
    else
      v49 = v42;
    if ((v43 & 1) != 0)
      v50 = v47;
    else
      v50 = v26;
    v39 = this + 2378;
  }
  else
  {
    v49 = 0;
    v50 = 0;
  }
  TXTextLayout::createParagraphStyle((TXTextLayout *)this, v49, v50 + v49, -[NSAttributedString attributedSubstringFromRange:](a2, "attributedSubstringFromRange:", v49, v50, v40, v87));
  if (v96 != __p)
  {
    HeadingChannel = (OZChannelBase *)TXParagraphStyle::getHeadingChannel(**v39);
    OZChannelBase::setID(HeadingChannel, *(_DWORD *)__p);
  }
  if (v26)
  {
    v60 = 0;
    v61 = 0;
    v89 = 0;
    do
    {
      std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v93, &v91);
      TXTextLayout::createTextStyleFromAttributedString(v62, (OZChannel **)&v91, a2, v60, v26, (unsigned int *)&v89 + 1, &v89);
      v64 = v89;
      v63 = HIDWORD(v89);
      TXTextLayout::addStyle((uint64_t)this, (OZChannelBase **)&v91, v61 & 1);
      v65 = (TXParagraphStyle *)operator new();
      v90 = __PAIR64__(v64, v63);
      TXTextStyleRun::TXTextStyleRun(v65, (uint64_t *)&v91, (double *)&v90);
      v66 = (TXParagraphStyle **)operator new(0x18uLL);
      v66[1] = (TXParagraphStyle *)(this + 2421);
      v66[2] = v65;
      v67 = this[2421];
      *v66 = (TXParagraphStyle *)v67;
      v67[1] = (TXParagraphStyle *)v66;
      this[2421] = v66;
      this[2423] = (TXParagraphStyle **)((char *)this[2423] + 1);
      v68 = v92;
      if (v92)
      {
        v69 = (unint64_t *)&v92->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v60 = v64 + v63;
      v61 = 1;
    }
    while (v64 + v63 < v26);
    v71 = v88;
  }
  else
  {
    std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v93, &v91);
    TXTextLayout::addStyle((uint64_t)this, (OZChannelBase **)&v91, 1);
    v71 = v88;
    v81 = (TXParagraphStyle *)operator new();
    v90 = 0;
    TXTextStyleRun::TXTextStyleRun(v81, (uint64_t *)&v91, (double *)&v90);
    v82 = (TXParagraphStyle **)operator new(0x18uLL);
    v82[1] = (TXParagraphStyle *)(this + 2421);
    v82[2] = v81;
    v83 = this[2421];
    *v82 = (TXParagraphStyle *)v83;
    v83[1] = (TXParagraphStyle *)v82;
    this[2421] = v82;
    this[2423] = (TXParagraphStyle **)((char *)this[2423] + 1);
    v84 = v92;
    if (v92)
    {
      v85 = (unint64_t *)&v92->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
  }
  v72 = this[2419];
  v73 = (std::__shared_weak_count *)v72[3];
  v91.var0 = (__CFString *)v72[2];
  v92 = v73;
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  TXTextLayout::applyKerningAndTrackingFromAttributedString((TXTextLayout *)this, a2);
  TXTextLayout::updateDisplayString((PCString *)this, MEMORY[0x1E0CA2E68]);
  TXTextLayout::rebuildParagraphStyles((PCString *)this);
  TXTextLayout::setAllParagraphsDirty(this);
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::clear((uint64_t)(this + 8032));
  if (UniStr)
    MEMORY[0x1B5E29170](UniStr, 0x1000C40BDFB0063);
  PCString::~PCString(v71);
  MEMORY[0x1B5E29170]();
  ((void (*)(char *))this[25][29])((char *)this + 200);
  if (v73)
  {
    v76 = (unint64_t *)&v73->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v78 = v94;
  if (v94)
  {
    v79 = (unint64_t *)&v94->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (__p)
  {
    v96 = (char *)__p;
    operator delete(__p);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v98);
}

void sub_1B2924D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a20);
  _Unwind_Resume(a1);
}

void TXTextLayout::stripUnsupportedXMLChars(PCString *this@<X0>, PCString *a2@<X8>)
{
  __CFString *v4;
  const __CFString *v5;

  v4 = (__CFString *)PCString::ns_str(this);
  v5 = (const __CFString *)PCReplaceUnsupportedXMLChars(&v4->isa, &stru_1E65EDDA0.isa);
  a2->var0 = 0;
  PCString::set(a2, v5);
}

double tailIntentFromAttributedStringAtRange(NSAttributedString *a1, _NSRange a2)
{
  uint64_t v3;
  double valueBuffer;
  _NSRange v6;

  v6 = a2;
  valueBuffer = 0.0;
  v3 = *MEMORY[0x1E0CA85A0];
  if (!-[NSAttributedString attribute:atIndex:effectiveRange:](a1, "attribute:atIndex:effectiveRange:", *MEMORY[0x1E0CA85A0], 0, &v6))return 0.0;
  CTParagraphStyleGetValueForSpecifier((CTParagraphStyleRef)-[NSAttributedString attribute:atIndex:effectiveRange:](a1, "attribute:atIndex:effectiveRange:", v3, 0, &v6), kCTParagraphStyleSpecifierTailIndent, 8uLL, &valueBuffer);
  return valueBuffer;
}

void TXTextLayout::applyKerningAndTrackingFromAttributedString(TXTextLayout *this, NSAttributedString *a2)
{
  NSUInteger v4;
  uint64_t v5;
  NSUInteger v6;
  uint64_t v7;
  _QWORD v8[6];
  _QWORD v9[7];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  TXTextLayout::resetKernings(this);
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v4 = -[NSAttributedString length](a2, "length");
  v5 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN12TXTextLayout43applyKerningAndTrackingFromAttributedStringEP18NSAttributedString_block_invoke;
  v9[3] = &unk_1E64FE268;
  v9[5] = &v10;
  v9[6] = this;
  v9[4] = a2;
  -[NSAttributedString enumerateAttribute:inRange:options:usingBlock:](a2, "enumerateAttribute:inRange:options:usingBlock:", CFSTR("MotionTextSimpleValuesAttribute"), 0, v4, 0, v9);
  if (!*((_BYTE *)v11 + 24))
  {
    v6 = -[NSAttributedString length](a2, "length");
    v7 = *MEMORY[0x1E0CA8588];
    v8[0] = v5;
    v8[1] = 3221225472;
    v8[2] = ___ZN12TXTextLayout43applyKerningAndTrackingFromAttributedStringEP18NSAttributedString_block_invoke_2;
    v8[3] = &unk_1E64FE290;
    v8[4] = a2;
    v8[5] = this;
    -[NSAttributedString enumerateAttribute:inRange:options:usingBlock:](a2, "enumerateAttribute:inRange:options:usingBlock:", v7, 0, v6, 0, v8);
  }
  _Block_object_dispose(&v10, 8);
}

void sub_1B2924FC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void ___ZN12TXTextLayout43applyKerningAndTrackingFromAttributedStringEP18NSAttributedString_block_invoke(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  CFIndex v11;
  CFRange RangeOfComposedCharactersAtIndex;
  float v13;
  uint64_t v14;
  void *v15;
  CMTime *v16;
  float Size;
  float v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  CMTime v22;
  CMTime v23;
  TXTextStyle *p_location;
  std::__shared_weak_count *v25;
  CFIndex location;

  if (a2)
  {
    v8 = *(_QWORD *)(a1 + 48);
    v9 = objc_msgSend(a2, "objectForKey:", CFSTR("kerning"));
    if (v9)
    {
      if (a3 < a3 + a4)
      {
        v10 = (void *)v9;
        v11 = a3;
        do
        {
          RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex((CFStringRef)objc_msgSend(*(id *)(a1 + 32), "string"), v11);
          objc_msgSend(v10, "floatValue");
          location = RangeOfComposedCharactersAtIndex.location;
          p_location = (TXTextStyle *)&location;
          *((double *)std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)(v8 + 19224), &location, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_location)+ 5) = v13;
          v11 = RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length;
        }
        while (RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length < a3 + a4);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    }
    v14 = objc_msgSend(a2, "objectForKey:", CFSTR("tracking"));
    if (v14)
    {
      v15 = (void *)v14;
      TXTextLayout::getStyleAtCharOffset(v8, a3, &p_location);
      v16 = (CMTime *)MEMORY[0x1E0CA2E68];
      v23 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      Size = TXTextStyle::getSize((OZChannel *)p_location, &v23, 0.0);
      objc_msgSend(v15, "floatValue");
      v22 = *v16;
      OZChannel::setValue((OZChannel *)((char *)p_location + 49416), &v22, v18 / Size, 0);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      v19 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
}

void sub_1B29251C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::readContentsOfFile(uint64_t a1, const __CFURL **a2)
{
  OZScene **v4;
  char *v5;
  TXParagraphStyle *v6;
  const __CFString *v7;
  const void *v8;
  PCURL *v9;
  UniChar *UniStr;
  int v11;
  PCURL *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t i;
  int v17;
  OZScene *v19;
  OZPreferenceManager *v20;
  int v21;
  int v22;
  OZPreferenceManager *v23;
  float v24;
  float v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  char *StringPtr;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  CMTime v43;
  double v44;
  double v45;
  PCString v46;
  int v47;
  int v48;
  CGColorSpace *v49;
  PCString v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[8];
  PCString v56;
  _BYTE v57[8];

  v4 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v57, v4);
  *(_BYTE *)(a1 + 18992) = 1;
  *(_QWORD *)(a1 + 19032) = *(_QWORD *)(a1 + 19024);
  std::__list_imp<unsigned int>::clear((_QWORD *)(a1 + 19368));
  v5 = *(char **)(a1 + 19024);
  v6 = (TXParagraphStyle *)operator new();
  TXParagraphStyle::TXParagraphStyle(v6, (TXTextLayout *)a1);
  v46.var0 = (__CFString *)v6;
  std::vector<TXParagraphStyle *>::insert(a1 + 19024, v5, &v46);
  PCURL::getExtension(a2, (PCURL *)&v56);
  PCString::PCString(&v46, "rtf");
  LODWORD(v5) = PCString::caseInsensitiveCompare(&v56, &v46);
  PCString::~PCString(&v46);
  if ((_DWORD)v5)
  {
    v53 = 0;
    v54 = 0;
    PCURL::getAsFileSystemString(a2, &v46);
    v7 = PCString::ns_str(&v46);
    PCString::~PCString(&v46);
    v8 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithContentsOfFile:usedEncoding:error:", v7, &v54, &v53);
    v9 = (PCURL *)operator new();
    PCURL::PCURL(v9, v8);
    TXTextLayout::stripUnsupportedXMLChars((PCString *)v9, &v46);
    PCString::set((PCString *)v9, &v46);
    PCString::~PCString(&v46);
    UniStr = PCString::createUniStr((PCString *)v9);
    v11 = PCString::size((PCString *)v9);
    PCString::PCString(&v46, UniStr);
    TXTextLayout::setString((TXTextLayout *)a1, &v46, 1);
    PCString::~PCString(&v46);
    PCString::~PCString((PCString *)v9);
    MEMORY[0x1B5E29170]();
    TXTextLayout::getCurrentStyleForInsertion(a1, &v51);
    if (*(_QWORD *)(a1 + 19384))
    {
      TXTextLayout::updateStyleRunsAfterTextInsert(a1, 0, v11);
    }
    else
    {
      v13 = (_QWORD *)operator new();
      LODWORD(v46.var0) = 0;
      HIDWORD(v46.var0) = v11;
      TXTextStyleRun::TXTextStyleRun(v13, &v51, (double *)&v46);
      v14 = operator new(0x18uLL);
      v14[1] = a1 + 19368;
      v14[2] = v13;
      v15 = *(_QWORD *)(a1 + 19368);
      *v14 = v15;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)(a1 + 19368) = v14;
      ++*(_QWORD *)(a1 + 19384);
    }
    TXTextLayout::updateParagraphStylesAfterTextInsert((TXTextLayout *)a1, 0, v11);
    if (v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v17 = UniStr[i];
        if (v17 == 13 || v17 == 10)
          TXTextLayout::updateParagraphStylesAfterNewLineInsert((TXTextLayout *)a1, i);
      }
    }
    TXTextLayout::setLayoutMethod((TXTextLayout *)a1, 1);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 200) + 272))(a1 + 200))
      v19 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 200) + 272))(a1 + 200);
    else
      v19 = (OZScene *)*((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
    v20 = OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v46, (OZScene *)((char *)v19 + 336));
    v21 = v48;
    v22 = v47;
    v23 = (OZPreferenceManager *)OZPreferenceManager::Instance(v20);
    OZPreferenceManager::getSafeZonesTitlePercentage(v23);
    v25 = v24;
    v26 = (*(double (**)(OZScene *))(*(_QWORD *)v19 + 96))(v19);
    v44 = 0.0;
    v45 = 0.0;
    memset(&v43, 0, sizeof(v43));
    OZScene::getCurrentTime(v19, (__n128 *)&v43);
    OZTransformNode::getTranslation((OZTransformNode *)(a1 + 200), &v45, &v44, &v43);
    v45 = v26 * v45;
    v41 = 0.0;
    v42 = 0.0;
    v40 = 0.0;
    OZTransformNode::getPivot((OZTransformNode *)(a1 + 200), &v42, &v41, &v40, &v43);
    v27 = v44;
    v28 = v45;
    v29 = v41;
    v30 = v42;
    OZChannel::setMax((OZChannel *)(a1 + 24272), 1.79769313e308);
    OZChannel::setMin((OZChannel *)(a1 + 24272), -1.79769313e308);
    OZChannel::setMax((OZChannel *)(a1 + 24424), 1.79769313e308);
    OZChannel::setMin((OZChannel *)(a1 + 24424), -1.79769313e308);
    OZChannel::setMax((OZChannel *)(a1 + 24728), 1.79769313e308);
    OZChannel::setMin((OZChannel *)(a1 + 24728), -1.79769313e308);
    OZChannel::setMax((OZChannel *)(a1 + 24576), 1.79769313e308);
    OZChannel::setMin((OZChannel *)(a1 + 24576), -1.79769313e308);
    OZChannel::setValue((OZChannel *)(a1 + 24272), MEMORY[0x1E0CA2E68], 0.0, 0);
    OZChannel::setValue((OZChannel *)(a1 + 24424), MEMORY[0x1E0CA2E68], v26 * (float)(v25 * (float)v22) * 0.5 - v28 + v30 - (v26 * (float)(v25 * (float)v22) * -0.5 - v28 + v30), 0);
    OZChannel::setValue((OZChannel *)(a1 + 24728), MEMORY[0x1E0CA2E68], (double)v21 * -0.5 - v27 + v29 - ((double)v21 * 0.5 - v27 + v29), 0);
    OZChannel::setValue((OZChannel *)(a1 + 24576), MEMORY[0x1E0CA2E68], 0.0, 0);
    TXTextLayout::resetKernings((TXTextLayout *)a1);
    free(UniStr);
    v46.var0 = (__CFString *)&off_1E658F368;
    PCString::~PCString(&v50);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v49);
    v31 = v52;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  else
  {
    v12 = PCURL::PCURL((PCURL *)v55, (const PCURL *)a2);
    PCURL::~PCURL(v12);
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 59024) = _Q0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 544))(a1);
  StringPtr = TXChannelString::getStringPtr((TXChannelString *)(a1 + 19048));
  v39 = PCString::size((PCString *)StringPtr);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 240))(a1, 0, v39);
  *(_BYTE *)(a1 + 52360) = 1;
  PCString::~PCString(&v56);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v57);
}

void sub_1B2925860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCString a18)
{
  uint64_t v18;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v18 - 184);
  PCString::~PCString((PCString *)(v18 - 144));
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v18 - 136));
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::isPunctuationSeparatedByLineBreaks(uint64_t **this)
{
  OZScene **v2;
  uint64_t *v3;
  uint64_t v4;
  const __CFAttributedString *v5;
  CFStringRef String;
  uint64_t v7;
  const __CFString *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  CFIndex v23;
  CFIndex Length;
  UniChar CharacterAtIndex;
  int v26;
  uint64_t v27;
  uint64_t *v29;
  char *__p;
  char *v31;
  char *v32;
  char v33[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v33, v2);
  v3 = this[2378];
  v29 = this[2379];
  while (v3 != v29)
  {
    v4 = *v3;
    v5 = *(const __CFAttributedString **)(*v3 + 952);
    if (v5)
    {
      String = CFAttributedStringGetString(v5);
      v7 = *(unsigned int *)(v4 + 876);
      if (!(_DWORD)v7)
        break;
      v8 = String;
      v9 = 0;
      v10 = 0;
      __p = 0;
      v31 = 0;
      v32 = 0;
      do
      {
        v11 = *(_QWORD *)(v4 + 912);
        if (v11)
          LODWORD(v11) = *(_DWORD *)(v11 + 4 * v10);
        v12 = v11 - *(_DWORD *)(v4 + 856);
        if (v9 >= v32)
        {
          v13 = __p;
          v14 = (v9 - __p) >> 2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v16 = v32 - __p;
          if ((v32 - __p) >> 1 > v15)
            v15 = v16 >> 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v32, v17);
            v13 = __p;
            v9 = v31;
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[4 * v14];
          *(_DWORD *)v19 = v12;
          v20 = v19 + 4;
          while (v9 != v13)
          {
            v21 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v19 - 1) = v21;
            v19 -= 4;
          }
          __p = v19;
          v32 = &v18[4 * v17];
          if (v13)
            operator delete(v13);
          v9 = v20;
        }
        else
        {
          *(_DWORD *)v9 = v12;
          v9 += 4;
        }
        v31 = v9;
        ++v10;
      }
      while (v10 != v7);
      v22 = __p;
      if (__p == v9)
      {
        operator delete(v9);
      }
      else
      {
        while (1)
        {
          v23 = *(unsigned int *)v22;
          Length = CFStringGetLength(v8);
          CharacterAtIndex = CFStringGetCharacterAtIndex(v8, v23);
          if (Length > v23 && TXCharacterSetIsPunctuation(CharacterAtIndex))
            break;
          v22 += 4;
          if (v22 == v9)
          {
            v26 = 1;
            goto LABEL_32;
          }
        }
        v26 = 0;
LABEL_32:
        if (__p)
        {
          operator delete(__p);
          if ((v26 & 1) == 0)
            goto LABEL_39;
        }
        else if (!v26)
        {
LABEL_39:
          v27 = 1;
          goto LABEL_38;
        }
      }
    }
    ++v3;
  }
  v27 = 0;
LABEL_38:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v33);
  return v27;
}

void sub_1B2925B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a14);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::wordsFitInParagraphWidth(uint64_t **this, double a2)
{
  OZScene **v4;
  uint64_t *v5;
  uint64_t *v6;
  const __CFAllocator *v7;
  uint64_t v8;
  const __CFAttributedString *v9;
  CTTypesetterRef v10;
  const __CFString *String;
  __CFStringTokenizer *v12;
  CFRange CurrentTokenRange;
  uint64_t v14;
  _BYTE v16[8];
  CFRange v17;

  v4 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v16, v4);
  v5 = this[2378];
  v6 = this[2379];
  if (v5 != v6)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v8 = *v5;
      v9 = *(const __CFAttributedString **)(*v5 + 952);
      if (v9)
      {
        v10 = CTTypesetterCreateWithAttributedString(v9);
        String = CFAttributedStringGetString(*(CFAttributedStringRef *)(v8 + 952));
        v17.length = CFStringGetLength(String);
        v17.location = 0;
        v12 = CFStringTokenizerCreate(v7, String, v17, 4uLL, 0);
        while (CFStringTokenizerAdvanceToNextToken(v12))
        {
          CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v12);
          if (CTTypesetterSuggestLineBreak(v10, CurrentTokenRange.location, a2) < CurrentTokenRange.length)
          {
            CFRelease(v12);
            CFRelease(v10);
            v14 = 0;
            goto LABEL_11;
          }
        }
        CFRelease(v12);
        CFRelease(v10);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  v14 = 1;
LABEL_11:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v16);
  return v14;
}

void sub_1B2925CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::linesFitInParagraphWidth(TXTextLayout *this, double a2)
{
  uint64_t i;
  uint64_t v3;
  double *v4;

  for (i = *((_QWORD *)this + 2378); ; i += 8)
  {
    if (i == *((_QWORD *)this + 2379))
      return 1;
    v3 = *(unsigned int *)(*(_QWORD *)i + 876);
    if ((_DWORD)v3)
      break;
LABEL_7:
    ;
  }
  v4 = (double *)(*(_QWORD *)(*(_QWORD *)i + 888) + 48);
  while (*v4 <= a2)
  {
    v4 += 8;
    if (!--v3)
      goto LABEL_7;
  }
  return 0;
}

uint64_t TXTextLayout::isEmoji(uint64_t **this, int a2)
{
  char *v4;
  OZScene **v5;
  uint64_t *i;
  int v7;
  TXTextObject **j;
  uint64_t isEmoji;
  int v11;
  _BYTE v12[15];
  int *v13;

  v4 = (char *)(this + 7353);
  v5 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v12, v5);
  for (i = (uint64_t *)*((_QWORD *)v4 + 674); i; i = (uint64_t *)*i)
  {
    v7 = *((_DWORD *)i + 7);
    if (v7 <= a2)
    {
      if (v7 >= a2)
      {
        v11 = a2;
        v13 = &v11;
        isEmoji = *((_BYTE *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(this + 8026, &v11, (uint64_t)&std::piecewise_construct, &v13)+ 32) != 0;
        goto LABEL_13;
      }
      ++i;
    }
  }
  for (j = *(TXTextObject ***)v4; ; j += 2)
  {
    if (j == *((TXTextObject ***)v4 + 1))
    {
      isEmoji = 0;
      goto LABEL_13;
    }
    if (*((_DWORD *)*j + 184) == a2)
      break;
  }
  isEmoji = TXTextObject::isEmoji(*j);
LABEL_13:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v12);
  return isEmoji;
}

void sub_1B2925E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::isAllWhitespace(PCString *this)
{
  OZScene **v2;
  uint64_t v3;
  PCString v5;
  _BYTE v6[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v6, v2);
  TXChannelString::getString(this + 2381, &v5);
  v3 = -[__CFString isAllWhitespace]((id)PCString::ns_str(&v5), "isAllWhitespace");
  PCString::~PCString(&v5);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v6);
  return v3;
}

void sub_1B2925EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::computeWordIndices(PCString *this)
{
  PCString *v2;
  OZScene **v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD v15[9];
  _QWORD v16[3];
  int var0;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  double (*v25)(_QWORD *, _QWORD *);
  uint64_t (*v26)(uint64_t);
  void *v27;
  _QWORD v28[6];
  _QWORD v29[3];
  char v30;
  _BYTE v31[15];
  PCString v32;

  v2 = this + 7622;
  v3 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v31, v3);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v2, &v2[1].var0->isa);
  v2->var0 = (__CFString *)&v2[1];
  v2[2].var0 = 0;
  v2[1].var0 = 0;
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x2020000000;
  v30 = 0;
  v22 = 0;
  v23 = &v22;
  v24 = 0x6012000000;
  v25 = __Block_byref_object_copy__13;
  v26 = __Block_byref_object_dispose__13;
  v27 = &unk_1B3948866;
  memset(v28, 0, sizeof(v28));
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  v16[0] = 0;
  v16[1] = v16;
  var0 = (int)v2[423].var0;
  v16[2] = 0x2020000000;
  TXChannelString::getString(this + 2381, &v32);
  v4 = (__CFString *)PCString::ns_str(&v32);
  PCString::~PCString(&v32);
  v5 = -[__CFString length](v4, "length");
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___ZN12TXTextLayout18computeWordIndicesEv_block_invoke;
  v15[3] = &unk_1E64FE2B8;
  v15[4] = v16;
  v15[5] = v29;
  v15[6] = &v22;
  v15[7] = &v18;
  v15[8] = this;
  -[__CFString enumerateSubstringsInRange:options:usingBlock:](v4, "enumerateSubstringsInRange:options:usingBlock:", 0, v5, 3, v15);
  v6 = v23;
  v7 = v23[11];
  if (v7)
  {
    do
    {
      v8 = v7 - 1;
      v9 = (unint64_t *)(*(_QWORD *)(v6[7] + (((unint64_t)(v6[10] + v8) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*((_BYTE *)v6 + 80) + v8));
      v10 = *v9;
      v11 = v9[1];
      v6[11] = v8;
      std::deque<PVLoadedEffectItem>::__maybe_remove_back_spare[abi:ne180100](v6 + 6, 1);
      if (v10 < v11 + v10)
      {
        do
        {
          v12 = *((_DWORD *)v19 + 6);
          v14 = v10;
          v32.var0 = (__CFString *)&v14;
          *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v2, &v14, (uint64_t)&std::piecewise_construct, (unsigned int **)&v32)+ 8) = v12;
          LODWORD(v10) = v10 + 1;
          --v11;
        }
        while (v11);
      }
      v13 = *((_DWORD *)v19 + 6) + 1;
      *((_DWORD *)v19 + 6) = v13;
      v6 = v23;
      v7 = v23[11];
    }
    while (v7);
  }
  else
  {
    v13 = *((_DWORD *)v19 + 6);
  }
  HIDWORD(v2[354].var0) = v13;
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  std::deque<PCHash128>::~deque[abi:ne180100](v28);
  _Block_object_dispose(v29, 8);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v31);
}

void sub_1B2926184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _QWORD *v28;
  uint64_t v29;

  PCString::~PCString((PCString *)(v29 - 88));
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  std::deque<PCHash128>::~deque[abi:ne180100](v28);
  _Block_object_dispose((const void *)(v29 - 136), 8);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v29 - 104));
  _Unwind_Resume(a1);
}

double __Block_byref_object_copy__13(_QWORD *a1, _QWORD *a2)
{
  double result;

  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__13(uint64_t a1)
{
  return std::deque<PCHash128>::~deque[abi:ne180100]((_QWORD *)(a1 + 48));
}

void ___ZN12TXTextLayout18computeWordIndicesEv_block_invoke(_QWORD *a1, int a2, int a3, int a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  char *DirectionalRun;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t **v19;
  int v20;
  int v21;
  __n128 v22;
  unsigned int *v23;

  v6 = a6;
  v7 = a5;
  v22.n128_u64[0] = a5;
  v22.n128_u64[1] = a6;
  v9 = a1[8];
  DirectionalRun = TXTextLayout::getDirectionalRun((TXTextLayout *)v9, a5);
  if (DirectionalRun)
    v11 = DirectionalRun[16] ^ 1;
  else
    v11 = 1;
  if (v11 != *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = v11 != *(_DWORD *)(v9 + 64360);
  if (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    std::deque<_NSRange>::push_back((_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48), &v22);
  }
  else
  {
    if (v11 != *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
    {
      v12 = *(_QWORD **)(a1[6] + 8);
      v13 = v12[11];
      if (v13)
      {
        do
        {
          v14 = v13 - 1;
          v15 = (unint64_t *)(*(_QWORD *)(v12[7]
                                               + (((unint64_t)(v12[10] + v14) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*((_BYTE *)v12 + 80) + v14));
          v16 = *v15;
          v17 = v15[1];
          v12[11] = v14;
          std::deque<PVLoadedEffectItem>::__maybe_remove_back_spare[abi:ne180100](v12 + 6, 1);
          if (v16 < v17 + v16)
          {
            do
            {
              v18 = *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
              v21 = v16;
              v23 = (unsigned int *)&v21;
              *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v9 + 60976), &v21, (uint64_t)&std::piecewise_construct, &v23)+ 8) = v18;
              LODWORD(v16) = v16 + 1;
              --v17;
            }
            while (v17);
          }
          ++*(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
          v12 = *(_QWORD **)(a1[6] + 8);
          v13 = v12[11];
        }
        while (v13);
        v6 = v22.n128_u64[1];
        v7 = v22.n128_u64[0];
      }
    }
    if (v7 < v6 + v7)
    {
      v19 = (uint64_t **)(v9 + 60976);
      do
      {
        v20 = *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
        v21 = v7;
        v23 = (unsigned int *)&v21;
        *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v19, &v21, (uint64_t)&std::piecewise_construct, &v23)+ 8) = v20;
        LODWORD(v7) = v7 + 1;
        --v6;
      }
      while (v6);
    }
    ++*(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v11;
}

CFTypeRef TXTextLayout::setLocale(TXTextLayout *this, CFTypeRef cf)
{
  _QWORD *v3;
  const void *v4;

  v3 = (_QWORD *)((char *)this + 64408);
  v4 = (const void *)*((_QWORD *)this + 8051);
  if (v4)
    CFRelease(v4);
  *v3 = cf;
  return CFRetain(cf);
}

void TXTextLayout::setLocaleIdentifier(TXTextLayout *this, const __CFString *a2)
{
  CFLocaleRef v3;

  v3 = CFLocaleCreate(0, a2);
  TXTextLayout::setLocale(this, v3);
  CFRelease(v3);
}

CFTypeRef TXTextLayout::useCurrentLocale(TXTextLayout *this)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLanguages");
  if (objc_msgSend(v2, "count"))
    return (CFTypeRef)(*(uint64_t (**)(TXTextLayout *, uint64_t))(*(_QWORD *)this + 136))(this, objc_msgSend(v2, "firstObject"));
  else
    return TXTextLayout::setLocale(this, (CFTypeRef)objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale"));
}

void TXTextLayout::updateStyleNames(TXTextLayout *this)
{
  int v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  __CFString *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  const __CFString *v12;
  uint64_t v13;
  const __CFString *v14;
  unint64_t *v15;
  unint64_t v16;
  PCString v17;
  PCString v18;
  std::__shared_weak_count *v19;
  PCString v20;

  PCURL::PCURL((PCURL *)&v20, CFSTR("Object Name Number"));
  PCString::PCString(&v18, "%@");
  v2 = PCString::find(&v20, &v18);
  PCString::~PCString(&v18);
  PCString::PCString(&v18, "%d");
  v3 = PCString::find(&v20, &v18);
  PCString::~PCString(&v18);
  v4 = (_QWORD *)*((_QWORD *)this + 2422);
  if (v4 != (_QWORD *)((char *)this + 19368))
  {
    v5 = 0;
    do
    {
      v6 = v4[2];
      v8 = *(__CFString **)(v6 + 8);
      v7 = *(std::__shared_weak_count **)(v6 + 16);
      v18.var0 = v8;
      v19 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if ((_DWORD)v5)
      {
        v11 = (void *)MEMORY[0x1E0CB3940];
        v12 = PCString::ns_str(&v20);
        PCURL::PCURL((PCURL *)&v17, CFSTR("Text Style Name"));
        if (v2 <= v3)
          v13 = objc_msgSend(v11, "stringWithValidatedFormat:validFormatSpecifiers:error:", v12, CFSTR("%@ %d"), 0, PCString::cf_str(&v17), v5);
        else
          v13 = objc_msgSend(v11, "stringWithValidatedFormat:validFormatSpecifiers:error:", v12, CFSTR("%d %@"), 0, v5, PCString::cf_str(&v17));
        v14 = (const __CFString *)v13;
        PCString::~PCString(&v17);
        v17.var0 = 0;
        PCString::set(&v17, v14);
        (*((void (**)(char **, PCString *, _QWORD))v8->data + 15))(&v8->data, &v17, 0);
      }
      else
      {
        PCURL::PCURL((PCURL *)&v17, CFSTR("Text Style Name"));
        (*((void (**)(char **, PCString *, _QWORD))v8->data + 15))(&v8->data, &v17, 0);
      }
      PCString::~PCString(&v17);
      if (v7)
      {
        v15 = (unint64_t *)&v7->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = (v5 + 1);
      v4 = (_QWORD *)v4[1];
    }
    while (v4 != (_QWORD *)((char *)this + 19368));
  }
  PCString::~PCString(&v20);
}

void sub_1B29267B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12, uint64_t a13, PCString a14)
{
  PCString::~PCString(&a12);
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

uint64_t libraryPath(void)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "pathWithComponents:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", NSHomeDirectory(), CFSTR("Library"), CFSTR("Application Support"), CFSTR("Motion"), CFSTR("Environment Maps"), 0));
}

uint64_t bundleResourcePath(void)
{
  __CFBundle *BundleWithIdentifier;
  const __CFURL *v1;
  __CFString *v2;
  uint64_t v3;

  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.ozone.framework"));
  v1 = CFBundleCopyBundleURL(BundleWithIdentifier);
  v2 = (__CFString *)CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  v3 = objc_msgSend((id)-[__CFString stringByAppendingPathComponent:](v2, "stringByAppendingPathComponent:", CFSTR("Resources")), "stringByAppendingPathComponent:", CFSTR("EnvironmentMap"));
  CFRelease(v2);
  CFRelease(v1);
  return v3;
}

uint64_t TXTextLayout::collectInternal3DTextAssets(TXTextLayout *this)
{
  uint64_t *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  const void **v12;
  const void **v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  OZ3DExtrusionProperties *v22;
  const char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __CFString *v30;
  uint64_t v31;
  __CFString *v32;
  uint64_t v33;
  __CFString *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)((char *)this + 58824);
  v2 = (id)objc_opt_new();
  v3 = *v1;
  v4 = v1[1];
  v51 = 0;
  v52 = 0;
  if (v3 != v4)
  {
    v5 = 1;
    while (1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)v3 + 264);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        v8 = *(std::__shared_weak_count **)(v6 + 16);
        v49 = (_QWORD *)v7;
        v50 = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
      }
      else
      {
        v7 = 0;
        v49 = 0;
        v50 = 0;
      }
      v11 = v51;
      if (!v51)
      {
        std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v51, (uint64_t *)&v49);
        v7 = (uint64_t)v49;
        v11 = v51;
      }
      if ((_QWORD *)v7 != v11)
        break;
      if ((v5 & 1) != 0)
        goto LABEL_14;
LABEL_44:
      v36 = v50;
      if (v50)
      {
        v37 = (unint64_t *)&v50->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v5 = 0;
      v3 += 16;
      if (v3 == v4)
        goto LABEL_50;
    }
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v51, (uint64_t *)&v49);
    v11 = v49;
LABEL_14:
    v12 = (const void **)v11[60];
    v13 = (const void **)v11[61];
    if (v12 != v13)
    {
      do
      {
        if (*v12)
        {
          if (v14)
          {
            v15 = (uint64_t *)v14[178];
            if (v15)
            {
              v17 = *v15;
              v16 = v15[1];
              while (v16 != v17)
              {
                v18 = *(_QWORD *)(v16 - 8);
                v16 -= 8;
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v18 + 792))(&v54);
                v19 = (_QWORD *)v54;
                v20 = (_QWORD *)v55;
                while (v19 != v20)
                {
                  if (*v19)
                    objc_msgSend(v2, "addObject:");
                  ++v19;
                }
                v53 = (void **)&v54;
                std::vector<PCNSRef<NSURL *>>::__destroy_vector::operator()[abi:ne180100](&v53);
              }
            }
          }
        }
        ++v12;
      }
      while (v12 != v13);
      v11 = v49;
    }
    v21 = (*(uint64_t (**)(_QWORD *))(*v11 + 272))(v11);
    if (OZChannelBase::isEnabled((OZChannelBase *)(v21 + 3560), 0, 1))
    {
      if (OZ3DExtrusionProperties::environmentType((OZ3DExtrusionProperties *)v21) == 2)
      {
        v23 = OZLayeredMaterial::envMapFilenameAndNormalization((OZLayeredMaterial *)v21, v22);
        if (*v23)
        {
          v24 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v23);
          v44 = v4;
          v45 = v3;
          v54 = objc_msgSend((id)bundleResourcePath(), "stringByAppendingPathComponent:", objc_msgSend(v24, "lowercaseString"));
          v25 = libraryPath();
          v26 = 0;
          v55 = v25;
          do
          {
            v27 = 0;
            v46 = v26;
            v28 = *(&v54 + v26);
            do
            {
              v29 = 0;
              v47 = v27;
              v30 = off_1E64FE338[v27];
              do
              {
                v31 = 0;
                v48 = v29;
                v32 = off_1E64FE318[v29];
                do
                {
                  v33 = 0;
                  v34 = off_1E64FE308[v31];
                  do
                  {
                    v35 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@_%@_q%@_%@.%@"), v28, v24, v32, v30, off_1E64FE2D8[v33], v34);
                    if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", v35))objc_msgSend(v2, "addObject:", objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v35));
                    ++v33;
                  }
                  while (v33 != 6);
                  ++v31;
                }
                while (v31 != 2);
                v29 = v48 + 1;
              }
              while (v48 != 3);
              v27 = v47 + 1;
            }
            while (v47 != 3);
            v26 = v46 + 1;
          }
          while (v46 != 1);
          v4 = v44;
          v3 = v45;
        }
      }
    }
    goto LABEL_44;
  }
LABEL_50:
  v39 = objc_msgSend(v2, "allObjects");
  v40 = v52;
  if (v52)
  {
    v41 = (unint64_t *)&v52->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v39;
}

void sub_1B2926CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25)
{
  unint64_t *p_shared_owners;
  unint64_t v27;

  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

id newNSShadow(double a1, double a2, double a3, double a4, double a5, double a6, PCColor *a7)
{
  id v14;
  __double2 v15;
  CGColorSpace *DeviceRGB;
  uint64_t v18;
  uint64_t v19;

  v14 = objc_alloc_init(MEMORY[0x1E0CEA240]);
  v15 = __sincos_stret(a2);
  objc_msgSend(v14, "setShadowOffset:", v15.__cosval * (a1 * a5), v15.__sinval * (a1 * a6));
  objc_msgSend(v14, "setShadowBlurRadius:", (a3 * a5 + a4 * a6) * 0.5);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v18 = 0;
  v19 = 0;
  PCColor::getRGBA(a7, (float *)&v19 + 1, (float *)&v19, (float *)&v18 + 1, (float *)&v18, DeviceRGB);
  CGColorSpaceRelease(DeviceRGB);
  objc_msgSend(v14, "setShadowColor:", objc_msgSend(MEMORY[0x1E0CEA478], "colorWithRed:green:blue:alpha:", *((float *)&v19 + 1), *(float *)&v19, *((float *)&v18 + 1), *(float *)&v18));
  return v14;
}

void createFont(PCString *a1@<X0>, CGFloat a2@<D0>, const CGAffineTransform *a3@<X2>, int a4@<W1>, CTFontRef *a5@<X8>)
{
  __CFString *v10;
  __CFDictionary *Mutable;
  const void *v12;
  __CFString *v13;
  TXFontManager *v14;
  __CFString *v15;
  CTFontDescriptorRef v16;
  CFArrayRef v17;
  float v18;
  CFNumberRef v19;
  const __CTFontDescriptor *v20;
  float valuePtr;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  if (-[__CFString hasPrefix:]((id)PCString::ns_str(a1), "hasPrefix:", CFSTR(".")))
  {
    v10 = PCString::cf_str(a1);
    *a5 = OZCreateFontWithName(v10, a2, a3);
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v12 = (const void *)*MEMORY[0x1E0CA8380];
    v13 = PCString::cf_str(a1);
    CFDictionaryAddValue(Mutable, v12, v13);
    TXFontManager::getInstance(v14);
    OZFontManagerBase::getDefaultSystemFont((PCString *)values);
    v15 = PCString::cf_str((PCString *)values);
    v16 = CTFontDescriptorCreateWithNameAndSize(v15, a2);
    PCString::~PCString((PCString *)values);
    values[0] = v16;
    v17 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 1, MEMORY[0x1E0C9B378]);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA81D8], v17);
    CFRelease(v17);
    CFRelease(v16);
    if (a4)
    {
      v18 = a2;
      valuePtr = v18;
      v19 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8340], v19);
      CFRelease(v19);
    }
    v20 = CTFontDescriptorCreateWithAttributes(Mutable);
    CFRelease(Mutable);
    *a5 = CTFontCreateWithFontDescriptor(v20, a2, a3);
    CFRelease(v20);
  }
}

void sub_1B292705C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  const void **v11;

  PCCFRef<__CTLine const*>::~PCCFRef(v11);
  _Unwind_Resume(a1);
}

uint64_t PCCachedFunctionImpl<PCCFRef<__CTFont const*>,PCString const&,double,BOOL,CGAffineTransform const&>::PCCachedFunctionImpl<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  *(_QWORD *)(a1 + 24) = 0;
  if (a2)
  {
    *(_QWORD *)a1 = &unk_1E64FE368;
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 24) = a1;
  }
  *(_DWORD *)(a1 + 32) = 0;
  v5 = operator new();
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 24) = v5 + 32;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = -1;
  *(_QWORD *)(v5 + 96) = a3;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

void sub_1B2927124(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSpinLock *v2;
  _QWORD *v4;
  uint64_t v5;

  PCSpinLock::~PCSpinLock(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

void std::__function::__func<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&),std::allocator<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>,PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::~__func()
{
  JUMPOUT(0x1B5E29170);
}

_QWORD *std::__function::__func<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&),std::allocator<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>,PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E64FE368;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&),std::allocator<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>,PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E64FE368;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&),std::allocator<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>,PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::operator()(uint64_t a1, uint64_t a2, double *a3, unsigned __int8 *a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, double))(a1 + 8))(a2, *a4, a5, *a3);
}

uint64_t std::__function::__func<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&),std::allocator<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>,PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&),std::allocator<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>,PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::target_type()
{
}

uint64_t PCCachedFunctionImpl<PCCFRef<__CTFont const*>,PCString const&,double,BOOL,CGAffineTransform const&>::~PCCachedFunctionImpl(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  PCCache<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::~PCCache((uint64_t *)(a1 + 40));
  PCSpinLock::~PCSpinLock((PCSpinLock *)(a1 + 32));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2 == (_QWORD *)a1)
  {
    v3 = 4;
    v2 = (_QWORD *)a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *PCCache<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::~PCCache(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1 + 32;
  std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::destroy(*a1 + 24, *(PCString **)v2);
  *(_QWORD *)(v2 - 8) = v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 48) = 0;
  std::unique_ptr<PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

void std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::destroy(uint64_t a1, PCString *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::destroy(a1, a2[1].var0);
    PCCFRef<__CTLine const*>::~PCCFRef((const void **)&a2[13].var0);
    PCString::~PCString(a2 + 4);
    operator delete(a2);
  }
}

uint64_t std::unique_ptr<PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::~PCCacheImpl(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::~PCCacheImpl(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::destroy(a1 + 24, *(PCString **)(a1 + 32));
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B2927418(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::operator()(uint64_t a1, uint64_t a2, char a3, uint64_t a4, double a5)
{
  uint64_t v5;
  char v7;
  double v8;

  v8 = a5;
  v7 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, double *, char *, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2, &v8, &v7, a4);
}

_QWORD *PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::findValue@<X0>(uint64_t a1@<X0>, PCString *a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  _QWORD *v8;
  const void *v9;
  uint64_t v10;
  _QWORD *v11;

  result = std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::find<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>((PCString *)(a1 + 24), a2);
  v11 = result;
  if ((_QWORD *)(a1 + 32) == result)
  {
    *a3 = 0;
    *a4 = 0;
  }
  else
  {
    v8 = result;
    v9 = (const void *)result[13];
    *a4 = v9;
    if (v9)
      CFRetain(v9);
    v10 = *(_QWORD *)(a1 + 72) + 1;
    *(_QWORD *)(a1 + 72) = v10;
    v8[15] = v10;
    result = PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)&v11);
    *a3 = 1;
  }
  return result;
}

void sub_1B2927508(_Unwind_Exception *a1)
{
  const void **v1;

  PCCFRef<__CTLine const*>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

PCString *std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::find<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>(PCString *a1, PCString *a2)
{
  PCString *v2;
  PCString *var0;
  PCString *v5;
  int v6;
  PCString *v7;
  char v9;
  char v10;

  v2 = a1 + 1;
  var0 = (PCString *)a1[1].var0;
  if (!var0)
    return v2;
  v5 = a1 + 1;
  do
  {
    v6 = std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>((int)&v9, var0 + 4, a2);
    v7 = var0 + 1;
    if (!v6)
    {
      v7 = var0;
      v5 = var0;
    }
    var0 = (PCString *)v7->var0;
  }
  while (v7->var0);
  if (v5 == v2
    || std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>((int)&v10, a2, v5 + 4))
  {
    return v2;
  }
  return v5;
}

uint64_t std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>(int a1, PCString *this, PCString *a3)
{
  char v6;

  if ((PCString::compare(this, a3) & 0x80000000) != 0)
    return 1;
  if ((PCString::compare(a3, this) & 0x80000000) != 0)
    return 0;
  return std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>((uint64_t)&v6, (uint64_t)this, (uint64_t)a3);
}

uint64_t std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(double *)(a2 + 8);
  v4 = *(double *)(a3 + 8);
  if (v3 < v4)
    return 1;
  if (v4 < v3)
    return 0;
  v5 = *(unsigned __int8 *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a3 + 16);
  if (v5 < v6)
    return 1;
  if (v6 >= v5)
    return operator<((double *)(a2 + 24), (double *)(a3 + 24));
  else
    return 0;
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *result;
  v3 = result[1] - *result;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 128);
  v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      v17 = *(_QWORD *)(v2 + 8 * v4);
      do
      {
        v18 = v4 - 1;
        v19 = (v4 - 1) >> 1;
        v20 = *(_QWORD *)(v2 + 8 * v19);
        if (*(_QWORD *)(v20 + 120) <= *(_QWORD *)(v17 + 120))
          break;
        *(_QWORD *)(v2 + 8 * v4) = v20;
        *(_QWORD *)(v2 + 8 * v19) = v17;
        v2 = *result;
        *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 128) = v4;
        v17 = *(_QWORD *)(v2 + 8 * v19);
        *(_QWORD *)(v17 + 128) = v19;
        v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  v6 = 0;
  v7 = v3 >> 3;
  v8 = 2 * v4;
  v9 = *(_QWORD *)(v2 + 8 * v4);
  while (1)
  {
    v10 = v8 + 2;
    v11 = *(_QWORD *)(v9 + 120);
    v12 = v10 < v7 && v11 > *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 120);
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * v5) + 120);
    if (v11 <= v13 && !v12)
      break;
    v15 = v11 > v13 && v12;
    if (v12)
      v16 = v10;
    else
      v16 = v5;
    if (v15)
    {
      if (v13 <= *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 120))
        v16 = v5;
      else
        v16 = v10;
    }
    *(_QWORD *)(v2 + 8 * v4) = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v2 + 8 * v16) = v9;
    v2 = *result;
    *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 128) = v4;
    v9 = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v9 + 128) = v16;
    v8 = 2 * v16;
    v6 = 1;
    v5 = (2 * v16) | 1;
    v4 = v16;
    if (v5 >= v7)
      return result;
  }
  if ((v6 & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 128);
    goto LABEL_24;
  }
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B5E29170);
}

PCString *PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::addValue(PCString *result, PCString *a2, const void **a3, __CFString *a4)
{
  PCString *v7;
  PCString *v8;
  PCString *v9;
  uint64_t v10;
  PCString *v11;
  char *v12;
  __CFString *v13;
  __CFString *v14;
  PCString *v15;
  __CFString *v16;
  unsigned __int8 v17;
  __CFString *v18;
  PCString *var0;
  PCString v20[9];
  const void *v21;
  uint64_t v22[2];
  const void *v23[4];
  PCString *v24;

  v7 = result;
  if (result[11].var0 >= a4 || result[13].var0)
  {
    v8 = std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::find<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>(result + 3, a2);
    v24 = v8;
    if (&v7[4] == v8)
    {
      v16 = (__CFString *)((char *)&v7[9].var0->isa + 1);
      v7[9].var0 = v16;
      v23[0] = *a3;
      if (v23[0])
        CFRetain(v23[0]);
      v23[1] = a4;
      v23[2] = v16;
      v23[3] = 0;
      std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>::pair[abi:ne180100]<true,0>((uint64_t)v20, (uint64_t)a2, (uint64_t)v23);
      v22[0] = (uint64_t)std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::__emplace_unique_key_args<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>(v7 + 3, v20, (uint64_t)v20);
      v22[1] = v17;
      PCCFRef<__CTLine const*>::~PCCFRef(&v21);
      PCString::~PCString(v20);
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::add((void **)&v7[6].var0, v22);
      v7[10].var0 = (__CFString *)((char *)v7[10].var0 + (unint64_t)a4);
      if (!v7[13].var0)
      {
        while (v7[10].var0 > v7[11].var0 || v7[5].var0 > v7[12].var0)
        {
          var0 = (PCString *)v7[6].var0;
          if (var0 == (PCString *)v7[7].var0)
            break;
          v20[0] = (PCString)var0->var0;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::remove((uint64_t *)&v7[6], (uint64_t)v20);
          v18 = v20[0].var0;
          v7[10].var0 = (__CFString *)((char *)v7[10].var0 - v20[0].var0[3].data);
          std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::erase((uint64_t **)&v7[3], (uint64_t)v18);
        }
      }
      return (PCString *)PCCFRef<__CTLine const*>::~PCCFRef(v23);
    }
    else
    {
      v9 = v8;
      PCCFRef<__CTLine const*>::operator=((const void **)&v8[13].var0, a3);
      v10 = (uint64_t)&v7[9].var0->isa + 1;
      v7[9].var0 = (__CFString *)v10;
      v9[15].var0 = (__CFString *)v10;
      result = (PCString *)PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::bubble((uint64_t *)&v7[6], (uint64_t)&v24);
      v11 = v24;
      v12 = (char *)((char *)a4 - (char *)v24[14].var0);
      if (v12)
      {
        v13 = (__CFString *)((char *)v7[10].var0 + (unint64_t)v12);
        v7[10].var0 = v13;
        v11[14].var0 = a4;
        if (!v7[13].var0)
        {
          while (v13 > v7[11].var0 || v7[5].var0 > v7[12].var0)
          {
            v15 = (PCString *)v7[6].var0;
            if (v15 == (PCString *)v7[7].var0)
              break;
            v20[0] = (PCString)v15->var0;
            PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::remove((uint64_t *)&v7[6], (uint64_t)v20);
            v14 = v20[0].var0;
            v7[10].var0 = (__CFString *)((char *)v7[10].var0 - v20[0].var0[3].data);
            result = (PCString *)std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::erase((uint64_t **)&v7[3], (uint64_t)v14);
            v13 = v7[10].var0;
          }
        }
      }
    }
  }
  return result;
}

void sub_1B29279FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<__CTLine const*>::~PCCFRef((const void **)(v1 - 88));
  _Unwind_Resume(a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v4 = (char *)*a1;
  v5 = a1[1];
  v6 = ((char *)v5 - (_BYTE *)*a1) >> 3;
  v7 = *a2;
  *(_QWORD *)(*a2 + 128) = v6;
  v10 = (unint64_t)a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = v9 - (_QWORD)v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1))
      v13 = v6 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      v7 = *a2;
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v6];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v7;
    v11 = v16 + 8;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = v7;
    v11 = v5 + 1;
  }
  a1[1] = v11;
  v21 = *(_QWORD *)(*a2 + 128);
  if (v21)
  {
    v22 = (char *)*a1;
    v23 = *((_QWORD *)*a1 + v21);
    do
    {
      v24 = v21 - 1;
      v25 = (v21 - 1) >> 1;
      v26 = *(_QWORD *)&v22[8 * v25];
      if (*(_QWORD *)(v26 + 120) <= *(_QWORD *)(v23 + 120))
        break;
      *(_QWORD *)&v22[8 * v21] = v26;
      *(_QWORD *)&v22[8 * v25] = v23;
      v22 = (char *)*a1;
      *(_QWORD *)(*((_QWORD *)*a1 + v21) + 128) = v21;
      v23 = *(_QWORD *)&v22[8 * v25];
      *(_QWORD *)(v23 + 128) = v25;
      v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

uint64_t *std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::__emplace_unique_key_args<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>(PCString *a1, PCString *this, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  PCString *v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::__find_equal<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>(a1, &v8, this);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::__construct_node<std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v5, v7);
    return v7;
  }
  return result;
}

PCString *std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::__find_equal<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>(PCString *a1, PCString **a2, PCString *this)
{
  PCString *var0;
  PCString *v5;
  PCString *v7;
  PCString *v8;
  char v10;
  char v11;

  v5 = a1 + 1;
  var0 = (PCString *)a1[1].var0;
  if (var0)
  {
    do
    {
      while (1)
      {
        v7 = var0;
        v8 = var0 + 4;
        if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>((int)&v10, this, var0 + 4))break;
        var0 = (PCString *)v7->var0;
        v5 = v7;
        if (!v7->var0)
          goto LABEL_9;
      }
      if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>((int)&v11, v8, this))break;
      v5 = v7 + 1;
      var0 = (PCString *)v7[1].var0;
    }
    while (var0);
  }
  else
  {
    v7 = a1 + 1;
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::__construct_node<std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x88uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2927CE4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCString *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  const void *v7;
  __int128 v8;

  PCString::PCString((PCString *)a1, (const PCString *)a2);
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 24) = v5;
  v7 = *(const void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  if (v7)
    CFRetain(v7);
  v8 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v8;
  return a1;
}

void sub_1B2927D70(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *>>>::operator()[abi:ne180100](uint64_t a1, PCString *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    PCCFRef<__CTLine const*>::~PCCFRef((const void **)&__p[13].var0);
    PCString::~PCString(__p + 4);
  }
  if (__p)
    operator delete(__p);
}

uint64_t std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>::pair[abi:ne180100]<true,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  const void *v9;
  __int128 v10;

  PCString::PCString((PCString *)a1, (const PCString *)a2);
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v6 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 24);
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v8;
  *(_OWORD *)(v6 + 24) = v7;
  v9 = *(const void **)a3;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)a3;
  if (v9)
    CFRetain(v9);
  v10 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 80) = v10;
  return a1;
}

void sub_1B2927E4C(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 128);
  v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(_QWORD *)(*a1 + 8 * v3) = *(_QWORD *)(*a1 + 8 * v4);
    *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v3) + 128) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::bubble(a1, *a1 + 8 * v3);
  }
}

uint64_t *std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)(a2 + 104));
  PCString::~PCString((PCString *)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

__n128 std::deque<_NSRange>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<_NSRange>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void std::deque<_NSRange>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B2928274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<PCNSRef<NSURL *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<PCNSRef<NSURL *>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (id *)*v2);
    operator delete(**a1);
  }
}

void std::vector<PCNSRef<NSURL *>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, id *a2)
{
  id *i;

  for (i = *(id **)(a1 + 8); i != a2; ProCore_Impl::PCNSRefImpl::release(i))
    --i;
  *(_QWORD *)(a1 + 8) = a2;
}

void TXOutlineFilter::clone(TXOutlineFilter *this@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t v4;
  PCSharedCount v5;
  PCSharedCount v6;
  PCSharedCount v7;

  v4 = operator new();
  TXOutlineFilter::TXOutlineFilter(v4, (_QWORD *)this + 7, (TXOutlineFilter *)((char *)this + 72), *((_QWORD *)this + 194), (uint64_t)this + 1504);
  v5.var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v6, (PCShared_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  if (!v4)
    throw_PCNullPointerException(1);
  *(_OWORD *)((char *)v5.var0 + 36) = *(_OWORD *)((char *)this + 36);
  *(_QWORD *)(v4 + 1496) = *((_QWORD *)this + 187);
  *(_QWORD *)(v4 + 16) = *((_QWORD *)this + 2);
  PCSharedCount::PCSharedCount(&v7, (const PCSharedCount *)this + 3);
  PCSharedCount::operator=((uint64_t *)(v4 + 24), (uint64_t *)&v7);
  PCSharedCount::~PCSharedCount(&v7);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v5);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B292842C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

uint64_t TXOutlineFilter::TXOutlineFilter(uint64_t a1, _QWORD *a2, const OZRenderParams *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  CGColorSpace *v13;
  uint64_t v14;

  *(_QWORD *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1560) = &off_1E65EB048;
  *(_BYTE *)(a1 + 1576) = 1;
  LiCachedImageFilter::LiCachedImageFilter((LiCachedImageFilter *)a1, (uint64_t *)off_1E64FE570);
  *(_QWORD *)a1 = &off_1E64FE460;
  *(_QWORD *)(a1 + 1560) = &unk_1E64FE550;
  v10 = a2[1];
  *(_QWORD *)(a1 + 56) = *a2;
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 72), a3);
  *(_OWORD *)(a1 + 1504) = *(_OWORD *)a5;
  v13 = *(CGColorSpace **)(a5 + 16);
  *(_QWORD *)(a1 + 1520) = v13;
  if (v13)
    PCCFRefTraits<CGColorSpace *>::retain(v13);
  v14 = *(_QWORD *)(a5 + 24);
  *(_DWORD *)(a1 + 1536) = *(_DWORD *)(a5 + 32);
  *(_QWORD *)(a1 + 1528) = v14;
  *(_BYTE *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1552) = a4;
  return a1;
}

void sub_1B292855C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  OZRenderParams *v3;
  uint64_t v4;

  OZRenderParams::~OZRenderParams(v3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v2);
  LiCachedImageFilter::~LiCachedImageFilter((PCSharedCount *)v1, (const PCString *)off_1E64FE570);
  *(_QWORD *)(v1 + 1560) = v4 + 16;
  *(_BYTE *)(v1 + 1576) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1568));
  _Unwind_Resume(a1);
}

void LiCachedImageFilter::LiCachedImageFilter(LiCachedImageFilter *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;

  LiImageFilter::LiImageFilter(this, a2 + 1);
  v3 = *a2;
  *v4 = *a2;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(v3 - 24)) = a2[7];
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)v4 + 36));
}

void sub_1B2928600(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  const PCString *v2;

  LiImageFilter::~LiImageFilter(v1, v2);
  _Unwind_Resume(a1);
}

void LiCachedImageFilter::~LiCachedImageFilter(PCSharedCount *this, const PCString *a2)
{
  __CFString *var0;

  var0 = a2[1].var0;
  this->var0 = (PC_Sp_counted_base *)var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[6].var0;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 2);
}

CGColorSpace **TXOutlineFilter::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  const FxColorDescription *RequestedColorDescription;

  RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  LiAgent::getHelium(a2, this[2], a3);
  return LiAgent::setActualColorDescription((CGColorSpace **)a2, RequestedColorDescription);
}

void sub_1B29286B0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t TXOutlineFilter::pixelTransformSupport()
{
  return 0;
}

double TXOutlineFilter::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMTime *v5;
  int TextRenderQuality;
  double result;
  double v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14[2];
  __int128 v15;
  _OWORD v16[8];
  uint64_t v17;
  uint64_t v18;

  v5 = (CMTime *)(a1 + 72);
  TextRenderQuality = OZRenderParams::getTextRenderQuality((OZRenderParams *)(a1 + 72));
  if (TextRenderQuality)
  {
    if (TextRenderQuality == 6)
    {
      v17 = 0x3FF0000000000000;
      v18 = 0x3FF0000000000000;
      v10 = *(_OWORD *)(a3 + 80);
      v16[4] = *(_OWORD *)(a3 + 64);
      v16[5] = v10;
      v11 = *(_OWORD *)(a3 + 112);
      v16[6] = *(_OWORD *)(a3 + 96);
      v16[7] = v11;
      v12 = *(_OWORD *)(a3 + 16);
      v16[0] = *(_OWORD *)a3;
      v16[1] = v12;
      v13 = *(_OWORD *)(a3 + 48);
      v16[2] = *(_OWORD *)(a3 + 32);
      v16[3] = v13;
      v15 = xmmword_1B30503B0;
      TXTextObject::getScaleAndHashForPixelTransform(*(_QWORD *)(a1 + 56));
      *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
      *(_QWORD *)a3 = 0x3FF0000000000000;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      v9 = *(double *)&v17;
      v8 = *(double *)&v18;
      return PCMatrix44Tmpl<double>::rightScale((double *)a3, v8, v9, 1.0);
    }
    if (TextRenderQuality != 2)
      return result;
  }
  *(_QWORD *)&v16[0] = 0;
  *(_QWORD *)&v15 = 0;
  v14[0] = 0.0;
  TXTextObject::getScale(*(TXTextObject **)(a1 + 56), v5, (double *)v16, (double *)&v15, v14, 1, 1, 1, 0, 0, 1);
  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  v8 = *(double *)v16;
  v9 = *(double *)&v15;
  return PCMatrix44Tmpl<double>::rightScale((double *)a3, v8, v9, 1.0);
}

uint64_t TXOutlineFilter::estimateRenderMemory()
{
  return 0;
}

void LiCachedImageFilter::getCacheHash(uint64_t a1)
{
  _DWORD *v1;
  float64x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int *v7;
  int v8;
  int v9;
  int8x8_t *Hash;
  float64x2_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  int8x8_t v16[521];

  v1 = (_DWORD *)MEMORY[0x1E0C80A78](a1);
  v4 = v3;
  v16[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  v5 = v1[9];
  v6 = v1[10];
  v7 = v1 + 9;
  v8 = v1[11];
  v9 = v1[12];
  if (v6 | v5 | v8 | v9)
  {
    v13 = 0.0;
    v14 = 0.0;
    v15 = 0;
    v11 = 0uLL;
    v12 = 0;
    getScaleTranslate(v2, (uint64_t)&v13, &v11);
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v16);
    PCHashWriteStream::writeValue(v16, v13);
    PCHashWriteStream::writeValue(v16, v14);
    PCHashWriteStream::close(v16);
    Hash = PCHashWriteStream::getHash(v16);
    PCHash128::operator+=(v7, (int *)Hash);
    *(_OWORD *)v4 = *(_OWORD *)v7;
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v16);
  }
  else
  {
    *(_DWORD *)v4 = v5;
    *(_DWORD *)(v4 + 4) = v6;
    *(_DWORD *)(v4 + 8) = v8;
    *(_DWORD *)(v4 + 12) = v9;
  }
}

void sub_1B2928940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t LiImageFilter::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2, a3);
}

uint64_t LiImageFilter::filteredEdges(LiImageFilter *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
}

uint64_t LiImageSource::imageSpace(LiImageSource *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t LiImageSource::setImageSpace(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

PCSharedCount *LiImageSource::getSourceAtTime@<X0>(LiImageSource *this@<X0>, PCSharedCount *a2@<X8>)
{
  PCShared_base *v4;

  a2->var0 = (PC_Sp_counted_base *)this;
  if (this)
    v4 = (PCShared_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  else
    v4 = 0;
  return PCSharedCount::PCSharedCount(a2 + 1, v4);
}

PCShared_base **LiImageFilter::setInput(PCShared_base **this, LiImageSource *a2)
{
  return PCPtr<LiImageSource>::operator=<LiImageSource>(this + 2, (PCShared_base *)a2);
}

uint64_t LiImageFilter::setPriority(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void TXOutlineFilter::~TXOutlineFilter(TXOutlineFilter *this)
{
  *(_QWORD *)this = &off_1E64FE460;
  *((_QWORD *)this + 195) = &unk_1E64FE550;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 190);
  OZRenderParams::~OZRenderParams((TXOutlineFilter *)((char *)this + 72));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  *(_QWORD *)this = off_1E64FE708;
  *((_QWORD *)this + 195) = off_1E64FE7F0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E64FE580);
  *((_QWORD *)this + 195) = &off_1E65EB048;
  *((_BYTE *)this + 1576) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 196);
}

{
  *(_QWORD *)this = &off_1E64FE460;
  *((_QWORD *)this + 195) = &unk_1E64FE550;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 190);
  OZRenderParams::~OZRenderParams((TXOutlineFilter *)((char *)this + 72));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  *(_QWORD *)this = off_1E64FE708;
  *((_QWORD *)this + 195) = off_1E64FE7F0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E64FE580);
  *((_QWORD *)this + 195) = &off_1E65EB048;
  *((_BYTE *)this + 1576) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 196);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'TXOutlineFilter::~TXOutlineFilter(TXOutlineFilter *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E64FE460;
  *((_QWORD *)v1 + 195) = &unk_1E64FE550;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v1 + 190);
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 72));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 56));
  *(_QWORD *)v1 = off_1E64FE708;
  *((_QWORD *)v1 + 195) = off_1E64FE7F0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E64FE580);
  *((_QWORD *)v1 + 195) = &off_1E65EB048;
  v1[1576] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 196);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E64FE460;
  *((_QWORD *)v1 + 195) = &unk_1E64FE550;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v1 + 190);
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 72));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 56));
  *(_QWORD *)v1 = off_1E64FE708;
  *((_QWORD *)v1 + 195) = off_1E64FE7F0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E64FE580);
  *((_QWORD *)v1 + 195) = &off_1E65EB048;
  v1[1576] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 196);
  JUMPOUT(0x1B5E29170);
}

PCShared_base **PCPtr<LiImageSource>::operator=<LiImageSource>(PCShared_base **a1, PCShared_base *a2)
{
  PCShared_base *v3;
  PCSharedCount *v4;
  PCSharedCount v6;
  PCSharedCount v7;
  PCShared_base *v8;
  PCSharedCount v9;

  v8 = a2;
  if (a2)
    a2 = (PCShared_base *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  PCSharedCount::PCSharedCount(&v9, a2);
  v3 = v8;
  *a1 = v8;
  if (v3)
  {
    PCSharedCount::PCSharedCount(&v6, &v9);
    v4 = &v6;
    PCSharedCount::operator=((uint64_t *)a1 + 1, (uint64_t *)&v6);
  }
  else
  {
    PCSharedCount::PCSharedCount(&v7);
    v4 = &v7;
    PCSharedCount::operator=((uint64_t *)a1 + 1, (uint64_t *)&v7);
  }
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount(&v9);
  return a1;
}

void sub_1B2928D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  PCSharedCount *v2;
  va_list va;

  va_start(va, a2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void TXTextObject::TXTextObject(TXTextObject *this, TXTextLayout *a2, int a3)
{
  uint64_t v6;

  *((_QWORD *)this + 96) = 0;
  *((_BYTE *)this + 776) = 1;
  *(_QWORD *)this = &off_1E64FE990;
  *((_QWORD *)this + 1) = &unk_1E64FEA00;
  *((_QWORD *)this + 95) = &unk_1E64FEA30;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 49) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 9);
  *((_WORD *)this + 60) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 16);
  *((_BYTE *)this + 138) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 33) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = 0;
  PCSharedMutex::PCSharedMutex((TXTextObject *)((char *)this + 272));
  *((_QWORD *)this + 47) = 0;
  *((_BYTE *)this + 384) = 1;
  *((_DWORD *)this + 97) = a3;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_QWORD *)this + 51) = 0xBFF0000000000000;
  *((_QWORD *)this + 52) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_QWORD *)this + 55) = 0xBFF0000000000000;
  *((_QWORD *)this + 56) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_QWORD *)this + 59) = 0xBFF0000000000000;
  *((_QWORD *)this + 60) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_QWORD *)this + 63) = 0xBFF0000000000000;
  *((_QWORD *)this + 64) = 0xBFF0000000000000;
  *((_QWORD *)this + 67) = 0;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_QWORD *)this + 68) = a2;
  *((_QWORD *)this + 70) = 0x4000000000000000;
  *((_WORD *)this + 284) = 0;
  *((_QWORD *)this + 87) = 0x3FF0000000000000;
  *((_QWORD *)this + 82) = 0x3FF0000000000000;
  *((_QWORD *)this + 77) = 0x3FF0000000000000;
  *((_QWORD *)this + 72) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  v6 = MEMORY[0x1E0CA2E18];
  *((_OWORD *)this + 44) = *MEMORY[0x1E0CA2E18];
  *((_QWORD *)this + 90) = *(_QWORD *)(v6 + 16);
  *((_BYTE *)this + 744) = 1;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 91) = 0;
  *((_DWORD *)this + 4) = a3;
}

void sub_1B2928EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  PCString *v11;
  PCString *v12;

  PCString::~PCString(v12);
  PCString::~PCString(v11);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v10 + 48);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  *(_QWORD *)(v10 + 760) = &off_1E65EB048;
  *(_BYTE *)(v10 + 776) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v10 + 768));
  _Unwind_Resume(a1);
}

void TXTextObject::~TXTextObject(TXTextObject *this, uint64_t *a2)
{
  uint64_t v3;
  void **v4;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 1) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[4];
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 528);
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 272));
  PCString::~PCString((PCString *)this + 16);
  PCString::~PCString((PCString *)this + 9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  v4 = (void **)((char *)this + 24);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void TXTextObject::~TXTextObject(TXTextObject *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 760) = &off_1E65EB048;
  *(_BYTE *)(v1 + 776) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 768));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 760) = &off_1E65EB048;
  *(_BYTE *)(v1 + 776) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 768));
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXTextObject::~TXTextObject(TXTextObject *this)
{
  *((_QWORD *)this + 94) = &off_1E65EB048;
  *((_BYTE *)this + 768) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 95);
}

{
  TXTextObject::~TXTextObject((TXTextObject *)((char *)this - 8));
}

void `virtual thunk to'TXTextObject::~TXTextObject(TXTextObject *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 760) = &off_1E65EB048;
  *(_BYTE *)(v1 + 776) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 768));
}

{
  TXTextObject::~TXTextObject((TXTextObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

double TXTextObject::getBoundingTypographicVolume(double *a1, uint64_t a2)
{
  double result;
  double v3;
  double v4;
  double v5;

  result = a1[53];
  v3 = a1[54];
  v4 = result + a1[55];
  v5 = v3 + a1[56];
  *(double *)a2 = result;
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v3;
  *(double *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

double TXTextObject::getBoundingImageVolume(TXTextObject *a1, uint64_t a2, uint64_t a3)
{
  double result;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  OZRenderState v14;

  OZRenderState::OZRenderState(&v14);
  *(_OWORD *)&v14.var0.var0 = *(_OWORD *)a3;
  v14.var0.var3 = *(_QWORD *)(a3 + 16);
  TXTextObject::getImageBounds(a1, &v14, (uint64_t)&v10);
  result = v10;
  v7 = v11;
  v8 = v10 + v12;
  v9 = v11 + v13;
  *(double *)a2 = v10;
  *(double *)(a2 + 8) = v8;
  *(double *)(a2 + 16) = v7;
  *(double *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void TXTextObject::getImageBounds(TXTextObject *this@<X0>, const OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double XMarginScale;
  double v24;
  unint64_t *v25;
  unint64_t v26;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v6 = *((_QWORD *)this + 33);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(std::__shared_weak_count **)(v6 + 16);
    v31 = v8;
    v32 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v31 = 0;
    v32 = 0;
  }
  v11 = *(_OWORD *)((char *)this + 408);
  *(_OWORD *)a3 = *(_OWORD *)((char *)this + 392);
  *(_OWORD *)(a3 + 16) = v11;
  if (TXTextLayout::scaleAffectsLayout(*((TXTextLayout **)this + 68)))
  {
    v29 = 0.0;
    v30 = 0.0;
    var0 = a2->var0;
    v28 = 0.0;
    OZChannelScale3D::getValue((OZChannelScale3D *)(v8 + 2864), (const CMTime *)&var0, &v30, &v29, &v28, 0.0);
    if ((v30 <= -0.0000001 || v30 >= 0.0000001) && (v29 <= -0.0000001 || v29 >= 0.0000001))
    {
      v17 = 1.0 / v29;
      v18 = 1.0 / v30 * *(double *)a3;
      v19 = *(double *)(a3 + 24);
      v20 = 1.0 / v30 * *(double *)(a3 + 16);
      v21 = 1.0 / v29 * *(double *)(a3 + 8);
      *(double *)a3 = v18;
      *(double *)(a3 + 8) = v21;
      v22 = v17 * v19;
      *(double *)(a3 + 16) = v20;
      *(double *)(a3 + 24) = v17 * v19;
      XMarginScale = TXTextLayout::getXMarginScale(*((TXTextLayout **)this + 68));
      v24 = 1.0 / TXTextLayout::getYMarginScale(*((TXTextLayout **)this + 68));
      *(double *)a3 = v18 * (1.0 / XMarginScale);
      *(double *)(a3 + 8) = v21 * v24;
      *(double *)(a3 + 16) = v20 * (1.0 / XMarginScale);
      *(double *)(a3 + 24) = v22 * v24;
    }
    else
    {
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a3 + 16) = _Q0;
    }
    v7 = v32;
  }
  if (v7)
  {
    v25 = (unint64_t *)&v7->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B2929360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double TXTextObject::getBoundingImageAndTypographicVolume(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v8;
  double v9;
  double v10;
  double result;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  OZRenderState v19;

  OZRenderState::OZRenderState(&v19);
  *(_OWORD *)&v19.var0.var0 = *(_OWORD *)a4;
  v19.var0.var3 = *(_QWORD *)(a4 + 16);
  TXTextObject::getImageBounds((TXTextObject *)a1, &v19, (uint64_t)&v15);
  v8 = v16;
  v9 = v15 + v17;
  v10 = v16 + v18;
  *(double *)a2 = v15;
  *(double *)(a2 + 8) = v9;
  *(double *)(a2 + 16) = v8;
  *(double *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  result = a1[53];
  v12 = a1[54];
  v13 = result + a1[55];
  v14 = v12 + a1[56];
  *(double *)a3 = result;
  *(double *)(a3 + 8) = v13;
  *(double *)(a3 + 16) = v12;
  *(double *)(a3 + 24) = v14;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

__n128 TXTextObject::setGlyphID(TXTextObject *this, int a2)
{
  uint64_t v2;
  __n128 result;

  *((_BYTE *)this + 138) = 1;
  if (*((unsigned __int16 *)this + 68) != a2)
  {
    *((_WORD *)this + 68) = a2;
    *((_BYTE *)this + 384) = 1;
    v2 = MEMORY[0x1E0CA2E18];
    result = *(__n128 *)MEMORY[0x1E0CA2E18];
    *((_OWORD *)this + 44) = *MEMORY[0x1E0CA2E18];
    *((_QWORD *)this + 90) = *(_QWORD *)(v2 + 16);
  }
  return result;
}

__n128 TXTextObject::dirty(TXTextObject *this)
{
  uint64_t v1;
  __n128 result;

  *((_BYTE *)this + 384) = 1;
  v1 = MEMORY[0x1E0CA2E18];
  result = *(__n128 *)MEMORY[0x1E0CA2E18];
  *((_OWORD *)this + 44) = *MEMORY[0x1E0CA2E18];
  *((_QWORD *)this + 90) = *(_QWORD *)(v1 + 16);
  return result;
}

__n128 TXTextObject::setSubstituteFontID(TXTextObject *this, int a2)
{
  uint64_t v2;
  __n128 result;

  if (*((_DWORD *)this + 131) != a2)
  {
    *((_DWORD *)this + 131) = a2;
    *((_BYTE *)this + 384) = 1;
    v2 = MEMORY[0x1E0CA2E18];
    result = *(__n128 *)MEMORY[0x1E0CA2E18];
    *((_OWORD *)this + 44) = *MEMORY[0x1E0CA2E18];
    *((_QWORD *)this + 90) = *(_QWORD *)(v2 + 16);
  }
  return result;
}

double TXTextObject::getPosition@<D0>(TXTextObject *this@<X0>, CMTime *a2@<X1>, _QWORD *a3@<X8>)
{
  TXTextLayout *v4;
  double result;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = (TXTextLayout *)*((_QWORD *)this + 68);
  if (v4)
  {
    v7 = *((_DWORD *)this + 97);
    TXTextLayout::getPosition(v4, a2, &v7, &v8);
    result = *(double *)&v8;
    *(_OWORD *)a3 = v8;
    a3[2] = v9;
  }
  return result;
}

double TXTextObject::setPosition(TXTextObject *this, CMTime *a2, double result, double a4, double a5)
{
  TXTextLayout *v6;
  __n128 v7;
  double v8;
  int v9;

  v6 = (TXTextLayout *)*((_QWORD *)this + 68);
  if (v6)
  {
    v9 = *((_DWORD *)this + 97);
    v7.n128_f64[0] = result;
    v7.n128_f64[1] = a4;
    v8 = a5;
    return TXTextLayout::setPosition(v6, a2, &v9, &v7);
  }
  return result;
}

_OWORD *TXTextObject::getPathRotation(TXTextObject *this, CMTime *a2, double *a3, double *a4, double *a5)
{
  uint64_t v10;
  _OWORD *result;
  double v12;
  double v13;
  unsigned int v14;
  _QWORD v15[3];

  v10 = *((_QWORD *)this + 68);
  result = (_OWORD *)OZChannel::getValueAsInt((OZChannel *)(v10 + 20464), MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result == 2)
  {
    v14 = *((_DWORD *)this + 97);
    result = TXTextLayout::getPathRotation((TXTextLayout *)v10, a2, &v14, v15);
    v12 = *(double *)v15;
    v13 = *(double *)&v15[1];
    if (*((_BYTE *)this + 160))
    {
      v12 = 0.0;
      v13 = 0.0;
    }
    *a3 = v12;
    *a4 = v13;
    *a5 = *(double *)&v15[2];
  }
  else
  {
    *a3 = 0.0;
    *a4 = 0.0;
    *a5 = 0.0;
  }
  return result;
}

double TXTextObject::setPathRotation(TXTextObject *this, CMTime *a2, double result, double a4, double a5)
{
  TXTextLayout *v6;
  __n128 v7;
  double v8;
  int v9;

  v6 = (TXTextLayout *)*((_QWORD *)this + 68);
  if (v6)
  {
    v9 = *((_DWORD *)this + 97);
    v7.n128_f64[0] = result;
    v7.n128_f64[1] = a4;
    v8 = a5;
    return TXTextLayout::setPathRotation(v6, a2, &v9, &v7);
  }
  return result;
}

uint64_t TXTextObject::setLayoutRealPos(uint64_t this, double a2)
{
  *(double *)(this + 728) = a2;
  return this;
}

double TXTextObject::getLayoutRealPos(TXTextObject *this)
{
  return *((double *)this + 91);
}

void TXTextObject::getTransformMatrix(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, double a8, double a9)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  int v39;
  unint64_t v40;
  double v41;
  unint64_t v42;
  __n128 v43;
  uint64_t v44;
  LiSimpleCamera *v45;
  uint64_t v46;
  uint64_t k;
  uint64_t m;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t i;
  __n128 *v53;
  __n128 v54;
  uint64_t v55;
  uint64_t n;
  uint64_t ii;
  uint64_t j;
  __n128 *v59;
  __n128 v60;
  double v61;
  PCSharedCount v62;
  PCSharedCount v63;
  _OWORD v64[2];
  __int128 v65;
  int v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  CMTime time1;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  double v79;
  __int128 v80;
  _BYTE v81[24];
  float64x2_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  CMTime v88;
  CMTime v89;
  double v90[3];
  CMTime time2;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  CMTime v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  CMTime v116;
  CMTime v117;
  CMTime v118;
  CMTime v119;
  CMTime v120;
  uint64_t v121;
  std::__shared_weak_count *v122;

  v18 = *(_DWORD *)(a3 + 48);
  if (!v18 || (time1 = *(CMTime *)a3, time2 = *(CMTime *)(a1 + 704), CMTimeCompare(&time1, &time2)))
  {
    v19 = *(_QWORD *)(a1 + 264);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      v21 = *(std::__shared_weak_count **)(v19 + 16);
      v121 = v20;
      v122 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
    }
    else
    {
      v20 = 0;
      v121 = 0;
      v122 = 0;
    }
    v24 = *(_QWORD *)(a1 + 544);
    v120 = *(CMTime *)a3;
    v119 = v120;
    OZChannel::getValueAsDouble((OZChannel *)(v20 + 2712), &v119, 0.0);
    v26 = v25;
    if (*(_BYTE *)(a3 + 235))
    {
      if (!a5)
      {
LABEL_14:
        v115 = 0.0;
        v114 = 0.0;
        v113 = 0.0;
        TXTextObject::getScale((TXTextObject *)a1, (CMTime *)a3, &v115, &v114, &v113, 0, a4, 0, 0, 0, a7);
        v112 = 0.0;
        v111 = 0.0;
        v110 = 0.0;
        if (OZChannel::getValueAsInt((OZChannel *)(v24 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 3
          && OZChannel::getValueAsInt((OZChannel *)(v24 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 4)
        {
          v109 = v120;
          TXTextObject::getRotation((TXTextObject *)a1, &v109, &v112, &v111, &v110, 1, a7, *(__n128 *)&v120.value);
        }
        v108 = 0.0;
        v107 = 0.0;
        v106 = 0.0;
        TXTextObject::getPathRotation((TXTextObject *)a1, &v120, &v108, &v107, &v106);
        v61 = v26;
        v105 = 0.0;
        v104 = 0.0;
        v103 = 0.0;
        time1 = *(CMTime *)a3;
        TXTextObject::getPivot((TXTextLayout **)a1, &v105, &v104, &v103, &time1, a7);
        v31 = v105;
        v32 = v104;
        v33 = v103;
        v100 = v105;
        v101 = v104;
        v102 = v103;
        v99 = 0x3FF0000000000000;
        v96 = 0x3FF0000000000000;
        v93 = 0x3FF0000000000000;
        time2.value = 0x3FF0000000000000;
        *(_OWORD *)&time2.timescale = 0u;
        v92 = 0u;
        v94 = 0u;
        v95 = 0u;
        v97 = 0u;
        v98 = 0u;
        v34 = v108;
        v35 = v107;
        v36 = v106;
        PCMatrix44Tmpl<double>::rightRotate((double *)&time2.value, 4, v108, v107, v106);
        PCMatrix44Tmpl<double>::transform<double>((double *)&time2.value, &v100, &v100);
        time1 = *(CMTime *)a3;
        TXTextObject::getPosition((TXTextObject *)a1, &time1, v90);
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 104) = 0u;
        v37 = v90[1];
        v38 = a8 + v90[0];
        *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
        *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
        *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
        *(_QWORD *)a2 = 0x3FF0000000000000;
        PCMatrix44Tmpl<double>::rightTranslate((double *)a2, v38, a9 + v37 + *(double *)(a1 + 152), v90[2]);
        if (OZChannel::getValueAsInt((OZChannel *)(v24 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 2)
          PCMatrix44Tmpl<double>::rightTranslate((double *)a2, v31, v32, v33);
        v39 = *(unsigned __int8 *)(a1 + 160);
        if (OZChannel::getValueAsInt((OZChannel *)(v24 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 3
          && OZChannel::getValueAsInt((OZChannel *)(v24 + 20464), MEMORY[0x1E0CA2E68], 0.0) != 4
          && !*(_BYTE *)(a3 + 235))
        {
          memset(&time1, 0, sizeof(time1));
          v89 = v120;
          HIDWORD(v40) = HIDWORD(v120.value);
          LODWORD(v40) = *(_DWORD *)(a1 + 736);
          TXSequenceChannels::getPosition(v24 + 25032, &v89, &time1, (double)v40);
          v41 = *(double *)&time1.epoch;
          if (v39)
            v41 = 0.0;
          PCMatrix44Tmpl<double>::rightTranslate((double *)a2, *(double *)&time1.value, *(double *)&time1.timescale, v41);
        }
        if (TXTextLayout::alignToPath((TXTextLayout *)v24)
          && OZChannel::getValueAsInt((OZChannel *)(v24 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 2)
        {
          PCMatrix44Tmpl<double>::rightTranslate((double *)a2, v100, v101, v102);
        }
        PCMatrix44Tmpl<double>::rightRotate((double *)a2, 4, v34, v35, v36);
        PCMatrix44Tmpl<double>::rightRotate((double *)a2, 4, v112, v111, v110);
        PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a2, v61 * 3.14159265 / 180.0, 0.0);
        if (!*(_BYTE *)(a3 + 235))
        {
          time1.value = 0;
          v79 = 0.0;
          *(_QWORD *)&v64[0] = 0;
          v88 = v120;
          HIDWORD(v42) = HIDWORD(v120.value);
          LODWORD(v42) = *(_DWORD *)(a1 + 736);
          OZChannelScale3D::getValue((OZChannelScale3D *)(v24 + 26232), &v88, (double *)&time1.value, &v79, (double *)v64, (double)v42);
          PCMatrix44Tmpl<double>::rightScale((double *)a2, *(double *)&time1.value, v79, *(double *)v64);
        }
        PCMatrix44Tmpl<double>::rightTranslate((double *)a2, -v31, -v32, -v33);
        v43.n128_f64[0] = PCMatrix44Tmpl<double>::rightScale((double *)a2, v115, v114, v113);
        if (!*(_DWORD *)(a3 + 48))
        {
          if (a6)
          {
            PCMatrix44Tmpl<double>::operator*(a6, (__int128 *)a2, (uint64_t)&time1);
            if (&time1 != (CMTime *)a2)
            {
              for (i = 0; i != 128; i += 32)
              {
                v53 = (__n128 *)(a2 + i);
                v43 = *(__n128 *)((char *)&time1.value + i);
                v54 = *(__n128 *)((char *)&time1.epoch + i);
                *v53 = v43;
                v53[1] = v54;
              }
            }
          }
          else
          {
            v78 = 0x3FF0000000000000;
            v75 = 0x3FF0000000000000;
            v72 = 0x3FF0000000000000;
            time1.value = 0x3FF0000000000000;
            *(_OWORD *)&time1.timescale = 0u;
            v71 = 0u;
            v73 = 0u;
            v74 = 0u;
            v76 = 0u;
            v77 = 0u;
            (*(void (**)(uint64_t, CMTime *, uint64_t))(*(_QWORD *)(v24 + 200) + 1256))(v24 + 200, &time1, a3);
            PCMatrix44Tmpl<double>::operator*((uint64_t)&time1, (__int128 *)a2, (uint64_t)&v79);
            if (&v79 != (double *)a2)
            {
              for (j = 0; j != 128; j += 32)
              {
                v59 = (__n128 *)(a2 + j);
                v43 = *(__n128 *)((char *)&v79 + j);
                v60 = *(__n128 *)&v81[j - 8];
                *v59 = v43;
                v59[1] = v60;
              }
            }
          }
        }
        if (!v39 && OZChannel::getValueAsInt((OZChannel *)(v24 + 20312), MEMORY[0x1E0CA2E68], 0.0))
        {
          OZRenderParams::OZRenderParams((OZRenderParams *)&time1, (const OZRenderParams *)a3);
          if (*(_BYTE *)(a3 + 202))
          {
            v44 = *(_QWORD *)(a3 + 1280);
            if (v44)
            {
              (*(void (**)(double *__return_ptr, _QWORD))(*(_QWORD *)v44 + 424))(&v79, *(_QWORD *)(a3 + 1280));
              v65 = 0u;
              memset(v64, 0, sizeof(v64));
              v66 = 4;
              v67 = 0u;
              v68 = 0u;
              v69 = 0;
              PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v79, (uint64_t)v64);
              if (*(double *)&v65 < 0.0)
              {
                *(float64x2_t *)&v81[8] = vnegq_f64(*(float64x2_t *)&v81[8]);
                v82 = vnegq_f64(v82);
                v45 = (LiSimpleCamera *)operator new();
                LiSimpleCamera::LiSimpleCamera(v45);
                v62.var0 = (PC_Sp_counted_base *)v45;
                PCSharedCount::PCSharedCount(&v63, (LiSimpleCamera *)((char *)v45 + *(_QWORD *)(*(_QWORD *)v45 - 24)));
                if (!v45)
                  throw_PCNullPointerException(1);
                (*(void (**)(LiSimpleCamera *, uint64_t))(*(_QWORD *)v62.var0 + 168))(v45, v44);
                (*(void (**)(PC_Sp_counted_base *, double *))(*(_QWORD *)v62.var0 + 432))(v62.var0, &v79);
                OZRenderParams::setCamera((uint64_t)&time1, &v62);
                PCSharedCount::~PCSharedCount(&v63);
              }
            }
          }
          v87 = 0x3FF0000000000000;
          v84 = 0x3FF0000000000000;
          *(_QWORD *)&v81[16] = 0x3FF0000000000000;
          v79 = 1.0;
          v80 = 0u;
          *(_OWORD *)v81 = 0u;
          v82 = 0u;
          v83 = 0u;
          v85 = 0u;
          v86 = 0u;
          (*(void (**)(uint64_t, double *, CMTime *))(*(_QWORD *)(v24 + 200) + 1304))(v24 + 200, &v79, &time1);
          PCMatrix44Tmpl<double>::rightMult(a2, &v79);
          OZRenderParams::~OZRenderParams((OZRenderParams *)&time1);
        }
        if (v18)
        {
          v43 = *(__n128 *)a3;
          *(_QWORD *)(a1 + 720) = *(_QWORD *)(a3 + 16);
          *(__n128 *)(a1 + 704) = v43;
          v46 = a1 + 576;
          if (a1 + 576 != a2)
          {
            for (k = 0; k != 4; ++k)
            {
              for (m = 0; m != 32; m += 8)
              {
                v43.n128_u64[0] = *(_QWORD *)(a2 + m);
                *(_QWORD *)(v46 + m) = v43.n128_u64[0];
              }
              v46 += 32;
              a2 += 32;
            }
          }
        }
        v49 = v122;
        if (v122)
        {
          v50 = (unint64_t *)&v122->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v49->__on_zero_shared)(v49, v43);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        return;
      }
    }
    else
    {
      HIDWORD(v27) = HIDWORD(v120.value);
      v118 = v120;
      LODWORD(v27) = *(_DWORD *)(a1 + 736);
      OZChannel::getValueAsDouble((OZChannel *)(v24 + 28288), &v118, (double)v27);
      v26 = v26 + v28;
      if (!a5)
        goto LABEL_14;
    }
    v117 = v120;
    OZChannel::getValueAsDouble((OZChannel *)(v24 + 60360), &v117, 0.0);
    a8 = v29;
    v116 = v120;
    OZChannel::getValueAsDouble((OZChannel *)(v24 + 59888), &v116, 0.0);
    a9 = v30;
    goto LABEL_14;
  }
  v55 = a1 + 576;
  if (a1 + 576 != a2)
  {
    for (n = 0; n != 4; ++n)
    {
      for (ii = 0; ii != 32; ii += 8)
        *(_QWORD *)(a2 + ii) = *(_QWORD *)(v55 + ii);
      a2 += 32;
      v55 += 32;
    }
  }
}

void sub_1B2929F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  uint64_t v18;
  va_list va;

  va_start(va, a17);
  MEMORY[0x1B5E29170](v17, 0x10A1C40DA4F106CLL);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v18 - 160);
  _Unwind_Resume(a1);
}

void TXTextObject::getScale(TXTextObject *this, CMTime *a2, double *a3, double *a4, double *a5, int a6, int a7, int a8, BOOL a9, BOOL a10, BOOL a11)
{
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  OZScene **v24;
  unint64_t v25;
  double v26;
  double v27;
  OZScene **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  CMTime v33;
  CMTime v34;
  double v35;
  double v36;
  uint64_t v37;
  float64x2_t v38[8];
  double v39[4];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CMTime v45;
  CMTime v46;
  CMTime v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  v18 = *((_QWORD *)this + 33);
  if (v18)
  {
    v20 = *(_QWORD *)(v18 + 8);
    v19 = *(std::__shared_weak_count **)(v18 + 16);
    v48 = v20;
    v49 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
  }
  else
  {
    v20 = 0;
    v48 = 0;
    v49 = 0;
  }
  v23 = *((_QWORD *)this + 68);
  v47 = *a2;
  if (a11 && Li3DEngineScene::sceneManager((Li3DEngineScene *)v23))
  {
    v24 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)v23);
    OZLockingGroup::acquireReadLocks(v24);
  }
  *a3 = 1.0;
  *a4 = 1.0;
  *a5 = 1.0;
  if (a7)
  {
    v38[0].f64[0] = 0.0;
    v39[0] = 0.0;
    v35 = 0.0;
    v46 = v47;
    OZChannelScale3D::getValue((OZChannelScale3D *)(v20 + 2864), &v46, v38[0].f64, v39, &v35, 0.0);
    *a3 = v38[0].f64[0] * *a3;
    *a4 = v39[0] * *a4;
    *a5 = v35 * *a5;
    if ((TXTextLayout::shouldScaleToLRMargins((TXTextLayout *)v23) & 1) != 0
      || TXTextLayout::shouldScaleProportionallyToLeftRightMargins((TXTextLayout *)v23))
    {
      *a3 = TXTextLayout::getXMarginScale((TXTextLayout *)v23) * *a3;
    }
    if ((TXTextLayout::shouldScaleToTBMargins((TXTextLayout *)v23) & 1) != 0
      || TXTextLayout::shouldScaleProportionallyToLeftRightMargins((TXTextLayout *)v23))
    {
      *a4 = TXTextLayout::getYMarginScale((TXTextLayout *)v23) * *a4;
    }
  }
  if (a6)
  {
    v38[0].f64[0] = 0.0;
    v39[0] = 0.0;
    v35 = 0.0;
    HIDWORD(v25) = HIDWORD(v47.value);
    v45 = v47;
    LODWORD(v25) = *((_DWORD *)this + 184);
    OZChannelScale3D::getValue((OZChannelScale3D *)(v23 + 26232), &v45, v38[0].f64, v39, &v35, (double)v25);
    *a3 = v38[0].f64[0] * *a3;
    *a4 = v39[0] * *a4;
    *a5 = v35 * *a5;
  }
  if (a8)
  {
    v39[0] = 1.0;
    memset(&v39[1], 0, 24);
    *(double *)&v40 = 1.0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0x3FF0000000000000;
    TXTextObject::getScaleMatrix(this, (uint64_t)v39, a2, a11);
    v26 = *(double *)&v40;
    *a3 = *a3 * fabs(v39[0]);
    *a4 = *a4 * fabs(v26);
    if (*(_BYTE *)(theApp + 81))
    {
      OZRenderParams::getPixelTransform((OZRenderParams *)a2, (uint64_t)v38);
      v35 = 0.0;
      v36 = 0.0;
      v37 = 0;
      getScale(v38, (uint64_t)&v35);
      v27 = v36;
      *a3 = *a3 * fabs(v35);
      *a4 = *a4 * fabs(v27);
    }
  }
  if (a9)
  {
    v38[0].f64[0] = 0.0;
    v39[0] = 0.0;
    v34 = *a2;
    TXTextObject::getDropShadowScale(this, &v34, v38[0].f64, v39, 1);
    *a3 = v38[0].f64[0] * *a3;
    *a4 = v39[0] * *a4;
  }
  if (a10)
  {
    v38[0].f64[0] = 0.0;
    v39[0] = 0.0;
    v33 = *a2;
    TXTextObject::getGlowScale(this, &v33, v38[0].f64, v39, 1);
    *a3 = v38[0].f64[0] * *a3;
    *a4 = v39[0] * *a4;
  }
  if (a11 && Li3DEngineScene::sceneManager((Li3DEngineScene *)v23))
  {
    v28 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)v23);
    OZLockingGroup::releaseReadLocks(v28);
  }
  v29 = v49;
  if (v49)
  {
    v30 = (unint64_t *)&v49->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1B292A394(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void TXTextObject::getRotation(TXTextObject *this, CMTime *a2, double *a3, double *a4, double *a5, int a6, int a7, __n128 a8)
{
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  OZScene **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  OZScene **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v15 = *((_QWORD *)this + 33);
  if (v15)
  {
    v17 = *(_QWORD *)(v15 + 8);
    v16 = *(std::__shared_weak_count **)(v15 + 16);
    v35 = v17;
    v36 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
  }
  else
  {
    v17 = 0;
    v35 = 0;
    v36 = 0;
  }
  v20 = *((_QWORD *)this + 68);
  if (a7 && Li3DEngineScene::sceneManager(*((Li3DEngineScene **)this + 68)))
  {
    v21 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)v20);
    OZLockingGroup::acquireReadLocks(v21);
  }
  if (*((_BYTE *)this + 160))
  {
    if (a3)
      *a3 = 0.0;
    a8.n128_u64[0] = 0;
    if (!a4)
      goto LABEL_22;
LABEL_21:
    *a4 = a8.n128_f64[0];
    goto LABEL_22;
  }
  if (a3)
  {
    v34 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v17 + 4480), &v34, 0.0);
    a8.n128_f64[0] = a8.n128_f64[0] + *((double *)this + 27);
    *a3 = a8.n128_f64[0];
    if (a6)
    {
      v33 = *a2;
      HIDWORD(v22) = HIDWORD(v33.value);
      LODWORD(v22) = *((_DWORD *)this + 184);
      OZChannel::getValueAsDouble((OZChannel *)(v20 + 26960), &v33, (double)v22);
      a8.n128_f64[0] = a8.n128_f64[0] + *a3;
      *a3 = a8.n128_f64[0];
    }
  }
  if (a4)
  {
    v32 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v35 + 4632), &v32, 0.0);
    a8.n128_f64[0] = a8.n128_f64[0] + *((double *)this + 28);
    *a4 = a8.n128_f64[0];
    if (a6)
    {
      v31 = *a2;
      HIDWORD(v23) = HIDWORD(v31.value);
      LODWORD(v23) = *((_DWORD *)this + 184);
      OZChannel::getValueAsDouble((OZChannel *)(v20 + 27112), &v31, (double)v23);
      a8.n128_f64[0] = a8.n128_f64[0] + *a4;
      goto LABEL_21;
    }
  }
LABEL_22:
  if (a5)
  {
    v30 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v35 + 4784), &v30, 0.0);
    a8.n128_f64[0] = a8.n128_f64[0] + *((double *)this + 29);
    *a5 = a8.n128_f64[0];
    if (a6)
    {
      v29 = *a2;
      HIDWORD(v24) = HIDWORD(v29.value);
      LODWORD(v24) = *((_DWORD *)this + 184);
      OZChannel::getValueAsDouble((OZChannel *)(v20 + 27264), &v29, (double)v24);
      a8.n128_f64[0] = a8.n128_f64[0] + *a5;
      *a5 = a8.n128_f64[0];
    }
  }
  if (a7 && Li3DEngineScene::sceneManager((Li3DEngineScene *)v20))
  {
    v25 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)v20);
    OZLockingGroup::releaseReadLocks(v25);
  }
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, a8);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1B292A630(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void TXTextObject::getPivot(TXTextLayout **this, double *a2, double *a3, double *a4, CMTime *a5, int a6)
{
  uint64_t v12;
  TXTextLayout *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  int ValueAsInt;
  int v20;
  uint64_t v21;
  int v22;
  __n128 v23;
  __n128 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  char v30;
  TXTextLayout *v31;
  unint64_t v32;
  _BOOL4 v33;
  TXTextLayout *v34;
  unint64_t v35;
  TXTextLayout *v36;
  double v37;
  double v38;
  double v39;
  __int128 v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  TXParagraphStyle *ParagraphStyleContainingOffset;
  double v60;
  double v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  CMTime v65;
  double v66;
  double v67;
  double v68;
  double v69;
  OZRenderState v70;
  CMTime v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  CMTime v75;
  double v76;
  double v77;
  double v78;
  CMTime v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  _QWORD v93[2];

  *a3 = 0.0;
  *a4 = 0.0;
  v87 = 0;
  v88 = 0;
  v89 = 0x3FF0000000000000;
  v90 = 0;
  v91 = 0;
  v92 = 1;
  v93[0] = 0;
  *(_DWORD *)((char *)v93 + 7) = 0;
  v12 = TXTextObject::syncGlyph((TXTextObject *)this, a5, (uint64_t)&v87);
  if (!v12)
  {
    *a2 = 0.0;
    goto LABEL_79;
  }
  v85 = 0.0;
  v86 = 0;
  (*(void (**)(uint64_t, uint64_t *, double *, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v86, &v85, &v87);
  *(_QWORD *)a2 = v86;
  *a3 = v85;
  v83 = 1.0;
  v84 = 1.0;
  v82 = 1.0;
  v13 = this[33];
  if (v13)
  {
    v14 = *((_QWORD *)v13 + 1);
    v15 = (std::__shared_weak_count *)*((_QWORD *)v13 + 2);
    v80 = v14;
    v81 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
  }
  else
  {
    v14 = 0;
    v80 = 0;
    v81 = 0;
  }
  v79 = *a5;
  OZChannelScale3D::getValue((OZChannelScale3D *)(v14 + 2864), &v79, &v84, &v83, &v82, 0.0);
  *a2 = v84 * *a2;
  v18 = (*(uint64_t (**)(TXTextLayout *))(*(_QWORD *)this[68] + 296))(this[68]);
  v76 = 0.0;
  v77 = 0.0;
  v78 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this[68] + 22288), MEMORY[0x1E0CA2E68], 0.0);
  v20 = OZChannel::getValueAsInt((OZChannel *)((char *)this[68] + 22544), MEMORY[0x1E0CA2E68], 0.0);
  v21 = (uint64_t)this[68];
  v75 = *a5;
  TXTextLayout::getAnchorPointOffset(v21, &v75, &v76);
  v22 = OZChannel::getValueAsInt((OZChannel *)((char *)this[68] + 22544), MEMORY[0x1E0CA2E68], 0.0);
  v24.n128_u64[1] = 0xBFF0000000000000;
  v73 = xmmword_1B304F270;
  v74 = xmmword_1B304F270;
  v72 = xmmword_1B304F270;
  if ((v18 & 1) == 0)
  {
    switch(ValueAsInt)
    {
      case 3:
        OZRenderState::OZRenderState(&v70);
        *(_OWORD *)&v70.var0.var0 = *(_OWORD *)&a5->value;
        v70.var0.var3 = a5->epoch;
        TXTextLayout::getTypographicBoundsWithAlignment(this[68], (const CMTime *)&v70, (uint64_t)&v66);
        v23.n128_f64[0] = v66;
        v25 = v67;
        v26 = v68;
        v24.n128_f64[0] = v69;
        goto LABEL_26;
      case 2:
        v30 = v22 == 2;
        v31 = this[68];
        v32 = *((unsigned int *)this + 184);
        v71 = *a5;
        TXTextLayout::getLineBounds(v31, &v71, v32, v30, a6, (uint64_t)&v70);
        break;
      case 1:
        TXTextLayout::getWordBounds(this[68], *((unsigned int *)this + 184), v22 == 2, (uint64_t)&v70);
        break;
      default:
        v25 = 0.0;
        v26 = -1.0;
LABEL_25:
        v24.n128_u64[0] = -1.0;
        v23.n128_u64[0] = 0;
        goto LABEL_26;
    }
    v23.n128_u64[0] = v70.var0.var0;
    v25 = *(double *)&v70.var0.var1;
    v26 = *(double *)&v70.var0.var3;
    v24.n128_u64[0] = *(_QWORD *)&v70.var1;
    goto LABEL_26;
  }
  v25 = 0.0;
  v26 = -1.0;
  switch(ValueAsInt)
  {
    case 0:
      if (v22 == 2)
      {
        v27 = *((double *)this + 54);
        v28 = *((double *)this + 53) + *((double *)this + 55);
        v29 = v27 + *((double *)this + 56);
        *(_QWORD *)&v72 = this[53];
        *((double *)&v72 + 1) = v28;
        *(double *)&v73 = v27;
        *((double *)&v73 + 1) = v29;
        v74 = 0uLL;
        goto LABEL_25;
      }
      TXTextObject::getBoundingImageVolume((TXTextObject *)this, (uint64_t)&v72, (uint64_t)a5);
      v24.n128_u64[0] = -1.0;
      v23.n128_u64[0] = 0;
      break;
    case 1:
      TXTextLayout::getWordVolume(this[68], *((unsigned int *)this + 184), v22 == 2, (double *)&v70.var0.var0);
      goto LABEL_23;
    case 2:
      v33 = v22 == 2;
      v34 = this[68];
      v35 = *((unsigned int *)this + 184);
      v65 = *a5;
      TXTextLayout::getLineVolume(v34, &v65, v35, v33, (double *)&v70.var0.var0);
LABEL_23:
      v23.n128_u64[1] = *(_QWORD *)&v70.var1;
      v72 = *(_OWORD *)&v70.var0.var0;
      v73 = *(_OWORD *)&v70.var0.var3;
      v24.n128_u64[1] = *(_QWORD *)&v70.var3;
      v74 = *(_OWORD *)&v70.var2;
      goto LABEL_25;
    case 3:
      OZRenderState::OZRenderState(&v70);
      *(_OWORD *)&v70.var0.var0 = *(_OWORD *)&a5->value;
      v70.var0.var3 = a5->epoch;
      TXTextLayout::getTypographicBox((uint64_t)this[68], (float64x2_t *)&v72, (CMTime *)&v70, 1);
      goto LABEL_25;
    default:
      goto LABEL_25;
  }
LABEL_26:
  v36 = this[68];
  if (*((_BYTE *)v36 + 63801))
  {
    v37 = v77;
    *a2 = v76 + *a2;
    *a3 = v37 + *a3;
    *a4 = v78 + *a4;
    if (ValueAsInt)
    {
      *a2 = v26 * 0.5 + v23.n128_f64[0] - *a2 - *((double *)this + 21);
      v23.n128_u64[0] = (unint64_t)this[22];
      v24.n128_f64[0] = v25 + v24.n128_f64[0] * 0.5 - *a3 - v23.n128_f64[0];
      *a3 = v24.n128_f64[0];
    }
    goto LABEL_74;
  }
  if (!v18)
  {
    *a4 = 0.0;
    if (!ValueAsInt)
    {
      if (v20 != 2)
      {
        OZRenderState::OZRenderState(&v70);
        *(_OWORD *)&v70.var0.var0 = *(_OWORD *)&a5->value;
        v70.var0.var3 = a5->epoch;
        TXTextObject::getImageBounds((TXTextObject *)this, &v70, (uint64_t)&v66);
        v24.n128_f64[0] = v66;
        v23.n128_f64[0] = v67;
        v53 = v68;
        v54 = v69;
        v55 = v69 * 0.5;
        *a2 = v66 + v68 * 0.5;
        v56 = v23.n128_f64[0] + v55;
        *a3 = v56;
        switch(v20)
        {
          case 0:
            v57 = v56 - v56;
            goto LABEL_68;
          case 3:
            v57 = v23.n128_f64[0] + v54;
LABEL_68:
            *a3 = v57;
            goto LABEL_71;
          case 4:
            goto LABEL_70;
          case 5:
            v24.n128_f64[0] = v24.n128_f64[0] + v53;
LABEL_70:
            *a2 = v24.n128_f64[0];
            break;
          default:
            goto LABEL_71;
        }
        goto LABEL_71;
      }
      v48 = *((double *)this + 54);
      v49 = *((double *)this + 56);
      *a2 = *((double *)this + 53) + *((double *)this + 55) * 0.5;
      v43 = v48 + v49 * 0.5;
LABEL_72:
      *a3 = v43;
      goto LABEL_73;
    }
    if (v20 != 4)
    {
      if (v20 != 5)
      {
        *a2 = v26 * 0.5 + v23.n128_f64[0] - *((double *)this + 21);
        if (v20 == 3)
        {
          v42 = v24.n128_f64[0] + v25 - v85;
          goto LABEL_40;
        }
        if (!v20 && ValueAsInt != 3)
        {
          *a3 = 0.0;
          goto LABEL_73;
        }
LABEL_39:
        v42 = v25 + v24.n128_f64[0] * 0.5;
LABEL_40:
        v43 = v42 - *((double *)this + 22);
        goto LABEL_72;
      }
      v23.n128_f64[0] = v26 + v23.n128_f64[0];
    }
    *a2 = v23.n128_f64[0] - *((double *)this + 21);
    goto LABEL_39;
  }
  if (ValueAsInt)
  {
    v38 = *(double *)&v72;
    v39 = *((double *)&v72 + 1) - *(double *)&v72;
    v40 = v73;
    *a2 = *(double *)&v72 - *((double *)this + 21) + (*((double *)&v72 + 1) - *(double *)&v72) * 0.5;
    v41 = *(double *)&v74 + *((double *)&v74 + 1);
    *a3 = (*(double *)&v40 + *((double *)&v40 + 1)) * 0.5 - *a3 - *((double *)this + 22);
    *a4 = v41 * 0.5;
    switch(v20)
    {
      case 0:
        if (ValueAsInt == 3)
        {
          *a3 = *(double *)&v40
              - *((double *)this + 25)
              - *(double *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v36 + 2379) - 8) + 888)
                          + ((unint64_t)(*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v36 + 2379) - 8)
                                                                        + 876)
                                                            - 1) << 6)
                          + 8);
          goto LABEL_57;
        }
        *a3 = 0.0;
        break;
      case 3:
        *a3 = *((double *)&v40 + 1) - v85 - *((double *)this + 22);
        break;
      case 4:
        v58 = v38 - *((double *)this + 21);
        goto LABEL_55;
      case 5:
        v58 = v39 + v38 - *((double *)this + 21);
LABEL_55:
        *a2 = v58;
        break;
      default:
        break;
    }
    if (ValueAsInt == 3)
    {
LABEL_57:
      ParagraphStyleContainingOffset = (TXParagraphStyle *)TXTextLayout::getParagraphStyleContainingOffset(v36, *((unsigned int *)this + 184));
      switch(TXParagraphStyle::getAlignment(ParagraphStyleContainingOffset))
      {
        case 1u:
        case 4u:
          v60 = *a2 + (*((double *)&v72 + 1) - *(double *)&v72) * -0.5;
          goto LABEL_60;
        case 2u:
        case 5u:
          v60 = *a2 - (*((double *)&v72 + 1) - *(double *)&v72);
LABEL_60:
          *a2 = v60;
          break;
        default:
          goto LABEL_73;
      }
    }
    goto LABEL_73;
  }
  if (v20 != 2)
  {
    TXTextObject::getBoundingImageVolume((TXTextObject *)this, (uint64_t)&v72, (uint64_t)a5);
    v23.n128_u64[0] = *((_QWORD *)&v72 + 1);
    v24.n128_u64[0] = v72;
    v50 = *((_QWORD *)&v73 + 1);
    v51 = (*(double *)&v74 + *((double *)&v74 + 1)) * 0.5;
    v52 = *(double *)&v73 + *((double *)&v73 + 1);
    *a2 = (*(double *)&v72 + *((double *)&v72 + 1)) * 0.5;
    *a3 = v52 * 0.5;
    *a4 = v51;
    switch(v20)
    {
      case 0:
        *a3 = 0.0;
        break;
      case 3:
        *(_QWORD *)a3 = v50;
        break;
      case 4:
        goto LABEL_70;
      case 5:
        *a2 = v23.n128_f64[0];
        break;
      default:
        break;
    }
LABEL_71:
    *a2 = v84 * *a2;
    v43 = v83 * *a3;
    goto LABEL_72;
  }
  v44 = *((double *)this + 53);
  v45 = *((double *)this + 54);
  v46 = v44 + *((double *)this + 55);
  v47 = v45 + *((double *)this + 56);
  *(double *)&v72 = v44;
  *((double *)&v72 + 1) = v46;
  *(double *)&v73 = v45;
  *((double *)&v73 + 1) = v47;
  v74 = 0uLL;
  *a2 = (v44 + v46) * 0.5;
  *a3 = (v45 + v47) * 0.5;
  *a4 = 0.0;
LABEL_73:
  v61 = v77;
  *a2 = v76 + *a2;
  *a3 = v61 + *a3;
  v23.n128_f64[0] = *a4;
  v24.n128_f64[0] = v78 + *a4;
  *a4 = v24.n128_f64[0];
LABEL_74:
  v62 = v81;
  if (v81)
  {
    v63 = (unint64_t *)&v81->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128))v62->__on_zero_shared)(v62, v24, v23);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
LABEL_79:
  if (BYTE2(v93[0]))
  {
    if (v90)
      MEMORY[0x1B5E29170](v90, 0x1000C40FF89C88ELL);
  }
}

void sub_1B292AE7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 208);
  if (*(_BYTE *)(v1 - 113))
  {
    v3 = *(_QWORD *)(v1 - 128);
    if (v3)
      MEMORY[0x1B5E29170](v3, 0x1000C40FF89C88ELL);
  }
  _Unwind_Resume(a1);
}

void PCMatrix44Tmpl<double>::rightRotate(double *a1, int a2, double a3, double a4, double a5)
{
  double *v9;
  double v10;
  int v11;
  double *v12;
  double v13;
  int v14;
  double *v15;
  double v16;
  int v17;

  switch(a2)
  {
    case 0:
      PCMatrix44Tmpl<double>::rightRotate(a1, 2, a5);
      v9 = a1;
      v10 = a4;
      v11 = 1;
      goto LABEL_4;
    case 1:
      PCMatrix44Tmpl<double>::rightRotate(a1, 1, a4);
      v9 = a1;
      v10 = a5;
      v11 = 2;
LABEL_4:
      PCMatrix44Tmpl<double>::rightRotate(v9, v11, v10);
      PCMatrix44Tmpl<double>::rightRotate(a1, 0, a3);
      return;
    case 2:
      PCMatrix44Tmpl<double>::rightRotate(a1, 2, a5);
      v12 = a1;
      v13 = a3;
      v14 = 0;
      goto LABEL_7;
    case 3:
      PCMatrix44Tmpl<double>::rightRotate(a1, 0, a3);
      v12 = a1;
      v13 = a5;
      v14 = 2;
LABEL_7:
      PCMatrix44Tmpl<double>::rightRotate(v12, v14, v13);
      PCMatrix44Tmpl<double>::rightRotate(a1, 1, a4);
      return;
    case 4:
      PCMatrix44Tmpl<double>::rightRotate(a1, 1, a4);
      v15 = a1;
      v16 = a3;
      v17 = 0;
      goto LABEL_10;
    case 5:
      PCMatrix44Tmpl<double>::rightRotate(a1, 0, a3);
      v15 = a1;
      v16 = a4;
      v17 = 1;
LABEL_10:
      PCMatrix44Tmpl<double>::rightRotate(v15, v17, v16);
      PCMatrix44Tmpl<double>::rightRotate(a1, 2, a5);
      break;
    default:
      return;
  }
}

void TXSequenceChannels::getPosition(uint64_t a1, const CMTime *a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 296), a2, a4);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 448), a2, a4);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 896), a2, a4);
  *a3 = v9;
  a3[1] = v11;
  a3[2] = v12;
}

float64x2_t PCMatrix44Tmpl<double>::rightShear(float64x2_t *a1, float64_t a2, double a3)
{
  float64x2_t v3;
  double v5;
  long double v7;
  double v8;
  long double v10;
  int8x16_t v11;
  float64x2_t v12;
  int8x16_t v13;
  float64x2_t v14;
  int8x16_t v15;
  float64x2_t v16;
  int8x16_t v17;
  float64x2_t result;
  double v19;
  float64_t v20;

  v3.f64[0] = a2;
  if (a2 != 0.0)
  {
    if (a2 < 0.0)
    {
      do
        v3.f64[0] = v3.f64[0] + 3.14159265;
      while (v3.f64[0] < 0.0);
    }
    for (; v3.f64[0] > 3.14159265; v3.f64[0] = v3.f64[0] + -3.14159265)
      ;
    v5 = 1.56556034;
    if (v3.f64[0] >= 1.57603231 || v3.f64[0] <= 1.56556034)
      v5 = v3.f64[0];
    v19 = a3;
    v7 = tan(v5);
    a3 = v19;
    v3.f64[0] = v7;
  }
  if (a3 != 0.0)
  {
    for (; a3 < 0.0; a3 = a3 + 3.14159265)
      ;
    for (; a3 > 3.14159265; a3 = a3 + -3.14159265)
      ;
    v8 = 1.56556034;
    if (a3 >= 1.57603231 || a3 <= 1.56556034)
      v8 = a3;
    v20 = v3.f64[0];
    v10 = tan(v8);
    v3.f64[0] = v20;
    a3 = v10;
  }
  v3.f64[1] = a3;
  v11 = (int8x16_t)vmulq_f64(v3, *a1);
  *a1 = vaddq_f64(*a1, (float64x2_t)vextq_s8(v11, v11, 8uLL));
  v12 = a1[2];
  v13 = (int8x16_t)vmulq_f64(v3, v12);
  a1[2] = vaddq_f64(v12, (float64x2_t)vextq_s8(v13, v13, 8uLL));
  v14 = a1[4];
  v15 = (int8x16_t)vmulq_f64(v3, v14);
  a1[4] = vaddq_f64(v14, (float64x2_t)vextq_s8(v15, v15, 8uLL));
  v16 = a1[6];
  v17 = (int8x16_t)vmulq_f64(v3, v16);
  result = vaddq_f64(v16, (float64x2_t)vextq_s8(v17, v17, 8uLL));
  a1[6] = result;
  return result;
}

double OZRenderParams::setCamera(uint64_t a1, const PCSharedCount *a2)
{
  uint64_t *v3;
  double result;
  PCSharedCount v5;

  *(PCSharedCount *)(a1 + 1280) = (PCSharedCount)a2->var0;
  v3 = (uint64_t *)(a1 + 1288);
  PCSharedCount::PCSharedCount(&v5, a2 + 1);
  PCSharedCount::operator=(v3, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

void sub_1B292B280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void TXTextObject::getFourCornerPointsInObjectSpaceForAttribute(uint64_t a1, const OZRenderState *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5, float64x2_t *a6, int a7, int a8, double a9, double a10, double a11, double a12, unsigned __int8 a13, float64x2_t *a14)
{
  __int128 v20;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 isEnabled;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  unint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  unint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  unint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  CMTime v75;
  CMTime v76;
  float64_t v77;
  float64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  double v81;
  double v82;
  __int128 v83;
  CMTime v84;

  v20 = *(_OWORD *)&a2->var0.var0;
  v84.epoch = a2->var0.var3;
  v81 = 0.0;
  v82 = 0.0;
  __asm { FMOV            V4.2D, #-1.0 }
  v83 = _Q4;
  *(_OWORD *)&v84.value = v20;
  TXTextObject::getImageBoundsOfAttribute(a1, &v81, a2, a7, a8, 0, a13, a14, a9, a10, a11, a12);
  v26 = *(_QWORD *)(a1 + 264);
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 8);
    v28 = *(std::__shared_weak_count **)(v26 + 16);
    v79 = v27;
    v80 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
  }
  else
  {
    v27 = 0;
    v79 = 0;
    v80 = 0;
  }
  switch(a7)
  {
    case 1:
      v31 = v27 + 27976;
      v32 = *(_QWORD *)(a1 + 544);
      v33 = 35712;
      break;
    case 2:
      v31 = v27 + 37568;
      v32 = *(_QWORD *)(a1 + 544);
      v33 = 42096;
      break;
    case 3:
      v31 = v27 + 19680;
      v32 = *(_QWORD *)(a1 + 544);
      v33 = 47672;
      break;
    default:
      v31 = v27 + 10896;
      v32 = *(_QWORD *)(a1 + 544);
      v33 = 30472;
      break;
  }
  v34 = v32 + v33;
  isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(v32 + v33), 0, 1);
  v77 = 1.0;
  v78 = 1.0;
  if ((a7 & 0xFFFFFFFE) == 2 && a8)
  {
    if (a7 == 2)
    {
      v76 = v84;
      TXTextObject::getGlowScale((TXTextObject *)a1, &v76, &v78, &v77, a13);
    }
    else
    {
      v75 = v84;
      TXTextObject::getDropShadowScale((TXTextObject *)a1, &v75, &v78, &v77, a13);
    }
    v36.f64[0] = v78;
    v36.f64[1] = v77;
    *a6 = vmulq_f64(v36, *a6);
    *a5 = vmulq_f64(v36, *a5);
    *a3 = vmulq_f64(v36, *a3);
    *a4 = vmulq_f64(v36, *a4);
  }
  OZChannel::getValueAsDouble((OZChannel *)(v31 + 272), &v84, 0.0);
  v38 = v37;
  v39 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)(v31 + 424), &v84, 0.0);
  v41 = *(double *)&v40;
  v42 = 0.0;
  if ((isEnabled & a13) == 1)
  {
    LODWORD(v40) = *(_DWORD *)(a1 + 736);
    v43 = (double)v40;
    OZChannel::getValueAsDouble((OZChannel *)(v34 + 272), &v84, (double)v40);
    v42 = v44;
    OZChannel::getValueAsDouble((OZChannel *)(v34 + 424), &v84, v43);
    v39 = v45;
  }
  v46 = v39 + v82 + v41 * v77;
  a3->f64[0] = v42 + v81 + v38 * v78;
  a3->f64[1] = v46;
  OZChannel::getValueAsDouble((OZChannel *)(v31 + 976), &v84, 0.0);
  v48 = v47;
  OZChannel::getValueAsDouble((OZChannel *)(v31 + 1128), &v84, 0.0);
  v50 = *(double *)&v49;
  if ((isEnabled & a13) != 0)
  {
    LODWORD(v49) = *(_DWORD *)(a1 + 736);
    v51 = (double)v49;
    OZChannel::getValueAsDouble((OZChannel *)(v34 + 976), &v84, (double)v49);
    v42 = v52;
    OZChannel::getValueAsDouble((OZChannel *)(v34 + 1128), &v84, v51);
    v39 = v53;
  }
  v54 = v39 + v82 + v50 * v77;
  a4->f64[0] = v42 + v81 + *(double *)&v83 + v48 * v78;
  a4->f64[1] = v54;
  OZChannel::getValueAsDouble((OZChannel *)(v31 + 1680), &v84, 0.0);
  v56 = v55;
  OZChannel::getValueAsDouble((OZChannel *)(v31 + 1832), &v84, 0.0);
  v58 = *(double *)&v57;
  if ((isEnabled & a13) != 0)
  {
    LODWORD(v57) = *(_DWORD *)(a1 + 736);
    v59 = (double)v57;
    OZChannel::getValueAsDouble((OZChannel *)(v34 + 1680), &v84, (double)v57);
    v42 = v60;
    OZChannel::getValueAsDouble((OZChannel *)(v34 + 1832), &v84, v59);
    v39 = v61;
  }
  v62 = v39 + v82 + *((double *)&v83 + 1) + v58 * v77;
  a5->f64[0] = v42 + v81 + *(double *)&v83 + v56 * v78;
  a5->f64[1] = v62;
  OZChannel::getValueAsDouble((OZChannel *)(v31 + 2384), &v84, 0.0);
  v64 = v63;
  OZChannel::getValueAsDouble((OZChannel *)(v31 + 2536), &v84, 0.0);
  v66 = *(double *)&v65;
  if ((isEnabled & a13) != 0)
  {
    LODWORD(v65) = *(_DWORD *)(a1 + 736);
    v67 = (double)v65;
    OZChannel::getValueAsDouble((OZChannel *)(v34 + 2384), &v84, (double)v65);
    v42 = v68;
    OZChannel::getValueAsDouble((OZChannel *)(v34 + 2536), &v84, v67);
    v39 = v69;
  }
  v70 = v39 + v82 + *((double *)&v83 + 1) + v66 * v77;
  a6->f64[0] = v42 + v81 + v64 * v78;
  a6->f64[1] = v70;
  v71 = v80;
  if (v80)
  {
    v72 = (unint64_t *)&v80->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
}

void sub_1B292B724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL PCRect<double>::clipLine(double *a1, float64x2_t *a2, double *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  _BOOL8 result;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v6 = *a1;
  v5 = a1[1];
  v8 = a1[2];
  v7 = a1[3];
  v15 = 1.0;
  v16 = 0.0;
  v14 = *a3 - a2->f64[0];
  result = PCRectClipTest(-v14, a2->f64[0] - v6, &v16, &v15);
  if (result)
  {
    result = PCRectClipTest(v14, v6 + v8 - a2->f64[0], &v16, &v15);
    if (result)
    {
      v10 = a2->f64[1];
      v13 = a3[1] - v10;
      result = PCRectClipTest(-v13, v10 - v5, &v16, &v15);
      if (result)
      {
        result = PCRectClipTest(v13, v5 + v7 - a2->f64[1], &v16, &v15);
        if (result)
        {
          v11.f64[0] = v14;
          if (v15 < 1.0)
          {
            v12.f64[0] = v14;
            v12.f64[1] = v13;
            *(float64x2_t *)a3 = vaddq_f64(vmulq_n_f64(v12, v15), *a2);
          }
          if (v16 > 0.0)
          {
            v11.f64[1] = v13;
            *a2 = vaddq_f64(vmulq_n_f64(v11, v16), *a2);
          }
          return 1;
        }
      }
    }
  }
  return result;
}

void TXTextObject::computeRay(uint64_t a1@<X0>, uint64_t a2@<X2>, const OZRenderState *a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  OZTransformNode *v10;
  OZTransformNode *var5;
  BOOL v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  const void *v22;
  BOOL v23;
  double v24;
  double v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  OZRenderState v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  void *__p;
  char *v53;
  OZRenderState v54;

  (*(void (**)(uint64_t __return_ptr, uint64_t))(*(_QWORD *)a2 + 80))(a5, a2);
  OZRenderState::OZRenderState(&v54, a3);
  v54.var4 = 1;
  __p = 0;
  v51 = 0;
  v53 = 0;
  v9 = *(_QWORD *)(a1 + 544);
  if (v9)
    v10 = (OZTransformNode *)(v9 + 200);
  else
    v10 = 0;
  var5 = a3->var5;
  if (v9)
    v12 = v10 == var5;
  else
    v12 = 1;
  if (v12)
  {
    v13 = 0;
    if (var5)
    {
LABEL_36:
      v24 = (*(double (**)(OZTransformNode *))(*(_QWORD *)var5 + 1328))(var5);
      v50 = 0x3FF0000000000000;
      v47 = 0x3FF0000000000000;
      v44 = 0x3FF0000000000000;
      v41 = 0x3FF0000000000000;
      v42 = 0u;
      v43 = 0u;
      v45 = 0u;
      v46 = 0u;
      v48 = 0u;
      v49 = 0u;
      v25 = a3->var3 / v24;
      if (v25 != 1.0)
      {
        v41 = *(_QWORD *)&v25;
        *(double *)&v42 = v25 * 0.0;
        *((double *)&v42 + 1) = v25 * 0.0;
        *(double *)&v43 = v25 * 0.0;
      }
      PCRay3<double>::transform(a5, (double *)&v41);
      v13 = (char *)__p;
    }
  }
  else
  {
    v13 = 0;
    while (1)
    {
      if (v13 >= v53)
      {
        v14 = (v13 - (_BYTE *)v51) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v15 = (v53 - (_BYTE *)v51) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)(v53 - (_BYTE *)v51) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v53, v16);
        else
          v17 = 0;
        v18 = &v17[8 * v14];
        *(_QWORD *)v18 = v10;
        v13 = v18 + 8;
        v19 = (char *)__p;
        v20 = (char *)v51;
        if (__p != v51)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = (char *)v51;
        }
        v51 = v18;
        __p = v13;
        v53 = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v13 = v10;
        v13 += 8;
      }
      __p = v13;
      v22 = (const void *)*((_QWORD *)v10 + 120);
      if (!v22)
        break;
      var5 = a3->var5;
      if (v10)
        v23 = v10 == var5;
      else
        v23 = 1;
      if (v23)
        goto LABEL_35;
    }
    var5 = a3->var5;
LABEL_35:
    if (var5)
      goto LABEL_36;
  }
  v26 = (char *)v51;
  OZRenderParams::OZRenderParams((OZRenderParams *)&v41);
  OZRenderState::OZRenderState(&v40, a3);
  v40.var4 = 1;
  OZRenderParams::setState((OZRenderParams *)&v41, &v40);
  v39 = 0x3FF0000000000000;
  v36 = 0x3FF0000000000000;
  v33 = 0x3FF0000000000000;
  v30 = 0x3FF0000000000000;
  v31 = 0u;
  v32 = 0u;
  v34 = 0u;
  v35 = 0u;
  v37 = 0u;
  v38 = 0u;
  TXTextObject::getTransformMatrix(a1, (uint64_t)&v30, (uint64_t)&v41, 1, 1, 0, 1, 0.0, 0.0);
  while (v13 != v26)
  {
    v27 = *((_QWORD *)v13 - 1);
    v13 -= 8;
    (*(void (**)(uint64_t, uint64_t, OZRenderState *))(*(_QWORD *)v27 + 1392))(v27, a5, &v54);
    v28 = *(double *)(a5 + 24) * *(double *)(a5 + 24)
        + *(double *)(a5 + 32) * *(double *)(a5 + 32)
        + *(double *)(a5 + 40) * *(double *)(a5 + 40);
    if (v28 > -0.0000001 && v28 < 0.0000001)
      goto LABEL_48;
  }
  if (a4)
    v29 = a4;
  else
    v29 = &v30;
  PCRay3<double>::invTransform((_QWORD *)a5, v29);
LABEL_48:
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v41);
  if (v51)
  {
    __p = v51;
    operator delete(v51);
  }
}

void sub_1B292BBB0(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x728];
  if (STACK[0x728])
  {
    STACK[0x730] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

BOOL PCRay3<double>::invTransform(_QWORD *a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BOOL8 result;
  _OWORD v8[5];
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v3 = a2[5];
  v8[4] = a2[4];
  v9 = v3;
  v4 = a2[7];
  v10 = a2[6];
  v11 = v4;
  v5 = a2[1];
  v8[0] = *a2;
  v8[1] = v5;
  v6 = a2[3];
  v8[2] = a2[2];
  v8[3] = v6;
  if (PCMatrix44Tmpl<double>::invert((double *)v8, (double *)v8, 0.0))
    return PCRay3<double>::transform((uint64_t)a1, (double *)v8);
  *(_QWORD *)&v9 = 0x3FB999999999999ALL;
  result = PCMatrix44Tmpl<double>::invert((double *)v8, (double *)v8, 0.0);
  if (result)
    return PCRay3<double>::transform((uint64_t)a1, (double *)v8);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  return result;
}

void TXTextObject::getEyeMatrix(TXTextObject *this@<X0>, OZRenderParams *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[48];
  int v18;

  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  OZRenderParams::OZRenderParams((OZRenderParams *)v17, a2);
  v18 = 1;
  TXTextObject::getTransformMatrix((uint64_t)this, a3, (uint64_t)v17, 0, 1, 0, 1, 0.0, 0.0);
  v6 = *((_QWORD *)this + 68);
  if (v6)
  {
    v16 = 0x3FF0000000000000;
    v13 = 0x3FF0000000000000;
    v10 = 0x3FF0000000000000;
    v7 = 0x3FF0000000000000;
    v8 = 0u;
    v9 = 0u;
    v11 = 0u;
    v12 = 0u;
    v14 = 0u;
    v15 = 0u;
    (*(void (**)(uint64_t, uint64_t *, OZRenderParams *))(*(_QWORD *)(v6 + 200) + 1288))(v6 + 200, &v7, a2);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)a2 + 160) + 24))(&v7);
  }
  PCMatrix44Tmpl<double>::leftMult(a3, (double *)&v7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v17);
}

void sub_1B292BD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

double TXTextObject::calcTranslationRelativeToCamera(uint64_t a1, uint64_t a2, uint64_t a3, PC_Sp_counted_base *a4, OZRenderState *a5, float64x2_t *a6)
{
  PCShared_base *v11;
  uint64_t i;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double result;
  float64x2_t v23;
  double v24;
  double v25;
  float64x2_t v26;
  double v27;
  _OWORD v28[8];
  PCSharedCount v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[40];
  unint64_t v40;
  float64x2_t v41;
  double v42;
  _OWORD v43[3];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _BYTE v54[48];
  int v55;
  OZRenderState v56;

  OZRenderState::OZRenderState(&v56, a5);
  OZRenderParams::OZRenderParams((OZRenderParams *)v54);
  v55 = 1;
  v53 = 0x3FF0000000000000;
  v50 = 0x3FF0000000000000;
  v47 = 0x3FF0000000000000;
  v44 = 0x3FF0000000000000;
  v45 = 0u;
  v46 = 0u;
  v48 = 0u;
  v49 = 0u;
  v51 = 0u;
  v52 = 0u;
  TXTextObject::getTransformMatrix(a1, (uint64_t)&v44, (uint64_t)v54, 1, 1, 0, 1, 0.0, 0.0);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, PC_Sp_counted_base *, OZRenderState *, _QWORD))(*(_QWORD *)a1 + 48))(v43, a1, a2, a4, &v56, 0);
  v41 = 0uLL;
  v42 = 0.0;
  memset(v39, 0, sizeof(v39));
  v40 = 0xBFF0000000000000;
  PCIntersectRayWithPlane((double *)v43, (double *)v39, v41.f64);
  OZRenderParams::setState((OZRenderParams *)v54, &v56);
  v29.var0 = a4;
  if (a4)
    v11 = (PCShared_base *)((char *)a4 + *(_QWORD *)(*(_QWORD *)a4 - 24));
  else
    v11 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v30, v11);
  OZRenderParams::setCamera((uint64_t)v54, &v29);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v30);
  v38 = 0x3FF0000000000000;
  v35 = 0x3FF0000000000000;
  v32 = 0x3FF0000000000000;
  v29.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
  v30 = 0u;
  v31 = 0u;
  v33 = 0u;
  v34 = 0u;
  v36 = 0u;
  v37 = 0u;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(v28, a1, v54);
  for (i = 0; i != 8; i += 2)
  {
    v13 = (_OWORD *)((char *)&v29 + i * 16);
    v14 = v28[i + 1];
    *v13 = v28[i];
    v13[1] = v14;
  }
  v26 = v41;
  v27 = v42;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v29, v26.f64, v26.f64);
  v25 = v27;
  v15 = v30;
  v16 = v31;
  v17 = *((_QWORD *)&v34 + 1);
  *(_QWORD *)&v30 = *((_QWORD *)&v31 + 1);
  *((_QWORD *)&v30 + 1) = v34;
  *(_QWORD *)&v31 = *((_QWORD *)&v36 + 1);
  v18 = v36;
  *((_QWORD *)&v31 + 1) = v15;
  v19 = *((_QWORD *)&v33 + 1);
  *(_QWORD *)&v34 = *((_QWORD *)&v15 + 1);
  *((_QWORD *)&v34 + 1) = v33;
  *(_QWORD *)&v33 = v17;
  *(_QWORD *)&v36 = *((_QWORD *)&v37 + 1);
  *((_QWORD *)&v33 + 1) = v37;
  *((_QWORD *)&v36 + 1) = v16;
  v23 = 0uLL;
  v24 = -1.0;
  *(_QWORD *)&v37 = v19;
  *((_QWORD *)&v37 + 1) = v18;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v29, v23.f64, v23.f64);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, PC_Sp_counted_base *, OZRenderState *, _QWORD))(*(_QWORD *)a1 + 48))(v28, a1, a3, a4, &v56, 0);
  v43[0] = v28[0];
  v43[1] = v28[1];
  v43[2] = v28[2];
  v20 = vaddvq_f64(vmulq_f64(v23, v23)) + v24 * v24;
  if (v20 <= -1.0e-24 || v20 >= 1.0e-24)
  {
    *(float64x2_t *)&v39[24] = v23;
    *(float64x2_t *)v39 = vdivq_f64(vmulq_n_f64(v23, -v25), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v20, 0));
    v40 = *(_QWORD *)&v24;
    *(double *)&v39[16] = -(v25 * v24) / v20;
  }
  PCIntersectRayWithPlane((double *)v43, (double *)v39, v26.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v44, v41.f64, v41.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v44, v26.f64, v26.f64);
  v21 = v27 - v42;
  *a6 = vsubq_f64(v26, v41);
  a6[1].f64[0] = v21;
  OZRenderParams::~OZRenderParams((OZRenderParams *)v54);
  return result;
}

void sub_1B292C0E0(_Unwind_Exception *a1)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x248]);
  _Unwind_Resume(a1);
}

void TXTextObject::calcTranslationRelativeToObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, OZRenderState *a5, float64x2_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  float64x2_t v18;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  double v28;
  float64_t v29;
  float64_t v30;
  _OWORD v31[3];
  float64x2_t v32;
  double v33;
  _OWORD v34[2];
  uint64_t v35;
  unint64_t v36;
  float64x2_t v37;
  double v38;
  _OWORD v39[3];
  _BYTE v40[48];
  int v41;
  OZRenderState v42;

  OZRenderState::OZRenderState(&v42, a5);
  OZRenderParams::OZRenderParams((OZRenderParams *)v40);
  v41 = 1;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, OZRenderState *, _QWORD))(*(_QWORD *)a1 + 48))(v39, a1, a2, a4, &v42, 0);
  v37 = 0uLL;
  v38 = 0.0;
  memset(v34, 0, sizeof(v34));
  v35 = 0;
  v36 = 0xBFF0000000000000;
  PCIntersectRayWithPlane((double *)v39, (double *)v34, v37.f64);
  v32 = v37;
  v33 = v38;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, OZRenderState *, _QWORD))(*(_QWORD *)a1 + 48))(v31, a1, a3, a4, &v42, 0);
  v39[0] = v31[0];
  v39[1] = v31[1];
  v39[2] = v31[2];
  PCIntersectRayWithPlane((double *)v39, (double *)v34, v32.f64);
  v12 = *(_QWORD *)(a1 + 264);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(_QWORD *)(v12 + 16);
    *(_QWORD *)&v31[0] = v13;
    *((_QWORD *)&v31[0] + 1) = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
  else
  {
    v13 = 0;
    v31[0] = 0uLL;
  }
  v29 = 1.0;
  v30 = 1.0;
  var0 = a5->var0;
  HIDWORD(v17) = HIDWORD(var0.var0);
  v28 = 1.0;
  LODWORD(v17) = *(_DWORD *)(a1 + 736);
  OZChannelScale3D::getValue((OZChannelScale3D *)(v13 + 2864), (const CMTime *)&var0, &v30, &v29, &v28, (double)v17);
  a6[1].f64[0] = v33 - v38;
  v18.f64[0] = v30;
  v18.f64[1] = v29;
  __asm { FMOV            V2.2D, #1.0 }
  *a6 = vmulq_f64(vsubq_f64(v32, v37), vdivq_f64(_Q2, v18));
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v31[0] + 1);
  if (*((_QWORD *)&v31[0] + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v31[0] + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)v40);
}

void sub_1B292C310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a42);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1B292C4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::setStyleRun(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 264) = a2;
  return result;
}

BOOL TXTextObject::setUniChar(TXTextObject *this, UniChar a2)
{
  _BOOL8 result;

  *((_WORD *)this + 60) = a2;
  result = TXCharacterSetIsWhitespace(a2);
  *((_BYTE *)this + 64) = result;
  return result;
}

BOOL TXTextObject::isAllCapsEnabled(TXTextObject *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int ValueAsInt;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v10;

  v1 = *((_QWORD *)this + 33);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    v3 = *(std::__shared_weak_count **)(v1 + 16);
    v10 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
  }
  else
  {
    v2 = 0;
    v10 = 0;
  }
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v2 + 5504), MEMORY[0x1E0CA2E68], 0.0);
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return ValueAsInt != 0;
}

void sub_1B292C5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::syncGlyph(TXTextObject *this, CMTime *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  TXFont *v17;
  unint64_t v18;
  const void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  TXFont **v23;
  TXFont **v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  _BOOL4 isAllCapsEnabled;
  __darwin_ct_rune_t v32;
  uint64_t *Glyph;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  CMTime v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v6 = *((_QWORD *)this + 33);
  if (!v6)
  {
    v8 = 0;
    v40 = 0;
    v41 = 0;
    if (!a3)
      goto LABEL_9;
LABEL_8:
    v39 = *a2;
    HIDWORD(v11) = HIDWORD(v39.value);
    LODWORD(v11) = *((_DWORD *)this + 184);
    *(double *)a3 = TXTextObject::getRenderedFontSize(this, &v39, (double)v11);
    *(_QWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 32) = *((_DWORD *)this + 131);
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(v6 + 8);
  v7 = *(std::__shared_weak_count **)(v6 + 16);
  v40 = v8;
  v41 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (a3)
    goto LABEL_8;
LABEL_9:
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 272));
  v12 = 1;
  if (!*((_BYTE *)this + 384))
  {
    v3 = *((_QWORD *)this + 47);
    if (v3)
      v12 = 0;
  }
  PCSharedMutex::unlock_shared((std::mutex *)((char *)this + 272));
  if (!v12)
    goto LABEL_52;
  if (!*((_DWORD *)this + 131))
  {
    v19 = *(const void **)(v8 + 520);
    v20 = *(std::__shared_weak_count **)(v8 + 528);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    if (v19)
    {
      v24 = v23;
      if (v23)
      {
        if (!v20)
        {
          v17 = v23[5];
          if (v17)
            goto LABEL_44;
          goto LABEL_51;
        }
        v25 = (unint64_t *)&v20->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        v14 = v20;
        goto LABEL_34;
      }
    }
    else
    {
      v24 = 0;
    }
    v14 = 0;
LABEL_34:
    v27 = (unint64_t *)&v20->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    v17 = v24[5];
    if (!v14)
    {
LABEL_43:
      if (v17)
        goto LABEL_44;
LABEL_51:
      (*(void (**)(uint64_t))(*(_QWORD *)(v40 + 16) + 80))(v40 + 16);
      v3 = 0;
      goto LABEL_52;
    }
    v29 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v29);
    while (__stlxr(v18 - 1, v29));
LABEL_41:
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_43;
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 67);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = (TXFont *)*((_QWORD *)v13 + 5);
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    goto LABEL_41;
  }
  v17 = (TXFont *)*((_QWORD *)v13 + 5);
  if (!v17)
    goto LABEL_51;
LABEL_44:
  v30 = *((unsigned __int16 *)this + 68);
  isAllCapsEnabled = TXTextObject::isAllCapsEnabled(this);
  v32 = *((unsigned __int16 *)this + 60);
  if (isAllCapsEnabled)
    LOWORD(v32) = __toupper(v32);
  Glyph = TXFont::getGlyph(v17, v30, (unsigned __int16)v32);
  if (Glyph)
  else
    v34 = 0;
  PCSharedMutex::lock((std::mutex *)((char *)this + 272));
  *((_QWORD *)this + 47) = v34;
  *((_BYTE *)this + 384) = 0;
  PCSharedMutex::unlock((std::mutex *)((char *)this + 272));
  v3 = *((_QWORD *)this + 47);
LABEL_52:
  v35 = v41;
  if (v41)
  {
    v36 = (unint64_t *)&v41->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return v3;
}

void sub_1B292C89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double TXTextObject::getRenderedFontSize(TXTextObject *this, CMTime *a2, double a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double Size;
  double v11;
  unint64_t *v12;
  unint64_t v13;
  CMTime v15;
  CMTime v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v5 = *((_QWORD *)this + 33);
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 8);
    v6 = *(std::__shared_weak_count **)(v5 + 16);
    v17 = v7;
    v18 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v17 = 0;
    v18 = 0;
  }
  v16 = *a2;
  Size = TXTextStyle::getSize((OZChannel *)v7, &v16, a3);
  if (TXTextObject::isAllCapsEnabled(this) && *((_BYTE *)this + 569))
  {
    v15 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v7 + 5656), &v15, 0.0);
    Size = v11 * Size;
    v6 = v18;
  }
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return Size;
}

void sub_1B292C9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::buildGlyphRequest@<X0>(TXTextObject *a1@<X0>, OZRenderState *a2@<X1>, char a3@<W2>, float64x2_t *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>, double a7@<D0>)
{
  _BYTE *v14;
  unint64_t v15;
  _QWORD *v21;
  PCColorSpaceCache *RenderNodeList;
  int v23;
  uint64_t result;
  double v25[2];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  double v29[4];
  CMTime v30;

  *(_QWORD *)a6 = 0;
  *(_BYTE *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(a6 + 24) = 0;
  *(_DWORD *)(a6 + 32) = 0;
  *(_BYTE *)(a6 + 36) = 1;
  *(_QWORD *)(a6 + 37) = 0;
  v14 = (_BYTE *)(a6 + 37);
  *(_DWORD *)(a6 + 44) = 0;
  *(_OWORD *)&v30.value = *(_OWORD *)&a2->var0.var0;
  HIDWORD(v15) = HIDWORD(v30.value);
  LODWORD(v15) = *((_DWORD *)a1 + 97);
  v30.epoch = a2->var0.var3;
  *(double *)a6 = TXTextObject::getRenderedFontSize(a1, &v30, (double)v15);
  *(_BYTE *)(a6 + 8) = a3;
  *(double *)(a6 + 16) = a7;
  if (!PCMatrix44Tmpl<double>::isIdentity(a4->f64))
  {
    TXTextObject::getImageBounds(a1, a2, (uint64_t)v29);
    v27 = 0;
    v28 = 0;
    v25[0] = 0.0;
    v25[1] = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    v26 = _Q0;
    TXTextObject::computeScaleFactors((OZRenderParams *)a2, v29, a4, v25, (double *)&v28, (double *)&v27);
    v21 = (_QWORD *)operator new();
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = 0;
    v21[5] = 0;
    v21[6] = 0;
    v21[7] = 0;
    v21[8] = 0x3FF0000000000000;
    *(_QWORD *)(a6 + 24) = v21;
    *v21 = v28;
    v21[4] = v27;
    *(_BYTE *)(a6 + 39) = 1;
  }
  *(_DWORD *)(a6 + 32) = *((_DWORD *)a1 + 131);
  RenderNodeList = (PCColorSpaceCache *)HGRenderJob::GetRenderNodeList((HGRenderJob *)a2);
  v23 = a5 ^ 1;
  if (!*(_DWORD *)(*(_QWORD *)RenderNodeList + 8))
    v23 = 1;
  *v14 = v23;
  if (v23 == 1)
    result = OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
  else
    result = PCColorSpaceCache::cgLinearGray(RenderNodeList);
  *(_QWORD *)(a6 + 40) = result;
  return result;
}

void sub_1B292CB7C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void TXTextObject::computeScaleFactors(OZRenderParams *a1, double *a2, float64x2_t *a3, double *a4, double *a5, double *a6)
{
  uint64_t v12;
  uint64_t *v13[14];

  LiImagePolygon::LiImagePolygon((LiImagePolygon *)v13);
  LiImagePolygon::set((uint64_t)v13, a2, 0);
  if (a4[2] >= 0.0 && a4[3] >= 0.0)
    liTransformAndClip(a4, a3->f64, v13);
  TXTextObject::computeScaleFactors(a1, (uint64_t)v13, a3, v12, a5, a6);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v13);
}

void sub_1B292CC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&a9);
  _Unwind_Resume(a1);
}

void *TXTextObject::getSystemGlyph(TXTextObject *a1, CMTime *a2, uint64_t a3)
{
  void *result;

  result = (void *)TXTextObject::syncGlyph(a1, a2, a3);
  if (result)
  return result;
}

float64_t TXTextObject::getTransformedImageCornersWithFourCornerPinning(uint64_t a1, const OZRenderState *a2, uint64_t a3, int a4, double a5, double a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = 0x3FF0000000000000;
  v20 = 0x3FF0000000000000;
  v17 = 0x3FF0000000000000;
  v14 = 0x3FF0000000000000;
  v15 = 0u;
  v16 = 0u;
  v18 = 0u;
  v19 = 0u;
  v21 = 0u;
  v22 = 0u;
  TXTextObject::getTransformMatrix(a1, (uint64_t)&v14, (uint64_t)a2, 1, a8, a9, 1, a5, a6);
  return TXTextObject::getTransformedImageCornersWithFourCornerPinning(a1, a2, a4, (double *)&v14, a3, 0);
}

float64_t TXTextObject::getTransformedImageCornersWithFourCornerPinning(uint64_t a1, const OZRenderState *a2, int a3, double *a4, uint64_t a5, float64x2_t *a6)
{
  float64_t result;
  float64x2_t v9;
  uint64_t v10;
  float64x2_t v11;
  uint64_t v12;
  float64x2_t v13;
  uint64_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;

  v20 = 0uLL;
  v19 = 0uLL;
  v18 = 0uLL;
  v17 = 0uLL;
  TXTextObject::getFourCornerPointsInObjectSpaceForAttribute(a1, a2, &v18, &v17, &v19, &v20, a3, 1, 0.0, 0.0, 0.0, 0.0, 1u, a6);
  v15 = v20;
  v16 = 0;
  v13 = v19;
  v14 = 0;
  v11 = v18;
  v12 = 0;
  v9 = v17;
  v10 = 0;
  PCMatrix44Tmpl<double>::transform<double>(a4, v15.f64, v15.f64);
  PCMatrix44Tmpl<double>::transform<double>(a4, v13.f64, v13.f64);
  PCMatrix44Tmpl<double>::transform<double>(a4, v11.f64, v11.f64);
  PCMatrix44Tmpl<double>::transform<double>(a4, v9.f64, v9.f64);
  *(float64x2_t *)(a5 + 72) = v15;
  *(_QWORD *)(a5 + 88) = v16;
  *(float64x2_t *)(a5 + 48) = v13;
  *(_QWORD *)(a5 + 64) = v14;
  *(float64x2_t *)(a5 + 24) = v9;
  *(_QWORD *)(a5 + 40) = v10;
  *(_QWORD *)(a5 + 16) = v12;
  result = v11.f64[0];
  *(float64x2_t *)a5 = v11;
  return result;
}

float64x2_t TXTextObject::getImageBoundsWithFourCornerPinning(TXTextObject *this, CMTime *a2, float64x2_t *a3, int a4)
{
  int v7;
  float64x2_t result;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float64x2_t v22;
  CMTime v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;

  v29 = 0uLL;
  v28 = 0uLL;
  v27 = 0uLL;
  v26 = 0uLL;
  if (a4 == 5)
  {
    v7 = 0;
    v24 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v25 = _Q0;
    do
    {
      v23 = *a2;
      if (TXTextObject::isAttributeEnabled(this, v7, &v23))
      {
        TXTextObject::getFourCornerPointsInObjectSpaceForAttribute((uint64_t)this, (const OZRenderState *)a2, &v29, &v28, &v27, &v26, v7, 1, 0.0, 0.0, 0.0, 0.0, 1u, 0);
        v14 = vbslq_s8((int8x16_t)vcgtq_f64(v26, v27), (int8x16_t)v26, (int8x16_t)v27);
        v15 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v14, v28), v14, (int8x16_t)v28);
        v16 = vbslq_s8((int8x16_t)vcgtq_f64(v27, v26), (int8x16_t)v26, (int8x16_t)v27);
        v17 = vbslq_s8((int8x16_t)vcgtq_f64(v28, (float64x2_t)v16), v16, (int8x16_t)v28);
        v24 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v29, (float64x2_t)v17), v17, (int8x16_t)v29);
        v25 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v15, v29), v15, (int8x16_t)v29), v24);
        *(_QWORD *)&result.f64[0] = *(_OWORD *)&PCRect<double>::operator|=(a3, &v24);
      }
      ++v7;
    }
    while (v7 != 4);
  }
  else
  {
    TXTextObject::getFourCornerPointsInObjectSpaceForAttribute((uint64_t)this, (const OZRenderState *)a2, &v29, &v28, &v27, &v26, a4, 1, 0.0, 0.0, 0.0, 0.0, 1u, 0);
    v18 = vbslq_s8((int8x16_t)vcgtq_f64(v26, v27), (int8x16_t)v26, (int8x16_t)v27);
    v19 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v18, v28), v18, (int8x16_t)v28);
    v20 = vbslq_s8((int8x16_t)vcgtq_f64(v27, v26), (int8x16_t)v26, (int8x16_t)v27);
    v21 = vbslq_s8((int8x16_t)vcgtq_f64(v28, (float64x2_t)v20), v20, (int8x16_t)v28);
    result = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v29, (float64x2_t)v21), v21, (int8x16_t)v29);
    v22 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v19, v29), v19, (int8x16_t)v29), result);
    *a3 = result;
    a3[1] = v22;
  }
  return result;
}

BOOL TXTextObject::isAttributeEnabled(TXTextObject *this, int a2, CMTime *a3)
{
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t isFaceEnabled;
  unint64_t *v11;
  unint64_t v12;
  CMTime v14;
  CMTime v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  CMTime v18;

  if (a2 == 5)
    return 1;
  v5 = *((_QWORD *)this + 33);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(std::__shared_weak_count **)(v5 + 16);
  v16 = v6;
  v17 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v6)
  {
    switch(a2)
    {
      case 0:
        isFaceEnabled = TXTextObject::isFaceEnabled(this, a3);
        goto LABEL_13;
      case 1:
        v18 = *a3;
        if (!TXTextObject::isOutlineEnabled(this, &v18))
          goto LABEL_17;
        v3 = *((__int16 *)this + 68) != -1;
        break;
      case 2:
        v15 = *a3;
        isFaceEnabled = TXTextObject::isGlowVisible(this, &v15, 0, 0, 0);
        goto LABEL_13;
      case 3:
        v14 = *a3;
        isFaceEnabled = TXTextObject::isDropShadowVisible(this, &v14, 0);
LABEL_13:
        v3 = isFaceEnabled;
        break;
      default:
        v3 = 1;
        break;
    }
  }
  else
  {
LABEL_17:
    v3 = 0;
  }
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v3;
}

void sub_1B292D16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void TXTextObject::getImageBoundsOfAttribute(uint64_t a1, double *a2, const OZRenderState *a3, int a4, int a5, int a6, int a7, float64x2_t *a8, double a9, double a10, double a11, double a12)
{
  __int128 v23;
  float64x2_t v29;
  float64x2_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  CMTimeValue v38;
  unint64_t *v39;
  unint64_t v40;
  double v41;
  float64x2_t v42;
  float64_t v43;
  unint64_t *v44;
  unint64_t v45;
  double OutlineWidth;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  double v50;
  float64_t v51;
  double v52;
  double v53;
  float64x2_t v54;
  double DropShadowDistance;
  double DropShadowAngle;
  __double2 v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  CMTimeValue v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _BOOL4 v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  double v82;
  float64x2_t v84;
  float64_t v85;
  CMTime v86;
  double v87;
  CMTime v88;
  CMTime var0;
  CMTime v90;
  CMTime v91;
  CMTime v92;
  CMTime v93;
  float64_t v94;
  double v95;
  CMTime v96;
  CMTime v97;
  double v98;
  double v99;
  double v100;
  CMTime v101;
  float64_t v102;
  CMTime v103;
  float64_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  _QWORD v109[6];
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  OZRenderState v116;
  float64x2_t v117;
  float64x2_t v118;
  CMTime v119;

  v23 = *(_OWORD *)&a3->var0.var0;
  v119.epoch = a3->var0.var3;
  v117 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v84 = _Q0;
  v118 = _Q0;
  *(_OWORD *)&v119.value = v23;
  OZRenderParams::OZRenderParams((OZRenderParams *)&v116);
  OZRenderParams::setState((OZRenderParams *)&v116, a3);
  if (a8)
  {
    v29 = *a8;
    v30 = a8[1];
LABEL_6:
    v117 = v29;
    v118 = v30;
    goto LABEL_7;
  }
  v115 = 0x3FF0000000000000;
  v112 = 0x3FF0000000000000;
  v109[5] = 0x3FF0000000000000;
  v109[0] = 0x3FF0000000000000;
  memset(&v109[1], 0, 32);
  v110 = 0u;
  v111 = 0u;
  v113 = 0u;
  v114 = 0u;
  TXTextObject::getTextureBounds((TXTextObject *)a1, &v116, 0, (float64x2_t *)v109, 0, 0, (uint64_t)&v107, 0.0);
  v117 = v107;
  v118 = v108;
  if (TXTextLayout::isVerticalLayout(*(TXTextLayout **)(a1 + 544))
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 544) + 296))(*(_QWORD *)(a1 + 544)))
  {
    TXTextObject::getImageBounds((TXTextObject *)a1, &v116, (uint64_t)&v107);
    v29 = v107;
    v30 = v108;
    goto LABEL_6;
  }
LABEL_7:
  v32 = v117.f64[1];
  v31 = v117.f64[0];
  v33 = v118.f64[1];
  v34 = v118.f64[0];
  v109[0] = 0;
  v109[1] = 0;
  v35 = v84;
  *(float64x2_t *)&v109[2] = v84;
  v107 = 0uLL;
  v108 = v84;
  v105 = 0uLL;
  v106 = v84;
  if (a6)
  {
    v36 = *(_QWORD *)(a1 + 264);
    if (v36)
    {
      v38 = *(_QWORD *)(v36 + 8);
      v37 = *(_QWORD *)(v36 + 16);
      var0.value = v38;
      *(_QWORD *)&var0.timescale = v37;
      if (v37)
      {
        v39 = (unint64_t *)(v37 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
    }
    else
    {
      v38 = 0;
      var0.value = 0;
      *(_QWORD *)&var0.timescale = 0;
    }
    OZChannel::getValueAsDouble((OZChannel *)(v38 + 3000), &v119, 0.0);
    v85 = v41;
    OZChannel::getValueAsDouble((OZChannel *)(v38 + 3152), &v119, 0.0);
    v42.f64[0] = v85;
    v42.f64[1] = v43;
    v35 = vmulq_f64(v42, v117);
    v117 = v35;
    v118 = vmulq_f64(v42, v118);
    if (*(_QWORD *)&var0.timescale)
    {
      v44 = (unint64_t *)(*(_QWORD *)&var0.timescale + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)&var0.timescale + 16))(*(_QWORD *)&var0.timescale);
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&var0.timescale);
      }
    }
  }
  OutlineWidth = 0.0;
  switch(a4)
  {
    case 0:
      var0.value = 0;
      v103 = v119;
      v104 = 0.0;
      TXTextObject::getFaceBlur((TXTextObject *)a1, &v103, (double *)&var0.value, &v104);
      *(_QWORD *)&v47.f64[0] = var0.value;
      if (*(double *)&var0.value < v104)
        v47.f64[0] = v104;
      v35 = PGImaging::gaussianBlurRect(0, &v117, (float64x2_t *)v109, v47);
      v31 = *(double *)v109;
      v32 = *(double *)&v109[1];
      v48 = 0.0;
      v33 = *(double *)&v109[3];
      v34 = *(double *)&v109[2];
      break;
    case 1:
      var0.value = 0x3FF0000000000000;
      v104 = 1.0;
      v102 = 1.0;
      TXTextObject::getScale((TXTextObject *)a1, (CMTime *)&v116, (double *)&var0.value, &v104, &v102, 1, 1, 0, 0, 0, 1);
      v99 = 0.0;
      v100 = 0.0;
      v92 = v119;
      OutlineWidth = TXTextObject::getOutlineWidth((TXTextObject *)a1, &v92);
      v91 = v119;
      TXTextObject::getOutlineBlur((TXTextObject *)a1, &v91, &v100, &v99);
      v48 = 0.0;
      v33 = 0.0 / *(double *)&var0.value + OutlineWidth + OutlineWidth + v33 + v99 + v99;
      v34 = 0.0 / v104 + OutlineWidth + OutlineWidth + v34 + v100 + v100;
      v35.f64[0] = 0.0 - v99 - OutlineWidth - 0.0 / (v104 + v104);
      v31 = v31 + 0.0 - v100 - OutlineWidth - 0.0 / (*(double *)&var0.value + *(double *)&var0.value);
      v32 = v32 + v35.f64[0];
      break;
    case 2:
      v104 = 0.0;
      v102 = 0.0;
      v90 = v119;
      TXTextObject::getGlowBlur((TXTextObject *)a1, &v90, &v104, &v102);
      v49.f64[0] = v104;
      if (v104 < v102)
        v49.f64[0] = v102;
      v35 = PGImaging::gaussianBlurRect(0, &v117, &v105, v49);
      if ((a5 & 1) != 0)
      {
        v99 = 0.0;
        v100 = 0.0;
        v98 = 0.0;
        var0 = (CMTime)v116.var0;
        TXTextObject::getPivot((TXTextLayout **)a1, &v100, &v99, &v98, &var0, 1);
        var0.value = 0;
        v95 = 0.0;
        v88 = v119;
        TXTextObject::getGlowOffset((TXTextObject *)a1, &v88, (double *)&var0.value, &v95, a7);
        if ((a7 & 1) == 0)
        {
          *(double *)&var0.value = a9;
          v95 = a10;
        }
        v94 = 1.0;
        v86 = v119;
        v87 = 1.0;
        TXTextObject::getGlowScale((TXTextObject *)a1, &v86, &v94, &v87, a7);
        v35.f64[0] = v94;
        v50 = v87;
        if (!a7)
        {
          v50 = a12;
          v35.f64[0] = a11;
        }
        v34 = v35.f64[0] * v106.f64[0];
        v51 = (v105.f64[1] - v99) * v50;
        v33 = v50 * v106.f64[1];
        v106.f64[0] = v35.f64[0] * v106.f64[0];
        v106.f64[1] = v50 * v106.f64[1];
        v52 = v100 + (v105.f64[0] - v100) * v35.f64[0];
        v35.f64[0] = v99 + v51;
        v48 = *(double *)&var0.value;
        v31 = v52 + *(double *)&var0.value;
        v32 = v99 + v51 + v95;
        v105.f64[0] = v52 + *(double *)&var0.value;
        v105.f64[1] = v32;
      }
      else
      {
        v32 = v105.f64[1];
        v31 = v105.f64[0];
        v48 = 0.0;
        v33 = v106.f64[1];
        v34 = v106.f64[0];
      }
      break;
    case 3:
      v53 = a10;
      v104 = 0.0;
      v101 = v119;
      v102 = 0.0;
      TXTextObject::getDropShadowBlur((TXTextObject *)a1, &v101, &v104, &v102);
      v54.f64[0] = v104;
      if (v104 < v102)
        v54.f64[0] = v102;
      v35 = PGImaging::gaussianBlurRect(0, &v117, &v107, v54);
      v48 = 0.0;
      if (a5)
      {
        v99 = 0.0;
        v100 = 0.0;
        v98 = 0.0;
        TXTextObject::getPivot((TXTextLayout **)a1, &v100, &v99, &v98, &v119, 1);
        v97 = v119;
        DropShadowDistance = TXTextObject::getDropShadowDistance((TXTextObject *)a1, &v97);
        v96 = v119;
        DropShadowAngle = TXTextObject::getDropShadowAngle((TXTextObject *)a1, &v96);
        v57 = __sincos_stret(DropShadowAngle);
        v48 = DropShadowDistance * v57.__cosval;
        v58 = DropShadowDistance * v57.__sinval;
        if (a7)
          v59 = DropShadowDistance * v57.__cosval;
        else
          v59 = a9;
        if (a7)
          v53 = v58;
        v94 = 1.0;
        v95 = 1.0;
        v93 = v119;
        TXTextObject::getDropShadowScale((TXTextObject *)a1, &v93, &v95, &v94, a7);
        v60 = a11;
        if (a7)
        {
          a12 = v94;
          v60 = v95;
        }
        else
        {
          v94 = a12;
          v95 = a11;
        }
        v107.f64[0] = v60 * v107.f64[0];
        v107.f64[1] = a12 * v107.f64[1];
        v108.f64[0] = v60 * v108.f64[0];
        v108.f64[1] = a12 * v108.f64[1];
        v61 = *(_QWORD *)(a1 + 264);
        if (v61)
        {
          v62 = *(_QWORD *)(v61 + 8);
          v63 = *(_QWORD *)(v61 + 16);
          var0.value = v62;
          *(_QWORD *)&var0.timescale = v63;
          if (v63)
          {
            v64 = (unint64_t *)(v63 + 8);
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
        }
        else
        {
          v62 = 0;
          var0.value = 0;
          *(_QWORD *)&var0.timescale = 0;
        }
        if (!OZChannel::getValueAsInt((OZChannel *)(v62 + 19528), MEMORY[0x1E0CA2E68], 0.0))
        {
          v35.f64[0] = OZSceneNode::getScenePixelAspectRatio((OZSceneNode *)(*(_QWORD *)(a1 + 544) + 200));
          v35.f64[0] = v59 * v35.f64[0] + v107.f64[0];
          v107.f64[0] = v35.f64[0];
          v107.f64[1] = v53 + v107.f64[1];
        }
        if (*(_QWORD *)&var0.timescale)
        {
          v66 = (unint64_t *)(*(_QWORD *)&var0.timescale + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)&var0.timescale + 16))(*(_QWORD *)&var0.timescale);
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&var0.timescale);
          }
        }
      }
      v32 = v107.f64[1];
      v31 = v107.f64[0];
      v33 = v108.f64[1];
      v34 = v108.f64[0];
      break;
    case 4:
      v31 = *(double *)(a1 + 424);
      v32 = *(double *)(a1 + 432);
      v48 = 0.0;
      v34 = *(double *)(a1 + 440);
      v33 = *(double *)(a1 + 448);
      break;
    default:
      v48 = 0.0;
      break;
  }
  v68 = *(_QWORD *)(a1 + 264);
  if (v68)
  {
    v69 = *(_QWORD *)(v68 + 8);
    v70 = *(std::__shared_weak_count **)(v68 + 16);
    if (v70)
    {
      p_shared_owners = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldxr(p_shared_owners);
      while (__stxr(v72 + 1, p_shared_owners));
    }
    if (v69)
    {
      v73 = *(_QWORD *)(a1 + 264);
      v74 = *(_QWORD *)(v73 + 8);
      v75 = *(std::__shared_weak_count **)(v73 + 16);
      if (!v75)
      {
        v78 = *(unsigned __int8 *)(v74 + 49856) != 0;
        if (!v70)
          goto LABEL_78;
        goto LABEL_75;
      }
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
      v78 = *(unsigned __int8 *)(v74 + 49856) != 0;
      do
        v79 = __ldaxr(v76);
      while (__stlxr(v79 - 1, v76));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *, float64x2_t))v75->__on_zero_shared)(v75, v35);
        std::__shared_weak_count::__release_weak(v75);
        if (!v70)
          goto LABEL_78;
        goto LABEL_75;
      }
    }
    else
    {
      v78 = 0;
    }
    if (!v70)
      goto LABEL_78;
LABEL_75:
    v80 = (unint64_t *)&v70->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
      if (!v78)
        goto LABEL_85;
LABEL_79:
      v82 = v31 + 10.0 + v34;
      if (v31 <= -10.0)
        v82 = v34;
      if (v31 < -10.0)
        v34 = v34 - (v31 + 10.0);
      else
        v34 = v82;
      v31 = v31 - (v31 + 10.0) + v48 - OutlineWidth;
      goto LABEL_85;
    }
LABEL_78:
    if (!v78)
      goto LABEL_85;
    goto LABEL_79;
  }
LABEL_85:
  *a2 = v31;
  a2[1] = v32;
  a2[2] = v34;
  a2[3] = v33;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v116);
}

void sub_1B292D9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x260]);
  _Unwind_Resume(a1);
}

void TXTextObject::getGlowScale(TXTextObject *this, CMTime *a2, double *a3, double *a4, int a5)
{
  unint64_t v5;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  int isEnabled;
  double v22;
  double v23;
  double v24;
  double v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  CMTime v29;
  CMTime v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v11 = *((_QWORD *)this + 33);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(std::__shared_weak_count **)(v11 + 16);
    v31 = v12;
    v32 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  else
  {
    v12 = 0;
    v31 = 0;
    v32 = 0;
  }
  v16 = *((_QWORD *)this + 68);
  *a3 = 1.0;
  *a4 = 1.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v12 + 31080), 0, 1))
  {
    v17 = v31;
    v30 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v31 + 36304), &v30, 0.0);
    v19 = v18;
    OZChannel::getValueAsDouble((OZChannel *)(v17 + 36456), &v30, 0.0);
    *a3 = v19 * *a3;
    *a4 = v20 * *a4;
  }
  if (a5)
  {
    v29 = *a2;
    LODWORD(v5) = *((_DWORD *)this + 184);
    isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(v16 + 40696), 0, 1);
    v22 = 1.0;
    v23 = 1.0;
    if (isEnabled)
    {
      v24 = (double)v5;
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 40832), &v29, v24);
      v22 = v25;
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 40984), &v29, v24);
    }
    *a3 = v22 * *a3;
    *a4 = v23 * *a4;
  }
  v26 = v32;
  if (v32)
  {
    v27 = (unint64_t *)&v32->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1B292DBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void TXTextObject::getDropShadowScale(TXTextObject *this, CMTime *a2, double *a3, double *a4, int a5)
{
  unint64_t v5;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  int isEnabled;
  double v22;
  double v23;
  double v24;
  double v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  CMTime v29;
  CMTime v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v11 = *((_QWORD *)this + 33);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(std::__shared_weak_count **)(v11 + 16);
    v31 = v12;
    v32 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  else
  {
    v12 = 0;
    v31 = 0;
    v32 = 0;
  }
  v16 = *((_QWORD *)this + 68);
  *a4 = 1.0;
  *a3 = 1.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v12 + 13848), 0, 1))
  {
    v17 = v31;
    v30 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v31 + 18920), &v30, 0.0);
    v19 = v18;
    OZChannel::getValueAsDouble((OZChannel *)(v17 + 19072), &v30, 0.0);
    *a3 = v19 * *a3;
    *a4 = v20 * *a4;
  }
  if (a5)
  {
    v29 = *a2;
    LODWORD(v5) = *((_DWORD *)this + 184);
    isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(v16 + 46928), 0, 1);
    v22 = 1.0;
    v23 = 1.0;
    if (isEnabled)
    {
      v24 = (double)v5;
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 47064), &v29, v24);
      v22 = v25;
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 47216), &v29, v24);
    }
    *a3 = v22 * *a3;
    *a4 = v23 * *a4;
  }
  v26 = v32;
  if (v32)
  {
    v27 = (unint64_t *)&v32->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1B292DDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double TXTextObject::getDropShadowDistance(TXTextObject *this, CMTime *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  double DropShadowDistance;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CMTime v17;
  CMTime v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = *((_QWORD *)this + 33);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(std::__shared_weak_count **)(v4 + 16);
    v19 = v5;
    v20 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v5 = 0;
    v19 = 0;
    v20 = 0;
  }
  v9 = *((_QWORD *)this + 68);
  v18 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 19224), &v18, 0.0);
  OZChannel::setValue((OZChannel *)(v9 + 47368), a2, v10, 1);
  v17 = *a2;
  HIDWORD(v11) = HIDWORD(v17.value);
  LODWORD(v11) = *((_DWORD *)this + 184);
  DropShadowDistance = TXSequenceChannels::getDropShadowDistance((TXSequenceChannels *)(v9 + 25032), &v17, (double)v11);
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return DropShadowDistance;
}

void sub_1B292DEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double TXTextObject::getDropShadowAngle(TXTextObject *this, CMTime *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  double DropShadowAngle;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CMTime v17;
  CMTime v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = *((_QWORD *)this + 33);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(std::__shared_weak_count **)(v4 + 16);
    v19 = v5;
    v20 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v5 = 0;
    v19 = 0;
    v20 = 0;
  }
  v9 = *((_QWORD *)this + 68);
  v18 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 19376), &v18, 0.0);
  OZChannel::setValue((OZChannel *)(v9 + 47520), a2, v10, 1);
  v17 = *a2;
  HIDWORD(v11) = HIDWORD(v17.value);
  LODWORD(v11) = *((_DWORD *)this + 184);
  DropShadowAngle = TXSequenceChannels::getDropShadowAngle((TXSequenceChannels *)(v9 + 25032), &v17, (double)v11);
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return DropShadowAngle;
}

void sub_1B292E008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::getTextureBounds@<X0>(TXTextObject *a1@<X0>, OZRenderState *a2@<X1>, char a3@<W2>, float64x2_t *a4@<X3>, int a5@<W4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t result;
  uint64_t v19;
  int ValueAsInt;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CMTime *v26;
  __int128 v27;
  double v28[2];
  __int128 v29;
  double v30;
  double v31;
  double v32[4];
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  double v42;
  CMTime *p_var0;
  int v44;
  char v45;
  _BYTE v46[11];

  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  v27 = _Q1;
  *(_OWORD *)(a7 + 16) = _Q1;
  v40 = 0;
  p_var0 = 0;
  v44 = 0;
  v45 = 1;
  memset(v46, 0, sizeof(v46));
  v41 = a3;
  v42 = a8;
  v46[1] = a6;
  var0 = a2->var0;
  result = TXTextObject::syncGlyph(a1, (CMTime *)&var0, (uint64_t)&v40);
  v19 = result;
  if (result)
  {
    *(_OWORD *)&var0.var0 = 0x3FF0000000000000uLL;
    var0.var3 = 0;
    v34 = 0;
    v35 = 0x3FF0000000000000;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0x3FF0000000000000;
    if (!PCMatrix44Tmpl<double>::isIdentity(a4->f64))
    {
      TXTextObject::getImageBounds(a1, a2, (uint64_t)v32);
      v30 = 0.0;
      v31 = 0.0;
      v28[0] = 0.0;
      v28[1] = 0.0;
      v29 = v27;
      TXTextObject::computeScaleFactors((OZRenderParams *)a2, v32, a4, v28, &v31, &v30);
      if (OZRenderParams::getTextRenderQuality((OZRenderParams *)a2) == 6)
      {
        ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((_QWORD *)a1 + 68) + 20464), MEMORY[0x1E0CA2E68], 0.0);
        v22 = v30;
        v21 = v31;
        v23 = ceil(v31);
        v24 = ceil(v30);
        if (ValueAsInt == 2)
        {
          v22 = v24;
          v21 = v23;
        }
      }
      else
      {
        v22 = v30;
        v21 = v31;
      }
      if (v21 >= v22)
        v25 = v21;
      else
        v25 = v22;
      if (a5)
      {
        v22 = v25;
        v21 = v25;
      }
      *(double *)&var0.var0 = v21;
      v35 = *(_QWORD *)&v22;
      p_var0 = (CMTime *)&var0;
      a4->f64[0] = v21;
      a4[2].f64[1] = v22;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v19 + 16))(v19, a7, &v40);
    v26 = p_var0;
    if (p_var0)
    {
      *(_QWORD *)&a4->f64[0] = p_var0->value;
      a4[2].f64[1] = *(float64_t *)&v26[1].timescale;
    }
  }
  if (v46[2])
  {
    result = (uint64_t)p_var0;
    if (p_var0)
      return MEMORY[0x1B5E29170](p_var0, 0x1000C40FF89C88ELL);
  }
  return result;
}

void sub_1B292E1F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_BYTE *)(v1 - 73))
  {
    v3 = *(_QWORD *)(v1 - 88);
    if (v3)
      MEMORY[0x1B5E29170](v3, 0x1000C40FF89C88ELL);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getFaceBlur(TXTextObject *this, CMTime *a2, double *a3, double *a4)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CMTime v22;
  CMTime v23;
  double v24;
  double v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v8 = *((_QWORD *)this + 33);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(std::__shared_weak_count **)(v8 + 16);
    v26 = v9;
    v27 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v26 = 0;
    v27 = 0;
  }
  v13 = *((_QWORD *)this + 68);
  *a3 = 0.0;
  *a4 = 0.0;
  v24 = 0.0;
  v25 = 0.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v9 + 5960), 0, 1))
  {
    v14 = v26;
    v23 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v26 + 10440), &v23, 0.0);
    v16 = v15;
    v25 = v15;
    OZChannel::getValueAsDouble((OZChannel *)(v14 + 10592), &v23, 0.0);
    v24 = v17;
    *a3 = v16 + *a3;
    *a4 = v17 + *a4;
  }
  v22 = *a2;
  HIDWORD(v18) = HIDWORD(v22.value);
  LODWORD(v18) = *((_DWORD *)this + 184);
  TXSequenceChannels::getFaceBlur((TXSequenceChannels *)(v13 + 25032), &v22, &v25, &v24, (double)v18);
  *a3 = v25 + *a3;
  *a4 = v24 + *a4;
  v19 = v27;
  if (v27)
  {
    v20 = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1B292E3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void TXTextObject::getDropShadowBlur(TXTextObject *this, CMTime *a2, double *a3, double *a4)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  double v26;
  double v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v8 = *((_QWORD *)this + 33);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(std::__shared_weak_count **)(v8 + 16);
    v28 = v9;
    v29 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v28 = 0;
    v29 = 0;
  }
  v13 = *((_QWORD *)this + 68);
  *a3 = 0.0;
  *a4 = 0.0;
  v26 = 0.0;
  v27 = 0.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v9 + 13848), 0, 1))
  {
    v14 = v28;
    v25 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v28 + 18328), &v25, 0.0);
    v16 = v15;
    v27 = v15;
    OZChannel::getValueAsDouble((OZChannel *)(v14 + 18480), &v25, 0.0);
    v26 = v17;
    *a3 = v16 + *a3;
    *a4 = v17 + *a4;
  }
  v24 = *a2;
  if ((TXTextLayout::isStyleEnabledBySequenceBehavior((TXTextLayout *)v13, 1043, &v24) & 1) != 0
    || (v23 = *a2, TXTextLayout::isStyleEnabledByOldSequenceBehavior((TXTextLayout *)v13, 1043, &v23)))
  {
    v22 = *a2;
    HIDWORD(v18) = HIDWORD(v22.value);
    LODWORD(v18) = *((_DWORD *)this + 184);
    TXSequenceChannels::getDropShadowBlur((TXSequenceChannels *)(v13 + 25032), &v22, &v27, &v26, (double)v18);
    *a3 = v27 + *a3;
    *a4 = v26 + *a4;
  }
  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1B292E5A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

double TXTextObject::getOutlineWidth(TXTextObject *this, CMTime *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  int OutlineWidth;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v4 = *((_QWORD *)this + 33);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(std::__shared_weak_count **)(v4 + 16);
    v22 = v5;
    v23 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v5 = 0;
    v22 = 0;
    v23 = 0;
  }
  v9 = *((_QWORD *)this + 68);
  v10 = v22;
  if ((OZChannelBase::isEnabled((OZChannelBase *)(v5 + 22632), 0, 1) & 1) != 0
    || (v12 = 0.0, (OZChannelBase::isEnabled((OZChannelBase *)(v22 + 22632), 0, 1) & 1) == 0)
    && (v21 = *a2, TXTextLayout::isStyleEnabledBySequenceBehavior((TXTextLayout *)v9, 1037, &v21)))
  {
    v20 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v10 + 27568), &v20, 0.0);
    v12 = v11 + 0.0;
  }
  v19 = *a2;
  HIDWORD(v13) = HIDWORD(v19.value);
  LODWORD(v13) = *((_DWORD *)this + 184);
  OutlineWidth = TXSequenceChannels::getOutlineWidth((TXSequenceChannels *)(v9 + 25032), &v19, (double)v13);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v12 + (double)OutlineWidth;
}

void sub_1B292E71C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void TXTextObject::getOutlineBlur(TXTextObject *this, CMTime *a2, double *a3, double *a4)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CMTime v22;
  CMTime v23;
  double v24;
  double v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v8 = *((_QWORD *)this + 33);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(std::__shared_weak_count **)(v8 + 16);
    v26 = v9;
    v27 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v26 = 0;
    v27 = 0;
  }
  v13 = *((_QWORD *)this + 68);
  *a3 = 0.0;
  *a4 = 0.0;
  v24 = 0.0;
  v25 = 0.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v9 + 22632), 0, 1))
  {
    v14 = v26;
    v23 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v26 + 27112), &v23, 0.0);
    v16 = v15;
    v25 = v15;
    OZChannel::getValueAsDouble((OZChannel *)(v14 + 27264), &v23, 0.0);
    v24 = v17;
    *a3 = v16 + *a3;
    *a4 = v17 + *a4;
  }
  v22 = *a2;
  HIDWORD(v18) = HIDWORD(v22.value);
  LODWORD(v18) = *((_DWORD *)this + 184);
  TXSequenceChannels::getOutlineBlur((TXSequenceChannels *)(v13 + 25032), &v22, &v25, &v24, (double)v18);
  *a3 = v25 + *a3;
  *a4 = v24 + *a4;
  v19 = v27;
  if (v27)
  {
    v20 = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1B292E8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void TXTextObject::getGlowBlur(TXTextObject *this, CMTime *a2, double *a3, double *a4)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  double v29;
  double v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v8 = *((_QWORD *)this + 33);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(std::__shared_weak_count **)(v8 + 16);
    v31 = v9;
    v32 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v31 = 0;
    v32 = 0;
  }
  v13 = *((_QWORD *)this + 68);
  *a3 = 0.0;
  *a4 = 0.0;
  v29 = 0.0;
  v30 = 0.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v9 + 31080), 0, 1))
  {
    v14 = v31;
    v28 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v31 + 35560), &v28, 0.0);
    v16 = v15;
    v30 = v15;
    OZChannel::getValueAsDouble((OZChannel *)(v14 + 35712), &v28, 0.0);
    v29 = v17;
    *a3 = v16 + *a3;
    *a4 = v17 + *a4;
  }
  v27 = *a2;
  if ((TXTextLayout::isStyleEnabledBySequenceBehavior((TXTextLayout *)v13, 1019, &v27) & 1) != 0
    || (v26 = *a2, (TXTextLayout::isStyleEnabledBySequenceBehavior((TXTextLayout *)v13, 1026, &v26) & 1) != 0)
    || (v25 = *a2, (TXTextLayout::isStyleEnabledBySequenceBehavior((TXTextLayout *)v13, 1038, &v25) & 1) != 0)
    || (v24 = *a2, (TXTextLayout::isStyleEnabledBySequenceBehavior((TXTextLayout *)v13, 1042, &v24) & 1) != 0)
    || (v23 = *a2, TXTextLayout::isStyleEnabledByOldSequenceBehavior((TXTextLayout *)v13, 1042, &v23)))
  {
    v22 = *a2;
    HIDWORD(v18) = HIDWORD(v22.value);
    LODWORD(v18) = *((_DWORD *)this + 184);
    TXSequenceChannels::getGlowBlur((TXSequenceChannels *)(v13 + 25032), &v22, &v30, &v29, (double)v18);
    *a3 = v30 + *a3;
    *a4 = v29 + *a4;
  }
  v19 = v32;
  if (v32)
  {
    v20 = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1B292EB18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void TXTextObject::getGlowOffset(TXTextObject *this, CMTime *a2, double *a3, double *a4, int a5)
{
  unint64_t v5;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  int isEnabled;
  double v22;
  double v23;
  double v24;
  double v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  CMTime v29;
  CMTime v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v11 = *((_QWORD *)this + 33);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(std::__shared_weak_count **)(v11 + 16);
    v31 = v12;
    v32 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  else
  {
    v12 = 0;
    v31 = 0;
    v32 = 0;
  }
  v16 = *((_QWORD *)this + 68);
  *a3 = 0.0;
  *a4 = 0.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v12 + 31080), 0, 1))
  {
    v17 = v31;
    v30 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v31 + 36744), &v30, 0.0);
    v19 = v18;
    OZChannel::getValueAsDouble((OZChannel *)(v17 + 36896), &v30, 0.0);
    *a3 = v19 + *a3;
    *a4 = v20 + *a4;
  }
  if (a5)
  {
    v29 = *a2;
    LODWORD(v5) = *((_DWORD *)this + 184);
    isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(v16 + 41136), 0, 1);
    v22 = 0.0;
    v23 = 0.0;
    if (isEnabled)
    {
      v24 = (double)v5;
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 41272), &v29, v24);
      v22 = v25;
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 41424), &v29, v24);
    }
    *a3 = v22 + *a3;
    *a4 = v23 + *a4;
  }
  v26 = v32;
  if (v32)
  {
    v27 = (unint64_t *)&v32->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1B292ECE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::getTypographicBounds(TXTextObject *this)
{
  return (uint64_t)this + 424;
}

void TXTextObject::getTransformedImageBoundsWithStyles(TXTextObject *a1, float64x2_t *a2, OZRenderState *a3)
{
  float64x2_t v11;
  double OutlineWidth;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double DropShadowAngle;
  float64x2_t v18;
  float64x2_t v19;
  __double2 v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double DropShadowDistance;
  CMTime v25;
  float64_t v26;
  float64_t v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  float64x2_t v31;
  float64x2_t v32;
  CMTime v33;
  float64_t v34;
  float64_t v35;
  CMTime v36;
  double v37;
  double v38;
  CMTime v39;
  float64x2_t v40;
  float64x2_t v41;
  CMTime v42;
  CMTime v43;
  float64x2_t v44[2];
  float64x2_t v45[2];
  CMTime v46;
  double v47;
  float64_t v48;
  float64x2_t v49[2];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  float64x2_t v60[2];
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  CMTime var0;

  var0 = (CMTime)a3->var0;
  v70 = 0x3FF0000000000000;
  v67 = 0x3FF0000000000000;
  v64 = 0x3FF0000000000000;
  v61 = 0x3FF0000000000000;
  v62 = 0u;
  v63 = 0u;
  v65 = 0u;
  v66 = 0u;
  v68 = 0u;
  v69 = 0u;
  TXTextObject::getTextureBounds(a1, a3, 0, (float64x2_t *)&v61, 0, 0, (uint64_t)v60, 0.0);
  v59 = 0x3FF0000000000000;
  v56 = 0x3FF0000000000000;
  v53 = 0x3FF0000000000000;
  v50 = 0x3FF0000000000000;
  v51 = 0u;
  v52 = 0u;
  v54 = 0u;
  v55 = 0u;
  v57 = 0u;
  v58 = 0u;
  TXTextObject::getTransformMatrix((uint64_t)a1, (uint64_t)&v50, (uint64_t)a3, 1, 1, 0, 1, 0.0, 0.0);
  __asm { FMOV            V0.2D, #-1.0 }
  a2[1] = _Q0;
  v49[0] = 0uLL;
  v23 = _Q0;
  v49[1] = _Q0;
  v48 = 0.0;
  v47 = 0.0;
  v46 = var0;
  TXTextObject::getFaceBlur(a1, &v46, &v48, &v47);
  v11.f64[0] = v48;
  PGImaging::gaussianBlurRect(0, v60, v49, v11);
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)&v50, v49[0].f64, (uint64_t)v49))
    PCRect<double>::operator|=(a2, v49);
  v45[0] = 0uLL;
  v45[1] = v23;
  v44[0] = 0uLL;
  v44[1] = v23;
  v43 = var0;
  TXTextObject::getOutlineBlur(a1, &v43, &v48, &v47);
  v42 = var0;
  OutlineWidth = TXTextObject::getOutlineWidth(a1, &v42);
  v13 = PGImaging::outlineRect(v60, v45, OutlineWidth);
  v13.f64[0] = v48;
  PGImaging::gaussianBlurRect(0, v45, v44, v13);
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)&v50, v44[0].f64, (uint64_t)v44))
    PCRect<double>::operator|=(a2, v44);
  v40 = 0uLL;
  v41 = v23;
  v39 = var0;
  TXTextObject::getGlowBlur(a1, &v39, &v48, &v47);
  v14.f64[0] = v48;
  PGImaging::gaussianBlurRect(0, v60, &v40, v14);
  v37 = 0.0;
  v38 = 0.0;
  v36 = var0;
  TXTextObject::getGlowOffset(a1, &v36, &v38, &v37, 1);
  v34 = 1.0;
  v35 = 1.0;
  v33 = var0;
  TXTextObject::getGlowScale(a1, &v33, &v35, &v34, 1);
  v15.f64[0] = v35;
  v15.f64[1] = v34;
  v40 = vmulq_f64(v15, v40);
  v41 = vmulq_f64(v15, v41);
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)&v50, v40.f64, (uint64_t)&v40))
  {
    v40.f64[0] = v38 + v40.f64[0];
    v40.f64[1] = v37 + v40.f64[1];
    PCRect<double>::operator|=(a2, &v40);
  }
  v31 = 0uLL;
  v32 = v23;
  v30 = var0;
  TXTextObject::getDropShadowBlur(a1, &v30, &v48, &v47);
  v16.f64[0] = v48;
  PGImaging::gaussianBlurRect(0, v60, &v31, v16);
  v29 = var0;
  DropShadowDistance = TXTextObject::getDropShadowDistance(a1, &v29);
  v28 = var0;
  DropShadowAngle = TXTextObject::getDropShadowAngle(a1, &v28);
  v26 = 1.0;
  v27 = 1.0;
  v25 = var0;
  TXTextObject::getDropShadowScale(a1, &v25, &v27, &v26, 1);
  v18.f64[0] = v27;
  v18.f64[1] = v26;
  v31 = vmulq_f64(v18, v31);
  v32 = vmulq_f64(v18, v32);
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)&v50, v31.f64, (uint64_t)&v31))
  {
    v20 = __sincos_stret(DropShadowAngle);
    v19.f64[0] = v20.__cosval;
    v19.f64[1] = v20.__sinval;
    v21 = vaddq_f64(vmulq_n_f64(v19, DropShadowDistance), v31);
    v22 = vsubq_f64(v32, vsubq_f64(v21, v31));
    v31 = v21;
    v32 = v22;
    PCRect<double>::operator|=(a2, &v31);
  }
}

double TXTextObject::getExtrusionDepth(TXTextObject *this, const CMTime *a2)
{
  uint64_t v2;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  OZChannel *v12;
  unint64_t v13;
  double v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CMTime v19;
  CMTime v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v2 = *((_QWORD *)this + 33);
  if (v2)
  {
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(std::__shared_weak_count **)(v2 + 16);
    v21 = v5;
    v22 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = 0.0;
    if (v5)
    {
      v10 = *((_QWORD *)this + 68);
      if (v10)
      {
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 40648), a2, 0.0);
        v9 = v11;
        v12 = (OZChannel *)(v10 + 51160);
        if (OZChannelBase::isEnabled((OZChannelBase *)v12, 0, 1))
        {
          v20 = *a2;
          OZChannel::setValue(v12, &v20, v9, 1);
          v19 = *a2;
          HIDWORD(v13) = HIDWORD(v19.value);
          LODWORD(v13) = *((_DWORD *)this + 184);
          OZChannel::getValueAsDouble(v12, &v19, (double)v13);
          v9 = v14;
        }
      }
    }
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v9 = 0.0;
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v9;
}

void sub_1B292F250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

float TXTextObject::getCapHeight(TXTextObject *this, double a2)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  float v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  v2 = *((_QWORD *)this + 33);
  if (!v2)
    return 0.0;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(std::__shared_weak_count **)(v2 + 16);
  v26 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v4)
  {
    v15 = 0.0;
    if (!v5)
      return v15;
    goto LABEL_33;
  }
  v8 = *(const void **)(v4 + 520);
  v9 = *(std::__shared_weak_count **)(v4 + 528);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v8
  {
    v24 = v12;
    v25 = v9;
    if (!v9)
      goto LABEL_22;
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    v24 = 0;
    v25 = 0;
    if (!v9)
    {
LABEL_24:
      v15 = 0.0;
      goto LABEL_25;
    }
  }
  v16 = (unint64_t *)&v9->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  v12 = v24;
  if (!v24)
    goto LABEL_24;
LABEL_22:
  v18 = v12[5];
  if (!v18)
    goto LABEL_24;
  v15 = (*(float (**)(uint64_t, double))(*(_QWORD *)v18 + 24))(v18, a2);
LABEL_25:
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v5 = v26;
  if (v26)
  {
LABEL_33:
    v21 = (unint64_t *)&v5->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v15;
}

void sub_1B292F408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

float TXTextObject::getXHeight(TXTextObject *this, double a2)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  float v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  v2 = *((_QWORD *)this + 33);
  if (!v2)
    return 0.0;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(std::__shared_weak_count **)(v2 + 16);
  v26 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v4)
  {
    v15 = 0.0;
    if (!v5)
      return v15;
    goto LABEL_33;
  }
  v8 = *(const void **)(v4 + 520);
  v9 = *(std::__shared_weak_count **)(v4 + 528);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v8
  {
    v24 = v12;
    v25 = v9;
    if (!v9)
      goto LABEL_22;
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    v24 = 0;
    v25 = 0;
    if (!v9)
    {
LABEL_24:
      v15 = 0.0;
      goto LABEL_25;
    }
  }
  v16 = (unint64_t *)&v9->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  v12 = v24;
  if (!v24)
    goto LABEL_24;
LABEL_22:
  v18 = v12[5];
  if (!v18)
    goto LABEL_24;
  v15 = (*(float (**)(uint64_t, double))(*(_QWORD *)v18 + 32))(v18, a2);
LABEL_25:
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v5 = v26;
  if (v26)
  {
LABEL_33:
    v21 = (unint64_t *)&v5->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v15;
}

void sub_1B292F5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void TXTextObject::getBoundingRectForGlyph(TXTextObject *this, double a2)
{
  uint64_t v2;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v2 = *((_QWORD *)this + 33);
  if (!v2)
  {
    v6 = 0;
    v27 = 0;
    v28 = 0;
    goto LABEL_16;
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(std::__shared_weak_count **)(v2 + 16);
  v27 = v5;
  v28 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v5)
  {
LABEL_16:
    if (!v6)
      return;
    goto LABEL_32;
  }
  v9 = *(const void **)(v5 + 520);
  v10 = *(std::__shared_weak_count **)(v5 + 528);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (v9
  {
    v25 = v13;
    v26 = v10;
    if (!v10)
    {
LABEL_24:
      v18 = v13[5];
      if (v18)
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, double))(*(_QWORD *)v18 + 64))(&v24, v18, *((unsigned __int16 *)this + 68), a2);
      goto LABEL_26;
    }
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  else
  {
    v25 = 0;
    v26 = 0;
    if (!v10)
      goto LABEL_26;
  }
  v16 = (unint64_t *)&v10->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  v13 = v25;
  if (v25)
    goto LABEL_24;
LABEL_26:
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v6 = v28;
  if (v28)
  {
LABEL_32:
    v22 = (unint64_t *)&v6->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B292F7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v9 - 48);
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::isOutlineVisible(TXTextObject *this, CMTime *a2, PCWorkingColor *a3, double *a4)
{
  uint64_t result;
  double OutlineWidth;
  float v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;

  v13 = *a2;
  result = TXTextObject::isOutlineEnabled(this, &v13);
  if ((_DWORD)result)
  {
    if (*((__int16 *)this + 68) == -1)
      return 0;
    if (a3)
    {
      v12 = *a2;
      TXTextObject::getOutlineColor(this, &v12, *(double *)&v12.value, a3);
      v11 = *a2;
      OutlineWidth = TXTextObject::getOutlineWidth(this, &v11);
      if (a4)
        *a4 = OutlineWidth;
      if (OutlineWidth > -0.0000001 && OutlineWidth < 0.0000001)
        return 0;
      v10 = *((float *)a3 + 3);
      return v10 >= 0.00001 || v10 <= -0.00001;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t TXTextObject::isGlowVisible(TXTextObject *this, CMTime *a2, PCWorkingColor *a3, double *a4, double *a5)
{
  uint64_t result;
  float v11;
  CMTime v12;
  double v13;
  double v14;
  CMTime v15;
  CMTime v16;
  double v17;
  double v18;
  CMTime v19;

  v19 = *a2;
  result = TXTextObject::isGlowEnabled(this, &v19);
  if ((_DWORD)result)
  {
    v18 = 0.0;
    v17 = 0.0;
    v16 = *a2;
    TXTextObject::getGlowScale(this, &v16, &v18, &v17, 1);
    if (v18 > -0.0000001 && v18 < 0.0000001 || v17 > -0.0000001 && v17 < 0.0000001)
      return 0;
    if (!a3)
      return 1;
    v15 = *a2;
    TXTextObject::getGlowColor(this, &v15, *(double *)&v15.value, a3);
    v13 = 0.0;
    v14 = 0.0;
    v12 = *a2;
    TXTextObject::getGlowBlur(this, &v12, &v14, &v13);
    if (a4)
      *a4 = v14;
    if (a5)
      *a5 = v13;
    if (((v11 = *((float *)a3 + 3), v11 <= -0.00001) || v11 >= 0.00001) && (v14 <= -0.0000001 || v14 >= 0.0000001))
      return v13 >= 0.0000001 || v13 <= -0.0000001;
    else
      return 0;
  }
  return result;
}

uint64_t TXTextObject::isDropShadowVisible(TXTextObject *this, CMTime *a2, PCWorkingColor *a3)
{
  uint64_t result;
  unint64_t v7;
  float v8;
  CMTime v9;
  CMTime v10;
  double v11;
  double v12;
  CMTime v13;

  v13 = *a2;
  result = TXTextObject::isDropShadowEnabled(this, &v13);
  if ((_DWORD)result)
  {
    v11 = 0.0;
    v12 = 0.0;
    v10 = *a2;
    TXTextObject::getDropShadowScale(this, &v10, &v12, &v11, 1);
    if ((v12 <= -0.0000001 || v12 >= 0.0000001) && (v11 <= -0.0000001 || v11 >= 0.0000001))
    {
      if (a3)
      {
        v9 = *a2;
        HIDWORD(v7) = HIDWORD(v9.value);
        LODWORD(v7) = *((_DWORD *)this + 184);
        TXTextObject::getDropShadowColor(this, &v9, (double)v7, a3);
        v8 = *((float *)a3 + 3);
        return v8 >= 0.00001 || v8 <= -0.00001;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void TXTextLayout::getAnchorPointOffset(uint64_t a1, const CMTime *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 22936), a2, 0.0);
  v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23088), a2, 0.0);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23536), a2, 0.0);
  *a3 = v7;
  a3[1] = v9;
  a3[2] = v10;
}

double TXTextObject::getAdvanceWidth(TXTextLayout **this, CMTime *a2)
{
  uint64_t v4;
  double v5;
  TXTextLayout *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  double v11;
  double XMarginScale;
  double YMarginScale;
  unint64_t *v14;
  unint64_t v15;
  CMTime v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  _BYTE v29[11];

  v23 = 0;
  v24 = 0;
  v25 = 0x3FF0000000000000;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  memset(v29, 0, sizeof(v29));
  v4 = TXTextObject::syncGlyph((TXTextObject *)this, a2, (uint64_t)&v23);
  v5 = (*(double (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 56))(v4, &v23);
  v21 = 1.0;
  v22 = 1.0;
  v20 = 1.0;
  v6 = this[33];
  if (v6)
  {
    v8 = *((_QWORD *)v6 + 1);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 2);
    v18 = v8;
    v19 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v18 = 0;
    v19 = 0;
  }
  v11 = 1.0;
  if (TXTextLayout::scaleAffectsLayout(this[68]))
  {
    v17 = *a2;
    OZChannelScale3D::getValue((OZChannelScale3D *)(v8 + 2864), &v17, &v22, &v21, &v20, 0.0);
    XMarginScale = TXTextLayout::getXMarginScale(this[68]);
    v22 = XMarginScale * v22;
    YMarginScale = TXTextLayout::getYMarginScale(this[68]);
    v11 = v22;
    v21 = YMarginScale * v21;
    v7 = v19;
  }
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v29[2] && v26)
    MEMORY[0x1B5E29170](v26, 0x1000C40FF89C88ELL);
  return v5 * v11;
}

void sub_1B292FD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24)
  {
    if (a20)
      MEMORY[0x1B5E29170](a20, 0x1000C40FF89C88ELL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::computeScaleFactors(OZRenderParams *this, uint64_t a2, float64x2_t *a3, uint64_t a4, double *a5, double *a6)
{
  unint64_t v9;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  uint64_t result;
  double v19;
  double v20;
  double v21;
  uint64_t v22;

  *a5 = 2.22507386e-308;
  *a6 = 2.22507386e-308;
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) - **(_QWORD **)(a2 + 88);
  if ((int)(v9 >> 5) >= 1)
  {
    v12 = 0;
    v13 = v9 & 0x1FFFFFFFE0;
    do
    {
      v14 = (double *)(**(_QWORD **)(a2 + 88) + v12);
      v20 = 0.0;
      v21 = 0.0;
      v22 = 0;
      getScale(a3, v14, (uint64_t)&v20);
      v15 = *a5;
      v16 = v21;
      if (*a5 < v20)
        v15 = v20;
      *a5 = v15;
      v17 = *a6;
      if (*a6 < v16)
        v17 = v16;
      *a6 = v17;
      v12 += 32;
    }
    while (v13 != v12);
  }
  result = OZRenderParams::getTextRenderQuality(this);
  if ((_DWORD)result == 6)
  {
    result = LiRenderingTechnology::getSharpText((OZRenderParams *)((char *)this + 1316));
    if ((_DWORD)result)
    {
      v19 = *a5;
      if (*a5 < *a6)
        v19 = *a6;
      *a5 = v19;
      *a6 = v19;
    }
  }
  return result;
}

void TXTextObject::getTexture(uint64_t a1@<X0>, OZRenderState *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, double a8@<D0>)
{
  TXTextLayout *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CMTime *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  double v27;
  double v28;
  __int128 v29[2];
  double v30;
  double v31;
  void (***v32)(HGGPUComputeDevice *__hidden);
  std::__shared_weak_count *v33;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  double v43;
  CMTime *p_var0;
  int v45;
  char v46;
  _BYTE v47[11];

  v41 = 0;
  p_var0 = 0;
  v45 = 0;
  v46 = 1;
  memset(v47, 0, sizeof(v47));
  v42 = a3;
  v43 = a8;
  var0 = a2->var0;
  v14 = (TXTextLayout *)TXTextObject::syncGlyph((TXTextObject *)a1, (CMTime *)&var0, (uint64_t)&v41);
  if (TXTextLayout::scaleEmojiToCapHeight(v14) && *(_BYTE *)(a1 + 568))
    PCMatrix44Tmpl<double>::rightScale((double *)a4, *(double *)(*(_QWORD *)(a1 + 544) + 64192), *(double *)(*(_QWORD *)(a1 + 544) + 64192), 1.0);
  *a7 = 0;
  a7[1] = 0;
  *(_OWORD *)&var0.var0 = 0x3FF0000000000000uLL;
  var0.var3 = 0;
  v35 = 0;
  v36 = 0x3FF0000000000000;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0x3FF0000000000000;
  if (!PCMatrix44Tmpl<double>::isIdentity((double *)a4))
  {
    TXTextObject::getImageBounds((TXTextObject *)a1, a2, (uint64_t)&v32);
    v30 = 0.0;
    v31 = 0.0;
    v29[0] = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v29[1] = _Q0;
    TXTextObject::computeScaleFactors((OZRenderParams *)a2, (double *)&v32, (float64x2_t *)a4, (double *)v29, &v31, &v30);
    v27 = v31;
    if (v31 > -0.0000001 && v31 < 0.0000001)
      goto LABEL_21;
    v28 = v30;
    if (v30 > -0.0000001 && v30 < 0.0000001)
      goto LABEL_21;
    *(double *)&var0.var0 = v31;
    v36 = *(_QWORD *)&v30;
    p_var0 = (CMTime *)&var0;
    *(_QWORD *)(a4 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a4 + 80) = 0x3FF0000000000000;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
    *(double *)a4 = v27;
    *(double *)(a4 + 40) = v28;
  }
  OZRenderParams::getRenderGPU((uint64_t)a2, &v32);
  v47[0] = 1;
  *(_QWORD *)&v47[3] = OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
  (*(void (**)(__int128 *__return_ptr, TXTextLayout *, uint64_t, uint64_t *, uint64_t, uint64_t, void (****)(HGGPUComputeDevice *__hidden), uint64_t, _QWORD))(*(_QWORD *)v14 + 24))(v29, v14, a5, &v41, a6, a4, &v32, 1, 0);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a7, v29);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v29[0] + 1);
  if (*((_QWORD *)&v29[0] + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v29[0] + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = p_var0;
  if (p_var0)
  {
    *(_QWORD *)a4 = p_var0->value;
    *(_QWORD *)(a4 + 40) = *(_QWORD *)&v18[1].timescale;
  }
  v19 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_21:
  if (v47[2])
  {
    if (p_var0)
      MEMORY[0x1B5E29170](p_var0, 0x1000C40FF89C88ELL);
  }
}

void sub_1B2930178(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  if (*(_BYTE *)(v2 - 73))
  {
    v4 = *(_QWORD *)(v2 - 88);
    if (v4)
      MEMORY[0x1B5E29170](v4, 0x1000C40FF89C88ELL);
  }
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::isEmoji(TXTextObject *this)
{
  return *((unsigned __int8 *)this + 568);
}

uint64_t TXTextObject::getMetalTexture@<X0>(TXTextObject *a1@<X0>, OZRenderState *a2@<X1>, char a3@<W2>, float64x2_t *a4@<X3>, HGGPURenderer *a5@<X4>, __int128 *a6@<X5>, HGMetalContext **a7@<X8>, double a8@<D0>)
{
  PGHelium *MetalContext;
  uint64_t v17;
  HGMetalTexture *v18;
  PGHelium *v19;
  __int128 v20;
  uint64_t i;
  _OWORD *v22;
  float64x2_t v23;
  uint64_t v24;
  uint64_t j;
  _OWORD *f64;
  __int128 v27;
  __int128 v28;
  uint64_t result;
  HGMetalContext *v30;
  HGMetalContext *v31;
  HGMetalContext *v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[135];
  char v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  HGRect v40;

  TXTextObject::getCacheHashForGlyphBitmap(a1, a2, a3, a4, 0, a8);
  MetalContext = (PGHelium *)HGGPURenderer::GetMetalContext(a5);
  v37 = *(_QWORD *)(*((_QWORD *)MetalContext + 2) + 16);
  v38 = v39;
  v36 = 0;
  v17 = PGHelium::Instance(MetalContext);
  PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::findValue(*(_QWORD *)(v17 + 8), &v37, &v36, (uint64_t)&v32);
  if (!v36)
  {
    TXTextObject::getHGBitmap(a1, a2, a3, (uint64_t)a4, (uint64_t)a6, 0, &v31, a8);
    v18 = (HGMetalTexture *)HGGPURenderer::GetMetalContext(a5);
    *(_QWORD *)&v40.var0 = *(_QWORD *)((char *)v31 + 28);
    *(_QWORD *)&v40.var2 = 1;
    HGMetalTexture::createFromBitmap(v18, v31, *(HGBitmap **)((char *)v31 + 20), v40, 1, &v30);
    v19 = v30;
    if (v32 != v30)
    {
      if (v32)
      {
        (*(void (**)(HGMetalContext *))(*(_QWORD *)v32 + 24))(v32);
        v19 = v30;
      }
      v32 = v19;
      if (v19)
        v19 = (PGHelium *)(*(uint64_t (**)(PGHelium *))(*(_QWORD *)v19 + 16))(v19);
    }
    v20 = a6[1];
    v33 = *a6;
    v34 = v20;
    if (v35 != (_BYTE *)a4)
    {
      for (i = 0; i != 8; i += 2)
      {
        v22 = &v35[i * 16];
        v23 = a4[i + 1];
        *v22 = a4[i];
        v22[1] = v23;
      }
    }
    v24 = PGHelium::Instance(v19);
    PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::addValue(*(_QWORD *)(v24 + 8), (uint64_t)&v37, &v32, *((_QWORD *)v30 + 9));
    if (v30)
      (*(void (**)(HGMetalContext *))(*(_QWORD *)v30 + 24))(v30);
    if (v31)
      (*(void (**)(HGMetalContext *))(*(_QWORD *)v31 + 24))(v31);
  }
  if (v35 != (_BYTE *)a4)
  {
    for (j = 0; j != 8; j += 2)
    {
      f64 = (_OWORD *)a4[j].f64;
      v27 = *(_OWORD *)&v35[j * 16 + 16];
      *f64 = *(_OWORD *)&v35[j * 16];
      f64[1] = v27;
    }
  }
  v28 = v34;
  *a6 = v33;
  a6[1] = v28;
  result = (uint64_t)v32;
  *a7 = v32;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    result = (uint64_t)v32;
    if (v32)
      return (*(uint64_t (**)(HGMetalContext *))(*(_QWORD *)v32 + 24))(v32);
  }
  return result;
}

void sub_1B293040C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(exception_object);
}

void TXTextObject::getCacheHashForGlyphBitmap(TXTextObject *a1, OZRenderState *a2, char a3, float64x2_t *a4, int a5, double a6)
{
  void *SystemGlyph;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  TXTextObject::buildGlyphRequest(a1, a2, a3, a4, a5, (uint64_t)v10, a6);
  var0 = a2->var0;
  SystemGlyph = TXTextObject::getSystemGlyph(a1, (CMTime *)&var0, 0);
  TXCoreTextGlyph::getCacheHashKey((uint64_t)SystemGlyph);
  if (v12)
  {
    if (v11)
      MEMORY[0x1B5E29170](v11, 0x1000C40FF89C88ELL);
  }
}

void sub_1B2930504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20)
  {
    if (a16)
      MEMORY[0x1B5E29170](a16, 0x1000C40FF89C88ELL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::getHGBitmap@<X0>(TXTextObject *a1@<X0>, OZRenderState *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, _QWORD *a7@<X8>, double a8@<D0>)
{
  void *SystemGlyph;
  uint64_t result;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  _BYTE v16[24];
  uint64_t v17;
  char v18;

  TXTextObject::buildGlyphRequest(a1, a2, a3, (float64x2_t *)a4, a6, (uint64_t)v16, a8);
  var0 = a2->var0;
  SystemGlyph = TXTextObject::getSystemGlyph(a1, (CMTime *)&var0, 0);
  TXCoreTextGlyph::getHGBitmap((uint64_t)SystemGlyph, (uint64_t)v16, a5, a7);
  result = v17;
  if (v17)
  {
    if (*(double *)v17 != *(double *)a4 || *(double *)(v17 + 32) != *(double *)(a4 + 40))
    {
      *(_QWORD *)a4 = *(_QWORD *)v17;
      *(_QWORD *)(a4 + 40) = *(_QWORD *)(result + 32);
    }
    if (v18)
      return MEMORY[0x1B5E29170]();
  }
  return result;
}

void sub_1B2930608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20)
  {
    if (a16)
      MEMORY[0x1B5E29170](a16, 0x1000C40FF89C88ELL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::setIsEmoji(uint64_t this, char a2)
{
  *(_BYTE *)(this + 568) = a2;
  return this;
}

void TXTextObject::getBitmap(FxColorDescription *this@<X1>, TXTextObject *a2@<X0>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>, double a7@<D0>)
{
  uint64_t v12;
  float64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v26;
  double v27;
  double v28[2];
  __int128 v29;
  double v30;
  double v31;
  float64x2_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  _OWORD v41[2];
  _QWORD v42[4];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  double v50;
  _QWORD *v51;
  int v52;
  __int16 v53;
  __int16 v54;
  uint64_t WorkingColorSpace;

  v48 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 257;
  v54 = 0;
  v49 = a3;
  v50 = a7;
  WorkingColorSpace = OZRenderParams::getWorkingColorSpace(this);
  v32 = *(float64x2_t *)&this->_pcColorDesc._colorSpaceRef._obj;
  *(_QWORD *)&v33 = *(_QWORD *)&this->_pcColorDesc._toneMapMethod._gain;
  v12 = TXTextObject::syncGlyph(a2, (CMTime *)&v32, (uint64_t)&v48);
  *a6 = 0;
  a6[1] = 0;
  v42[0] = 0x3FF0000000000000;
  memset(&v42[1], 0, 24);
  v43 = 0x3FF0000000000000;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0x3FF0000000000000;
  if (!PCMatrix44Tmpl<double>::isIdentity((double *)a4))
  {
    TXTextObject::getImageBounds(a2, (const OZRenderState *)this, (uint64_t)v41);
    v40[0] = v41[0];
    v40[1] = v41[1];
    PCMatrix44Tmpl<double>::transformRect<double>((double *)a4, (double *)v40, (uint64_t)v40);
    v17 = *(_OWORD *)(a4 + 80);
    v36 = *(_OWORD *)(a4 + 64);
    v37 = v17;
    v18 = *(_OWORD *)(a4 + 112);
    v38 = *(_OWORD *)(a4 + 96);
    v39 = v18;
    v19 = *(_OWORD *)(a4 + 16);
    v32 = *(float64x2_t *)a4;
    v33 = v19;
    v20 = *(_OWORD *)(a4 + 48);
    v34 = *(_OWORD *)(a4 + 32);
    v35 = v20;
    v30 = 0.0;
    v31 = 0.0;
    v28[0] = 0.0;
    v28[1] = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    v29 = _Q0;
    TXTextObject::computeScaleFactors((OZRenderParams *)this, (double *)v41, &v32, v28, &v31, &v30);
    v26 = v31;
    if (v31 > -0.0000001 && v31 < 0.0000001)
      goto LABEL_13;
    v27 = v30;
    if (v30 > -0.0000001 && v30 < 0.0000001)
      goto LABEL_13;
    *(double *)v42 = v31;
    v43 = *(_QWORD *)&v30;
    v51 = v42;
    *(_QWORD *)(a4 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a4 + 80) = 0x3FF0000000000000;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
    *(double *)a4 = v26;
    *(double *)(a4 + 40) = v27;
  }
  (*(void (**)(float64x2_t *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(&v32, v12, a5, &v48, 1, 1);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a6, (__int128 *)&v32);
  v13 = v32.f64[1];
  if (*(_QWORD *)&v32.f64[1])
  {
    v14 = (unint64_t *)(*(_QWORD *)&v32.f64[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v13 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v13));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v13);
    }
  }
  v16 = v51;
  if (v51)
  {
    *(_QWORD *)a4 = *v51;
    *(_QWORD *)(a4 + 40) = v16[4];
  }
LABEL_13:
  if (HIBYTE(v54))
  {
    if (v51)
      MEMORY[0x1B5E29170](v51, 0x1000C40FF89C88ELL);
  }
}

void sub_1B29308A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  if (*(_BYTE *)(v2 - 73))
  {
    v4 = *(_QWORD *)(v2 - 88);
    if (v4)
      MEMORY[0x1B5E29170](v4, 0x1000C40FF89C88ELL);
  }
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::getRenderedGlyphTransform@<X0>(TXTextObject *a1@<X0>, OZRenderState *a2@<X1>, float64x2_t *a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, float64_t a6@<D0>, float64_t a7@<D1>)
{
  uint64_t v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  double v21[2];
  float64x2_t v22;
  CMTime v23[3];
  _QWORD *v24;
  double v25[2];
  float64x2_t v26;
  _QWORD v27[4];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v35 = 0;
  v36 = 0;
  v37 = 0x3FF0000000000000;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v23[0] = (CMTime)a2->var0;
  v12 = TXTextObject::syncGlyph(a1, v23, (uint64_t)&v35);
  v33 = 0;
  v34 = 0;
  v27[0] = 0x3FF0000000000000;
  memset(&v27[1], 0, 24);
  v28 = 0x3FF0000000000000;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0x3FF0000000000000;
  if (!PCMatrix44Tmpl<double>::isIdentity(a3->f64))
  {
    TXTextObject::getImageBounds(a1, a2, (uint64_t)v25);
    LiImagePolygon::LiImagePolygon((LiImagePolygon *)v23);
    LiImagePolygon::set((uint64_t)v23, v25, 0);
    if (a4[2] >= 0.0 && a4[3] >= 0.0)
    {
      liTransformAndClip(a4, a3->f64, (uint64_t **)v23);
      if (((v24[1] - *v24) & 0x1FFFFFFFE0) == 0)
      {
        v14.f64[0] = a6;
        v14.f64[1] = a7;
        v15 = vaddq_f64(v14, v14);
        v21[0] = v25[0] - v15.f64[0];
        v21[1] = v25[1] - v15.f64[1];
        v22 = vsubq_f64(v26, vsubq_f64(vnegq_f64(v15), v15));
        LiImagePolygon::set((uint64_t)v23, v21, 0);
        liTransformAndClip(a4, a3->f64, (uint64_t **)v23);
        if ((int)((v24[1] - *v24) >> 5) >= 1)
          LiImagePolygon::set((uint64_t)v23, v25, 0);
      }
    }
    TXTextObject::computeScaleFactors((OZRenderParams *)a2, (uint64_t)v23, a3, v13, (double *)&v34, (double *)&v33);
    v27[0] = v34;
    v28 = v33;
    v38 = v27;
    LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v23);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 64))(v12, &v35);
  v17 = *(_OWORD *)(result + 16);
  *(_OWORD *)a5 = *(_OWORD *)result;
  *(_OWORD *)(a5 + 16) = v17;
  v18 = *(_OWORD *)(result + 48);
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(result + 32);
  *(_OWORD *)(a5 + 48) = v18;
  *(_QWORD *)(a5 + 64) = *(_QWORD *)(result + 64);
  if (HIBYTE(v39))
  {
    result = (uint64_t)v38;
    if (v38)
      return MEMORY[0x1B5E29170](v38, 0x1000C40FF89C88ELL);
  }
  return result;
}

void sub_1B2930B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;

  va_start(va, a9);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)va);
  if (*(_BYTE *)(v9 - 73))
  {
    v11 = *(_QWORD *)(v9 - 88);
    if (v11)
      MEMORY[0x1B5E29170](v11, 0x1000C40FF89C88ELL);
  }
  _Unwind_Resume(a1);
}

void TXTextObject::getScaleMatrix(TXTextObject *a1, uint64_t a2, CMTime *a3, int a4)
{
  __double2 v7;
  _BYTE v8[72];
  _BYTE v9[72];
  double v10[9];
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20[9];
  uint64_t v21;
  double v22;
  double v23;
  CMTime v24;
  double v25;
  double v26;
  double v27;

  v26 = 0.0;
  v27 = 0.0;
  v24 = *a3;
  v25 = 0.0;
  TXTextObject::getRotation(a1, &v24, &v27, &v26, &v25, 1, a4, *(__n128 *)&v24.value);
  v22 = 0.0;
  v23 = 0.0;
  v21 = 0;
  (*(void (**)(uint64_t, double *, double *, uint64_t *, CMTime *, uint64_t))(*(_QWORD *)(*((_QWORD *)a1 + 68)
                                                                                                + 200)
                                                                                    + 1312))(*((_QWORD *)a1 + 68) + 200, &v23, &v22, &v21, a3, 1);
  v20[6] = 0.0;
  v20[7] = 0.0;
  v20[8] = 1.0;
  v20[0] = v23;
  v20[1] = v23 * 0.0;
  v20[2] = v23 * 0.0;
  v20[3] = v22 * 0.0;
  v20[4] = v22;
  v20[5] = v22 * 0.0;
  v17 = 0;
  v18 = 0;
  v19 = 0x3FF0000000000000;
  v7 = __sincos_stret(v25);
  v11 = v7.__cosval - v7.__sinval * 0.0;
  v12 = v7.__cosval * 0.0 - v7.__sinval;
  v13 = v7.__cosval * 0.0 - v7.__sinval * 0.0;
  v14 = v7.__sinval + v7.__cosval * 0.0;
  v15 = v7.__cosval + v7.__sinval * 0.0;
  v16 = v7.__sinval * 0.0 + v7.__cosval * 0.0;
  v10[6] = 0.0;
  v10[7] = 0.0;
  v10[8] = 1.0;
  v10[0] = v15;
  v10[1] = v14;
  v10[2] = v16;
  v10[3] = v12;
  v10[4] = v11;
  v10[5] = v13;
  PCMatrix33Tmpl<double>::operator*((uint64_t)v10, v20, (uint64_t)v8);
  PCMatrix33Tmpl<double>::operator*((uint64_t)v8, &v11, (uint64_t)v9);
  PCMatrix33Tmpl<double>::operator=(a2, (uint64_t)v9);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 24) = 0;
}

void TXTextObject::getCommonTextureCacheHash(TXTextObject *this, int8x8_t *a2, OZRenderParams *a3, const FxColorDescription *a4, double *a5, double *a6, BOOL a7)
{
  uint64_t TextRenderQuality;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t RenderQuality;
  void *v23;
  double RenderedFontSize;
  uint64_t ValueAsInt;
  char ReducedResolutionMedia;
  OZChannel *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  CMTime v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  CMTime v35;

  TextRenderQuality = OZRenderParams::getTextRenderQuality(a3);
  v35 = *(CMTime *)a3;
  v15 = TXTextObject::syncGlyph(this, &v35, 0);
  v16 = *(const void **)(v15 + 16);
  v17 = *((_QWORD *)this + 33);
  if (v17)
  {
    v19 = *(_QWORD *)(v17 + 8);
    v18 = *(std::__shared_weak_count **)(v17 + 16);
    v33 = v19;
    v34 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
  }
  else
  {
    v33 = 0;
    v34 = 0;
  }
  PCHashWriteStream::writeValue(a2, *(_WORD *)(v15 + 8));
  PCHashWriteStream::writeValue(a2, *((_WORD *)this + 60));
  RenderQuality = OZRenderParams::getRenderQuality(a3);
  (*(void (**)(int8x8_t *, uint64_t))(*(_QWORD *)a2 + 48))(a2, RenderQuality);
  (*(void (**)(int8x8_t *, uint64_t))(*(_QWORD *)a2 + 48))(a2, TextRenderQuality);
  if (v16)
  else
    v23 = 0;
  (*(void (**)(int8x8_t *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)v23 + 112);
  v32 = *(CMTime *)a3;
  RenderedFontSize = TXTextObject::getRenderedFontSize(this, &v32, 0.0);
  (*(void (**)(int8x8_t *, double))(*(_QWORD *)a2 + 88))(a2, RenderedFontSize);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((_QWORD *)this + 68) + 20720), MEMORY[0x1E0CA2E68], 0.0);
  (*(void (**)(int8x8_t *, uint64_t))(*(_QWORD *)a2 + 48))(a2, ValueAsInt);
  ReducedResolutionMedia = OZRenderParams::getReducedResolutionMedia(a3);
  PCHashWriteStream::writeValue(a2, ReducedResolutionMedia);
  FxHashColorDescription(a2, a4);
  v27 = (OZChannel *)(*((_QWORD *)this + 68) + 28440);
  v35 = *(CMTime *)a3;
  HIDWORD(v28) = HIDWORD(v35.value);
  LODWORD(v28) = *((_DWORD *)this + 97);
  OZChannel::getValueAsDouble(v27, &v35, (double)v28);
  (*(void (**)(int8x8_t *))(*(_QWORD *)a2 + 88))(a2);
  if ((_DWORD)TextRenderQuality == 2)
  {
    v35.value = 0;
    TXTextObject::getScale(this, (CMTime *)a3, a5, a6, (double *)&v35.value, 1, 1, 1, 0, 0, a7);
    (*(void (**)(int8x8_t *, double))(*(_QWORD *)a2 + 88))(a2, *a5);
    (*(void (**)(int8x8_t *, double))(*(_QWORD *)a2 + 88))(a2, *a6);
  }
  (*(void (**)(int8x8_t *, double))(*(_QWORD *)a2 + 88))(a2, *((double *)a3 + 3));
  (*(void (**)(int8x8_t *, double))(*(_QWORD *)a2 + 88))(a2, *((double *)a3 + 4));
  v29 = v34;
  if (v34)
  {
    v30 = (unint64_t *)&v34->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1B2930F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void TXTextObject::getScaleAndHashForPixelTransform(uint64_t a1)
{
  uint64_t v1;
  int32x2_t *v2;
  int32x2_t *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  CMTime *v12;
  CMTime *v13;
  TXTextObject *v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v39;
  double v40;
  double v41;
  double v42;
  float64_t v43;
  float64_t v44;
  double OutlineWidth;
  CMTime v46;
  double v47;
  CMTime v48;
  CMTime v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  double v60;
  CMTime v61;
  CMTime v62;
  CMTime v63;
  double v64;
  int8x8_t v65[521];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = (TXTextObject *)v1;
  v16 = v15;
  v65[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v65);
  if ((v5 - 2) >= 2)
  {
    if (v5 == 1)
    {
LABEL_17:
      v64 = 0.0;
      v60 = 0.0;
      v49 = *v13;
      v48 = v49;
      OutlineWidth = TXTextObject::getOutlineWidth(v14, &v48);
      v47 = 0.0;
      TXTextObject::getScale(v14, v13, v11, v9, &v47, 1, 1, 1, 0, 0, 1);
      v46 = v49;
      TXTextObject::getOutlineBlur(v14, &v46, &v64, &v60);
      v27 = *(_OWORD *)(v7 + 80);
      v56 = *(_OWORD *)(v7 + 64);
      v57 = v27;
      v28 = *(_OWORD *)(v7 + 112);
      v58 = *(_OWORD *)(v7 + 96);
      v59 = v28;
      v29 = *(_OWORD *)(v7 + 16);
      v52 = *(float64x2_t *)v7;
      v53 = v29;
      v30 = *(_OWORD *)(v7 + 48);
      v54 = *(_OWORD *)(v7 + 32);
      v55 = v30;
      v31 = 0.0;
      TXTextObject::getTextureBounds(v14, (OZRenderState *)v13, 0, &v52, 1, 1, (uint64_t)&v50, 0.0);
      v32 = *v11;
      v33 = *v9;
      if (*v11 <= -0.0000001 || v32 >= 0.0000001)
      {
        if (v33 <= -0.0000001 || (v34 = 0.0, v33 >= 0.0000001))
        {
          if (v52.f64[0] / v32 <= *((double *)&v54 + 1) / v33)
            v31 = v52.f64[0] / v32;
          else
            v31 = *((double *)&v54 + 1) / v33;
          v34 = v31 * (ceil(OutlineWidth * v31) / (OutlineWidth * v31));
        }
      }
      else
      {
        v34 = 0.0;
      }
      v35.f64[0] = *v11;
      v35.f64[1] = *v9;
      v36 = vmulq_n_f64(vmulq_n_f64(v35, v34), OutlineWidth);
      v37 = vaddq_f64(v51, vaddq_f64(v36, v36));
      v51 = v37;
      if (v37.f64[0] > 4096.0 || v37.f64[1] > 4096.0)
      {
        if (v37.f64[0] >= v37.f64[1])
          v39 = v37.f64[0];
        else
          v39 = v37.f64[1];
        v40 = 4096.0 / v39;
        v51 = vmulq_n_f64(v37, v40);
        v41 = v31 * v40;
        v42 = OutlineWidth * (v31 * v40);
        v34 = v31 * v40 * (floor(v42 + 0.0000001) / v42);
        if (v34 <= 0.0)
          v34 = v41 * (ceil(v42) / v42);
      }
      *v11 = v32 * v34;
      *v9 = v34 * *v9;
      PCHashWriteStream::writeValue(v65, *v11);
      PCHashWriteStream::writeValue(v65, *v9);
      TXTextObject::getImageBoundsOfAttribute((uint64_t)v14, v50.f64, (const OZRenderState *)v13, 1, 1, 0, 1, 0, 0.0, 0.0, 0.0, 0.0);
      v43 = v51.f64[1] * *v11;
      v44 = v51.f64[0] * *v9;
      *v3 = vmovn_s64(vcvtq_s64_f64(v50));
      v3[1].i32[0] = (int)v44;
      v3[1].i32[1] = (int)v43;
      goto LABEL_36;
    }
    if (v5)
      goto LABEL_36;
  }
  v49.value = 0;
  v64 = 0.0;
  switch(v5)
  {
    case 3:
      v61 = *v13;
      TXTextObject::getDropShadowBlur(v14, &v61, (double *)&v49.value, &v64);
      break;
    case 2:
      v62 = *v13;
      TXTextObject::getGlowBlur(v14, &v62, (double *)&v49.value, &v64);
      break;
    case 0:
      v63 = *v13;
      TXTextObject::getFaceBlur(v14, &v63, (double *)&v49.value, &v64);
      break;
  }
  if (*(double *)&v49.value > 0.0 || v64 > 0.0)
  {
    v60 = 0.0;
    TXTextObject::getScale(v14, v13, v11, v9, &v60, 1, 1, 1, 0, 0, 1);
    v22 = *(_OWORD *)(v7 + 80);
    v56 = *(_OWORD *)(v7 + 64);
    v57 = v22;
    v23 = *(_OWORD *)(v7 + 112);
    v58 = *(_OWORD *)(v7 + 96);
    v59 = v23;
    v24 = *(_OWORD *)(v7 + 16);
    v52 = *(float64x2_t *)v7;
    v53 = v24;
    v25 = *(_OWORD *)(v7 + 48);
    v54 = *(_OWORD *)(v7 + 32);
    v55 = v25;
    TXTextObject::getTextureBounds(v14, (OZRenderState *)v13, 0, &v52, 1, 0, (uint64_t)&v50, 0.0);
    v26 = v52.f64[0] / *v11;
    if (v26 > *((double *)&v54 + 1) / *v9)
      v26 = *((double *)&v54 + 1) / *v9;
    *v11 = *v11 * v26;
    *v9 = *v9 * v26;
    PCHashWriteStream::writeValue(v65, *v11);
    PCHashWriteStream::writeValue(v65, *v9);
  }
  else
  {
    v17 = *(_OWORD *)(v7 + 80);
    v56 = *(_OWORD *)(v7 + 64);
    v57 = v17;
    v18 = *(_OWORD *)(v7 + 112);
    v58 = *(_OWORD *)(v7 + 96);
    v59 = v18;
    v19 = *(_OWORD *)(v7 + 16);
    v52 = *(float64x2_t *)v7;
    v53 = v19;
    v20 = *(_OWORD *)(v7 + 48);
    v54 = *(_OWORD *)(v7 + 32);
    v55 = v20;
    TXTextObject::getTextureBounds(v14, (OZRenderState *)v13, 0, &v52, 1, 0, (uint64_t)&v50, 0.0);
    v21 = *((_QWORD *)&v54 + 1);
    *v11 = v52.f64[0];
    *(_QWORD *)v9 = v21;
    PCHashWriteStream::writeValue(v65, *v11);
    PCHashWriteStream::writeValue(v65, *v9);
    *(int32x4_t *)v3->i8 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v50), (int32x4_t)vcvtq_s64_f64(v51));
  }
  if (v5 == 1)
    goto LABEL_17;
LABEL_36:
  PCHashWriteStream::close(v65);
  *v16 = *(_OWORD *)PCHashWriteStream::getHash(v65)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v65);
}

void sub_1B29314B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&a60);
  _Unwind_Resume(a1);
}

void TXTextObject::getTextureCacheHashForAttribute(TXTextObject *this, OZRenderParams *a2, const FxColorDescription *a3, unsigned int a4, double *a5, double *a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  int v15;
  int v16;
  const FxColorDescription *v17;
  const FxColorDescription *v18;
  OZRenderParams *v19;
  OZRenderParams *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  double TypeOn;
  int ValueAsInt;
  uint64_t v31;
  uint64_t v32;
  double OutlineWidth;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  double GlowRadius;
  uint64_t v44;
  int v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  OZScene *v50;
  unsigned int ValueAsUint;
  void *Node;
  const void *v53;
  void *v54;
  void *v55;
  void *v56;
  OZScene *v57;
  unsigned int v58;
  void *v59;
  void *v60;
  OZScene *v61;
  unsigned int v62;
  void *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  OZScene *v68;
  unsigned int v69;
  void *v70;
  void *v71;
  double v72;
  double v73;
  CMTime v74;
  CMTime v75;
  CMTime v76;
  CMTime v77;
  CMTime v78;
  double v79;
  double v80;
  CMTime v81;
  double v82;
  double v83;
  double v84;
  CMTime v85;
  CMTime v86;
  double v87;
  double *v88;
  uint64_t v89;
  CMTime v90;
  double v91;
  double v92;
  CMTime __src;
  uint64_t v94;
  std::__shared_weak_count *v95;
  int8x8_t v96[521];

  v6 = MEMORY[0x1E0C80A78](this);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = v6;
  v23 = v22;
  v96[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v96);
  TXTextObject::getCommonTextureCacheHash((TXTextObject *)v21, v96, v20, v18, v14, v12, v8);
  v24 = *(_QWORD *)(v21 + 264);
  if (v24)
  {
    v26 = *(_QWORD *)(v24 + 8);
    v25 = *(std::__shared_weak_count **)(v24 + 16);
    v94 = v26;
    v95 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
  }
  else
  {
    v26 = 0;
    v94 = 0;
    v95 = 0;
  }
  __src = *(CMTime *)v20;
  if (v10)
  {
    TypeOn = TXTextLayout::getTypeOn(*(TXTextLayout **)(v21 + 544), *(_DWORD *)(v21 + 96), &__src);
    PCHashWriteStream::writeValue(v96, TypeOn);
  }
  switch(v16)
  {
    case 0:
      v91 = 0.0;
      v92 = 0.0;
      v90 = __src;
      TXTextObject::getFaceBlur((TXTextObject *)v21, &v90, &v92, &v91);
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v26 + 6088), MEMORY[0x1E0CA2E68], 0.0);
      PCHashWriteStream::writeValue(v96, ValueAsInt);
      PCHashWriteStream::writeValue(v96, 0);
      PCHashWriteStream::writeValue(v96, v92);
      PCHashWriteStream::writeValue(v96, v91);
      if (ValueAsInt == 2)
      {
        v49 = v94;
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v94 + 8560) + 448))(v94 + 8560, v96, &__src);
        v50 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 128))(v49);
        ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(v49 + 8696), MEMORY[0x1E0CA2E68], 0.0);
        Node = OZScene::getNode(v50, ValueAsUint);
        v53 = Node;
        if (Node)
        {
          if (v54)
          {
            v87 = COERCE_DOUBLE(&v87);
            v88 = &v87;
            v89 = 0;
            (*(void (**)(void *, int8x8_t *, OZRenderParams *, double *, uint64_t))(*(_QWORD *)v54 + 536))(v54, v96, v20, &v87, 1);
            std::__list_imp<unsigned int>::clear(&v87);
          }
          if (v56 && ((*(uint64_t (**)(void *))(*(_QWORD *)v56 + 1784))(v56) & 1) != 0
            || v55 && (*(unsigned int (**)(void *))(*(_QWORD *)v55 + 1376))(v55) >= 2)
          {
            PCHashWriteStream::writeValue(v96, &__src);
          }
        }
      }
      else
      {
        if (ValueAsInt == 1)
        {
          v31 = v94;
          v32 = 7352;
        }
        else
        {
          if (!v10)
            goto LABEL_54;
          v31 = v94;
          v32 = 6344;
        }
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v31 + v32) + 448))(v31 + v32, v96, &__src);
      }
      goto LABEL_54;
    case 1:
      v91 = 0.0;
      v92 = 0.0;
      v86 = *(CMTime *)v20;
      TXTextObject::getOutlineBlur((TXTextObject *)v21, &v86, &v92, &v91);
      v85 = __src;
      OutlineWidth = TXTextObject::getOutlineWidth((TXTextObject *)v21, &v85);
      v34 = OZChannel::getValueAsInt((OZChannel *)(v26 + 22760), MEMORY[0x1E0CA2E68], 0.0);
      PCHashWriteStream::writeValue(v96, 1);
      PCHashWriteStream::writeValue(v96, OutlineWidth);
      PCHashWriteStream::writeValue(v96, v34);
      PCHashWriteStream::writeValue(v96, v92);
      PCHashWriteStream::writeValue(v96, v91);
      v35 = v94;
      v36 = OZChannel::getValueAsInt((OZChannel *)(v94 + 30928), MEMORY[0x1E0CA2E68], 0.0) != 0;
      PCHashWriteStream::writeValue(v96, v36);
      PCHashWriteStream::writeValue(v96, *(_BYTE *)(*(_QWORD *)(v21 + 544) + 64176));
      if (!OZRenderParams::getTextRenderQuality(v20))
      {
        v87 = 0.0;
        v83 = 0.0;
        v84 = 0.0;
        TXTextObject::getScale((TXTextObject *)v21, (CMTime *)v20, &v87, &v84, &v83, 1, 1, 1, 0, 0, v8);
        PCHashWriteStream::writeValue(v96, v87);
        PCHashWriteStream::writeValue(v96, v84);
      }
      if (v34 == 2)
      {
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v35 + 25232) + 448))(v35 + 25232, v96, &__src);
        v57 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 128))(v35);
        v58 = OZChannel::getValueAsUint((OZChannel *)(v35 + 25368), MEMORY[0x1E0CA2E68], 0.0);
        v59 = OZScene::getNode(v57, v58);
        if (v59)
        {
          if (v60)
          {
            v87 = COERCE_DOUBLE(&v87);
            v88 = &v87;
            v89 = 0;
            (*(void (**)(void *, int8x8_t *, OZRenderParams *, double *, uint64_t))(*(_QWORD *)v60 + 536))(v60, v96, v20, &v87, 1);
            std::__list_imp<unsigned int>::clear(&v87);
          }
        }
      }
      else
      {
        if (v34 == 1)
        {
          v37 = 24024;
        }
        else
        {
          if (!v10)
            goto LABEL_47;
          v37 = 23016;
        }
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v35 + v37) + 448))(v35 + v37, v96, &__src);
      }
LABEL_47:
      (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v35 + 26824) + 448))(v35 + 26824, v96, &__src);
LABEL_54:
      *v23 = *(_OWORD *)PCHashWriteStream::getHash(v96)->i8;
      v65 = v95;
      if (v95)
      {
        v66 = (unint64_t *)&v95->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v96);
      return;
    case 2:
      v38 = *(_QWORD *)(v21 + 544);
      v91 = 0.0;
      v92 = 0.0;
      v84 = 0.0;
      TXTextObject::getPivot((TXTextLayout **)v21, &v92, &v91, &v84, &__src, v8);
      v82 = 0.0;
      v83 = 0.0;
      v81 = __src;
      TXTextObject::getGlowBlur((TXTextObject *)v21, &v81, &v83, &v82);
      v79 = 0.0;
      v80 = 0.0;
      v78 = __src;
      TXTextObject::getGlowScale((TXTextObject *)v21, &v78, &v80, &v79, 1);
      v39 = OZChannel::getValueAsInt((OZChannel *)(v26 + 31208), MEMORY[0x1E0CA2E68], 0.0);
      PCHashWriteStream::writeValue(v96, 2);
      PCHashWriteStream::writeValue(v96, v92);
      PCHashWriteStream::writeValue(v96, v91);
      PCHashWriteStream::writeValue(v96, v80);
      PCHashWriteStream::writeValue(v96, v79);
      PCHashWriteStream::writeValue(v96, v39);
      PCHashWriteStream::writeValue(v96, v83);
      PCHashWriteStream::writeValue(v96, v82);
      v40 = v94;
      v77 = __src;
      OZChannel::getValueAsDouble((OZChannel *)(v94 + 36016), &v77, 0.0);
      v42 = *(double *)&v41;
      HIDWORD(v41) = HIDWORD(__src.value);
      v76 = __src;
      LODWORD(v41) = *(_DWORD *)(v21 + 736);
      GlowRadius = TXSequenceChannels::getGlowRadius((TXSequenceChannels *)(v38 + 25032), &v76, (double)v41);
      PCHashWriteStream::writeValue(v96, v42 + GlowRadius);
      if (v39 == 2)
      {
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v40 + 33680) + 448))(v40 + 33680, v96, &__src);
        v68 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 128))(v40);
        v69 = OZChannel::getValueAsUint((OZChannel *)(v40 + 33816), MEMORY[0x1E0CA2E68], 0.0);
        v70 = OZScene::getNode(v68, v69);
        if (v70)
        {
          if (v71)
          {
            v87 = COERCE_DOUBLE(&v87);
            v88 = &v87;
            v89 = 0;
            (*(void (**)(void *, int8x8_t *, OZRenderParams *, double *, uint64_t))(*(_QWORD *)v71 + 536))(v71, v96, v20, &v87, 1);
            std::__list_imp<unsigned int>::clear(&v87);
          }
        }
      }
      else
      {
        if (v39 == 1)
          v44 = v40 + 32472;
        else
          v44 = v40 + 31464;
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)v44 + 448))(v44, v96, &__src);
      }
      (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v40 + 35272) + 448))(v40 + 35272, v96, &__src);
      goto LABEL_54;
    case 3:
      v91 = 0.0;
      v92 = 0.0;
      v84 = 0.0;
      TXTextObject::getPivot((TXTextLayout **)v21, &v92, &v91, &v84, &__src, v8);
      v82 = 0.0;
      v83 = 0.0;
      v75 = __src;
      TXTextObject::getDropShadowBlur((TXTextObject *)v21, &v75, &v83, &v82);
      v79 = 0.0;
      v80 = 0.0;
      v74 = __src;
      TXTextObject::getDropShadowScale((TXTextObject *)v21, &v74, &v80, &v79, 1);
      v45 = OZChannel::getValueAsInt((OZChannel *)(v26 + 13976), MEMORY[0x1E0CA2E68], 0.0);
      PCHashWriteStream::writeValue(v96, 3);
      PCHashWriteStream::writeValue(v96, v92);
      PCHashWriteStream::writeValue(v96, v91);
      PCHashWriteStream::writeValue(v96, v80);
      PCHashWriteStream::writeValue(v96, v79);
      PCHashWriteStream::writeValue(v96, v45);
      v46 = v83;
      PCHashWriteStream::writeValue(v96, v83);
      v47 = v82;
      PCHashWriteStream::writeValue(v96, v82);
      if (v46 > 0.0 || v47 > 0.0)
      {
        v87 = 0.0;
        v72 = 0.0;
        v73 = 0.0;
        TXTextObject::getScale((TXTextObject *)v21, (CMTime *)v20, &v87, &v73, &v72, 1, 1, 1, 0, 0, 1);
        PCHashWriteStream::writeValue(v96, v87);
        PCHashWriteStream::writeValue(v96, v73);
      }
      if (v45 == 2)
      {
        v48 = v94;
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v94 + 16448) + 448))(v94 + 16448, v96, &__src);
        v61 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 128))(v48);
        v62 = OZChannel::getValueAsUint((OZChannel *)(v48 + 16584), MEMORY[0x1E0CA2E68], 0.0);
        v63 = OZScene::getNode(v61, v62);
        if (v63)
        {
          if (v64)
          {
            v87 = COERCE_DOUBLE(&v87);
            v88 = &v87;
            v89 = 0;
            (*(void (**)(void *, int8x8_t *, OZRenderParams *, double *, uint64_t))(*(_QWORD *)v64 + 536))(v64, v96, v20, &v87, 1);
            std::__list_imp<unsigned int>::clear(&v87);
          }
        }
      }
      else if (v45 == 1)
      {
        v48 = v94;
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v94 + 15240) + 448))(v94 + 15240, v96, &__src);
      }
      else
      {
        v48 = v94;
        if (v10)
          (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v94 + 14232) + 448))(v94 + 14232, v96, &__src);
      }
      (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v48 + 18040) + 448))(v48 + 18040, v96, &__src);
      goto LABEL_54;
    default:
      goto LABEL_54;
  }
}

void sub_1B2931F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,char a62)
{
  std::__list_imp<unsigned int>::clear(&a48);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&a62);
  _Unwind_Resume(a1);
}

double TXSequenceChannels::getGlowRadius(TXSequenceChannels *this, CMTime *a2, double a3)
{
  OZChannel *v5;
  double result;

  v5 = (OZChannel *)((char *)this + 15512);
  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 15512), 0, 1))
    return 0.0;
  OZChannel::getValueAsDouble(v5, a2, a3);
  return result;
}

void TXTextObject::getCacheHash(TXTextObject *this, OZRenderParams *a2)
{
  uint64_t v2;
  OZRenderParams *v3;
  CMTime *v4;
  uint64_t v5;
  int8x8_t *v6;
  int8x8_t *v7;
  int TextRenderQuality;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  float Size;
  int ValueAsInt;
  uint64_t v19;
  int8x8_t *Hash;
  int8x8_t *v21;
  int8x8_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  CMTime v26;
  double v27;
  double v28;
  CMTime v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  CMTime v32;
  int8x8_t v33[520];
  int8x8_t v34[520];
  int8x8_t v35[521];

  v2 = MEMORY[0x1E0C80A78](this);
  v4 = (CMTime *)v3;
  v5 = v2;
  v7 = v6;
  v35[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  TextRenderQuality = OZRenderParams::getTextRenderQuality(v3);
  v32 = *v4;
  v9 = TXTextObject::syncGlyph((TXTextObject *)v5, &v32, 0);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v5 + 264);
  if (v11)
  {
    v13 = *(_QWORD *)(v11 + 8);
    v12 = *(std::__shared_weak_count **)(v11 + 16);
    v30 = v13;
    v31 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  else
  {
    v13 = 0;
    v30 = 0;
    v31 = 0;
  }
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v35);
  PCHashWriteStream::writeValue(v35, TextRenderQuality);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  PCHashWriteStream::writeValue(v35, v16);
  PCHashWriteStream::writeValue(v35, *(_WORD *)(v9 + 8));
  PCHashWriteStream::writeValue(v35, *(_WORD *)(v5 + 120));
  v29 = *v4;
  Size = TXTextStyle::getSize((OZChannel *)v13, &v29, 0.0);
  PCHashWriteStream::writeValue(v35, Size);
  if (TextRenderQuality == 2)
  {
    v34[0] = 0;
    v33[0] = 0;
    v28 = 0.0;
    TXTextObject::getScale((TXTextObject *)v5, v4, (double *)v34, (double *)v33, &v28, 1, 1, 1, 0, 0, 1);
    PCHashWriteStream::writeValue(v35, *(double *)v34);
    PCHashWriteStream::writeValue(v35, *(double *)v33);
  }
  v27 = 0.0;
  v28 = 0.0;
  v26 = v32;
  TXTextObject::getFaceBlur((TXTextObject *)v5, &v26, &v28, &v27);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v13 + 6088), MEMORY[0x1E0CA2E68], 0.0);
  PCHashWriteStream::writeValue(v35, ValueAsInt);
  PCHashWriteStream::writeValue(v35, v28);
  PCHashWriteStream::writeValue(v35, v27);
  PCHashWriteStream::close(v35);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v34);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v33);
  v19 = v30;
  (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v30 + 7352) + 448))(v30 + 7352, v34, &v32);
  (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(_QWORD *)(v19 + 8560) + 448))(v19 + 8560, v33, &v32);
  Hash = PCHashWriteStream::getHash(v33);
  *v7 = *Hash;
  v7[1] = Hash[1];
  v21 = PCHashWriteStream::getHash(v34);
  PCHash128::operator+=((int *)v7, (int *)v21);
  v22 = PCHashWriteStream::getHash(v35);
  PCHash128::operator+=((int *)v7, (int *)v22);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v33);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v34);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v35);
  v23 = v31;
  if (v31)
  {
    v24 = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1B2932400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x10C8]);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x2108]);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::isOutlineEnabled(TXTextObject *this, CMTime *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  TXTextLayout *v8;
  uint64_t isStyleEnabledByOldSequenceBehavior;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  CMTime v14;
  CMTime v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *((_QWORD *)this + 33);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(std::__shared_weak_count **)(v3 + 16);
    v16 = v4;
    v17 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v16 = 0;
    v17 = 0;
  }
  v8 = (TXTextLayout *)*((_QWORD *)this + 68);
  if ((OZChannelBase::isEnabled((OZChannelBase *)(v4 + 22632), 0, 1) & 1) != 0
    || (v15 = *a2, (TXTextLayout::isStyleEnabledBySequenceBehavior(v8, 1011, &v15) & 1) != 0))
  {
    isStyleEnabledByOldSequenceBehavior = 1;
  }
  else
  {
    v14 = *a2;
    isStyleEnabledByOldSequenceBehavior = TXTextLayout::isStyleEnabledByOldSequenceBehavior(v8, 1011, &v14);
  }
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return isStyleEnabledByOldSequenceBehavior;
}

void sub_1B2932560(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void TXTextObject::getOutlineColor(TXTextObject *this, CMTime *a2, double a3, PCWorkingColor *a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int ValueAsInt;
  PCColor *v14;
  int *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double TypeOn;
  double v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  PCColor v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v7 = *((_QWORD *)this + 33);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(std::__shared_weak_count **)(v7 + 16);
    v38 = v8;
    v39 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v38 = 0;
    v39 = 0;
  }
  v12 = *((_QWORD *)this + 68);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v8 + 22760), MEMORY[0x1E0CA2E68], 0.0);
  PCColor::PCColor(&v37);
  if (ValueAsInt)
  {
    v15 = PCColor::WHITE(v14);
    v16 = *(_OWORD *)v15;
    v17 = *((_OWORD *)v15 + 2);
    *(_OWORD *)&v37.var0.var1[1] = *((_OWORD *)v15 + 1);
    *(_OWORD *)&v37.var0.var1[3] = v17;
    *(_OWORD *)&v37.var0.var0 = v16;
    PCCFRef<CGColorSpace *>::operator=(&v37.var1._obj, (CGColorSpace **)v15 + 6);
    v18 = v38;
  }
  else
  {
    v18 = v38;
    (*(void (**)(uint64_t, CMTime *, PCColor *))(*(_QWORD *)(v38 + 23016) + 832))(v38 + 23016, a2, &v37);
    if (OZChannelBase::isEnabled((OZChannelBase *)(v12 + 33552), 0, 1))
    {
      v36 = *a2;
      OZChannelColorNoAlpha::setColor((OZChannelColorNoAlpha *)(v12 + 33552), &v36, &v37, 1);
      v35 = *a2;
      HIDWORD(v19) = HIDWORD(v35.value);
      LODWORD(v19) = *((_DWORD *)this + 184);
      OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)(v12 + 33552), &v35, &v37, (double)v19);
    }
  }
  v34 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v18 + 26824), &v34, 0.0);
  v21 = *(double *)&v20;
  v33 = *a2;
  HIDWORD(v20) = HIDWORD(v33.value);
  LODWORD(v20) = *((_DWORD *)this + 184);
  v22 = (double)v20;
  OZChannel::getValueAsDouble((OZChannel *)(v12 + 26080), &v33, (double)v20);
  v24 = v23;
  OZChannel::getValueAsDouble((OZChannel *)(v12 + 34560), &v33, v22);
  v26 = v25;
  TypeOn = TXTextLayout::getTypeOn(*((TXTextLayout **)this + 68), *((_DWORD *)this + 24), a2);
  v32 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v12 + 19448), &v32, 0.0);
  *(float *)&v28 = v21 * (v24 * v26) * TypeOn * v28;
  PCColor::setAlpha(&v37, *(float *)&v28);
  PCWorkingColor::operator=((uint64_t)a4, &v37.var0.var0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v37.var1._obj);
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1B29327F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::isGlowEnabled(TXTextObject *this, CMTime *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  TXTextLayout *v8;
  uint64_t isStyleEnabledByOldSequenceBehavior;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  CMTime v14;
  CMTime v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *((_QWORD *)this + 33);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(std::__shared_weak_count **)(v3 + 16);
    v16 = v4;
    v17 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v16 = 0;
    v17 = 0;
  }
  v8 = (TXTextLayout *)*((_QWORD *)this + 68);
  if ((OZChannelBase::isEnabled((OZChannelBase *)(v4 + 31080), 0, 1) & 1) != 0
    || (v15 = *a2, (TXTextLayout::isStyleEnabledBySequenceBehavior(v8, 1016, &v15) & 1) != 0))
  {
    isStyleEnabledByOldSequenceBehavior = 1;
  }
  else
  {
    v14 = *a2;
    isStyleEnabledByOldSequenceBehavior = TXTextLayout::isStyleEnabledByOldSequenceBehavior(v8, 1016, &v14);
  }
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return isStyleEnabledByOldSequenceBehavior;
}

void sub_1B2932920(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void TXTextObject::getGlowColor(TXTextObject *this, CMTime *a2, double a3, PCWorkingColor *a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int ValueAsInt;
  PCColor *v14;
  int *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double TypeOn;
  double v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  PCColor v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v7 = *((_QWORD *)this + 33);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(std::__shared_weak_count **)(v7 + 16);
    v38 = v8;
    v39 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v38 = 0;
    v39 = 0;
  }
  v12 = *((_QWORD *)this + 68);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v8 + 31208), MEMORY[0x1E0CA2E68], 0.0);
  PCColor::PCColor(&v37);
  if (ValueAsInt)
  {
    v15 = PCColor::WHITE(v14);
    v16 = *(_OWORD *)v15;
    v17 = *((_OWORD *)v15 + 2);
    *(_OWORD *)&v37.var0.var1[1] = *((_OWORD *)v15 + 1);
    *(_OWORD *)&v37.var0.var1[3] = v17;
    *(_OWORD *)&v37.var0.var0 = v16;
    PCCFRef<CGColorSpace *>::operator=(&v37.var1._obj, (CGColorSpace **)v15 + 6);
    v18 = v38;
  }
  else
  {
    v18 = v38;
    (*(void (**)(uint64_t, CMTime *, PCColor *))(*(_QWORD *)(v38 + 31464) + 832))(v38 + 31464, a2, &v37);
    if (OZChannelBase::isEnabled((OZChannelBase *)(v12 + 38792), 0, 1))
    {
      v36 = *a2;
      OZChannelColorNoAlpha::setColor((OZChannelColorNoAlpha *)(v12 + 38792), &v36, &v37, 1);
      v35 = *a2;
      HIDWORD(v19) = HIDWORD(v35.value);
      LODWORD(v19) = *((_DWORD *)this + 184);
      OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)(v12 + 38792), &v35, &v37, (double)v19);
    }
  }
  v34 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v18 + 35272), &v34, 0.0);
  v21 = *(double *)&v20;
  v33 = *a2;
  HIDWORD(v20) = HIDWORD(v33.value);
  LODWORD(v20) = *((_DWORD *)this + 184);
  v22 = (double)v20;
  OZChannel::getValueAsDouble((OZChannel *)(v12 + 26080), &v33, (double)v20);
  v24 = v23;
  OZChannel::getValueAsDouble((OZChannel *)(v12 + 39800), &v33, v22);
  v26 = v25;
  TypeOn = TXTextLayout::getTypeOn(*((TXTextLayout **)this + 68), *((_DWORD *)this + 24), a2);
  v32 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v12 + 19448), &v32, 0.0);
  *(float *)&v28 = v21 * (v24 * v26) * TypeOn * v28;
  PCColor::setAlpha(&v37, *(float *)&v28);
  PCWorkingColor::operator=((uint64_t)a4, &v37.var0.var0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v37.var1._obj);
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1B2932BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::isFaceEnabled(TXTextObject *this, const CMTime *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  TXTextLayout *v8;
  uint64_t isStyleEnabledByOldSequenceBehavior;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  CMTime v14;
  CMTime v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *((_QWORD *)this + 33);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(std::__shared_weak_count **)(v3 + 16);
    v16 = v4;
    v17 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v16 = 0;
    v17 = 0;
  }
  v8 = (TXTextLayout *)*((_QWORD *)this + 68);
  if ((OZChannelBase::isEnabled((OZChannelBase *)(v4 + 5960), 0, 1) & 1) != 0
    || (v15 = *a2, (TXTextLayout::isStyleEnabledBySequenceBehavior(v8, 1007, &v15) & 1) != 0))
  {
    isStyleEnabledByOldSequenceBehavior = 1;
  }
  else
  {
    v14 = *a2;
    isStyleEnabledByOldSequenceBehavior = TXTextLayout::isStyleEnabledByOldSequenceBehavior(v8, 1007, &v14);
  }
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return isStyleEnabledByOldSequenceBehavior;
}

void sub_1B2932CE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::isFaceVisible(TXTextObject *a1, CMTime *a2, __n128 *a3, uint64_t a4, int a5, int a6)
{
  uint64_t result;
  float v13;

  result = TXTextObject::isFaceEnabled(a1, a2);
  if ((_DWORD)result)
  {
    if (a3)
    {
      TXTextObject::getFaceColor((uint64_t)a1, a2, a3, a4, a5, a6);
      v13 = a3->n128_f32[3];
      return v13 >= 0.00001 || v13 <= -0.00001;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void TXTextObject::getFaceColor(uint64_t a1, CMTime *a2, __n128 *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  int ValueAsInt;
  __int128 v19;
  __int128 v20;
  CGColorSpace *v21;
  int *v22;
  __int128 v23;
  __int128 v24;
  CGColorSpace *v25;
  float FaceOpacity;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD v30[3];
  CGColorSpace *v31;
  PCColor v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  v12 = *(_QWORD *)(a1 + 264);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(std::__shared_weak_count **)(v12 + 16);
    v33 = v13;
    v34 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  else
  {
    v13 = 0;
    v33 = 0;
    v34 = 0;
  }
  v17 = *(_QWORD *)(a1 + 544);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v13 + 6088), MEMORY[0x1E0CA2E68], 0.0);
  v19 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v32.var0.var0 = *(_OWORD *)a4;
  *(_OWORD *)&v32.var0.var1[1] = v19;
  v20 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)&v32.var0.var1[3] = v20;
  v21 = *(CGColorSpace **)(a4 + 48);
  v32.var1._obj = v21;
  if (v21)
    v21 = PCCFRefTraits<CGColorSpace *>::retain(v21);
  if (ValueAsInt)
  {
    v22 = PCColor::WHITE((PCColor *)v21);
    v23 = *(_OWORD *)v22;
    v24 = *((_OWORD *)v22 + 2);
    *(_OWORD *)&v32.var0.var1[1] = *((_OWORD *)v22 + 1);
    *(_OWORD *)&v32.var0.var1[3] = v24;
    *(_OWORD *)&v32.var0.var0 = v23;
    PCCFRef<CGColorSpace *>::operator=(&v32.var1._obj, (CGColorSpace **)v22 + 6);
  }
  else
  {
    LODWORD(v20) = *(_DWORD *)(a1 + 736);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, CMTime *, uint64_t, double))(*(_QWORD *)v17 + 728))(v30, v17, a2, a4, (double)(unint64_t)v20);
    *(_OWORD *)&v32.var0.var0 = v30[0];
    *(_OWORD *)&v32.var0.var1[1] = v30[1];
    *(_OWORD *)&v32.var0.var1[3] = v30[2];
    v25 = v31;
    if (v32.var1._obj && v32.var1._obj != v31)
    {
      PCCFRefTraits<CGColorSpace *>::release(v32.var1._obj);
      v25 = v31;
    }
    v32.var1._obj = v25;
    v31 = 0;
    PCCFRef<CGColorSpace *>::~PCCFRef(&v31);
  }
  FaceOpacity = TXTextObject::getFaceOpacity((TXTextObject *)a1, a2);
  PCColor::setAlpha(&v32, FaceOpacity);
  if (OZChannel::getValueAsInt((OZChannel *)(v17 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 3
    || OZChannel::getValueAsInt((OZChannel *)(v17 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 4)
  {
    TXTextObject::setWorkingColor(a1, a3, &v32, a5, a6);
  }
  else
  {
    PCWorkingColor::operator=((uint64_t)a3, &v32.var0.var0);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v32.var1._obj);
  v27 = v34;
  if (v34)
  {
    v28 = (unint64_t *)&v34->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1B2932FB0(_Unwind_Exception *a1)
{
  CGColorSpace **v1;
  CGColorSpace **v2;
  uint64_t v3;

  PCCFRef<CGColorSpace *>::~PCCFRef(v2);
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v3 - 96);
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::isDropShadowEnabled(TXTextObject *this, CMTime *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  TXTextLayout *v8;
  uint64_t isStyleEnabledBySequenceBehavior;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  CMTime v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3 = *((_QWORD *)this + 33);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(std::__shared_weak_count **)(v3 + 16);
    v15 = v4;
    v16 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v15 = 0;
    v16 = 0;
  }
  v8 = (TXTextLayout *)*((_QWORD *)this + 68);
  if ((OZChannelBase::isEnabled((OZChannelBase *)(v4 + 13848), 0, 1) & 1) != 0)
  {
    isStyleEnabledBySequenceBehavior = 1;
  }
  else
  {
    v14 = *a2;
    isStyleEnabledBySequenceBehavior = TXTextLayout::isStyleEnabledBySequenceBehavior(v8, 1020, &v14);
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return isStyleEnabledBySequenceBehavior;
}

void sub_1B29330CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

CGColorSpace **TXTextObject::getDropShadowColor(TXTextObject *this, CMTime *a2, double a3, PCWorkingColor *a4)
{
  CMTime v8;
  PCColor v9;

  PCColor::PCColor(&v9);
  v8 = *a2;
  TXTextObject::getDropShadowColor(this, &v8, *(double *)&v8.value, &v9);
  PCWorkingColor::operator=((uint64_t)a4, &v9.var0.var0);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v9.var1._obj);
}

void sub_1B2933158(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::isColorAnimated(TXTextObject *this, TXSequenceChannels *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  TXTextStyle *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int FillType;
  uint64_t ColorChannelID;
  uint64_t ColorChannel;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  void *v20;
  TXTextSequenceBehavior *v21;

  v3 = *((_QWORD *)this + 33);
  if (v3)
  {
    v5 = *(TXTextStyle **)(v3 + 8);
    v4 = *(std::__shared_weak_count **)(v3 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v8 = *((_QWORD *)this + 68);
  FillType = TXTextStyle::getFillType(v5, (int)a2);
  ColorChannelID = TXSequenceChannels::getColorChannelID(a2);
  ColorChannel = TXTextStyle::getColorChannel(v5, (int)a2);
  if (FillType)
    goto LABEL_8;
  v13 = ColorChannel;
  if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)ColorChannel + 552))(ColorChannel, 0) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v13 + 136), 0) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v13 + 288), 0) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v13 + 440), 0) & 1) != 0)
  {
LABEL_13:
    v12 = 1;
    goto LABEL_14;
  }
  v17 = v8 + 1200;
  v18 = *(_QWORD *)(v8 + 1208);
  if (v18 != v8 + 1200)
  {
    while (1)
    {
      v19 = *(const void **)(v18 + 16);
      if (v19)
      {
        if (v20)
        {
          if (((*(uint64_t (**)(void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 616))(v20, ColorChannelID, 0, 0) & 1) != 0)goto LABEL_13;
        }
        if (v21 && TXTextSequenceBehavior::isChannelEnabled(v21, ColorChannelID))
          goto LABEL_13;
      }
      v12 = 0;
      v18 = *(_QWORD *)(v18 + 8);
      if (v18 == v17)
        goto LABEL_14;
    }
  }
LABEL_8:
  v12 = 0;
LABEL_14:
  if (v4)
  {
    v14 = (unint64_t *)&v4->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v12;
}

void sub_1B2933350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TXTextObject::setWorkingColor(uint64_t a1, __n128 *a2, PCColor *this, int a4, int a5)
{
  __n128 *v10;

  v10 = (__n128 *)TXTextLayout::workingColorFromColor(*(TXTextLayout **)(a1 + 544), this, (uint64_t)a2, a5, a4);
  if (v10)
  {
    PCWorkingColor::operator=(a2, v10);
  }
  else
  {
    PCWorkingColor::operator=((uint64_t)a2, &this->var0.var0);
    TXTextLayout::cacheColorConversion(*(TXTextLayout **)(a1 + 544), this, (uint64_t)a2, a5, a4);
  }
  a2->n128_f32[3] = PCColor::getAlpha(this);
}

void TXTextObject::getFaceColor(TXTextObject *this, CMTime *a2, double a3, PCColorSpaceCache **a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CGColorSpace *v12;
  int v13;
  CGColorSpace *CGColorSpace;
  CGColorSpace *v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  PCColor v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v7 = *((_QWORD *)this + 33);
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 8);
    v8 = *(std::__shared_weak_count **)(v7 + 16);
    v21 = v9;
    v22 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v21 = 0;
    v22 = 0;
  }
  PCColor::PCColor(&v20);
  (*(void (**)(uint64_t, CMTime *, PCColor *))(*(_QWORD *)(v9 + 6344) + 832))(v9 + 6344, a2, &v20);
  v13 = PCColorSpaceCache::identifyColorSpace(a4[2], v12);
  CGColorSpace = PCColor::getCGColorSpace(&v20);
  v16 = PCColorSpaceCache::identifyColorSpace(CGColorSpace, v15);
  TXTextObject::getFaceColor((uint64_t)this, a2, (__n128 *)a4, (uint64_t)&v20, v13, v16);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v20.var1._obj);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1B293351C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double TXTextObject::getFaceOpacity(TXTextObject *this, CMTime *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double TypeOn;
  int isEnabled;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double v21;
  CMTime v23;
  CMTime v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v4 = *((_QWORD *)this + 33);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(std::__shared_weak_count **)(v4 + 16);
    v25 = v5;
    v26 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v5 = 0;
    v25 = 0;
    v26 = 0;
  }
  v9 = *((_QWORD *)this + 68);
  v24 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 10152), &v24, 0.0);
  v11 = v10;
  TypeOn = TXTextLayout::getTypeOn(*((TXTextLayout **)this + 68), *((_DWORD *)this + 24), a2);
  isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(v25 + 5960), 0, 1);
  LODWORD(v14) = *((_DWORD *)this + 184);
  v15 = (*(double (**)(uint64_t, uint64_t, uint64_t, CMTime *, double, double))(*(_QWORD *)v9 + 736))(v9, v9 + 26080, v9 + 29728, a2, v11, (double)v14);
  v23 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v9 + 19448), &v23, 0.0);
  v17 = v16;
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = 1.0;
  if (isEnabled)
    v21 = v11;
  return TypeOn * v21 * v15 * v17;
}

void sub_1B29336BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void TXSequenceChannels::getFaceBlur(TXSequenceChannels *this, CMTime *a2, double *a3, double *a4, double a5)
{
  uint64_t v10;
  uint64_t v11;

  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 4848), 0, 1))
  {
    *a3 = 0.0;
    v11 = 0;
    goto LABEL_7;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4984), a2, a5);
    *(_QWORD *)a3 = v10;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5136), a2, a5);
LABEL_7:
    *(_QWORD *)a4 = v11;
  }
}

unint64_t TXSequenceChannels::getOutlineWidth(TXSequenceChannels *this, CMTime *a2, double a3)
{
  OZChannel *v5;
  unint64_t result;

  v5 = (OZChannel *)((char *)this + 10272);
  result = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 10272), 0, 1);
  if ((_DWORD)result)
    return OZChannel::getValueAsInt(v5, a2, a3);
  return result;
}

void TXSequenceChannels::getOutlineBlur(TXSequenceChannels *this, CMTime *a2, double *a3, double *a4, double a5)
{
  uint64_t v10;
  uint64_t v11;

  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 9680), 0, 1))
  {
    *a3 = 0.0;
    v11 = 0;
    goto LABEL_7;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 9816), a2, a5);
    *(_QWORD *)a3 = v10;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 9968), a2, a5);
LABEL_7:
    *(_QWORD *)a4 = v11;
  }
}

void TXSequenceChannels::getGlowBlur(TXSequenceChannels *this, CMTime *a2, double *a3, double *a4, double a5)
{
  uint64_t v10;
  uint64_t v11;

  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 14920), 0, 1))
  {
    *a3 = 0.0;
    v11 = 0;
    goto LABEL_7;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 15056), a2, a5);
    *(_QWORD *)a3 = v10;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 15208), a2, a5);
LABEL_7:
    *(_QWORD *)a4 = v11;
  }
}

void TXTextObject::getGlowRadius(TXTextObject *this, CMTime *a2, double *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CMTime v17;
  CMTime v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v6 = *((_QWORD *)this + 33);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(std::__shared_weak_count **)(v6 + 16);
    v19 = v7;
    v20 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v19 = 0;
    v20 = 0;
  }
  v11 = *((_QWORD *)this + 68);
  v18 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v7 + 36016), &v18, 0.0);
  v13 = *(double *)&v12;
  v17 = *a2;
  HIDWORD(v12) = HIDWORD(v17.value);
  LODWORD(v12) = *((_DWORD *)this + 184);
  *a3 = v13 + TXSequenceChannels::getGlowRadius((TXSequenceChannels *)(v11 + 25032), &v17, (double)v12);
  v14 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1B2933A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void TXSequenceChannels::getDropShadowBlur(TXSequenceChannels *this, CMTime *a2, double *a3, double *a4, double a5)
{
  uint64_t v10;
  uint64_t v11;

  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 21304), 0, 1))
  {
    *a3 = 0.0;
    v11 = 0;
    goto LABEL_7;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 21440), a2, a5);
    *(_QWORD *)a3 = v10;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 21592), a2, a5);
LABEL_7:
    *(_QWORD *)a4 = v11;
  }
}

double TXSequenceChannels::getDropShadowDistance(TXSequenceChannels *this, CMTime *a2, double a3)
{
  OZChannel *v5;
  double result;

  v5 = (OZChannel *)((char *)this + 22336);
  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 22336), 0, 1))
    return 0.0;
  OZChannel::getValueAsDouble(v5, a2, a3);
  return result;
}

double TXSequenceChannels::getDropShadowAngle(TXSequenceChannels *this, CMTime *a2, double a3)
{
  OZChannel *v5;
  double result;

  v5 = (OZChannel *)((char *)this + 22488);
  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 22488), 0, 1))
    return 0.0;
  OZChannel::getValueAsDouble(v5, a2, a3);
  return result;
}

void TXTextObject::getDropShadowColor(TXTextObject *this, CMTime *a2, double a3, PCColor *a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  PCColor *ValueAsInt;
  int *v14;
  __int128 v15;
  __int128 v16;
  OZChannelColorNoAlpha *v17;
  unint64_t v18;
  float DropShadowOpacity;
  __n128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  CMTime v24;
  CMTime v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v7 = *((_QWORD *)this + 33);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(std::__shared_weak_count **)(v7 + 16);
    v26 = v8;
    v27 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v26 = 0;
    v27 = 0;
  }
  v12 = *((_QWORD *)this + 68);
  ValueAsInt = (PCColor *)OZChannel::getValueAsInt((OZChannel *)(v8 + 13976), MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)ValueAsInt)
  {
    v14 = PCColor::WHITE(ValueAsInt);
    v15 = *(_OWORD *)v14;
    v16 = *((_OWORD *)v14 + 2);
    *(_OWORD *)&a4->var0.var1[1] = *((_OWORD *)v14 + 1);
    *(_OWORD *)&a4->var0.var1[3] = v16;
    *(_OWORD *)&a4->var0.var0 = v15;
    PCCFRef<CGColorSpace *>::operator=(&a4->var1._obj, (CGColorSpace **)v14 + 6);
  }
  else
  {
    (*(void (**)(uint64_t, CMTime *, PCColor *))(*(_QWORD *)(v26 + 14232) + 832))(v26 + 14232, a2, a4);
    v17 = (OZChannelColorNoAlpha *)(v12 + 45176);
    if (OZChannelBase::isEnabled((OZChannelBase *)v17, 0, 1))
    {
      v25 = *a2;
      OZChannelColorNoAlpha::setColor(v17, &v25, a4, 1);
      v24 = *a2;
      HIDWORD(v18) = HIDWORD(v24.value);
      LODWORD(v18) = *((_DWORD *)this + 184);
      OZChannelColorNoAlpha::getColor(v17, &v24, a4, (double)v18);
    }
  }
  DropShadowOpacity = TXTextObject::getDropShadowOpacity(this, a2);
  v20.n128_f64[0] = PCColor::setAlpha(a4, DropShadowOpacity);
  v21 = v27;
  if (v27)
  {
    v22 = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v20);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1B2933CFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

double TXTextObject::getDropShadowOpacity(TXTextObject *this, CMTime *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  double v10;
  double TypeOn;
  double v12;
  double v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CMTime v18;
  CMTime v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = *((_QWORD *)this + 33);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(std::__shared_weak_count **)(v4 + 16);
    v20 = v5;
    v21 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v5 = 0;
    v20 = 0;
    v21 = 0;
  }
  v19 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 18040), &v19, 0.0);
  v9 = *((_QWORD *)this + 68);
  v10 = (*(double (**)(uint64_t, uint64_t, uint64_t, CMTime *))(*(_QWORD *)v9 + 736))(v9, v9 + 26080, v9 + 46184, a2);
  TypeOn = TXTextLayout::getTypeOn(*((TXTextLayout **)this + 68), *((_DWORD *)this + 24), a2);
  v18 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v9 + 19448), &v18, 0.0);
  v13 = v12;
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v10 * TypeOn * v13;
}

void sub_1B2933E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL TXTextObject::isDropShadowFixedSource(TXTextObject *this, const CMTime *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BOOL8 v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *((_QWORD *)this + 33);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v3)
  {
    v7 = OZChannel::getValueAsInt((OZChannel *)(v3 + 19528), MEMORY[0x1E0CA2E68], 0.0) != 0;
    if (!v4)
      return v7;
  }
  else
  {
    v7 = 0;
    if (!v4)
      return v7;
  }
  v8 = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B2933F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t TXCachedGlyphRender::TXCachedGlyphRender(uint64_t a1, uint64_t a2, _QWORD *a3, const OZRenderParams *a4, int a5)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)(a1 + 1504) = 0;
  *(_QWORD *)(a1 + 1496) = &off_1E65EB048;
  *(_BYTE *)(a1 + 1512) = 1;
  LiImageSource::LiImageSource((LiImageSource *)a1, (uint64_t *)&off_1E64FEB70);
  *(_QWORD *)a1 = &off_1E64FEA88;
  *(_QWORD *)(a1 + 1496) = &unk_1E64FEB50;
  *(_QWORD *)(a1 + 16) = a2;
  v10 = a3[1];
  *(_QWORD *)(a1 + 24) = *a3;
  *(_QWORD *)(a1 + 32) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 40), a4);
  *(_DWORD *)(a1 + 1464) = a5;
  *(_QWORD *)(a1 + 1472) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 1480));
  return a1;
}

void sub_1B293400C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  OZRenderParams *v3;
  uint64_t v4;

  OZRenderParams::~OZRenderParams(v3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v2);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E64FEB70);
  *(_QWORD *)(v1 + 1496) = v4 + 16;
  *(_BYTE *)(v1 + 1512) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1504));
  _Unwind_Resume(a1);
}

uint64_t TXCachedGlyphRender::filteredEdges(TXCachedGlyphRender *this)
{
  return 1;
}

uint64_t TXCachedGlyphRender::getBoundary(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  __int128 v3;

  v3 = *(_OWORD *)(*(_QWORD *)(a1 + 24) + 440);
  *a3 = *(_OWORD *)(*(_QWORD *)(a1 + 24) + 424);
  a3[1] = v3;
  return 1;
}

CGColorSpace **TXCachedGlyphRender::getHelium@<X0>(TXCachedGlyphRender *this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  return TXCachedGlyphRender::getHelium(this, a2, 0, 1, a3);
}

CGColorSpace **TXCachedGlyphRender::getHelium@<X0>(TXCachedGlyphRender *this@<X0>, LiAgent *a2@<X1>, float *a3@<X2>, char a4@<W3>, HGNode **a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t i;
  uint64_t HeliumRenderer;
  int v15;
  char *v16;
  char *v17;
  TXTextObject *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  HGNode *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unsigned __int8 v45[8];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  CGColorSpace *v49[2];
  uint64_t v50;
  std::__shared_weak_count *v51;
  HGNode *v52;
  HGNode *v53;
  std::__shared_weak_count *v54;
  unsigned __int8 isColorAnimated;
  PCColor v56;
  CGColorSpace *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v97 = 0x3FF0000000000000;
  v94 = 0x3FF0000000000000;
  v91 = 0x3FF0000000000000;
  v88 = 0x3FF0000000000000;
  v89 = 0u;
  v90 = 0u;
  v92 = 0u;
  v93 = 0u;
  v95 = 0u;
  v96 = 0u;
  v77 = 0x3FF0000000000000;
  v74 = 0x3FF0000000000000;
  v71 = 0x3FF0000000000000;
  v67 = 0x3FF0000000000000;
  v68 = 0x3FF0000000000000;
  v69 = 0u;
  v70 = 0u;
  v72 = 0u;
  v73 = 0u;
  v75 = 0u;
  v76 = 0u;
  v64 = 0x3FF0000000000000;
  v61 = 0x3FF0000000000000;
  v58 = 0x3FF0000000000000;
  v59 = 0u;
  v60 = 0u;
  v62 = 0u;
  v63 = 0u;
  v65 = 0u;
  v66 = 0u;
  v87 = 0x3FF0000000000000;
  v84 = 0x3FF0000000000000;
  v81 = 0x3FF0000000000000;
  v78 = 0x3FF0000000000000;
  v80 = 0u;
  v79 = 0u;
  v82 = 0u;
  v83 = 0u;
  v86 = 0u;
  v85 = 0u;
  v10 = (uint64_t *)*((_QWORD *)a2 + 20);
  if (v10 != &v68)
  {
    v11 = 0;
    v12 = &v68;
    do
    {
      for (i = 0; i != 4; ++i)
        v12[i] = v10[i];
      ++v11;
      v12 += 4;
      v10 += 4;
    }
    while (v11 != 4);
  }
  HeliumRenderer = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)HeliumRenderer + 128))(HeliumRenderer, 43);
  *a5 = 0;
  PCColor::PCColor(&v56);
  v16 = (char *)this + 40;
  v17 = (char *)this + 24;
  switch(*((_DWORD *)this + 366))
  {
    case 0:
      v18 = *(TXTextObject **)v17;
      v19 = *(_QWORD *)(*(_QWORD *)v17 + 264);
      if (v19)
      {
        v21 = *(_QWORD *)(v19 + 8);
        v20 = *(std::__shared_weak_count **)(v19 + 16);
        v53 = (HGNode *)v21;
        v54 = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v23 = __ldxr(p_shared_owners);
          while (__stxr(v23 + 1, p_shared_owners));
          v18 = *(TXTextObject **)v17;
        }
      }
      else
      {
        v21 = 0;
        v53 = 0;
        v54 = 0;
      }
      isColorAnimated = TXTextObject::isColorAnimated(v18, 0);
      (*(void (**)(uint64_t, char *, PCColor *))(*(_QWORD *)(v21 + 6344) + 832))(v21 + 6344, (char *)this + 40, &v56);
      v33 = *((_QWORD *)this + 2);
      v50 = 0;
      v51 = 0;
      v45[0] = isColorAnimated;
      v46 = *(_OWORD *)&v56.var0.var0;
      v47 = *(_OWORD *)&v56.var0.var1[1];
      v48 = *(_OWORD *)&v56.var0.var1[3];
      v49[0] = v56.var1._obj;
      if (v56.var1._obj)
        PCCFRefTraits<CGColorSpace *>::retain(v56.var1._obj);
      v49[1] = v57;
      TXTextLayout::buildHGNodeForFace(v33, (uint64_t)v17, (uint64_t)v16, (uint64_t)a2, (uint64_t)&v50, 0, 0, (uint64_t)&v78, (__int128 *)&v88, (uint64_t)&v68, (uint64_t)&v58, v45, (uint64_t)a3, v15 == 1, a4);
      if (v52)
      {
        *a5 = v52;
        v52 = 0;
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(v49);
      v34 = v51;
      if (v51)
      {
        v35 = (unint64_t *)&v51->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v26 = v54;
      if (v54)
      {
        v37 = (unint64_t *)&v54->__shared_owners_;
        do
          v28 = __ldaxr(v37);
        while (__stlxr(v28 - 1, v37));
        goto LABEL_45;
      }
      break;
    case 1:
      v25 = *((_QWORD *)this + 2);
      v43 = 0;
      v44 = 0;
      TXTextLayout::buildHGNodeForOutline(v25, (uint64_t)this + 24, (uint64_t)this + 40, (uint64_t)a2, (uint64_t)&v43, 0, 0, (uint64_t)&v78, (__int128 *)&v88, &v68, (uint64_t)&v58, *((_QWORD *)this + 186), (uint64_t)a3, v15 == 1);
      if (v53)
      {
        *a5 = v53;
        v53 = 0;
      }
      v26 = v44;
      if (v44)
      {
        v27 = (unint64_t *)&v44->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        goto LABEL_45;
      }
      break;
    case 2:
      v29 = *((_QWORD *)this + 2);
      v41 = 0;
      v42 = 0;
      TXTextLayout::buildHGNodeForGlow(v29, (uint64_t)this + 24, (uint64_t)this + 40, (uint64_t)a2, (uint64_t)&v41, 0, 0, (uint64_t)&v78, (__int128 *)&v88, (__int128 *)&v68, (uint64_t)&v58, a3, v15 == 1);
      if (v53)
      {
        *a5 = v53;
        v53 = 0;
      }
      v26 = v42;
      if (v42)
      {
        v30 = (unint64_t *)&v42->__shared_owners_;
        do
          v28 = __ldaxr(v30);
        while (__stlxr(v28 - 1, v30));
        goto LABEL_45;
      }
      break;
    case 3:
      v31 = *((_QWORD *)this + 2);
      v39 = 0;
      v40 = 0;
      TXTextLayout::buildHGNodeForDropShadow(v31, (uint64_t)this + 24, (uint64_t)this + 40, (uint64_t)a2, (uint64_t)&v39, 0, 0, (uint64_t)&v78, (__int128 *)&v88, (__int128 *)&v68, (double *)&v58, a3, v15 == 1, a4);
      if (v53)
      {
        *a5 = v53;
        v53 = 0;
      }
      v26 = v40;
      if (v40)
      {
        v32 = (unint64_t *)&v40->__shared_owners_;
        do
          v28 = __ldaxr(v32);
        while (__stlxr(v28 - 1, v32));
LABEL_45:
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      break;
    default:
      v24 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v24);
      if (v24)
        *a5 = v24;
      break;
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v56.var1._obj);
}

void sub_1B2934540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,CGColorSpace *a42)
{
  uint64_t *v42;
  uint64_t v44;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  v44 = *v42;
  PCCFRef<CGColorSpace *>::~PCCFRef(&a42);
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
  _Unwind_Resume(a1);
}

uint64_t TXCachedGlyphRender::pixelTransformSupport(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 144))
    return 0;
  else
    return 6;
}

uint64_t TXCachedGlyphRender::estimateRenderMemory()
{
  return 0;
}

uint64_t TXTextObjectRender::TXTextObjectRender(uint64_t a1, _QWORD *a2, const OZRenderParams *a3, uint64_t a4)
{
  CGColorSpace *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)(a1 + 1544) = &off_1E65EB048;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_BYTE *)(a1 + 1560) = 1;
  LiImageSource::LiImageSource((LiImageSource *)a1, (uint64_t *)&off_1E64FEC98);
  *(_QWORD *)a1 = &off_1E64FEBB0;
  *(_QWORD *)(a1 + 1544) = &unk_1E64FEC78;
  *(_WORD *)(a1 + 13) = 0;
  *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 32), a3);
  *(_OWORD *)(a1 + 1456) = *(_OWORD *)a4;
  v8 = *(CGColorSpace **)(a4 + 16);
  *(_QWORD *)(a1 + 1472) = v8;
  if (v8)
    PCCFRefTraits<CGColorSpace *>::retain(v8);
  v9 = *(_QWORD *)(a4 + 24);
  *(_DWORD *)(a1 + 1488) = *(_DWORD *)(a4 + 32);
  *(_QWORD *)(a1 + 1480) = v9;
  v10 = a2[1];
  *(_QWORD *)(a1 + 1496) = *a2;
  *(_QWORD *)(a1 + 1504) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 1520) = 0x3FF0000000000000;
  return a1;
}

void sub_1B29346F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  OZRenderParams *v2;
  uint64_t v3;

  OZRenderParams::~OZRenderParams(v2);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E64FEC98);
  *(_QWORD *)(v1 + 1544) = v3 + 16;
  *(_BYTE *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));
  _Unwind_Resume(a1);
}

void TXTextObjectRender::~TXTextObjectRender(CGColorSpace **this, const PCString *a2)
{
  __CFString *var0;

  var0 = a2->var0;
  *this = (CGColorSpace *)a2->var0;
  *(CGColorSpace **)((char *)this + var0[-1].info) = (CGColorSpace *)a2[5].var0;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 187));
  PCCFRef<CGColorSpace *>::~PCCFRef(this + 184);
  OZRenderParams::~OZRenderParams((OZRenderParams *)(this + 4));
  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 1);
}

void TXTextObjectRender::~TXTextObjectRender(CGColorSpace **this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1544) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 1544) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'TXTextObjectRender::~TXTextObjectRender(TXTextObjectRender *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1544) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));
}

{
  TXTextObjectRender::~TXTextObjectRender((CGColorSpace **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t TXTextObjectRender::filteredEdges(TXTextObjectRender *this)
{
  return 1;
}

void TXTextObjectRender::getHeliumBestMode(TXTextObjectRender *this, LiAgent *a2)
{
  PCException *exception;
  PCString v3;
  PCString v4;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v4, "not implemented yet");
  PCString::PCString(&v3, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Text/TXTextObject.cpp");
  PCException::PCException(exception, &v4, &v3, 5001);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2934910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

CGColorSpace *TXTextObjectRender::getHelium@<X0>(TXTextObjectRender *this@<X0>, LiAgent *a2@<X1>, HGCrop **a3@<X8>)
{
  OZRenderParams *v6;
  TXTextObjectRender *TextRenderQuality;
  LiAgent *v8;
  uint64_t v9;
  double v10;
  __int128 v11;
  double v12;
  __int128 v13;
  __int128 v14;
  const void *HeliumRenderer;
  HGGPURenderer *v21;
  HGGPURenderer *v22;
  HGBitmap *v23;
  HGBitmapLoader *v24;
  double v25;
  double v26;
  CGColorSpace *v27;
  const void *v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  CGColorSpace *obj;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  __n128 v40;
  _BOOL4 v41;
  unint64_t *v42;
  unint64_t v43;
  CGColorSpace *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void **HostApplicationDelegate;
  double v52;
  double v53;
  BOOL isVerticalLayout;
  double v55;
  double v56;
  HGXForm *v57;
  uint64_t RequestedColorDescription;
  CGColorSpace *v59;
  uint64_t v60;
  CGColorSpace *v61;
  double v62;
  double v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  HGCrop *v72;
  CGColorSpace *result;
  __int128 v74;
  CGColorSpace *v75;
  FxColorDescription v76;
  double v77;
  __int128 v78;
  __int128 v79;
  double v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  double v86;
  HGTransform *v87;
  CGColorSpace *v88;
  char v89;
  __int128 v90;
  __int128 v91;
  double v92;
  __int128 v93;
  __int128 v94;
  double v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  double v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v6 = (TXTextObjectRender *)((char *)this + 32);
  if (LiRenderingTechnology::getSharpText((TXTextObjectRender *)((char *)this + 1348)))
  {
    TextRenderQuality = (TXTextObjectRender *)OZRenderParams::getTextRenderQuality(v6);
    if ((_DWORD)TextRenderQuality == 6 && !*(_BYTE *)(*((_QWORD *)this + 187) + 568) && !*((_BYTE *)this + 26))
      TXTextObjectRender::getHeliumBestMode(TextRenderQuality, v8);
  }
  v9 = *((_QWORD *)a2 + 20);
  v10 = *(double *)v9;
  v11 = *(_OWORD *)(v9 + 24);
  v116 = *(_OWORD *)(v9 + 8);
  v117 = v11;
  v12 = *(double *)(v9 + 40);
  v13 = *(_OWORD *)(v9 + 96);
  v113 = *(_OWORD *)(v9 + 80);
  v114 = v13;
  v115 = *(_OWORD *)(v9 + 112);
  v14 = *(_OWORD *)(v9 + 64);
  v111 = *(_OWORD *)(v9 + 48);
  v112 = v14;
  v93 = v116;
  v94 = v117;
  v92 = v10;
  v95 = v12;
  v98 = v113;
  v99 = v13;
  v100 = v115;
  v96 = v111;
  v97 = v14;
  v90 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v74 = _Q0;
  v91 = _Q0;
  v89 = 0;
  v88 = 0;
  HeliumRenderer = (const void *)LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
  if (HeliumRenderer
  {
    TXTextObject::getMetalTexture(*((TXTextObject **)this + 187), (OZRenderState *)v6, *((_BYTE *)this + 14), (float64x2_t *)&v92, v22, &v90, (HGMetalContext **)&v101, *((double *)this + 2));
    v23 = (HGBitmap *)v101;
    v24 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
    HGBitmapLoader::HGBitmapLoader(v24, v23);
    if (v88 == v24)
    {
      if (v24)
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v24 + 24))(v24);
    }
    else
    {
      v88 = v24;
    }
    if (v23)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v23 + 24))(v23);
  }
  else if (*(_DWORD *)(*(_QWORD *)HGRenderJob::GetRenderNodeList((HGRenderJob *)v6) + 8))
  {
    if (*((_BYTE *)this + 14))
      v25 = *((double *)this + 2);
    else
      v25 = 0.0;
    TXTextObject::getTexture(*((_QWORD *)this + 187), (OZRenderState *)v6, *((_BYTE *)this + 14) != 0, (uint64_t)&v92, (uint64_t)&v90, (uint64_t)&v89, &v101, v25);
    v27 = (CGColorSpace *)v101;
    if (*(double *)&v101 == 0.0)
    {
      *a3 = 0;
    }
    else
    {
      v28 = (const void *)LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
      if (v28)
      else
        v29 = 0;
      v77 = *(double *)&v101;
      *(_QWORD *)&v78 = v102;
      if ((_QWORD)v102)
      {
        v30 = (unint64_t *)(v102 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v87 = 0;
      PGHelium::createTextureNode(&v77, (uint64_t)v29, (unsigned int *)&v87, 1, 0, &v76._pcColorDesc._colorSpaceRef._obj);
      obj = v76._pcColorDesc._colorSpaceRef._obj;
      if (v88 == v76._pcColorDesc._colorSpaceRef._obj)
      {
        if (v88)
          (*(void (**)(void))(*(_QWORD *)v88 + 24))();
      }
      else
      {
        if (v88)
        {
          (*(void (**)(void))(*(_QWORD *)v88 + 24))();
          obj = v76._pcColorDesc._colorSpaceRef._obj;
        }
        v88 = obj;
        v76._pcColorDesc._colorSpaceRef._obj = 0;
      }
      v33 = (std::__shared_weak_count *)v78;
      if ((_QWORD)v78)
      {
        v34 = (unint64_t *)(v78 + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    v36 = (std::__shared_weak_count *)v102;
    if (!(_QWORD)v102)
      goto LABEL_39;
    v37 = (unint64_t *)(v102 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      if (!v27)
        goto LABEL_113;
    }
    else
    {
LABEL_39:
      if (!v27)
        goto LABEL_113;
    }
  }
  else
  {
    if (*((_BYTE *)this + 14))
      v26 = *((double *)this + 2);
    else
      v26 = 0.0;
    TXTextObject::getBitmap((FxColorDescription *)v6, *((TXTextObject **)this + 187), *((_BYTE *)this + 14) != 0, (uint64_t)&v92, (uint64_t)&v90, &v101, v26);
    v40.n128_u64[0] = *((_QWORD *)&v91 + 1);
    v39.n128_u64[0] = v91;
    v41 = *((double *)&v91 + 1) < 0.0 || *(double *)&v91 < 0.0;
    if (v41)
    {
      *a3 = 0;
    }
    else
    {
      v77 = *(double *)&v101;
      *(_QWORD *)&v78 = v102;
      if ((_QWORD)v102)
      {
        v42 = (unint64_t *)(v102 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v87 = 0;
      PGHelium::createBitmapNode(&v77, (unsigned int *)&v87, 1, 0, &v76._pcColorDesc._colorSpaceRef._obj);
      v44 = v76._pcColorDesc._colorSpaceRef._obj;
      if (v88 == v76._pcColorDesc._colorSpaceRef._obj)
      {
        if (v88)
          (*(void (**)(void))(*(_QWORD *)v88 + 24))();
      }
      else
      {
        if (v88)
        {
          (*(void (**)(void))(*(_QWORD *)v88 + 24))();
          v44 = v76._pcColorDesc._colorSpaceRef._obj;
        }
        v88 = v44;
        v76._pcColorDesc._colorSpaceRef._obj = 0;
      }
      v45 = (std::__shared_weak_count *)v78;
      if ((_QWORD)v78)
      {
        v46 = (unint64_t *)(v78 + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
    }
    v48 = (std::__shared_weak_count *)v102;
    if (!(_QWORD)v102)
      goto LABEL_71;
    v49 = (unint64_t *)(v102 + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128))v48->__on_zero_shared)(v48, v39, v40);
      std::__shared_weak_count::__release_weak(v48);
      if (v41)
        goto LABEL_113;
    }
    else
    {
LABEL_71:
      if (v41)
        goto LABEL_113;
    }
  }
  v86 = 1.0;
  v83 = 0x3FF0000000000000;
  v80 = 1.0;
  v77 = 1.0;
  v78 = 0u;
  v79 = 0u;
  v81 = 0u;
  v82 = 0u;
  v84 = 0u;
  v85 = 0u;
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  if (OZHostApplicationDelegateHandler::wantsToImproveQualityOfDraftQualityText(HostApplicationDelegate)
    && (v10 != v92 || v12 != v95))
  {
    v52 = v10 / v92;
    v53 = v12 / v95;
    if (v10 / v92 != 1.0)
    {
      v77 = v52 * v77;
      *((double *)&v79 + 1) = v52 * *((double *)&v79 + 1);
      *(double *)&v82 = v52 * *(double *)&v82;
      *((double *)&v84 + 1) = v52 * *((double *)&v84 + 1);
    }
    if (v53 != 1.0)
    {
      *(double *)&v78 = v53 * *(double *)&v78;
      v80 = v53 * v80;
      *((double *)&v82 + 1) = v53 * *((double *)&v82 + 1);
      *(double *)&v85 = v53 * *(double *)&v85;
    }
  }
  isVerticalLayout = TXTextLayout::isVerticalLayout(*(TXTextLayout **)(*((_QWORD *)this + 187) + 544));
  *(double *)&v78 = -*(double *)&v78;
  v80 = -v80;
  *((double *)&v82 + 1) = -*((double *)&v82 + 1);
  *(double *)&v85 = -*(double *)&v85;
  if (isVerticalLayout)
  {
    TXTextObject::getImageBounds(*((TXTextObject **)this + 187), (const OZRenderState *)v6, (uint64_t)&v101);
    v76._pcColorDesc._colorSpaceRef._obj = 0;
    *(_QWORD *)&v76._pcColorDesc._dynamicRange = 0;
    *(_OWORD *)&v76._pcColorDesc._toneMapMethod._gain = v74;
    PCMatrix44Tmpl<double>::transformRect<double>(&v92, (double *)&v101, (uint64_t)&v76);
    v55 = -2.0 - (*(double *)&v76._pcColorDesc._dynamicRange + *(double *)&v76._isPremultiplied);
    if (v55 != 0.0)
    {
      *(double *)&v79 = *(double *)&v79 + v55 * *(double *)&v78;
      *((double *)&v81 + 1) = *((double *)&v81 + 1) + v55 * v80;
      *(double *)&v84 = *(double *)&v84 + v55 * *((double *)&v82 + 1);
      v86 = v86 + v55 * *(double *)&v85;
    }
    v56 = *(double *)&v76._pcColorDesc._colorSpaceRef._obj
        + *(double *)&v76._pcColorDesc._toneMapMethod._gain
        - (*(double *)&v90
         + *(double *)&v91)
        + 0.0;
    if (v56 != 0.0)
    {
      *(double *)&v79 = *(double *)&v79 + v56 * v77;
      *((double *)&v81 + 1) = *((double *)&v81 + 1) + v56 * *((double *)&v79 + 1);
      *(double *)&v84 = *(double *)&v84 + v56 * *(double *)&v82;
      v86 = v86 + v56 * *((double *)&v84 + 1);
    }
  }
  else
  {
    PCMatrix44Tmpl<double>::rightTranslate(&v77, *(double *)&v90, -(*((double *)&v90 + 1) + *((double *)&v91 + 1)), 0.0);
  }
  v57 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v57);
  (*(void (**)(HGXForm *, _QWORD, CGColorSpace *))(*(_QWORD *)v57 + 120))(v57, 0, v88);
  PGHelium::convertPCMatrix44((__int128 *)&v77, &v87);
  (*(void (**)(HGXForm *, HGTransform *))(*(_QWORD *)v57 + 576))(v57, v87);
  if (v88 != (CGColorSpace *)v57)
  {
    if (v88)
      (*(void (**)(void))(*(_QWORD *)v88 + 24))();
    v88 = (CGColorSpace *)v57;
    (*(void (**)(HGXForm *))(*(_QWORD *)v57 + 16))(v57);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 187) + 568))
  {
    RequestedColorDescription = LiAgent::getRequestedColorDescription(a2);
    v59 = *(CGColorSpace **)RequestedColorDescription;
    v101 = (uint64_t)v59;
    if (v59)
      PCCFRefTraits<CGColorSpace *>::retain(v59);
    v60 = *(_QWORD *)(RequestedColorDescription + 8);
    DWORD2(v102) = *(_DWORD *)(RequestedColorDescription + 16);
    *(_QWORD *)&v102 = v60;
    LOBYTE(v103) = *(_BYTE *)(RequestedColorDescription + 24);
    FxColorDescription::FxColorDescription((uint64_t)&v76, (uint64_t)&v101, 0);
    FxApplyColorConform((uint64_t *)&v88, &v76, (FxColorDescription *)&v101, (uint64_t *)&v75);
    v61 = v75;
    if (v88 == v75)
    {
      if (v88)
        (*(void (**)(void))(*(_QWORD *)v88 + 24))();
    }
    else
    {
      if (v88)
      {
        (*(void (**)(void))(*(_QWORD *)v88 + 24))();
        v61 = v75;
      }
      v88 = v61;
    }
    PCCFRef<CGColorSpace *>::~PCCFRef(&v76._pcColorDesc._colorSpaceRef._obj);
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v101);
  }
  v62 = *((double *)this + 190);
  if (v62 < 1.0)
  {
    v110 = 1.0;
    v107 = 0x3FF0000000000000;
    v104 = 0x3FF0000000000000;
    *(double *)&v101 = 1.0;
    v102 = 0u;
    v103 = 0u;
    v105 = 0u;
    v106 = 0u;
    v108 = 0u;
    v109 = 0u;
    v63 = -((*((double *)&v90 + 1) + *((double *)&v91 + 1) - *((double *)&v90 + 1)) * (1.0 - v62));
    if (v63 != 0.0)
    {
      *(double *)&v103 = v63 * 0.0 + 0.0;
      *((double *)&v105 + 1) = v63 + 0.0;
      *(double *)&v108 = *(double *)&v103;
      v110 = v63 * 0.0 + 1.0;
    }
    LiAgent::makeHeliumXForm((uint64_t)a2, (uint64_t)&v101, (uint64_t *)&v88, &v76);
    v64 = *(double *)&v90;
    v65 = *((double *)&v90 + 1);
    v66 = *(double *)&v90 + *(double *)&v91;
    v67 = *((double *)&v90 + 1) + *((double *)&v91 + 1);
    v69 = HGRectMake4f(v68, v64, v65, v66, v67);
    v71 = v70;
    v72 = (HGCrop *)HGObject::operator new(0x1A0uLL);
    HGCrop::HGCrop(v72);
    (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v72 + 96))(v72, 0, (float)(int)v69, (float)SHIDWORD(v69), (float)(int)v71, (float)SHIDWORD(v71));
    (*(void (**)(HGCrop *, _QWORD, CGColorSpace *))(*(_QWORD *)v72 + 120))(v72, 0, v76._pcColorDesc._colorSpaceRef._obj);
    if (v76._pcColorDesc._colorSpaceRef._obj)
      (*(void (**)(CGColorSpace *))(*(_QWORD *)v76._pcColorDesc._colorSpaceRef._obj + 24))(v76._pcColorDesc._colorSpaceRef._obj);
    goto LABEL_106;
  }
  v72 = v88;
  if (v88)
  {
    (*(void (**)(CGColorSpace *))(*(_QWORD *)v88 + 16))(v88);
LABEL_106:
    if (v88 == v72)
    {
      (*(void (**)(HGCrop *))(*(_QWORD *)v72 + 24))(v72);
      v72 = v88;
    }
    else if (v88)
    {
      (*(void (**)(void))(*(_QWORD *)v88 + 24))();
    }
  }
  *a3 = v72;
  v88 = 0;
  if (v87)
    (*(void (**)(HGTransform *))(*(_QWORD *)v87 + 24))(v87);
  (*(void (**)(HGXForm *))(*(_QWORD *)v57 + 24))(v57);
LABEL_113:
  result = v88;
  if (v88)
    return (CGColorSpace *)(*(uint64_t (**)(CGColorSpace *))(*(_QWORD *)v88 + 24))(v88);
  return result;
}

void sub_1B2935350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t TXTextObjectRender::pixelTransformSupport(TXTextObjectRender *this, const LiRenderParameters *a2)
{
  OZRenderParams *v4;
  void **HostApplicationDelegate;

  if (*((_BYTE *)a2 + 144))
    return 0;
  v4 = (TXTextObjectRender *)((char *)this + 32);
  if (OZRenderParams::getTextRenderQuality((TXTextObjectRender *)((char *)this + 32)) == 6)
  {
    if (LiRenderingTechnology::getSharpText((TXTextObjectRender *)((char *)this + 1348))
      && !*((_BYTE *)this + 26))
    {
      return 6;
    }
    return 1;
  }
  if (OZRenderParams::getTextRenderQuality(v4) == 2)
    return 1;
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  return OZHostApplicationDelegateHandler::wantsToImproveQualityOfDraftQualityText(HostApplicationDelegate);
}

double TXTextObjectRender::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CMTime *v8;
  int TextRenderQuality;
  double result;
  void **HostApplicationDelegate;
  int v12;
  int v13;
  _BOOL8 Transformation;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  __int128 v23;
  __int128 v24;
  float64x2_t v25;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  float64x2_t v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v8 = (CMTime *)(a1 + 32);
  TextRenderQuality = OZRenderParams::getTextRenderQuality((OZRenderParams *)(a1 + 32));
  if (TextRenderQuality != 6)
  {
    if (TextRenderQuality == 2)
    {
      v38[0].f64[0] = 0.0;
      v30 = 0.0;
      *(_QWORD *)&v31 = 0;
      TXTextObject::getScale(*(TXTextObject **)(a1 + 1496), v8, v38[0].f64, (double *)&v31, &v30, 1, 1, 1, *(_WORD *)(a1 + 24), SHIBYTE(*(_WORD *)(a1 + 24)), 1);
      if (*(_BYTE *)(a4 + 144))
        v27 = *(double *)(a4 + 152);
      else
        v27 = 1.0;
      *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
      *(_QWORD *)a3 = 0x3FF0000000000000;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      v20 = v27 * fabs(v38[0].f64[0]);
      v21 = v27 * fabs(*(double *)&v31);
      v22 = v27 * fabs(v30);
    }
    else
    {
      if (TextRenderQuality)
        return result;
      HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
      v12 = OZHostApplicationDelegateHandler::wantsToImproveQualityOfDraftQualityText(HostApplicationDelegate);
      v13 = OZHostApplicationDelegateHandler::wantsToDownscaleGlyphsToOutputSize(HostApplicationDelegate);
      if (!v12)
        return LiImageSource::fixPixelTransform(a1, a2, a3, a4);
      if (!v13)
      {
        v28 = *(double *)a3;
        v29 = *(double *)(a3 + 40);
        *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
        *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
        *(_OWORD *)(a3 + 8) = 0u;
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_OWORD *)(a3 + 88) = 0u;
        *(_OWORD *)(a3 + 104) = 0u;
        *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
        *(_QWORD *)a3 = 0x3FF0000000000000;
        return PCMatrix44Tmpl<double>::rightScale((double *)a3, v28, v29, 1.0);
      }
      OZRenderParams::getPixelTransform((OZRenderParams *)v8, (uint64_t)v38);
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      v34 = 4;
      v35 = 0u;
      v36 = 0u;
      v37 = 0;
      Transformation = PCMatrix44Tmpl<double>::getTransformation((__int128 *)v38, (uint64_t)&v31);
      if (!Transformation)
      {
        _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Text/TXTextObject.cpp", 5627, v15, v16, v17, v18, v19);
        return LiImageSource::fixPixelTransform(a1, a2, a3, a4);
      }
      *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      v20 = fabs(*((double *)&v32 + 1));
      v21 = fabs(*(double *)&v33);
      v22 = fabs(*((double *)&v33 + 1));
      *(_QWORD *)a3 = 0x3FF0000000000000;
    }
    return PCMatrix44Tmpl<double>::rightScale((double *)a3, v20, v21, v22);
  }
  if (!LiRenderingTechnology::getSharpText((LiRenderingTechnology *)(a1 + 1348)) || *(_BYTE *)(a1 + 26))
  {
    v23 = *(_OWORD *)(a3 + 80);
    v41 = *(_OWORD *)(a3 + 64);
    v42 = v23;
    v24 = *(_OWORD *)(a3 + 112);
    v43 = *(_OWORD *)(a3 + 96);
    v44 = v24;
    v25 = *(float64x2_t *)(a3 + 16);
    v38[0] = *(float64x2_t *)a3;
    v38[1] = v25;
    v26 = *(_OWORD *)(a3 + 48);
    v39 = *(_OWORD *)(a3 + 32);
    v40 = v26;
    TXTextObject::getTextureBounds(*(TXTextObject **)(a1 + 1496), (OZRenderState *)v8, *(_BYTE *)(a1 + 14), v38, 0, 0, (uint64_t)&v31, *(double *)(a1 + 16));
    *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a3 = 0x3FF0000000000000;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    v20 = v38[0].f64[0];
    v21 = *((double *)&v39 + 1);
    v22 = 1.0;
    return PCMatrix44Tmpl<double>::rightScale((double *)a3, v20, v21, v22);
  }
  return result;
}

uint64_t TXTextObjectRender::estimateRenderMemory()
{
  return 0;
}

uint64_t TXTextureDecal::TXTextureDecal(uint64_t a1, const PCSharedCount *a2)
{
  *(_QWORD *)(a1 + 368) = &off_1E65EB048;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 1;
  LiImageFilter::LiImageFilter((LiImageFilter *)a1, &off_1E64FEDF8);
  *(_QWORD *)a1 = &off_1E64FECF0;
  *(_QWORD *)(a1 + 368) = &unk_1E64FEDD8;
  *(PCSharedCount *)(a1 + 40) = (PCSharedCount)a2->var0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 48), a2 + 1);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 112) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 72) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 280) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 240) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 192) = _Q1;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = _Q1;
  *(_QWORD *)(a1 + 357) = 0;
  *(_QWORD *)(a1 + 336) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  return a1;
}

void sub_1B29359FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, (const PCString *)&off_1E64FEDF8);
  *(_QWORD *)(v1 + 368) = v2 + 16;
  *(_BYTE *)(v1 + 384) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 376));
  _Unwind_Resume(a1);
}

void *TXTextureDecal::getHelium@<X0>(TXTextureDecal *this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  const FxColorDescription *RequestedColorDescription;
  void *result;
  double v13;
  double v14;
  __int128 v15;
  LiImageTransform *v16;
  __n128 v17;
  HGTextureWrap *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  HgcTXModulate *v22;
  PCException *exception;
  HGNode *v24;
  PCString v25;
  PCSharedCount v26;
  double v27;
  double v28;
  __int128 v29;
  HGNode *v30;

  RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  LiAgent::getHelium(a2, *((LiImageSource **)this + 2), &v30);
  result = LiAgent::setActualColorDescription((CGColorSpace **)a2, RequestedColorDescription);
  if (v30 && (result = (void *)*((_QWORD *)this + 5)) != 0)
  {
    v27 = 0.0;
    v28 = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    v29 = _Q0;
    if (((*(uint64_t (**)(void *, LiAgent *, double *))(*(_QWORD *)result + 24))(result, a2, &v27) & 1) == 0)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v25, "TXTextureDecal::getHelium: _texture->getBoundary failed");
      PCException::PCException(exception, &v25);
    }
    v13 = v27;
    v14 = v28;
    v15 = v29;
    v16 = (LiImageTransform *)operator new();
    LiImageTransform::LiImageTransform(v16);
    v25.var0 = (__CFString *)v16;
    PCSharedCount::PCSharedCount(&v26, (LiImageTransform *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
    if (*((double *)this + 41) != 1.0 || *((double *)this + 42) != 1.0)
    {
      if (!v25.var0)
        throw_PCNullPointerException(1);
      PCMatrix44Tmpl<double>::rightTranslate((double *)&v25.var0[1].info, *((double *)this + 43), *((double *)this + 44), 0.0);
      PCMatrix44Tmpl<double>::rightScale((double *)&v25.var0[1].info, *((double *)this + 41), *((double *)this + 42), 1.0);
      PCMatrix44Tmpl<double>::rightTranslate((double *)&v25.var0[1].info, -*((double *)this + 43), -*((double *)this + 44), 0.0);
    }
    if (!v25.var0)
      throw_PCNullPointerException(1);
    v17.n128_f64[0] = PCMatrix44Tmpl<double>::rightTranslate((double *)&v25.var0[1].info, *((double *)this + 7), *((double *)this + 8), 0.0);
    if (!*((_BYTE *)this + 364))
      v17.n128_f64[0] = PCMatrix44Tmpl<double>::rightTranslate((double *)&v25.var0[1].info, -(v13 + *(double *)&v15 * 0.5), -(v14 + *((double *)&v15 + 1) * 0.5), 0.0);
    (*((void (**)(__CFString *, _QWORD, __n128))v25.var0->isa + 21))(v25.var0, *((_QWORD *)this + 5), v17);
    LiAgent::getHelium(a2, (LiImageSource *)v25.var0, &v24);
    if (v24)
    {
      v18 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
      HGTextureWrap::HGTextureWrap(v18);
      v20 = *((int *)this + 90);
      if (v20 >= 3)
        v21 = 1;
      else
        v21 = dword_1B3055224[v20];
      HGTextureWrap::SetTextureWrapMode((uint64_t)v18, (const char *)v21, v19);
      (*(void (**)(HGTextureWrap *, _QWORD, HGNode *))(*(_QWORD *)v18 + 120))(v18, 0, v24);
      if (v24 != (HGNode *)v18)
      {
        if (v24)
          (*(void (**)(void))(*(_QWORD *)v24 + 24))();
        v24 = (HGNode *)v18;
        (*(void (**)(HGTextureWrap *))(*(_QWORD *)v18 + 16))(v18);
      }
      v22 = (HgcTXModulate *)HGObject::operator new(0x1A0uLL);
      *((_OWORD *)v22 + 24) = 0u;
      *((_OWORD *)v22 + 25) = 0u;
      *((_OWORD *)v22 + 22) = 0u;
      *((_OWORD *)v22 + 23) = 0u;
      *((_OWORD *)v22 + 20) = 0u;
      *((_OWORD *)v22 + 21) = 0u;
      *((_OWORD *)v22 + 18) = 0u;
      *((_OWORD *)v22 + 19) = 0u;
      *((_OWORD *)v22 + 16) = 0u;
      *((_OWORD *)v22 + 17) = 0u;
      *((_OWORD *)v22 + 14) = 0u;
      *((_OWORD *)v22 + 15) = 0u;
      *((_OWORD *)v22 + 12) = 0u;
      *((_OWORD *)v22 + 13) = 0u;
      *((_OWORD *)v22 + 10) = 0u;
      *((_OWORD *)v22 + 11) = 0u;
      *((_OWORD *)v22 + 8) = 0u;
      *((_OWORD *)v22 + 9) = 0u;
      *((_OWORD *)v22 + 6) = 0u;
      *((_OWORD *)v22 + 7) = 0u;
      *((_OWORD *)v22 + 4) = 0u;
      *((_OWORD *)v22 + 5) = 0u;
      *((_OWORD *)v22 + 2) = 0u;
      *((_OWORD *)v22 + 3) = 0u;
      *(_OWORD *)v22 = 0u;
      *((_OWORD *)v22 + 1) = 0u;
      HgcTXModulate::HgcTXModulate(v22);
      *(_QWORD *)v22 = &unk_1E6510878;
      *a3 = (HGNode *)v22;
      HGNode::SetInput((HGNode *)v22, 0, v30);
      (*(void (**)(HgcTXModulate *, uint64_t, HGNode *))(*(_QWORD *)v22 + 120))(v22, 1, v24);
      (*(void (**)(HgcTXModulate *, _QWORD, float, float, float, float))(*(_QWORD *)v22 + 96))(v22, 0, 1.0, 1.0, 1.0, 1.0);
      (*(void (**)(HGTextureWrap *))(*(_QWORD *)v18 + 24))(v18);
      if (v24)
        (*(void (**)(HGNode *))(*(_QWORD *)v24 + 24))(v24);
    }
    else
    {
      *a3 = 0;
    }
    PCSharedCount::~PCSharedCount(&v26);
    result = v30;
    if (v30)
      return (void *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v30 + 24))(v30);
  }
  else
  {
    *a3 = v30;
  }
  return result;
}

void sub_1B2935E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  PCString::~PCString(&a10);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  _Unwind_Resume(a1);
}

uint64_t TXTextureDecal::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = LiImageFilter::estimateRenderMemory(a1);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v4 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
  return v4;
}

_QWORD *LiCachedGaussianBlur::LiCachedGaussianBlur(_QWORD *a1, uint64_t *a2, _QWORD *a3, const OZRenderParams *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  LiImageFilter::LiImageFilter((LiImageFilter *)a1, a2 + 2);
  v8 = a2[1];
  *(_QWORD *)v9 = v8;
  *(_QWORD *)(v9 + *(_QWORD *)(v8 - 24)) = a2[8];
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_BYTE *)(v9 + 56) = 1;
  v10 = *a2;
  *(_QWORD *)v9 = *a2;
  *(_QWORD *)(v9 + *(_QWORD *)(v10 - 24)) = a2[9];
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v9 + 60));
  v11 = a3[1];
  a1[10] = *a3;
  a1[11] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 12), a4);
  return a1;
}

void sub_1B2936038(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  const PCString *v2;
  uint64_t v3;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v3);
  LiCachedImageFilter::~LiCachedImageFilter(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t LiCachedGaussianBlur::LiCachedGaussianBlur(uint64_t a1, _QWORD *a2, const OZRenderParams *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)(a1 + 1520) = &off_1E65EB048;
  *(_QWORD *)(a1 + 1528) = 0;
  *(_BYTE *)(a1 + 1536) = 1;
  LiImageFilter::LiImageFilter((LiImageFilter *)a1, &off_1E64FEF60);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &off_1E64FEE48;
  *(_QWORD *)(a1 + 1520) = &unk_1E64FEF38;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 60));
  v6 = a2[1];
  *(_QWORD *)(a1 + 80) = *a2;
  *(_QWORD *)(a1 + 88) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 96), a3);
  return a1;
}

void sub_1B2936114(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v2);
  LiCachedImageFilter::~LiCachedImageFilter((PCSharedCount *)v1, (const PCString *)&off_1E64FEF58);
  *(_QWORD *)(v1 + 1520) = v3 + 16;
  *(_BYTE *)(v1 + 1536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1528));
  _Unwind_Resume(a1);
}

void LiCachedGaussianBlur::clone(LiCachedGaussianBlur *this@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t v4;
  PCSharedCount v5;
  PCSharedCount v6;
  PCSharedCount v7;

  v4 = operator new();
  LiCachedGaussianBlur::LiCachedGaussianBlur(v4, (_QWORD *)this + 10, (LiCachedGaussianBlur *)((char *)this + 96));
  v5.var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v6, (PCShared_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  if (!v4)
    throw_PCNullPointerException(1);
  *((_QWORD *)v5.var0 + 5) = *((_QWORD *)this + 5);
  *(_QWORD *)(v4 + 48) = *((_QWORD *)this + 6);
  *(_QWORD *)(v4 + 16) = *((_QWORD *)this + 2);
  PCSharedCount::PCSharedCount(&v7, (const PCSharedCount *)this + 3);
  PCSharedCount::operator=((uint64_t *)(v4 + 24), (uint64_t *)&v7);
  PCSharedCount::~PCSharedCount(&v7);
  if (!v5.var0)
    throw_PCNullPointerException(1);
  *(_OWORD *)((char *)v5.var0 + 60) = *(_OWORD *)((char *)this + 60);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v5);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B2936258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

uint64_t LiCachedGaussianBlur::pixelTransformSupport()
{
  return 1;
}

double LiCachedGaussianBlur::fixPixelTransform(uint64_t a1, __n128 *a2, uint64_t a3)
{
  CMTime *v6;
  int TextRenderQuality;
  double result;
  double v9;
  double v10;
  TXTextObject *v11;
  int64x2_t v12;
  float64x2_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __n128 v19;
  _OWORD v20[2];
  double v21;
  double v22;
  double v23;
  double v24[4];
  double v25;

  v6 = (CMTime *)(a1 + 96);
  TextRenderQuality = OZRenderParams::getTextRenderQuality((OZRenderParams *)(a1 + 96));
  if (TextRenderQuality)
  {
    if (TextRenderQuality == 6)
    {
      v22 = 1.0;
      v23 = 1.0;
      v21 = 1.0;
      TXTextObject::getScale(*(TXTextObject **)(a1 + 80), v6, &v23, &v22, &v21, 1, 1, 1, 0, 0, 1);
      v11 = *(TXTextObject **)(a1 + 80);
      LiAgent::getROI(a2, &v19);
      v12.i64[0] = v19.n128_i32[0];
      v12.i64[1] = v19.n128_i32[1];
      v13 = vcvtq_f64_s64(v12);
      v12.i64[0] = v19.n128_i32[2];
      v12.i64[1] = v19.n128_i32[3];
      v20[0] = v13;
      v20[1] = vcvtq_f64_s64(v12);
      TXTextObject::getRenderedGlyphTransform(v11, (OZRenderState *)v6, (float64x2_t *)a3, (double *)v20, (uint64_t)v24, *(float64_t *)(a1 + 40), *(float64_t *)(a1 + 48));
      v14 = v24[0];
      if (v24[0] < v25)
        v14 = v25;
      v16 = v22;
      v15 = v23;
      v17 = v14 / v23;
      v18 = v14 / v22;
      if (v17 < v18)
        v17 = v18;
      *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
      *(_QWORD *)a3 = 0x3FF0000000000000;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      v9 = v15 * v17;
      v10 = v16 * v17;
      return PCMatrix44Tmpl<double>::rightScale((double *)a3, v9, v10, 1.0);
    }
    if (TextRenderQuality != 2)
      return result;
  }
  v24[0] = 0.0;
  *(_QWORD *)&v20[0] = 0;
  v19.n128_u64[0] = 0;
  TXTextObject::getScale(*(TXTextObject **)(a1 + 80), v6, v24, (double *)v20, v19.n128_f64, 1, 1, 1, 0, 0, 1);
  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  v9 = v24[0];
  v10 = *(double *)v20;
  return PCMatrix44Tmpl<double>::rightScale((double *)a3, v9, v10, 1.0);
}

CGColorSpace **LiCachedGaussianBlur::getHelium@<X0>(LiCachedGaussianBlur *this@<X0>, double **a2@<X1>, HGBlur **a3@<X8>)
{
  const FxColorDescription *RequestedColorDescription;
  CGColorSpace **result;
  double v8;
  double v9;
  double *v10;
  long double v11;
  double v12;
  double v13;
  HGBlur *v14;
  float v15;
  float v16;
  float v17;
  double v18;
  float v19;
  float v20;
  double v21;
  double v22;
  double v23;
  HGNode *v24;

  RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription((LiAgent *)a2);
  LiAgent::getHelium((LiAgent *)a2, *((LiImageSource **)this + 2), &v24);
  result = LiAgent::setActualColorDescription((CGColorSpace **)a2, RequestedColorDescription);
  if (v24)
  {
    v22 = 1.0;
    v23 = 1.0;
    v21 = 1.0;
    v8 = 1.0;
    v9 = 1.0;
    if (OZRenderParams::getTextRenderQuality((LiCachedGaussianBlur *)((char *)this + 96)) == 6)
    {
      TXTextObject::getScale(*((TXTextObject **)this + 10), (CMTime *)this + 4, &v23, &v22, &v21, 1, 1, 1, 0, 0, 1);
      v10 = a2[20];
      v11 = fabs(v10[5] / v22);
      v9 = pow(fabs(*v10 / v23), 1.53846154);
      v23 = v9;
      v8 = pow(v11, 1.53846154);
      v22 = v8;
    }
    v12 = *((double *)this + 5);
    v13 = *((double *)this + 6);
    v14 = (HGBlur *)HGObject::operator new(0x220uLL);
    HGBlur::HGBlur(v14);
    *a3 = v14;
    v15 = v12 * v9 / 1675.0;
    v16 = powf(v15, 0.65) * 575.0;
    v17 = v13 * v8 / 1675.0;
    v18 = *((double *)this + 16) * (float)(powf(v17, 0.65) * 575.0);
    v19 = *((double *)this + 15) * v16;
    v20 = v18;
    (*(void (**)(HGBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v14 + 96))(v14, 0, v19, v20, 0.0, 0.0);
    (*(void (**)(HGBlur *, _QWORD, HGNode *))(*(_QWORD *)v14 + 120))(v14, 0, v24);
    result = (CGColorSpace **)v24;
    if (v24)
      return (CGColorSpace **)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v24 + 24))(v24);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_1B2936648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  HGObject::operator delete(v14);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  _Unwind_Resume(a1);
}

void sub_1B2936684()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 24))(v0);
  JUMPOUT(0x1B2936664);
}

void LiCachedGaussianBlur::getCacheHash(uint64_t a1)
{
  _DWORD *v1;
  float64x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int *v7;
  int v8;
  int v9;
  int8x8_t *Hash;
  float64x2_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  int8x8_t v16[521];

  v1 = (_DWORD *)MEMORY[0x1E0C80A78](a1);
  v4 = v3;
  v16[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  v5 = v1[15];
  v6 = v1[16];
  v7 = v1 + 15;
  v8 = v1[17];
  v9 = v1[18];
  if (v6 | v5 | v8 | v9)
  {
    v13 = 0.0;
    v14 = 0.0;
    v15 = 0;
    v11 = 0uLL;
    v12 = 0;
    getScaleTranslate(v2, (uint64_t)&v13, &v11);
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v16);
    PCHashWriteStream::writeValue(v16, v13);
    PCHashWriteStream::writeValue(v16, v14);
    PCHashWriteStream::close(v16);
    Hash = PCHashWriteStream::getHash(v16);
    PCHash128::operator+=(v7, (int *)Hash);
    *(_OWORD *)v4 = *(_OWORD *)v7;
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v16);
  }
  else
  {
    *(_DWORD *)v4 = v5;
    *(_DWORD *)(v4 + 4) = v6;
    *(_DWORD *)(v4 + 8) = v8;
    *(_DWORD *)(v4 + 12) = v9;
  }
}

void sub_1B29367A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void TXGlowFilter::clone(TXGlowFilter *this@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t v4;
  PCSharedCount v5;
  PCSharedCount v6;
  PCSharedCount v7;

  v4 = operator new();
  TXGlowFilter::TXGlowFilter(v4, (_QWORD *)this + 10, (TXGlowFilter *)((char *)this + 96));
  v5.var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v6, (PCShared_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  if (!v4)
    throw_PCNullPointerException(1);
  *((_QWORD *)v5.var0 + 5) = *((_QWORD *)this + 5);
  *(_QWORD *)(v4 + 48) = *((_QWORD *)this + 6);
  *(_BYTE *)(v4 + 56) = *((_BYTE *)this + 56);
  *(_QWORD *)(v4 + 1520) = *((_QWORD *)this + 190);
  *(_OWORD *)(v4 + 1528) = *(_OWORD *)((char *)this + 1528);
  *(_QWORD *)(v4 + 16) = *((_QWORD *)this + 2);
  PCSharedCount::PCSharedCount(&v7, (const PCSharedCount *)this + 3);
  PCSharedCount::operator=((uint64_t *)(v4 + 24), (uint64_t *)&v7);
  PCSharedCount::~PCSharedCount(&v7);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v5);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B29368C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

CGColorSpace **TXGlowFilter::getHelium@<X0>(TXGlowFilter *this@<X0>, double **a2@<X1>, HgcTXGlowMix **a3@<X8>)
{
  CGColorSpace **result;
  HGBlur *v6;
  HgcTXGlowMix *v7;
  float v8;
  HGBlur *v9;

  result = LiCachedGaussianBlur::getHelium(this, a2, &v9);
  v6 = v9;
  if (v9)
  {
    v7 = (HgcTXGlowMix *)HGObject::operator new(0x1A0uLL);
    HgcTXGlowMix::HgcTXGlowMix(v7);
    *a3 = v7;
    v8 = *((double *)this + 190) * 0.1 + 1.0;
    (*(void (**)(HgcTXGlowMix *, _QWORD, float, float, float, float))(*(_QWORD *)v7 + 96))(v7, 0, v8, 0.0, 0.0, 0.0);
    (*(void (**)(HgcTXGlowMix *, uint64_t, float, float, float, float))(*(_QWORD *)v7 + 96))(v7, 1, *((float *)this + 382), *((float *)this + 383), *((float *)this + 384), 1.0);
    (*(void (**)(HgcTXGlowMix *, _QWORD, HGBlur *))(*(_QWORD *)v7 + 120))(v7, 0, v6);
    return (CGColorSpace **)(*(uint64_t (**)(HGBlur *))(*(_QWORD *)v6 + 24))(v6);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_1B29369F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  HGObject::operator delete(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::buildLighting(TXTextObject *this, LiGeode *a2, const LiLightSet *a3, OZRenderState *a4, int a5)
{
  uint64_t result;
  PCShared_base *LightFilter;
  PCShared_base *v12;
  PCShared_base *v13;
  double *v14;
  uint64_t i;
  double *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  PCShared_base *v20;
  PCShared_base *v26;
  __int128 v27;
  uint64_t j;
  _OWORD *v29;
  __int128 v30;
  PCShared_base *v32;
  __int128 v33;
  PCShared_base *v34;
  _BYTE v35[128];
  __int128 v36;
  __int128 v37;

  result = *((_QWORD *)this + 68);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 976))(result);
    result = LiGeode::needsLights(a2);
    if ((result & 1) != 0
      || *((_DWORD *)a3 + 3)
      && (result = (*(uint64_t (**)(uint64_t, OZRenderState *))(*(_QWORD *)(*((_QWORD *)this + 68) + 200)
                                                                       + 1840))(*((_QWORD *)this + 68) + 200, a4), (_DWORD)result))
    {
      LightFilter = LiGeode::getLightFilter(a2);
      PCMatrix44Tmpl<double>::operator*((uint64_t)LightFilter + 472, (__int128 *)((char *)a2 + 8), (uint64_t)v35);
      v12 = LiGeode::getLightFilter(a2);
      v13 = v12;
      v14 = (double *)((char *)v12 + 472);
      if ((char *)v12 + 472 != v35)
      {
        for (i = 0; i != 16; i += 4)
        {
          v16 = &v14[i];
          v17 = *(_OWORD *)&v35[i * 8 + 16];
          *(_OWORD *)v16 = *(_OWORD *)&v35[i * 8];
          *((_OWORD *)v16 + 1) = v17;
        }
      }
      if (fabs(PCMatrix44Tmpl<double>::determinant((double *)v12 + 59)) < 0.0000001)
      {
        v36 = 0uLL;
        v37 = xmmword_1B304EED0;
        liFindMatrixPlane(v14, (double *)&v36);
        v18 = *((_QWORD *)&v36 + 1);
        *((_QWORD *)v13 + 61) = v36;
        *((_QWORD *)v13 + 65) = v18;
        v19 = *((_QWORD *)&v37 + 1);
        *((_QWORD *)v13 + 69) = v37;
        *((_QWORD *)v13 + 73) = v19;
      }
      LiGeode::setLit((uint64_t)a2, 1);
      v20 = LiGeode::getLightFilter(a2);
      *((double *)v20 + 23) = (*(double (**)(_QWORD, OZRenderState *))(**((_QWORD **)this + 68) + 984))(*((_QWORD *)this + 68), a4);
      if (*((_BYTE *)LiGeode::getLightFilter(a2) + 174))
      {
        v36 = 0uLL;
        __asm { FMOV            V0.2D, #-1.0 }
        v37 = _Q0;
        TXTextObject::getImageBoundsOfAttribute((uint64_t)this, (double *)&v36, a4, a5, 0, 0, 1, 0, 0.0, 0.0, 0.0, 0.0);
        v26 = LiGeode::getLightFilter(a2);
        v27 = v37;
        *(_OWORD *)((char *)v26 + 200) = v36;
        *(_OWORD *)((char *)v26 + 216) = v27;
        result = (uint64_t)LiGeode::getLightFilter(a2);
        if ((_BYTE *)(result + 344) != v35)
        {
          for (j = 0; j != 128; j += 32)
          {
            v29 = (_OWORD *)(result + 344 + j);
            v30 = *(_OWORD *)&v35[j + 16];
            *v29 = *(_OWORD *)&v35[j];
            v29[1] = v30;
          }
        }
      }
      else
      {
        result = (uint64_t)LiGeode::getLightFilter(a2);
        if (*(_BYTE *)(result + 173))
        {
          v36 = 0uLL;
          __asm { FMOV            V0.2D, #-1.0 }
          v37 = _Q0;
          TXTextObject::getImageBoundsOfAttribute((uint64_t)this, (double *)&v36, a4, a5, 0, 0, 1, 0, 0.0, 0.0, 0.0, 0.0);
          v32 = LiGeode::getLightFilter(a2);
          v33 = v37;
          *(_OWORD *)((char *)v32 + 200) = v36;
          *(_OWORD *)((char *)v32 + 216) = v33;
          v34 = LiGeode::getLightFilter(a2);
          result = OZRenderParams::getTextRenderQuality((OZRenderParams *)a4);
          *((_BYTE *)v34 + 176) = (_DWORD)result == 6;
        }
      }
    }
  }
  return result;
}

void LiGaussianBlur::~LiGaussianBlur(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)off_1E64FFFE8;
  this[8].var0 = (PC_Sp_counted_base *)&unk_1E65000D0;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E656C380);
  this[8].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[10].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[9].var0);
}

{
  LiGaussianBlur::~LiGaussianBlur(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t LiGaussianBlur::pixelTransformSupport()
{
  return 4;
}

void `virtual thunk to'LiGaussianBlur::~LiGaussianBlur(LiGaussianBlur *this)
{
  LiGaussianBlur::~LiGaussianBlur((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  LiGaussianBlur::~LiGaussianBlur((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E29170);
}

void LiCachedGaussianBlur::~LiCachedGaussianBlur(PCSharedCount *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1520) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1528));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 1520) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1528));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiCachedGaussianBlur::~LiCachedGaussianBlur(LiCachedGaussianBlur *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1520) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1528));
}

{
  LiCachedGaussianBlur::~LiCachedGaussianBlur((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void TXGlowFilter::~TXGlowFilter(PCSharedCount *this)
{
  uint64_t v1;

  LiCachedGaussianBlur::~LiCachedGaussianBlur(this, (const PCString *)off_1E64FF468);
  *(_QWORD *)(v1 + 1544) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));
}

{
  uint64_t v1;

  LiCachedGaussianBlur::~LiCachedGaussianBlur(this, (const PCString *)off_1E64FF468);
  *(_QWORD *)(v1 + 1544) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'TXGlowFilter::~TXGlowFilter(TXGlowFilter *this)
{
  uint64_t v1;

  LiCachedGaussianBlur::~LiCachedGaussianBlur((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), (const PCString *)off_1E64FF468);
  *(_QWORD *)(v1 + 1544) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));
}

{
  TXGlowFilter::~TXGlowFilter((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t TXTextObject::getID(TXTextObject *this)
{
  return *((unsigned int *)this + 97);
}

void TXCachedGlyphRender::~TXCachedGlyphRender(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E64FEA88;
  this[187].var0 = (PC_Sp_counted_base *)&unk_1E64FEB50;
  PCSharedCount::~PCSharedCount(this + 185);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[5]);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&this[3]);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E64FEB70);
  this[187].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[189].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[188].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E64FEA88;
  this[187].var0 = (PC_Sp_counted_base *)&unk_1E64FEB50;
  PCSharedCount::~PCSharedCount(this + 185);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[5]);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&this[3]);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E64FEB70);
  this[187].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[189].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[188].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'TXCachedGlyphRender::~TXCachedGlyphRender(TXCachedGlyphRender *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E64FEA88;
  v1[187].var0 = (PC_Sp_counted_base *)&unk_1E64FEB50;
  PCSharedCount::~PCSharedCount(v1 + 185);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[5]);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E64FEB70);
  v1[187].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[189].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[188].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E64FEA88;
  v1[187].var0 = (PC_Sp_counted_base *)&unk_1E64FEB50;
  PCSharedCount::~PCSharedCount(v1 + 185);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[5]);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E64FEB70);
  v1[187].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[189].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[188].var0);
  JUMPOUT(0x1B5E29170);
}

void TXTextureDecal::~TXTextureDecal(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E64FECF0;
  this[46].var0 = (PC_Sp_counted_base *)&unk_1E64FEDD8;
  PCSharedCount::~PCSharedCount(this + 6);
  this->var0 = (PC_Sp_counted_base *)off_1E64FFD20;
  this[46].var0 = (PC_Sp_counted_base *)off_1E64FFE08;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E64FEE00);
  this[46].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[48].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[47].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E64FECF0;
  this[46].var0 = (PC_Sp_counted_base *)&unk_1E64FEDD8;
  PCSharedCount::~PCSharedCount(this + 6);
  this->var0 = (PC_Sp_counted_base *)off_1E64FFD20;
  this[46].var0 = (PC_Sp_counted_base *)off_1E64FFE08;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E64FEE00);
  this[46].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[48].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[47].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'TXTextureDecal::~TXTextureDecal(TXTextureDecal *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E64FECF0;
  v1[46].var0 = (PC_Sp_counted_base *)&unk_1E64FEDD8;
  PCSharedCount::~PCSharedCount(v1 + 6);
  v1->var0 = (PC_Sp_counted_base *)off_1E64FFD20;
  v1[46].var0 = (PC_Sp_counted_base *)off_1E64FFE08;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E64FEE00);
  v1[46].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[48].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[47].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E64FECF0;
  v1[46].var0 = (PC_Sp_counted_base *)&unk_1E64FEDD8;
  PCSharedCount::~PCSharedCount(v1 + 6);
  v1->var0 = (PC_Sp_counted_base *)off_1E64FFD20;
  v1[46].var0 = (PC_Sp_counted_base *)off_1E64FFE08;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E64FEE00);
  v1[46].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[48].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[47].var0);
  JUMPOUT(0x1B5E29170);
}

void PCMatrix44Tmpl<double>::rightRotate(double *a1, int a2, double a3)
{
  double v5;
  double cosval;
  __double2 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;

  if (a3 != 0.0)
  {
    v5 = 1.0;
    cosval = 0.0;
    if (vabdd_f64(-1.57079633, a3) >= 0.0000001 && vabdd_f64(4.71238898, a3) >= 0.0000001)
    {
      v5 = -1.0;
      if (vabdd_f64(1.57079633, a3) >= 0.0000001 && vabdd_f64(-4.71238898, a3) >= 0.0000001)
      {
        v5 = 0.0;
        cosval = -1.0;
        if (vabdd_f64(-3.14159265, a3) >= 0.0000001 && vabdd_f64(3.14159265, a3) >= 0.0000001)
        {
          v7 = __sincos_stret(a3);
          cosval = v7.__cosval;
          v5 = -v7.__sinval;
        }
      }
    }
    if (a2)
    {
      if (a2 != 1)
      {
        if (a2 == 2)
        {
          v8 = a1[1];
          v9 = a1[4];
          v10 = a1[5];
          v11 = a1[8];
          v12 = a1[9];
          v13 = a1[12];
          v14 = a1[13];
          v15 = v5 * *a1 + cosval * v8;
          *a1 = cosval * *a1 - v5 * v8;
          a1[1] = v15;
          a1[4] = cosval * v9 - v5 * v10;
          a1[5] = v5 * v9 + cosval * v10;
          a1[8] = cosval * v11 - v5 * v12;
          a1[9] = v5 * v11 + cosval * v12;
          a1[12] = cosval * v13 - v5 * v14;
          a1[13] = v5 * v13 + cosval * v14;
        }
        return;
      }
      v25 = a1[2];
      v26 = a1[4];
      v27 = a1[6];
      v28 = a1[8];
      v29 = a1[10];
      v30 = a1[12];
      v31 = a1[14];
      v32 = cosval * v25 - v5 * *a1;
      *a1 = cosval * *a1 + v5 * v25;
      a1[4] = cosval * v26 + v5 * v27;
      a1[8] = cosval * v28 + v5 * v29;
      a1[12] = cosval * v30 + v5 * v31;
      a1[2] = v32;
      a1[6] = cosval * v27 - v5 * v26;
      v24 = cosval * v31 - v5 * v30;
      a1[10] = cosval * v29 - v5 * v28;
    }
    else
    {
      v16 = a1[1];
      v17 = a1[2];
      v18 = a1[5];
      v19 = a1[6];
      v20 = a1[9];
      v21 = a1[10];
      v22 = a1[13];
      v23 = a1[14];
      a1[1] = cosval * v16 - v5 * v17;
      a1[2] = v5 * v16 + cosval * v17;
      a1[5] = cosval * v18 - v5 * v19;
      a1[6] = v5 * v18 + cosval * v19;
      a1[9] = cosval * v20 - v5 * v21;
      a1[10] = v5 * v20 + cosval * v21;
      v24 = v5 * v22 + cosval * v23;
      a1[13] = cosval * v22 - v5 * v23;
    }
    a1[14] = v24;
  }
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_1B29376E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::findValue@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  PCMutex *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v24[2];
  char v25;

  v8 = (PCMutex *)(a1 + 16);
  v24[1] = a1 + 16;
  PCMutex::lock((PCMutex *)(a1 + 16));
  v25 = 1;
  v9 = std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::find<std::pair<HGMTLDeviceType,PCHash128>>(a1 + 88, a2);
  v10 = v9;
  v24[0] = v9;
  if ((_QWORD *)(a1 + 96) == v9)
  {
    *a3 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a4 + 24) = _Q0;
    *(_QWORD *)(a4 + 160) = 0x3FF0000000000000;
    *(_QWORD *)(a4 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a4 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a4 + 40) = 0x3FF0000000000000;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
  }
  else
  {
    v11 = v9[7];
    *(_QWORD *)a4 = v11;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v12 = *((_OWORD *)v10 + 11);
    *(_OWORD *)(a4 + 104) = *((_OWORD *)v10 + 10);
    *(_OWORD *)(a4 + 120) = v12;
    v13 = *((_OWORD *)v10 + 13);
    *(_OWORD *)(a4 + 136) = *((_OWORD *)v10 + 12);
    *(_OWORD *)(a4 + 152) = v13;
    v14 = *((_OWORD *)v10 + 7);
    *(_OWORD *)(a4 + 40) = *((_OWORD *)v10 + 6);
    *(_OWORD *)(a4 + 56) = v14;
    v15 = *((_OWORD *)v10 + 9);
    *(_OWORD *)(a4 + 72) = *((_OWORD *)v10 + 8);
    *(_OWORD *)(a4 + 88) = v15;
    v16 = *((_OWORD *)v10 + 5);
    *(_OWORD *)(a4 + 8) = *((_OWORD *)v10 + 4);
    *(_OWORD *)(a4 + 24) = v16;
    v17 = *(_QWORD *)(a1 + 136) + 1;
    *(_QWORD *)(a1 + 136) = v17;
    v10[29] = v17;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 112), (uint64_t)v24);
    *a3 = 1;
  }
  return PCMutex::unlock(v8);
}

void sub_1B2937C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::find<std::pair<HGMTLDeviceType,PCHash128>>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;

  v3 = (_QWORD *)(a1 + 8);
  v4 = std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__lower_bound<std::pair<HGMTLDeviceType,PCHash128>>(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 == v4)
    return v3;
  v5 = v4;
  v6 = v4[4];
  if (*a2 < v6 || v6 >= *a2 && operator<((const PCHash128 *)(a2 + 1), (const PCHash128 *)(v4 + 5)))
    return v3;
  return v5;
}

_QWORD *std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__lower_bound<std::pair<HGMTLDeviceType,PCHash128>>(uint64_t a1, unint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  const PCHash128 *v7;
  unint64_t v8;

  if (a3)
  {
    v5 = a3;
    v7 = (const PCHash128 *)(a2 + 1);
    do
    {
      v8 = v5[4];
      if (v8 >= *a2)
      {
        if (*a2 >= v8)
        {
          if (operator<((const PCHash128 *)(v5 + 5), v7))
            ++v5;
          else
            a4 = v5;
        }
        else
        {
          a4 = v5;
        }
      }
      else
      {
        ++v5;
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a4;
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *result;
  v3 = result[1] - *result;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 240);
  v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      v17 = *(_QWORD *)(v2 + 8 * v4);
      do
      {
        v18 = v4 - 1;
        v19 = (v4 - 1) >> 1;
        v20 = *(_QWORD *)(v2 + 8 * v19);
        if (*(_QWORD *)(v20 + 232) <= *(_QWORD *)(v17 + 232))
          break;
        *(_QWORD *)(v2 + 8 * v4) = v20;
        *(_QWORD *)(v2 + 8 * v19) = v17;
        v2 = *result;
        *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 240) = v4;
        v17 = *(_QWORD *)(v2 + 8 * v19);
        *(_QWORD *)(v17 + 240) = v19;
        v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  v6 = 0;
  v7 = v3 >> 3;
  v8 = 2 * v4;
  v9 = *(_QWORD *)(v2 + 8 * v4);
  while (1)
  {
    v10 = v8 + 2;
    v11 = *(_QWORD *)(v9 + 232);
    v12 = v10 < v7 && v11 > *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 232);
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * v5) + 232);
    if (v11 <= v13 && !v12)
      break;
    v15 = v11 > v13 && v12;
    if (v12)
      v16 = v10;
    else
      v16 = v5;
    if (v15)
    {
      if (v13 <= *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 232))
        v16 = v5;
      else
        v16 = v10;
    }
    *(_QWORD *)(v2 + 8 * v4) = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v2 + 8 * v16) = v9;
    v2 = *result;
    *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 240) = v4;
    v9 = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v9 + 240) = v16;
    v8 = 2 * v16;
    v6 = 1;
    v5 = (2 * v16) | 1;
    v4 = v16;
    if (v5 >= v7)
      return result;
  }
  if ((v6 & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 240);
    goto LABEL_24;
  }
  return result;
}

uint64_t PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::addValue(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  PCMutex *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned __int8 v32;
  uint64_t *v33;
  unint64_t *v34;
  uint64_t *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _QWORD v63[2];
  char v64;

  v8 = (PCMutex *)(a1 + 16);
  v63[1] = a1 + 16;
  PCMutex::lock((PCMutex *)(a1 + 16));
  v64 = 1;
  if (*(_QWORD *)(a1 + 152) >= a4 || *(_QWORD *)(a1 + 168))
  {
    v9 = std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::find<std::pair<HGMTLDeviceType,PCHash128>>(a1 + 88, (unint64_t *)a2);
    v10 = v9;
    v63[0] = v9;
    if ((_QWORD *)(a1 + 96) == v9)
    {
      v25 = *(_QWORD *)(a1 + 136) + 1;
      *(_QWORD *)(a1 + 136) = v25;
      v26 = *a3;
      if (*a3)
        (*(void (**)(_QWORD))(*(_QWORD *)v26 + 16))(*a3);
      v27 = *(_OWORD *)(a3 + 15);
      v59 = *(_OWORD *)(a3 + 13);
      v60 = v27;
      v28 = *(_OWORD *)(a3 + 19);
      v61 = *(_OWORD *)(a3 + 17);
      v62 = v28;
      v29 = *(_OWORD *)(a3 + 7);
      v55 = *(_OWORD *)(a3 + 5);
      v56 = v29;
      v30 = *(_OWORD *)(a3 + 11);
      v57 = *(_OWORD *)(a3 + 9);
      v58 = v30;
      v31 = *(_OWORD *)(a3 + 3);
      v53 = *(_OWORD *)(a3 + 1);
      v54 = v31;
      v36 = *(uint64_t **)a2;
      v37 = *(_OWORD *)(a2 + 8);
      v38 = v26;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
      v45 = v59;
      v46 = v60;
      v47 = v61;
      v48 = v62;
      v41 = v55;
      v42 = v56;
      v43 = v57;
      v44 = v58;
      v39 = v53;
      v40 = v54;
      v49 = a4;
      v50 = v25;
      v51 = 0;
      v52[0] = (uint64_t)std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__emplace_unique_key_args<std::pair<HGMTLDeviceType,PCHash128>,std::pair<std::pair<HGMTLDeviceType,PCHash128> const,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>((uint64_t **)(a1 + 88), (unint64_t *)&v36, (uint64_t)&v36);
      v52[1] = v32;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::add((void **)(a1 + 112), v52);
      *(_QWORD *)(a1 + 144) += a4;
      if (!*(_QWORD *)(a1 + 168))
      {
        while (*(_QWORD *)(a1 + 144) > *(_QWORD *)(a1 + 152) || *(_QWORD *)(a1 + 104) > *(_QWORD *)(a1 + 160))
        {
          v34 = *(unint64_t **)(a1 + 112);
          if (v34 == *(unint64_t **)(a1 + 120))
            break;
          v36 = (uint64_t *)*v34;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 112), (uint64_t)&v36);
          v33 = v36;
          *(_QWORD *)(a1 + 144) -= v36[28];
          std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::erase((uint64_t **)(a1 + 88), v33);
        }
      }
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
    }
    else
    {
      v12 = v9 + 7;
      v11 = v9[7];
      v13 = *a3;
      if (v11 != *a3)
      {
        if (v11)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v11 + 24))(v10[7]);
          v13 = *a3;
        }
        *v12 = v13;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      }
      v14 = *(_OWORD *)(a3 + 3);
      *((_OWORD *)v10 + 4) = *(_OWORD *)(a3 + 1);
      *((_OWORD *)v10 + 5) = v14;
      if (v12 != a3)
      {
        v15 = 0;
        v16 = v10 + 12;
        v17 = a3 + 5;
        do
        {
          for (i = 0; i != 4; ++i)
            v16[i] = v17[i];
          ++v15;
          v16 += 4;
          v17 += 4;
        }
        while (v15 != 4);
      }
      v19 = *(_QWORD *)(a1 + 136) + 1;
      *(_QWORD *)(a1 + 136) = v19;
      v10[29] = v19;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 112), (uint64_t)v63);
      v20 = v63[0];
      v21 = a4 - *(_QWORD *)(v63[0] + 224);
      if (v21)
      {
        v22 = *(_QWORD *)(a1 + 144) + v21;
        *(_QWORD *)(a1 + 144) = v22;
        *(_QWORD *)(v20 + 224) = a4;
        if (!*(_QWORD *)(a1 + 168))
        {
          while (v22 > *(_QWORD *)(a1 + 152) || *(_QWORD *)(a1 + 104) > *(_QWORD *)(a1 + 160))
          {
            v24 = *(unint64_t **)(a1 + 112);
            if (v24 == *(unint64_t **)(a1 + 120))
              break;
            v36 = (uint64_t *)*v24;
            PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 112), (uint64_t)&v36);
            v23 = v36;
            *(_QWORD *)(a1 + 144) -= v36[28];
            std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::erase((uint64_t **)(a1 + 88), v23);
            v22 = *(_QWORD *)(a1 + 144);
          }
        }
      }
    }
  }
  return PCMutex::unlock(v8);
}

void sub_1B293820C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  PCLockSentry<PCMutex>::~PCLockSentry(v2 - 96);
  _Unwind_Resume(a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v4 = (char *)*a1;
  v5 = a1[1];
  v6 = ((char *)v5 - (_BYTE *)*a1) >> 3;
  v7 = *a2;
  *(_QWORD *)(*a2 + 240) = v6;
  v10 = (unint64_t)a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = v9 - (_QWORD)v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1))
      v13 = v6 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      v7 = *a2;
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v6];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v7;
    v11 = v16 + 8;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = v7;
    v11 = v5 + 1;
  }
  a1[1] = v11;
  v21 = *(_QWORD *)(*a2 + 240);
  if (v21)
  {
    v22 = (char *)*a1;
    v23 = *((_QWORD *)*a1 + v21);
    do
    {
      v24 = v21 - 1;
      v25 = (v21 - 1) >> 1;
      v26 = *(_QWORD *)&v22[8 * v25];
      if (*(_QWORD *)(v26 + 232) <= *(_QWORD *)(v23 + 232))
        break;
      *(_QWORD *)&v22[8 * v21] = v26;
      *(_QWORD *)&v22[8 * v25] = v23;
      v22 = (char *)*a1;
      *(_QWORD *)(*((_QWORD *)*a1 + v21) + 240) = v21;
      v23 = *(_QWORD *)&v22[8 * v25];
      *(_QWORD *)(v23 + 240) = v25;
      v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

uint64_t *std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__emplace_unique_key_args<std::pair<HGMTLDeviceType,PCHash128>,std::pair<std::pair<HGMTLDeviceType,PCHash128> const,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__find_equal<std::pair<HGMTLDeviceType,PCHash128>>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__construct_node<std::pair<std::pair<HGMTLDeviceType,PCHash128> const,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__find_equal<std::pair<HGMTLDeviceType,PCHash128>>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  const PCHash128 *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = (const PCHash128 *)(a3 + 1);
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *a3;
        v10 = v4[4];
        if (*a3 >= v10)
          break;
LABEL_6:
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_15;
      }
      if (v10 >= v9)
      {
        if (operator<(v7, (const PCHash128 *)(v8 + 5)))
          goto LABEL_6;
        v10 = v8[4];
        v9 = *a3;
      }
      if (v10 < v9 || v9 >= v10 && operator<((const PCHash128 *)(v8 + 5), v7))
      {
        v5 = v8 + 1;
        v4 = (_QWORD *)v8[1];
        if (v4)
          continue;
      }
      goto LABEL_15;
    }
  }
  v8 = (_QWORD *)(a1 + 8);
LABEL_15:
  *a2 = v8;
  return v5;
}

uint64_t std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__construct_node<std::pair<std::pair<HGMTLDeviceType,PCHash128> const,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0xF8uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::pair<HGMTLDeviceType,PCHash128> const,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2938548(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::pair<HGMTLDeviceType,PCHash128> const,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  v9 = *(_OWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = v10;
  v12 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = v12;
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p[7];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 240);
  v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(_QWORD *)(*a1 + 8 * v3) = *(_QWORD *)(*a1 + 8 * v4);
    *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v3) + 240) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::bubble(a1, *a1 + 8 * v3);
  }
}

uint64_t *std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, a2);
  v4 = a2[7];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  operator delete(a2);
  return v3;
}

void TX3DExtrusionPropertiesChannelResetCallback(OZChannelBase *a1, void *a2)
{
  OZObjectManipulator *ObjectManipulator;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  ObjectManipulator = (OZObjectManipulator *)OZChannelBase::getObjectManipulator(a1);
  TXTextStylePtrFromObjectManipulator(ObjectManipulator, &v7);
  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7);
  if (v3)
  TXTextLayout::doReset3DExtrusionProperties(v3);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1B29387A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TXTextStylePtrFromObjectManipulator(OZObjectManipulator *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *lpsrc;
  std::__shared_weak_count *v12;

  if (a1
  {
    std::shared_ptr<OZStyle>::shared_ptr[abi:ne180100]<OZStyle,void>(&lpsrc, v3 + 7);
    if (lpsrc
    {
      v5 = v12;
      *a2 = v4;
      a2[1] = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    v8 = v12;
    if (v12)
    {
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1B29388A4(void *a1)
{
  uint64_t *v1;
  OZSceneNode **v2;
  TXTextStyle *v3;

  __cxa_begin_catch(a1);
  v3 = (TXTextStyle *)operator new();
  TXTextStyle::TXTextStyle(v3, (const TXTextStyle *)v2, v2[63], 0);
  std::shared_ptr<TXTextStyle>::shared_ptr[abi:ne180100]<TXTextStyle,void>(v1, (uint64_t)v3);
  __cxa_end_catch();
  JUMPOUT(0x1B2938890);
}

void sub_1B29388E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40C76692BFLL);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void TXKerningResetCallback(OZChannelBase *a1, void *a2)
{
  OZObjectManipulator *ObjectManipulator;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  (*((void (**)(OZChannelBase *, _QWORD))a1->var0 + 35))(a1, 0);
  ObjectManipulator = (OZObjectManipulator *)OZChannelBase::getObjectManipulator(a1);
  TXTextStylePtrFromObjectManipulator(ObjectManipulator, &v8);
  v4 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  if (v4)
  TXTextLayout::resetKernings((TXTextLayout *)v4);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B29389C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *TXTextStyle::create@<X0>(TXTextStyle *this@<X0>, const PCString *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t Style;
  __int128 v6;

  v6 = xmmword_1B3054220;
  Style = OZApplication::createStyle(theApp, (unsigned int *)&v6, (uint64_t)this, (uint64_t)a2);
  return std::shared_ptr<TXTextStyle>::shared_ptr[abi:ne180100]<TXTextStyle,void>(a3, Style);
}

void TXTextStyle::TXTextStyle(TXTextStyle *this, OZSceneNode **a2, char a3)
{
  TXTextStyle::TXTextStyle(this, (const TXTextStyle *)a2, a2[63], a3);
}

void TXTextStyle::TXTextStyle(TXTextStyle *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCSharedCount *v6;
  PCSharedCount *v7;
  PCURL *v8;
  PCURL *v9;
  TXTextStyle::TXTextStyle_sizeInfo *v10;
  OZChannelInfo *Instance;
  PCURL *v12;
  PCURL *v13;
  TXTextStyle::TXTextStyle_oldTrackingInfo *v14;
  OZChannelInfo *v15;
  PCURL *v16;
  TXTextStyle::TXTextStyle_kerningImpl *v17;
  TXTextStyle::TXTextStyle_kerningInfo *v18;
  OZChannelInfo *v19;
  PCURL *v20;
  TXTextStyle::TXTextStyle_baselineInfo *v21;
  OZChannelInfo *v22;
  PCURL *v23;
  TXTextStyle::TXTextStyle_slantImpl *v24;
  TXTextStyle::TXTextStyle_slantInfo *v25;
  OZChannelInfo *v26;
  PCURL *v27;
  PCURL *v28;
  PCURL *v29;
  PCURL *v30;
  PCURL *v31;
  PCURL *v32;
  PCURL *v33;
  TXTextStyle::TXTextStyle_allCapsSizeImpl *v34;
  OZChannelImpl *v35;
  PCURL *v36;
  PCURL *v37;
  PCURL *v38;
  PCURL *v39;
  PCURL *v40;
  PCURL *v41;
  PCURL *v42;
  PCURL *v43;
  TXTextStyle::TXTextStyle_faceBlurImpl *v44;
  TXTextStyle::TXTextStyle_faceBlurInfo *v45;
  OZChannelInfo *v46;
  PCURL *v47;
  PCURL *v48;
  PCURL *v49;
  PCURL *v50;
  PCURL *v51;
  PCURL *v52;
  PCURL *v53;
  PCURL *v54;
  TXTextStyle::TXTextStyle_dropShadowOpacityImpl *v55;
  OZChannelImpl *v56;
  PCURL *v57;
  TXTextStyle::TXTextStyle_dropShadowBlurImpl *v58;
  TXTextStyle::TXTextStyle_dropShadowBlurInfo *v59;
  OZChannelInfo *v60;
  PCURL *v61;
  PCURL *v62;
  PCURL *v63;
  TXTextStyle::TXTextStyle_dropShadowDistanceImpl *v64;
  TXTextStyle::TXTextStyle_dropShadowDistanceInfo *v65;
  OZChannelInfo *v66;
  PCURL *v67;
  TXTextStyle::TXTextStyle_dropShadowAngleImpl *v68;
  OZChannelImpl *v69;
  PCURL *v70;
  PCURL *v71;
  PCURL *v72;
  PCURL *v73;
  PCURL *v74;
  PCURL *v75;
  PCURL *v76;
  PCURL *v77;
  PCURL *v78;
  TXTextStyle::TXTextStyle_outlineBlurImpl *v79;
  TXTextStyle::TXTextStyle_outlineBlurInfo *v80;
  OZChannelInfo *v81;
  PCURL *v82;
  PCURL *v83;
  TXTextStyle::TXTextStyle_outlineWidthImpl *v84;
  TXTextStyle::TXTextStyle_outlineWidthInfo *v85;
  OZChannelInfo *v86;
  PCURL *v87;
  PCURL *v88;
  PCURL *v89;
  PCURL *v90;
  PCURL *v91;
  PCURL *v92;
  PCURL *v93;
  PCURL *v94;
  PCURL *v95;
  PCURL *v96;
  TXTextStyle::TXTextStyle_glowBlurImpl *v97;
  TXTextStyle::TXTextStyle_glowBlurInfo *v98;
  OZChannelInfo *v99;
  PCURL *v100;
  TXTextStyle::TXTextStyle_glowBlurImpl *v101;
  OZChannelImpl *v102;
  PCURL *v103;
  TXTextStyle::TXTextStyle_glowRadiusImpl *v104;
  TXTextStyle::TXTextStyle_glowRadiusInfo *v105;
  OZChannelInfo *v106;
  PCURL *v107;
  PCURL *v108;
  PCURL *v109;
  PCURL *v110;
  PCURL *v111;
  PCURL *v112;
  PCURL *v113;
  PCURL *v114;
  PCURL *v115;
  TXTextStyle::TXTextStyle_trackingImpl *v116;
  TXTextStyle::TXTextStyle_trackingInfo *v117;
  OZChannelInfo *v118;
  PCURL *v119;
  TXTextStyle::TXTextStyle_V4TrackingImpl *v120;
  TXTextStyle::TXTextStyle_V4TrackingInfo *v121;
  OZChannelInfo *v122;
  PCURL *v123;
  OZChannelBase *v124;
  OZFontManagerBase *v125;
  std::__shared_weak_count *v126;
  unint64_t *p_shared_owners;
  unint64_t v128;
  OZChannelBase *v129;
  OZFontManagerBase *v130;
  int DefaultFontSize;
  OZChannelBase *v132;
  PCColor *v133;
  OZChannelBase *v134;
  PCColor *v135;
  OZChannelBase *v136;
  PCColor *v137;
  __CFString *v138;
  OZChannelFolder *v139;
  OZChannelFolder *v140;
  OZChannelFolder *v141;
  OZChannelFolder *v142;
  OZChannelBase *v143;
  OZChannelBase *v144;
  OZChannel *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  PCString v148;
  PCSharedCount v149;

  OZTextStyle::OZTextStyle(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E65000F8;
  *(_QWORD *)(v5 + 16) = &unk_1E65002B8;
  *(_QWORD *)(v5 + 48) = &unk_1E6500510;
  *(_OWORD *)(v5 + 520) = 0u;
  PCSharedCount::PCSharedCount(&v149);
  PCURL::PCURL((PCURL *)&v148, CFSTR("Text Format Collection"));
  TXCollectionEnum::TXCollectionEnum((TXTextStyle *)((char *)this + 536), 0, (const PCString *)&v149, &v148, (OZChannelFolder *)((char *)this + 72), 0x30u, 8, 0, 0);
  PCString::~PCString(&v148);
  PCString::~PCString((PCString *)&v149);
  PCSharedCount::PCSharedCount(v6);
  PCURL::PCURL((PCURL *)&v148, CFSTR("Text Format Family"));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 792), (const PCString *)&v149, &v148, (OZChannelFolder *)((char *)this + 72), 1u, 8u, 0, 0);
  PCString::~PCString(&v148);
  PCString::~PCString((PCString *)&v149);
  PCSharedCount::PCSharedCount(v7);
  PCURL::PCURL((PCURL *)&v148, CFSTR("Text Format Typeface"));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 1048), (const PCString *)&v149, &v148, (OZChannelFolder *)((char *)this + 72), 2u, 8u, 0, 0);
  PCString::~PCString(&v148);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v8, CFSTR("Text Font Folder"));
  v144 = (OZChannelBase *)((char *)this + 1304);
  TXChannelFont::TXChannelFont((TXTextStyle *)((char *)this + 1304), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0x53u, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v9, CFSTR("Text Format Size"));
  Instance = (OZChannelInfo *)TXTextStyle::TXTextStyle_sizeInfo::getInstance(v10);
  v145 = (OZChannel *)((char *)this + 1976);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 1976), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 3u, 0, 0, Instance);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v12, CFSTR("Text Spacing Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 2128), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0x51u, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v13, CFSTR("Text Format Tracking"));
  v15 = (OZChannelInfo *)TXTextStyle::TXTextStyle_oldTrackingInfo::getInstance(v14);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 2256), 0.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 4u, 0, 0, v15);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v16, CFSTR("Text Format Kerning"));
  v18 = (TXTextStyle::TXTextStyle_kerningInfo *)TXTextStyle::TXTextStyle_kerningImpl::getInstance(v17);
  v19 = (OZChannelInfo *)TXTextStyle::TXTextStyle_kerningInfo::getInstance(v18);
  v143 = (OZChannelBase *)((char *)this + 2408);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 2408), 0.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 2128), 5u, 136, (OZChannelImpl *)v18, v19);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v20, CFSTR("Text Format Baseline"));
  v22 = (OZChannelInfo *)TXTextStyle::TXTextStyle_baselineInfo::getInstance(v21);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 2560), 0.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 6u, 0, 0, v22);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v23, CFSTR("Text Format Slant"));
  v25 = (TXTextStyle::TXTextStyle_slantInfo *)TXTextStyle::TXTextStyle_slantImpl::getInstance(v24);
  v26 = (OZChannelInfo *)TXTextStyle::TXTextStyle_slantInfo::getInstance(v25);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 2712), 0.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 7u, 0, (OZChannelImpl *)v25, v26);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v27, CFSTR("Text Format Scale"));
  OZChannelScale3D::OZChannelScale3D((TXTextStyle *)((char *)this + 2864), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 8u, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v28, CFSTR("Text Format Offset"));
  OZChannelPosition3D::OZChannelPosition3D((TXTextStyle *)((char *)this + 3456), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 9u, 0, 3u);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v29, CFSTR("Text Format Rotation"));
  OZChannelRotation3D::OZChannelRotation3D((TXTextStyle *)((char *)this + 4344), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0x41u, 0, 4u, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v30, CFSTR("Text Format Rotation"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 5200), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0xAu, 0, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v31, CFSTR("Text Format Monospace"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5352), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0xBu, 0, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v32, CFSTR("Text Format All Caps"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5504), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0xCu, 0, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v33, CFSTR("Text Format All Caps Size"));
  v35 = (OZChannelImpl *)TXTextStyle::TXTextStyle_allCapsSizeImpl::getInstance(v34);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5656), 0.8, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0xDu, 0, v35, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v36, CFSTR("Text Style Preview"));
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 5808), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0x3Fu, 2, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v37, CFSTR("Text Face"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 5960), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0xEu, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v38, CFSTR("Text Face Color Source Enum"));
  PCURL::PCURL((PCURL *)&v148, CFSTR("Text Face Color Source"));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 6088), (const PCString *)&v149, &v148, (OZChannelFolder *)((char *)this + 5960), 0xFu, 0, 0, 0);
  PCString::~PCString(&v148);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v39, CFSTR("Text Face Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 6344), 1.0, 1.0, 1.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 5960), 0x10u, 0, 5u);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v40, CFSTR("Text Face Gradient"));
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 7352), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 5960), 0x11u, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v41, CFSTR("Text Face Texture"));
  v142 = (OZChannelFolder *)((char *)this + 8560);
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 8560), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 5960), 0x12u, 0);
  PCString::~PCString((PCString *)&v149);
  *((_QWORD *)this + 1268) = 0;
  PCURL::PCURL(v42, CFSTR("Text Face Opacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 10152), 1.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 5960), 0x13u, 0, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v43, CFSTR("Text Face Blur"));
  v45 = (TXTextStyle::TXTextStyle_faceBlurInfo *)TXTextStyle::TXTextStyle_faceBlurImpl::getInstance(v44);
  v46 = (OZChannelInfo *)TXTextStyle::TXTextStyle_faceBlurInfo::getInstance(v45);
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 10304), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 5960), 0x4Au, 0, 2u, (OZChannelImpl *)v45, v46);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v47, CFSTR("Text Face Blur"));
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 10744), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 5960), 0x14u, 2, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v48, CFSTR("Text Face Four Corner"));
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 10896), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 5960), 0x43u, 0, 4u);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v49, CFSTR("Text Drop Shadow"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 13848), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0x15u, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v50, CFSTR("Text Drop Shadow Color Source Enum"));
  PCURL::PCURL((PCURL *)&v148, CFSTR("Text Drop Shadow Color Source"));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 13976), (const PCString *)&v149, &v148, (OZChannelFolder *)((char *)this + 13848), 0x16u, 0, 0, 0);
  PCString::~PCString(&v148);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v51, CFSTR("Text Drop Shadow Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 14232), 0.0, 0.0, 0.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 13848), 0x17u, 0, 5u);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v52, CFSTR("Text Drop Shadow Gradient"));
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 15240), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 13848), 0x18u, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v53, CFSTR("Text Drop Shadow Texture"));
  v141 = (OZChannelFolder *)((char *)this + 16448);
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 16448), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 13848), 0x19u, 0);
  PCString::~PCString((PCString *)&v149);
  *((_QWORD *)this + 2254) = 0;
  PCURL::PCURL(v54, CFSTR("Text Drop Shadow Opacity"));
  v56 = (OZChannelImpl *)TXTextStyle::TXTextStyle_dropShadowOpacityImpl::getInstance(v55);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 18040), 0.75, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 13848), 0x1Au, 0, v56, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v57, CFSTR("Text Drop Shadow Blur"));
  v59 = (TXTextStyle::TXTextStyle_dropShadowBlurInfo *)TXTextStyle::TXTextStyle_dropShadowBlurImpl::getInstance(v58);
  v60 = (OZChannelInfo *)TXTextStyle::TXTextStyle_dropShadowBlurInfo::getInstance(v59);
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 18192), 0.0, 0.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 13848), 0x4Bu, 0, 2u, (OZChannelImpl *)v59, v60);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v61, CFSTR("Text Drop Shadow Blur"));
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 18632), 0.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 13848), 0x1Cu, 2, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v62, CFSTR("Text Drop Shadow Scale"));
  OZChannelScale::OZChannelScale((TXTextStyle *)((char *)this + 18784), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 13848), 0x31u, 0, 2u, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v63, CFSTR("Text Drop Shadow Distance"));
  v65 = (TXTextStyle::TXTextStyle_dropShadowDistanceInfo *)TXTextStyle::TXTextStyle_dropShadowDistanceImpl::getInstance(v64);
  v66 = (OZChannelInfo *)TXTextStyle::TXTextStyle_dropShadowDistanceInfo::getInstance(v65);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 19224), 5.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 13848), 0x1Bu, 0, (OZChannelImpl *)v65, v66);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v67, CFSTR("Text Drop Shadow Angle"));
  v69 = (OZChannelImpl *)TXTextStyle::TXTextStyle_dropShadowAngleImpl::getInstance(v68);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 19376), 5.49778714, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 13848), 0x1Du, 0, v69, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v70, CFSTR("Text Drop Shadow Fixed Source"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19528), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 13848), 0x42u, 0, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v71, CFSTR("Text Drop Shadow Four Corner"));
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 19680), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 13848), 0x44u, 0, 4u);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v72, CFSTR("Text Outline"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 22632), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0x1Eu, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v73, CFSTR("Text Outline Color Source Enum"));
  PCURL::PCURL((PCURL *)&v148, CFSTR("Text Outline Color Source"));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 22760), (const PCString *)&v149, &v148, (OZChannelFolder *)((char *)this + 22632), 0x1Fu, 0, 0, 0);
  PCString::~PCString(&v148);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v74, CFSTR("Text Outline Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 23016), 1.0, 0.0, 0.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 22632), 0x20u, 0, 5u);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v75, CFSTR("Text Outline Gradient"));
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 24024), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 22632), 0x21u, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v76, CFSTR("Text Outline Texture"));
  v140 = (OZChannelFolder *)((char *)this + 25232);
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 25232), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 22632), 0x22u, 0);
  PCString::~PCString((PCString *)&v149);
  *((_QWORD *)this + 3352) = 0;
  PCURL::PCURL(v77, CFSTR("Text Outline Opacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 26824), 1.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 22632), 0x23u, 0, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v78, CFSTR("Text Outline Blur"));
  v80 = (TXTextStyle::TXTextStyle_outlineBlurInfo *)TXTextStyle::TXTextStyle_outlineBlurImpl::getInstance(v79);
  v81 = (OZChannelInfo *)TXTextStyle::TXTextStyle_outlineBlurInfo::getInstance(v80);
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 26976), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 22632), 0x4Cu, 0, 2u, (OZChannelImpl *)v80, v81);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v82, CFSTR("Text Outline Blur"));
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 27416), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 22632), 0x25u, 2, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v83, CFSTR("Text Outline Width"));
  v85 = (TXTextStyle::TXTextStyle_outlineWidthInfo *)TXTextStyle::TXTextStyle_outlineWidthImpl::getInstance(v84);
  v86 = (OZChannelInfo *)TXTextStyle::TXTextStyle_outlineWidthInfo::getInstance(v85);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 27568), 1.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 22632), 0x24u, 0, (OZChannelImpl *)v85, v86);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v87, CFSTR("Text Outline Layer Order Enum"));
  PCURL::PCURL((PCURL *)&v148, CFSTR("Text Outline Layer Order"));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 27720), (const PCString *)&v149, &v148, (OZChannelFolder *)((char *)this + 22632), 0x32u, 0, 0, 0);
  PCString::~PCString(&v148);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v88, CFSTR("Text Outline Four Corner"));
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 27976), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 22632), 0x45u, 0, 4u);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v89, CFSTR("Text Outline Method"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 30928), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 22632), 0x54u, 2u, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v90, CFSTR("Text Glow"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 31080), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0x26u, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v91, CFSTR("Text Glow Color Source Enum"));
  PCURL::PCURL((PCURL *)&v148, CFSTR("Text Glow Color Source"));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 31208), (const PCString *)&v149, &v148, (OZChannelFolder *)((char *)this + 31080), 0x27u, 0, 0, 0);
  PCString::~PCString(&v148);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v92, CFSTR("Text Glow Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 31464), 1.0, 0.878431373, 0.262745098, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 31080), 0x28u, 0, 5u);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v93, CFSTR("Text Glow Gradient"));
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 32472), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 31080), 0x29u, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v94, CFSTR("Text Glow Texture"));
  v139 = (OZChannelFolder *)((char *)this + 33680);
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 33680), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 31080), 0x2Au, 0);
  PCString::~PCString((PCString *)&v149);
  *((_QWORD *)this + 4408) = 0;
  PCURL::PCURL(v95, CFSTR("Text Glow Opacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 35272), 1.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 31080), 0x2Bu, 0, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v96, CFSTR("Text Glow Blur"));
  v98 = (TXTextStyle::TXTextStyle_glowBlurInfo *)TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(v97);
  v99 = (OZChannelInfo *)TXTextStyle::TXTextStyle_glowBlurInfo::getInstance(v98);
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 35424), 1.0, 1.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 31080), 0x4Du, 0, 2u, (OZChannelImpl *)v98, v99);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v100, CFSTR("Text Glow Blur"));
  v102 = (OZChannelImpl *)TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(v101);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 35864), 1.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 31080), 0x2Cu, 2, v102, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v103, CFSTR("Text Glow Radius"));
  v105 = (TXTextStyle::TXTextStyle_glowRadiusInfo *)TXTextStyle::TXTextStyle_glowRadiusImpl::getInstance(v104);
  v106 = (OZChannelInfo *)TXTextStyle::TXTextStyle_glowRadiusInfo::getInstance(v105);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 36016), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 31080), 0x2Du, 0, (OZChannelImpl *)v105, v106);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v107, CFSTR("Text Glow Scale"));
  OZChannelScale::OZChannelScale((TXTextStyle *)((char *)this + 36168), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 31080), 0x2Eu, 0, 2u, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v108, CFSTR("Text Glow Offset"));
  OZChannelPosition::OZChannelPosition((TXTextStyle *)((char *)this + 36608), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 31080), 0x2Fu, 0, 2u, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v109, CFSTR("Text Glow Layer Order Enum"));
  PCURL::PCURL((PCURL *)&v148, CFSTR("Text Glow Layer Order"));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 37312), (const PCString *)&v149, &v148, (OZChannelFolder *)((char *)this + 31080), 0x33u, 0, 0, 0);
  PCString::~PCString(&v148);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v110, CFSTR("Text Glow Four Corner"));
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 37568), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 31080), 0x46u, 0, 4u);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v111, CFSTR("Text Style 3D Extrusion Properties"));
  OZ3DExtrusionProperties::OZ3DExtrusionProperties((TXTextStyle *)((char *)this + 40520), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0x59u, 0, 0);
  PCString::~PCString((PCString *)&v149);
  *((_QWORD *)this + 6118) = 0;
  *(_OWORD *)((char *)this + 48904) = 0u;
  *(_OWORD *)((char *)this + 48920) = 0u;
  *((_DWORD *)this + 12234) = 0;
  *((_DWORD *)this + 12238) = 0xFFFF;
  PCURL::PCURL(v112, CFSTR("Text Link Drop Shadow Four Corner To Face"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 48960), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 13848), 0x47u, 0xAu, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v113, CFSTR("Text Link Outline Four Corner To Face"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 49112), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 22632), 0x48u, 0xAu, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v114, CFSTR("Text Link Glow Four Corner To Face"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 49264), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 31080), 0x49u, 0xAu, 0, 0);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v115, CFSTR("Text Format Tracking"));
  v117 = (TXTextStyle::TXTextStyle_trackingInfo *)TXTextStyle::TXTextStyle_trackingImpl::getInstance(v116);
  v118 = (OZChannelInfo *)TXTextStyle::TXTextStyle_trackingInfo::getInstance(v117);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 49416), 0.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 2128), 0x4Fu, 0, (OZChannelImpl *)v117, v118);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v119, CFSTR("Text Format Tracking"));
  v121 = (TXTextStyle::TXTextStyle_V4TrackingInfo *)TXTextStyle::TXTextStyle_V4TrackingImpl::getInstance(v120);
  v122 = (OZChannelInfo *)TXTextStyle::TXTextStyle_V4TrackingInfo::getInstance(v121);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 49568), 0.0, (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0x4Fu, 2u, (OZChannelImpl *)v121, v122);
  PCString::~PCString((PCString *)&v149);
  PCURL::PCURL(v123, CFSTR("Text Advanced Formatting"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 49720), (const PCString *)&v149, (OZChannelFolder *)((char *)this + 72), 0x5Au, 2u, 0);
  PCString::~PCString((PCString *)&v149);
  *(_DWORD *)((char *)this + 49855) = 0;
  *((_QWORD *)this + 6231) = 0;
  PCURL::PCURL((TXTextStyle *)((char *)this + 49864), CFSTR("Text Style Preview Default Text"));
  *((_OWORD *)this + 3117) = 0u;
  PCMutex::PCMutex((PCMutex *)((char *)this + 49888));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 72), 0x4000000, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 72));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 72), 0x80000);
  v124 = OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 72));
  v125 = (OZFontManagerBase *)TXFontManager::getInstance((TXFontManager *)v124);
  OZFontManagerBase::getDefaultSystemFontFace(v125, &v146);
  TXTextStyle::setFont((uint64_t)this, &v146);
  v126 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v128 = __ldaxr(p_shared_owners);
    while (__stlxr(v128 - 1, p_shared_owners));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = OZChannelBase::setFlag(v144, 0x100000000, 0);
  v130 = (OZFontManagerBase *)TXFontManager::getInstance((TXFontManager *)v129);
  DefaultFontSize = OZFontManagerBase::getDefaultFontSize(v130);
  OZChannel::setDefaultValue(v145, (double)DefaultFontSize);
  OZChannelBase::reset((OZChannelBase *)v145, 0);
  OZChannel::setMin(v145, 6.0);
  OZChannel::setMax(v145, 4096.0);
  OZChannelBase::setResetCallback(v143, TXKerningResetCallback, 0, 0);
  OZChannelFolder::resetFoldFlag(v142, 15);
  OZChannel::setValue((OZChannel *)((char *)this + 9888), MEMORY[0x1E0CA2E68], 1.0, 0);
  v132 = OZChannelFolder::saveStateAsDefault(v142);
  v133 = (PCColor *)PCColor::WHITE((PCColor *)v132);
  OZChannelColorNoAlpha::setDefaultColor((TXTextStyle *)((char *)this + 6344), v133);
  OZChannelFolder::resetFoldFlag(v141, 15);
  OZChannel::setValue((OZChannel *)((char *)this + 17776), MEMORY[0x1E0CA2E68], 1.0, 0);
  OZChannelFolder::saveStateAsDefault(v141);
  OZChannelFolder::resetFoldFlag(v140, 15);
  OZChannel::setValue((OZChannel *)((char *)this + 26560), MEMORY[0x1E0CA2E68], 1.0, 0);
  OZChannelFolder::saveStateAsDefault(v140);
  v134 = OZChannelBase::enable((OZChannelBase *)((char *)this + 22632), 0, 0);
  v135 = (PCColor *)PCColor::RED((PCColor *)v134);
  OZChannelColorNoAlpha::setDefaultColor((TXTextStyle *)((char *)this + 23016), v135);
  OZChannel::setValue((OZChannel *)((char *)this + 30928), MEMORY[0x1E0CA2E68], 1.0, 0);
  OZChannelFolder::resetFoldFlag(v139, 15);
  OZChannel::setValue((OZChannel *)((char *)this + 35008), MEMORY[0x1E0CA2E68], 1.0, 0);
  OZChannelFolder::saveStateAsDefault(v139);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 31080), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 31080), 2048, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 31080));
  v136 = OZChannelBase::enable((OZChannelBase *)((char *)this + 13848), 0, 0);
  v137 = (PCColor *)PCColor::BLACK((PCColor *)v136);
  OZChannelColorNoAlpha::setDefaultColor((TXTextStyle *)((char *)this + 14232), v137);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 5960), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 5960));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 13848), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 13848));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 22632), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 22632));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 31080), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 31080));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 40520), 0x20000);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 40520), 4);
  OZChannelBase::setLabelCtlrClassName((OZChannelBase *)((char *)this + 40520), CFSTR("TX3DExtrusionPropsLabelController"));
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 536), CFSTR("TXCollectionPopUpController"));
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 5808), CFSTR("TXStylePreviewController"));
  OZChannelBase::setParameterCtlrClassName(v144, CFSTR("TXFontController"));
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)this + 19, CFSTR("TXSpacingController"));
  OZChannelBase::setParameterCtlrClassName(v143, CFSTR("TXKerningController"));
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 5960), CFSTR("OZTXStyleAttributeFolderGroupController"));
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 22632), CFSTR("OZTXStyleAttributeFolderGroupController"));
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 31080), CFSTR("OZTXStyleAttributeFolderGroupController"));
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 13848), CFSTR("OZTXStyleAttributeFolderGroupController"));
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 40520), TX3DExtrusionPropertiesChannelResetCallback, 0, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 49720), 8388612);
  if (*(_BYTE *)(theApp + 80))
    v138 = CFSTR("OZChanLabelController");
  else
    v138 = CFSTR("OZMoChanLabelCltr");
  OZChannelBase::setLabelCtlrClassName(v144, v138);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 72), 0x40000);
}

void sub_1B293A4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCMutex *a11, PCString *a12, OZChannelPercent *a13, OZChannelPercent *a14, OZChannelBool *a15, OZChannelBool *a16, OZChannelBool *a17, OZChannelQuad *a18, OZChannelEnum *a19, OZChannelPosition *a20,OZChannel2D *a21,OZChannel *a22,OZChannel *a23,OZChannel2D *a24,OZChannelPercent *a25,OZChannelGradientWithAngle *a26,OZChannelColorNoAlpha *a27,OZChannelEnum *a28,OZChannelQuad *a29,OZChannelEnum *a30,OZChannelEnum *a31,OZChannelEnum *a32,uint64_t a33,OZChannel *a34,OZChannel *a35,OZChannel2D *a36,OZChannelPercent *a37,OZChannelGradientWithAngle *a38,OZChannelEnum *a39,OZChannelQuad *a40,OZChannelBool *a41,OZChannel *a42,OZChannel *a43,OZChannel2D *a44,OZChannel *a45,OZChannel2D *a46,OZChannelPercent *a47,OZChannelGradientWithAngle *a48,OZChannelEnum *a49,OZChannelQuad *a50,OZChannel *a51,OZChannel2D *a52,OZChannelPercent *a53,OZChannelGradientWithAngle *a54,OZChannelEnum *a55,OZChannelPercent *a56,OZChannelBool *a57,OZChannelBool *a58,OZChannel *a59,OZChannelRotation3D *a60,OZChannelPosition3D *a61,OZChannelScale3D *a62)
{
  OZTextStyle *v62;
  OZChannelFolder *v63;
  OZChannelFolder *v64;
  OZChannelFolder *v65;
  OZChannelFolder *v66;
  OZ3DExtrusionProperties *v67;
  OZChannelFolder *v68;
  uint64_t v69;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v69 - 120);
  PCMutex::~PCMutex(a11);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v62 + 49872);
  PCString::~PCString(a12);
  OZChannelFolder::~OZChannelFolder(v68);
  OZChannelPercent::~OZChannelPercent(a13);
  OZChannelPercent::~OZChannelPercent(a14);
  OZChannelBool::~OZChannelBool(a15);
  OZChannelBool::~OZChannelBool(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZ3DExtrusionProperties::~OZ3DExtrusionProperties(v67);
  OZChannelQuad::~OZChannelQuad(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelPosition::~OZChannelPosition(a20);
  OZChannel2D::~OZChannel2D(a21);
  OZChannel::~OZChannel(a22);
  OZChannel::~OZChannel(a23);
  OZChannel2D::~OZChannel2D(a24);
  OZChannelPercent::~OZChannelPercent(a25);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(*(OZChannelImageWithOptions **)(v69 - 184));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a26);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a27);
  OZChannelEnum::~OZChannelEnum(a28);
  OZChannelFolder::~OZChannelFolder(v66);
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v69 - 232));
  OZChannelQuad::~OZChannelQuad(a29);
  OZChannelEnum::~OZChannelEnum(a30);
  OZChannel::~OZChannel(a34);
  OZChannel::~OZChannel(a35);
  OZChannel2D::~OZChannel2D(a36);
  OZChannelPercent::~OZChannelPercent(a37);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(*(OZChannelImageWithOptions **)(v69 - 176));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a38);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v69 - 224));
  OZChannelEnum::~OZChannelEnum(a39);
  OZChannelFolder::~OZChannelFolder(v63);
  OZChannelQuad::~OZChannelQuad(a40);
  OZChannelBool::~OZChannelBool(a41);
  OZChannel::~OZChannel(a42);
  OZChannel::~OZChannel(a43);
  OZChannel2D::~OZChannel2D(a44);
  OZChannel::~OZChannel(a45);
  OZChannel2D::~OZChannel2D(a46);
  OZChannelPercent::~OZChannelPercent(a47);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(*(OZChannelImageWithOptions **)(v69 - 168));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a48);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v69 - 216));
  OZChannelEnum::~OZChannelEnum(a49);
  OZChannelFolder::~OZChannelFolder(v64);
  OZChannelQuad::~OZChannelQuad(a50);
  OZChannel::~OZChannel(a51);
  OZChannel2D::~OZChannel2D(a52);
  OZChannelPercent::~OZChannelPercent(a53);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(*(OZChannelImageWithOptions **)(v69 - 160));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a54);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v69 - 200));
  OZChannelEnum::~OZChannelEnum(a55);
  OZChannelFolder::~OZChannelFolder(v65);
  OZChannel::~OZChannel(*(OZChannel **)(v69 - 208));
  OZChannelPercent::~OZChannelPercent(a56);
  OZChannelBool::~OZChannelBool(a57);
  OZChannelBool::~OZChannelBool(a58);
  OZChannel::~OZChannel(a59);
  OZChannelRotation3D::~OZChannelRotation3D(a60);
  OZChannelPosition3D::~OZChannelPosition3D(a61);
  OZChannelScale3D::~OZChannelScale3D(a62);
  OZChannel::~OZChannel(*(OZChannel **)(v69 - 256));
  OZChannel::~OZChannel(*(OZChannel **)(v69 - 248));
  OZChannel::~OZChannel(*(OZChannel **)(v69 - 152));
  OZChannel::~OZChannel(*(OZChannel **)(v69 - 240));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v69 - 136));
  OZChannel::~OZChannel(*(OZChannel **)(v69 - 128));
  OZChannelFontBase::~OZChannelFontBase(*(PCString **)(v69 - 144));
  OZChannelEnum::~OZChannelEnum(a31);
  OZChannelEnum::~OZChannelEnum(a32);
  TXCollectionEnum::~TXCollectionEnum(*(TXCollectionEnum **)(v69 - 192));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a33);
  OZTextStyle::~OZTextStyle(v62);
  _Unwind_Resume(a1);
}

void TXTextStyle::setFont(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(a1 + 520), a2);
  PCMutex::lock((PCMutex *)(a1 + 49888));
  std::shared_ptr<OZFontFace>::reset[abi:ne180100]((_QWORD *)(a1 + 49872));
  PCMutex::unlock((PCMutex *)(a1 + 49888));
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(v4 + 32);
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(v4 + 32);
  }
}

void TXTextStyle::TXTextStyle(TXTextStyle *this, const TXTextStyle *a2, OZSceneNode *a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  OZTextStyle::OZTextStyle(this, a2, a3, a4);
  *(_QWORD *)v6 = &off_1E65000F8;
  *(_QWORD *)(v6 + 16) = &unk_1E65002B8;
  *(_QWORD *)(v6 + 48) = &unk_1E6500510;
  *(_DWORD *)(v6 + 512) = *((_DWORD *)a2 + 128);
  *(_QWORD *)(v6 + 520) = *((_QWORD *)a2 + 65);
  v7 = *((_QWORD *)a2 + 66);
  *(_QWORD *)(v6 + 528) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  TXCollectionEnum::TXCollectionEnum((TXTextStyle *)((char *)this + 536), (const TXTextStyle *)((char *)a2 + 536), (OZChannelFolder *)((char *)this + 72));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 792), (const TXTextStyle *)((char *)a2 + 792), (OZChannelFolder *)((char *)this + 72));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 1048), (const TXTextStyle *)((char *)a2 + 1048), (OZChannelFolder *)((char *)this + 72));
  TXChannelFont::TXChannelFont((TXTextStyle *)((char *)this + 1304), (const TXTextStyle *)((char *)a2 + 1304), (OZChannelFolder *)((char *)this + 72));
  OZChannel::OZChannel((OZChannel *)this + 13, (const OZChannelBase *)((char *)a2 + 1976), (OZChannelFolder *)((char *)this + 72));
  *((_QWORD *)this + 247) = &off_1E6551358;
  *((_QWORD *)this + 249) = &unk_1E65516B8;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 2128), (const OZChannelFolder *)((char *)a2 + 2128), (OZChannelFolder *)((char *)this + 72));
  OZChannel::OZChannel((OZChannel *)((char *)this + 2256), (const OZChannelBase *)((char *)a2 + 2256), (OZChannelFolder *)((char *)this + 72));
  *((_QWORD *)this + 282) = &off_1E6551358;
  *((_QWORD *)this + 284) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2408), (const OZChannelBase *)((char *)a2 + 2408), (OZChannelFolder *)((char *)this + 2128));
  *((_QWORD *)this + 301) = &off_1E6551358;
  *((_QWORD *)this + 303) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2560), (const OZChannelBase *)((char *)a2 + 2560), (OZChannelFolder *)((char *)this + 72));
  *((_QWORD *)this + 320) = &off_1E6551358;
  *((_QWORD *)this + 322) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2712), (const OZChannelBase *)((char *)a2 + 2712), (OZChannelFolder *)((char *)this + 72));
  *((_QWORD *)this + 339) = &off_1E6551358;
  *((_QWORD *)this + 341) = &unk_1E65516B8;
  OZChannelScale3D::OZChannelScale3D((TXTextStyle *)((char *)this + 2864), (const TXTextStyle *)((char *)a2 + 2864), (OZChannelFolder *)((char *)this + 72));
  OZChannelPosition3D::OZChannelPosition3D((TXTextStyle *)((char *)this + 3456), (const TXTextStyle *)((char *)a2 + 3456), (OZChannelFolder *)((char *)this + 72));
  OZChannelRotation3D::OZChannelRotation3D((TXTextStyle *)((char *)this + 4344), (const TXTextStyle *)((char *)a2 + 4344), (OZChannelFolder *)((char *)this + 72));
  OZChannel::OZChannel((OZChannel *)((char *)this + 5200), (const OZChannelBase *)((char *)a2 + 5200), (OZChannelFolder *)((char *)this + 72));
  *((_QWORD *)this + 650) = &off_1E6551728;
  *((_QWORD *)this + 652) = &unk_1E6551A88;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5352), (const OZChannelBase *)((char *)a2 + 5352), (OZChannelFolder *)((char *)this + 72));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5504), (const OZChannelBase *)((char *)a2 + 5504), (OZChannelFolder *)((char *)this + 72));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5656), (const OZChannelBase *)((char *)a2 + 5656), (OZChannelFolder *)((char *)this + 72));
  OZChannel::OZChannel((OZChannel *)((char *)this + 5808), (const OZChannelBase *)((char *)a2 + 5808), (OZChannelFolder *)((char *)this + 72));
  *((_QWORD *)this + 726) = &off_1E6551358;
  *((_QWORD *)this + 728) = &unk_1E65516B8;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 5960), (const OZChannelFolder *)((char *)a2 + 5960), (OZChannelFolder *)((char *)this + 72));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 6088), (const TXTextStyle *)((char *)a2 + 6088), (OZChannelFolder *)((char *)this + 5960));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 6344), (const TXTextStyle *)((char *)a2 + 6344), (OZChannelFolder *)((char *)this + 5960));
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 7352), (const TXTextStyle *)((char *)a2 + 7352), (OZChannelFolder *)((char *)this + 5960));
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 8560), (const TXTextStyle *)((char *)a2 + 8560), (OZChannelFolder *)((char *)this + 5960));
  *((_QWORD *)this + 1268) = 0;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 10152), (const OZChannelBase *)((char *)a2 + 10152), (OZChannelFolder *)((char *)this + 5960));
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 10304), (const TXTextStyle *)((char *)a2 + 10304), (OZChannelFolder *)((char *)this + 5960));
  OZChannel::OZChannel((OZChannel *)((char *)this + 10744), (const OZChannelBase *)((char *)a2 + 10744), (OZChannelFolder *)((char *)this + 5960));
  *((_QWORD *)this + 1343) = &off_1E6551358;
  *((_QWORD *)this + 1345) = &unk_1E65516B8;
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 10896), (const TXTextStyle *)((char *)a2 + 10896), (OZChannelFolder *)((char *)this + 5960));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 13848), (const OZChannelFolder *)((char *)a2 + 13848), (OZChannelFolder *)((char *)this + 72));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 13976), (const TXTextStyle *)((char *)a2 + 13976), (OZChannelFolder *)((char *)this + 13848));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 14232), (const TXTextStyle *)((char *)a2 + 14232), (OZChannelFolder *)((char *)this + 13848));
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 15240), (const TXTextStyle *)((char *)a2 + 15240), (OZChannelFolder *)((char *)this + 13848));
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 16448), (const TXTextStyle *)((char *)a2 + 16448), (OZChannelFolder *)((char *)this + 13848));
  *((_QWORD *)this + 2254) = 0;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 18040), (const OZChannelBase *)((char *)a2 + 18040), (OZChannelFolder *)((char *)this + 13848));
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 18192), (const TXTextStyle *)((char *)a2 + 18192), (OZChannelFolder *)((char *)this + 13848));
  OZChannel::OZChannel((OZChannel *)((char *)this + 18632), (const OZChannelBase *)((char *)a2 + 18632), (OZChannelFolder *)((char *)this + 13848));
  *((_QWORD *)this + 2329) = &off_1E6551358;
  *((_QWORD *)this + 2331) = &unk_1E65516B8;
  OZChannelScale::OZChannelScale((TXTextStyle *)((char *)this + 18784), (const TXTextStyle *)((char *)a2 + 18784), (OZChannelFolder *)((char *)this + 13848));
  OZChannel::OZChannel((OZChannel *)((char *)this + 19224), (const OZChannelBase *)((char *)a2 + 19224), (OZChannelFolder *)((char *)this + 13848));
  *((_QWORD *)this + 2403) = &off_1E6551358;
  *((_QWORD *)this + 2405) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 19376), (const OZChannelBase *)a2 + 173, (OZChannelFolder *)((char *)this + 13848));
  *((_QWORD *)this + 2422) = &off_1E6551728;
  *((_QWORD *)this + 2424) = &unk_1E6551A88;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19528), (const OZChannelBase *)((char *)a2 + 19528), (OZChannelFolder *)((char *)this + 13848));
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 19680), (const TXTextStyle *)((char *)a2 + 19680), (OZChannelFolder *)((char *)this + 13848));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 22632), (const OZChannelFolder *)((char *)a2 + 22632), (OZChannelFolder *)((char *)this + 72));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 22760), (const TXTextStyle *)((char *)a2 + 22760), (OZChannelFolder *)((char *)this + 22632));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 23016), (const TXTextStyle *)((char *)a2 + 23016), (OZChannelFolder *)((char *)this + 22632));
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 24024), (const TXTextStyle *)((char *)a2 + 24024), (OZChannelFolder *)((char *)this + 22632));
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 25232), (const TXTextStyle *)((char *)a2 + 25232), (OZChannelFolder *)((char *)this + 22632));
  *((_QWORD *)this + 3352) = 0;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 26824), (const OZChannelBase *)((char *)a2 + 26824), (OZChannelFolder *)((char *)this + 22632));
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 26976), (const TXTextStyle *)((char *)a2 + 26976), (OZChannelFolder *)((char *)this + 22632));
  OZChannel::OZChannel((OZChannel *)((char *)this + 27416), (const OZChannelBase *)((char *)a2 + 27416), (OZChannelFolder *)((char *)this + 22632));
  *((_QWORD *)this + 3427) = &off_1E6551358;
  *((_QWORD *)this + 3429) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 27568), (const OZChannelBase *)((char *)a2 + 27568), (OZChannelFolder *)((char *)this + 22632));
  *((_QWORD *)this + 3446) = &off_1E6551358;
  *((_QWORD *)this + 3448) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 27720), (const TXTextStyle *)((char *)a2 + 27720), (OZChannelFolder *)((char *)this + 22632));
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 27976), (const TXTextStyle *)((char *)a2 + 27976), (OZChannelFolder *)((char *)this + 22632));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 30928), (const OZChannelBase *)((char *)a2 + 30928), (OZChannelFolder *)((char *)this + 22632));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 31080), (const OZChannelFolder *)((char *)a2 + 31080), (OZChannelFolder *)((char *)this + 72));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 31208), (const TXTextStyle *)((char *)a2 + 31208), (OZChannelFolder *)((char *)this + 31080));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 31464), (const TXTextStyle *)((char *)a2 + 31464), (OZChannelFolder *)((char *)this + 31080));
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 32472), (const TXTextStyle *)((char *)a2 + 32472), (OZChannelFolder *)((char *)this + 31080));
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 33680), (const TXTextStyle *)((char *)a2 + 33680), (OZChannelFolder *)((char *)this + 31080));
  *((_QWORD *)this + 4408) = 0;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 35272), (const OZChannelBase *)((char *)a2 + 35272), (OZChannelFolder *)((char *)this + 31080));
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 35424), (const TXTextStyle *)((char *)a2 + 35424), (OZChannelFolder *)((char *)this + 31080));
  OZChannel::OZChannel((OZChannel *)((char *)this + 35864), (const OZChannelBase *)((char *)a2 + 35864), (OZChannelFolder *)((char *)this + 31080));
  *((_QWORD *)this + 4483) = &off_1E6551358;
  *((_QWORD *)this + 4485) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 36016), (const OZChannelBase *)((char *)a2 + 36016), (OZChannelFolder *)((char *)this + 31080));
  *((_QWORD *)this + 4502) = &off_1E6551358;
  *((_QWORD *)this + 4504) = &unk_1E65516B8;
  OZChannelScale::OZChannelScale((TXTextStyle *)((char *)this + 36168), (const TXTextStyle *)((char *)a2 + 36168), (OZChannelFolder *)((char *)this + 31080));
  OZChannelPosition::OZChannelPosition((TXTextStyle *)((char *)this + 36608), (const TXTextStyle *)((char *)a2 + 36608), (OZChannelFolder *)((char *)this + 31080));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 37312), (const TXTextStyle *)((char *)a2 + 37312), (OZChannelFolder *)((char *)this + 31080));
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 37568), (const TXTextStyle *)((char *)a2 + 37568), (OZChannelFolder *)((char *)this + 31080));
  OZ3DExtrusionProperties::OZ3DExtrusionProperties((TXTextStyle *)((char *)this + 40520), (const TXTextStyle *)((char *)a2 + 40520), (OZChannelFolder *)((char *)this + 72));
  *((_DWORD *)this + 12234) = 0;
  *(_OWORD *)((char *)this + 48904) = 0u;
  *(_OWORD *)((char *)this + 48920) = 0u;
  *((_QWORD *)this + 6118) = *((_QWORD *)a2 + 6118);
  *((_DWORD *)this + 12238) = *((_DWORD *)a2 + 12238);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 48960), (const OZChannelBase *)((char *)a2 + 48960), (OZChannelFolder *)((char *)this + 13848));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 49112), (const OZChannelBase *)((char *)a2 + 49112), (OZChannelFolder *)((char *)this + 22632));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 49264), (const OZChannelBase *)((char *)a2 + 49264), (OZChannelFolder *)((char *)this + 31080));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 49416), (const OZChannelBase *)((char *)a2 + 49416), (OZChannelFolder *)((char *)this + 2128));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 49568), (const OZChannelBase *)((char *)a2 + 49568), (OZChannelFolder *)((char *)this + 72));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 49720), (const OZChannelFolder *)((char *)a2 + 49720), (OZChannelFolder *)((char *)this + 72));
  *((_QWORD *)this + 6231) = *((_QWORD *)a2 + 6231);
  *((_WORD *)this + 24928) = *((_WORD *)a2 + 24928);
  *((_BYTE *)this + 49858) = 0;
  PCString::PCString((PCString *)this + 6233, (const PCString *)a2 + 6233);
  *((_OWORD *)this + 3117) = 0u;
  PCMutex::PCMutex((PCMutex *)((char *)this + 49888));
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 2408), TXKerningResetCallback, 0, 0);
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 40520), TX3DExtrusionPropertiesChannelResetCallback, 0, 0);
}

void sub_1B293B88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelPercent *a10, OZChannelBool *a11, OZChannelBool *a12, OZChannelBool *a13, OZChannelQuad *a14, OZChannelEnum *a15, OZChannelPosition *a16, OZChannel2D *a17, OZChannel *a18, OZChannel2D *a19, OZChannelPercent *a20,OZChannelImageWithOptions *a21,OZChannelGradientWithAngle *a22,OZChannelColorNoAlpha *a23,OZChannelEnum *a24,OZChannelBool *a25,OZChannelQuad *a26,OZChannelEnum *a27,OZChannel *a28,OZChannel *a29,OZChannel2D *a30,OZChannelPercent *a31,OZChannelImageWithOptions *a32,OZChannelGradientWithAngle *a33,OZChannelColorNoAlpha *a34,OZChannelEnum *a35,OZChannelQuad *a36,OZChannelBool *a37,OZChannel *a38,OZChannel *a39,OZChannel2D *a40,OZChannel *a41,OZChannel2D *a42,OZChannelPercent *a43,OZChannelImageWithOptions *a44,OZChannelGradientWithAngle *a45,OZChannelColorNoAlpha *a46,OZChannelEnum *a47,OZChannelQuad *a48,OZChannel *a49,OZChannel2D *a50,OZChannelPercent *a51,OZChannelImageWithOptions *a52,OZChannelGradientWithAngle *a53,OZChannelColorNoAlpha *a54)
{
  OZTextStyle *v54;
  PCString *v55;
  OZChannelFolder *v56;
  OZChannel *v57;
  OZChannelFolder *v58;
  OZChannelFolder *v59;
  OZChannelFolder *v60;
  OZChannelPercent *v61;
  uint64_t v62;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v54 + 49872);
  PCString::~PCString(v55);
  OZChannelFolder::~OZChannelFolder(v56);
  OZChannelPercent::~OZChannelPercent(v61);
  OZChannelPercent::~OZChannelPercent(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZ3DExtrusionProperties::~OZ3DExtrusionProperties(*(OZ3DExtrusionProperties **)(v62 - 104));
  OZChannelQuad::~OZChannelQuad(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelPosition::~OZChannelPosition(a16);
  OZChannel2D::~OZChannel2D(a17);
  OZChannel::~OZChannel(a18);
  OZChannel::~OZChannel(v57);
  OZChannel2D::~OZChannel2D(a19);
  OZChannelPercent::~OZChannelPercent(a20);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(a21);
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a22);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a23);
  OZChannelEnum::~OZChannelEnum(a24);
  OZChannelFolder::~OZChannelFolder(v58);
  OZChannelBool::~OZChannelBool(a25);
  OZChannelQuad::~OZChannelQuad(a26);
  OZChannelEnum::~OZChannelEnum(a27);
  OZChannel::~OZChannel(a28);
  OZChannel::~OZChannel(a29);
  OZChannel2D::~OZChannel2D(a30);
  OZChannelPercent::~OZChannelPercent(a31);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(a32);
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a33);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a34);
  OZChannelEnum::~OZChannelEnum(a35);
  OZChannelFolder::~OZChannelFolder(v60);
  OZChannelQuad::~OZChannelQuad(a36);
  OZChannelBool::~OZChannelBool(a37);
  OZChannel::~OZChannel(a38);
  OZChannel::~OZChannel(a39);
  OZChannel2D::~OZChannel2D(a40);
  OZChannel::~OZChannel(a41);
  OZChannel2D::~OZChannel2D(a42);
  OZChannelPercent::~OZChannelPercent(a43);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(a44);
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a45);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a46);
  OZChannelEnum::~OZChannelEnum(a47);
  OZChannelFolder::~OZChannelFolder(v59);
  OZChannelQuad::~OZChannelQuad(a48);
  OZChannel::~OZChannel(a49);
  OZChannel2D::~OZChannel2D(a50);
  OZChannelPercent::~OZChannelPercent(a51);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(a52);
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a53);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a54);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v62 - 256));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v62 - 248));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 240));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v62 - 232));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v62 - 224));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v62 - 216));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 208));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v62 - 200));
  OZChannelPosition3D::~OZChannelPosition3D(*(OZChannelPosition3D **)(v62 - 192));
  OZChannelScale3D::~OZChannelScale3D(*(OZChannelScale3D **)(v62 - 184));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 176));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 168));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 96));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 160));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v62 - 152));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 144));
  OZChannelFontBase::~OZChannelFontBase(*(PCString **)(v62 - 136));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v62 - 128));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v62 - 120));
  TXCollectionEnum::~TXCollectionEnum(*(TXCollectionEnum **)(v62 - 112));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v54 + 520);
  OZTextStyle::~OZTextStyle(v54);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::getIndexOfMaterial(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *(_QWORD **)(a1 + 480);
  v3 = *(_QWORD **)(a1 + 488);
  if (v2 == v3)
    return 0xFFFFFFFFLL;
  result = 0;
  while (*v2 != a2)
  {
    result = (result + 1);
    if (++v2 == v3)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t `non-virtual thunk to'TXTextStyle::getIndexOfMaterial(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *(_QWORD **)(a1 + 464);
  v3 = *(_QWORD **)(a1 + 472);
  if (v2 == v3)
    return 0xFFFFFFFFLL;
  result = 0;
  while (*v2 != a2)
  {
    result = (result + 1);
    if (++v2 == v3)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t TXTextStyle::willResetMaterial(TXTextStyle *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6118) + 1064))(*((_QWORD *)this + 6118));
}

uint64_t `non-virtual thunk to'TXTextStyle::willResetMaterial(TXTextStyle *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6116) + 1064))(*((_QWORD *)this + 6116));
}

uint64_t TXTextStyle::doResetMaterial(TXTextStyle *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6118) + 1072))(*((_QWORD *)this + 6118));
}

uint64_t `non-virtual thunk to'TXTextStyle::doResetMaterial(TXTextStyle *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6116) + 1072))(*((_QWORD *)this + 6116));
}

uint64_t TXTextStyle::didResetMaterial(TXTextStyle *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6118) + 1080))(*((_QWORD *)this + 6118));
}

uint64_t `non-virtual thunk to'TXTextStyle::didResetMaterial(TXTextStyle *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6116) + 1080))(*((_QWORD *)this + 6116));
}

uint64_t TXTextStyle::addDefaultMaterial(TXTextStyle *this)
{
  uint64_t Instance;
  OZChannelBase *v3;
  uint64_t NextUniqueID;
  const void *v5;
  OZMaterialBase *v6;
  PCString v8;

  Instance = OZLayeredMaterial_Factory::getInstance(this);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Default Name"));
  NextUniqueID = OZChannelBase::getNextUniqueID(v3);
  v5 = (const void *)(*(uint64_t (**)(uint64_t, PCString *, uint64_t))(*(_QWORD *)Instance + 16))(Instance, &v8, NextUniqueID);
  if (v5)
  else
    v6 = 0;
  PCString::~PCString(&v8);
  OZStyle::addMaterial(this, v6);
  return (*(uint64_t (**)(OZMaterialBase *))(*(_QWORD *)v6 + 160))(v6);
}

void sub_1B293BEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZLayeredMaterial_Factory::getInstance(OZLayeredMaterial_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLayeredMaterial_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLayeredMaterial_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLayeredMaterial_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLayeredMaterial_Factory::_instance;
}

uint64_t TXTextStyle::materialChannelValueWillBeSet(uint64_t this, OZChannel *a2, const CMTime *a3, int a4)
{
  OZChannel *v7;
  OZChannel *v8;
  unint64_t var1;
  OZChannelMaterialMapTransform *v10;
  float Size;
  CMTime v12;
  __int128 v13;

  v7 = (OZChannel *)this;
  v8 = a2;
  while (1)
  {
    v8 = (OZChannel *)v8->var6;
    if (!v8)
      break;
    var1 = (unint64_t)v8->var1;
    v13 = xmmword_1B3055240;
    this = OZFactory::isKindOfClass(var1, (int32x4_t *)&v13);
    if ((_DWORD)this)
    {
      if ((OZChannel *)(this + 2296) == a2)
      {
        v10 = (OZChannelMaterialMapTransform *)this;
        v12 = *a3;
        Size = TXTextStyle::getSize(v7, &v12, 0.0);
        return OZChannelMaterialMapTransform::willSetScaleWithFontSize(v10, a3, a4, Size);
      }
      return this;
    }
  }
  return this;
}

float TXTextStyle::getSize(OZChannel *this, CMTime *a2, double a3)
{
  void **var0;
  float v7;
  double v8;
  double v9;

  var0 = this[322].var0;
  if (var0)
  {
    v7 = (*((double (**)(void **, CMTime *))*var0 + 89))(var0, a2);
    v8 = v7;
  }
  else
  {
    v8 = 1.0;
  }
  OZChannel::getValueAsDouble(this + 13, a2, a3);
  return v8 * v9;
}

uint64_t `non-virtual thunk to'TXTextStyle::materialChannelValueWillBeSet(TXTextStyle *this, OZChannel *a2, const CMTime *a3, int a4)
{
  return TXTextStyle::materialChannelValueWillBeSet((uint64_t)this - 16, a2, a3, a4);
}

TXTextLayout *TXTextStyle::getSequenceChannelsForMaterialLayer(TXTextStyle *this, unsigned int a2, int a3)
{
  TXTextLayout *result;

  result = (TXTextLayout *)*((_QWORD *)this + 6118);
  if (result)
    return (TXTextLayout *)TXTextLayout::getSequenceChannelsForMaterialLayer(result, a2, a3);
  return result;
}

uint64_t TXTextStyle::deleteThis(TXTextLayout **this, OZChannelBase *a2)
{
  OZChannelBase *v4;
  OZMaterialLayersFolder *var6;
  unsigned int v6;
  uint64_t ObjectManipulator;
  uint64_t v8;
  TXTextLayout *v9;
  TXTextLayout *v10;
  unsigned int v11;

  if (!a2)
    return OZStyle::deleteThis((OZStyle *)this, a2);
  if (!v4)
    return OZStyle::deleteThis((OZStyle *)this, a2);
  var6 = (OZMaterialLayersFolder *)v4->var6;
  v6 = OZMaterialLayersFolder::indexOfDescendant(var6, v4);
  ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)var6);
  v8 = ObjectManipulator - 16;
  if (!ObjectManipulator)
    v8 = 0;
  v9 = this[60];
  v10 = this[61];
  if (v9 == v10)
  {
LABEL_9:
    v11 = -1;
  }
  else
  {
    v11 = 0;
    while (*(_QWORD *)v9 != v8)
    {
      v9 = (TXTextLayout *)((char *)v9 + 8);
      ++v11;
      if (v9 == v10)
        goto LABEL_9;
    }
  }
  TXTextLayout::deleteMaterialLayer(this[6118], v11, v6);
  return 1;
}

uint64_t `non-virtual thunk to'TXTextStyle::deleteThis(TXTextLayout **this, OZChannelBase *a2)
{
  return TXTextStyle::deleteThis(this - 2, a2);
}

void TXTextStyle::~TXTextStyle(TXTextStyle *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  OZCurrentThread *v5;
  OZCurrentThread *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  OZCurrentThread *Instance;
  _BOOL4 isSelf;
  _BOOL4 v12;
  OZGradientGroupShader *v13;
  OZGradientGroupShader *v14;
  OZGradientGroupShader *v15;

  v2 = (char *)this + 48904;
  *(_QWORD *)this = &off_1E65000F8;
  *((_QWORD *)this + 2) = &unk_1E65002B8;
  v3 = (char *)this + 16;
  *((_QWORD *)this + 6) = &unk_1E6500510;
  v4 = *((_QWORD *)this + 6118);
  if (v4)
  {
    v5 = (OZCurrentThread *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 200) + 272))(v4 + 200);
    v6 = v5;
    v7 = *((_QWORD *)v2 + 5);
    v8 = v7 + 1200;
    for (i = *(_QWORD *)(v7 + 1208); i != v8; i = *(_QWORD *)(i + 8))
      v5 = (OZCurrentThread *)(*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(i + 16) + 152))(*(_QWORD *)(i + 16), v3);
    if (theApp && !*(_BYTE *)(theApp + 80))
    {
      Instance = OZCurrentThread::getInstance(v5);
      isSelf = PCThread::isSelf(*((_opaque_pthread_t ***)Instance + 1));
      v12 = v6 && isSelf;
      if (v12 && !OZChannelBase::isObjectRef((OZChannelBase *)v6) && !v2[952])
        OZDocument::postNotification(*((OZDocument **)v6 + 198), 0x200000);
    }
  }
  if (*(_QWORD *)v2)
  {
    OZGradientGroupShader::~OZGradientGroupShader(*(OZGradientGroupShader **)v2);
    MEMORY[0x1B5E29170]();
    *(_QWORD *)v2 = 0;
  }
  v13 = (OZGradientGroupShader *)*((_QWORD *)v2 + 1);
  if (v13)
  {
    OZGradientGroupShader::~OZGradientGroupShader(v13);
    MEMORY[0x1B5E29170]();
    *((_QWORD *)v2 + 1) = 0;
  }
  v14 = (OZGradientGroupShader *)*((_QWORD *)v2 + 2);
  if (v14)
  {
    OZGradientGroupShader::~OZGradientGroupShader(v14);
    MEMORY[0x1B5E29170]();
    *((_QWORD *)v2 + 2) = 0;
  }
  v15 = (OZGradientGroupShader *)*((_QWORD *)v2 + 3);
  if (v15)
  {
    OZGradientGroupShader::~OZGradientGroupShader(v15);
    MEMORY[0x1B5E29170]();
    *((_QWORD *)v2 + 3) = 0;
  }
  PCMutex::~PCMutex((PCMutex *)((char *)this + 49888));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 49872);
  PCString::~PCString((PCString *)this + 6233);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 49720));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 49568));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 49416));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 49264));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 49112));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 48960));
  OZ3DExtrusionProperties::~OZ3DExtrusionProperties((TXTextStyle *)((char *)this + 40520));
  OZChannelQuad::~OZChannelQuad((TXTextStyle *)((char *)this + 37568));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 37312));
  OZChannelPosition::~OZChannelPosition((TXTextStyle *)((char *)this + 36608));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 36168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 36016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 35864));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 35424));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 35272));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((TXTextStyle *)((char *)this + 33680));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 32472));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 31464));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 31208));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 31080));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 30928));
  OZChannelQuad::~OZChannelQuad((TXTextStyle *)((char *)this + 27976));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 27720));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 27568));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 27416));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 26976));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 26824));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((TXTextStyle *)((char *)this + 25232));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 24024));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 23016));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 22760));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 22632));
  OZChannelQuad::~OZChannelQuad((TXTextStyle *)((char *)this + 19680));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19528));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19376));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19224));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 18784));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 18632));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 18192));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 18040));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((TXTextStyle *)((char *)this + 16448));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 15240));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 14232));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 13976));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 13848));
  OZChannelQuad::~OZChannelQuad((TXTextStyle *)((char *)this + 10896));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10744));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 10304));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 10152));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((TXTextStyle *)((char *)this + 8560));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 7352));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 6344));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 6088));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 5960));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5808));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 5656));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 5504));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 5352));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5200));
  OZChannelRotation3D::~OZChannelRotation3D((TXTextStyle *)((char *)this + 4344));
  OZChannelPosition3D::~OZChannelPosition3D((TXTextStyle *)((char *)this + 3456));
  *((_QWORD *)this + 358) = &off_1E6560F48;
  *((_QWORD *)this + 360) = &unk_1E65612A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3304));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 2864));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2712));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2560));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2408));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2256));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 2128));
  OZChannel::~OZChannel((OZChannel *)this + 13);
  OZChannelFontBase::~OZChannelFontBase((PCString *)this + 163);
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 1048));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 792));
  TXCollectionEnum::~TXCollectionEnum((TXTextStyle *)((char *)this + 536));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  OZTextStyle::~OZTextStyle(this);
}

{
  TXTextStyle::~TXTextStyle(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXTextStyle::~TXTextStyle(TXTextStyle *this)
{
  TXTextStyle::~TXTextStyle((TXTextStyle *)((char *)this - 16));
}

{
  TXTextStyle::~TXTextStyle((TXTextStyle *)((char *)this - 48));
}

{
  TXTextStyle::~TXTextStyle((TXTextStyle *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextStyle::~TXTextStyle((TXTextStyle *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

BOOL TXTextStyle::isMissingFont(TXTextStyle *this)
{
  return OZChannelFontBase::isMissing((TXTextStyle *)((char *)this + 1304));
}

uint64_t TXTextStyle::getMissingFontName(TXTextStyle *this)
{
  return (uint64_t)this + 1952;
}

uint64_t StyleWillReplaceMaterial(const TXTextStyle *a1, const TXTextStyle *a2)
{
  uint64_t v4;
  int isEnabled;

  if ((*((_BYTE *)a1 + 48953) & 0xF) == 0)
    return 0;
  v4 = 1;
  isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)a1 + 40520), 1, 1);
  if (isEnabled == OZChannelBase::isEnabled((OZChannelBase *)((char *)a2 + 40520), 1, 1))
    return (*(unsigned int (**)(const TXTextStyle *, const TXTextStyle *))(*(_QWORD *)a2 + 248))(a2, a1) ^ 1;
  return v4;
}

void TXTextStyle::copyStyle(Li3DEngineScene **this, const TXTextStyle *a2)
{
  char *v4;
  char *v5;
  OZScene **v6;
  int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  OZMaterialBase **v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  Li3DEngineScene *v20;
  uint64_t v21;
  _QWORD *v23;
  _QWORD *i;
  const void *v25;
  OZMaterialBase *v26;
  _BYTE v27[8];

  v4 = (char *)a2 + 48952;
  v5 = (char *)(this + 6118);
  v6 = (OZScene **)Li3DEngineScene::sceneManager(this[6118]);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v27, v6);
  v5[912] = v4[904];
  v7 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 1) != 0)
  {
    v8 = *((_QWORD *)a2 + 65);
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 66);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    (*((void (**)(Li3DEngineScene **, uint64_t, uint64_t))*this + 21))(this, v12, 1);
    if (v9)
    {
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v7 = *(_DWORD *)v4;
  }
  if ((v7 & 2) != 0)
  {
    OZChannelBase::operator=((uint64_t)(this + 247), (uint64_t)a2 + 1976);
    v7 = *(_DWORD *)v4;
  }
  if ((v7 & 0xF) != 0)
  {
    if (((*((uint64_t (**)(char *, char *))this[688] + 30))((char *)this + 5504, (char *)a2 + 5504) & 1) == 0)
      *(_BYTE *)(*(_QWORD *)v5 + 19321) = 1;
    OZChannelBase::operator=((uint64_t)(this + 282), (uint64_t)a2 + 2256);
    OZChannelBase::operator=((uint64_t)(this + 6177), (uint64_t)a2 + 49416);
    OZChannelBase::operator=((uint64_t)(this + 6196), (uint64_t)a2 + 49568);
    OZChannelBase::operator=((uint64_t)(this + 320), (uint64_t)a2 + 2560);
    OZChannelBase::operator=((uint64_t)(this + 339), (uint64_t)a2 + 2712);
    OZChannelFolder::operator=((uint64_t)(this + 358));
    OZChannelBase::operator=((uint64_t)(this + 375), (uint64_t)a2 + 3000);
    OZChannelBase::operator=((uint64_t)(this + 394), (uint64_t)a2 + 3152);
    OZChannelBase::operator=((uint64_t)(this + 413), (uint64_t)a2 + 3304);
    OZChannelPosition::operator=((uint64_t)(this + 432), (uint64_t)a2 + 3456);
    OZChannelPosition::operator=((uint64_t)(this + 543), (uint64_t)a2 + 4344);
    OZChannelBase::operator=((uint64_t)(this + 650), (uint64_t)a2 + 5200);
    OZChannelBase::operator=((uint64_t)(this + 669), (uint64_t)a2 + 5352);
    OZChannelBase::operator=((uint64_t)(this + 688), (uint64_t)a2 + 5504);
    OZChannelBase::operator=((uint64_t)(this + 707), (uint64_t)a2 + 5656);
    v7 = *(_DWORD *)v4;
  }
  if ((v7 & 0x100) != 0)
  {
    OZChannelFolder::operator=((uint64_t)(this + 745));
    v7 = *(_DWORD *)v4;
  }
  if ((v7 & 0x200) != 0)
  {
    OZChannelFolder::operator=((uint64_t)(this + 2829));
    v7 = *(_DWORD *)v4;
  }
  if ((v7 & 0x400) != 0)
  {
    OZChannelFolder::operator=((uint64_t)(this + 3885));
    v7 = *(_DWORD *)v4;
  }
  if ((v7 & 0x800) != 0)
    OZChannelFolder::operator=((uint64_t)(this + 1731));
  if (StyleWillReplaceMaterial(a2, (const TXTextStyle *)this))
  {
    while (1)
    {
      v15 = (OZMaterialBase **)this[60];
      if (this[61] == (Li3DEngineScene *)v15)
        break;
      OZStyle::unregisterMaterial((OZStyle *)this, *v15);
      OZStyle::removeMaterialAtIndex((OZStyle *)this, 0);
    }
    v23 = (_QWORD *)*((_QWORD *)a2 + 60);
    for (i = (_QWORD *)*((_QWORD *)a2 + 61); v23 != i; ++v23)
    {
      v25 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*v23 + 8) + 24))(*(_QWORD *)(*v23 + 8), *v23, 0);
      if (v25)
      else
        v26 = 0;
      OZStyle::addMaterial((OZStyle *)this, v26);
      OZStyle::registerMaterial((OZStyle *)this, v26);
    }
  }
  else if ((v4[1] & 0xF) != 0)
  {
    v16 = this[61] - this[60];
    if (v16)
    {
      v17 = 0;
      v18 = v16 >> 3;
      v19 = 1;
      do
      {
        v20 = this[60];
        if (v17 >= (this[61] - v20) >> 3)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        v21 = *((_QWORD *)a2 + 60);
        if (v17 >= (*((_QWORD *)a2 + 61) - v21) >> 3)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v20 + v17) + 184))(*((_QWORD *)v20 + v17), *(_QWORD *)(v21 + 8 * v17));
        v17 = v19;
      }
      while (v18 > v19++);
    }
  }
  if ((v4[1] & 0xF) != 0)
    OZ3DExtrusionProperties::operator=((uint64_t)(this + 5065), (uint64_t)a2 + 40520);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v27);
}

void sub_1B293CBA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::behaviorChangedState(PCString *this, OZBehavior *lpsrc)
{
  OZSingleChannelBehavior *v3;
  OZRigBehavior *v4;
  TXTextStyle *ChanBase;
  OZChannelBase *v6;
  OZChannel **Widget;
  OZScene *v8;
  const void *ChannelForSnapshot;
  const PCString *v10;
  const PCString *v11;
  __CFString *LabelCtlrClassName;
  __CFString *ParameterCtlrClassName;
  __CFString *InspectorCtlrClassName;
  CMTime v16;
  double v17;
  unsigned int v18[2];

  if (lpsrc)
  {
    if (v3)
    {
      v4 = v3;
      ChanBase = (TXTextStyle *)OZSingleChannelBehavior::getChanBase(v3);
      if (ChanBase == (TXTextStyle *)&this[163])
      {
        v6 = (OZChannelBase *)ChanBase;
        v17 = 0.0;
        *(_QWORD *)v18 = 0;
        Widget = (OZChannel **)OZRigBehavior::getWidget(v4);
        v8 = (OZScene *)((uint64_t (*)(PCString *))this->var0[4].isa)(this);
        OZScene::getCurrentTime(v8, (__n128 *)&v16);
        OZRigWidget::getCurrentSnapshotIDs(Widget, &v16, &v18[1], v18, &v17);
        ChannelForSnapshot = (const void *)OZRigBehavior::getChannelForSnapshot(v4, v18[1]);
        if (ChannelForSnapshot)
        {
          if (v10)
          {
            v11 = v10;
            LabelCtlrClassName = OZChannelBase::getLabelCtlrClassName(v6);
            ParameterCtlrClassName = OZChannelBase::getParameterCtlrClassName(v6);
            InspectorCtlrClassName = OZChannelBase::getInspectorCtlrClassName(v6);
            OZChannelFolder::operator=((uint64_t)v6);
            OZChannelBase::operator=((uint64_t)&this[180], (uint64_t)&v11[17]);
            OZChannelBase::operator=((uint64_t)&this[212], (uint64_t)&v11[49]);
            PCString::set(this + 244, v11 + 81);
            PCString::set(this + 245, v11 + 82);
            LODWORD(this[246].var0) = v11[83].var0;
            OZChannelBase::setLabelCtlrClassName(v6, LabelCtlrClassName);
            OZChannelBase::setParameterCtlrClassName(v6, ParameterCtlrClassName);
            OZChannelBase::setInspectorCtlrClassName(v6, InspectorCtlrClassName);
            PCMutex::lock((PCMutex *)&this[6236]);
            std::shared_ptr<OZFontFace>::reset[abi:ne180100](&this[6234].var0);
            PCMutex::unlock((PCMutex *)&this[6236]);
            TXTextStyle::updateFont((TXTextStyle *)this);
          }
        }
      }
    }
  }
  return 1;
}

uint64_t TXTextStyle::clearCachedFontFace(TXTextStyle *this)
{
  PCMutex *v2;

  v2 = (PCMutex *)((char *)this + 49888);
  PCMutex::lock((PCMutex *)((char *)this + 49888));
  std::shared_ptr<OZFontFace>::reset[abi:ne180100]((_QWORD *)this + 6234);
  return PCMutex::unlock(v2);
}

void TXTextStyle::updateFont(TXTextStyle *this)
{
  unint64_t *p_shared_owners;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  TXTextStyle::getFontFace(this, &v12);
  if (v12)
  {
    v10 = v12;
    v11 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v3 = __ldxr(p_shared_owners);
      while (__stxr(v3 + 1, p_shared_owners));
    }
    TXTextStyle::setFont((uint64_t)this, &v10);
    v4 = v11;
    if (v11)
    {
      v5 = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B293CE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::getFontFace@<X0>(TXTextStyle *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  PCMutex *v5;
  OZChannelBase *v6;
  int v7;
  TXFontManager *v8;
  uint64_t Instance;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  PCString v17;
  __int128 v18;

  v4 = (_QWORD *)((char *)this + 49872);
  v5 = (PCMutex *)((char *)this + 49888);
  PCMutex::lock((PCMutex *)((char *)this + 49888));
  if (!*v4)
  {
    v6 = (OZChannelBase *)((char *)this + 1304);
    OZChannelFontBase::getValidatedFontName((OZChannelBase *)((char *)this + 1304), (PCString *)&v18);
    v7 = PCString::compare((PCString *)&v18, (const PCString *)(*((_QWORD *)this + 65) + 8));
    PCString::~PCString((PCString *)&v18);
    if (v7)
    {
      Instance = TXFontManager::getInstance(v8);
      OZChannelFontBase::getValidatedFontName(v6, &v17);
      (*(void (**)(__int128 *__return_ptr, uint64_t, PCString *))(*(_QWORD *)Instance + 56))(&v18, Instance, &v17);
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)v4, &v18);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      PCString::~PCString(&v17);
    }
    else
    {
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v4, (uint64_t *)this + 65);
    }
  }
  v13 = v4[1];
  *a2 = *v4;
  a2[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return PCMutex::unlock(v5);
}

void sub_1B293CFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void std::shared_ptr<OZFontFace>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void TXTextStyle::getFontName(TXTextStyle *this@<X0>, PCString *a2@<X8>)
{
  OZChannelFontBase::getValidatedFontName((OZChannelBase *)((char *)this + 1304), a2);
}

void TXTextStyle::setFont(PCString *this, PCString *a2)
{
  OZChannelBase *v3;
  TXFontManager *v4;
  uint64_t Instance;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  PCString v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v3 = (OZChannelBase *)&this[163];
  OZChannelFontBase::validateAndSetFontName(this + 163, a2);
  Instance = TXFontManager::getInstance(v4);
  OZChannelFontBase::getValidatedFontName(v3, &v16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, PCString *))(*(_QWORD *)Instance + 56))(&v17, Instance, &v16);
  PCString::~PCString(&v16);
  if (v17)
  {
    v14 = v17;
    v15 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    TXTextStyle::setFont((uint64_t)this, &v14);
    v8 = v15;
    if (v15)
    {
      v9 = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1B293D180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, PCString a12, char a13)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::updateGradient(uint64_t this, CMTime *a2)
{
  uint64_t v3;
  OZGradientGroupShader **v4;
  OZGradientGroupShader *v5;
  OZGradientGroupShader *v6;
  OZGradientGroupShader *v7;
  OZGradientGroupShader *v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;

  v3 = this;
  v4 = (OZGradientGroupShader **)(this + 48904);
  if (*(_QWORD *)(this + 48904))
  {
    this = OZChannel::getValueAsInt((OZChannel *)(this + 6088), MEMORY[0x1E0CA2E68], 0.0);
    if ((_DWORD)this == 1)
    {
      v5 = *v4;
      v12 = *a2;
      this = OZGradientGroupShader::update(v5, &v12);
    }
  }
  if (v4[1])
  {
    this = OZChannel::getValueAsInt((OZChannel *)(v3 + 22760), MEMORY[0x1E0CA2E68], 0.0);
    if ((_DWORD)this == 1)
    {
      v6 = v4[1];
      v11 = *a2;
      this = OZGradientGroupShader::update(v6, &v11);
    }
  }
  if (v4[2])
  {
    this = OZChannel::getValueAsInt((OZChannel *)(v3 + 31208), MEMORY[0x1E0CA2E68], 0.0);
    if ((_DWORD)this == 1)
    {
      v7 = v4[2];
      v10 = *a2;
      this = OZGradientGroupShader::update(v7, &v10);
    }
  }
  if (v4[3])
  {
    this = OZChannel::getValueAsInt((OZChannel *)(v3 + 13976), MEMORY[0x1E0CA2E68], 0.0);
    if ((_DWORD)this == 1)
    {
      v8 = v4[3];
      v9 = *a2;
      return OZGradientGroupShader::update(v8, &v9);
    }
  }
  return this;
}

uint64_t TXTextStyle::getFaceGradient(TXTextStyle *this, CMTime *a2, FxColorDescription *a3)
{
  OZGradientGroupShader **v3;
  OZGradientGroupShader *v4;
  OZGradientGroupShader *v8;
  CGColorSpace *CGColorSpace;
  CMTime v11;

  v3 = (OZGradientGroupShader **)((char *)this + 48904);
  v4 = (OZGradientGroupShader *)*((_QWORD *)this + 6113);
  if (!v4)
  {
    v8 = (OZGradientGroupShader *)operator new();
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    OZGradientGroupShader::OZGradientGroupShader(v8, (TXTextStyle *)((char *)this + 7352), CGColorSpace, 1.0);
    *v3 = v8;
    v11 = *a2;
    OZGradientGroupShader::update(v8, &v11);
    v4 = *v3;
  }
  return *((_QWORD *)v4 + 3);
}

void sub_1B293D3A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x20C40769AC3DALL);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::getOutlineGradient(TXTextStyle *this, CMTime *a2, FxColorDescription *a3)
{
  OZGradientGroupShader **v3;
  OZGradientGroupShader *v4;
  OZGradientGroupShader *v8;
  CGColorSpace *CGColorSpace;
  CMTime v11;

  v3 = (OZGradientGroupShader **)((char *)this + 48912);
  v4 = (OZGradientGroupShader *)*((_QWORD *)this + 6114);
  if (!v4)
  {
    v8 = (OZGradientGroupShader *)operator new();
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    OZGradientGroupShader::OZGradientGroupShader(v8, (TXTextStyle *)((char *)this + 24024), CGColorSpace, 1.0);
    *v3 = v8;
    v11 = *a2;
    OZGradientGroupShader::update(v8, &v11);
    v4 = *v3;
  }
  return *((_QWORD *)v4 + 3);
}

void sub_1B293D478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x20C40769AC3DALL);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::getGlowGradient(TXTextStyle *this, CMTime *a2, FxColorDescription *a3)
{
  OZGradientGroupShader **v3;
  OZGradientGroupShader *v4;
  OZGradientGroupShader *v8;
  CGColorSpace *CGColorSpace;
  CMTime v11;

  v3 = (OZGradientGroupShader **)((char *)this + 48920);
  v4 = (OZGradientGroupShader *)*((_QWORD *)this + 6115);
  if (!v4)
  {
    v8 = (OZGradientGroupShader *)operator new();
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    OZGradientGroupShader::OZGradientGroupShader(v8, (TXTextStyle *)((char *)this + 32472), CGColorSpace, 1.0);
    *v3 = v8;
    v11 = *a2;
    OZGradientGroupShader::update(v8, &v11);
    v4 = *v3;
  }
  return *((_QWORD *)v4 + 3);
}

void sub_1B293D54C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x20C40769AC3DALL);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::getDropShadowGradient(TXTextStyle *this, CMTime *a2, FxColorDescription *a3)
{
  OZGradientGroupShader **v3;
  OZGradientGroupShader *v4;
  OZGradientGroupShader *v8;
  CGColorSpace *CGColorSpace;
  CMTime v11;

  v3 = (OZGradientGroupShader **)((char *)this + 48928);
  v4 = (OZGradientGroupShader *)*((_QWORD *)this + 6116);
  if (!v4)
  {
    v8 = (OZGradientGroupShader *)operator new();
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    OZGradientGroupShader::OZGradientGroupShader(v8, (TXTextStyle *)((char *)this + 15240), CGColorSpace, 1.0);
    *v3 = v8;
    v11 = *a2;
    OZGradientGroupShader::update(v8, &v11);
    v4 = *v3;
  }
  return *((_QWORD *)v4 + 3);
}

void sub_1B293D620(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x20C40769AC3DALL);
  _Unwind_Resume(a1);
}

void TXTextStyle::getTextureLiImageSource(TXTextStyle *this, CMTime *a2, OZChannelImageWithOptions *a3)
{
  OZScene *v5;
  unsigned int ValueAsUint;
  void *Node;
  OZImageNode *v8;
  LiGroup *v9;
  _BYTE v10[72];
  LiGroup *v11;
  PCSharedCount v12[7];
  _QWORD v13[20];
  _QWORD v14[10];
  _BYTE v15[208];
  PCString v16;
  CMTime v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  CMTimeEpoch v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  v5 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(_QWORD *)this + 128))(this);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a3 + 136), MEMORY[0x1E0CA2E68], 0.0);
  Node = OZScene::getNode(v5, ValueAsUint);
  if (Node)
  else
    v8 = 0;
  v20 = 0uLL;
  v21 = 0;
  v17 = *a2;
  OZChannelImageWithOptions::getFrame(a3, &v17, &v20);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v17, (const OZRenderParams *)a2);
  OZRenderParams::setImageType((uint64_t)&v17, 2);
  *(__n128 *)&v17.value = v20;
  v19 = 0;
  v17.epoch = v21;
  v18 = 0;
  OZChannelBase::setRangeName((OZChannelBase *)a2, &v16);
  v9 = (LiGroup *)operator new();
  LiGroup::LiGroup(v9);
  v11 = v9;
  PCSharedCount::PCSharedCount(v12, (LiGroup *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  LiGraphBuilder::LiGraphBuilder(v15, &v11, &v16);
  PCSharedCount::~PCSharedCount(v12);
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v11);
  v14[9] = v15;
  Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v10, v8, (OZRenderParams *)&v17);
  (*(void (**)(OZImageNode *, CMTime *, LiGroup **, _QWORD))(*(_QWORD *)v8 + 152))(v8, &v17, &v11, 0);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v10);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v14);
  std::__list_imp<unsigned int>::clear(v13);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)v15);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v17);
}

void sub_1B293D808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&a10);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a47);
  std::__list_imp<unsigned int>::clear(&a27);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&a57);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x260]);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v57 - 64);
  _Unwind_Resume(a1);
}

void *TXTextStyle::hasTexture(TXTextStyle *this, OZChannelImageWithOptions *a2)
{
  OZScene *v3;
  unsigned int ValueAsUint;
  void *result;

  v3 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(_QWORD *)this + 128))(this);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a2 + 136), MEMORY[0x1E0CA2E68], 0.0);
  result = OZScene::getNode(v3, ValueAsUint);
  if (result)
  return result;
}

void TXTextStyle::writeBody(PCString *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  unsigned int *v10;
  Li3DEngineScene *var0;
  OZScene **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  PCString v16;
  _BYTE v17[8];

  v10 = (unsigned int *)&this[6118];
  var0 = (Li3DEngineScene *)this[6118].var0;
  if (var0)
    v12 = (OZScene **)Li3DEngineScene::sceneManager(var0);
  else
    v12 = 0;
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v17, v12);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXStyleScope);
  v13 = v10[2];
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1002);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v13);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v14 = v10[226];
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1003);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v15 = v10[227];
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1004);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v15);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::PCString(&v16, this + 6233);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1005);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v16);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v16);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  OZStyle::writeBody((uint64_t **)this, a2, a3, a4, a5);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v17);
}

void sub_1B293DAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  PCString::~PCString((PCString *)&a9);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextStyle::writeBody(PCString *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  TXTextStyle::writeBody(this - 6, a2, a3, a4, a5);
}

uint64_t *TXTextStyle::markFactoriesForSerialization(TXTextStyle *this, PCSerializerWriteStream *a2)
{
  OZStyle::markFactoriesForSerialization((OZFactory **)this, a2);
  OZChannelGradient::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 7352), a2, 0);
  OZChannelGradient::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 24024), a2, 0);
  OZChannelGradient::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 32472), a2, 0);
  return OZChannelGradient::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 15240), a2, 0);
}

uint64_t *`non-virtual thunk to'TXTextStyle::markFactoriesForSerialization(TXTextStyle *this, PCSerializerWriteStream *a2)
{
  return TXTextStyle::markFactoriesForSerialization((TXTextStyle *)((char *)this - 48), a2);
}

uint64_t TXTextStyle::parseBegin(TXTextStyle *this, PCSerializerReadStream *a2)
{
  OZStyle::unregisterAllMaterials(this);
  while (*((_QWORD *)this + 61) != *((_QWORD *)this + 60))
    OZStyle::removeMaterialAtIndex(this, 0);
  OZStyle::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXStyleScope);
  return 1;
}

uint64_t `non-virtual thunk to'TXTextStyle::parseBegin(TXTextStyle *this, PCSerializerReadStream *a2)
{
  TXTextStyle::parseBegin((TXTextStyle *)((char *)this - 48), a2);
  return 1;
}

uint64_t TXTextStyle::parseEnd(TXTextStyle *this, PCSerializerReadStream *a2)
{
  unsigned int v4;

  OZStyle::parseEnd(this, a2);
  v4 = *((_DWORD *)a2 + 26);
  if (v4 <= 2)
  {
    OZChannel::scaleChannel((OZChannel *)((char *)this + 10744), 2.0);
    OZChannel::scaleChannel((OZChannel *)((char *)this + 27416), 2.0);
    OZChannel::scaleChannel((OZChannel *)((char *)this + 35864), 2.0);
    OZChannel::scaleChannel((OZChannel *)((char *)this + 18632), 2.0);
    v4 = *((_DWORD *)a2 + 26);
  }
  if (v4 <= 3)
  {
    OZChannelBase::operator=((uint64_t)this + 10440, (uint64_t)this + 10744);
    OZChannelBase::operator=((uint64_t)this + 10592, (uint64_t)this + 10744);
    OZChannelBase::operator=((uint64_t)this + 18328, (uint64_t)this + 18632);
    OZChannelBase::operator=((uint64_t)this + 18480, (uint64_t)this + 18632);
    OZChannelBase::operator=((uint64_t)this + 27112, (uint64_t)this + 27416);
    OZChannelBase::operator=((uint64_t)this + 27264, (uint64_t)this + 27416);
    OZChannelBase::operator=((uint64_t)this + 35560, (uint64_t)this + 35864);
    OZChannelBase::operator=((uint64_t)this + 35712, (uint64_t)this + 35864);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 10744), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 18632), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27416), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 35864), 2, 0);
  }
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 30928), 2, 0);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 49568), 2))
    OZChannel::copy((OZChannel *)((char *)this + 49416), (const OZChannelBase *)((char *)this + 49568), 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 49568), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2408), 128, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 6344), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 23016), 2, 0);
  if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 31208), 2))
  {
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 31208), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 31208), 0x400000, 0);
  }
  if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 13976), 2))
  {
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 13976), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 13976), 0x400000, 0);
  }
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 72), 0x40000);
  TXTextStyle::updateFont(this);
  return 1;
}

uint64_t `non-virtual thunk to'TXTextStyle::parseEnd(TXTextStyle *this, PCSerializerReadStream *a2)
{
  TXTextStyle::parseEnd((TXTextStyle *)((char *)this - 48), a2);
  return 1;
}

uint64_t TXTextStyle::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  const void *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  PCSharedCount v13;
  unsigned int v14[2];
  PCSharedCount v15;

  OZStyle::parseElement(this, a2, a3);
  v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case 1000:
      LODWORD(v13.var0) = 0;
      if (PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v13))
      {
        PCSharedCount::PCSharedCount(&v15);
        if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v15))
          (*((void (**)(OZTimeMarkerSet **, PCSharedCount *, uint64_t))*this + 21))(this, &v15, 1);
        goto LABEL_12;
      }
      break;
    case 1001:
      return 1;
    case 1002:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)this + 48952);
      break;
    case 1003:
      v10 = 49848;
      goto LABEL_17;
    case 1004:
      v10 = 49852;
LABEL_17:
      PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)this + v10);
      break;
    case 1005:
      PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)(this + 6233));
      break;
    default:
      if (v6 == 81)
      {
        *(_QWORD *)v14 = 0;
        PCSharedCount::PCSharedCount(&v15);
        PCSharedCount::PCSharedCount(&v13);
        v12 = 0;
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v14);
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v15);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v14[1]);
        PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 116, (uint64_t)&v12);
        if ((PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 118, (uint64_t)&v13) & 1) == 0)
          PCString::set((PCString *)&v13, (const PCString *)&v15);
        v7 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v14[0]);
        if (v7)
        {
          if (v8)
          {
            v9 = (_QWORD *)(*(uint64_t (**)(void *, PCSharedCount *, _QWORD))(*(_QWORD *)v8 + 168))(v8, &v13, v14[1]);
            (*(void (**)(_QWORD *, PCSharedCount *, _QWORD))(v9[2] + 120))(v9 + 2, &v15, 0);
            PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v9 + 6));
            OZStyle::addMaterial((OZStyle *)this, (OZMaterialBase *)v9);
            OZStyle::registerMaterial((OZStyle *)this, (OZMaterialBase *)v9);
          }
        }
        PCString::~PCString((PCString *)&v13);
LABEL_12:
        PCString::~PCString((PCString *)&v15);
      }
      break;
  }
  return 1;
}

void sub_1B293E0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTextStyle::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  TXTextStyle::parseElement(this - 6, a2, a3);
  return 1;
}

void TXTextStyle::calcStaticHash(uint64_t a1, const void *a2, uint64_t **a3)
{
  OZScene **v6;
  int8x8_t *v7;
  int8x8_t *v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  char *Node;
  _OWORD *v13;
  int *StaticHash;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21[2];
  __n128 v22;
  char v23[8];

  v6 = (OZScene **)Li3DEngineScene::sceneManager(*(Li3DEngineScene **)(a1 + 48944));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v23, v6);
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  (*(void (**)(int8x8_t *))(*(_QWORD *)v7 + 40))(v7);
  (*(void (**)(uint64_t, const void *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, 0, 0, 1);
  v22 = *(__n128 *)PCHashWriteStream::getHash(v8)->i8;
  v9 = *(_QWORD *)(a1 + 504);
  if (v9 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 272))(v9))
  {
    v10 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 504) + 272))(*(_QWORD *)(a1 + 504));
    v21[0] = 0;
    v21[1] = 0;
    v20 = (uint64_t *)v21;
    OZScene::getImmediatelyReferencedNodes(v10, *(_DWORD *)(a1 + 96), &v20);
    v11 = v20;
    if (v20 != (uint64_t *)v21)
    {
      do
      {
        Node = (char *)OZScene::getNode((OZScene *)v10, *((_DWORD *)v11 + 7));
        if (Node)
        {
          v13 = Node + 16;
          if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a3))
          {
            StaticHash = (int *)OZObjectManipulator::getStaticHash(v13, a2, a3);
            PCHash128::operator+=((int *)&v22, StaticHash);
          }
        }
        v15 = (uint64_t *)v11[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (uint64_t *)v11[2];
            v17 = *v16 == (_QWORD)v11;
            v11 = v16;
          }
          while (!v17);
        }
        v11 = v16;
      }
      while (v16 != (uint64_t *)v21);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v20, v21[0]);
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 48752), MEMORY[0x1E0CA2E68], 0.0))
  {
    v19 = *(_QWORD *)(a1 + 480);
    v18 = *(_QWORD *)(a1 + 488);
    while (v19 != v18)
    {
      (*(void (**)(uint64_t, const void *, uint64_t **))(*(_QWORD *)(*(_QWORD *)v19 + 16) + 440))(*(_QWORD *)v19 + 16, a2, a3);
      v19 += 8;
    }
  }
  PCHashWriteStream::setHash((__n128 *)v8, &v22);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v23);
}

void sub_1B293E320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)va, v5);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextStyle::calcStaticHash(uint64_t a1, const void *a2, uint64_t **a3)
{
  TXTextStyle::calcStaticHash(a1 - 16, a2, a3);
}

void TXTextStyle::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  OZScene **v8;
  int8x8_t *v9;
  int8x8_t *v10;
  uint64_t v11;
  uint64_t **v12;
  CMTimeValue value;
  char *Node;
  _OWORD *v15;
  CMTime *v16;
  CMTime *v17;
  BOOL v18;
  __int128 v19;
  __n128 v20;
  CMTime v21;
  _BYTE v22[8];

  v8 = (OZScene **)Li3DEngineScene::sceneManager(*(Li3DEngineScene **)(a1 + 48944));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v22, v8);
  if (!v9)
    __cxa_bad_cast();
  v10 = v9;
  v21 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 72), (PCSerializerWriteStream *)a2, &v21);
  v20 = *(__n128 *)PCHashWriteStream::getHash(v10)->i8;
  v11 = *(_QWORD *)(a1 + 504);
  if (v11 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 272))(v11))
  {
    v12 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 504) + 272))(*(_QWORD *)(a1 + 504));
    *(_QWORD *)&v21.timescale = 0;
    v21.epoch = 0;
    v21.value = (CMTimeValue)&v21.timescale;
    OZScene::getImmediatelyReferencedNodes(v12, *(_DWORD *)(a1 + 96), (uint64_t **)&v21);
    value = v21.value;
    if ((CMTimeScale *)v21.value != &v21.timescale)
    {
      do
      {
        Node = (char *)OZScene::getNode((OZScene *)v12, *(_DWORD *)(value + 28));
        if (Node)
        {
          v15 = Node + 16;
          if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a4))
          {
            OZObjectManipulator::getHashForState(v15, a2, (OZRenderParams *)a3, a4, &v19);
            PCHash128::operator+=((int *)&v20, (int *)&v19);
          }
        }
        v16 = *(CMTime **)(value + 8);
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (CMTime *)v16->value;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = *(CMTime **)(value + 16);
            v18 = v17->value == value;
            value = (CMTimeValue)v17;
          }
          while (!v18);
        }
        value = (CMTimeValue)v17;
      }
      while (v17 != (CMTime *)&v21.timescale);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v21, *(_QWORD **)&v21.timescale);
  }
  PCHashWriteStream::setHash((__n128 *)v10, &v20);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v22);
}

void sub_1B293E510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  _QWORD *v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD *);
  v9 = va_arg(va1, _QWORD);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)va, v8);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextStyle::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  TXTextStyle::calcHashForState(a1 - 16, a2, a3, a4);
}

uint64_t TXTextStyle::calcHashForStateAffectingLayout(TXTextStyle *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  PCString v7;

  OZChannelFontBase::getValidatedFontName((OZChannelBase *)((char *)this + 1304), &v7);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v7);
  PCString::~PCString(&v7);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 67) + 448))((char *)this + 536, a2, a3);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 180) + 448))((char *)this + 1440, a2, a3);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 212) + 448))((char *)this + 1696, a2, a3);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 247) + 448))((char *)this + 1976, a2, a3);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 282) + 448))((char *)this + 2256, a2, a3);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 6177) + 448))((char *)this + 49416, a2, a3);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 320) + 448))((char *)this + 2560, a2, a3);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 301) + 448))((char *)this + 2408, a2, a3);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 358) + 448))((char *)this + 2864, a2, a3);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 669) + 448))((char *)this + 5352, a2, a3);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 688) + 448))((char *)this + 5504, a2, a3);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 707) + 448))((char *)this + 5656, a2, a3);
  return (*(uint64_t (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((_QWORD *)this + 5164) + 448))((char *)this + 41312, a2, a3);
}

void sub_1B293E70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

BOOL TXTextStyle::canAddToSceneNode(TXTextStyle *this, OZSceneNode *lpsrc)
{
  return lpsrc
}

uint64_t TXTextStyle::getPreviewSceneNode(TXTextStyle *this)
{
  OZChannelBase *v1;
  const PCString *NextUniqueID;
  TXTextLayout *v3;
  __int128 v5;
  uint64_t v6;
  PCSharedCount v7;

  PCSharedCount::PCSharedCount(&v7);
  NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v1);
  v3 = (TXTextLayout *)TXTextInput::create((TXTextInput *)&v7, NextUniqueID);
  PCString::~PCString((PCString *)&v7);
  v5 = *MEMORY[0x1E0CA2E68];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text Style Preview Text"));
  (*(void (**)(TXTextLayout *, __int128 *, PCSharedCount *))(*(_QWORD *)v3 + 144))(v3, &v5, &v7);
  PCString::~PCString((PCString *)&v7);
  TXTextLayout::didFinishInitializing(v3, 1);
  return (uint64_t)v3 + 200;
}

void sub_1B293E814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::getFillType(TXTextStyle *this, int a2)
{
  uint64_t v2;
  uint64_t result;

  switch(a2)
  {
    case 0:
      v2 = 6088;
      goto LABEL_7;
    case 1:
      v2 = 22760;
      goto LABEL_7;
    case 2:
      v2 = 31208;
      goto LABEL_7;
    case 3:
      v2 = 13976;
LABEL_7:
      result = OZChannel::getValueAsInt((OZChannel *)((char *)this + v2), MEMORY[0x1E0CA2E68], 0.0);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void *TXTextStyle::hasTexture(TXTextStyle *this, int a2)
{
  uint64_t v2;
  void *result;

  switch(a2)
  {
    case 0:
      v2 = 8560;
      goto LABEL_7;
    case 1:
      v2 = 25232;
      goto LABEL_7;
    case 2:
      v2 = 33680;
      goto LABEL_7;
    case 3:
      v2 = 16448;
LABEL_7:
      result = TXTextStyle::hasTexture(this, (TXTextStyle *)((char *)this + v2));
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t TXTextStyle::getTextureChannel(TXTextStyle *this, int a2)
{
  uint64_t v2;
  uint64_t result;

  switch(a2)
  {
    case 0:
      v2 = 8560;
      goto LABEL_7;
    case 1:
      v2 = 25232;
      goto LABEL_7;
    case 2:
      v2 = 33680;
      goto LABEL_7;
    case 3:
      v2 = 16448;
LABEL_7:
      result = (uint64_t)this + v2;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t TXTextStyle::getGradientChannel(TXTextStyle *this, int a2)
{
  uint64_t v2;
  uint64_t result;

  switch(a2)
  {
    case 0:
      v2 = 7352;
      goto LABEL_7;
    case 1:
      v2 = 24024;
      goto LABEL_7;
    case 2:
      v2 = 32472;
      goto LABEL_7;
    case 3:
      v2 = 15240;
LABEL_7:
      result = (uint64_t)this + v2;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t TXTextStyle::getGradient(TXTextStyle *this, int a2, CMTime *a3, FxColorDescription *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  CMTime v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  uint64_t v11;
  uint64_t v12;

  v11 = v4;
  v12 = v5;
  switch(a2)
  {
    case 0:
      v10 = *a3;
      result = TXTextStyle::getFaceGradient(this, &v10, a4);
      break;
    case 1:
      v9 = *a3;
      result = TXTextStyle::getOutlineGradient(this, &v9, a4);
      break;
    case 2:
      v8 = *a3;
      result = TXTextStyle::getGlowGradient(this, &v8, a4);
      break;
    case 3:
      v7 = *a3;
      result = TXTextStyle::getDropShadowGradient(this, &v7, a4);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t TXTextStyle::getColorChannel(TXTextStyle *this, int a2)
{
  uint64_t v2;
  uint64_t result;

  switch(a2)
  {
    case 0:
      v2 = 6344;
      goto LABEL_7;
    case 1:
      v2 = 23016;
      goto LABEL_7;
    case 2:
      v2 = 31464;
      goto LABEL_7;
    case 3:
      v2 = 14232;
LABEL_7:
      result = (uint64_t)this + v2;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t TXTextStyle::prerollBeginForNode(uint64_t a1, uint64_t a2, const OZRenderParams *a3, uint64_t a4, uint64_t a5, double a6)
{
  OZScene *v11;
  unsigned int ValueAsUint;
  void *Node;
  void *v14;
  uint64_t v15;
  CMTime v17[16];
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  CMTimeEpoch v21;

  v11 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a2 + 136), MEMORY[0x1E0CA2E68], 0.0);
  Node = OZScene::getNode(v11, ValueAsUint);
  if (!Node)
    return 0;
  v14 = Node;
  v20 = 0uLL;
  v21 = 0;
  v17[0] = *(CMTime *)a3;
  OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, v17, &v20);
  OZRenderParams::OZRenderParams((OZRenderParams *)v17, a3);
  *(__n128 *)&v17[0].value = v20;
  v18 = 0;
  v19 = 0;
  v17[0].epoch = v21;
  v15 = (*(uint64_t (**)(void *, CMTime *, uint64_t, uint64_t, double))(*(_QWORD *)v14 + 112))(v14, v17, a4, a5, a6);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v17);
  return v15;
}

void sub_1B293EB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::prerollBegin(uint64_t a1, const OZRenderParams *a2, uint64_t a3, uint64_t a4, double a5)
{
  TXTextStyle::prerollBeginForNode(a1, a1 + 8560, a2, a3, a4, a5);
  TXTextStyle::prerollBeginForNode(a1, a1 + 25232, a2, a3, a4, a5);
  TXTextStyle::prerollBeginForNode(a1, a1 + 33680, a2, a3, a4, a5);
  TXTextStyle::prerollBeginForNode(a1, a1 + 16448, a2, a3, a4, a5);
  return 0;
}

uint64_t TXTextStyle::prerollEndForNode(TXTextStyle *this, OZChannelImageWithOptions *a2, const OZRenderParams *a3, PMFrameRequest *a4)
{
  OZScene *v7;
  unsigned int ValueAsUint;
  void *Node;
  void *v10;
  uint64_t v11;
  CMTime v13[16];
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  CMTimeEpoch v17;

  v7 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(_QWORD *)this + 128))(this);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a2 + 136), MEMORY[0x1E0CA2E68], 0.0);
  Node = OZScene::getNode(v7, ValueAsUint);
  if (!Node)
    return 0;
  v10 = Node;
  v16 = 0uLL;
  v17 = 0;
  v13[0] = *(CMTime *)a3;
  OZChannelImageWithOptions::getFrame(a2, v13, &v16);
  OZRenderParams::OZRenderParams((OZRenderParams *)v13, a3);
  *(__n128 *)&v13[0].value = v16;
  v14 = 0;
  v15 = 0;
  v13[0].epoch = v17;
  v11 = (*(uint64_t (**)(void *, CMTime *, PMFrameRequest *))(*(_QWORD *)v10 + 120))(v10, v13, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v13);
  return v11;
}

void sub_1B293ED48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::prerollEnd(TXTextStyle *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  TXTextStyle::prerollEndForNode(this, (TXTextStyle *)((char *)this + 8560), a2, a3);
  TXTextStyle::prerollEndForNode(this, (TXTextStyle *)((char *)this + 25232), a2, a3);
  TXTextStyle::prerollEndForNode(this, (TXTextStyle *)((char *)this + 33680), a2, a3);
  TXTextStyle::prerollEndForNode(this, (TXTextStyle *)((char *)this + 16448), a2, a3);
  return 0;
}

uint64_t TXTextStyle::setRateForNode(TXTextStyle *this, OZChannelImageWithOptions *a2, const OZRenderParams *a3, PMFrameRequest *a4, double a5)
{
  OZScene *v9;
  unsigned int ValueAsUint;
  void *Node;
  void *v12;
  uint64_t v13;
  CMTime v15[16];
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  CMTimeEpoch v19;

  v9 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(_QWORD *)this + 128))(this);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a2 + 136), MEMORY[0x1E0CA2E68], 0.0);
  Node = OZScene::getNode(v9, ValueAsUint);
  if (!Node)
    return 0;
  v12 = Node;
  v18 = 0uLL;
  v19 = 0;
  v15[0] = *(CMTime *)a3;
  OZChannelImageWithOptions::getFrame(a2, v15, &v18);
  OZRenderParams::OZRenderParams((OZRenderParams *)v15, a3);
  *(__n128 *)&v15[0].value = v18;
  v16 = 0;
  v17 = 0;
  v15[0].epoch = v19;
  v13 = (*(uint64_t (**)(void *, CMTime *, PMFrameRequest *, double))(*(_QWORD *)v12 + 128))(v12, v15, a4, a5);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v15);
  return v13;
}

void sub_1B293EEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::setRate(TXTextStyle *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  TXTextStyle::setRateForNode(this, (TXTextStyle *)((char *)this + 8560), a2, a3, a4);
  TXTextStyle::setRateForNode(this, (TXTextStyle *)((char *)this + 25232), a2, a3, a4);
  TXTextStyle::setRateForNode(this, (TXTextStyle *)((char *)this + 33680), a2, a3, a4);
  TXTextStyle::setRateForNode(this, (TXTextStyle *)((char *)this + 16448), a2, a3, a4);
  return 0;
}

uint64_t TXTextStyle::scheduleTokensForNode(uint64_t a1, uint64_t a2, CMTime *a3, __int128 **a4, uint64_t a5, uint64_t a6)
{
  OZScene *v11;
  unsigned int ValueAsUint;
  void *Node;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v29;
  void *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  CMTime v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CMTime v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  CMTimeEpoch v43;

  v11 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a2 + 136), MEMORY[0x1E0CA2E68], 0.0);
  Node = OZScene::getNode(v11, ValueAsUint);
  if (!Node)
    return 0;
  v31 = Node;
  v32 = a5;
  v42 = 0uLL;
  v43 = 0;
  v39 = *a3;
  OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, &v39, &v42);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v39, (const OZRenderParams *)a3);
  *(__n128 *)&v39.value = v42;
  v40 = 0;
  v41 = 0;
  v39.epoch = v43;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(&v36, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (a4[1] - *a4));
  v15 = v36;
  v14 = v37;
  if (v37 != v36)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = v15 + 48 * v16;
      v21 = *(_QWORD *)(v18 + 24);
      v20 = (uint64_t *)(v18 + 24);
      v19 = v21;
      if (v20[1] != v21)
      {
        v22 = 0;
        v23 = 1;
        do
        {
          v24 = (__int128 *)(v19 + 24 * v22);
          v25 = *v24;
          v35.epoch = *((_QWORD *)v24 + 2);
          *(_OWORD *)&v35.value = v25;
          v33 = 0uLL;
          v34 = 0;
          OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, &v35, &v33);
          v26 = *(_QWORD *)(v36 + 48 * v16 + 24) + 24 * v22;
          v27 = v33;
          *(_QWORD *)(v26 + 16) = v34;
          *(__n128 *)v26 = v27;
          v22 = v23;
          v19 = *v20;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v20[1] - *v20) >> 3) > v23++);
        v15 = v36;
        v14 = v37;
      }
      v16 = ++v17;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 4) > v17);
  }
  v29 = (*(uint64_t (**)(void *, CMTime *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v31 + 136))(v31, &v39, &v36, v32, a6);
  v35.value = (CMTimeValue)&v36;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v39);
  return v29;
}

void sub_1B293F1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void **v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy((va_list)v8, va1);
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va2);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::scheduleTokens(uint64_t a1, CMTime *a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  TXTextStyle::scheduleTokensForNode(a1, a1 + 8560, a2, a3, a4, a5);
  TXTextStyle::scheduleTokensForNode(a1, a1 + 25232, a2, a3, a4, a5);
  TXTextStyle::scheduleTokensForNode(a1, a1 + 33680, a2, a3, a4, a5);
  TXTextStyle::scheduleTokensForNode(a1, a1 + 16448, a2, a3, a4, a5);
  return 0;
}

uint64_t TXTextStyle::hintTokensWillImageForNode(uint64_t a1, uint64_t a2, CMTime *a3, __int128 **a4, uint64_t a5)
{
  OZScene *v9;
  unsigned int ValueAsUint;
  void *Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v27;
  void *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  CMTime v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CMTime v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  CMTimeEpoch v41;

  v9 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a2 + 136), MEMORY[0x1E0CA2E68], 0.0);
  Node = OZScene::getNode(v9, ValueAsUint);
  if (!Node)
    return 0;
  v29 = Node;
  v30 = a5;
  v40 = 0uLL;
  v41 = 0;
  v37 = *a3;
  OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, &v37, &v40);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v37, (const OZRenderParams *)a3);
  *(__n128 *)&v37.value = v40;
  v38 = 0;
  v39 = 0;
  v37.epoch = v41;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(&v34, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (a4[1] - *a4));
  v13 = v34;
  v12 = v35;
  if (v35 != v34)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = v13 + 48 * v14;
      v19 = *(_QWORD *)(v16 + 24);
      v18 = (uint64_t *)(v16 + 24);
      v17 = v19;
      if (v18[1] != v19)
      {
        v20 = 0;
        v21 = 1;
        do
        {
          v22 = (__int128 *)(v17 + 24 * v20);
          v23 = *v22;
          v33.epoch = *((_QWORD *)v22 + 2);
          *(_OWORD *)&v33.value = v23;
          v31 = 0uLL;
          v32 = 0;
          OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, &v33, &v31);
          v24 = *(_QWORD *)(v34 + 48 * v14 + 24) + 24 * v20;
          v25 = v31;
          *(_QWORD *)(v24 + 16) = v32;
          *(__n128 *)v24 = v25;
          v20 = v21;
          v17 = *v18;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v18[1] - *v18) >> 3) > v21++);
        v13 = v34;
        v12 = v35;
      }
      v14 = ++v15;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 4) > v15);
  }
  v27 = (*(uint64_t (**)(void *, CMTime *, uint64_t *, uint64_t))(*(_QWORD *)v29 + 144))(v29, &v37, &v34, v30);
  v33.value = (CMTimeValue)&v34;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v37);
  return v27;
}

void sub_1B293F4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void **v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy((va_list)v8, va1);
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va2);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::hintTokensWillImage(uint64_t a1, CMTime *a2, __int128 **a3, uint64_t a4)
{
  TXTextStyle::hintTokensWillImageForNode(a1, a1 + 8560, a2, a3, a4);
  TXTextStyle::hintTokensWillImageForNode(a1, a1 + 25232, a2, a3, a4);
  TXTextStyle::hintTokensWillImageForNode(a1, a1 + 33680, a2, a3, a4);
  TXTextStyle::hintTokensWillImageForNode(a1, a1 + 16448, a2, a3, a4);
  return 0;
}

uint64_t TXTextStyle::getTokensImageForNode(uint64_t a1, uint64_t a2, CMTime *a3, __int128 **a4, uint64_t a5)
{
  OZScene *v9;
  unsigned int ValueAsUint;
  void *Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v27;
  void *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  CMTime v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CMTime v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  CMTimeEpoch v41;

  v9 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a2 + 136), MEMORY[0x1E0CA2E68], 0.0);
  Node = OZScene::getNode(v9, ValueAsUint);
  if (!Node)
    return 0;
  v29 = Node;
  v30 = a5;
  v40 = 0uLL;
  v41 = 0;
  v37 = *a3;
  OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, &v37, &v40);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v37, (const OZRenderParams *)a3);
  *(__n128 *)&v37.value = v40;
  v38 = 0;
  v39 = 0;
  v37.epoch = v41;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(&v34, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (a4[1] - *a4));
  v13 = v34;
  v12 = v35;
  if (v35 != v34)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = v13 + 48 * v14;
      v19 = *(_QWORD *)(v16 + 24);
      v18 = (uint64_t *)(v16 + 24);
      v17 = v19;
      if (v18[1] != v19)
      {
        v20 = 0;
        v21 = 1;
        do
        {
          v22 = (__int128 *)(v17 + 24 * v20);
          v23 = *v22;
          v33.epoch = *((_QWORD *)v22 + 2);
          *(_OWORD *)&v33.value = v23;
          v31 = 0uLL;
          v32 = 0;
          OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, &v33, &v31);
          v24 = *(_QWORD *)(v34 + 48 * v14 + 24) + 24 * v20;
          v25 = v31;
          *(_QWORD *)(v24 + 16) = v32;
          *(__n128 *)v24 = v25;
          v20 = v21;
          v17 = *v18;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v18[1] - *v18) >> 3) > v21++);
        v13 = v34;
        v12 = v35;
      }
      v14 = ++v15;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 4) > v15);
  }
  v27 = (*(uint64_t (**)(void *, CMTime *, uint64_t *, uint64_t))(*(_QWORD *)v29 + 152))(v29, &v37, &v34, v30);
  v33.value = (CMTimeValue)&v34;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v37);
  return v27;
}

void sub_1B293F788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void **v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy((va_list)v8, va1);
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va2);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::getTokensImage(uint64_t a1, CMTime *a2, __int128 **a3, uint64_t a4)
{
  TXTextStyle::getTokensImageForNode(a1, a1 + 8560, a2, a3, a4);
  TXTextStyle::getTokensImageForNode(a1, a1 + 25232, a2, a3, a4);
  TXTextStyle::getTokensImageForNode(a1, a1 + 33680, a2, a3, a4);
  TXTextStyle::getTokensImageForNode(a1, a1 + 16448, a2, a3, a4);
  return 0;
}

void *TXTextStyle::pruneTokensAtTimeForNode(TXTextStyle *this, OZChannelImageWithOptions *a2, CMTime *a3, const char *a4)
{
  OZScene *v7;
  unsigned int ValueAsUint;
  void *result;
  __int128 v10;
  CMTimeEpoch epoch;

  v7 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(_QWORD *)this + 128))(this);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a2 + 136), MEMORY[0x1E0CA2E68], 0.0);
  result = OZScene::getNode(v7, ValueAsUint);
  if (result)
  {
    v10 = *(_OWORD *)&a3->value;
    epoch = a3->epoch;
    return (void *)(*(uint64_t (**)(void *, __int128 *, const char *))(*(_QWORD *)result + 160))(result, &v10, a4);
  }
  return result;
}

void *TXTextStyle::pruneTokensAtTime(TXTextStyle *this, CMTime *a2, const char *a3)
{
  CMTime v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;

  v10 = *a2;
  TXTextStyle::pruneTokensAtTimeForNode(this, (TXTextStyle *)((char *)this + 8560), &v10, a3);
  v9 = *a2;
  TXTextStyle::pruneTokensAtTimeForNode(this, (TXTextStyle *)((char *)this + 25232), &v9, a3);
  v8 = *a2;
  TXTextStyle::pruneTokensAtTimeForNode(this, (TXTextStyle *)((char *)this + 33680), &v8, a3);
  v7 = *a2;
  return TXTextStyle::pruneTokensAtTimeForNode(this, (TXTextStyle *)((char *)this + 16448), &v7, a3);
}

void *TXTextStyle::pruneTokensExceptAtTimeForNode(TXTextStyle *this, OZChannelImageWithOptions *a2, CMTime *a3, const char *a4)
{
  OZScene *v7;
  unsigned int ValueAsUint;
  void *result;
  __int128 v10;
  CMTimeEpoch epoch;

  v7 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(_QWORD *)this + 128))(this);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a2 + 136), MEMORY[0x1E0CA2E68], 0.0);
  result = OZScene::getNode(v7, ValueAsUint);
  if (result)
  {
    v10 = *(_OWORD *)&a3->value;
    epoch = a3->epoch;
    return (void *)(*(uint64_t (**)(void *, __int128 *, const char *))(*(_QWORD *)result + 168))(result, &v10, a4);
  }
  return result;
}

void *TXTextStyle::pruneTokensExceptAtTime(TXTextStyle *this, CMTime *a2, const char *a3)
{
  CMTime v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;

  v10 = *a2;
  TXTextStyle::pruneTokensExceptAtTimeForNode(this, (TXTextStyle *)((char *)this + 8560), &v10, a3);
  v9 = *a2;
  TXTextStyle::pruneTokensExceptAtTimeForNode(this, (TXTextStyle *)((char *)this + 25232), &v9, a3);
  v8 = *a2;
  TXTextStyle::pruneTokensExceptAtTimeForNode(this, (TXTextStyle *)((char *)this + 33680), &v8, a3);
  v7 = *a2;
  return TXTextStyle::pruneTokensExceptAtTimeForNode(this, (TXTextStyle *)((char *)this + 16448), &v7, a3);
}

void *TXTextStyle::pruneAllTokensForNode(TXTextStyle *this, OZChannelImageWithOptions *a2, const char *a3)
{
  OZScene *v5;
  unsigned int ValueAsUint;
  void *result;

  v5 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(_QWORD *)this + 128))(this);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a2 + 136), MEMORY[0x1E0CA2E68], 0.0);
  result = OZScene::getNode(v5, ValueAsUint);
  if (result)
    return (void *)(*(uint64_t (**)(void *, const char *))(*(_QWORD *)result + 176))(result, a3);
  return result;
}

void *TXTextStyle::pruneAllTokens(TXTextStyle *this, const char *a2)
{
  TXTextStyle::pruneAllTokensForNode(this, (TXTextStyle *)((char *)this + 8560), a2);
  TXTextStyle::pruneAllTokensForNode(this, (TXTextStyle *)((char *)this + 25232), a2);
  TXTextStyle::pruneAllTokensForNode(this, (TXTextStyle *)((char *)this + 33680), a2);
  return TXTextStyle::pruneAllTokensForNode(this, (TXTextStyle *)((char *)this + 16448), a2);
}

uint64_t OZStyle::getInstanceID(OZStyle *this)
{
  return *((unsigned int *)this + 24);
}

OZChannelBase *OZStyle::finishInitializing(OZStyle *this)
{
  return OZChannelFolder::finishInitializing((OZChannelFolder *)((char *)this + 72));
}

uint64_t OZStyle::getRootChannel(OZStyle *this)
{
  return (uint64_t)this + 72;
}

uint64_t OZStyle::getSceneNode(OZStyle *this)
{
  return *((_QWORD *)this + 63);
}

uint64_t TXTextStyle::setCopyFlags(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48952) = a2;
  return this;
}

uint64_t TXTextStyle::getOZ3DExtrusionProperties(TXTextStyle *this)
{
  return (uint64_t)this + 40520;
}

uint64_t TXTextStyle::getOZLayout(TXTextStyle *this)
{
  return *((_QWORD *)this + 6118);
}

uint64_t `non-virtual thunk to'OZStyle::getSceneNode(OZStyle *this)
{
  return *((_QWORD *)this + 61);
}

BOOL OZObjectManipulator::areStaticHashesInvalid(OZObjectManipulator *this)
{
  return vorr_s8(*(int8x8_t *)((char *)this + 16), (int8x8_t)*(_OWORD *)&vextq_s8(*((int8x16_t *)this + 1), *((int8x16_t *)this + 1), 8uLL)) == 0;
}

uint64_t TXTextStyle::TXTextStyle_sizeInfo::getInstance(TXTextStyle::TXTextStyle_sizeInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_sizeInfo::getInstance(void)::TXTextStyle_sizeInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_sizeInfo::getInstance(void)::TXTextStyle_sizeInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_sizeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_sizeInfo::_TXTextStyle_sizeInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_sizeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_sizeInfo *v0;

  if (!TXTextStyle::TXTextStyle_sizeInfo::_TXTextStyle_sizeInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_sizeInfo *)operator new();
    TXTextStyle::TXTextStyle_sizeInfo::TXTextStyle_sizeInfo(v0);
    TXTextStyle::TXTextStyle_sizeInfo::_TXTextStyle_sizeInfo = (uint64_t)v0;
  }
}

void sub_1B293FD08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_sizeInfo *TXTextStyle::TXTextStyle_sizeInfo::TXTextStyle_sizeInfo(TXTextStyle::TXTextStyle_sizeInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 6.0, 288.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_sizeInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6500598;
  *((_QWORD *)this + 10) = &unk_1E65005B8;
  return this;
}

void sub_1B293FDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_oldTrackingInfo::getInstance(TXTextStyle::TXTextStyle_oldTrackingInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_oldTrackingInfo::getInstance(void)::TXTextStyle_oldTrackingInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_oldTrackingInfo::getInstance(void)::TXTextStyle_oldTrackingInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_oldTrackingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_oldTrackingInfo::_TXTextStyle_oldTrackingInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_oldTrackingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_oldTrackingInfo *v0;

  if (!TXTextStyle::TXTextStyle_oldTrackingInfo::_TXTextStyle_oldTrackingInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_oldTrackingInfo *)operator new();
    TXTextStyle::TXTextStyle_oldTrackingInfo::TXTextStyle_oldTrackingInfo(v0);
    TXTextStyle::TXTextStyle_oldTrackingInfo::_TXTextStyle_oldTrackingInfo = (uint64_t)v0;
  }
}

void sub_1B293FE84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_oldTrackingInfo *TXTextStyle::TXTextStyle_oldTrackingInfo::TXTextStyle_oldTrackingInfo(TXTextStyle::TXTextStyle_oldTrackingInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -10.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_oldTrackingInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6500610;
  *((_QWORD *)this + 10) = &unk_1E6500630;
  return this;
}

void sub_1B293FF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_kerningImpl::getInstance(TXTextStyle::TXTextStyle_kerningImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_kerningImpl::getInstance(void)::TXTextStyle_kerningImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_kerningImpl::getInstance(void)::TXTextStyle_kerningImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_kerningImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_kerningImpl::_TXTextStyle_kerning;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_kerningImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_kerningImpl *v0;

  if (!TXTextStyle::TXTextStyle_kerningImpl::_TXTextStyle_kerning)
  {
    v0 = (TXTextStyle::TXTextStyle_kerningImpl *)operator new();
    TXTextStyle::TXTextStyle_kerningImpl::TXTextStyle_kerningImpl(v0);
    TXTextStyle::TXTextStyle_kerningImpl::_TXTextStyle_kerning = (uint64_t)v0;
  }
}

void sub_1B293FFFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_kerningImpl *TXTextStyle::TXTextStyle_kerningImpl::TXTextStyle_kerningImpl(TXTextStyle::TXTextStyle_kerningImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_kerningImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6500688;
  *((_QWORD *)this + 5) = &unk_1E65006A8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B29400B0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_kerningInfo::getInstance(TXTextStyle::TXTextStyle_kerningInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_kerningInfo::getInstance(void)::TXTextStyle_kerningInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_kerningInfo::getInstance(void)::TXTextStyle_kerningInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_kerningInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_kerningInfo::_TXTextStyle_kerningInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_kerningInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_kerningInfo *v0;

  if (!TXTextStyle::TXTextStyle_kerningInfo::_TXTextStyle_kerningInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_kerningInfo *)operator new();
    TXTextStyle::TXTextStyle_kerningInfo::TXTextStyle_kerningInfo(v0);
    TXTextStyle::TXTextStyle_kerningInfo::_TXTextStyle_kerningInfo = (uint64_t)v0;
  }
}

void sub_1B294017C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_kerningInfo *TXTextStyle::TXTextStyle_kerningInfo::TXTextStyle_kerningInfo(TXTextStyle::TXTextStyle_kerningInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -100.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_kerningInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6500700;
  *((_QWORD *)this + 10) = &unk_1E6500720;
  return this;
}

void sub_1B2940230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_baselineInfo::getInstance(TXTextStyle::TXTextStyle_baselineInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_baselineInfo::getInstance(void)::TXTextStyle_baselineInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_baselineInfo::getInstance(void)::TXTextStyle_baselineInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_baselineInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_baselineInfo::_TXTextStyle_baselineInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_baselineInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_baselineInfo *v0;

  if (!TXTextStyle::TXTextStyle_baselineInfo::_TXTextStyle_baselineInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_baselineInfo *)operator new();
    TXTextStyle::TXTextStyle_baselineInfo::TXTextStyle_baselineInfo(v0);
    TXTextStyle::TXTextStyle_baselineInfo::_TXTextStyle_baselineInfo = (uint64_t)v0;
  }
}

void sub_1B29402FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_baselineInfo *TXTextStyle::TXTextStyle_baselineInfo::TXTextStyle_baselineInfo(TXTextStyle::TXTextStyle_baselineInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -100.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_baselineInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6500778;
  *((_QWORD *)this + 10) = &unk_1E6500798;
  return this;
}

void sub_1B29403B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_slantImpl::getInstance(TXTextStyle::TXTextStyle_slantImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_slantImpl::getInstance(void)::TXTextStyle_slantImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_slantImpl::getInstance(void)::TXTextStyle_slantImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_slantImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_slantImpl::_TXTextStyle_slant;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_slantImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_slantImpl *v0;

  if (!TXTextStyle::TXTextStyle_slantImpl::_TXTextStyle_slant)
  {
    v0 = (TXTextStyle::TXTextStyle_slantImpl *)operator new();
    TXTextStyle::TXTextStyle_slantImpl::TXTextStyle_slantImpl(v0);
    TXTextStyle::TXTextStyle_slantImpl::_TXTextStyle_slant = (uint64_t)v0;
  }
}

void sub_1B294047C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_slantImpl *TXTextStyle::TXTextStyle_slantImpl::TXTextStyle_slantImpl(TXTextStyle::TXTextStyle_slantImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_slantImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65007F0;
  *((_QWORD *)this + 5) = &unk_1E6500810;
  OZChannelImpl::setMin((OZChannelImpl *)this, -60.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 60.0);
  return this;
}

void sub_1B2940530(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_slantInfo::getInstance(TXTextStyle::TXTextStyle_slantInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_slantInfo::getInstance(void)::TXTextStyle_slantInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_slantInfo::getInstance(void)::TXTextStyle_slantInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_slantInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_slantInfo::_TXTextStyle_slantInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_slantInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_slantInfo *v0;

  if (!TXTextStyle::TXTextStyle_slantInfo::_TXTextStyle_slantInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_slantInfo *)operator new();
    TXTextStyle::TXTextStyle_slantInfo::TXTextStyle_slantInfo(v0);
    TXTextStyle::TXTextStyle_slantInfo::_TXTextStyle_slantInfo = (uint64_t)v0;
  }
}

void sub_1B29405FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_slantInfo *TXTextStyle::TXTextStyle_slantInfo::TXTextStyle_slantInfo(TXTextStyle::TXTextStyle_slantInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -60.0, 60.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_slantInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6500868;
  *((_QWORD *)this + 10) = &unk_1E6500888;
  return this;
}

void sub_1B29406B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_allCapsSizeImpl::getInstance(TXTextStyle::TXTextStyle_allCapsSizeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_allCapsSizeImpl::getInstance(void)::TXTextStyle_allCapsSizeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_allCapsSizeImpl::getInstance(void)::TXTextStyle_allCapsSizeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_allCapsSizeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_allCapsSizeImpl::_TXTextStyle_allCapsSize;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_allCapsSizeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!TXTextStyle::TXTextStyle_allCapsSizeImpl::_TXTextStyle_allCapsSize)
  {
    v0 = (OZChannelPercent *)operator new();
    TXTextStyle::TXTextStyle_allCapsSizeImpl::TXTextStyle_allCapsSizeImpl(v0);
    TXTextStyle::TXTextStyle_allCapsSizeImpl::_TXTextStyle_allCapsSize = (uint64_t)v0;
  }
}

void sub_1B294077C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *TXTextStyle::TXTextStyle_allCapsSizeImpl::TXTextStyle_allCapsSizeImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.8);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.8, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65008E0;
  this->var5 = (PCString *)&unk_1E6500900;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2940838(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_faceBlurImpl::getInstance(TXTextStyle::TXTextStyle_faceBlurImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_faceBlurImpl::getInstance(void)::TXTextStyle_faceBlurImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_faceBlurImpl::getInstance(void)::TXTextStyle_faceBlurImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_faceBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_faceBlurImpl::_TXTextStyle_faceBlur;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_faceBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_faceBlurImpl *v0;

  if (!TXTextStyle::TXTextStyle_faceBlurImpl::_TXTextStyle_faceBlur)
  {
    v0 = (TXTextStyle::TXTextStyle_faceBlurImpl *)operator new();
    TXTextStyle::TXTextStyle_faceBlurImpl::TXTextStyle_faceBlurImpl(v0);
    TXTextStyle::TXTextStyle_faceBlurImpl::_TXTextStyle_faceBlur = (uint64_t)v0;
  }
}

void sub_1B2940904(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_faceBlurImpl *TXTextStyle::TXTextStyle_faceBlurImpl::TXTextStyle_faceBlurImpl(TXTextStyle::TXTextStyle_faceBlurImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_faceBlurImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6500958;
  *((_QWORD *)this + 5) = &unk_1E6500978;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B29409B4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_faceBlurInfo::getInstance(TXTextStyle::TXTextStyle_faceBlurInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_faceBlurInfo::getInstance(void)::TXTextStyle_faceBlurInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_faceBlurInfo::getInstance(void)::TXTextStyle_faceBlurInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_faceBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_faceBlurInfo::_TXTextStyle_faceBlurInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_faceBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_faceBlurInfo *v0;

  if (!TXTextStyle::TXTextStyle_faceBlurInfo::_TXTextStyle_faceBlurInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_faceBlurInfo *)operator new();
    TXTextStyle::TXTextStyle_faceBlurInfo::TXTextStyle_faceBlurInfo(v0);
    TXTextStyle::TXTextStyle_faceBlurInfo::_TXTextStyle_faceBlurInfo = (uint64_t)v0;
  }
}

void sub_1B2940A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_faceBlurInfo *TXTextStyle::TXTextStyle_faceBlurInfo::TXTextStyle_faceBlurInfo(TXTextStyle::TXTextStyle_faceBlurInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_faceBlurInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65009D0;
  *((_QWORD *)this + 10) = &unk_1E65009F0;
  return this;
}

void sub_1B2940B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_dropShadowOpacityImpl::getInstance(TXTextStyle::TXTextStyle_dropShadowOpacityImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_dropShadowOpacityImpl::getInstance(void)::TXTextStyle_dropShadowOpacityImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_dropShadowOpacityImpl::getInstance(void)::TXTextStyle_dropShadowOpacityImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_dropShadowOpacityImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_dropShadowOpacityImpl::_TXTextStyle_dropShadowOpacity;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_dropShadowOpacityImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!TXTextStyle::TXTextStyle_dropShadowOpacityImpl::_TXTextStyle_dropShadowOpacity)
  {
    v0 = (OZChannelPercent *)operator new();
    TXTextStyle::TXTextStyle_dropShadowOpacityImpl::TXTextStyle_dropShadowOpacityImpl(v0);
    TXTextStyle::TXTextStyle_dropShadowOpacityImpl::_TXTextStyle_dropShadowOpacity = (uint64_t)v0;
  }
}

void sub_1B2940BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *TXTextStyle::TXTextStyle_dropShadowOpacityImpl::TXTextStyle_dropShadowOpacityImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.75);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.75, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E6500A48;
  this->var5 = (PCString *)&unk_1E6500A68;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2940CA4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_dropShadowBlurImpl::getInstance(TXTextStyle::TXTextStyle_dropShadowBlurImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_dropShadowBlurImpl::getInstance(void)::TXTextStyle_dropShadowBlurImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_dropShadowBlurImpl::getInstance(void)::TXTextStyle_dropShadowBlurImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_dropShadowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_dropShadowBlurImpl::_TXTextStyle_dropShadowBlur;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_dropShadowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_dropShadowBlurImpl *v0;

  if (!TXTextStyle::TXTextStyle_dropShadowBlurImpl::_TXTextStyle_dropShadowBlur)
  {
    v0 = (TXTextStyle::TXTextStyle_dropShadowBlurImpl *)operator new();
    TXTextStyle::TXTextStyle_dropShadowBlurImpl::TXTextStyle_dropShadowBlurImpl(v0);
    TXTextStyle::TXTextStyle_dropShadowBlurImpl::_TXTextStyle_dropShadowBlur = (uint64_t)v0;
  }
}

void sub_1B2940D70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_dropShadowBlurImpl *TXTextStyle::TXTextStyle_dropShadowBlurImpl::TXTextStyle_dropShadowBlurImpl(TXTextStyle::TXTextStyle_dropShadowBlurImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_dropShadowBlurImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6500AC0;
  *((_QWORD *)this + 5) = &unk_1E6500AE0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2940E20(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_dropShadowBlurInfo::getInstance(TXTextStyle::TXTextStyle_dropShadowBlurInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_dropShadowBlurInfo::getInstance(void)::TXTextStyle_dropShadowBlurInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_dropShadowBlurInfo::getInstance(void)::TXTextStyle_dropShadowBlurInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_dropShadowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_dropShadowBlurInfo::_TXTextStyle_dropShadowBlurInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_dropShadowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_dropShadowBlurInfo *v0;

  if (!TXTextStyle::TXTextStyle_dropShadowBlurInfo::_TXTextStyle_dropShadowBlurInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_dropShadowBlurInfo *)operator new();
    TXTextStyle::TXTextStyle_dropShadowBlurInfo::TXTextStyle_dropShadowBlurInfo(v0);
    TXTextStyle::TXTextStyle_dropShadowBlurInfo::_TXTextStyle_dropShadowBlurInfo = (uint64_t)v0;
  }
}

void sub_1B2940EEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_dropShadowBlurInfo *TXTextStyle::TXTextStyle_dropShadowBlurInfo::TXTextStyle_dropShadowBlurInfo(TXTextStyle::TXTextStyle_dropShadowBlurInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_dropShadowBlurInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6500B38;
  *((_QWORD *)this + 10) = &unk_1E6500B58;
  return this;
}

void sub_1B2940F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_dropShadowDistanceImpl::getInstance(TXTextStyle::TXTextStyle_dropShadowDistanceImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_dropShadowDistanceImpl::getInstance(void)::TXTextStyle_dropShadowDistanceImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_dropShadowDistanceImpl::getInstance(void)::TXTextStyle_dropShadowDistanceImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_dropShadowDistanceImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_dropShadowDistanceImpl::_TXTextStyle_dropShadowDistance;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_dropShadowDistanceImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_dropShadowDistanceImpl *v0;

  if (!TXTextStyle::TXTextStyle_dropShadowDistanceImpl::_TXTextStyle_dropShadowDistance)
  {
    v0 = (TXTextStyle::TXTextStyle_dropShadowDistanceImpl *)operator new();
    TXTextStyle::TXTextStyle_dropShadowDistanceImpl::TXTextStyle_dropShadowDistanceImpl(v0);
    TXTextStyle::TXTextStyle_dropShadowDistanceImpl::_TXTextStyle_dropShadowDistance = (uint64_t)v0;
  }
}

void sub_1B2941064(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_dropShadowDistanceImpl *TXTextStyle::TXTextStyle_dropShadowDistanceImpl::TXTextStyle_dropShadowDistanceImpl(TXTextStyle::TXTextStyle_dropShadowDistanceImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 5.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 5.0, 1, 1);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_dropShadowDistanceImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6500BB0;
  *((_QWORD *)this + 5) = &unk_1E6500BD0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2941114(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_dropShadowDistanceInfo::getInstance(TXTextStyle::TXTextStyle_dropShadowDistanceInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_dropShadowDistanceInfo::getInstance(void)::TXTextStyle_dropShadowDistanceInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_dropShadowDistanceInfo::getInstance(void)::TXTextStyle_dropShadowDistanceInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_dropShadowDistanceInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_dropShadowDistanceInfo::_TXTextStyle_dropShadowDistanceInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_dropShadowDistanceInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_dropShadowDistanceInfo *v0;

  if (!TXTextStyle::TXTextStyle_dropShadowDistanceInfo::_TXTextStyle_dropShadowDistanceInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_dropShadowDistanceInfo *)operator new();
    TXTextStyle::TXTextStyle_dropShadowDistanceInfo::TXTextStyle_dropShadowDistanceInfo(v0);
    TXTextStyle::TXTextStyle_dropShadowDistanceInfo::_TXTextStyle_dropShadowDistanceInfo = (uint64_t)v0;
  }
}

void sub_1B29411E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_dropShadowDistanceInfo *TXTextStyle::TXTextStyle_dropShadowDistanceInfo::TXTextStyle_dropShadowDistanceInfo(TXTextStyle::TXTextStyle_dropShadowDistanceInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_dropShadowDistanceInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6500C28;
  *((_QWORD *)this + 10) = &unk_1E6500C48;
  return this;
}

void sub_1B2941290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_dropShadowAngleImpl::getInstance(TXTextStyle::TXTextStyle_dropShadowAngleImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_dropShadowAngleImpl::getInstance(void)::TXTextStyle_dropShadowAngleImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_dropShadowAngleImpl::getInstance(void)::TXTextStyle_dropShadowAngleImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_dropShadowAngleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_dropShadowAngleImpl::_TXTextStyle_dropShadowAngle;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_dropShadowAngleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelAngle *v0;

  if (!TXTextStyle::TXTextStyle_dropShadowAngleImpl::_TXTextStyle_dropShadowAngle)
  {
    v0 = (OZChannelAngle *)operator new();
    TXTextStyle::TXTextStyle_dropShadowAngleImpl::TXTextStyle_dropShadowAngleImpl(v0);
    TXTextStyle::TXTextStyle_dropShadowAngleImpl::_TXTextStyle_dropShadowAngle = (uint64_t)v0;
  }
}

void sub_1B294135C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelAngle *TXTextStyle::TXTextStyle_dropShadowAngleImpl::TXTextStyle_dropShadowAngleImpl(OZChannelAngle *this)
{
  OZCurve *OZChannelAngleCurve;

  OZChannelAngleCurve = (OZCurve *)OZChannelAngle::createOZChannelAngleCurve(this, 5.49778714);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelAngleCurve, 5.49778714, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E6500CA0;
  this->var5 = (PCString *)&unk_1E6500CC0;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2941420(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

OZCurveAngle *OZChannelAngle::createOZChannelAngleCurve(OZChannelAngle *this, double a2)
{
  OZCurveAngle *v3;

  v3 = (OZCurveAngle *)operator new();
  OZCurveAngle::OZCurveAngle(v3, a2);
  return v3;
}

void sub_1B2941490(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_outlineBlurImpl::getInstance(TXTextStyle::TXTextStyle_outlineBlurImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_outlineBlurImpl::getInstance(void)::TXTextStyle_outlineBlurImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_outlineBlurImpl::getInstance(void)::TXTextStyle_outlineBlurImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_outlineBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_outlineBlurImpl::_TXTextStyle_outlineBlur;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_outlineBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_outlineBlurImpl *v0;

  if (!TXTextStyle::TXTextStyle_outlineBlurImpl::_TXTextStyle_outlineBlur)
  {
    v0 = (TXTextStyle::TXTextStyle_outlineBlurImpl *)operator new();
    TXTextStyle::TXTextStyle_outlineBlurImpl::TXTextStyle_outlineBlurImpl(v0);
    TXTextStyle::TXTextStyle_outlineBlurImpl::_TXTextStyle_outlineBlur = (uint64_t)v0;
  }
}

void sub_1B294155C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_outlineBlurImpl *TXTextStyle::TXTextStyle_outlineBlurImpl::TXTextStyle_outlineBlurImpl(TXTextStyle::TXTextStyle_outlineBlurImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_outlineBlurImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6500D18;
  *((_QWORD *)this + 5) = &unk_1E6500D38;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B294160C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_outlineBlurInfo::getInstance(TXTextStyle::TXTextStyle_outlineBlurInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_outlineBlurInfo::getInstance(void)::TXTextStyle_outlineBlurInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_outlineBlurInfo::getInstance(void)::TXTextStyle_outlineBlurInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_outlineBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_outlineBlurInfo::_TXTextStyle_outlineBlurInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_outlineBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_outlineBlurInfo *v0;

  if (!TXTextStyle::TXTextStyle_outlineBlurInfo::_TXTextStyle_outlineBlurInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_outlineBlurInfo *)operator new();
    TXTextStyle::TXTextStyle_outlineBlurInfo::TXTextStyle_outlineBlurInfo(v0);
    TXTextStyle::TXTextStyle_outlineBlurInfo::_TXTextStyle_outlineBlurInfo = (uint64_t)v0;
  }
}

void sub_1B29416D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_outlineBlurInfo *TXTextStyle::TXTextStyle_outlineBlurInfo::TXTextStyle_outlineBlurInfo(TXTextStyle::TXTextStyle_outlineBlurInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_outlineBlurInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6500D90;
  *((_QWORD *)this + 10) = &unk_1E6500DB0;
  return this;
}

void sub_1B2941784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_outlineWidthImpl::getInstance(TXTextStyle::TXTextStyle_outlineWidthImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_outlineWidthImpl::getInstance(void)::TXTextStyle_outlineWidthImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_outlineWidthImpl::getInstance(void)::TXTextStyle_outlineWidthImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_outlineWidthImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_outlineWidthImpl::_TXTextStyle_outlineWidth;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_outlineWidthImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_outlineWidthImpl *v0;

  if (!TXTextStyle::TXTextStyle_outlineWidthImpl::_TXTextStyle_outlineWidth)
  {
    v0 = (TXTextStyle::TXTextStyle_outlineWidthImpl *)operator new();
    TXTextStyle::TXTextStyle_outlineWidthImpl::TXTextStyle_outlineWidthImpl(v0);
    TXTextStyle::TXTextStyle_outlineWidthImpl::_TXTextStyle_outlineWidth = (uint64_t)v0;
  }
}

void sub_1B2941850(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_outlineWidthImpl *TXTextStyle::TXTextStyle_outlineWidthImpl::TXTextStyle_outlineWidthImpl(TXTextStyle::TXTextStyle_outlineWidthImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_outlineWidthImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6500E08;
  *((_QWORD *)this + 5) = &unk_1E6500E28;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2941900(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_outlineWidthInfo::getInstance(TXTextStyle::TXTextStyle_outlineWidthInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_outlineWidthInfo::getInstance(void)::TXTextStyle_outlineWidthInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_outlineWidthInfo::getInstance(void)::TXTextStyle_outlineWidthInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_outlineWidthInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_outlineWidthInfo::_TXTextStyle_outlineWidthInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_outlineWidthInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_outlineWidthInfo *v0;

  if (!TXTextStyle::TXTextStyle_outlineWidthInfo::_TXTextStyle_outlineWidthInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_outlineWidthInfo *)operator new();
    TXTextStyle::TXTextStyle_outlineWidthInfo::TXTextStyle_outlineWidthInfo(v0);
    TXTextStyle::TXTextStyle_outlineWidthInfo::_TXTextStyle_outlineWidthInfo = (uint64_t)v0;
  }
}

void sub_1B29419CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_outlineWidthInfo *TXTextStyle::TXTextStyle_outlineWidthInfo::TXTextStyle_outlineWidthInfo(TXTextStyle::TXTextStyle_outlineWidthInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 15.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_outlineWidthInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6500E80;
  *((_QWORD *)this + 10) = &unk_1E6500EA0;
  return this;
}

void sub_1B2941A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(TXTextStyle::TXTextStyle_glowBlurImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(void)::TXTextStyle_glowBlurImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(void)::TXTextStyle_glowBlurImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_glowBlurImpl::_TXTextStyle_glowBlur;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_glowBlurImpl *v0;

  if (!TXTextStyle::TXTextStyle_glowBlurImpl::_TXTextStyle_glowBlur)
  {
    v0 = (TXTextStyle::TXTextStyle_glowBlurImpl *)operator new();
    TXTextStyle::TXTextStyle_glowBlurImpl::TXTextStyle_glowBlurImpl(v0);
    TXTextStyle::TXTextStyle_glowBlurImpl::_TXTextStyle_glowBlur = (uint64_t)v0;
  }
}

void sub_1B2941B44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_glowBlurImpl *TXTextStyle::TXTextStyle_glowBlurImpl::TXTextStyle_glowBlurImpl(TXTextStyle::TXTextStyle_glowBlurImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_glowBlurImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6500EF8;
  *((_QWORD *)this + 5) = &unk_1E6500F18;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2941BF4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_glowBlurInfo::getInstance(TXTextStyle::TXTextStyle_glowBlurInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_glowBlurInfo::getInstance(void)::TXTextStyle_glowBlurInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_glowBlurInfo::getInstance(void)::TXTextStyle_glowBlurInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_glowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_glowBlurInfo::_TXTextStyle_glowBlurInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_glowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_glowBlurInfo *v0;

  if (!TXTextStyle::TXTextStyle_glowBlurInfo::_TXTextStyle_glowBlurInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_glowBlurInfo *)operator new();
    TXTextStyle::TXTextStyle_glowBlurInfo::TXTextStyle_glowBlurInfo(v0);
    TXTextStyle::TXTextStyle_glowBlurInfo::_TXTextStyle_glowBlurInfo = (uint64_t)v0;
  }
}

void sub_1B2941CC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_glowBlurInfo *TXTextStyle::TXTextStyle_glowBlurInfo::TXTextStyle_glowBlurInfo(TXTextStyle::TXTextStyle_glowBlurInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_glowBlurInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6500F70;
  *((_QWORD *)this + 10) = &unk_1E6500F90;
  return this;
}

void sub_1B2941D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_glowRadiusImpl::getInstance(TXTextStyle::TXTextStyle_glowRadiusImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_glowRadiusImpl::getInstance(void)::TXTextStyle_glowRadiusImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_glowRadiusImpl::getInstance(void)::TXTextStyle_glowRadiusImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_glowRadiusImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_glowRadiusImpl::_TXTextStyle_glowRadius;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_glowRadiusImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_glowRadiusImpl *v0;

  if (!TXTextStyle::TXTextStyle_glowRadiusImpl::_TXTextStyle_glowRadius)
  {
    v0 = (TXTextStyle::TXTextStyle_glowRadiusImpl *)operator new();
    TXTextStyle::TXTextStyle_glowRadiusImpl::TXTextStyle_glowRadiusImpl(v0);
    TXTextStyle::TXTextStyle_glowRadiusImpl::_TXTextStyle_glowRadius = (uint64_t)v0;
  }
}

void sub_1B2941E38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_glowRadiusImpl *TXTextStyle::TXTextStyle_glowRadiusImpl::TXTextStyle_glowRadiusImpl(TXTextStyle::TXTextStyle_glowRadiusImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_glowRadiusImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6500FE8;
  *((_QWORD *)this + 5) = &unk_1E6501008;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2941EE8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_glowRadiusInfo::getInstance(TXTextStyle::TXTextStyle_glowRadiusInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_glowRadiusInfo::getInstance(void)::TXTextStyle_glowRadiusInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_glowRadiusInfo::getInstance(void)::TXTextStyle_glowRadiusInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_glowRadiusInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_glowRadiusInfo::_TXTextStyle_glowRadiusInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_glowRadiusInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_glowRadiusInfo *v0;

  if (!TXTextStyle::TXTextStyle_glowRadiusInfo::_TXTextStyle_glowRadiusInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_glowRadiusInfo *)operator new();
    TXTextStyle::TXTextStyle_glowRadiusInfo::TXTextStyle_glowRadiusInfo(v0);
    TXTextStyle::TXTextStyle_glowRadiusInfo::_TXTextStyle_glowRadiusInfo = (uint64_t)v0;
  }
}

void sub_1B2941FB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_glowRadiusInfo *TXTextStyle::TXTextStyle_glowRadiusInfo::TXTextStyle_glowRadiusInfo(TXTextStyle::TXTextStyle_glowRadiusInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_glowRadiusInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6501060;
  *((_QWORD *)this + 10) = &unk_1E6501080;
  return this;
}

void sub_1B2942064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_trackingImpl::getInstance(TXTextStyle::TXTextStyle_trackingImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_trackingImpl::getInstance(void)::TXTextStyle_trackingImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_trackingImpl::getInstance(void)::TXTextStyle_trackingImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_trackingImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_trackingImpl::_TXTextStyle_tracking;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_trackingImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!TXTextStyle::TXTextStyle_trackingImpl::_TXTextStyle_tracking)
  {
    v0 = (OZChannelPercent *)operator new();
    TXTextStyle::TXTextStyle_trackingImpl::TXTextStyle_trackingImpl(v0);
    TXTextStyle::TXTextStyle_trackingImpl::_TXTextStyle_tracking = (uint64_t)v0;
  }
}

void sub_1B2942130(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *TXTextStyle::TXTextStyle_trackingImpl::TXTextStyle_trackingImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65010D8;
  this->var5 = (PCString *)&unk_1E65010F8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1000.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1000.0);
  return this;
}

void sub_1B29421E4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_trackingInfo::getInstance(TXTextStyle::TXTextStyle_trackingInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_trackingInfo::getInstance(void)::TXTextStyle_trackingInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_trackingInfo::getInstance(void)::TXTextStyle_trackingInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_trackingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_trackingInfo::_TXTextStyle_trackingInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_trackingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_trackingInfo *v0;

  if (!TXTextStyle::TXTextStyle_trackingInfo::_TXTextStyle_trackingInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_trackingInfo *)operator new();
    TXTextStyle::TXTextStyle_trackingInfo::TXTextStyle_trackingInfo(v0);
    TXTextStyle::TXTextStyle_trackingInfo::_TXTextStyle_trackingInfo = (uint64_t)v0;
  }
}

void sub_1B29422B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_trackingInfo *TXTextStyle::TXTextStyle_trackingInfo::TXTextStyle_trackingInfo(TXTextStyle::TXTextStyle_trackingInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_trackingInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6501150;
  *((_QWORD *)this + 10) = &unk_1E6501170;
  return this;
}

void sub_1B2942364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_V4TrackingImpl::getInstance(TXTextStyle::TXTextStyle_V4TrackingImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_V4TrackingImpl::getInstance(void)::TXTextStyle_V4TrackingImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_V4TrackingImpl::getInstance(void)::TXTextStyle_V4TrackingImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_V4TrackingImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_V4TrackingImpl::_TXTextStyle_V4Tracking;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_V4TrackingImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!TXTextStyle::TXTextStyle_V4TrackingImpl::_TXTextStyle_V4Tracking)
  {
    v0 = (OZChannelPercent *)operator new();
    TXTextStyle::TXTextStyle_V4TrackingImpl::TXTextStyle_V4TrackingImpl(v0);
    TXTextStyle::TXTextStyle_V4TrackingImpl::_TXTextStyle_V4Tracking = (uint64_t)v0;
  }
}

void sub_1B2942430(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *TXTextStyle::TXTextStyle_V4TrackingImpl::TXTextStyle_V4TrackingImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65011C8;
  this->var5 = (PCString *)&unk_1E65011E8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1000.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1000.0);
  return this;
}

void sub_1B29424E4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_V4TrackingInfo::getInstance(TXTextStyle::TXTextStyle_V4TrackingInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTextStyle::TXTextStyle_V4TrackingInfo::getInstance(void)::TXTextStyle_V4TrackingInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTextStyle::TXTextStyle_V4TrackingInfo::getInstance(void)::TXTextStyle_V4TrackingInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_V4TrackingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_V4TrackingInfo::_TXTextStyle_V4TrackingInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_V4TrackingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTextStyle::TXTextStyle_V4TrackingInfo *v0;

  if (!TXTextStyle::TXTextStyle_V4TrackingInfo::_TXTextStyle_V4TrackingInfo)
  {
    v0 = (TXTextStyle::TXTextStyle_V4TrackingInfo *)operator new();
    TXTextStyle::TXTextStyle_V4TrackingInfo::TXTextStyle_V4TrackingInfo(v0);
    TXTextStyle::TXTextStyle_V4TrackingInfo::_TXTextStyle_V4TrackingInfo = (uint64_t)v0;
  }
}

void sub_1B29425B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_V4TrackingInfo *TXTextStyle::TXTextStyle_V4TrackingInfo::TXTextStyle_V4TrackingInfo(TXTextStyle::TXTextStyle_V4TrackingInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_V4TrackingInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6501240;
  *((_QWORD *)this + 10) = &unk_1E6501260;
  return this;
}

void sub_1B2942664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::~OZChannelImageWithOptions(OZChannelImageWithOptions *this)
{
  *(_QWORD *)this = &off_1E65BB338;
  *((_QWORD *)this + 2) = &unk_1E65BB690;
  OZChannelEnum::~OZChannelEnum((OZChannelImageWithOptions *)((char *)this + 1328));
  OZChannelPosition::~OZChannelPosition((OZChannelImageWithOptions *)((char *)this + 624));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 472));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 320));
  OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions((OZChannelImageWithOptions *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

{
  OZChannelImageWithOptions::~OZChannelImageWithOptions(this);
  JUMPOUT(0x1B5E29170);
}

void OZChannelFontBase::~OZChannelFontBase(PCString *this)
{
  this->var0 = (__CFString *)&off_1E65C0DF0;
  this[2].var0 = (__CFString *)&unk_1E65C1160;
  PCString::~PCString(this + 82);
  PCString::~PCString(this + 81);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)&this[49]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)&this[17]);
  OZChannelObjectRootBase::~OZChannelObjectRootBase((OZChannelObjectRootBase *)this);
}

void std::__call_once_param<std::tuple<OZLayeredMaterial_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLayeredMaterial_Factory *v0;

  v0 = (OZLayeredMaterial_Factory *)operator new();
  OZLayeredMaterial_Factory::OZLayeredMaterial_Factory(v0);
  OZLayeredMaterial_Factory::_instance = (uint64_t)v0;
}

void sub_1B2942788(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZLayeredMaterial_Factory::OZLayeredMaterial_Factory(OZLayeredMaterial_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3055260;
  v4 = xmmword_1B3055250;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E65013E8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65012B8;
  *((_QWORD *)this + 16) = &unk_1E6501390;
}

void sub_1B2942828(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZLayeredMaterial *OZLayeredMaterial_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZLayeredMaterial *v6;

  v6 = (OZLayeredMaterial *)operator new();
  OZLayeredMaterial::OZLayeredMaterial(v6, this, a2, a3);
  (*(void (**)(OZLayeredMaterial *))(*(_QWORD *)v6 + 200))(v6);
  return v6;
}

void sub_1B29428A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40CDC59796);
  _Unwind_Resume(a1);
}

OZLayeredMaterial *OZLayeredMaterial_Factory::createCopy(OZLayeredMaterial_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZLayeredMaterial *v5;
  const OZLayeredMaterial *v6;

  v5 = (OZLayeredMaterial *)operator new();
  OZLayeredMaterial::OZLayeredMaterial(v5, v6, a3);
  return v5;
}

void sub_1B2942940(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40CDC59796);
  _Unwind_Resume(a1);
}

void OZLayeredMaterial_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Material Short Desc", "com.apple.ozone.framework");
}

PCString *OZLayeredMaterial_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Material Short Desc");
}

PCString *OZLayeredMaterial_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "LibraryMaterialIcon");
}

OZLayeredMaterial *OZLayeredMaterial_Factory::createMaterialCopy(OZLayeredMaterial_Factory *this, OZMaterialBase *a2, unsigned int a3)
{
  OZLayeredMaterial *v5;
  const OZLayeredMaterial *v6;

  v5 = (OZLayeredMaterial *)operator new();
  OZLayeredMaterial::OZLayeredMaterial(v5, v6, a3);
  return v5;
}

void sub_1B2942A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40CDC59796);
  _Unwind_Resume(a1);
}

OZLayeredMaterial *OZLayeredMaterial_Factory::createMaterialCopy(OZLayeredMaterial_Factory *this, OZMaterialBase *a2)
{
  OZLayeredMaterial *v3;
  const OZLayeredMaterial *v4;

  v3 = (OZLayeredMaterial *)operator new();
  OZLayeredMaterial::OZLayeredMaterial(v3, v4, 0);
  return v3;
}

void sub_1B2942A9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40CDC59796);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<OZStyle>::shared_ptr[abi:ne180100]<OZStyle,void>(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

uint64_t TXTextStyleManager::getInstance(TXTextStyleManager *this)
{
  if (TXTextStyleManager::getInstance(void)::once != -1)
    dispatch_once(&TXTextStyleManager::getInstance(void)::once, &__block_literal_global_51);
  return TXTextStyleManager::_instance;
}

void ___ZN18TXTextStyleManager11getInstanceEv_block_invoke()
{
  TXTextStyleManager *v0;

  v0 = (TXTextStyleManager *)operator new();
  TXTextStyleManager::TXTextStyleManager(v0);
  TXTextStyleManager::_instance = (uint64_t)v0;
}

void sub_1B2942BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void TXTextStyleManager::TXTextStyleManager(TXTextStyleManager *this)
{
  _QWORD *v1;
  uint64_t *v2;
  OZChannelBase *v3;
  const PCString *NextUniqueID;
  _BOOL8 isMissingFont;
  uint64_t v6;
  PCString v7;

  PCSingleton::PCSingleton(this, 0);
  *v1 = &unk_1E65014F8;
  v2 = v1 + 1;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text Style Name"));
  NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v3);
  TXTextStyle::create((TXTextStyle *)&v7, NextUniqueID, v2);
  PCString::~PCString(&v7);
  isMissingFont = TXTextStyle::isMissingFont((TXTextStyle *)*v2);
  if (isMissingFont)
  {
    v6 = *v2;
    TXFontManager::getInstance((TXFontManager *)isMissingFont);
    OZFontManagerBase::getDefaultSystemFont(&v7);
    (*(void (**)(uint64_t, PCString *, uint64_t))(*(_QWORD *)v6 + 168))(v6, &v7, 1);
    PCString::~PCString(&v7);
  }
}

void sub_1B2942CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCSingleton *v10;
  uint64_t v11;

  PCString::~PCString(&a10);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v11);
  PCSingleton::~PCSingleton(v10);
  _Unwind_Resume(a1);
}

void TXTextStyleManager::~TXTextStyleManager(TXTextStyleManager *this)
{
  *(_QWORD *)this = &unk_1E65014F8;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  PCSingleton::~PCSingleton(this);
}

{
  *(_QWORD *)this = &unk_1E65014F8;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  PCSingleton::~PCSingleton(this);
  JUMPOUT(0x1B5E29170);
}

_QWORD *TXTextStyleRun::TXTextStyleRun(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = &off_1E6501530;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result[3] = 0;
  return result;
}

double TXTextStyleRun::TXTextStyleRun(_QWORD *a1, uint64_t *a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v4 = *a2;
  v3 = a2[1];
  *a1 = &off_1E6501530;
  a1[1] = v4;
  a1[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *a3;
  a1[3] = *(_QWORD *)a3;
  return result;
}

uint64_t TXTextStyleRun::TXTextStyleRun(uint64_t result, uint64_t *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v5 = *a2;
  v4 = a2[1];
  *(_QWORD *)result = &off_1E6501530;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_DWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

double TXTextStyleRun::TXTextStyleRun(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6501530;
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t TXTextStyleRun::writeHeader(TXTextStyleRun *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXStyleRunScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 520);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 7, *(unsigned int *)(*((_QWORD *)this + 1) + 96));
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 9, *((unsigned int *)this + 6));
  return (*(uint64_t (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 10, *((unsigned int *)this + 7));
}

uint64_t TXTextStyleRun::writeBody(TXTextStyleRun *this, PCSerializerWriteStream *a2)
{
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t TXTextStyleRun::parseBegin(TXTextStyleRun *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXStyleRunScope);
  return 1;
}

uint64_t TXTextStyleRun::parseElement()
{
  return 1;
}

void TXTextStyleRun::~TXTextStyleRun(TXTextStyleRun *this)
{
  *(_QWORD *)this = &off_1E6501530;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E6501530;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E29170);
}

void TXTextureGlyph::TXTextureGlyph(TXTextureGlyph *this, __int16 a2, __int16 a3, TXFont *a4)
{
  _QWORD *v5;

  TXGlyph::TXGlyph(this, a2, a3, a4);
  v5[4] = 0;
  *v5 = off_1E65015A0;
  v5[3] = v5 + 4;
  v5[5] = 0;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 6));
  *((_DWORD *)this + 38) = 0;
}

void sub_1B2942FA8(_Unwind_Exception *a1)
{
  OZChannelBase *v1;
  uint64_t v2;
  const PCString *v4;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v2, &v1->var4.var0->isa);
  OZChannelBase::setRangeName(v1, v4);
  _Unwind_Resume(a1);
}

void TXTextureGlyph::~TXTextureGlyph(TXTextureGlyph *this)
{
  std::mutex *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  BOOL v8;
  const PCString *v9;

  *(_QWORD *)this = off_1E65015A0;
  v2 = (std::mutex *)((char *)this + 48);
  PCSharedMutex::lock((std::mutex *)((char *)this + 48));
  v3 = (char *)*((_QWORD *)this + 3);
  v4 = (char *)this + 32;
  if (v3 != (char *)this + 32)
  {
    do
    {
      v5 = *((_QWORD *)v3 + 6);
      if (v5)
        MEMORY[0x1B5E29170](v5, 0x1000C40A735B7EELL);
      *((_QWORD *)v3 + 6) = 0;
      v6 = (char *)*((_QWORD *)v3 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v3 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = v4;
  PCSharedMutex::unlock(v2);
  PCSharedMutex::~PCSharedMutex(v2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  OZChannelBase::setRangeName((OZChannelBase *)this, v9);
}

void TXTextureGlyph::cacheMetrics(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  std::mutex *v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  _DWORD *v14;
  _DWORD *v15;

  v6 = (std::mutex *)(a1 + 48);
  PCSharedMutex::lock((std::mutex *)(a1 + 48));
  v7 = *(_DWORD *)(a1 + 152);
  if (v7 >= 0x40)
  {
    v8 = *(uint64_t **)(a1 + 24);
    if (v8 != (uint64_t *)(a1 + 32))
    {
      do
      {
        v9 = *((_DWORD *)v8 + 14);
        if (v9 > 0x1F)
        {
          *((_DWORD *)v8 + 14) = v9 - 32;
          v12 = (uint64_t *)v8[1];
          if (v12)
          {
            do
            {
              v11 = v12;
              v12 = (uint64_t *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v11 = (uint64_t *)v8[2];
              v13 = *v11 == (_QWORD)v8;
              v8 = v11;
            }
            while (!v13);
          }
        }
        else
        {
          v10 = v8[6];
          if (v10)
            MEMORY[0x1B5E29170](v10, 0x1000C40A735B7EELL);
          v8[6] = 0;
          v11 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v8);
          operator delete(v8);
        }
        v8 = v11;
      }
      while (v11 != (uint64_t *)(a1 + 32));
      v7 = *(_DWORD *)(a1 + 152);
    }
    v7 -= 32;
    *(_DWORD *)(a1 + 152) = v7;
  }
  *(_DWORD *)(a1 + 152) = v7 + 1;
  v15 = a2;
  v14 = std::__tree<std::__value_type<PCHash128,TXTextureGlyph::CachedMetrics>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,TXTextureGlyph::CachedMetrics>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,TXTextureGlyph::CachedMetrics>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>((uint64_t **)(a1 + 24), (const PCHash128 *)a2, (uint64_t)&std::piecewise_construct, &v15);
  *((_QWORD *)v14 + 6) = a3;
  v14[14] = v7;
  v14[15] = 0;
  PCSharedMutex::unlock(v6);
}

void sub_1B29431FC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextureGlyph::getCachedMetrics(TXTextureGlyph *this, const PCHash128 *a2)
{
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (std::mutex *)((char *)this + 48);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 48));
  v5 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)this + 24, a2);
  if ((_QWORD *)((char *)this + 32) == v5)
    v6 = 0;
  else
    v6 = v5[6];
  PCSharedMutex::unlock_shared(v4);
  return v6;
}

void sub_1B294327C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock_shared(v1);
  _Unwind_Resume(a1);
}

_DWORD *std::__tree<std::__value_type<PCHash128,TXTextureGlyph::CachedMetrics>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,TXTextureGlyph::CachedMetrics>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,TXTextureGlyph::CachedMetrics>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  _DWORD *v7;
  uint64_t **v8;
  _DWORD *v9;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v7[8] = **a4;
    v7[9] = v9[1];
    v7[10] = v9[2];
    v7[11] = v9[3];
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

BOOL TXTranscriptionSegment::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
      && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && PCString::compare((PCString *)a1, (const PCString *)a2) == kCFCompareEqualTo;
}

void TXTranscriptionGenerator::TXTranscriptionGenerator(TXTranscriptionGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  PCString v11;
  PCString v12;

  TXFileLoadingGenerator::TXFileLoadingGenerator(this, a2, a3, a4);
  *v5 = off_1E6501610;
  v5[25] = &unk_1E6501B60;
  v5[27] = &unk_1E6502438;
  v5[31] = &off_1E6501610[528];
  v5[841] = &off_1E6501610[539];
  v5[2372] = &off_1E6501610[566];
  v5[8058] = &off_1E6501610[571];
  PCString::PCString(&v12, "Transcription");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 64472), &v12, (OZChannelFolder *)((char *)this + 648), 0x1F4u, 0, 0);
  PCString::~PCString(&v12);
  PCString::PCString(&v12, "Object Duration;Number of Frames");
  PCString::PCString(&v11, "Life Span");
  OZChannelEnum::OZChannelEnum((TXTranscriptionGenerator *)((char *)this + 64600), &v12, &v11, (OZChannelFolder *)((char *)this + 64472), 0x1F5u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
  PCString::PCString(&v12, "Number of Frames");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 64856), 40, &v12, (OZChannelFolder *)((char *)this + 64472), 0x1F6u, 0, 0, 0);
  PCString::~PCString(&v12);
  PCString::PCString(&v12, "None;After Word;After Phrase");
  PCString::PCString(&v11, "Insert New Line");
  OZChannelEnum::OZChannelEnum((TXTranscriptionGenerator *)((char *)this + 65008), 0, &v12, &v11, (OZChannelFolder *)((char *)this + 64472), 0x1F7u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
  PCString::PCString(&v12, "Seconds Per Word");
  OZChannelDouble::OZChannelDouble((TXTranscriptionGenerator *)((char *)this + 65264), 0.4, &v12, (OZChannelFolder *)((char *)this + 64472), 0x1F8u, 0, 0, 0);
  PCString::~PCString(&v12);
  *((_QWORD *)this + 8199) = 0;
  *((_QWORD *)this + 8198) = (char *)this + 65592;
  *((_QWORD *)this + 8200) = 0;
  *(_OWORD *)((char *)this + 65416) = 0u;
  *(_OWORD *)((char *)this + 65432) = 0u;
  *(_OWORD *)((char *)this + 65448) = 0u;
  *(_OWORD *)((char *)this + 65464) = 0u;
  *(_OWORD *)((char *)this + 65480) = 0u;
  *(_OWORD *)((char *)this + 65496) = 0u;
  *(_OWORD *)((char *)this + 65512) = 0u;
  *(_OWORD *)((char *)this + 65528) = 0u;
  *(_OWORD *)((char *)this + 65544) = 0u;
  *(_OWORD *)((char *)this + 65560) = 0u;
  *((_QWORD *)this + 8197) = 0;
  *((_DWORD *)this + 16402) = -1;
  v6 = (__int128 *)MEMORY[0x1E0CA2E18];
  v7 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)((char *)this + 65612) = *MEMORY[0x1E0CA2E18];
  v8 = *((_QWORD *)v6 + 2);
  *(_QWORD *)((char *)this + 65628) = v8;
  *(_QWORD *)((char *)this + 65652) = v8;
  *(_OWORD *)((char *)this + 65636) = v7;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 8208);
  *((_WORD *)this + 32836) = 257;
  *((_QWORD *)this + 8210) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 65688) = *v6;
  *((_QWORD *)this + 8213) = *((_QWORD *)v6 + 2);
  *((_QWORD *)this + 8214) = 0;
  *((_QWORD *)this + 8223) = 0;
  *((_DWORD *)this + 16448) = 0;
  *((_BYTE *)this + 65796) = 0;
  *((_OWORD *)this + 4109) = 0u;
  *((_OWORD *)this + 4110) = 0u;
  *((_BYTE *)this + 65776) = 0;
  v9 = *v6;
  *((_QWORD *)this + 8227) = *((_QWORD *)v6 + 2);
  *(_OWORD *)((char *)this + 65800) = v9;
  *((_DWORD *)this + 16456) = 0;
  PCColor::PCColor((PCColor *)((char *)this + 65832));
  *((_BYTE *)this + 65888) = 0;
  *(_OWORD *)((char *)this + 65896) = *v6;
  *((_QWORD *)this + 8239) = *((_QWORD *)v6 + 2);
  *((_DWORD *)this + 16480) = 0;
  *((_BYTE *)this + 65936) = 0;
  *(_OWORD *)((char *)this + 65944) = *v6;
  *((_QWORD *)this + 8245) = *((_QWORD *)v6 + 2);
  *((_DWORD *)this + 16492) = 0;
  *((_BYTE *)this + 65984) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 8249);
  *((_OWORD *)this + 4126) = 0u;
  *((_OWORD *)this + 4125) = 0u;
  *((_BYTE *)this + 66032) = 1;
  *((_DWORD *)this + 16509) = 0;
  OZChannel::setMin((OZChannel *)((char *)this + 64856), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 64856), 100.0);
  OZChannel::setMin((OZChannel *)((char *)this + 65264), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 65264), 2.0);
  v10 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 65720) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 8217) = *(_QWORD *)(v10 + 16);
}

void sub_1B2943790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, OZChannelEnum *a14, PCString a15, PCString a16)
{
  uint64_t v16;
  OZChannelFolder *v17;
  uint64_t v18;
  OZChannel *v19;
  OZChannelEnum *v20;
  OZChannel *v21;
  uint64_t v22;
  PCString *v23;
  void *v24;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v16 + 65880));
  PCString::~PCString(v23);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v18, *(_QWORD **)(v22 + 32));
  v24 = *(void **)v22;
  if (*(_QWORD *)v22)
  {
    *(_QWORD *)(v22 + 8) = v24;
    operator delete(v24);
  }
  a16.var0 = (__CFString *)(v16 + 0x10000);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16.var0 = (__CFString *)(v16 + 65512);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16.var0 = (__CFString *)(v16 + 65488);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16.var0 = (__CFString *)(v16 + 65464);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16.var0 = (__CFString *)(v16 + 65440);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  OZChannel::~OZChannel(v21);
  OZChannelEnum::~OZChannelEnum(v20);
  OZChannel::~OZChannel(v19);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannelFolder::~OZChannelFolder(v17);
  TXFileLoadingGenerator::~TXFileLoadingGenerator((PCString *)v16);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::TXTranscriptionGenerator(TXTranscriptionGenerator *this, const TXTranscriptionGenerator *a2, uint64_t a3)
{
  uint64_t v5;
  OZChannelFolder *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;

  TXFileLoadingGenerator::TXFileLoadingGenerator(this, a2, a3);
  *(_QWORD *)v5 = off_1E6501610;
  *(_QWORD *)(v5 + 200) = &unk_1E6501B60;
  *(_QWORD *)(v5 + 216) = &unk_1E6502438;
  *(_QWORD *)(v5 + 248) = &off_1E6501610[528];
  *(_QWORD *)(v5 + 6728) = &off_1E6501610[539];
  *(_QWORD *)(v5 + 18976) = &off_1E6501610[566];
  *(_QWORD *)(v5 + 64464) = &off_1E6501610[571];
  v6 = (OZChannelFolder *)(v5 + 64472);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 64472), (const OZChannelFolder *)((char *)a2 + 64472), (OZChannelFolder *)(v5 + 648));
  OZChannelEnum::OZChannelEnum((TXTranscriptionGenerator *)((char *)this + 64600), (const TXTranscriptionGenerator *)((char *)a2 + 64600), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 64856), (const OZChannelBase *)((char *)a2 + 64856), v6);
  *((_QWORD *)this + 8107) = &off_1E6551AF8;
  *((_QWORD *)this + 8109) = &unk_1E6551E58;
  OZChannelEnum::OZChannelEnum((TXTranscriptionGenerator *)((char *)this + 65008), (const TXTranscriptionGenerator *)((char *)a2 + 65008), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 65264), (const OZChannelBase *)((char *)a2 + 65264), v6);
  *v7 = &off_1E6551358;
  v7[2] = &unk_1E65516B8;
  *((_QWORD *)this + 8178) = 0;
  *((_QWORD *)this + 8179) = 0;
  *((_QWORD *)this + 8177) = 0;
  std::vector<TXTranscriptionSegment>::__init_with_size[abi:ne180100]<TXTranscriptionSegment*,TXTranscriptionSegment*>((_QWORD *)this + 8177, *((_QWORD *)a2 + 8177), *((_QWORD *)a2 + 8178), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8178) - *((_QWORD *)a2 + 8177)) >> 4));
  *((_OWORD *)this + 4090) = 0u;
  *((_QWORD *)this + 8182) = 0;
  std::vector<TXTranscriptionSegment>::__init_with_size[abi:ne180100]<TXTranscriptionSegment*,TXTranscriptionSegment*>((_QWORD *)this + 8180, *((_QWORD *)a2 + 8180), *((_QWORD *)a2 + 8181), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8181) - *((_QWORD *)a2 + 8180)) >> 4));
  *(_OWORD *)((char *)this + 65480) = 0u;
  *(_OWORD *)((char *)this + 65496) = 0u;
  *(_OWORD *)((char *)this + 65464) = 0u;
  std::vector<TXTranscriptionSegment>::__init_with_size[abi:ne180100]<TXTranscriptionSegment*,TXTranscriptionSegment*>((_QWORD *)this + 8186, *((_QWORD *)a2 + 8186), *((_QWORD *)a2 + 8187), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8187) - *((_QWORD *)a2 + 8186)) >> 4));
  *((_QWORD *)this + 8197) = 0;
  *(_OWORD *)((char *)this + 65544) = 0u;
  *(_OWORD *)((char *)this + 65560) = 0u;
  *(_OWORD *)((char *)this + 65512) = 0u;
  *(_OWORD *)((char *)this + 65528) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 8195, *((const void **)a2 + 8195), *((_QWORD *)a2 + 8196), (uint64_t)(*((_QWORD *)a2 + 8196) - *((_QWORD *)a2 + 8195)) >> 2);
  *((_QWORD *)this + 8199) = 0;
  *((_QWORD *)this + 8198) = (char *)this + 65592;
  *((_QWORD *)this + 8200) = 0;
  *((_DWORD *)this + 16402) = -1;
  v8 = MEMORY[0x1E0CA2E18];
  v9 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)((char *)this + 65612) = *MEMORY[0x1E0CA2E18];
  v10 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)((char *)this + 65628) = v10;
  *(_OWORD *)((char *)this + 65636) = v9;
  *(_QWORD *)((char *)this + 65652) = v10;
  PCString::PCString((PCString *)this + 8208, (const PCString *)a2 + 8208);
  *((_BYTE *)this + 65672) = *((_BYTE *)a2 + 65672);
  *((_BYTE *)this + 65673) = 1;
  *((_QWORD *)this + 8210) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 65688) = *(_OWORD *)v8;
  *((_QWORD *)this + 8213) = *(_QWORD *)(v8 + 16);
  *((_QWORD *)this + 8214) = 0;
  v11 = *(_OWORD *)((char *)a2 + 65720);
  *((_QWORD *)this + 8217) = *((_QWORD *)a2 + 8217);
  *(_OWORD *)((char *)this + 65720) = v11;
  *((_QWORD *)this + 8223) = 0;
  *((_DWORD *)this + 16448) = 0;
  *((_BYTE *)this + 65796) = 0;
  *((_OWORD *)this + 4109) = 0u;
  *((_OWORD *)this + 4110) = 0u;
  *((_BYTE *)this + 65776) = 0;
  *(_OWORD *)((char *)this + 65800) = *(_OWORD *)v8;
  *((_QWORD *)this + 8227) = *(_QWORD *)(v8 + 16);
  *((_DWORD *)this + 16456) = 0;
  PCColor::PCColor((PCColor *)((char *)this + 65832));
  *((_BYTE *)this + 65888) = 0;
  *(_OWORD *)((char *)this + 65896) = *(_OWORD *)v8;
  *((_QWORD *)this + 8239) = *(_QWORD *)(v8 + 16);
  *((_DWORD *)this + 16480) = 0;
  *((_BYTE *)this + 65936) = 0;
  *(_OWORD *)((char *)this + 65944) = *(_OWORD *)v8;
  *((_QWORD *)this + 8245) = *(_QWORD *)(v8 + 16);
  *((_DWORD *)this + 16492) = 0;
  *((_BYTE *)this + 65984) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 8249);
  *((_OWORD *)this + 4126) = 0u;
  *((_OWORD *)this + 4125) = 0u;
  *((_BYTE *)this + 66032) = 1;
  *((_DWORD *)this + 16509) = 0;
}

void sub_1B2943CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannel *a11, OZChannelEnum *a12, OZChannel *a13, OZChannelEnum *a14, OZChannelFolder *a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  PCString *v19;
  void *v21;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v16 + 65880));
  PCString::~PCString(v19);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v18, *(_QWORD **)(v17 + 32));
  v21 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v21;
    operator delete(v21);
  }
  a16 = v16 + 0x10000;
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = a9;
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = a10;
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  OZChannel::~OZChannel(a11);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannel::~OZChannel(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannelFolder::~OZChannelFolder(a15);
  TXFileLoadingGenerator::~TXFileLoadingGenerator((PCString *)v16);
  _Unwind_Resume(a1);
}

void sub_1B2943DB8()
{
  JUMPOUT(0x1B2943D74);
}

void sub_1B2943DC0()
{
  JUMPOUT(0x1B2943D80);
}

void sub_1B2943DC8()
{
  JUMPOUT(0x1B2943D88);
}

void sub_1B2943DD0()
{
  JUMPOUT(0x1B2943D90);
}

void sub_1B2943DD8()
{
  JUMPOUT(0x1B2943D98);
}

void sub_1B2943DE0()
{
  JUMPOUT(0x1B2943DA0);
}

void sub_1B2943DE8()
{
  JUMPOUT(0x1B2943DA8);
}

void TXTranscriptionGenerator::~TXTranscriptionGenerator(TXTranscriptionGenerator *this)
{
  char *v2;
  void *v3;
  void **v4;

  v2 = (char *)this + 65560;
  *(_QWORD *)this = off_1E6501610;
  *((_QWORD *)this + 25) = &unk_1E6501B60;
  *((_QWORD *)this + 27) = &unk_1E6502438;
  *((_QWORD *)this + 31) = &off_1E6501610[528];
  *((_QWORD *)this + 841) = &off_1E6501610[539];
  *((_QWORD *)this + 2372) = &off_1E6501610[566];
  *((_QWORD *)this + 8058) = &off_1E6501610[571];
  PCString::~PCString((PCString *)this + 8249);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 8235);
  PCString::~PCString((PCString *)this + 8208);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 65584, *((_QWORD **)v2 + 4));
  v3 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *((_QWORD *)v2 + 1) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 0x10000);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 65512);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 65488);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 65464);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 65440);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 65416);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v4);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 65264));
  OZChannelEnum::~OZChannelEnum((TXTranscriptionGenerator *)((char *)this + 65008));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64856));
  OZChannelEnum::~OZChannelEnum((TXTranscriptionGenerator *)((char *)this + 64600));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 64472));
  TXFileLoadingGenerator::~TXFileLoadingGenerator((PCString *)this);
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXTranscriptionGenerator::~TXTranscriptionGenerator(TXTranscriptionGenerator *this)
{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 200));
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 216));
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 248));
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 6728));
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 18976));
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 200));
  JUMPOUT(0x1B5E29170);
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 216));
  JUMPOUT(0x1B5E29170);
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 248));
  JUMPOUT(0x1B5E29170);
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 6728));
  JUMPOUT(0x1B5E29170);
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 18976));
  JUMPOUT(0x1B5E29170);
}

OZNotificationManager *TXTranscriptionGenerator::notify(TXTranscriptionGenerator *this, char a2)
{
  OZNotificationManager *result;
  uint64_t v5;

  result = TXTextLayout::notify(this, a2);
  if ((a2 & 8) != 0)
  {
    v5 = *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200) + 1584);
    result = *(OZNotificationManager **)(v5 + 168);
    if (result)
    {
      if (OZNotificationManager::wasChannelModified(result, (const OZChannelBase *)((char *)this + 65008)))
        return (OZNotificationManager *)(*(uint64_t (**)(TXTranscriptionGenerator *))(*(_QWORD *)this + 1240))(this);
      result = *(OZNotificationManager **)(v5 + 168);
      if (result)
      {
        result = (OZNotificationManager *)OZNotificationManager::wasChannelModified(result, (const OZChannelBase *)((char *)this + 65264));
        if ((_DWORD)result)
          return (OZNotificationManager *)(*(uint64_t (**)(TXTranscriptionGenerator *))(*(_QWORD *)this
                                                                                                + 1240))(this);
      }
    }
  }
  return result;
}

OZNotificationManager *`non-virtual thunk to'TXTranscriptionGenerator::notify(TXTranscriptionGenerator *this, char a2)
{
  return TXTranscriptionGenerator::notify((TXTranscriptionGenerator *)((char *)this - 18976), a2);
}

BOOL TXTranscriptionGenerator::isEmpty(TXTranscriptionGenerator *this)
{
  PCString *v1;
  PCString *v2;
  uint64_t v3;
  _BOOL8 result;
  BOOL v5;

  v1 = (PCString *)*((_QWORD *)this + 8177);
  v2 = (PCString *)*((_QWORD *)this + 8178);
  if (v1 == v2)
    return 1;
  do
  {
    v3 = objc_msgSend((id)-[__CFString stringByTrimmingCharactersInSet:]((id)PCString::ns_str(v1), "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet")), "length");
    result = v3 == 0;
    v1 += 6;
    if (v3)
      v5 = 1;
    else
      v5 = v1 == v2;
  }
  while (!v5);
  return result;
}

uint64_t TXTranscriptionGenerator::hitCheck(TXTranscriptionGenerator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (TXTranscriptionGenerator::isEmpty(a1))
    return (uint64_t)a1 + 200;
  else
    return TXTextLayout::hitCheck((uint64_t)a1, a2, a3, a4, a5, a6);
}

uint64_t `non-virtual thunk to'TXTranscriptionGenerator::hitCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = a1 - 200;
  if (TXTranscriptionGenerator::isEmpty((TXTranscriptionGenerator *)(a1 - 200)))
    return a1;
  else
    return TXTextLayout::hitCheck(v12, a2, a3, a4, a5, a6);
}

double TXTranscriptionGenerator::generateString(TXTranscriptionGenerator *this, PCString *a2, CMTime *a3)
{
  char *v5;
  char *v6;
  CMTime *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  double result;
  CMTime v13;
  CMTime time2;
  CMTime time1;

  v5 = (char *)this + 65416;
  v6 = (char *)this + 60976;
  v13 = *a3;
  v7 = (CMTime *)((char *)this + 65688);
  time1 = *a3;
  time2 = *(CMTime *)((_BYTE *)this + 2737);
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    v8 = *(_QWORD *)v5;
    v9 = *((_QWORD *)v5 + 1);
    if (*(_QWORD *)v5 != v9)
    {
      do
      {
        *(_BYTE *)(v8 + 40) = 1;
        v8 += 48;
      }
      while (v8 != v9);
    }
    v10 = *((_QWORD *)v5 + 12);
    for (i = *((_QWORD *)v5 + 13); v10 != i; v10 += 48)
      *(_BYTE *)(v10 + 40) = 1;
    v5[257] = 1;
    *(_QWORD *)(v6 + 2828) = 0;
  }
  if (TXTranscriptionGenerator::hasBlockSequencing(this))
  {
    if (*((_QWORD *)v5 + 12) == *((_QWORD *)v5 + 13))
      TXTranscriptionGenerator::computeTranscriptionBlocks(this, &v13);
    TXTranscriptionGenerator::computeActiveTranscriptionFromBlocks((PCString *)this, &v13);
    TXTranscriptionGenerator::generateStringByBlock(this, &v13, (PCSharedCount *)&time1);
    PCString::set(a2, (const PCString *)&time1);
  }
  else
  {
    TXTranscriptionGenerator::computeActiveTranscriptionFromWordSegments(this, &v13);
    TXTranscriptionGenerator::generateStringByWord(this, (PCSharedCount *)&time1);
    PCString::set(a2, (const PCString *)&time1);
  }
  PCString::~PCString((PCString *)&time1);
  if (v5[257])
  {
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64232, *((_QWORD **)this + 8030));
    *((_QWORD *)this + 8029) = (char *)this + 64240;
    *((_QWORD *)this + 8031) = 0;
    *((_QWORD *)this + 8030) = 0;
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v6, *((_QWORD **)v6 + 1));
    *(_QWORD *)v6 = v6 + 8;
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 1) = 0;
    TXTranscriptionGenerator::invalidateTranscriptionByLineCache(this);
    *(_QWORD *)(v6 + 2828) = (*((_DWORD *)v6 + 707) + *((_DWORD *)v6 + 708));
    v5[257] = 0;
  }
  result = *(double *)&v13.value;
  *v7 = v13;
  return result;
}

void sub_1B2944480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCString a17)
{
  PCString::~PCString(&a17);
  _Unwind_Resume(a1);
}

BOOL TXTranscriptionGenerator::hasBlockSequencing(TXTranscriptionGenerator *this)
{
  int *v1;
  int v2;
  char *v3;
  char *v4;
  const CMTime *v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v9;

  v1 = (int *)((char *)this + 65792);
  v2 = *((_DWORD *)this + 16448);
  if (!v2)
  {
    v2 = 2;
    *v1 = 2;
    v3 = (char *)this + 1200;
    v4 = (char *)*((_QWORD *)this + 151);
    if (v4 != (char *)this + 1200)
    {
      v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
      while (1)
      {
        v6 = *((_QWORD *)v4 + 2);
        v7 = *(_QWORD *)(v6 + 8);
        v9 = xmmword_1B30541D0;
        if (OZFactory::isKindOfClass(v7, (int32x4_t *)&v9))
        {
          if (OZChannel::getValueAsInt((OZChannel *)(v6 + 29056), v5, 0.0) == 1
            && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 16) + 24))(v6 + 16, 1, 1)&& TXSequenceBehavior::getUnitSize((TXSequenceBehavior *)v6) == 6)
          {
            break;
          }
        }
        v4 = (char *)*((_QWORD *)v4 + 1);
        if (v4 == v3)
        {
          v2 = *v1;
          return v2 == 1;
        }
      }
      v2 = 1;
      *v1 = 1;
    }
  }
  return v2 == 1;
}

void TXTranscriptionGenerator::computeTranscriptionBlocks(TXTranscriptionGenerator *this, const CMTime *a2)
{
  TXTranscriptionGenerator *v3;
  char *v4;
  double Seconds;
  uint64_t i;
  BOOL v7;
  uint64_t LineBreaksForEntireString;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  PCArray_base *NumLinesInParagraphBounds;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  PCArray_base *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  __CFString *v38;
  __CFString *v39;
  __CFString *v40;
  int v41;
  double v42;
  double v43;
  __int128 v44;
  int v45;
  int v46;
  double v47;
  unsigned int v48;
  unsigned int v49;
  double v50;
  double v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  unsigned int v60;
  void *v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned int v64;
  PCString v65;
  PCString v66;
  PCString v67;
  PCSharedCount v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  void *__p;
  char *v73;
  char *v74;
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  CMTime time;

  v3 = this;
  v4 = (char *)this + 65416;
  time = *(CMTime *)((char *)this + 65720);
  Seconds = CMTimeGetSeconds(&time);
  *((_DWORD *)v4 + 48) = -1;
  for (i = *(_QWORD *)v4; i != *((_QWORD *)v4 + 1); i += 48)
  {
    if (*(_BYTE *)(i + 40))
      v7 = *(double *)(i + 8) < Seconds;
    else
      v7 = 1;
    if (!v7)
    {
      *((_DWORD *)v4 + 48) = *(_QWORD *)(i + 24);
      break;
    }
  }
  LineBreaksForEntireString = TXTranscriptionGenerator::getLineBreaksForEntireString(v3, a2);
  v76 = 0;
  v77 = 0;
  v75 = &unk_1E64FC330;
  v9 = *(_DWORD *)(LineBreaksForEntireString + 12);
  if (v9 <= 0)
    v10 = 0;
  else
    v10 = (2 * v9) | 1;
  PCArray<unsigned long,PCArray_Traits<unsigned long>>::resize((uint64_t)&v75, v9, v10);
  v11 = *(unsigned int *)(LineBreaksForEntireString + 12);
  if ((int)v11 >= 1)
  {
    v12 = *(uint64_t **)(LineBreaksForEntireString + 16);
    v13 = v77;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
      --v11;
    }
    while (v11);
  }
  v15 = HIDWORD(v76);
  NumLinesInParagraphBounds = (PCArray_base *)TXTextLayout::getNumLinesInParagraphBounds(v3);
  __p = 0;
  v73 = 0;
  v74 = 0;
  v62 = (uint64_t *)v3;
  if (v15)
  {
    v17 = (int)NumLinesInParagraphBounds;
    v18 = 0;
    v19 = 0;
    do
    {
      if (v18 < 0 || SHIDWORD(v76) <= v18)
        PCArray_base::badIndex(NumLinesInParagraphBounds);
      v20 = v77[v18];
      NumLinesInParagraphBounds = (PCArray_base *)TXTranscriptionGenerator::isPhraseBreak(v3, v20);
      if (++v19 == v17)
        v21 = 1;
      else
        v21 = (int)NumLinesInParagraphBounds;
      if (v21 == 1)
      {
        v22 = (PCArray_base *)v73;
        if (v73 >= v74)
        {
          NumLinesInParagraphBounds = (PCArray_base *)__p;
          v24 = (v73 - (_BYTE *)__p) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v26 = v74 - (_BYTE *)__p;
          if ((v74 - (_BYTE *)__p) >> 1 > v25)
            v25 = v26 >> 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v74, v27);
            NumLinesInParagraphBounds = (PCArray_base *)__p;
            v22 = (PCArray_base *)v73;
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[4 * v24];
          *(_DWORD *)v29 = v20;
          v23 = v29 + 4;
          while (v22 != NumLinesInParagraphBounds)
          {
            v30 = *((_DWORD *)v22 - 1);
            v22 = (PCArray_base *)((char *)v22 - 4);
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          __p = v29;
          v73 = v23;
          v74 = &v28[4 * v27];
          if (NumLinesInParagraphBounds)
            operator delete(NumLinesInParagraphBounds);
        }
        else
        {
          *(_DWORD *)v73 = v20;
          v23 = (char *)v22 + 4;
        }
        v19 = 0;
        v73 = v23;
        v3 = (TXTranscriptionGenerator *)v62;
      }
      ++v18;
    }
    while (v18 != v15);
  }
  PCSharedCount::PCSharedCount(&v68);
  v70 = 0u;
  v69 = 0u;
  LOBYTE(v71) = 1;
  HIDWORD(v71) = 0;
  v31 = (*(uint64_t (**)(TXTranscriptionGenerator *))(*(_QWORD *)v3 + 216))(v3);
  v64 = v31;
  v32 = v31;
  if (v73 != __p)
    v32 = *(unsigned int *)__p;
  v33 = *(_QWORD *)v4;
  v63 = *((_QWORD *)v4 + 1);
  if (*(_QWORD *)v4 != v63)
  {
    LODWORD(v34) = 0;
    v35 = 0;
    v36 = 1;
    v37 = 1;
    do
    {
      if (*(double *)(v33 + 8) >= Seconds)
      {
        if ((v37 & 1) != 0)
          *(_QWORD *)&v69 = *(_QWORD *)(v33 + 8);
        v38 = (__CFString *)PCString::ns_str((PCString *)v33);
        v39 = v38;
        if ((v36 & 1) != 0)
        {
          v40 = (__CFString *)-[__CFString stringByTrimmingLeadingWhitespace](v38, "stringByTrimmingLeadingWhitespace");
          v41 = -[__CFString length](v39, "length");
          v35 = v35 + v41 - -[__CFString length](v40, "length");
        }
        else
        {
          v40 = v38;
        }
        v67.var0 = 0;
        PCString::set(&v67, v40);
        v43 = *(double *)(v33 + 8);
        v42 = *(double *)(v33 + 16);
        v44 = v69;
        v45 = PCString::size(&v67);
        if (v45 >= 1)
        {
          v46 = 0;
          v47 = v43 + v42 - (*(double *)&v44 + *((double *)&v44 + 1));
          do
          {
            v48 = PCString::size(&v67);
            if (v48 + v35 <= v32)
            {
              PCString::append((PCString *)&v68, &v67);
              *((double *)&v69 + 1) = v47 + *((double *)&v69 + 1);
              *((_QWORD *)&v70 + 1) += v48;
              v46 += v48;
              v35 = v48 + v35;
            }
            else
            {
              v49 = v32 - v35;
              if (v32 <= v35)
              {
                v47 = *(double *)(v33 + 16);
                v32 = v35;
              }
              else
              {
                PCString::substr(&v67, 0, v32 - v35, (CFStringRef *)&v66.var0);
                PCString::append((PCString *)&v68, &v66);
                *((_QWORD *)&v70 + 1) += v49;
                v50 = *(double *)&v69 + *((double *)&v69 + 1);
                v51 = (*(double *)(v33 + 8) + *(double *)(v33 + 16) - (*(double *)&v69 + *((double *)&v69 + 1)))
                    * ((double)v49
                     / (double)*(unint64_t *)(v33 + 32));
                *((double *)&v69 + 1) = *((double *)&v69 + 1) + v51;
                PCString::substr(&v67, (v32 - v35), v48 - v49, (CFStringRef *)&v65.var0);
                PCString::set(&v67, &v65);
                PCString::~PCString(&v65);
                v43 = v50 + v51;
                v47 = v47 - v51;
                v46 += v49;
                PCString::~PCString(&v66);
              }
              v52 = *((_QWORD *)v4 + 13);
              if (v52 >= *((_QWORD *)v4 + 14))
              {
                v55 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>(v62 + 8189, (uint64_t)&v68);
              }
              else
              {
                PCString::PCString(*((PCString **)v4 + 13), (const PCString *)&v68);
                v53 = v69;
                v54 = v70;
                *(_QWORD *)(v52 + 40) = v71;
                *(_OWORD *)(v52 + 24) = v54;
                *(_OWORD *)(v52 + 8) = v53;
                v55 = v52 + 48;
                *((_QWORD *)v4 + 13) = v52 + 48;
              }
              *((_QWORD *)v4 + 13) = v55;
              PCString::set((PCString *)&v68, "");
              v69 = *(unint64_t *)&v43;
              v70 = v32;
              v34 = (v34 + 1);
              HIDWORD(v71) = v34;
              v35 = v32;
              if (v34 >= (v73 - (_BYTE *)__p) >> 2)
                v32 = v64;
              else
                v32 = *((unsigned int *)__p + v34);
            }
          }
          while (v46 < v45);
        }
        PCString::~PCString(&v67);
        v37 = 0;
        v36 = 0;
      }
      v33 += 48;
    }
    while (v33 != v63);
  }
  v56 = *((_QWORD *)v4 + 13);
  if (v56 >= *((_QWORD *)v4 + 14))
  {
    v59 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>(v62 + 8189, (uint64_t)&v68);
  }
  else
  {
    PCString::PCString(*((PCString **)v4 + 13), (const PCString *)&v68);
    v57 = v69;
    v58 = v70;
    *(_QWORD *)(v56 + 40) = v71;
    *(_OWORD *)(v56 + 24) = v58;
    *(_OWORD *)(v56 + 8) = v57;
    v59 = v56 + 48;
    *((_QWORD *)v4 + 13) = v56 + 48;
  }
  *((_QWORD *)v4 + 13) = v59;
  PCString::~PCString((PCString *)&v68);
  if (__p)
  {
    v73 = (char *)__p;
    operator delete(__p);
  }
  v75 = &unk_1E64FC330;
  if ((int)v76 < 0)
    v60 = 1;
  else
    v60 = v76 & ~((int)v76 >> 31);
  if (v60 == (_DWORD)v76)
  {
    v61 = v77;
    if (v76 < 0)
      bzero(&v77[SHIDWORD(v76)], 8 * ~HIDWORD(v76) + 8);
  }
  else
  {
    if (v60)
    {
      v61 = (void *)operator new[]();
      bzero(v61, 8 * v60);
    }
    else
    {
      v61 = 0;
    }
    if (v77)
      MEMORY[0x1B5E2914C](v77, 0x1000C8077774924);
    v77 = v61;
  }
  v76 = v60;
  if (v61)
    MEMORY[0x1B5E2914C](v61, 0x1000C8077774924);
}

void sub_1B2944BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14, PCString a15, PCString a16, PCString a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  PCString::~PCString(&a17);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  PCArray<unsigned long,PCArray_Traits<unsigned long>>::~PCArray((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::computeActiveTranscriptionFromBlocks(PCString *this, CMTime *a2)
{
  OZScene **v4;
  PCString *v5;
  uint64_t var0;
  __CFString *v7;
  __int128 v8;
  __int128 v9;
  BOOL v10;
  __CFString *i;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  int v15;
  int v16;
  int length;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[9];
  int v24;
  _QWORD v25[3];
  char v26;
  PCString v27;
  PCString *v28;
  uint64_t v29;
  uint64_t v30;
  PCSharedCount v31;
  __int128 v32;
  __int128 v33;
  __CFString *v34;
  _BYTE v35[16];

  v4 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v35, v4);
  PCSharedCount::PCSharedCount(&v31);
  v5 = this + 8177;
  v33 = 0u;
  v32 = 0u;
  LOBYTE(v34) = 1;
  HIDWORD(v34) = 0;
  var0 = (uint64_t)this[8189].var0;
  v7 = this[8190].var0;
  while ((__CFString *)var0 != v7)
  {
    if (TXTranscriptionGenerator::isBlockActiveAtTime((uint64_t)this, var0, a2))
    {
      PCString::set((PCString *)&v31, (const PCString *)var0);
      v8 = *(_OWORD *)(var0 + 8);
      v9 = *(_OWORD *)(var0 + 24);
      v34 = *(__CFString **)(var0 + 40);
      v32 = v8;
      v33 = v9;
      break;
    }
    var0 += 48;
  }
  PCString::PCString(&v27, (const PCString *)&v31);
  v10 = PCString::empty(&v27);
  PCString::~PCString(&v27);
  if (!v10 && !TXTranscriptionSegment::operator==((uint64_t)&v31, (uint64_t)&this[8249]))
  {
    v12 = this[8180].var0;
    for (i = this[8181].var0; i != v12; PCString::~PCString((PCString *)&i[-2].data))
      ;
    this[8181].var0 = v12;
    v27.var0 = 0;
    v28 = &v27;
    v29 = 0x2020000000;
    v30 = 0;
    v25[0] = 0;
    v25[1] = v25;
    v25[2] = 0x2020000000;
    v26 = 1;
    v13 = v5->var0;
    v14 = this[8178].var0;
    if (v5->var0 != v14)
    {
      v15 = 0;
      do
      {
        v16 = LODWORD(this[8201].var0) + v33;
        length = v13->length;
        if (v16 <= length)
          v18 = v13->length;
        else
          v18 = LODWORD(this[8201].var0) + v33;
        if (v16 + DWORD2(v33) >= LODWORD(v13[1].isa) + length)
          v19 = LODWORD(v13[1].isa) + length;
        else
          v19 = v16 + DWORD2(v33);
        if (v19 >= v18)
        {
          v20 = (void *)-[__CFString substringWithRange:]((id)PCString::ns_str((PCString *)v13), "substringWithRange:", v18 - v13->length, v19 - v18);
          v21 = objc_msgSend(v20, "length");
          v23[0] = MEMORY[0x1E0C809B0];
          v23[1] = 3221225472;
          v23[2] = ___ZN24TXTranscriptionGenerator36computeActiveTranscriptionFromBlocksERK6CMTime_block_invoke;
          v23[3] = &unk_1E6502858;
          v23[7] = this;
          v23[8] = v13;
          v24 = v15;
          v23[4] = v20;
          v23[5] = &v27;
          v23[6] = v25;
          objc_msgSend(v20, "enumerateSubstringsInRange:options:usingBlock:", 0, v21, 3, v23);
        }
        ++v15;
        v13 = (__CFString *)((char *)v13 + 48);
      }
      while (v13 != v14);
    }
    PCString::set(this + 8249, (const PCString *)&v31);
    v22 = v33;
    *(_OWORD *)&this[8250].var0 = v32;
    *(_OWORD *)&this[8252].var0 = v22;
    this[8254].var0 = v34;
    _Block_object_dispose(v25, 8);
    _Block_object_dispose(&v27, 8);
  }
  PCString::~PCString((PCString *)&v31);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v35);
}

void sub_1B2944F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,PCString a25,uint64_t a26,uint64_t a27,uint64_t a28,PCString a29)
{
  uint64_t v29;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  PCString::~PCString(&a29);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v29 - 112));
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::generateStringByBlock(TXTranscriptionGenerator *this@<X0>, CMTime *a2@<X1>, PCSharedCount *a3@<X8>)
{
  double Seconds;
  uint64_t v7;
  uint64_t v8;
  double v9;
  CMTime v10;

  PCSharedCount::PCSharedCount(a3);
  v10 = *(CMTime *)((char *)this + 65720);
  Seconds = CMTimeGetSeconds(&v10);
  v7 = *((_QWORD *)this + 8189);
  v8 = *((_QWORD *)this + 8190);
  if (v7 != v8)
  {
    v9 = Seconds;
    do
    {
      if (*(double *)(v7 + 8) >= v9 && TXTranscriptionGenerator::isBlockActiveAtTime((uint64_t)this, v7, a2))
        PCString::append((PCString *)a3, (const PCString *)v7);
      v7 += 48;
    }
    while (v7 != v8);
  }
}

void sub_1B2945024(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::computeActiveTranscriptionFromWordSegments(TXTranscriptionGenerator *this, CMTime *a2)
{
  OZScene **v3;
  double Seconds;
  uint64_t *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  BOOL v13;
  __int128 v14;
  __int128 v15;
  const __CFString *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  PCString v22;
  PCString v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  CMTime time;
  _BYTE v28[8];

  v3 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v28, v3);
  time = *(CMTime *)((char *)this + 65720);
  Seconds = CMTimeGetSeconds(&time);
  v5 = (uint64_t *)((char *)this + 65416);
  v7 = *((_QWORD *)this + 8180);
  for (i = *((_QWORD *)this + 8181); i != v7; PCString::~PCString((PCString *)(i - 48)))
    ;
  *((_QWORD *)this + 8181) = v7;
  v8 = *v5;
  v9 = *((_QWORD *)this + 8178);
  if (*v5 != v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = 1;
    do
    {
      if (*(_BYTE *)(v8 + 40))
        v13 = *(double *)(v8 + 8) < Seconds;
      else
        v13 = 1;
      if (!v13)
      {
        if (!TXTranscriptionGenerator::isSegmentActiveAtTime(this, v8, a2))
          break;
        PCString::PCString(&v23, (const PCString *)v8);
        v14 = *(_OWORD *)(v8 + 8);
        v15 = *(_OWORD *)(v8 + 24);
        LODWORD(v26) = *(_QWORD *)(v8 + 40);
        v24 = v14;
        *((_QWORD *)&v25 + 1) = *((_QWORD *)&v15 + 1);
        HIDWORD(v26) = v11;
        *(_QWORD *)&v25 = v10;
        if ((v12 & 1) != 0
          && -[__CFString hasPrefix:]((id)PCString::ns_str(&v23), "hasPrefix:", CFSTR(" ")))
        {
          v16 = (const __CFString *)-[__CFString stringByTrimmingLeadingWhitespace]((id)PCString::ns_str(&v23), "stringByTrimmingLeadingWhitespace");
          v22.var0 = 0;
          PCString::set(&v22, v16);
          PCString::set(&v23, &v22);
          PCString::~PCString(&v22);
          *((_QWORD *)&v25 + 1) = PCString::size(&v23);
        }
        v17 = *((_QWORD *)this + 8181);
        if (v17 >= *((_QWORD *)this + 8182))
        {
          v20 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)this + 8180, (uint64_t)&v23);
        }
        else
        {
          PCString::PCString(*((PCString **)this + 8181), &v23);
          v18 = v24;
          v19 = v25;
          *(_QWORD *)(v17 + 40) = v26;
          *(_OWORD *)(v17 + 24) = v19;
          *(_OWORD *)(v17 + 8) = v18;
          v20 = v17 + 48;
          *((_QWORD *)this + 8181) = v17 + 48;
        }
        *((_QWORD *)this + 8181) = v20;
        v10 += *((_QWORD *)&v25 + 1);
        PCString::~PCString(&v23);
        v12 = 0;
      }
      ++v11;
      v8 += 48;
    }
    while (v8 != v9);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v28);
}

void sub_1B2945224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a20);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::generateStringByWord(TXTranscriptionGenerator *this@<X0>, PCSharedCount *a2@<X8>)
{
  char *v4;
  PCString *v5;
  PCString *v6;
  char v7;

  v4 = (char *)this + 65440;
  PCSharedCount::PCSharedCount(a2);
  v5 = *(PCString **)v4;
  v6 = (PCString *)*((_QWORD *)v4 + 1);
  if (*(PCString **)v4 != v6)
  {
    v7 = 1;
    do
    {
      if (!v4[232] && (v7 & 1) == 0)
        PCString::append((PCString *)a2, " ");
      PCString::append((PCString *)a2, v5);
      v7 = -[__CFString hasSuffix:]((id)PCString::ns_str(v5), "hasSuffix:", CFSTR("\n"));
      v5 += 6;
    }
    while (v5 != v6);
  }
}

void sub_1B2945310(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::invalidateTranscriptionByLineCache(TXTranscriptionGenerator *this)
{
  OZScene **v2;
  uint64_t v3;
  _BYTE v4[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v4, v2);
  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)((char *)this + 65612) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)((char *)this + 65628) = *(_QWORD *)(v3 + 16);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v4);
}

BOOL TXTranscriptionGenerator::isSegmentActiveAtTime(TXTranscriptionGenerator *a1, uint64_t a2, CMTime *a3)
{
  double Seconds;
  char *ActiveTranscriptionByBlock;
  uint64_t v8;
  double v9;
  double v10;
  CMTime v12;

  v12 = *a3;
  Seconds = CMTimeGetSeconds(&v12);
  if (!TXTranscriptionGenerator::hasBlockSequencing(a1))
    return *(double *)(a2 + 8) <= Seconds;
  ActiveTranscriptionByBlock = TXTranscriptionGenerator::getActiveTranscriptionByBlock(a1, a3);
  if (!*(_BYTE *)(a2 + 40))
    return 0;
  v8 = *((_QWORD *)ActiveTranscriptionByBlock + 1);
  if (*(_QWORD *)ActiveTranscriptionByBlock == v8)
    return 0;
  v9 = *(double *)(a2 + 8);
  v10 = *(double *)(v8 - 40) + *(double *)(v8 - 32);
  return vabdd_f64(v9, v10) >= 0.0000001 && v9 < v10;
}

BOOL TXTranscriptionGenerator::isBlockActiveAtTime(uint64_t a1, uint64_t a2, CMTime *a3)
{
  double Seconds;
  double v6;
  CMTime v8;

  v8 = *a3;
  Seconds = CMTimeGetSeconds(&v8);
  if (*(_BYTE *)(a2 + 40))
  {
    v6 = *(double *)(a2 + 8);
    if (Seconds >= v6 && Seconds < v6 + *(double *)(a2 + 16))
      return 1;
  }
  if (*(_BYTE *)(a1 + 65776))
    return TXTranscriptionSegment::operator==(a2, *(_QWORD *)(a1 + 65520) - 48);
  return 0;
}

void ___ZN24TXTranscriptionGenerator36computeActiveTranscriptionFromBlocksERK6CMTime_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t *v10;
  __int128 v11;
  __int128 v12;
  __CFString *v13;
  uint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  PCString v19;
  PCString v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v10 = *(uint64_t **)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  PCString::PCString(&v20, (const PCString *)v9);
  v11 = *(_OWORD *)(v9 + 8);
  v12 = *(_OWORD *)(v9 + 24);
  v23 = *(_QWORD *)(v9 + 40);
  v22 = v12;
  v21 = v11;
  v13 = (__CFString *)objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", a5, a6);
  v19.var0 = 0;
  PCString::set(&v19, v13);
  PCString::set(&v20, &v19);
  PCString::~PCString(&v19);
  HIDWORD(v23) = *(_DWORD *)(a1 + 72);
  *(_QWORD *)&v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  *((_QWORD *)&v22 + 1) = -[__CFString length](v13, "length");
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)
    && -[__CFString hasPrefix:](v13, "hasPrefix:", CFSTR(" ")))
  {
    v13 = (__CFString *)-[__CFString stringByTrimmingLeadingWhitespace](v13, "stringByTrimmingLeadingWhitespace");
    v19.var0 = 0;
    PCString::set(&v19, v13);
    PCString::set(&v20, &v19);
    PCString::~PCString(&v19);
    *((_QWORD *)&v22 + 1) = -[__CFString length](v13, "length");
  }
  v14 = v10 + 8181;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  v15 = v10[8181];
  if (v15 >= v10[8182])
  {
    v18 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>(v10 + 8180, (uint64_t)&v20);
  }
  else
  {
    PCString::PCString((PCString *)v10[8181], &v20);
    v16 = v21;
    v17 = v22;
    *(_QWORD *)(v15 + 40) = v23;
    *(_OWORD *)(v15 + 24) = v17;
    *(_OWORD *)(v15 + 8) = v16;
    v18 = v15 + 48;
    *v14 = v15 + 48;
  }
  *v14 = v18;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += -[__CFString length](v13, "length");
  PCString::~PCString(&v20);
}

void sub_1B2945680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  PCString::~PCString(&a10);
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::dirty(TXTranscriptionGenerator *this)
{
  char *v1;

  v1 = (char *)this + 65744;
  TXTextLayout::dirty(this);
  *(_QWORD *)v1 = 0;
  *((_DWORD *)v1 + 12) = 0;
}

void `non-virtual thunk to'TXTranscriptionGenerator::dirty(TXTranscriptionGenerator *this)
{
  char *v1;

  v1 = (char *)this + 65544;
  TXTextLayout::dirty((TXTranscriptionGenerator *)((char *)this - 200));
  *(_QWORD *)v1 = 0;
  *((_DWORD *)v1 + 12) = 0;
}

{
  char *v1;

  v1 = (char *)this + 65528;
  TXTextLayout::dirty((TXTranscriptionGenerator *)((char *)this - 216));
  *(_QWORD *)v1 = 0;
  *((_DWORD *)v1 + 12) = 0;
}

void TXTranscriptionGenerator::loadFile(TXTranscriptionGenerator *this)
{
  uint64_t *v2;
  id *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __CFString *v8;
  id v9;
  uint64_t i;
  uint64_t v11;
  const __CFString *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  PCString v17;
  uint64_t v18;
  PCString v19;

  v2 = (uint64_t *)((char *)this + 65416);
  v3 = (id *)((char *)this + 64448);
  v4 = (void *)*((_QWORD *)this + 8221);
  v5 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  if (v4)
  {
    v6 = objc_msgSend(v5, "pathForResource:ofType:", v4, CFSTR("lproj"));
    if (v6
      || (v7 = objc_msgSend(v4, "rangeOfString:", CFSTR("-")), v7 != 0x7FFFFFFFFFFFFFFFLL)
      && ((v14 = v7,
           v15 = (void *)objc_msgSend(v4, "stringByReplacingOccurrencesOfString:withString:", CFSTR("-"), CFSTR("_")),
           (v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "pathForResource:ofType:", v15, CFSTR("lproj"))) != 0)|| (v16 = objc_msgSend(v15, "substringToIndex:", v14), (v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "pathForResource:ofType:", v16, CFSTR("lproj"))) != 0)))
    {
      v5 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithPath:", v6);
    }
    else
    {
      v5 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    }
  }
  v8 = (__CFString *)(id)objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("SiriTitle_DefaultTextCapture"), 0, 0);
  if (-[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("SiriTitle_DefaultTextCapture")))
  {

    v18 = 0;
    v19.var0 = 0;
    v9 = objc_alloc(MEMORY[0x1E0CB3940]);
    PCURL::getAsFileSystemString((const __CFURL **)this + 8054, &v17);
    v8 = (__CFString *)objc_msgSend(v9, "initWithContentsOfFile:usedEncoding:error:", PCString::ns_str(&v17), &v19, &v18);
    PCString::~PCString(&v17);
    if (!v8)
      return;
    *((_BYTE *)v3 + 8) = 1;
  }
  v11 = *v2;
  for (i = v2[1]; i != v11; PCString::~PCString((PCString *)(i - 48)))
    ;
  v2[1] = v11;
  v2[19] = v2[18];
  if (-[__CFString hasPrefix:](v8, "hasPrefix:", CFSTR("#siri\n")))
    TXTranscriptionGenerator::loadTranscription(this, (__CFString *)-[__CFString substringFromIndex:](v8, "substringFromIndex:", objc_msgSend(CFSTR("#siri\n"), "length")));
  else
    TXTranscriptionGenerator::loadText(this, v8);

  PCURL::getAsFileSystemString((const __CFURL **)this + 8054, &v19);
  v12 = PCString::ns_str(&v19);
  PCString::~PCString(&v19);
  v13 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "attributesOfItemAtPath:error:", v12, 0);
  if (*v3)

  *v3 = (id)objc_msgSend(v13, "fileModificationDate");
}

void sub_1B29459B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator::loadTranscription(TXTranscriptionGenerator *this, __CFString *a2)
{
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  PCString *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  void **v36;
  uint64_t *v37;
  PCString v38;
  PCString v39;
  __int128 v40;
  __int128 v41;
  __CFString *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = (void *)-[__CFString componentsSeparatedByString:](a2, "componentsSeparatedByString:", CFSTR("|"));
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  v5 = result;
  if (result)
  {
    LODWORD(v6) = 0;
    v7 = (char *)this + 65424;
    v8 = *(_QWORD *)v44;
    v37 = (uint64_t *)((char *)this + 65416);
    v35 = (char *)this + 65576;
    v36 = (void **)((char *)this + 65560);
    do
    {
      v9 = 0;
      v6 = (int)v6;
      do
      {
        if (*(_QWORD *)v44 != v8)
          objc_enumerationMutation(v3);
        v10 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * v9), "componentsSeparatedByString:", CFSTR(" "), v35);
        v11 = (__CFString *)objc_msgSend(v10, "objectAtIndexedSubscript:", 0);
        objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", 1), "doubleValue");
        v13 = v12;
        objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", 2), "doubleValue");
        v15 = v14;
        v16 = objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", 3), "intValue");
        LODWORD(v10) = objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", 4), "intValue");
        v38.var0 = 0;
        PCString::set(&v38, v11);
        PCString::PCString(&v39, &v38);
        *(_QWORD *)&v40 = v13;
        *((_QWORD *)&v40 + 1) = v15;
        *(_QWORD *)&v41 = v16;
        *((_QWORD *)&v41 + 1) = v10;
        LOBYTE(v42) = 1;
        HIDWORD(v42) = 0;
        v17 = *(PCString **)v7;
        if (*(_QWORD *)v7 >= *((_QWORD *)v7 + 1))
        {
          v20 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>(v37, (uint64_t)&v39);
        }
        else
        {
          PCString::PCString(*(PCString **)v7, &v39);
          v18 = v40;
          v19 = v41;
          v17[5].var0 = v42;
          *(_OWORD *)&v17[3].var0 = v19;
          *(_OWORD *)&v17[1].var0 = v18;
          v20 = (uint64_t)&v17[6];
          *(_QWORD *)v7 = v17 + 6;
        }
        *(_QWORD *)v7 = v20;
        PCString::~PCString(&v39);
        PCString::~PCString(&v38);
        v21 = objc_msgSend(v3, "count");
        v22 = -[__CFString hasSuffix:](v11, "hasSuffix:", CFSTR("\n"));
        if (v21 == ++v6)
          v23 = 1;
        else
          v23 = v22;
        if (v23 == 1)
        {
          v25 = (char *)*((_QWORD *)v7 + 18);
          v24 = *((_QWORD *)v7 + 19);
          if ((unint64_t)v25 >= v24)
          {
            v27 = (char *)*v36;
            v28 = (v25 - (_BYTE *)*v36) >> 2;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v30 = v24 - (_QWORD)v27;
            if (v30 >> 1 > v29)
              v29 = v30 >> 1;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
              v31 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v35, v31);
              v27 = (char *)*((_QWORD *)v7 + 17);
              v25 = (char *)*((_QWORD *)v7 + 18);
            }
            else
            {
              v32 = 0;
            }
            v33 = &v32[4 * v28];
            *(_DWORD *)v33 = v6;
            v26 = v33 + 4;
            while (v25 != v27)
            {
              v34 = *((_DWORD *)v25 - 1);
              v25 -= 4;
              *((_DWORD *)v33 - 1) = v34;
              v33 -= 4;
            }
            *((_QWORD *)v7 + 17) = v33;
            *((_QWORD *)v7 + 18) = v26;
            *((_QWORD *)v7 + 19) = &v32[4 * v31];
            if (v27)
              operator delete(v27);
          }
          else
          {
            *(_DWORD *)v25 = v6;
            v26 = v25 + 4;
          }
          *((_QWORD *)v7 + 18) = v26;
        }
        ++v9;
      }
      while (v9 != v5);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B2945CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, PCString a13)
{
  _QWORD *v13;
  uint64_t v14;

  *v13 = v14;
  PCString::~PCString(&a13);
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::loadText(TXTranscriptionGenerator *this, __CFString *a2)
{
  int ValueAsInt;
  uint64_t v5;
  _QWORD v6[10];
  int v7;
  _QWORD v8[4];
  _QWORD v9[3];
  int v10;
  _QWORD v11[4];

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 65008), MEMORY[0x1E0CA2E68], 0.0);
  v5 = -[__CFString length](a2, "length");
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  v11[3] = 0;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  v10 = 0;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2020000000;
  v8[3] = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN24TXTranscriptionGenerator8loadTextEPK10__CFString_block_invoke;
  v6[3] = &unk_1E6502880;
  v7 = ValueAsInt;
  v6[4] = v11;
  v6[5] = v8;
  v6[6] = v9;
  v6[7] = this;
  v6[8] = a2;
  v6[9] = v5;
  -[__CFString enumerateSubstringsInRange:options:usingBlock:](a2, "enumerateSubstringsInRange:options:usingBlock:", 0, v5, 1027, v6);
  *((_WORD *)this + 32836) = 257;
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v11, 8);
}

void sub_1B2945E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void ___ZN24TXTranscriptionGenerator8loadTextEPK10__CFString_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  PCString **v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  PCString v39;
  PCString v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v9 = *(_QWORD *)(a1 + 56);
  v10 = (void *)objc_msgSend(*(id *)(a1 + 64), "substringWithRange:", a5, a6);
  v11 = v10;
  v12 = *(_DWORD *)(a1 + 80);
  if (v12 == 1 || v12 == 2 && objc_msgSend(v10, "hasSuffix:", CFSTR(".")))
    v11 = (void *)objc_msgSend(v11, "stringByAppendingString:", CFSTR("\n"));
  OZChannel::getValueAsDouble((OZChannel *)(v9 + 65264), MEMORY[0x1E0CA2E68], 0.0);
  v14 = v13;
  PCURL::PCURL((PCURL *)&v39, v11);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v17 = objc_msgSend(v11, "length");
  PCString::PCString(&v40, &v39);
  v18 = (PCString **)(v9 + 65424);
  *(_QWORD *)&v41 = v15;
  *((double *)&v41 + 1) = v14;
  *(_QWORD *)&v42 = v16;
  *((_QWORD *)&v42 + 1) = v17;
  LOBYTE(v43) = 1;
  HIDWORD(v43) = 0;
  PCString::~PCString(&v39);
  v19 = *(_QWORD *)(v9 + 65424);
  if (v19 >= *(_QWORD *)(v9 + 65432))
  {
    v22 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)(v9 + 65416), (uint64_t)&v40);
  }
  else
  {
    PCString::PCString(*v18, &v40);
    v20 = v41;
    v21 = v42;
    *(_QWORD *)(v19 + 40) = v43;
    *(_OWORD *)(v19 + 24) = v21;
    *(_OWORD *)(v19 + 8) = v20;
    v22 = v19 + 48;
    *v18 = (PCString *)(v19 + 48);
  }
  *v18 = (PCString *)v22;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v14
                                                              + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                          + 24);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += objc_msgSend(v11, "length");
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v23 = *(_QWORD *)(a1 + 72);
  if ((objc_msgSend(v11, "hasSuffix:", CFSTR(".")) & 1) != 0
    || ((v24 = objc_msgSend(v11, "hasSuffix:", CFSTR(".\n")), a5 + a6 == v23) ? (v25 = 1) : (v25 = v24), v25 == 1))
  {
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                            + 24)
                                                                + 0.5;
    v26 = *(_QWORD *)(v9 + 65576);
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v28 = *(char **)(v9 + 65568);
    if ((unint64_t)v28 >= v26)
    {
      v30 = *(char **)(v9 + 65560);
      v31 = (v28 - v30) >> 2;
      if ((unint64_t)(v31 + 1) >> 62)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v32 = v26 - (_QWORD)v30;
      v33 = (uint64_t)(v26 - (_QWORD)v30) >> 1;
      if (v33 <= v31 + 1)
        v33 = v31 + 1;
      if (v32 >= 0x7FFFFFFFFFFFFFFCLL)
        v34 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v9 + 65576, v34);
        v30 = *(char **)(v9 + 65560);
        v28 = *(char **)(v9 + 65568);
      }
      else
      {
        v35 = 0;
      }
      v36 = &v35[4 * v31];
      v37 = &v35[4 * v34];
      *(_DWORD *)v36 = *(_DWORD *)(v27 + 24);
      v29 = v36 + 4;
      while (v28 != v30)
      {
        v38 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *((_DWORD *)v36 - 1) = v38;
        v36 -= 4;
      }
      *(_QWORD *)(v9 + 65560) = v36;
      *(_QWORD *)(v9 + 65568) = v29;
      *(_QWORD *)(v9 + 65576) = v37;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(_DWORD *)v28 = *(_DWORD *)(v27 + 24);
      v29 = v28 + 4;
    }
    *(_QWORD *)(v9 + 65568) = v29;
  }
  PCString::~PCString(&v40);
}

void sub_1B294613C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, PCString a11)
{
  uint64_t v11;
  _QWORD *v12;

  *v12 = v11;
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

__n128 TXTranscriptionGenerator::setMediaOffset(TXTranscriptionGenerator *this, const CMTime *a2)
{
  __n128 result;

  result = *(__n128 *)&a2->value;
  *((_QWORD *)this + 8217) = a2->epoch;
  *(__n128 *)((char *)this + 65720) = result;
  return result;
}

__n128 `non-virtual thunk to'TXTranscriptionGenerator::setMediaOffset(TXTranscriptionGenerator *this, const CMTime *a2)
{
  __n128 result;

  result = *(__n128 *)&a2->value;
  *((_QWORD *)this + 159) = a2->epoch;
  *(__n128 *)((char *)this + 1256) = result;
  return result;
}

double TXTranscriptionGenerator::transcriptionDuration(TXTranscriptionGenerator *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  double v13;
  const CMTime *v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  OZRenderState v19;
  CMTime v20;
  __int128 v21;

  v4 = *((_QWORD *)this + 8177);
  v5 = *((_QWORD *)this + 8178);
  if (v4 == v5)
  {
    v9 = -2.0;
  }
  else
  {
    v6 = 0.0;
    do
    {
      PCString::PCString((PCString *)&v19, (const PCString *)v4);
      v7 = *(_OWORD *)(v4 + 8);
      v8 = *(_OWORD *)(v4 + 24);
      v19.var3 = *(double *)(v4 + 40);
      *(_OWORD *)&v19.var0.var1 = v7;
      *(_OWORD *)&v19.var1 = v8;
      v6 = v6 + (double)*((unint64_t *)&v8 + 1);
      PCString::~PCString((PCString *)&v19);
      v4 += 48;
    }
    while (v4 != v5);
    v9 = v6 + -2.0;
  }
  v20 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  if (v10)
  {
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)&v19);
    operator*(300, (CMTime *)&v19, &v20);
  }
  OZRenderState::OZRenderState(&v19);
  v19.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v20;
  (*(void (**)(TXTranscriptionGenerator *, OZRenderState *))(*(_QWORD *)this + 1288))(this, &v19);
  v11 = (char *)this + 1200;
  v12 = (char *)*((_QWORD *)this + 151);
  v13 = 2.22507386e-308;
  if (v12 != (char *)this + 1200)
  {
    v14 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v15 = *((_QWORD *)v12 + 2);
      v16 = *(_QWORD *)(v15 + 8);
      v21 = xmmword_1B30541D0;
      if (OZFactory::isKindOfClass(v16, (int32x4_t *)&v21))
      {
        if (OZChannel::getValueAsInt((OZChannel *)(v15 + 29056), v14, 0.0) == 1)
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 + 16) + 24))(v15 + 16, 1, 1))
          {
            v17 = TXSequenceBehavior::computeEndTime((TXSequenceBehavior *)v15, v9, &v20, a2);
            if (v17 >= v13)
              v13 = v17;
          }
        }
      }
      v12 = (char *)*((_QWORD *)v12 + 1);
    }
    while (v12 != v11);
  }
  return v13 + 1.0;
}

double `non-virtual thunk to'TXTranscriptionGenerator::transcriptionDuration(TXTranscriptionGenerator *this, int a2)
{
  return TXTranscriptionGenerator::transcriptionDuration((TXTranscriptionGenerator *)((char *)this - 64464), a2);
}

uint64_t TXTranscriptionGenerator::adjustTranscriptionLineShiftForCurrentFont(TXTranscriptionGenerator *this, OZChannelDouble *a2)
{
  uint64_t result;

  result = TXTextLayout::getParagraphStyleAtIndex(this, 0);
  if (result)
  {
    TXTextLayout::getLineOffset(this, 0);
    return (*(uint64_t (**)(TXTranscriptionGenerator *, OZChannelDouble *))(*(_QWORD *)this + 1312))(this, a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'TXTranscriptionGenerator::adjustTranscriptionLineShiftForCurrentFont(TXTranscriptionGenerator *this, OZChannelDouble *a2)
{
  return TXTranscriptionGenerator::adjustTranscriptionLineShiftForCurrentFont((TXTranscriptionGenerator *)((char *)this - 64464), a2);
}

uint64_t TXTranscriptionGenerator::adjustTranscriptionLineShift(TXTranscriptionGenerator *this, OZChannelDouble *a2, double a3)
{
  char *v5;
  uint64_t result;

  v5 = (char *)this + 65744;
  result = (*(uint64_t (**)(OZChannelDouble *, _QWORD, _QWORD))(*(_QWORD *)a2 + 712))(a2, MEMORY[0x1E0CA2E68], 0);
  *(double *)v5 = a3;
  *((_QWORD *)v5 + 1) = a2;
  return result;
}

uint64_t `non-virtual thunk to'TXTranscriptionGenerator::adjustTranscriptionLineShift(TXTranscriptionGenerator *this, OZChannelDouble *a2, double a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(OZChannelDouble *, _QWORD, _QWORD))(*(_QWORD *)a2 + 712))(a2, MEMORY[0x1E0CA2E68], 0);
  *((double *)this + 160) = a3;
  *((_QWORD *)this + 161) = a2;
  return result;
}

double TXTranscriptionGenerator::getLineShift(TXTranscriptionGenerator *this)
{
  _QWORD *v1;
  double result;
  uint64_t v3;

  v1 = (_QWORD *)((char *)this + 65744);
  result = *((double *)this + 8218);
  if (result > -0.0000001 && result < 0.0000001)
  {
    TXTextLayout::getLineOffset(this, 0);
    *(double *)v1 = result;
    v3 = v1[1];
    if (v3)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 712))(v3, MEMORY[0x1E0CA2E68], 0);
      return *(double *)v1;
    }
  }
  return result;
}

unint64_t TXTranscriptionGenerator::updateTranscriptionText(TXTranscriptionGenerator *this, const OZRenderState *a2)
{
  uint64_t *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (uint64_t *)((char *)this + 65416);
  v4 = (char *)this + 64232;
  v5 = (char *)this + 60976;
  (*(void (**)(TXTranscriptionGenerator *, const OZRenderState *))(*(_QWORD *)this + 1216))(this, a2);
  v6 = *v3;
  v7 = v3[1];
  if (*v3 != v7)
  {
    do
    {
      *(_BYTE *)(v6 + 40) = 1;
      v6 += 48;
    }
    while (v6 != v7);
  }
  TXTranscriptionGenerator::invalidateTranscriptionByLineCache(this);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v4, *((_QWORD **)v4 + 1));
  *(_QWORD *)v4 = v4 + 8;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 1) = 0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v5, *((_QWORD **)v5 + 1));
  *(_QWORD *)v5 = v5 + 8;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 1) = 0;
  return TXTranscriptionGenerator::invalidateSequenceBehaviorCache((unint64_t)this);
}

unint64_t TXTranscriptionGenerator::invalidateSequenceBehaviorCache(unint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  const CMTime *v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  v1 = this + 1200;
  v2 = *(_QWORD *)(this + 1208);
  if (v2 != this + 1200)
  {
    v3 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v4 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v4 + 8);
      v6 = xmmword_1B30541D0;
      this = OZFactory::isKindOfClass(v5, (int32x4_t *)&v6);
      if ((_DWORD)this)
      {
        this = OZChannel::getValueAsInt((OZChannel *)(v4 + 29056), v3, 0.0);
        if ((_DWORD)this == 1)
        {
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 24))(v4 + 16, 1, 1);
          if ((_DWORD)this)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 352))(v4);
        }
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != v1);
  }
  return this;
}

unint64_t `non-virtual thunk to'TXTranscriptionGenerator::updateTranscriptionText(TXTranscriptionGenerator *this, const OZRenderState *a2)
{
  return TXTranscriptionGenerator::updateTranscriptionText((TXTranscriptionGenerator *)((char *)this - 64464), a2);
}

__n128 TXTranscriptionGenerator::resetTranscription(TXTranscriptionGenerator *this)
{
  OZScene **v2;
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  uint64_t k;
  uint64_t v8;
  uint64_t m;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __n128 result;
  _BYTE v16[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v16, v2);
  (*(void (**)(TXTranscriptionGenerator *))(*(_QWORD *)this + 544))(this);
  v4 = *((_QWORD *)this + 8177);
  for (i = *((_QWORD *)this + 8178); i != v4; PCString::~PCString((PCString *)(i - 48)))
    ;
  *((_QWORD *)this + 8178) = v4;
  v6 = *((_QWORD *)this + 8183);
  for (j = *((_QWORD *)this + 8184); j != v6; PCString::~PCString((PCString *)(j - 48)))
    ;
  *((_QWORD *)this + 8184) = v6;
  v8 = *((_QWORD *)this + 8186);
  for (k = *((_QWORD *)this + 8187); k != v8; PCString::~PCString((PCString *)(k - 48)))
    ;
  *((_QWORD *)this + 8187) = v8;
  v10 = *((_QWORD *)this + 8189);
  for (m = *((_QWORD *)this + 8190); m != v10; PCString::~PCString((PCString *)(m - 48)))
    ;
  v11 = (_QWORD *)*((_QWORD *)this + 8199);
  *((_QWORD *)this + 8190) = v10;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 65584, v11);
  *((_QWORD *)this + 8198) = (char *)this + 65592;
  *((_QWORD *)this + 8199) = 0;
  *((_QWORD *)this + 8200) = 0;
  *((_QWORD *)this + 8196) = *((_QWORD *)this + 8195);
  v12 = MEMORY[0x1E0CA2E18];
  v13 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)((char *)this + 65612) = *MEMORY[0x1E0CA2E18];
  v14 = *(_QWORD *)(v12 + 16);
  *(_QWORD *)((char *)this + 65628) = v14;
  *(_OWORD *)((char *)this + 65636) = v13;
  *(_QWORD *)((char *)this + 65652) = v14;
  *((_QWORD *)this + 8214) = 0;
  *((_QWORD *)this + 8223) = 0;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v16);
  return result;
}

void sub_1B2946794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'TXTranscriptionGenerator::resetTranscription(TXTranscriptionGenerator *this)
{
  double result;

  *(_QWORD *)&result = TXTranscriptionGenerator::resetTranscription((TXTranscriptionGenerator *)((char *)this - 64464)).n128_u64[0];
  return result;
}

void TXTranscriptionGenerator::resetToDefault(TXTranscriptionGenerator *this)
{
  OZScene **v2;
  _BYTE v3[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v3, v2);
  (*(void (**)(TXTranscriptionGenerator *))(*(_QWORD *)this + 1248))(this);
  (*(void (**)(TXTranscriptionGenerator *))(*(_QWORD *)this + 1240))(this);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v3);
}

void sub_1B2946810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTranscriptionGenerator::resetToDefault(TXTranscriptionGenerator *this)
{
  TXTranscriptionGenerator::resetToDefault((TXTranscriptionGenerator *)((char *)this - 64464));
}

void TXTranscriptionGenerator::setText(TXTranscriptionGenerator *this, __CFString *a2)
{
  (*(void (**)(TXTranscriptionGenerator *))(*(_QWORD *)this + 1248))(this);
  TXTranscriptionGenerator::loadText(this, a2);
}

void `non-virtual thunk to'TXTranscriptionGenerator::setText(TXTranscriptionGenerator *this, __CFString *a2)
{
  TXTranscriptionGenerator *v3;

  v3 = (TXTranscriptionGenerator *)((char *)this - 64464);
  (*(void (**)(char *))(*((_QWORD *)this - 8058) + 1248))((char *)this - 64464);
  TXTranscriptionGenerator::loadText(v3, a2);
}

void TXTranscriptionGenerator::setTranscription(PCString *this, void *a2, __CFString *theString, const CMTime *a4, int a5)
{
  void **HostApplicationDelegate;

  PCString::set(this + 8208, theString);
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  if (OZHostApplicationDelegateHandler::wantsToSetTranscriptionsUsingArray(HostApplicationDelegate))
    TXTranscriptionGenerator::setTranscriptionArray((TXTranscriptionGenerator *)this, a2, theString, a5);
  else
    TXTranscriptionGenerator::setTranscriptionObject((TXTranscriptionGenerator *)this, a2, a4, a5);
}

void TXTranscriptionGenerator::setTranscriptionArray(TXTranscriptionGenerator *this, void *a2, __CFString *a3, int a4)
{
  OZScene **v8;
  _BYTE v9[8];

  v8 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v9, v8);
  *((_BYTE *)this + 65672) = 1;
  if (a4)
    TXTranscriptionGenerator::setFinalTranscription(this, a2, a3);
  else
    TXTranscriptionGenerator::updateLiveTranscription(this, a2, a3);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v9);
}

void sub_1B29469C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator::setTranscriptionObject(TXTranscriptionGenerator *this, void *a2, const CMTime *a3, int a4)
{
  char *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double Seconds;
  uint64_t v18;
  double v19;
  uint64_t v20;
  int32_t ValueAsInt;
  CMTimeEpoch v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t j;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  CMTimeEpoch v45;
  CMTimeEpoch v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  id obj;
  CMTime v55;
  CMTime time;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  PCString v61;
  CMTime v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[128];
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v5 = (char *)this + 65416;
  if (a4)
  {
    v7 = *(_QWORD *)v5;
    for (i = *((_QWORD *)this + 8178); i != v7; PCString::~PCString((PCString *)(i - 48)))
      ;
    *((_QWORD *)v5 + 1) = v7;
    v31 = *((_QWORD *)v5 + 9);
    for (j = *((_QWORD *)v5 + 10); j != v31; PCString::~PCString((PCString *)(j - 48)))
      ;
    *((_QWORD *)v5 + 10) = v31;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v32 = (void *)objc_msgSend(a2, "segments", a3);
    result = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
    v33 = result;
    if (result)
    {
      v34 = *(_QWORD *)v66;
      do
      {
        v35 = 0;
        do
        {
          if (*(_QWORD *)v66 != v34)
            objc_enumerationMutation(v32);
          v36 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * v35);
          v37 = objc_msgSend(v36, "substring");
          objc_msgSend(v36, "timestamp");
          v39 = v38;
          objc_msgSend(v36, "duration");
          v41 = v40;
          objc_msgSend(v36, "confidence");
          NSLog(CFSTR("segment: %@, timestamp: %f, duration: %f, confidence: %f"), v37, v39, v41, v42);
          PCURL::PCURL((PCURL *)&v61, (CFTypeRef)objc_msgSend(v36, "substring"));
          objc_msgSend(v36, "timestamp");
          v44 = v43;
          objc_msgSend(v36, "duration");
          v46 = v45;
          v47 = objc_msgSend(v36, "substringRange");
          objc_msgSend(v36, "substringRange");
          v49 = v48;
          PCString::PCString((PCString *)&v62, &v61);
          *(_QWORD *)&v62.timescale = v44;
          v62.epoch = v46;
          *(_QWORD *)&v63 = v47;
          *((_QWORD *)&v63 + 1) = v49;
          LOBYTE(v64) = 1;
          HIDWORD(v64) = 0;
          PCString::~PCString(&v61);
          v50 = *((_QWORD *)v5 + 1);
          if (v50 >= *((_QWORD *)v5 + 2))
          {
            v53 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)v5, (uint64_t)&v62);
          }
          else
          {
            PCString::PCString(*((PCString **)v5 + 1), (const PCString *)&v62);
            v51 = *(_OWORD *)&v62.timescale;
            v52 = v63;
            *(_QWORD *)(v50 + 40) = v64;
            *(_OWORD *)(v50 + 24) = v52;
            *(_OWORD *)(v50 + 8) = v51;
            v53 = v50 + 48;
            *((_QWORD *)v5 + 1) = v50 + 48;
          }
          *((_QWORD *)v5 + 1) = v53;
          PCString::~PCString((PCString *)&v62);
          ++v35;
        }
        while (v33 != v35);
        result = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
        v33 = result;
      }
      while (result);
    }
  }
  else
  {
    v11 = *(_QWORD *)v5;
    v10 = *((_QWORD *)this + 8178);
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    obj = (id)objc_msgSend(a2, "segments");
    result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v69, 16);
    v13 = result;
    if (result)
    {
      v14 = *(_QWORD *)v58;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v58 != v14)
            objc_enumerationMutation(obj);
          if (v11 == v10)
          {
            v16 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * v15);
            time = *a3;
            Seconds = CMTimeGetSeconds(&time);
            if (!OZChannel::getValueAsInt((OZChannel *)this + 425, MEMORY[0x1E0CA2E68], 0.0))
            {
              v18 = *((_QWORD *)v5 + 1);
              v19 = Seconds - *(double *)(v18 - 40);
              if (v19 < *(double *)(v18 - 32))
                *(double *)(v18 - 32) = v19;
            }
            v20 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
            OZSceneSettings::getFrameDuration((OZSceneSettings *)(v20 + 336), (__n128 *)&v62);
            ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 64856), MEMORY[0x1E0CA2E68], 0.0);
            operator*(&v62, ValueAsInt, &v55);
            v22 = CMTimeGetSeconds(&v55);
            PCURL::PCURL((PCURL *)&v61, (CFTypeRef)objc_msgSend(v16, "substring"));
            v23 = objc_msgSend(v16, "substringRange");
            objc_msgSend(v16, "substringRange");
            v25 = v24;
            PCString::PCString((PCString *)&v62, &v61);
            *(double *)&v62.timescale = Seconds;
            v62.epoch = v22;
            *(_QWORD *)&v63 = v23;
            *((_QWORD *)&v63 + 1) = v25;
            LOBYTE(v64) = 1;
            HIDWORD(v64) = 0;
            PCString::~PCString(&v61);
            v26 = *((_QWORD *)v5 + 1);
            if (v26 >= *((_QWORD *)v5 + 2))
            {
              v29 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)v5, (uint64_t)&v62);
            }
            else
            {
              PCString::PCString(*((PCString **)v5 + 1), (const PCString *)&v62);
              v27 = *(_OWORD *)&v62.timescale;
              v28 = v63;
              *(_QWORD *)(v26 + 40) = v64;
              *(_OWORD *)(v26 + 24) = v28;
              *(_OWORD *)(v26 + 8) = v27;
              v29 = v26 + 48;
              *((_QWORD *)v5 + 1) = v26 + 48;
            }
            *((_QWORD *)v5 + 1) = v29;
            PCString::~PCString((PCString *)&v62);
            v11 = v10;
          }
          else
          {
            v11 += 48;
          }
          ++v15;
        }
        while (v13 != v15);
        result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v69, 16);
        v13 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_1B2946E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,PCString a32,PCString a33)
{
  PCString::~PCString(&a33);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTranscriptionGenerator::setTranscription(PCString *this, void *a2, __CFString *a3, const CMTime *a4, int a5)
{
  TXTranscriptionGenerator::setTranscription(this - 8058, a2, a3, a4, a5);
}

uint64_t TXTranscriptionGenerator::setFinalTranscription(TXTranscriptionGenerator *this, void *a2, __CFString *a3)
{
  uint64_t result;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  unint64_t v35;
  char *v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  void **v54;
  uint64_t **v55;
  int v56;
  int ValueAsInt;
  uint64_t v59;
  PCString *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  __CFString *v64;
  uint64_t v65;
  uint64_t v66;
  PCString v67;
  PCString v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (!a3 || !-[__CFString length](a3, "length"))
    return TXTranscriptionGenerator::setFinalTranscription(this, a2);
  (*(void (**)(TXTranscriptionGenerator *))(*(_QWORD *)this + 1248))(this);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 65008), MEMORY[0x1E0CA2E68], 0.0);
  v64 = a3;
  v66 = -[__CFString length](a3, "length");
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v72, v76, 16);
  v61 = result;
  v6 = (char *)this + 65416;
  if (result)
  {
    v56 = 0;
    v63 = 0;
    v7 = 0;
    v8 = 0;
    v62 = 0;
    v65 = 0;
    v59 = *(_QWORD *)v73;
    v54 = (void **)((char *)this + 65560);
    v55 = (uint64_t **)((char *)this + 65584);
    v53 = (char *)this + 65576;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v73 != v59)
          objc_enumerationMutation(a2);
        v10 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * v9);
        v11 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("transcriptionSegmentSubstring"));
        objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("transcriptionSegmentTimestamp")), "doubleValue");
        v13 = v12;
        objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("transcriptionSegmentDuration")), "doubleValue");
        v15 = v14;
        v16 = -[__CFString rangeOfString:options:range:](v64, "rangeOfString:options:range:", v11, 0, v8, v66);
        if (v16 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v7 += v63;
          v8 = v16 + v17;
          v63 = v16 + v17 - v7;
          v18 = (__CFString *)-[__CFString substringWithRange:](v64, "substringWithRange:", v7);
          v19 = *((_QWORD *)v6 + 1);
          if (*(_QWORD *)v6 == v19)
            goto LABEL_54;
          v20 = objc_msgSend((id)-[__CFString stringByTrimmingCharactersInSet:](v18, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "punctuationCharacterSet")), "length");
          v21 = v20;
          v60 = (PCString *)(v19 - 48);
          if (v13 - *(double *)(v19 - 40) > 1.0 && v20 != 0)
          {
            LODWORD(v68.var0) = v65 + 1;
            std::__tree<int>::__emplace_unique_key_args<int,int>(v55, (int *)&v68, &v68);
            v24 = (char *)*((_QWORD *)v6 + 19);
            v23 = *((_QWORD *)v6 + 20);
            if ((unint64_t)v24 >= v23)
            {
              v26 = (char *)*v54;
              v27 = (v24 - (_BYTE *)*v54) >> 2;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 62)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v29 = v23 - (_QWORD)v26;
              if (v29 >> 1 > v28)
                v28 = v29 >> 1;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                v30 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v53, v30);
                v26 = (char *)*((_QWORD *)v6 + 18);
                v24 = (char *)*((_QWORD *)v6 + 19);
              }
              else
              {
                v31 = 0;
              }
              v32 = &v31[4 * v27];
              *(_DWORD *)v32 = v56;
              v25 = v32 + 4;
              while (v24 != v26)
              {
                v33 = *((_DWORD *)v24 - 1);
                v24 -= 4;
                *((_DWORD *)v32 - 1) = v33;
                v32 -= 4;
              }
              *((_QWORD *)v6 + 18) = v32;
              *((_QWORD *)v6 + 19) = v25;
              *((_QWORD *)v6 + 20) = &v31[4 * v30];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *(_DWORD *)v24 = v56;
              v25 = v24 + 4;
            }
            *((_QWORD *)v6 + 19) = v25;
            if (ValueAsInt == 2)
            {
              PCString::append(v60, "\n");
              ++*(_QWORD *)(v19 - 16);
              ++v65;
            }
          }
          if (-[__CFString hasSuffix:]((id)PCString::ns_str(v60), "hasSuffix:", CFSTR("\n")))
            v18 = (__CFString *)objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("transcriptionSegmentSubstring"));
          if (objc_msgSend(a2, "count") == v62 + 1)
          {
            LODWORD(v68.var0) = -[__CFString length](v18, "length") + v65 + 1;
            std::__tree<int>::__emplace_unique_key_args<int,int>(v55, (int *)&v68, &v68);
            v34 = v56 + 1;
            v36 = (char *)*((_QWORD *)v6 + 19);
            v35 = *((_QWORD *)v6 + 20);
            if ((unint64_t)v36 >= v35)
            {
              v38 = (char *)*v54;
              v39 = (v36 - (_BYTE *)*v54) >> 2;
              v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v41 = v35 - (_QWORD)v38;
              if (v41 >> 1 > v40)
                v40 = v41 >> 1;
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                v42 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v42 = v40;
              if (v42)
              {
                v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v53, v42);
                v38 = (char *)*((_QWORD *)v6 + 18);
                v36 = (char *)*((_QWORD *)v6 + 19);
              }
              else
              {
                v43 = 0;
              }
              v44 = &v43[4 * v39];
              *(_DWORD *)v44 = v34;
              v37 = v44 + 4;
              while (v36 != v38)
              {
                v45 = *((_DWORD *)v36 - 1);
                v36 -= 4;
                *((_DWORD *)v44 - 1) = v45;
                v44 -= 4;
              }
              *((_QWORD *)v6 + 18) = v44;
              *((_QWORD *)v6 + 19) = v37;
              *((_QWORD *)v6 + 20) = &v43[4 * v42];
              if (v38)
                operator delete(v38);
            }
            else
            {
              *(_DWORD *)v36 = v34;
              v37 = v36 + 4;
            }
            *((_QWORD *)v6 + 19) = v37;
            if (ValueAsInt == 2)
              v18 = (__CFString *)-[__CFString stringByAppendingString:](v18, "stringByAppendingString:", CFSTR("\n"));
          }
          if (v21)
          {
LABEL_54:
            v46 = 1;
          }
          else
          {
            if (-[__CFString hasSuffix:]((id)PCString::ns_str(v60), "hasSuffix:", CFSTR("\n")))
            {
              v47 = PCString::size(v60);
              PCString::erase(v60, v47 - 1, 1u);
              --*(_QWORD *)(v19 - 16);
            }
            v68.var0 = 0;
            PCString::set(&v68, v18);
            PCString::append(v60, &v68);
            PCString::~PCString(&v68);
            v46 = 0;
            *(_QWORD *)(v19 - 16) += -[__CFString length](v18, "length");
          }
          if (ValueAsInt == 1)
            v18 = (__CFString *)-[__CFString stringByAppendingString:](v18, "stringByAppendingString:", CFSTR("\n"));
          if (v46)
          {
            PCURL::PCURL((PCURL *)&v67, v18);
            v48 = -[__CFString length](v18, "length");
            PCString::PCString(&v68, &v67);
            *(double *)&v69 = v13;
            *((_QWORD *)&v69 + 1) = v15;
            *(_QWORD *)&v70 = v65;
            *((_QWORD *)&v70 + 1) = v48;
            LOBYTE(v71) = 1;
            HIDWORD(v71) = 0;
            PCString::~PCString(&v67);
            v49 = *((_QWORD *)v6 + 1);
            if (v49 >= *((_QWORD *)v6 + 2))
            {
              v52 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)v6, (uint64_t)&v68);
            }
            else
            {
              PCString::PCString(*((PCString **)v6 + 1), &v68);
              v50 = v69;
              v51 = v70;
              *(_QWORD *)(v49 + 40) = v71;
              *(_OWORD *)(v49 + 24) = v51;
              *(_OWORD *)(v49 + 8) = v50;
              v52 = v49 + 48;
              *((_QWORD *)v6 + 1) = v49 + 48;
            }
            *((_QWORD *)v6 + 1) = v52;
            ++v56;
            PCString::~PCString(&v68);
          }
          v65 += -[__CFString length](v18, "length");
          v66 -= v63;
          ++v62;
        }
        ++v9;
      }
      while (v9 != v61);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v72, v76, 16);
      v61 = result;
    }
    while (result);
  }
  v6[257] = 1;
  return result;
}

void sub_1B2947528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,PCString a24,PCString a25)
{
  PCString::~PCString(&a25);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::updateLiveTranscription(TXTranscriptionGenerator *this, void *a2, __CFString *a3)
{
  OZScene **v5;
  char *v6;
  PCString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t updated;
  uint64_t i;
  void *v15;
  __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  __CFString *v19;
  double v20;
  double v21;
  double v22;
  char *v23;
  TXTranscriptionGenerator *v25;
  __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  PCString *v29;
  PCString *v30;
  PCString *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  PCString *v36;
  _BYTE v37[8];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a3 && -[__CFString length](a3, "length"))
  {
    v5 = (OZScene **)Li3DEngineScene::sceneManager(this);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v37, v5);
    v6 = (char *)this + 65416;
    v7 = (PCString *)*((_QWORD *)this + 8177);
    v31 = (PCString *)*((_QWORD *)this + 8178);
    v36 = v7;
    v8 = -[__CFString length](a3, "length");
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
    if (v9)
    {
      v23 = (char *)this + 65416;
      v25 = this;
      v26 = a3;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      updated = 0;
      v27 = *(_QWORD *)v33;
      v29 = v31;
      v30 = v7;
      do
      {
        v28 = v9;
        for (i = 0; i != v28; ++i)
        {
          if (*(_QWORD *)v33 != v27)
            objc_enumerationMutation(a2);
          v15 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
          v16 = (__CFString *)objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("transcriptionSegmentSubstring"));
          v17 = -[__CFString rangeOfString:options:range:](v26, "rangeOfString:options:range:", v16, 0, v12, v8);
          v11 += v10;
          v12 = v17 + v18;
          v10 = v17 + v18 - v11;
          v19 = (__CFString *)-[__CFString substringWithRange:](v26, "substringWithRange:", v11, v10);
          objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("transcriptionSegmentTimestamp")), "doubleValue");
          v21 = v20;
          objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("transcriptionSegmentDuration")), "doubleValue");
          if (v7 == v31)
          {
            updated = TXTranscriptionGenerator::addWordDuringLiveTranscription(v25, v19, v16, v21, updated);
            v7 = v31;
          }
          else
          {
            updated = TXTranscriptionGenerator::updateWordDuringLiveTranscription((uint64_t)v25, v19, v16, (uint64_t *)&v36, updated, v21, v22);
            if (v29 != v31)
              *(double *)&v29[2].var0 = v21 - *(double *)&v29[1].var0;
            v29 = v30;
            v7 = v30 + 6;
            v36 = v30 + 6;
            v30 += 6;
          }
          v8 -= v10;
        }
        v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
      }
      while (v9);
      v6 = v23;
      v7 = v30;
    }
    std::vector<TXTranscriptionSegment>::erase((uint64_t)v6, v7, v31);
    v6[257] = 1;
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v37);
  }
}

void sub_1B29477F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a28);
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator::setFinalTranscription(TXTranscriptionGenerator *this, void *a2)
{
  int ValueAsInt;
  void *v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  PCString v50;
  PCString v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  (*(void (**)(TXTranscriptionGenerator *))(*(_QWORD *)this + 1248))(this);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 65008), MEMORY[0x1E0CA2E68], 0.0);
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v5 = a2;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v55, v59, 16);
  v49 = result;
  v7 = (char *)this + 65416;
  if (result)
  {
    LODWORD(v8) = 0;
    v9 = 0;
    v46 = (uint64_t)(v7 + 160);
    v47 = (void **)(v7 + 144);
    v48 = *(_QWORD *)v56;
    do
    {
      v10 = 0;
      v8 = (int)v8;
      do
      {
        if (*(_QWORD *)v56 != v48)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * v10);
        v12 = (void *)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("transcriptionSegmentSubstring"));
        objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("transcriptionSegmentTimestamp")), "doubleValue");
        v14 = v13;
        objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("transcriptionSegmentDuration")), "doubleValue");
        v16 = v15;
        v17 = *((_QWORD *)v7 + 1);
        if (*(_QWORD *)v7 == v17)
          goto LABEL_29;
        if (v14 - *(double *)(v17 - 40) > 1.0)
        {
          v19 = (char *)*((_QWORD *)v7 + 19);
          v18 = *((_QWORD *)v7 + 20);
          if ((unint64_t)v19 >= v18)
          {
            v21 = (char *)*v47;
            v22 = (v19 - (_BYTE *)*v47) >> 2;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v24 = v18 - (_QWORD)v21;
            if (v24 >> 1 > v23)
              v23 = v24 >> 1;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
              v25 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v46, v25);
              v21 = (char *)*((_QWORD *)v7 + 18);
              v19 = (char *)*((_QWORD *)v7 + 19);
            }
            else
            {
              v26 = 0;
            }
            v27 = &v26[4 * v22];
            *(_DWORD *)v27 = v8;
            v20 = v27 + 4;
            while (v19 != v21)
            {
              v28 = *((_DWORD *)v19 - 1);
              v19 -= 4;
              *((_DWORD *)v27 - 1) = v28;
              v27 -= 4;
            }
            *((_QWORD *)v7 + 18) = v27;
            *((_QWORD *)v7 + 19) = v20;
            *((_QWORD *)v7 + 20) = &v26[4 * v25];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_DWORD *)v19 = v8;
            v20 = v19 + 4;
          }
          *((_QWORD *)v7 + 19) = v20;
          if (ValueAsInt == 2)
            PCString::append((PCString *)(*((_QWORD *)v7 + 1) - 48), "\n");
        }
        v29 = v8 + 1;
        if (objc_msgSend(v5, "count") != v8 + 1)
        {
LABEL_29:
          if (ValueAsInt != 1)
            goto LABEL_48;
        }
        else
        {
          v31 = (char *)*((_QWORD *)v7 + 19);
          v30 = *((_QWORD *)v7 + 20);
          if ((unint64_t)v31 >= v30)
          {
            v33 = (char *)*v47;
            v34 = (v31 - (_BYTE *)*v47) >> 2;
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 62)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v36 = v30 - (_QWORD)v33;
            if (v36 >> 1 > v35)
              v35 = v36 >> 1;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
              v37 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            if (v37)
            {
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v46, v37);
              v33 = (char *)*((_QWORD *)v7 + 18);
              v31 = (char *)*((_QWORD *)v7 + 19);
            }
            else
            {
              v38 = 0;
            }
            v39 = &v38[4 * v34];
            *(_DWORD *)v39 = v29;
            v32 = v39 + 4;
            while (v31 != v33)
            {
              v40 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v39 - 1) = v40;
              v39 -= 4;
            }
            *((_QWORD *)v7 + 18) = v39;
            *((_QWORD *)v7 + 19) = v32;
            *((_QWORD *)v7 + 20) = &v38[4 * v37];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_DWORD *)v31 = v29;
            v32 = v31 + 4;
          }
          *((_QWORD *)v7 + 19) = v32;
          if (ValueAsInt != 1)
          {
            if (ValueAsInt == 2)
              v12 = (void *)objc_msgSend(v12, "stringByAppendingString:", CFSTR("\n"));
LABEL_48:
            v41 = objc_msgSend(v12, "length");
            goto LABEL_50;
          }
        }
        v12 = (void *)objc_msgSend(v12, "stringByAppendingString:", CFSTR("\n"));
        v41 = objc_msgSend(v12, "length") - 1;
LABEL_50:
        PCURL::PCURL((PCURL *)&v50, v12);
        PCString::PCString(&v51, &v50);
        *(double *)&v52 = v14;
        *((_QWORD *)&v52 + 1) = v16;
        *(_QWORD *)&v53 = v9;
        *((_QWORD *)&v53 + 1) = v41;
        LOBYTE(v54) = 1;
        HIDWORD(v54) = 0;
        PCString::~PCString(&v50);
        v42 = *((_QWORD *)v7 + 1);
        if (v42 >= *((_QWORD *)v7 + 2))
        {
          v45 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)v7, (uint64_t)&v51);
        }
        else
        {
          PCString::PCString(*((PCString **)v7 + 1), &v51);
          v43 = v52;
          v44 = v53;
          *(_QWORD *)(v42 + 40) = v54;
          *(_OWORD *)(v42 + 24) = v44;
          *(_OWORD *)(v42 + 8) = v43;
          v45 = v42 + 48;
          *((_QWORD *)v7 + 1) = v42 + 48;
        }
        *((_QWORD *)v7 + 1) = v45;
        ++v8;
        v9 += v41 + 1;
        PCString::~PCString(&v51);
        ++v10;
      }
      while (v10 != v49);
      result = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v55, v59, 16);
      v49 = result;
    }
    while (result);
  }
  *((_WORD *)v7 + 128) = 256;
  return result;
}

void sub_1B2947C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14, PCString a15)
{
  PCString::~PCString(&a15);
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator::updateWordDuringLiveTranscription(uint64_t a1, __CFString *a2, __CFString *a3, uint64_t *a4, uint64_t a5, double a6, double a7)
{
  uint64_t v11;
  PCString v15;

  v11 = *(_QWORD *)(a1 + 65416);
  if (*a4 != v11)
  {
    if (-[__CFString hasSuffix:]((id)PCString::ns_str((PCString *)(*a4 - 48)), "hasSuffix:", CFSTR("\n")))
      a2 = a3;
    v11 = *a4;
  }
  if (-[__CFString hasSuffix:]((id)PCString::ns_str((PCString *)v11), "hasSuffix:", CFSTR("\n")))
    a2 = (__CFString *)-[__CFString stringByAppendingString:](a2, "stringByAppendingString:", CFSTR("\n"));
  v15.var0 = 0;
  PCString::set(&v15, a2);
  PCString::set((PCString *)v11, &v15);
  PCString::~PCString(&v15);
  *(_QWORD *)(v11 + 24) = a5;
  *(_QWORD *)(v11 + 32) = -[__CFString length](a2, "length");
  *(double *)(v11 + 8) = a6;
  *(double *)(v11 + 16) = a7;
  return -[__CFString length](a2, "length") + a5;
}

void sub_1B2947DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator::addWordDuringLiveTranscription(TXTranscriptionGenerator *this, __CFString *a2, const __CFString *a3, double a4, uint64_t a5)
{
  const CMTime *v10;
  int ValueAsInt;
  char *v12;
  uint64_t v13;
  int32_t v14;
  CMTimeEpoch Seconds;
  uint64_t v16;
  int v17;
  double v18;
  int v19;
  char *v20;
  unint64_t v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  PCString v39;
  CMTime v40;
  __int128 v41;
  uint64_t v42;
  CMTime time;

  v10 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 65008), MEMORY[0x1E0CA2E68], 0.0);
  v12 = (char *)this + 65416;
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v13 + 336), (__n128 *)&v40);
  v14 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 64856), v10, 0.0);
  operator*(&v40, v14, &time);
  Seconds = CMTimeGetSeconds(&time);
  v16 = *((_QWORD *)this + 8178);
  if (*((_QWORD *)this + 8177) != v16)
  {
    v17 = OZChannel::getValueAsInt((OZChannel *)this + 425, MEMORY[0x1E0CA2E68], 0.0);
    v18 = a4 - *(double *)(v16 - 40);
    if (!v17 && v18 < *(double *)(v16 - 32))
      *(double *)(v16 - 32) = v18;
    if (v18 > 1.0)
    {
      v19 = -1431655765 * ((*((_QWORD *)this + 8178) - *((_QWORD *)this + 8177)) >> 4);
      v20 = (char *)*((_QWORD *)v12 + 19);
      v21 = *((_QWORD *)v12 + 20);
      if ((unint64_t)v20 >= v21)
      {
        v23 = (char *)*((_QWORD *)v12 + 18);
        v24 = (v20 - v23) >> 2;
        if ((unint64_t)(v24 + 1) >> 62)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v25 = v21 - (_QWORD)v23;
        v26 = (uint64_t)(v21 - (_QWORD)v23) >> 1;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(v12 + 160), v27);
          v23 = (char *)*((_QWORD *)v12 + 18);
          v20 = (char *)*((_QWORD *)v12 + 19);
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[4 * v24];
        v30 = &v28[4 * v27];
        *(_DWORD *)v29 = v19;
        v22 = v29 + 4;
        while (v20 != v23)
        {
          v31 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          *((_DWORD *)v29 - 1) = v31;
          v29 -= 4;
        }
        *((_QWORD *)v12 + 18) = v29;
        *((_QWORD *)v12 + 19) = v22;
        *((_QWORD *)v12 + 20) = v30;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_DWORD *)v20 = v19;
        v22 = v20 + 4;
      }
      *((_QWORD *)v12 + 19) = v22;
      if (ValueAsInt == 2)
      {
        PCString::append((PCString *)(v16 - 48), "\n");
        ++*(_QWORD *)(v16 - 16);
        ++a5;
      }
    }
    if (-[__CFString hasSuffix:]((id)PCString::ns_str((PCString *)(v16 - 48)), "hasSuffix:", CFSTR("\n")))
      a2 = (__CFString *)a3;
  }
  if (ValueAsInt == 1)
    a2 = (__CFString *)-[__CFString stringByAppendingString:](a2, "stringByAppendingString:", CFSTR("\n"));
  PCURL::PCURL((PCURL *)&v39, a2);
  v32 = -[__CFString length](a2, "length");
  PCString::PCString((PCString *)&v40, &v39);
  *(double *)&v40.timescale = a4;
  v40.epoch = Seconds;
  *(_QWORD *)&v41 = a5;
  *((_QWORD *)&v41 + 1) = v32;
  LOBYTE(v42) = 1;
  HIDWORD(v42) = 0;
  PCString::~PCString(&v39);
  v33 = *((_QWORD *)v12 + 1);
  if (v33 >= *((_QWORD *)v12 + 2))
  {
    v36 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)v12, (uint64_t)&v40);
  }
  else
  {
    PCString::PCString(*((PCString **)v12 + 1), (const PCString *)&v40);
    v34 = *(_OWORD *)&v40.timescale;
    v35 = v41;
    *(_QWORD *)(v33 + 40) = v42;
    *(_OWORD *)(v33 + 24) = v35;
    *(_OWORD *)(v33 + 8) = v34;
    v36 = v33 + 48;
    *((_QWORD *)v12 + 1) = v33 + 48;
  }
  *((_QWORD *)v12 + 1) = v36;
  v37 = -[__CFString length](a2, "length") + a5;
  PCString::~PCString((PCString *)&v40);
  return v37;
}

void sub_1B29480C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  PCString::~PCString((PCString *)va);
  _Unwind_Resume(a1);
}

PCString *std::vector<TXTranscriptionSegment>::erase(uint64_t a1, PCString *this, PCString *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (this != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TXTranscriptionSegment *,TXTranscriptionSegment *,TXTranscriptionSegment *,0>(a3, *(PCString **)(a1 + 8), this);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
        PCString::~PCString((PCString *)(v7 - 48));
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return this;
}

void **TXTranscriptionGenerator::getTranscriptionByLine(TXTranscriptionGenerator *this)
{
  void **v1;
  __int128 v3;
  void *v4;
  void **v5;

  v1 = (void **)((char *)this + 65464);
  if (*((_QWORD *)this + 8183) == *((_QWORD *)this + 8184))
  {
    TXTranscriptionGenerator::computeTranscriptionByLine(this, (uint64_t *)this + 8177, 0, (uint64_t *)&v3);
    std::vector<TXTranscriptionSegment>::__vdeallocate(v1);
    *(_OWORD *)v1 = v3;
    v1[2] = v4;
    v4 = 0;
    v3 = 0uLL;
    v5 = (void **)&v3;
    std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  return v1;
}

void TXTranscriptionGenerator::computeTranscriptionByLine(Li3DEngineScene *a1@<X0>, uint64_t *a2@<X1>, CMTime *a3@<X2>, uint64_t *a4@<X8>)
{
  OZScene **v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  double v13;
  double v14;
  int v15;
  unint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  double v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  double v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  TXTranscriptionGenerator *v36;
  uint64_t v37;
  BOOL v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned int LineBreaks;
  PCString v43;
  PCString v44;
  PCString v45;
  PCString v46;
  PCSharedCount v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unint64_t *v51;
  _BYTE v52[16];

  v7 = (OZScene **)Li3DEngineScene::sceneManager(a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v52, v7);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v51 = 0;
  v36 = a1;
  LineBreaks = TXTextLayout::getLineBreaks(a1, &v51);
  PCSharedCount::PCSharedCount(&v47);
  v48 = 0u;
  v49 = 0u;
  LOBYTE(v50) = 1;
  HIDWORD(v50) = 0;
  v8 = *a2;
  v37 = a2[1];
  if (*a2 != v37)
  {
    v9 = 0;
    v10 = 0;
    v41 = (char *)a1 + 65672;
    v11 = 1;
    do
    {
      if (a3 && !TXTranscriptionGenerator::isSegmentActiveAtTime(v36, v8, a3))
        break;
      if ((v11 & (*(double *)&v48 == 0.0)) == 1)
        *(_QWORD *)&v48 = *(_QWORD *)(v8 + 8);
      PCString::PCString(&v46, (const PCString *)v8);
      v12 = PCString::size(&v46);
      v13 = *(double *)(v8 + 8);
      v14 = *(double *)(v8 + 16);
      v9 += v12;
      if (*v41)
      {
        v15 = 1;
      }
      else
      {
        v15 = -[__CFString hasSuffix:]((id)PCString::ns_str((PCString *)v8), "hasSuffix:", CFSTR("\n"));
        v9 += v15 ^ 1;
      }
      LODWORD(v16) = -1;
      if (v51 && v10 < LineBreaks)
        v16 = v51[v10];
      PCString::PCString(&v45, &v46);
      v40 = v8;
      v17 = !v51 || v10 >= LineBreaks;
      v18 = !v17 && v9 >= v16;
      v19 = !v18;
      v39 = v19;
      if (v18)
      {
        v21 = v15 ^ 1;
        v22 = 8 * (int)v10 + 8;
        do
        {
          if (v9 == (_DWORD)v16)
            v23 = 0;
          else
            v23 = v21;
          v24 = v9 - v23;
          v25 = v12 - (v9 - v23 - v16);
          PCString::substr(&v45, v12 - (v24 - (_DWORD)v16), v24 - v16, (CFStringRef *)&v44.var0);
          PCString::substr(&v45, 0, v25, (CFStringRef *)&v43.var0);
          PCString::set(&v45, &v43);
          PCString::~PCString(&v43);
          if (objc_msgSend((id)-[__CFString stringByTrimmingCharactersInSet:]((id)PCString::ns_str(&v45), "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet")), "length"))
          {
            v26 = (double)v25 / (double)v12;
          }
          else
          {
            v26 = 0.0;
          }
          PCString::append((PCString *)&v47, &v45);
          if (!*v41)
            PCString::append((PCString *)&v47, " ");
          v20 = v14 * (1.0 - v26);
          v27 = v14 - v20;
          *((double *)&v48 + 1) = v27 + *((double *)&v48 + 1);
          v28 = a4[1];
          if (v28 >= a4[2])
          {
            v31 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>(a4, (uint64_t)&v47);
          }
          else
          {
            PCString::PCString((PCString *)a4[1], (const PCString *)&v47);
            v29 = v50;
            v30 = v49;
            *(_OWORD *)(v28 + 8) = v48;
            *(_QWORD *)(v28 + 40) = v29;
            *(_OWORD *)(v28 + 24) = v30;
            v31 = v28 + 48;
            a4[1] = v28 + 48;
          }
          a4[1] = v31;
          if (v24 == (_DWORD)v16)
            v13 = 0.0;
          else
            v13 = v13 + v27;
          PCString::PCString(&v43, "");
          PCString::set((PCString *)&v47, &v43);
          PCString::~PCString(&v43);
          v48 = *(unint64_t *)&v13;
          PCString::set(&v45, &v44);
          v12 = PCString::size(&v45);
          ++v10;
          LODWORD(v16) = -1;
          if (v51 && LineBreaks > v10)
            LODWORD(v16) = *(_DWORD *)((char *)v51 + v22);
          PCString::~PCString(&v44);
          if (!v51)
            break;
          if (LineBreaks <= v10)
            break;
          v22 += 8;
          v14 = v20;
        }
        while (v9 >= v16);
      }
      else
      {
        v20 = v14;
      }
      if (PCString::size(&v45))
      {
        PCString::append((PCString *)&v47, &v45);
        if (!*v41)
          PCString::append((PCString *)&v47, " ");
        *((double *)&v48 + 1) = v20 + *((double *)&v48 + 1);
      }
      v11 = !v39;
      PCString::~PCString(&v45);
      PCString::~PCString(&v46);
      v8 = v40 + 48;
    }
    while (v40 + 48 != v37);
  }
  if (!PCString::empty((PCString *)&v47))
  {
    v32 = a4[1];
    if (v32 >= a4[2])
    {
      v35 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>(a4, (uint64_t)&v47);
    }
    else
    {
      PCString::PCString((PCString *)a4[1], (const PCString *)&v47);
      v33 = v50;
      v34 = v49;
      *(_OWORD *)(v32 + 8) = v48;
      *(_QWORD *)(v32 + 40) = v33;
      *(_OWORD *)(v32 + 24) = v34;
      v35 = v32 + 48;
      a4[1] = v32 + 48;
    }
    a4[1] = v35;
  }
  PCString::~PCString((PCString *)&v47);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v52);
}

void sub_1B2948644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCString a18, PCString a19, PCString a20,PCString a21,PCString a22)
{
  __CFString *v22;
  uint64_t v23;
  uint64_t v24;

  v22->info = v23;
  PCString::~PCString(&a22);
  a22.var0 = v22;
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v24 - 144));
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator::getActiveTranscriptionByLine(TXTranscriptionGenerator *this, CMTime *a2)
{
  char *v4;
  __int128 v5;
  CMTime v7;
  CMTime time1;

  v4 = (char *)this + 65612;
  time1 = *a2;
  v7 = *(CMTime *)((char *)this + 65612);
  if (CMTimeCompare(&time1, &v7))
  {
    TXTranscriptionGenerator::computeTranscriptionByLine(this, (uint64_t *)this + 8180, a2, &time1.value);
    std::vector<TXTranscriptionSegment>::__vdeallocate((void **)this + 8186);
    *(CMTime *)((char *)this + 65488) = time1;
    memset(&time1, 0, sizeof(time1));
    v7.value = (CMTimeValue)&time1;
    std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
    v5 = *(_OWORD *)&a2->value;
    *((_QWORD *)v4 + 2) = a2->epoch;
    *(_OWORD *)v4 = v5;
  }
  return (uint64_t)this + 65488;
}

_QWORD *TXTranscriptionGenerator::getTranscriptionByBlock(TXTranscriptionGenerator *this, const CMTime *a2)
{
  _QWORD *v4;
  OZScene **v5;
  _BYTE v7[8];

  v4 = (_QWORD *)((char *)this + 65512);
  v5 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v7, v5);
  if (*v4 == v4[1])
    TXTranscriptionGenerator::computeTranscriptionBlocks(this, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v7);
  return v4;
}

void sub_1B2948838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator::getLineBreaksForEntireString(TXTranscriptionGenerator *this, const CMTime *a2)
{
  double Seconds;
  uint64_t v5;
  uint64_t v6;
  double v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  OZRenderState v13;
  CMTime time;
  PCSharedCount v15;

  PCSharedCount::PCSharedCount(&v15);
  time = *(CMTime *)((char *)this + 65720);
  Seconds = CMTimeGetSeconds(&time);
  v5 = *((_QWORD *)this + 8177);
  v6 = *((_QWORD *)this + 8178);
  if (v5 != v6)
  {
    v7 = Seconds;
    do
    {
      if (*(_BYTE *)(v5 + 40))
        v8 = *(double *)(v5 + 8) < v7;
      else
        v8 = 1;
      if (!v8)
      {
        PCString::PCString((PCString *)&v13, (const PCString *)v5);
        PCString::append((PCString *)&v15, (const PCString *)&v13);
        PCString::~PCString((PCString *)&v13);
      }
      v5 += 48;
    }
    while (v5 != v6);
  }
  TXTextLayout::resetState(this);
  TXTextLayout::setString(this, (const PCString *)&v15, 1);
  v9 = PCString::size((PCString *)&v15);
  TXTextLayout::updateStyleRunsAfterTextInsert((uint64_t)this, 0, v9);
  TXTextLayout::updateDisplayString((PCString *)this, a2);
  v10 = *(_QWORD *)(*((_QWORD *)this + 2422) + 16);
  TXTextLayout::getDisplayString((PCString *)this, (PCString *)&v13);
  v11 = PCString::size((PCString *)&v13);
  *(_DWORD *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 28) = v11;
  PCString::~PCString((PCString *)&v13);
  TXTextLayout::rebuildParagraphStyles((PCString *)this);
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
  OZRenderState::OZRenderState(&v13);
  *(_OWORD *)&v13.var0.var0 = *(_OWORD *)&a2->value;
  v13.var0.var3 = a2->epoch;
  TXTextLayout::doLayout(this, &v13, 0);
  PCString::~PCString((PCString *)&v15);
  return (uint64_t)this + 52200;
}

void sub_1B29489B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator::isPhraseBreak(TXTranscriptionGenerator *this, int a2)
{
  char *v2;
  uint64_t *v4;
  int v5;
  int v6;

  v2 = (char *)this + 65592;
  if ((*((_DWORD *)this + 16402) & 0x80000000) != 0)
    return 0;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65008), MEMORY[0x1E0CA2E68], 0.0) != 2)
    return 0;
  v4 = *(uint64_t **)v2;
  if (!*(_QWORD *)v2)
    return 0;
  v5 = *((_DWORD *)v2 + 4) + a2;
  while (1)
  {
    v6 = *((_DWORD *)v4 + 7);
    if (v5 >= v6)
      break;
LABEL_8:
    v4 = (uint64_t *)*v4;
    if (!v4)
      return 0;
  }
  if (v6 < v5)
  {
    ++v4;
    goto LABEL_8;
  }
  return 1;
}

char *TXTranscriptionGenerator::getActiveTranscriptionByBlock(TXTranscriptionGenerator *this, CMTime *a2)
{
  OZScene **v4;
  char *v5;
  char *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t *TranscriptionByBlock;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  CMTime v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[8];
  CMTime time2;

  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v23, v4);
  v5 = (char *)this + 65636;
  v20 = *a2;
  time2 = *(CMTime *)((char *)this + 65636);
  v6 = (char *)this + 0x10000;
  if (CMTimeCompare(&v20, &time2))
  {
    v8 = *(_QWORD *)v6;
    for (i = *((_QWORD *)this + 8193); i != v8; PCString::~PCString((PCString *)(i - 48)))
      ;
    *((_QWORD *)this + 8193) = v8;
    TranscriptionByBlock = TXTranscriptionGenerator::getTranscriptionByBlock(this, a2);
    v10 = *TranscriptionByBlock;
    v11 = TranscriptionByBlock[1];
    if (*TranscriptionByBlock != v11)
    {
      while (1)
      {
        PCString::PCString((PCString *)&v20, (const PCString *)v10);
        v12 = *(_OWORD *)(v10 + 8);
        v13 = *(_OWORD *)(v10 + 24);
        v22 = *(_QWORD *)(v10 + 40);
        *(_OWORD *)&v20.timescale = v12;
        v21 = v13;
        if (TXTranscriptionGenerator::isBlockActiveAtTime((uint64_t)this, (uint64_t)&v20, a2))
          break;
        PCString::~PCString((PCString *)&v20);
        v10 += 48;
        if (v10 == v11)
          goto LABEL_13;
      }
      *(_QWORD *)&v21 = 0;
      v14 = *((_QWORD *)this + 8193);
      if (v14 >= *((_QWORD *)v6 + 2))
      {
        v17 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)v6, (uint64_t)&v20);
      }
      else
      {
        PCString::PCString(*((PCString **)v6 + 1), (const PCString *)&v20);
        v15 = *(_OWORD *)&v20.timescale;
        v16 = v21;
        *(_QWORD *)(v14 + 40) = v22;
        *(_OWORD *)(v14 + 24) = v16;
        *(_OWORD *)(v14 + 8) = v15;
        v17 = v14 + 48;
        *((_QWORD *)v6 + 1) = v14 + 48;
      }
      *((_QWORD *)v6 + 1) = v17;
      PCString::~PCString((PCString *)&v20);
    }
LABEL_13:
    v18 = *(_OWORD *)&a2->value;
    *((_QWORD *)v5 + 2) = a2->epoch;
    *(_OWORD *)v5 = v18;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v23);
  return v6;
}

void sub_1B2948C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  PCString::~PCString(&a9);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a16);
  _Unwind_Resume(a1);
}

void **TXTranscriptionGenerator::getTranscriptionByUnit(TXTranscriptionGenerator *a1, _DWORD *a2)
{
  uint64_t v2;
  void **result;

  switch(*a2)
  {
    case 3:
      result = TXTranscriptionGenerator::getTranscriptionByLine(a1);
      break;
    case 6:
      v2 = 65512;
      goto LABEL_5;
    default:
      v2 = 65416;
LABEL_5:
      result = (void **)((char *)a1 + v2);
      break;
  }
  return result;
}

char *TXTranscriptionGenerator::getActiveTranscriptionByUnit(TXTranscriptionGenerator *a1, _DWORD *a2, CMTime *a3)
{
  char *result;

  switch(*a2)
  {
    case 3:
      result = (char *)TXTranscriptionGenerator::getActiveTranscriptionByLine(a1, a3);
      break;
    case 6:
      result = TXTranscriptionGenerator::getActiveTranscriptionByBlock(a1, a3);
      break;
    default:
      result = (char *)a1 + 65440;
      break;
  }
  return result;
}

uint64_t TXTranscriptionGenerator::getWordIndexInPhrase(TXTranscriptionGenerator *this, int a2, int a3, unsigned int *a4)
{
  uint64_t result;
  int **v6;
  unsigned int v9;
  unsigned int *v10;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  result = 0;
  if (!a4)
    return result;
  v6 = (int **)((char *)this + 65560);
  if (*((_QWORD *)this + 8195) == *((_QWORD *)this + 8196))
    return result;
  v9 = (*(uint64_t (**)(TXTranscriptionGenerator *))(*(_QWORD *)this + 720))(this);
  v11 = *v6;
  v10 = (unsigned int *)v6[1];
  if (*v6 == (int *)v10)
    return 0;
  v12 = *v11;
  if (v9 >= *v11)
  {
    v14 = (unsigned int *)(v11 + 1);
    while (v14 != v10)
    {
      v13 = v12;
      v15 = *v14++;
      v12 = v15;
      if (v9 < v15)
        goto LABEL_9;
    }
    return 0;
  }
  v13 = 0;
LABEL_9:
  v16 = v12 + ~v9;
  if (!a3)
    v16 = v9 - v13;
  *a4 = v16;
  return 1;
}

uint64_t TXTranscriptionGenerator::charIndexToBlockIndex(TXTranscriptionGenerator *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;

  v2 = *((_QWORD *)this + 0x2000);
  v3 = *((_QWORD *)this + 8193);
  if (v2 == v3)
    return 0;
  result = 0;
  do
  {
    v5 = *(_QWORD *)(v2 + 24);
    if (v5 <= a2 && *(_QWORD *)(v2 + 32) + v5 > a2)
      break;
    result = (result + 1);
    v2 += 48;
  }
  while (v2 != v3);
  return result;
}

unint64_t TXTGGetRangeOfWord(const TXTranscriptionGenerator *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  PCString v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (!a1)
    return -1;
  v2 = *((_QWORD *)a1 + 8180);
  v3 = *((_QWORD *)a1 + 8181);
  if (v2 == v3)
    return -1;
  v4 = a2;
  while (1)
  {
    PCString::PCString(&v11, (const PCString *)v2);
    v5 = *(_OWORD *)(v2 + 8);
    v6 = *(_OWORD *)(v2 + 24);
    v14 = *(_QWORD *)(v2 + 40);
    v12 = v5;
    v13 = v6;
    v7 = v6;
    v8 = *((_QWORD *)&v6 + 1) + v6;
    PCString::~PCString(&v11);
    if (v7 <= v4 && v8 > v4)
      break;
    v2 += 48;
    if (v2 == v3)
      return -1;
  }
  return v7;
}

void TXTranscriptionGenerator::didChangeString(PCString *this)
{
  __CFString *var0;
  const CMTime *v3;
  char *data;
  char *v5;
  OZChannelBase *v6;
  const PCString *v7;

  TXTextLayout::computeComposedCharacterIndices(this);
  TXTextLayout::updateStringTokenizer((TXTextLayout *)this);
  if (TXTranscriptionGenerator::hasBlockSequencing((TXTranscriptionGenerator *)this))
  {
    ((void (*)(PCString *))this->var0[34].data)(this);
  }
  else
  {
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&this[7622], &this[7623].var0->isa);
    this[7622].var0 = (__CFString *)&this[7623];
    this[7624].var0 = 0;
    this[7623].var0 = 0;
  }
  var0 = this[151].var0;
  if (var0 != (__CFString *)&this[150])
  {
    v3 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      data = var0->data;
      if (data)
      {
        if (v5)
        {
          v6 = (OZChannelBase *)v5;
          if (OZChannel::getValueAsInt((OZChannel *)(v5 + 29056), v3, 0.0) == 1)
          {
            if ((*((unsigned int (**)(void ***, uint64_t, uint64_t))v6->var2 + 3))(&v6->var2, 1, 1))
              OZChannelBase::setRangeName(v6, v7);
          }
        }
      }
      var0 = (__CFString *)var0->info;
    }
    while (var0 != (__CFString *)&this[150]);
  }
}

uint64_t TXTranscriptionGenerator::getNumWords(TXTranscriptionGenerator *this)
{
  char *StringPtr;
  unsigned int v3;

  StringPtr = TXChannelString::getStringPtr((TXTranscriptionGenerator *)((char *)this + 19048));
  v3 = PCString::size((PCString *)StringPtr);
  return (*(unsigned int (**)(TXTranscriptionGenerator *, _QWORD))(*(_QWORD *)this + 720))(this, v3 - 1)
       + 1;
}

uint64_t TXTranscriptionGenerator::getWordIndex(TXTranscriptionGenerator *this, signed int a2)
{
  OZScene **v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *i;
  signed int v8;
  TXChannelString *v9;
  UniChar *v10;
  char *StringPtr;
  __CFString *v12;
  __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __CFString *v17;
  char *v18;
  UniChar CharacterAtIndex;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  UniChar v23;
  BOOL IsNewline;
  char v25;
  char *v26;
  UniChar v27;
  TXTranscriptionGenerator *v29;
  UniChar *v30;
  int v31;
  _BYTE v32[15];
  PCString v33;

  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v32, v4);
  v5 = (uint64_t **)((char *)this + 60984);
  if (TXTranscriptionGenerator::hasBlockSequencing(this) && !*((_QWORD *)this + 7624))
    (*(void (**)(TXTranscriptionGenerator *))(*(_QWORD *)this + 1104))(this);
  v6 = (uint64_t **)((char *)this + 60976);
  for (i = *v5; i; i = (uint64_t *)*i)
  {
    v8 = *((_DWORD *)i + 7);
    if (v8 <= a2)
    {
      if (v8 >= a2)
      {
        v31 = a2;
        v33.var0 = (__CFString *)&v31;
        v15 = *((unsigned int *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 7622, &v31, (uint64_t)&std::piecewise_construct, (unsigned int **)&v33)+ 8);
        goto LABEL_36;
      }
      ++i;
    }
  }
  v9 = (TXTranscriptionGenerator *)((char *)this + 19048);
  TXChannelString::getString((PCString *)this + 2381, &v33);
  v10 = PCString::createUniStr(&v33);
  PCString::~PCString(&v33);
  StringPtr = TXChannelString::getStringPtr((TXTranscriptionGenerator *)((char *)this + 19048));
  v12 = PCString::size((PCString *)StringPtr);
  v15 = 0;
  if ((_DWORD)v12 && v10)
  {
    v29 = this;
    v30 = v10;
    v13 = (__CFString *)*((_QWORD *)this + 7624);
    if (v13)
    {
      v31 = (_DWORD)v13 - 1;
      v33.var0 = (__CFString *)&v31;
      v14 = (*((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 7622, &v31, (uint64_t)&std::piecewise_construct, (unsigned int **)&v33)+ 8)+ 1);
    }
    else
    {
      v14 = 0;
    }
    do
    {
      v15 = v14;
      if (v13 >= v12)
        break;
      v16 = v14 - 1;
      v17 = v13;
      while (1)
      {
        v18 = TXChannelString::getStringPtr(v9);
        CharacterAtIndex = CFStringGetCharacterAtIndex(*(CFStringRef *)v18, (int)v17);
        if (!TXCharacterSetIsWhitespaceOrNewline(CharacterAtIndex))
          break;
        v31 = (int)v17;
        v33.var0 = (__CFString *)&v31;
        *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v6, &v31, (uint64_t)&std::piecewise_construct, (unsigned int **)&v33)+ 8) = v16;
        v17 = (__CFString *)((_DWORD)v17 + 1);
        if ((_DWORD)v12 == (_DWORD)v17)
          goto LABEL_35;
      }
      v20 = (*(uint64_t (**)(TXTranscriptionGenerator *, __CFString *, uint64_t))(*(_QWORD *)v29 + 1112))(v29, v17, 1);
      if (v20 == -1)
        break;
      v13 = (__CFString *)(v20 + v21);
      if ((_DWORD)v20 + (_DWORD)v21)
      {
        v22 = TXChannelString::getStringPtr(v9);
        v23 = CFStringGetCharacterAtIndex(*(CFStringRef *)v22, (int)v13 - 1);
        IsNewline = TXCharacterSetIsNewline(v23);
        v25 = v12 <= v13 || IsNewline;
        if ((v25 & 1) == 0)
        {
LABEL_28:
          while (1)
          {
            v26 = TXChannelString::getStringPtr(v9);
            v27 = CFStringGetCharacterAtIndex(*(CFStringRef *)v26, (int)v13);
            if (!TXCharacterSetIsPunctuation(v27))
              break;
            v13 = (__CFString *)((_DWORD)v13 + 1);
            if ((_DWORD)v12 == (_DWORD)v13)
            {
              v13 = v12;
              break;
            }
          }
        }
      }
      else if (v12 > v13)
      {
        goto LABEL_28;
      }
      while (v17 < v13)
      {
        v31 = (int)v17;
        v33.var0 = (__CFString *)&v31;
        *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v6, &v31, (uint64_t)&std::piecewise_construct, (unsigned int **)&v33)+ 8) = v15;
        LODWORD(v17) = (_DWORD)v17 + 1;
      }
      v14 = (v15 + 1);
    }
    while (v13 <= a2);
LABEL_35:
    MEMORY[0x1B5E2914C](v30, 0x1000C80BDFB0063);
  }
LABEL_36:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v32);
  return v15;
}

void sub_1B29492A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, PCString a14)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a12);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::computeWordIndices(TXTranscriptionGenerator *this)
{
  char *v1;
  char *v2;
  OZScene **v3;
  const PCString *v4;
  const PCString *v5;
  uint64_t v6;
  __CFString *var0;
  __CFString *v8;
  PCString *v9;
  __CFString *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[7];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 (*v23)(__n128 *, __n128 *);
  void (*v24)(uint64_t);
  void *v25;
  void *__p;
  _QWORD v27[2];
  _BYTE v28[15];
  PCString v29;

  v1 = (char *)this + 65440;
  v2 = (char *)this + 60976;
  v3 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v28, v3);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v2, *((_QWORD **)v2 + 1));
  *(_QWORD *)v2 = v2 + 8;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 1) = 0;
  v20 = 0;
  v21 = &v20;
  v22 = 0x4812000000;
  v23 = __Block_byref_object_copy__14;
  v24 = __Block_byref_object_dispose__14;
  v25 = &unk_1B3948866;
  __p = 0;
  v27[0] = 0;
  v27[1] = 0;
  v4 = *(const PCString **)v1;
  v5 = (const PCString *)*((_QWORD *)v1 + 1);
  if (*(const PCString **)v1 == v5)
  {
    v13 = 0;
    v12 = (uint64_t **)v27;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      var0 = v4[3].var0;
      v8 = v4[4].var0;
      PCString::PCString(&v29, v4);
      v10 = (__CFString *)PCString::ns_str(v9);
      PCString::~PCString(&v29);
      v11 = -[__CFString length](v10, "length");
      v19[0] = v6;
      v19[1] = 3221225472;
      v19[2] = ___ZN24TXTranscriptionGenerator18computeWordIndicesEv_block_invoke;
      v19[3] = &unk_1E65028A8;
      v19[5] = var0;
      v19[6] = v8;
      v19[4] = &v20;
      -[__CFString enumerateSubstringsInRange:options:usingBlock:](v10, "enumerateSubstringsInRange:options:usingBlock:", 0, v11, 3, v19);
      v4 += 6;
    }
    while (v4 != v5);
    v12 = (uint64_t **)(v21 + 7);
    v13 = (uint64_t *)v21[6];
  }
  v14 = *v12;
  if (v13 == *v12)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = *v13;
      v17 = v13[1];
      if (*v13 < (unint64_t)(v17 + *v13))
      {
        do
        {
          v18 = v16;
          v29.var0 = (__CFString *)&v18;
          *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v2, &v18, (uint64_t)&std::piecewise_construct, (unsigned int **)&v29)+ 8) = v15;
          LODWORD(v16) = v16 + 1;
          --v17;
        }
        while (v17);
      }
      ++v15;
      v13 += 2;
    }
    while (v13 != v14);
  }
  *((_DWORD *)v2 + 709) = v15;
  _Block_object_dispose(&v20, 8);
  if (__p)
  {
    v27[0] = __p;
    operator delete(__p);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v28);
}

void sub_1B29494F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  PCString::~PCString((PCString *)(v25 - 112));
  _Block_object_dispose(&a18, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v25 - 128));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__14(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN24TXTranscriptionGenerator18computeWordIndicesEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;

  v7 = *(_QWORD *)(a1 + 40) + a5;
  v8 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v9 = (char *)v8[7];
  v10 = v8[8];
  if ((unint64_t)v9 >= v10)
  {
    v12 = (char *)v8[6];
    v13 = (v9 - v12) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v15 = v10 - (_QWORD)v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(v8 + 8), v16);
      v12 = (char *)v8[6];
      v9 = (char *)v8[7];
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[16 * v13];
    v19 = &v17[16 * v16];
    *(_QWORD *)v18 = v7;
    *((_QWORD *)v18 + 1) = a6;
    v11 = v18 + 16;
    if (v9 != v12)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v9 - 1);
        v18 -= 16;
        v9 -= 16;
      }
      while (v9 != v12);
      v12 = (char *)v8[6];
    }
    v8[6] = v18;
    v8[7] = v11;
    v8[8] = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_QWORD *)v9 = v7;
    *((_QWORD *)v9 + 1) = a6;
    v11 = v9 + 16;
  }
  v8[7] = v11;
}

unint64_t TXTranscriptionGenerator::getWordRange(TXTranscriptionGenerator *this, unsigned int a2, int a3)
{
  OZScene **v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _BYTE v12[8];

  v6 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v12, v6);
  v7 = TXTGGetRangeOfWord(this, a2);
  v9 = v7;
  if ((a3 & 1) != 0 || v7 != a2)
  {
    if (a3)
    {
      v10 = v7 + v8;
      if (v7 + v8 == a2
        && (*(unsigned int (**)(TXTranscriptionGenerator *))(*(_QWORD *)this + 216))(this) > a2)
      {
        goto LABEL_8;
      }
    }
  }
  else if (a2)
  {
    v10 = v7 + v8;
LABEL_8:
    v9 = TXTGGetRangeOfWord(this, v10);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v12);
  return v9;
}

void sub_1B2949740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

CFIndex TXTranscriptionGenerator::suggestLineBreak(PCString *this, CTTypesetterRef typesetter, CFIndex startIndex, uint64_t a4, double a5)
{
  CFIndex v8;
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v16;
  int v17;
  __CFString *v18;
  uint64_t v19;
  PCString v21;
  PCString v22;

  v8 = CTTypesetterSuggestLineBreak(typesetter, startIndex, a5);
  if (!TXTranscriptionGenerator::hasBlockSequencing((TXTranscriptionGenerator *)this))
  {
    v9 = a4 + startIndex;
    v10 = (v8 + a4 + startIndex);
    v11 = ((uint64_t (*)(PCString *, uint64_t, uint64_t))this->var0[34].length)(this, v10, 1);
    v13 = v11;
    if (v11 != -1 && v10 > v11 && v10 < (int)v11 + v12)
    {
      v16 = v11 - v9;
      if (v16 >= 1)
      {
        TXChannelString::getString(this + 2381, &v21);
        v17 = ((uint64_t (*)(PCString *))this->var0[6].length)(this);
        PCString::substr(&v21, v13, v17 - v13, (CFStringRef *)&v22.var0);
        v18 = (__CFString *)PCString::ns_str(&v22);
        PCString::~PCString(&v22);
        PCString::~PCString(&v21);
        v19 = -[__CFString rangeOfString:](v18, "rangeOfString:", -[__CFString stringByTrimmingCharactersInSet:](v18, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet")));
        if (v19 != 0x7FFFFFFFFFFFFFFFLL)
          return v19 + v16;
      }
    }
  }
  return v8;
}

void sub_1B2949884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  PCString::~PCString((PCString *)&a9);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::deactivateWordSegment(TXTranscriptionGenerator *this, int a2, const CMTime *a3)
{
  char *v4;
  OZScene **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  _BYTE v11[8];

  v4 = (char *)this + 65416;
  v5 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v11, v5);
  v6 = *((_QWORD *)v4 + 3);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v4 + 4) - v6) >> 4) > a2)
  {
    v7 = *(int *)(v6 + 48 * a2 + 44);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v4 + 1) - *(_QWORD *)v4) >> 4) > v7)
    {
      v8 = *(_QWORD *)v4 + 48 * (int)v7;
      v10 = *(unsigned __int8 *)(v8 + 40);
      v9 = (_BYTE *)(v8 + 40);
      if (v10)
      {
        *v9 = 0;
        v4[257] = 1;
      }
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v11);
}

void TXTranscriptionGenerator::deactivateLineSegment(TXTranscriptionGenerator *this, int a2, CMTime *a3)
{
  OZScene **v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  _BYTE v11[8];

  v6 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v11, v6);
  TXTranscriptionGenerator::getActiveTranscriptionByLine(this, a3);
  v7 = *((_QWORD *)this + 8186);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8187) - v7) >> 4) > a2)
  {
    v8 = v7 + 48 * a2;
    v10 = *(unsigned __int8 *)(v8 + 40);
    v9 = (_BYTE *)(v8 + 40);
    if (v10)
    {
      *v9 = 0;
      ++*((_DWORD *)this + 15952);
      *((_BYTE *)this + 65673) = 1;
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v11);
}

void sub_1B2949A04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::deactivateBlock(TXTranscriptionGenerator *this, unsigned int a2)
{
  char *v4;
  OZScene **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  _BYTE v11[8];

  v4 = (char *)this + 65512;
  v5 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v11, v5);
  v6 = *((_QWORD *)v4 + 3);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v4 + 4) - v6) >> 4) > a2)
  {
    v7 = *(int *)(v6 + 48 * a2 + 44);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v4 + 1) - *(_QWORD *)v4) >> 4) > v7)
    {
      v8 = *(_QWORD *)v4 + 48 * (int)v7;
      v10 = *(unsigned __int8 *)(v8 + 40);
      v9 = (_BYTE *)(v8 + 40);
      if (v10)
      {
        *v9 = 0;
        *((_DWORD *)this + 15952) += TXTextLayout::getNumLinesInParagraphBounds(this);
        v4[161] = 1;
      }
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v11);
}

void sub_1B2949AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::scaleToBothMargins(TXTranscriptionGenerator *this, CMTime *a2)
{
  int v4;
  double *v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  _BOOL4 v16;
  double v17;
  int v18;
  int v19;

  TXTextLayout::getVisibleCharacterRange(this, a2, (uint64_t)&v18);
  v4 = v19;
  if (v19)
  {
    v5 = (double *)((char *)this + 65680);
    if (v18 != *((_DWORD *)this + 16428) || v19 != *((_DWORD *)this + 16429))
    {
      if ((int *)((char *)this + 65712) != &v18)
      {
        *((_DWORD *)this + 16428) = v18;
        *((_DWORD *)this + 16429) = v4;
      }
      if (TXTextLayout::isVerticalLayout(this))
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E0CA2E68], 0.0);
        v7 = v6;
        v8 = 24728;
      }
      else
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E0CA2E68], 0.0);
        v7 = v9;
        v8 = 24272;
      }
      v10 = 0.0;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + v8), MEMORY[0x1E0CA2E68], 0.0);
      v12 = v7 - v11;
      v13 = *v5;
      *v5 = 1.0;
      v14 = 100;
      v15 = 1.0;
      do
      {
        v16 = TXTranscriptionGenerator::stringInRangeFitsInParagraphWidth((PCString *)this, &v18, a2, v12);
        v17 = *v5;
        if (v16)
        {
          if (v17 == 1.0)
          {
            if (v13 != 1.0)
            {
              TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
              TXTextLayout::doLayoutForParagraphs(this, v12, a2);
            }
            return;
          }
          if (v15 - v10 < 0.001)
            return;
        }
        else
        {
          v15 = *v5;
          v17 = v10;
        }
        *v5 = (v15 + v17) * 0.5;
        TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
        TXTextLayout::doLayoutForParagraphs(this, v12, a2);
        v10 = v17;
        --v14;
      }
      while (v14);
    }
  }
}

BOOL TXTranscriptionGenerator::stringInRangeFitsInParagraphWidth(PCString *a1, int *a2, CMTime *a3, double a4)
{
  PCString *v8;
  OZScene **v9;
  CFIndex v10;
  int v11;
  __CFString *isa;
  std::__shared_weak_count *info;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  TXTextStyle *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  PCString *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  float Size;
  __CFAttributedString *Mutable;
  __CFString *v32;
  __CFString *v33;
  CTFontRef v34;
  CFNumberRef v35;
  const __CTTypesetter *v36;
  CFIndex v37;
  _BOOL8 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int valuePtr;
  CMTime v50;
  PCString *v51;
  std::__shared_weak_count *v52;
  TXTextStyle *v53;
  std::__shared_weak_count *v54;
  PCString v55;
  std::__shared_weak_count *v56;
  PCString v57;
  char v58[8];
  CFRange v59;
  CFRange v60;
  CFRange v61;

  v8 = a1 + 7353;
  v9 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v58, v9);
  if (v8->var0 == v8[1].var0)
  {
    v38 = 1;
    goto LABEL_39;
  }
  v11 = *a2;
  v10 = a2[1];
  TXChannelString::getString(a1 + 2381, &v55);
  PCString::substr(&v55, v11, v10, (CFStringRef *)&v57.var0);
  PCString::~PCString(&v55);
  isa = (__CFString *)v8->var0->isa;
  info = (std::__shared_weak_count *)v8->var0->info;
  v55.var0 = isa;
  v56 = info;
  if (info)
  {
    p_shared_owners = (unint64_t *)&info->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = isa[8].info;
  v17 = *(TXTextStyle **)(v16 + 8);
  v18 = *(std::__shared_weak_count **)(v16 + 16);
  v53 = v17;
  v54 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (const void *)*((_QWORD *)v17 + 65);
  v22 = (std::__shared_weak_count *)*((_QWORD *)v17 + 66);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (v21
  {
    v51 = v25;
    v52 = v22;
    if (v22)
    {
      v26 = (unint64_t *)&v22->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
LABEL_18:
      v28 = (unint64_t *)&v22->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  else
  {
    v51 = 0;
    v52 = 0;
    if (v22)
      goto LABEL_18;
  }
  v50 = *a3;
  Size = TXTextStyle::getSize((OZChannel *)v53, &v50, 0.0);
  Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFAttributedStringBeginEditing(Mutable);
  v32 = PCString::cf_str(&v57);
  v59.location = 0;
  v59.length = 0;
  CFAttributedStringReplaceString(Mutable, v59, v32);
  v33 = PCString::cf_str(v51 + 2);
  v34 = CTFontCreateWithName(v33, Size, 0);
  v60.location = 0;
  v60.length = v10;
  CFAttributedStringSetAttribute(Mutable, v60, (CFStringRef)*MEMORY[0x1E0CA8188], v34);
  valuePtr = 0;
  v35 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v61.length = CFAttributedStringGetLength(Mutable);
  v61.location = 0;
  CFAttributedStringSetAttribute(Mutable, v61, (CFStringRef)*MEMORY[0x1E0CA8598], v35);
  CFRelease(v35);
  CFAttributedStringEndEditing(Mutable);
  v36 = CTTypesetterCreateWithAttributedString(Mutable);
  v37 = CTTypesetterSuggestLineBreak(v36, 0, a4);
  CFRelease(v34);
  CFRelease(v36);
  CFRelease(Mutable);
  v38 = v37 == v10;
  v39 = v52;
  if (v52)
  {
    v40 = (unint64_t *)&v52->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v54;
  if (v54)
  {
    v43 = (unint64_t *)&v54->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v56;
  if (v56)
  {
    v46 = (unint64_t *)&v56->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  PCString::~PCString(&v57);
LABEL_39:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v58);
  return v38;
}

void sub_1B294A01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  PCString::~PCString((PCString *)(v7 - 80));
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v7 - 72));
  _Unwind_Resume(a1);
}

double TXTranscriptionGenerator::getBothMarginScale(TXTranscriptionGenerator *this, const CMTime *a2)
{
  return *((double *)this + 8210);
}

uint64_t TXTranscriptionGenerator::getAlignmentOffset(TXTranscriptionGenerator *this, double *a2, double *a3, const OZRenderState *a4)
{
  const CMTime *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;

  v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E0CA2E68], 0.0);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), v7, 0.0);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), v7, 0.0);
  *(_QWORD *)a2 = v12;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 21368), v7, 0.0) != 2)
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 21368), MEMORY[0x1E0CA2E68], 0.0))
      return 0;
    v9 = *((double *)this + 8220);
    if (v9 > -0.0000001 && v9 < 0.0000001)
    {
      v9 = v11 - **(double **)(**((_QWORD **)this + 2378) + 888);
      *((double *)this + 8220) = v9;
    }
  }
  *a3 = v9;
  return 0;
}

BOOL TXTranscriptionGenerator::isUsingSubstituteFont(PCString *this)
{
  __CFAttributedString *Mutable;
  __CFString *v3;
  int ValueAsInt;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  const __CTLine *v10;
  const __CFArray *GlyphRuns;
  CFIndex Count;
  CFIndex v13;
  const __CFString *v14;
  BOOL v15;
  const __CTRun *ValueAtIndex;
  const __CFDictionary *Attributes;
  CFIndex location;
  const __CTFont *Attribute;
  const __CTFont *Value;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  _BOOL4 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const __CTLine *cf;
  TXTextStyle *v30;
  std::__shared_weak_count *v31;
  CFRange v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  CFRange v35;

  Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFAttributedStringBeginEditing(Mutable);
  v3 = PCString::cf_str(this + 8208);
  v35.location = 0;
  v35.length = 0;
  CFAttributedStringReplaceString(Mutable, v35, v3);
  TXTextLayout::getStyleAtCharOffset((uint64_t)this, 0, &v33);
  v32.location = 0;
  v32.length = PCString::size(this + 8208);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v33 + 5504), MEMORY[0x1E0CA2E68], 0.0);
  v30 = (TXTextStyle *)v33;
  v31 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  TXTextLayout::applyFontToAttributedString((TXTextLayout *)this, Mutable, &v30, &v32, MEMORY[0x1E0CA2E68], ValueAsInt != 0);
  v7 = v31;
  if (v31)
  {
    v8 = (unint64_t *)&v31->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  CFAttributedStringEndEditing(Mutable);
  v10 = CTLineCreateWithAttributedString(Mutable);
  GlyphRuns = CTLineGetGlyphRuns(v10);
  Count = CFArrayGetCount(GlyphRuns);
  cf = v10;
  if (Count < 1)
  {
    v15 = 0;
  }
  else
  {
    v13 = 0;
    v14 = (const __CFString *)*MEMORY[0x1E0CA8188];
    v15 = 1;
    do
    {
      ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v13);
      Attributes = CTRunGetAttributes(ValueAtIndex);
      location = CTRunGetStringRange(ValueAtIndex).location;
      Attribute = (const __CTFont *)CFAttributedStringGetAttribute(Mutable, location, v14, 0);
      Value = (const __CTFont *)CFDictionaryGetValue(Attributes, v14);
      v21 = CTFontCopyPostScriptName(Attribute);
      v22 = CTFontCopyPostScriptName(Value);
      v23 = v22;
      v24 = 0;
      if (v21 && v22)
      {
        if (CFStringCompare(v21, v22, 0))
          v24 = !OZIsFontAppleColorEmoji(Value);
        else
          v24 = 0;
      }
      CFRelease(v21);
      CFRelease(v23);
      if (v24)
        break;
      v15 = ++v13 < Count;
    }
    while (Count != v13);
  }
  CFRelease(cf);
  CFRelease(Mutable);
  v25 = v34;
  if (v34)
  {
    v26 = (unint64_t *)&v34->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v15;
}

void sub_1B294A424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL `non-virtual thunk to'TXTranscriptionGenerator::isUsingSubstituteFont(PCString *this)
{
  return TXTranscriptionGenerator::isUsingSubstituteFont(this - 8058);
}

void TXTranscriptionGenerator::setLocaleIdentifier(TXTranscriptionGenerator *this, const __CFString *a2)
{
  CFLocaleRef v3;

  *((_QWORD *)this + 8221) = a2;
  v3 = CFLocaleCreate(0, a2);
  TXTextLayout::setLocale(this, v3);
  CFRelease(v3);
}

void `non-virtual thunk to'TXTranscriptionGenerator::setLocaleIdentifier(TXTranscriptionGenerator *this, const __CFString *a2)
{
  TXTranscriptionGenerator::setLocaleIdentifier((TXTranscriptionGenerator *)((char *)this - 64464), a2);
}

uint64_t TXTranscriptionGenerator::getLineCount(TXTranscriptionGenerator *this)
{
  void **TranscriptionByLine;

  TranscriptionByLine = TXTranscriptionGenerator::getTranscriptionByLine(this);
  return -1431655765
       * ((unint64_t)((_BYTE *)TranscriptionByLine[1] - (_BYTE *)*TranscriptionByLine) >> 4);
}

uint64_t `non-virtual thunk to'TXTranscriptionGenerator::getLineCount(TXTranscriptionGenerator *this)
{
  void **TranscriptionByLine;

  TranscriptionByLine = TXTranscriptionGenerator::getTranscriptionByLine((TXTranscriptionGenerator *)((char *)this - 64464));
  return -1431655765
       * ((unint64_t)((_BYTE *)TranscriptionByLine[1] - (_BYTE *)*TranscriptionByLine) >> 4);
}

uint64_t TXTranscriptionGenerator::setDynamicLineSpacingForDiacritics(uint64_t this, double a2)
{
  if (*(double *)(this + 65784) < a2)
  {
    *(double *)(this + 65784) = a2;
    *(double *)(this + 64400) = a2;
  }
  return this;
}

CGColorSpace **TXTranscriptionGenerator::getSequencedColor@<X0>(TXTranscriptionGenerator *this@<X0>, const CMTime *a2@<X1>, PCColor *a3@<X2>, double a4@<D0>, uint64_t a5@<X8>)
{
  __int128 v10;
  CGColorSpace *obj;
  CGColorSpace **v12;
  CGColorSpace **result;
  int v14;
  _DWORD *v15;
  __int128 v16;
  CGColorSpace **v17;
  CGColorSpace **v18;
  __int128 v19;
  CMTime v20;
  CMTime v21;
  __int128 v22;
  CMTimeEpoch epoch;
  CMTime time2;
  CMTime time1;

  v10 = *(_OWORD *)&a3->var0.var1[1];
  *(_OWORD *)a5 = *(_OWORD *)&a3->var0.var0;
  *(_OWORD *)(a5 + 16) = v10;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)&a3->var0.var1[3];
  obj = a3->var1._obj;
  *(_QWORD *)(a5 + 48) = obj;
  v12 = (CGColorSpace **)(a5 + 48);
  if (obj)
    PCCFRefTraits<CGColorSpace *>::retain(obj);
  result = (CGColorSpace **)OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 28720), 0, 1);
  if ((_DWORD)result)
  {
    v14 = (*(uint64_t (**)(TXTranscriptionGenerator *, _QWORD))(*(_QWORD *)this + 720))(this, a4);
    v22 = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
    time1 = *a2;
    time2 = *(CMTime *)((char *)this + 65800);
    v15 = (_DWORD *)((char *)this + 65824);
    if (CMTimeCompare(&time1, &time2) || v14 != *v15)
    {
      if (!*((_BYTE *)this + 65888))
      {
        v21 = *a2;
        OZChannelColorNoAlpha::setColor((TXTranscriptionGenerator *)((char *)this + 28720), &v21, a3, 1);
        *((_BYTE *)this + 65888) = 1;
      }
      v20 = *a2;
      OZChannelColorNoAlpha::getColor((TXTranscriptionGenerator *)((char *)this + 28720), &v20, (PCColor *)a5, a4);
      *(_OWORD *)((char *)this + 65800) = v22;
      *((_QWORD *)this + 8227) = epoch;
      *v15 = v14;
      v19 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)((char *)this + 65832) = *(_OWORD *)a5;
      *(_OWORD *)((char *)this + 65848) = v19;
      v18 = (CGColorSpace **)((char *)this + 65880);
      v17 = v12;
      *(_OWORD *)((char *)this + 65864) = *(_OWORD *)(a5 + 32);
    }
    else
    {
      v16 = *(_OWORD *)((char *)this + 65848);
      *(_OWORD *)a5 = *(_OWORD *)((char *)this + 65832);
      *(_OWORD *)(a5 + 16) = v16;
      *(_OWORD *)(a5 + 32) = *(_OWORD *)((char *)this + 65864);
      v17 = (CGColorSpace **)((char *)this + 65880);
      v18 = v12;
    }
    return PCCFRef<CGColorSpace *>::operator=(v18, v17);
  }
  return result;
}

void sub_1B294A71C(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

double TXTranscriptionGenerator::getSequencedOpacity(TXTranscriptionGenerator *this, OZChannel *a2, OZChannel *a3, const CMTime *a4, double a5, double a6)
{
  int v12;
  unsigned int var3;
  double *v14;
  double v15;
  double v16;
  double v17;
  CMTime v19;
  CMTime time2;
  CMTime time1;

  v12 = (*(uint64_t (**)(TXTranscriptionGenerator *, _QWORD))(*(_QWORD *)this + 720))(this, a6);
  v19 = *a4;
  var3 = a3->var3;
  if (var3 == 1009)
  {
    v14 = (double *)((char *)this + 65896);
  }
  else
  {
    if (var3 != 1022)
      return a5;
    v14 = (double *)((char *)this + 65944);
  }
  time1 = *a4;
  time2 = *(CMTime *)v14;
  if (!CMTimeCompare(&time1, &time2) && v12 == *((_DWORD *)v14 + 6))
    return v14[4];
  if (!*((_BYTE *)v14 + 40))
  {
    (*((void (**)(OZChannel *, const CMTime *, uint64_t, double))a3->var0 + 89))(a3, a4, 1, a5);
    *((_BYTE *)v14 + 40) = 1;
  }
  OZChannel::getValueAsDouble(a3, a4, a6);
  v16 = v15;
  OZChannel::getValueAsDouble(a2, a4, a6);
  a5 = v16 * v17;
  *(CMTime *)v14 = v19;
  *((_DWORD *)v14 + 6) = v12;
  v14[4] = a5;
  return a5;
}

uint64_t TXFileLoadingGenerator::getURL(TXFileLoadingGenerator *this)
{
  return (uint64_t)this + 64432;
}

uint64_t TXTranscriptionGenerator::setShouldDisableFadeOut(uint64_t this, char a2)
{
  *(_BYTE *)(this + 65776) = a2;
  return this;
}

uint64_t `non-virtual thunk to'TXTranscriptionGenerator::setShouldDisableFadeOut(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1312) = a2;
  return this;
}

void OZChannelUint32::OZChannelUint32(OZChannelUint32 *this, int a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *OZChannelUint32_FactoryBase;
  OZChannelUint32 *v17;
  OZChannelUint32 *OZChannelUint32Info;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelUint32_FactoryBase = (OZFactory *)getOZChannelUint32_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelUint32_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->var0 = (void **)&off_1E6551AF8;
  this->var2 = (void **)&unk_1E6551E58;
  OZChannelUint32Info = (OZChannelUint32 *)OZChannelUint32::createOZChannelUint32Info(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
    this->var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
  }
  this->var16 = var17;
  OZChannelUint32::createOZChannelUint32Impl(OZChannelUint32Info);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
    this->var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
}

void sub_1B294A9B0(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  PCString *v2;
  PCString *v4;
  void *v5;

  v1 = *a1;
  v2 = (PCString *)**a1;
  if (v2)
  {
    v4 = (PCString *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        PCString::~PCString(v4 - 6);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<TXTranscriptionSegment>::__init_with_size[abi:ne180100]<TXTranscriptionSegment*,TXTranscriptionSegment*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<CMTime,std::vector<CMTime>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TXTranscriptionSegment>,TXTranscriptionSegment*,TXTranscriptionSegment*,TXTranscriptionSegment*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B294AA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TXTranscriptionSegment>,TXTranscriptionSegment*,TXTranscriptionSegment*,TXTranscriptionSegment*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      PCString::PCString((PCString *)(a4 + v7), (const PCString *)(a2 + v7));
      v8 = *(_OWORD *)(a2 + v7 + 8);
      v9 = *(_OWORD *)(a2 + v7 + 24);
      *(_QWORD *)(v10 + 40) = *(_QWORD *)(a2 + v7 + 40);
      *(_OWORD *)(v10 + 24) = v9;
      *(_OWORD *)(v10 + 8) = v8;
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B294AB38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      PCString::~PCString((PCString *)(v4 + v2));
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  PCString *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char *v16;
  PCString *v17;
  PCString *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v20 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(v7, v9);
  else
    v10 = 0;
  v16 = v10;
  v17 = (PCString *)&v10[48 * v4];
  v18 = v17;
  v19 = &v10[48 * v9];
  PCString::PCString(v17, (const PCString *)a2);
  v11 = v17;
  v12 = *(_OWORD *)(a2 + 8);
  v13 = *(_OWORD *)(a2 + 24);
  v17[5].var0 = *(__CFString **)(a2 + 40);
  *(_OWORD *)&v11[3].var0 = v13;
  *(_OWORD *)&v11[1].var0 = v12;
  v18 += 6;
  std::vector<TXTranscriptionSegment>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<TXTranscriptionSegment>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_1B294AC6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TXTranscriptionSegment>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TXTranscriptionSegment>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TXTranscriptionSegment>,std::reverse_iterator<TXTranscriptionSegment*>,std::reverse_iterator<TXTranscriptionSegment*>,std::reverse_iterator<TXTranscriptionSegment*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TXTranscriptionSegment>,std::reverse_iterator<TXTranscriptionSegment*>,std::reverse_iterator<TXTranscriptionSegment*>,std::reverse_iterator<TXTranscriptionSegment*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      PCString::PCString((PCString *)(a7 + v11 - 48), (const PCString *)(a3 + v11 - 48));
      v13 = *(_OWORD *)(a3 + v11 - 40);
      v14 = *(_OWORD *)(a3 + v11 - 24);
      *(_QWORD *)(v12 - 8) = *(_QWORD *)(a3 + v11 - 8);
      *(_OWORD *)(v12 - 24) = v14;
      *(_OWORD *)(v12 - 40) = v13;
      v11 -= 48;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B294AD88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 48)
    PCString::~PCString((PCString *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<TXTranscriptionSegment>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    PCString::~PCString((PCString *)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

PCString *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TXTranscriptionSegment *,TXTranscriptionSegment *,TXTranscriptionSegment *,0>(PCString *a1, PCString *a2, PCString *this)
{
  PCString *v4;
  PCString *v5;
  __int128 v6;
  __int128 v7;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    PCString::set(this, v4);
    v6 = *(_OWORD *)&v4[1].var0;
    v7 = *(_OWORD *)&v4[3].var0;
    this[5].var0 = v4[5].var0;
    *(_OWORD *)&this[3].var0 = v7;
    *(_OWORD *)&this[1].var0 = v6;
    this += 6;
    v4 += 6;
  }
  while (v4 != v5);
  return v5;
}

void std::vector<TXTranscriptionSegment>::__vdeallocate(void **a1)
{
  PCString *v1;
  PCString *v3;
  void *v4;

  v1 = (PCString *)*a1;
  if (*a1)
  {
    v3 = (PCString *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        PCString::~PCString(v3 - 6);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void TXCoreTextGlyph::TXCoreTextGlyph(TXCoreTextGlyph *this, __int16 a2, __int16 a3, TXFont *a4)
{
  uint64_t v4;

  TXTextureGlyph::TXTextureGlyph(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_1E6502920;
  *(_BYTE *)(v4 + 156) = 1;
}

void TXCoreTextGlyph::~TXCoreTextGlyph(TXCoreTextGlyph *this)
{
  TXTextureGlyph::~TXTextureGlyph(this);
  JUMPOUT(0x1B5E29170);
}

__n128 TXCoreTextGlyph::getBounds(TXTextureGlyph *a1, uint64_t a2, uint64_t a3)
{
  uint64_t GlyphRep;
  __n128 result;

  GlyphRep = TXCoreTextGlyph::getGlyphRep(a1, a3);
  result = *(__n128 *)(GlyphRep + 16);
  *(_OWORD *)a2 = *(_OWORD *)GlyphRep;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t TXCoreTextGlyph::getGlyphRep(TXTextureGlyph *a1, uint64_t a2)
{
  uint64_t CachedMetrics;
  uint64_t TextureGlyphRep;
  uint64_t v6;
  BOOL v7;
  _DWORD v9[4];

  TXCoreTextGlyph::getCacheHashKey((uint64_t)a1);
  CachedMetrics = TXTextureGlyph::getCachedMetrics(a1, (const PCHash128 *)v9);
  if (CachedMetrics)
  {
    TextureGlyphRep = CachedMetrics;
    v6 = *(_QWORD *)(a2 + 24);
    if (v6)
      v7 = *(_BYTE *)(a2 + 38) == 0;
    else
      v7 = 1;
    if (!v7)
      PCMatrix33Tmpl<double>::operator=(v6, TextureGlyphRep + 88);
  }
  else
  {
    TextureGlyphRep = TXCoreTextGlyph::makeTextureGlyphRep((uint64_t)a1, a2);
    TXTextureGlyph::cacheMetrics((uint64_t)a1, v9, TextureGlyphRep);
  }
  return TextureGlyphRep;
}

double TXCoreTextGlyph::getPivot(TXTextureGlyph *a1, _QWORD *a2, double *a3, uint64_t a4)
{
  uint64_t GlyphRep;
  double result;

  GlyphRep = TXCoreTextGlyph::getGlyphRep(a1, a4);
  *a2 = *(_QWORD *)(GlyphRep + 32);
  result = *(double *)(GlyphRep + 40);
  *a3 = result;
  return result;
}

double TXCoreTextGlyph::getAdvanceWidth(TXTextureGlyph *a1, uint64_t a2)
{
  return *(double *)(TXCoreTextGlyph::getGlyphRep(a1, a2) + 16);
}

uint64_t TXCoreTextGlyph::getTransform(TXTextureGlyph *a1, uint64_t a2)
{
  return TXCoreTextGlyph::getGlyphRep(a1, a2) + 88;
}

void TXCoreTextGlyph::getCacheHashKey(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  int v7;
  double *v8;
  double v9;
  int8x8_t v10[521];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v10[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v10);
  PCHashWriteStream::reset((uint64_t)v10);
  PCHashWriteStream::writeValue(v10, *(_WORD *)(v4 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 16))(*(_QWORD *)(v4 + 16));
  PCHashWriteStream::writeValue(v10, v7);
  PCHashWriteStream::writeValue(v10, *(_DWORD *)(v3 + 32));
  PCHashWriteStream::writeValue(v10, *(double *)v3);
  PCHashWriteStream::writeValue(v10, *(_BYTE *)(v3 + 8));
  PCHashWriteStream::writeValue(v10, *(double *)(v3 + 16));
  PCHashWriteStream::writeValue(v10, *(_BYTE *)(v3 + 36));
  v8 = *(double **)(v3 + 24);
  if (v8)
  {
    v9 = v8[4];
    PCHashWriteStream::writeValue(v10, floor(*v8 * 64.0 + 0.0000001) * 0.015625);
    PCHashWriteStream::writeValue(v10, floor(v9 * 64.0 + 0.0000001) * 0.015625);
  }
  PCHashWriteStream::close(v10);
  *v6 = *(_OWORD *)PCHashWriteStream::getHash(v10)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v10);
}

void sub_1B294B270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void TXCoreTextGlyph::getBitmapRenderParams(uint64_t a1@<X0>, uint64_t a2@<X1>, float64x2_t *a3@<X2>, uint8x8_t *a4@<X8>)
{
  uint64_t v6;
  const PCString *v7;
  __int32 v8;
  double v14;
  double v15;
  double v16;
  double v17;
  __int16 v18;
  uint64_t v19;
  char v20;
  char v21;
  PCString v23;
  __int16 v24;
  double v25;
  float64x2_t v26[2];
  uint64_t v27;
  uint64_t v28;
  double v29[2];

  v6 = a1;
  v7 = *(const PCString **)(a1 + 16);
  v8 = ((uint64_t (*)(const PCString *))v7->var0->data)(v7);
  v28 = 0;
  v29[0] = 0.0;
  v26[0] = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v26[1] = _Q0;
  v27 = 0;
  v25 = 0.0;
  v24 = 0;
  TXGetGlyphBitmapInfo(v6, (uint64_t)v7, *(unsigned __int8 *)(a2 + 8), a3, v29, *(double **)(a2 + 24), v26, (uint64_t *)&v25, *(double *)a2, *(double *)(a2 + 16), (CGGlyph *)&v24, *(_BYTE *)(a2 + 36));
  v14 = *(double *)a2;
  LOBYTE(v6) = *(_BYTE *)(a2 + 8);
  v15 = *(double *)(a2 + 16);
  v16 = v29[0];
  v17 = v25;
  v18 = v24;
  v19 = *(_QWORD *)(a2 + 24);
  v20 = *(_BYTE *)(a2 + 37);
  v21 = CGColorSpaceUsesExtendedRange(*(CGColorSpaceRef *)(a2 + 40));
  PCString::PCString(&v23, v7 + 14);
  TXCGRenderParams::TXCGRenderParams(a4, a2, v8, v6, a3, v18, v19, v26, v14, v15, v16, v17, v20, v21, 0, &v23, v7[15].var0);
  PCString::~PCString(&v23);
}

void sub_1B294B3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

void TXCoreTextGlyph::getBitmap(OZCacheManager *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  double *v13;
  double v14;
  __CFString *var0;
  _QWORD *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unsigned __int8 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  id v49;
  __int128 v50;
  PCBitmap *v51[2];
  PCString v52[24];
  char v53;
  char v54;
  CGColorSpace *v55;
  char *v56;
  _DWORD v57[4];

  v12 = OZCacheManager::Instance(a1);
  TXCoreTextGlyph::getCacheHashKey((uint64_t)a1);
  OZCacheManager::getImageForKey((const PCHash128 *)v57, a6);
  v13 = *(double **)(a3 + 24);
  if (v13)
  {
    v14 = floor(v13[4] * 64.0 + 0.0000001) * 0.015625;
    *v13 = floor(*v13 * 64.0 + 0.0000001) * 0.015625;
    v13[4] = v14;
  }
  if (!*a6 || (a5 & 1) == 0)
  {
    v55 = 0;
    v56 = 0;
    (*(void (**)(PCString *__return_ptr, OZCacheManager *, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(v52, a1, a3, a2);
    TXDrawGlyphToBitmap((uint64_t)v52, *(CGColorSpaceRef *)(a3 + 40), (void **)&v56);
    if (!v56)
    {
LABEL_62:
      TXCGRenderParams::~TXCGRenderParams(v52);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v55);
      return;
    }
    var0 = v52[14].var0;
    v51[0] = 0;
    v51[1] = 0;
    if (v53)
    {
      if (v54)
      {
        v16 = (_QWORD *)operator new();
        PCBitmap::PCBitmap((uint64_t)v16, *(double *)(a2 + 16), *(double *)(a2 + 24), 10, (PCColorSpaceHandle *)&v55, 1);
        *v16 = &unk_1E6502990;
        std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,void>((uint64_t *)&v50, (uint64_t)v16);
        v17 = v50;
        v50 = 0uLL;
        v18 = (std::__shared_weak_count *)v51[1];
        *(_OWORD *)v51 = v17;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        if (!*((_QWORD *)&v50 + 1))
          goto LABEL_50;
        v22 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
      }
      else
      {
        v30 = (_QWORD *)operator new();
        PCBitmap::PCBitmap((uint64_t)v30, *(double *)(a2 + 16), *(double *)(a2 + 24), 5, (PCColorSpaceHandle *)&v55, 1);
        *v30 = &unk_1E6502A80;
        std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,void>((uint64_t *)&v50, (uint64_t)v30);
        v31 = v50;
        v50 = 0uLL;
        v32 = (std::__shared_weak_count *)v51[1];
        *(_OWORD *)v51 = v31;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        if (!*((_QWORD *)&v50 + 1))
          goto LABEL_50;
        v35 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
        do
          v23 = __ldaxr(v35);
        while (__stlxr(v23 - 1, v35));
      }
    }
    else if (v54)
    {
      v24 = (_QWORD *)operator new();
      PCBitmap::PCBitmap((uint64_t)v24, *(double *)(a2 + 16), *(double *)(a2 + 24), 7, (PCColorSpaceHandle *)&v55, 1);
      *v24 = &unk_1E6502B70;
      std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,void>((uint64_t *)&v50, (uint64_t)v24);
      v25 = v50;
      v50 = 0uLL;
      v26 = (std::__shared_weak_count *)v51[1];
      *(_OWORD *)v51 = v25;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
      if (!*((_QWORD *)&v50 + 1))
        goto LABEL_50;
      v29 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v23 = __ldaxr(v29);
      while (__stlxr(v23 - 1, v29));
    }
    else
    {
      v36 = (_QWORD *)operator new();
      PCBitmap::PCBitmap((uint64_t)v36, *(double *)(a2 + 16), *(double *)(a2 + 24), 1, (PCColorSpaceHandle *)&v55, 1);
      *v36 = &unk_1E6502C60;
      std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,void>((uint64_t *)&v50, (uint64_t)v36);
      v37 = v50;
      v50 = 0uLL;
      v38 = (std::__shared_weak_count *)v51[1];
      *(_OWORD *)v51 = v37;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
      if (!*((_QWORD *)&v50 + 1))
        goto LABEL_50;
      v41 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v23 = __ldaxr(v41);
      while (__stlxr(v23 - 1, v41));
    }
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
LABEL_50:
    PCBitmap::copyDataToBitmap(v51[0], v56);
    free(v56);
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](a6, (uint64_t *)v51);
    v42 = atomic_load((unsigned __int8 *)(v12 + 24));
    if ((v42 & 1) == 0)
    {
      OZCacheManager::addImage(a6, (PCHash128 *)v57, &v49, 100.0);
      ProCore_Impl::PCNSRefImpl::release(&v49);
    }
    if (a4 && !TXTextureGlyph::getCachedMetrics(a1, (const PCHash128 *)v57))
    {
      v43 = operator new();
      *(_OWORD *)(v43 + 104) = 0u;
      *(_OWORD *)(v43 + 120) = 0u;
      *(_OWORD *)(v43 + 136) = 0u;
      *(_OWORD *)(v43 + 152) = 0u;
      *(_OWORD *)(v43 + 72) = 0u;
      *(_OWORD *)(v43 + 56) = 0u;
      *(_OWORD *)(v43 + 88) = 0u;
      *(_QWORD *)(v43 + 88) = 0x3FF0000000000000;
      *(_QWORD *)(v43 + 96) = 0;
      *(_QWORD *)(v43 + 104) = 0;
      *(_QWORD *)(v43 + 112) = 0;
      *(_QWORD *)(v43 + 120) = 0x3FF0000000000000;
      *(_QWORD *)(v43 + 128) = 0;
      *(_QWORD *)(v43 + 136) = 0;
      *(_QWORD *)(v43 + 144) = 0;
      *(_QWORD *)(v43 + 152) = 0x3FF0000000000000;
      *(_QWORD *)(v43 + 32) = var0;
      *(_QWORD *)(v43 + 40) = 0;
      v44 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)v43 = *(_OWORD *)a2;
      *(_OWORD *)(v43 + 16) = v44;
      *(_QWORD *)(v43 + 48) = *(_QWORD *)a3;
      *(_DWORD *)(v43 + 160) = *(_DWORD *)(a3 + 32);
      *(_BYTE *)(v43 + 72) = *(_BYTE *)(a3 + 8);
      *(_QWORD *)(v43 + 80) = *(_QWORD *)(a3 + 16);
      v45 = *(_QWORD *)(a3 + 24);
      if (v45)
        PCMatrix33Tmpl<double>::operator=(v43 + 88, v45);
      TXTextureGlyph::cacheMetrics((uint64_t)a1, v57, v43);
    }
    v46 = (std::__shared_weak_count *)v51[1];
    if (v51[1])
    {
      v47 = (unint64_t *)((char *)v51[1] + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    goto LABEL_62;
  }
  if (a2)
  {
    if (a4)
    {
      (*(void (**)(OZCacheManager *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a3);
    }
    else
    {
      (*(void (**)(PCString *__return_ptr, OZCacheManager *, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(v52, a1, a3, a2);
      TXCGRenderParams::~TXCGRenderParams(v52);
    }
  }
}

void sub_1B294B9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E29170](v8, 0x10A1C405CA75B9BLL);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  TXCGRenderParams::~TXCGRenderParams((PCString *)va1);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v9 - 112));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v7);
  _Unwind_Resume(a1);
}

void sub_1B294BA68()
{
  JUMPOUT(0x1B294BA50);
}

void TXCoreTextGlyph::getHGBitmap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  double v8;
  double v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  void *v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  CGColorSpace *v22;
  PCString v23[24];
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;

  *a4 = 0;
  (*(void (**)(PCString *__return_ptr))(*(_QWORD *)a1 + 40))(v23);
  v8 = *(double *)(a3 + 16);
  if (v8 >= 0.0)
  {
    v9 = *(double *)(a3 + 24);
    if (v9 >= 0.0)
    {
      v10 = v8;
      v11 = v9;
      v12 = HGRectMake4f(v7, 0.0, 0.0, v10, v11);
      v14 = v13;
      v15 = v24;
      v16 = v25;
      v17 = HGObject::operator new(0x80uLL);
      v18 = v17;
      if (v16)
        v19 = 6;
      else
        v19 = 2;
      if (v16)
        v20 = 27;
      else
        v20 = 24;
      if (v15)
        v21 = v20;
      else
        v21 = v19;
      HGBitmap::HGBitmap(v17, v12, v14, v21);
      if (v18)
        *a4 = v18;
      v26 = *((_QWORD *)v18 + 8);
      v22 = 0;
      TXDrawGlyphToBitmap((uint64_t)v23, *(CGColorSpaceRef *)(a2 + 40), (void **)v18 + 10);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v22);
    }
  }
  TXCGRenderParams::~TXCGRenderParams(v23);
}

void sub_1B294BB74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  uint64_t v4;
  CGColorSpace *v5;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, CGColorSpace *);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  v4 = *v2;
  TXCGRenderParams::~TXCGRenderParams((PCString *)va1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  _Unwind_Resume(a1);
}

double TXCoreTextGlyph::getTexture@<D0>(OZCacheManager *a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, HGGPUComputeDevice **a5@<X5>, char a6@<W6>, EAGLContext *EAGLContext@<X7>, uint64_t *a8@<X8>)
{
  unsigned __int8 *v15;
  uint64_t v16;
  const PCString *v17;
  __int32 v18;
  _BOOL4 v19;
  double result;
  uint64_t v21;
  GLenum v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  GLenum v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  float64x2_t v41;
  uint64_t v42;
  void **HostApplicationDelegate;
  int v44;
  uint64_t CachedMetrics;
  uint64_t *v46;
  __int128 v47;
  PCImage *v48[2];
  _QWORD v49[2];
  CGColorSpace *v50;
  uint64_t v51;
  const PCColorSpaceHandle *v52;
  _DWORD v53[4];

  *a4 = 0;
  v15 = (unsigned __int8 *)OZCacheManager::Instance(a1);
  TXCoreTextGlyph::getCacheHashKey((uint64_t)a1);
  OZCacheManager::getTextureForKey((PGTextureCache *)v15, a5, (const PCHash128 *)v53, 0, a8);
  v16 = *a8;
  if (!*a8)
  {
    v46 = a8;
    v17 = (const PCString *)*((_QWORD *)a1 + 2);
    v18 = ((uint64_t (*)(const PCString *))v17->var0->data)(v17);
    v52 = 0;
    v51 = 0;
    v19 = CGColorSpaceUsesExtendedRange(*(CGColorSpaceRef *)(a3 + 40));
    TXDrawGlyphToBitmap((uint64_t)a1, v17, v18, *(unsigned __int8 *)(a3 + 8), *(CGColorSpace **)(a3 + 40), v19, (void **)&v52, a2, *(double *)a3, *(double *)(a3 + 16), (double *)&v51, *(double **)(a3 + 24), a6, 1);
    if (!v52)
      return result;
    PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)&v50, *(CGColorSpaceRef *)(a3 + 40));
    if (!EAGLContext)
    {
      v21 = PGGetPerThreadContext();
      ProGL::Private::ProgramHelper::getProgramContext(v21, v49);
      EAGLContext = (EAGLContext *)ProGL::ContextHandle::getEAGLContext((ProGL::ContextHandle *)v49);
      ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v49);
    }
    ProGL::CurrentContextSentry::CurrentContextSentry((ProGL::CurrentContextSentry *)v49, EAGLContext);
    v48[0] = 0;
    v48[1] = 0;
    if ((a6 & 1) != 0)
    {
      if (v19)
        v22 = 36193;
      else
        v22 = 5121;
      PGMake2DTexture(&v50, v52, (ProGL::GL *)(uint64_t)a2[1].f64[0], (uint64_t)a2[1].f64[1], 0, 0x1908u, v22, (uint64_t *)&v47);
      v23 = v47;
      v47 = 0uLL;
      v24 = (std::__shared_weak_count *)v48[1];
      *(_OWORD *)v48 = v23;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      if (!*((_QWORD *)&v47 + 1))
        goto LABEL_33;
      v28 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
    }
    else
    {
      glPixelStorei(0xCF5u, 1);
      if (v19)
        v30 = 36193;
      else
        v30 = 5121;
      PGMake2DTexture(&v50, v52, (ProGL::GL *)(uint64_t)a2[1].f64[0], (uint64_t)a2[1].f64[1], 0, 0x1906u, v30, (uint64_t *)&v47);
      v31 = v47;
      v47 = 0uLL;
      v32 = (std::__shared_weak_count *)v48[1];
      *(_OWORD *)v48 = v31;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      if (!*((_QWORD *)&v47 + 1))
        goto LABEL_33;
      v35 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v29 = __ldaxr(v35);
      while (__stlxr(v29 - 1, v35));
    }
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
LABEL_33:
    PCImage::setIsPremultiplied((uint64_t)v48[0], 0);
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v46, (uint64_t *)v48);
    v36 = (std::__shared_weak_count *)v48[1];
    if (v48[1])
    {
      v37 = (unint64_t *)((char *)v48[1] + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    ProGL::CurrentContextSentry::~CurrentContextSentry((ProGL::CurrentContextSentry *)v49);
    free(v52);
    v39 = atomic_load(v15 + 24);
    if ((v39 & 1) == 0)
      OZCacheManager::addTexture((PGTextureCache *)v15, v46, a5, (PCHash128 *)v53);
    v16 = 0;
    if (!TXTextureGlyph::getCachedMetrics(a1, (const PCHash128 *)v53))
    {
      v40 = operator new();
      *(_OWORD *)(v40 + 104) = 0u;
      *(_OWORD *)(v40 + 120) = 0u;
      *(_OWORD *)(v40 + 136) = 0u;
      *(_OWORD *)(v40 + 152) = 0u;
      *(_OWORD *)(v40 + 72) = 0u;
      *(_OWORD *)(v40 + 56) = 0u;
      *(_OWORD *)(v40 + 88) = 0u;
      *(_QWORD *)(v40 + 88) = 0x3FF0000000000000;
      *(_QWORD *)(v40 + 96) = 0;
      *(_QWORD *)(v40 + 104) = 0;
      *(_QWORD *)(v40 + 112) = 0;
      *(_QWORD *)(v40 + 120) = 0x3FF0000000000000;
      *(_QWORD *)(v40 + 128) = 0;
      *(_QWORD *)(v40 + 136) = 0;
      *(_QWORD *)(v40 + 144) = 0;
      *(_QWORD *)(v40 + 152) = 0x3FF0000000000000;
      *(_QWORD *)(v40 + 32) = v51;
      *(_QWORD *)(v40 + 40) = 0;
      v41 = a2[1];
      *(float64x2_t *)v40 = *a2;
      *(float64x2_t *)(v40 + 16) = v41;
      *(_QWORD *)(v40 + 48) = *(_QWORD *)a3;
      *(_DWORD *)(v40 + 160) = *(_DWORD *)(a3 + 32);
      *(_BYTE *)(v40 + 72) = *(_BYTE *)(a3 + 8);
      *(_QWORD *)(v40 + 80) = *(_QWORD *)(a3 + 16);
      v42 = *(_QWORD *)(a3 + 24);
      if (v42)
        PCMatrix33Tmpl<double>::operator=(v40 + 88, v42);
      TXTextureGlyph::cacheMetrics((uint64_t)a1, v53, v40);
    }
    PCCFRef<CGColorSpace *>::~PCCFRef(&v50);
    goto LABEL_45;
  }
  if (a2)
    (*(void (**)(OZCacheManager *, float64x2_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a3);
LABEL_45:
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  v44 = OZHostApplicationDelegateHandler::wantsToUseCachedTextureForText(HostApplicationDelegate) ^ 1;
  if (!v16)
    LOBYTE(v44) = 1;
  if ((v44 & 1) == 0)
  {
    CachedMetrics = TXTextureGlyph::getCachedMetrics(a1, (const PCHash128 *)v53);
    if (CachedMetrics)
    {
      if (*(_QWORD *)(a3 + 24))
        return PCMatrix33Tmpl<double>::operator=(*(_QWORD *)(a3 + 24), CachedMetrics + 88);
    }
  }
  return result;
}

void sub_1B294C028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va1);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a7);
  _Unwind_Resume(a1);
}

uint64_t TXCoreTextGlyph::makeTextureGlyphRep(uint64_t a1, uint64_t a2)
{
  const PCString *v4;
  __int32 v5;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  float64x2_t v15;
  __int128 v16;
  uint64_t v17;

  v17 = 0;
  v4 = *(const PCString **)(a1 + 16);
  v5 = ((uint64_t (*)(const PCString *))v4->var0->data)(v4);
  v15 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v16 = _Q0;
  TXDrawGlyphToBitmap(a1, v4, v5, *(unsigned __int8 *)(a2 + 8), 0, 0, 0, &v15, *(double *)a2, *(double *)(a2 + 16), (double *)&v17, *(double **)(a2 + 24), 0, 1);
  v11 = operator new();
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_QWORD *)(v11 + 88) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 112) = 0;
  *(_QWORD *)(v11 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 32) = v17;
  *(_QWORD *)(v11 + 40) = 0;
  v12 = v16;
  *(float64x2_t *)v11 = v15;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 48) = *(_QWORD *)a2;
  *(_DWORD *)(v11 + 160) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(v11 + 72) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  if (v13)
    PCMatrix33Tmpl<double>::operator=(v11 + 88, v13);
  return v11;
}

uint64_t *std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E6502A08;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1B294C248(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E6502AF8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1B294C330(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E6502BE8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1B294C418(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E6502CD8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1B294C500(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void TXChannelAlignment::TXChannelAlignment(TXChannelAlignment *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  PCString v11;
  PCString v12;

  Instance = (OZFactory *)TXChannelAlignment_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, 0);
  *(_QWORD *)this = &off_1E6502D50;
  *((_QWORD *)this + 2) = &unk_1E6503098;
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Layout Alignment Enum"));
  PCURL::PCURL((PCURL *)&v11, CFSTR("Text Layout Alignment"));
  OZChannelEnum::OZChannelEnum((TXChannelAlignment *)((char *)this + 136), 0, &v12, &v11, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Layout Vertical Alignment Enum"));
  PCURL::PCURL((PCURL *)&v11, CFSTR("Text Layout Vertical Alignment"));
  OZChannelEnum::OZChannelEnum((TXChannelAlignment *)((char *)this + 392), 0, &v12, &v11, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
}

void sub_1B294C6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelObjectRootBase *v12;
  OZChannelEnum *v13;

  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v12);
  _Unwind_Resume(a1);
}

void TXChannelAlignment::TXChannelAlignment(TXChannelAlignment *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, 0);
  *v5 = &off_1E6502D50;
  v5[2] = &unk_1E6503098;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text Layout Alignment Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Layout Alignment"));
  OZChannelEnum::OZChannelEnum((TXChannelAlignment *)((char *)this + 136), 0, &v7, &v6, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text Layout Vertical Alignment Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Layout Vertical Alignment"));
  OZChannelEnum::OZChannelEnum((TXChannelAlignment *)((char *)this + 392), 0, &v7, &v6, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
}

void sub_1B294C888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelObjectRootBase *v12;
  OZChannelEnum *v13;

  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v12);
  _Unwind_Resume(a1);
}

void TXChannelAlignment::TXChannelAlignment(TXChannelAlignment *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3);
  *v5 = &off_1E6502D50;
  v5[2] = &unk_1E6503098;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 17), (const OZChannelEnum *)&a2[1].var3, (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((TXChannelAlignment *)((char *)this + 392), (const OZChannelEnum *)&a2[3].var7, (OZChannelFolder *)this);
}

void sub_1B294C958(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannelEnum *v2;

  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

const __CFString *TXChannelAlignment::getObjCWrapperName(TXChannelAlignment *this)
{
  return CFSTR("CHChannelTextAlignment");
}

TXChannelAlignment *TXChannelAlignment::clone(const OZChannelBase *this)
{
  TXChannelAlignment *v2;

  v2 = (TXChannelAlignment *)operator new();
  TXChannelAlignment::TXChannelAlignment(v2, this, 0);
  return v2;
}

void sub_1B294C9D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4091C539B7);
  _Unwind_Resume(a1);
}

void TXChannelAlignment::copy(TXChannelAlignment *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannelEnum::copy((PCString *)this + 17, (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannelEnum::copy((PCString *)this + 49, (const OZChannelBase *)((char *)v4 + 392), a3);
}

void `non-virtual thunk to'TXChannelAlignment::~TXChannelAlignment(TXChannelAlignment *this)
{
  TXChannelAlignment::~TXChannelAlignment((TXChannelAlignment *)((char *)this - 16));
}

{
  TXChannelAlignment::~TXChannelAlignment((TXChannelAlignment *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void TXChannelString::TXChannelString(TXChannelString *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)TXChannelString_Factory::getInstance(this);
  OZChannelText::OZChannelText((OZChannelText *)this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E6503108;
  *((_QWORD *)this + 2) = &unk_1E6503490;
}

void TXChannelString::TXChannelString(TXChannelString *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZChannelText::OZChannelText((OZChannelText *)this, a2, a3, a4);
  *v4 = &off_1E6503108;
  v4[2] = &unk_1E6503490;
}

void TXChannelString::TXChannelString(TXChannelString *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannelText::OZChannelText((OZChannelText *)this, a2, a3);
  *v3 = &off_1E6503108;
  v3[2] = &unk_1E6503490;
}

void TXChannelString::setString(OZChannelBase *this, PCString a2, char a3, int a4)
{
  const void *ObjectManipulator;
  void *v7;
  PCString v9;
  PCString v10;
  __int128 v11;
  uint64_t v12;

  if (a4)
  {
    ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(this);
    v11 = *MEMORY[0x1E0CA2E68];
    v12 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    (*(void (**)(void *, __int128 *, __CFString *))(*(_QWORD *)v7 + 144))(v7, &v11, a2.var0);
  }
  else
  {
    PCString::PCString(&v10, (const PCString *)a2.var0);
    v9.var0 = (__CFString *)&v10;
    OZChannelText::setString((OZChannelText *)this, v9, a3);
    PCString::~PCString(&v10);
  }
}

void sub_1B294CC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

_QWORD *TXChannelString::getString@<X0>(PCString *this@<X0>, PCString *a2@<X8>)
{
  uint64_t *i;
  const void *v3;
  OZBehavior *v4;
  OZSingleChannelBehavior *v5;
  const void *ChanBase;
  OZChannelBase *v7;
  OZChannelBase *SourceChannel;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const void *ObjectManipulator;
  _QWORD *v12;
  const void *v13;
  _QWORD *v14;
  _QWORD *v15;
  const OZChannelBase *v16;
  const OZChannelBase *v17;
  void *v21[3];
  void *v22[3];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v23 = (uint64_t)&v23;
  v24 = &v23;
  v25 = 0;
  OZBehavior::GetBehaviorsAffectingChannel(this, &v23, 1);
  for (i = v24; i != &v23; i = (uint64_t *)i[1])
  {
    v3 = (const void *)i[2];
    if (v3)
    {
      if (v4)
      {
        v5 = v4;
        if (OZBehavior::isEnabledAndUseBehaviors(v4))
        {
          ChanBase = (const void *)OZSingleChannelBehavior::getChanBase(v5);
          v7 = ChanBase
          SourceChannel = OZLinkBehavior::getSourceChannel(v5);
          if (SourceChannel)
          {
            if (v7)
            {
              v10 = v9;
              if (v9)
              {
                ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v7);
                v12 = ObjectManipulator
                v13 = (const void *)OZChannelBase::getObjectManipulator(v10);
                if (v13)
                {
                  if (v12)
                  {
                    v15 = v14;
                    if (v14)
                    {
                      v16 = (const OZChannelBase *)(*(uint64_t (**)(_QWORD *))(v12[25] + 640))(v12 + 25);
                      OZChannelRef::OZChannelRef((OZChannelRef *)v22, v7, v16);
                      v17 = (const OZChannelBase *)(*(uint64_t (**)(_QWORD *))(v15[25] + 640))(v15 + 25);
                      OZChannelRef::OZChannelRef((OZChannelRef *)v21, v10, v17);
                      if (OZChannelRef::operator==((unsigned __int8 *)v22, (unsigned __int8 *)v21))
                      {
                        (*((void (**)(OZChannelBase *))v10->var0 + 106))(v10);
                        OZChannelRef::~OZChannelRef(v21);
                        OZChannelRef::~OZChannelRef(v22);
                        return std::__list_imp<unsigned int>::clear(&v23);
                      }
                      OZChannelRef::~OZChannelRef(v21);
                      OZChannelRef::~OZChannelRef(v22);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  PCString::PCString(a2, this + 19);
  return std::__list_imp<unsigned int>::clear(&v23);
}

void sub_1B294CE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, void *);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  OZChannelRef::~OZChannelRef((void **)va);
  OZChannelRef::~OZChannelRef((void **)va1);
  std::__list_imp<unsigned int>::clear((uint64_t *)va2);
  _Unwind_Resume(a1);
}

char *TXChannelString::getStringPtr(TXChannelString *this)
{
  uint64_t *v2;
  const void *v3;
  OZBehavior *v4;
  OZSingleChannelBehavior *v5;
  const void *ChanBase;
  OZChannelBase *v7;
  OZChannelBase *SourceChannel;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const void *ObjectManipulator;
  _QWORD *v12;
  const void *v13;
  _QWORD *v14;
  _QWORD *v15;
  const OZChannelBase *v16;
  const OZChannelBase *v17;
  _BOOL4 v18;
  BOOL v19;
  char *v21;
  void *v22[3];
  void *v23[3];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v24 = (uint64_t)&v24;
  v25 = &v24;
  v26 = 0;
  OZBehavior::GetBehaviorsAffectingChannel(this, &v24, 1);
  v2 = v25;
  if (v25 == &v24)
  {
LABEL_21:
    v21 = (char *)this + 152;
  }
  else
  {
    while (1)
    {
      v3 = (const void *)v2[2];
      if (v3)
      {
        if (v4)
        {
          v5 = v4;
          if (OZBehavior::isEnabledAndUseBehaviors(v4))
          {
            ChanBase = (const void *)OZSingleChannelBehavior::getChanBase(v5);
            v7 = ChanBase
            SourceChannel = OZLinkBehavior::getSourceChannel(v5);
            if (SourceChannel)
            {
              if (v7)
              {
                v10 = v9;
                if (v9)
                {
                  ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v7);
                  v12 = ObjectManipulator
                  v13 = (const void *)OZChannelBase::getObjectManipulator(v10);
                  if (v13)
                  {
                    if (v12)
                    {
                      v15 = v14;
                      if (v14)
                      {
                        v16 = (const OZChannelBase *)(*(uint64_t (**)(_QWORD *))(v12[25] + 640))(v12 + 25);
                        OZChannelRef::OZChannelRef((OZChannelRef *)v23, v7, v16);
                        v17 = (const OZChannelBase *)(*(uint64_t (**)(_QWORD *))(v15[25] + 640))(v15 + 25);
                        OZChannelRef::OZChannelRef((OZChannelRef *)v22, v10, v17);
                        v18 = OZChannelRef::operator==((unsigned __int8 *)v23, (unsigned __int8 *)v22);
                        v19 = v18;
                        if (v18)
                          v21 = (char *)(*((uint64_t (**)(OZChannelBase *))v10->var0 + 107))(v10);
                        OZChannelRef::~OZChannelRef(v22);
                        OZChannelRef::~OZChannelRef(v23);
                        if (v19)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v2 = (uint64_t *)v2[1];
      if (v2 == &v24)
        goto LABEL_21;
    }
  }
  std::__list_imp<unsigned int>::clear(&v24);
  return v21;
}

void sub_1B294D0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, void *);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  OZChannelRef::~OZChannelRef((void **)va);
  OZChannelRef::~OZChannelRef((void **)va1);
  std::__list_imp<unsigned int>::clear((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void TXChannelString::~TXChannelString(OZChannelText *this)
{
  OZChannelText::~OZChannelText(this);
  JUMPOUT(0x1B5E29170);
}

BOOL OZChannelBase::saveWhenAtDefaultState(OZChannelBase *this)
{
  return OZChannelBase::testFlag(this, 0x100000000);
}

BOOL OZChannelBase::isStateModified(OZChannelBase *this)
{
  return (this->var7 & 0xFFFFFFFDECA4CF86) != this->var8;
}

double OZChannel::getSliderMax(OZChannel *this)
{
  return *((double *)this->var16 + 1);
}

void `non-virtual thunk to'TXChannelString::~TXChannelString(TXChannelString *this)
{
  OZChannelText::~OZChannelText((OZChannelText *)((char *)this - 16));
}

{
  OZChannelText::~OZChannelText((OZChannelText *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void TXBackgroundRectImageSource::TXBackgroundRectImageSource(TXBackgroundRectImageSource *this)
{
  *((_QWORD *)this + 13) = &off_1E65EB048;
  *((_QWORD *)this + 14) = 0;
  *((_BYTE *)this + 120) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1E65035F0);
  *(_QWORD *)this = &off_1E6503508;
  *((_QWORD *)this + 13) = &unk_1E65035D0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 2) = _Q0;
  PCColor::PCColor((PCColor *)((char *)this + 48));
}

void sub_1B294D1F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65035F0);
  *(_QWORD *)(v1 + 104) = v3 + 16;
  *(_BYTE *)(v1 + 120) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

CGColorSpace **TXBackgroundRectImageSource::getHelium@<X0>(TXBackgroundRectImageSource *this@<X0>, LiAgent *a2@<X1>, HgcTXPremulColor **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  HgcTXPremulColor *v9;
  const FxColorDescription *RequestedColorDescription;
  CGColorSpace *CGColorSpace;
  uint64_t v12;
  uint64_t v13;
  uint64_t DynamicRange;
  uint64_t ToneMapMethod;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  CGColorSpace *v20;
  FxColorDescription v21;

  v6 = HGRectMake4i((int)*((double *)this + 2), (int)*((double *)this + 3), (int)*((double *)this + 4) + (int)*((double *)this + 2), (int)*((double *)this + 5) + (int)*((double *)this + 3));
  v8 = v7;
  v9 = (HgcTXPremulColor *)HGObject::operator new(0x1B0uLL);
  HgcTXPremulColor::HgcTXPremulColor(v9);
  *(_QWORD *)v9 = &unk_1E6503798;
  *((_QWORD *)v9 + 52) = v6;
  *((_QWORD *)v9 + 53) = v8;
  RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  FxColorDescription::FxColorDescription(&v21, RequestedColorDescription, CGColorSpace);
  OZEaseInInterpolator::~OZEaseInInterpolator((OZEaseInInterpolator *)&v21);
  v13 = v12;
  DynamicRange = FxColorDescription::getDynamicRange(&v21);
  ToneMapMethod = FxColorDescription::getToneMapMethod(&v21);
  PCWorkingColor::PCWorkingColor(v19, (char *)this + 48, v13, DynamicRange, ToneMapMethod);
  v17 = 0;
  v18 = 0;
  PCWorkingColor::getRGBA((PCWorkingColor *)v19, (float *)&v18 + 1, (float *)&v18, (float *)&v17 + 1, (float *)&v17);
  (*(void (**)(HgcTXPremulColor *, _QWORD, float, float, float, float))(*(_QWORD *)v9 + 96))(v9, 0, *((float *)&v18 + 1), *(float *)&v18, *((float *)&v17 + 1), *(float *)&v17);
  LiAgent::setActualColorDescription((CGColorSpace **)a2, &v21);
  *a3 = v9;
  PCCFRef<CGColorSpace *>::~PCCFRef(&v20);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v21._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B294D37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  HGObject::operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t TXBackgroundRectImageSource::pixelTransformSupport()
{
  return 0;
}

uint64_t TXBackgroundRectImageSource::estimateRenderMemory()
{
  return 0;
}

void TXBackgroundRectImageSource::~TXBackgroundRectImageSource(TXBackgroundRectImageSource *this)
{
  *(_QWORD *)this = &off_1E6503508;
  *((_QWORD *)this + 13) = &unk_1E65035D0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 12);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65035F0);
  *((_QWORD *)this + 13) = &off_1E65EB048;
  *((_BYTE *)this + 120) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 14);
}

{
  *(_QWORD *)this = &off_1E6503508;
  *((_QWORD *)this + 13) = &unk_1E65035D0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 12);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65035F0);
  *((_QWORD *)this + 13) = &off_1E65EB048;
  *((_BYTE *)this + 120) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 14);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'TXBackgroundRectImageSource::~TXBackgroundRectImageSource(TXBackgroundRectImageSource *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E6503508;
  *((_QWORD *)v1 + 13) = &unk_1E65035D0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v1 + 12);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65035F0);
  *((_QWORD *)v1 + 13) = &off_1E65EB048;
  v1[120] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 14);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E6503508;
  *((_QWORD *)v1 + 13) = &unk_1E65035D0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v1 + 12);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65035F0);
  *((_QWORD *)v1 + 13) = &off_1E65EB048;
  v1[120] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 14);
  JUMPOUT(0x1B5E29170);
}

void HBackgroundColor::~HBackgroundColor(HGNode *this)
{
  void *v1;

  HgcTXPremulColor::~HgcTXPremulColor(this);
  HGObject::operator delete(v1);
}

uint64_t HBackgroundColor::GetDOD(uint64_t a1)
{
  return *(_QWORD *)(a1 + 416);
}

uint64_t TXGlyphGroup::TXGlyphGroup(uint64_t a1, _OWORD *a2, int a3, __int128 *a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void **v14;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;

  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  v6 = a4[4];
  v7 = a4[5];
  v8 = a4[6];
  v9 = a4[7];
  v10 = *a4;
  v11 = a4[1];
  v12 = a4[2];
  v13 = a4[3];
  *(_QWORD *)(a1 + 176) = 0;
  v14 = (void **)(a1 + 176);
  *(_OWORD *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 96) = v13;
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 176), 0);
  v15 = *(_QWORD *)(a1 + 192);
  v16 = *(char **)(a1 + 184);
  if ((unint64_t)v16 >= v15)
  {
    v18 = (char *)*v14;
    v19 = (v16 - (_BYTE *)*v14) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v21 = v15 - (_QWORD)v18;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 192, v22);
      v18 = *(char **)(a1 + 176);
      v16 = *(char **)(a1 + 184);
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[4 * v19];
    v25 = &v23[4 * v22];
    *(_DWORD *)v24 = a3;
    v17 = v24 + 4;
    while (v16 != v18)
    {
      v26 = *((_DWORD *)v16 - 1);
      v16 -= 4;
      *((_DWORD *)v24 - 1) = v26;
      v24 -= 4;
    }
    *(_QWORD *)(a1 + 176) = v24;
    *(_QWORD *)(a1 + 184) = v17;
    *(_QWORD *)(a1 + 192) = v25;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_DWORD *)v16 = a3;
    v17 = v16 + 4;
  }
  *(_QWORD *)(a1 + 184) = v17;
  return a1;
}

void sub_1B294D700(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 184) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void TXGlyphGroup::~TXGlyphGroup(TXGlyphGroup *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
}

uint64_t std::vector<TXGlyphRender>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x86BCA1AF286BCA1BLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x1AF286BCA1AF287)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<TXGlyphRender>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 152 * v6;
    std::vector<TXGlyphRender>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<TXGlyphRender>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B294D7F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TXGlyphRender>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void TXGlyphGroupRender::TXGlyphGroupRender(TXGlyphGroupRender *this, TXTextLayout *a2, const OZRenderParams *a3, unint64_t a4)
{
  *((_QWORD *)this + 200) = &off_1E65EB048;
  *((_QWORD *)this + 201) = 0;
  *((_BYTE *)this + 1616) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1E6503AF0);
  *(_QWORD *)this = off_1E6503A08;
  *((_QWORD *)this + 200) = &unk_1E6503AD0;
  *((_QWORD *)this + 2) = a2;
  OZRenderParams::OZRenderParams((TXGlyphGroupRender *)((char *)this + 24), a3);
  *((_QWORD *)this + 183) = 0;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *((_QWORD *)this + 199) = 0x3FF0000000000000;
  *((_QWORD *)this + 194) = 0x3FF0000000000000;
  *((_QWORD *)this + 189) = 0x3FF0000000000000;
  *((_QWORD *)this + 184) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  std::vector<TXGlyphRender>::reserve((uint64_t *)this + 181, a4);
}

void sub_1B294D8EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  OZRenderParams *v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  std::vector<TXGlyphRender>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  OZRenderParams::~OZRenderParams(v3);
  OZChannelBase::setRangeName((OZChannelBase *)v2, (const PCString *)&off_1E6503AF0);
  *(_QWORD *)(v2 + 1600) = v4 + 16;
  *(_BYTE *)(v2 + 1616) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 1608));
  _Unwind_Resume(a1);
}

uint64_t TXGlyphGroupRender::getHelium@<X0>(TXGlyphGroupRender *this@<X0>, LiAgent *a2@<X1>, void ***a3@<X8>)
{
  HGHWMultiBlend *v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  const FxColorDescription *RequestedColorDescription;
  CGColorSpace *CGColorSpace;
  CGColorSpaceRef *v20;
  CGColorSpaceRef *v21;
  int DynamicRange;
  PCToneMapMethod *ToneMapMethod;
  OZScene **v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  TXTextObject **v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  TXTextObject *v41;
  TXTextObject *v42;
  TXTextLayout *v43;
  int ValueAsInt;
  OZChannelColorNoAlpha *v45;
  PCColorSpaceCache *WorkingColorSpace;
  CGColorSpace *v47;
  TXTextObject *v48;
  char isFaceVisible;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  int isEmoji;
  __int128 v54;
  HGNode *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __CFString *var0;
  uint64_t *p_info;
  unint64_t v61;
  CGColorSpace *v62;
  void **v63;
  void **v64;
  LiAgent *v66;
  void ***v67;
  __int128 v68;
  HGHWMultiBlend *v69;
  CMTime v70;
  CMTime v71;
  CMTime v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  HGNode *v75;
  float v76;
  _OWORD v77[3];
  CGColorSpace *v78;
  int ColorSpaceID;
  int v80;
  OZChannelBase v81;
  PCSharedCount v82[2];
  void (**v83)(PCShared_base *__hidden);
  PC_Sp_counted_base *v84;
  char v85;
  char v86;
  char v87[8];
  __n128 v88;
  CGColorSpace *v89;
  FxColorDescription v90;
  CGColorSpace *v91[58];
  _OWORD v92[8];
  _OWORD v93[9];

  v6 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
  HGHWMultiBlend::HGHWMultiBlend(v6);
  (*(void (**)(HGHWMultiBlend *, uint64_t, float, float, float, float))(*(_QWORD *)v6 + 96))(v6, 5, 1.0, 0.0, 0.0, 0.0);
  v7 = (__int128 *)*((_QWORD *)a2 + 20);
  v8 = v7[3];
  v10 = *v7;
  v9 = v7[1];
  v93[2] = v7[2];
  v93[3] = v8;
  v93[0] = v10;
  v93[1] = v9;
  v11 = v7[7];
  v13 = v7[4];
  v12 = v7[5];
  v93[6] = v7[6];
  v93[7] = v11;
  v93[4] = v13;
  v93[5] = v12;
  v14 = *((_OWORD *)this + 97);
  v92[4] = *((_OWORD *)this + 96);
  v92[5] = v14;
  v15 = *((_OWORD *)this + 99);
  v92[6] = *((_OWORD *)this + 98);
  v92[7] = v15;
  v16 = *((_OWORD *)this + 93);
  v92[0] = *((_OWORD *)this + 92);
  v92[1] = v16;
  v17 = *((_OWORD *)this + 95);
  v92[2] = *((_OWORD *)this + 94);
  v92[3] = v17;
  PCMatrix44Tmpl<double>::invert((double *)v92, (double *)v92, 0.0);
  PCMatrix44Tmpl<double>::rightMult((uint64_t)v93, (double *)v92);
  LiAgent::LiAgent((LiAgent *)v91, a2);
  RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  FxColorDescription::FxColorDescription(&v90, RequestedColorDescription, CGColorSpace);
  LiAgent::setRequestedColorDescription(v91, &v90);
  if (*((_DWORD *)this + 129))
    LiAgent::setFilterSize((uint64_t)v91, 1.0, 1.4142);
  OZEaseInInterpolator::~OZEaseInInterpolator((OZEaseInInterpolator *)&v90);
  v21 = v20;
  DynamicRange = FxColorDescription::getDynamicRange(&v90);
  ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod(&v90);
  PCWorkingColor::PCWorkingColor((uint64_t)&v88, v21, DynamicRange, ToneMapMethod);
  v66 = a2;
  v67 = a3;
  v69 = v6;
  v24 = (OZScene **)Li3DEngineScene::sceneManager(*((Li3DEngineScene **)this + 2));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v87, v24);
  v25 = (_OWORD *)((char *)this + 24);
  v26 = *((_QWORD *)this + 181);
  v27 = *((_QWORD *)this + 182);
  v86 = 0;
  if (v26 != v27)
  {
    v28 = 1;
    __asm { FMOV            V0.4S, #1.0 }
    v68 = _Q0;
    while (1)
    {
      v34 = (TXTextObject **)(v26 + 8);
      TXCachedGlyphRender::TXCachedGlyphRender((uint64_t)&v81, *((_QWORD *)this + 2), (_QWORD *)(v26 + 8), (TXGlyphGroupRender *)((char *)this + 24), *(_DWORD *)v26);
      v82[1].var0 = (PC_Sp_counted_base *)&v86;
      PCMatrix44Tmpl<double>::operator*((uint64_t)v93, (__int128 *)(v26 + 24), (uint64_t)v77);
      LiAgent::setPixelTransform((uint64_t)v91, (uint64_t)v77);
      v76 = 1.0;
      TXCachedGlyphRender::getHelium((TXCachedGlyphRender *)&v81, (LiAgent *)v91, &v76, 0, &v75);
      if (v75)
        break;
LABEL_39:
      v81.var0 = (void **)&off_1E64FEA88;
      v83 = (void (**)(PCShared_base *__hidden))&unk_1E64FEB50;
      PCSharedCount::~PCSharedCount(v82);
      OZRenderParams::~OZRenderParams((OZRenderParams *)&v81.var5);
      var0 = v81.var4.var0;
      if (v81.var4.var0)
      {
        p_info = &v81.var4.var0->info;
        do
          v61 = __ldaxr((unint64_t *)p_info);
        while (__stlxr(v61 - 1, (unint64_t *)p_info));
        if (!v61)
        {
          (*((void (**)(__CFString *))var0->isa + 2))(var0);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)var0);
        }
      }
      OZChannelBase::setRangeName(&v81, (const PCString *)&off_1E64FEB70);
      v83 = &off_1E65EB048;
      v85 = 0;
      PCWeakCount::~PCWeakCount(&v84);
      v26 += 152;
      if (v26 == v27)
        goto LABEL_48;
    }
    v35 = *(_DWORD *)v26;
    if (*(_DWORD *)v26 == 1)
    {
      v41 = *v34;
      *(_OWORD *)&v71.value = *v25;
      v71.epoch = *((_QWORD *)this + 5);
      if ((TXTextObject::isOutlineVisible(v41, &v71, (PCWorkingColor *)&v88, 0) & 1) == 0)
        goto LABEL_17;
    }
    else
    {
      if (v35)
      {
        if (v35 != 3)
          goto LABEL_24;
        v42 = *v34;
        *(_OWORD *)&v70.value = *v25;
        v70.epoch = *((_QWORD *)this + 5);
        if (TXTextObject::isDropShadowVisible(v42, &v70, (PCWorkingColor *)&v88))
          goto LABEL_24;
        goto LABEL_17;
      }
      v36 = *((_QWORD *)*v34 + 33);
      if (v36)
      {
        v38 = *(_QWORD *)(v36 + 8);
        v37 = *(std::__shared_weak_count **)(v36 + 16);
        v73 = v38;
        v74 = v37;
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v40 = __ldxr(p_shared_owners);
          while (__stxr(v40 + 1, p_shared_owners));
        }
      }
      else
      {
        v38 = 0;
        v73 = 0;
        v74 = 0;
      }
      PCColor::PCColor((PCColor *)((char *)v77 + 8));
      v43 = (TXTextLayout *)*((_QWORD *)this + 2);
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v38 + 6088), MEMORY[0x1E0CA2E68], 0.0);
      LOBYTE(v77[0]) = TXTextLayout::isColorAnimated(v43, (OZChannelColorNoAlpha *)(v38 + 6344), (OZChannelPercent *)(v38 + 10152), ValueAsInt, 1008, 1009);
      v45 = (OZChannelColorNoAlpha *)(v73 + 6344);
      *(_OWORD *)&v72.value = *v25;
      v72.epoch = *((_QWORD *)this + 5);
      (*(void (**)(uint64_t, CMTime *, char *))(*(_QWORD *)(v73 + 6344) + 832))(v73 + 6344, &v72, (char *)v77 + 8);
      ColorSpaceID = OZChannelColorNoAlpha::getColorSpaceID(v45);
      WorkingColorSpace = (PCColorSpaceCache *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)((char *)this + 24));
      v80 = PCColorSpaceCache::identifyColorSpace(WorkingColorSpace, v47);
      v48 = *v34;
      *(_OWORD *)&v72.value = *v25;
      v72.epoch = *((_QWORD *)this + 5);
      isFaceVisible = TXTextObject::isFaceVisible(v48, &v72, &v88, (uint64_t)v77 + 8, v80, ColorSpaceID);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v78);
      v50 = v74;
      if (!v74)
        goto LABEL_23;
      v51 = (unint64_t *)&v74->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (v52)
      {
LABEL_23:
        if ((isFaceVisible & 1) != 0)
          goto LABEL_24;
LABEL_17:
        v6 = v69;
        goto LABEL_37;
      }
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
      if ((isFaceVisible & 1) == 0)
        goto LABEL_17;
    }
LABEL_24:
    v77[0] = 0uLL;
    isEmoji = TXTextObject::isEmoji(*v34);
    v6 = v69;
    if (isEmoji)
    {
      v54 = v68;
    }
    else
    {
      *(_QWORD *)&v54 = v88.n128_u64[0];
      DWORD2(v54) = v88.n128_u32[2];
    }
    HIDWORD(v54) = v88.n128_u32[3];
    v77[0] = v54;
    if (*(_DWORD *)v26 == 2)
    {
      v55 = v75;
      v56 = *(_QWORD *)v69;
      v57 = 37;
    }
    else
    {
      if (v35 == 3)
        v58 = isEmoji;
      else
        v58 = 0;
      v55 = v75;
      v56 = *(_QWORD *)v69;
      if (v58 == 1)
      {
        (*(void (**)(HGHWMultiBlend *, uint64_t, HGNode *, uint64_t, float))(v56 + 624))(v69, v28, v75, 9, 1.0);
LABEL_36:
        v28 = (v28 + 1);
LABEL_37:
        if (v75)
          (*(void (**)(HGNode *))(*(_QWORD *)v75 + 24))(v75);
        goto LABEL_39;
      }
      v57 = 36;
    }
    (*(void (**)(HGHWMultiBlend *, uint64_t, HGNode *, uint64_t, _OWORD *))(v56 + 648))(v69, v28, v55, v57, v77);
    goto LABEL_36;
  }
LABEL_48:
  *v67 = (void **)v6;
  (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v6 + 16))(v6);
  if ((LiAgent::isDynamicRangeTrackingRender((FxColorDescription **)v66) & 1) == 0
    && OZRenderParams::isRenderForHDR_Deprecated((TXGlyphGroupRender *)((char *)this + 24)))
  {
    v62 = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)((char *)this + 24));
    FxApplySDRToHDR((uint64_t)v67, v62, 1, (uint64_t *)&v81);
    v63 = *v67;
    v64 = v81.var0;
    if (*v67 == v81.var0)
    {
      if (v63)
        (*((void (**)(void **))*v63 + 3))(v63);
    }
    else
    {
      if (v63)
      {
        (*((void (**)(void **))*v63 + 3))(v63);
        v64 = v81.var0;
      }
      *v67 = v64;
    }
  }
  LiAgent::setActualColorDescription((CGColorSpace **)v66, &v90);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v87);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v89);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v90._pcColorDesc._colorSpaceRef._obj);
  LiAgent::~LiAgent((LiAgent *)v91);
  return (*(uint64_t (**)(HGHWMultiBlend *))(*(_QWORD *)v6 + 24))(v6);
}

void sub_1B294DF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (a53)
    (*(void (**)(uint64_t))(*(_QWORD *)a53 + 24))(a53);
  if (*a10)
    (*(void (**)(_QWORD))(*(_QWORD *)*a10 + 24))(*a10);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&STACK[0x758]);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x770]);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x790]);
  LiAgent::~LiAgent((LiAgent *)&STACK[0x7B0]);
  (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  _Unwind_Resume(a1);
}

uint64_t TXGlyphGroupRender::buildLighting(TXGlyphGroupRender *this, LiGeode *a2, const LiLightSet *a3, OZRenderState *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v18;
  double v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  double v24;
  double v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  PCShared_base *LightFilter;
  PCShared_base *v30;
  PCShared_base *v31;
  double *v32;
  unint64_t i;
  double *v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  int v38;
  uint64_t j;
  _OWORD *v40;
  __int128 v41;
  double *v42;
  PCShared_base *v43;
  __int128 v44;
  double v45;
  double v46;
  _OWORD v47[7];
  uint64_t v48;
  std::__shared_weak_count *v49;
  __int128 v50;

  result = *((_QWORD *)this + 2);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 976))(result);
    result = LiGeode::needsLights(a2);
    if ((result & 1) != 0
      || *((_DWORD *)a3 + 3)
      && (result = (*(uint64_t (**)(uint64_t, OZRenderState *))(*(_QWORD *)(*((_QWORD *)this + 2) + 200)
                                                                       + 1840))(*((_QWORD *)this + 2) + 200, a4), (_DWORD)result))
    {
      v9 = *((_QWORD *)this + 181);
      v10 = *((_QWORD *)this + 182);
      if (v9 == v10)
      {
        v18 = -1.0;
        v19 = 0.0;
        v11 = -1.0;
        v12 = 0.0;
      }
      else
      {
        v11 = -1.0;
        v12 = 0.0;
        __asm { FMOV            V0.2D, #-1.0 }
        v44 = _Q0;
        v18 = -1.0;
        v19 = 0.0;
        do
        {
          v45 = 0.0;
          v46 = 0.0;
          v47[0] = v44;
          v20 = *(_QWORD *)(v9 + 8);
          v21 = *(std::__shared_weak_count **)(v9 + 16);
          v48 = v20;
          v49 = v21;
          if (v21)
          {
            p_shared_owners = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldxr(p_shared_owners);
            while (__stxr(v23 + 1, p_shared_owners));
          }
          TXTextObject::getImageBoundsOfAttribute(v20, &v45, a4, *(_DWORD *)v9, 0, 0, 1, 0, 0.0, 0.0, 0.0, 0.0);
          v24 = v45;
          v25 = v46;
          v26 = v47[0];
          if (v21)
          {
            v27 = (unint64_t *)&v21->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v12 = v12 + v24;
          v19 = v19 + v25;
          v11 = v11 + *(double *)&v26;
          v18 = v18 + *((double *)&v26 + 1);
          v9 += 152;
        }
        while (v9 != v10);
      }
      LightFilter = LiGeode::getLightFilter(a2);
      PCMatrix44Tmpl<double>::operator*((uint64_t)LightFilter + 472, (__int128 *)((char *)a2 + 8), (uint64_t)&v45);
      v30 = LiGeode::getLightFilter(a2);
      v31 = v30;
      v32 = (double *)((char *)v30 + 472);
      if ((double *)((char *)v30 + 472) != &v45)
      {
        for (i = 0; i != 128; i += 32)
        {
          v34 = &v32[i / 8];
          v35 = v47[i / 0x10];
          *(_OWORD *)v34 = *(_OWORD *)((char *)&v45 + i);
          *((_OWORD *)v34 + 1) = v35;
        }
      }
      if (fabs(PCMatrix44Tmpl<double>::determinant((double *)v30 + 59)) < 0.0000001)
      {
        v48 = 0;
        v49 = 0;
        v50 = xmmword_1B304EED0;
        liFindMatrixPlane(v32, (double *)&v48);
        v36 = v49;
        *((_QWORD *)v31 + 61) = v48;
        *((_QWORD *)v31 + 65) = v36;
        v37 = *((_QWORD *)&v50 + 1);
        *((_QWORD *)v31 + 69) = v50;
        *((_QWORD *)v31 + 73) = v37;
      }
      LiGeode::setLit((uint64_t)a2, 1);
      v38 = *((unsigned __int8 *)LiGeode::getLightFilter(a2) + 174);
      result = (uint64_t)LiGeode::getLightFilter(a2);
      if (v38)
      {
        *(double *)(result + 200) = v12;
        *(double *)(result + 208) = v19;
        *(double *)(result + 216) = v11;
        *(double *)(result + 224) = v18;
        result = (uint64_t)LiGeode::getLightFilter(a2);
        if ((double *)(result + 344) != &v45)
        {
          for (j = 0; j != 8; j += 2)
          {
            v40 = (_OWORD *)(result + 344 + j * 16);
            v41 = v47[j];
            *v40 = *(_OWORD *)((char *)&v45 + j * 16);
            v40[1] = v41;
          }
        }
      }
      else if (*(_BYTE *)(result + 173))
      {
        v42 = (double *)LiGeode::getLightFilter(a2);
        v42[25] = v12;
        v42[26] = v19;
        v42[27] = v11;
        v42[28] = v18;
        v43 = LiGeode::getLightFilter(a2);
        result = OZRenderParams::getTextRenderQuality((OZRenderParams *)a4);
        *((_BYTE *)v43 + 176) = (_DWORD)result == 6;
      }
    }
  }
  return result;
}

void sub_1B294E3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void TXGlyphGroupRender::~TXGlyphGroupRender(TXGlyphGroupRender *this)
{
  void **v2;

  *(_QWORD *)this = off_1E6503A08;
  *((_QWORD *)this + 200) = &unk_1E6503AD0;
  v2 = (void **)((char *)this + 1448);
  std::vector<TXGlyphRender>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZRenderParams::~OZRenderParams((TXGlyphGroupRender *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E6503AF0);
  *((_QWORD *)this + 200) = &off_1E65EB048;
  *((_BYTE *)this + 1616) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 201);
}

{
  void **v2;

  *(_QWORD *)this = off_1E6503A08;
  *((_QWORD *)this + 200) = &unk_1E6503AD0;
  v2 = (void **)((char *)this + 1448);
  std::vector<TXGlyphRender>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZRenderParams::~OZRenderParams((TXGlyphGroupRender *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E6503AF0);
  *((_QWORD *)this + 200) = &off_1E65EB048;
  *((_BYTE *)this + 1616) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 201);
  MEMORY[0x1B5E29170](this, 0x10E1C40C05CAB54);
}

uint64_t TXGlyphGroupRender::pixelTransformSupport(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 144))
    return 0;
  else
    return 6;
}

void `virtual thunk to'TXGlyphGroupRender::~TXGlyphGroupRender(TXGlyphGroupRender *this)
{
  char *v1;
  void **v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E6503A08;
  *((_QWORD *)v1 + 200) = &unk_1E6503AD0;
  v2 = (void **)(v1 + 1448);
  std::vector<TXGlyphRender>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E6503AF0);
  *((_QWORD *)v1 + 200) = &off_1E65EB048;
  v1[1616] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 201);
}

{
  char *v1;
  void **v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E6503A08;
  *((_QWORD *)v1 + 200) = &unk_1E6503AD0;
  v2 = (void **)(v1 + 1448);
  std::vector<TXGlyphRender>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E6503AF0);
  *((_QWORD *)v1 + 200) = &off_1E65EB048;
  v1[1616] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 201);
  MEMORY[0x1B5E29170](v1, 0x10E1C40C05CAB54);
}

void std::vector<TXGlyphRender>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 152;
        std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 144));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void TXFileLoadingGenerator::TXFileLoadingGenerator(TXFileLoadingGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;

  TXTextGenerator::TXTextGenerator(this, a2, a3, a4);
  *v5 = off_1E6503C98;
  v5[25] = &unk_1E6504188;
  v5[27] = &unk_1E6504A60;
  v5[31] = &off_1E6503C98[516];
  v5[841] = &off_1E6503C98[527];
  v5[2372] = &off_1E6503C98[554];
  PCURL::PCURL((PCURL *)(v5 + 8054), "", 0);
  PCURL::PCURL((TXFileLoadingGenerator *)((char *)this + 64440), "", 0);
  *((_QWORD *)this + 8056) = 0;
  *((_BYTE *)this + 64456) = 0;
}

void sub_1B294E738(_Unwind_Exception *a1)
{
  PCString *v1;
  PCURL *v2;

  PCURL::~PCURL(v2);
  TXTextGenerator::~TXTextGenerator(v1);
  _Unwind_Resume(a1);
}

void TXFileLoadingGenerator::TXFileLoadingGenerator(TXFileLoadingGenerator *this, const TXFileLoadingGenerator *a2, uint64_t a3)
{
  _QWORD *v5;
  const void **v6;
  const __CFURL **v7;
  BOOL v8;
  id v9;
  PCString v10;

  TXTextGenerator::TXTextGenerator(this, a2, a3);
  *v5 = off_1E6503C98;
  v5[25] = &unk_1E6504188;
  v5[27] = &unk_1E6504A60;
  v5[31] = &off_1E6503C98[516];
  v5[841] = &off_1E6503C98[527];
  v5[2372] = &off_1E6503C98[554];
  v6 = (const void **)(v5 + 8054);
  PCURL::PCURL((PCURL *)(v5 + 8054), "", 0);
  PCURL::PCURL((TXFileLoadingGenerator *)((char *)this + 64440), "", 0);
  *((_QWORD *)this + 8056) = *((_QWORD *)a2 + 8056);
  *((_BYTE *)this + 64456) = 0;
  v7 = (const __CFURL **)((char *)a2 + 64432);
  PCURL::getFilename(v7, &v10);
  v8 = PCString::empty(&v10);
  PCString::~PCString(&v10);
  if (!v8)
    PCURL::operator=(v6, v7);
  v9 = *((id *)this + 8056);
}

void sub_1B294E86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString *v10;
  PCURL *v11;
  PCURL *v12;

  PCString::~PCString(&a10);
  PCURL::~PCURL(v12);
  PCURL::~PCURL(v11);
  TXTextGenerator::~TXTextGenerator(v10);
  _Unwind_Resume(a1);
}

void TXFileLoadingGenerator::~TXFileLoadingGenerator(PCString *this)
{
  PCString *v2;
  __CFString *var0;

  this->var0 = (__CFString *)off_1E6503C98;
  this[25].var0 = (__CFString *)&unk_1E6504188;
  this[27].var0 = (__CFString *)&unk_1E6504A60;
  this[31].var0 = (__CFString *)&off_1E6503C98[516];
  this[841].var0 = (__CFString *)&off_1E6503C98[527];
  this[2372].var0 = (__CFString *)&off_1E6503C98[554];
  v2 = this + 8056;
  var0 = this[8056].var0;
  if (var0)
  {

    v2->var0 = 0;
  }
  PCURL::~PCURL((PCURL *)&this[8055]);
  PCURL::~PCURL((PCURL *)&this[8054]);
  TXTextGenerator::~TXTextGenerator(this);
}

BOOL TXFileLoadingGenerator::setURL(const void **this, const __CFURL **a2)
{
  _BOOL4 v4;
  PCString v6;

  PCURL::getFilename(a2, &v6);
  v4 = PCString::empty(&v6);
  PCString::~PCString(&v6);
  if (!v4)
  {
    PCURL::operator=(this + 8054, a2);
    (*((void (**)(const void **))*this + 155))(this);
  }
  return !v4;
}

void sub_1B294E9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t TXFileLoadingGenerator::writeBody(const __CFURL **this, PCSerializerWriteStream *a2, unsigned int a3, int a4, uint64_t a5)
{
  PCXMLWriteStream *v8;
  const __CFURL **URL;
  __CFString *v10;
  const __CFArray *ArrayBySeparatingStrings;
  __CFString *v12;
  const __CFArray *v13;
  int Count;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex v19;
  const __CFString *ValueAtIndex;
  const __CFString *v21;
  const __CFString *v22;
  int v23;
  uint64_t v24;
  const void *v25;
  char v26;
  PCString v30;
  PCString v31;
  PCString v32;
  PCSharedCount v33;
  PCString v34;
  PCString v35;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXFileLoadingGeneratorScope);
  if (!v8)
    goto LABEL_25;
  URL = (const __CFURL **)PCXMLWriteStream::getURL(v8);
  PCURL::getAsFileSystemString(URL, &v35);
  PCURL::getAsFileSystemString(this + 8054, &v34);
  v10 = PCString::cf_str(&v35);
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v10, CFSTR("/"));
  v12 = PCString::cf_str(&v34);
  v13 = CFStringCreateArrayBySeparatingStrings(0, v12, CFSTR("/"));
  Count = CFArrayGetCount(ArrayBySeparatingStrings);
  v15 = CFArrayGetCount(v13);
  v16 = v15;
  v17 = Count >= v15 ? v15 : Count;
  if ((int)v17 < 1)
    goto LABEL_23;
  v18 = a5;
  v19 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v19);
    v21 = (const __CFString *)CFArrayGetValueAtIndex(v13, v19);
    if (CFStringCompare(ValueAtIndex, v21, 1uLL))
      break;
    if (v17 == ++v19)
      goto LABEL_11;
  }
  LODWORD(v17) = v19;
LABEL_11:
  a5 = v18;
  if ((_DWORD)v17
    && ((_DWORD)v17 != 1
     || (v22 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0), CFStringGetLength(v22))))
  {
    PCSharedCount::PCSharedCount(&v33);
    if (~(_DWORD)v17 + Count >= 1)
    {
      v23 = Count - v17;
      do
      {
        PCString::append((PCString *)&v33, "../");
        --v23;
      }
      while (v23 > 1);
    }
    if ((int)v17 < v16)
    {
      v24 = 0;
      do
      {
        v25 = CFArrayGetValueAtIndex(v13, v17 + v24);
        PCURL::PCURL((PCURL *)&v32, v25);
        PCString::append((PCString *)&v33, &v32);
        PCString::~PCString(&v32);
        if (v16 - 1 > (int)v17 + (int)v24)
          PCString::append((PCString *)&v33, "/");
        ++v24;
      }
      while ((int)v17 + (int)v24 < v16);
    }
    PCURL::PCURL((PCURL *)&v32, (const PCString *)&v33, 0);
    PCURL::getAsURLString((const __CFURL **)&v32, (PCURL *)&v31);
    a5 = v18;
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v31);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v31);
    PCURL::~PCURL((PCURL *)&v32);
    PCString::~PCString((PCString *)&v33);
    v26 = 1;
  }
  else
  {
LABEL_23:
    v26 = 0;
  }
  CFRelease(ArrayBySeparatingStrings);
  CFRelease(v13);
  PCString::~PCString(&v34);
  PCString::~PCString(&v35);
  if ((v26 & 1) == 0)
  {
LABEL_25:
    PCURL::getAsURLString(this + 8054, (PCURL *)&v30);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v30);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v30);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return TXTextLayout::writeBody((TXTextLayout *)this, a2, a3, a4, a5);
}

void sub_1B294ED30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, PCString a12, PCString a13, PCString a14, PCString a15, PCString a16)
{
  PCURL::~PCURL((PCURL *)&a13);
  PCString::~PCString(&a14);
  PCString::~PCString(&a15);
  PCString::~PCString(&a16);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXFileLoadingGenerator::writeBody(const __CFURL **this, PCSerializerWriteStream *a2, unsigned int a3, int a4, uint64_t a5)
{
  return TXFileLoadingGenerator::writeBody(this - 25, a2, a3, a4, a5);
}

{
  return TXFileLoadingGenerator::writeBody(this - 31, a2, a3, a4, a5);
}

uint64_t TXFileLoadingGenerator::parseBegin(TXFileLoadingGenerator *this, PCSerializerReadStream *a2)
{
  TXTextLayout::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXFileLoadingGeneratorScope);
  return 1;
}

uint64_t `non-virtual thunk to'TXFileLoadingGenerator::parseBegin(TXFileLoadingGenerator *this, PCSerializerReadStream *a2)
{
  TXTextLayout::parseBegin((TXFileLoadingGenerator *)((char *)this - 200), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXFileLoadingGeneratorScope);
  return 1;
}

{
  TXTextLayout::parseBegin((TXFileLoadingGenerator *)((char *)this - 248), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXFileLoadingGeneratorScope);
  return 1;
}

uint64_t TXFileLoadingGenerator::parseEnd(TXFileLoadingGenerator *this, PCSerializerReadStream *a2)
{
  (*(void (**)(TXFileLoadingGenerator *))(*(_QWORD *)this + 1240))(this);
  return TXTextLayout::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'TXFileLoadingGenerator::parseEnd(TXFileLoadingGenerator *this, PCSerializerReadStream *a2)
{
  TXTextLayout *v3;

  v3 = (TXFileLoadingGenerator *)((char *)this - 200);
  (*(void (**)(char *))(*((_QWORD *)this - 25) + 1240))((char *)this - 200);
  return TXTextLayout::parseEnd(v3, a2);
}

{
  TXTextLayout *v3;

  v3 = (TXFileLoadingGenerator *)((char *)this - 248);
  (*(void (**)(char *))(*((_QWORD *)this - 31) + 1240))((char *)this - 248);
  return TXTextLayout::parseEnd(v3, a2);
}

uint64_t TXFileLoadingGenerator::parseElement(const void **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  PCXMLReadStream *v7;
  PCXMLReadStream *v8;
  __CFString *v9;
  CFStringRef v10;
  CFURLRef *URL;
  CFURLRef PathComponent;
  const __CFURL *v13;
  CFURLRef v14;
  const __CFURL **v15;
  _BOOL4 v16;
  PCString v18;
  const __CFURL *v19;
  PCSharedCount v20;

  PCSharedCount::PCSharedCount(&v20);
  TXTextLayout::parseElement((TXTextLayout *)this, a2, a3);
  v6 = *((_DWORD *)a3 + 2);
  if (v6 == 1)
  {
    if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v20))
    {
      PCURL::PCURL((PCURL *)&v19, (const PCString *)&v20, 0);
      if ((*((unsigned int (**)(const void **, const __CFURL **))*this + 153))(this, &v19)
        && !*((_BYTE *)this + 64456))
      {
        PCURL::PCURL((PCURL *)&v18, "", 0);
        PCURL::operator=(this + 8054, (const __CFURL **)&v18);
        PCURL::~PCURL((PCURL *)&v18);
      }
      v15 = (const __CFURL **)(this + 8055);
      PCURL::getFilename(v15, &v18);
      v16 = PCString::empty(&v18);
      PCString::~PCString(&v18);
      if (v16)
        PCURL::operator=((const void **)v15, &v19);
      goto LABEL_14;
    }
  }
  else if (v6 == 2 && !*((_BYTE *)this + 64456))
  {
    if (v7)
    {
      v8 = v7;
      if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v20))
      {
        v9 = PCString::cf_str((PCString *)&v20);
        v10 = CFURLCreateStringByReplacingPercentEscapes(0, v9, &stru_1E65EDDA0);
        URL = (CFURLRef *)PCXMLReadStream::getURL(v8);
        PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, *URL);
        v13 = (const __CFURL *)MEMORY[0x1B5E27FAC](0, v10, 0, 0, PathComponent);
        v14 = CFURLCopyAbsoluteURL(v13);
        PCURL::PCURL((PCURL *)&v19, v14);
        (*((void (**)(const void **, const __CFURL **))*this + 153))(this, &v19);
        CFRelease(v14);
        CFRelease(PathComponent);
        CFRelease(v13);
        CFRelease(v10);
        if (*((_BYTE *)this + 64456))
          PCURL::operator=(this + 8054, &v19);
LABEL_14:
        PCURL::~PCURL((PCURL *)&v19);
      }
    }
  }
  PCString::~PCString((PCString *)&v20);
  return 1;
}

void sub_1B294F140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, PCString a12)
{
  PCURL::~PCURL((PCURL *)&a10);
  PCURL::~PCURL((PCURL *)&a11);
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXFileLoadingGenerator::parseElement(const void **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  TXFileLoadingGenerator::parseElement(this - 25, a2, a3);
  return 1;
}

{
  TXFileLoadingGenerator::parseElement(this - 31, a2, a3);
  return 1;
}

void TXTextGenerator::TXTextGenerator(TXTextGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  PCSharedCount *v5;

  TXTextLayout::TXTextLayout(this, a2, a3, a4);
  v5->var0 = (PC_Sp_counted_base *)off_1E6504E28;
  v5[25].var0 = (PC_Sp_counted_base *)&unk_1E6505300;
  v5[27].var0 = (PC_Sp_counted_base *)&unk_1E6505BD8;
  v5[31].var0 = (PC_Sp_counted_base *)&off_1E6504E28[513];
  v5[841].var0 = (PC_Sp_counted_base *)&off_1E6504E28[524];
  v5[2372].var0 = (PC_Sp_counted_base *)&off_1E6504E28[551];
  PCSharedCount::PCSharedCount(v5 + 8052);
  *((_BYTE *)this + 64424) = 0;
  *((_DWORD *)this + 13092) = 3;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19048), 8, 0);
}

void sub_1B294F290(_Unwind_Exception *a1)
{
  TXTextLayout *v1;
  PCString *v2;

  PCString::~PCString(v2);
  TXTextLayout::~TXTextLayout(v1);
  _Unwind_Resume(a1);
}

void TXTextGenerator::TXTextGenerator(TXTextGenerator *this, const TXTextGenerator *a2, uint64_t a3)
{
  PCSharedCount *v4;

  TXTextLayout::TXTextLayout(this, a2, a3);
  v4->var0 = (PC_Sp_counted_base *)off_1E6504E28;
  v4[25].var0 = (PC_Sp_counted_base *)&unk_1E6505300;
  v4[27].var0 = (PC_Sp_counted_base *)&unk_1E6505BD8;
  v4[31].var0 = (PC_Sp_counted_base *)&off_1E6504E28[513];
  v4[841].var0 = (PC_Sp_counted_base *)&off_1E6504E28[524];
  v4[2372].var0 = (PC_Sp_counted_base *)&off_1E6504E28[551];
  PCSharedCount::PCSharedCount(v4 + 8052);
  *((_BYTE *)this + 64424) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19048), 8, 0);
}

void sub_1B294F350(_Unwind_Exception *a1)
{
  TXTextLayout *v1;
  PCString *v2;

  PCString::~PCString(v2);
  TXTextLayout::~TXTextLayout(v1);
  _Unwind_Resume(a1);
}

void TXTextGenerator::~TXTextGenerator(PCString *this)
{
  this->var0 = (__CFString *)off_1E6504E28;
  this[25].var0 = (__CFString *)&unk_1E6505300;
  this[27].var0 = (__CFString *)&unk_1E6505BD8;
  this[31].var0 = (__CFString *)&off_1E6504E28[513];
  this[841].var0 = (__CFString *)&off_1E6504E28[524];
  this[2372].var0 = (__CFString *)&off_1E6504E28[551];
  PCString::~PCString(this + 8052);
  TXTextLayout::~TXTextLayout((TXTextLayout *)this);
}

{
  this->var0 = (__CFString *)off_1E6504E28;
  this[25].var0 = (__CFString *)&unk_1E6505300;
  this[27].var0 = (__CFString *)&unk_1E6505BD8;
  this[31].var0 = (__CFString *)&off_1E6504E28[513];
  this[841].var0 = (__CFString *)&off_1E6504E28[524];
  this[2372].var0 = (__CFString *)&off_1E6504E28[551];
  PCString::~PCString(this + 8052);
  TXTextLayout::~TXTextLayout((TXTextLayout *)this);
}

{
  this->var0 = (__CFString *)off_1E6504E28;
  this[25].var0 = (__CFString *)&unk_1E6505300;
  this[27].var0 = (__CFString *)&unk_1E6505BD8;
  this[31].var0 = (__CFString *)&off_1E6504E28[513];
  this[841].var0 = (__CFString *)&off_1E6504E28[524];
  this[2372].var0 = (__CFString *)&off_1E6504E28[551];
  PCString::~PCString(this + 8052);
  TXTextLayout::~TXTextLayout((TXTextLayout *)this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXTextGenerator::~TXTextGenerator(PCString *this)
{
  this->var0 = (__CFString *)&unk_1E6505300;
  this[2].var0 = (__CFString *)&unk_1E6505BD8;
  this[6].var0 = (__CFString *)&off_1E6504E28[513];
  this[816].var0 = (__CFString *)&off_1E6504E28[524];
  this[2347].var0 = (__CFString *)&off_1E6504E28[551];
  this[-25].var0 = (__CFString *)off_1E6504E28;
  PCString::~PCString(this + 8027);
  TXTextLayout::~TXTextLayout((TXTextLayout *)&this[-25]);
}

{
  this[-2].var0 = (__CFString *)&unk_1E6505300;
  this->var0 = (__CFString *)&unk_1E6505BD8;
  this[4].var0 = (__CFString *)&off_1E6504E28[513];
  this[814].var0 = (__CFString *)&off_1E6504E28[524];
  this[2345].var0 = (__CFString *)&off_1E6504E28[551];
  this[-27].var0 = (__CFString *)off_1E6504E28;
  PCString::~PCString(this + 8025);
  TXTextLayout::~TXTextLayout((TXTextLayout *)&this[-27]);
}

{
  this[-6].var0 = (__CFString *)&unk_1E6505300;
  this[-4].var0 = (__CFString *)&unk_1E6505BD8;
  this->var0 = (__CFString *)&off_1E6504E28[513];
  this[810].var0 = (__CFString *)&off_1E6504E28[524];
  this[2341].var0 = (__CFString *)&off_1E6504E28[551];
  this[-31].var0 = (__CFString *)off_1E6504E28;
  PCString::~PCString(this + 8021);
  TXTextLayout::~TXTextLayout((TXTextLayout *)&this[-31]);
}

{
  TXTextLayout *v1;

  v1 = (TXTextLayout *)&this[-841];
  this[-816].var0 = (__CFString *)&unk_1E6505300;
  this[-841].var0 = (__CFString *)off_1E6504E28;
  this[-814].var0 = (__CFString *)&unk_1E6505BD8;
  this[-810].var0 = (__CFString *)&off_1E6504E28[513];
  this->var0 = (__CFString *)&off_1E6504E28[524];
  this[1531].var0 = (__CFString *)&off_1E6504E28[551];
  PCString::~PCString(this + 7211);
  TXTextLayout::~TXTextLayout(v1);
}

{
  TXTextLayout *v1;

  this[-2347].var0 = (__CFString *)&unk_1E6505300;
  this[-2345].var0 = (__CFString *)&unk_1E6505BD8;
  this[-2341].var0 = (__CFString *)&off_1E6504E28[513];
  v1 = (TXTextLayout *)&this[-2372];
  this[-1531].var0 = (__CFString *)&off_1E6504E28[524];
  this[-2372].var0 = (__CFString *)off_1E6504E28;
  this->var0 = (__CFString *)&off_1E6504E28[551];
  PCString::~PCString(this + 5680);
  TXTextLayout::~TXTextLayout(v1);
}

{
  TXTextGenerator::~TXTextGenerator(this - 25);
}

{
  TXTextGenerator::~TXTextGenerator(this - 27);
}

{
  TXTextGenerator::~TXTextGenerator(this - 31);
}

{
  TXTextGenerator::~TXTextGenerator(this - 841);
}

{
  TXTextGenerator::~TXTextGenerator(this - 2372);
}

void `non-virtual thunk to'TXTextGenerator::operator=(uint64_t a1, const void *a2)
{
  TXTextLayout::operator=(a1 - 200, a2);
}

__n128 TXTextGenerator::getNaturalDuration@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[27];
  *a2 = result;
  a2[1].n128_u64[0] = this[28].n128_u64[0];
  return result;
}

__n128 `non-virtual thunk to'TXTextGenerator::getNaturalDuration@<Q0>(TXTextGenerator *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)((char *)this + 216);
  *a2 = result;
  a2[1].n128_u64[0] = *((_QWORD *)this + 29);
  return result;
}

void TXTextGenerator::getOriginalBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1216))(a1, a3);
  TXTextLayout::getOriginalBounds(a1);
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 576))(a1, a3);
  TXTextLayout::getOriginalBounds(a1);
}

void `non-virtual thunk to'TXTextGenerator::getOriginalBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a1 - 200;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 200) + 1216))(a1 - 200, a3);
  TXTextLayout::getOriginalBounds(v3);
}

void TXTextGenerator::prepareForRender(TXTextGenerator *this, const OZRenderState *a2)
{
  (*(void (**)(TXTextGenerator *))(*(_QWORD *)this + 1216))(this);
  TXTextLayout::prepareForRender(this, a2);
}

void `non-virtual thunk to'TXTextGenerator::prepareForRender(TXTextGenerator *this, const OZRenderState *a2)
{
  TXTextLayout *v3;

  v3 = (TXTextGenerator *)((char *)this - 200);
  (*(void (**)(char *))(*((_QWORD *)this - 25) + 1216))((char *)this - 200);
  TXTextLayout::prepareForRender(v3, a2);
}

void TXTextGenerator::prepareForRender(PCString *this, const OZRenderState *a2)
{
  OZScene **v4;
  int v5;
  char *data;
  unsigned int v7;
  PCString v8;
  PCSharedCount v9;
  _BYTE v10[1424];
  CMTime var0;
  _BYTE v12[8];

  v4 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v12, v4);
  var0 = (CMTime)a2->var0;
  OZRenderParams::OZRenderParams((OZRenderParams *)v10);
  OZRenderParams::setState((OZRenderParams *)v10, a2);
  PCSharedCount::PCSharedCount(&v9);
  ((void (*)(PCString *, PCSharedCount *, _BYTE *))this->var0[37].length)(this, &v9, v10);
  if (!LOBYTE(this[8053].var0) || PCString::compare((PCString *)&v9, this + 8052))
  {
    PCString::set(this + 8052, (const PCString *)&v9);
    LOBYTE(this[8053].var0) = 1;
    TXTextLayout::resetState((TXTextLayout *)this);
    TXTextLayout::setString((TXTextLayout *)this, (const PCString *)&v9, 1);
    v5 = PCString::size((PCString *)&v9);
    TXTextLayout::updateStyleRunsAfterTextInsert((uint64_t)this, 0, v5);
    TXTextLayout::updateDisplayString(this, &var0);
    data = this[2422].var0->data;
    TXTextLayout::getDisplayString(this, &v8);
    v7 = PCString::size(&v8);
    *((_DWORD *)data + 6) = 0;
    *((_DWORD *)data + 7) = v7;
    PCString::~PCString(&v8);
    TXTextLayout::rebuildParagraphStyles(this);
    TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
    TXTextLayout::doLayout((TXTextLayout *)this, a2, 0);
  }
  PCString::~PCString((PCString *)&v9);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v10);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v12);
}

void sub_1B294FA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11)
{
  uint64_t v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a11);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v11 - 40));
  _Unwind_Resume(a1);
}

void TXTextGenerator::didAddToScene(TXTextGenerator *this, OZScene *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  CGColorSpace *v8;
  PCString v9;
  __int128 v10;
  uint64_t v11;

  TXTextLayout::didAddToScene(this, a2);
  v10 = *MEMORY[0x1E0CA2E68];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  if (a2)
  {
    OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v4, (OZScene *)((char *)a2 + 336));
    v10 = *((_OWORD *)a2 + 86);
    v11 = *((_QWORD *)a2 + 174);
    *(_QWORD *)&v4 = &off_1E658F368;
    PCString::~PCString(&v9);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
  }
  v5 = *((_QWORD *)this + 53);
  v4 = *(_OWORD *)((char *)this + 408);
  v6 = v10;
  v7 = v11;
  OZChannelObjectRootBase::setTimeExtent((TXTextGenerator *)((char *)this + 256), (const PCTimeRange *)&v4, 0);
  TXTextLayout::didFinishInitializing(this, 0);
}

void `non-virtual thunk to'TXTextGenerator::didAddToScene(TXTextGenerator *this, OZScene *a2)
{
  TXTextGenerator::didAddToScene((TXTextGenerator *)((char *)this - 200), a2);
}

double TXTextGenerator::calcHashForState(Li3DEngineScene *a1, const void *a2, OZRenderParams *a3, uint64_t **a4)
{
  OZScene **v8;
  int8x8_t *v9;
  int8x8_t *v10;
  _QWORD *v11;
  _QWORD *i;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int8x8_t *Hash;
  double result;
  __int128 v21;
  PCSharedCount v22;
  std::__shared_weak_count *v23;
  __n128 v24;

  (*(void (**)(_QWORD *, const void *, OZRenderParams *, uint64_t **, uint64_t))(*((_QWORD *)a1 + 25) + 536))((_QWORD *)a1 + 25, a2, a3, a4, 1);
  v8 = (OZScene **)Li3DEngineScene::sceneManager(a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v24, v8);
  PCSharedCount::PCSharedCount(&v22);
  (*(void (**)(Li3DEngineScene *, PCSharedCount *, OZRenderParams *))(*(_QWORD *)a1 + 1208))(a1, &v22, a3);
  (*(void (**)(const void *, PCSharedCount *))(*(_QWORD *)a2 + 104))(a2, &v22);
  PCString::~PCString((PCString *)&v22);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v24);
  if (!v9)
    __cxa_bad_cast();
  v10 = v9;
  v24 = *(__n128 *)PCHashWriteStream::getHash(v9)->i8;
  (*(void (**)(const void *))(*(_QWORD *)a2 + 40))(a2);
  v11 = (_QWORD *)((char *)a1 + 19344);
  for (i = (_QWORD *)*((_QWORD *)a1 + 2419); i != v11; i = (_QWORD *)i[1])
  {
    v13 = i[2];
    v14 = (std::__shared_weak_count *)i[3];
    v22.var0 = (PC_Sp_counted_base *)v13;
    v23 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    OZObjectManipulator::getHashForState((_OWORD *)(v13 + 16), a2, a3, a4, &v21);
    PCHash128::operator+=((int *)&v24, (int *)&v21);
    if (v14)
    {
      v17 = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  Hash = PCHashWriteStream::getHash(v10);
  PCHash128::operator+=((int *)&v24, (int *)Hash);
  *(_QWORD *)&result = PCHashWriteStream::setHash((__n128 *)v10, &v24).n128_u64[0];
  return result;
}

void sub_1B294FCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, char a13)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a13);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'TXTextGenerator::calcHashForState(uint64_t a1, const void *a2, OZRenderParams *a3, uint64_t **a4)
{
  return TXTextGenerator::calcHashForState((Li3DEngineScene *)(a1 - 200), a2, a3, a4);
}

{
  return TXTextGenerator::calcHashForState((Li3DEngineScene *)(a1 - 216), a2, a3, a4);
}

void TXTextGenerator::updateDisplayStringAndAffectedState(PCString *this, const CMTime *a2)
{
  char *data;
  unsigned int v4;
  PCString v5;

  TXTextLayout::updateDisplayStringAndAffectedState(this, a2);
  data = this[2422].var0->data;
  TXTextLayout::getDisplayString(this, &v5);
  v4 = PCString::size(&v5);
  *((_DWORD *)data + 6) = 0;
  *((_DWORD *)data + 7) = v4;
  PCString::~PCString(&v5);
}

void sub_1B294FD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void TXNumberGenerator::TXNumberGenerator(TXNumberGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  uint64_t v6;
  id v7;
  OZPreferenceManager *v8;
  double FirstFrameNumber;
  uint64_t v10;
  PCString v11;
  PCString v12;

  TXTextGenerator::TXTextGenerator(this, a2, a3, a4);
  *v5 = off_1E6505FA0;
  v5[25] = &unk_1E6506480;
  v5[27] = &unk_1E6506D58;
  v5[31] = &off_1E6505FA0[514];
  v5[841] = &off_1E6505FA0[525];
  v5[2372] = &off_1E6505FA0[552];
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Name"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 64432), &v12, (OZChannelFolder *)((char *)this + 648), 0x201u, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Animate"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 64560), 1, &v12, (OZChannelFolder *)((char *)this + 64432), 0x1F7u, 0, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Value"));
  OZChannelDouble::OZChannelDouble((TXNumberGenerator *)((char *)this + 64712), &v12, (OZChannelFolder *)((char *)this + 64432), 0x1F4u, 0, 0, 0);
  v10 = v6;
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Start"));
  OZChannelDouble::OZChannelDouble((TXNumberGenerator *)((char *)this + 64864), &v12, (OZChannelFolder *)((char *)this + 64432), 0x1FAu, 0, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator End"));
  OZChannelDouble::OZChannelDouble((TXNumberGenerator *)((char *)this + 65016), &v12, (OZChannelFolder *)((char *)this + 64432), 0x1FBu, 0, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Style Enum"));
  PCURL::PCURL((PCURL *)&v11, CFSTR("Text Number Generator Style"));
  OZChannelEnum::OZChannelEnum((TXNumberGenerator *)((char *)this + 65168), &v12, &v11, (OZChannelFolder *)((char *)this + 64432), 0x1F5u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Precision"));
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 65424), 0, &v12, (OZChannelFolder *)((char *)this + 64432), 0x1F8u, 0, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Minimum Digits"));
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 65576), 0, &v12, (OZChannelFolder *)((char *)this + 64432), 0x1FFu, 0, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Thousands Separator"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65728), 1, &v12, (OZChannelFolder *)((char *)this + 64432), 0x1FCu, 0, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Capitalize"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65880), 0, &v12, (OZChannelFolder *)((char *)this + 64432), 0x1FEu, 0, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Random"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 66032), &v12, (OZChannelFolder *)((char *)this + 64432), 0x1F6u, 0, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Random Seed"));
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 66184), &v12, (OZChannelFolder *)((char *)this + 64432), 0x1F9u, 0, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Random Hold Frame"));
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 66336), &v12, (OZChannelFolder *)((char *)this + 64432), 0x200u, 0, 0, 0);
  PCString::~PCString(&v12);
  *((_QWORD *)this + 8311) = 0;
  *((_BYTE *)this + 66496) = 0;
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Number Generator Name"));
  (*(void (**)(TXNumberGenerator *, PCString *, _QWORD))(*(_QWORD *)this + 536))(this, &v12, 0);
  PCString::~PCString(&v12);
  TXTextLayout::setLocale(this, (CFTypeRef)objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale", (char *)this + 66032, (char *)this + 65880, (char *)this + 65168, v10, (char *)this + 64560));
  v7 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  *((_QWORD *)this + 8311) = v7;
  v8 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)objc_msgSend(v7, "setFormatterBehavior:", 1040));
  FirstFrameNumber = OZPreferenceManager::getFirstFrameNumber(v8);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 64864), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 64864), FirstFrameNumber);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 64864), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 65016), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 65424), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 65424), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 65424), 10.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 65576), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 65576), 1.0);
  OZChannel::setMax((OZChannel *)((char *)this + 65576), 10.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 66336), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 66336), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 66336), 1000.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 65728), 0);
}

void sub_1B295039C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelBool *a9, OZChannelBool *a10, OZChannelEnum *a11, OZChannel *a12, OZChannelBool *a13, OZChannel *a14, PCString a15, PCString a16)
{
  PCString *v16;
  OZChannelFolder *v17;
  OZChannel *v18;
  OZChannel *v19;
  OZChannel *v20;
  OZChannel *v21;
  OZChannel *v22;
  OZChannelBool *v23;

  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v20);
  OZChannelBool::~OZChannelBool(a9);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelBool::~OZChannelBool(v23);
  OZChannel::~OZChannel(v22);
  OZChannel::~OZChannel(v21);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(v18);
  OZChannel::~OZChannel(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannelFolder::~OZChannelFolder(v17);
  TXTextGenerator::~TXTextGenerator(v16);
  _Unwind_Resume(a1);
}

void TXNumberGenerator::TXNumberGenerator(TXNumberGenerator *this, const TXNumberGenerator *a2, uint64_t a3)
{
  uint64_t v5;
  OZChannelFolder *v6;
  uint64_t v7;
  id v8;
  OZChannelEnum *v9;
  uint64_t v10;

  TXTextGenerator::TXTextGenerator(this, a2, a3);
  *(_QWORD *)v5 = off_1E6505FA0;
  *(_QWORD *)(v5 + 200) = &unk_1E6506480;
  *(_QWORD *)(v5 + 216) = &unk_1E6506D58;
  *(_QWORD *)(v5 + 248) = &off_1E6505FA0[514];
  *(_QWORD *)(v5 + 6728) = &off_1E6505FA0[525];
  *(_QWORD *)(v5 + 18976) = &off_1E6505FA0[552];
  v6 = (OZChannelFolder *)(v5 + 64432);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 64432), (const OZChannelFolder *)((char *)a2 + 64432), (OZChannelFolder *)(v5 + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 64560), (const OZChannelBase *)((char *)a2 + 64560), v6);
  v10 = v7;
  OZChannel::OZChannel((OZChannel *)((char *)this + 64712), (const OZChannelBase *)((char *)a2 + 64712), v6);
  *((_QWORD *)this + 8089) = &off_1E6551358;
  *((_QWORD *)this + 8091) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 64864), (const OZChannelBase *)((char *)a2 + 64864), v6);
  *((_QWORD *)this + 8108) = &off_1E6551358;
  *((_QWORD *)this + 8110) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 65016), (const OZChannelBase *)((char *)a2 + 65016), v6);
  *((_QWORD *)this + 8127) = &off_1E6551358;
  *((_QWORD *)this + 8129) = &unk_1E65516B8;
  v9 = OZChannelEnum::OZChannelEnum((TXNumberGenerator *)((char *)this + 65168), (const TXNumberGenerator *)((char *)a2 + 65168), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 65424), (const OZChannelBase *)((char *)a2 + 65424), v6);
  *((_QWORD *)this + 8178) = &off_1E6551AF8;
  *((_QWORD *)this + 8180) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 65576), (const OZChannelBase *)((char *)a2 + 65576), v6);
  *((_QWORD *)this + 8197) = &off_1E6551AF8;
  *((_QWORD *)this + 8199) = &unk_1E6551E58;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65728), (const OZChannelBase *)((char *)a2 + 65728), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65880), (const OZChannelBase *)((char *)a2 + 65880), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 66032), (const OZChannelBase *)((char *)a2 + 66032), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 66184), (const OZChannelBase *)((char *)a2 + 66184), v6);
  *((_QWORD *)this + 8273) = &off_1E65531D8;
  *((_QWORD *)this + 8275) = &unk_1E6553538;
  OZChannel::OZChannel((OZChannel *)((char *)this + 66336), (const OZChannelBase *)((char *)a2 + 66336), v6);
  *((_QWORD *)this + 8292) = &off_1E6551AF8;
  *((_QWORD *)this + 8294) = &unk_1E6551E58;
  *((_QWORD *)this + 8311) = 0;
  *((_BYTE *)this + 66496) = *((_BYTE *)a2 + 66496);
  TXTextLayout::setLocale(this, *((CFTypeRef *)a2 + 8051));
  v8 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  *((_QWORD *)this + 8311) = v8;
  objc_msgSend(v8, "setFormatterBehavior:", 1040, (char *)this + 65880, (char *)this + 65728, (char *)this + 65576, v9, (char *)this + 64864, v10);
}

void sub_1B295081C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelBool *a9, OZChannelBool *a10, OZChannel *a11, OZChannelEnum *a12, OZChannel *a13, OZChannelBool *a14)
{
  PCString *v14;
  OZChannelFolder *v15;
  OZChannel *v16;
  OZChannel *v17;
  OZChannelBool *v18;
  OZChannel *v19;
  OZChannel *v20;

  OZChannel::~OZChannel(v20);
  OZChannelBool::~OZChannelBool(v18);
  OZChannelBool::~OZChannelBool(a9);
  OZChannelBool::~OZChannelBool(a10);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(v19);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(v16);
  OZChannelBool::~OZChannelBool(a14);
  OZChannelFolder::~OZChannelFolder(v15);
  TXTextGenerator::~TXTextGenerator(v14);
  _Unwind_Resume(a1);
}

void TXNumberGenerator::~TXNumberGenerator(TXNumberGenerator *this)
{
  *(_QWORD *)this = off_1E6505FA0;
  *((_QWORD *)this + 25) = &unk_1E6506480;
  *((_QWORD *)this + 27) = &unk_1E6506D58;
  *((_QWORD *)this + 31) = &off_1E6505FA0[514];
  *((_QWORD *)this + 841) = &off_1E6505FA0[525];
  *((_QWORD *)this + 2372) = &off_1E6505FA0[552];

  OZChannel::~OZChannel((OZChannel *)((char *)this + 66336));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 66184));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 66032));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 65880));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 65728));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 65576));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 65424));
  OZChannelEnum::~OZChannelEnum((TXNumberGenerator *)((char *)this + 65168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 65016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64864));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64712));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 64560));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 64432));
  TXTextGenerator::~TXTextGenerator((PCString *)this);
}

{
  TXNumberGenerator::~TXNumberGenerator(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXNumberGenerator::~TXNumberGenerator(TXNumberGenerator *this)
{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 200));
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 216));
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 248));
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 6728));
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 18976));
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 200));
  JUMPOUT(0x1B5E29170);
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 216));
  JUMPOUT(0x1B5E29170);
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 248));
  JUMPOUT(0x1B5E29170);
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 6728));
  JUMPOUT(0x1B5E29170);
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 18976));
  JUMPOUT(0x1B5E29170);
}

CFTypeRef *TXNumberGenerator::operator=(TXTextLayout *a1, const void *a2)
{
  CFTypeRef *result;

  TXTextGenerator::operator=(a1);
  if (result)
    return (CFTypeRef *)TXTextLayout::setLocale(a1, result[8051]);
  return result;
}

CFTypeRef *`non-virtual thunk to'TXNumberGenerator::operator=(uint64_t a1, const void *a2)
{
  return TXNumberGenerator::operator=((TXTextLayout *)(a1 - 200), a2);
}

uint64_t TXNumberGenerator::generateString(TXNumberGenerator *this, PCString *a2, CMTime *a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t result;
  char *v12;
  const CMTime *v13;
  uint64_t ValueAsInt;
  uint64_t v15;
  const CMTime *v16;
  unsigned int v17;
  unsigned int v18;
  OZSceneSettings *v19;
  unsigned int Seconds;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  const CMTime *v27;
  double v28;
  double v29;
  double v30;
  int v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  double v35;
  const CMTime *v36;
  double v37;
  double v38;
  double v39;
  const CMTime *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  char v48;
  UniChar *UniStr;
  void *v50;
  void *v51;
  const __CFString *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t i;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  CMTime v68;
  CMTime time;
  CMTime v70;
  __n128 v71;
  CMTimeEpoch v72;
  __n128 v73;
  CMTimeEpoch v74;
  CMTime v75;
  __n128 v76;
  CMTimeEpoch v77;
  CMTime v78;
  CMTime v79;
  CMTime v80;
  CMTime v81;
  CMTime time2;
  CMTime time1;

  v6 = (char *)this + 200;
  v5 = *((_QWORD *)this + 25);
  v79 = *a3;
  v7 = (*(uint64_t (**)(char *))(v5 + 640))((char *)this + 200);
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v7 + 712))(&v76);
  v8 = (*(uint64_t (**)(char *))(*(_QWORD *)v6 + 272))(v6);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v73);
  time1 = v79;
  *(__n128 *)&time2.value = v73;
  time2.epoch = v74;
  v9 = PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v75);
  v10 = (*(uint64_t (**)(char *, __n128))(*(_QWORD *)v6 + 272))(v6, v9);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v71);
  *(__n128 *)&time1.value = v76;
  time1.epoch = v77;
  time2 = v75;
  result = CMTimeCompare(&time1, &time2);
  if ((int)result <= 0)
  {
    *(__n128 *)&time1.value = v76;
    time1.epoch = v77;
    time2 = v78;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v81);
    time1 = v81;
    *(__n128 *)&time2.value = v71;
    time2.epoch = v72;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v80);
    time1 = v75;
    time2 = v80;
    result = CMTimeCompare(&time1, &time2);
    if ((int)result <= 0 || (v78.flags & 1) != 0 && (v78.flags & 0x10) != 0)
    {
      v12 = v6 + 64208;
      TXNumberGenerator::updateFormatter(this);
      v13 = (const CMTime *)MEMORY[0x1E0CA2E68];
      ValueAsInt = (int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 65424), MEMORY[0x1E0CA2E68], 0.0);
      v15 = (int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 65576), v13, 0.0);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 64560), v13, 0.0))
      {
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 66032), MEMORY[0x1E0CA2E68], 0.0))
        {
          v16 = (const CMTime *)MEMORY[0x1E0CA2E68];
          v17 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 66184), MEMORY[0x1E0CA2E68], 0.0);
          v18 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 66336), v16, 0.0);
          v19 = (OZSceneSettings *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))(v6) + 336);
          OZSceneSettings::getFrameDuration(v19, &v76);
          if (v18)
          {
            operator/((__int128 *)&v79.value, (uint64_t)&v76, (uint64_t)&time);
            Seconds = CMTimeGetSeconds(&time) / v18;
          }
          else
          {
            operator/((__int128 *)&v79.value, (uint64_t)&v76, (uint64_t)&v70);
            Seconds = CMTimeGetSeconds(&v70);
          }
          v31 = -32;
          v32 = -1640531527;
          v33 = v17;
          do
          {
            v17 += (Seconds + 16 * v33) ^ (v33 + v32) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                       + (v33 >> 5));
            v33 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v17) ^ (v32 + v17) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v17 >> 5));
            v32 -= 1640531527;
            v34 = __CFADD__(v31++, 1);
          }
          while (!v34);
          v35 = (double)(int)(v33 ^ v17) / 2147483650.0;
          v36 = (const CMTime *)MEMORY[0x1E0CA2E68];
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 64864), MEMORY[0x1E0CA2E68], 0.0);
          v29 = v37;
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 65016), v36, 0.0);
          v39 = (v35 + 1.0) * 0.5 * (v38 - v29);
        }
        else
        {
          (*(void (**)(__n128 *__return_ptr, char *))(*((_QWORD *)this + 25) + 1128))(&v76, v6);
          *(__n128 *)&time2.value = v76;
          time2.epoch = v77;
          time1 = v79;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v81);
          v75 = v78;
          v23 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))(v6);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v23 + 336), &v73);
          time1 = v75;
          *(__n128 *)&time2.value = v73;
          time2.epoch = v74;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v80);
          operator/((__int128 *)&v81.value, (uint64_t)&v80, (uint64_t)&v68);
          v24 = CMTimeGetSeconds(&v68);
          v25 = 1.0;
          if (v24 <= 1.0)
            v25 = v24;
          if (v24 >= 0.0)
            v26 = v25;
          else
            v26 = 0.0;
          v27 = (const CMTime *)MEMORY[0x1E0CA2E68];
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 64864), MEMORY[0x1E0CA2E68], 0.0);
          v29 = v28;
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 65016), v27, 0.0);
          if (!(_DWORD)ValueAsInt)
          {
            if (v30 <= v29)
              v29 = v29 + 0.9999;
            else
              v30 = v30 + 0.9999;
          }
          v39 = v26 * (v30 - v29);
        }
        v22 = v29 + v39;
      }
      else
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 64712), &v79, 0.0);
        v22 = v21;
      }
      v40 = (const CMTime *)MEMORY[0x1E0CA2E68];
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65168), MEMORY[0x1E0CA2E68], 0.0) == 2)
        v22 = v22 / 100.0;
      if ((_DWORD)ValueAsInt)
        v41 = 6;
      else
        v41 = 1;
      if ((_DWORD)ValueAsInt)
        v42 = ValueAsInt + 1;
      else
        v42 = 0;
      objc_msgSend(*((id *)v12 + 260), "setGeneratesDecimalNumbers:", (_DWORD)ValueAsInt != 0);
      objc_msgSend(*((id *)v12 + 260), "setMaximumFractionDigits:", ValueAsInt);
      objc_msgSend(*((id *)v12 + 260), "setMinimumFractionDigits:", ValueAsInt);
      objc_msgSend(*((id *)v12 + 260), "setRoundingMode:", v41);
      objc_msgSend(*((id *)v12 + 260), "setUsesGroupingSeparator:", OZChannel::getValueAsInt((OZChannel *)((char *)this + 65728), v40, 0.0) != 0);
      objc_msgSend(*((id *)v12 + 260), "setGroupingSize:", 3);
      objc_msgSend(*((id *)v12 + 260), "setPaddingCharacter:", CFSTR("0"));
      objc_msgSend(*((id *)v12 + 260), "setFormatWidth:", v42 + v15);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65168), v40, 0.0) == 6)
      {
        v43 = (uint64_t)v22;
        PCString::PCString((PCString *)&v76, "0x");
        BYTE1(time1.value) = 0;
        v44 = -8;
        do
        {
          v45 = (v43 >> 28) | 0x30;
          if (v43 >> 29 > 4)
            LOBYTE(v45) = (v43 >> 28) + 55;
          LOBYTE(time1.value) = v45;
          PCString::append((PCString *)&v76, (const char *)&time1);
          LODWORD(v43) = 16 * v43;
          v34 = __CFADD__(v44++, 1);
        }
        while (!v34);
        goto LABEL_49;
      }
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65168), MEMORY[0x1E0CA2E68], 0.0) == 5)
      {
        v46 = (uint64_t)v22;
        PCSharedCount::PCSharedCount((PCSharedCount *)&v76);
        BYTE1(time1.value) = 0;
        v47 = -32;
        do
        {
          if ((int)v46 >= 0)
            v48 = 48;
          else
            v48 = 49;
          LOBYTE(time1.value) = v48;
          PCString::append((PCString *)&v76, (const char *)&time1);
          LODWORD(v46) = 2 * v46;
          v34 = __CFADD__(v47++, 1);
        }
        while (!v34);
LABEL_49:
        UniStr = PCString::createUniStr((PCString *)&v76);
        PCString::~PCString((PCString *)&v76);
        result = (uint64_t)PCString::set(a2, UniStr);
        if (!UniStr)
          return result;
        return MEMORY[0x1B5E2914C](UniStr, 0x1000C80BDFB0063);
      }
      v50 = (void *)objc_msgSend(*((id *)v12 + 260), "stringFromNumber:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v22));
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65880), MEMORY[0x1E0CA2E68], 0.0))
        v50 = (void *)objc_msgSend(v50, "capitalizedString");
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65168), MEMORY[0x1E0CA2E68], 0.0) != 4)
        goto LABEL_76;
      v51 = (void *)MEMORY[0x1B5E27CDC](*(_QWORD *)v12);
      if ((objc_msgSend(v51, "hasPrefix:", CFSTR("en_")) & 1) != 0)
        goto LABEL_55;
      if ((objc_msgSend(v51, "hasPrefix:", CFSTR("es_")) & 1) != 0)
      {
        v52 = CFSTR("punto");
      }
      else if ((objc_msgSend(v51, "hasPrefix:", CFSTR("de_")) & 1) != 0)
      {
        v52 = CFSTR("komma");
      }
      else
      {
        if ((objc_msgSend(v51, "hasPrefix:", CFSTR("fr_")) & 1) == 0)
        {
          if (objc_msgSend(v51, "hasPrefix:", CFSTR("ja_")))
          {
            v52 = (const __CFString *)TXNumberGenerator::generateString(PCString &,OZRenderParams const&)::middleDot;
            if (!TXNumberGenerator::generateString(PCString &,OZRenderParams const&)::middleDot)
            {
              v52 = (const __CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharacters:length:", &TXNumberGenerator::generateString(PCString &,OZRenderParams const&)::uMiddleDot, 1);
              TXNumberGenerator::generateString(PCString &,OZRenderParams const&)::middleDot = (uint64_t)v52;
            }
            v63 = objc_msgSend(v50, "rangeOfString:", v52);
            if (v63 == 0x7FFFFFFFFFFFFFFFLL)
              goto LABEL_76;
            v65 = v63;
            v66 = v64;
            v57 = (void *)objc_msgSend(v50, "substringToIndex:", v63);
            if ((_DWORD)ValueAsInt)
            {
              v59 = v65 + v66;
              v60 = objc_msgSend(v50, "length") - v59;
LABEL_65:
              v61 = (void *)objc_msgSend((id)objc_msgSend(v50, "substringWithRange:", v59, v60), "componentsSeparatedByString:", CFSTR(" "));
              v50 = (void *)objc_msgSend((id)objc_msgSend(v57, "stringByAppendingString:", CFSTR(" ")), "stringByAppendingString:", v52);
              for (i = 0; i != ValueAsInt; ++i)
              {
                if (i >= objc_msgSend(v61, "count"))
                  break;
                v50 = (void *)objc_msgSend(v50, "stringByAppendingFormat:", CFSTR(" %@"), objc_msgSend(v61, "objectAtIndex:", i));
              }
              goto LABEL_76;
            }
            goto LABEL_75;
          }
LABEL_55:
          v52 = CFSTR("point");
          goto LABEL_62;
        }
        v52 = CFSTR("virgule");
      }
LABEL_62:
      v53 = objc_msgSend(v50, "rangeOfString:", v52);
      if (v53 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v55 = v53;
        v56 = v54;
        v57 = (void *)objc_msgSend(v50, "substringToIndex:", v53 - 1);
        if ((_DWORD)ValueAsInt)
        {
          v58 = v55 + v56;
          v59 = v58 + 1;
          v60 = objc_msgSend(v50, "length") + ~v58;
          goto LABEL_65;
        }
LABEL_75:
        v50 = v57;
      }
LABEL_76:
      v67 = objc_msgSend(v50, "length");
      UniStr = (UniChar *)operator new[]();
      objc_msgSend(v50, "getCharacters:", UniStr);
      UniStr[v67] = 0;
      PCString::set(a2, UniStr);
      return MEMORY[0x1B5E2914C](UniStr, 0x1000C80BDFB0063);
    }
  }
  return result;
}

