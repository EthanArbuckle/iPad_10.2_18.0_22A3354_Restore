void OZSpline::scaleTangentsAfterInsertion(OZSpline *this, char *a2, const CMTime *a3, const CMTime *a4)
{
  CMTime *v8;
  void *v9;
  double Seconds;
  double v11;
  _BYTE **v12;
  void **v13;
  uint64_t v14;
  double v15;
  double v16;
  _BYTE **v17;
  void **v18;
  uint64_t v19;
  void **v20;
  int32_t v21;
  double v22;
  CMTime *v23;
  double v24;
  double v25;
  int32_t v26;
  double v27;
  CMTime *v28;
  double v29;
  double v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime time;
  CMTime v41;
  CMTime v42;
  CMTime v43;
  CMTime v44;
  void *v45;
  void *v46;
  CMTime v47;
  CMTime v48;
  double v49;
  double v50;
  CMTime time2;
  CMTime time1;

  v49 = 0.0;
  v50 = 0.0;
  v48 = *(CMTime *)(a2 + 16);
  memset(&v47, 0, sizeof(v47));
  time1 = *(CMTime *)(a2 + 16);
  time2 = *a3;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v47);
  v45 = 0;
  v46 = 0;
  v8 = (CMTime *)MEMORY[0x1E0CA2E68];
  OZSpline::getPreviousValidVertex(this, a2, &v46, MEMORY[0x1E0CA2E68]);
  OZSpline::getNextValidVertex((void ***)this, a2, &v45, v8);
  if (!*(_BYTE *)(*((_QWORD *)this + 21) + 2))
    return;
  time1 = *a3;
  time2 = *v8;
  if (!CMTimeCompare(&time1, &time2))
    return;
  v9 = v46;
  if (v46 && v45)
  {
    memset(&v44, 0, sizeof(v44));
    v43 = *(CMTime *)((char *)v45 + 16);
    v42 = *(CMTime *)((char *)v46 + 16);
    time1 = v43;
    time2 = v42;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
    v42 = *(CMTime *)((char *)v46 + 16);
    time1 = v48;
    time2 = v42;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v43);
    time1 = v43;
    time2 = *v8;
    if (CMTimeCompare(&time1, &time2))
    {
      v42 = *(CMTime *)((char *)v46 + 16);
      time1 = v48;
      time2 = v42;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v43);
      operator/((__int128 *)&v43.value, (uint64_t)&v44, (uint64_t)&time);
      Seconds = CMTimeGetSeconds(&time);
    }
    else
    {
      v41 = v44;
      Seconds = 1.0 / CMTimeGetSeconds(&v41);
    }
    v11 = fabs(Seconds);
    v12 = (_BYTE **)v46;
    if (v46)
    {
      do
      {
        v43 = *(CMTime *)(v12 + 2);
        v42 = *(CMTime *)((char *)v46 + 16);
        time1 = v43;
        time2 = v42;
        if (CMTimeCompare(&time1, &time2))
          break;
        (*((void (**)(_BYTE **, double *, double *, const CMTime *))*v12 + 8))(v12, &v50, &v49, a4);
        (*((void (**)(_BYTE **, const CMTime *, double, double))*v12 + 10))(v12, a4, v11 * v50, v11 * v49);
        v13 = OZSpline::getVertexIter(this, v12) + 1;
        do
          v14 = (uint64_t)*v13++;
        while (((*(uint64_t (**)(uint64_t, const CMTime *))(*(_QWORD *)v14 + 136))(v14, a4) & 1) == 0);
        v12 = (_BYTE **)*(v13 - 1);
      }
      while (v12);
    }
    v42 = *(CMTime *)((char *)v45 + 16);
    v39 = *(CMTime *)((char *)v46 + 16);
    time1 = v42;
    time2 = v39;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v43);
    v44 = v43;
    v42 = *(CMTime *)((char *)v45 + 16);
    time1 = v48;
    time2 = v42;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v43);
    time1 = v43;
    time2 = *v8;
    if (CMTimeCompare(&time1, &time2))
    {
      v42 = *(CMTime *)((char *)v45 + 16);
      time1 = v48;
      time2 = v42;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v43);
      operator/((__int128 *)&v43.value, (uint64_t)&v44, (uint64_t)&v37);
      v15 = CMTimeGetSeconds(&v37);
    }
    else
    {
      v38 = v44;
      v15 = 1.0 / CMTimeGetSeconds(&v38);
    }
    v16 = fabs(v15);
    v17 = (_BYTE **)v45;
    if (v45)
    {
LABEL_17:
      v43 = *(CMTime *)(v17 + 2);
      v42 = *(CMTime *)((char *)v45 + 16);
      time1 = v43;
      time2 = v42;
      if (!CMTimeCompare(&time1, &time2))
      {
        (*((void (**)(_BYTE **, double *, double *, const CMTime *))*v17 + 7))(v17, &v50, &v49, a4);
        (*((void (**)(_BYTE **, const CMTime *, double, double))*v17 + 9))(v17, a4, v16 * v50, v16 * v49);
        v18 = OZSpline::getVertexIter(this, v17) + 1;
        while (v18 != *((void ***)this + 6))
        {
          v19 = (uint64_t)*v18++;
          if ((*(unsigned int (**)(uint64_t, const CMTime *))(*(_QWORD *)v19 + 136))(v19, a4))
          {
            v20 = v18 - 1;
            if (v18 - 1 != *((void ***)this + 6))
            {
              v17 = (_BYTE **)*v20;
              if (*v20)
                goto LABEL_17;
            }
            break;
          }
        }
      }
    }
    v9 = v46;
  }
  if (v9)
  {
    (*(void (**)(char *, double *, double *, const CMTime *))(*(_QWORD *)a2 + 56))(a2, &v50, &v49, a4);
    if (fabs(v50) >= 0.0000001)
    {
      v43 = *(CMTime *)((char *)v46 + 16);
      time1 = v47;
      time2 = v43;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
      time1 = v44;
      time2 = *v8;
      if (CMTimeCompare(&time1, &time2))
      {
        if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)a2 + 184))(a2, 256))
        {
          v43 = *(CMTime *)((char *)v46 + 16);
          time1 = v48;
          time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          time1 = v44;
          time2 = *v8;
          v21 = CMTimeCompare(&time1, &time2);
          v22 = 0.0277777778 / v50;
          if (!v21)
          {
            v25 = fabs(v22);
LABEL_36:
            (*(void (**)(char *, const CMTime *, double, double))(*(_QWORD *)a2 + 72))(a2, a4, v25 * v50, v25 * v49);
            goto LABEL_37;
          }
          v43 = *(CMTime *)((char *)v46 + 16);
          time1 = v48;
          time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          operator*(&v44, &v36, v22);
          v23 = &v36;
        }
        else
        {
          v43 = *(CMTime *)((char *)v46 + 16);
          time1 = v48;
          time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          time1 = v44;
          time2 = *v8;
          if (!CMTimeCompare(&time1, &time2))
          {
            v44 = *(CMTime *)((char *)v46 + 16);
            time1 = v47;
            time2 = v44;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v35);
            v24 = 1.0 / CMTimeGetSeconds(&v35);
            goto LABEL_35;
          }
          v43 = *(CMTime *)((char *)v46 + 16);
          time1 = v48;
          time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          v39 = *(CMTime *)((char *)v46 + 16);
          time1 = v47;
          time2 = v39;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v42);
          operator/((__int128 *)&v44.value, (uint64_t)&v42, (uint64_t)&v34);
          v23 = &v34;
        }
        v24 = CMTimeGetSeconds(v23);
LABEL_35:
        v25 = fabs(v24);
        goto LABEL_36;
      }
    }
  }
LABEL_37:
  if (v45)
  {
    (*(void (**)(char *, double *, double *, const CMTime *))(*(_QWORD *)a2 + 64))(a2, &v50, &v49, a4);
    if (fabs(v50) >= 0.0000001)
    {
      v43 = *(CMTime *)((char *)v45 + 16);
      time1 = v47;
      time2 = v43;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
      time1 = v44;
      time2 = *v8;
      if (CMTimeCompare(&time1, &time2))
      {
        if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)a2 + 184))(a2, 256))
        {
          v43 = *(CMTime *)((char *)v45 + 16);
          time1 = v48;
          time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          time1 = v44;
          time2 = *v8;
          v26 = CMTimeCompare(&time1, &time2);
          v27 = 0.0277777778 / v50;
          if (!v26)
          {
            v30 = fabs(v27);
LABEL_49:
            (*(void (**)(char *, const CMTime *, double, double))(*(_QWORD *)a2 + 80))(a2, a4, v30 * v50, v30 * v49);
            return;
          }
          v43 = *(CMTime *)((char *)v45 + 16);
          time1 = v48;
          time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          operator*(&v44, &v33, v27);
          v28 = &v33;
        }
        else
        {
          v43 = *(CMTime *)((char *)v45 + 16);
          time1 = v48;
          time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          time1 = v44;
          time2 = *v8;
          if (!CMTimeCompare(&time1, &time2))
          {
            v44 = *(CMTime *)((char *)v45 + 16);
            time1 = v47;
            time2 = v44;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v32);
            v29 = 1.0 / CMTimeGetSeconds(&v32);
            goto LABEL_48;
          }
          v43 = *(CMTime *)((char *)v45 + 16);
          time1 = v48;
          time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          v39 = *(CMTime *)((char *)v45 + 16);
          time1 = v47;
          time2 = v39;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v42);
          operator/((__int128 *)&v44.value, (uint64_t)&v42, (uint64_t)&v31);
          v28 = &v31;
        }
        v29 = CMTimeGetSeconds(v28);
LABEL_48:
        v30 = fabs(v29);
        goto LABEL_49;
      }
    }
  }
}

OZSpline *OZSpline::scaleTangentsBeforeDeletion(OZSpline *this, _BYTE **a2, const CMTime *a3)
{
  uint64_t v5;
  const CMTime *v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  double v10;
  double v11;
  Float64 v12;
  double v13;
  Float64 v14;
  double v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime time;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  __int128 v27;
  uint64_t v28;
  CMTime v29;
  CMTime v30;

  v25 = 0.0;
  v26 = 0.0;
  if (!*(_BYTE *)(*((_QWORD *)this + 21) + 2))
    return this;
  v5 = (uint64_t)this;
  v24 = 0;
  v23 = 0;
  v22 = *(CMTime *)(a2 + 2);
  v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZSpline::getPreviousValidVertex(this, a2, &v24, MEMORY[0x1E0CA2E68]);
  OZSpline::getNextValidVertex((void ***)v5, a2, &v23, v6);
  v7 = *(_QWORD *)(v5 + 168);
  v8 = *(_OWORD *)(v7 + 8);
  v28 = *(_QWORD *)(v7 + 24);
  v27 = v8;
  v9 = v24;
  if (v24 && v23)
  {
    v21 = *(CMTime *)((char *)v23 + 16);
    v20 = *(CMTime *)((char *)v24 + 16);
    v30 = v21;
    v29 = v20;
    PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)&v27);
    v20 = *(CMTime *)((char *)v24 + 16);
    v30 = v22;
    v29 = v20;
    PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)&v21);
    operator/((__int128 *)&v21.value, (uint64_t)&v27, (uint64_t)&time);
    v10 = 1.0 / CMTimeGetSeconds(&time);
    (*(void (**)(void *, double *, double *, const CMTime *))(*(_QWORD *)v24 + 64))(v24, &v26, &v25, a3);
    (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v24 + 80))(v24, a3, v10 * v26, v10 * v25);
    v20 = *(CMTime *)((char *)v23 + 16);
    v30 = v20;
    v29 = v22;
    PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)&v21);
    operator/((__int128 *)&v21.value, (uint64_t)&v27, (uint64_t)&v18);
    v11 = 1.0 / CMTimeGetSeconds(&v18);
    (*(void (**)(void *, double *, double *, const CMTime *))(*(_QWORD *)v23 + 56))(v23, &v26, &v25, a3);
    (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v23 + 72))(v23, a3, v11 * v26, v11 * v25);
    v9 = v24;
  }
  if (!v9)
    goto LABEL_9;
  (*(void (**)(void *, double *, double *, const CMTime *))(*(_QWORD *)v9 + 64))(v9, &v26, &v25, a3);
  this = (OZSpline *)v23;
  if (!v23)
  {
    if (vabdd_f64(0.0, v26) >= 0.0000001)
    {
      v20 = *(CMTime *)((char *)v24 + 16);
      v30 = v22;
      v12 = 0.0277777778 / v26;
      v29 = v20;
      PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)&v21);
      operator*(&v21, &v17, v12);
      v13 = 1.0 / fabs(CMTimeGetSeconds(&v17));
      (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v24 + 80))(v24, a3, v13 * v26, v13 * v25);
    }
LABEL_9:
    this = (OZSpline *)v23;
    if (!v23)
      return this;
  }
  this = (OZSpline *)(*(uint64_t (**)(OZSpline *, double *, double *, const CMTime *))(*(_QWORD *)this + 56))(this, &v26, &v25, a3);
  if (!v24 && vabdd_f64(0.0, v26) >= 0.0000001)
  {
    v20 = *(CMTime *)((char *)v23 + 16);
    v30 = v22;
    v14 = 0.0277777778 / v26;
    v29 = v20;
    PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)&v21);
    operator*(&v21, &v16, v14);
    v15 = 1.0 / fabs(CMTimeGetSeconds(&v16));
    return (OZSpline *)(*(uint64_t (**)(void *, const CMTime *, double, double))(*(_QWORD *)v23 + 72))(v23, a3, v15 * v26, v15 * v25);
  }
  return this;
}

uint64_t OZSpline::deleteVertex(OZSpline *this, void *a2, int a3, const CMTime *a4)
{
  uint64_t v8;
  os_unfair_lock_s *v9;
  int v10;
  void **VertexIter;
  void **v12;
  char *v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;

  v8 = *((_QWORD *)this + 20);
  if (!v8 || (v9 = *(os_unfair_lock_s **)(v8 + 48)) == 0)
    v9 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock(v9);
  v10 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)a2 + 184))(a2, 2);
  if ((v10 & 1) == 0)
  {
    VertexIter = OZSpline::getVertexIter(this, a2);
    v12 = VertexIter;
    if (a3)
      OZSpline::scaleTangentsBeforeDeletion(this, (_BYTE **)*VertexIter, a4);
    if (*v12)
      (*(void (**)(void *))(*(_QWORD *)*v12 + 8))(*v12);
    *v12 = 0;
    v13 = (char *)*((_QWORD *)this + 3);
    v14 = v13 - (char *)(v12 + 1);
    if (v13 != (char *)(v12 + 1))
      memmove(v12, v12 + 1, v13 - (char *)(v12 + 1));
    v15 = (_QWORD *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 3) = (char *)v12 + v14;
    if (v15 == (void **)((char *)v12 + v14))
      *((_BYTE *)this + 144) = 0;
    *((_BYTE *)this + 145) = 1;
    *((_QWORD *)this + 5) = v15;
    *((_QWORD *)this + 6) = (char *)v12 + v14;
    OZSpline::refreshValidVerticesList(this);
  }
  v16 = *((_QWORD *)this + 20);
  if (!v16 || (v17 = *(os_unfair_lock_s **)(v16 + 48)) == 0)
    v17 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::unlock(v17);
  return v10 ^ 1u;
}

uint64_t OZSpline::deleteVertices(OZSpline *this, const CMTime *a2, const CMTime *a3)
{
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t NextVertex;
  uint64_t v9;
  char v10;
  const CMTime *v11;
  void **VertexIter;
  void **v13;
  void **v14;
  void *v15;
  void **v16;
  int64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  CMTimeEpoch v23;
  CMTime time2;
  CMTime time1;

  v6 = *((_QWORD *)this + 20);
  if (!v6 || (v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0)
    v7 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock(v7);
  NextVertex = OZSpline::getNextVertex(this, a2);
  if (NextVertex)
  {
    v9 = NextVertex;
    v10 = 0;
    v11 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v23 = *(_QWORD *)(v9 + 32);
      *(_OWORD *)&time1.value = *(_OWORD *)(v9 + 16);
      time1.epoch = v23;
      time2 = *a3;
      if (CMTimeCompare(&time1, &time2) > 0)
        break;
      VertexIter = OZSpline::getVertexIter(this, (void *)v9);
      v13 = OZSpline::getVertexIter(this, (void *)v9);
      v14 = (void **)*((_QWORD *)this + 6);
      if (v14 == v13 || v13 + 1 == v14)
        v15 = 0;
      else
        v15 = v13[1];
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 184))(v9, 2) & 1) == 0)
      {
        OZSpline::scaleTangentsBeforeDeletion(this, (_BYTE **)*VertexIter, v11);
        if (*VertexIter)
          (*(void (**)(void *))(*(_QWORD *)*VertexIter + 8))(*VertexIter);
        *VertexIter = 0;
        v16 = (void **)*((_QWORD *)this + 3);
        v17 = (char *)v16 - (char *)(VertexIter + 1);
        if (v16 != VertexIter + 1)
          memmove(VertexIter, VertexIter + 1, (char *)v16 - (char *)(VertexIter + 1));
        v18 = (void **)*((_QWORD *)this + 2);
        *((_QWORD *)this + 3) = (char *)VertexIter + v17;
        if (v18 == (void **)((char *)VertexIter + v17))
          *((_BYTE *)this + 144) = 0;
        v10 = 1;
        *((_BYTE *)this + 145) = 1;
        *((_QWORD *)this + 5) = v18;
        *((_QWORD *)this + 6) = (char *)VertexIter + v17;
        OZSpline::refreshValidVerticesList(this);
      }
      v9 = (uint64_t)v15;
    }
    while (v15);
    v19 = v10 & 1;
  }
  else
  {
    v19 = 0;
  }
  v20 = *((_QWORD *)this + 20);
  if (!v20 || (v21 = *(os_unfair_lock_s **)(v20 + 48)) == 0)
    v21 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::unlock(v21);
  return v19;
}

BOOL OZSpline::deleteAllVertices(OZSpline *this)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;

  v2 = *((_QWORD *)this + 20);
  if (!v2 || (v3 = *(os_unfair_lock_s **)(v2 + 48)) == 0)
    v3 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock(v3);
  v4 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  if (v4 == v5)
  {
    v6 = *((_QWORD *)this + 2);
  }
  else
  {
    v6 = *((_QWORD *)this + 3);
    do
    {
      v7 = *(_QWORD *)(v6 - 8);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v6 = *((_QWORD *)this + 3);
      }
      *(_QWORD *)(v6 - 8) = 0;
      v8 = *((_QWORD *)this + 2);
      v6 = *((_QWORD *)this + 3) - 8;
      *((_QWORD *)this + 3) = v6;
    }
    while (v8 != v6);
  }
  *((_WORD *)this + 72) = 256;
  *((_QWORD *)this + 5) = v6;
  *((_QWORD *)this + 6) = v6;
  OZSpline::refreshValidVerticesList(this);
  v9 = *((_QWORD *)this + 20);
  if (!v9 || (v10 = *(os_unfair_lock_s **)(v9 + 48)) == 0)
    v10 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::unlock(v10);
  return v4 != v5;
}

OZStaticVertex *OZSpline::addVertex(OZSpline *this, const CMTime *a2, double a3, const CMTime *a4, int a5)
{
  uint64_t v10;
  os_unfair_lock_s *v11;
  OZStaticVertex *v12;
  OZCoreGlobals *v13;
  char **v14;
  unint64_t v15;
  OZStaticVertex **v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  char *v20;
  OZStaticVertex *v21;
  uint64_t v22;
  unint64_t v23;
  OZStaticVertex **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  OZStaticVertex *v33;
  uint64_t v34;
  OZInterpolators *v35;
  int v36;
  uint64_t Interpolator;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  OZStaticVertex **v43;
  char *v44;
  char *v45;
  char *v46;
  OZStaticVertex *v47;
  OZStaticVertex *v48;
  uint64_t v49;
  OZStaticVertex **v50;
  char *v51;
  char *v52;
  char *v53;
  OZStaticVertex *v54;
  const CMTime *v55;
  double Seconds;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  double v65;
  double v66;
  OZStaticVertex *v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  os_unfair_lock_s *v74;
  CMTime v75;
  CMTime v76;
  CMTime v77;
  CMTime v78;
  CMTime v79;
  CMTime time;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  CMTime v87;
  OZStaticVertex *v88;
  CMTime time2;
  CMTime time1;

  v10 = *((_QWORD *)this + 20);
  if (!v10 || (v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0)
    v11 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock(v11);
  v12 = (OZStaticVertex *)operator new();
  OZStaticVertex::OZStaticVertex(v12, a2, a3);
  v88 = v12;
  v14 = (char **)((char *)this + 16);
  if (*((_QWORD *)this + 2) == *((_QWORD *)this + 3))
  {
    if (*(_BYTE *)(OZCoreGlobals::getInstance(v13) + 8))
      (*(void (**)(OZSpline *, OZStaticVertex *, _QWORD, _QWORD))(*(_QWORD *)this + 304))(this, v12, MEMORY[0x1E0CA2E68], 0);
  }
  else
  {
    OZSpline::getMinValueU(this, a4, 0, (uint64_t)&v87);
    time1 = *a2;
    time2 = v87;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      v18 = 1;
      goto LABEL_14;
    }
    OZSpline::getMaxValueU(this, a4, 0, (uint64_t)&v87);
    time1 = *a2;
    time2 = v87;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      (*(void (**)(OZStaticVertex *, _QWORD))(*(_QWORD *)v88 + 200))(v88, *(unsigned int *)(*((_QWORD *)this + 21) + 32));
      v15 = *((_QWORD *)this + 4);
      v16 = (OZStaticVertex **)*((_QWORD *)this + 3);
      if ((unint64_t)v16 < v15)
      {
        *v16 = v88;
        v17 = v16 + 1;
LABEL_68:
        *((_QWORD *)this + 3) = v17;
        v18 = 1;
        *((_BYTE *)this + 145) = 1;
        goto LABEL_69;
      }
      v38 = ((char *)v16 - *v14) >> 3;
      if (!((unint64_t)(v38 + 1) >> 61))
      {
        v39 = v15 - (_QWORD)*v14;
        v40 = v39 >> 2;
        if (v39 >> 2 <= (unint64_t)(v38 + 1))
          v40 = v38 + 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v41);
        else
          v42 = 0;
        v50 = (OZStaticVertex **)&v42[8 * v38];
        v51 = &v42[8 * v41];
        *v50 = v88;
        v17 = v50 + 1;
        v53 = (char *)*((_QWORD *)this + 2);
        v52 = (char *)*((_QWORD *)this + 3);
        if (v52 != v53)
        {
          do
          {
            v54 = (OZStaticVertex *)*((_QWORD *)v52 - 1);
            v52 -= 8;
            *--v50 = v54;
          }
          while (v52 != v53);
          v52 = *v14;
        }
        *((_QWORD *)this + 2) = v50;
        *((_QWORD *)this + 3) = v17;
        *((_QWORD *)this + 4) = v51;
        if (v52)
          operator delete(v52);
        goto LABEL_68;
      }
LABEL_106:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    (*(void (**)(OZSpline *, OZStaticVertex *, _QWORD, _QWORD))(*(_QWORD *)this + 304))(this, v88, MEMORY[0x1E0CA2E68], 0);
  }
  v18 = 0;
LABEL_14:
  v19 = (_QWORD *)*((_QWORD *)this + 5);
  if (*((_QWORD **)this + 6) == v19)
  {
LABEL_19:
    if (v19 == *((_QWORD **)this + 5))
    {
      (*(void (**)(OZStaticVertex *, _QWORD))(*(_QWORD *)v88 + 200))(v88, *(unsigned int *)(*((_QWORD *)this + 21) + 32));
    }
    else
    {
      v21 = v88;
      v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v19 - 1) + 208))(*(v19 - 1));
      (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v21 + 200))(v21, v22);
    }
    v23 = *((_QWORD *)this + 4);
    v24 = (OZStaticVertex **)*((_QWORD *)this + 3);
    if ((unint64_t)v24 >= v23)
    {
      v25 = ((char *)v24 - *v14) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        goto LABEL_106;
      v26 = v23 - (_QWORD)*v14;
      v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v28);
      else
        v29 = 0;
      v43 = (OZStaticVertex **)&v29[8 * v25];
      v44 = &v29[8 * v28];
      *v43 = v88;
      v17 = v43 + 1;
      v46 = (char *)*((_QWORD *)this + 2);
      v45 = (char *)*((_QWORD *)this + 3);
      if (v45 != v46)
      {
        do
        {
          v47 = (OZStaticVertex *)*((_QWORD *)v45 - 1);
          v45 -= 8;
          *--v43 = v47;
        }
        while (v45 != v46);
        v45 = *v14;
      }
      *((_QWORD *)this + 2) = v43;
      *((_QWORD *)this + 3) = v17;
      *((_QWORD *)this + 4) = v44;
      if (v45)
        operator delete(v45);
    }
    else
    {
      *v24 = v88;
      v17 = v24 + 1;
    }
    *((_QWORD *)this + 3) = v17;
    *((_BYTE *)this + 145) = 1;
LABEL_69:
    *((_QWORD *)this + 5) = *((_QWORD *)this + 2);
    *((_QWORD *)this + 6) = v17;
LABEL_70:
    OZSpline::refreshValidVerticesList(this);
    v85 = 0;
    v86 = 0;
    v83 = 0;
    v84 = 0;
    v55 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZSpline::getPreviousValidVertex(this, v88, &v86, MEMORY[0x1E0CA2E68]);
    OZSpline::getNextValidVertex((void ***)this, v88, &v85, v55);
    OZSpline::getFirstValidVertex(this, &v84, v55);
    OZSpline::getLastValidVertex(this, &v83, v55);
    v81 = 0;
    v82 = 0;
    if (!*(_BYTE *)(*((_QWORD *)this + 21) + 2) || !v88)
      goto LABEL_102;
    if (v86 && v86 == v84 && OZSpline::getNumberOfValidVertices(this, MEMORY[0x1E0CA2E68]) == 2)
    {
      if (((*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v84 + 184))(v84, 128) & 1) == 0)
      {
        (*(void (**)(OZStaticVertex *, uint64_t *, uint64_t *, const CMTime *))(*(_QWORD *)v88 + 56))(v88, &v82, &v81, a4);
        v79 = *(CMTime *)((char *)v88 + 16);
        v78 = *(CMTime *)((char *)v84 + 16);
        time1 = v79;
        time2 = v78;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v87);
        operator/((__int128 *)&v87.value, (uint64_t)&time, 12.0);
        Seconds = CMTimeGetSeconds(&time);
        v57 = (*(double (**)(OZStaticVertex *, const CMTime *))(*(_QWORD *)v88 + 24))(v88, v55);
        v58 = (*(double (**)(void *, const CMTime *))(*(_QWORD *)v84 + 24))(v84, v55);
        (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v84 + 80))(v84, v55, Seconds / 3.0, (v57 - v58) / 12.0 / 3.0);
      }
      if (((*(uint64_t (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v88 + 184))(v88, 128) & 1) == 0)
        (*(void (**)(OZSpline *, OZStaticVertex *, _QWORD, _QWORD))(*(_QWORD *)this + 304))(this, v88, MEMORY[0x1E0CA2E68], 0);
    }
    else if (v85)
    {
      if (v84 == v88 && ((*(uint64_t (**)(void))(*(_QWORD *)v85 + 184))() & 1) == 0)
      {
        v79 = *(CMTime *)((char *)v88 + 16);
        v78 = *(CMTime *)((char *)v85 + 16);
        time1 = v79;
        time2 = v78;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v87);
        operator/((__int128 *)&v87.value, (uint64_t)&v77, 12.0);
        v59 = CMTimeGetSeconds(&v77);
        v60 = (*(double (**)(OZStaticVertex *, const CMTime *))(*(_QWORD *)v88 + 24))(v88, v55);
        v61 = (v60 - (*(double (**)(void *, const CMTime *))(*(_QWORD *)v85 + 24))(v85, v55)) / 12.0;
        (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v85 + 72))(v85, v55, v59 / -3.0, v61 / -3.0);
        (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v88 + 80))(v88, v55, v59 / 3.0, v61 / 3.0);
        v62 = (*(double (**)(void *, const CMTime *))(*(_QWORD *)v85 + 24))(v85, a4);
        if (vabdd_f64(v62, (*(double (**)(OZStaticVertex *, const CMTime *))(*(_QWORD *)v88 + 24))(v88, a4)) < 0.0000001)
        {
          time1.value = 0;
          time2.value = 0;
          (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(_QWORD *)v85 + 56))(v85, &time1, &time2, a4);
          (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v85 + 72))(v85, a4, *(double *)&time1.value, 0.0);
          (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(_QWORD *)v85 + 64))(v85, &time1, &time2, a4);
          if (fabs(*(double *)&time2.value) >= 0.0000001)
          {
            if (v85)
              (*(void (**)(void *, uint64_t))(*(_QWORD *)v85 + 152))(v85, 1);
          }
        }
      }
    }
    if (v85 && v85 == v83 && OZSpline::getNumberOfValidVertices(this, MEMORY[0x1E0CA2E68]) == 2)
    {
      if (((*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v83 + 184))(v83, 128) & 1) == 0)
      {
        (*(void (**)(OZStaticVertex *, uint64_t *, uint64_t *, const CMTime *))(*(_QWORD *)v88 + 64))(v88, &v82, &v81, a4);
        v79 = *(CMTime *)((char *)v88 + 16);
        v78 = *(CMTime *)((char *)v83 + 16);
        time1 = v79;
        time2 = v78;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v87);
        operator/((__int128 *)&v87.value, (uint64_t)&v76, 12.0);
        v63 = CMTimeGetSeconds(&v76);
        v64 = MEMORY[0x1E0CA2E68];
        v65 = (*(double (**)(OZStaticVertex *, _QWORD))(*(_QWORD *)v88 + 24))(v88, MEMORY[0x1E0CA2E68]);
        v66 = (*(double (**)(void *, uint64_t))(*(_QWORD *)v83 + 24))(v83, v64);
        (*(void (**)(void *, uint64_t, double, double))(*(_QWORD *)v83 + 72))(v83, v64, v63 / 3.0, (v65 - v66) / 12.0 / 3.0);
      }
    }
    else if (v86)
    {
      v67 = v88;
      if (v83 != v88)
      {
LABEL_99:
        if (v67 && ((*((_QWORD *)this + 3) - *((_QWORD *)this + 2) != 8) & ~v18) == 0)
          (*(void (**)(OZSpline *))(*(_QWORD *)this + 304))(this);
LABEL_102:
        *((_BYTE *)this + 145) = 1;
        v72 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 5) = *((_QWORD *)this + 2);
        *((_QWORD *)this + 6) = v72;
        OZSpline::refreshValidVerticesList(this);
        v73 = *((_QWORD *)this + 20);
        if (!v73 || (v74 = *(os_unfair_lock_s **)(v73 + 48)) == 0)
          v74 = (os_unfair_lock_s *)((char *)this + 8);
        PCSpinLock::unlock(v74);
        return v88;
      }
      if (((*(uint64_t (**)(void))(*(_QWORD *)v86 + 184))() & 1) == 0)
      {
        v79 = *(CMTime *)((char *)v88 + 16);
        v78 = *(CMTime *)((char *)v86 + 16);
        time1 = v79;
        time2 = v78;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v87);
        operator/((__int128 *)&v87.value, (uint64_t)&v75, 12.0);
        v68 = CMTimeGetSeconds(&v75);
        v69 = (*(double (**)(OZStaticVertex *, const CMTime *))(*(_QWORD *)v88 + 24))(v88, v55);
        v70 = (v69 - (*(double (**)(void *, const CMTime *))(*(_QWORD *)v86 + 24))(v86, v55)) / 12.0;
        (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v86 + 80))(v86, v55, v68 / 3.0, v70 / 3.0);
        (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v88 + 72))(v88, v55, v68 / -3.0, v70 / -3.0);
        time1.value = 0;
        time2.value = 0;
        v71 = (*(double (**)(void *, const CMTime *))(*(_QWORD *)v86 + 24))(v86, a4);
        if (vabdd_f64(v71, (*(double (**)(OZStaticVertex *, const CMTime *))(*(_QWORD *)v88 + 24))(v88, a4)) < 0.0000001)
        {
          (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(_QWORD *)v86 + 64))(v86, &time1, &time2, a4);
          (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v86 + 80))(v86, a4, *(double *)&time1.value, 0.0);
          (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(_QWORD *)v86 + 56))(v86, &time1, &time2, a4);
          if (fabs(*(double *)&time2.value) >= 0.0000001)
          {
            if (v86)
              (*(void (**)(void *, uint64_t))(*(_QWORD *)v86 + 152))(v86, 1);
          }
        }
      }
    }
    v67 = v88;
    goto LABEL_99;
  }
  v20 = (char *)*((_QWORD *)this + 5);
  while (1)
  {
    v87 = *(CMTime *)(*v19 + 16);
    time1 = v87;
    time2 = *a2;
    if (!CMTimeCompare(&time1, &time2))
      break;
    v87 = *(CMTime *)(*v19 + 16);
    time1 = v87;
    time2 = *a2;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      if (v19 == *((_QWORD **)this + 5))
      {
        (*(void (**)(OZStaticVertex *, _QWORD))(*(_QWORD *)v88 + 200))(v88, *(unsigned int *)(*((_QWORD *)this + 21) + 32));
      }
      else
      {
        v33 = v88;
        v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v19 - 1) + 208))(*(v19 - 1));
        (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v33 + 200))(v33, v34);
        v35 = (OZInterpolators *)*((_QWORD *)this + 19);
        v36 = (*(uint64_t (**)(OZStaticVertex *))(*(_QWORD *)v88 + 208))(v88);
        Interpolator = OZInterpolators::getInterpolator(v35, v36);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)Interpolator + 64))(Interpolator) & 1) == 0)
          (*(void (**)(OZStaticVertex *, const CMTime *, double))(*(_QWORD *)v88 + 32))(v88, a4, a3);
      }
      goto LABEL_61;
    }
    ++v19;
    v20 += 8;
    if (v19 == *((_QWORD **)this + 6))
      goto LABEL_19;
  }
  if (!a5)
  {
    v48 = v88;
    v49 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v19 + 208))(*v19);
    (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v48 + 200))(v48, v49);
LABEL_61:
    std::vector<OZVertex *>::insert((uint64_t)this + 16, v20, (char *)&v88);
    *((_BYTE *)this + 145) = 1;
    *(_OWORD *)((char *)this + 40) = *((_OWORD *)this + 1);
    goto LABEL_70;
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v19 + 168))(*v19) & 2) == 0)
    (*(void (**)(_QWORD, _QWORD, double))(*(_QWORD *)*v19 + 32))(*v19, MEMORY[0x1E0CA2E68], a3);
  if (v88)
    (*(void (**)(OZStaticVertex *))(*(_QWORD *)v88 + 8))(v88);
  v88 = 0;
  *((_BYTE *)this + 145) = 1;
  *(_OWORD *)((char *)this + 40) = *((_OWORD *)this + 1);
  OZSpline::refreshValidVerticesList(this);
  v30 = *((_QWORD *)this + 20);
  if (!v30 || (v31 = *(os_unfair_lock_s **)(v30 + 48)) == 0)
    v31 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::unlock(v31);
  return (OZStaticVertex *)*v19;
}

void sub_1B2C50558(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4082842762);
  _Unwind_Resume(a1);
}

BOOL OZSpline::setVertexFlag(OZSpline *this, void *a2, uint64_t a3)
{
  if (a2)
    (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 152))(a2, a3);
  return a2 != 0;
}

OZStaticVertex *OZSpline::addVertexNoTangents(OZSpline *this, const CMTime *a2, double a3, const CMTime *a4, int a5)
{
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  const CMTime *v14;
  OZStaticVertex *v16;
  OZStaticVertex **v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  OZStaticVertex **v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  OZInterpolators *v32;
  int v33;
  uint64_t Interpolator;
  OZStaticVertex **v35;
  char *v36;
  char *v37;
  char *v38;
  OZStaticVertex *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  OZStaticVertex *v43;
  CMTime v44;
  CMTime time2;
  CMTime time1;

  v10 = *((_QWORD *)this + 20);
  if (!v10 || (v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0)
    v11 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock(v11);
  OZSpline::getMaxValueU(this, a4, 0, (uint64_t)&v44);
  time1 = *a2;
  time2 = v44;
  if (CMTimeCompare(&time1, &time2) < 1)
  {
    v16 = (OZStaticVertex *)operator new();
    OZStaticVertex::OZStaticVertex(v16, a2, a3);
    v43 = v16;
    v17 = (OZStaticVertex **)*((_QWORD *)this + 5);
    if (*((OZStaticVertex ***)this + 6) == v17)
    {
LABEL_14:
      if (v17 == *((OZStaticVertex ***)this + 5))
      {
        (*(void (**)(OZStaticVertex *, _QWORD))(*(_QWORD *)v43 + 200))(v43, *(unsigned int *)(*((_QWORD *)this + 21) + 32));
      }
      else
      {
        v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v17 - 1) + 208))(*(v17 - 1));
        (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v43 + 200))(v43, v19);
      }
      v20 = *((_QWORD *)this + 4);
      v21 = (OZStaticVertex **)*((_QWORD *)this + 3);
      if ((unint64_t)v21 >= v20)
      {
        v23 = *((_QWORD *)this + 2);
        v24 = ((uint64_t)v21 - v23) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v25 = v20 - v23;
        v26 = v25 >> 2;
        if (v25 >> 2 <= (unint64_t)(v24 + 1))
          v26 = v24 + 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v27);
        else
          v28 = 0;
        v35 = (OZStaticVertex **)&v28[8 * v24];
        v36 = &v28[8 * v27];
        *v35 = v43;
        v22 = v35 + 1;
        v38 = (char *)*((_QWORD *)this + 2);
        v37 = (char *)*((_QWORD *)this + 3);
        if (v37 != v38)
        {
          do
          {
            v39 = (OZStaticVertex *)*((_QWORD *)v37 - 1);
            v37 -= 8;
            *--v35 = v39;
          }
          while (v37 != v38);
          v37 = (char *)*((_QWORD *)this + 2);
        }
        *((_QWORD *)this + 2) = v35;
        *((_QWORD *)this + 3) = v22;
        *((_QWORD *)this + 4) = v36;
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v21 = v43;
        v22 = v21 + 1;
      }
      *((_QWORD *)this + 3) = v22;
      *((_BYTE *)this + 145) = 1;
      v40 = *((_QWORD *)this + 2);
LABEL_47:
      *((_QWORD *)this + 5) = v40;
      *((_QWORD *)this + 6) = v22;
      OZSpline::refreshValidVerticesList(this);
      v42 = *((_QWORD *)this + 20);
      if (!v42 || (v30 = *(os_unfair_lock_s **)(v42 + 48)) == 0)
        v30 = (os_unfair_lock_s *)((char *)this + 8);
      v17 = &v43;
    }
    else
    {
      v18 = (char *)*((_QWORD *)this + 5);
      while (1)
      {
        v44 = *(CMTime *)((char *)*v17 + 16);
        time1 = v44;
        time2 = *a2;
        if (!CMTimeCompare(&time1, &time2))
          break;
        v44 = *(CMTime *)((char *)*v17 + 16);
        time1 = v44;
        time2 = *a2;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          if (v17 != *((OZStaticVertex ***)this + 5))
          {
            v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v17 - 1) + 208))(*(v17 - 1));
            (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v43 + 200))(v43, v31);
            v32 = (OZInterpolators *)*((_QWORD *)this + 19);
            v33 = (*(uint64_t (**)(OZStaticVertex *))(*(_QWORD *)v43 + 208))(v43);
            Interpolator = OZInterpolators::getInterpolator(v32, v33);
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)Interpolator + 64))(Interpolator) & 1) == 0)
              (*(void (**)(OZStaticVertex *, const CMTime *, double))(*(_QWORD *)v43 + 32))(v43, a4, a3);
          }
          goto LABEL_46;
        }
        ++v17;
        v18 += 8;
        if (v17 == *((OZStaticVertex ***)this + 6))
          goto LABEL_14;
      }
      if (!a5)
      {
        v41 = (*(uint64_t (**)(OZStaticVertex *))(*(_QWORD *)*v17 + 208))(*v17);
        (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v43 + 200))(v43, v41);
LABEL_46:
        std::vector<OZVertex *>::insert((uint64_t)this + 16, v18, (char *)&v43);
        *((_BYTE *)this + 145) = 1;
        v40 = *((_QWORD *)this + 2);
        v22 = (_QWORD *)*((_QWORD *)this + 3);
        goto LABEL_47;
      }
      if (((*(uint64_t (**)(OZStaticVertex *))(*(_QWORD *)*v17 + 168))(*v17) & 2) == 0)
        (*(void (**)(OZStaticVertex *, _QWORD, double))(*(_QWORD *)*v17 + 32))(*v17, MEMORY[0x1E0CA2E68], a3);
      if (v43)
        (*(void (**)(OZStaticVertex *))(*(_QWORD *)v43 + 8))(v43);
      v43 = 0;
      *((_BYTE *)this + 145) = 1;
      *(_OWORD *)((char *)this + 40) = *((_OWORD *)this + 1);
      OZSpline::refreshValidVerticesList(this);
      v29 = *((_QWORD *)this + 20);
      if (!v29 || (v30 = *(os_unfair_lock_s **)(v29 + 48)) == 0)
        v30 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::unlock(v30);
    return *v17;
  }
  else
  {
    v12 = *((_QWORD *)this + 20);
    if (!v12 || (v13 = *(os_unfair_lock_s **)(v12 + 48)) == 0)
      v13 = (os_unfair_lock_s *)((char *)this + 8);
    PCSpinLock::unlock(v13);
    return OZSpline::appendVertexNoTangents(this, a2, a3, v14);
  }
}

void sub_1B2C509F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4082842762);
  _Unwind_Resume(a1);
}

OZStaticVertex *OZSpline::appendVertexNoTangents(OZSpline *this, const CMTime *a2, double a3, const CMTime *a4)
{
  uint64_t v7;
  os_unfair_lock_s *v8;
  OZStaticVertex *v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t v13;
  OZStaticVertex **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  OZStaticVertex **v21;
  char *v22;
  char *v23;
  char *v24;
  OZStaticVertex *v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;

  v7 = *((_QWORD *)this + 20);
  if (!v7 || (v8 = *(os_unfair_lock_s **)(v7 + 48)) == 0)
    v8 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock(v8);
  v9 = (OZStaticVertex *)operator new();
  OZStaticVertex::OZStaticVertex(v9, a2, a3);
  v10 = *((_QWORD *)this + 3);
  v11 = (char **)((char *)this + 16);
  if (*((_QWORD *)this + 2) == v10)
    v12 = *(unsigned int *)(*((_QWORD *)this + 21) + 32);
  else
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 - 8) + 208))(*(_QWORD *)(v10 - 8));
  (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v9 + 200))(v9, v12);
  v13 = *((_QWORD *)this + 4);
  v14 = (OZStaticVertex **)*((_QWORD *)this + 3);
  if ((unint64_t)v14 >= v13)
  {
    v16 = ((char *)v14 - *v11) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v17 = v13 - (_QWORD)*v11;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v19);
    else
      v20 = 0;
    v21 = (OZStaticVertex **)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = v9;
    v15 = v21 + 1;
    v24 = (char *)*((_QWORD *)this + 2);
    v23 = (char *)*((_QWORD *)this + 3);
    if (v23 != v24)
    {
      do
      {
        v25 = (OZStaticVertex *)*((_QWORD *)v23 - 1);
        v23 -= 8;
        *--v21 = v25;
      }
      while (v23 != v24);
      v23 = *v11;
    }
    *((_QWORD *)this + 2) = v21;
    *((_QWORD *)this + 3) = v15;
    *((_QWORD *)this + 4) = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v14 = v9;
    v15 = v14 + 1;
  }
  *((_QWORD *)this + 3) = v15;
  v26 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 17) = (((_QWORD)((_QWORD)v15 - v26) << 29) - 0x100000000) >> 32;
  *((_BYTE *)this + 145) = 1;
  *((_QWORD *)this + 5) = v26;
  *((_QWORD *)this + 6) = v15;
  OZSpline::refreshValidVerticesList(this);
  v27 = *((_QWORD *)this + 20);
  if (!v27 || (v28 = *(os_unfair_lock_s **)(v27 + 48)) == 0)
    v28 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::unlock(v28);
  return v9;
}

void sub_1B2C50BC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4082842762);
  _Unwind_Resume(a1);
}

void OZSpline::appendVertexesNoTangents(OZSpline *this@<X0>, CMTime *a2@<X2>, double *a3@<X3>, unsigned int a4@<W1>, void **a5@<X8>)
{
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  OZStaticVertex *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  OZStaticVertex **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  OZStaticVertex **v27;
  char *v28;
  char *v29;
  OZStaticVertex *v30;
  unint64_t v31;
  OZStaticVertex **v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  OZStaticVertex **v39;
  char *v40;
  char *v41;
  OZStaticVertex *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_unfair_lock_s *v46;

  v11 = *((_QWORD *)this + 20);
  if (!v11 || (v12 = *(os_unfair_lock_s **)(v11 + 48)) == 0)
    v12 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock(v12);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (a4)
  {
    v13 = 0;
    v14 = (char **)((char *)this + 16);
    v15 = a4;
    do
    {
      v16 = (OZStaticVertex *)operator new();
      OZStaticVertex::OZStaticVertex(v16, &a2[v13], a3[v13]);
      v17 = *((_QWORD *)this + 3);
      if (*((_QWORD *)this + 2) == v17)
        v18 = *(unsigned int *)(*((_QWORD *)this + 21) + 32);
      else
        v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 - 8) + 208))(*(_QWORD *)(v17 - 8));
      (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v16 + 200))(v16, v18);
      v20 = (OZStaticVertex **)*((_QWORD *)this + 3);
      v19 = *((_QWORD *)this + 4);
      if ((unint64_t)v20 >= v19)
      {
        v22 = ((char *)v20 - *v14) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v23 = v19 - (_QWORD)*v14;
        v24 = v23 >> 2;
        if (v23 >> 2 <= (unint64_t)(v22 + 1))
          v24 = v22 + 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v25);
        else
          v26 = 0;
        v27 = (OZStaticVertex **)&v26[8 * v22];
        *v27 = v16;
        v21 = v27 + 1;
        v29 = (char *)*((_QWORD *)this + 2);
        v28 = (char *)*((_QWORD *)this + 3);
        if (v28 != v29)
        {
          do
          {
            v30 = (OZStaticVertex *)*((_QWORD *)v28 - 1);
            v28 -= 8;
            *--v27 = v30;
          }
          while (v28 != v29);
          v28 = *v14;
        }
        *((_QWORD *)this + 2) = v27;
        *((_QWORD *)this + 3) = v21;
        *((_QWORD *)this + 4) = &v26[8 * v25];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v20 = v16;
        v21 = v20 + 1;
      }
      *((_QWORD *)this + 3) = v21;
      v32 = (OZStaticVertex **)a5[1];
      v31 = (unint64_t)a5[2];
      if ((unint64_t)v32 >= v31)
      {
        v34 = ((char *)v32 - (_BYTE *)*a5) >> 3;
        if ((unint64_t)(v34 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v35 = v31 - (_QWORD)*a5;
        v36 = v35 >> 2;
        if (v35 >> 2 <= (unint64_t)(v34 + 1))
          v36 = v34 + 1;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v36;
        if (v37)
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a5 + 2), v37);
        else
          v38 = 0;
        v39 = (OZStaticVertex **)&v38[8 * v34];
        *v39 = v16;
        v33 = v39 + 1;
        v41 = (char *)*a5;
        v40 = (char *)a5[1];
        if (v40 != *a5)
        {
          do
          {
            v42 = (OZStaticVertex *)*((_QWORD *)v40 - 1);
            v40 -= 8;
            *--v39 = v42;
          }
          while (v40 != v41);
          v40 = (char *)*a5;
        }
        *a5 = v39;
        a5[1] = v33;
        a5[2] = &v38[8 * v37];
        if (v40)
          operator delete(v40);
      }
      else
      {
        *v32 = v16;
        v33 = v32 + 1;
      }
      a5[1] = v33;
      ++v13;
    }
    while (v13 != v15);
  }
  v44 = *((_QWORD *)this + 2);
  v43 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 17) = (((v43 - v44) << 29) - 0x100000000) >> 32;
  *((_BYTE *)this + 145) = 1;
  *((_QWORD *)this + 5) = v44;
  *((_QWORD *)this + 6) = v43;
  OZSpline::refreshValidVerticesList(this);
  v45 = *((_QWORD *)this + 20);
  if (!v45 || (v46 = *(os_unfair_lock_s **)(v45 + 48)) == 0)
    v46 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::unlock(v46);
}

void sub_1B2C50E90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZSpline::deriveVertex(OZSpline *this, void *a2, const CMTime *a3)
{
  (*(void (**)(OZSpline *, void *, const CMTime *, uint64_t))(*(_QWORD *)this + 304))(this, a2, a3, 1);
  return 1;
}

double OZSpline::getPointInputTangents(OZSpline *this, const CMTime *a2, double *a3, double *a4, const CMTime *a5)
{
  double result;
  double v8;
  double v9;
  double v10;

  v9 = 0.0;
  v10 = 0.0;
  OZSpline::derivePoint(this, a2, &v10, &v9, 0, 0, a5, 1);
  result = v9;
  v8 = sqrt(v10 * v10 + result * result);
  if (a3)
    *a3 = v10 / v8;
  if (a4)
  {
    result = result / v8;
    *a4 = result;
  }
  return result;
}

void OZSpline::derivePoint(OZSpline *this, const CMTime *a2, double *a3, double *a4, double *a5, double *a6, const CMTime *a7, char a8)
{
  const CMTime *v16;
  double v17;
  uint64_t v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  double Seconds;
  double v32;
  double v33;
  Float64 v34;
  double v35;
  Float64 v36;
  double v37;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  CMTime v43;
  CMTime v44;
  CMTime v45;
  CMTime v46;
  CMTime time;
  CMTime v48;
  CMTime v49;
  void *v50;
  void *v51;
  double v52;
  double v53;
  CMTime v54;
  CMTime v55;
  CMTime v56;
  CMTime v57;
  CMTime v58;

  v55 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v54 = v55;
  v52 = 0.0;
  v53 = 0.0;
  if (!*(_BYTE *)(*((_QWORD *)this + 21) + 2))
    return;
  v50 = 0;
  v51 = 0;
  v16 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZSpline::getPreviousValidVertex(this, a2, &v51, MEMORY[0x1E0CA2E68], 0);
  OZSpline::getNextValidVertex(this, a2, &v50, v16, 0);
  v17 = (*(double (**)(OZSpline *, const CMTime *, const CMTime *, _QWORD))(*(_QWORD *)this + 240))(this, a2, v16, 0);
  v18 = *((_QWORD *)this + 21);
  v19 = *(_OWORD *)(v18 + 8);
  v56.epoch = *(_QWORD *)(v18 + 24);
  *(_OWORD *)&v56.value = v19;
  if (v51)
  {
    v55 = *(CMTime *)((char *)v51 + 16);
    (*(void (**)(void *, _QWORD))(*(_QWORD *)v51 + 24))(v51, MEMORY[0x1E0CA2E68]);
    if (v50)
    {
      v48 = *(CMTime *)(*((_QWORD *)this + 21) + 8);
      v58 = *a2;
      v57 = v48;
      v21 = PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
      v22 = v17
          - (*(double (**)(OZSpline *, CMTime *, _QWORD, _QWORD, double))(*(_QWORD *)this + 240))(this, &v49, MEMORY[0x1E0CA2E68], 0, v21);
    }
    else
    {
      v25 = v17 - v20;
      v58 = *a2;
      v57 = v55;
      PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&time);
      v22 = v25 / CMTimeGetSeconds(&time);
    }
    v46 = v56;
    v23 = -CMTimeGetSeconds(&v46);
    v24 = -v22;
  }
  else
  {
    v23 = 0.0;
    v24 = 0.0;
  }
  if (!v50)
  {
    v29 = 1.0;
    v28 = 0.0;
    v30 = v51;
    Seconds = 0.0;
LABEL_17:
    v33 = 1.0;
    goto LABEL_18;
  }
  v54 = *(CMTime *)((char *)v50 + 16);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)v50 + 24))(v50, MEMORY[0x1E0CA2E68]);
  if (v51)
  {
    v48 = *(CMTime *)(*((_QWORD *)this + 21) + 8);
    v58 = *a2;
    v57 = v48;
    v27 = PC_CMTimeSaferAdd(&v58, &v57, (uint64_t)&v49);
    v28 = -(v17
          - (*(double (**)(OZSpline *, CMTime *, _QWORD, _QWORD, double))(*(_QWORD *)this + 240))(this, &v49, MEMORY[0x1E0CA2E68], 0, v27));
  }
  else
  {
    v32 = v26 - v17;
    v58 = v54;
    v57 = *a2;
    PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v45);
    v28 = v32 / CMTimeGetSeconds(&v45);
  }
  v44 = v56;
  Seconds = CMTimeGetSeconds(&v44);
  v30 = v51;
  v29 = 1.0;
  if (!v51 || !v50 || (a8 & 1) != 0)
    goto LABEL_17;
  v49 = *(CMTime *)((char *)v50 + 16);
  v48 = *(CMTime *)((char *)v51 + 16);
  v58 = v49;
  v57 = v48;
  PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v56);
  v48 = *(CMTime *)((char *)v51 + 16);
  v58 = *a2;
  v57 = v48;
  PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
  operator/((__int128 *)&v49.value, (uint64_t)&v56, (uint64_t)&v43);
  v29 = CMTimeGetSeconds(&v43);
  (*(void (**)(void *, double *, double *, const CMTime *))(*(_QWORD *)v51 + 64))(v51, &v53, &v52, a7);
  (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v51 + 80))(v51, a7, v29 * v53, v29 * v52);
  v48 = *(CMTime *)((char *)v50 + 16);
  v58 = v48;
  v57 = *a2;
  PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
  operator/((__int128 *)&v49.value, (uint64_t)&v56, (uint64_t)&v42);
  v33 = CMTimeGetSeconds(&v42);
  (*(void (**)(void *, double *, double *, const CMTime *))(*(_QWORD *)v50 + 56))(v50, &v53, &v52, a7);
  (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v50 + 72))(v50, a7, v33 * v53, v33 * v52);
  v30 = v51;
LABEL_18:
  if (v30)
  {
    (*(void (**)(void *, double *, double *, const CMTime *))(*(_QWORD *)v30 + 64))(v30, &v53, &v52, a7);
    if (!v50 && (a8 & 1) == 0 && vabdd_f64(0.0, v53) >= 0.0000001)
    {
      v48 = *(CMTime *)((char *)v51 + 16);
      v58 = *a2;
      v34 = 0.0277777778 / v53;
      v57 = v48;
      PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
      operator*(&v49, &v41, v34);
      v35 = fabs(CMTimeGetSeconds(&v41));
      (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v51 + 80))(v51, a7, v35 * v53, v35 * v52);
    }
    v48 = *(CMTime *)((char *)v51 + 16);
    v58 = *a2;
    v57 = v48;
    PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
    operator*(&v49, &v40, 0.0277777778 / v23);
    v29 = fabs(CMTimeGetSeconds(&v40));
  }
  if (v50)
  {
    (*(void (**)(void *, double *, double *, const CMTime *))(*(_QWORD *)v50 + 56))(v50, &v53, &v52, a7);
    if (!v51 && (a8 & 1) == 0 && vabdd_f64(0.0, v53) >= 0.0000001)
    {
      v48 = *(CMTime *)((char *)v50 + 16);
      v58 = *a2;
      v36 = 0.0277777778 / v53;
      v57 = v48;
      PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
      operator*(&v49, &v39, v36);
      v37 = fabs(CMTimeGetSeconds(&v39));
      (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v50 + 72))(v50, a7, v37 * v53, v37 * v52);
    }
    v48 = *(CMTime *)((char *)v50 + 16);
    v58 = *a2;
    v57 = v48;
    PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
    operator*(&v49, &v38, 0.0277777778 / Seconds);
    v33 = fabs(CMTimeGetSeconds(&v38));
  }
  if (a3)
    *a3 = v23 * v29;
  if (a4)
    *a4 = v24 * v29;
  if (a5)
    *a5 = Seconds * v33;
  if (a6)
    *a6 = v28 * v33;
}

double OZSpline::getPointOutputTangents(OZSpline *this, const CMTime *a2, double *a3, double *a4, const CMTime *a5)
{
  double result;
  double v8;
  double v9;
  double v10;

  v9 = 0.0;
  v10 = 0.0;
  OZSpline::derivePoint(this, a2, 0, 0, &v10, &v9, a5, 1);
  result = v9;
  v8 = sqrt(v10 * v10 + result * result);
  if (a3)
    *a3 = v10 / v8;
  if (a4)
  {
    result = result / v8;
    *a4 = result;
  }
  return result;
}

void OZSpline::deriveCurve(OZSpline *this, OZVertex *a2, const CMTime *a3, char a4)
{
  const CMTime *v8;
  _OWORD *v9;
  double Seconds;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  __n128 v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime time;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  CMTime time2;
  CMTime time1;

  v36 = 0.0;
  v37 = 0.0;
  v34 = 0.0;
  v35 = 0.0;
  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  OZSpline::getFirstValidVertex(this, &v33, a3);
  OZSpline::getLastValidVertex(this, &v32, a3);
  time1 = *(CMTime *)((char *)a2 + 16);
  v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZSpline::getPreviousValidVertex(this, &time1, &v31, MEMORY[0x1E0CA2E68], 0);
  time1 = *(CMTime *)((char *)a2 + 16);
  OZSpline::getNextValidVertex(this, &time1, &v30, v8, 0);
  if (!v33 || !v32 || !*(_BYTE *)(*((_QWORD *)this + 21) + 2))
    return;
  v9 = (_OWORD *)((char *)a2 + 16);
  if (v33 == a2 && v30)
  {
    v27 = *(CMTime *)((char *)v30 + 16);
    *(_OWORD *)&time2.value = *v9;
    time2.epoch = *((_QWORD *)a2 + 4);
    time1 = v27;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
    operator/((__int128 *)&v28.value, (uint64_t)&time, 12.0);
    Seconds = CMTimeGetSeconds(&time);
    v11 = MEMORY[0x1E0CA2E68];
    v12 = (*(double (**)(void *, _QWORD))(*(_QWORD *)v30 + 24))(v30, MEMORY[0x1E0CA2E68]);
    v13 = (v12 - (*(double (**)(OZVertex *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v11)) / 12.0;
    (*(void (**)(OZVertex *, uint64_t, double, double))(*(_QWORD *)a2 + 80))(a2, v11, Seconds / 3.0, v13 / 3.0);
    (*(void (**)(OZVertex *, uint64_t, double, double))(*(_QWORD *)a2 + 72))(a2, v11, Seconds / -3.0, v13 / -3.0);
    v14 = (*(double (**)(void *, const CMTime *))(*(_QWORD *)v30 + 24))(v30, a3);
    if (vabdd_f64(v14, (*(double (**)(OZVertex *, const CMTime *))(*(_QWORD *)a2 + 24))(a2, a3)) >= 0.0000001)
      return;
    time1.value = 0;
    time2.value = 0;
    (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(_QWORD *)v30 + 56))(v30, &time1, &time2, a3);
    (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v30 + 72))(v30, a3, *(double *)&time1.value, 0.0);
    (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(_QWORD *)v30 + 64))(v30, &time1, &time2, a3);
    if (fabs(*(double *)&time2.value) < 0.0000001)
      return;
    v15 = v30;
    if (!v30)
      return;
LABEL_15:
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v15 + 152))(v15, 1);
    return;
  }
  if (!v31 || v32 != a2)
  {
    *(_OWORD *)&time1.value = *v9;
    time1.epoch = *((_QWORD *)a2 + 4);
    OZSpline::derivePoint(this, &time1, &v37, &v36, &v35, &v34, a3, a4);
    v28 = *(CMTime *)((char *)v33 + 16);
    *(_OWORD *)&time2.value = *v9;
    time2.epoch = *((_QWORD *)a2 + 4);
    time1 = v28;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      (*(void (**)(OZVertex *, const CMTime *, double, double))(*(_QWORD *)a2 + 80))(a2, a3, v35, v34);
      v21.n128_f64[0] = -v35;
      v22.n128_f64[0] = -v34;
LABEL_18:
      (*(void (**)(OZVertex *, const CMTime *, __n128, __n128))(*(_QWORD *)a2 + 72))(a2, a3, v21, v22);
      return;
    }
    v28 = *(CMTime *)((char *)v32 + 16);
    *(_OWORD *)&time2.value = *v9;
    time2.epoch = *((_QWORD *)a2 + 4);
    time1 = v28;
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      (*(void (**)(OZVertex *, const CMTime *, double, double))(*(_QWORD *)a2 + 72))(a2, a3, v37, v36);
      v24.n128_f64[0] = -v37;
      v25.n128_f64[0] = -v36;
    }
    else
    {
      v23 = *(_QWORD *)a2;
      if (fabs(v37) <= fabs(v35))
      {
        (*(void (**)(OZVertex *, const CMTime *, double, double))(v23 + 80))(a2, a3, v35, v34);
        v22.n128_f64[0] = v36;
        v21.n128_f64[0] = v37;
        goto LABEL_18;
      }
      (*(void (**)(OZVertex *, const CMTime *, double, double))(v23 + 72))(a2, a3, v37, v36);
      v25.n128_f64[0] = v34;
      v24.n128_f64[0] = v35;
    }
    (*(void (**)(OZVertex *, const CMTime *, __n128, __n128))(*(_QWORD *)a2 + 80))(a2, a3, v24, v25);
    return;
  }
  v27 = *(CMTime *)((char *)v31 + 16);
  *(_OWORD *)&time2.value = *v9;
  time2.epoch = *((_QWORD *)a2 + 4);
  time1 = v27;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
  operator/((__int128 *)&v28.value, (uint64_t)&v26, 12.0);
  v16 = CMTimeGetSeconds(&v26);
  v17 = MEMORY[0x1E0CA2E68];
  v18 = (*(double (**)(void *, _QWORD))(*(_QWORD *)v31 + 24))(v31, MEMORY[0x1E0CA2E68]);
  v19 = (v18 - (*(double (**)(OZVertex *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v17)) / 12.0;
  (*(void (**)(OZVertex *, uint64_t, double, double))(*(_QWORD *)a2 + 72))(a2, v17, v16 / 3.0, v19 / 3.0);
  (*(void (**)(OZVertex *, uint64_t, double, double))(*(_QWORD *)a2 + 80))(a2, v17, v16 / -3.0, v19 / -3.0);
  v20 = (*(double (**)(void *, const CMTime *))(*(_QWORD *)v31 + 24))(v31, a3);
  if (vabdd_f64(v20, (*(double (**)(OZVertex *, const CMTime *))(*(_QWORD *)a2 + 24))(a2, a3)) < 0.0000001)
  {
    time1.value = 0;
    time2.value = 0;
    (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(_QWORD *)v31 + 64))(v31, &time1, &time2, a3);
    (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)v31 + 80))(v31, a3, *(double *)&time1.value, 0.0);
    (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(_QWORD *)v31 + 56))(v31, &time1, &time2, a3);
    if (fabs(*(double *)&time2.value) >= 0.0000001)
    {
      v15 = v31;
      if (v31)
        goto LABEL_15;
    }
  }
}

double PCMath::mod@<D0>(PCMath *this@<X0>, const CMTime *a2@<X1>, _QWORD *a3@<X8>)
{
  double result;
  CMTime v7;
  CMTime v8;
  __int128 v9;
  CMTime v10;
  CMTime v11;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  operator/((__int128 *)this, (uint64_t)a2, (uint64_t)a3);
  CMTimeMake(&v7, 1, 1);
  v11 = *(CMTime *)a3;
  v10 = v7;
  PC_CMTimeFloorToSampleDuration(&v11, &v10, (uint64_t)&v8);
  v11 = *(CMTime *)a3;
  v10 = v8;
  PC_CMTimeSaferSubtract(&v11, &v10, (uint64_t)&v9);
  operator*(&v9, (uint64_t)a2, (uint64_t)&v11);
  result = *(double *)&v11.value;
  *(CMTime *)a3 = v11;
  return result;
}

uint64_t OZSpline::generateExtrapolatedVertices(OZSpline *this, int a2, unsigned int a3, const CMTime *a4)
{
  unsigned int NumberOfValidVertices;
  BOOL v8;
  uint64_t v9;
  CMTime *v10;
  _OWORD *v11;
  unsigned int v12;
  unsigned int v13;
  CMTimeEpoch *v14;
  uint64_t v15;
  double v16;
  double v17;
  OZStaticVertex *v18;
  double v19;
  OZStaticVertex *v20;
  uint64_t v21;
  int32_t v22;
  void (*v23)(CMTimeEpoch *, double *, double *, const CMTime *);
  OZStaticVertex *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  int32_t v28;
  OZStaticVertex *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  unsigned int v33;
  CMTimeEpoch *v34;
  uint64_t v35;
  double v36;
  OZStaticVertex *v37;
  uint64_t v38;
  int32_t v39;
  void (*v40)(CMTimeEpoch *, double *, double *, const CMTime *);
  double v41;
  double v42;
  OZStaticVertex *v43;
  OZStaticVertex *v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  int32_t v48;
  OZStaticVertex *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  unsigned int v54;
  int v55;
  int32_t v57;
  int32_t v58;
  CMTimeEpoch *v59;
  char *v60;
  OZSpline *v61;
  CMTime v62;
  CMTime v63;
  CMTime v64;
  CMTime v65;
  CMTime v66;
  CMTime v67;
  double v68;
  CMTime v69;
  double v70;
  double v71;
  void *v72;
  void *v73;
  void *v74;
  CMTime v75;
  CMTime time2;
  CMTime time1;

  v73 = 0;
  v74 = 0;
  v71 = 0.0;
  v72 = 0;
  v70 = 0.0;
  v69 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v68 = 0.0;
  v61 = (OZSpline *)operator new();
  OZSpline::OZSpline(v61, this, *((OZSplineState **)this + 21));
  NumberOfValidVertices = OZSpline::getNumberOfValidVertices(this, MEMORY[0x1E0CA2E68]);
  OZSpline::getFirstValidVertex(this, &v74, a4);
  OZSpline::getLastValidVertex(this, &v73, a4);
  if (v74)
    v8 = v73 == 0;
  else
    v8 = 1;
  v9 = !v8;
  if (!v8)
  {
    v59 = (CMTimeEpoch *)v74;
    v60 = (char *)v73;
    v54 = v9;
    if (a3)
    {
      v10 = (CMTime *)((char *)v73 + 16);
      v11 = (char *)v74 + 16;
      v12 = 1;
      v55 = a2;
      while (a2)
      {
        if (a2 == 1)
        {
          v72 = v74;
          if (NumberOfValidVertices)
          {
            v57 = v12 - 1;
            v58 = v12 + 1;
            v13 = 1;
            v14 = v59;
            while (1)
            {
              v15 = *(unsigned int *)(*((_QWORD *)this + 21) + 40);
              switch((int)v15)
              {
                case 0:
                  if (v13 != 1)
                  {
                    *(_OWORD *)&v65.value = *v11;
                    v65.epoch = v59[4];
                    operator*(&v65, v58, &v66);
                    v64 = *(CMTime *)(v14 + 2);
                    time1 = v66;
                    time2 = v64;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v67);
                    v62 = *v10;
                    operator*(&v62, v57, &v63);
                    time1 = v67;
                    time2 = v63;
                    v16 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v75);
                    v17 = (*(double (**)(CMTimeEpoch *, const CMTime *, double))(*v59 + 24))(v59, a4, v16);
                    v18 = OZSpline::addVertexNoTangents(v61, &v75, v17, a4, 1);
                    goto LABEL_19;
                  }
                  goto LABEL_56;
                case 1:
                  if (v13 != 1)
                  {
                    *(_OWORD *)&v65.value = *v11;
                    v65.epoch = v59[4];
                    operator*(&v65, v58, &v66);
                    v64 = *(CMTime *)(v14 + 2);
                    time1 = v66;
                    time2 = v64;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v67);
                    v62 = *v10;
                    operator*(&v62, v57, &v63);
                    time1 = v67;
                    time2 = v63;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v75);
                    OZSpline::extrapolate(this, (char *)v59, a4, &v75, &v68, 1);
                    *(_OWORD *)&v65.value = *v11;
                    v65.epoch = v59[4];
                    operator*(&v65, v58, &v66);
                    v64 = *(CMTime *)(v14 + 2);
                    time1 = v66;
                    time2 = v64;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v67);
                    v62 = *v10;
                    operator*(&v62, v57, &v63);
                    time1 = v67;
                    time2 = v63;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v75);
                    v18 = OZSpline::addVertexNoTangents(v61, &v75, v68, a4, 1);
LABEL_19:
                    (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v18 + 200))(v18, v15);
                  }
                  goto LABEL_56;
                case 2:
                  if ((v12 & 1) != 0)
                  {
                    *(_OWORD *)&v65.value = *v11;
                    v65.epoch = v59[4];
                    operator*(&v65, v58, &v66);
                    v64 = *(CMTime *)(v14 + 2);
                    time1 = v66;
                    time2 = v64;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v67);
                    v62 = *v10;
                    operator*(&v62, v57, &v63);
                    time1 = v67;
                    time2 = v63;
                  }
                  else
                  {
                    v67 = *(CMTime *)(v14 + 2);
                    v64 = *v10;
                    *(_OWORD *)&v63.value = *v11;
                    v63.epoch = v59[4];
                    time1 = v64;
                    time2 = v63;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v65);
                    operator*(&v65, v12, &v66);
                    time1 = v67;
                    time2 = v66;
                  }
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v75);
                  v69 = v75;
                  OZSpline::extrapolate(this, (char *)v59, a4, &v69, &v68, 1);
                  v24 = OZSpline::addVertexNoTangents(v61, &v69, v68, a4, 1);
                  if (!v24)
                    goto LABEL_56;
                  if ((v12 & 1) != 0)
                  {
                    time1.value = 0;
                    v31 = (*(uint64_t (**)(CMTimeEpoch *))(*v14 + 208))(v14);
                    if (OZSpline::getPreviousValidVertex(this, v14, (void **)&time1, MEMORY[0x1E0CA2E68]))
                      v31 = (*(uint64_t (**)(CMTimeValue))(*(_QWORD *)time1.value + 208))(time1.value);
                    (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v24 + 200))(v24, v31);
                    if (v14 == (CMTimeEpoch *)v60)
                    {
                      (*(void (**)(char *, double *, double *, const CMTime *))(*(_QWORD *)v60 + 56))(v60, &v71, &v70, a4);
                      (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v24 + 80))(v24, a4, -v71, v70);
                      v32.n128_f64[0] = v71;
                    }
                    else
                    {
                      if (v14 == v59)
                      {
                        (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v59 + 64))(v59, &v71, &v70, a4);
                      }
                      else
                      {
                        (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v14 + 56))(v14, &v71, &v70, a4);
                        (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v24 + 80))(v24, a4, -v71, v70);
                        (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v14 + 64))(v14, &v71, &v70, a4);
                      }
                      v32.n128_f64[0] = -v71;
                    }
                    (*(void (**)(OZStaticVertex *, const CMTime *, __n128, double))(*(_QWORD *)v24 + 72))(v24, a4, v32, v70);
                    goto LABEL_56;
                  }
                  v25 = (*(uint64_t (**)(CMTimeEpoch *))(*v14 + 208))(v14);
                  (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v24 + 200))(v24, v25);
                  if (v14 == v59)
                  {
                    (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v59 + 64))(v59, &v71, &v70, a4);
                    (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v24 + 80))(v24, a4, v71, v70);
                    v26.n128_f64[0] = -v71;
LABEL_51:
                    v27 = 9;
                    goto LABEL_52;
                  }
                  if (v14 == (CMTimeEpoch *)v60)
                  {
                    (*(void (**)(char *, double *, double *, const CMTime *))(*(_QWORD *)v60 + 56))(v60, &v71, &v70, a4);
                    v26.n128_f64[0] = v71;
                    goto LABEL_51;
                  }
                  (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v14 + 56))(v14, &v71, &v70, a4);
                  (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v24 + 72))(v24, a4, v71, v70);
                  (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v14 + 64))(v14, &v71, &v70, a4);
                  v26.n128_f64[0] = v71;
                  v27 = 10;
LABEL_52:
                  (*(void (**)(OZStaticVertex *, const CMTime *, __n128, double))(*(_QWORD *)v24 + 8 * v27))(v24, a4, v26, v70);
LABEL_56:
                  OZSpline::getNextValidVertex((void ***)this, v72, &v72, a4);
                  if (v13 >= NumberOfValidVertices)
                    goto LABEL_106;
                  v14 = (CMTimeEpoch *)v72;
                  ++v13;
                  if (!v72)
                    goto LABEL_106;
                  break;
                case 3:
                  v67 = *(CMTime *)(v14 + 2);
                  v64 = *v10;
                  *(_OWORD *)&v63.value = *v11;
                  v63.epoch = v59[4];
                  time1 = v64;
                  time2 = v63;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v65);
                  operator*(&v65, v12, &v66);
                  time1 = v67;
                  time2 = v66;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v75);
                  v69 = v75;
                  if (v14 == (CMTimeEpoch *)v60)
                  {
                    if (**((_BYTE **)this + 21))
                      v28 = 1;
                    else
                      v28 = 100;
                    CMTimeMake(&v67, 1, v28);
                    time2 = v69;
                    v75 = v67;
                    PC_CMTimeSaferSubtract(&time2, &v75, (uint64_t)&time1);
                    v69 = time1;
                    OZSpline::extrapolate(this, (char *)v59, a4, &v69, &v68, 1);
                    v19 = v68;
                  }
                  else
                  {
                    v19 = (*(double (**)(CMTimeEpoch *, const CMTime *))(*v14 + 24))(v14, a4);
                    v68 = v19;
                  }
                  v29 = OZSpline::addVertexNoTangents(v61, &v69, v19, a4, 0);
                  if (v29)
                  {
                    v30 = (*(uint64_t (**)(CMTimeEpoch *))(*v14 + 208))(v14);
                    (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v29 + 200))(v29, v30);
                    (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v14 + 56))(v14, &v71, &v70, a4);
                    (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v29 + 72))(v29, a4, v71, v70);
                    (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v14 + 64))(v14, &v71, &v70, a4);
                    (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v29 + 80))(v29, a4, v71, v70);
                  }
                  goto LABEL_56;
                case 4:
                  v67 = *(CMTime *)(v14 + 2);
                  v64 = *v10;
                  *(_OWORD *)&v63.value = *v11;
                  v63.epoch = v59[4];
                  time1 = v64;
                  time2 = v63;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v65);
                  operator*(&v65, v12, &v66);
                  time1 = v67;
                  time2 = v66;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v75);
                  v69 = v75;
                  OZSpline::extrapolate(this, (char *)v59, a4, &v69, &v68, 1);
                  v20 = OZSpline::addVertexNoTangents(v61, &v69, v68, a4, 1);
                  if (!v20)
                    goto LABEL_56;
                  v21 = (*(uint64_t (**)(CMTimeEpoch *))(*v14 + 208))(v14);
                  (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v20 + 200))(v20, v21);
                  v75 = *(CMTime *)(v14 + 2);
                  *(_OWORD *)&v67.value = *v11;
                  v67.epoch = v59[4];
                  time1 = v75;
                  time2 = v67;
                  if (CMTimeCompare(&time1, &time2))
                  {
                    v75 = *(CMTime *)(v14 + 2);
                    v67 = *v10;
                    time1 = v75;
                    time2 = v67;
                    v22 = CMTimeCompare(&time1, &time2);
                    v23 = *(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v14 + 56);
                    if (v22)
                    {
                      v23(v14, &v71, &v70, a4);
                      (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v20 + 72))(v20, a4, v71, v70);
                    }
                    else
                    {
                      v23(v14, &v71, &v70, a4);
                      (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v20 + 72))(v20, a4, v71, v70);
                      v14 = v59;
                      if (v12 >= a3)
                        goto LABEL_56;
                    }
                  }
                  else
                  {
                    (*(void (**)(char *, double *, double *, const CMTime *))(*(_QWORD *)v60 + 56))(v60, &v71, &v70, a4);
                    (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v20 + 72))(v20, a4, v71, v70);
                    v14 = v59;
                  }
                  (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v14 + 64))(v14, &v71, &v70, a4);
                  (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v20 + 80))(v20, a4, v71, v70);
                  goto LABEL_56;
                default:
                  goto LABEL_56;
              }
            }
          }
        }
LABEL_106:
        ++v12;
        a2 = v55;
        if (v12 > a3)
          goto LABEL_107;
      }
      v72 = v74;
      v33 = 1;
      v34 = v59;
      while (1)
      {
        v35 = *(unsigned int *)(*((_QWORD *)this + 21) + 36);
        switch((int)v35)
        {
          case 0:
            if (v33 != 1)
            {
              v67 = *(CMTime *)(v34 + 2);
              v64 = *v10;
              *(_OWORD *)&v63.value = *v11;
              v63.epoch = v59[4];
              time1 = v64;
              time2 = v63;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v65);
              operator*(&v65, v12, &v66);
              time1 = v67;
              time2 = v66;
              v41 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v75);
              v42 = (*(double (**)(char *, const CMTime *, double))(*(_QWORD *)v60 + 24))(v60, a4, v41);
              v43 = OZSpline::addVertexNoTangents(v61, &v75, v42, a4, 1);
              goto LABEL_75;
            }
            time1.value = 0;
            OZSpline::getLastValidVertex(v61, (void **)&time1, a4);
            (*(void (**)(CMTimeValue, _QWORD))(*(_QWORD *)time1.value + 200))(time1.value, 0);
            goto LABEL_104;
          case 1:
            if (v33 == 1)
            {
              time1.value = 0;
              OZSpline::getLastValidVertex(v61, (void **)&time1, a4);
              (*(void (**)(CMTimeValue, uint64_t))(*(_QWORD *)time1.value + 200))(time1.value, 1);
            }
            else
            {
              v67 = *(CMTime *)(v34 + 2);
              v64 = *v10;
              *(_OWORD *)&v63.value = *v11;
              v63.epoch = v59[4];
              time1 = v64;
              time2 = v63;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v65);
              operator*(&v65, v12, &v66);
              time1 = v67;
              time2 = v66;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v75);
              OZSpline::extrapolate(this, v60, a4, &v75, &v68, 0);
              v67 = *(CMTime *)(v34 + 2);
              v64 = *v10;
              *(_OWORD *)&v63.value = *v11;
              v63.epoch = v59[4];
              time1 = v64;
              time2 = v63;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v65);
              operator*(&v65, v12, &v66);
              time1 = v67;
              time2 = v66;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v75);
              v43 = OZSpline::addVertexNoTangents(v61, &v75, v68, a4, 1);
LABEL_75:
              (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v43 + 200))(v43, v35);
            }
            goto LABEL_104;
          case 2:
            if ((v12 & 1) != 0)
            {
              v65 = *v10;
              operator*(&v65, v12 + 1, &v66);
              v64 = *(CMTime *)(v34 + 2);
              time1 = v66;
              time2 = v64;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v67);
              *(_OWORD *)&v62.value = *v11;
              v62.epoch = v59[4];
              operator*(&v62, v12 - 1, &v63);
              time1 = v67;
              time2 = v63;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v75);
            }
            else
            {
              v67 = *(CMTime *)(v34 + 2);
              v64 = *v10;
              *(_OWORD *)&v63.value = *v11;
              v63.epoch = v59[4];
              time1 = v64;
              time2 = v63;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v65);
              operator*(&v65, v12, &v66);
              time1 = v67;
              time2 = v66;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v75);
            }
            v69 = v75;
            OZSpline::extrapolate(this, v60, a4, &v69, &v68, 0);
            v44 = OZSpline::addVertexNoTangents(v61, &v69, v68, a4, 1);
            if (!v44)
              goto LABEL_104;
            if ((v12 & 1) != 0)
            {
              time1.value = 0;
              v51 = (*(uint64_t (**)(CMTimeEpoch *))(*v34 + 208))(v34);
              if (OZSpline::getPreviousValidVertex(this, v34, (void **)&time1, MEMORY[0x1E0CA2E68]))
                v51 = (*(uint64_t (**)(CMTimeValue))(*(_QWORD *)time1.value + 208))(time1.value);
              (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v44 + 200))(v44, v51);
              if (v34 == (CMTimeEpoch *)v60)
              {
                (*(void (**)(char *, double *, double *, const CMTime *))(*(_QWORD *)v60 + 56))(v60, &v71, &v70, a4);
                (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v44 + 80))(v44, a4, -v71, v70);
                v52.n128_f64[0] = v71;
              }
              else
              {
                if (v34 == v59)
                {
                  (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v59 + 64))(v59, &v71, &v70, a4);
                }
                else
                {
                  (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v34 + 56))(v34, &v71, &v70, a4);
                  (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v44 + 80))(v44, a4, -v71, v70);
                  (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v34 + 64))(v34, &v71, &v70, a4);
                }
                v52.n128_f64[0] = -v71;
              }
              (*(void (**)(OZStaticVertex *, const CMTime *, __n128, double))(*(_QWORD *)v44 + 72))(v44, a4, v52, v70);
              goto LABEL_104;
            }
            v45 = (*(uint64_t (**)(CMTimeEpoch *))(*v34 + 208))(v34);
            (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v44 + 200))(v44, v45);
            if (v34 == v59)
            {
              (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v59 + 64))(v59, &v71, &v70, a4);
              (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v44 + 80))(v44, a4, v71, v70);
              v46.n128_f64[0] = -v71;
LABEL_99:
              v47 = 9;
              goto LABEL_100;
            }
            if (v34 == (CMTimeEpoch *)v60)
            {
              (*(void (**)(char *, double *, double *, const CMTime *))(*(_QWORD *)v60 + 56))(v60, &v71, &v70, a4);
              v46.n128_f64[0] = v71;
              goto LABEL_99;
            }
            (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v34 + 56))(v34, &v71, &v70, a4);
            (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v44 + 72))(v44, a4, v71, v70);
            (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v34 + 64))(v34, &v71, &v70, a4);
            v46.n128_f64[0] = v71;
            v47 = 10;
LABEL_100:
            (*(void (**)(OZStaticVertex *, const CMTime *, __n128, double))(*(_QWORD *)v44 + 8 * v47))(v44, a4, v46, v70);
LABEL_104:
            OZSpline::getNextValidVertex((void ***)this, v72, &v72, a4);
            if (v33 > NumberOfValidVertices)
              goto LABEL_106;
            v34 = (CMTimeEpoch *)v72;
            ++v33;
            if (!v72)
              goto LABEL_106;
            break;
          case 3:
            v67 = *(CMTime *)(v34 + 2);
            v64 = *v10;
            *(_OWORD *)&v63.value = *v11;
            v63.epoch = v59[4];
            time1 = v64;
            time2 = v63;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v65);
            operator*(&v65, v12, &v66);
            time1 = v67;
            time2 = v66;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v75);
            v69 = v75;
            if (v34 == v59)
            {
              if (**((_BYTE **)this + 21))
                v48 = 1;
              else
                v48 = 100;
              CMTimeMake(&v67, 1, v48);
              time2 = v69;
              v75 = v67;
              PC_CMTimeSaferAdd(&time2, &v75, (uint64_t)&time1);
              v69 = time1;
              OZSpline::extrapolate(this, v60, a4, &v69, &v68, 0);
              v36 = v68;
            }
            else
            {
              v36 = (*(double (**)(CMTimeEpoch *, const CMTime *))(*v34 + 24))(v34, a4);
              v68 = v36;
            }
            v49 = OZSpline::addVertexNoTangents(v61, &v69, v36, a4, 1);
            if (v49)
            {
              v50 = (*(uint64_t (**)(CMTimeEpoch *))(*v34 + 208))(v34);
              (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v49 + 200))(v49, v50);
              (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v34 + 56))(v34, &v71, &v70, a4);
              (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v49 + 72))(v49, a4, v71, v70);
              (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v34 + 64))(v34, &v71, &v70, a4);
              (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v49 + 80))(v49, a4, v71, v70);
            }
            goto LABEL_104;
          case 4:
            v67 = *(CMTime *)(v34 + 2);
            v64 = *v10;
            *(_OWORD *)&v63.value = *v11;
            v63.epoch = v59[4];
            time1 = v64;
            time2 = v63;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v65);
            operator*(&v65, v12, &v66);
            time1 = v67;
            time2 = v66;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v75);
            v69 = v75;
            OZSpline::extrapolate(this, v60, a4, &v69, &v68, 0);
            v37 = OZSpline::addVertexNoTangents(v61, &v69, v68, a4, 1);
            if (!v37)
              goto LABEL_104;
            v38 = (*(uint64_t (**)(CMTimeEpoch *))(*v34 + 208))(v34);
            (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v37 + 200))(v37, v38);
            v75 = *(CMTime *)(v34 + 2);
            *(_OWORD *)&v67.value = *v11;
            v67.epoch = v59[4];
            time1 = v75;
            time2 = v67;
            if (CMTimeCompare(&time1, &time2))
            {
              v75 = *(CMTime *)(v34 + 2);
              v67 = *v10;
              time1 = v75;
              time2 = v67;
              v39 = CMTimeCompare(&time1, &time2);
              v40 = *(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v34 + 56);
              if (v39)
              {
                v40(v34, &v71, &v70, a4);
                (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v37 + 72))(v37, a4, v71, v70);
              }
              else
              {
                v40(v34, &v71, &v70, a4);
                (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v37 + 72))(v37, a4, v71, v70);
                v34 = v59;
                if (v12 >= a3)
                  goto LABEL_104;
              }
            }
            else
            {
              (*(void (**)(char *, double *, double *, const CMTime *))(*(_QWORD *)v60 + 56))(v60, &v71, &v70, a4);
              (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v37 + 72))(v37, a4, v71, v70);
              v34 = v59;
            }
            (*(void (**)(CMTimeEpoch *, double *, double *, const CMTime *))(*v34 + 64))(v34, &v71, &v70, a4);
            (*(void (**)(OZStaticVertex *, const CMTime *, double, double))(*(_QWORD *)v37 + 80))(v37, a4, v71, v70);
            goto LABEL_104;
          default:
            goto LABEL_104;
        }
      }
    }
LABEL_107:
    OZSpline::operator=(this, (os_unfair_lock_s *)v61);
    v9 = v54;
    *((_BYTE *)this + 145) = 1;
    *(_OWORD *)((char *)this + 40) = *((_OWORD *)this + 1);
    OZSpline::refreshValidVerticesList(this);
  }
  (*(void (**)(OZSpline *))(*(_QWORD *)v61 + 8))(v61);
  return v9;
}

void sub_1B2C53574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  MEMORY[0x1B5E29170](a14, 0x10A1C4049CA59C4);
  _Unwind_Resume(a1);
}

BOOL OZSpline::setVertexInterpolation(OZSpline *this, void *a2, uint64_t a3)
{
  if (a2)
    (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 200))(a2, a3);
  return a2 != 0;
}

BOOL OZSpline::getVertexInterpolation(OZInterpolators **this, void *a2, unsigned int *a3, BOOL *a4)
{
  int v8;

  if (a2)
  {
    v8 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 208))(a2);
    if (a4)
      *a4 = OZSpline::interpolatorUsesTangents(this, v8, a2);
    if (a3)
      *a3 = v8;
  }
  return a2 != 0;
}

uint64_t OZSpline::adjustVertexSpeed(void ***this, void *a2, double a3)
{
  int v5;
  uint64_t v6;
  double v7;
  int v8;
  double v9;
  __n128 v10;
  double v11;
  double v12;
  void *v14;

  if (a2)
  {
    v14 = 0;
    OZSpline::getNextValidVertex(this, a2, &v14, MEMORY[0x1E0CA2E68]);
    if (v14)
    {
      v5 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 208))(a2);
      if (v5 == 1)
      {
        v6 = MEMORY[0x1E0CA2E68];
        v7 = (*(double (**)(void *, _QWORD))(*(_QWORD *)a2 + 24))(a2, MEMORY[0x1E0CA2E68]);
        if (vabdd_f64(v7, (*(double (**)(void *, uint64_t))(*(_QWORD *)v14 + 24))(v14, v6)) < 0.0000001)
          return 0;
        v8 = 15;
        (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 200))(a2, 15);
        (*(void (**)(void *, _QWORD, double))(*(_QWORD *)a2 + 48))(a2, MEMORY[0x1E0CA2E68], 2.0);
      }
      else
      {
        v8 = v5;
        if ((v5 - 15) > 2)
          return 0;
      }
      v9 = a3 / -3.0;
      (*(void (**)(void *, _QWORD))(*(_QWORD *)a2 + 40))(a2, MEMORY[0x1E0CA2E68]);
      v11 = -v9;
      if (v8 != 17)
        v11 = v9;
      v12 = v10.n128_f64[0] + v11;
      v10.n128_u64[0] = 0;
      if (v12 >= 0.0)
      {
        v10.n128_f64[0] = v12;
        if (v12 > 2.0)
          v10.n128_u64[0] = 2.0;
      }
      (*(void (**)(void *, _QWORD, __n128))(*(_QWORD *)a2 + 48))(a2, MEMORY[0x1E0CA2E68], v10);
    }
  }
  return 0;
}

uint64_t OZSpline::getVertexSpeed(OZSpline *this, void *a2, unsigned int *a3)
{
  int v4;
  uint64_t result;

  if (!a2)
    return 0;
  v4 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 208))(a2);
  result = 0;
  if (v4 <= 15)
  {
    if (v4 != 1)
    {
      if (v4 != 15)
        return result;
      if (!a3)
        return 1;
      LODWORD(result) = 3;
      goto LABEL_16;
    }
    if (a3)
    {
      LODWORD(result) = 0;
LABEL_16:
      *a3 = result;
      return 1;
    }
    return 1;
  }
  if (v4 == 16)
  {
    if (a3)
    {
      LODWORD(result) = 2;
      goto LABEL_16;
    }
    return 1;
  }
  if (v4 == 17)
  {
    result = 1;
    if (a3)
      goto LABEL_16;
  }
  return result;
}

uint64_t OZSpline::getVertexFlags(OZSpline *this, void *a2, unsigned int *a3)
{
  BOOL v3;
  uint64_t v4;

  if (a2)
    v3 = a3 == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (!v3)
    *a3 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 168))(a2);
  return v4;
}

BOOL OZSpline::setVertexFlags(OZSpline *this, void *a2, uint64_t a3)
{
  if (a2)
    (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 176))(a2, a3);
  return a2 != 0;
}

BOOL OZSpline::resetVertexFlag(OZSpline *this, void *a2, uint64_t a3)
{
  if (a2)
    (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 160))(a2, a3);
  return a2 != 0;
}

BOOL OZSpline::enableVertex(OZSpline *this, void *a2, const CMTime *a3)
{
  if (a2)
  {
    (*(void (**)(void *, uint64_t, const CMTime *))(*(_QWORD *)a2 + 128))(a2, 1, a3);
    *((_BYTE *)this + 145) = 1;
    *(_OWORD *)((char *)this + 40) = *((_OWORD *)this + 1);
    OZSpline::refreshValidVerticesList(this);
  }
  return a2 != 0;
}

BOOL OZSpline::disableVertex(OZSpline *this, void *a2, const CMTime *a3)
{
  if (a2)
  {
    (*(void (**)(void *, _QWORD, const CMTime *))(*(_QWORD *)a2 + 128))(a2, 0, a3);
    *((_BYTE *)this + 145) = 1;
    *(_OWORD *)((char *)this + 40) = *((_OWORD *)this + 1);
    OZSpline::refreshValidVerticesList(this);
  }
  return a2 != 0;
}

uint64_t OZSpline::isEnabledVertex(OZSpline *this, void *a2, const CMTime *a3)
{
  if (a2)
    return (*(uint64_t (**)(void *, const CMTime *))(*(_QWORD *)a2 + 136))(a2, a3);
  else
    return 0;
}

BOOL OZSpline::flattenHandles(OZSpline *this, void *a2, const CMTime *a3)
{
  if (a2)
  {
    (*(void (**)(void *, const CMTime *))(*(_QWORD *)a2 + 88))(a2, a3);
    (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 152))(a2, 128);
  }
  return a2 != 0;
}

uint64_t OZSpline::setVertexInputHandles(OZInterpolators **this, void *a2, double a3, double a4, const CMTime *a5, int a6)
{
  int v10;
  uint64_t Interpolator;
  double v13;
  double v14;

  v13 = a4;
  v14 = a3;
  v10 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 208))(a2);
  if (a6)
  {
    Interpolator = OZInterpolators::getInterpolator(this[19], v10);
    (*(void (**)(uint64_t, OZInterpolators **, double *, double *))(*(_QWORD *)Interpolator + 40))(Interpolator, this, &v14, &v13);
  }
  (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 160))(a2, 256);
  (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 152))(a2, 128);
  (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)a2 + 72))(a2, a5, v14, v13);
  return 1;
}

uint64_t OZSpline::setVertexOutputHandles(OZInterpolators **this, void *a2, double a3, double a4, const CMTime *a5, int a6)
{
  double v8;
  double v9;
  int v12;
  uint64_t Interpolator;
  double v15;
  double v16;

  v8 = a4;
  v9 = a3;
  v15 = a4;
  v16 = a3;
  v12 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 208))(a2);
  if (a6)
  {
    Interpolator = OZInterpolators::getInterpolator(this[19], v12);
    (*(void (**)(uint64_t, OZInterpolators **, double *, double *))(*(_QWORD *)Interpolator + 40))(Interpolator, this, &v16, &v15);
    v8 = v15;
    v9 = v16;
  }
  (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)a2 + 80))(a2, a5, v9, v8);
  (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 160))(a2, 256);
  (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 152))(a2, 128);
  return 1;
}

uint64_t OZSpline::getVertexInputHandles(OZInterpolators **this, void *a2, double *a3, double *a4, const CMTime *a5, int a6)
{
  int v12;
  uint64_t Interpolator;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v12 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 208))(a2);
  (*(void (**)(void *, uint64_t *, uint64_t *, const CMTime *))(*(_QWORD *)a2 + 56))(a2, &v16, &v15, a5);
  if (a3)
    *(_QWORD *)a3 = v16;
  if (a4)
    *(_QWORD *)a4 = v15;
  if (a6)
  {
    Interpolator = OZInterpolators::getInterpolator(this[19], v12);
    (*(void (**)(uint64_t, OZInterpolators **, double *, double *))(*(_QWORD *)Interpolator + 48))(Interpolator, this, a3, a4);
  }
  return 1;
}

uint64_t OZSpline::getVertexOutputHandles(OZInterpolators **this, void *a2, double *a3, double *a4, const CMTime *a5, int a6)
{
  int v12;
  uint64_t Interpolator;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v12 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 208))(a2);
  (*(void (**)(void *, uint64_t *, uint64_t *, const CMTime *))(*(_QWORD *)a2 + 64))(a2, &v16, &v15, a5);
  if (a3)
    *(_QWORD *)a3 = v16;
  if (a4)
    *(_QWORD *)a4 = v15;
  if (a6)
  {
    Interpolator = OZInterpolators::getInterpolator(this[19], v12);
    (*(void (**)(uint64_t, OZInterpolators **, double *, double *))(*(_QWORD *)Interpolator + 48))(Interpolator, this, a3, a4);
  }
  return 1;
}

uint64_t OZSpline::setVertexNormal(OZSpline *this, void *a2, double a3, const CMTime *a4)
{
  (*(void (**)(void *, const CMTime *, double))(*(_QWORD *)a2 + 104))(a2, a4, a3);
  return 1;
}

uint64_t OZSpline::getVertexNormal(OZSpline *this, void *a2, double *a3, const CMTime *a4)
{
  if (a3)
    *a3 = (*(double (**)(void *, const CMTime *))(*(_QWORD *)a2 + 112))(a2, a4);
  return 1;
}

uint64_t OZSpline::setVertexNormal(OZSpline *this, const CMTime *a2, double a3, const CMTime *a4)
{
  int PreviousValidVertex;
  uint64_t result;
  void *v10;

  v10 = 0;
  OZSpline::getVertexHandle(this, a2, &v10, 0);
  if (v10 && ((*(uint64_t (**)(void *, const CMTime *))(*(_QWORD *)v10 + 136))(v10, a4) & 1) != 0
    || (PreviousValidVertex = OZSpline::getPreviousValidVertex(this, a2, &v10, MEMORY[0x1E0CA2E68], 0),
        result = 0,
        PreviousValidVertex))
  {
    (*(void (**)(void *, const CMTime *, double))(*(_QWORD *)v10 + 104))(v10, a4, a3);
    return 1;
  }
  return result;
}

uint64_t OZSpline::getVertexNormal(OZSpline *this, const CMTime *a2, double *a3, const CMTime *a4)
{
  int PreviousValidVertex;
  uint64_t result;
  void *v10;

  v10 = 0;
  OZSpline::getVertexHandle(this, a2, &v10, 0);
  if (v10 && ((*(uint64_t (**)(void *, const CMTime *))(*(_QWORD *)v10 + 136))(v10, a4) & 1) != 0
    || (PreviousValidVertex = OZSpline::getPreviousValidVertex(this, a2, &v10, MEMORY[0x1E0CA2E68], 0),
        result = 0,
        PreviousValidVertex))
  {
    if (a3)
      *a3 = (*(double (**)(void *, const CMTime *))(*(_QWORD *)v10 + 112))(v10, a4);
    return 1;
  }
  return result;
}

uint64_t OZSpline::setVertexBiasLinear(OZSpline *this, void *a2, double a3, const CMTime *a4)
{
  uint64_t v9;
  void *v11;
  void *v12;

  v11 = 0;
  v12 = 0;
  OZSpline::getFirstValidVertex(this, &v12, a4);
  OZSpline::getLastValidVertex(this, &v11, a4);
  if (!*((_BYTE *)this + 144) && (!v12 || v11 == 0))
  {
    v9 = *((_QWORD *)this + 20);
    if (!v9 || !*(_BYTE *)(v9 + 56))
      return 0;
  }
  (*(void (**)(void *, const CMTime *, double))(*(_QWORD *)a2 + 48))(a2, a4, a3);
  return 1;
}

uint64_t OZSpline::getVertexBiasLinear(OZSpline *this, void *a2, double *a3, const CMTime *a4)
{
  if (a3)
    *a3 = (*(double (**)(void *, const CMTime *))(*(_QWORD *)a2 + 40))(a2, a4);
  return 1;
}

uint64_t OZSpline::setVertexBiasExp(OZSpline *this, void *a2, long double a3, const CMTime *a4)
{
  double v7;
  uint64_t v8;
  void *v10;
  void *v11;

  v7 = exp(a3);
  v10 = 0;
  v11 = 0;
  OZSpline::getFirstValidVertex(this, &v11, a4);
  OZSpline::getLastValidVertex(this, &v10, a4);
  if (!*((_BYTE *)this + 144) && (!v11 || !v10))
  {
    v8 = *((_QWORD *)this + 20);
    if (!v8 || !*(_BYTE *)(v8 + 56))
      return 0;
  }
  (*(void (**)(void *, const CMTime *, double))(*(_QWORD *)a2 + 48))(a2, a4, v7);
  return 1;
}

uint64_t OZSpline::getVertexBiasExp(OZSpline *this, void *a2, long double *a3, const CMTime *a4)
{
  long double v5;

  if (a3)
  {
    v5 = (*(double (**)(void *, const CMTime *))(*(_QWORD *)a2 + 40))(a2, a4);
    *a3 = log(v5);
  }
  return 1;
}

uint64_t OZSpline::warpSplineLinear(uint64_t this, Float64 a2, const CMTime *a3, const CMTime *a4)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  CMTime v12;
  _BYTE v13[24];
  uint64_t v14;
  double v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;

  v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v14 = 0;
  v15 = 0.0;
  v5 = *(uint64_t **)(this + 40);
  if (*(uint64_t **)(this + 48) != v5)
  {
    v8 = this;
    do
    {
      v9 = *v5;
      v16 = *(CMTime *)(*v5 + 16);
      (*(void (**)(uint64_t, double *, uint64_t *, const CMTime *))(*(_QWORD *)v9 + 56))(v9, &v15, &v14, a4);
      v15 = v15 * a2;
      (*(void (**)(uint64_t, const CMTime *))(*(_QWORD *)*v5 + 72))(*v5, a4);
      (*(void (**)(uint64_t, double *, uint64_t *, const CMTime *))(*(_QWORD *)*v5 + 64))(*v5, &v15, &v14, a4);
      v15 = v15 * a2;
      (*(void (**)(uint64_t, const CMTime *))(*(_QWORD *)*v5 + 80))(*v5, a4);
      v10 = *v5++;
      operator*(&v16, &v12, a2);
      v18 = v12;
      v17 = *a3;
      v11 = PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)v13);
      this = (*(uint64_t (**)(uint64_t, _BYTE *, double))(*(_QWORD *)v10 + 16))(v10, v13, v11);
    }
    while (v5 != *(uint64_t **)(v8 + 48));
  }
  return this;
}

void OZSpline::forceWarpSplineLinear(OZSpline *this, const CMTime *a2, const CMTime *a3)
{
  uint64_t *v6;
  double Seconds;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  CMTime v14;
  _BYTE v15[24];
  CMTime time;
  uint64_t v17;
  double v18;
  __int128 v19;
  uint64_t v20;
  CMTime v21;
  CMTime v22;

  v6 = (uint64_t *)*((_QWORD *)this + 5);
  v19 = *MEMORY[0x1E0CA2E68];
  v20 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v17 = 0;
  v18 = 0.0;
  time = *a2;
  Seconds = CMTimeGetSeconds(&time);
  if (*((uint64_t **)this + 6) != v6)
  {
    v8 = Seconds;
    v9 = MEMORY[0x1E0CA2E68];
    do
    {
      v11 = *v6++;
      v10 = v11;
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 168))(v11);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 176))(v10, v12 & 0xFFFFFFFD);
      v19 = *(_OWORD *)(v11 + 16);
      v20 = *(_QWORD *)(v11 + 32);
      (*(void (**)(uint64_t, double *, uint64_t *, uint64_t))(*(_QWORD *)v10 + 56))(v10, &v18, &v17, v9);
      v18 = v8 * v18;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 72))(v10, v9);
      (*(void (**)(uint64_t, double *, uint64_t *, uint64_t))(*(_QWORD *)v10 + 64))(v10, &v18, &v17, v9);
      v18 = v8 * v18;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 80))(v10, v9);
      operator*(&v19, (uint64_t)a2, (uint64_t)&v14);
      v22 = v14;
      v21 = *a3;
      v13 = PC_CMTimeSaferAdd(&v22, &v21, (uint64_t)v15);
      (*(void (**)(uint64_t, _BYTE *, double))(*(_QWORD *)v10 + 16))(v10, v15, v13);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 176))(v10, v12);
    }
    while (v6 != *((uint64_t **)this + 6));
  }
}

_QWORD *OZSpline::reverseVertices(OZSpline *this, _BYTE **a2, _BYTE **a3)
{
  uint64_t v6;
  os_unfair_lock_s *v7;
  void **VertexIter;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  const OZStaticVertex **v13;
  OZStaticVertex *v14;
  double v15;
  uint64_t *v16;
  uint64_t *v17;
  const OZStaticVertex *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  const OZStaticVertex **v25;
  char *v26;
  char *v27;
  const OZStaticVertex *v28;
  uint64_t v30;
  os_unfair_lock_s *v31;
  _QWORD *v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  char *i;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  os_unfair_lock_s *v42;
  uint64_t v43;
  os_unfair_lock_s *v44;
  CMTimeEpoch v46;
  CMTime v47;
  CMTime v48;
  double v49;
  double v50;
  void *__p;
  char *v52;
  char *v53;
  CMTime v54;
  CMTime v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  CMTime time2;
  CMTime time1;

  v6 = *((_QWORD *)this + 20);
  if (!v6 || (v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0)
    v7 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock(v7);
  v56 = (uint64_t)&v56;
  v57 = &v56;
  v58 = 0;
  VertexIter = OZSpline::getVertexIter(this, a2);
  v9 = OZSpline::getVertexIter(this, a3);
  if (v9 + 1 == VertexIter)
  {
    v41 = *((_QWORD *)this + 20);
    if (!v41 || (v42 = *(os_unfair_lock_s **)(v41 + 48)) == 0)
      v42 = (os_unfair_lock_s *)((char *)this + 8);
    PCSpinLock::unlock(v42);
  }
  else
  {
    v10 = v9;
    v55 = *(CMTime *)(a2 + 2);
    v54 = *(CMTime *)(a3 + 2);
    v11 = (*((uint64_t (**)(_BYTE **))*a2 + 26))(a2);
    __p = 0;
    v52 = 0;
    v53 = 0;
    v12 = MEMORY[0x1E0CA2E68];
    v13 = (const OZStaticVertex **)VertexIter;
    do
    {
      v14 = (OZStaticVertex *)operator new();
      OZStaticVertex::OZStaticVertex(v14, *v13);
      v49 = 0.0;
      v50 = 0.0;
      if (v13 != (const OZStaticVertex **)VertexIter)
      {
        (*(void (**)(OZSpline *, const OZStaticVertex *, double *, double *, uint64_t, _QWORD))(*(_QWORD *)this + 128))(this, *v13, &v50, &v49, v12, 0);
        (*(void (**)(OZSpline *, OZStaticVertex *, uint64_t, _QWORD, double, double))(*(_QWORD *)this + 120))(this, v14, v12, 0, -v50, -v49);
      }
      if (v13 != (const OZStaticVertex **)v10)
      {
        (*(void (**)(OZSpline *, const OZStaticVertex *, double *, double *, uint64_t, _QWORD))(*(_QWORD *)this + 136))(this, *v13, &v50, &v49, v12, 0);
        (*(void (**)(OZSpline *, OZStaticVertex *, uint64_t, _QWORD, double, double))(*(_QWORD *)this + 112))(this, v14, v12, 0, -v50, -v49);
      }
      v46 = *((_QWORD *)*v13 + 4);
      *(_OWORD *)&time1.value = *((_OWORD *)*v13 + 1);
      time1.epoch = v46;
      time2 = v55;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v47);
      time1 = v54;
      time2 = v47;
      v15 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v48);
      (*(void (**)(OZStaticVertex *, CMTime *, double))(*(_QWORD *)v14 + 16))(v14, &v48, v15);
      if (v13 == (const OZStaticVertex **)VertexIter)
        v11 = (*((uint64_t (**)(_BYTE **))*a3 + 26))(a3);
      (*(void (**)(OZStaticVertex *, uint64_t))(*(_QWORD *)v14 + 200))(v14, v11);
      v11 = (*(uint64_t (**)(const OZStaticVertex *))(*(_QWORD *)*v13 + 208))(*v13);
      v16 = (uint64_t *)operator new(0x18uLL);
      v17 = v57;
      *v16 = (uint64_t)&v56;
      v16[1] = (uint64_t)v17;
      v16[2] = (uint64_t)v14;
      *v17 = (uint64_t)v16;
      v57 = v16;
      ++v58;
      v18 = *v13;
      v19 = v52;
      if (v52 >= v53)
      {
        v21 = (v52 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v22 = (v53 - (_BYTE *)__p) >> 2;
        if (v22 <= v21 + 1)
          v22 = v21 + 1;
        if ((unint64_t)(v53 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v53, v23);
        else
          v24 = 0;
        v25 = (const OZStaticVertex **)&v24[8 * v21];
        *v25 = v18;
        v20 = (char *)(v25 + 1);
        v27 = (char *)__p;
        v26 = v52;
        if (v52 != __p)
        {
          do
          {
            v28 = (const OZStaticVertex *)*((_QWORD *)v26 - 1);
            v26 -= 8;
            *--v25 = v28;
          }
          while (v26 != v27);
          v26 = (char *)__p;
        }
        __p = v25;
        v52 = v20;
        v53 = &v24[8 * v23];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *(_QWORD *)v52 = v18;
        v20 = v19 + 8;
      }
      v52 = v20;
    }
    while (v13++ != (const OZStaticVertex **)v10);
    v30 = *((_QWORD *)this + 20);
    if (!v30 || (v31 = *(os_unfair_lock_s **)(v30 + 48)) == 0)
      v31 = (os_unfair_lock_s *)((char *)this + 8);
    PCSpinLock::unlock(v31);
    v32 = __p;
    if (v52 != __p)
    {
      v33 = 0;
      v34 = 1;
      v35 = MEMORY[0x1E0CA2E68];
      do
      {
        (*(void (**)(OZSpline *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)this + 32))(this, v32[v33], 0, v35);
        v33 = v34;
        v32 = __p;
        ++v34;
      }
      while (v33 < (v52 - (_BYTE *)__p) >> 3);
    }
    v36 = *((_QWORD *)this + 20);
    if (!v36 || (v37 = *(os_unfair_lock_s **)(v36 + 48)) == 0)
      v37 = (os_unfair_lock_s *)((char *)this + 8);
    PCSpinLock::lock(v37);
    if (v57 != &v56)
    {
      for (i = (char *)*((_QWORD *)this + 2); i != *((char **)this + 3); i += 8)
      {
        v48 = *(CMTime *)(*(_QWORD *)i + 16);
        v47 = *(CMTime *)(v57[2] + 16);
        time1 = v48;
        time2 = v47;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          break;
      }
      if (v57 == &v56)
      {
        v39 = 0;
      }
      else
      {
        v39 = 0;
        v40 = v57;
        do
        {
          ++v39;
          v40 = (uint64_t *)v40[1];
        }
        while (v40 != &v56);
      }
      std::vector<OZVertex *>::__insert_with_size[abi:ne180100]<std::__list_iterator<OZStaticVertex *,void *>,std::__list_iterator<OZStaticVertex *,void *>>((uint64_t)this + 16, i, v57, &v56, v39);
    }
    *((_BYTE *)this + 145) = 1;
    *(_OWORD *)((char *)this + 40) = *((_OWORD *)this + 1);
    OZSpline::refreshValidVerticesList(this);
    v43 = *((_QWORD *)this + 20);
    if (!v43 || (v44 = *(os_unfair_lock_s **)(v43 + 48)) == 0)
      v44 = (os_unfair_lock_s *)((char *)this + 8);
    PCSpinLock::unlock(v44);
    if (__p)
    {
      v52 = (char *)__p;
      operator delete(__p);
    }
  }
  return std::__list_imp<unsigned int>::clear(&v56);
}

void sub_1B2C549CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  std::__list_imp<unsigned int>::clear((_QWORD *)(v25 - 168));
  _Unwind_Resume(a1);
}

BOOL OZSpline::getUForValue(uint64_t a1, CMTime *a2, CMTime *a3, CMTime *a4, int a5, double a6)
{
  uint64_t v12;
  os_unfair_lock_s *v13;
  const CMTime *v14;
  CMTimeEpoch *v15;
  const CMTime *v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t Interpolator;
  CMTimeValue value;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  CMTimeValue v33;
  CMTimeValue v34;
  __int128 v35;
  char *v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  _BOOL8 v40;
  CMTime v42;
  CMTime v43;
  void *v44;
  void *v45;
  void *v46;
  CMTime v47;
  CMTime v48;
  CMTime v49;
  CMTime v50;
  CMTime time2;
  CMTime time1;

  v12 = *(_QWORD *)(a1 + 160);
  if (!v12 || (v13 = *(os_unfair_lock_s **)(v12 + 48)) == 0)
    v13 = (os_unfair_lock_s *)(a1 + 8);
  PCSpinLock::lock(v13);
  v49 = *a3;
  memset(&v48, 0, sizeof(v48));
  time1 = *a3;
  time2 = a3[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v50);
  time1 = v50;
  time2 = *a4;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v48);
  memset(&v50, 0, sizeof(v50));
  v14 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZSpline::getMinValueU((OZSpline *)a1, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v50);
  memset(&v47, 0, sizeof(v47));
  OZSpline::getMaxValueU((OZSpline *)a1, v14, 0, (uint64_t)&v47);
  time1 = v49;
  time2 = v50;
  if (CMTimeCompare(&time1, &time2) < 0)
    v49 = v50;
  time1 = v49;
  time2 = v47;
  if (CMTimeCompare(&time1, &time2) >= 1)
    v49 = v47;
  time1 = v48;
  time2 = v47;
  if (CMTimeCompare(&time1, &time2) >= 1)
    v48 = v47;
  time1 = v48;
  time2 = v50;
  if (CMTimeCompare(&time1, &time2) < 0)
    v48 = v50;
  v45 = 0;
  v46 = 0;
  if (!OZSpline::getVertexHandle((OZSpline *)a1, &v49, &v46, 0))
    OZSpline::getPreviousValidVertex((OZSpline *)a1, &v49, &v46, MEMORY[0x1E0CA2E68], 0);
  if (!OZSpline::getVertexHandle((OZSpline *)a1, &v48, &v45, 0))
    OZSpline::getNextValidVertex((OZSpline *)a1, &v48, &v45, MEMORY[0x1E0CA2E68], 0);
  v15 = (CMTimeEpoch *)v46;
  if (v46 != v45)
  {
    v16 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v44 = 0;
      OZSpline::getNextValidVertex((void ***)a1, v15, &v44, v16);
      v43.epoch = 0;
      *(_OWORD *)&v43.value = 0uLL;
      v17 = *((_OWORD *)v15 + 1);
      v43.epoch = v15[4];
      *(_OWORD *)&v43.value = v17;
      v42.epoch = 0;
      *(_OWORD *)&v42.value = 0uLL;
      v18 = *((_OWORD *)v44 + 1);
      v42.epoch = *((_QWORD *)v44 + 4);
      *(_OWORD *)&v42.value = v18;
      time1 = v49;
      *(_OWORD *)&time2.value = v18;
      time2.epoch = v42.epoch;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        time1 = v49;
        time2 = v43;
        if (CMTimeCompare(&time1, &time2) >= 1)
          v43 = v49;
      }
      time1 = v48;
      time2 = v42;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        time1 = v48;
        time2 = v43;
        if (CMTimeCompare(&time1, &time2) >= 1)
          v42 = v48;
      }
      v19 = (*(uint64_t (**)(CMTimeEpoch *))(*v15 + 208))(v15);
      Interpolator = OZInterpolators::getInterpolator(*(OZInterpolators **)(a1 + 152), v19);
      (*(void (**)(uint64_t, uint64_t, CMTimeEpoch *, void *, CMTime *, CMTime *, CMTime *, double))(*(_QWORD *)Interpolator + 96))(Interpolator, a1, v15, v44, &v43, &v42, a2, a6);
      v15 = (CMTimeEpoch *)v44;
    }
    while (v44 != v45);
  }
  value = a2->value;
  if (a5 == 1)
  {
    memset(&time1, 0, sizeof(time1));
    v22 = -1431655765 * ((unint64_t)(*(_QWORD *)&a2->timescale - value) >> 3) - 1;
    if ((v22 & 0x80000000) != 0)
    {
      v37 = 0;
      v23 = 0;
    }
    else
    {
      v23 = 0;
      do
      {
        v24 = a2->value + 24 * v22;
        if (v23 >= time1.epoch)
        {
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - time1.value) >> 3);
          v27 = v26 + 1;
          if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((time1.epoch - time1.value) >> 3) > v27)
            v27 = 0x5555555555555556 * ((time1.epoch - time1.value) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((time1.epoch - time1.value) >> 3) >= 0x555555555555555)
            v28 = 0xAAAAAAAAAAAAAAALL;
          else
            v28 = v27;
          if (v28)
            v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&time1.epoch, v28);
          else
            v29 = 0;
          v30 = &v29[24 * v26];
          v31 = *(_OWORD *)v24;
          *((_QWORD *)v30 + 2) = *(_QWORD *)(v24 + 16);
          *(_OWORD *)v30 = v31;
          v33 = time1.value;
          v32 = *(char **)&time1.timescale;
          v34 = (CMTimeValue)v30;
          if (*(_QWORD *)&time1.timescale != time1.value)
          {
            do
            {
              v35 = *(_OWORD *)(v32 - 24);
              *(_QWORD *)(v34 - 8) = *((_QWORD *)v32 - 1);
              *(_OWORD *)(v34 - 24) = v35;
              v34 -= 24;
              v32 -= 24;
            }
            while (v32 != (char *)v33);
            v32 = (char *)time1.value;
          }
          v23 = (unint64_t)(v30 + 24);
          time1.value = v34;
          *(_QWORD *)&time1.timescale = v30 + 24;
          time1.epoch = (CMTimeEpoch)&v29[24 * v28];
          if (v32)
            operator delete(v32);
        }
        else
        {
          v25 = *(_OWORD *)v24;
          *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
          *(_OWORD *)v23 = v25;
          v23 += 24;
        }
        *(_QWORD *)&time1.timescale = v23;
      }
      while ((int)v22-- > 0);
      v37 = (char *)time1.value;
    }
    if (&time1 != a2)
    {
      std::vector<CMTime>::__assign_with_size[abi:ne180100]<CMTime*,CMTime*>((char *)a2, v37, v23, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)v37) >> 3));
      v37 = (char *)time1.value;
    }
    if (v37)
    {
      *(_QWORD *)&time1.timescale = v37;
      operator delete(v37);
    }
    value = a2->value;
  }
  v38 = *(_QWORD *)(a1 + 160);
  if (!v38 || (v39 = *(os_unfair_lock_s **)(v38 + 48)) == 0)
    v39 = (os_unfair_lock_s *)(a1 + 8);
  v40 = value != *(_QWORD *)&a2->timescale;
  PCSpinLock::unlock(v39);
  return v40;
}

void sub_1B2C55048(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(_QWORD *)(v1 - 136) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OZSpline::purge(OZSpline *this)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  __int128 v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  char *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  CMTimeEpoch v20;
  char *v21;
  char *v22;
  char *v23;
  CMTime v24;
  CMTime time2;
  CMTime time1;

  v24 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v2 = *((_QWORD *)this + 5);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v3 = *((_QWORD *)this + 20);
  if (!v3 || (v4 = *(os_unfair_lock_s **)(v3 + 48)) == 0)
    v4 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock(v4);
  for (; v2 != *((_QWORD *)this + 6); v2 += 8)
  {
    v5 = *(_OWORD *)(*(_QWORD *)v2 + 16);
    v20 = *(_QWORD *)(*(_QWORD *)v2 + 32);
    time1 = v24;
    *(_OWORD *)&time2.value = v5;
    time2.epoch = v20;
    if (CMTimeCompare(&time1, &time2) || v2 == *((_QWORD *)this + 5))
    {
      v24 = *(CMTime *)(*(_QWORD *)v2 + 16);
    }
    else
    {
      if (v22 >= v23)
      {
        v7 = (v22 - v21) >> 3;
        if ((unint64_t)(v7 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v8 = (v23 - v21) >> 2;
        if (v8 <= v7 + 1)
          v8 = v7 + 1;
        if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v8;
        if (v9)
          v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v23, v9);
        else
          v10 = 0;
        v11 = &v10[8 * v7];
        *(_QWORD *)v11 = *(_QWORD *)v2;
        v6 = v11 + 8;
        v12 = v22;
        if (v22 != v21)
        {
          do
          {
            v13 = *((_QWORD *)v12 - 1);
            v12 -= 8;
            *((_QWORD *)v11 - 1) = v13;
            v11 -= 8;
          }
          while (v12 != v21);
          v12 = v21;
        }
        v21 = v11;
        v23 = &v10[8 * v9];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_QWORD *)v22 = *(_QWORD *)v2;
        v6 = v22 + 8;
      }
      v22 = v6;
    }
  }
  v14 = *((_QWORD *)this + 20);
  if (!v14 || (v15 = *(os_unfair_lock_s **)(v14 + 48)) == 0)
    v15 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::unlock(v15);
  v16 = v22;
  if (v22 != v21)
  {
    v17 = 0;
    v18 = 1;
    v19 = MEMORY[0x1E0CA2E68];
    v16 = v21;
    do
    {
      (*(void (**)(OZSpline *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)this + 32))(this, *(_QWORD *)&v16[8 * v17], 0, v19);
      v17 = v18;
      v16 = v21;
      ++v18;
    }
    while (v17 < (v22 - v21) >> 3);
  }
  if (v16)
    operator delete(v16);
}

void sub_1B2C55294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZSpline::setVertexSmooth(OZSpline *this, void *a2, int a3, const CMTime *a4)
{
  char v5;
  uint64_t v8;

  v5 = a3;
  if (a3)
    v8 = 4;
  else
    v8 = 1;
  (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 200))(a2, v8);
  if ((v5 & 1) != 0)
  {
    (*(void (**)(OZSpline *, void *, _QWORD, _QWORD))(*(_QWORD *)this + 304))(this, a2, MEMORY[0x1E0CA2E68], 0);
  }
  else
  {
    (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)a2 + 72))(a2, a4, 0.0, 0.0);
    (*(void (**)(void *, const CMTime *, double, double))(*(_QWORD *)a2 + 80))(a2, a4, 0.0, 0.0);
  }
  return 1;
}

void OZSpline::scaleSpline(OZSpline *this, double a2, double a3, double a4, const CMTime *a5)
{
  uint64_t v10;
  os_unfair_lock_s *v11;
  _QWORD *i;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  double v21;
  double v22;

  v10 = *((_QWORD *)this + 20);
  if (!v10 || (v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0)
    v11 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock(v11);
  v21 = 0.0;
  v22 = 0.0;
  if (*((_QWORD *)this + 2) != *((_QWORD *)this + 3))
  {
    for (i = (_QWORD *)*((_QWORD *)this + 5); i != *((_QWORD **)this + 6); ++i)
    {
      v13 = (*(double (**)(_QWORD, const CMTime *))(*(_QWORD *)*i + 24))(*i, a5);
      (*(void (**)(_QWORD, double *, double *, const CMTime *))(*(_QWORD *)*i + 56))(*i, &v22, &v22, a5);
      (*(void (**)(_QWORD, double *, double *, const CMTime *))(*(_QWORD *)*i + 64))(*i, &v21, &v21, a5);
      v14 = v13 * a2;
      v15 = (v13 + v22) * a2;
      v16 = (v13 + v21) * a2;
      if (v13 * a2 > a4)
        v14 = a4;
      if (v14 >= a3)
        v17 = v14;
      else
        v17 = a3;
      if (v15 > a4)
        v15 = a4;
      if (v15 < a3)
        v15 = a3;
      if (v16 > a4)
        v16 = a4;
      if (v16 < a3)
        v16 = a3;
      v21 = v16 - v17;
      v22 = v15 - v17;
      (*(void (**)(_QWORD, const CMTime *, double, double))(*(_QWORD *)*i + 72))(*i, a5, v15 - v17, v15 - v17);
      (*(void (**)(_QWORD, const CMTime *, double, double))(*(_QWORD *)*i + 80))(*i, a5, v21, v21);
      v18 = *i;
      (*(void (**)(uint64_t, const CMTime *, double))(*(_QWORD *)v18 + 32))(v18, a5, v17);
    }
  }
  v19 = *((_QWORD *)this + 20);
  if (!v19 || (v20 = *(os_unfair_lock_s **)(v19 + 48)) == 0)
    v20 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::unlock(v20);
}

uint64_t OZSpline::offsetVertexInTime(OZSpline *this, void *a2, const CMTime *a3, const CMTime *a4)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(void *, const CMTime *))(*(_QWORD *)a2 + 16))(a2, a3);
  return result;
}

BOOL OZSpline::hasInterpolation(OZSpline *this, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _BOOL8 v6;
  uint64_t v7;

  if (*((_QWORD *)this + 2) == *((_QWORD *)this + 3))
    return *(_DWORD *)(*((_QWORD *)this + 21) + 32) == a2;
  v4 = (uint64_t *)(*((_QWORD *)this + 5) + 8);
  do
  {
    v5 = (uint64_t *)*((_QWORD *)this + 6);
    v6 = v4 != v5;
    if (v4 == v5)
      break;
    v7 = *v4++;
  }
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 208))(v7) != a2);
  return v6;
}

void OZSpline::generateSplineFromDynamicSpline(OZSpline *this, const CMTime *a2, OZDynamicSpline *a3)
{
  uint64_t v6;
  os_unfair_lock_s *v7;
  char **v8;
  unsigned int NumberOfValidVertices;
  OZDynamicVertex *v10;
  OZStaticVertex *v11;
  unint64_t v12;
  OZStaticVertex **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  OZStaticVertex **v20;
  char *v21;
  char *v22;
  char *v23;
  OZStaticVertex *v24;
  OZDynamicVertex *v25;
  OZStaticVertex *v26;
  unint64_t v27;
  OZStaticVertex **v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  OZStaticVertex **v35;
  char *v36;
  char *v37;
  OZStaticVertex *v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  void *v41;

  v41 = 0;
  OZSpline::deleteAllVertices(this);
  v6 = *((_QWORD *)this + 20);
  if (!v6 || (v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0)
    v7 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock(v7);
  v8 = (char **)((char *)this + 16);
  NumberOfValidVertices = OZSpline::getNumberOfValidVertices(a3, a2);
  std::vector<void *>::reserve((void **)this + 2, NumberOfValidVertices);
  if (OZSpline::getFirstValidVertex(a3, &v41, a2))
  {
    v10 = (OZDynamicVertex *)v41;
    v11 = (OZStaticVertex *)operator new();
    OZStaticVertex::OZStaticVertex(v11, v10, a2);
    v12 = *((_QWORD *)this + 4);
    v13 = (OZStaticVertex **)*((_QWORD *)this + 3);
    if ((unint64_t)v13 >= v12)
    {
      v15 = ((char *)v13 - *v8) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
LABEL_43:
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v16 = v12 - (_QWORD)*v8;
      v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1))
        v17 = v15 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v18);
      else
        v19 = 0;
      v20 = (OZStaticVertex **)&v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v11;
      v14 = v20 + 1;
      v23 = (char *)*((_QWORD *)this + 2);
      v22 = (char *)*((_QWORD *)this + 3);
      if (v22 != v23)
      {
        do
        {
          v24 = (OZStaticVertex *)*((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v20 = v24;
        }
        while (v22 != v23);
        v22 = *v8;
      }
      *((_QWORD *)this + 2) = v20;
      *((_QWORD *)this + 3) = v14;
      *((_QWORD *)this + 4) = v21;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v13 = v11;
      v14 = v13 + 1;
    }
    *((_QWORD *)this + 3) = v14;
    if (OZSpline::getNextValidVertex((void ***)a3, v41, &v41, a2))
    {
      do
      {
        v25 = (OZDynamicVertex *)v41;
        v26 = (OZStaticVertex *)operator new();
        OZStaticVertex::OZStaticVertex(v26, v25, a2);
        v28 = (OZStaticVertex **)*((_QWORD *)this + 3);
        v27 = *((_QWORD *)this + 4);
        if ((unint64_t)v28 >= v27)
        {
          v30 = ((char *)v28 - *v8) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            goto LABEL_43;
          v31 = v27 - (_QWORD)*v8;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v33);
          else
            v34 = 0;
          v35 = (OZStaticVertex **)&v34[8 * v30];
          *v35 = v26;
          v29 = v35 + 1;
          v37 = (char *)*((_QWORD *)this + 2);
          v36 = (char *)*((_QWORD *)this + 3);
          if (v36 != v37)
          {
            do
            {
              v38 = (OZStaticVertex *)*((_QWORD *)v36 - 1);
              v36 -= 8;
              *--v35 = v38;
            }
            while (v36 != v37);
            v36 = *v8;
          }
          *((_QWORD *)this + 2) = v35;
          *((_QWORD *)this + 3) = v29;
          *((_QWORD *)this + 4) = &v34[8 * v33];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *v28 = v26;
          v29 = v28 + 1;
        }
        *((_QWORD *)this + 3) = v29;
      }
      while ((OZSpline::getNextValidVertex((void ***)a3, v41, &v41, a2) & 1) != 0);
    }
  }
  *((_BYTE *)this + 145) = 1;
  *(_OWORD *)((char *)this + 40) = *((_OWORD *)this + 1);
  OZSpline::refreshValidVerticesList(this);
  *((_BYTE *)this + 144) = *((_BYTE *)a3 + 144);
  v39 = *((_QWORD *)this + 20);
  if (!v39 || (v40 = *(os_unfair_lock_s **)(v39 + 48)) == 0)
    v40 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::unlock(v40);
}

void sub_1B2C55850(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4082842762);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CMTime,std::pair<double,unsigned int>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

char *std::vector<OZVertex *>::__insert_with_size[abi:ne180100]<std::__list_iterator<OZStaticVertex *,void *>,std::__list_iterator<OZStaticVertex *,void *>>(uint64_t a1, char *__src, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  char *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  void *__p;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v5 = __src;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = *(_QWORD *)(a1 + 16);
    v9 = a1 + 16;
    v10 = v11;
    v12 = *(char **)(v9 - 8);
    if (a5 <= (v11 - (uint64_t)v12) >> 3)
    {
      v19 = a5 + 1;
      v20 = a3;
      do
      {
        v20 = (_QWORD *)v20[1];
        --v19;
      }
      while (v19 > 1);
      v21 = (v12 - __src) >> 3;
      if (v21 >= a5)
      {
        v23 = *(char **)(v9 - 8);
        v21 = a5;
      }
      else
      {
        if (v12 - __src <= -8)
        {
          v27 = (v12 - __src) >> 3;
          v20 = a3;
          do
            v20 = (_QWORD *)*v20;
          while (!__CFADD__(v27++, 1));
        }
        else if (v12 == __src)
        {
          v20 = a3;
        }
        else
        {
          v22 = v21 + 1;
          v20 = a3;
          do
          {
            v20 = (_QWORD *)v20[1];
            --v22;
          }
          while (v22 > 1);
        }
        v23 = *(char **)(v9 - 8);
        if (v20 != a4)
        {
          v29 = v20;
          v30 = *(_QWORD **)(v9 - 8);
          do
          {
            *v30++ = v29[2];
            v29 = (_QWORD *)v29[1];
            v23 += 8;
          }
          while (v29 != a4);
        }
        *(_QWORD *)(a1 + 8) = v23;
      }
      if (v21 >= 1)
      {
        v31 = &__src[8 * a5];
        v32 = &v23[-8 * a5];
        v33 = v23;
        if (v32 < v12)
        {
          v33 = v23;
          do
          {
            v34 = *(_QWORD *)v32;
            v32 += 8;
            *(_QWORD *)v33 = v34;
            v33 += 8;
          }
          while (v32 < v12);
        }
        *(_QWORD *)(a1 + 8) = v33;
        if (v23 != v31)
          memmove(&v23[-8 * ((v23 - v31) >> 3)], __src, v23 - v31);
        if (v20 != v7)
        {
          v35 = v5;
          do
          {
            *(_QWORD *)v35 = v7[2];
            v35 += 8;
            v7 = (_QWORD *)v7[1];
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      v13 = *(_BYTE **)a1;
      v14 = a5 + ((uint64_t)&v12[-*(_QWORD *)a1] >> 3);
      if (v14 >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v15 = (__src - v13) >> 3;
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v41 = v9;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v9, v17);
      else
        v18 = 0;
      v24 = &v18[8 * v15];
      __p = v18;
      v38 = v24;
      v40 = &v18[8 * v17];
      v25 = 8 * a5;
      v26 = &v24[8 * a5];
      do
      {
        *(_QWORD *)v24 = v7[2];
        v24 += 8;
        v7 = (_QWORD *)v7[1];
        v25 -= 8;
      }
      while (v25);
      v39 = v26;
      v5 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
      if (v39 != v38)
        v39 += (v38 - v39 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (__p)
        operator delete(__p);
    }
  }
  return v5;
}

void sub_1B2C55B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<CMTime>::__assign_with_size[abi:ne180100]<CMTime*,CMTime*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<PCVector3<double>>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

void OZDynamicVertex::OZDynamicVertex(OZDynamicVertex *this, const CMTime *a2, double a3, const CMTime *a4)
{
  TXParagraphStyleFolder_Factory *v6;
  OZChannelVertexFolder *v7;
  OZFactoryBase *v8;
  unsigned int v9;
  TXParagraphStyleFolder_Factory *v10;
  OZFactoryBase *v11;
  OZDynamicVertex::OZDynamicVertex_enabledImpl *v12;
  OZChannelImpl *Instance;
  TXParagraphStyleFolder_Factory *v14;
  OZFactoryBase *v15;
  TXParagraphStyleFolder_Factory *v16;
  OZFactoryBase *v17;
  OZDynamicVertex::OZDynamicVertex_biasImpl *v18;
  OZChannelImpl *v19;
  TXParagraphStyleFolder_Factory *v20;
  OZFactoryBase *v21;
  OZDynamicVertex::OZDynamicVertex_tanInVImpl *v22;
  OZChannelImpl *v23;
  TXParagraphStyleFolder_Factory *v24;
  OZFactoryBase *v25;
  OZDynamicVertex::OZDynamicVertex_tanOutVImpl *v26;
  OZChannelImpl *v27;
  OZChannelBase *v28;
  OZChannelImpl *v29;
  OZChannelBase *v30;
  OZChannelImpl *v31;
  OZChannelBase *v32;
  OZChannelImpl *v33;
  PCString v34;

  OZVertex::OZVertex(this, a2);
  *(_QWORD *)v6 = &off_1E6555F20;
  v7 = (TXParagraphStyleFolder_Factory *)((char *)v6 + 48);
  TXParagraphStyleFolder_Factory::createInstance(v6, v8);
  PCURL::PCURL((PCURL *)&v34, CFSTR("Dynamic Vertex"));
  v9 = OZDynamicVertex::_id++;
  OZChannelVertexFolder::OZChannelVertexFolder(v7, &v34, 0, v9, 0x10000u);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v34, CFSTR("Dynamic Vertex Enabled"));
  Instance = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_enabledImpl::getInstance(v12);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 184), 1, &v34, (OZChannelFolder *)v7, 1u, 0x10000u, Instance, 0);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v14, v15);
  PCURL::PCURL((PCURL *)&v34, CFSTR("Dynamic Vertex Value"));
  OZChannelDouble::OZChannelDouble((OZDynamicVertex *)((char *)this + 336), a3, &v34, (OZChannelFolder *)v7, 2u, 0x10000, 0, 0);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v16, v17);
  PCURL::PCURL((PCURL *)&v34, CFSTR("Dynamic Vertex Bias"));
  v19 = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance(v18);
  OZChannelDouble::OZChannelDouble((OZDynamicVertex *)((char *)this + 488), 1.0, &v34, (OZChannelFolder *)v7, 3u, 0x10000, v19, 0);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v20, v21);
  PCURL::PCURL((PCURL *)&v34, CFSTR("Dynamic Vertex Input Tangent"));
  v23 = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance(v22);
  OZChannelDouble::OZChannelDouble((OZDynamicVertex *)((char *)this + 640), 0.0, &v34, (OZChannelFolder *)v7, 4u, 0x10000, v23, 0);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v24, v25);
  PCURL::PCURL((PCURL *)&v34, CFSTR("Dynamic Vertex Output Tangent"));
  v27 = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance(v26);
  OZChannelDouble::OZChannelDouble((OZDynamicVertex *)((char *)this + 792), 0.0, &v34, (OZChannelFolder *)v7, 5u, 0x10000, v27, 0);
  PCString::~PCString(&v34);
  *((_DWORD *)this + 2) |= 8u;
  *((_DWORD *)this + 3) = 4;
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 184));
  OZChannel::setShouldCreateTangents((OZChannel *)((char *)this + 336), 0);
  v28 = OZChannelBase::setFlag((OZChannelBase *)this + 3, 0x100000000, 1);
  v29 = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance((OZDynamicVertex::OZDynamicVertex_biasImpl *)v28);
  OZChannelImpl::setShouldCreateTangents(v29);
  v30 = OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 488));
  v31 = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance((OZDynamicVertex::OZDynamicVertex_tanInVImpl *)v30);
  OZChannelImpl::setShouldCreateTangents(v31);
  v32 = OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 640));
  v33 = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance((OZDynamicVertex::OZDynamicVertex_tanOutVImpl *)v32);
  OZChannelImpl::setShouldCreateTangents(v33);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 792));
  OZChannelFolder::finishInitializing((OZChannelFolder *)v7);
}

void sub_1B2C55F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelBase *v10;
  OZChannelVertexFolder *v11;
  OZChannelBool *v12;
  const PCString *v14;

  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelVertexFolder::~OZChannelVertexFolder(v11);
  OZChannelBase::setRangeName(v10, v14);
  _Unwind_Resume(a1);
}

void OZDynamicVertex::OZDynamicVertex(OZDynamicVertex *this, const OZDynamicVertex *a2)
{
  const OZDynamicVertex *v2;
  _QWORD *v4;
  OZChannelFolder *v5;
  const OZChannelBase *v6;
  const OZChannelBase *v7;
  const OZChannelBase *v8;
  const OZChannelBase *v9;

  v2 = a2;
  OZVertex::OZVertex(this, a2);
  *v4 = &off_1E6555F20;
  v5 = (OZChannelFolder *)(v4 + 6);
  OZChannelVertexFolder::OZChannelVertexFolder((OZChannelVertexFolder *)(v4 + 6), (const OZDynamicVertex *)((char *)v2 + 48), 0);
  v6 = (const OZChannelBase *)((char *)v2 + 184);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 184), (const OZChannelBase *)((char *)v2 + 184), v5);
  v7 = (const OZChannelBase *)((char *)v2 + 336);
  OZChannel::OZChannel((OZChannel *)((char *)this + 336), (const OZChannelBase *)v2 + 3, v5);
  *((_QWORD *)this + 42) = &off_1E6551358;
  *((_QWORD *)this + 44) = &unk_1E65516B8;
  v8 = (const OZChannelBase *)((char *)v2 + 488);
  OZChannel::OZChannel((OZChannel *)((char *)this + 488), (const OZChannelBase *)((char *)v2 + 488), v5);
  *((_QWORD *)this + 61) = &off_1E6551358;
  *((_QWORD *)this + 63) = &unk_1E65516B8;
  v9 = (const OZChannelBase *)((char *)v2 + 640);
  OZChannel::OZChannel((OZChannel *)((char *)this + 640), (const OZChannelBase *)((char *)v2 + 640), v5);
  *((_QWORD *)this + 80) = &off_1E6551358;
  *((_QWORD *)this + 82) = &unk_1E65516B8;
  v2 = (const OZDynamicVertex *)((char *)v2 + 792);
  OZChannel::OZChannel((OZChannel *)((char *)this + 792), (const OZChannelBase *)v2, v5);
  *((_QWORD *)this + 99) = &off_1E6551358;
  *((_QWORD *)this + 101) = &unk_1E65516B8;
  OZChannel::copy((OZChannel *)((char *)this + 184), v6, 1);
  OZChannel::copy((OZChannel *)((char *)this + 336), v7, 1);
  OZChannel::copy((OZChannel *)((char *)this + 488), v8, 1);
  OZChannel::copy((OZChannel *)((char *)this + 640), v9, 1);
  OZChannel::copy((OZChannel *)((char *)this + 792), (const OZChannelBase *)v2, 1);
}

void sub_1B2C56168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannel *a9, OZChannel *a10, OZChannel *a11, OZChannelBool *a12)
{
  OZChannelBase *v12;
  OZChannelVertexFolder *v13;
  const PCString *v15;

  OZChannel::~OZChannel(a9);
  OZChannel::~OZChannel(a10);
  OZChannel::~OZChannel(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannelVertexFolder::~OZChannelVertexFolder(v13);
  OZChannelBase::setRangeName(v12, v15);
  _Unwind_Resume(a1);
}

void OZDynamicVertex::~OZDynamicVertex(OZDynamicVertex *this)
{
  OZChannelVertexFolder *v2;
  const PCString *v3;

  *(_QWORD *)this = &off_1E6555F20;
  v2 = (OZDynamicVertex *)((char *)this + 48);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 792));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 640));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 488));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 336));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 184));
  OZChannelVertexFolder::~OZChannelVertexFolder(v2);
  OZChannelBase::setRangeName((OZChannelBase *)this, v3);
}

{
  OZDynamicVertex::~OZDynamicVertex(this);
  JUMPOUT(0x1B5E29170);
}

BOOL OZDynamicVertex::isEqual(OZDynamicVertex *this, const OZVertex *lpsrc)
{
  void *v4;

  if (lpsrc)
  else
    v4 = 0;
  return OZVertex::isEqual(this, lpsrc)
      && (*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 23) + 240))((char *)this + 184, (uint64_t)v4 + 184)&& (*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 42) + 240))((char *)this + 336, (uint64_t)v4 + 336)&& (*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 80) + 240))((char *)this + 640, (uint64_t)v4 + 640)&& ((*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 99) + 240))((char *)this + 792, (uint64_t)v4 + 792) & 1) != 0;
}

void OZDynamicVertex::getValueV(OZDynamicVertex *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 336), a2, 0.0);
}

uint64_t OZDynamicVertex::setValueV(uint64_t this, double a2, const CMTime *a3)
{
  if ((*(_BYTE *)(this + 8) & 2) == 0)
    return OZChannel::setValueOffsetByBehaviors((OZChannel *)(this + 336), a3, a2);
  return this;
}

uint64_t OZDynamicVertex::setBias(uint64_t this, double a2, const CMTime *a3)
{
  if ((*(_BYTE *)(this + 8) & 2) == 0)
  {
    if (*(_DWORD *)(this + 12) != 10 && a2 > 1.0)
      a2 = 1.0;
    return OZChannel::setValueOffsetByBehaviors((OZChannel *)(this + 488), a3, a2);
  }
  return this;
}

void OZDynamicVertex::getBias(OZDynamicVertex *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 488), a2, 0.0);
}

void OZDynamicVertex::getInputTangents(OZDynamicVertex *this, double *a2, double *a3, const CMTime *a4)
{
  uint64_t v5;

  if (a2)
    *a2 = 0.0;
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 640), a4, 0.0);
    *(_QWORD *)a3 = v5;
  }
}

void OZDynamicVertex::getOutputTangents(OZDynamicVertex *this, double *a2, double *a3, const CMTime *a4)
{
  uint64_t v5;

  if (a2)
    *a2 = 0.0;
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 792), a4, 0.0);
    *(_QWORD *)a3 = v5;
  }
}

_BYTE *OZDynamicVertex::setInputTangents(_BYTE *this, double a2, double a3, const CMTime *a4)
{
  _BYTE *v6;

  if ((this[8] & 2) == 0)
  {
    v6 = this;
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD, double))(*(_QWORD *)this + 136))(this, MEMORY[0x1E0CA2E68], a2);
    if ((_DWORD)this)
      return (_BYTE *)OZChannel::setValueOffsetByBehaviors((OZChannel *)(v6 + 640), a4, a3);
  }
  return this;
}

_BYTE *OZDynamicVertex::setOutputTangents(_BYTE *this, double a2, double a3, const CMTime *a4)
{
  _BYTE *v6;

  if ((this[8] & 2) == 0)
  {
    v6 = this;
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD, double))(*(_QWORD *)this + 136))(this, MEMORY[0x1E0CA2E68], a2);
    if ((_DWORD)this)
      return (_BYTE *)OZChannel::setValueOffsetByBehaviors((OZChannel *)(v6 + 792), a4, a3);
  }
  return this;
}

_BYTE *OZDynamicVertex::flattenTangents(_BYTE *this, const CMTime *a2)
{
  _BYTE *v3;

  if ((this[8] & 2) == 0)
  {
    v3 = this;
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)this + 136))(this, MEMORY[0x1E0CA2E68]);
    if ((_DWORD)this)
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v3 + 160))(v3, 1);
      OZChannel::setValueOffsetByBehaviors((OZChannel *)(v3 + 640), a2, 0.0);
      return (_BYTE *)OZChannel::setValueOffsetByBehaviors((OZChannel *)(v3 + 792), a2, 0.0);
    }
  }
  return this;
}

_BYTE *OZDynamicVertex::resetTangents(_BYTE *this)
{
  _BYTE *v1;
  OZChannel *v2;

  if ((this[8] & 2) == 0)
  {
    v1 = this;
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)this + 136))(this, MEMORY[0x1E0CA2E68]);
    if ((_DWORD)this)
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v1 + 160))(v1, 1);
      OZChannel::setDefaultValue((OZChannel *)(v1 + 640), 0.0);
      OZChannel::setKeyframesValue((OZChannel *)(v1 + 640), 0.0);
      v2 = (OZChannel *)(v1 + 792);
      OZChannel::setDefaultValue(v2, 0.0);
      return (_BYTE *)OZChannel::setKeyframesValue(v2, 0.0);
    }
  }
  return this;
}

uint64_t OZDynamicVertex::setEnabled(OZDynamicVertex *this, unsigned int a2, const CMTime *a3)
{
  return OZChannel::setValueOffsetByBehaviors((OZChannel *)((char *)this + 184), a3, (double)a2);
}

BOOL OZDynamicVertex::isEnabled(OZDynamicVertex *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 184), a2, 0.0) != 0;
}

void OZDynamicVertex::setChannel(OZDynamicVertex *this, OZChannelVertexFolder *a2)
{
  char *v4;
  const OZChannelBase *Descendant;
  const OZChannelBase *v6;
  const OZChannelBase *v7;
  const OZChannelBase *v8;
  const OZChannelBase *v9;

  v4 = (char *)this + 48;
  OZChannelFolder::operator=((uint64_t)this + 48);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 16);
  Descendant = (const OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)a2, *((_DWORD *)this + 52));
  OZChannel::copy((OZChannel *)((char *)this + 184), Descendant, 0);
  *((_QWORD *)this + 29) = v4;
  v6 = (const OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)a2, *((_DWORD *)this + 90));
  OZChannel::copy((OZChannel *)((char *)this + 336), v6, 0);
  *((_QWORD *)this + 48) = v4;
  v7 = (const OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)a2, *((_DWORD *)this + 128));
  OZChannel::copy((OZChannel *)((char *)this + 488), v7, 0);
  *((_QWORD *)this + 67) = v4;
  v8 = (const OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)a2, *((_DWORD *)this + 166));
  OZChannel::copy((OZChannel *)((char *)this + 640), v8, 0);
  *((_QWORD *)this + 86) = v4;
  v9 = (const OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)a2, *((_DWORD *)this + 204));
  OZChannel::copy((OZChannel *)((char *)this + 792), v9, 0);
  *((_QWORD *)this + 105) = v4;
}

void OZDynamicVertex::swapTangents(OZChannelBase *this)
{
  OZChannelBase *v1;
  OZChannelBase *v2;
  TXParagraphStyleFolder_Factory *v3;
  OZFactoryBase *v4;
  OZChannelBase *v5;
  OZFactoryBase *v6;
  PCString v7;
  OZChannel v8;

  v1 = this;
  v2 = (OZChannelBase *)((char *)this + 640);
  OZChannel::OZChannel(&v8, (OZChannelBase *)((char *)this + 640), 0);
  v8.var0 = (void **)&off_1E6551358;
  v8.var2 = (void **)&unk_1E65516B8;
  v1 = (OZChannelBase *)((char *)v1 + 792);
  OZChannelBase::operator=((uint64_t)v2, (uint64_t)v1);
  v3 = (TXParagraphStyleFolder_Factory *)OZChannelBase::operator=((uint64_t)v1, (uint64_t)&v8);
  TXParagraphStyleFolder_Factory::createInstance(v3, v4);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Dynamic Vertex Input Tangent"));
  OZChannelBase::setName(v2, &v7, 0);
  PCString::~PCString(&v7);
  v5 = OZChannelBase::setID(v2, 4u);
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v5, v6);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Dynamic Vertex Output Tangent"));
  OZChannelBase::setName(v1, &v7, 0);
  PCString::~PCString(&v7);
  OZChannelBase::setID(v1, 5u);
  OZChannel::~OZChannel(&v8);
}

void sub_1B2C567F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10)
{
  PCString::~PCString((PCString *)&a9);
  OZChannel::~OZChannel((OZChannel *)&a10);
  _Unwind_Resume(a1);
}

BOOL OZDynamicVertex::isFlat(OZChannel *this)
{
  OZChannel *v1;
  OZChannel *v2;
  double KeyframeMinValue;
  double KeyframeMaxValue;
  double v5;
  double v6;
  _BOOL8 result;
  _BOOL4 v8;
  double v9;

  v1 = this;
  v2 = (OZChannel *)((char *)this + 640);
  KeyframeMinValue = OZChannel::getKeyframeMinValue((OZChannel *)((char *)this + 640), 0);
  KeyframeMaxValue = OZChannel::getKeyframeMaxValue(v2, 0);
  v1 = (OZChannel *)((char *)v1 + 792);
  v5 = OZChannel::getKeyframeMinValue(v1, 0);
  v6 = OZChannel::getKeyframeMaxValue(v1, 0);
  result = 0;
  if (vabdd_f64(v6, v5) < 0.0000001)
  {
    v8 = fabs(v6) < 0.0000001;
    v9 = fabs(KeyframeMaxValue);
    if (vabdd_f64(KeyframeMaxValue, KeyframeMinValue) >= 0.0000001)
      v8 = 0;
    return v9 < 0.0000001 && v8;
  }
  return result;
}

uint64_t OZDynamicVertex::setDefaultAtCurrentTime(OZDynamicVertex *this, const CMTime *a2)
{
  OZChannel::setDefaultAtCurrentTime((OZChannel *)((char *)this + 184), a2);
  OZChannel::setDefaultAtCurrentTime((OZChannel *)((char *)this + 336), a2);
  OZChannel::setDefaultAtCurrentTime((OZChannel *)((char *)this + 488), a2);
  OZChannel::setDefaultAtCurrentTime((OZChannel *)((char *)this + 640), a2);
  return OZChannel::setDefaultAtCurrentTime((OZChannel *)((char *)this + 792), a2);
}

void OZDynamicVertex::updateBias(OZDynamicVertex *this)
{
  OZChannel *v1;
  void **v2;
  unint64_t v3;
  unsigned int v4;
  OZBSplineInterpolator *Keyframe;
  double v6;
  OZBSplineInterpolator *v7;
  void **v8;
  void **v9;
  double v10;

  v10 = 0.0;
  v1 = (OZChannel *)((char *)this + 488);
  OZChannel::getKeyframes((OZChannel *)((char *)this + 488), 0, &v8);
  v2 = v8;
  if (v9 == v8)
  {
    OZChannel::getValueAsDouble(v1, MEMORY[0x1E0CA2E68], 0.0);
    v10 = v6;
    v10 = OZBSplineInterpolator::convertBSplineBiasToLinear(v7, v6);
    OZChannel::setValueOffsetByBehaviors(v1, MEMORY[0x1E0CA2E68], v10);
    v2 = v8;
    if (!v8)
      return;
    goto LABEL_5;
  }
  v3 = 0;
  v4 = 1;
  do
  {
    Keyframe = (OZBSplineInterpolator *)OZChannel::getKeyframe(v1, v2[v3], 0, &v10);
    v10 = OZBSplineInterpolator::convertBSplineBiasToLinear(Keyframe, v10);
    OZChannel::setKeyframeValue(v1, v8[v3], v10);
    v3 = v4;
    v2 = v8;
    ++v4;
  }
  while (v3 < v9 - v8);
  if (v8)
  {
LABEL_5:
    v9 = v2;
    operator delete(v2);
  }
}

void sub_1B2C56A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

OZChannelBase *OZDynamicVertex::enableBehavior(OZDynamicVertex *this, char a2)
{
  OZChannelBase *v3;
  OZChannelBase *v4;
  OZChannelBase *v5;

  v3 = (OZChannelBase *)((char *)this + 336);
  v4 = (OZChannelBase *)((char *)this + 640);
  v5 = (OZChannelBase *)((char *)this + 792);
  if ((a2 & 1) != 0)
  {
    OZChannelBase::resetFlag(v3, 0x80000000, 0);
    OZChannelBase::resetFlag(v4, 0x80000000, 0);
    return OZChannelBase::resetFlag(v5, 0x80000000, 0);
  }
  else
  {
    OZChannelBase::setFlag(v3, 0x80000000, 0);
    OZChannelBase::setFlag(v4, 0x80000000, 0);
    return OZChannelBase::setFlag(v5, 0x80000000, 0);
  }
}

BOOL OZDynamicVertex::enabledBehavior(OZChannelBase *this)
{
  return !OZChannelBase::testFlag(this + 3, 0x80000000);
}

uint64_t OZDynamicVertex::offsetVertexInTime(OZDynamicVertex *this, const CMTime *a2)
{
  OZChannel::linearTimeWarp((OZChannel *)((char *)this + 184), 1.0, a2);
  OZChannel::linearTimeWarp((OZChannel *)((char *)this + 336), 1.0, a2);
  OZChannel::linearTimeWarp((OZChannel *)((char *)this + 488), 1.0, a2);
  OZChannel::linearTimeWarp((OZChannel *)((char *)this + 640), 1.0, a2);
  return OZChannel::linearTimeWarp((OZChannel *)((char *)this + 792), 1.0, a2);
}

uint64_t OZVertex::setFlag(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) |= a2;
  return this;
}

uint64_t OZVertex::resetFlag(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) &= ~a2;
  return this;
}

BOOL OZVertex::testFlag(OZVertex *this, int a2)
{
  return (*((_DWORD *)this + 2) & a2) != 0;
}

OZDynamicVertex *OZDynamicVertex::clone(OZDynamicVertex *this)
{
  OZDynamicVertex *v2;

  v2 = (OZDynamicVertex *)operator new();
  OZDynamicVertex::OZDynamicVertex(v2, this);
  return v2;
}

void sub_1B2C56BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40974A25EBLL);
  _Unwind_Resume(a1);
}

uint64_t OZDynamicVertex::OZDynamicVertex_enabledImpl::getInstance(OZDynamicVertex::OZDynamicVertex_enabledImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZDynamicVertex::OZDynamicVertex_enabledImpl::getInstance(void)::OZDynamicVertex_enabledImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZDynamicVertex::OZDynamicVertex_enabledImpl::getInstance(void)::OZDynamicVertex_enabledImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDynamicVertex::OZDynamicVertex_enabledImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDynamicVertex::OZDynamicVertex_enabledImpl::_OZDynamicVertex_enabled;
}

void std::__call_once_param<std::tuple<OZDynamicVertex::OZDynamicVertex_enabledImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelBool *v0;

  if (!OZDynamicVertex::OZDynamicVertex_enabledImpl::_OZDynamicVertex_enabled)
  {
    v0 = (OZChannelBool *)operator new();
    OZDynamicVertex::OZDynamicVertex_enabledImpl::OZDynamicVertex_enabledImpl(v0);
    OZDynamicVertex::OZDynamicVertex_enabledImpl::_OZDynamicVertex_enabled = (uint64_t)v0;
  }
}

void sub_1B2C56C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelBool *OZDynamicVertex::OZDynamicVertex_enabledImpl::OZDynamicVertex_enabledImpl(OZChannelBool *this)
{
  OZCurve *OZChannelBoolCurve;

  OZChannelBoolCurve = (OZCurve *)OZChannelBool::createOZChannelBoolCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelBoolCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E6556050;
  this->var5 = (PCString *)&unk_1E6556070;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2C56D28(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance(OZDynamicVertex::OZDynamicVertex_biasImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance(void)::OZDynamicVertex_biasImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance(void)::OZDynamicVertex_biasImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDynamicVertex::OZDynamicVertex_biasImpl::_OZDynamicVertex_bias;
}

void std::__call_once_param<std::tuple<OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZDynamicVertex::OZDynamicVertex_biasImpl *v0;

  if (!OZDynamicVertex::OZDynamicVertex_biasImpl::_OZDynamicVertex_bias)
  {
    v0 = (OZDynamicVertex::OZDynamicVertex_biasImpl *)operator new();
    OZDynamicVertex::OZDynamicVertex_biasImpl::OZDynamicVertex_biasImpl(v0);
    OZDynamicVertex::OZDynamicVertex_biasImpl::_OZDynamicVertex_bias = (uint64_t)v0;
  }
}

void sub_1B2C56DF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZDynamicVertex::OZDynamicVertex_biasImpl *OZDynamicVertex::OZDynamicVertex_biasImpl::OZDynamicVertex_biasImpl(OZDynamicVertex::OZDynamicVertex_biasImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((OZDynamicVertex::OZDynamicVertex_biasImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65560C8;
  *((_QWORD *)this + 5) = &unk_1E65560E8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2C56EA8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance(OZDynamicVertex::OZDynamicVertex_tanInVImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance(void)::OZDynamicVertex_tanInVImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance(void)::OZDynamicVertex_tanInVImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDynamicVertex::OZDynamicVertex_tanInVImpl::_OZDynamicVertex_tanInV;
}

void std::__call_once_param<std::tuple<OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZDynamicVertex::OZDynamicVertex_tanInVImpl *v0;

  if (!OZDynamicVertex::OZDynamicVertex_tanInVImpl::_OZDynamicVertex_tanInV)
  {
    v0 = (OZDynamicVertex::OZDynamicVertex_tanInVImpl *)operator new();
    OZDynamicVertex::OZDynamicVertex_tanInVImpl::OZDynamicVertex_tanInVImpl(v0);
    OZDynamicVertex::OZDynamicVertex_tanInVImpl::_OZDynamicVertex_tanInV = (uint64_t)v0;
  }
}

void sub_1B2C56F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZDynamicVertex::OZDynamicVertex_tanInVImpl *OZDynamicVertex::OZDynamicVertex_tanInVImpl::OZDynamicVertex_tanInVImpl(OZDynamicVertex::OZDynamicVertex_tanInVImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((OZDynamicVertex::OZDynamicVertex_tanInVImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6556140;
  *((_QWORD *)this + 5) = &unk_1E6556160;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2C57028(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance(OZDynamicVertex::OZDynamicVertex_tanOutVImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance(void)::OZDynamicVertex_tanOutVImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance(void)::OZDynamicVertex_tanOutVImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDynamicVertex::OZDynamicVertex_tanOutVImpl::_OZDynamicVertex_tanOutV;
}

void std::__call_once_param<std::tuple<OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZDynamicVertex::OZDynamicVertex_tanOutVImpl *v0;

  if (!OZDynamicVertex::OZDynamicVertex_tanOutVImpl::_OZDynamicVertex_tanOutV)
  {
    v0 = (OZDynamicVertex::OZDynamicVertex_tanOutVImpl *)operator new();
    OZDynamicVertex::OZDynamicVertex_tanOutVImpl::OZDynamicVertex_tanOutVImpl(v0);
    OZDynamicVertex::OZDynamicVertex_tanOutVImpl::_OZDynamicVertex_tanOutV = (uint64_t)v0;
  }
}

void sub_1B2C570F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZDynamicVertex::OZDynamicVertex_tanOutVImpl *OZDynamicVertex::OZDynamicVertex_tanOutVImpl::OZDynamicVertex_tanOutVImpl(OZDynamicVertex::OZDynamicVertex_tanOutVImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((OZDynamicVertex::OZDynamicVertex_tanOutVImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65561B8;
  *((_QWORD *)this + 5) = &unk_1E65561D8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2C571A8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZStaticVertex::OZStaticVertex(OZStaticVertex *this, const CMTime *a2, double a3)
{
  uint64_t v4;

  OZVertex::OZVertex(this, a2);
  *(_QWORD *)v4 = &off_1E6556230;
  *(_BYTE *)(v4 + 48) = 1;
  *(double *)(v4 + 56) = a3;
  *(_QWORD *)(v4 + 64) = 0x3FF0000000000000;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
}

void OZStaticVertex::OZStaticVertex(OZStaticVertex *this, OZDynamicVertex *a2, const CMTime *a3)
{
  uint64_t v6;
  CMTime v7;

  v7 = *(CMTime *)((char *)a2 + 16);
  OZVertex::OZVertex(this, &v7);
  *(_QWORD *)v6 = &off_1E6556230;
  *(_BYTE *)(v6 + 48) = 1;
  *((double *)this + 7) = (*(double (**)(OZDynamicVertex *, const CMTime *))(*(_QWORD *)a2 + 24))(a2, a3);
  *((double *)this + 8) = (*(double (**)(OZDynamicVertex *, const CMTime *))(*(_QWORD *)a2 + 40))(a2, a3);
  (*(void (**)(OZDynamicVertex *, char *, char *, const CMTime *))(*(_QWORD *)a2 + 56))(a2, (char *)this + 72, (char *)this + 88, a3);
  (*(void (**)(OZDynamicVertex *, char *, char *, const CMTime *))(*(_QWORD *)a2 + 64))(a2, (char *)this + 80, (char *)this + 96, a3);
  *((_DWORD *)this + 3) = (*(uint64_t (**)(OZDynamicVertex *))(*(_QWORD *)a2 + 208))(a2);
}

void sub_1B2C572F8(_Unwind_Exception *a1, const PCString *a2)
{
  OZChannelBase *v2;

  OZChannelBase::setRangeName(v2, a2);
  _Unwind_Resume(a1);
}

void OZStaticVertex::OZStaticVertex(OZStaticVertex *this, const OZStaticVertex *a2)
{
  uint64_t v3;

  OZVertex::OZVertex(this, a2);
  *(_QWORD *)v3 = &off_1E6556230;
  *(_BYTE *)(v3 + 48) = *((_BYTE *)a2 + 48);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_QWORD *)(v3 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_QWORD *)(v3 + 96) = *((_QWORD *)a2 + 12);
}

void OZStaticVertex::~OZStaticVertex(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);
  JUMPOUT(0x1B5E29170);
}

BOOL OZStaticVertex::isEqual(OZStaticVertex *this, const OZVertex *lpsrc)
{
  double *v4;
  double *v5;
  _BOOL8 result;

  result = 0;
  if (lpsrc)
  {
    if (v4)
    {
      v5 = v4;
      if (OZVertex::isEqual(this, lpsrc)
        && *((unsigned __int8 *)this + 48) == *((unsigned __int8 *)v5 + 48)
        && *((double *)this + 7) == v5[7]
        && *((double *)this + 8) == v5[8]
        && *((double *)this + 9) == v5[9]
        && *((double *)this + 11) == v5[11]
        && *((double *)this + 10) == v5[10]
        && *((double *)this + 12) == v5[12])
      {
        return 1;
      }
    }
  }
  return result;
}

double OZStaticVertex::getValue(OZStaticVertex *this, CMTime *a2, double *a3, const CMTime *a4)
{
  __int128 v4;

  if (a2)
  {
    v4 = *((_OWORD *)this + 1);
    a2->epoch = *((_QWORD *)this + 4);
    *(_OWORD *)&a2->value = v4;
  }
  if (a3)
  {
    *(_QWORD *)&v4 = *((_QWORD *)this + 7);
    *(_QWORD *)a3 = v4;
  }
  return *(double *)&v4;
}

uint64_t OZStaticVertex::setValueV(uint64_t this, double a2, const CMTime *a3)
{
  if ((*(_BYTE *)(this + 8) & 2) == 0)
    *(double *)(this + 56) = a2;
  return this;
}

uint64_t OZStaticVertex::setBias(uint64_t this, double a2, const CMTime *a3)
{
  if ((*(_BYTE *)(this + 8) & 2) == 0)
    *(double *)(this + 64) = a2;
  return this;
}

double OZStaticVertex::getInputTangents(OZStaticVertex *this, double *a2, double *a3, const CMTime *a4)
{
  double result;

  if (a2)
  {
    result = *((double *)this + 9);
    *a2 = result;
  }
  if (a3)
  {
    result = *((double *)this + 11);
    *a3 = result;
  }
  return result;
}

double OZStaticVertex::getOutputTangents(OZStaticVertex *this, double *a2, double *a3, const CMTime *a4)
{
  double result;

  if (a2)
  {
    result = *((double *)this + 10);
    *a2 = result;
  }
  if (a3)
  {
    result = *((double *)this + 12);
    *a3 = result;
  }
  return result;
}

uint64_t OZStaticVertex::setInputTangents(uint64_t this, double a2, double a3, const CMTime *a4)
{
  if (a2 > 0.0)
    a2 = 0.0;
  if ((*(_BYTE *)(this + 8) & 2) == 0)
  {
    if (*(_BYTE *)(this + 48))
    {
      *(double *)(this + 72) = a2;
      *(double *)(this + 88) = a3;
    }
  }
  return this;
}

uint64_t OZStaticVertex::setOutputTangents(uint64_t this, double a2, double a3, const CMTime *a4)
{
  if (a2 < 0.0)
    a2 = 0.0;
  if ((*(_BYTE *)(this + 8) & 2) == 0)
  {
    if (*(_BYTE *)(this + 48))
    {
      *(double *)(this + 80) = a2;
      *(double *)(this + 96) = a3;
    }
  }
  return this;
}

uint64_t OZStaticVertex::flattenTangents(uint64_t this, const CMTime *a2)
{
  if ((*(_BYTE *)(this + 8) & 2) == 0)
  {
    if (*(_BYTE *)(this + 48))
    {
      *(_OWORD *)(this + 88) = 0u;
      *(_OWORD *)(this + 72) = 0u;
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 160))(this, 1);
    }
  }
  return this;
}

uint64_t OZStaticVertex::resetTangents(OZStaticVertex *this)
{
  return (*(uint64_t (**)(OZStaticVertex *, _QWORD))(*(_QWORD *)this + 88))(this, MEMORY[0x1E0CA2E68]);
}

uint64_t OZStaticVertex::setEnabled(uint64_t this, char a2, const CMTime *a3)
{
  *(_BYTE *)(this + 48) = a2;
  return this;
}

uint64_t OZStaticVertex::isEnabled(OZStaticVertex *this, const CMTime *a2)
{
  return *((unsigned __int8 *)this + 48);
}

BOOL OZStaticVertex::isFlat(OZStaticVertex *this)
{
  return fabs(*((double *)this + 9)) < 0.0000001
      && fabs(*((double *)this + 11)) < 0.0000001
      && fabs(*((double *)this + 10)) < 0.0000001
      && fabs(*((double *)this + 12)) < 0.0000001;
}

int8x16_t OZStaticVertex::swapTangents(OZStaticVertex *this)
{
  int8x16_t result;

  *(int8x16_t *)((char *)this + 72) = vextq_s8(*(int8x16_t *)((char *)this + 72), *(int8x16_t *)((char *)this + 72), 8uLL);
  result = vextq_s8(*(int8x16_t *)((char *)this + 88), *(int8x16_t *)((char *)this + 88), 8uLL);
  *(int8x16_t *)((char *)this + 88) = result;
  return result;
}

double OZStaticVertex::getValueV(OZStaticVertex *this, const CMTime *a2)
{
  return *((double *)this + 7);
}

double OZStaticVertex::getBias(OZStaticVertex *this, const CMTime *a2)
{
  return *((double *)this + 8);
}

double OZStaticVertex::offsetVertexInTime(OZStaticVertex *this, const CMTime *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  CMTime v6;
  CMTime v7;

  v7 = *(CMTime *)((char *)this + 16);
  v6 = *a2;
  PC_CMTimeSaferAdd(&v7, &v6, (uint64_t)&v4);
  result = *(double *)&v4;
  *((_OWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = v5;
  return result;
}

OZStaticVertex *OZStaticVertex::clone(OZStaticVertex *this)
{
  OZStaticVertex *v2;

  v2 = (OZStaticVertex *)operator new();
  OZStaticVertex::OZStaticVertex(v2, this);
  return v2;
}

void sub_1B2C576B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4082842762);
  _Unwind_Resume(a1);
}

void OZVertex::OZVertex(OZVertex *this, const CMTime *a2)
{
  CMTimeEpoch epoch;

  *(_QWORD *)this = off_1E6556368;
  epoch = a2->epoch;
  *((_OWORD *)this + 1) = *(_OWORD *)&a2->value;
  *((_QWORD *)this + 1) = 0x100000000;
  *((_QWORD *)this + 4) = epoch;
  *((_QWORD *)this + 5) = 0;
}

void OZVertex::OZVertex(OZVertex *this, const OZVertex *a2)
{
  __int128 v2;

  *(_QWORD *)this = off_1E6556368;
  v2 = *((_OWORD *)a2 + 1);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_OWORD *)this + 1) = v2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
}

BOOL OZVertex::isEqual(OZVertex *this, const OZVertex *a2)
{
  CMTime v5;
  CMTime time1;

  time1 = *(CMTime *)((char *)this + 16);
  v5 = *(CMTime *)((char *)a2 + 16);
  return !CMTimeCompare(&time1, &v5)
      && *((_DWORD *)this + 3) == *((_DWORD *)a2 + 3)
      && *((_DWORD *)this + 2) == *((_DWORD *)a2 + 2)
      && *((double *)a2 + 5) == 0.0;
}

__n128 OZVertex::setValueU(OZVertex *this, const CMTime *a2)
{
  __n128 result;
  CMTime v5;
  CMTime time1;

  if ((*((_BYTE *)this + 8) & 2) == 0)
  {
    time1 = *(CMTime *)((char *)this + 16);
    v5 = *a2;
    if (CMTimeCompare(&time1, &v5))
    {
      result = *(__n128 *)&a2->value;
      *((_QWORD *)this + 4) = a2->epoch;
      *((__n128 *)this + 1) = result;
    }
  }
  return result;
}

uint64_t OZVertex::setNormal(uint64_t this, double a2, const CMTime *a3)
{
  *(double *)(this + 40) = a2;
  return this;
}

double OZVertex::getNormal(OZVertex *this, const CMTime *a2)
{
  return *((double *)this + 5);
}

void sub_1B2C5795C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C40A120F8A5);
  _Unwind_Resume(a1);
}

void OZChannelSegmentVisitor::visitSegments(OZChannel *this, CMTime *a2, CMTime *a3, const CMTime *a4, OZChannelSegmentVisitor *a5)
{
  const void *CurveInterface;
  void *v10;
  const void *FactoryForSerialization;
  const void *v12;
  void *v13;
  PVInstructionGraphContext *v14;
  PVInstructionGraphContext *v15;
  OZSpline *v16;
  OZSpline *v17;
  uint64_t v18;
  uint64_t FirstVertex;
  void **LeftVertex;
  void **v21;
  void **v22;
  uint64_t v23;
  CMTime *v24;
  CMTime *v25;
  uint64_t v26;
  int32_t v27;
  CMTime *v28;
  uint64_t v29;
  CMTime *v30;
  __n128 v31;
  OZSpline **v32;
  uint64_t v33;
  OZSpline **v34;
  CMTime *v35;
  CMTime *v36;
  OZSpline *v37;
  OZSpline *v38;
  __n128 v39;
  OZSpline **v40;
  OZSpline **v41;
  uint64_t v42;
  OZSpline **v43;
  CMTime *v44;
  OZSpline *v45;
  OZSpline *v46;
  __n128 v47;
  OZSpline **v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  OZSpline **v52;
  CMTime *v53;
  OZSpline *v54;
  OZSpline *v55;
  __n128 MaxValueU;
  uint64_t v57;
  OZSpline **v58;
  uint64_t v59;
  int32_t v60;
  CMTime *v61;
  int32_t v62;
  CMTime *v63;
  OZSpline *v64;
  OZSpline *v65;
  __n128 v66;
  uint64_t DepthBuffer;
  double v68;
  uint64_t v69;
  OZSpline **v70;
  int32_t v71;
  CMTime *v72;
  OZSpline *v73;
  OZSpline *v74;
  __n128 v75;
  uint64_t v76;
  OZSpline **v77;
  int32_t v78;
  CMTime *v79;
  OZSpline *v80;
  OZSpline *v81;
  OZSpline **v82;
  uint64_t v83;
  OZSpline **v84;
  uint64_t v85;
  CMTime *v86;
  CMTime *v87;
  OZSpline *v88;
  OZSpline *v89;
  OZChannelSegmentVisitor *v90;
  OZSpline **v91;
  OZSpline **v92;
  OZSpline **v93;
  OZSpline **v94;
  OZSpline **v95;
  _QWORD *v96;
  CMTime v97;
  CMTime v98;
  CMTime v99;
  CMTime v100;
  void *v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  CMTime v106;
  CMTime v107;
  CMTime v108;
  CMTime v109;
  CMTime v110;
  CMTime v111;
  void *__p;
  OZSpline **v113;
  uint64_t v114;
  CMTime v115;
  CMTime v116;
  CMTime v117;
  CMTime time2;
  CMTime time1;

  CurveInterface = (const void *)OZChannel::getCurveInterface(this);
  OZChannel::isParametric(this);
  if (CurveInterface)
  else
    v10 = 0;
  FactoryForSerialization = (const void *)OZFactoryBase::getFactoryForSerialization((uint64_t)v10);
  if (FactoryForSerialization)
  {
    v12 = FactoryForSerialization;
    if (!v14)
    {
      if (!v13)
        return;
      (*(void (**)(void *, _QWORD, double, double))(*(_QWORD *)v13 + 16))(v13, MEMORY[0x1E0CA2E68], 0.0, 0.0);
      goto LABEL_12;
    }
    v15 = v14;
    v16 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v14);
    if (!v16)
    {
LABEL_9:
      (*(void (**)(PVInstructionGraphContext *))(*(_QWORD *)v15 + 96))(v15);
LABEL_12:
      (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, a2, a3);
      return;
    }
    v17 = v16;
    v18 = (*((_QWORD *)v16 + 3) - *((_QWORD *)v16 + 2)) >> 3;
    if ((_DWORD)v18 == 1)
    {
      time1.value = 0;
      FirstVertex = OZSpline::getFirstVertex(v16);
      (*(void (**)(OZSpline *, uint64_t, _QWORD, CMTime *, _QWORD))(*(_QWORD *)v17 + 264))(v17, FirstVertex, 0, &time1, MEMORY[0x1E0CA2E68]);
      (*(void (**)(const CMTime *, CMTime *, CMTime *, double))(a4->value + 16))(a4, a2, a3, *(double *)&time1.value);
    }
    else
    {
      if (!(_DWORD)v18)
        goto LABEL_9;
      v101 = 0;
      v102 = 0;
      v103 = 0;
      (*(void (**)(OZSpline *, void **))(*(_QWORD *)v16 + 24))(v16, &v101);
      v21 = v102;
      if (v102 == LeftVertex)
      {
        v96 = v101;
        (*(void (**)(OZSpline *, _QWORD, CMTime *, _QWORD, _QWORD))(*(_QWORD *)v17 + 264))(v17, *(_QWORD *)v101, &v100, 0, MEMORY[0x1E0CA2E68]);
        v29 = *v96;
        v98 = *a2;
        time1 = v100;
        time2 = *a3;
        if (CMTimeCompare(&time1, &time2) >= 0)
          v30 = a3;
        else
          v30 = &v100;
        switch(OZSpline::getExtrapolation(v17, 1))
        {
          case 0u:
            (*(void (**)(OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 240))(v17, &v98, MEMORY[0x1E0CA2E68], 1);
            (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v98, v30);
            break;
          case 1u:
            (*(void (**)(const CMTime *, OZSpline *, _QWORD, uint64_t, CMTime *, CMTime *, CMTime *, CMTime *, double))(a4->value + 24))(a4, v17, 0, v29, &v98, v30, &v98, v30, 0.0);
            break;
          case 2u:
            memset(&v116, 0, sizeof(v116));
            OZSpline::getMinValueU(v17, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v116);
            memset(&v115, 0, sizeof(v115));
            MaxValueU = OZSpline::getMaxValueU(v17, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v115);
            __p = 0;
            v113 = 0;
            v114 = 0;
            (*(void (**)(OZSpline *, void **, __n128))(*(_QWORD *)v17 + 24))(v17, &__p, MaxValueU);
            v91 = (OZSpline **)__p;
            v93 = v113;
            v57 = MEMORY[0x1E0CA2E68];
            while (1)
            {
              LOBYTE(v105) = 0;
              memset(&v111, 0, sizeof(v111));
              OZSpline::getStep(v17, &time1);
              OZChannelSegmentVisitor::mapPingPong(&v98, &v116, &v115, &time1, 0, (char *)&v105, (uint64_t)&v111);
              (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, *v58, &v110, 0, v57);
              time1 = v111;
              time2 = v110;
              if (!CMTimeCompare(&time1, &time2))
              {
                time1 = v98;
                time2 = v116;
                if (CMTimeCompare(&time1, &time2))
                {
                  (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(_QWORD *)v17 + 240))(v17, &v98, v57, 1);
                  (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v98, &v98);
                }
                if (LOBYTE(v105) && v91 != v58)
                {
                  v59 = (uint64_t)*--v58;
                  (*(void (**)(OZSpline *, uint64_t, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, v59, &v110, 0, v57);
                }
              }
              time1 = v98;
              time2 = *v30;
              if (!CMTimeCompare(&time1, &time2))
                break;
              if (v58 + 1 != v93)
              {
                (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, v58[1], &v109, 0, v57);
                if (LOBYTE(v105))
                {
                  time1 = *v30;
                  time2 = v98;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                  time1 = v111;
                  time2 = v110;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v106);
                  time1 = v106;
                  time2 = v117;
                  v60 = CMTimeCompare(&time1, &time2);
                  v61 = &v117;
                  if (v60 < 0)
                    v61 = &v106;
                  v108 = *v61;
                  time1 = v111;
                  time2 = v108;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                }
                else
                {
                  time1 = *v30;
                  time2 = v98;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                  time1 = v109;
                  time2 = v111;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v106);
                  time1 = v106;
                  time2 = v117;
                  v62 = CMTimeCompare(&time1, &time2);
                  v63 = &v117;
                  if (v62 < 0)
                    v63 = &v106;
                  v108 = *v63;
                  time1 = v111;
                  time2 = v108;
                  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v117);
                }
                v107 = v117;
                v65 = *v58;
                v64 = v58[1];
                time1 = v98;
                time2 = v108;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v117);
                time2 = v98;
                v117 = v108;
                PC_CMTimeSaferAdd(&time2, &v117, (uint64_t)&time1);
                v98 = time1;
              }
            }
            goto LABEL_122;
          case 3u:
            memset(&v116, 0, sizeof(v116));
            OZSpline::getMinValueU(v17, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v116);
            memset(&v115, 0, sizeof(v115));
            v75 = OZSpline::getMaxValueU(v17, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v115);
            __p = 0;
            v113 = 0;
            v114 = 0;
            (*(void (**)(OZSpline *, void **, __n128))(*(_QWORD *)v17 + 24))(v17, &__p, v75);
            v95 = v113;
            v92 = v113 - 1;
            v76 = MEMORY[0x1E0CA2E68];
            while (1)
            {
              memset(&v111, 0, sizeof(v111));
              OZChannelSegmentVisitor::mapProgressiveRepeat(&v98, &v116, &v115, (const CMTime *)*(unsigned __int8 *)(*((_QWORD *)v17 + 21) + 4), &time1.value, (uint64_t)&v111);
              (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, *v77, &v110, 0, v76);
              time1 = v111;
              time2 = v110;
              if (!CMTimeCompare(&time1, &time2))
              {
                time1 = v98;
                time2 = v116;
                if (CMTimeCompare(&time1, &time2))
                {
                  (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(_QWORD *)v17 + 240))(v17, &v98, v76, 1);
                  (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v98, &v98);
                }
                if (v92 == v77)
                {
                  v77 = (OZSpline **)__p;
                  (*(void (**)(OZSpline *, _QWORD, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, *(_QWORD *)__p, &v110, 0, v76);
                  v111 = v110;
                }
              }
              time1 = v98;
              time2 = *v30;
              if (!CMTimeCompare(&time1, &time2))
                break;
              if (v77 + 1 != v95)
              {
                (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, v77[1], &v109, 0, v76);
                time1 = *v30;
                time2 = v98;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                time1 = v109;
                time2 = v111;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v107);
                time1 = v107;
                time2 = v117;
                v78 = CMTimeCompare(&time1, &time2);
                v79 = &v117;
                if (v78 < 0)
                  v79 = &v107;
                v108 = *v79;
                memset(&v107, 0, sizeof(v107));
                time1 = v111;
                time2 = v108;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v107);
                v81 = *v77;
                v80 = v77[1];
                time1 = v98;
                time2 = v108;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v117);
                time2 = v98;
                v117 = v108;
                PC_CMTimeSaferAdd(&time2, &v117, (uint64_t)&time1);
                v98 = time1;
              }
            }
            goto LABEL_122;
          case 4u:
            memset(&v116, 0, sizeof(v116));
            OZSpline::getMinValueU(v17, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v116);
            memset(&v115, 0, sizeof(v115));
            v66 = OZSpline::getMaxValueU(v17, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v115);
            __p = 0;
            v113 = 0;
            v114 = 0;
            (*(void (**)(OZSpline *, void **, __n128))(*(_QWORD *)v17 + 24))(v17, &__p, v66);
            v94 = v113;
            v105 = 0.0;
            v106.value = 0;
            (*(void (**)(OZSpline *, uint64_t, _QWORD, CMTime *, _QWORD))(*(_QWORD *)v17 + 264))(v17, v29, 0, &v106, MEMORY[0x1E0CA2E68]);
            DepthBuffer = DepthBufferManager::getDepthBuffer(v17);
            (*(void (**)(OZSpline *, uint64_t, _QWORD, double *, _QWORD))(*(_QWORD *)v17 + 264))(v17, DepthBuffer, 0, &v105, MEMORY[0x1E0CA2E68]);
            v68 = *(double *)&v106.value - v105;
            v69 = MEMORY[0x1E0CA2E68];
            while (1)
            {
              v104 = 0;
              memset(&v111, 0, sizeof(v111));
              OZChannelSegmentVisitor::mapProgressiveRepeat(&v98, &v116, &v115, (const CMTime *)*(unsigned __int8 *)(*((_QWORD *)v17 + 21) + 4), &v104, (uint64_t)&v111);
              (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, *v70, &v110, 0, v69);
              time1 = v111;
              time2 = v110;
              if (!CMTimeCompare(&time1, &time2))
              {
                time1 = v98;
                time2 = v116;
                if (CMTimeCompare(&time1, &time2))
                {
                  (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(_QWORD *)v17 + 240))(v17, &v98, v69, 1);
                  (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v98, &v98);
                }
                if (v94 - 1 == v70)
                {
                  v70 = (OZSpline **)__p;
                  (*(void (**)(OZSpline *, _QWORD, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, *(_QWORD *)__p, &v110, 0, v69);
                  v111 = v110;
                  --v104;
                }
              }
              time1 = v98;
              time2 = *v30;
              if (!CMTimeCompare(&time1, &time2))
                break;
              if (v70 + 1 != v94)
              {
                (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, v70[1], &v109, 0, v69);
                time1 = *v30;
                time2 = v98;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                time1 = v109;
                time2 = v111;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v107);
                time1 = v107;
                time2 = v117;
                v71 = CMTimeCompare(&time1, &time2);
                v72 = &v117;
                if (v71 < 0)
                  v72 = &v107;
                v108 = *v72;
                memset(&v107, 0, sizeof(v107));
                time1 = v111;
                time2 = v108;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v107);
                v74 = *v70;
                v73 = v70[1];
                time1 = v98;
                time2 = v108;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v117);
                time2 = v98;
                v117 = v108;
                PC_CMTimeSaferAdd(&time2, &v117, (uint64_t)&time1);
                v98 = time1;
              }
            }
LABEL_122:
            if (__p)
            {
              v113 = (OZSpline **)__p;
              operator delete(__p);
            }
            break;
          default:
            break;
        }
      }
      else
      {
        v96 = LeftVertex;
        (*(void (**)(OZSpline *, void *, CMTime *, _QWORD, _QWORD))(*(_QWORD *)v17 + 264))(v17, *LeftVertex, &v100, 0, MEMORY[0x1E0CA2E68]);
      }
      v22 = (void **)(v96 + 1);
      v23 = MEMORY[0x1E0CA2E68];
      while (1)
      {
        time1 = v100;
        time2 = *a3;
        if (CMTimeCompare(&time1, &time2) > 0)
          break;
        time1 = *a2;
        time2 = v100;
        if (CMTimeCompare(&time1, &time2) >= 0)
          v24 = a2;
        else
          v24 = &v100;
        v117 = *v24;
        time1 = *v24;
        time2 = v100;
        if (!CMTimeCompare(&time1, &time2))
        {
          (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(_QWORD *)v17 + 240))(v17, &v117, v23, 1);
          (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v117, &v117);
        }
        if (v22 == v21)
          goto LABEL_33;
        (*(void (**)(OZSpline *, void *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, *v22, &v99, 0, v23);
        time1 = v99;
        time2 = *a3;
        if (CMTimeCompare(&time1, &time2) >= 0)
          v25 = a3;
        else
          v25 = &v99;
        v116 = *v25;
        time1 = v117;
        time2 = *v25;
        if (CMTimeCompare(&time1, &time2) < 0
          || (time1 = v117, time2 = v116, !CMTimeCompare(&time1, &time2))
          && (time1 = v117, time2 = v100, CMTimeCompare(&time1, &time2)))
        {
        }
        v100 = v99;
        ++v22;
      }
      v21 = v22 - 1;
LABEL_33:
      time1 = *a3;
      time2 = v100;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        v26 = (uint64_t)*(v21 - 1);
        time1 = *a2;
        time2 = v100;
        v27 = CMTimeCompare(&time1, &time2);
        v28 = &v100;
        if (v27 >= 0)
          v28 = a2;
        v97 = *v28;
        switch(OZSpline::getExtrapolation(v17, 0))
        {
          case 0u:
            (*(void (**)(OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 240))(v17, a3, MEMORY[0x1E0CA2E68], 1);
            (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v97, a3);
            break;
          case 1u:
            (*(void (**)(const CMTime *, OZSpline *, uint64_t, _QWORD, CMTime *, CMTime *, CMTime *, CMTime *, double))(a4->value + 24))(a4, v17, v26, 0, &v97, a3, &v97, a3, 0.0);
            break;
          case 2u:
            memset(&v116, 0, sizeof(v116));
            OZSpline::getMinValueU(v17, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v116);
            memset(&v115, 0, sizeof(v115));
            v31 = OZSpline::getMaxValueU(v17, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v115);
            __p = 0;
            v113 = 0;
            v114 = 0;
            (*(void (**)(OZSpline *, void **, __n128))(*(_QWORD *)v17 + 24))(v17, &__p, v31);
            v32 = v113;
            if (*(_BYTE *)(*((_QWORD *)v17 + 21) + 4))
            {
              v33 = MEMORY[0x1E0CA2E68];
              while (1)
              {
                LOBYTE(v105) = 0;
                memset(&v111, 0, sizeof(v111));
                OZSpline::getStep(v17, &time1);
                OZChannelSegmentVisitor::mapPingPong(&v97, &v116, &v115, &time1, (const CMTime *)1, (char *)&v105, (uint64_t)&v111);
                (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, *v34, &v110, 0, v33);
                time1 = v97;
                time2 = *a3;
                if (!CMTimeCompare(&time1, &time2))
                  break;
                if (v34 + 1 != v32)
                {
                  (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, v34[1], &v109, 0, v33);
                  if (LOBYTE(v105))
                  {
                    time1 = *a3;
                    time2 = v97;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                    time1 = v111;
                    time2 = v110;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v106);
                    time1 = v106;
                    time2 = v117;
                    if (CMTimeCompare(&time1, &time2) >= 0)
                      v35 = &v117;
                    else
                      v35 = &v106;
                    v108 = *v35;
                    time1 = v111;
                    time2 = v108;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                  }
                  else
                  {
                    time1 = *a3;
                    time2 = v97;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                    time1 = v109;
                    time2 = v111;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v106);
                    time1 = v106;
                    time2 = v117;
                    if (CMTimeCompare(&time1, &time2) >= 0)
                      v36 = &v117;
                    else
                      v36 = &v106;
                    v108 = *v36;
                    time1 = v111;
                    time2 = v108;
                    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v117);
                  }
                  v107 = v117;
                  v38 = *v34;
                  v37 = v34[1];
                  time1 = v97;
                  time2 = v108;
                  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v117);
                  time2 = v97;
                  v117 = v108;
                  PC_CMTimeSaferAdd(&time2, &v117, (uint64_t)&time1);
                  v97 = time1;
                }
              }
            }
            else
            {
              v82 = (OZSpline **)__p;
              v83 = MEMORY[0x1E0CA2E68];
              while (1)
              {
                LOBYTE(v105) = 0;
                memset(&v111, 0, sizeof(v111));
                OZSpline::getStep(v17, &time1);
                OZChannelSegmentVisitor::mapPingPong(&v97, &v116, &v115, &time1, 0, (char *)&v105, (uint64_t)&v111);
                (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, *v84, &v110, 0, v83);
                time1 = v111;
                time2 = v110;
                if (!CMTimeCompare(&time1, &time2))
                {
                  time1 = v97;
                  time2 = v115;
                  if (CMTimeCompare(&time1, &time2))
                  {
                    (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(_QWORD *)v17 + 240))(v17, &v97, v83, 1);
                    (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v97, &v97);
                  }
                  if (LOBYTE(v105) && v82 != v84)
                  {
                    v85 = (uint64_t)*--v84;
                    (*(void (**)(OZSpline *, uint64_t, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, v85, &v110, 0, v83);
                  }
                }
                time1 = v97;
                time2 = *a3;
                if (!CMTimeCompare(&time1, &time2))
                  break;
                if (v84 + 1 != v32)
                {
                  (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, v84[1], &v109, 0, v83);
                  if (LOBYTE(v105))
                  {
                    time1 = *a3;
                    time2 = v97;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                    time1 = v111;
                    time2 = v110;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v106);
                    time1 = v106;
                    time2 = v117;
                    if (CMTimeCompare(&time1, &time2) >= 0)
                      v86 = &v117;
                    else
                      v86 = &v106;
                    v108 = *v86;
                    time1 = v111;
                    time2 = v108;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                  }
                  else
                  {
                    time1 = *a3;
                    time2 = v97;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                    time1 = v109;
                    time2 = v111;
                    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v106);
                    time1 = v106;
                    time2 = v117;
                    if (CMTimeCompare(&time1, &time2) >= 0)
                      v87 = &v117;
                    else
                      v87 = &v106;
                    v108 = *v87;
                    time1 = v111;
                    time2 = v108;
                    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v117);
                  }
                  v107 = v117;
                  v89 = *v84;
                  v88 = v84[1];
                  time1 = v97;
                  time2 = v108;
                  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v117);
                  time2 = v97;
                  v117 = v108;
                  PC_CMTimeSaferAdd(&time2, &v117, (uint64_t)&time1);
                  v97 = time1;
                }
              }
            }
            goto LABEL_143;
          case 3u:
            memset(&v116, 0, sizeof(v116));
            OZSpline::getMinValueU(v17, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v116);
            memset(&v115, 0, sizeof(v115));
            v39 = OZSpline::getMaxValueU(v17, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v115);
            __p = 0;
            v113 = 0;
            v114 = 0;
            (*(void (**)(OZSpline *, void **, __n128))(*(_QWORD *)v17 + 24))(v17, &__p, v39);
            v40 = v113;
            v41 = v113 - 1;
            v42 = MEMORY[0x1E0CA2E68];
            while (1)
            {
              memset(&v111, 0, sizeof(v111));
              OZChannelSegmentVisitor::mapProgressiveRepeat(&v97, &v116, &v115, (const CMTime *)*(unsigned __int8 *)(*((_QWORD *)v17 + 21) + 4), &time1.value, (uint64_t)&v111);
              (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, *v43, &v110, 0, v42);
              time1 = v111;
              time2 = v110;
              if (!CMTimeCompare(&time1, &time2))
              {
                time1 = v97;
                time2 = v115;
                if (CMTimeCompare(&time1, &time2))
                {
                  (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(_QWORD *)v17 + 240))(v17, &v97, v42, 1);
                  (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v97, &v97);
                }
                if (v41 == v43)
                {
                  v43 = (OZSpline **)__p;
                  (*(void (**)(OZSpline *, _QWORD, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, *(_QWORD *)__p, &v110, 0, v42);
                  v111 = v110;
                }
              }
              time1 = v97;
              time2 = *a3;
              if (!CMTimeCompare(&time1, &time2))
                break;
              if (v43 + 1 != v40)
              {
                (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, v43[1], &v109, 0, v42);
                time1 = *a3;
                time2 = v97;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                time1 = v109;
                time2 = v111;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v107);
                time1 = v107;
                time2 = v117;
                if (CMTimeCompare(&time1, &time2) >= 0)
                  v44 = &v117;
                else
                  v44 = &v107;
                v108 = *v44;
                memset(&v107, 0, sizeof(v107));
                time1 = v111;
                time2 = v108;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v107);
                v46 = *v43;
                v45 = v43[1];
                time1 = v97;
                time2 = v108;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v117);
                time2 = v97;
                v117 = v108;
                PC_CMTimeSaferAdd(&time2, &v117, (uint64_t)&time1);
                v97 = time1;
              }
            }
            goto LABEL_143;
          case 4u:
            memset(&v116, 0, sizeof(v116));
            OZSpline::getMinValueU(v17, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v116);
            memset(&v115, 0, sizeof(v115));
            v47 = OZSpline::getMaxValueU(v17, MEMORY[0x1E0CA2E68], 0, (uint64_t)&v115);
            __p = 0;
            v113 = 0;
            v114 = 0;
            (*(void (**)(OZSpline *, void **, __n128))(*(_QWORD *)v17 + 24))(v17, &__p, v47);
            v48 = v113;
            v105 = 0.0;
            v106.value = 0;
            v49 = OZSpline::getFirstVertex(v17);
            (*(void (**)(OZSpline *, uint64_t, _QWORD, CMTime *, _QWORD))(*(_QWORD *)v17 + 264))(v17, v49, 0, &v106, MEMORY[0x1E0CA2E68]);
            (*(void (**)(OZSpline *, uint64_t, _QWORD, double *, _QWORD))(*(_QWORD *)v17 + 264))(v17, v26, 0, &v105, MEMORY[0x1E0CA2E68]);
            v50 = v105 - *(double *)&v106.value;
            v51 = MEMORY[0x1E0CA2E68];
            while (1)
            {
              v104 = 0;
              memset(&v111, 0, sizeof(v111));
              OZChannelSegmentVisitor::mapProgressiveRepeat(&v97, &v116, &v115, (const CMTime *)*(unsigned __int8 *)(*((_QWORD *)v17 + 21) + 4), &v104, (uint64_t)&v111);
              (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, *v52, &v110, 0, v51);
              time1 = v111;
              time2 = v110;
              if (!CMTimeCompare(&time1, &time2))
              {
                time1 = v97;
                time2 = v115;
                if (CMTimeCompare(&time1, &time2))
                {
                  (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(_QWORD *)v17 + 240))(v17, &v97, v51, 1);
                  (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v97, &v97);
                }
                if (v48 - 1 == v52)
                {
                  v52 = (OZSpline **)__p;
                  (*(void (**)(OZSpline *, _QWORD, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, *(_QWORD *)__p, &v110, 0, v51);
                  v111 = v110;
                  ++v104;
                }
              }
              time1 = v97;
              time2 = *a3;
              if (!CMTimeCompare(&time1, &time2))
                break;
              if (v52 + 1 != v48)
              {
                (*(void (**)(OZSpline *, OZSpline *, CMTime *, _QWORD, uint64_t))(*(_QWORD *)v17 + 264))(v17, v52[1], &v109, 0, v51);
                time1 = *a3;
                time2 = v97;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v117);
                time1 = v109;
                time2 = v111;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v107);
                time1 = v107;
                time2 = v117;
                if (CMTimeCompare(&time1, &time2) >= 0)
                  v53 = &v117;
                else
                  v53 = &v107;
                v108 = *v53;
                memset(&v107, 0, sizeof(v107));
                time1 = v111;
                time2 = v108;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v107);
                v55 = *v52;
                v54 = v52[1];
                time1 = v97;
                time2 = v108;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v117);
                time2 = v97;
                v117 = v108;
                PC_CMTimeSaferAdd(&time2, &v117, (uint64_t)&time1);
                v97 = time1;
              }
            }
LABEL_143:
            if (__p)
            {
              v113 = (OZSpline **)__p;
              operator delete(__p);
            }
            break;
          default:
            break;
        }
      }
      if (v101)
      {
        v102 = (void **)v101;
        operator delete(v101);
      }
    }
  }
}

void sub_1B2C5A450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

_QWORD *`anonymous namespace'::findLeftVertex(uint64_t a1, _QWORD *a2, CMTime *a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  int32_t v13;
  _QWORD *v14;
  CMTime v16;
  CMTime time2;
  CMTime time1;

  v4 = (_QWORD *)*a2;
  v5 = a2[1] - *a2;
  if (!v5)
    goto LABEL_11;
  v8 = v5 >> 3;
  v9 = MEMORY[0x1E0CA2E68];
  do
  {
    v10 = &v4[v8 >> 1];
    v12 = *v10;
    v11 = v10 + 1;
    (*(void (**)(uint64_t, uint64_t, CMTime *, _QWORD, uint64_t))(*(_QWORD *)a1 + 264))(a1, v12, &v16, 0, v9);
    time1 = v16;
    time2 = *a3;
    v13 = CMTimeCompare(&time1, &time2);
    if (v13 >= 0)
      v8 >>= 1;
    else
      v8 += ~(v8 >> 1);
    if (v13 < 0)
      v4 = v11;
  }
  while (v8);
  if (v4 == (_QWORD *)a2[1])
  {
LABEL_11:
    v14 = v4;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, CMTime *, _QWORD, _QWORD))(*(_QWORD *)a1 + 264))(a1, *v4, &v16, 0, MEMORY[0x1E0CA2E68]);
    time1 = v16;
    time2 = *a3;
    v14 = &v4[CMTimeCompare(&time1, &time2) == 0];
    v4 = (_QWORD *)a2[1];
  }
  if (v14 == (_QWORD *)*a2)
    return v4;
  else
    return v14 - 1;
}

uint64_t `anonymous namespace'::InteriorSegment(OZInterpolators **this, OZSpline *a2, void *a3, void *a4, const CMTime *a5, const CMTime *a6, const CMTime *a7, const CMTime *a8, double a9, OZChannelSegmentVisitor *a10)
{
  uint64_t result;
  double v20;
  __int128 v21;
  unsigned int v22;
  CMTime v23;
  CMTime v24;

  v22 = 0;
  result = OZSpline::getVertexInterpolation(this, a2, &v22, 0);
  switch(v22)
  {
    case 0u:
      v24 = *a6;
      v23 = *a7;
      PC_CMTimeSaferAdd(&v24, &v23, (uint64_t)&v21);
      v20 = operator/(&v21, 2, (uint64_t)&v24);
      (*((void (**)(OZInterpolators **, CMTime *, _QWORD, uint64_t, double))*this + 30))(this, &v24, MEMORY[0x1E0CA2E68], 1, v20);
      result = (*(uint64_t (**)(const CMTime *, const CMTime *, const CMTime *))(a8->value + 16))(a8, a6, a7);
      break;
    case 1u:
      result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 24))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 4u:
      result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 32))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 6u:
      result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 40))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 7u:
      result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 48))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 8u:
      result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 56))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 0xDu:
      result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 88))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 0xEu:
      result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 96))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 0xFu:
      result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 64))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 0x10u:
      result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 72))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 0x11u:
      result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 80))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    default:
      return result;
  }
  return result;
}

void OZChannelSegmentVisitor::OZChannelSegmentVisitor(OZChannelSegmentVisitor *this)
{
  *(_QWORD *)this = &off_1E6556490;
}

void OZChannelSegmentVisitor::~OZChannelSegmentVisitor(OZChannelSegmentVisitor *this)
{
  JUMPOUT(0x1B5E29170);
}

void OZChannelSegmentVisitor::mapPingPong(CMTime *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, const CMTime *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  int v9;
  CMTime *v15;
  CMTimeEpoch v16;
  char v17;
  CMTimeEpoch v18;
  CMTimeEpoch v19;
  CMTimeEpoch epoch;
  CMTimeEpoch v21;
  CMTimeEpoch v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime time2;
  CMTime time1;

  v9 = (int)a5;
  memset(&v25, 0, sizeof(v25));
  time1 = *a3;
  time2 = *a2;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
  time1 = v25;
  v15 = (CMTime *)MEMORY[0x1E0CA2E68];
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2))
  {
    time1 = *this;
    time2 = *a2;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      time1 = *a2;
      time2 = *this;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
      *(CMTime *)a7 = v28;
      operator*(&v25, &v23, 2.0);
      memset(&v24, 0, sizeof(v24));
      operator/((__int128 *)a7, (uint64_t)&v23, (uint64_t)&v24);
      CMTimeMake(&v26, 1, 1);
      time1 = v24;
      time2 = v26;
      PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v27);
      time1 = v24;
      time2 = v27;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
      operator*((__int128 *)&v28.value, (uint64_t)&v23, (uint64_t)&time1);
      v24 = time1;
      epoch = time1.epoch;
      *(_OWORD *)a7 = *(_OWORD *)&time1.value;
      *(_QWORD *)(a7 + 16) = epoch;
      *(_OWORD *)&time1.value = *(_OWORD *)a7;
      time1.epoch = epoch;
      time2 = *v15;
      if (!CMTimeCompare(&time1, &time2))
      {
        operator*(&v25, &time1, 2.0);
        *(CMTime *)a7 = time1;
      }
      time1 = *(CMTime *)a7;
      time2 = v25;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        operator*(&v25, 2, &v27);
        time1 = v27;
        time2 = *(CMTime *)a7;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        v17 = 0;
        *(_OWORD *)a7 = *(_OWORD *)&v28.value;
        v18 = v28.epoch;
        goto LABEL_14;
      }
    }
    else
    {
      time1 = *this;
      time2 = *a3;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        *(_OWORD *)a7 = *(_OWORD *)&this->value;
        *(_QWORD *)(a7 + 16) = this->epoch;
        *a6 = 0;
        return;
      }
      if (!v9 || (time1 = v25, time2 = *a4, CMTimeCompare(&time1, &time2) < 0))
      {
        time1 = *this;
        time2 = *a2;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        *(CMTime *)a7 = v28;
        operator*(&v25, 2, &v23);
        memset(&v24, 0, sizeof(v24));
        operator/((__int128 *)a7, (uint64_t)&v23, (uint64_t)&v24);
        CMTimeMake(&v26, 1, 1);
        time1 = v24;
        time2 = v26;
        PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v27);
        time1 = v24;
        time2 = v27;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        operator*((__int128 *)&v28.value, (uint64_t)&v23, (uint64_t)&time1);
        v24 = time1;
        v21 = time1.epoch;
        *(_OWORD *)a7 = *(_OWORD *)&time1.value;
        *(_QWORD *)(a7 + 16) = v21;
        *(_OWORD *)&time1.value = *(_OWORD *)a7;
        time1.epoch = v21;
        time2 = v25;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          v17 = 0;
          goto LABEL_21;
        }
        operator*(&v25, 2, &v27);
        time1 = v27;
        time2 = *(CMTime *)a7;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        *(_OWORD *)a7 = *(_OWORD *)&v28.value;
        v22 = v28.epoch;
      }
      else
      {
        time1 = v25;
        time2 = *a4;
        if (!CMTimeCompare(&time1, &time2))
        {
          *(_OWORD *)a7 = *(_OWORD *)&v15->value;
          *(_QWORD *)(a7 + 16) = v15->epoch;
          *a6 = 0;
          goto LABEL_22;
        }
        time1 = *this;
        time2 = *a3;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        *(CMTime *)a7 = v28;
        memset(&v28, 0, sizeof(v28));
        time1 = v25;
        time2 = *a4;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        operator*(&v28, 2, &time2);
        PCMath::mod((PCMath *)a7, &time2, &time1);
        *(_OWORD *)a7 = *(_OWORD *)&time1.value;
        v16 = time1.epoch;
        *(_QWORD *)(a7 + 16) = time1.epoch;
        *(_OWORD *)&time1.value = *(_OWORD *)a7;
        time1.epoch = v16;
        time2 = v28;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          time1 = *(CMTime *)a7;
          time2 = v28;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v26);
          time1 = v26;
          time2 = *a4;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v27);
          v17 = 0;
          *(_OWORD *)a7 = *(_OWORD *)&v27.value;
          v18 = v27.epoch;
LABEL_14:
          *(_QWORD *)(a7 + 16) = v18;
LABEL_21:
          *a6 = v17;
LABEL_22:
          time2 = *(CMTime *)a7;
          v28 = *a2;
          PC_CMTimeSaferAdd(&time2, &v28, (uint64_t)&time1);
          *(_OWORD *)a7 = *(_OWORD *)&time1.value;
          v19 = time1.epoch;
          goto LABEL_23;
        }
        time1 = v28;
        time2 = *(CMTime *)a7;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
        *(_OWORD *)a7 = *(_OWORD *)&v27.value;
        v22 = v27.epoch;
      }
      *(_QWORD *)(a7 + 16) = v22;
    }
    v17 = 1;
    goto LABEL_21;
  }
  *a6 = 0;
  *(_OWORD *)a7 = *(_OWORD *)&a2->value;
  v19 = a2->epoch;
LABEL_23:
  *(_QWORD *)(a7 + 16) = v19;
}

void OZChannelSegmentVisitor::mapProgressiveRepeat(CMTime *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  int v8;
  CMTimeEpoch v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  CMTimeEpoch epoch;
  __int128 v18;
  double Seconds;
  CMTime v20;
  CMTime time;
  CMTime v22;
  CMTime v23;
  __int128 v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  __int128 v29;
  uint64_t v30;
  CMTime time2;
  CMTime time1;

  v8 = (int)a4;
  memset(&v26, 0, sizeof(v26));
  time1 = *a3;
  time2 = *a2;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v26);
  time1 = v26;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!CMTimeCompare(&time1, &time2))
  {
    *a5 = 0;
    *(_OWORD *)a6 = *(_OWORD *)&a2->value;
    *(_QWORD *)(a6 + 16) = a2->epoch;
    return;
  }
  time1 = *this;
  time2 = *a2;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    time1 = *a2;
    time2 = *this;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v24);
    memset(&v25, 0, sizeof(v25));
    operator/(&v24, (uint64_t)&v26, (uint64_t)&v25);
    CMTimeMake(&v27, 1, 1);
    time1 = v25;
    time2 = v27;
    PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v28);
    time1 = v25;
    time2 = v28;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
    operator*(&v29, (uint64_t)&v26, (uint64_t)&time1);
    v25 = time1;
    epoch = time1.epoch;
    v18 = *(_OWORD *)&time1.value;
    time1 = *a3;
    *(_OWORD *)&time2.value = v18;
    time2.epoch = epoch;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
    *(_OWORD *)a6 = v29;
    *(_QWORD *)(a6 + 16) = v30;
    time1 = *a2;
    time2 = *this;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
    Seconds = CMTimeGetSeconds(&v23);
    v22 = v26;
    v16 = (uint64_t)(Seconds / CMTimeGetSeconds(&v22)) + 1;
    goto LABEL_7;
  }
  time1 = *this;
  time2 = *a3;
  if (CMTimeCompare(&time1, &time2) > 0
    || v8 && (time1 = *this, time2 = *a3, (CMTimeCompare(&time1, &time2) & 0x80000000) == 0))
  {
    time1 = *this;
    time2 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v24);
    memset(&v25, 0, sizeof(v25));
    operator/(&v24, (uint64_t)&v26, (uint64_t)&v25);
    CMTimeMake(&v27, 1, 1);
    time1 = v25;
    time2 = v27;
    PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v28);
    time1 = v25;
    time2 = v28;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
    operator*(&v29, (uint64_t)&v26, (uint64_t)&time1);
    v25 = time1;
    v13 = time1.epoch;
    v14 = *(_OWORD *)&time1.value;
    time1 = *a2;
    *(_OWORD *)&time2.value = v14;
    time2.epoch = v13;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v29);
    *(_OWORD *)a6 = v29;
    *(_QWORD *)(a6 + 16) = v30;
    time1 = *this;
    time2 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
    v15 = CMTimeGetSeconds(&time);
    v20 = v26;
    v16 = (uint64_t)(v15 / CMTimeGetSeconds(&v20));
LABEL_7:
    *a5 = v16;
    return;
  }
  *(_OWORD *)a6 = *(_OWORD *)&this->value;
  *(_QWORD *)(a6 + 16) = this->epoch;
  *a5 = 0;
}

void OZChannel2D::OZChannel2D(OZChannel2D *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, unsigned int a7, OZChannelImpl *a8, OZChannelInfo *a9)
{
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  PCString v15;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5, a6, 0, a7);
  *(_QWORD *)v11 = &off_1E6556518;
  *((_QWORD *)v11 + 2) = &unk_1E6556870;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel X"));
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 136), &v15, (OZChannelFolder *)this, 1u, 0, a8, a9);
  PCString::~PCString(&v15);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Y"));
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 288), &v15, (OZChannelFolder *)this, 2u, 0, a8, a9);
  PCString::~PCString(&v15);
}

void sub_1B2C5B584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannel2D::OZChannel2D(OZChannel2D *this, double a2, double a3, OZFactory *a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, unsigned int a9, OZChannelImpl *a10, OZChannelInfo *a11)
{
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  PCString v19;

  OZCompoundChannel::OZCompoundChannel(this, a4, a5, a6, a7, a8, 0, a9);
  *(_QWORD *)v15 = &off_1E6556518;
  *((_QWORD *)v15 + 2) = &unk_1E6556870;
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel X"));
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 136), a2, &v19, (OZChannelFolder *)this, 1u, 0, a10, a11);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Y"));
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 288), a3, &v19, (OZChannelFolder *)this, 2u, 0, a10, a11);
  PCString::~PCString(&v19);
}

void sub_1B2C5B6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannel2D::OZChannel2D(OZChannel2D *this, double a2, double a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, unsigned int a8, OZChannelImpl *a9, OZChannelInfo *a10)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v21;
  OZFactoryBase *v22;
  TXParagraphStyleFolder_Factory *v23;
  OZFactoryBase *v24;
  PCString v25;

  Instance = (OZFactory *)OZChannel2D_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a4, a5, a6, a7, 0, a8);
  *(_QWORD *)this = &off_1E6556518;
  *((_QWORD *)this + 2) = &unk_1E6556870;
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v25, CFSTR("Channel X"));
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 136), a2, &v25, (OZChannelFolder *)this, 1u, 0, a9, a10);
  PCString::~PCString(&v25);
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v25, CFSTR("Channel Y"));
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 288), a3, &v25, (OZChannelFolder *)this, 2u, 0, a9, a10);
  PCString::~PCString(&v25);
}

void sub_1B2C5B844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannel2D::OZChannel2D(OZChannel2D *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  TXParagraphStyleFolder_Factory *v19;
  OZFactoryBase *v20;
  PCString v21;

  Instance = (OZFactory *)OZChannel2D_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(_QWORD *)this = &off_1E6556518;
  *((_QWORD *)this + 2) = &unk_1E6556870;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel X"));
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 136), &v21, (OZChannelFolder *)this, 1u, 0, a7, a8);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel Y"));
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 288), &v21, (OZChannelFolder *)this, 2u, 0, a7, a8);
  PCString::~PCString(&v21);
}

void sub_1B2C5B9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannel2D::OZChannel2D(OZChannel2D *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  TXParagraphStyleFolder_Factory *v10;
  OZFactoryBase *v11;
  TXParagraphStyleFolder_Factory *v12;
  OZFactoryBase *v13;
  PCString v14;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(_QWORD *)v10 = &off_1E6556518;
  *((_QWORD *)v10 + 2) = &unk_1E6556870;
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel X"));
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 136), &v14, (OZChannelFolder *)this, 1u, 0, a6, a7);
  PCString::~PCString(&v14);
  TXParagraphStyleFolder_Factory::createInstance(v12, v13);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Y"));
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 288), &v14, (OZChannelFolder *)this, 2u, 0, a6, a7);
  PCString::~PCString(&v14);
}

void sub_1B2C5BAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannel2D::OZChannel2D(OZChannel2D *this, const OZChannel2D *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E6556518;
  *(_QWORD *)(v5 + 16) = &unk_1E6556870;
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((_QWORD *)this + 17) = &off_1E6551358;
  *((_QWORD *)this + 19) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((_QWORD *)this + 36) = &off_1E6551358;
  *((_QWORD *)this + 38) = &unk_1E65516B8;
}

void sub_1B2C5BBAC(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannel *v2;

  OZChannel::~OZChannel(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

OZChannel2D *OZChannel2D::clone(OZChannel2D *this)
{
  OZChannel2D *v2;

  v2 = (OZChannel2D *)operator new();
  OZChannel2D::OZChannel2D(v2, this, 0);
  return v2;
}

void sub_1B2C5BC1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

void OZChannel2D::copy(OZChannel2D *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
}

uint64_t OZChannel2D::deriveChannel(OZChannel2D *this, const CMTime *a2)
{
  OZChannel *v4;
  void *Keyframe;
  OZChannel *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t result;
  char v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double CurveValue;

  v32 = 0.0;
  CurveValue = 0.0;
  v30 = 0.0;
  v31 = 0.0;
  v29 = 0.0;
  v28 = 0.0;
  v27 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v26 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v25 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v24 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v4 = (OZChannel *)((char *)this + 136);
  v23 = 0.0;
  Keyframe = (void *)OZChannel::getKeyframe((OZChannel *)((char *)this + 136), a2);
  v6 = (OZChannel *)((char *)this + 288);
  v7 = (void *)OZChannel::getKeyframe(v6, a2);
  if (!Keyframe)
  {
    CurveValue = OZChannel::getCurveValue(v4, a2, 1);
    OZChannel::setKeyframe(v4, a2, CurveValue, 1);
    Keyframe = (void *)OZChannel::getKeyframe(v4, a2);
    if (v7)
      goto LABEL_3;
LABEL_5:
    v32 = OZChannel::getCurveValue(v6, a2, 1);
    OZChannel::setKeyframe(v6, a2, v32, 1);
    v7 = (void *)OZChannel::getKeyframe(v6, a2);
    goto LABEL_6;
  }
  OZChannel::getKeyframe(v4, Keyframe, 0, &CurveValue);
  if (!v7)
    goto LABEL_5;
LABEL_3:
  OZChannel::getKeyframe(v6, v7, 0, &v32);
LABEL_6:
  OZChannel::getPreviousKeyframe(v4, a2, &v27, &v31);
  v8 = OZChannel::getKeyframe(v4, &v27);
  OZChannel::getPreviousKeyframe(v6, a2, &v26, &v29);
  v9 = OZChannel::getKeyframe(v6, &v26);
  v10 = v9;
  if (v8 || !v9)
  {
    v11 = v8 != 0;
    if (!v9 && v8)
    {
      v11 = 1;
      v29 = OZChannel::getCurveValue(v6, &v27, 1);
    }
  }
  else
  {
    v11 = 0;
    v31 = OZChannel::getCurveValue(v4, &v26, 1);
  }
  OZChannel::getNextKeyframe(v4, a2, &v25, &v30);
  v12 = OZChannel::getKeyframe(v4, &v25);
  OZChannel::getNextKeyframe(v6, a2, &v24, &v28);
  v13 = OZChannel::getKeyframe(v6, &v24);
  v14 = v13;
  if (v12 || !v13)
  {
    v15 = v12 != 0;
    if (!v13 && v12)
    {
      v15 = 1;
      v28 = OZChannel::getCurveValue(v6, &v25, 1);
    }
  }
  else
  {
    v15 = 0;
    v30 = OZChannel::getCurveValue(v4, &v24, 1);
  }
  OZChannel::deriveKeyframe(v4, Keyframe);
  result = OZChannel::deriveKeyframe(v6, v7);
  if (v10)
    v17 = 1;
  else
    v17 = v11;
  if (v14)
    v18 = 1;
  else
    v18 = v15;
  if ((v17 & 1) != 0)
  {
    if ((v18 & 1) != 0)
    {
      v19 = 6.0;
      v20 = (v30 - v31) / 6.0;
      v21 = v28;
    }
    else
    {
      v19 = 3.0;
      v20 = (CurveValue - v31) / 3.0;
      v21 = v32;
    }
    v22 = (v21 - v29) / v19;
  }
  else
  {
    if (!v18)
      return result;
    v20 = (v30 - CurveValue) / 3.0;
    v22 = (v28 - v32) / 3.0;
  }
  OZChannel::getKeyframeOutputTangents(v4, Keyframe, &v23, 0, 1);
  OZChannel::setKeyframeOutputTangents(v4, Keyframe, v23, v20, 1);
  OZChannel::getKeyframeInputTangents(v4, Keyframe, &v23, 0, 1);
  OZChannel::setKeyframeInputTangents(v4, Keyframe, v23, -v20, 1);
  OZChannel::getKeyframeOutputTangents(v6, v7, &v23, 0, 1);
  OZChannel::setKeyframeOutputTangents(v6, v7, v23, v22, 1);
  OZChannel::getKeyframeInputTangents(v6, v7, &v23, 0, 1);
  return OZChannel::setKeyframeInputTangents(v6, v7, v23, -v22, 1);
}

uint64_t OZChannel2D::flattenAtTime(OZChannel *this, const CMTime *a2)
{
  OZChannel *v3;
  OZChannel *p_var17;
  void *Keyframe;
  void *v6;

  v3 = this;
  p_var17 = (OZChannel *)&this->var17;
  Keyframe = (void *)OZChannel::getKeyframe((OZChannel *)&this->var17, a2);
  v3 = (OZChannel *)((char *)v3 + 288);
  v6 = (void *)OZChannel::getKeyframe(v3, a2);
  OZChannel::setKeyframeOutputTangents(p_var17, Keyframe, 0.0, 0.0, 1);
  OZChannel::setKeyframeInputTangents(p_var17, Keyframe, 0.0, 0.0, 1);
  OZChannel::setKeyframeOutputTangents(v3, v6, 0.0, 0.0, 1);
  OZChannel::setKeyframeInputTangents(v3, v6, 0.0, 0.0, 1);
  OZChannel::setKeyframeTangentsBroken(p_var17, Keyframe, 0);
  return OZChannel::setKeyframeTangentsBroken(v3, v6, 0);
}

uint64_t OZChannel2D::setLinearAtTime(OZChannel *this, const CMTime *a2)
{
  OZChannel *v3;
  OZChannel *p_var17;
  void *Keyframe;
  void *v6;

  v3 = this;
  p_var17 = (OZChannel *)&this->var17;
  Keyframe = (void *)OZChannel::getKeyframe((OZChannel *)&this->var17, a2);
  v3 = (OZChannel *)((char *)v3 + 288);
  v6 = (void *)OZChannel::getKeyframe(v3, a2);
  OZChannel::setKeyframeInterpolation(p_var17, Keyframe, 1);
  return OZChannel::setKeyframeInterpolation(v3, v6, 1);
}

uint64_t OZChannel2D::setValue(OZChannel2D *this, const CMTime *a2, double a3, double a4, uint64_t a5)
{
  char *v8;

  v8 = (char *)this + 136;
  (*(void (**)(char *, double))(*((_QWORD *)this + 17) + 712))((char *)this + 136, a3);
  return (*(uint64_t (**)(char *, const CMTime *, uint64_t, double))(*((_QWORD *)v8 + 19) + 712))(v8 + 152, a2, a5, a4);
}

uint64_t OZChannel2D::setValueOffsetByBehaviors(OZChannel2D *this, const CMTime *a2, double a3, double a4)
{
  OZChannelBase *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double CurveValue;
  double v14;
  double v15;
  double v16;
  CMTime v18;

  v8 = (OZChannelBase *)((char *)this + 136);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, 0.0);
  v10 = a3 - v9;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, 0.0);
  v12 = a4 - v11;
  OZChannelBase::globalToLocalTime(v8, a2, (uint64_t)&v18);
  CurveValue = OZChannel::getCurveValue((OZChannel *)v8, &v18, 0);
  OZChannelBase::globalToLocalTime((OZChannelBase *)((char *)this + 288), a2, (uint64_t)&v18);
  v14 = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v18, 0);
  v15 = v10 + CurveValue;
  v16 = v12 + v14;
  (*(void (**)(OZChannelBase *, const CMTime *, _QWORD, double))(*((_QWORD *)this + 17) + 712))(v8, a2, 0, v15);
  return (*(uint64_t (**)(char *, const CMTime *, _QWORD, double))(*((_QWORD *)this + 36) + 712))((char *)this + 288, a2, 0, v16);
}

void OZChannel2D::simplify(OZChannelFolder *this, const CMTime *a2, CMTime *a3, const CMTime *a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CMTime *v8;
  CMTime *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  const void *v16;
  OZChannel *v17;
  OZChannel *v18;
  void **value;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  CMTimeValue v25;
  CMTimeValue v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  CMTimeValue v36;
  CMTimeValue v37;
  __int128 v38;
  _OWORD *v39;
  __int128 v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  void *v52;
  uint64_t v53;
  unsigned int v54;
  OZChannel *v56;
  OZChannel *v57;
  void **v58;
  void *v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  double v63;
  double v64;
  unint64_t v65;
  unsigned int v66;
  void *v67;
  unint64_t v68;
  unsigned int v69;
  void *v70;
  void *__p[3];
  void *v73;
  void **v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  CMTime v81;
  CMTime v82;
  void *v83;
  _QWORD *v84;
  char *v85;
  CMTime v86;
  CMTime time2;
  CMTime time1;

  v8 = a3;
  v11 = (CMTime *)MEMORY[0x1E0CA2E68];
  if ((_DWORD)a6 == 4)
  {
    memset(&v86, 0, sizeof(v86));
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v82 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v12 = (uint64_t *)*((_QWORD *)this + 14);
    if (v12)
    {
      v13 = *v12;
      if (v12[1] != *v12)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = *(const void **)(v13 + 8 * v14);
          if (v16)
          {
            if (v17)
            {
              v18 = v17;
              OZChannel::getKeyframes(v17, 0, &v81);
              value = *(void ***)&v81.timescale;
              if (*(_QWORD *)&v81.timescale != v81.value)
              {
                v20 = 0;
                v21 = 0;
                value = (void **)v81.value;
                do
                {
                  OZChannel::getKeyframe(v18, value[v20], &v82, 0);
                  v23 = v86.value;
                  v22 = *(_QWORD *)&v86.timescale;
                  if (v86.value == *(_QWORD *)&v86.timescale)
                  {
                    v25 = v86.value;
                    v26 = v86.value;
                  }
                  else
                  {
                    while (1)
                    {
                      v24 = *(_OWORD *)v23;
                      time1.epoch = *(_QWORD *)(v23 + 16);
                      *(_OWORD *)&time1.value = v24;
                      time2 = v82;
                      if (!CMTimeCompare(&time1, &time2))
                        break;
                      v23 += 24;
                      if (v23 == v22)
                      {
                        v23 = v22;
                        break;
                      }
                    }
                    v25 = *(_QWORD *)&v86.timescale;
                    v26 = v23;
                    v23 = *(_QWORD *)&v86.timescale;
                  }
                  if (v26 == v23)
                  {
                    if (v23 >= v86.epoch)
                    {
                      v29 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v86.value) >> 3);
                      v30 = v29 + 1;
                      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
                        goto LABEL_100;
                      if (0x5555555555555556 * ((v86.epoch - v86.value) >> 3) > v30)
                        v30 = 0x5555555555555556 * ((v86.epoch - v86.value) >> 3);
                      if (0xAAAAAAAAAAAAAAABLL * ((v86.epoch - v86.value) >> 3) >= 0x555555555555555)
                        v31 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v31 = v30;
                      if (v31)
                        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v86.epoch, v31);
                      else
                        v32 = 0;
                      v33 = &v32[24 * v29];
                      v34 = *(_OWORD *)&v82.value;
                      *((_QWORD *)v33 + 2) = v82.epoch;
                      *(_OWORD *)v33 = v34;
                      v36 = v86.value;
                      v35 = *(char **)&v86.timescale;
                      v37 = (CMTimeValue)v33;
                      if (*(_QWORD *)&v86.timescale != v86.value)
                      {
                        do
                        {
                          v38 = *(_OWORD *)(v35 - 24);
                          *(_QWORD *)(v37 - 8) = *((_QWORD *)v35 - 1);
                          *(_OWORD *)(v37 - 24) = v38;
                          v37 -= 24;
                          v35 -= 24;
                        }
                        while (v35 != (char *)v36);
                        v35 = (char *)v86.value;
                      }
                      v28 = (unint64_t)(v33 + 24);
                      v86.value = v37;
                      *(_QWORD *)&v86.timescale = v33 + 24;
                      v86.epoch = (CMTimeEpoch)&v32[24 * v31];
                      if (v35)
                        operator delete(v35);
                    }
                    else
                    {
                      v27 = *(_OWORD *)&v82.value;
                      *(_QWORD *)(v23 + 16) = v82.epoch;
                      *(_OWORD *)v23 = v27;
                      v28 = v23 + 24;
                    }
                    *(_QWORD *)&v86.timescale = v28;
                    if (v15)
                    {
                      v39 = v84;
                      if (v84 >= (_QWORD *)v85)
                      {
                        v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (_BYTE *)v83) >> 3);
                        v43 = v42 + 1;
                        if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_100:
                          std::vector<double>::__throw_length_error[abi:ne180100]();
                        if (0x5555555555555556 * ((v85 - (_BYTE *)v83) >> 3) > v43)
                          v43 = 0x5555555555555556 * ((v85 - (_BYTE *)v83) >> 3);
                        if (0xAAAAAAAAAAAAAAABLL * ((v85 - (_BYTE *)v83) >> 3) >= 0x555555555555555)
                          v44 = 0xAAAAAAAAAAAAAAALL;
                        else
                          v44 = v43;
                        if (v44)
                          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v85, v44);
                        else
                          v45 = 0;
                        v46 = &v45[24 * v42];
                        v47 = *(_OWORD *)&v82.value;
                        *((_QWORD *)v46 + 2) = v82.epoch;
                        *(_OWORD *)v46 = v47;
                        v49 = (char *)v83;
                        v48 = (char *)v84;
                        v50 = v46;
                        if (v84 != v83)
                        {
                          do
                          {
                            v51 = *(_OWORD *)(v48 - 24);
                            *((_QWORD *)v50 - 1) = *((_QWORD *)v48 - 1);
                            *(_OWORD *)(v50 - 24) = v51;
                            v50 -= 24;
                            v48 -= 24;
                          }
                          while (v48 != v49);
                          v48 = (char *)v83;
                        }
                        v41 = v46 + 24;
                        v83 = v50;
                        v84 = v46 + 24;
                        v85 = &v45[24 * v44];
                        if (v48)
                          operator delete(v48);
                      }
                      else
                      {
                        v40 = *(_OWORD *)&v82.value;
                        v84[2] = v82.epoch;
                        *v39 = v40;
                        v41 = (_QWORD *)v39 + 3;
                      }
                      v84 = v41;
                    }
                  }
                  value = (void **)v81.value;
                  v20 = ++v21;
                }
                while (v21 < (unint64_t)((*(_QWORD *)&v81.timescale - v81.value) >> 3));
              }
              if (value)
              {
                *(_QWORD *)&v81.timescale = value;
                operator delete(value);
              }
              v12 = (uint64_t *)*((_QWORD *)this + 14);
              v13 = *v12;
            }
          }
          v14 = ++v15;
        }
        while (v15 < (unint64_t)((v12[1] - v13) >> 3));
        v52 = v83;
        v8 = a3;
        v11 = (CMTime *)MEMORY[0x1E0CA2E68];
        if (v84 != v83)
        {
          v53 = 0;
          v54 = 1;
          do
          {
            (*(void (**)(OZChannelFolder *, uint64_t))(*(_QWORD *)this + 600))(this, (uint64_t)v52 + 24 * v53);
            v53 = v54;
            v52 = v83;
          }
          while (0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (_BYTE *)v83) >> 3) > v54++);
        }
      }
      v79 = 0.0;
      v80 = 0.0;
      v77 = 0.0;
      v78 = 0.0;
      v75 = 0.0;
      v76 = 0.0;
      v81 = *v11;
      v56 = (OZChannel *)((char *)this + 136);
      OZChannel::getKeyframes((OZChannel *)((char *)this + 136), 0, &v73);
      v57 = (OZChannel *)((char *)this + 288);
      OZChannel::getKeyframes(v57, 0, __p);
      v58 = v74;
      if (v74 != v73)
      {
        OZChannel::getKeyframe(v56, *(void **)v73, 0, &v80);
        OZChannel::getKeyframe(v57, *(void **)__p[0], 0, &v79);
        v58 = (void **)v73;
        if ((unint64_t)((((char *)v74 - (_BYTE *)v73) >> 3) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v59 = *(void **)__p[0];
          v60 = *(void **)v73;
          v61 = 1;
          LODWORD(v62) = 1;
          do
          {
            OZChannel::getKeyframe(v56, v58[v61], &v81, &v76);
            OZChannel::getKeyframe(v57, *((void **)__p[0] + v61), 0, &v75);
            time1 = v81;
            time2 = *a2;
            if (CMTimeCompare(&time1, &time2) < 0 || (time1 = v81, time2 = *v8, CMTimeCompare(&time1, &time2) > 0))
            {
              v79 = v75;
              v80 = v76;
              v58 = (void **)v73;
              v60 = (void *)*((_QWORD *)v73 + v61);
              v59 = (void *)*((_QWORD *)__p[0] + v61);
              v62 = (v62 + 1);
            }
            else
            {
              v62 = (v62 + 1);
              OZChannel::getKeyframe(v56, *((void **)v73 + v62), 0, &v78);
              OZChannel::getKeyframe(v57, *((void **)__p[0] + v62), 0, &v77);
              v63 = (v75 - v79) / (v76 - v80);
              v64 = (v77 - v75) / (v78 - v76);
              if ((v63 <= 0.0 || v64 >= 0.0) && (v63 >= 0.0 || v64 <= 0.0))
              {
                OZChannel::willBeModified(v56, 1);
                OZChannel::deleteKeyframe(v56, *((void **)v73 + v61));
                OZChannel::willBeModified(v57, 1);
                OZChannel::deleteKeyframe(v57, *((void **)__p[0] + v61));
                OZChannel::deriveKeyframe(v56, v60);
                OZChannel::deriveKeyframe(v57, v59);
                OZChannel::deriveKeyframe(v56, *((void **)v73 + v62));
                OZChannel::deriveKeyframe(v57, *((void **)__p[0] + v62));
                v58 = (void **)v73;
              }
              else
              {
                v79 = v75;
                v80 = v76;
                v58 = (void **)v73;
                v60 = (void *)*((_QWORD *)v73 + v61);
                v59 = (void *)*((_QWORD *)__p[0] + v61);
              }
            }
            v61 = v62;
          }
          while (v74 - v58 - 1 > v62);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
        v58 = (void **)v73;
      }
      if (v58)
      {
        v74 = v58;
        operator delete(v58);
      }
      if (v83)
      {
        v84 = v83;
        operator delete(v83);
      }
    }
    v70 = (void *)v86.value;
    if (v86.value)
    {
      *(_QWORD *)&v86.timescale = v86.value;
      goto LABEL_98;
    }
  }
  else
  {
    OZChannelFolder::simplify(this, a2, a3, a4, a5, a6, a7, a8);
    v86 = *v11;
    OZChannel::getKeyframes((OZChannel *)((char *)this + 136), 0, &v83);
    OZChannel::getKeyframes((OZChannel *)((char *)this + 288), 0, &v82);
    if (v84 != v83)
    {
      v65 = 0;
      v66 = 1;
      do
      {
        time1 = v86;
        time2 = *a2;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          time1 = v86;
          time2 = *v8;
          if (CMTimeCompare(&time1, &time2) <= 0)
          {
            OZChannel::getKeyframe((OZChannel *)((char *)this + 136), *((void **)v83 + v65), &v86, 0);
            (*(void (**)(CMTime *__return_ptr, OZChannelFolder *, CMTime *))(*(_QWORD *)this + 336))(&time1, this, &v86);
            if ((OZChannel::hasKeypointAt((OZChannel *)((char *)this + 288), &time1) & 1) == 0)
              OZChannel::setKeyframe((OZChannel *)((char *)this + 288), &v86);
          }
        }
        v65 = v66++;
      }
      while (v65 < ((char *)v84 - (_BYTE *)v83) >> 3);
    }
    v67 = *(void **)&v82.timescale;
    if (*(_QWORD *)&v82.timescale != v82.value)
    {
      v68 = 0;
      v69 = 1;
      do
      {
        time1 = v86;
        time2 = *a2;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          time1 = v86;
          time2 = *v8;
          if (CMTimeCompare(&time1, &time2) <= 0)
          {
            OZChannel::getKeyframe((OZChannel *)((char *)this + 288), *(void **)(v82.value + 8 * v68), &v86, 0);
            (*(void (**)(CMTime *__return_ptr, OZChannelFolder *, CMTime *))(*(_QWORD *)this + 336))(&time1, this, &v86);
            if ((OZChannel::hasKeypointAt((OZChannel *)((char *)this + 136), &time1) & 1) == 0)
              OZChannel::setKeyframe((OZChannel *)((char *)this + 136), &v86);
          }
        }
        v68 = v69;
        v67 = (void *)v82.value;
        ++v69;
      }
      while (v68 < (*(_QWORD *)&v82.timescale - v82.value) >> 3);
    }
    if (v67)
    {
      *(_QWORD *)&v82.timescale = v67;
      operator delete(v67);
    }
    v70 = v83;
    if (v83)
    {
      v84 = v83;
LABEL_98:
      operator delete(v70);
    }
  }
}

void sub_1B2C5CC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;

  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  v35 = *(void **)(v33 - 176);
  if (v35)
  {
    *(_QWORD *)(v33 - 168) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

const __CFString *OZChannel2D::getObjCWrapperName(OZChannel2D *this)
{
  return CFSTR("CHChannel2D");
}

void `non-virtual thunk to'OZChannel2D::~OZChannel2D(OZChannel2D *this)
{
  OZChannel2D::~OZChannel2D((OZChannel2D *)((char *)this - 16));
}

{
  OZChannel2D::~OZChannel2D((OZChannel2D *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChannel3D::OZChannel3D(OZChannel3D *this, double a2, double a3, double a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, unsigned int a9, OZChannelImpl *a10, OZChannelInfo *a11)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v23;
  OZFactoryBase *v24;
  PCString v25;

  Instance = (OZFactory *)OZChannel3D_Factory::getInstance(this);
  OZChannel2D::OZChannel2D(this, a2, a3, Instance, a5, a6, a7, a8, a9, a10, a11);
  *(_QWORD *)this = &off_1E65568E0;
  *((_QWORD *)this + 2) = &unk_1E6556C40;
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v25, CFSTR("Channel Z"));
  OZChannelDouble::OZChannelDouble((OZChannel3D *)((char *)this + 440), a4, &v25, (OZChannelFolder *)this, 3u, 0, a10, a11);
  PCString::~PCString(&v25);
}

void sub_1B2C5CE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel2D *v10;

  PCString::~PCString(&a10);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannel3D::OZChannel3D(OZChannel3D *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  PCString v19;

  Instance = (OZFactory *)OZChannel3D_Factory::getInstance(this);
  OZChannel2D::OZChannel2D(this, Instance, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = &off_1E65568E0;
  *((_QWORD *)this + 2) = &unk_1E6556C40;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Z"));
  OZChannelDouble::OZChannelDouble((OZChannel3D *)((char *)this + 440), &v19, (OZChannelFolder *)this, 3u, 0, a7, a8);
  PCString::~PCString(&v19);
}

void sub_1B2C5CF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel2D *v10;

  PCString::~PCString(&a10);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannel3D::OZChannel3D(OZChannel3D *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  TXParagraphStyleFolder_Factory *v10;
  OZFactoryBase *v11;
  PCString v12;

  OZChannel2D::OZChannel2D(this, a2, a3, a4, a5, a6, a7);
  *(_QWORD *)v10 = &off_1E65568E0;
  *((_QWORD *)v10 + 2) = &unk_1E6556C40;
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Z"));
  OZChannelDouble::OZChannelDouble((OZChannel3D *)((char *)this + 440), &v12, (OZChannelFolder *)this, 3u, 0, a6, a7);
  PCString::~PCString(&v12);
}

void sub_1B2C5D018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel2D *v10;

  PCString::~PCString(&a10);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannel3D::OZChannel3D(OZChannel3D *this, const OZChannel3D *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannel2D::OZChannel2D(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65568E0;
  *(_QWORD *)(v5 + 16) = &unk_1E6556C40;
  OZChannel::OZChannel((OZChannel *)(v5 + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((_QWORD *)this + 55) = &off_1E6551358;
  *((_QWORD *)this + 57) = &unk_1E65516B8;
}

void sub_1B2C5D0A4(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

OZChannel3D *OZChannel3D::clone(OZChannel3D *this)
{
  OZChannel3D *v2;

  v2 = (OZChannel3D *)operator new();
  OZChannel3D::OZChannel3D(v2, this, 0);
  return v2;
}

void sub_1B2C5D104(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void OZChannel3D::copy(OZChannel3D *this, const OZChannelBase *a2, char a3)
{
  char *v6;

  OZChannel2D::copy(this, a2, a3);
  if (a2)
  else
    v6 = 0;
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)(v6 + 440), a3);
}

uint64_t OZChannel3D::setValue(OZChannel3D *this, const CMTime *a2, double a3, double a4, double a5)
{
  char *v8;

  v8 = (char *)this + 136;
  (*(void (**)(char *, const CMTime *, _QWORD, double))(*((_QWORD *)this + 17) + 712))((char *)this + 136, a2, 0, a3);
  (*(void (**)(char *, const CMTime *, _QWORD, double))(*((_QWORD *)v8 + 19) + 712))(v8 + 152, a2, 0, a4);
  return (*(uint64_t (**)(char *, const CMTime *, _QWORD, double))(*((_QWORD *)v8 + 38) + 712))(v8 + 304, a2, 0, a5);
}

const __CFString *OZChannel3D::getObjCWrapperName(OZChannel3D *this)
{
  return CFSTR("CHChannel3D");
}

void OZChannel3D::~OZChannel3D(OZChannel3D *this)
{
  *(_QWORD *)this = &off_1E65568E0;
  *((_QWORD *)this + 2) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel2D::~OZChannel2D(this);
}

{
  *(_QWORD *)this = &off_1E65568E0;
  *((_QWORD *)this + 2) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel2D::~OZChannel2D(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannel3D::~OZChannel3D(OZChannel3D *this)
{
  *(_QWORD *)this = &unk_1E6556C40;
  *((_QWORD *)this - 2) = &off_1E65568E0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 424));
  OZChannel2D::~OZChannel2D((OZChannel3D *)((char *)this - 16));
}

{
  OZChannel3D::~OZChannel3D((OZChannel3D *)((char *)this - 16));
}

void OZChannelBase::OZChannelBase(OZChannelBase *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  PCString *p_var4;

  this->var0 = (void **)&off_1E6556CB0;
  this->var1 = a2;
  this->var2 = (void **)&unk_1E6556F80;
  p_var4 = &this->var4;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var4);
  this->var3 = a5;
  this->var9 = 0;
  this->var6 = a4;
  this->var7 = a6 | 0x10u;
  if (a4)
    OZChannelFolder::push_back(a4, this);
  PCString::set(p_var4, a3);
  this->var5 = 0;
  *(_OWORD *)&this->var10 = 0u;
  *(_OWORD *)&this->var12 = 0u;
  (*((void (**)(OZChannelBase *))this->var0 + 16))(this);
}

void sub_1B2C5D390(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBase::registerParent(OZChannelBase *this, OZChannelFolder *a2)
{
  OZChannelFolder *var6;
  BOOL v5;
  uint64_t v6;

  var6 = this->var6;
  if (var6)
    v5 = var6 == a2;
  else
    v5 = 1;
  v6 = v5;
  if (!v5)
    OZChannelFolder::removeDescendant(var6, this);
  this->var6 = a2;
  return v6;
}

void OZChannelBase::OZChannelBase(OZChannelBase *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  PCString *v7;

  this->var0 = (void **)&off_1E6556CB0;
  this->var1 = a2;
  this->var2 = (void **)&unk_1E6556F80;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var4);
  this->var3 = a4;
  this->var9 = 0;
  this->var6 = 0;
  this->var7 = 16;
  PCString::set(v7, a3);
  this->var5 = 0;
  *(_OWORD *)&this->var10 = 0u;
  *(_OWORD *)&this->var12 = 0u;
  (*((void (**)(OZChannelBase *))this->var0 + 16))(this);
}

void sub_1B2C5D474(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZChannelBase::OZChannelBase(OZChannelBase *this, const OZChannelBase *a2)
{
  OZFactory *var1;
  PCString *v5;
  PCString *v6;

  var1 = a2->var1;
  this->var0 = (void **)&off_1E6556CB0;
  this->var1 = var1;
  this->var2 = (void **)&unk_1E6556F80;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var4);
  this->var3 = a2->var3;
  *(_OWORD *)&this->var7 = *(_OWORD *)&a2->var7;
  this->var9 = 0;
  this->var6 = 0;
  PCString::set(v5, &a2->var4);
  this->var5 = 0;
  if (a2->var5)
  {
    v6 = (PCString *)operator new();
    PCString::PCString(v6, a2->var5);
    this->var5 = v6;
  }
  this->var10 = 0;
  this->var11 = 0;
  this->var12 = 0;
  OZChannelBase::setLabelCtlrClassName(this, a2->var10);
  OZChannelBase::setParameterCtlrClassName(this, a2->var11);
  OZChannelBase::setInspectorCtlrClassName(this, a2->var12);
  this->var13 = a2->var13;
}

void sub_1B2C5D564(_Unwind_Exception *a1)
{
  PCString *v1;
  uint64_t v2;

  MEMORY[0x1B5E29170](v2, 0x60C4044C4A2DFLL);
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZChannelBase::setLabelCtlrClassName(OZChannelBase *this, __CFString *cf)
{
  __CFString *var10;

  var10 = this->var10;
  if (var10 != cf)
  {
    if (var10)
      CFRelease(var10);
    this->var10 = cf;
    if (cf)
      CFRetain(cf);
  }
}

void OZChannelBase::setParameterCtlrClassName(OZChannelBase *this, __CFString *cf)
{
  __CFString *var11;

  var11 = this->var11;
  if (var11 != cf)
  {
    if (var11)
      CFRelease(var11);
    this->var11 = cf;
    if (cf)
      CFRetain(cf);
  }
}

void OZChannelBase::setInspectorCtlrClassName(OZChannelBase *this, __CFString *cf)
{
  __CFString *var12;

  var12 = this->var12;
  if (var12 != cf)
  {
    if (var12)
      CFRelease(var12);
    this->var12 = cf;
    if (cf)
      CFRetain(cf);
  }
}

void OZChannelBase::OZChannelBase(OZChannelBase *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZFactory *var1;
  PCString *p_var4;
  PCString *v8;

  var1 = a2->var1;
  this->var0 = (void **)&off_1E6556CB0;
  this->var1 = var1;
  this->var2 = (void **)&unk_1E6556F80;
  p_var4 = &this->var4;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var4);
  this->var3 = a2->var3;
  *(_OWORD *)&this->var7 = *(_OWORD *)&a2->var7;
  this->var9 = 0;
  this->var6 = a3;
  if (a3)
    OZChannelFolder::push_back(a3, this);
  PCString::set(p_var4, &a2->var4);
  this->var5 = 0;
  if (a2->var5)
  {
    v8 = (PCString *)operator new();
    PCString::PCString(v8, a2->var5);
    this->var5 = v8;
  }
  this->var10 = 0;
  this->var11 = 0;
  this->var12 = 0;
  OZChannelBase::setLabelCtlrClassName(this, a2->var10);
  OZChannelBase::setParameterCtlrClassName(this, a2->var11);
  OZChannelBase::setInspectorCtlrClassName(this, a2->var12);
  this->var13 = a2->var13;
}

void sub_1B2C5D76C(_Unwind_Exception *a1)
{
  PCString *v1;
  uint64_t v2;

  MEMORY[0x1B5E29170](v2, 0x60C4044C4A2DFLL);
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZChannelBase::~OZChannelBase(OZChannelBase *this)
{
  this->var0 = (void **)&off_1E6556CB0;
  this->var2 = (void **)&unk_1E6556F80;
  OZChannelBase::nofityObjCWrapperWillDelete(this);
  OZChannelBase::setResetCallback(this, 0, 0, 0);
  OZChannelBase::cleanup(this);
  if (this->var6)
    this->var6 = 0;
  PCString::~PCString(&this->var4);
}

{
  OZChannelBase::~OZChannelBase(this);
  JUMPOUT(0x1B5E29170);
}

void OZChannelBase::setResetCallback(OZChannelBase *this, void (*a2)(OZChannelBase *, void *), uint64_t *a3, char a4)
{
  if (OZChannelBase::getResetCallbackDataTable(void)::once != -1)
    dispatch_once(&OZChannelBase::getResetCallbackDataTable(void)::once, &__block_literal_global_65);
  if (OZChannelBase::_pResetCallbackDataTable)
    OZChannelBase::ResetCallbackDataTable::setResetCallbackForChannel((os_unfair_lock_s *)OZChannelBase::_pResetCallbackDataTable, this, a2, a3, a4);
}

void OZChannelBase::cleanup(OZChannelBase *this)
{
  PCString *var5;
  __CFString *var10;
  __CFString *var11;
  __CFString *var12;

  var5 = this->var5;
  if (var5)
  {
    PCString::~PCString(var5);
    MEMORY[0x1B5E29170]();
    this->var5 = 0;
  }
  var10 = this->var10;
  if (var10)
    CFRelease(var10);
  var11 = this->var11;
  if (var11)
    CFRelease(var11);
  var12 = this->var12;
  if (var12)
    CFRelease(var12);
}

BOOL OZChannelBase::unregisterParent(OZChannelBase *this, OZChannelFolder *a2)
{
  _BOOL8 v2;

  v2 = this->var6 != 0;
  this->var6 = 0;
  return v2;
}

void `non-virtual thunk to'OZChannelBase::~OZChannelBase(OZChannelBase *this)
{
  OZChannelBase::~OZChannelBase((OZChannelBase *)((char *)this - 16));
}

{
  OZChannelBase::~OZChannelBase((OZChannelBase *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

OZChannelBase *OZChannelBase::finishInitializing(OZChannelBase *this)
{
  this->var7 |= 0x200000000uLL;
  return this;
}

OZChannelBase *OZChannelBase::setFlag(OZChannelBase *this, uint64_t a2, char a3)
{
  OZChannelBase *v4;

  v4 = this;
  if ((a2 & 0xFFFFFFFDECA4CF86) != 0 && (a3 & 1) == 0)
    this = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
  v4->var7 |= a2;
  return this;
}

OZChannelBase *OZChannelBase::updateIDGenerator(OZChannelBase *this)
{
  unsigned int v1;
  unsigned int v2;

  if (this <= 0xD09DC2FF)
  {
    v1 = atomic_load((unsigned int *)&sIDGenerator);
    while (v1 <= this)
    {
      v2 = v1;
      v1 = __ldaxr((unsigned int *)&sIDGenerator);
      if (v1 == v2)
      {
        if (!__stlxr((_DWORD)this + 1, (unsigned int *)&sIDGenerator))
          return this;
      }
      else
      {
        __clrex();
      }
    }
  }
  return this;
}

uint64_t OZChannelBase::getLastUsedUniqueID(OZChannelBase *this)
{
  return atomic_load((unsigned int *)&sIDGenerator);
}

uint64_t OZChannelBase::getNextUniqueID(OZChannelBase *this)
{
  uint64_t result;

  do
    result = __ldaxr((unsigned int *)&sIDGenerator);
  while (__stlxr(result + 1, (unsigned int *)&sIDGenerator));
  return result;
}

OZChannelBase *OZChannelBase::updateIDGenerator(OZChannelBase *this, const OZChannelFolder *a2)
{
  void **var0;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  OZChannelBase *v8;
  const OZChannelFolder *v9;

  var0 = this[1].var0;
  if (var0)
  {
    v3 = *var0;
    if (*var0 != var0[1])
    {
      do
      {
        v4 = *v3;
        this = (OZChannelBase *)(*(uint64_t (**)(_QWORD, const OZChannelFolder *))(*(_QWORD *)*v3 + 696))(*v3, a2);
        if ((this & 1) == 0)
        {
          v5 = *(_DWORD *)(v4 + 24);
          if (v5 <= 0xD09DC2FF)
          {
            v6 = atomic_load((unsigned int *)&sIDGenerator);
            while (v6 <= v5)
            {
              v7 = v6;
              v6 = __ldaxr((unsigned int *)&sIDGenerator);
              if (v6 == v7)
              {
                if (!__stlxr(v5 + 1, (unsigned int *)&sIDGenerator))
                  break;
              }
              else
              {
                __clrex();
              }
            }
          }
          if ((*(_BYTE *)(v4 + 57) & 0x10) != 0)
          {
            if (!v8)
              __cxa_bad_cast();
            this = (OZChannelBase *)OZChannelBase::updateIDGenerator(v8, v9);
          }
        }
        ++v3;
      }
      while (v3 != var0[1]);
    }
  }
  return this;
}

uint64_t OZChannelBase::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1) ^ 1;
}

uint64_t OZChannelBase::operator=(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2);
  return a1;
}

OZChannelBase *OZChannelBase::clone(OZChannelBase *this)
{
  OZChannelBase *v2;

  v2 = (OZChannelBase *)operator new();
  OZChannelBase::OZChannelBase(v2, this);
  return v2;
}

void sub_1B2C5DC20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40384E9B0FLL);
  _Unwind_Resume(a1);
}

void OZChannelBase::copy(OZChannelBase *this, const OZChannelBase *a2)
{
  unint64_t var8;
  PCString *var5;
  PCString *v6;
  PCString *v7;

  this->var3 = a2->var3;
  var8 = a2->var8;
  this->var7 = a2->var7 | 0x40;
  this->var8 = var8;
  PCString::set(&this->var4, &a2->var4);
  var5 = this->var5;
  v6 = a2->var5;
  if (var5)
  {
    if (v6)
    {
      PCString::set(var5, v6);
    }
    else
    {
      PCString::~PCString(var5);
      MEMORY[0x1B5E29170]();
      this->var5 = 0;
    }
  }
  else if (v6)
  {
    v7 = (PCString *)operator new();
    PCString::PCString(v7, a2->var5);
    this->var5 = v7;
  }
  OZChannelBase::setLabelCtlrClassName(this, a2->var10);
  OZChannelBase::setParameterCtlrClassName(this, a2->var11);
  OZChannelBase::setInspectorCtlrClassName(this, a2->var12);
}

void sub_1B2C5DD10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

BOOL OZChannelBase::compare(OZChannelBase *this, const OZChannelBase *a2)
{
  int v4;
  _BOOL8 result;

  v4 = PCString::caseInsensitiveCompare(&this->var4, &a2->var4);
  result = 0;
  if (this->var3 == a2->var3 && this->var7 == a2->var7 && v4 == 0)
    return 1;
  return result;
}

void OZChannelBase::getRangeName(OZChannelBase *this@<X0>, OZFactoryBase *a2@<X1>, PCURL *a3@<X8>)
{
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)this, a2);
  PCURL::PCURL(a3, CFSTR("Channel Over Range Range Name"));
}

void OZChannelBase::assign(OZChannelBase *this, const OZChannelBase *a2)
{
  this->var7 = a2->var7 & 0xFFFFFFFFFFFFFFBFLL | (((this->var7 >> 6) & 1) << 6);
  OZChannelBase::setLabelCtlrClassName(this, a2->var10);
  OZChannelBase::setParameterCtlrClassName(this, a2->var11);
  OZChannelBase::setInspectorCtlrClassName(this, a2->var12);
}

BOOL OZChannelBase::testFlag(OZChannelBase *this, uint64_t a2)
{
  return (this->var7 & a2) != 0;
}

OZChannelBase *OZChannelBase::resetFlag(OZChannelBase *this, uint64_t a2, char a3)
{
  OZChannelBase *v4;

  v4 = this;
  if ((a2 & 0xFFFFFFFDECA4CF86) != 0 && (a3 & 1) == 0)
    this = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
  v4->var7 &= ~a2;
  return this;
}

BOOL OZChannelBase::allowsAssignment(OZChannelBase *this, const OZChannelBase *a2)
{
  return a2 != this;
}

uint64_t OZChannelBase::allowsDrag(OZChannelBase *this, const OZChannelBase *a2)
{
  return 1;
}

void ___ZN13OZChannelBase25getResetCallbackDataTableEv_block_invoke()
{
  uint64_t v0;

  v0 = operator new();
  PCSingleton::PCSingleton((PCSingleton *)v0, 200);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)v0 = &off_1E6557050;
  *(_QWORD *)(v0 + 8) = v0 + 16;
  *(_DWORD *)(v0 + 32) = 0;
  OZChannelBase::_pResetCallbackDataTable = v0;
}

void sub_1B2C5DEF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

void OZChannelBase::ResetCallbackDataTable::~ResetCallbackDataTable(PCSpinLock *this)
{
  *(_QWORD *)&this->_lock._os_unfair_lock_opaque = &off_1E6557050;
  OZChannelBase::_pResetCallbackDataTable = 0;
  PCSpinLock::~PCSpinLock(this + 8);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&this[2], *(_QWORD **)&this[4]._lock._os_unfair_lock_opaque);
  PCSingleton::~PCSingleton((PCSingleton *)this);
}

{
  OZChannelBase::ResetCallbackDataTable::~ResetCallbackDataTable(this);
  JUMPOUT(0x1B5E29170);
}

char *OZChannelBase::ResetCallbackDataTable::getResetCallbackDataForChannel(os_unfair_lock_s *this, OZChannelBase *a2)
{
  os_unfair_lock_s *v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = this + 8;
  PCSpinLock::lock(this + 8);
  v7 = *(_QWORD **)&this[4]._os_unfair_lock_opaque;
  v6 = (char *)&this[4];
  v5 = v7;
  if (!v7)
    goto LABEL_14;
  v8 = v6;
  do
  {
    v9 = v5[4];
    v10 = v9 >= (unint64_t)a2;
    if (v9 >= (unint64_t)a2)
      v11 = v5;
    else
      v11 = v5 + 1;
    if (v10)
      v8 = (char *)v5;
    v5 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 == v6)
  {
LABEL_14:
    v14 = 0;
  }
  else
  {
    v12 = *((_QWORD *)v8 + 4);
    v13 = v8 + 40;
    if (v12 <= (unint64_t)a2)
      v14 = v13;
    else
      v14 = 0;
  }
  PCSpinLock::unlock(v4);
  return v14;
}

void OZChannelBase::ResetCallbackDataTable::setResetCallbackForChannel(os_unfair_lock_s *this, OZChannelBase *a2, void (*a3)(OZChannelBase *, void *), uint64_t *a4, char a5)
{
  os_unfair_lock_s *v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  uint64_t **v14;
  char *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t **v19;
  OZChannelBase *v20;
  OZChannelBase **v21;

  v20 = a2;
  v10 = this + 8;
  PCSpinLock::lock(this + 8);
  v13 = *(_QWORD **)&this[4]._os_unfair_lock_opaque;
  v12 = (char *)&this[4];
  v11 = v13;
  v14 = (uint64_t **)(v12 - 8);
  if (!v13)
    goto LABEL_12;
  v15 = v12;
  do
  {
    v16 = v11[4];
    v17 = v16 >= (unint64_t)a2;
    if (v16 >= (unint64_t)a2)
      v18 = v11;
    else
      v18 = v11 + 1;
    if (v17)
      v15 = (char *)v11;
    v11 = (_QWORD *)*v18;
  }
  while (*v18);
  if (v15 != v12 && *((_QWORD *)v15 + 4) <= (unint64_t)a2)
  {
    if (a3)
    {
      *((_QWORD *)v15 + 5) = a3;
      *((_QWORD *)v15 + 6) = a4;
      v15[56] = a5;
    }
    else
    {
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v14, (uint64_t *)v15);
      operator delete(v15);
    }
  }
  else
  {
LABEL_12:
    if (a3)
    {
      v21 = &v20;
      v19 = std::__tree<std::__value_type<OZChannelBase *,OZChannelBase::ResetCallbackDataTable::ResetCallbackData>,std::__map_value_compare<OZChannelBase *,std::__value_type<OZChannelBase *,OZChannelBase::ResetCallbackDataTable::ResetCallbackData>,std::less<OZChannelBase *>,true>,std::allocator<std::__value_type<OZChannelBase *,OZChannelBase::ResetCallbackDataTable::ResetCallbackData>>>::__emplace_unique_key_args<OZChannelBase *,std::piecewise_construct_t const&,std::tuple<OZChannelBase * const&>,std::tuple<>>(v14, (unint64_t *)&v20, (uint64_t)&std::piecewise_construct, (uint64_t **)&v21);
      v19[5] = (uint64_t *)a3;
      v19[6] = a4;
      *((_BYTE *)v19 + 56) = a5;
    }
  }
  PCSpinLock::unlock(v10);
}

void OZChannelBase::reset(OZChannelBase *this, uint64_t a2)
{
  char *ResetCallbackDataForChannel;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(OZChannelBase *, _QWORD);

  if (OZChannelBase::getResetCallbackDataTable(void)::once != -1)
    dispatch_once(&OZChannelBase::getResetCallbackDataTable(void)::once, &__block_literal_global_65);
  if (OZChannelBase::_pResetCallbackDataTable)
  {
    ResetCallbackDataForChannel = OZChannelBase::ResetCallbackDataTable::getResetCallbackDataForChannel((os_unfair_lock_s *)OZChannelBase::_pResetCallbackDataTable, this);
    if (ResetCallbackDataForChannel)
    {
      v11 = *(void (**)(OZChannelBase *, _QWORD))ResetCallbackDataForChannel;
      if (ResetCallbackDataForChannel[16])
        OZChannelBase::ensureObjCWrapperExists(this, v5, (uint64_t)v11, v6, v7, v8, v9, v10);
      v11(this, *((_QWORD *)ResetCallbackDataForChannel + 1));
    }
    else
    {
      (*((void (**)(OZChannelBase *, uint64_t))this->var0 + 35))(this, a2);
    }
  }
}

uint64_t OZChannelBase::getResetCallback(OZChannelBase *this, void (**a2)(OZChannelBase *, void *), void **a3, BOOL *a4)
{
  uint64_t result;

  if (OZChannelBase::getResetCallbackDataTable(void)::once != -1)
    dispatch_once(&OZChannelBase::getResetCallbackDataTable(void)::once, &__block_literal_global_65);
  if (!OZChannelBase::_pResetCallbackDataTable)
    return 0;
  result = (uint64_t)OZChannelBase::ResetCallbackDataTable::getResetCallbackDataForChannel((os_unfair_lock_s *)OZChannelBase::_pResetCallbackDataTable, this);
  if (result)
  {
    if (a2)
      *a2 = *(void (**)(OZChannelBase *, void *))result;
    if (a3)
      *a3 = *(void **)(result + 8);
    if (a4)
      *a4 = *(_BYTE *)(result + 16);
    return 1;
  }
  return result;
}

void OZChannelBase::getFullDisplayName(OZChannelBase *this@<X0>, PCString *a2@<X8>)
{
  OZChannelFolder *var6;
  const PCString *ChannelRootBase;
  uint64_t v6;
  PCString v7;
  PCString v8;

  PCString::PCString(a2, &this->var4);
  PCString::PCString(&v8, ".");
  PCSharedCount::PCSharedCount((PCSharedCount *)&v7);
  var6 = this->var6;
  ChannelRootBase = (const PCString *)OZChannelBase::getChannelRootBase(this);
  if (ChannelRootBase)
    PCString::set(&v7, ChannelRootBase + 4);
  if (var6)
  {
    if (!(*(unsigned int (**)(OZChannelFolder *))(*(_QWORD *)var6 + 120))(var6)
      || (PCString::insert(a2, 0, &v8),
          PCString::insert(a2, 0, (const PCString *)var6 + 4),
          (var6 = (OZChannelFolder *)*((_QWORD *)var6 + 6)) != 0))
    {
      if ((PCString::find(a2, &v7) & 0x80000000) != 0 && (*((_QWORD *)var6 + 7) & 0x4002000) != 0x2000)
      {
        v6 = *((_QWORD *)var6 + 6);
        if (v6)
        {
          if ((*(_QWORD *)(v6 + 56) & 0x4002000) != 0x2000)
          {
            PCString::insert(a2, 0, &v8);
            PCString::insert(a2, 0, (const PCString *)var6 + 4);
            if ((*(_BYTE *)(v6 + 59) & 4) != 0)
            {
              PCString::insert(a2, 0, &v8);
              PCString::insert(a2, 0, (const PCString *)(v6 + 32));
            }
          }
        }
      }
    }
  }
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
}

void sub_1B2C5E3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString *v10;

  PCString::~PCString(&a10);
  PCString::~PCString(v10);
  _Unwind_Resume(a1);
}

void *OZChannelBase::getChannelRootBase(OZChannelBase *this)
{
  if (!this)
    return 0;
  while ((this->var7 & 0x2000) == 0)
  {
    this = (OZChannelBase *)this->var6;
    if (!this)
      return 0;
  }
}

void OZChannelBase::setName(OZChannelBase *this, const PCString *a2, char a3)
{
  if ((a3 & 1) == 0)
    (*((void (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 1);
  PCString::set(&this->var4, a2);
}

void OZChannelBase::setInternalName(OZChannelBase *this, const PCString *a2)
{
  PCString *var5;
  PCString *v5;

  (*((void (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 1);
  var5 = this->var5;
  if (var5)
  {
    PCString::set(var5, a2);
  }
  else
  {
    v5 = (PCString *)operator new();
    PCString::PCString(v5, a2);
    this->var5 = v5;
  }
}

void sub_1B2C5E4E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

OZChannelBase *OZChannelBase::setID(OZChannelBase *this, unsigned int a2)
{
  this->var3 = a2;
  return this;
}

OZChannelBase *OZChannelBase::setFlags(OZChannelBase *this, unint64_t a2)
{
  OZChannelBase *v3;

  v3 = this;
  if ((a2 & 0xFFFFFFFDECA4CF86) != 0)
    this = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
  v3->var7 = a2;
  return this;
}

BOOL OZChannelBase::testDefaultFlag(OZChannelBase *this, uint64_t a2)
{
  return (this->var8 & a2) != 0;
}

uint64_t OZChannelBase::getObjectManipulator(OZChannelBase *this)
{
  void *v2;

  if (!this)
    return 0;
  while ((this->var7 & 0x2000) == 0)
  {
    this = (OZChannelBase *)this->var6;
    if (!this)
      return 0;
  }
  return (*(uint64_t (**)(void *))(*(_QWORD *)v2 + 840))(v2);
}

OZChannelRef *OZChannelBase::getRef(OZChannelBase *this, int a2)
{
  OZChannelBase *v3;
  OZChannelRef *v4;

  if (this && a2)
  {
    v3 = this;
    while ((v3->var7 & 0x2000) == 0)
    {
      v3 = (OZChannelBase *)v3->var6;
      if (!v3)
        goto LABEL_6;
    }
    v4 = (OZChannelRef *)operator new();
    OZChannelRef::OZChannelRef(v4, (OZChannelFolder *)this, (OZChannelFolder *)v3);
  }
  else
  {
LABEL_6:
    v4 = (OZChannelRef *)operator new();
    OZChannelRef::OZChannelRef(v4, (OZChannelFolder *)this, 0);
  }
  return v4;
}

void sub_1B2C5E654(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

OZChannelBase *OZChannelBase::getAncestorRootBase(OZChannelBase *this)
{
  OZChannelBase *v1;

  if (this)
  {
    v1 = this;
    this = 0;
    do
    {
      if ((v1->var7 & 0x2000) != 0)
      v1 = (OZChannelBase *)v1->var6;
    }
    while (v1);
  }
  return this;
}

__n128 OZChannelBase::getTimeOffset@<Q0>(OZChannelBase *this@<X0>, uint64_t a2@<X8>)
{
  OZChannelFolder *var6;
  __n128 result;
  uint64_t v4;

  var6 = this->var6;
  if (var6)
  {
    (*(void (**)(OZChannelFolder *))(*(_QWORD *)var6 + 320))(var6);
  }
  else
  {
    v4 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  }
  return result;
}

double OZChannelBase::globalToLocalTime@<D0>(OZChannelBase *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTime v5;
  CMTime v6;

  *(_OWORD *)&v6.value = *(_OWORD *)&this->var0;
  v6.epoch = (CMTimeEpoch)this->var2;
  v5 = *a2;
  return PC_CMTimeSaferSubtract(&v6, &v5, a3);
}

double OZChannelBase::localToGlobalTime@<D0>(OZChannelBase *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTime v5;
  CMTime v6;

  *(_OWORD *)&v6.value = *(_OWORD *)&this->var0;
  v6.epoch = (CMTimeEpoch)this->var2;
  v5 = *a2;
  return PC_CMTimeSaferAdd(&v6, &v5, a3);
}

__n128 OZChannelBase::globalToLocalTime@<Q0>(OZChannelBase *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  OZChannelTimeConverter *var13;
  __n128 result;
  OZChannelFolder *var6;

  var13 = this->var13;
  if (var13)
  {
    (*(void (**)(OZChannelTimeConverter *, OZChannelBase *, const CMTime *))(*(_QWORD *)var13 + 16))(var13, this, a2);
  }
  else
  {
    var6 = this->var6;
    if (var6)
    {
      (*(void (**)(OZChannelFolder *, const CMTime *))(*(_QWORD *)var6 + 328))(var6, a2);
    }
    else
    {
      result = *(__n128 *)&a2->value;
      *(_OWORD *)a3 = *(_OWORD *)&a2->value;
      *(_QWORD *)(a3 + 16) = a2->epoch;
    }
  }
  return result;
}

__n128 OZChannelBase::localToGlobalTime@<Q0>(OZChannelBase *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  OZChannelTimeConverter *var13;
  __n128 result;
  OZChannelFolder *var6;

  var13 = this->var13;
  if (var13)
  {
    (*(void (**)(OZChannelTimeConverter *, OZChannelBase *, const CMTime *))(*(_QWORD *)var13 + 24))(var13, this, a2);
  }
  else
  {
    var6 = this->var6;
    if (var6)
    {
      (*(void (**)(OZChannelFolder *, const CMTime *))(*(_QWORD *)var6 + 336))(var6, a2);
    }
    else
    {
      result = *(__n128 *)&a2->value;
      *(_OWORD *)a3 = *(_OWORD *)&a2->value;
      *(_QWORD *)(a3 + 16) = a2->epoch;
    }
  }
  return result;
}

CMTime *OZChannelBase::getFrameDuration@<X0>(OZChannelBase *this@<X0>, CMTime *a2@<X8>)
{
  void *ChannelRootBase;

  ChannelRootBase = OZChannelBase::getChannelRootBase(this);
  if (ChannelRootBase)
    return (CMTime *)(*(uint64_t (**)(void *))(*(_QWORD *)ChannelRootBase + 880))(ChannelRootBase);
  else
    return CMTimeMake(a2, 1, 30);
}

void OZChannelBase::keyframesWithChannelRef(OZChannelFolder *a1, _OWORD *a2, uint64_t **a3)
{
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  v5 = a2[1];
  v14[0] = *a2;
  v14[1] = v5;
  v14[2] = a2[2];
  (*(void (**)(OZChannelFolder *, _OWORD *, uint64_t *))(*(_QWORD *)a1 + 536))(a1, v14, &v15);
  v6 = v15;
  if (v16 != v15)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      OZChannelRef::OZChannelRef((OZChannelRef *)__p, *(OZChannelFolder **)(v6 + 32 * v7), a1);
      v9 = v15;
      v18 = __p;
      v10 = (char *)(std::__tree<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::__map_value_compare<OZChannelRef,std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::less<OZChannelRef>,true>,std::allocator<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>>>::__emplace_unique_key_args<OZChannelRef,std::piecewise_construct_t const&,std::tuple<OZChannelRef const&>,std::tuple<>>(a3, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v18)+ 7);
      v11 = v9 + 32 * v7;
      if (v10 != (char *)(v11 + 8))
        std::vector<_OZKeyframeInfo>::__assign_with_size[abi:ne180100]<_OZKeyframeInfo*,_OZKeyframeInfo*>(v10, *(char **)(v11 + 8), *(_QWORD *)(v11 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 5));
      if (v13 < 0)
        operator delete(__p[0]);
      v7 = v8;
      v6 = v15;
      ++v8;
    }
    while (v7 < (v16 - v15) >> 5);
  }
  __p[0] = &v15;
  std::vector<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B2C5E99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  __p = &a23;
  std::vector<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void OZChannelRef::~OZChannelRef(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t OZChannelBase::setKeyframesWithChannelRef(uint64_t result, CMTime *a2, uint64_t a3, _QWORD *a4, int a5)
{
  OZChannelBase *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int128 *v14;
  __int128 v15;
  int32_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  OZChannelBase *v24;
  double v25;
  __int128 *v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime time2;
  CMTime time1;

  v7 = (OZChannelBase *)result;
  v33 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
  v32 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  v8 = a4 + 1;
  v9 = (_QWORD *)*a4;
  if ((_QWORD *)*a4 != a4 + 1)
  {
    do
    {
      v11 = v9[7];
      if (v9[8] != v11)
      {
        v12 = 0;
        v13 = 1;
        do
        {
          v14 = (__int128 *)(v11 + 96 * v12);
          v15 = *v14;
          time1.epoch = *((_QWORD *)v14 + 2);
          *(_OWORD *)&time1.value = v15;
          time2 = v32;
          v16 = CMTimeCompare(&time1, &time2);
          v17 = v9[7];
          if (v16 < 0)
            v32 = *(CMTime *)(v17 + 96 * v12);
          v18 = (__int128 *)(v17 + 96 * v12);
          v19 = *v18;
          time1.epoch = *((_QWORD *)v18 + 2);
          *(_OWORD *)&time1.value = v19;
          time2 = v33;
          result = CMTimeCompare(&time1, &time2);
          v11 = v9[7];
          if ((int)result >= 1)
            v33 = *(CMTime *)(v11 + 96 * v12);
          v12 = v13;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v9[8] - v11) >> 5) > v13++);
      }
      v21 = (_QWORD *)v9[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v9[2];
          v23 = *v22 == (_QWORD)v9;
          v9 = v22;
        }
        while (!v23);
      }
      v9 = v22;
    }
    while (v22 != v8);
    v9 = (_QWORD *)*a4;
  }
  if (v9 != v8)
  {
    do
    {
      result = (uint64_t)OZChannelRef::getChannel((OZChannelRef *)(v9 + 4), v7);
      if (result)
      {
        if (result)
        {
          v24 = (OZChannelBase *)result;
          if (a5)
          {
            time1 = v33;
            time2 = v32;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v30);
            time1 = *a2;
            time2 = v30;
            v25 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v31);
            (*((void (**)(OZChannelBase *, CMTime *, CMTime *, double))v24->var0 + 85))(v24, a2, &v31, v25);
          }
          memset(&v31, 0, sizeof(v31));
          v26 = (__int128 *)v9[7];
          v27 = *v26;
          time1.epoch = *((_QWORD *)v26 + 2);
          *(_OWORD *)&time1.value = v27;
          time2 = v32;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v30);
          time1 = *a2;
          time2 = v30;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v31);
          result = OZChannel::setKeyframesWithInfo(v24, &v31, v9 + 7);
        }
      }
      v28 = (_QWORD *)v9[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v9[2];
          v23 = *v29 == (_QWORD)v9;
          v9 = v29;
        }
        while (!v23);
      }
      v9 = v29;
    }
    while (v29 != v8);
  }
  return result;
}

OZChannelBase *OZChannelRef::getChannel(OZChannelRef *this, OZChannelBase *a2)
{
  OZChannelRef *v3;
  int v4;
  OZChannelBase *result;
  int v6;
  int v7;

  if (!a2)
    return 0;
  v3 = this;
  if (*((char *)this + 23) < 0)
    v3 = *(OZChannelRef **)this;
  if (*(_BYTE *)v3 == 46)
  {
    v4 = *((unsigned __int8 *)v3 + 1);
    v3 = (OZChannelRef *)((char *)v3 + 1);
    if (v4 == 47)
      v3 = (OZChannelRef *)((char *)v3 + 1);
    result = a2;
  }
  else
  {
    result = 0;
  }
  while (1)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(unsigned __int8 *)v3;
      if (!*(_BYTE *)v3 || v7 == 47)
        break;
      v6 = (char)v7 + 10 * v6 - 48;
      v3 = (OZChannelRef *)((char *)v3 + 1);
    }
    if ((char)v7 == 47)
      v3 = (OZChannelRef *)((char *)v3 + 1);
    if (!result)
      break;
    if ((result->var7 & 0x1000) == 0)
      return 0;
    if (!result)
      return result;
    result = (OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)result, v6);
    if (!result)
      return result;
LABEL_22:
    if (!*(_BYTE *)v3)
      return result;
  }
  result = a2;
  if (a2->var3 == v6)
    goto LABEL_22;
  return 0;
}

void OZChannelBase::keypoints(OZChannelBase *this@<X0>, CMTimeRange *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void **a5@<X8>)
{
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  char *v62;
  char *v63;
  __int128 v64;
  int v65;
  CMTimeRange v66;
  CMTimeRange range;
  CMTime v68;
  CMTime start;
  CMTime time2;
  CMTime time1;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((*((unsigned int (**)(OZChannelBase *, CMTimeRange *, uint64_t))this->var0 + 71))(this, a2, a4))
  {
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), 1uLL);
    v12 = &v10[24 * v11];
    v13 = *(_OWORD *)&a2->start.value;
    *((_QWORD *)v10 + 2) = a2->start.epoch;
    *(_OWORD *)v10 = v13;
    v14 = v10 + 24;
    v16 = (char *)*a5;
    v15 = (char *)a5[1];
    if (v15 != *a5)
    {
      do
      {
        v17 = *(_OWORD *)(v15 - 24);
        *((_QWORD *)v10 - 1) = *((_QWORD *)v15 - 1);
        *(_OWORD *)(v10 - 24) = v17;
        v10 -= 24;
        v15 -= 24;
      }
      while (v15 != v16);
      v15 = (char *)*a5;
    }
    *a5 = v10;
    a5[1] = v14;
    a5[2] = v12;
    if (v15)
      operator delete(v15);
    a5[1] = v14;
  }
  start = a2->start;
  if (a3 && (*((unsigned int (**)(OZChannelBase *, CMTime *, uint64_t))this->var0 + 78))(this, &start, a4))
  {
    v18 = (char *)a5[2];
    v19 = (char *)a5[1];
    if (v19 >= v18)
    {
      v22 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (_BYTE *)*a5) >> 3);
      v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_67;
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)*a5) >> 3);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v23;
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v25);
      else
        v26 = 0;
      v27 = &v26[24 * v22];
      v28 = &v26[24 * v25];
      v29 = *(_OWORD *)&start.value;
      *((_QWORD *)v27 + 2) = start.epoch;
      *(_OWORD *)v27 = v29;
      v21 = v27 + 24;
      v31 = (char *)*a5;
      v30 = (char *)a5[1];
      if (v30 != *a5)
      {
        do
        {
          v32 = *(_OWORD *)(v30 - 24);
          *((_QWORD *)v27 - 1) = *((_QWORD *)v30 - 1);
          *(_OWORD *)(v27 - 24) = v32;
          v27 -= 24;
          v30 -= 24;
        }
        while (v30 != v31);
        v30 = (char *)*a5;
      }
      *a5 = v27;
      a5[1] = v21;
      a5[2] = v28;
      if (v30)
        operator delete(v30);
    }
    else
    {
      v20 = *(_OWORD *)&start.value;
      *((_QWORD *)v19 + 2) = start.epoch;
      *(_OWORD *)v19 = v20;
      v21 = v19 + 24;
    }
    a5[1] = v21;
  }
  v65 = a3;
  while ((*((unsigned int (**)(OZChannelBase *, CMTime *, uint64_t))this->var0 + 79))(this, &start, a4))
  {
    v33 = *(_OWORD *)&a2->start.epoch;
    *(_OWORD *)&range.start.value = *(_OWORD *)&a2->start.value;
    *(_OWORD *)&range.start.epoch = v33;
    *(_OWORD *)&range.duration.timescale = *(_OWORD *)&a2->duration.timescale;
    CMTimeRangeGetEnd(&v68, &range);
    time1 = start;
    time2 = v68;
    if (CMTimeCompare(&time1, &time2) > 0)
      break;
    v35 = (char *)a5[1];
    v34 = (char *)a5[2];
    if (v35 >= v34)
    {
      v38 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (_BYTE *)*a5) >> 3);
      v39 = v38 + 1;
      if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_67;
      v40 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (_BYTE *)*a5) >> 3);
      if (2 * v40 > v39)
        v39 = 2 * v40;
      if (v40 >= 0x555555555555555)
        v41 = 0xAAAAAAAAAAAAAAALL;
      else
        v41 = v39;
      if (v41)
        v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v41);
      else
        v42 = 0;
      v43 = &v42[24 * v38];
      v44 = *(_OWORD *)&start.value;
      *((_QWORD *)v43 + 2) = start.epoch;
      *(_OWORD *)v43 = v44;
      v46 = (char *)*a5;
      v45 = (char *)a5[1];
      v47 = v43;
      if (v45 != *a5)
      {
        do
        {
          v48 = *(_OWORD *)(v45 - 24);
          *((_QWORD *)v47 - 1) = *((_QWORD *)v45 - 1);
          *(_OWORD *)(v47 - 24) = v48;
          v47 -= 24;
          v45 -= 24;
        }
        while (v45 != v46);
        v45 = (char *)*a5;
      }
      v37 = v43 + 24;
      *a5 = v47;
      a5[1] = v43 + 24;
      a5[2] = &v42[24 * v41];
      if (v45)
        operator delete(v45);
    }
    else
    {
      v36 = *(_OWORD *)&start.value;
      *((_QWORD *)v35 + 2) = start.epoch;
      *(_OWORD *)v35 = v36;
      v37 = v35 + 24;
    }
    a5[1] = v37;
  }
  if (v65)
  {
    v49 = *(_OWORD *)&a2->start.epoch;
    *(_OWORD *)&v66.start.value = *(_OWORD *)&a2->start.value;
    *(_OWORD *)&v66.start.epoch = v49;
    *(_OWORD *)&v66.duration.timescale = *(_OWORD *)&a2->duration.timescale;
    CMTimeRangeGetEnd(&time1, &v66);
    start = time1;
    if ((*((unsigned int (**)(OZChannelBase *, CMTime *, uint64_t))this->var0 + 79))(this, &start, a4))
    {
      v51 = (char *)a5[1];
      v50 = (char *)a5[2];
      if (v51 < v50)
      {
        v52 = *(_OWORD *)&start.value;
        *((_QWORD *)v51 + 2) = start.epoch;
        *(_OWORD *)v51 = v52;
        v53 = v51 + 24;
LABEL_65:
        a5[1] = v53;
        return;
      }
      v54 = 0xAAAAAAAAAAAAAAABLL * ((v51 - (_BYTE *)*a5) >> 3);
      v55 = v54 + 1;
      if (v54 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v56 = 0xAAAAAAAAAAAAAAABLL * ((v50 - (_BYTE *)*a5) >> 3);
        if (2 * v56 > v55)
          v55 = 2 * v56;
        if (v56 >= 0x555555555555555)
          v57 = 0xAAAAAAAAAAAAAAALL;
        else
          v57 = v55;
        if (v57)
          v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v57);
        else
          v58 = 0;
        v59 = &v58[24 * v54];
        v60 = &v58[24 * v57];
        v61 = *(_OWORD *)&start.value;
        *((_QWORD *)v59 + 2) = start.epoch;
        *(_OWORD *)v59 = v61;
        v53 = v59 + 24;
        v63 = (char *)*a5;
        v62 = (char *)a5[1];
        if (v62 != *a5)
        {
          do
          {
            v64 = *(_OWORD *)(v62 - 24);
            *((_QWORD *)v59 - 1) = *((_QWORD *)v62 - 1);
            *(_OWORD *)(v59 - 24) = v64;
            v59 -= 24;
            v62 -= 24;
          }
          while (v62 != v63);
          v62 = (char *)*a5;
        }
        *a5 = v59;
        a5[1] = v53;
        a5[2] = v60;
        if (v62)
          operator delete(v62);
        goto LABEL_65;
      }
LABEL_67:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
  }
}

void sub_1B2C5F2D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelBase::visibleKeypoints(OZChannelBase *this, CMTimeRange *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = *(_OWORD *)&a2->start.epoch;
  v4[0] = *(_OWORD *)&a2->start.value;
  v4[1] = v2;
  v4[2] = *(_OWORD *)&a2->duration.timescale;
  return (*((uint64_t (**)(OZChannelBase *, _OWORD *))this->var0 + 65))(this, v4);
}

void OZChannelBase::offsetKeyframesInRange(OZChannelBase *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, const CMTime *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  CMTime *v35;
  CMTimeEpoch v36;
  uint64_t v37;
  CMTimeEpoch v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  double v48;
  CMTime v51;
  CMTime v52;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  void *__p;
  char *v57;
  char *v58;
  CMTime v59;
  CMTime time2;
  CMTime time1;

  v59 = *a4;
  __p = 0;
  v57 = 0;
  v58 = 0;
  if ((*((unsigned int (**)(OZChannelBase *, const CMTime *, _QWORD))this->var0 + 71))(this, a2, 0))
  {
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v58, 1uLL);
    v15 = &v13[24 * v14];
    v16 = *(_OWORD *)&a2->value;
    *((_QWORD *)v13 + 2) = a2->epoch;
    *(_OWORD *)v13 = v16;
    v17 = v13 + 24;
    v19 = (char *)__p;
    v18 = v57;
    if (v57 != __p)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v13 - 24) = v20;
        v13 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)__p;
    }
    __p = v13;
    v57 = v17;
    v58 = v15;
    if (v18)
      operator delete(v18);
    v57 = v17;
  }
  v55 = *a2;
  while ((*((unsigned int (**)(OZChannelBase *, CMTime *, _QWORD))this->var0 + 79))(this, &v55, 0))
  {
    time1 = v55;
    time2 = *a3;
    if (CMTimeCompare(&time1, &time2) > 0)
      break;
    v21 = v57;
    if (v57 >= v58)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v57 - (_BYTE *)__p) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((v58 - (_BYTE *)__p) >> 3) > v25)
        v25 = 0x5555555555555556 * ((v58 - (_BYTE *)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v58 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v58, v26);
      else
        v27 = 0;
      v28 = &v27[24 * v24];
      v29 = *(_OWORD *)&v55.value;
      *((_QWORD *)v28 + 2) = v55.epoch;
      *(_OWORD *)v28 = v29;
      v31 = (char *)__p;
      v30 = v57;
      v32 = v28;
      if (v57 != __p)
      {
        do
        {
          v33 = *(_OWORD *)(v30 - 24);
          *((_QWORD *)v32 - 1) = *((_QWORD *)v30 - 1);
          *(_OWORD *)(v32 - 24) = v33;
          v32 -= 24;
          v30 -= 24;
        }
        while (v30 != v31);
        v30 = (char *)__p;
      }
      v23 = v28 + 24;
      __p = v32;
      v57 = v28 + 24;
      v58 = &v27[24 * v26];
      if (v30)
        operator delete(v30);
    }
    else
    {
      v22 = *(_OWORD *)&v55.value;
      *((_QWORD *)v57 + 2) = v55.epoch;
      *(_OWORD *)v21 = v22;
      v23 = v21 + 24;
    }
    v57 = v23;
  }
  v34 = (char *)__p;
  if (__p == v57)
  {
    v37 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)a8 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a8 + 16) = *(_QWORD *)(v37 + 16);
    if (!v34)
      return;
    goto LABEL_50;
  }
  v35 = (CMTime *)MEMORY[0x1E0CA2E68];
  if ((_DWORD)a7)
  {
    time1 = v59;
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &time2) < 1)
    {
      time1 = v59;
      time2 = *v35;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        v38 = *((_QWORD *)__p + 2);
        *(_OWORD *)&v54.value = *(_OWORD *)__p;
        v54.epoch = v38;
        v53 = *(CMTime *)__p;
        if ((*((unsigned int (**)(OZChannelBase *, CMTime *, _QWORD))this->var0 + 78))(this, &v54, 0))
        {
          time1 = v53;
          time2 = v59;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v52);
          time1 = v54;
          time2 = *a5;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v51);
          time1 = v52;
          time2 = v51;
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            time1 = v54;
            time2 = *a5;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v51);
            time1 = v51;
            time2 = v53;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v52);
            goto LABEL_34;
          }
        }
      }
    }
    else
    {
      v36 = *((_QWORD *)v57 - 1);
      *(_OWORD *)&v54.value = *(_OWORD *)(v57 - 24);
      v54.epoch = v36;
      v53 = *(CMTime *)(v57 - 1);
      if ((*((unsigned int (**)(OZChannelBase *, CMTime *, _QWORD))this->var0 + 79))(this, &v54, 0))
      {
        time1 = v53;
        time2 = v59;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v52);
        time1 = v54;
        time2 = *a5;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v51);
        time1 = v52;
        time2 = v51;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          time1 = v54;
          time2 = *a5;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v51);
          time1 = v51;
          time2 = v53;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v52);
LABEL_34:
          v59 = v52;
        }
      }
    }
  }
  time1 = v59;
  time2 = *v35;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    v43 = -1431655765 * ((unint64_t)(v57 - (_BYTE *)__p) >> 3);
    if ((_DWORD)v43)
    {
      v44 = 0;
      v45 = 24 * v43;
      do
      {
        v46 = (char *)__p + v44;
        v47 = *(_OWORD *)((char *)__p + v44);
        time1.epoch = *(_QWORD *)((char *)__p + v44 + 16);
        *(_OWORD *)&time1.value = v47;
        time2 = v59;
        v48 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v54);
        (*((void (**)(CMTime *__return_ptr, OZChannelBase *, char *, CMTime *, uint64_t, uint64_t, double))this->var0
         + 77))(&time1, this, v46, &v54, a6, a7, v48);
        v44 += 24;
      }
      while (v45 != v44);
    }
  }
  else
  {
    time1 = v59;
    time2 = *v35;
    if (CMTimeCompare(&time1, &time2) >= 1 && (int)(-1431655765 * ((v57 - (_BYTE *)__p) >> 3)) >= 1)
    {
      v39 = -1431655765 * ((v57 - (_BYTE *)__p) >> 3) + 1;
      do
      {
        v40 = (char *)__p + 24 * (v39 - 2);
        v41 = *(_OWORD *)v40;
        time1.epoch = *((_QWORD *)v40 + 2);
        *(_OWORD *)&time1.value = v41;
        time2 = v59;
        v42 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v54);
        (*((void (**)(CMTime *__return_ptr, OZChannelBase *, char *, CMTime *, uint64_t, uint64_t, double))this->var0
         + 77))(&time1, this, v40, &v54, a6, a7, v42);
        --v39;
      }
      while (v39 > 1);
    }
  }
  *(CMTime *)a8 = v59;
  v34 = (char *)__p;
  if (__p)
  {
LABEL_50:
    v57 = v34;
    operator delete(v34);
  }
}

void sub_1B2C5FA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

OZChannelBase *OZChannelBase::setNameUnset(OZChannelBase *this, int a2)
{
  uint64_t v2;

  v2 = 64;
  if (!a2)
    v2 = 0;
  this->var7 = this->var7 & 0xFFFFFFFFFFFFFFBFLL | v2;
  return this;
}

uint64_t OZChannelBase::lock(OZChannelBase *this, int a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
  v5 = 4;
  if (!a2)
    v5 = 0;
  this->var7 = this->var7 & 0xFFFFFFFFFFFFFFFBLL | v5;
  return result;
}

uint64_t OZChannelBase::isLocked(OZChannelBase *this, char a2)
{
  char v2;
  unint64_t var7;
  uint64_t v4;

  v2 = a2 ^ 1;
  do
  {
    var7 = this->var7;
    v4 = (var7 >> 2) & 1;
    if ((v2 & 1) != 0)
      break;
    if ((var7 & 4) != 0)
      break;
    v2 = 0;
    v4 = 0;
    this = (OZChannelBase *)this->var6;
  }
  while (this);
  return v4;
}

unint64_t OZChannelBase::isAnyAncestorLocked(OZChannelBase *this)
{
  OZChannelFolder *var6;
  unint64_t v2;
  unint64_t result;

  var6 = this->var6;
  if (!var6)
    return 0;
  do
  {
    v2 = *((_QWORD *)var6 + 7);
    result = (v2 >> 2) & 1;
    if ((v2 & 4) != 0)
      break;
    var6 = (OZChannelFolder *)*((_QWORD *)var6 + 6);
  }
  while (var6);
  return result;
}

OZChannelBase *OZChannelBase::enable(OZChannelBase *this, int a2, char a3)
{
  OZChannelBase *v3;
  unint64_t v4;

  v3 = this;
  if (a2)
  {
    if ((a3 & 1) == 0)
      this = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
    v4 = v3->var7 & 0xFFFFFFFFFFFF7FFFLL;
  }
  else
  {
    if ((a3 & 1) == 0)
      this = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
    v4 = v3->var7 | 0x8000;
  }
  v3->var7 = v4;
  return this;
}

unint64_t OZChannelBase::isEnabled(OZChannelBase *this, int a2, int a3)
{
  OZChannelBase *v4;
  void *ChannelRootBase;
  OZChannelBase *v6;
  unint64_t result;
  unint64_t var7;

  v4 = this;
  if (a3
    && (this->var7 & 0x80000) != 0
    && (ChannelRootBase = OZChannelBase::getChannelRootBase(this)) != 0
    && (*(unsigned int (**)(void *))(*(_QWORD *)ChannelRootBase + 792))(ChannelRootBase))
  {
    v6 = v4;
    while (1)
    {
      v6 = (OZChannelBase *)v6->var6;
      if (!v6)
        break;
      if ((v6->var7 & 0x40000) != 0)
        return (v4->var7 & 0x8000) == 0;
    }
    var7 = v4->var7;
    if ((var7 & 0x40000) != 0)
      return 1;
    else
      return (var7 >> 20) & 1;
  }
  else
  {
    result = (v4->var7 & 0x8000) == 0;
    if ((v4->var7 & 0x8000) == 0 && a2)
    {
      do
      {
        v4 = (OZChannelBase *)v4->var6;
        result = v4 == 0;
      }
      while (v4 && (v4->var7 & 0x8000) == 0);
    }
  }
  return result;
}

uint64_t OZChannelBase::isDisabled(OZChannelBase *this, int a2)
{
  OZChannelBase *v2;
  unint64_t var7;
  uint64_t result;

  v2 = this;
  var7 = this->var7;
  result = (var7 >> 15) & 1;
  if ((var7 & 0x8000) == 0 && a2)
  {
    do
    {
      v2 = (OZChannelBase *)v2->var6;
      result = v2 != 0;
    }
    while (v2 && (v2->var7 & 0x8000) == 0);
  }
  return result;
}

OZChannelBase *OZChannelBase::solo(OZChannelBase *this, int a2)
{
  OZChannelBase *v3;
  uint64_t v4;

  if ((this->var7 & 0x80000) != 0)
  {
    v3 = this;
    this = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
    v4 = 0x40000;
    if (!a2)
      v4 = 0;
    v3->var7 = v3->var7 & 0xFFFFFFFFFFFBFFFFLL | v4;
  }
  return this;
}

OZChannelBase *OZChannelBase::setChildSolo(OZChannelBase *this, char a2)
{
  unint64_t var7;

  do
  {
    if ((a2 & 1) == 0)
    {
      var7 = this->var7;
      if ((var7 & 0x80000) != 0)
        this->var7 = var7 | 0x100000;
    }
    a2 = 0;
    this = (OZChannelBase *)this->var6;
  }
  while (this);
  return this;
}

uint64_t OZChannelBase::isSolo(OZChannelBase *this)
{
  return (BYTE2(this->var7) >> 2) & 1;
}

OZChannelBase *OZChannelBase::saveStateAsDefault(OZChannelBase *this)
{
  this->var8 = this->var7 & 0xFFFFFFFDECA4CF86;
  return this;
}

BOOL OZChannelBase::isDescendantOf(OZChannelBase *this, OZChannelBase *a2)
{
  do
    this = (OZChannelBase *)this->var6;
  while (this != a2 && this != 0);
  return this != 0;
}

OZChannelBase *OZChannelBase::willBeModified(OZChannelBase *this, uint64_t a2)
{
  OZChannelBase *v3;
  void *v4;

  if (this)
  {
    v3 = this;
    while ((this->var7 & 0x2000) == 0)
    {
      this = (OZChannelBase *)this->var6;
      if (!this)
        return this;
    }
    return (OZChannelBase *)(*(uint64_t (**)(void *, OZChannelBase *, uint64_t))(*(_QWORD *)v4 + 776))(v4, v3, a2);
  }
  return this;
}

void *OZChannelBase::hasBeenModified(OZChannelBase *this, BOOL *a2)
{
  void *result;

  result = OZChannelBase::getChannelRootBase(this);
  if (result)
    return (void *)(*(uint64_t (**)(void *, OZChannelBase *, BOOL *))(*(_QWORD *)result + 784))(result, this, a2);
  return result;
}

void *OZChannelBase::addToUndo(OZChannelBase *this, const PCString *a2)
{
  void *result;

  result = OZChannelBase::getChannelRootBase(this);
  if (result)
    return (void *)(*(uint64_t (**)(void *, OZChannelBase *, const PCString *))(*(_QWORD *)result + 752))(result, this, a2);
  return result;
}

__CFString *OZChannelBase::getLabelCtlrClassName(OZChannelBase *this)
{
  return this->var10;
}

__CFString *OZChannelBase::getParameterCtlrClassName(OZChannelBase *this)
{
  return this->var11;
}

__CFString *OZChannelBase::getInspectorCtlrClassName(OZChannelBase *this)
{
  return this->var12;
}

uint64_t *OZChannelBase::markFactoriesForSerialization(OZChannelBase *this, PCSerializerWriteStream *a2)
{
  return OZFactory::setNeedsSaving(this->var1, (const OZFactory *)1);
}

uint64_t *`non-virtual thunk to'OZChannelBase::markFactoriesForSerialization(OZChannelBase *this, PCSerializerWriteStream *a2)
{
  return OZFactory::setNeedsSaving((OZFactory *)this[-1].var13, (const OZFactory *)1);
}

uint64_t OZChannelBase::writeFlags(uint64_t result, TXSequenceChannels *a2, int a3)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(result + 56);
  if (v3)
  {
    result = (*(uint64_t (**)(TXSequenceChannels *))(*(_QWORD *)a2 + 232))(a2);
    v6 = -65;
    if ((_DWORD)result)
      v6 = 0xFFFFFFFDECA4CF86;
    v7 = v6 & v3;
    if (v7)
    {
      if (a3)
      {
        TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelBaseScope);
        (*(void (**)(TXSequenceChannels *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 112);
        (*(void (**)(TXSequenceChannels *, unint64_t))(*(_QWORD *)a2 + 72))(a2, v7);
        (*(void (**)(TXSequenceChannels *))(*(_QWORD *)a2 + 24))(a2);
        return PCSerializerWriteStream::popScope((uint64_t)a2);
      }
      else
      {
        return (*(uint64_t (**)(TXSequenceChannels *, uint64_t, unint64_t))(*(_QWORD *)a2 + 160))(a2, 112, v7);
      }
    }
  }
  return result;
}

uint64_t OZChannelBase::writeHeader(OZChannelBase *this, OZFactory *a2, int a3)
{
  char v3;
  int v6;
  uint64_t v7;
  unint64_t var7;
  int v9;
  unint64_t v10;
  const OZFactory *v11;
  uint64_t v12;

  v3 = a3;
  if (a3 && OZFactory::fileRefID(this->var1, a2))
    v6 = (*(uint64_t (**)(OZFactory *))(*(_QWORD *)a2 + 232))(a2) ^ 1;
  else
    v6 = 0;
  TXSequenceChannels::pushChannelIntoChannelList((TXSequenceChannels *)a2, (OZChannelBase *)&OZChannelBaseScope);
  (*(void (**)(OZFactory *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 110);
  v7 = 216;
  if (v6)
    v7 = 200;
  (*(void (**)(OZFactory *, uint64_t, PCString *))(*(_QWORD *)a2 + v7))(a2, 110, &this->var4);
  if (!(*(unsigned int (**)(OZFactory *))(*(_QWORD *)a2 + 232))(a2) || (this->var7 & 0x80) == 0)
    (*(void (**)(OZFactory *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, this->var3);
  if ((v3 & 1) == 0)
  {
    var7 = this->var7;
    if (var7)
    {
      v9 = (*(uint64_t (**)(OZFactory *))(*(_QWORD *)a2 + 232))(a2);
      v10 = -65;
      if (v9)
        v10 = 0xFFFFFFFDECA4CF86;
      if ((v10 & var7) != 0)
        (*(void (**)(OZFactory *, uint64_t, unint64_t))(*(_QWORD *)a2 + 160))(a2, 112, v10 & var7);
    }
  }
  if (v6 && ((*(uint64_t (**)(OZFactory *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    v12 = OZFactory::fileRefID(this->var1, v11);
    (*(void (**)(OZFactory *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v12);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZChannelBase::writeHeader(OZChannelBase *this, OZFactory *a2, int a3)
{
  return OZChannelBase::writeHeader((OZChannelBase *)((char *)this - 16), a2, a3);
}

OZChannelBase *OZChannelBase::writeBody(OZChannelBase *this, PCSerializerWriteStream *a2, int a3)
{
  if (a3)
    return (OZChannelBase *)OZChannelBase::writeFlags((uint64_t)this, a2, 1);
  return this;
}

OZChannelBase *`non-virtual thunk to'OZChannelBase::writeBody(OZChannelBase *this, PCSerializerWriteStream *a2, int a3)
{
  if (a3)
    return (OZChannelBase *)OZChannelBase::writeFlags((uint64_t)&this[-1].var12, a2, 1);
  return this;
}

uint64_t OZChannelBase::parseBegin(OZChannelBase *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelBaseReadScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelBase::parseBegin(OZChannelBase *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelBaseReadScope);
  return 1;
}

uint64_t OZChannelBase::parseEnd(OZChannelBase *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelBase::parseEnd(OZChannelBase *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelBase::parseElement(OZChannelBase *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  unint64_t v4;
  unint64_t v6;

  if (*((_DWORD *)a3 + 2) == 112)
  {
    v6 = 0;
    if ((*(unsigned int (**)(PCStreamElement *, unint64_t *))(*(_QWORD *)a3 + 48))(a3, &v6))
    {
      v4 = v6;
      if ((v6 & 0xFFFFFFFDECA4CF86) != 0)
        (*((void (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
      this->var7 = v4;
    }
  }
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelBase::parseElement(OZChannelBase *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelBase::parseElement((OZChannelBase *)((char *)this - 16), a2, a3);
  return 1;
}

void OZChannelBase::getHash(OZChannelBase *this)
{
  _QWORD *v1;
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  int8x8_t v5[521];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v5[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v5);
  v4 = v1[2];
  v1 += 2;
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD))(v4 + 16))(v1, v5, 0);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD, uint64_t, uint64_t))(*v1 + 24))(v1, v5, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(_QWORD *)v5 + 24))(v5);
  *v3 = *(_OWORD *)PCHashWriteStream::getHash(v5)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v5);
}

void sub_1B2C60304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t ChannelParser::parseBegin(ChannelParser *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZMLScope);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 464))(*((_QWORD *)this + 1), 1);
  return 1;
}

uint64_t ChannelParser::parseElement(ChannelParser *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  uint64_t v7;
  PCSerializer *v8;
  char *CStr;
  int v10;
  OZFactories *AttributeAsUUID;
  unsigned int *v12;
  uint64_t Instance;
  OZFactories *Factory;
  OZFactory *v15;
  OZFactories *v16;
  uint64_t v18;
  uint64_t v19;
  PCSharedCount v20;
  int v21;
  unsigned int v22;
  PCSharedCount v23;

  PCSharedCount::PCSharedCount(&v23);
  v22 = 0;
  v21 = 0;
  v6 = *((_DWORD *)a3 + 2);
  if ((v6 - 90) < 2)
  {
    PCSharedCount::PCSharedCount(&v20);
    v19 = 0;
    PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 116, (uint64_t)&v19);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 116, (uint64_t)&v20);
    v18 = 0;
    CStr = PCString::createCStr((PCString *)&v20);
    sscanf(CStr, "%d.%d", (char *)&v18 + 4, &v18);
    v10 = v18;
    *((_DWORD *)a2 + 26) = HIDWORD(v18);
    *((_DWORD *)a2 + 27) = v10;
    free(CStr);
    PCString::~PCString((PCString *)&v20);
  }
  else if (v6 == 92)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v22);
    AttributeAsUUID = (OZFactories *)PCSerializerReadStream::getAttributeAsUUID((uint64_t)a2, (uint64_t)a3, 117);
    v12 = (unsigned int *)AttributeAsUUID;
    if (AttributeAsUUID)
    {
      Instance = OZFactories::getInstance(AttributeAsUUID);
      Factory = (OZFactories *)OZFactories::findFactory(Instance, v12);
      v15 = (OZFactory *)Factory;
      if (Factory)
      {
        v16 = (OZFactories *)OZFactories::getInstance(Factory);
        OZFactories::setFactoryLoadID(v16, v22, v15);
      }
      MEMORY[0x1B5E29170](v12, 0x1000C40451B5BE8);
    }
  }
  else if (v6 == 110)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)&v21);
    LODWORD(v20.var0) = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v20);
    v7 = *((_QWORD *)this + 1);
    *(_DWORD *)(v7 + 24) = v20.var0;
    *((_BYTE *)this + 16) = 1;
    if (v7)
      v8 = (PCSerializer *)(v7 + 16);
    else
      v8 = 0;
    PCSerializerReadStream::pushHandler(a2, v8);
  }
  PCString::~PCString((PCString *)&v23);
  return 1;
}

void sub_1B2C60510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
  uint64_t v14;

  PCString::~PCString(&a14);
  PCString::~PCString((PCString *)(v14 - 40));
  _Unwind_Resume(a1);
}

CFDataRef OZChannelBase::createChannelState(OZChannelBase *this, uint64_t a2, uint64_t a3)
{
  OZFactories *v6;
  OZFactories *Instance;
  void **var2;
  CFDataRef v9;
  const UInt8 *v11[6];
  void (**v12)(PCXMLWriteStream *__hidden);
  void *__p;
  void *v14;
  _QWORD v15[136];
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  PCBufferWriteStream::PCBufferWriteStream((PCBufferWriteStream *)v11, 0x8000, 0x8000);
  PCXMLWriteStream::PCXMLWriteStream((PCXMLWriteStream *)&v12, (PCStream *)v11, 5u, 0xDu);
  v6 = (OZFactories *)(*((uint64_t (**)(OZChannelBase *, void (***)(PCXMLWriteStream *__hidden), _QWORD))this->var0
                       + 52))(this, &v12, 0);
  Instance = (OZFactories *)OZFactories::getInstance(v6);
  OZFactories::saveFactories(Instance, (PCSerializerWriteStream *)&v12);
  var2 = this->var2;
  this = (OZChannelBase *)((char *)this + 16);
  ((void (*)(OZChannelBase *, void (***)(PCXMLWriteStream *__hidden), uint64_t))var2[2])(this, &v12, 1);
  (*((void (**)(OZChannelBase *, void (***)(PCXMLWriteStream *__hidden), uint64_t, uint64_t, uint64_t))this->var0
   + 3))(this, &v12, 1, a2, a3);
  v12[3]((PCXMLWriteStream *)&v12);
  PCXMLWriteStream::close((PCXMLWriteStream *)&v12);
  v9 = PCBufferWriteStream::copyData(v11);
  v12 = &off_1E65132D0;
  PCURL::~PCURL((PCURL *)v16);
  std::deque<PCHash128>::~deque[abi:ne180100](v15);
  v12 = (void (**)(PCXMLWriteStream *__hidden))&unk_1E6512FB0;
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  PCBufferWriteStream::~PCBufferWriteStream((PCBufferWriteStream *)v11);
  return v9;
}

void sub_1B2C60694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  PCXMLWriteStream::~PCXMLWriteStream((PCXMLWriteStream *)&a15);
  PCBufferWriteStream::~PCBufferWriteStream((PCBufferWriteStream *)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBase::configureWithState(OZChannelBase *this, const __CFData *a2)
{
  unsigned int v2;
  uint64_t v3;
  _BYTE v5[216];
  _QWORD v6[2];
  char v7;

  v6[0] = &off_1E6557088;
  v6[1] = this;
  v7 = 0;
  PCXMLReadStream::PCXMLReadStream((PCXMLReadStream *)v5, a2);
  PCSerializerReadStream::pushHandler((PCSerializerReadStream *)v5, (PCSerializer *)v6);
  v2 = PCXMLReadStream::parse((PCXMLReadStream *)v5);
  if (v7)
    v3 = v2;
  else
    v3 = 0;
  PCXMLReadStream::~PCXMLReadStream((PCXMLReadStream *)v5);
  return v3;
}

void sub_1B2C60728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCXMLReadStream::~PCXMLReadStream((PCXMLReadStream *)&a9);
  _Unwind_Resume(a1);
}

void OZChannelRef::OZChannelRef(OZChannelRef *this, OZChannelFolder *a2, OZChannelFolder *a3)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string v12;
  char __str[32];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  memset(&v12, 0, sizeof(v12));
  MEMORY[0x1B5E28D80]();
  if (a2 != a3)
  {
    while (1)
    {
      snprintf(__str, 0x20uLL, "%u", *((_DWORD *)a2 + 6));
      if (*((char *)this + 23) < 0)
        break;
      if (*((_BYTE *)this + 23))
        goto LABEL_4;
LABEL_5:
      MEMORY[0x1B5E28D80](&v12, __str);
      v6 = *((char *)this + 23);
      if (v6 >= 0)
        v7 = (const std::string::value_type *)this;
      else
        v7 = *(const std::string::value_type **)this;
      if (v6 >= 0)
        v8 = *((unsigned __int8 *)this + 23);
      else
        v8 = *((_QWORD *)this + 1);
      std::string::append(&v12, v7, v8);
      std::string::operator=((std::string *)this, &v12);
      a2 = (OZChannelFolder *)*((_QWORD *)a2 + 6);
      if (a2 == a3)
      {
        if (a3)
        {
          strcpy(__str, ".");
          if (*((char *)this + 23) < 0)
          {
            if (*((_QWORD *)this + 1))
LABEL_18:
              *(_WORD *)&__str[strlen(__str)] = 47;
          }
          else if (*((_BYTE *)this + 23))
          {
            goto LABEL_18;
          }
LABEL_24:
          MEMORY[0x1B5E28D80](&v12, __str);
          v9 = *((char *)this + 23);
          if (v9 >= 0)
            v10 = (const std::string::value_type *)this;
          else
            v10 = *(const std::string::value_type **)this;
          if (v9 >= 0)
            v11 = *((unsigned __int8 *)this + 23);
          else
            v11 = *((_QWORD *)this + 1);
          std::string::append(&v12, v10, v11);
          std::string::operator=((std::string *)this, &v12);
        }
        goto LABEL_31;
      }
    }
    if (!*((_QWORD *)this + 1))
      goto LABEL_5;
LABEL_4:
    *(_WORD *)&__str[strlen(__str)] = 47;
    goto LABEL_5;
  }
  if (a3)
  {
    snprintf(__str, 0x20uLL, "%u", *((_DWORD *)a2 + 6));
    if (*((char *)this + 23) < 0)
    {
      if (!*((_QWORD *)this + 1))
        goto LABEL_24;
    }
    else if (!*((_BYTE *)this + 23))
    {
      goto LABEL_24;
    }
    *(_WORD *)&__str[strlen(__str)] = 47;
    goto LABEL_24;
  }
LABEL_31:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1B2C6093C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(exception_object);
}

void OZChannelRef::OZChannelRef(OZChannelRef *this, PCString *a2)
{
  char *CStr;

  CStr = PCString::createCStr(a2);
  std::string::basic_string[abi:ne180100]<0>(this, CStr);
  free(CStr);
}

void OZChannelRef::OZChannelRef(OZChannelRef *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
}

std::string *OZChannelRef::operator=(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1, a2);
  return a1;
}

void OZChannelRef::OZChannelRef(std::string *this, const OZChannelRef *a2)
{
  __int128 v2;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v2 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
  }
}

uint64_t OZChannelRef::getID(OZChannelRef *this)
{
  OZChannelRef *v1;
  uint64_t v2;
  unint64_t i;
  unsigned int v4;
  unint64_t v5;

  if ((*((char *)this + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 23))
      return 0;
    v1 = this;
    LODWORD(v2) = *((unsigned __int8 *)this + 23);
LABEL_6:
    LODWORD(i) = v2 + 1;
    while (1)
    {
      v4 = i - 2;
      if ((int)i - 2 < 0)
        break;
      LODWORD(i) = i - 1;
      if ((*((_BYTE *)v1 + v4) & 0xFE) == 0x2E)
      {
        v2 = 0;
        for (i = (int)i; ; ++i)
        {
          v5 = *((unsigned __int8 *)this + 23);
          if ((*((_BYTE *)this + 23) & 0x80) != 0)
            v5 = *((_QWORD *)this + 1);
          if (v5 <= i)
            break;
          v2 = (*((char *)v1 + i) + 10 * v2 - 48);
        }
        return v2;
      }
    }
    return 0;
  }
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v1 = *(OZChannelRef **)this;
    goto LABEL_6;
  }
  return v2;
}

void OZChannelRef::setID(std::string *this, int a2)
{
  std::string::size_type size;
  std::string *v4;
  int v5;
  int v6;
  std::string v7;
  char __str[11];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    if (!size)
      return;
    v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    LODWORD(size) = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
      return;
    v4 = this;
  }
  v5 = size + 1;
  while (1)
  {
    v6 = v5 - 2;
    if (v5 - 2 < 0)
      break;
    --v5;
    if ((v4->__r_.__value_.__s.__data_[v6] & 0xFE) == 0x2E)
    {
      memset(&v7, 0, sizeof(v7));
      snprintf(__str, 0xBuLL, "%u", a2);
      std::string::append(&v7, this, 0, v5);
      std::string::append(&v7, __str);
      std::string::operator=(this, &v7);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v7.__r_.__value_.__l.__data_);
      return;
    }
  }
}

void sub_1B2C60BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL OZChannelRef::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL OZChannelRef::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

BOOL OZChannelRef::operator<(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

OZChannelRef **OZChannelRef::getMotionOnlyPath(OZChannelRef **this)
{
  OZChannelRef **v1;
  int v2;
  OZChannelRef **i;
  int v4;

  if (*((char *)this + 23) < 0)
    this = (OZChannelRef **)*this;
  v1 = this;
  while (1)
  {
    v2 = 0;
    for (i = (OZChannelRef **)((char *)v1 + 1); ; i = (OZChannelRef **)((char *)i + 1))
    {
      v4 = *((unsigned __int8 *)i - 1);
      if (!*((_BYTE *)i - 1) || v4 == 47)
        break;
      v2 = (char)v4 + 10 * v2 - 48;
    }
    if (!(_BYTE)v4 || v2 == 9999)
      break;
    v1 = i;
    if (!*(_BYTE *)i)
      return this;
  }
  return v1;
}

void ChannelParser::~ChannelParser(ChannelParser *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t **std::__tree<std::__value_type<OZChannelBase *,OZChannelBase::ResetCallbackDataTable::ResetCallbackData>,std::__map_value_compare<OZChannelBase *,std::__value_type<OZChannelBase *,OZChannelBase::ResetCallbackDataTable::ResetCallbackData>,std::less<OZChannelBase *>,true>,std::allocator<std::__value_type<OZChannelBase *,OZChannelBase::ResetCallbackDataTable::ResetCallbackData>>>::__emplace_unique_key_args<OZChannelBase *,std::piecewise_construct_t const&,std::tuple<OZChannelBase * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v12 = **a4;
    v11[56] = 0;
    *((_QWORD *)v11 + 4) = v12;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::vector<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t *std::__tree<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::__map_value_compare<OZChannelRef,std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::less<OZChannelRef>,true>,std::allocator<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>>>::__emplace_unique_key_args<OZChannelRef,std::piecewise_construct_t const&,std::tuple<OZChannelRef const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::__map_value_compare<OZChannelRef,std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::less<OZChannelRef>,true>,std::allocator<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>>>::__find_equal<OZChannelRef>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::__map_value_compare<OZChannelRef,std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::less<OZChannelRef>,true>,std::allocator<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<OZChannelRef const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::__map_value_compare<OZChannelRef,std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::less<OZChannelRef>,true>,std::allocator<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>>>::__find_equal<OZChannelRef>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!OZChannelRef::operator<(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!OZChannelRef::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::__map_value_compare<OZChannelRef,std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::less<OZChannelRef>,true>,std::allocator<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<OZChannelRef const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B2C610D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<OZChannelRef const,std::vector<_OZKeyframeInfo>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<OZChannelRef const,std::vector<_OZKeyframeInfo>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

char *std::vector<_OZKeyframeInfo>::__assign_with_size[abi:ne180100]<_OZKeyframeInfo*,_OZKeyframeInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 5) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x155555555555555)
      v12 = 0x2AAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<_OZKeyframeInfo>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 5) >= a4)
    goto LABEL_16;
  v16 = &__src[32 * ((v15 - v9) >> 5)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

void sub_1B2C6137C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

uint64_t DeleteDescendants(OZChannelFolder *a1)
{
  uint64_t result;
  OZChannelBase **v3;
  OZChannelBase ***v4;

  result = (*(uint64_t (**)(OZChannelFolder *))(*(_QWORD *)a1 + 120))(a1);
  if ((result & 1) == 0)
  {
    if (!result)
    {
      while (1)
      {
        v4 = (OZChannelBase ***)*((_QWORD *)a1 + 14);
        if (!v4)
          break;
        v3 = *v4;
        if ((int)((*(_QWORD *)(*((_QWORD *)a1 + 14) + 8) - (_QWORD)v3) >> 3) < 1)
          break;
        result = DeleteDescendant(a1, *v3);
      }
    }
  }
  return result;
}

uint64_t IterateDescendants(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  OZChannelBase *v9;
  unint64_t var7;
  const __CFString *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  BOOL v14;
  int v15;
  OZChannelBase *v16;
  int v17;
  void *v18;

  if (result)
  {
    v5 = *(_QWORD **)(result + 112);
    if (v5 && ((v5[1] - *v5) >> 3))
    {
      v6 = 0;
      v7 = a2 & 1;
      v8 = 8 * ((v5[1] - *v5) >> 3);
      do
      {
        v9 = *(OZChannelBase **)(*v5 + v6);
        var7 = v9->var7;
        if ((a2 & 8) != 0 || (var7 & 2) == 0)
        {
          if ((*((unsigned int (**)(_QWORD))v9->var0 + 15))(*(_QWORD *)(*v5 + v6)))
          {
            v11 = (const __CFString *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 11))(v9);
            v12 = CFStringCompare(v11, CFSTR("CHChannelImageWithOptions"), 0) != kCFCompareEqualTo;
          }
          else
          {
            v12 = 0;
          }
          v13 = (a2 & 4) == 0 && v12;
          if ((a2 & 2) == 0 || ((var7 & 0x1000) != 0 ? (v14 = !v13) : (v14 = 0), v15 = a2 & 1, !v14))
          {
            if ((a2 & 0x10) != 0)
              v16 = (OZChannelBase *)CHPreexistingChannelWrapperForOZChannel(v9);
            else
              v16 = CHChannelWrapperForOZChannel(v9, 0);
            if (v16)
            {
              result = (*(uint64_t (**)(uint64_t, OZChannelBase *))(a3 + 16))(a3, v16);
              if (!(_DWORD)result)
                return result;
            }
            if (v12)
              v17 = 33;
            else
              v17 = 65;
            v15 = v17 & a2;
            if ((var7 & 0x1000) == 0)
              v15 = v7;
          }
          if ((var7 & 0x1000) != 0 && !v15)
          {
            result = IterateDescendants(v18, a2, a3);
            if (!(_DWORD)result)
              return result;
          }
        }
        v6 += 8;
      }
      while (v8 != v6);
    }
    return 1;
  }
  return result;
}

OZChannelBase *FixupNewChild(OZChannelFolder *a1, OZChannelBase *a2)
{
  OZChannelBase *result;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  result = (OZChannelBase *)OZChannelFolder::getDescendant(a1, a2->var3);
  if (result)
  {
    v5 = (uint64_t **)*((_QWORD *)a1 + 14);
    if (v5 && (v6 = *v5, v7 = *(_QWORD *)(*((_QWORD *)a1 + 14) + 8) - (_QWORD)v6, (v7 & 0x7FFFFFFF8) != 0))
    {
      v8 = 0;
      v9 = (v7 >> 3);
      do
      {
        v10 = *v6++;
        v11 = *(_DWORD *)(v10 + 24);
        if (v11 > v8)
          v8 = v11;
        --v9;
      }
      while (v9);
      v12 = v8 + 1;
    }
    else
    {
      v12 = 1;
    }
    return OZChannelBase::setID(a2, v12);
  }
  return result;
}

uint64_t DeleteDescendant(OZChannelFolder *a1, OZChannelBase *a2)
{
  uint64_t result;
  OZChannelFolder *v4;

  OZChannelFolder::removeDescendant(a1, a2);
  result = CHPreexistingChannelWrapperForOZChannel(a2);
  if (result)
  {
    *(_BYTE *)(result + 16) = 1;
  }
  else if (a2)
  {
    if (v4)
      DeleteDescendants(v4);
    return (*((uint64_t (**)(OZChannelBase *))a2->var0 + 1))(a2);
  }
  return result;
}

void sub_1B2C623B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B2C6246C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  PCString::~PCString((PCString *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2C626A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C409FA7E95DLL);
  _Unwind_Resume(a1);
}

const __CFString *OZChannelBase::getObjCWrapperName(OZChannelBase *this)
{
  return CFSTR("CHChannelBase");
}

uint64_t OZChannelBase::nofityObjCWrapperWillDelete(OZChannelBase *this)
{
  return objc_msgSend(this->var9, "_ozChannelWillBeDeleted:", this);
}

void OZChannelBase::ensureObjCWrapperExists(OZChannelBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/ProChanneliOS/Channels/OZChannelBase.mm");
  pcAbortImpl();
}

uint64_t sub_1B2C62894()
{
  return 0;
}

void sub_1B2C6428C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B2C64368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

OZChannelDouble *CreateNewOZChannel<OZChannelDouble>(const void *a1, unsigned int a2, int a3)
{
  OZChannelDouble *v6;
  PCString v8;

  v6 = (OZChannelDouble *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelDouble::OZChannelDouble(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C644F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannelAngle *CreateNewOZChannel<OZChannelAngle>(const void *a1, unsigned int a2, int a3)
{
  OZChannelAngle *v6;
  PCString v8;

  v6 = (OZChannelAngle *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelAngle::OZChannelAngle(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C64E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannelPercent *CreateNewOZChannel<OZChannelPercent>(const void *a1, unsigned int a2, unsigned int a3)
{
  OZChannelPercent *v6;
  PCString v8;

  v6 = (OZChannelPercent *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelPercent::OZChannelPercent(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C64FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannelShearAngle *CreateNewOZChannel<OZChannelShearAngle>(const void *a1, unsigned int a2, int a3)
{
  OZChannelShearAngle *v6;
  PCString v8;

  v6 = (OZChannelShearAngle *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelShearAngle::OZChannelShearAngle(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C65118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannelAspectRatio *CreateNewOZChannel<OZChannelAspectRatio>(const void *a1, unsigned int a2, int a3)
{
  OZChannelAspectRatio *v6;
  PCString v8;

  v6 = (OZChannelAspectRatio *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelAspectRatio::OZChannelAspectRatio(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C65268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannelAspectRatioFootage *CreateNewOZChannel<OZChannelAspectRatioFootage>(const void *a1, unsigned int a2, int a3)
{
  OZChannelAspectRatioFootage *v6;
  PCString v8;

  v6 = (OZChannelAspectRatioFootage *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelAspectRatioFootage::OZChannelAspectRatioFootage(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C653B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannelGammaFootage *CreateNewOZChannel<OZChannelGammaFootage>(const void *a1, unsigned int a2, int a3)
{
  OZChannelGammaFootage *v6;
  PCString v8;

  v6 = (OZChannelGammaFootage *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelGammaFootage::OZChannelGammaFootage(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C65508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannelSeed *CreateNewOZChannel<OZChannelSeed>(const void *a1, unsigned int a2, int a3)
{
  OZChannelSeed *v6;
  PCString v8;

  v6 = (OZChannelSeed *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelSeed::OZChannelSeed(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C65658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannelFrame *CreateNewOZChannel<OZChannelFrame>(const void *a1, unsigned int a2, int a3)
{
  OZChannelFrame *v6;
  PCString v8;

  v6 = (OZChannelFrame *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelFrame::OZChannelFrame(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C657A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannelTimecode *CreateNewOZChannel<OZChannelTimecode>(const void *a1, unsigned int a2, int a3)
{
  OZChannelTimecode *v6;
  PCString v8;

  v6 = (OZChannelTimecode *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelTimecode::OZChannelTimecode(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C658F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannelUint32 *CreateNewOZChannel<OZChannelUint32>(const void *a1, unsigned int a2, int a3)
{
  OZChannelUint32 *v6;
  PCString v8;

  v6 = (OZChannelUint32 *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelUint32::OZChannelUint32(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C66388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannelUint16 *CreateNewOZChannel<OZChannelUint16>(const void *a1, unsigned int a2, int a3)
{
  OZChannelUint16 *v6;
  PCString v8;

  v6 = (OZChannelUint16 *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelUint16::OZChannelUint16(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C66730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannelBool *CreateNewOZChannel<OZChannelBool>(const void *a1, unsigned int a2, unsigned int a3)
{
  OZChannelBool *v6;
  PCString v8;

  v6 = (OZChannelBool *)operator new();
  PCURL::PCURL((PCURL *)&v8, a1);
  OZChannelBool::OZChannelBool(v6, &v8, 0, a2, a3, 0, 0);
  PCString::~PCString(&v8);
  OZChannel::setDiscrete((OZChannel *)v6, 0, 0);
  return v6;
}

void sub_1B2C66B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelShearAngle::OZChannelShearAngle(OZChannelShearAngle *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *OZChannelShearAngle_FactoryBase;
  OZChannelShearAngle *v15;
  OZChannelShearAngle *OZChannelShearAngleInfo;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelShearAngle_FactoryBase = (OZFactory *)getOZChannelShearAngle_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelShearAngle_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&off_1E6552298;
  this->var2 = (void **)&unk_1E65525F8;
  OZChannelShearAngleInfo = (OZChannelShearAngle *)OZChannelShearAngle::createOZChannelShearAngleInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelShearAngle::_OZChannelShearAngleInfo;
    this->var17 = (OZChannelInfo *)OZChannelShearAngle::_OZChannelShearAngleInfo;
  }
  this->var16 = var17;
  OZChannelShearAngle::createOZChannelShearAngleImpl(OZChannelShearAngleInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelShearAngle::_OZChannelShearAngleImpl;
    this->var15 = (OZChannelImpl *)OZChannelShearAngle::_OZChannelShearAngleImpl;
  }
  this->var14 = var15;
}

void sub_1B2C66F90(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelAspectRatio::OZChannelAspectRatio(OZChannelAspectRatio *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *OZChannelAspectRatio_FactoryBase;
  OZChannelAspectRatio *v15;
  OZChannelAspectRatio *OZChannelAspectRatioInfo;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelAspectRatio_FactoryBase = (OZFactory *)getOZChannelAspectRatio_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelAspectRatio_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&off_1E6552668;
  this->var2 = (void **)&unk_1E65529C8;
  OZChannelAspectRatioInfo = (OZChannelAspectRatio *)OZChannelAspectRatio::createOZChannelAspectRatioInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelAspectRatio::_OZChannelAspectRatioInfo;
    this->var17 = (OZChannelInfo *)OZChannelAspectRatio::_OZChannelAspectRatioInfo;
  }
  this->var16 = var17;
  OZChannelAspectRatio::createOZChannelAspectRatioImpl(OZChannelAspectRatioInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelAspectRatio::_OZChannelAspectRatioImpl;
    this->var15 = (OZChannelImpl *)OZChannelAspectRatio::_OZChannelAspectRatioImpl;
  }
  this->var14 = var15;
}

void sub_1B2C6707C(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelAspectRatioFootage::OZChannelAspectRatioFootage(OZChannelAspectRatioFootage *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *OZChannelAspectRatioFootage_FactoryBase;
  OZChannelAspectRatioFootage *v15;
  OZChannelAspectRatioFootage *OZChannelAspectRatioFootageInfo;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelAspectRatioFootage_FactoryBase = (OZFactory *)getOZChannelAspectRatioFootage_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelAspectRatioFootage_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&off_1E6552A38;
  this->var2 = (void **)&unk_1E6552D98;
  OZChannelAspectRatioFootageInfo = (OZChannelAspectRatioFootage *)OZChannelAspectRatioFootage::createOZChannelAspectRatioFootageInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageInfo;
    this->var17 = (OZChannelInfo *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageInfo;
  }
  this->var16 = var17;
  OZChannelAspectRatioFootage::createOZChannelAspectRatioFootageImpl(OZChannelAspectRatioFootageInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageImpl;
    this->var15 = (OZChannelImpl *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageImpl;
  }
  this->var14 = var15;
}

void sub_1B2C67168(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelGammaFootage::OZChannelGammaFootage(OZChannelGammaFootage *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *OZChannelGammaFootage_FactoryBase;
  OZChannelGammaFootage *v15;
  OZChannelGammaFootage *OZChannelGammaFootageInfo;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelGammaFootage_FactoryBase = (OZFactory *)getOZChannelGammaFootage_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelGammaFootage_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&off_1E6552E08;
  this->var2 = (void **)&unk_1E6553168;
  OZChannelGammaFootageInfo = (OZChannelGammaFootage *)OZChannelGammaFootage::createOZChannelGammaFootageInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelGammaFootage::_OZChannelGammaFootageInfo;
    this->var17 = (OZChannelInfo *)OZChannelGammaFootage::_OZChannelGammaFootageInfo;
  }
  this->var16 = var17;
  OZChannelGammaFootage::createOZChannelGammaFootageImpl(OZChannelGammaFootageInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelGammaFootage::_OZChannelGammaFootageImpl;
    this->var15 = (OZChannelImpl *)OZChannelGammaFootage::_OZChannelGammaFootageImpl;
  }
  this->var14 = var15;
}

void sub_1B2C67254(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelFrame::OZChannelFrame(OZChannelFrame *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *OZChannelFrame_FactoryBase;
  OZChannelFrame *v15;
  OZChannelFrame *OZChannelFrameInfo;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelFrame_FactoryBase = (OZFactory *)getOZChannelFrame_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelFrame_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&off_1E6553978;
  this->var2 = (void **)&unk_1E6553CD8;
  OZChannelFrameInfo = (OZChannelFrame *)OZChannelFrame::createOZChannelFrameInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelFrame::_OZChannelFrameInfo;
    this->var17 = (OZChannelInfo *)OZChannelFrame::_OZChannelFrameInfo;
  }
  this->var16 = var17;
  OZChannelFrame::createOZChannelFrameImpl(OZChannelFrameInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelFrame::_OZChannelFrameImpl;
    this->var15 = (OZChannelImpl *)OZChannelFrame::_OZChannelFrameImpl;
  }
  this->var14 = var15;
}

void sub_1B2C67340(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelUint16::OZChannelUint16(OZChannelUint16 *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *OZChannelUint16_FactoryBase;
  OZChannelUint16 *v15;
  OZChannelUint16 *OZChannelUint16Info;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelUint16_FactoryBase = (OZFactory *)getOZChannelUint16_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelUint16_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&off_1E6551EC8;
  this->var2 = (void **)&unk_1E6552228;
  OZChannelUint16Info = (OZChannelUint16 *)OZChannelUint16::createOZChannelUint16Info(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelUint16::_OZChannelUint16Info;
    this->var17 = (OZChannelInfo *)OZChannelUint16::_OZChannelUint16Info;
  }
  this->var16 = var17;
  OZChannelUint16::createOZChannelUint16Impl(OZChannelUint16Info);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelUint16::_OZChannelUint16Impl;
    this->var15 = (OZChannelImpl *)OZChannelUint16::_OZChannelUint16Impl;
  }
  this->var14 = var15;
}

void sub_1B2C6742C(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

const __CFString *OZChannelBool::getObjCWrapperName(OZChannelBool *this)
{
  return CFSTR("CHChannelBool");
}

uint64_t OZChannelBool::createOZChannelBoolInfo(OZChannelBool *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelBool::createOZChannelBoolInfo(void)::_OZChannelBoolInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelBool::createOZChannelBoolInfo(void)::_OZChannelBoolInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBool::createOZChannelBoolInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBool::_OZChannelBoolInfo;
}

uint64_t OZChannelBool::createOZChannelBoolTrueImpl(OZChannelBool *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelBool::createOZChannelBoolTrueImpl(void)::_OZChannelBoolTrueImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelBool::createOZChannelBoolTrueImpl(void)::_OZChannelBoolTrueImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBool::createOZChannelBoolTrueImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBool::_OZChannelBoolTrueImpl;
}

uint64_t OZChannelBool::createOZChannelBoolFalseImpl(OZChannelBool *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelBool::createOZChannelBoolFalseImpl(void)::_OZChannelBoolFalseImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelBool::createOZChannelBoolFalseImpl(void)::_OZChannelBoolFalseImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBool::createOZChannelBoolFalseImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBool::_OZChannelBoolFalseImpl;
}

void OZChannelBool::OZChannelBool(OZChannelBool *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *Instance;
  OZChannelBool *v15;
  OZChannelBool *OZChannelBoolInfo;
  OZChannelInfo *var17;
  OZChannelBool *OZChannelBoolTrueImpl;
  OZChannelImpl *var15;

  Instance = (OZFactory *)OZChannelBool_Factory::getInstance((OZChannelBool_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&off_1E6557140;
  this->var2 = (void **)&unk_1E65574A0;
  OZChannelBoolInfo = (OZChannelBool *)OZChannelBool::createOZChannelBoolInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelBool::_OZChannelBoolInfo;
    this->var17 = (OZChannelInfo *)OZChannelBool::_OZChannelBoolInfo;
  }
  this->var16 = var17;
  OZChannelBoolTrueImpl = (OZChannelBool *)OZChannelBool::createOZChannelBoolTrueImpl(OZChannelBoolInfo);
  OZChannelBool::createOZChannelBoolFalseImpl(OZChannelBoolTrueImpl);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelBool::_OZChannelBoolFalseImpl;
    this->var15 = (OZChannelImpl *)OZChannelBool::_OZChannelBoolFalseImpl;
  }
  this->var14 = var15;
}

void sub_1B2C67630(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelBool::OZChannelBool(OZChannelBool *this, int a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *Instance;
  OZChannelBool *v17;
  OZChannelBool *OZChannelBoolInfo;
  OZChannelInfo *var17;
  OZChannelBool *OZChannelBoolTrueImpl;
  OZChannelImpl *var15;

  Instance = (OZFactory *)OZChannelBool_Factory::getInstance((OZChannelBool_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a3, a4, a5, a6, a7, a8);
  this->var0 = (void **)&off_1E6557140;
  this->var2 = (void **)&unk_1E65574A0;
  OZChannelBoolInfo = (OZChannelBool *)OZChannelBool::createOZChannelBoolInfo(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelBool::_OZChannelBoolInfo;
    this->var17 = (OZChannelInfo *)OZChannelBool::_OZChannelBoolInfo;
  }
  this->var16 = var17;
  OZChannelBoolTrueImpl = (OZChannelBool *)OZChannelBool::createOZChannelBoolTrueImpl(OZChannelBoolInfo);
  OZChannelBool::createOZChannelBoolFalseImpl(OZChannelBoolTrueImpl);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    if (a2)
      var15 = (OZChannelImpl *)OZChannelBool::_OZChannelBoolTrueImpl;
    else
      var15 = (OZChannelImpl *)OZChannelBool::_OZChannelBoolFalseImpl;
    this->var15 = var15;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
}

void sub_1B2C67754(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelBool::OZChannelBool(OZChannelBool *this, OZFactory *a2, const PCString *a3, unsigned int a4, OZChannelImpl *a5, OZChannelInfo *a6)
{
  OZChannelBool *v9;
  OZChannelBool *OZChannelBoolInfo;
  OZChannelInfo *var17;
  OZChannelBool *OZChannelBoolTrueImpl;
  OZChannelImpl *var15;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6);
  v9->var0 = (void **)&off_1E6557140;
  v9->var2 = (void **)&unk_1E65574A0;
  OZChannelBoolInfo = (OZChannelBool *)OZChannelBool::createOZChannelBoolInfo(v9);
  if (a6)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelBool::_OZChannelBoolInfo;
    this->var17 = (OZChannelInfo *)OZChannelBool::_OZChannelBoolInfo;
  }
  this->var16 = var17;
  OZChannelBoolTrueImpl = (OZChannelBool *)OZChannelBool::createOZChannelBoolTrueImpl(OZChannelBoolInfo);
  OZChannelBool::createOZChannelBoolFalseImpl(OZChannelBoolTrueImpl);
  if (a5)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelBool::_OZChannelBoolFalseImpl;
    this->var15 = (OZChannelImpl *)OZChannelBool::_OZChannelBoolFalseImpl;
  }
  this->var14 = var15;
}

void sub_1B2C677F8(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelBool::OZChannelBool(OZChannelBool *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  *v3 = &off_1E6557140;
  v3[2] = &unk_1E65574A0;
}

void `non-virtual thunk to'OZChannelBool::~OZChannelBool(OZChannelBool *this)
{
  OZChannel::~OZChannel((OZChannel *)&this[-1].var17);
}

{
  OZChannel::~OZChannel((OZChannel *)&this[-1].var17);
  JUMPOUT(0x1B5E29170);
}

void OZChannelBool::~OZChannelBool(OZChannelBool *this)
{
  OZChannel::~OZChannel((OZChannel *)this);
  JUMPOUT(0x1B5E29170);
}

OZChannel *OZChannelBool::clone(OZChannelBool *this)
{
  OZChannel *v2;

  v2 = (OZChannel *)operator new();
  OZChannel::OZChannel(v2, (const OZChannelBase *)this, 0);
  v2->var0 = (void **)&off_1E6557140;
  v2->var2 = (void **)&unk_1E65574A0;
  return v2;
}

void sub_1B2C678EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelBool::createOZChannelBoolInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelBoolInfo *v0;

  if (!OZChannelBool::_OZChannelBoolInfo)
  {
    v0 = (OZChannelBoolInfo *)operator new();
    OZChannelBoolInfo::OZChannelBoolInfo(v0);
    OZChannelBool::_OZChannelBoolInfo = (uint64_t)v0;
  }
}

void sub_1B2C6795C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelBoolInfo::OZChannelBoolInfo(OZChannelBoolInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E6557510;
  *((_QWORD *)this + 10) = &unk_1E6557530;
}

void sub_1B2C679E4(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelBool::createOZChannelBoolTrueImpl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCurveBool *v0;
  OZChannelImpl *v1;

  if (!OZChannelBool::_OZChannelBoolTrueImpl)
  {
    v0 = (OZCurveBool *)operator new();
    OZCurveBool::OZCurveBool(v0, 1.0);
    v1 = (OZChannelImpl *)operator new();
    OZChannelImpl::OZChannelImpl(v1, (OZCurve *)v0, 1.0, 0, 1);
    OZChannelBool::_OZChannelBoolTrueImpl = (uint64_t)v1;
  }
}

void sub_1B2C67A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelBool::createOZChannelBoolFalseImpl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCurveBool *v0;
  OZChannelImpl *v1;

  if (!OZChannelBool::_OZChannelBoolFalseImpl)
  {
    v0 = (OZCurveBool *)operator new();
    OZCurveBool::OZCurveBool(v0, 0.0);
    v1 = (OZChannelImpl *)operator new();
    OZChannelImpl::OZChannelImpl(v1, (OZCurve *)v0, 0.0, 0, 1);
    OZChannelBool::_OZChannelBoolFalseImpl = (uint64_t)v1;
  }
}

void sub_1B2C67B40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void OZChannelBool3D::OZChannelBool3D(OZChannelBool3D *this, int a2, int a3, int a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, unsigned int a9)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v18;
  OZFactoryBase *v19;
  TXParagraphStyleFolder_Factory *v20;
  OZFactoryBase *v21;
  TXParagraphStyleFolder_Factory *v22;
  OZFactoryBase *v23;
  PCString v24;

  Instance = (OZFactory *)OZChannelBool3D_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a5, a6, a7, a8, 0, a9);
  *(_QWORD *)this = &off_1E6557588;
  *((_QWORD *)this + 2) = &unk_1E65578D0;
  TXParagraphStyleFolder_Factory::createInstance(v18, v19);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Channel X"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 136), a2, &v24, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v24);
  TXParagraphStyleFolder_Factory::createInstance(v20, v21);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Channel Y"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 288), a3, &v24, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v24);
  TXParagraphStyleFolder_Factory::createInstance(v22, v23);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Channel Z"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), a4, &v24, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v24);
}

{
  OZChannelBool3D::OZChannelBool3D(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B2C67CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelBool *v11;
  OZChannelBool *v12;

  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelBool3D::OZChannelBool3D(OZChannelBool3D *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  TXParagraphStyleFolder_Factory *v6;
  OZFactoryBase *v7;
  TXParagraphStyleFolder_Factory *v8;
  OZFactoryBase *v9;
  TXParagraphStyleFolder_Factory *v10;
  OZFactoryBase *v11;
  PCString v12;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_1E6557588;
  *((_QWORD *)v6 + 2) = &unk_1E65578D0;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel X"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 136), &v12, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v12);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Y"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 288), &v12, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v12);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Z"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), &v12, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v12);
}

void sub_1B2C67E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelBool *v11;
  OZChannelBool *v12;

  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelBool3D::OZChannelBool3D(OZChannelBool3D *this, const OZChannelBool3D *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E6557588;
  *(_QWORD *)(v5 + 16) = &unk_1E65578D0;
  OZChannelBool::OZChannelBool((OZChannelBool *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
}

void sub_1B2C67F6C(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannelBool *v2;
  OZChannelBool *v3;

  OZChannelBool::~OZChannelBool(v3);
  OZChannelBool::~OZChannelBool(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

OZChannelBool3D *OZChannelBool3D::clone(OZChannelBool3D *this)
{
  OZChannelBool3D *v2;

  v2 = (OZChannelBool3D *)operator new();
  OZChannelBool3D::OZChannelBool3D(v2, this, 0);
  return v2;
}

void sub_1B2C67FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void OZChannelBool3D::copy(OZChannelBool3D *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
}

BOOL OZChannelBool3D::getX(OZChannelBool3D *this, const CMTime *a2, double a3)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 136), a2, a3) != 0;
}

BOOL OZChannelBool3D::getY(OZChannelBool3D *this, const CMTime *a2, double a3)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 288), a2, a3) != 0;
}

BOOL OZChannelBool3D::getZ(OZChannelBool3D *this, const CMTime *a2, double a3)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 440), a2, a3) != 0;
}

uint64_t OZChannelBool3D::getValue(uint64_t result, const CMTime *a2, double *a3, double a4)
{
  uint64_t v7;
  double v8;
  double v9;
  double v10;

  if (a3)
  {
    v7 = result;
    if (OZChannel::getValueAsInt((OZChannel *)(result + 136), a2, a4))
      v8 = 1.0;
    else
      v8 = 0.0;
    if (OZChannel::getValueAsInt((OZChannel *)(v7 + 288), a2, a4))
      v9 = 1.0;
    else
      v9 = 0.0;
    result = OZChannel::getValueAsInt((OZChannel *)(v7 + 440), a2, a4);
    if ((_DWORD)result)
      v10 = 1.0;
    else
      v10 = 0.0;
    *a3 = v8;
    a3[1] = v9;
    a3[2] = v10;
  }
  return result;
}

const __CFString *OZChannelBool3D::getObjCWrapperName(OZChannelBool3D *this)
{
  return CFSTR("CHChannelBool3D");
}

void OZChannelBool3D::~OZChannelBool3D(OZChannelBool3D *this)
{
  OZChannelBool3D::~OZChannelBool3D(this);
  JUMPOUT(0x1B5E29170);
}

{
  *(_QWORD *)this = &off_1E6557588;
  *((_QWORD *)this + 2) = &unk_1E65578D0;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 440));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 288));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

void `non-virtual thunk to'OZChannelBool3D::~OZChannelBool3D(OZChannelBool3D *this)
{
  OZChannelBool3D::~OZChannelBool3D((OZChannelBool3D *)((char *)this - 16));
}

{
  OZChannelBool3D::~OZChannelBool3D((OZChannelBool3D *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

const __CFString *OZChannelButton::getObjCWrapperName(OZChannelButton *this)
{
  return CFSTR("CHChannelButton");
}

void OZChannelButton::OZChannelButton(OZChannelButton *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  OZChannelButton *v11;
  OZChannelInfo *OZChannelButtonInfo;
  OZChannelImpl *v13;
  OZCurveBool *v14;

  Instance = (OZFactory *)OZChannelButton_Factory::getInstance((OZChannelButton_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a3, a4, a5, 0, 0);
  this->var0 = (void **)&off_1E65579B8;
  this->var2 = (void **)&unk_1E6557D18;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var20);
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var22);
  this->var23 = 0;
  OZChannelButtonInfo = (OZChannelInfo *)OZChannelButton::createOZChannelButtonInfo(v11);
  this->var16 = OZChannelButtonInfo;
  this->var17 = OZChannelButtonInfo;
  v13 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  if (!OZChannelButton::_OZChannelButtonImpl)
  {
    v14 = (OZCurveBool *)operator new();
    OZCurveBool::OZCurveBool(v14, 0.0);
    v13 = (OZChannelImpl *)operator new();
    OZChannelImpl::OZChannelImpl(v13, (OZCurve *)v14, 0.0, 1u, 1);
    OZChannelButton::_OZChannelButtonImpl = (uint64_t)v13;
  }
  this->var14 = v13;
  this->var15 = v13;
  OZChannelBase::setFlag((OZChannelBase *)this, 8, 0);
  this->var19 = 0;
  this->var7 |= 0x10000uLL;
  (*((void (**)(OZChannelButton *))this->var0 + 16))(this);
}

void sub_1B2C68384(_Unwind_Exception *a1)
{
  OZChannel *v1;
  PCString *v2;
  PCString *v3;
  uint64_t v4;

  MEMORY[0x1B5E29170](v4, 0x10A1C407F0BD61ELL);
  PCString::~PCString(v3);
  PCString::~PCString(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelButton::createOZChannelButtonInfo(OZChannelButton *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelButton::createOZChannelButtonInfo(void)::_OZChannelButtonInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelButton::createOZChannelButtonInfo(void)::_OZChannelButtonInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelButton::createOZChannelButtonInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelButton::_OZChannelButtonInfo;
}

void OZChannelButton::OZChannelButton(OZChannelButton *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  PCSharedCount *v7;
  OZChannelButton *v8;
  OZChannelInfo *OZChannelButtonInfo;
  OZChannelImpl *v10;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, 0, 0);
  v7->var0 = (PC_Sp_counted_base *)&off_1E65579B8;
  v7[2].var0 = (PC_Sp_counted_base *)&unk_1E6557D18;
  PCSharedCount::PCSharedCount(v7 + 20);
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var22);
  this->var23 = 0;
  OZChannelButtonInfo = (OZChannelInfo *)OZChannelButton::createOZChannelButtonInfo(v8);
  this->var16 = OZChannelButtonInfo;
  this->var17 = OZChannelButtonInfo;
  OZChannelButton::createOZChannelButtonImpl((OZChannelButton *)OZChannelButtonInfo);
  v10 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var14 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var15 = v10;
  OZChannelBase::setFlag((OZChannelBase *)this, 8, 0);
  this->var19 = 0;
  this->var7 |= 0x10000uLL;
  (*((void (**)(OZChannelButton *))this->var0 + 16))(this);
}

void sub_1B2C68504(_Unwind_Exception *a1)
{
  OZChannel *v1;
  PCString *v2;

  PCString::~PCString(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelButton::createOZChannelButtonImpl(OZChannelButton *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelButton::createOZChannelButtonImpl(void)::_OZChannelButtonImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelButton::createOZChannelButtonImpl(void)::_OZChannelButtonImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelButton::createOZChannelButtonImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelButton::_OZChannelButtonImpl;
}

void OZChannelButton::OZChannelButton(OZChannelButton *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  PCSharedCount *v5;
  OZChannelButton *v6;
  OZChannelInfo *OZChannelButtonInfo;
  OZChannelImpl *v8;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, 0, 0);
  v5->var0 = (PC_Sp_counted_base *)&off_1E65579B8;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1E6557D18;
  PCSharedCount::PCSharedCount(v5 + 20);
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var22);
  this->var23 = 0;
  OZChannelButtonInfo = (OZChannelInfo *)OZChannelButton::createOZChannelButtonInfo(v6);
  this->var16 = OZChannelButtonInfo;
  this->var17 = OZChannelButtonInfo;
  OZChannelButton::createOZChannelButtonImpl((OZChannelButton *)OZChannelButtonInfo);
  v8 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var14 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var15 = v8;
  OZChannelBase::setFlag((OZChannelBase *)this, 8, 0);
  this->var19 = 0;
  this->var7 |= 0x10000uLL;
  (*((void (**)(OZChannelButton *))this->var0 + 16))(this);
}

void sub_1B2C68644(_Unwind_Exception *a1)
{
  OZChannel *v1;
  PCString *v2;

  PCString::~PCString(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelButton::OZChannelButton(OZChannelButton *this, void (*a2)(void *), void *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7)
{
  OZFactory *Instance;
  OZChannelButton *v15;
  OZChannelInfo *OZChannelButtonInfo;
  OZChannelImpl *v17;

  Instance = (OZFactory *)OZChannelButton_Factory::getInstance((OZChannelButton_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a4, a5, a6, a7, 0, 0);
  this->var0 = (void **)&off_1E65579B8;
  this->var2 = (void **)&unk_1E6557D18;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var20);
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var22);
  this->var23 = 0;
  OZChannelButtonInfo = (OZChannelInfo *)OZChannelButton::createOZChannelButtonInfo(v15);
  this->var16 = OZChannelButtonInfo;
  this->var17 = OZChannelButtonInfo;
  OZChannelButton::createOZChannelButtonImpl((OZChannelButton *)OZChannelButtonInfo);
  v17 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var14 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var15 = v17;
  this->var19 = a2;
  this->var21 = a3;
  this->var7 |= 0x10000uLL;
  (*((void (**)(OZChannelButton *))this->var0 + 16))(this);
}

void sub_1B2C68764(_Unwind_Exception *a1)
{
  OZChannel *v1;
  PCString *v2;

  PCString::~PCString(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelButton::OZChannelButton(OZChannelButton *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  PCSharedCount *v5;
  PCString *v6;

  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  v5->var0 = (PC_Sp_counted_base *)&off_1E65579B8;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1E6557D18;
  v6 = (PCString *)&v5[20];
  PCSharedCount::PCSharedCount(v5 + 20);
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var22);
  this->var23 = 0;
  this->var19 = a2[1].var5;
  PCString::set(v6, (const PCString *)&a2[1].var6);
  PCString::set(&this->var22, (const PCString *)&a2[1].var8);
}

void sub_1B2C68820(_Unwind_Exception *a1)
{
  OZChannel *v1;
  PCString *v2;

  PCString::~PCString(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

OZChannelButton *OZChannelButton::clone(OZChannelButton *this)
{
  OZChannelButton *v2;

  v2 = (OZChannelButton *)operator new();
  OZChannelButton::OZChannelButton(v2, (const OZChannelBase *)this, 0);
  return v2;
}

void sub_1B2C688A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C400C70C378);
  _Unwind_Resume(a1);
}

void OZChannelButton::copy(OZChannelButton *this, const OZChannelBase *a2)
{
  const PCString *v4;
  const PCString *v5;

  OZChannelBase::copy((OZChannelBase *)this, a2);
  if (a2)
  {
    if (v4)
    {
      v5 = v4;
      this->var19 = v4[19].var0;
      PCString::set(&this->var20, v4 + 20);
      PCString::set(&this->var22, v5 + 22);
    }
  }
}

void std::__call_once_param<std::tuple<OZChannelButton::createOZChannelButtonInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelButtonInfo *v0;

  if (!OZChannelButton::_OZChannelButtonInfo)
  {
    v0 = (OZChannelButtonInfo *)operator new();
    OZChannelButtonInfo::OZChannelButtonInfo(v0);
    OZChannelButton::_OZChannelButtonInfo = (uint64_t)v0;
  }
}

void sub_1B2C68984(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelButtonInfo::OZChannelButtonInfo(OZChannelButtonInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E6557940;
  *((_QWORD *)this + 10) = &unk_1E6557960;
}

void sub_1B2C68A0C(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelButton::createOZChannelButtonImpl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCurveBool *v0;
  OZChannelImpl *v1;

  if (!OZChannelButton::_OZChannelButtonImpl)
  {
    v0 = (OZCurveBool *)operator new();
    OZCurveBool::OZCurveBool(v0, 0.0);
    v1 = (OZChannelImpl *)operator new();
    OZChannelImpl::OZChannelImpl(v1, (OZCurve *)v0, 0.0, 1u, 1);
    OZChannelButton::_OZChannelButtonImpl = (uint64_t)v1;
  }
}

void sub_1B2C68AA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void sub_1B2C68BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C400BEEEC36);
  _Unwind_Resume(a1);
}

void sub_1B2C68CE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_1B2C68F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  CGColorSpace *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, CGColorSpace *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va1);
  _Unwind_Resume(a1);
}

void sub_1B2C6922C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void OZChannelButton::~OZChannelButton(OZChannelButton *this)
{
  this->var0 = (void **)&off_1E65579B8;
  this->var2 = (void **)&unk_1E6557D18;
  if (this->var19 == DummyCallback && PCString::empty(&this->var20) || this->var23)

  PCString::~PCString(&this->var22);
  PCString::~PCString(&this->var20);
  OZChannel::~OZChannel((OZChannel *)this);
}

{
  OZChannelButton::~OZChannelButton(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelButton::~OZChannelButton(OZChannelButton *this)
{
  OZChannelButton::~OZChannelButton((OZChannelButton *)((char *)this - 16));
}

{
  OZChannelButton::~OZChannelButton((OZChannelButton *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

OZChannelButton *OZChannelButton::callCallback(OZChannelButton *this)
{
  uint64_t (*var19)(void *);
  OZChannelButton *v2;
  __CFString *v3;
  SEL v4;

  var19 = (uint64_t (*)(void *))this->var19;
  if (var19)
  {
    v2 = this;
    if (var19 == DummyCallback)
    {
      this = (OZChannelButton *)PCString::empty(&this->var20);
      if ((this & 1) == 0)
      {
        v3 = (__CFString *)PCString::ns_str(&v2->var20);
        v4 = NSSelectorFromString(&v3->isa);
        if (-[__CFString hasSuffix:]((id)PCString::ns_str(&v2->var20), "hasSuffix:", CFSTR(":")))
          return (OZChannelButton *)objc_msgSend(v2->var21, "performSelector:withObject:", v4, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v2->var3));
        else
          return (OZChannelButton *)objc_msgSend(v2->var21, "performSelector:", v4);
      }
    }
    else
    {
      return (OZChannelButton *)var19(this->var21);
    }
  }
  return this;
}

void OZChannelButton::setPrivateData(OZChannelButton *this, void *a2)
{
  void *var21;

  var21 = this->var21;
  this->var21 = a2;
  if (this->var23)

  this->var23 = 0;
}

void *OZChannelButton::getCallbackBlock(OZChannelButton *this)
{
  if (this->var19 == DummyCallback && PCString::empty(&this->var20))
    return this->var21;
  else
    return 0;
}

void OZChannelButton::setCallbackBlock(OZChannelButton *this, void *a2)
{
  void *v4;
  void *var21;
  PCString *v6;
  PCString v7;
  void *v8;
  PCString v9;
  PCString v10;
  PCString v11;

  if (this->var19 == DummyCallback && PCString::empty(&this->var20))

  if (a2)
  {
    this->var19 = DummyCallback;
    v4 = (void *)objc_msgSend(a2, "copy");
    var21 = this->var21;
    this->var21 = v4;
    if (this->var23)

    this->var23 = 0;
    v6 = &v11;
    PCString::PCString(&v11, "");
    v7.var0 = (__CFString *)&v11;
    OZChannelButton::setCallbackSelectorAsString(this, v7, 0);
  }
  else
  {
    this->var19 = 0;
    v8 = this->var21;
    this->var21 = 0;
    if (this->var23)

    this->var23 = 0;
    v6 = &v10;
    PCString::PCString(&v10, "");
    v9.var0 = (__CFString *)&v10;
    OZChannelButton::setCallbackSelectorAsString(this, v9, 0);
  }
  PCString::~PCString(v6);
  this->var23 = 0;
}

void sub_1B2C69698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  _Unwind_Resume(a1);
}

void OZChannelButton::setCallbackSelectorAsString(OZChannelButton *this, PCString a2, void *a3)
{
  void *var21;

  if (this->var19 == DummyCallback && PCString::empty(&this->var20))

  this->var19 = DummyCallback;
  var21 = this->var21;
  this->var21 = a3;
  if (this->var23)

  this->var23 = 0;
  PCString::set(&this->var20, (const PCString *)a2.var0);
}

void OZChannelColor::OZChannelColor(OZChannelColor *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  OZChannelColor::OZChannelColor_alpha_zeroImpl *v15;
  OZChannelColor::OZChannelColor_alphaInfo *v16;
  OZChannelInfo *v17;
  PCString v18;

  Instance = (OZFactory *)OZChannelColor_Factory::getInstance(this);
  OZChannelColorNoAlpha::OZChannelColorNoAlpha(this, Instance, a2, a3, a4, a5, a6);
  *(_QWORD *)this = &off_1E6557D88;
  *((_QWORD *)this + 2) = &unk_1E65580F8;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v18, CFSTR("Channel Alpha"));
  v16 = (OZChannelColor::OZChannelColor_alphaInfo *)OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(v15);
  v17 = (OZChannelInfo *)OZChannelColor::OZChannelColor_alphaInfo::getInstance(v16);
  OZChannelDouble::OZChannelDouble((OZChannelColor *)((char *)this + 1008), &v18, (OZChannelFolder *)this, 4u, 0, (OZChannelImpl *)v16, v17);
  PCString::~PCString(&v18);
}

void sub_1B2C69804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelColorNoAlpha *v10;

  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v10);
  _Unwind_Resume(a1);
}

void OZChannelColor::OZChannelColor(OZChannelColor *this, double a2, double a3, double a4, double a5, const PCString *a6, OZChannelFolder *a7, unsigned int a8, int a9, unsigned int a10)
{
  TXParagraphStyleFolder_Factory *v12;
  OZFactoryBase *v13;
  OZChannelColor::OZChannelColor_alpha_zeroImpl *v14;
  OZChannelColor::OZChannelColor_alphaInfo *Instance;
  OZChannelImpl *v16;
  OZChannelInfo *v17;
  OZChannelColor_Factory *v18;
  PCString v19;

  OZChannelColorNoAlpha::OZChannelColorNoAlpha(this, a2, a3, a4, a6, a7, a8, a9, a10);
  *(_QWORD *)v12 = &off_1E6557D88;
  *((_QWORD *)v12 + 2) = &unk_1E65580F8;
  TXParagraphStyleFolder_Factory::createInstance(v12, v13);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Alpha"));
  if (fabs(a5 + -1.0) >= 0.0000001)
    Instance = (OZChannelColor::OZChannelColor_alphaInfo *)OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(v14);
  else
    Instance = (OZChannelColor::OZChannelColor_alphaInfo *)OZChannelColor::OZChannelColor_alpha_oneImpl::getInstance(v14);
  v16 = (OZChannelImpl *)Instance;
  v17 = (OZChannelInfo *)OZChannelColor::OZChannelColor_alphaInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZChannelColor *)((char *)this + 1008), a5, &v19, (OZChannelFolder *)this, 4u, 0, v16, v17);
  PCString::~PCString(&v19);
  *((_QWORD *)this + 1) = OZChannelColor_Factory::getInstance(v18);
}

void sub_1B2C69904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelColorNoAlpha *v10;
  OZChannel *v11;

  OZChannel::~OZChannel(v11);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v10);
  _Unwind_Resume(a1);
}

void OZChannelColor::OZChannelColor(OZChannelColor *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  TXParagraphStyleFolder_Factory *v6;
  OZFactoryBase *v7;
  OZChannelColor::OZChannelColor_alpha_zeroImpl *v8;
  OZChannelColor::OZChannelColor_alphaInfo *Instance;
  OZChannelInfo *v10;
  PCString v11;

  OZChannelColorNoAlpha::OZChannelColorNoAlpha(this, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_1E6557D88;
  *((_QWORD *)v6 + 2) = &unk_1E65580F8;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v11, CFSTR("Channel Alpha"));
  Instance = (OZChannelColor::OZChannelColor_alphaInfo *)OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(v8);
  v10 = (OZChannelInfo *)OZChannelColor::OZChannelColor_alphaInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZChannelColor *)((char *)this + 1008), &v11, (OZChannelFolder *)this, 4u, 0, (OZChannelImpl *)Instance, v10);
  PCString::~PCString(&v11);
}

void sub_1B2C699CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelColorNoAlpha *v10;

  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v10);
  _Unwind_Resume(a1);
}

void OZChannelColor::OZChannelColor(OZChannelColor *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannelColorNoAlpha::OZChannelColorNoAlpha(this, (const OZChannelColorNoAlpha *)a2, a3);
  *(_QWORD *)v5 = &off_1E6557D88;
  *(_QWORD *)(v5 + 16) = &unk_1E65580F8;
  OZChannel::OZChannel((OZChannel *)(v5 + 1008), a2 + 9, (OZChannelFolder *)this);
  *((_QWORD *)this + 126) = &off_1E6551358;
  *((_QWORD *)this + 128) = &unk_1E65516B8;
}

void sub_1B2C69A58(_Unwind_Exception *a1)
{
  OZChannelColorNoAlpha *v1;

  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v1);
  _Unwind_Resume(a1);
}

OZChannelColor *OZChannelColor::clone(const OZChannelBase *this)
{
  OZChannelColor *v2;

  v2 = (OZChannelColor *)operator new();
  OZChannelColor::OZChannelColor(v2, this, 0);
  return v2;
}

void sub_1B2C69AB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C400BEEEC36);
  _Unwind_Resume(a1);
}

void OZChannelColor::copy(OZChannelColor *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v6;

  OZChannelColorNoAlpha::copy(this, a2, a3);
  if (a2)
  else
    v6 = 0;
  OZChannel::copy((OZChannel *)((char *)this + 1008), v6 + 9, a3);
}

double OZChannelColor::getColor(OZChannelColor *this, const CMTime *a2, PCColor *a3, double a4)
{
  double v8;

  OZChannelColorNoAlpha::getColor(this, a2, a3, a4);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1008), a2, a4);
  *(float *)&v8 = v8;
  return PCColor::setAlpha(a3, *(float *)&v8);
}

double OZChannelColor::getColor(OZChannelColor *this, const CMTime *a2, PCColor *a3)
{
  double v6;

  OZChannelColorNoAlpha::getColor(this, a2, a3);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1008), a2, 0.0);
  *(float *)&v6 = v6;
  return PCColor::setAlpha(a3, *(float *)&v6);
}

uint64_t OZChannelColor::setColor(OZChannelColor *this, const CMTime *a2, PCColor *a3, uint64_t a4)
{
  float Alpha;

  OZChannelColorNoAlpha::setColor(this, a2, a3, a4);
  Alpha = PCColor::getAlpha(a3);
  return (*(uint64_t (**)(char *, const CMTime *, uint64_t, double))(*((_QWORD *)this + 126) + 712))((char *)this + 1008, a2, a4, Alpha);
}

uint64_t OZChannelColor::setDefaultColor(OZChannelColor *this, PCColor *a2)
{
  float Alpha;

  OZChannelColorNoAlpha::setDefaultColor(this, a2);
  Alpha = PCColor::getAlpha(a2);
  return OZChannel::setDefaultValue((OZChannel *)((char *)this + 1008), Alpha);
}

double OZChannelColor::getDefaultColor(OZChannelColor *this, PCColor *a2)
{
  float DefaultValue;

  OZChannelColorNoAlpha::getDefaultColor(this, a2);
  DefaultValue = OZChannel::getDefaultValue((OZChannel *)((char *)this + 1008));
  return PCColor::setAlpha(a2, DefaultValue);
}

const __CFString *OZChannelColor::getObjCWrapperName(OZChannelColor *this)
{
  return CFSTR("CHChannelColor");
}

void `non-virtual thunk to'OZChannelColor::~OZChannelColor(OZChannelColor *this)
{
  *(_QWORD *)this = &unk_1E65580F8;
  *((_QWORD *)this - 2) = &off_1E6557D88;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 992));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZChannelColor *)((char *)this - 16));
}

{
  OZChannelColor::~OZChannelColor((OZChannelColor *)((char *)this - 16));
}

uint64_t OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(OZChannelColor::OZChannelColor_alpha_zeroImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(void)::OZChannelColor_alpha_zeroImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(void)::OZChannelColor_alpha_zeroImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColor::OZChannelColor_alpha_zeroImpl::_OZChannelColor_alpha_zero;
}

void std::__call_once_param<std::tuple<OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColor::OZChannelColor_alpha_zeroImpl *v0;

  if (!OZChannelColor::OZChannelColor_alpha_zeroImpl::_OZChannelColor_alpha_zero)
  {
    v0 = (OZChannelColor::OZChannelColor_alpha_zeroImpl *)operator new();
    OZChannelColor::OZChannelColor_alpha_zeroImpl::OZChannelColor_alpha_zeroImpl(v0);
    OZChannelColor::OZChannelColor_alpha_zeroImpl::_OZChannelColor_alpha_zero = (uint64_t)v0;
  }
}

void sub_1B2C69DE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColor::OZChannelColor_alpha_zeroImpl *OZChannelColor::OZChannelColor_alpha_zeroImpl::OZChannelColor_alpha_zeroImpl(OZChannelColor::OZChannelColor_alpha_zeroImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((OZChannelColor::OZChannelColor_alpha_zeroImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6558168;
  *((_QWORD *)this + 5) = &unk_1E6558188;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2C69E94(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColor::OZChannelColor_alphaInfo::getInstance(OZChannelColor::OZChannelColor_alphaInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColor::OZChannelColor_alphaInfo::getInstance(void)::OZChannelColor_alphaInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColor::OZChannelColor_alphaInfo::getInstance(void)::OZChannelColor_alphaInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColor::OZChannelColor_alphaInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColor::OZChannelColor_alphaInfo::_OZChannelColor_alphaInfo;
}

void std::__call_once_param<std::tuple<OZChannelColor::OZChannelColor_alphaInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColor::OZChannelColor_alphaInfo *v0;

  if (!OZChannelColor::OZChannelColor_alphaInfo::_OZChannelColor_alphaInfo)
  {
    v0 = (OZChannelColor::OZChannelColor_alphaInfo *)operator new();
    OZChannelColor::OZChannelColor_alphaInfo::OZChannelColor_alphaInfo(v0);
    OZChannelColor::OZChannelColor_alphaInfo::_OZChannelColor_alphaInfo = (uint64_t)v0;
  }
}

void sub_1B2C69F60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelColor::OZChannelColor_alphaInfo *OZChannelColor::OZChannelColor_alphaInfo::OZChannelColor_alphaInfo(OZChannelColor::OZChannelColor_alphaInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 0.01, 0.001, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZChannelColor::OZChannelColor_alphaInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65581E0;
  *((_QWORD *)this + 10) = &unk_1E6558200;
  return this;
}

void sub_1B2C6A010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColor::OZChannelColor_alpha_oneImpl::getInstance(OZChannelColor::OZChannelColor_alpha_oneImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColor::OZChannelColor_alpha_oneImpl::getInstance(void)::OZChannelColor_alpha_oneImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColor::OZChannelColor_alpha_oneImpl::getInstance(void)::OZChannelColor_alpha_oneImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColor::OZChannelColor_alpha_oneImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColor::OZChannelColor_alpha_oneImpl::_OZChannelColor_alpha_one;
}

void std::__call_once_param<std::tuple<OZChannelColor::OZChannelColor_alpha_oneImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColor::OZChannelColor_alpha_oneImpl *v0;

  if (!OZChannelColor::OZChannelColor_alpha_oneImpl::_OZChannelColor_alpha_one)
  {
    v0 = (OZChannelColor::OZChannelColor_alpha_oneImpl *)operator new();
    OZChannelColor::OZChannelColor_alpha_oneImpl::OZChannelColor_alpha_oneImpl(v0);
    OZChannelColor::OZChannelColor_alpha_oneImpl::_OZChannelColor_alpha_one = (uint64_t)v0;
  }
}

void sub_1B2C6A0DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColor::OZChannelColor_alpha_oneImpl *OZChannelColor::OZChannelColor_alpha_oneImpl::OZChannelColor_alpha_oneImpl(OZChannelColor::OZChannelColor_alpha_oneImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((OZChannelColor::OZChannelColor_alpha_oneImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6558258;
  *((_QWORD *)this + 5) = &unk_1E6558278;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2C6A188(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1B2C6A278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40933A2D21);
  _Unwind_Resume(a1);
}

Class CHChannelWrapperClassForOZChannel(uint64_t a1)
{
  NSString *v1;

  v1 = (NSString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  return NSClassFromString(v1);
}

id GetWrapperForOZChannel(OZChannelBase *a1)
{
  void *var9;
  id v3;

  objc_sync_enter(CFSTR("CHChannelWrapperLock"));
  var9 = a1->var9;
  v3 = var9;
  objc_sync_exit(CFSTR("CHChannelWrapperLock"));
  return var9;
}

void sub_1B2C6A490(_Unwind_Exception *a1)
{
  objc_sync_exit(CFSTR("CHChannelWrapperLock"));
  _Unwind_Resume(a1);
}

uint64_t CHDescriptionForOZChannel(uint64_t a1)
{
  NSString *v2;
  NSString *v3;
  Class v4;
  void *v5;
  uint64_t v6;
  const __CFString *v7;
  uint64_t v9;

  v2 = (NSString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (!v2)
    return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<unwrappable channel: oz=%p(%s), name='%@', ID=%u>"), a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, PCString::ns_str((PCString *)(a1 + 32)), *(unsigned int *)(a1 + 24), v9);
  v3 = v2;
  v4 = NSClassFromString(v2);
  v5 = (void *)MEMORY[0x1E0CB3940];
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
  v7 = PCString::ns_str((PCString *)(a1 + 32));
  if (v4)
    return objc_msgSend(v5, "stringWithFormat:", CFSTR("<unwrapped %@: oz=%p(%s), name='%@', ID=%u>"), v3, a1, v6, v7, *(unsigned int *)(a1 + 24));
  else
    return objc_msgSend(v5, "stringWithFormat:", CFSTR("<unimplemented %@: oz=%p(%s), name='%@', ID=%u>"), v3, a1, v6, v7, *(unsigned int *)(a1 + 24));
}

void sub_1B2C6A6C8(_Unwind_Exception *a1)
{
  objc_sync_exit(CFSTR("CHChannelWrapperLock"));
  _Unwind_Resume(a1);
}

void sub_1B2C6A8A8(_Unwind_Exception *a1)
{
  objc_sync_exit(CFSTR("CHChannelWrapperLock"));
  _Unwind_Resume(a1);
}

OZChannelBase *ChannelStateCopy(OZChannelBase *a1, int a2)
{
  OZChannelBase *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v6;
  void **var0;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  OZChannelBase *v13;

  if (a2)
  {
    v3 = (OZChannelBase *)operator new();
    OZChannelBase::OZChannelBase(v3, a1, 0);
  }
  else
  {
    v3 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))a1->var0 + 31))(a1);
    if (v3)
      v5 = v4 == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = v4;
      var0 = v3[1].var0;
      if (var0)
        var0 = (void **)((unint64_t)((_BYTE *)var0[1] - (_BYTE *)*var0) >> 3);
      v8 = (_QWORD *)v4[14];
      if (v8)
        v8 = (_QWORD *)((v8[1] - *v8) >> 3);
      if ((_DWORD)var0 != (_DWORD)v8)
      {
        OZChannelFolder::setFoldFlag((OZChannelFolder *)v3, 0x80000000);
        v9 = (_QWORD *)v6[14];
        if (v9)
        {
          v10 = v9[1] - *v9;
          if (v10)
          {
            v11 = 0;
            v12 = v10 >> 3;
            while (1)
            {
              v13 = (OZChannelBase *)ChannelStateCopy(*(OZChannelBase **)(*v9 + 8 * v11), 0);
              if (!v13)
                break;
              OZChannelFolder::push_back((OZChannelFolder *)v3, v13);
              if (v12 == ++v11)
                return v3;
            }
            (*((void (**)(OZChannelBase *))v3->var0 + 1))(v3);
            return 0;
          }
        }
      }
    }
  }
  return v3;
}

void sub_1B2C6AAC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40384E9B0FLL);
  _Unwind_Resume(a1);
}

OZChannelBase *CHChannelWrapperForOZChannel(OZChannelBase *result, uint64_t a2)
{
  OZChannelBase *v3;
  NSString *v4;

  if (result)
  {
    v3 = result;
    result = (OZChannelBase *)GetWrapperForOZChannel(result);
    if (!result)
    {
      v4 = (NSString *)(*((uint64_t (**)(OZChannelBase *))v3->var0 + 11))(v3);
      return (OZChannelBase *)(id)objc_msgSend(objc_alloc(NSClassFromString(v4)), "initWithOZChannel:freeWhenDone:", v3, a2);
    }
  }
  return result;
}

void sub_1B2C6AC88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B2C6AD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  PCString::~PCString((PCString *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2C6ADB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void sub_1B2C6B134(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(_QWORD *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ChannelStateDestroy(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (result)
  {
    v3 = result;
    if (result)
    {
      v4 = result;
      result = OZChannelFolder::testFoldFlag((OZChannelFolder *)result, 0x80000000);
      v5 = *(_QWORD **)(v4 + 112);
      if (v5)
      {
        v6 = v5[1] - *v5;
        if (v6)
        {
          v7 = result;
          v8 = (v6 >> 3) - 1;
          do
            result = ChannelStateDestroy(*(OZChannelBase **)(*v5 + 8 * v8--), v7);
          while (v8 != -1);
        }
      }
    }
    if (a2)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

uint64_t OZChannelColorNoAlpha::selectRedPrototype(OZChannelColorNoAlpha *this, double a2)
{
  if (fabs(a2) < 0.0000001)
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(this);
  if (fabs(a2 + -1.0) < 0.0000001)
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(this);
  if (fabs(a2 + -0.64) < 0.0000001)
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::getInstance(this);
  if (fabs(a2 + -0.21) < 0.0000001)
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::getInstance(this);
  if (fabs(a2 + -0.5) >= 0.0000001)
    return 0;
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(this);
}

uint64_t OZChannelColorNoAlpha::selectGreenPrototype(OZChannelColorNoAlpha *this, double a2)
{
  if (fabs(a2) < 0.0000001)
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(this);
  if (fabs(a2 + -1.0) < 0.0000001)
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(this);
  if (fabs(a2 + -0.68) < 0.0000001)
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::getInstance(this);
  if (fabs(a2 + -0.43) < 0.0000001)
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::getInstance(this);
  if (fabs(a2 + -0.5) >= 0.0000001)
    return 0;
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(this);
}

uint64_t OZChannelColorNoAlpha::selectBluePrototype(OZChannelColorNoAlpha *this, double a2)
{
  if (fabs(a2) < 0.0000001)
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(this);
  if (fabs(a2 + -1.0) < 0.0000001)
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(this);
  if (fabs(a2 + -0.77) < 0.0000001)
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::getInstance(this);
  if (fabs(a2 + -0.75) < 0.0000001)
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::getInstance(this);
  if (fabs(a2 + -0.5) >= 0.0000001)
    return 0;
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(this);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha(OZChannelColorNoAlpha *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *v15;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *v16;
  OZChannelInfo *v17;
  TXParagraphStyleFolder_Factory *v18;
  OZFactoryBase *v19;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *v20;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *v21;
  OZChannelInfo *v22;
  TXParagraphStyleFolder_Factory *v23;
  OZFactoryBase *v24;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *v25;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *v26;
  OZChannelInfo *v27;
  TXParagraphStyleFolder_Factory *v28;
  OZFactoryBase *v29;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl *v30;
  OZChannelImpl *v31;
  const PCString *v32;
  TXParagraphStyleFolder_Factory *v33;
  unsigned int v34;
  OZFactoryBase *v35;
  TXParagraphStyleFolder_Factory *v36;
  OZFactoryBase *v37;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl *v38;
  OZChannelImpl *v39;
  void *ChannelRootBase;
  OZChannelBase *v41;
  const PCString *v42;
  int v43;
  PCString v44;
  PCString v45;

  Instance = (OZFactory *)OZChannelColorNoAlpha_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(_QWORD *)this = &off_1E65582D0;
  *((_QWORD *)this + 2) = &unk_1E6558640;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v45, CFSTR("Channel Red"));
  v16 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v15);
  v17 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v16);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 136), &v45, (OZChannelFolder *)this, 1u, 0, (OZChannelImpl *)v16, v17);
  PCString::~PCString(&v45);
  TXParagraphStyleFolder_Factory::createInstance(v18, v19);
  PCURL::PCURL((PCURL *)&v45, CFSTR("Channel Green"));
  v21 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v20);
  v22 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v21);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 288), &v45, (OZChannelFolder *)this, 2u, 0, (OZChannelImpl *)v21, v22);
  PCString::~PCString(&v45);
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v45, CFSTR("Channel Blue"));
  v26 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v25);
  v27 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v26);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 440), &v45, (OZChannelFolder *)this, 3u, 0, (OZChannelImpl *)v26, v27);
  PCString::~PCString(&v45);
  TXParagraphStyleFolder_Factory::createInstance(v28, v29);
  PCURL::PCURL((PCURL *)&v45, CFSTR("Channel Gamma"));
  v31 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(v30);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 592), &v45, (OZChannelFolder *)this, 0xAu, 138, v31, 0);
  PCString::~PCString(&v45);
  v33 = (TXParagraphStyleFolder_Factory *)OZChannelBase::setRangeName((OZChannelBase *)3, v32);
  v34 = v33;
  TXParagraphStyleFolder_Factory::createInstance(v33, v35);
  PCURL::PCURL((PCURL *)&v45, CFSTR("Channel Color Space Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v36, v37);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Color Space"));
  v39 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(v38);
  OZChannelEnum::OZChannelEnum((OZChannelColorNoAlpha *)((char *)this + 744), v34, &v45, &v44, (OZChannelFolder *)this, 0xBu, 130, v39, 0);
  PCString::~PCString(&v44);
  PCString::~PCString(&v45);
  *((_BYTE *)this + 1000) = 1;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
  ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (ChannelRootBase)
  {
    OZChannel::setMin((OZChannel *)((char *)this + 744), -1.0);
    v41 = (OZChannelBase *)(*(uint64_t (**)(void *))(*(_QWORD *)ChannelRootBase + 864))(ChannelRootBase);
    v43 = OZChannelBase::setRangeName(v41, v42);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 744), MEMORY[0x1E0CA2E68], 0.0) != v43)
    {
      OZChannel::setValue((OZChannel *)((char *)this + 744), MEMORY[0x1E0CA2E68], (double)v43, 0);
      OZChannel::setDefaultValue((OZChannel *)((char *)this + 744), (double)v43);
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)ChannelRootBase + 872))(ChannelRootBase) == 1)
    {
      OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 4.0);
      OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 4.0);
      OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 4.0);
    }
  }
}

void sub_1B2C6B98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelObjectRootBase *v12;
  OZChannel *v13;
  OZChannel *v14;
  OZChannel *v15;
  OZChannel *v16;
  OZChannelEnum *v17;

  OZChannelEnum::~OZChannelEnum(v17);
  OZChannel::~OZChannel(v16);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v12);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha(OZChannelColorNoAlpha *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, unsigned int a7)
{
  TXParagraphStyleFolder_Factory *v8;
  OZFactoryBase *v9;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *v10;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *Instance;
  OZChannelInfo *v12;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *v15;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *v16;
  OZChannelInfo *v17;
  TXParagraphStyleFolder_Factory *v18;
  OZFactoryBase *v19;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *v20;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *v21;
  OZChannelInfo *v22;
  TXParagraphStyleFolder_Factory *v23;
  OZFactoryBase *v24;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl *v25;
  OZChannelImpl *v26;
  const PCString *v27;
  TXParagraphStyleFolder_Factory *v28;
  unsigned int v29;
  OZFactoryBase *v30;
  TXParagraphStyleFolder_Factory *v31;
  OZFactoryBase *v32;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl *v33;
  OZChannelImpl *v34;
  void *ChannelRootBase;
  OZChannelBase *v36;
  const PCString *v37;
  int v38;
  PCString v39;
  PCString v40;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5, a6, 0, a7);
  *(_QWORD *)v8 = &off_1E65582D0;
  *((_QWORD *)v8 + 2) = &unk_1E6558640;
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v40, CFSTR("Channel Red"));
  Instance = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v10);
  v12 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 136), &v40, (OZChannelFolder *)this, 1u, 0, (OZChannelImpl *)Instance, v12);
  PCString::~PCString(&v40);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v40, CFSTR("Channel Green"));
  v16 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v15);
  v17 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v16);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 288), &v40, (OZChannelFolder *)this, 2u, 0, (OZChannelImpl *)v16, v17);
  PCString::~PCString(&v40);
  TXParagraphStyleFolder_Factory::createInstance(v18, v19);
  PCURL::PCURL((PCURL *)&v40, CFSTR("Channel Blue"));
  v21 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v20);
  v22 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v21);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 440), &v40, (OZChannelFolder *)this, 3u, 0, (OZChannelImpl *)v21, v22);
  PCString::~PCString(&v40);
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v40, CFSTR("Channel Gamma"));
  v26 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(v25);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 592), &v40, (OZChannelFolder *)this, 0xAu, 138, v26, 0);
  PCString::~PCString(&v40);
  v28 = (TXParagraphStyleFolder_Factory *)OZChannelBase::setRangeName((OZChannelBase *)3, v27);
  v29 = v28;
  TXParagraphStyleFolder_Factory::createInstance(v28, v30);
  PCURL::PCURL((PCURL *)&v40, CFSTR("Channel Color Space Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v31, v32);
  PCURL::PCURL((PCURL *)&v39, CFSTR("Channel Color Space"));
  v34 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(v33);
  OZChannelEnum::OZChannelEnum((OZChannelColorNoAlpha *)((char *)this + 744), v29, &v40, &v39, (OZChannelFolder *)this, 0xBu, 130, v34, 0);
  PCString::~PCString(&v39);
  PCString::~PCString(&v40);
  *((_BYTE *)this + 1000) = 1;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
  ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (ChannelRootBase)
  {
    OZChannel::setMin((OZChannel *)((char *)this + 744), -1.0);
    v36 = (OZChannelBase *)(*(uint64_t (**)(void *))(*(_QWORD *)ChannelRootBase + 864))(ChannelRootBase);
    v38 = OZChannelBase::setRangeName(v36, v37);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 744), MEMORY[0x1E0CA2E68], 0.0) != v38)
    {
      OZChannel::setValue((OZChannel *)((char *)this + 744), MEMORY[0x1E0CA2E68], (double)v38, 0);
      OZChannel::setDefaultValue((OZChannel *)((char *)this + 744), (double)v38);
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)ChannelRootBase + 872))(ChannelRootBase) == 1)
    {
      OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 4.0);
      OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 4.0);
      OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 4.0);
    }
  }
}

void sub_1B2C6BDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelObjectRootBase *v12;
  OZChannel *v13;
  OZChannel *v14;
  OZChannel *v15;
  OZChannel *v16;
  OZChannelEnum *v17;

  OZChannelEnum::~OZChannelEnum(v17);
  OZChannel::~OZChannel(v16);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v12);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha(OZChannelColorNoAlpha *this, double a2, double a3, double a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, unsigned int a9)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v19;
  OZFactoryBase *v20;
  OZChannelColorNoAlpha *v21;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *v22;
  OZChannelInfo *v23;
  TXParagraphStyleFolder_Factory *v24;
  OZFactoryBase *v25;
  OZChannelColorNoAlpha *v26;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *v27;
  OZChannelInfo *v28;
  TXParagraphStyleFolder_Factory *v29;
  OZFactoryBase *v30;
  OZChannelColorNoAlpha *v31;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *v32;
  OZChannelInfo *v33;
  TXParagraphStyleFolder_Factory *v34;
  OZFactoryBase *v35;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl *v36;
  OZChannelImpl *v37;
  const PCString *v38;
  TXParagraphStyleFolder_Factory *v39;
  unsigned int v40;
  OZFactoryBase *v41;
  TXParagraphStyleFolder_Factory *v42;
  OZFactoryBase *v43;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl *v44;
  OZChannelImpl *v45;
  void *ChannelRootBase;
  OZChannelBase *v47;
  const PCString *v48;
  int v49;
  PCString v50;
  PCString v51;

  Instance = (OZFactory *)OZChannelColorNoAlpha_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a5, a6, a7, a8, 0, a9);
  *(_QWORD *)this = &off_1E65582D0;
  *((_QWORD *)this + 2) = &unk_1E6558640;
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v51, CFSTR("Channel Red"));
  v22 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::selectRedPrototype(v21, a2);
  v23 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v22);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 136), a2, &v51, (OZChannelFolder *)this, 1u, 0, (OZChannelImpl *)v22, v23);
  PCString::~PCString(&v51);
  TXParagraphStyleFolder_Factory::createInstance(v24, v25);
  PCURL::PCURL((PCURL *)&v51, CFSTR("Channel Green"));
  v27 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::selectGreenPrototype(v26, a3);
  v28 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v27);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 288), a3, &v51, (OZChannelFolder *)this, 2u, 0, (OZChannelImpl *)v27, v28);
  PCString::~PCString(&v51);
  TXParagraphStyleFolder_Factory::createInstance(v29, v30);
  PCURL::PCURL((PCURL *)&v51, CFSTR("Channel Blue"));
  v32 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::selectBluePrototype(v31, a4);
  v33 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v32);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 440), a4, &v51, (OZChannelFolder *)this, 3u, 0, (OZChannelImpl *)v32, v33);
  PCString::~PCString(&v51);
  TXParagraphStyleFolder_Factory::createInstance(v34, v35);
  PCURL::PCURL((PCURL *)&v51, CFSTR("Channel Gamma"));
  v37 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(v36);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 592), 2.2, &v51, (OZChannelFolder *)this, 0xAu, 138, v37, 0);
  PCString::~PCString(&v51);
  v39 = (TXParagraphStyleFolder_Factory *)OZChannelBase::setRangeName((OZChannelBase *)3, v38);
  v40 = v39;
  TXParagraphStyleFolder_Factory::createInstance(v39, v41);
  PCURL::PCURL((PCURL *)&v51, CFSTR("Channel Color Space Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v42, v43);
  PCURL::PCURL((PCURL *)&v50, CFSTR("Channel Color Space"));
  v45 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(v44);
  OZChannelEnum::OZChannelEnum((OZChannelColorNoAlpha *)((char *)this + 744), v40, &v51, &v50, (OZChannelFolder *)this, 0xBu, 130, v45, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  *((_BYTE *)this + 1000) = 1;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
  ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (ChannelRootBase)
  {
    OZChannel::setMin((OZChannel *)((char *)this + 744), -1.0);
    v47 = (OZChannelBase *)(*(uint64_t (**)(void *))(*(_QWORD *)ChannelRootBase + 864))(ChannelRootBase);
    v49 = OZChannelBase::setRangeName(v47, v48);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 744), MEMORY[0x1E0CA2E68], 0.0) != v49)
    {
      OZChannel::setValue((OZChannel *)((char *)this + 744), MEMORY[0x1E0CA2E68], (double)v49, 0);
      OZChannel::setDefaultValue((OZChannel *)((char *)this + 744), (double)v49);
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)ChannelRootBase + 872))(ChannelRootBase) == 1)
    {
      OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 4.0);
      OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 4.0);
      OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 4.0);
    }
  }
  OZChannel::setMin((OZChannel *)((char *)this + 136), -6.0);
  OZChannel::setMax((OZChannel *)((char *)this + 136), 8.0);
  OZChannel::setMin((OZChannel *)((char *)this + 288), -6.0);
  OZChannel::setMax((OZChannel *)((char *)this + 288), 8.0);
  OZChannel::setMin((OZChannel *)((char *)this + 440), -6.0);
  OZChannel::setMax((OZChannel *)((char *)this + 440), 8.0);
}

void sub_1B2C6C2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelObjectRootBase *v12;
  OZChannel *v13;
  OZChannel *v14;
  OZChannel *v15;
  OZChannel *v16;
  OZChannelEnum *v17;

  OZChannelEnum::~OZChannelEnum(v17);
  OZChannel::~OZChannel(v16);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v12);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha(OZChannelColorNoAlpha *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  TXParagraphStyleFolder_Factory *v6;
  OZFactoryBase *v7;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *v8;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *Instance;
  OZChannelInfo *v10;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *v13;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *v14;
  OZChannelInfo *v15;
  TXParagraphStyleFolder_Factory *v16;
  OZFactoryBase *v17;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *v18;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *v19;
  OZChannelInfo *v20;
  TXParagraphStyleFolder_Factory *v21;
  OZFactoryBase *v22;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl *v23;
  OZChannelImpl *v24;
  TXParagraphStyleFolder_Factory *v25;
  OZFactoryBase *v26;
  TXParagraphStyleFolder_Factory *v27;
  OZFactoryBase *v28;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl *v29;
  OZChannelImpl *v30;
  PCString v31;
  PCString v32;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_1E65582D0;
  *((_QWORD *)v6 + 2) = &unk_1E6558640;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Red"));
  Instance = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v8);
  v10 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 136), &v32, (OZChannelFolder *)this, 1u, 0, (OZChannelImpl *)Instance, v10);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Green"));
  v14 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v13);
  v15 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v14);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 288), &v32, (OZChannelFolder *)this, 2u, 0, (OZChannelImpl *)v14, v15);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v16, v17);
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Blue"));
  v19 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v18);
  v20 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v19);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 440), &v32, (OZChannelFolder *)this, 3u, 0, (OZChannelImpl *)v19, v20);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Gamma"));
  v24 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(v23);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 592), &v32, (OZChannelFolder *)this, 0xAu, 138, v24, 0);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v25, v26);
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Color Space Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v27, v28);
  PCURL::PCURL((PCURL *)&v31, CFSTR("Channel Color Space"));
  v30 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(v29);
  OZChannelEnum::OZChannelEnum((OZChannelColorNoAlpha *)((char *)this + 744), &v32, &v31, (OZChannelFolder *)this, 0xBu, 0x82u, v30, 0);
  PCString::~PCString(&v31);
  PCString::~PCString(&v32);
  *((_BYTE *)this + 1000) = 1;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
}

void sub_1B2C6C5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannel *v13;
  OZChannel *v14;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha(OZChannelColorNoAlpha *this, const OZChannelColorNoAlpha *a2, OZChannelFolder *a3)
{
  uint64_t v5;
  OZChannel *v6;

  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E65582D0;
  *(_QWORD *)(v5 + 16) = &unk_1E6558640;
  v6 = (OZChannel *)(v5 + 136);
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((_QWORD *)this + 17) = &off_1E6551358;
  *((_QWORD *)this + 19) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((_QWORD *)this + 36) = &off_1E6551358;
  *((_QWORD *)this + 38) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((_QWORD *)this + 55) = &off_1E6551358;
  *((_QWORD *)this + 57) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)a2 + 592), (OZChannelFolder *)this);
  *((_QWORD *)this + 74) = &off_1E6551358;
  *((_QWORD *)this + 76) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZChannelColorNoAlpha *)((char *)this + 744), (const OZChannelColorNoAlpha *)((char *)a2 + 744), (OZChannelFolder *)this);
  *((_BYTE *)this + 1000) = *((_BYTE *)a2 + 1000);
  OZChannel::setSliderMin(v6, 0.0);
  OZChannel::setSliderMax(v6, 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
}

void sub_1B2C6C7E8(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannel *v2;
  OZChannel *v3;
  OZChannel *v4;
  OZChannel *v5;

  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha *OZChannelColorNoAlpha::clone(OZChannelColorNoAlpha *this)
{
  OZChannelColorNoAlpha *v2;

  v2 = (OZChannelColorNoAlpha *)operator new();
  OZChannelColorNoAlpha::OZChannelColorNoAlpha(v2, this, 0);
  return v2;
}

void sub_1B2C6C898(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40C7C6813ELL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::copy(OZChannelColorNoAlpha *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
  OZChannel::copy((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)v4 + 592), a3);
  OZChannelEnum::copy((PCString *)this + 93, (const OZChannelBase *)((char *)v4 + 744), a3);
  *((_BYTE *)this + 1000) = v4[8].var13;
}

CGColorSpace **OZChannelColorNoAlpha::getColor(OZChannelColorNoAlpha *this, const CMTime *a2, PCColor *a3, double a4)
{
  double v8;
  float v9;
  double v10;
  float v11;
  double v12;
  float v13;
  CGColorSpace *v15;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, a4);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, a4);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 440), a2, a4);
  v13 = v12;
  if (*((_BYTE *)this + 1000))
    OZChannelColorNoAlpha::getPCColorSpace(this, &v15);
  else
    PCColor::getColorSpace(a3, &v15);
  PCColor::setRGBA(a3, v9, v11, v13, 1.0, (OZChannelBase *)&v15);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
}

void sub_1B2C6CA2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::isColor(OZChannelColorNoAlpha *this)
{
  return *((unsigned __int8 *)this + 1000);
}

void OZChannelColorNoAlpha::getPCColorSpace(OZChannelColorNoAlpha *this@<X0>, CGColorSpace **a2@<X8>)
{
  uint64_t ValueAsInt;
  CGColorSpace **v4;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 744), MEMORY[0x1E0CA2E68], 0.0);
  v4 = (CGColorSpace **)PCColorSpaceCache::intToColorSpaceID(ValueAsInt, 3u);
  if ((_DWORD)v4 == -1)
    PCColorSpaceCache::sRGB(a2);
  else
    PCColorSpaceCache::getColorSpaceByID(v4, a2);
}

CGColorSpace **OZChannelColorNoAlpha::getColor(OZChannelColorNoAlpha *this, const CMTime *a2, PCColor *a3)
{
  double v6;
  float v7;
  double v8;
  float v9;
  double v10;
  float v11;
  __int128 v12;
  CGColorSpace *obj;
  CGColorSpace *var7;
  OZChannelBase v16;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, 0.0);
  v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, 0.0);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 440), a2, 0.0);
  v11 = v10;
  if (*((_BYTE *)this + 1000))
    OZChannelColorNoAlpha::getPCColorSpace(this, (CGColorSpace **)&v16);
  else
    PCColor::getColorSpace(a3, (CGColorSpace **)&v16);
  PCColor::PCColor((PCColor *)&v16.var1, v7, v9, v11, 1.0, &v16);
  v12 = *(_OWORD *)&v16.var3;
  *(_OWORD *)&a3->var0.var0 = *(_OWORD *)&v16.var1;
  *(_OWORD *)&a3->var0.var1[1] = v12;
  *(_OWORD *)&a3->var0.var1[3] = *(_OWORD *)&v16.var5;
  obj = a3->var1._obj;
  var7 = (CGColorSpace *)v16.var7;
  if (obj && obj != (CGColorSpace *)v16.var7)
  {
    PCCFRefTraits<CGColorSpace *>::release(obj);
    var7 = (CGColorSpace *)v16.var7;
  }
  a3->var1._obj = var7;
  v16.var7 = 0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v16.var7);
  return PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v16);
}

void sub_1B2C6CBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  CGColorSpace **v9;

  PCCFRef<CGColorSpace *>::~PCCFRef(v9);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::setColor(OZChannelColorNoAlpha *this, const CMTime *a2, PCColor *a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  CGColorSpace *v11;
  float v12;
  uint64_t v13;

  v13 = 0;
  v12 = 0.0;
  if (*((_BYTE *)this + 1000))
    OZChannelColorNoAlpha::getPCColorSpace(this, &v11);
  else
    PCColor::getColorSpace(a3, &v11);
  PCColor::getRGB(a3, (float *)&v13 + 1, (float *)&v13, &v12, (const PCColorSpaceHandle *)&v11);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  v9 = *((_QWORD *)this + 17);
  v8 = (char *)this + 136;
  (*(void (**)(char *, const CMTime *, uint64_t, double))(v9 + 712))(v8, a2, a4, *((float *)&v13 + 1));
  (*(void (**)(char *, const CMTime *, uint64_t, double))(*((_QWORD *)v8 + 19) + 712))(v8 + 152, a2, a4, *(float *)&v13);
  return (*(uint64_t (**)(char *, const CMTime *, uint64_t, double))(*((_QWORD *)v8 + 38) + 712))(v8 + 304, a2, a4, v12);
}

void sub_1B2C6CCAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

OZChannelBase *OZChannelColorNoAlpha::setDefaultColor(OZChannelColorNoAlpha *this, PCColor *a2)
{
  OZChannelBase *result;
  CGColorSpace *v5;
  float v6;
  float v7;
  float v8;

  v8 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  if (*((_BYTE *)this + 1000))
    OZChannelColorNoAlpha::getPCColorSpace(this, &v5);
  else
    PCColor::getColorSpace(a2, &v5);
  PCColor::getRGB(a2, &v8, &v7, &v6, (const PCColorSpaceHandle *)&v5);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v5);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 136), v8);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 288), v7);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 440), v6);
  result = (OZChannelBase *)OZChannelBase::testFlag((OZChannelBase *)this, 0x200000000);
  if ((_DWORD)result)
    return OZChannelBase::setFlag((OZChannelBase *)this, 0x100000000, 1);
  return result;
}

void sub_1B2C6CD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

CGColorSpace **OZChannelColorNoAlpha::getDefaultColor(OZChannelColorNoAlpha *this, PCColor *a2)
{
  float DefaultValue;
  float v5;
  float v6;
  CGColorSpace *v8;

  DefaultValue = OZChannel::getDefaultValue((OZChannel *)((char *)this + 136));
  v5 = OZChannel::getDefaultValue((OZChannel *)((char *)this + 288));
  v6 = OZChannel::getDefaultValue((OZChannel *)((char *)this + 440));
  if (*((_BYTE *)this + 1000))
    OZChannelColorNoAlpha::getPCColorSpace(this, &v8);
  else
    PCColor::getColorSpace(a2, &v8);
  PCColor::setRGBA(a2, DefaultValue, v5, v6, 1.0, (OZChannelBase *)&v8);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
}

void sub_1B2C6CE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::parseEnd(OZChannelBase *this, PCSerializerReadStream *a2)
{
  unsigned int v3;
  void *ChannelRootBase;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t ValueAsInt;
  OZChannel *p_var13;
  CMTime v17;

  v17 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v3 = *((_DWORD *)a2 + 26);
  if (v3 <= 2)
  {
    if (OZChannelBase::getChannelRootBase(this))
    {
      ChannelRootBase = OZChannelBase::getChannelRootBase(this);
      (*(void (**)(CMTime *__return_ptr, void *, uint64_t))(*(_QWORD *)ChannelRootBase + 848))(&v17, ChannelRootBase, 1);
    }
    OZChannel::getValueAsDouble((OZChannel *)&this[1].var3, &v17, 0.0);
    v7 = v6;
    OZChannel::getValueAsDouble((OZChannel *)&this[2].var8, &v17, 0.0);
    v9 = v8;
    OZChannel::getValueAsDouble((OZChannel *)&this[3].var13, &v17, 0.0);
    v11 = v10;
    (*(void (**)(unsigned int *, CMTime *, _QWORD, double))(*(_QWORD *)&this[1].var3 + 712))(&this[1].var3, &v17, 0, v7);
    (*(void (**)(unint64_t *, CMTime *, _QWORD, double))(this[2].var8 + 712))(&this[2].var8, &v17, 0, v9);
    (*((void (**)(OZChannelTimeConverter **, CMTime *, _QWORD, double))this[3].var13 + 89))(&this[3].var13, &v17, 0, v11);
    v3 = *((_DWORD *)a2 + 26);
  }
  if (v3 <= 3)
    OZChannelColorNoAlpha::setColorSpaceIDNoConversion((uint64_t)this, (OZChannelBase *)2, 0);
  OZChannel::getValueAsDouble((OZChannel *)&this[5].var4, MEMORY[0x1E0CA2E68], 0.0);
  if (v12 == 0.0 || v12 == 1.0)
    OZChannelColorNoAlpha::setColorSpaceIDNoConversion((uint64_t)this, (OZChannelBase *)3, 0);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)&this[6].var9, MEMORY[0x1E0CA2E68], 0.0);
  if (!PCColorSpaceCache::intToColorSpaceID(ValueAsInt, 3u))
    OZChannelColorNoAlpha::setColorSpaceIDNoConversion((uint64_t)this, (OZChannelBase *)3, 0);
  OZChannel::setMin((OZChannel *)&this[1].var3, -6.0);
  OZChannel::setMax((OZChannel *)&this[1].var3, 8.0);
  OZChannel::setMin((OZChannel *)&this[2].var8, -6.0);
  OZChannel::setMax((OZChannel *)&this[2].var8, 8.0);
  p_var13 = (OZChannel *)&this[3].var13;
  OZChannel::setMin(p_var13, -6.0);
  OZChannel::setMax(p_var13, 8.0);
  return 1;
}

uint64_t OZChannelColorNoAlpha::setColorSpaceIDNoConversion(uint64_t a1, OZChannelBase *a2, char a3)
{
  OZChannel *v5;
  uint64_t ValueAsInt;
  uint64_t result;
  const PCString *v8;
  int v9;
  double v10;

  v5 = (OZChannel *)(a1 + 744);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 744), MEMORY[0x1E0CA2E68], 0.0);
  result = PCColorSpaceCache::intToColorSpaceID(ValueAsInt, 3u);
  if ((_DWORD)result != (_DWORD)a2)
  {
    v9 = result;
    v10 = (double)(int)OZChannelBase::setRangeName(a2, v8);
    result = OZChannel::setValue(v5, MEMORY[0x1E0CA2E68], v10, a3);
    if ((_DWORD)a2 == -1 || v9 == -1)
      return OZChannel::setDefaultValue(v5, v10);
  }
  return result;
}

uint64_t OZChannelColorNoAlpha::getColorSpaceID(OZChannelColorNoAlpha *this)
{
  uint64_t ValueAsInt;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 744), MEMORY[0x1E0CA2E68], 0.0);
  return PCColorSpaceCache::intToColorSpaceID(ValueAsInt, 3u);
}

uint64_t `non-virtual thunk to'OZChannelColorNoAlpha::parseEnd(OZChannelColorNoAlpha *this, PCSerializerReadStream *a2)
{
  OZChannelColorNoAlpha::parseEnd((OZChannelBase *)((char *)this - 16), a2);
  return 1;
}

const __CFString *OZChannelColorNoAlpha::getObjCWrapperName(OZChannelColorNoAlpha *this)
{
  return CFSTR("CHChannelColorNoAlpha");
}

uint64_t OZChannelColorNoAlpha::setIsColor(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1000) = a2;
  return this;
}

void `non-virtual thunk to'OZChannelColorNoAlpha::~OZChannelColorNoAlpha(OZChannelColorNoAlpha *this)
{
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZChannelColorNoAlpha *)((char *)this - 16));
}

{
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZChannelColorNoAlpha *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(void)::OZChannelColorNoAlpha_blackImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(void)::OZChannelColorNoAlpha_blackImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::_OZChannelColorNoAlpha_black;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *v0;

  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::_OZChannelColorNoAlpha_black)
  {
    v0 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *)operator new();
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::OZChannelColorNoAlpha_blackImpl(v0);
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::_OZChannelColorNoAlpha_black = (uint64_t)v0;
  }
}

void sub_1B2C6D25C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::OZChannelColorNoAlpha_blackImpl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65586B0;
  *((_QWORD *)this + 5) = &unk_1E65586D0;
  OZChannelImpl::setMin((OZChannelImpl *)this, -6.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 8.0);
  return this;
}

void sub_1B2C6D308(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(void)::OZChannelColorNoAlpha_whiteImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(void)::OZChannelColorNoAlpha_whiteImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::_OZChannelColorNoAlpha_white;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl *v0;

  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::_OZChannelColorNoAlpha_white)
  {
    v0 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl *)operator new();
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::OZChannelColorNoAlpha_whiteImpl(v0);
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::_OZChannelColorNoAlpha_white = (uint64_t)v0;
  }
}

void sub_1B2C6D3D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl *OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::OZChannelColorNoAlpha_whiteImpl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6558728;
  *((_QWORD *)this + 5) = &unk_1E6558748;
  OZChannelImpl::setMin((OZChannelImpl *)this, -6.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 8.0);
  return this;
}

void sub_1B2C6D480(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::getInstance(void)::OZChannelColorNoAlpha_redSample1Impl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::getInstance(void)::OZChannelColorNoAlpha_redSample1Impl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::_OZChannelColorNoAlpha_redSample1;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl *v0;

  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::_OZChannelColorNoAlpha_redSample1)
  {
    v0 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl *)operator new();
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::OZChannelColorNoAlpha_redSample1Impl(v0);
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::_OZChannelColorNoAlpha_redSample1 = (uint64_t)v0;
  }
}

void sub_1B2C6D54C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl *OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::OZChannelColorNoAlpha_redSample1Impl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.64);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.64, 1, 1);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65587A0;
  *((_QWORD *)this + 5) = &unk_1E65587C0;
  OZChannelImpl::setMin((OZChannelImpl *)this, -6.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 8.0);
  return this;
}

void sub_1B2C6D608(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::getInstance(void)::OZChannelColorNoAlpha_redSample2Impl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::getInstance(void)::OZChannelColorNoAlpha_redSample2Impl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::_OZChannelColorNoAlpha_redSample2;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl *v0;

  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::_OZChannelColorNoAlpha_redSample2)
  {
    v0 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl *)operator new();
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::OZChannelColorNoAlpha_redSample2Impl(v0);
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::_OZChannelColorNoAlpha_redSample2 = (uint64_t)v0;
  }
}

void sub_1B2C6D6D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl *OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::OZChannelColorNoAlpha_redSample2Impl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.21);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.21, 1, 1);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6558818;
  *((_QWORD *)this + 5) = &unk_1E6558838;
  OZChannelImpl::setMin((OZChannelImpl *)this, -6.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 8.0);
  return this;
}

void sub_1B2C6D790(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(void)::OZChannelColorNoAlpha_greyImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(void)::OZChannelColorNoAlpha_greyImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::_OZChannelColorNoAlpha_grey;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl *v0;

  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::_OZChannelColorNoAlpha_grey)
  {
    v0 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl *)operator new();
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::OZChannelColorNoAlpha_greyImpl(v0);
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::_OZChannelColorNoAlpha_grey = (uint64_t)v0;
  }
}

void sub_1B2C6D85C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl *OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::OZChannelColorNoAlpha_greyImpl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.5);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.5, 1, 1);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6558890;
  *((_QWORD *)this + 5) = &unk_1E65588B0;
  OZChannelImpl::setMin((OZChannelImpl *)this, -6.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 8.0);
  return this;
}

void sub_1B2C6D908(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::getInstance(void)::OZChannelColorNoAlpha_greenSample1Impl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::getInstance(void)::OZChannelColorNoAlpha_greenSample1Impl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::_OZChannelColorNoAlpha_greenSample1;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl *v0;

  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::_OZChannelColorNoAlpha_greenSample1)
  {
    v0 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl *)operator new();
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::OZChannelColorNoAlpha_greenSample1Impl(v0);
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::_OZChannelColorNoAlpha_greenSample1 = (uint64_t)v0;
  }
}

void sub_1B2C6D9D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl *OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::OZChannelColorNoAlpha_greenSample1Impl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.68);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.68, 1, 1);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6558908;
  *((_QWORD *)this + 5) = &unk_1E6558928;
  OZChannelImpl::setMin((OZChannelImpl *)this, -6.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 8.0);
  return this;
}

void sub_1B2C6DA90(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::getInstance(void)::OZChannelColorNoAlpha_greenSample2Impl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::getInstance(void)::OZChannelColorNoAlpha_greenSample2Impl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::_OZChannelColorNoAlpha_greenSample2;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl *v0;

  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::_OZChannelColorNoAlpha_greenSample2)
  {
    v0 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl *)operator new();
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::OZChannelColorNoAlpha_greenSample2Impl(v0);
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::_OZChannelColorNoAlpha_greenSample2 = (uint64_t)v0;
  }
}

void sub_1B2C6DB5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl *OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::OZChannelColorNoAlpha_greenSample2Impl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.43);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.43, 1, 1);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6558980;
  *((_QWORD *)this + 5) = &unk_1E65589A0;
  OZChannelImpl::setMin((OZChannelImpl *)this, -6.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 8.0);
  return this;
}

void sub_1B2C6DC18(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::getInstance(void)::OZChannelColorNoAlpha_blueSample1Impl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::getInstance(void)::OZChannelColorNoAlpha_blueSample1Impl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::_OZChannelColorNoAlpha_blueSample1;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl *v0;

  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::_OZChannelColorNoAlpha_blueSample1)
  {
    v0 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl *)operator new();
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::OZChannelColorNoAlpha_blueSample1Impl(v0);
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::_OZChannelColorNoAlpha_blueSample1 = (uint64_t)v0;
  }
}

void sub_1B2C6DCE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl *OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::OZChannelColorNoAlpha_blueSample1Impl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.77);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.77, 1, 1);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65589F8;
  *((_QWORD *)this + 5) = &unk_1E6558A18;
  OZChannelImpl::setMin((OZChannelImpl *)this, -6.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 8.0);
  return this;
}

void sub_1B2C6DDA0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::getInstance(void)::OZChannelColorNoAlpha_blueSample2Impl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::getInstance(void)::OZChannelColorNoAlpha_blueSample2Impl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::_OZChannelColorNoAlpha_blueSample2;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl *v0;

  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::_OZChannelColorNoAlpha_blueSample2)
  {
    v0 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl *)operator new();
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::OZChannelColorNoAlpha_blueSample2Impl(v0);
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::_OZChannelColorNoAlpha_blueSample2 = (uint64_t)v0;
  }
}

void sub_1B2C6DE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl *OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::OZChannelColorNoAlpha_blueSample2Impl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.75);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.75, 1, 1);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6558A70;
  *((_QWORD *)this + 5) = &unk_1E6558A90;
  OZChannelImpl::setMin((OZChannelImpl *)this, -6.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 8.0);
  return this;
}

void sub_1B2C6DF18(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(void)::OZChannelColorNoAlpha_colorInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(void)::OZChannelColorNoAlpha_colorInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::_OZChannelColorNoAlpha_colorInfo;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *v0;

  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::_OZChannelColorNoAlpha_colorInfo)
  {
    v0 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)operator new();
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::OZChannelColorNoAlpha_colorInfo(v0);
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::_OZChannelColorNoAlpha_colorInfo = (uint64_t)v0;
  }
}

void sub_1B2C6DFE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::OZChannelColorNoAlpha_colorInfo(OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 0.01, 0.001, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6558AE8;
  *((_QWORD *)this + 10) = &unk_1E6558B08;
  return this;
}

void sub_1B2C6E094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(void)::OZChannelColorNoAlpha_gammaImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(void)::OZChannelColorNoAlpha_gammaImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::_OZChannelColorNoAlpha_gamma;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl *v0;

  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::_OZChannelColorNoAlpha_gamma)
  {
    v0 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl *)operator new();
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::OZChannelColorNoAlpha_gammaImpl(v0);
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::_OZChannelColorNoAlpha_gamma = (uint64_t)v0;
  }
}

void sub_1B2C6E160(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl *OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::OZChannelColorNoAlpha_gammaImpl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 2.2);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 2.2, 0, 1);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6558B60;
  *((_QWORD *)this + 5) = &unk_1E6558B80;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2C6E224(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(void)::OZChannelColorNoAlpha_colorSpaceIDImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(void)::OZChannelColorNoAlpha_colorSpaceIDImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::_OZChannelColorNoAlpha_colorSpaceID;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl *v0;
  const PCString *v1;

  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::_OZChannelColorNoAlpha_colorSpaceID)
  {
    v0 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl *)operator new();
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::OZChannelColorNoAlpha_colorSpaceIDImpl(v0, v1);
    OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::_OZChannelColorNoAlpha_colorSpaceID = (uint64_t)v0;
  }
}

void sub_1B2C6E2F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl *OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::OZChannelColorNoAlpha_colorSpaceIDImpl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl *this, const PCString *a2)
{
  OZChannelEnum *v3;
  OZCurve *OZChannelEnumCurve;
  const PCString *v5;
  int v6;

  v3 = (OZChannelEnum *)OZChannelBase::setRangeName((OZChannelBase *)3, a2);
  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(v3, (double)(int)v3);
  v6 = OZChannelBase::setRangeName((OZChannelBase *)3, v5);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, (double)v6, 0, 1);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6558BD8;
  *((_QWORD *)this + 5) = &unk_1E6558BF8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2C6E3B4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1B2C6E4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40CC6A35F7);
  _Unwind_Resume(a1);
}

void sub_1B2C6EF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelCrop::OZChannelCrop(OZChannelCrop *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  OZChannelCrop::OZChannelCrop_valueImpl *v19;
  OZChannelImpl *v20;
  TXParagraphStyleFolder_Factory *v21;
  OZFactoryBase *v22;
  OZChannelCrop::OZChannelCrop_valueImpl *v23;
  OZChannelImpl *v24;
  TXParagraphStyleFolder_Factory *v25;
  OZFactoryBase *v26;
  OZChannelCrop::OZChannelCrop_valueImpl *v27;
  OZChannelImpl *v28;
  TXParagraphStyleFolder_Factory *v29;
  OZFactoryBase *v30;
  OZChannelCrop::OZChannelCrop_valueImpl *v31;
  PCString v32;

  Instance = (OZFactory *)OZChannelCrop_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(_QWORD *)this = &off_1E6558C50;
  *((_QWORD *)this + 2) = &unk_1E6558F98;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Left"));
  v20 = a7;
  if (!a7)
    v20 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v19);
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 136), &v32, (OZChannelFolder *)this, 1u, 0, v20, a8);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Right"));
  v24 = a7;
  if (!a7)
    v24 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v23);
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 288), &v32, (OZChannelFolder *)this, 2u, 0, v24, a8);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v25, v26);
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Bottom"));
  v28 = a7;
  if (!a7)
    v28 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v27);
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 440), &v32, (OZChannelFolder *)this, 3u, 0, v28, a8);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v29, v30);
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Top"));
  if (!a7)
    a7 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v31);
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 592), &v32, (OZChannelFolder *)this, 4u, 0, a7, a8);
  PCString::~PCString(&v32);
}

void sub_1B2C6F328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannel *v13;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void sub_1B2C6F3A4()
{
  JUMPOUT(0x1B2C6F394);
}

void OZChannelCrop::OZChannelCrop(OZChannelCrop *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  TXParagraphStyleFolder_Factory *v6;
  OZFactoryBase *v7;
  OZChannelCrop::OZChannelCrop_valueImpl *v8;
  OZChannelImpl *Instance;
  TXParagraphStyleFolder_Factory *v10;
  OZFactoryBase *v11;
  OZChannelCrop::OZChannelCrop_valueImpl *v12;
  OZChannelImpl *v13;
  TXParagraphStyleFolder_Factory *v14;
  OZFactoryBase *v15;
  OZChannelCrop::OZChannelCrop_valueImpl *v16;
  OZChannelImpl *v17;
  TXParagraphStyleFolder_Factory *v18;
  OZFactoryBase *v19;
  OZChannelCrop::OZChannelCrop_valueImpl *v20;
  OZChannelImpl *v21;
  PCString v22;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_1E6558C50;
  *((_QWORD *)v6 + 2) = &unk_1E6558F98;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v22, CFSTR("Channel Left"));
  Instance = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v8);
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 136), &v22, (OZChannelFolder *)this, 1u, 0, Instance, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v22, CFSTR("Channel Right"));
  v13 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v12);
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 288), &v22, (OZChannelFolder *)this, 2u, 0, v13, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v14, v15);
  PCURL::PCURL((PCURL *)&v22, CFSTR("Channel Bottom"));
  v17 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v16);
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 440), &v22, (OZChannelFolder *)this, 3u, 0, v17, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v18, v19);
  PCURL::PCURL((PCURL *)&v22, CFSTR("Channel Top"));
  v21 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v20);
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 592), &v22, (OZChannelFolder *)this, 4u, 0, v21, 0);
  PCString::~PCString(&v22);
}

void sub_1B2C6F52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannel *v13;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void sub_1B2C6F598(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2C6F588);
}

void sub_1B2C6F5A8()
{
  JUMPOUT(0x1B2C6F588);
}

void OZChannelCrop::OZChannelCrop(OZChannelCrop *this, const OZChannelCrop *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E6558C50;
  *(_QWORD *)(v5 + 16) = &unk_1E6558F98;
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((_QWORD *)this + 17) = &off_1E6551358;
  *((_QWORD *)this + 19) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((_QWORD *)this + 36) = &off_1E6551358;
  *((_QWORD *)this + 38) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((_QWORD *)this + 55) = &off_1E6551358;
  *((_QWORD *)this + 57) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)a2 + 592), (OZChannelFolder *)this);
  *((_QWORD *)this + 74) = &off_1E6551358;
  *((_QWORD *)this + 76) = &unk_1E65516B8;
}

void sub_1B2C6F68C(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannel *v2;
  OZChannel *v3;
  OZChannel *v4;

  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

OZChannelCrop *OZChannelCrop::clone(OZChannelCrop *this)
{
  OZChannelCrop *v2;

  v2 = (OZChannelCrop *)operator new();
  OZChannelCrop::OZChannelCrop(v2, this, 0);
  return v2;
}

void sub_1B2C6F71C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40044ED5BALL);
  _Unwind_Resume(a1);
}

void OZChannelCrop::copy(OZChannelCrop *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
  OZChannel::copy((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)v4 + 592), a3);
}

void OZChannelCrop::getValue(OZChannelCrop *this, const CMTime *a2, double *a3, double *a4, double *a5, double *a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, a7);
  *(_QWORD *)a3 = v14;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, a7);
  *(_QWORD *)a4 = v15;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 440), a2, a7);
  *(_QWORD *)a5 = v16;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 592), a2, a7);
  *(_QWORD *)a6 = v17;
}

uint64_t OZChannelCrop::setValue(OZChannelCrop *this, const CMTime *a2, double a3, double a4, double a5, double a6)
{
  OZChannel::setValue((OZChannel *)((char *)this + 136), a2, a3, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 288), a2, a4, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 440), a2, a5, 0);
  return OZChannel::setValue((OZChannel *)((char *)this + 592), a2, a6, 0);
}

const __CFString *OZChannelCrop::getObjCWrapperName(OZChannelCrop *this)
{
  return CFSTR("CHChannelCrop");
}

void OZChannelCrop::~OZChannelCrop(OZChannelCrop *this)
{
  OZChannelCrop::~OZChannelCrop(this);
  JUMPOUT(0x1B5E29170);
}

{
  *(_QWORD *)this = &off_1E6558C50;
  *((_QWORD *)this + 2) = &unk_1E6558F98;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 592));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

void `non-virtual thunk to'OZChannelCrop::~OZChannelCrop(OZChannelCrop *this)
{
  OZChannelCrop::~OZChannelCrop((OZChannelCrop *)((char *)this - 16));
}

{
  OZChannelCrop::~OZChannelCrop((OZChannelCrop *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelCrop::OZChannelCrop_valueImpl::getInstance(OZChannelCrop::OZChannelCrop_valueImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelCrop::OZChannelCrop_valueImpl::getInstance(void)::OZChannelCrop_valueImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelCrop::OZChannelCrop_valueImpl::getInstance(void)::OZChannelCrop_valueImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelCrop::OZChannelCrop_valueImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelCrop::OZChannelCrop_valueImpl::_OZChannelCrop_value;
}

void std::__call_once_param<std::tuple<OZChannelCrop::OZChannelCrop_valueImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelCrop::OZChannelCrop_valueImpl *v0;

  if (!OZChannelCrop::OZChannelCrop_valueImpl::_OZChannelCrop_value)
  {
    v0 = (OZChannelCrop::OZChannelCrop_valueImpl *)operator new();
    OZChannelCrop::OZChannelCrop_valueImpl::OZChannelCrop_valueImpl(v0);
    OZChannelCrop::OZChannelCrop_valueImpl::_OZChannelCrop_value = (uint64_t)v0;
  }
}

void sub_1B2C6F9F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelCrop::OZChannelCrop_valueImpl *OZChannelCrop::OZChannelCrop_valueImpl::OZChannelCrop_valueImpl(OZChannelCrop::OZChannelCrop_valueImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((OZChannelCrop::OZChannelCrop_valueImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6559008;
  *((_QWORD *)this + 5) = &unk_1E6559028;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2C6FAA0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

const __CFString *OZChannelCurve::getObjCWrapperName(OZChannelCurve *this)
{
  return CFSTR("CHChannelCurve");
}

void OZChannelCurve::OZChannelCurve(OZChannelCurve *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  TXParagraphStyleFolder_Factory *v8;
  OZFactoryBase *v9;
  OZChannelCurve *v10;
  OZChannelCurve *OZChannelCurveInfo;
  uint64_t OZChannelCurveImpl;
  PCString v13;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, 0, 0);
  *(_QWORD *)v8 = &off_1E6559080;
  *((_QWORD *)v8 + 2) = &unk_1E6559428;
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel Shape Animation"));
  OZChannelVertexFolder::OZChannelVertexFolder((OZChannelCurve *)((char *)this + 152), &v13, a4, 1u, 0x1008Au);
  PCString::~PCString(&v13);
  OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 288));
  v10 = OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 520));
  OZChannelCurveInfo = (OZChannelCurve *)OZChannelCurve::createOZChannelCurveInfo(v10);
  *((_QWORD *)this + 16) = OZChannelCurveInfo;
  *((_QWORD *)this + 17) = OZChannelCurveInfo;
  OZChannelCurveImpl = OZChannelCurve::createOZChannelCurveImpl(OZChannelCurveInfo);
  *((_QWORD *)this + 14) = OZChannelCurveImpl;
  *((_QWORD *)this + 15) = OZChannelCurveImpl;
  *((_QWORD *)this + 35) = this;
  *((_WORD *)this + 396) = 0;
  *((_QWORD *)this + 100) = 0;
}

void sub_1B2C6FBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel *v10;
  OZChannelVertexFolder *v11;
  OZDynamicCurve *v12;

  OZDynamicCurve::~OZDynamicCurve(v12);
  OZChannelVertexFolder::~OZChannelVertexFolder(v11);
  OZChannel::~OZChannel(v10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelCurve::createOZChannelCurveInfo(OZChannelCurve *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelCurve::createOZChannelCurveInfo(void)::_OZChannelCurveInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelCurve::createOZChannelCurveInfo(void)::_OZChannelCurveInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelCurve::createOZChannelCurveInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelCurve::_OZChannelCurveInfo;
}

uint64_t OZChannelCurve::createOZChannelCurveImpl(OZChannelCurve *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelCurve::createOZChannelCurveImpl(void)::_OZChannelCurveImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelCurve::createOZChannelCurveImpl(void)::_OZChannelCurveImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelCurve::createOZChannelCurveImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelCurve::_OZChannelCurveImpl;
}

void OZChannelCurve::OZChannelCurve(OZChannelCurve *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  OZChannelCurve *v13;
  OZChannelCurve *OZChannelCurveInfo;
  uint64_t OZChannelCurveImpl;
  PCString v16;

  Instance = (OZFactory *)OZChannelCurve_Factory::getInstance(this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a3, a4, a5, 0, 0);
  *(_QWORD *)this = &off_1E6559080;
  *((_QWORD *)this + 2) = &unk_1E6559428;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v16, CFSTR("Channel Shape Animation"));
  OZChannelVertexFolder::OZChannelVertexFolder((OZChannelCurve *)((char *)this + 152), &v16, a3, 1u, 0x1008Au);
  PCString::~PCString(&v16);
  OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 288));
  v13 = OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 520));
  OZChannelCurveInfo = (OZChannelCurve *)OZChannelCurve::createOZChannelCurveInfo(v13);
  *((_QWORD *)this + 16) = OZChannelCurveInfo;
  *((_QWORD *)this + 17) = OZChannelCurveInfo;
  OZChannelCurveImpl = OZChannelCurve::createOZChannelCurveImpl(OZChannelCurveInfo);
  *((_QWORD *)this + 14) = OZChannelCurveImpl;
  *((_QWORD *)this + 15) = OZChannelCurveImpl;
  *((_QWORD *)this + 35) = this;
  *((_WORD *)this + 396) = 0;
  *((_QWORD *)this + 100) = 0;
}

void sub_1B2C6FDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel *v10;
  OZChannelVertexFolder *v11;
  OZDynamicCurve *v12;

  OZDynamicCurve::~OZDynamicCurve(v12);
  OZChannelVertexFolder::~OZChannelVertexFolder(v11);
  OZChannel::~OZChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelCurve::OZChannelCurve(OZChannelCurve *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;
  OZChannelCurve *v7;
  OZChannelCurve *OZChannelCurveInfo;
  uint64_t OZChannelCurveImpl;
  PCString v10;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, 0, 0);
  *(_QWORD *)v5 = &off_1E6559080;
  *((_QWORD *)v5 + 2) = &unk_1E6559428;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel Shape Animation"));
  OZChannelVertexFolder::OZChannelVertexFolder((OZChannelCurve *)((char *)this + 152), &v10, 0, 1u, 0x1008Au);
  PCString::~PCString(&v10);
  OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 288));
  v7 = OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 520));
  OZChannelCurveInfo = (OZChannelCurve *)OZChannelCurve::createOZChannelCurveInfo(v7);
  *((_QWORD *)this + 16) = OZChannelCurveInfo;
  *((_QWORD *)this + 17) = OZChannelCurveInfo;
  OZChannelCurveImpl = OZChannelCurve::createOZChannelCurveImpl(OZChannelCurveInfo);
  *((_QWORD *)this + 14) = OZChannelCurveImpl;
  *((_QWORD *)this + 15) = OZChannelCurveImpl;
  *((_QWORD *)this + 25) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 35) = this;
  *((_WORD *)this + 396) = 0;
  *((_QWORD *)this + 100) = 0;
}

void sub_1B2C6FF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel *v10;
  OZChannelVertexFolder *v11;
  OZDynamicCurve *v12;

  OZDynamicCurve::~OZDynamicCurve(v12);
  OZChannelVertexFolder::~OZChannelVertexFolder(v11);
  OZChannel::~OZChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelCurve::OZChannelCurve(OZChannelCurve *this, const OZChannelCurve *a2, OZChannelFolder *a3)
{
  _QWORD *v6;
  double v7;

  OZChannel::OZChannel((OZChannel *)this, (const OZChannelBase *)a2, a3);
  *v6 = &off_1E6559080;
  v6[2] = &unk_1E6559428;
  OZChannelVertexFolder::OZChannelVertexFolder((OZChannelVertexFolder *)(v6 + 19), (const OZChannelCurve *)((char *)a2 + 152), a3);
  OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 288));
  OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 520));
  *((_OWORD *)this + 47) = *((_OWORD *)a2 + 47);
  *((_OWORD *)this + 48) = *((_OWORD *)a2 + 48);
  *((_QWORD *)this + 98) = *((_QWORD *)a2 + 98);
  OZDynamicCurve::operator=((uint64_t)this + 288, (os_unfair_lock_s *)a2 + 72);
  v7 = OZDynamicCurve::operator=((uint64_t)this + 520, (os_unfair_lock_s *)a2 + 130);
  (*(void (**)(OZChannelCurve *, double))(*(_QWORD *)this + 856))(this, v7);
  *((_QWORD *)this + 35) = this;
  *((_WORD *)this + 396) = 0;
  *((_QWORD *)this + 100) = 0;
}

void sub_1B2C7004C(_Unwind_Exception *a1)
{
  OZChannel *v1;
  OZChannelVertexFolder *v2;
  OZDynamicCurve *v3;

  OZDynamicCurve::~OZDynamicCurve(v3);
  OZChannelVertexFolder::~OZChannelVertexFolder(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelCurve::~OZChannelCurve(OZChannel *this)
{
  this->var0 = (void **)&off_1E6559080;
  this->var2 = (void **)&unk_1E6559428;
  OZDynamicCurve::~OZDynamicCurve((OZDynamicCurve *)&this[3].var8);
  OZDynamicCurve::~OZDynamicCurve((OZDynamicCurve *)&this[1].var17);
  OZChannelVertexFolder::~OZChannelVertexFolder((OZChannelVertexFolder *)&this[1]);
  OZChannel::~OZChannel(this);
}

{
  OZChannelCurve::~OZChannelCurve(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelCurve::~OZChannelCurve(OZChannelCurve *this)
{
  OZChannelCurve::~OZChannelCurve((OZChannel *)((char *)this - 16));
}

{
  OZChannelCurve::~OZChannelCurve((OZChannel *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

OZChannelCurve *OZChannelCurve::clone(OZChannelCurve *this)
{
  OZChannelCurve *v2;

  v2 = (OZChannelCurve *)operator new();
  OZChannelCurve::OZChannelCurve(v2, this, 0);
  return v2;
}

void sub_1B2C70180(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C401ABBD6EFLL);
  _Unwind_Resume(a1);
}

uint64_t OZChannelCurve::copy(OZChannel *this, const OZChannelBase *a2, char a3)
{
  __n128 v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;

  OZChannel::copy(this, a2, a3);
  if (a2)
  {
    if (v6)
    {
      v7 = v6;
      *(_OWORD *)&this[4].var18 = *(_OWORD *)&v6[188]._os_unfair_lock_opaque;
      *(_OWORD *)&this[5].var1 = *(_OWORD *)&v6[192]._os_unfair_lock_opaque;
      *(_QWORD *)&this[5].var3 = *(_QWORD *)&v6[196]._os_unfair_lock_opaque;
      OZDynamicCurve::operator=((uint64_t)&this[1].var17, v6 + 72);
      v5.n128_f64[0] = OZDynamicCurve::operator=((uint64_t)&this[3].var8, v7 + 130);
    }
  }
  this[1].var6 = this->var6;
  return (*((uint64_t (**)(OZChannel *, __n128))this->var0 + 107))(this, v5);
}

uint64_t OZChannelCurve::assign(OZChannel *this, const OZChannelBase *a2)
{
  __n128 v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;

  OZChannel::assign(this, a2);
  if (a2)
  {
    if (v5)
    {
      v6 = v5;
      *(_OWORD *)&this[4].var18 = *(_OWORD *)&v5[188]._os_unfair_lock_opaque;
      *(_OWORD *)&this[5].var1 = *(_OWORD *)&v5[192]._os_unfair_lock_opaque;
      *(_QWORD *)&this[5].var3 = *(_QWORD *)&v5[196]._os_unfair_lock_opaque;
      OZDynamicCurve::operator=((uint64_t)&this[1].var17, v5 + 72);
      v4.n128_f64[0] = OZDynamicCurve::operator=((uint64_t)&this[3].var8, v6 + 130);
    }
  }
  this[1].var6 = this->var6;
  return (*((uint64_t (**)(OZChannel *, __n128))this->var0 + 107))(this, v4);
}

uint64_t OZChannelCurve::compare(OZChannel *this, const OZChannelBase *a2)
{
  uint64_t result;
  void *v5;
  void *v6;

  result = OZChannel::compare(this, a2);
  if ((_DWORD)result)
  {
    result = 0;
    if (a2)
    {
      if (v5)
      {
        v6 = v5;
        if (OZDynamicCurve::operator==((uint64_t)&this[1].var17, (uint64_t)v5 + 288)
          && OZDynamicCurve::operator==((uint64_t)&this[3].var8, (uint64_t)v6 + 520))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

void OZChannelCurve::copyKeyframesFromChannel(OZChannel *this, const CMTime *a2, OZChannelBase *lpsrc)
{
  OZChannel *v5;
  OZChannel *v6;
  void **v7;
  uint64_t v8;
  OZChannelInfo **p_var17;
  unint64_t *p_var8;
  OZChannelInfo **v11;
  unint64_t *v12;
  uint64_t KeyframeInterpolation;
  uint64_t KeyframeFlags;
  double v15;
  void *Keyframe;
  __n128 v17;
  _QWORD *value;
  unint64_t v19;
  unsigned int v20;
  OZCoreGlobals *v21;
  OZCoreGlobals *Instance;
  char v23;
  OZCoreGlobals *v24;
  double v25;
  unsigned int v26;
  CMTime v27;
  _QWORD v28[3];
  CMTime v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  CMTime __p;
  CMTime v41;
  CMTime v42;
  BOOL KeyframeEnabled;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  CMTime v50;
  void **v51;
  void **v52;
  CMTime v53;
  CMTime v54;
  CMTime v55;

  if (lpsrc)
  {
    if (v5)
    {
      v6 = v5;
      memset(&v53, 0, sizeof(v53));
      (*((void (**)(CMTime *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(&v53, this, a2);
      OZChannel::getKeyframes(v6, 0, &v51);
      v7 = v51;
      if (v52 == v51)
      {
        (*((void (**)(OZChannel *, _QWORD))this->var0 + 36))(this, 0);
        OZChannel::getValueAsDouble(v6, MEMORY[0x1E0CA2E68], 0.0);
        OZChannel::setInitialValue(this, v25, 0);
      }
      else
      {
        v8 = 0;
        v26 = 0;
        p_var17 = &v6[1].var17;
        p_var8 = &v6[3].var8;
        v11 = &this[1].var17;
        v12 = &this[3].var8;
        do
        {
          v50 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          v48 = 0.0;
          v49 = 0.0;
          v46 = 0.0;
          v47 = 0.0;
          v44 = 0.0;
          v45 = 0.0;
          KeyframeEnabled = 0;
          OZChannel::getKeyframe(v6, v7[v8], &v50, &v48);
          OZChannel::getKeyframeInputTangents(v6, v51[v8], &v47, &v46, 0);
          OZChannel::getKeyframeOutputTangents(v6, v51[v8], &v45, &v44, 0);
          KeyframeInterpolation = OZChannel::getKeyframeInterpolation(v6, v51[v8]);
          KeyframeFlags = OZChannel::getKeyframeFlags(v6, v51[v8]);
          KeyframeEnabled = OZChannel::getKeyframeEnabled(v6, v51[v8]);
          if (!v26)
          {
            v55 = v53;
            v54 = v50;
            PC_CMTimeSaferSubtract(&v55, &v54, (uint64_t)&v42);
            v53 = v42;
          }
          memset(&v42, 0, sizeof(v42));
          (*((void (**)(CMTime *__return_ptr, OZChannel *))this->var0 + 40))(&v42, this);
          v15 = *((double *)this->var16 + 5);
          v55 = v53;
          v54 = v50;
          PC_CMTimeSaferAdd(&v55, &v54, (uint64_t)&__p);
          v55 = __p;
          v54 = v42;
          PC_CMTimeSaferSubtract(&v55, &v54, (uint64_t)&v41);
          OZChannel::setKeyframe(this, &v41, v48 / v15, 0);
          v55 = v53;
          v54 = v50;
          PC_CMTimeSaferAdd(&v55, &v54, (uint64_t)&__p);
          v55 = __p;
          v54 = v42;
          PC_CMTimeSaferSubtract(&v55, &v54, (uint64_t)&v41);
          Keyframe = (void *)OZChannel::getKeyframe(this, &v41);
          OZChannel::setKeyframeFlags(this, Keyframe, KeyframeFlags);
          OZChannel::setKeyframeEnabled(this, Keyframe, KeyframeEnabled);
          OZChannel::setKeyframeInterpolation(this, Keyframe, KeyframeInterpolation);
          OZChannel::setKeyframeInputTangents(this, Keyframe, v47, v46 / v15, 0);
          OZChannel::setKeyframeOutputTangents(this, Keyframe, v45, v44 / v15, 0);
          v38 = 0.0;
          v39 = 0.0;
          v36 = 0.0;
          v37 = 0.0;
          v34 = 0.0;
          v35 = 0.0;
          v33 = 0.0;
          v32 = 0;
          memset(&v41, 0, sizeof(v41));
          memset(&__p, 0, sizeof(__p));
          v30 = 0;
          v31 = 0;
          (*((void (**)(OZChannelInfo **, CMTime *))*p_var17 + 36))(&v6[1].var17, &v41);
          (*(void (**)(unint64_t *, CMTime *))(*p_var8 + 288))(&v6[3].var8, &__p);
          v29 = v50;
          v55 = v53;
          memset(v28, 0, sizeof(v28));
          v54 = v50;
          PC_CMTimeSaferAdd(&v55, &v54, (uint64_t)&v27);
          v55 = v27;
          v54 = v42;
          v17.n128_f64[0] = PC_CMTimeSaferSubtract(&v55, &v54, (uint64_t)v28);
          value = *(_QWORD **)&v41.timescale;
          if (*(_QWORD *)&v41.timescale != v41.value)
          {
            v19 = 0;
            v20 = 1;
            value = (_QWORD *)v41.value;
            do
            {
              (*((void (**)(OZChannelInfo **, _QWORD, uint64_t, __n128))*p_var17 + 55))(&v6[1].var17, value[v19], 1, v17);
              (*(void (**)(unint64_t *, _QWORD, uint64_t))(*p_var8 + 440))(&v6[3].var8, *(_QWORD *)(__p.value + 8 * v19), 1);
              (*((void (**)(OZChannelInfo **, _QWORD, CMTime *, double *))*p_var17 + 79))(&v6[1].var17, *(_QWORD *)(v41.value + 8 * v19), &v29, &v37);
              (*(void (**)(unint64_t *, _QWORD, CMTime *, double *))(*p_var8 + 632))(&v6[3].var8, *(_QWORD *)(__p.value + 8 * v19), &v29, &v36);
              (*((void (**)(OZChannelInfo **, _QWORD, CMTime *, double *))*p_var17 + 80))(&v6[1].var17, *(_QWORD *)(v41.value + 8 * v19), &v29, &v35);
              (*(void (**)(unint64_t *, _QWORD, CMTime *, double *))(*p_var8 + 640))(&v6[3].var8, *(_QWORD *)(__p.value + 8 * v19), &v29, &v34);
              (*((void (**)(OZChannelInfo **, _QWORD, CMTime *, double *, double *))*p_var17 + 42))(&v6[1].var17, *(_QWORD *)(v41.value + 8 * v19), &v29, &v49, &v39);
              (*(void (**)(unint64_t *, _QWORD, CMTime *, double *, double *))(*p_var8 + 336))(&v6[3].var8, *(_QWORD *)(__p.value + 8 * v19), &v29, &v49, &v38);
              (*(void (**)(unint64_t *, _QWORD, CMTime *, BOOL *))(*p_var8 + 368))(&v6[3].var8, *(_QWORD *)(__p.value + 8 * v19), &v29, &KeyframeEnabled);
              (*(void (**)(unint64_t *, _QWORD, unsigned __int8 *))(*p_var8 + 400))(&v6[3].var8, *(_QWORD *)(__p.value + 8 * v19), &v32);
              v21 = (OZCoreGlobals *)(*(uint64_t (**)(unint64_t *, _QWORD, CMTime *, double *))(*p_var8 + 176))(&v6[3].var8, *(_QWORD *)(__p.value + 8 * v19), &v29, &v33);
              Instance = (OZCoreGlobals *)OZCoreGlobals::getInstance(v21);
              v23 = *((_BYTE *)Instance + 8);
              *(_BYTE *)(OZCoreGlobals::getInstance(Instance) + 8) = 1;
              (*((void (**)(OZChannelInfo **, _QWORD *, uint64_t *, double))*v11 + 27))(&this[1].var17, v28, &v31, v49);
              (*(void (**)(unint64_t *, _QWORD *, uint64_t *, double))(*v12 + 216))(&this[3].var8, v28, &v30, v49);
              (*((void (**)(OZChannelInfo **, uint64_t, _QWORD *, double, double))*v11 + 20))(&this[1].var17, v31, v28, v49, v39);
              (*(void (**)(unint64_t *, uint64_t, _QWORD *, double, double))(*v12 + 160))(&this[3].var8, v30, v28, v49, v38);
              (*((void (**)(OZChannelInfo **, uint64_t, _QWORD *, double))*v11 + 77))(&this[1].var17, v31, v28, v37);
              (*(void (**)(unint64_t *, uint64_t, _QWORD *, double))(*v12 + 616))(&this[3].var8, v30, v28, v36);
              (*((void (**)(OZChannelInfo **, uint64_t, _QWORD *, double))*v11 + 78))(&this[1].var17, v31, v28, v35);
              (*(void (**)(unint64_t *, uint64_t, _QWORD *, double))(*v12 + 624))(&this[3].var8, v30, v28, v34);
              (*((void (**)(OZChannelInfo **, uint64_t, _QWORD))*v11 + 55))(&this[1].var17, v31, 0);
              (*(void (**)(unint64_t *, uint64_t, _QWORD))(*v12 + 440))(&this[3].var8, v30, 0);
              (*((void (**)(OZChannelInfo **, uint64_t, BOOL, _QWORD *))*v11 + 45))(&this[1].var17, v31, KeyframeEnabled, v28);
              (*((void (**)(OZChannelInfo **, uint64_t, _QWORD))*v11 + 49))(&this[1].var17, v31, v32);
              (*((void (**)(OZChannelInfo **, uint64_t, _QWORD *, double))*v11 + 21))(&this[1].var17, v31, v28, v33);
              (*(void (**)(unint64_t *, uint64_t, BOOL, _QWORD *))(*v12 + 360))(&this[3].var8, v30, KeyframeEnabled, v28);
              (*(void (**)(unint64_t *, uint64_t, _QWORD *, double))(*v12 + 168))(&this[3].var8, v30, v28, v33);
              v24 = (OZCoreGlobals *)(*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*v12 + 392))(&this[3].var8, v30, v32);
              *(_BYTE *)(OZCoreGlobals::getInstance(v24) + 8) = v23;
              v19 = v20;
              value = (_QWORD *)v41.value;
              ++v20;
            }
            while (v19 < (*(_QWORD *)&v41.timescale - v41.value) >> 3);
          }
          if (__p.value)
          {
            *(_QWORD *)&__p.timescale = __p.value;
            operator delete((void *)__p.value);
            value = (_QWORD *)v41.value;
          }
          if (value)
          {
            *(_QWORD *)&v41.timescale = value;
            operator delete(value);
          }
          v7 = v51;
          v8 = ++v26;
        }
        while (v26 < (unint64_t)(v52 - v51));
      }
      (*((void (**)(OZChannel *, __n128))this->var0 + 107))(this, v17);
      if (v51)
      {
        v52 = v51;
        operator delete(v51);
      }
    }
  }
}

void sub_1B2C70B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 216);
  if (v37)
  {
    *(_QWORD *)(v35 - 208) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

OZChannelFolder *OZChannelCurve::setIsSpline(OZChannelCurve *this, uint64_t a2)
{
  OZChannel::setIsSpline((OZChannel *)this, a2);
  return OZChannelFolder::setIsSpline((OZChannelFolder *)((char *)this + 152), a2);
}

OZChannelFolder *OZChannelCurve::setValueAndIgnoreRecordOption(OZChannelCurve *this, const CMTime *a2)
{
  OZChannel::setValueAndIgnoreRecordOption((OZChannel *)this, a2);
  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 656))(this, 1);
  return OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
}

uint64_t OZChannelCurve::setValue(OZChannelCurve *this, const CMTime *a2)
{
  void *ChannelRootBase;
  double v5;
  CMTime v7[2];
  CMTime v8;
  CMTime time2;

  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  if (OZChannel::isAnimated((OZChannel *)this))
  {
    ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
    if (ChannelRootBase)
    {
      (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)ChannelRootBase + 712))(v7);
      v8 = v7[0];
      time2 = *a2;
      if (CMTimeCompare(v7, &time2))
      {
        if (((*(uint64_t (**)(OZChannelCurve *, _QWORD))(*(_QWORD *)this + 552))(this, 0) & 1) == 0)
        {
          (*(void (**)(CMTime *__return_ptr, OZChannelCurve *, CMTime *))(*(_QWORD *)this + 328))(v7, this, &v8);
          OZChannel::getValueAsDouble((OZChannel *)this, MEMORY[0x1E0CA2E68], 0.0);
          OZChannel::setKeyframe((OZChannel *)this, v7, v5, 1);
          OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), &v8);
        }
      }
    }
    OZChannel::addKeypointAt((OZChannel *)this, a2);
    OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
  }
  return (*(uint64_t (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 656))(this, 1);
}

BOOL OZChannelCurve::removeValue(OZChannelCurve *this, const CMTime *a2)
{
  _BOOL8 v4;

  v4 = OZChannel::removeValue((OZChannel *)this, a2);
  OZChannelFolder::deleteKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
  return v4;
}

BOOL OZChannelCurve::moveValue(OZChannelCurve *this, const CMTime *a2, const CMTime *a3, uint64_t a4)
{
  _BOOL8 v7;
  CMTime v9;

  v7 = OZChannel::moveValue((OZChannel *)this, a2, a3, a4);
  OZChannelFolder::moveKeypointTo((OZChannelFolder *)((char *)this + 152), a2, a3, 0, &v9);
  return v7;
}

uint64_t OZChannelCurve::setValue(OZChannelCurve *this, const CMTime *a2, double a3)
{
  if (OZChannel::isAnimated((OZChannel *)this))
  {
    OZChannel::setValue((OZChannel *)this, a2, a3, 0);
    OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
  }
  return (*(uint64_t (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 656))(this, 1);
}

OZChannelFolder *OZChannelCurve::addKeypointAt(OZChannelCurve *this, const CMTime *a2)
{
  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  if (((*(uint64_t (**)(OZChannelCurve *))(*(_QWORD *)this + 488))(this) & 1) == 0)
    (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 480))(this, 1);
  OZChannel::addKeypointAt((OZChannel *)this, a2);
  return OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
}

uint64_t OZChannelCurve::moveKeypointTo@<X0>(OZChannelCurve *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  uint64_t result;
  uint64_t v13;
  CMTime v14;

  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  if (((*(uint64_t (**)(OZChannelCurve *))(*(_QWORD *)this + 488))(this) & 1) == 0)
    (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 480))(this, 1);
  *(_OWORD *)&a6->value = *(_OWORD *)&a3->value;
  a6->epoch = a3->epoch;
  (*(void (**)(CMTime *__return_ptr, OZChannelCurve *, const CMTime *))(*(_QWORD *)this + 328))(&v14, this, a2);
  result = OZChannel::getKeyframe((OZChannel *)this, &v14);
  if (result)
  {
    v13 = result;
    OZChannelFolder::moveKeypointTo((OZChannelFolder *)((char *)this + 152), a2, a6, a4, &v14);
    *a6 = v14;
    (*(void (**)(CMTime *__return_ptr, OZChannelCurve *, CMTime *))(*(_QWORD *)this + 328))(&v14, this, a6);
    return (*(uint64_t (**)(OZChannelCurve *, uint64_t, CMTime *, uint64_t, uint64_t))(*(_QWORD *)this + 840))(this, v13, &v14, a5, a4);
  }
  return result;
}

OZChannelFolder *OZChannelCurve::deleteKeypointAt(OZChannelCurve *this, const CMTime *a2)
{
  OZChannelFolder *result;
  CMTime v5;

  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  (*(void (**)(CMTime *__return_ptr, OZChannelCurve *, const CMTime *))(*(_QWORD *)this + 328))(&v5, this, a2);
  result = (OZChannelFolder *)OZChannel::getKeyframe((OZChannel *)this, &v5);
  if (result)
  {
    OZChannel::deleteKeyframe((OZChannel *)this, result);
    return OZChannelFolder::deleteKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
  }
  return result;
}

void OZChannelCurve::resetToDefault(OZChannelCurve *this, uint64_t a2)
{
  OZChannel::resetToDefault((OZChannel *)this, a2);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 152), a2);
}

OZChannelFolder *OZChannelCurve::setExtrapolation(OZChannel *this, uint64_t a2, uint64_t a3)
{
  OZChannelFolder *v6;

  v6 = (OZChannelFolder *)&this[1];
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  OZChannel::setExtrapolation(this, a2, a3);
  return OZChannelFolder::setExtrapolation(v6, a2, a3);
}

OZChannelFolder *OZChannelCurve::generateKeys(OZChannel *this, uint64_t a2, uint64_t a3)
{
  OZChannelFolder *v6;

  v6 = (OZChannelFolder *)&this[1];
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  OZChannel::generateKeys(this, a2, a3);
  return OZChannelFolder::generateKeys(v6, a2, a3);
}

uint64_t OZChannelCurve::setValue(OZChannelCurve *this, const CMTime *a2, Float64 a3, double a4, double a5)
{
  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  if (OZChannel::isAnimated((OZChannel *)this))
  {
    OZChannelCurve::insertVertex(this, a2, a3, a4, a5);
    OZChannel::setValue((OZChannel *)this, a2, 0.0, 0);
    OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
  }
  return (*(uint64_t (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 656))(this, 1);
}

void *OZChannelCurve::insertVertex(OZChannelCurve *this, const CMTime *a2, Float64 a3, double a4, double a5)
{
  void *v11;
  void *v12;

  v11 = 0;
  v12 = 0;
  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  if (OZChannel::isAnimated((OZChannel *)this))
  {
    OZChannel::addKeypointAt((OZChannel *)this, a2);
    OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
  }
  OZDynamicCurve::setKeypoint((OZChannelCurve *)((char *)this + 288), a2, a3, a4, &v12);
  OZDynamicCurve::setKeypoint((OZChannelCurve *)((char *)this + 520), a2, a3, a5, &v11);
  (*(void (**)(OZChannelCurve *))(*(_QWORD *)this + 856))(this);
  OZDynamicCurve::setDefaultAtCurrentTime((OZChannelCurve *)((char *)this + 288), (char *)v12, a2);
  OZDynamicCurve::setDefaultAtCurrentTime((OZChannelCurve *)((char *)this + 520), (char *)v11, a2);
  OZDynamicCurve::reparametrizeCurve((OZChannelCurve *)((char *)this + 288));
  OZDynamicCurve::reparametrizeCurve((OZChannelCurve *)((char *)this + 520));
  return v12;
}

uint64_t OZChannelCurve::setValue(OZChannelCurve *this, const CMTime *a2, Float64 a3, double a4)
{
  double v9;

  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  if (OZChannel::isAnimated((OZChannel *)this))
  {
    v9 = 0.0;
    OZDynamicCurve::getPoint((OZChannelCurve *)((char *)this + 520), a2, a3, &v9);
    OZChannelCurve::insertVertex(this, a2, a3, a4, v9);
    OZChannel::setValue((OZChannel *)this, a2, 0.0, 0);
    OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
  }
  return (*(uint64_t (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 656))(this, 1);
}

uint64_t OZChannelCurve::getValueXAsInt(OZChannelCurve *this, const CMTime *a2, double a3)
{
  return (int)(*(double (**)(OZChannelCurve *, const CMTime *, double))(*(_QWORD *)this + 896))(this, a2, a3);
}

double OZChannelCurve::getValueXAsDouble(OZChannelCurve *this, const CMTime *a2, Float64 a3)
{
  double v4;

  v4 = 0.0;
  OZDynamicCurve::getPoint((OZChannelCurve *)((char *)this + 288), a2, a3, &v4);
  return v4;
}

uint64_t OZChannelCurve::getValueYAsInt(OZChannelCurve *this, const CMTime *a2, double a3)
{
  return (int)(*(double (**)(OZChannelCurve *, const CMTime *, double))(*(_QWORD *)this + 912))(this, a2, a3);
}

double OZChannelCurve::getValueYAsDouble(OZChannelCurve *this, const CMTime *a2, Float64 a3)
{
  double v4;

  v4 = 0.0;
  OZDynamicCurve::getPoint((OZChannelCurve *)((char *)this + 520), a2, a3, &v4);
  return v4;
}

BOOL OZChannelCurve::removeValue(OZChannelCurve *this, const CMTime *a2, Float64 a3)
{
  OZDynamicCurve *v6;
  OZDynamicCurve *v7;
  _BOOL8 v8;
  OZChannelBase *v9;
  __int128 v11;
  OZChannelBase *v12;

  v12 = 0;
  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  v11 = 0uLL;
  v6 = (OZChannelCurve *)((char *)this + 288);
  OZDynamicCurve::getKeypointHandle((OZChannelCurve *)((char *)this + 288), a2, a3, (void **)&v11 + 1);
  v7 = (OZChannelCurve *)((char *)this + 520);
  OZDynamicCurve::getKeypointHandle((OZChannelCurve *)((char *)this + 520), a2, a3, (void **)&v11);
  v8 = v11 != 0;
  if (v11 != 0)
  {
    v9 = (OZChannelBase *)((char *)this + 152);
    OZChannelBase::willBeModified(v9, 1);
    OZDynamicCurve::getVertexChannel(v6, *((char **)&v11 + 1), (OZChannelVertexFolder **)&v12);
    if (v12)
      OZChannelFolder::removeDescendant((OZChannelFolder *)v9, v12);
    OZDynamicCurve::getVertexChannel(v7, (char *)v11, (OZChannelVertexFolder **)&v12);
    if (v12)
      OZChannelFolder::removeDescendant((OZChannelFolder *)v9, v12);
    OZDynamicCurve::delKeypoint(v6, *((char **)&v11 + 1), a2);
    OZDynamicCurve::delKeypoint(v7, (char *)v11, a2);
  }
  return v8;
}

void *OZChannelCurve::addVertex(OZChannelCurve *this, const CMTime *a2, double a3, double a4)
{
  void *v9;
  void *v10;
  double v11;

  v10 = 0;
  v11 = 0.0;
  v9 = 0;
  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  OZDynamicCurve::getCurrentMaxValueU((OZChannelCurve *)((char *)this + 288), a2, &v11);
  OZDynamicCurve::setKeypoint((OZChannelCurve *)((char *)this + 288), a2, v11 + 1.0, a3, &v10);
  OZDynamicCurve::getCurrentMaxValueU((OZChannelCurve *)((char *)this + 520), a2, &v11);
  OZDynamicCurve::setKeypoint((OZChannelCurve *)((char *)this + 520), a2, v11 + 1.0, a4, &v9);
  OZDynamicCurve::setDefaultAtCurrentTime((OZChannelCurve *)((char *)this + 288), (char *)v10, a2);
  OZDynamicCurve::setDefaultAtCurrentTime((OZChannelCurve *)((char *)this + 520), (char *)v9, a2);
  (*(void (**)(OZChannelCurve *))(*(_QWORD *)this + 856))(this);
  return v10;
}

uint64_t OZChannelCurve::addVertices(uint64_t a1, const CMTime *a2, double **a3)
{
  double *v6;
  double *v7;
  double v8;
  double v9;
  void *v11;
  void *v12;
  Float64 v13;
  Float64 v14;

  v13 = 0.0;
  v14 = 0.0;
  v11 = 0;
  v12 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 464))(a1, 1);
  OZDynamicCurve::getCurrentMaxValueU((OZDynamicCurve *)(a1 + 288), a2, &v14);
  OZDynamicCurve::getCurrentMaxValueU((OZDynamicCurve *)(a1 + 520), a2, &v13);
  v7 = *a3;
  v6 = a3[1];
  while (v7 != v6)
  {
    v8 = *v7;
    v9 = v7[1];
    v7 += 2;
    v13 = v13 + 1.0;
    v14 = v14 + 1.0;
    OZDynamicCurve::setKeypoint((OZDynamicCurve *)(a1 + 288), a2, v14, v8, &v12);
    OZDynamicCurve::setKeypoint((OZDynamicCurve *)(a1 + 520), a2, v13, v9, &v11);
  }
  OZDynamicCurve::setDefaultAtCurrentTime((OZDynamicCurve *)(a1 + 288), a2);
  OZDynamicCurve::setDefaultAtCurrentTime((OZDynamicCurve *)(a1 + 520), a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1);
}

BOOL OZChannelCurve::deleteAllVertices(OZChannelCurve *this)
{
  OZChannelFolder *v2;

  v2 = (OZChannelFolder *)((char *)this + 152);
  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  OZChannelFolder::removeAllDescendants(v2, 1);
  OZDynamicCurve::delAllKeypoints((OZChannelCurve *)((char *)this + 288));
  return OZDynamicCurve::delAllKeypoints((OZChannelCurve *)((char *)this + 520));
}

void *OZChannelCurve::getVertex(OZChannelCurve *this, const CMTime *a2, Float64 a3)
{
  void *v7;
  void *v8;

  v7 = 0;
  v8 = 0;
  OZDynamicCurve::getKeypointHandle((OZChannelCurve *)((char *)this + 288), a2, a3, &v8);
  OZDynamicCurve::getKeypointHandle((OZChannelCurve *)((char *)this + 520), a2, a3, &v7);
  return v8;
}

void *OZChannelCurve::getFirstVertex(OZChannelCurve *this, const CMTime *a2, int a3)
{
  OZDynamicCurve *v5;
  OZDynamicCurve *v6;
  Float64 v8;
  Float64 v9;
  void *v10;
  void *v11;

  v10 = 0;
  v11 = 0;
  if (a3)
  {
    OZDynamicCurve::getFirstValidKeypointHandle((OZChannelCurve *)((char *)this + 288), a2, &v11);
    OZDynamicCurve::getFirstValidKeypointHandle((OZChannelCurve *)((char *)this + 520), a2, &v10);
  }
  else
  {
    v8 = 0.0;
    v9 = 0.0;
    v5 = (OZChannelCurve *)((char *)this + 288);
    OZDynamicCurve::getFirstKeypoint((OZChannelCurve *)((char *)this + 288), a2, &v9, 0);
    v6 = (OZChannelCurve *)((char *)this + 520);
    OZDynamicCurve::getFirstKeypoint(v6, a2, &v8, 0);
    OZDynamicCurve::getKeypointHandle(v5, a2, v9, &v11);
    OZDynamicCurve::getKeypointHandle(v6, a2, v8, &v10);
  }
  return v11;
}

void *OZChannelCurve::getLastVertex(OZChannelCurve *this, const CMTime *a2, int a3)
{
  OZDynamicCurve *v5;
  OZDynamicCurve *v6;
  Float64 v8;
  Float64 v9;
  void *v10;
  void *v11;

  v10 = 0;
  v11 = 0;
  if (a3)
  {
    OZDynamicCurve::getLastValidKeypointHandle((OZChannelCurve *)((char *)this + 288), a2, &v11);
    OZDynamicCurve::getLastValidKeypointHandle((OZChannelCurve *)((char *)this + 520), a2, &v10);
  }
  else
  {
    v8 = 0.0;
    v9 = 0.0;
    v5 = (OZChannelCurve *)((char *)this + 288);
    OZDynamicCurve::getLastKeypoint((OZChannelCurve *)((char *)this + 288), a2, &v9, 0);
    v6 = (OZChannelCurve *)((char *)this + 520);
    OZDynamicCurve::getLastKeypoint(v6, a2, &v8, 0);
    OZDynamicCurve::getKeypointHandle(v5, a2, v9, &v11);
    OZDynamicCurve::getKeypointHandle(v6, a2, v8, &v10);
  }
  return v11;
}

void *OZChannelCurve::getNextVertex(uint64_t a1, const CMTime *a2, char *a3, char *a4, int a5)
{
  OZDynamicCurve *v8;
  OZDynamicCurve *v9;
  void *v11;
  void *v12;

  v11 = 0;
  v12 = 0;
  v8 = (OZDynamicCurve *)(a1 + 288);
  v9 = (OZDynamicCurve *)(a1 + 520);
  if (a5)
  {
    OZDynamicCurve::getNextValidKeypointHandle(v8, a2, a3, &v12);
    OZDynamicCurve::getNextValidKeypointHandle(v9, a2, a4, &v11);
  }
  else
  {
    OZDynamicCurve::getNextKeypointHandle(v8, a2, a3, &v12);
    OZDynamicCurve::getNextKeypointHandle(v9, a2, a4, &v11);
  }
  return v12;
}

void *OZChannelCurve::getPreviousVertex(uint64_t a1, const CMTime *a2, char *a3, char *a4, int a5)
{
  OZDynamicCurve *v8;
  OZDynamicCurve *v9;
  void *v11;
  void *v12;

  v11 = 0;
  v12 = 0;
  v8 = (OZDynamicCurve *)(a1 + 288);
  v9 = (OZDynamicCurve *)(a1 + 520);
  if (a5)
  {
    OZDynamicCurve::getPreviousValidKeypointHandle(v8, a2, a3, &v12);
    OZDynamicCurve::getPreviousValidKeypointHandle(v9, a2, a4, &v11);
  }
  else
  {
    OZDynamicCurve::getPreviousKeypointHandle(v8, a2, a3, &v12);
    OZDynamicCurve::getPreviousKeypointHandle(v9, a2, a4, &v11);
  }
  return v12;
}

void OZChannelCurve::getEnabledVerticesList(os_unfair_lock_s *this@<X0>, const CMTime *a2@<X1>, char **a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  void *__p;
  void *v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  __p = 0;
  v23 = 0;
  v24 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  OZDynamicCurve::getKeypointValidHandleList(this + 72, (uint64_t)a2, &v25);
  OZDynamicCurve::getKeypointValidHandleList(this + 130, (uint64_t)a2, &__p);
  std::vector<OZVertex2D>::reserve((void **)a3, (v26 - (_BYTE *)v25) >> 3);
  v6 = v26;
  if (v26 != v25)
  {
    v7 = 0;
    v8 = 0;
    v9 = a3 + 2;
    v10 = a3[1];
    v6 = v25;
    do
    {
      v11 = v6[v7];
      v12 = *((_QWORD *)__p + v7);
      if ((unint64_t)v10 >= *v9)
      {
        v13 = (v10 - *a3) >> 4;
        if ((unint64_t)(v13 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v14 = *v9 - (_QWORD)*a3;
        v15 = v14 >> 3;
        if (v14 >> 3 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a3 + 2), v16);
        else
          v17 = 0;
        v18 = &v17[16 * v13];
        *(_QWORD *)v18 = v11;
        *((_QWORD *)v18 + 1) = v12;
        v20 = *a3;
        v19 = a3[1];
        v21 = v18;
        if (v19 != *a3)
        {
          do
          {
            *((_OWORD *)v21 - 1) = *((_OWORD *)v19 - 1);
            v21 -= 16;
            v19 -= 16;
          }
          while (v19 != v20);
          v19 = *a3;
        }
        v10 = v18 + 16;
        *a3 = v21;
        a3[1] = v18 + 16;
        a3[2] = &v17[16 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v10 = v11;
        *((_QWORD *)v10 + 1) = v12;
        v10 += 16;
      }
      a3[1] = v10;
      v6 = v25;
      v7 = ++v8;
    }
    while (v8 < (unint64_t)((v26 - (_BYTE *)v25) >> 3));
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
    v6 = v25;
  }
  if (v6)
  {
    v26 = v6;
    operator delete(v6);
  }
}

void sub_1B2C71BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void std::vector<OZVertex2D>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void OZChannelCurve::getVerticesList(OZChannelCurve *this@<X0>, char **a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  void *__p;
  void *v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  __p = 0;
  v21 = 0;
  v22 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  OZDynamicCurve::getKeypointHandleList((uint64_t)this + 288, (char **)&v23);
  OZDynamicCurve::getKeypointHandleList((uint64_t)this + 520, (char **)&__p);
  std::vector<OZVertex2D>::reserve((void **)a2, (v24 - (_BYTE *)v23) >> 3);
  v4 = v24;
  if (v24 != v23)
  {
    v5 = 0;
    v6 = 0;
    v7 = a2 + 2;
    v8 = a2[1];
    v4 = v23;
    do
    {
      v9 = v4[v5];
      v10 = *((_QWORD *)__p + v5);
      if ((unint64_t)v8 >= *v7)
      {
        v11 = (v8 - *a2) >> 4;
        if ((unint64_t)(v11 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v12 = *v7 - (_QWORD)*a2;
        v13 = v12 >> 3;
        if (v12 >> 3 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a2 + 2), v14);
        else
          v15 = 0;
        v16 = &v15[16 * v11];
        *(_QWORD *)v16 = v9;
        *((_QWORD *)v16 + 1) = v10;
        v18 = *a2;
        v17 = a2[1];
        v19 = v16;
        if (v17 != *a2)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 16;
            v17 -= 16;
          }
          while (v17 != v18);
          v17 = *a2;
        }
        v8 = v16 + 16;
        *a2 = v19;
        a2[1] = v16 + 16;
        a2[2] = &v15[16 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v8 = v9;
        *((_QWORD *)v8 + 1) = v10;
        v8 += 16;
      }
      a2[1] = v8;
      v4 = v23;
      v5 = ++v6;
    }
    while (v6 < (unint64_t)((v24 - (_BYTE *)v23) >> 3));
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
    v4 = v23;
  }
  if (v4)
  {
    v24 = v4;
    operator delete(v4);
  }
}

void sub_1B2C71E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelCurve::setVertexValue(uint64_t a1, char *a2, char *a3, const CMTime *a4, double a5, double a6)
{
  Float64 v13;

  (*(void (**)(uint64_t, const CMTime *))(*(_QWORD *)a1 + 736))(a1, a4);
  v13 = 0.0;
  OZDynamicCurve::getKeypoint((OZDynamicCurve *)(a1 + 288), a2, a4, &v13, 0);
  OZDynamicCurve::setKeypoint((OZDynamicCurve *)(a1 + 288), a2, a4, v13, a5);
  return OZDynamicCurve::setKeypoint((OZDynamicCurve *)(a1 + 520), a3, a4, v13, a6);
}

BOOL OZChannelCurve::getVertexValue(uint64_t a1, char *a2, char *a3, CMTime *a4, double *a5, double *a6)
{
  OZDynamicCurve::getKeypoint((OZDynamicCurve *)(a1 + 288), a2, a4, 0, a5);
  return OZDynamicCurve::getKeypoint((OZDynamicCurve *)(a1 + 520), a3, a4, 0, a6);
}

BOOL OZChannelCurve::getVertexParametricValue(uint64_t a1, char *a2, int a3, CMTime *a4, double *a5)
{
  return OZDynamicCurve::getKeypoint((OZDynamicCurve *)(a1 + 288), a2, a4, a5, 0);
}

uint64_t OZChannelCurve::offsetVertex(uint64_t a1, char *a2, char *a3, const CMTime *a4, double a5, double a6)
{
  double v13;
  Float64 v14;

  (*(void (**)(uint64_t, const CMTime *))(*(_QWORD *)a1 + 736))(a1, a4);
  v13 = 0.0;
  v14 = 0.0;
  OZDynamicCurve::getKeypoint((OZDynamicCurve *)(a1 + 288), a2, a4, &v14, &v13);
  OZDynamicCurve::setKeypoint((OZDynamicCurve *)(a1 + 288), a2, a4, v14, v13 + a5);
  OZDynamicCurve::getKeypoint((OZDynamicCurve *)(a1 + 520), a3, a4, &v14, &v13);
  return OZDynamicCurve::setKeypoint((OZDynamicCurve *)(a1 + 520), a3, a4, v14, v13 + a6);
}

void OZChannelCurve::offsetCurve(OZChannelCurve *this, const CMTime *a2, double a3, double a4)
{
  char **v8;
  uint64_t v9;
  unsigned int v10;
  void *__p;
  void *v12;
  uint64_t v13;
  void *v14;
  char **v15;
  uint64_t v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  __p = 0;
  v12 = 0;
  v13 = 0;
  OZDynamicCurve::getKeypointHandleList((uint64_t)this + 288, (char **)&v14);
  OZDynamicCurve::getKeypointHandleList((uint64_t)this + 520, (char **)&__p);
  v8 = v15;
  if (v15 != v14)
  {
    v9 = 0;
    v10 = 1;
    v8 = (char **)v14;
    do
    {
      OZChannelCurve::offsetVertex((uint64_t)this, v8[v9], *((char **)__p + v9), a2, a3, a4);
      v9 = v10;
      v8 = (char **)v14;
      ++v10;
    }
    while (v9 != ((char *)v15 - (_BYTE *)v14) >> 3);
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
    v8 = (char **)v14;
  }
  if (v8)
  {
    v15 = v8;
    operator delete(v8);
  }
}

void sub_1B2C72194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelCurve::getCurveValueWithParameter(OZChannelCurve *this, const CMTime *a2, Float64 a3, double *a4, double *a5)
{
  OZDynamicCurve::getPoint((OZChannelCurve *)((char *)this + 288), a2, a3, a4);
  return OZDynamicCurve::getPoint((OZChannelCurve *)((char *)this + 520), a2, a3, a5);
}

uint64_t OZChannelCurve::setVertexInterpolation(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  OZDynamicCurve *v6;

  v6 = (OZDynamicCurve *)(a1 + 288);
  OZDynamicCurve::setKeypointInterpolation((OZDynamicCurve *)(a1 + 288), a2, a4);
  return OZDynamicCurve::setKeypointInterpolation(v6, a3, a4);
}

uint64_t OZChannelCurve::isCurveFlattened(OZChannelCurve *this)
{
  uint64_t result;

  result = OZDynamicCurve::isCurveFlattened((OZChannelCurve *)((char *)this + 288));
  if ((_DWORD)result)
    return OZDynamicCurve::isCurveFlattened((OZChannelCurve *)((char *)this + 520));
  return result;
}

uint64_t OZChannelCurve::flattenCurve(OZChannelCurve *this)
{
  OZDynamicCurve::flattenCurve((OZChannelCurve *)((char *)this + 288));
  return OZDynamicCurve::flattenCurve((OZChannelCurve *)((char *)this + 520));
}

BOOL OZChannelCurve::isVertexFlattened(uint64_t a1, char *a2, char *a3)
{
  BOOL v5;
  BOOL v7[2];

  *(_WORD *)v7 = 0;
  OZDynamicCurve::isKeypointFlattened((OZDynamicCurve *)(a1 + 288), a2, &v7[1]);
  OZDynamicCurve::isKeypointFlattened((OZDynamicCurve *)(a1 + 520), a3, v7);
  v5 = !v7[1] || !v7[0];
  return !v5;
}

uint64_t OZChannelCurve::getInputTangents(uint64_t a1, char *a2, char *a3, CMTime *a4, double *a5, double *a6)
{
  OZDynamicCurve::getKeypointInputHandles((OZDynamicCurve *)(a1 + 288), a2, a4, a5);
  return OZDynamicCurve::getKeypointInputHandles((OZDynamicCurve *)(a1 + 520), a3, a4, a6);
}

uint64_t OZChannelCurve::getOutputTangents(uint64_t a1, char *a2, char *a3, CMTime *a4, double *a5, double *a6)
{
  OZDynamicCurve::getKeypointOutputHandles((OZDynamicCurve *)(a1 + 288), a2, a4, a5);
  return OZDynamicCurve::getKeypointOutputHandles((OZDynamicCurve *)(a1 + 520), a3, a4, a6);
}

uint64_t OZChannelCurve::setInputTangents(uint64_t a1, char *a2, char *a3, const CMTime *a4, double a5, double a6)
{
  (*(void (**)(uint64_t, const CMTime *))(*(_QWORD *)a1 + 736))(a1, a4);
  OZDynamicCurve::setKeypointInputHandles((OZDynamicCurve *)(a1 + 288), a2, a4, a5);
  return OZDynamicCurve::setKeypointInputHandles((OZDynamicCurve *)(a1 + 520), a3, a4, a6);
}

uint64_t OZChannelCurve::setOutputTangents(uint64_t a1, char *a2, char *a3, const CMTime *a4, double a5, double a6)
{
  (*(void (**)(uint64_t, const CMTime *))(*(_QWORD *)a1 + 736))(a1, a4);
  OZDynamicCurve::setKeypointOutputHandles((OZDynamicCurve *)(a1 + 288), a2, a4, a5);
  return OZDynamicCurve::setKeypointOutputHandles((OZDynamicCurve *)(a1 + 520), a3, a4, a6);
}

double OZChannelCurve::getVertexDerivatives(_QWORD *a1, char *a2, char *a3, CMTime *a4, double *a5, double *a6, double *a7, double *a8)
{
  OZDynamicCurve *v16;
  OZDynamicCurve *v17;
  double result;
  char *v19;
  char *NextVertex;
  char *v21;
  char *FirstVertex;
  _QWORD *v23;
  char *LastVertex;
  char *v25;
  _QWORD *v26;
  char *v27;
  BOOL v28;
  int v29;
  char *v30;
  BOOL v31;
  char v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  char *v43;
  int v44;
  char *v45;
  char *PreviousVertex;
  char *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;

  v57 = 0.0;
  v55 = 0.0;
  v56 = 0.0;
  v54 = 0.0;
  v16 = (OZDynamicCurve *)(a1 + 36);
  OZDynamicCurve::getKeypointInputHandles((OZDynamicCurve *)(a1 + 36), a2, a4, &v57);
  v17 = (OZDynamicCurve *)(a1 + 65);
  OZDynamicCurve::getKeypointInputHandles((OZDynamicCurve *)(a1 + 65), a3, a4, &v56);
  OZDynamicCurve::getKeypointOutputHandles(v16, a2, a4, &v55);
  OZDynamicCurve::getKeypointOutputHandles((OZDynamicCurve *)(a1 + 65), a3, a4, &v54);
  result = 0.0000001;
  if (fabs(v57) < 0.0000001 && fabs(v56) < 0.0000001 && fabs(v55) < 0.0000001 && fabs(v54) < 0.0000001)
  {
    PreviousVertex = (char *)OZChannelCurve::getPreviousVertex((uint64_t)a1, a4, a2, a3, 1);
    v47 = v19;
    NextVertex = (char *)OZChannelCurve::getNextVertex((uint64_t)a1, a4, a2, a3, 1);
    v43 = NextVertex;
    v45 = v21;
    if (PreviousVertex && v47)
    {
      FirstVertex = NextVertex;
    }
    else
    {
      LOBYTE(v53) = 0;
      OZDynamicCurve::isClosedCurve(v16, (BOOL *)&v53);
      if (LOBYTE(v53) && (v23 = (_QWORD *)a1[33]) != 0)
      {
        FirstVertex = v43;
        if ((int)((v23[1] - *v23) >> 3) >= 6)
        {
          LastVertex = (char *)OZChannelCurve::getLastVertex((OZChannelCurve *)a1, a4, 1);
          FirstVertex = v43;
          PreviousVertex = LastVertex;
          v47 = v25;
        }
      }
      else
      {
        FirstVertex = v43;
      }
    }
    if (!FirstVertex || !v45)
    {
      LOBYTE(v53) = 0;
      OZDynamicCurve::isClosedCurve(v16, (BOOL *)&v53);
      if (LOBYTE(v53) && (v26 = (_QWORD *)a1[33]) != 0)
      {
        FirstVertex = v43;
        if ((int)((v26[1] - *v26) >> 3) >= 6)
        {
          FirstVertex = (char *)OZChannelCurve::getFirstVertex((OZChannelCurve *)a1, a4, 1);
          v45 = v27;
        }
      }
      else
      {
        FirstVertex = v43;
      }
    }
    if (PreviousVertex)
      v28 = v47 == 0;
    else
      v28 = 1;
    v29 = !v28;
    v44 = v29;
    if (!v28 || FirstVertex && v45)
    {
      v30 = FirstVertex;
      v52 = 0.0;
      v53 = 0.0;
      v50 = 0.0;
      v51 = 0.0;
      v48 = 0.0;
      v49 = 0.0;
      OZDynamicCurve::getKeypoint(v16, a2, a4, 0, &v51);
      OZDynamicCurve::getKeypoint(v17, a3, a4, 0, &v50);
      if (v44)
      {
        OZDynamicCurve::getKeypoint(v16, PreviousVertex, a4, 0, &v53);
        OZDynamicCurve::getKeypoint(v17, v47, a4, 0, &v52);
      }
      else
      {
        v52 = v50;
        v53 = v51;
      }
      if (v30)
        v31 = v45 == 0;
      else
        v31 = 1;
      v32 = !v31;
      if (v31)
      {
        v35 = v50;
        v36 = v51;
        v33 = v50;
        v34 = v51;
      }
      else
      {
        OZDynamicCurve::getKeypoint(v16, v30, a4, 0, &v49);
        OZDynamicCurve::getKeypoint(v17, v45, a4, 0, &v48);
        v33 = v48;
        v34 = v49;
        v35 = v50;
        v36 = v51;
      }
      v37 = sqrt((v53 - v34) * (v53 - v34) + (v52 - v33) * (v52 - v33));
      v38 = sqrt((v36 - v34) * (v36 - v34) + (v35 - v33) * (v35 - v33));
      v39 = sqrt((v53 - v36) * (v53 - v36) + (v52 - v35) * (v52 - v35));
      v40 = (v53 - v34) / v37 * v39 / 3.0;
      v57 = v40;
      v41 = (v52 - v33) / v37 * v39 / 3.0;
      v42 = (v34 - v53) / v37 * v38 / 3.0;
      v55 = v42;
      v56 = v41;
      result = (v33 - v52) / v37 * v38 / 3.0;
      v54 = result;
      if ((v44 & 1) == 0)
      {
        v40 = -v42;
        v57 = -v42;
        v41 = -result;
        v56 = -result;
      }
      if ((v32 & 1) == 0)
      {
        result = -v41;
        v54 = -v41;
        v55 = -v40;
      }
    }
  }
  if (a5)
  {
    result = v57;
    *a5 = v57;
  }
  if (a6)
  {
    result = v56;
    *a6 = v56;
  }
  if (a7)
  {
    result = v55;
    *a7 = v55;
  }
  if (a8)
  {
    result = v54;
    *a8 = v54;
  }
  return result;
}

uint64_t OZChannelCurve::setCurveInterpolation(OZChannelCurve *this, uint64_t a2)
{
  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  OZDynamicCurve::setCurveInterpolation((OZChannelCurve *)((char *)this + 288), a2);
  return OZDynamicCurve::setCurveInterpolation((OZChannelCurve *)((char *)this + 520), a2);
}

uint64_t OZChannelCurve::closeCurve(OZChannelCurve *this)
{
  OZDynamicCurve::closeCurve((OZChannelCurve *)((char *)this + 288));
  return OZDynamicCurve::closeCurve((OZChannelCurve *)((char *)this + 520));
}

uint64_t OZChannelCurve::openCurve(uint64_t a1, void *a2, void *a3)
{
  OZDynamicCurve::openCurve((OZDynamicCurve *)(a1 + 288), a2);
  return OZDynamicCurve::openCurve((OZDynamicCurve *)(a1 + 520), a3);
}

uint64_t OZChannelCurve::openCurve(OZChannelCurve *this)
{
  OZDynamicCurve::openCurve((OZChannelCurve *)((char *)this + 288), 0);
  return OZDynamicCurve::openCurve((OZChannelCurve *)((char *)this + 520), 0);
}

uint64_t OZChannelCurve::reverseWindingOrder(OZChannelCurve *this)
{
  OZDynamicCurve::reverseWindingOrder((OZChannelCurve *)((char *)this + 288));
  return OZDynamicCurve::reverseWindingOrder((OZChannelCurve *)((char *)this + 520));
}

void OZChannelCurve::transformCurve(uint64_t a1, const CMTime *a2, double *a3, double *a4)
{
  OZDynamicCurve *v8;
  OZDynamicCurve *v9;
  char **v10;
  unint64_t v11;
  unsigned int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  Float64 v33;
  void *__p;
  void *v35;
  uint64_t v36;
  void *v37;
  char **v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;

  v44 = 0.0;
  v45 = 0.0;
  v42 = 0.0;
  v43 = 0.0;
  v40 = 0.0;
  v41 = 0.0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  __p = 0;
  v35 = 0;
  v36 = 0;
  v8 = (OZDynamicCurve *)(a1 + 288);
  v33 = 0.0;
  OZDynamicCurve::getKeypointHandleList(a1 + 288, (char **)&v37);
  v9 = (OZDynamicCurve *)(a1 + 520);
  OZDynamicCurve::getKeypointHandleList((uint64_t)v9, (char **)&__p);
  v10 = v38;
  if (v38 != v37)
  {
    v11 = 0;
    v12 = 1;
    v10 = (char **)v37;
    do
    {
      OZDynamicCurve::breakKeypointHandles(v8, v10[v11], 1);
      OZDynamicCurve::breakKeypointHandles(v9, *((char **)__p + v11), 1);
      OZDynamicCurve::getKeypoint(v8, *((char **)v37 + v11), a2, &v33, &v41);
      OZDynamicCurve::getKeypoint(v9, *((char **)__p + v11), a2, 0, &v40);
      OZDynamicCurve::getKeypointInputHandles(v8, *((char **)v37 + v11), a2, &v45);
      OZDynamicCurve::getKeypointInputHandles(v9, *((char **)__p + v11), a2, &v44);
      OZDynamicCurve::getKeypointOutputHandles(v8, *((char **)v37 + v11), a2, &v43);
      OZDynamicCurve::getKeypointOutputHandles(v9, *((char **)__p + v11), a2, &v42);
      v13 = v40;
      v14 = v41;
      if (a4)
      {
        v14 = v41 + *a4;
        v13 = v40 + a4[1];
      }
      v15 = v14 + v45;
      v16 = v13 + v44;
      v17 = v14 + v43;
      v18 = v13 + v42;
      v19 = a3[12];
      v20 = a3[13];
      v21 = a3[15];
      v22 = v21 + v14 * v19 + v13 * v20;
      v23 = *a3;
      v24 = a3[1];
      v25 = a3[3];
      v26 = a3[4];
      v27 = (v25 + v14 * *a3 + v13 * v24) / v22;
      v28 = a3[5];
      v29 = v14 * v26 + v13 * v28;
      v30 = a3[7];
      v40 = (v30 + v29) / v22;
      v41 = v27;
      v31 = v21 + v15 * v19 + v16 * v20;
      v44 = (v30 + v15 * v26 + v16 * v28) / v31;
      v45 = (v25 + v15 * v23 + v16 * v24) / v31;
      v32 = v21 + v17 * v19 + v18 * v20;
      v42 = (v30 + v17 * v26 + v18 * v28) / v32;
      v43 = (v25 + v17 * v23 + v18 * v24) / v32;
      OZDynamicCurve::setKeypoint(v8, *((char **)v37 + v11), a2, v33, v27);
      OZDynamicCurve::setKeypoint(v9, *((char **)__p + v11), a2, v33, v40);
      OZDynamicCurve::setKeypointInputHandles(v8, *((char **)v37 + v11), a2, v45 - v41);
      OZDynamicCurve::setKeypointInputHandles(v9, *((char **)__p + v11), a2, v44 - v40);
      OZDynamicCurve::setKeypointOutputHandles(v8, *((char **)v37 + v11), a2, v43 - v41);
      OZDynamicCurve::setKeypointOutputHandles(v9, *((char **)__p + v11), a2, v42 - v40);
      OZDynamicCurve::breakKeypointHandles(v8, *((char **)v37 + v11), 0);
      OZDynamicCurve::breakKeypointHandles(v9, *((char **)__p + v11), 0);
      v11 = v12;
      v10 = (char **)v37;
      ++v12;
    }
    while (v11 < ((char *)v38 - (_BYTE *)v37) >> 3);
  }
  if (__p)
  {
    v35 = __p;
    operator delete(__p);
    v10 = (char **)v37;
  }
  if (v10)
  {
    v38 = v10;
    operator delete(v10);
  }
}

void sub_1B2C72D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void OZChannelCurve::getCurve(os_unfair_lock_s *a1, const CMTime *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7)
{
  const CMTime *v11;
  os_unfair_lock_s *v13;
  double v14;
  unsigned int NumberOfValidKeypoints;
  _QWORD *v16;
  double *v18;
  double *v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  char *v23;
  double *v24;
  _QWORD *v25;
  double *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  double *v36;
  _QWORD *v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  double *v46;
  unint64_t v47;
  double *v48;
  _QWORD *v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t v63;
  double v64;
  double v65;
  char *FirstVertex;
  char *v67;
  char *v68;
  char *NextVertex;
  char *v70;
  char *v71;
  char *LastVertex;
  char *v73;
  float64_t v74;
  float64_t v75;
  BOOL v76;
  int v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  Float64 v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  BOOL v94;
  char *v95;
  double v96;
  char *v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  char *v103;
  double v104;
  char *v105;
  double v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  char *v119;
  double v120;
  char *v121;
  double v122;
  char *v123;
  char *v124;
  char *v125;
  int v126;
  int v127;
  Float64 v128;
  Float64 v129;
  Float64 v130;
  Float64 v131;
  double v132;
  double *v133;
  double *v134;
  double v135;
  double v136;
  double v137;
  double v138;
  float64_t v139;
  float64_t v140;
  float64_t v141;
  double v142;
  float64_t v143;
  float64_t v144;
  float64_t v145;
  double v146;
  double *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  double *v153;
  char *v154;
  uint64_t v155;
  float64_t *v156;
  float64_t *v157;
  float64_t *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  float64_t *v167;
  float64_t *v168;
  float64_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  OZChannelCurve *v178;
  CMTime *v180;
  char *v181;
  char *v182;
  OZDynamicCurve *v183;
  OZDynamicCurve *v184;
  float64x2_t v185[2];
  float64x2_t v186;
  __int128 v187;
  float64x2_t v188;
  __int128 v189;
  float64x2_t v190;
  __int128 v191;
  double v192;
  double v193;
  double v194;
  double v195;
  float64_t v196;
  float64_t v197;
  double v198;
  float64_t v199;
  double v200;
  double v201;
  double *v202;
  double *v203;
  unint64_t v204;
  char *v205;
  float64_t *v206;
  unint64_t v207;
  char *v208;
  float64_t *v209;
  unint64_t v210;
  BOOL v211[12];

  v11 = a2;
  v190.f64[0] = 0.0;
  v13 = a1 + 72;
  OZDynamicCurve::getCurrentRangeU((OZDynamicCurve *)&a1[72], a2, v190.f64);
  v14 = v190.f64[0];
  NumberOfValidKeypoints = OZDynamicCurve::getNumberOfValidKeypoints(v13, v11);
  v208 = 0;
  v209 = 0;
  v210 = 0;
  v205 = 0;
  v206 = 0;
  v207 = 0;
  v202 = 0;
  v203 = 0;
  v204 = 0;
  v184 = (OZDynamicCurve *)v13;
  OZDynamicCurve::setCurveInterpolation((OZDynamicCurve *)v13, a3);
  v183 = (OZDynamicCurve *)&a1[130];
  OZDynamicCurve::setCurveInterpolation((OZDynamicCurve *)&a1[130], a3);
  v16 = *(_QWORD **)&a1[66]._os_unfair_lock_opaque;
  v180 = (CMTime *)v11;
  if (!v16)
    goto LABEL_6;
  if ((int)((v16[1] - *v16) >> 3) < 4 || NumberOfValidKeypoints < 2)
    goto LABEL_6;
  v190.f64[0] = 0.0;
  OZDynamicCurve::getCurrentMinValueU((OZDynamicCurve *)v13, v11, v190.f64);
  v65 = v190.f64[0];
  LODWORD(v190.f64[0]) = 0;
  OZDynamicCurve::getCurveInterpolation((OZDynamicCurve *)v13, (unsigned int *)&v190, 0, 0);
  if (LODWORD(v190.f64[0]) != 4)
  {
    LODWORD(v190.f64[0]) = 0;
    OZDynamicCurve::getCurveInterpolation((OZDynamicCurve *)v13, (unsigned int *)&v190, 0, 0);
    if (LODWORD(v190.f64[0]) == 1)
    {
      LOBYTE(v190.f64[0]) = 0;
      OZDynamicCurve::isClosedCurve((OZDynamicCurve *)v13, (BOOL *)&v190);
      v126 = (int)v14;
      if (!LOBYTE(v190.f64[0]))
        ++v126;
      LODWORD(v190.f64[0]) = v126;
      OZDynamicCurve::getCurveSamples((uint64_t)v13, (uint64_t)v11, &v190, (uint64_t)&v202, (uint64_t)&v208, v65, 1.0);
      OZDynamicCurve::getCurveSamples((uint64_t)v183, (uint64_t)v11, &v190, 0, (uint64_t)&v205, v65, 1.0);
      goto LABEL_6;
    }
    LODWORD(v190.f64[0]) = 0;
    OZDynamicCurve::getCurveInterpolation((OZDynamicCurve *)v13, (unsigned int *)&v190, 0, 0);
    if (LODWORD(v190.f64[0]) == 12
      || (LODWORD(v190.f64[0]) = 0,
          OZDynamicCurve::getCurveInterpolation((OZDynamicCurve *)v13, (unsigned int *)&v190, 0, 0),
          LODWORD(v190.f64[0]) == 10))
    {
      LOBYTE(v190.f64[0]) = 0;
      OZDynamicCurve::isClosedCurve((OZDynamicCurve *)v13, (BOOL *)&v190);
      v127 = (int)(v14 / 0.025);
      if (!LOBYTE(v190.f64[0]))
        ++v127;
      LODWORD(v190.f64[0]) = v127;
      OZDynamicCurve::getCurveSamples((uint64_t)v13, (uint64_t)v11, &v190, (uint64_t)&v202, (uint64_t)&v208, v65, 0.025);
      OZDynamicCurve::getCurveSamples((uint64_t)v183, (uint64_t)v11, &v190, 0, (uint64_t)&v205, v65, 0.025);
      goto LABEL_6;
    }
    v185[0].f64[0] = 0.0;
    v201 = 0.0;
    v135 = v14 + v65;
    if (v65 >= v14 + v65)
    {
LABEL_155:
      if (v203 != v202)
      {
        LOBYTE(v190.f64[0]) = 0;
        OZDynamicCurve::isClosedCurve((OZDynamicCurve *)v13, (BOOL *)&v190);
        if (!LOBYTE(v190.f64[0]))
        {
          v190.f64[0] = v135;
          std::vector<double>::push_back[abi:ne180100]((uint64_t)&v202, &v190);
          std::vector<double>::push_back[abi:ne180100]((uint64_t)&v208, v185);
          std::vector<double>::push_back[abi:ne180100]((uint64_t)&v205, &v201);
        }
      }
      goto LABEL_6;
    }
    while (1)
    {
      v199 = 0.0;
      v200 = 0.0;
      v197 = 0.0;
      v198 = 0.0;
      v195 = 0.0;
      v196 = 0.0;
      v136 = v65 + 1.0;
      v137 = v65 + 1.0;
      if (v65 + 1.0 >= v135)
      {
        LOBYTE(v190.f64[0]) = 0;
        OZDynamicCurve::isClosedCurve((OZDynamicCurve *)v13, (BOOL *)&v190);
        if (LOBYTE(v190.f64[0]))
          v137 = 0.0;
        else
          v137 = v65 + 1.0;
      }
      OZDynamicCurve::getPoint((OZDynamicCurve *)v13, v11, v65, &v200);
      OZDynamicCurve::getPoint(v183, v11, v65, &v199);
      OZDynamicCurve::getPoint((OZDynamicCurve *)v13, v11, v65 + 0.25, &v198);
      OZDynamicCurve::getPoint(v183, v11, v65 + 0.25, &v197);
      v138 = v65 + 0.5;
      OZDynamicCurve::getPoint((OZDynamicCurve *)v13, v11, v65 + 0.5, &v196);
      OZDynamicCurve::getPoint(v183, v11, v65 + 0.5, &v195);
      if (vabdd_f64(v200, v198) >= 0.0000001)
        break;
      v139 = v196;
      v140 = v197;
      v141 = v199;
      if (vabdd_f64(v200, v196) >= 0.0000001
        || vabdd_f64(v199, v197) >= 0.0000001
        || vabdd_f64(v197, v195) >= 0.0000001)
      {
        goto LABEL_146;
      }
LABEL_147:
      OZDynamicCurve::getPoint((OZDynamicCurve *)v13, v11, v65 + 0.5, &v200);
      OZDynamicCurve::getPoint(v183, v11, v65 + 0.5, &v199);
      v142 = v65 + 0.75;
      OZDynamicCurve::getPoint((OZDynamicCurve *)v13, v11, v142, &v198);
      OZDynamicCurve::getPoint(v183, v11, v142, &v197);
      OZDynamicCurve::getPoint((OZDynamicCurve *)v13, v11, v137, &v196);
      OZDynamicCurve::getPoint(v183, v11, v137, &v195);
      if (vabdd_f64(v200, v198) >= 0.0000001)
      {
        v145 = v199;
        v143 = v196;
        v144 = v197;
      }
      else
      {
        v143 = v196;
        v144 = v197;
        v145 = v199;
        if (vabdd_f64(v200, v196) < 0.0000001 && vabdd_f64(v199, v197) < 0.0000001)
        {
          v146 = v195;
          if (vabdd_f64(v197, v195) < 0.0000001)
            goto LABEL_154;
        }
      }
      v190.f64[0] = v200;
      v190.f64[1] = v145;
      *(double *)&v191 = v138;
      v188.f64[0] = v198;
      v188.f64[1] = v144;
      *(double *)&v189 = v142;
      v186.f64[0] = v143;
      v186.f64[1] = v195;
      *(double *)&v187 = v136;
      OZChannelCurve::XSplineSubdivide((uint64_t)a1, v190.f64, v188.f64, v186.f64, 50, v11, (uint64_t)&v208, (uint64_t)&v205, (uint64_t)&v202);
      v146 = v195;
      v143 = v196;
LABEL_154:
      v185[0].f64[0] = v143;
      v201 = v146;
      v65 = v136;
      if (v136 >= v135)
        goto LABEL_155;
    }
    v141 = v199;
    v139 = v196;
    v140 = v197;
LABEL_146:
    v190.f64[0] = v200;
    v190.f64[1] = v141;
    *(double *)&v191 = v65;
    v188.f64[0] = v198;
    v188.f64[1] = v140;
    *(double *)&v189 = v65 + 0.25;
    v186.f64[0] = v139;
    v186.f64[1] = v195;
    *(double *)&v187 = v65 + 0.5;
    OZChannelCurve::XSplineSubdivide((uint64_t)a1, v190.f64, v188.f64, v186.f64, 50, v11, (uint64_t)&v208, (uint64_t)&v205, (uint64_t)&v202);
    goto LABEL_147;
  }
  FirstVertex = (char *)OZChannelCurve::getFirstVertex((OZChannelCurve *)a1, v11, 1);
  v68 = v67;
  NextVertex = (char *)OZChannelCurve::getNextVertex((uint64_t)a1, v11, FirstVertex, v67, 1);
  v71 = v70;
  LastVertex = (char *)OZChannelCurve::getLastVertex((OZChannelCurve *)a1, v11, 1);
  v181 = v73;
  v182 = LastVertex;
  v74 = 0.0;
  if (NextVertex)
  {
    v178 = (OZChannelCurve *)a1;
    v75 = 0.0;
    if (v71)
    {
      do
      {
        v200 = 0.0;
        v201 = 0.0;
        v199 = 0.0;
        v197 = 0.0;
        v198 = 0.0;
        v195 = 0.0;
        v196 = 0.0;
        v193 = 0.0;
        v194 = 0.0;
        v192 = 0.0;
        OZDynamicCurve::getKeypoint(v184, FirstVertex, v11, 0, &v199);
        OZDynamicCurve::getKeypoint(v183, v68, v11, 0, &v198);
        OZDynamicCurve::getKeypoint(v184, NextVertex, v11, 0, &v193);
        OZDynamicCurve::getKeypoint(v183, v71, v11, 0, &v192);
        OZDynamicCurve::getKeypoint(v184, FirstVertex, v11, &v201, 0);
        OZDynamicCurve::getKeypoint(v184, NextVertex, v11, &v200, 0);
        v76 = FirstVertex == v182 && v68 == v181;
        v77 = v76;
        if (v76)
        {
          LOBYTE(v190.f64[0]) = 0;
          OZDynamicCurve::isClosedCurve(v184, (BOOL *)&v190);
          if (LOBYTE(v190.f64[0]))
            v200 = v14 + v200;
        }
        OZDynamicCurve::getKeypointOutputHandles(v184, FirstVertex, v11, &v197);
        OZDynamicCurve::getKeypointOutputHandles(v183, v68, v11, &v196);
        OZDynamicCurve::getKeypointInputHandles(v184, NextVertex, v11, &v195);
        OZDynamicCurve::getKeypointInputHandles(v183, v71, v11, &v194);
        v79 = v192;
        v78 = v193;
        if (vabdd_f64(v199, v193) < 0.0000001 && vabdd_f64(v198, v192) < 0.0000001)
        {
          v78 = v193 + 0.000001;
          v79 = v192 + 0.000001;
          v192 = v192 + 0.000001;
          v193 = v193 + 0.000001;
        }
        v190.f64[0] = v199;
        v190.f64[1] = v198;
        v191 = xmmword_1B304EEE0;
        v80 = v199 + v197;
        v81 = v198 + v196;
        v188.f64[0] = v199 + v197;
        v188.f64[1] = v198 + v196;
        v189 = xmmword_1B304EEE0;
        v82 = v195 + v78;
        v186.f64[0] = v195 + v78;
        v186.f64[1] = v194 + v79;
        v187 = xmmword_1B304EEE0;
        v185[0].f64[0] = v78;
        v185[0].f64[1] = v79;
        v185[1] = (float64x2_t)xmmword_1B304EEE0;
        if (vabdd_f64(v199 + v197, v199) < 0.0000001 || vabdd_f64(v82, v80) < 0.0000001)
          goto LABEL_94;
        v83 = v80 - v199;
        v84 = v81 - v198;
        v85 = sqrt(v83 * v83 + v84 * v84);
        if (v85 <= -0.000000100000001 || v85 >= 0.000000100000001)
        {
          v83 = v83 / v85;
          v84 = v84 / v85;
        }
        v86 = v82 - v80;
        v87 = v194 + v79 - v81;
        v88 = sqrt(v86 * v86 + v87 * v87);
        if (v88 <= -0.000000100000001 || v88 >= 0.000000100000001)
        {
          v86 = v86 / v88;
          v87 = v87 / v88;
        }
        if (fabs(v83 * v86 + v84 * v87 + 1.0) >= 0.001)
        {
LABEL_94:
          PCAlgorithm::BezierSubdivide(&v190, &v188, &v186, v185, 6, a7, (uint64_t)&v208, (uint64_t)&v205, v201, v200 - v201, 0, (uint64_t)&v202);
        }
        else
        {
          v89 = v201;
          *(_DWORD *)v211 = ((v200 - v201) / 0.05);
          OZDynamicCurve::getCurveSamples((uint64_t)v184, (uint64_t)v11, v211, (uint64_t)&v202, (uint64_t)&v208, v201, 0.05);
          OZDynamicCurve::getCurveSamples((uint64_t)v183, (uint64_t)v180, v211, 0, (uint64_t)&v205, v89, 0.05);
        }
        v74 = v185[0].f64[1];
        v75 = v185[0].f64[0];
        if (v77)
          break;
        v90 = (char *)OZChannelCurve::getNextVertex((uint64_t)v178, v180, NextVertex, v71, 1);
        v91 = v90;
        v93 = v92;
        v94 = !v92 || v90 == 0;
        if (v94 && NextVertex == v182 && v71 == v181)
        {
          v211[0] = 0;
          OZDynamicCurve::isClosedCurve(v184, v211);
          if (v211[0])
          {
            v91 = (char *)OZChannelCurve::getFirstVertex(v178, v180, 1);
            v93 = v95;
          }
          v68 = v181;
          FirstVertex = v182;
        }
        else
        {
          FirstVertex = NextVertex;
          v68 = v71;
        }
        if (!v91)
          break;
        v71 = v93;
        NextVertex = v91;
        v11 = v180;
      }
      while (v93);
    }
  }
  else
  {
    v75 = 0.0;
  }
  if (v203 != v202)
  {
    LOBYTE(v190.f64[0]) = 0;
    OZDynamicCurve::isClosedCurve(v184, (BOOL *)&v190);
    if (!LOBYTE(v190.f64[0]))
    {
      v132 = v14 + v65;
      v133 = v203;
      if ((unint64_t)v203 >= v204)
      {
        v147 = v202;
        v148 = v203 - v202;
        v149 = v148 + 1;
        if ((unint64_t)(v148 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v150 = v204 - (_QWORD)v202;
        if ((uint64_t)(v204 - (_QWORD)v202) >> 2 > v149)
          v149 = v150 >> 2;
        if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8)
          v151 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v151 = v149;
        if (v151)
        {
          v152 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v204, v151);
          v147 = v202;
          v133 = v203;
        }
        else
        {
          v152 = 0;
        }
        v153 = (double *)&v152[8 * v148];
        v154 = &v152[8 * v151];
        *v153 = v132;
        v134 = v153 + 1;
        while (v133 != v147)
        {
          v155 = *((_QWORD *)v133-- - 1);
          *((_QWORD *)v153-- - 1) = v155;
        }
        v202 = v153;
        v203 = v134;
        v204 = (unint64_t)v154;
        if (v147)
          operator delete(v147);
      }
      else
      {
        *v203 = v132;
        v134 = v133 + 1;
      }
      v203 = v134;
      v156 = v209;
      if ((unint64_t)v209 >= v210)
      {
        v158 = (float64_t *)v208;
        v159 = ((char *)v209 - v208) >> 3;
        v160 = v159 + 1;
        if ((unint64_t)(v159 + 1) >> 61)
          goto LABEL_207;
        v161 = v210 - (_QWORD)v208;
        if ((uint64_t)(v210 - (_QWORD)v208) >> 2 > v160)
          v160 = v161 >> 2;
        if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8)
          v162 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v162 = v160;
        if (v162)
        {
          v163 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v210, v162);
          v158 = (float64_t *)v208;
          v156 = v209;
        }
        else
        {
          v163 = 0;
        }
        v164 = &v163[8 * v159];
        v165 = &v163[8 * v162];
        *(float64_t *)v164 = v75;
        v157 = (float64_t *)(v164 + 8);
        while (v156 != v158)
        {
          v166 = *((_QWORD *)v156-- - 1);
          *((_QWORD *)v164 - 1) = v166;
          v164 -= 8;
        }
        v208 = v164;
        v209 = v157;
        v210 = (unint64_t)v165;
        if (v158)
          operator delete(v158);
      }
      else
      {
        *v209 = v75;
        v157 = v156 + 1;
      }
      v209 = v157;
      v167 = v206;
      if ((unint64_t)v206 < v207)
      {
        *v206 = v74;
        v168 = v167 + 1;
LABEL_204:
        v206 = v168;
        goto LABEL_6;
      }
      v169 = (float64_t *)v205;
      v170 = ((char *)v206 - v205) >> 3;
      v171 = v170 + 1;
      if (!((unint64_t)(v170 + 1) >> 61))
      {
        v172 = v207 - (_QWORD)v205;
        if ((uint64_t)(v207 - (_QWORD)v205) >> 2 > v171)
          v171 = v172 >> 2;
        if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
          v173 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v173 = v171;
        if (v173)
        {
          v174 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v207, v173);
          v169 = (float64_t *)v205;
          v167 = v206;
        }
        else
        {
          v174 = 0;
        }
        v175 = &v174[8 * v170];
        v176 = &v174[8 * v173];
        *(float64_t *)v175 = v74;
        v168 = (float64_t *)(v175 + 8);
        while (v167 != v169)
        {
          v177 = *((_QWORD *)v167-- - 1);
          *((_QWORD *)v175 - 1) = v177;
          v175 -= 8;
        }
        v205 = v175;
        v206 = v168;
        v207 = (unint64_t)v176;
        if (v169)
          operator delete(v169);
        goto LABEL_204;
      }
LABEL_207:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
  }
LABEL_6:
  v19 = v202;
  v18 = v203;
  if (v203 != v202)
  {
    v20 = 0;
    v21 = 0;
    v22 = (_QWORD *)(a5 + 16);
    do
    {
      v23 = v208;
      v24 = *(double **)(a5 + 8);
      if (!v21
        || vabdd_f64(*(v24 - 1), *(double *)&v208[8 * v20]) >= 0.001
        || vabdd_f64(*(double *)(*(_QWORD *)(a6 + 8) - 8), *(double *)&v205[8 * v20]) >= 0.001)
      {
        if ((unint64_t)v24 >= *v22)
        {
          v26 = *(double **)a5;
          v27 = ((uint64_t)v24 - *(_QWORD *)a5) >> 3;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
            goto LABEL_205;
          v29 = *v22 - (_QWORD)v26;
          if (v29 >> 2 > v28)
            v28 = v29 >> 2;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a5 + 16, v30);
            v26 = *(double **)a5;
            v24 = *(double **)(a5 + 8);
          }
          else
          {
            v31 = 0;
          }
          v32 = &v31[8 * v27];
          *(_QWORD *)v32 = *(_QWORD *)&v23[8 * v20];
          v25 = v32 + 8;
          while (v24 != v26)
          {
            v33 = *((_QWORD *)v24-- - 1);
            *((_QWORD *)v32 - 1) = v33;
            v32 -= 8;
          }
          *(_QWORD *)a5 = v32;
          *(_QWORD *)(a5 + 8) = v25;
          *(_QWORD *)(a5 + 16) = &v31[8 * v30];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *v24 = *(double *)&v208[8 * v20];
          v25 = v24 + 1;
        }
        *(_QWORD *)(a5 + 8) = v25;
        v34 = v205;
        v36 = *(double **)(a6 + 8);
        v35 = *(_QWORD *)(a6 + 16);
        if ((unint64_t)v36 >= v35)
        {
          v38 = *(double **)a6;
          v39 = ((uint64_t)v36 - *(_QWORD *)a6) >> 3;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61)
            goto LABEL_205;
          v41 = v35 - (_QWORD)v38;
          if (v41 >> 2 > v40)
            v40 = v41 >> 2;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (v42)
          {
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v42);
            v38 = *(double **)a6;
            v36 = *(double **)(a6 + 8);
          }
          else
          {
            v43 = 0;
          }
          v44 = &v43[8 * v39];
          *(_QWORD *)v44 = *(_QWORD *)&v34[8 * v20];
          v37 = v44 + 8;
          while (v36 != v38)
          {
            v45 = *((_QWORD *)v36-- - 1);
            *((_QWORD *)v44 - 1) = v45;
            v44 -= 8;
          }
          *(_QWORD *)a6 = v44;
          *(_QWORD *)(a6 + 8) = v37;
          *(_QWORD *)(a6 + 16) = &v43[8 * v42];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v36 = *(double *)&v205[8 * v20];
          v37 = v36 + 1;
        }
        *(_QWORD *)(a6 + 8) = v37;
        v46 = v202;
        v48 = *(double **)(a4 + 8);
        v47 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v48 >= v47)
        {
          v50 = *(double **)a4;
          v51 = ((uint64_t)v48 - *(_QWORD *)a4) >> 3;
          v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 61)
LABEL_205:
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v53 = v47 - (_QWORD)v50;
          if (v53 >> 2 > v52)
            v52 = v53 >> 2;
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
            v54 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v54 = v52;
          if (v54)
          {
            v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v54);
            v50 = *(double **)a4;
            v48 = *(double **)(a4 + 8);
          }
          else
          {
            v55 = 0;
          }
          v56 = &v55[8 * v51];
          *(double *)v56 = v46[v20];
          v49 = v56 + 8;
          while (v48 != v50)
          {
            v57 = *((_QWORD *)v48-- - 1);
            *((_QWORD *)v56 - 1) = v57;
            v56 -= 8;
          }
          *(_QWORD *)a4 = v56;
          *(_QWORD *)(a4 + 8) = v49;
          *(_QWORD *)(a4 + 16) = &v55[8 * v54];
          if (v50)
            operator delete(v50);
        }
        else
        {
          *v48 = v202[v20];
          v49 = v48 + 1;
        }
        *(_QWORD *)(a4 + 8) = v49;
        v19 = v202;
        v18 = v203;
      }
      v20 = ++v21;
    }
    while (v21 < (unint64_t)(v18 - v19));
  }
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 > 0x10uLL)
  {
    LOBYTE(v190.f64[0]) = 0;
    OZDynamicCurve::isClosedCurve(v184, (BOOL *)&v190);
    if (LOBYTE(v190.f64[0]))
    {
      v58 = *(_QWORD *)(a5 + 8);
      v59 = **(double **)a5;
      v61 = *(double *)(v58 - 8);
      v60 = v58 - 8;
      if (vabdd_f64(v59, v61) < 0.001)
      {
        v62 = **(double **)a6;
        do
        {
          if (vabdd_f64(v62, *(double *)(*(_QWORD *)(a6 + 8) - 8)) >= 0.001)
            break;
          *(_QWORD *)(a5 + 8) = v60;
          *(_QWORD *)(a6 + 8) -= 8;
          *(_QWORD *)(a4 + 8) -= 8;
          v63 = *(_QWORD *)(a5 + 8);
          v64 = *(double *)(v63 - 8);
          v60 = v63 - 8;
        }
        while (vabdd_f64(v59, v64) < 0.001);
      }
    }
    else
    {
      LODWORD(v190.f64[0]) = 0;
      OZDynamicCurve::getCurveInterpolation(v184, (unsigned int *)&v190, 0, 0);
      if (LODWORD(v190.f64[0]) == 12
        || (LODWORD(v190.f64[0]) = 0,
            OZDynamicCurve::getCurveInterpolation(v184, (unsigned int *)&v190, 0, 0),
            LODWORD(v190.f64[0]) == 10))
      {
        v96 = **(double **)a4;
        v97 = (char *)(*(_QWORD *)a4 + 8);
        v98 = **(double **)a5;
        v99 = *(double *)(*(_QWORD *)a5 + 8);
        v100 = **(double **)a6;
        v101 = *(double *)(*(_QWORD *)a6 + 8);
        v102 = *(double *)v97 - v96;
        v190.f64[0] = v96 + (v102 + v102) / 3.0;
        std::vector<double>::insert(a4, v97, v190.f64);
        v103 = (char *)(*(_QWORD *)a5 + 8);
        v104 = v99 - v98;
        v190.f64[0] = v98 + (v104 + v104) / 3.0;
        std::vector<double>::insert(a5, v103, v190.f64);
        v105 = (char *)(*(_QWORD *)a6 + 8);
        v106 = v101 - v100;
        v190.f64[0] = v100 + (v106 + v106) / 3.0;
        std::vector<double>::insert(a6, v105, v190.f64);
        v107 = (char *)(*(_QWORD *)a4 + 8);
        v190.f64[0] = v96 + v102 / 3.0;
        std::vector<double>::insert(a4, v107, v190.f64);
        v108 = (char *)(*(_QWORD *)a5 + 8);
        v190.f64[0] = v98 + v104 / 3.0;
        std::vector<double>::insert(a5, v108, v190.f64);
        v109 = (char *)(*(_QWORD *)a6 + 8);
        v190.f64[0] = v100 + v106 / 3.0;
        std::vector<double>::insert(a6, v109, v190.f64);
        v110 = *(_QWORD *)(a4 + 8);
        v111 = (unint64_t)(v110 - *(_QWORD *)a4) >> 3;
        v112 = v111 - 2;
        v113 = *(double *)(*(_QWORD *)a4 + 8 * (v111 - 2));
        LODWORD(v111) = v111 - 1;
        v114 = *(double *)(*(_QWORD *)a5 + 8 * v112);
        v115 = *(double *)(*(_QWORD *)a5 + 8 * v111);
        v116 = *(double *)(*(_QWORD *)a6 + 8 * v112);
        v117 = *(double *)(*(_QWORD *)a6 + 8 * v111);
        v118 = *(double *)(*(_QWORD *)a4 + 8 * v111) - v113;
        v190.f64[0] = v113 + v118 / 3.0;
        std::vector<double>::insert(a4, (char *)(v110 - 8), v190.f64);
        v119 = (char *)(*(_QWORD *)(a5 + 8) - 8);
        v120 = v115 - v114;
        v190.f64[0] = v114 + v120 / 3.0;
        std::vector<double>::insert(a5, v119, v190.f64);
        v121 = (char *)(*(_QWORD *)(a6 + 8) - 8);
        v122 = v117 - v116;
        v190.f64[0] = v116 + v122 / 3.0;
        std::vector<double>::insert(a6, v121, v190.f64);
        v123 = (char *)(*(_QWORD *)(a4 + 8) - 8);
        v190.f64[0] = v113 + (v118 + v118) / 3.0;
        std::vector<double>::insert(a4, v123, v190.f64);
        v124 = (char *)(*(_QWORD *)(a5 + 8) - 8);
        v190.f64[0] = v114 + (v120 + v120) / 3.0;
        std::vector<double>::insert(a5, v124, v190.f64);
        v125 = (char *)(*(_QWORD *)(a6 + 8) - 8);
        v190.f64[0] = v116 + (v122 + v122) / 3.0;
        std::vector<double>::insert(a6, v125, v190.f64);
      }
      else
      {
        v190.f64[0] = 0.0;
        v128 = **(double **)a4 + 0.0005;
        v190.f64[0] = v128;
        v188.f64[0] = 0.0;
        v186.f64[0] = 0.0;
        OZDynamicCurve::getPoint(v184, v180, v128, v188.f64);
        OZDynamicCurve::getPoint(v183, v180, v128, v186.f64);
        std::vector<double>::insert(a4, (char *)(*(_QWORD *)a4 + 8), (char *)&v190);
        std::vector<double>::insert(a5, (char *)(*(_QWORD *)a5 + 8), (char *)&v188);
        std::vector<double>::insert(a6, (char *)(*(_QWORD *)a6 + 8), (char *)&v186);
        v129 = **(double **)a4 + 0.00025;
        v190.f64[0] = v129;
        OZDynamicCurve::getPoint(v184, v180, v129, v188.f64);
        OZDynamicCurve::getPoint(v183, v180, v129, v186.f64);
        std::vector<double>::insert(a4, (char *)(*(_QWORD *)a4 + 8), (char *)&v190);
        std::vector<double>::insert(a5, (char *)(*(_QWORD *)a5 + 8), (char *)&v188);
        std::vector<double>::insert(a6, (char *)(*(_QWORD *)a6 + 8), (char *)&v186);
        v130 = *(double *)(*(_QWORD *)(a4 + 8) - 8) + -0.0005;
        v190.f64[0] = v130;
        OZDynamicCurve::getPoint(v184, v180, v130, v188.f64);
        OZDynamicCurve::getPoint(v183, v180, v130, v186.f64);
        std::vector<double>::insert(a4, (char *)(*(_QWORD *)(a4 + 8) - 8), (char *)&v190);
        std::vector<double>::insert(a5, (char *)(*(_QWORD *)(a5 + 8) - 8), (char *)&v188);
        std::vector<double>::insert(a6, (char *)(*(_QWORD *)(a6 + 8) - 8), (char *)&v186);
        v131 = *(double *)(*(_QWORD *)(a4 + 8) - 8) + -0.00025;
        v190.f64[0] = v131;
        OZDynamicCurve::getPoint(v184, v180, v131, v188.f64);
        OZDynamicCurve::getPoint(v183, v180, v131, v186.f64);
        std::vector<double>::insert(a4, (char *)(*(_QWORD *)(a4 + 8) - 8), (char *)&v190);
        std::vector<double>::insert(a5, (char *)(*(_QWORD *)(a5 + 8) - 8), (char *)&v188);
        std::vector<double>::insert(a6, (char *)(*(_QWORD *)(a6 + 8) - 8), (char *)&v186);
      }
    }
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = (float64_t *)v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = (float64_t *)v208;
    operator delete(v208);
  }
}

void sub_1B2C740C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(v1 - 232);
  if (v3)
  {
    *(_QWORD *)(v1 - 224) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 208);
  if (v4)
  {
    *(_QWORD *)(v1 - 200) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 184);
  if (v5)
  {
    *(_QWORD *)(v1 - 176) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

double OZChannelCurve::getParametricRange(OZChannelCurve *this, const CMTime *a2)
{
  double v3;

  v3 = 0.0;
  OZDynamicCurve::getCurrentRangeU((OZChannelCurve *)((char *)this + 288), a2, &v3);
  return v3;
}

double OZChannelCurve::getMinParametricValue(OZChannelCurve *this, const CMTime *a2)
{
  double v3;

  v3 = 0.0;
  OZDynamicCurve::getCurrentMinValueU((OZChannelCurve *)((char *)this + 288), a2, &v3);
  return v3;
}

void OZChannelCurve::XSplineSubdivide(uint64_t a1, double *a2, double *a3, double *a4, int a5, const CMTime *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  double v22;
  double v23;
  float v24;
  float v25;
  float v26;
  double v27;
  float v28;
  float v29;
  float v30;
  double v31;
  Float64 v32;
  double v33;
  uint64_t v34;
  Float64 v35;
  double v36;
  unint64_t v37;
  double *v38;
  _QWORD *v39;
  double *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  double *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  double v75;
  __int128 v76;
  double v77;
  _QWORD v78[3];
  __int128 v79;
  double v80;
  __int128 v81;
  double v82;
  _QWORD v83[3];
  __int128 v84;
  double v85;
  double v86;
  double v87[2];

  v17 = *a4;
  v18 = a4[1];
  v19 = a2[1];
  v20 = *a4 - *a2;
  v21 = v18 - v19;
  v22 = *a3;
  v23 = a3[1];
  v75 = *a2;
  v24 = *a3 - *a2;
  *(float *)&v19 = v23 - v19;
  v25 = sqrtf((float)(v20 * v20) + (float)(v21 * v21));
  v26 = acosf((float)((float)(v20 * v24) + (float)(v21 * *(float *)&v19))/ (float)(v25 * sqrtf((float)(v24 * v24) + (float)(*(float *)&v19 * *(float *)&v19))));
  v27 = tan(v26);
  v28 = v22 - v17;
  v29 = v23 - v18;
  v30 = acosf((float)((float)(v20 * v28) + (float)(v21 * v29))/ (float)(v25 * sqrtf((float)(v28 * v28) + (float)(v29 * v29))));
  v31 = tan(v30);
  if (v27 >= v31)
    v31 = v27;
  if (a5 && fabs(v31) >= 0.0250000004)
  {
    v87[0] = 0.0;
    v86 = 0.0;
    v32 = a2[2] + (a3[2] - a2[2]) * 0.5;
    OZDynamicCurve::getPoint((OZDynamicCurve *)(a1 + 288), a6, v32, v87);
    OZDynamicCurve::getPoint((OZDynamicCurve *)(a1 + 520), a6, v32, &v86);
    v84 = *(_OWORD *)a2;
    v85 = a2[2];
    v33 = a3[2];
    *(double *)v83 = v87[0];
    *(double *)&v83[1] = v86;
    *(double *)&v83[2] = v85 + (v33 - v85) * 0.5;
    v81 = *(_OWORD *)a3;
    v82 = v33;
    v34 = (a5 - 1);
    OZChannelCurve::XSplineSubdivide(a1, &v84, v83, &v81, v34, a6, a7, a8, a9);
    v35 = a3[2] + (a4[2] - a3[2]) * 0.5;
    OZDynamicCurve::getPoint((OZDynamicCurve *)(a1 + 288), a6, v35, v87);
    OZDynamicCurve::getPoint((OZDynamicCurve *)(a1 + 520), a6, v35, &v86);
    v79 = *(_OWORD *)a3;
    v80 = a3[2];
    v36 = a4[2];
    *(double *)v78 = v87[0];
    *(double *)&v78[1] = v86;
    *(double *)&v78[2] = v80 + (v36 - v80) * 0.5;
    v76 = *(_OWORD *)a4;
    v77 = v36;
    OZChannelCurve::XSplineSubdivide(a1, &v79, v78, &v76, v34, a6, a7, a8, a9);
  }
  else
  {
    v37 = *(_QWORD *)(a7 + 16);
    v38 = *(double **)(a7 + 8);
    if ((unint64_t)v38 >= v37)
    {
      v40 = *(double **)a7;
      v41 = ((uint64_t)v38 - *(_QWORD *)a7) >> 3;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v43 = v37 - (_QWORD)v40;
      if (v43 >> 2 > v42)
        v42 = v43 >> 2;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
        v44 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a7 + 16, v44);
        v40 = *(double **)a7;
        v38 = *(double **)(a7 + 8);
      }
      else
      {
        v45 = 0;
      }
      v46 = (double *)&v45[8 * v41];
      v47 = &v45[8 * v44];
      *v46 = v75;
      v39 = v46 + 1;
      while (v38 != v40)
      {
        v48 = *((_QWORD *)v38-- - 1);
        *((_QWORD *)v46-- - 1) = v48;
      }
      *(_QWORD *)a7 = v46;
      *(_QWORD *)(a7 + 8) = v39;
      *(_QWORD *)(a7 + 16) = v47;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *v38 = v75;
      v39 = v38 + 1;
    }
    *(_QWORD *)(a7 + 8) = v39;
    v49 = *((_QWORD *)a2 + 1);
    v50 = *(_QWORD *)(a8 + 16);
    v51 = *(_QWORD **)(a8 + 8);
    if ((unint64_t)v51 >= v50)
    {
      v53 = *(_QWORD **)a8;
      v54 = ((uint64_t)v51 - *(_QWORD *)a8) >> 3;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v56 = v50 - (_QWORD)v53;
      if (v56 >> 2 > v55)
        v55 = v56 >> 2;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
        v57 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (v57)
      {
        v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a8 + 16, v57);
        v53 = *(_QWORD **)a8;
        v51 = *(_QWORD **)(a8 + 8);
      }
      else
      {
        v58 = 0;
      }
      v59 = &v58[8 * v54];
      v60 = &v58[8 * v57];
      *(_QWORD *)v59 = v49;
      v52 = v59 + 8;
      while (v51 != v53)
      {
        v61 = *--v51;
        *((_QWORD *)v59 - 1) = v61;
        v59 -= 8;
      }
      *(_QWORD *)a8 = v59;
      *(_QWORD *)(a8 + 8) = v52;
      *(_QWORD *)(a8 + 16) = v60;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v51 = v49;
      v52 = v51 + 1;
    }
    *(_QWORD *)(a8 + 8) = v52;
    v62 = *((_QWORD *)a2 + 2);
    v63 = *(_QWORD *)(a9 + 16);
    v64 = *(_QWORD **)(a9 + 8);
    if ((unint64_t)v64 >= v63)
    {
      v66 = *(_QWORD **)a9;
      v67 = ((uint64_t)v64 - *(_QWORD *)a9) >> 3;
      v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v69 = v63 - (_QWORD)v66;
      if (v69 >> 2 > v68)
        v68 = v69 >> 2;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
        v70 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
      {
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a9 + 16, v70);
        v66 = *(_QWORD **)a9;
        v64 = *(_QWORD **)(a9 + 8);
      }
      else
      {
        v71 = 0;
      }
      v72 = &v71[8 * v67];
      v73 = &v71[8 * v70];
      *(_QWORD *)v72 = v62;
      v65 = v72 + 8;
      while (v64 != v66)
      {
        v74 = *--v64;
        *((_QWORD *)v72 - 1) = v74;
        v72 -= 8;
      }
      *(_QWORD *)a9 = v72;
      *(_QWORD *)(a9 + 8) = v65;
      *(_QWORD *)(a9 + 16) = v73;
      if (v66)
        operator delete(v66);
    }
    else
    {
      *v64 = v62;
      v65 = v64 + 1;
    }
    *(_QWORD *)(a9 + 8) = v65;
  }
}

char *std::vector<double>::insert(uint64_t a1, char *__src, double *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v15 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 3;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 2 > v15)
      v15 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[8 * v16];
    v23 = v22;
    v24 = &v19[8 * v18];
    std::__split_buffer<double>::push_back(&__p, a3);
    v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(double *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v10 = __src + 8;
    v11 = v6 - 8;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    *(double *)v4 = *a3;
  }
  return v4;
}

void sub_1B2C74818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1B2C74A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZChannelCurve::convertCurveBSplineBiasToXSplineBias(OZChannelCurve *this)
{
  char *v2;
  unint64_t v3;
  unsigned int v4;
  OZDynamicCurve *v5;
  char *v6;
  unint64_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  (*(void (**)(OZChannelCurve *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  OZDynamicCurve::getKeypointHandleList((uint64_t)this + 288, &v9);
  v2 = v10;
  if (v10 != v9)
  {
    v3 = 0;
    v4 = 1;
    v2 = v9;
    do
    {
      OZDynamicCurve::updateKeypointBias((OZChannelCurve *)((char *)this + 288), *(void **)&v2[8 * v3]);
      v3 = v4;
      v2 = v9;
      ++v4;
    }
    while (v3 < (v10 - v9) >> 3);
  }
  v10 = v2;
  v5 = (OZChannelCurve *)((char *)this + 520);
  OZDynamicCurve::getKeypointHandleList((uint64_t)v5, &v9);
  v6 = v10;
  if (v10 != v9)
  {
    v7 = 0;
    v8 = 1;
    v6 = v9;
    do
    {
      OZDynamicCurve::updateKeypointBias(v5, *(void **)&v6[8 * v7]);
      v7 = v8;
      v6 = v9;
      ++v8;
    }
    while (v7 < (v10 - v9) >> 3);
  }
  if (v6)
  {
    v10 = v6;
    operator delete(v6);
  }
}

void sub_1B2C74B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

OZChannelVertexFolder *OZChannelCurve::getVertexAssociatedChannelX(uint64_t a1, char *a2)
{
  OZChannelVertexFolder *v3;

  v3 = 0;
  OZDynamicCurve::getVertexChannel((OZDynamicCurve *)(a1 + 288), a2, &v3);
  return v3;
}

OZChannelVertexFolder *OZChannelCurve::getVertexAssociatedChannelY(uint64_t a1, int a2, char *a3)
{
  OZChannelVertexFolder *v4;

  v4 = 0;
  OZDynamicCurve::getVertexChannel((OZDynamicCurve *)(a1 + 520), a3, &v4);
  return v4;
}

uint64_t OZChannelCurve::refreshAnimation(OZChannelCurve *this)
{
  OZChannelFolder *v2;
  OZDynamicCurve *v3;
  uint64_t result;
  unsigned int v5;
  OZDynamicCurve *v6;
  const CMTime *v7;
  void *v8;
  OZChannelBase *v9;

  v2 = (OZChannelFolder *)((char *)this + 152);
  if (*((_QWORD *)this + 33))
    OZChannelFolder::removeAllDescendants((OZChannelFolder *)((char *)this + 152), 0);
  v3 = (OZChannelCurve *)((char *)this + 288);
  result = OZDynamicCurve::getNumberOfKeypoints((OZChannelCurve *)((char *)this + 288));
  if ((_DWORD)result)
  {
    v5 = 0;
    v6 = (OZChannelCurve *)((char *)this + 520);
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v8 = 0;
      v9 = 0;
      OZDynamicCurve::getKeypointHandle(v3, v7, (double)v5, &v8);
      OZDynamicCurve::getVertexChannel(v3, (char *)v8, (OZChannelVertexFolder **)&v9);
      if (v9)
      {
        OZChannelFolder::push_back(v2, v9);
        if ((OZChannelVertexFolder::isVertexSaveWhenAtDefaultState((OZChannelFolder *)v9) & 1) == 0)
          OZChannelVertexFolder::setVertexSaveWhenAtDefaultState((OZChannelFolder *)v9);
      }
      OZDynamicCurve::getKeypointHandle(v6, v7, (double)v5, &v8);
      OZDynamicCurve::getVertexChannel(v6, (char *)v8, (OZChannelVertexFolder **)&v9);
      if (v9)
      {
        OZChannelFolder::push_back(v2, v9);
        if ((OZChannelVertexFolder::isVertexSaveWhenAtDefaultState((OZChannelFolder *)v9) & 1) == 0)
          OZChannelVertexFolder::setVertexSaveWhenAtDefaultState((OZChannelFolder *)v9);
      }
      ++v5;
      result = OZDynamicCurve::getNumberOfKeypoints(v3);
    }
    while (v5 < result);
  }
  return result;
}

uint64_t OZChannelCurve::setDefaultAtCurrentTime(OZChannelCurve *this, const CMTime *a2)
{
  OZDynamicCurve::setDefaultAtCurrentTime((OZChannelCurve *)((char *)this + 288), a2);
  return OZDynamicCurve::setDefaultAtCurrentTime((OZChannelCurve *)((char *)this + 520), a2);
}

double OZChannelCurve::getMaxParametricValue(OZChannelCurve *this, const CMTime *a2)
{
  double v3;

  v3 = 0.0;
  OZDynamicCurve::getCurrentMaxValueU((OZChannelCurve *)((char *)this + 288), a2, &v3);
  return v3;
}

uint64_t OZChannelCurve::calcHashForAnimationOnly(OZChannel *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  CMTime v6;
  CMTime v7;
  CMTime v8;

  OZChannel::calcHashForState(this, a2, a3);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelScope);
  v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (OZChannel::getFirstKeyframe(this, &v8, 0))
  {
    v7 = v8;
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1000);
    (*(void (**)(PCSerializerWriteStream *, CMTime *))(*(_QWORD *)a2 + 112))(a2, &v7);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((unsigned int (**)(OZChannel *, CMTime *, _QWORD))this->var0 + 79))(this, &v8, 0))
    {
      do
      {
        v6 = v8;
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1000);
        (*(void (**)(PCSerializerWriteStream *, CMTime *))(*(_QWORD *)a2 + 112))(a2, &v6);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      }
      while (((*((uint64_t (**)(OZChannel *, CMTime *, _QWORD))this->var0 + 79))(this, &v8, 0) & 1) != 0);
    }
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZChannelCurve::calcHashForState(OZChannelCurve *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  CMTime v7;
  CMTime v8;
  CMTime v9;

  OZChannel::calcHashForState((OZChannel *)this, a2, a3);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelScope);
  v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (OZChannel::getFirstKeyframe((OZChannel *)this, &v9, 0))
  {
    v8 = v9;
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1000);
    (*(void (**)(PCSerializerWriteStream *, CMTime *))(*(_QWORD *)a2 + 112))(a2, &v8);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    if ((*(unsigned int (**)(OZChannelCurve *, CMTime *, _QWORD))(*(_QWORD *)this + 632))(this, &v9, 0))
    {
      do
      {
        v7 = v9;
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1000);
        (*(void (**)(PCSerializerWriteStream *, CMTime *))(*(_QWORD *)a2 + 112))(a2, &v7);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      }
      while (((*(uint64_t (**)(OZChannelCurve *, CMTime *, _QWORD))(*(_QWORD *)this + 632))(this, &v9, 0) & 1) != 0);
    }
  }
  OZChannelFolder::calcHashForState((OZChannelFolder *)((char *)this + 152), a2, a3);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void OZChannelCurve::writeBody(OZChannel *this, PCSerializerWriteStream *a2, int a3, BOOL a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _BOOL8 v15;
  BOOL v16;
  OZChannelVertexFolder *v17;
  unsigned int v18;
  void *__p;
  void *v20;
  uint64_t v21;
  void *v22;
  _BYTE *v23;
  uint64_t v24;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelScope);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v17 = 0;
  OZDynamicCurve::getKeypointHandleList((uint64_t)&this[1].var17, (char **)&v22);
  OZDynamicCurve::getKeypointHandleList((uint64_t)&this[3].var8, (char **)&__p);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
  if (v23 != v22)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 123);
      OZDynamicCurve::getKeypointFlags((OZDynamicCurve *)&this[1].var17, *((char **)v22 + v9), &v18);
      OZDynamicCurve::getVertexChannel((OZDynamicCurve *)&this[1].var17, *((char **)v22 + v9), &v17);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, unint64_t))(*(_QWORD *)a2 + 144))(a2, 5, v10);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 7, *((unsigned int *)v17 + 6));
      (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 4, v18);
      v11 = (char *)v17 + 16;
      (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(*((_QWORD *)v17 + 2) + 16))((char *)v17 + 16, a2, 0);
      (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v11, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v9 = (v10 + 1);
      v10 = v9;
    }
    while (v9 < (v23 - (_BYTE *)v22) >> 3);
  }
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
  if (v23 != v22)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 123);
      OZDynamicCurve::getKeypointFlags((OZDynamicCurve *)&this[3].var8, *((char **)__p + v12), &v18);
      OZDynamicCurve::getVertexChannel((OZDynamicCurve *)&this[3].var8, *((char **)__p + v12), &v17);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, unint64_t))(*(_QWORD *)a2 + 144))(a2, 5, v13);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 7, *((unsigned int *)v17 + 6));
      (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 4, v18);
      v14 = (char *)v17 + 16;
      (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(*((_QWORD *)v17 + 2) + 16))((char *)v17 + 16, a2, 0);
      (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v12 = (v13 + 1);
      v13 = v12;
    }
    while (v12 < (v23 - (_BYTE *)v22) >> 3);
  }
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v16 = 0;
  OZDynamicCurve::isClosedCurve((OZDynamicCurve *)&this[1].var17, &v16);
  v15 = v16;
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 8);
  (*(void (**)(PCSerializerWriteStream *, _BOOL8))(*(_QWORD *)a2 + 48))(a2, v15);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  OZChannel::writeBody(this, a2, a3);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
}

void sub_1B2C7539C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'OZChannelCurve::writeBody(OZChannelCurve *this, PCSerializerWriteStream *a2, int a3, BOOL a4, uint64_t a5)
{
  OZChannelCurve::writeBody((OZChannel *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZChannelCurve::parseBegin(OZChannelCurve *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelScope);
  OZChannel::parseBegin((OZChannel *)this, a2);
  if (*((_DWORD *)a2 + 26) >= 3u)
  {
    OZChannelFolder::removeAllDescendants((OZChannelFolder *)((char *)this + 152), 1);
    OZDynamicCurve::delAllKeypoints((OZChannelCurve *)((char *)this + 288));
    OZDynamicCurve::delAllKeypoints((OZChannelCurve *)((char *)this + 520));
  }
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelCurve::parseBegin(OZChannelCurve *this, PCSerializerReadStream *a2)
{
  OZChannelCurve::parseBegin((OZChannelCurve *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelCurve::parseEnd(OZChannelCurve *this, PCSerializerReadStream *a2)
{
  OZChannel::parseEnd((OZChannel *)this, a2);
  *((_WORD *)this + 396) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 152), 128, 0);
  (*(void (**)(OZChannelCurve *))(*(_QWORD *)this + 856))(this);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelCurve::parseEnd(OZChannelCurve *this, PCSerializerReadStream *a2)
{
  OZChannelCurve::parseEnd((OZChannelCurve *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelCurve::parseElement(OZChannel *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  int AttributeAsUInt32;
  unint64_t v9;
  double v10;
  OZDynamicCurve *p_var17;
  char *var5;
  OZDynamicCurve *p_var8;
  PCSerializer *v14;
  OZChannelVertexFolder *v15;
  char v16;
  unsigned int v17;
  unsigned int v18[2];

  *(_QWORD *)v18 = 0;
  v17 = 0;
  v16 = 0;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 <= 7)
  {
    if (v6 != 1)
    {
      if (v6 != 2)
        goto LABEL_11;
      LOWORD(v6) = 256;
    }
    LOWORD(this[5].var4.var0) = v6;
    goto LABEL_11;
  }
  if (v6 == 123)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 5, (uint64_t)&v18[1]);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 4, (uint64_t)v18);
    AttributeAsUInt32 = PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 7, (uint64_t)&v17);
    LODWORD(v9) = v18[1];
    v10 = (double)v9;
    if (LOBYTE(this[5].var4.var0))
      p_var17 = (OZDynamicCurve *)&this[1].var17;
    else
      p_var17 = (OZDynamicCurve *)&this[3].var8;
    OZDynamicCurve::setKeypoint(p_var17, MEMORY[0x1E0CA2E68], v10, (CMTimeEpoch **)&this[5].var5);
    OZDynamicCurve::setKeypointFlags(p_var17, (char *)this[5].var5, v18[0]);
    if (AttributeAsUInt32)
      OZDynamicCurve::setKeypointID(p_var17, (char *)this[5].var5, v17);
    goto LABEL_11;
  }
  if (v6 != 122)
  {
    if (v6 == 8)
    {
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 72))(a3, &v16);
      if (v16)
      {
        OZDynamicCurve::closeCurve((OZDynamicCurve *)&this[1].var17);
        OZDynamicCurve::closeCurve((OZDynamicCurve *)&this[3].var8);
      }
    }
    goto LABEL_11;
  }
  var5 = (char *)this[5].var5;
  if (!var5)
  {
LABEL_11:
    OZChannel::parseElement(this, a2, a3);
    return 1;
  }
  v15 = 0;
  if (LOBYTE(this[5].var4.var0))
    p_var8 = (OZDynamicCurve *)&this[1].var17;
  else
    p_var8 = (OZDynamicCurve *)&this[3].var8;
  OZDynamicCurve::getVertexChannel(p_var8, var5, &v15);
  this[5].var5 = 0;
  if (v15)
    v14 = (OZChannelVertexFolder *)((char *)v15 + 16);
  else
    v14 = 0;
  PCSerializerReadStream::pushHandler(a2, v14);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelCurve::parseElement(OZChannelCurve *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelCurve::parseElement((OZChannel *)((char *)this - 16), a2, a3);
  return 1;
}

void std::__call_once_param<std::tuple<OZChannelCurve::createOZChannelCurveInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelCurveInfo *v0;

  if (!OZChannelCurve::_OZChannelCurveInfo)
  {
    v0 = (OZChannelCurveInfo *)operator new();
    OZChannelCurveInfo::OZChannelCurveInfo(v0);
    OZChannelCurve::_OZChannelCurveInfo = (uint64_t)v0;
  }
}

void sub_1B2C756D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelCurveInfo::OZChannelCurveInfo(OZChannelCurveInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 0.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E6559498;
  *((_QWORD *)this + 10) = &unk_1E65594B8;
}

void sub_1B2C75760(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelCurve::createOZChannelCurveImpl(void)::{lambda(void)#1} &&>>()
{
  OZChannelCurve::createOZChannelCurveImpl(void)::{lambda(void)#1}::operator()();
}

void OZChannelCurve::createOZChannelCurveImpl(void)::{lambda(void)#1}::operator()()
{
  OZCurveInt *v0;
  OZChannelImpl *v1;

  if (!OZChannelCurve::_OZChannelCurveImpl)
  {
    v0 = (OZCurveInt *)operator new();
    OZCurveInt::OZCurveInt(v0, 0.0);
    v1 = (OZChannelImpl *)operator new();
    OZChannelImpl::OZChannelImpl(v1, (OZCurve *)v0, 0.0, 1u, 1);
    OZChannelCurve::_OZChannelCurveImpl = (uint64_t)v1;
    OZChannelImpl::setMax(v1, 0.0);
    OZChannelImpl::setMin((OZChannelImpl *)OZChannelCurve::_OZChannelCurveImpl, 0.0);
  }
}

void sub_1B2C75828(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

double std::__split_buffer<double>::push_back(_QWORD *a1, double *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  double result;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  result = *a2;
  *(double *)v4 = *a2;
  a1[2] = v4 + 8;
  return result;
}

char *std::vector<double>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void OZChannelDiscreteColor::OZChannelDiscreteColor(OZChannelDiscreteColor *this, PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZChannelDiscreteColor_Factory *v10;
  OZFactory *Instance;
  OZChannelDiscreteColor_Factory *v12;
  PCString v13;

  TXParagraphStyleFolder_Factory::createInstance(this, (OZFactoryBase *)a2);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel Discrete Color"));
  Instance = (OZFactory *)OZChannelDiscreteColor_Factory::getInstance(v10);
  OZChannelEnum::OZChannelEnum((OZChannel *)this, &v13, Instance, a2, a3, a4, a5, 0, 0);
  PCString::~PCString(&v13);
  *(_QWORD *)this = &off_1E6559510;
  *((_QWORD *)this + 2) = &unk_1E6559880;
  *((_QWORD *)this + 1) = OZChannelDiscreteColor_Factory::getInstance(v12);
}

void sub_1B2C75AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString *v10;

  OZChannelEnum::~OZChannelEnum(v10);
  _Unwind_Resume(a1);
}

void OZChannelDiscreteColor::OZChannelDiscreteColor(OZChannelDiscreteColor *this, double a2, PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  unsigned int v11;
  OZChannelDiscreteColor_Factory *v12;
  PCString v13;

  v11 = a2;
  TXParagraphStyleFolder_Factory::createInstance(this, (OZFactoryBase *)a3);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel Discrete Color"));
  OZChannelEnum::OZChannelEnum(this, v11, &v13, a3, a4, a5, a6, 0, 0);
  PCString::~PCString(&v13);
  *(_QWORD *)this = &off_1E6559510;
  *((_QWORD *)this + 2) = &unk_1E6559880;
  *((_QWORD *)this + 1) = OZChannelDiscreteColor_Factory::getInstance(v12);
}

void sub_1B2C75BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString *v10;

  OZChannelEnum::~OZChannelEnum(v10);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelDiscreteColor::clone(OZChannelDiscreteColor *this)
{
  OZChannelEnum *v2;

  v2 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v2, this, 0);
  *(_QWORD *)v2 = &off_1E6559510;
  *((_QWORD *)v2 + 2) = &unk_1E6559880;
  return v2;
}

void sub_1B2C75C44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

uint64_t OZChannelDiscreteColor::setColorIndex(OZChannelDiscreteColor *this, unsigned int a2)
{
  return (*(uint64_t (**)(OZChannelDiscreteColor *, _QWORD, _QWORD, double))(*(_QWORD *)this + 712))(this, MEMORY[0x1E0CA2E68], 0, (double)a2);
}

uint64_t OZChannelDiscreteColor::setDefaultColorIndex(OZChannel *this, unsigned int a2)
{
  OZChannel::setDefaultValue(this, (double)a2);
  return (*((uint64_t (**)(OZChannel *, _QWORD))this->var0 + 36))(this, 0);
}

uint64_t OZChannelDiscreteColor::getDefaultColorIndex(OZChannel *this)
{
  return OZChannel::getDefaultValue(this);
}

const __CFString *OZChannelDiscreteColor::getObjCWrapperName(OZChannelDiscreteColor *this)
{
  return CFSTR("CHChannelDiscreteColor");
}

CGColorSpace **OZChannelDiscreteColor::getPCColorForIndex@<X0>(OZChannelDiscreteColor *this@<X0>, PCColor *a2@<X8>)
{
  double *v3;
  float v4;
  float v5;
  float v6;
  CGColorSpace *v8;

  v3 = (double *)((char *)&gColorTable + 24 * this);
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  PCColorSpaceCache::sRGB(&v8);
  PCColor::PCColor(a2, v4, v5, v6, 1.0, (OZChannelBase *)&v8);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
}

void sub_1B2C75D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void OZChannelDiscreteColor::~OZChannelDiscreteColor(PCString *this)
{
  OZChannelEnum::~OZChannelEnum(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelDiscreteColor::~OZChannelDiscreteColor(PCString *this)
{
  OZChannelEnum::~OZChannelEnum(this - 2);
}

{
  OZChannelEnum::~OZChannelEnum(this - 2);
  JUMPOUT(0x1B5E29170);
}

const __CFString *OZChannelPercent::getObjCWrapperName(OZChannelPercent *this)
{
  return CFSTR("CHChannelPercent");
}

void OZChannelPercent::OZChannelPercent(OZChannelPercent *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelPercent *v11;
  OZChannelPercent *OZChannelPercentInfo;
  OZChannelInfo *var17;
  OZChannelPercent *OZChannelPercent100Impl;
  OZChannelPercent *OZChannelPercent50Impl;
  OZChannelImpl *var15;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, a7, a8);
  v11->var0 = (void **)&off_1E65598F0;
  v11->var2 = (void **)&unk_1E6559C50;
  OZChannelPercentInfo = (OZChannelPercent *)OZChannelPercent::createOZChannelPercentInfo(v11);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
    this->var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
  }
  this->var16 = var17;
  OZChannelPercent100Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent100Impl(OZChannelPercentInfo);
  OZChannelPercent50Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent50Impl(OZChannelPercent100Impl);
  OZChannelPercent::createOZChannelPercent0Impl(OZChannelPercent50Impl);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent100Impl;
    this->var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent100Impl;
  }
  this->var14 = var15;
}

void sub_1B2C75E68(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelPercent::createOZChannelPercentInfo(OZChannelPercent *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelPercent::createOZChannelPercentInfo(void)::_OZChannelPercentInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelPercent::createOZChannelPercentInfo(void)::_OZChannelPercentInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelPercent::createOZChannelPercentInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelPercent::_OZChannelPercentInfo;
}

uint64_t OZChannelPercent::createOZChannelPercent100Impl(OZChannelPercent *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelPercent::createOZChannelPercent100Impl(void)::_OZChannelPercent100Impl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelPercent::createOZChannelPercent100Impl(void)::_OZChannelPercent100Impl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelPercent::createOZChannelPercent100Impl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelPercent::_OZChannelPercent100Impl;
}

uint64_t OZChannelPercent::createOZChannelPercent50Impl(OZChannelPercent *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelPercent::createOZChannelPercent50Impl(void)::_OZChannelPercent50Impl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelPercent::createOZChannelPercent50Impl(void)::_OZChannelPercent50Impl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelPercent::createOZChannelPercent50Impl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelPercent::_OZChannelPercent50Impl;
}

uint64_t OZChannelPercent::createOZChannelPercent0Impl(OZChannelPercent *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelPercent::createOZChannelPercent0Impl(void)::_OZChannelPercent0Impl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelPercent::createOZChannelPercent0Impl(void)::_OZChannelPercent0Impl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelPercent::createOZChannelPercent0Impl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelPercent::_OZChannelPercent0Impl;
}

void OZChannelPercent::OZChannelPercent(OZChannelPercent *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *Instance;
  OZChannelPercent *v15;
  OZChannelPercent *OZChannelPercentInfo;
  OZChannelInfo *var17;
  OZChannelPercent *OZChannelPercent100Impl;
  OZChannelPercent *OZChannelPercent50Impl;
  OZChannelImpl *var15;

  Instance = (OZFactory *)OZChannelPercent_Factory::getInstance((OZChannelPercent_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&off_1E65598F0;
  this->var2 = (void **)&unk_1E6559C50;
  OZChannelPercentInfo = (OZChannelPercent *)OZChannelPercent::createOZChannelPercentInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
    this->var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
  }
  this->var16 = var17;
  OZChannelPercent100Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent100Impl(OZChannelPercentInfo);
  OZChannelPercent50Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent50Impl(OZChannelPercent100Impl);
  OZChannelPercent::createOZChannelPercent0Impl(OZChannelPercent50Impl);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent100Impl;
    this->var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent100Impl;
  }
  this->var14 = var15;
}

void sub_1B2C760C0(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelPercent::OZChannelPercent(OZChannelPercent *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *Instance;
  OZChannelPercent *v17;
  OZChannelPercent *OZChannelPercentInfo;
  OZChannelInfo *var17;
  OZChannelPercent *OZChannelPercent100Impl;
  OZChannelPercent *OZChannelPercent50Impl;
  OZChannelImpl *var15;

  Instance = (OZFactory *)OZChannelPercent_Factory::getInstance((OZChannelPercent_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a3, a4, a5, a6, a7, a8);
  this->var0 = (void **)&off_1E65598F0;
  this->var2 = (void **)&unk_1E6559C50;
  OZChannelPercentInfo = (OZChannelPercent *)OZChannelPercent::createOZChannelPercentInfo(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
    this->var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
  }
  this->var16 = var17;
  OZChannelPercent100Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent100Impl(OZChannelPercentInfo);
  OZChannelPercent50Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent50Impl(OZChannelPercent100Impl);
  OZChannelPercent::createOZChannelPercent0Impl(OZChannelPercent50Impl);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    if (fabs(a2 + -1.0) >= 0.0000001)
    {
      if (fabs(a2) >= 0.0000001)
        var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent50Impl;
      else
        var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent0Impl;
    }
    else
    {
      var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent100Impl;
    }
    this->var15 = var15;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  OZChannel::setInitialValue((OZChannel *)this, a2, 0);
}

void sub_1B2C76214(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelPercent::OZChannelPercent(OZChannelPercent *this, OZFactory *a2, const PCString *a3, unsigned int a4, OZChannelImpl *a5, OZChannelInfo *a6)
{
  OZChannelPercent *v9;
  OZChannelPercent *OZChannelPercentInfo;
  OZChannelInfo *var17;
  OZChannelPercent *OZChannelPercent100Impl;
  OZChannelPercent *OZChannelPercent50Impl;
  OZChannelImpl *var15;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6);
  v9->var0 = (void **)&off_1E65598F0;
  v9->var2 = (void **)&unk_1E6559C50;
  OZChannelPercentInfo = (OZChannelPercent *)OZChannelPercent::createOZChannelPercentInfo(v9);
  if (a6)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
    this->var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
  }
  this->var16 = var17;
  OZChannelPercent100Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent100Impl(OZChannelPercentInfo);
  OZChannelPercent50Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent50Impl(OZChannelPercent100Impl);
  OZChannelPercent::createOZChannelPercent0Impl(OZChannelPercent50Impl);
  if (a5)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent0Impl;
    this->var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent0Impl;
  }
  this->var14 = var15;
}

void sub_1B2C762BC(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelPercent::OZChannelPercent(OZChannelPercent *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  *v3 = &off_1E65598F0;
  v3[2] = &unk_1E6559C50;
}

void `non-virtual thunk to'OZChannelPercent::~OZChannelPercent(OZChannelPercent *this)
{
  OZChannel::~OZChannel((OZChannel *)&this[-1].var17);
}

{
  OZChannel::~OZChannel((OZChannel *)&this[-1].var17);
  JUMPOUT(0x1B5E29170);
}

void OZChannelPercent::~OZChannelPercent(OZChannelPercent *this)
{
  OZChannel::~OZChannel((OZChannel *)this);
  JUMPOUT(0x1B5E29170);
}

OZChannel *OZChannelPercent::clone(OZChannelPercent *this)
{
  OZChannel *v2;

  v2 = (OZChannel *)operator new();
  OZChannel::OZChannel(v2, (const OZChannelBase *)this, 0);
  v2->var0 = (void **)&off_1E65598F0;
  v2->var2 = (void **)&unk_1E6559C50;
  return v2;
}

void sub_1B2C763B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelPercent::createOZChannelPercentInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercentInfo *v0;

  if (!OZChannelPercent::_OZChannelPercentInfo)
  {
    v0 = (OZChannelPercentInfo *)operator new();
    OZChannelPercentInfo::OZChannelPercentInfo(v0);
    OZChannelPercent::_OZChannelPercentInfo = (uint64_t)v0;
  }
}

void sub_1B2C76420(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelPercentInfo::OZChannelPercentInfo(OZChannelPercentInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 0.01, 0.0001, 100.0, "%");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E6559CC0;
  *((_QWORD *)this + 10) = &unk_1E6559CE0;
}

void sub_1B2C764B4(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelPercent::createOZChannelPercent100Impl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCurvePercent *v0;
  OZChannelImpl *v1;

  if (!OZChannelPercent::_OZChannelPercent100Impl)
  {
    v0 = (OZCurvePercent *)operator new();
    OZCurvePercent::OZCurvePercent(v0, 1.0);
    v1 = (OZChannelImpl *)operator new();
    OZChannelImpl::OZChannelImpl(v1, (OZCurve *)v0, 1.0, 1u, 1);
    OZChannelPercent::_OZChannelPercent100Impl = (uint64_t)v1;
  }
}

void sub_1B2C76550(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelPercent::createOZChannelPercent50Impl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCurvePercent *v0;
  OZChannelImpl *v1;

  if (!OZChannelPercent::_OZChannelPercent50Impl)
  {
    v0 = (OZCurvePercent *)operator new();
    OZCurvePercent::OZCurvePercent(v0, 0.5);
    v1 = (OZChannelImpl *)operator new();
    OZChannelImpl::OZChannelImpl(v1, (OZCurve *)v0, 0.5, 1u, 1);
    OZChannelPercent::_OZChannelPercent50Impl = (uint64_t)v1;
  }
}

void sub_1B2C76610(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelPercent::createOZChannelPercent0Impl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCurvePercent *v0;
  OZChannelImpl *v1;

  if (!OZChannelPercent::_OZChannelPercent0Impl)
  {
    v0 = (OZCurvePercent *)operator new();
    OZCurvePercent::OZCurvePercent(v0, 0.0);
    v1 = (OZChannelImpl *)operator new();
    OZChannelImpl::OZChannelImpl(v1, (OZCurve *)v0, 0.0, 1u, 1);
    OZChannelPercent::_OZChannelPercent0Impl = (uint64_t)v1;
  }
}

void sub_1B2C766D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum(OZChannel *this, const PCString *a2, OZFactory *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, OZChannelImpl *a8, OZChannelInfo *a9)
{
  OZChannelImpl *v9;
  OZChannel *v16;
  OZChannelInfo *Instance;

  v9 = a8;
  v16 = this;
  Instance = a9;
  this->var0 = (void **)&off_1E6559D38;
  this->var2 = (void **)&unk_1E655A0A8;
  if (!a8)
  {
    this = (OZChannel *)OZChannelEnum::OZChannelEnum_valueImpl::getInstance((OZChannelEnum::OZChannelEnum_valueImpl *)this);
    v9 = (OZChannelImpl *)this;
    if (a9)
      goto LABEL_3;
LABEL_5:
    Instance = (OZChannelInfo *)OZChannelEnum::OZChannelEnum_valueInfo::getInstance((OZChannelEnum::OZChannelEnum_valueInfo *)this);
    goto LABEL_3;
  }
  if (!a9)
    goto LABEL_5;
LABEL_3:
  OZChannel::OZChannel(v16, a3, a4, a5, a6, a7, v9, Instance);
  v16->var0 = (void **)&off_1E6559D38;
  v16->var2 = (void **)&unk_1E655A0A8;
  v16[1].var0 = 0;
  PCString::PCString((PCString *)&v16[1].var1, a2);
  *(_OWORD *)&v16[1].var2 = 0u;
  LODWORD(v16[1].var8) = 0;
  *(_OWORD *)&v16[1].var4.var0 = 0u;
  *(_OWORD *)&v16[1].var6 = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v16[1].var9);
  v16[1].var10 = 0;
  v16[1].var11 = 0;
  v16[1].var12 = 0;
  (*((void (**)(OZChannel *, const PCString *, _QWORD))v16->var0 + 106))(v16, a2, 0);
  v16->var7 |= 0x10000uLL;
  (*((void (**)(OZChannel *))v16->var0 + 16))(v16);
}

void sub_1B2C76848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  PCString *v11;
  void **v12;
  void *v14;
  void *v15;

  v14 = *(void **)(v10 + 192);
  if (v14)
    operator delete(v14);
  v15 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 176) = v15;
    operator delete(v15);
  }
  PCString::~PCString(v11);
  OZChannel::~OZChannel((OZChannel *)v10);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum(OZChannelEnum *this, const PCString *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelEnum::OZChannelEnum_valueImpl *Instance;
  OZFactory *v17;

  *(_QWORD *)this = &off_1E6559D38;
  *((_QWORD *)this + 2) = &unk_1E655A0A8;
  Instance = (OZChannelEnum::OZChannelEnum_valueImpl *)OZChannelEnum_Factory::getInstance(this);
  v17 = (OZFactory *)Instance;
  if (!a7)
  {
    Instance = (OZChannelEnum::OZChannelEnum_valueImpl *)OZChannelEnum::OZChannelEnum_valueImpl::getInstance(Instance);
    a7 = (OZChannelImpl *)Instance;
    if (a8)
      goto LABEL_3;
LABEL_5:
    a8 = (OZChannelInfo *)OZChannelEnum::OZChannelEnum_valueInfo::getInstance(Instance);
    goto LABEL_3;
  }
  if (!a8)
    goto LABEL_5;
LABEL_3:
  OZChannel::OZChannel((OZChannel *)this, v17, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = &off_1E6559D38;
  *((_QWORD *)this + 2) = &unk_1E655A0A8;
  *((_QWORD *)this + 19) = 0;
  PCString::PCString((PCString *)this + 20, a2);
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 54) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 28);
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  (*(void (**)(OZChannelEnum *, const PCString *, _QWORD))(*(_QWORD *)this + 848))(this, a2, 0);
  *((_QWORD *)this + 7) |= 0x10000uLL;
  (*(void (**)(OZChannelEnum *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2C769E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  PCString *v11;
  void **v12;
  void *v14;
  void *v15;

  v14 = *(void **)(v10 + 192);
  if (v14)
    operator delete(v14);
  v15 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 176) = v15;
    operator delete(v15);
  }
  PCString::~PCString(v11);
  OZChannel::~OZChannel((OZChannel *)v10);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum(OZChannelEnum *this, unsigned int a2, const PCString *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, OZChannelImpl *a8, OZChannelInfo *a9)
{
  OZChannelInfo *v16;
  OZChannelEnum::OZChannelEnum_valueImpl *Instance;
  OZFactory *v18;

  v16 = a9;
  *(_QWORD *)this = &off_1E6559D38;
  *((_QWORD *)this + 2) = &unk_1E655A0A8;
  Instance = (OZChannelEnum::OZChannelEnum_valueImpl *)OZChannelEnum_Factory::getInstance(this);
  v18 = (OZFactory *)Instance;
  if (!a8)
  {
    Instance = (OZChannelEnum::OZChannelEnum_valueImpl *)OZChannelEnum::OZChannelEnum_valueImpl::getInstance(Instance);
    a8 = (OZChannelImpl *)Instance;
    if (a9)
      goto LABEL_3;
LABEL_5:
    v16 = (OZChannelInfo *)OZChannelEnum::OZChannelEnum_valueInfo::getInstance(Instance);
    goto LABEL_3;
  }
  if (!a9)
    goto LABEL_5;
LABEL_3:
  OZChannel::OZChannel((OZChannel *)this, v18, a4, a5, a6, a7, a8, v16);
  *(_QWORD *)this = &off_1E6559D38;
  *((_QWORD *)this + 2) = &unk_1E655A0A8;
  *((_QWORD *)this + 19) = 0;
  PCString::PCString((PCString *)this + 20, a3);
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 54) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 28);
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
  (*(void (**)(OZChannelEnum *, const PCString *, _QWORD))(*(_QWORD *)this + 848))(this, a3, 0);
  *((_QWORD *)this + 7) |= 0x10000uLL;
  (*(void (**)(OZChannelEnum *))(*(_QWORD *)this + 128))(this);
}

{
  OZChannelEnum::OZChannelEnum(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B2C76BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  PCString *v11;
  void **v12;
  void *v14;
  void *v15;

  v14 = *(void **)(v10 + 192);
  if (v14)
    operator delete(v14);
  v15 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 176) = v15;
    operator delete(v15);
  }
  PCString::~PCString(v11);
  OZChannel::~OZChannel((OZChannel *)v10);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum(OZChannel *this, OZFactory *a2, const PCString *a3, unsigned int a4, OZChannelImpl *a5, OZChannelInfo *a6)
{
  OZChannelInfo *Instance;
  OZChannelImpl *v7;
  OZChannel *v11;

  Instance = a6;
  v7 = a5;
  v11 = this;
  this->var0 = (void **)&off_1E6559D38;
  this->var2 = (void **)&unk_1E655A0A8;
  if (!a5)
  {
    this = (OZChannel *)OZChannelEnum::OZChannelEnum_valueImpl::getInstance((OZChannelEnum::OZChannelEnum_valueImpl *)this);
    v7 = (OZChannelImpl *)this;
    if (Instance)
      goto LABEL_3;
LABEL_5:
    Instance = (OZChannelInfo *)OZChannelEnum::OZChannelEnum_valueInfo::getInstance((OZChannelEnum::OZChannelEnum_valueInfo *)this);
    goto LABEL_3;
  }
  if (!a6)
    goto LABEL_5;
LABEL_3:
  OZChannel::OZChannel(v11, a2, a3, a4, v7, Instance);
  v11->var0 = (void **)&off_1E6559D38;
  v11->var2 = (void **)&unk_1E655A0A8;
  v11[1].var0 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v11[1].var1);
  *(_OWORD *)&v11[1].var2 = 0u;
  LODWORD(v11[1].var8) = 0;
  *(_OWORD *)&v11[1].var4.var0 = 0u;
  *(_OWORD *)&v11[1].var6 = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v11[1].var9);
  v11[1].var10 = 0;
  v11[1].var11 = 0;
  v11[1].var12 = 0;
  (*((void (**)(OZChannel *, OZFactory **, _QWORD))v11->var0 + 106))(v11, &v11[1].var1, 0);
  v11->var7 |= 0x10000uLL;
  (*((void (**)(OZChannel *))v11->var0 + 16))(v11);
}

void sub_1B2C76D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  PCString *v11;
  void **v12;
  void *v14;
  void *v15;

  v14 = *(void **)(v10 + 192);
  if (v14)
    operator delete(v14);
  v15 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 176) = v15;
    operator delete(v15);
  }
  PCString::~PCString(v11);
  OZChannel::~OZChannel((OZChannel *)v10);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum(OZChannel *this, unsigned int a2, const PCString *a3, const PCString *a4, OZFactory *a5, OZChannelFolder *a6, unsigned int a7, int a8, OZChannelImpl *a9, OZChannelInfo *a10)
{
  OZChannel *v16;
  OZChannelInfo *Instance;
  OZChannelImpl *v18;

  v16 = this;
  v18 = a9;
  Instance = a10;
  this->var0 = (void **)&off_1E6559D38;
  this->var2 = (void **)&unk_1E655A0A8;
  if (!a9)
  {
    this = (OZChannel *)OZChannelEnum::OZChannelEnum_valueImpl::getInstance((OZChannelEnum::OZChannelEnum_valueImpl *)this);
    v18 = (OZChannelImpl *)this;
    if (a10)
      goto LABEL_3;
LABEL_5:
    Instance = (OZChannelInfo *)OZChannelEnum::OZChannelEnum_valueInfo::getInstance((OZChannelEnum::OZChannelEnum_valueInfo *)this);
    goto LABEL_3;
  }
  if (!a10)
    goto LABEL_5;
LABEL_3:
  OZChannel::OZChannel(v16, a5, a4, a6, a7, a8, v18, Instance);
  v16->var0 = (void **)&off_1E6559D38;
  v16->var2 = (void **)&unk_1E655A0A8;
  v16[1].var0 = 0;
  PCString::PCString((PCString *)&v16[1].var1, a3);
  *(_OWORD *)&v16[1].var2 = 0u;
  LODWORD(v16[1].var8) = 0;
  *(_OWORD *)&v16[1].var4.var0 = 0u;
  *(_OWORD *)&v16[1].var6 = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v16[1].var9);
  v16[1].var10 = 0;
  v16[1].var11 = 0;
  v16[1].var12 = 0;
  OZChannel::setDefaultValue(v16, (double)a2);
  OZChannel::setInitialValue(v16, (double)a2, 0);
  (*((void (**)(OZChannel *, const PCString *, _QWORD))v16->var0 + 106))(v16, a3, 0);
  v16->var7 |= 0x10000uLL;
  (*((void (**)(OZChannel *))v16->var0 + 16))(v16);
}

void sub_1B2C76F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  PCString *v11;
  void **v12;
  void *v14;
  void *v15;

  v14 = *(void **)(v10 + 192);
  if (v14)
    operator delete(v14);
  v15 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 176) = v15;
    operator delete(v15);
  }
  PCString::~PCString(v11);
  OZChannel::~OZChannel((OZChannel *)v10);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum(OZChannelEnum *this, const OZChannelEnum *a2, OZChannelFolder *a3)
{
  PCSharedCount *v5;
  PCString *v6;

  OZChannel::OZChannel((OZChannel *)this, (const OZChannelBase *)a2, a3);
  v5->var0 = (PC_Sp_counted_base *)&off_1E6559D38;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1E655A0A8;
  v5[19].var0 = 0;
  v6 = (PCString *)&v5[20];
  PCSharedCount::PCSharedCount(v5 + 20);
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 54) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 28);
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  PCString::set(v6, (const PCString *)a2 + 20);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  ++*((_DWORD *)this + 54);
  if (this != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 168, *((char **)a2 + 21), *((_QWORD *)a2 + 22), (uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 2);
  std::vector<BOOL>::operator=((void **)this + 24, (uint64_t)a2 + 192);
  PCString::set((PCString *)this + 28, (const PCString *)a2 + 28);
  if (this != a2)
    std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)this + 232, *((PCString **)a2 + 29), *((PCString **)a2 + 30), (uint64_t)(*((_QWORD *)a2 + 30) - *((_QWORD *)a2 + 29)) >> 3);
}

void sub_1B2C77078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  PCString *v11;
  void **v12;
  void **v13;
  void *v15;

  if (*v13)
    operator delete(*v13);
  v15 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 176) = v15;
    operator delete(v15);
  }
  PCString::~PCString(v11);
  OZChannel::~OZChannel((OZChannel *)v10);
  _Unwind_Resume(a1);
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *v6;

  if (a1 != (void **)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      if (v4 > (_QWORD)a1[2] << 6)
      {
        v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          v4 = *(_QWORD *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        v4 = *(_QWORD *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v6 = *(void **)(a2 + 8);
    }
    else
    {
      v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

void OZChannelEnum::~OZChannelEnum(PCString *this)
{
  __CFString *var0;
  __CFString *v3;
  PCString *v4;

  this->var0 = (__CFString *)&off_1E6559D38;
  this[2].var0 = (__CFString *)&unk_1E655A0A8;
  v4 = this + 29;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
  PCString::~PCString(this + 28);
  var0 = this[24].var0;
  if (var0)
    operator delete(var0);
  v3 = this[21].var0;
  if (v3)
  {
    this[22].var0 = v3;
    operator delete(v3);
  }
  PCString::~PCString(this + 20);
  OZChannel::~OZChannel((OZChannel *)this);
}

{
  OZChannelEnum::~OZChannelEnum(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelEnum::~OZChannelEnum(PCString *this)
{
  OZChannelEnum::~OZChannelEnum(this - 2);
}

{
  OZChannelEnum::~OZChannelEnum(this - 2);
  JUMPOUT(0x1B5E29170);
}

OZChannelEnum *OZChannelEnum::clone(OZChannelEnum *this)
{
  OZChannelEnum *v2;

  v2 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v2, this, 0);
  return v2;
}

void sub_1B2C77284(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnum::copy(PCString *this, const OZChannelBase *a2, char a3)
{
  const PCString *v5;
  const PCString *v6;

  OZChannel::copy((OZChannel *)this, a2, a3);
  if (a2)
  {
    if (v5)
    {
      v6 = v5;
      PCString::set(this + 20, v5 + 20);
      this[19].var0 = v6[19].var0;
      ++LODWORD(this[27].var0);
      if (v6 == this)
      {
        std::vector<BOOL>::operator=((void **)&this[24].var0, (uint64_t)&v6[24]);
        PCString::set(this + 28, v6 + 28);
      }
      else
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&this[21], (char *)v6[21].var0, (uint64_t)v6[22].var0, ((char *)v6[22].var0 - (char *)v6[21].var0) >> 2);
        std::vector<BOOL>::operator=((void **)&this[24].var0, (uint64_t)&v6[24]);
        PCString::set(this + 28, v6 + 28);
        std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)&this[29], (PCString *)v6[29].var0, (PCString *)v6[30].var0, ((char *)v6[30].var0 - (char *)v6[29].var0) >> 3);
      }
    }
  }
}

void OZChannelEnum::assign(PCString *this, const OZChannelBase *a2)
{
  const PCString *v4;
  const PCString *v5;

  OZChannel::assign((OZChannel *)this, a2);
  if (a2)
  {
    if (v4)
    {
      v5 = v4;
      this[19].var0 = v4[19].var0;
      PCString::set(this + 20, v4 + 20);
      ++LODWORD(this[27].var0);
      if (v5 == this)
      {
        std::vector<BOOL>::operator=((void **)&this[24].var0, (uint64_t)&v5[24]);
        PCString::set(this + 28, v5 + 28);
      }
      else
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&this[21], (char *)v5[21].var0, (uint64_t)v5[22].var0, ((char *)v5[22].var0 - (char *)v5[21].var0) >> 2);
        std::vector<BOOL>::operator=((void **)&this[24].var0, (uint64_t)&v5[24]);
        PCString::set(this + 28, v5 + 28);
        std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)&this[29], (PCString *)v5[29].var0, (PCString *)v5[30].var0, ((char *)v5[30].var0 - (char *)v5[29].var0) >> 3);
      }
    }
  }
}

uint64_t OZChannelEnum::compare(OZChannelEnum *this, const OZChannelBase *a2)
{
  uint64_t result;
  const PCString *v5;

  result = OZChannel::compare((OZChannel *)this, a2);
  if ((_DWORD)result)
  {
    result = 0;
    if (a2)
    {
      if (v5)
      {
        if (!PCString::compare((PCString *)this + 20, v5 + 20))
          return 1;
      }
    }
  }
  return result;
}

uint64_t OZChannelEnum::allowsDrag(OZChannelEnum *this, const OZChannelBase *a2)
{
  uint64_t result;
  const PCString *v5;

  result = OZChannelBase::allowsDrag((OZChannelBase *)this, a2);
  if ((_DWORD)result)
  {
    result = 0;
    if (a2)
    {
      if (v5)
      {
        if (!PCString::compare((PCString *)this + 20, v5 + 20))
          return 1;
      }
    }
  }
  return result;
}

void OZChannelEnum::setStrings(const PCString *this, PCString *a2, int a3)
{
  unsigned __int8 v6;
  _BOOL8 v7;
  std::mutex *v8;
  OZStringTablesMap *v9;
  OZStringTablesMap *Instance;
  OZStringTablesMap *v11;
  OZStringTablesMap *v12;
  __CFString *var0;
  OZStringTablesMap *ArrayBySeparatingStrings;
  __CFString *v15;
  __CFString *v16;
  const __CFString *v17;
  __CFString *v18;
  const __CFArray *v19;
  std::mutex *v20;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  const PCString *v24;
  uint64_t *v25;
  std::mutex *v26;
  OZStringTablesMap *v27;
  OZStringTablesMap *v28;
  PCString *v29;
  OZStringTablesMap *v30;
  OZStringTablesMap *v31;
  OZStringTablesMap *v32;
  OZStringTablesMap *v33;
  PCString *v34;
  OZStringTablesMap *v35;
  PCString v36;
  _BYTE v37[24];
  uint64_t v38[3];
  _QWORD block[5];
  void **v40;

  if ((v6 & 1) == 0
  {
    OZChannelEnum::setStrings(PCString const&,BOOL)::_stringsTableEmptyIterator = 0;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN13OZChannelEnum10setStringsERK8PCStringb_block_invoke;
  block[3] = &__block_descriptor_tmp_10;
  block[4] = this;
  if (OZChannelEnum::setStrings(PCString const&,BOOL)::onceToken == -1)
  {
    if (!a3)
      goto LABEL_5;
    goto LABEL_4;
  }
  dispatch_once(&OZChannelEnum::setStrings(PCString const&,BOOL)::onceToken, block);
  if (a3)
LABEL_4:
    PCString::set((PCString *)&this[20], a2);
LABEL_5:
  v7 = PCString::empty((PCString *)&this[20]);
  if (v7)
  {
    this[19].var0 = (__CFString *)OZChannelEnum::setStrings(PCString const&,BOOL)::_stringsTableEmptyIterator;
    return;
  }
  v8 = (std::mutex *)((char *)OZStringTablesMap::getInstance((OZStringTablesMap *)v7) + 8);
  PCSharedMutex::lock(v8);
  Instance = OZStringTablesMap::getInstance(v9);
  v11 = (OZStringTablesMap *)std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>((const PCString *)Instance + 14, (PCString *)&this[20]);
  this[19].var0 = (__CFString *)v11;
  v12 = OZStringTablesMap::getInstance(v11);
  var0 = this[19].var0;
  PCSharedMutex::unlock(v8);
  if (var0 == (__CFString *)((char *)v12 + 120))
  {
    memset(v38, 0, sizeof(v38));
    ArrayBySeparatingStrings = (OZStringTablesMap *)PCString::size(a2);
    if ((_DWORD)ArrayBySeparatingStrings)
    {
      v15 = PCString::cf_str(a2);
      if (CFStringFind(v15, CFSTR("|"), 0).location == -1)
      {
        v18 = PCString::cf_str(a2);
        if (CFStringFind(v18, CFSTR(";"), 0).location == -1)
        {
          std::vector<PCString>::push_back[abi:ne180100](v38, a2);
          v26 = (std::mutex *)((char *)OZStringTablesMap::getInstance(v31) + 8);
          PCSharedMutex::lock(v26);
          v33 = OZStringTablesMap::getInstance(v32);
          if (this[19].var0 == (__CFString *)((char *)v33 + 120))
          {
            v34 = (PCString *)OZStringTablesMap::getInstance(v33);
            v35 = OZStringTablesMap::getInstance((OZStringTablesMap *)v34);
            std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v36, this + 20, v38);
            this[19].var0 = (__CFString *)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(v34 + 14, (PCString *)v35 + 15, &v36, (uint64_t)&v36);
            v40 = (void **)v37;
            std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v40);
            PCString::~PCString(&v36);
          }
          goto LABEL_20;
        }
        v16 = PCString::cf_str(a2);
        v17 = CFSTR(";");
      }
      else
      {
        v16 = PCString::cf_str(a2);
        v17 = CFSTR("|");
      }
      ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v16, v17);
      v19 = ArrayBySeparatingStrings;
      if (ArrayBySeparatingStrings)
      {
        v20 = (std::mutex *)((char *)OZStringTablesMap::getInstance(ArrayBySeparatingStrings) + 8);
        PCSharedMutex::lock(v20);
        Count = CFArrayGetCount(v19);
        std::vector<PCString>::reserve(v38, Count);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v19, i);
            PCURL::PCURL((PCURL *)&v36, ValueAtIndex);
            v25 = PCString::intern(&v36, v24);
            PCString::~PCString(&v36);
            std::vector<PCString>::push_back[abi:ne180100](v38, (PCString *)v25);
          }
        }
        CFRelease(v19);
        PCSharedMutex::unlock(v20);
      }
    }
    v26 = (std::mutex *)((char *)OZStringTablesMap::getInstance(ArrayBySeparatingStrings) + 8);
    PCSharedMutex::lock(v26);
    ++LODWORD(this[27].var0);
    v28 = OZStringTablesMap::getInstance(v27);
    if (this[19].var0 == (__CFString *)((char *)v28 + 120))
    {
      v29 = (PCString *)OZStringTablesMap::getInstance(v28);
      v30 = OZStringTablesMap::getInstance((OZStringTablesMap *)v29);
      std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v36, this + 20, v38);
      this[19].var0 = (__CFString *)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(v29 + 14, (PCString *)v30 + 15, &v36, (uint64_t)&v36);
      v40 = (void **)v37;
      std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v40);
      PCString::~PCString(&v36);
    }
LABEL_20:
    PCSharedMutex::unlock(v26);
    v36.var0 = (__CFString *)v38;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  }
}

void sub_1B2C778C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::mutex *v14;

  std::pair<PCString,std::vector<PCString>>::~pair(&a10);
  PCSharedMutex::unlock(v14);
  a10.var0 = (__CFString *)&a14;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void ___ZN13OZChannelEnum10setStringsERK8PCStringb_block_invoke(OZStringTablesMap *a1)
{
  PCString *Instance;
  OZStringTablesMap *v2;
  PCString v3;
  PCString v4;
  uint64_t v5;
  uint64_t v6[3];
  void **v7;

  memset(v6, 0, sizeof(v6));
  Instance = (PCString *)OZStringTablesMap::getInstance(a1);
  v2 = OZStringTablesMap::getInstance((OZStringTablesMap *)Instance);
  PCString::PCString(&v3, "");
  std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v4, &v3, v6);
  OZChannelEnum::setStrings(PCString const&,BOOL)::_stringsTableEmptyIterator = (uint64_t)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(Instance + 14, (PCString *)v2 + 15, &v4, (uint64_t)&v4);
  v7 = (void **)&v5;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v7);
  PCString::~PCString(&v4);
  PCString::~PCString(&v3);
  v4.var0 = (__CFString *)v6;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_1B2C77A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::pair<PCString,std::vector<PCString>>::~pair((PCString *)&a11);
  PCString::~PCString(&a10);
  a11 = &a15;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t OZChannelEnum::getStringTablesMap(OZChannelEnum *this)
{
  return (uint64_t)OZStringTablesMap::getInstance(this) + 112;
}

void std::pair<PCString,std::vector<PCString>>::~pair(PCString *a1)
{
  PCString *v2;

  v2 = a1 + 1;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  PCString::~PCString(a1);
}

uint64_t OZChannelEnum::getStringTablesMapLock(OZChannelEnum *this)
{
  return (uint64_t)OZStringTablesMap::getInstance(this) + 8;
}

uint64_t std::vector<PCString>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 8 * v6;
    std::vector<PCString>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<PCString>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B2C77B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PCString>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZChannelEnum::setStringsFromChannel(PCString *this, const OZChannelBase *lpsrc)
{
  const PCString *v3;
  const PCString *v4;

  if (lpsrc)
  {
    if (v3)
    {
      v4 = v3;
      PCString::set(this + 20, v3 + 20);
      this[19].var0 = v4[19].var0;
      ++LODWORD(this[27].var0);
    }
  }
}

void OZChannelEnum::setImages(OZChannelEnum *this, PCString *a2)
{
  OZStringTablesMap *ArrayBySeparatingStrings;
  __CFString *v5;
  const __CFArray *v6;
  std::mutex *v7;
  int Count;
  CFIndex v9;
  uint64_t v10;
  const void *ValueAtIndex;
  const PCString *v12;
  uint64_t *v13;
  std::mutex *v14;
  PCString *v15;
  PCString *v16;
  uint64_t v17;
  PCString v18;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  ArrayBySeparatingStrings = (OZStringTablesMap *)PCString::size(a2);
  if ((_DWORD)ArrayBySeparatingStrings)
  {
    v5 = PCString::cf_str(a2);
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v5, CFSTR(";"));
    v6 = ArrayBySeparatingStrings;
    if (ArrayBySeparatingStrings)
    {
      v7 = (std::mutex *)((char *)OZStringTablesMap::getInstance(ArrayBySeparatingStrings) + 8);
      PCSharedMutex::lock_shared(v7);
      Count = CFArrayGetCount(v6);
      std::vector<PCString>::reserve((uint64_t *)&v15, Count);
      if (Count >= 1)
      {
        v9 = 0;
        v10 = Count;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
          PCURL::PCURL((PCURL *)&v18, ValueAtIndex);
          v13 = PCString::intern(&v18, v12);
          PCString::~PCString(&v18);
          std::vector<PCString>::push_back[abi:ne180100]((uint64_t *)&v15, (PCString *)v13);
          ++v9;
        }
        while (v10 != v9);
      }
      CFRelease(v6);
      PCSharedMutex::unlock_shared(v7);
    }
  }
  v14 = (std::mutex *)((char *)OZStringTablesMap::getInstance(ArrayBySeparatingStrings) + 8);
  PCSharedMutex::lock(v14);
  if ((PCString **)((char *)this + 232) != &v15)
    std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)this + 232, v15, v16, v16 - v15);
  PCSharedMutex::unlock(v14);
  v18.var0 = (__CFString *)&v15;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
}

void sub_1B2C77D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  std::mutex *v12;

  PCSharedMutex::unlock(v12);
  a12.var0 = (__CFString *)&a9;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

double OZChannelEnum::getSliderMax(OZChannelEnum *this)
{
  return *(double *)(*((_QWORD *)this + 16) + 8);
}

void OZChannelEnum::clearStrings(PCString *this)
{
  std::mutex *v2;
  OZStringTablesMap *v3;
  OZStringTablesMap *Instance;
  OZStringTablesMap *v5;
  OZStringTablesMap *v6;
  PCString *v7;
  OZStringTablesMap *v8;
  PCString v9;
  uint64_t v10;
  uint64_t v11[3];
  void **v12;

  v2 = (std::mutex *)((char *)OZStringTablesMap::getInstance((OZStringTablesMap *)this) + 8);
  PCSharedMutex::lock(v2);
  PCString::clear(this + 20);
  Instance = OZStringTablesMap::getInstance(v3);
  v5 = (OZStringTablesMap *)std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>((const PCString *)Instance + 14, this + 20);
  this[19].var0 = (__CFString *)v5;
  v6 = OZStringTablesMap::getInstance(v5);
  if (this[19].var0 == (__CFString *)((char *)v6 + 120))
  {
    memset(v11, 0, sizeof(v11));
    v7 = (PCString *)OZStringTablesMap::getInstance(v6);
    v8 = OZStringTablesMap::getInstance((OZStringTablesMap *)v7);
    std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v9, this + 20, v11);
    this[19].var0 = (__CFString *)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(v7 + 14, (PCString *)v8 + 15, &v9, (uint64_t)&v9);
    v12 = (void **)&v10;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v12);
    PCString::~PCString(&v9);
    v9.var0 = (__CFString *)v11;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  }
  ++LODWORD(this[27].var0);
  PCSharedMutex::unlock(v2);
}

void sub_1B2C77EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex *v13;

  std::pair<PCString,std::vector<PCString>>::~pair(&a9);
  a9.var0 = (__CFString *)&a13;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  PCSharedMutex::unlock(v13);
  _Unwind_Resume(a1);
}

void OZChannelEnum::addString(PCString *this, PCString *a2)
{
  std::mutex *v4;
  OZStringTablesMap *v5;
  OZStringTablesMap *Instance;
  PCString **var0;
  OZStringTablesMap *v9;
  std::mutex *v10;
  OZStringTablesMap *v11;
  OZStringTablesMap *v12;
  OZStringTablesMap *v13;
  OZStringTablesMap *v14;
  PCString *v15;
  OZStringTablesMap *v16;
  PCString v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v4 = (std::mutex *)((char *)OZStringTablesMap::getInstance((OZStringTablesMap *)this) + 8);
  PCSharedMutex::lock_shared(v4);
  Instance = OZStringTablesMap::getInstance(v5);
  var0 = (PCString **)this[19].var0;
  if (var0 != (PCString **)((char *)Instance + 120) && &v19 != (uint64_t *)(var0 + 5))
    std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)&v19, var0[5], var0[6], var0[6] - var0[5]);
  PCSharedMutex::unlock_shared(v4);
  if (!PCString::empty(this + 20))
    PCString::append(this + 20, ";");
  PCString::append(this + 20, a2);
  std::vector<PCString>::push_back[abi:ne180100](&v19, a2);
  v10 = (std::mutex *)((char *)OZStringTablesMap::getInstance(v9) + 8);
  PCSharedMutex::lock(v10);
  v12 = OZStringTablesMap::getInstance(v11);
  v13 = (OZStringTablesMap *)std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>((const PCString *)v12 + 14, this + 20);
  this[19].var0 = (__CFString *)v13;
  v14 = OZStringTablesMap::getInstance(v13);
  if (this[19].var0 == (__CFString *)((char *)v14 + 120))
  {
    v15 = (PCString *)OZStringTablesMap::getInstance(v14);
    v16 = OZStringTablesMap::getInstance((OZStringTablesMap *)v15);
    std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v17, this + 20, &v19);
    this[19].var0 = (__CFString *)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(v15 + 14, (PCString *)v16 + 15, &v17, (uint64_t)&v17);
    v22 = (void **)&v18;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v22);
    PCString::~PCString(&v17);
  }
  PCSharedMutex::unlock(v10);
  OZChannel::setSliderMax((OZChannel *)this, (double)(unint64_t)(((v20 - v19) >> 3) - 1));
  ++LODWORD(this[27].var0);
  v17.var0 = (__CFString *)&v19;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
}

void sub_1B2C78080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex *v13;

  std::pair<PCString,std::vector<PCString>>::~pair(&a9);
  PCSharedMutex::unlock(v13);
  a9.var0 = (__CFString *)&a13;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZChannelEnum::getNumberOfStrings(OZChannelEnum *this)
{
  std::mutex *v2;
  OZStringTablesMap *v3;
  OZStringTablesMap *Instance;
  _QWORD *v5;
  uint64_t v6;

  v2 = (std::mutex *)((char *)OZStringTablesMap::getInstance(this) + 8);
  PCSharedMutex::lock_shared(v2);
  Instance = OZStringTablesMap::getInstance(v3);
  v5 = (_QWORD *)*((_QWORD *)this + 19);
  if (v5 == (_QWORD *)((char *)Instance + 120))
    v6 = 0;
  else
    v6 = (v5[6] - v5[5]) >> 3;
  PCSharedMutex::unlock_shared(v2);
  return v6;
}

void sub_1B2C78158(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock_shared(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelEnum::getString(OZChannelEnum *this, unsigned int a2)
{
  OZStringTablesMap *Instance;
  uint64_t v5;
  OZStringTablesMap *v6;
  OZStringTablesMap *v7;

  Instance = OZStringTablesMap::getInstance(this);
  PCSharedMutex::lock((std::mutex *)((char *)Instance + 8));
  v5 = *(_QWORD *)(*((_QWORD *)this + 19) + 40) + 8 * a2;
  v7 = OZStringTablesMap::getInstance(v6);
  PCSharedMutex::unlock((std::mutex *)((char *)v7 + 8));
  return v5;
}

char *OZChannelEnum::setTags(OZChannelEnum *this, char *a2, int a3)
{
  return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 168, a2, (uint64_t)&a2[4 * a3], a3);
}

uint64_t OZChannelEnum::getTag(OZChannelEnum *this, unsigned int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 21) + 4 * a2);
}

_QWORD *OZChannelEnum::setEnabledStates(OZChannelEnum *this, BOOL *a2, unint64_t a3)
{
  return std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>((_QWORD *)this + 24, a2, &a2[a3], a3);
}

uint64_t OZChannelEnum::getEnabledState(OZChannelEnum *this, unint64_t a2)
{
  return (*(_QWORD *)(*((_QWORD *)this + 24) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1;
}

void OZChannelEnum::setIsSpline(OZChannel *this, uint64_t a2)
{
  int v2;

  v2 = a2;
  OZChannel::setIsSpline(this, a2);
  if (v2)
    this->var7 &= ~0x10000uLL;
}

const __CFString *OZChannelEnum::getObjCWrapperName(OZChannelEnum *this)
{
  return CFSTR("CHChannelEnum");
}

OZStringTablesMap *OZStringTablesMap::getInstance(OZStringTablesMap *this)
{
  OZStringTablesMap *v1;

  v1 = (OZStringTablesMap *)OZStringTablesMap::_sStringTablesMap;
  if (!OZStringTablesMap::_sStringTablesMap)
  {
    v1 = (OZStringTablesMap *)operator new();
    OZStringTablesMap::OZStringTablesMap(v1);
    OZStringTablesMap::_sStringTablesMap = (uint64_t)v1;
  }
  return v1;
}

void sub_1B2C7828C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40A9FDA665);
  _Unwind_Resume(a1);
}

uint64_t OZChannelEnum::OZChannelEnum_valueImpl::getInstance(OZChannelEnum::OZChannelEnum_valueImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelEnum::OZChannelEnum_valueImpl::getInstance(void)::OZChannelEnum_valueImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelEnum::OZChannelEnum_valueImpl::getInstance(void)::OZChannelEnum_valueImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnum::OZChannelEnum_valueImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnum::OZChannelEnum_valueImpl::_OZChannelEnum_value;
}

void std::__call_once_param<std::tuple<OZChannelEnum::OZChannelEnum_valueImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelEnum::OZChannelEnum_valueImpl *v0;

  if (!OZChannelEnum::OZChannelEnum_valueImpl::_OZChannelEnum_value)
  {
    v0 = (OZChannelEnum::OZChannelEnum_valueImpl *)operator new();
    OZChannelEnum::OZChannelEnum_valueImpl::OZChannelEnum_valueImpl(v0);
    OZChannelEnum::OZChannelEnum_valueImpl::_OZChannelEnum_value = (uint64_t)v0;
  }
}

void sub_1B2C78358(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelEnum::OZChannelEnum_valueImpl *OZChannelEnum::OZChannelEnum_valueImpl::OZChannelEnum_valueImpl(OZChannelEnum::OZChannelEnum_valueImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZChannelEnum::OZChannelEnum_valueImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E655A138;
  *((_QWORD *)this + 5) = &unk_1E655A158;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2C78408(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelEnum::OZChannelEnum_valueInfo::getInstance(OZChannelEnum::OZChannelEnum_valueInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelEnum::OZChannelEnum_valueInfo::getInstance(void)::OZChannelEnum_valueInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelEnum::OZChannelEnum_valueInfo::getInstance(void)::OZChannelEnum_valueInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnum::OZChannelEnum_valueInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnum::OZChannelEnum_valueInfo::_OZChannelEnum_valueInfo;
}

void std::__call_once_param<std::tuple<OZChannelEnum::OZChannelEnum_valueInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelInfo *v0;

  if (!OZChannelEnum::OZChannelEnum_valueInfo::_OZChannelEnum_valueInfo)
  {
    v0 = (OZChannelInfo *)operator new();
    OZChannelEnum::OZChannelEnum_valueInfo::OZChannelEnum_valueInfo(v0);
    OZChannelEnum::OZChannelEnum_valueInfo::_OZChannelEnum_valueInfo = (uint64_t)v0;
  }
}

void sub_1B2C784D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelInfo *OZChannelEnum::OZChannelEnum_valueInfo::OZChannelEnum_valueInfo(OZChannelInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo(this, 0.0, 1.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E655A1B0;
  *((_QWORD *)this + 10) = &unk_1E655A1D0;
  return this;
}

void sub_1B2C7855C(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

PCString *std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(PCString *a1, const PCString *a2, uint64_t *a3)
{
  _QWORD *v5;

  PCString::PCString(a1, a2);
  v5[1] = 0;
  v5[2] = 0;
  ++v5;
  v5[2] = 0;
  std::vector<PCString>::__init_with_size[abi:ne180100]<PCString*,PCString*>(v5, *a3, a3[1], (a3[1] - *a3) >> 3);
  return a1;
}

void sub_1B2C785B0(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<PCString>::__init_with_size[abi:ne180100]<PCString*,PCString*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<double>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PCString>,PCString*,PCString*,PCString*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B2C78628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PCString>,PCString*,PCString*,PCString*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      PCString::PCString((PCString *)(a4 + v7), (const PCString *)(a2 + v7));
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B2C786A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 8;
    do
    {
      PCString::~PCString((PCString *)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void OZStringTablesMap::OZStringTablesMap(OZStringTablesMap *this)
{
  _QWORD *v2;

  PCSingleton::PCSingleton(this, 50);
  *v2 = &unk_1E655A228;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v2 + 1));
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
}

void sub_1B2C78714(_Unwind_Exception *a1)
{
  PCSingleton *v1;

  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

void OZStringTablesMap::~OZStringTablesMap(OZStringTablesMap *this)
{
  *(_QWORD *)this = &unk_1E655A228;
  std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::destroy((uint64_t)this + 112, *((PCString **)this + 15));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 8));
  PCSingleton::~PCSingleton(this);
}

{
  *(_QWORD *)this = &unk_1E655A228;
  std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::destroy((uint64_t)this + 112, *((PCString **)this + 15));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 8));
  PCSingleton::~PCSingleton(this);
  JUMPOUT(0x1B5E29170);
}

void std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::destroy(uint64_t a1, PCString *a2)
{
  PCString *v4;

  if (a2)
  {
    std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::destroy(a1, a2[1].var0);
    v4 = a2 + 5;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
    PCString::~PCString(a2 + 4);
    operator delete(a2);
  }
}

void std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>(uint64_t a1, PCString *a2, PCString *a3, unint64_t a4)
{
  const PCString *v6;
  uint64_t v8;
  PCString *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  PCString *v14;
  unint64_t v15;
  PCString *v16;
  uint64_t v17;
  PCString *v18;

  v6 = a2;
  v8 = a1 + 16;
  v9 = *(PCString **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    std::vector<PCString>::__vdeallocate((void **)a1);
    if (a4 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<double>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PCString>,PCString*,PCString*,PCString*>(v8, (uint64_t)v6, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_15:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  v14 = *(PCString **)(a1 + 8);
  v15 = v14 - v9;
  if (v15 < a4)
  {
    v16 = &a2[v15];
    if (v14 != v9)
    {
      v17 = 8 * v15;
      do
      {
        PCString::set(v9++, v6++);
        v17 -= 8;
      }
      while (v17);
      v9 = *(PCString **)(a1 + 8);
    }
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PCString>,PCString*,PCString*,PCString*>(v8, (uint64_t)v16, (uint64_t)a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    v18 = v9;
  }
  else
  {
    v18 = v9;
    do
    {
      PCString::set(v9++, v6++);
      ++v18;
    }
    while (v6 != a3);
    v14 = *(PCString **)(a1 + 8);
  }
  while (v14 != v18)
    PCString::~PCString(v14 - 1);
  *(_QWORD *)(a1 + 8) = v18;
}

void sub_1B2C7898C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<PCString>::__vdeallocate(void **a1)
{
  PCString *v1;
  PCString *v3;
  void *v4;

  v1 = (PCString *)*a1;
  if (*a1)
  {
    v3 = (PCString *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        PCString::~PCString(v3 - 1);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(PCString *a1, PCString *a2, PCString *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  __CFString *v9;
  const PCString *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__find_equal<PCString>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__construct_node<std::pair<PCString,std::vector<PCString>>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const PCString *std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__find_equal<PCString>(const PCString *a1, PCString *a2, const PCString **a3, __CFString **p_var0, PCString *a5)
{
  const PCString *v9;
  PCString *var0;
  PCString *v12;
  __CFString *v13;
  __CFString *v14;
  const PCString *v15;
  PCString *v16;
  BOOL v17;
  PCString *v19;

  v9 = a1 + 1;
  if (&a1[1] == a2 || (PCString::compare(a5, a2 + 4) & 0x80000000) != 0)
  {
    if ((PCString *)a1->var0 == a2)
    {
      v12 = a2;
    }
    else
    {
      var0 = (PCString *)a2->var0;
      if (a2->var0)
      {
        do
        {
          v12 = var0;
          var0 = (PCString *)var0[1].var0;
        }
        while (var0);
      }
      else
      {
        v16 = a2;
        do
        {
          v12 = (PCString *)v16[2].var0;
          v17 = v12->var0 == (__CFString *)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((PCString::compare(v12 + 4, a5) & 0x80000000) == 0)
        return std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__find_equal<PCString>(a1, a3, a5);
    }
    if (a2->var0)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if ((PCString::compare(a2 + 4, a5) & 0x80000000) != 0)
  {
    p_var0 = &a2[1].var0;
    v13 = a2[1].var0;
    if (v13)
    {
      v14 = a2[1].var0;
      do
      {
        v15 = (const PCString *)v14;
        v14 = (__CFString *)v14->isa;
      }
      while (v14);
    }
    else
    {
      v19 = a2;
      do
      {
        v15 = (const PCString *)v19[2].var0;
        v17 = v15->var0 == (__CFString *)v19;
        v19 = (PCString *)v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((PCString::compare(a5, v15 + 4) & 0x80000000) != 0)
    {
      v13 = *p_var0;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = a2;
      }
      return (const PCString *)p_var0;
    }
    return std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__find_equal<PCString>(a1, a3, a5);
  }
  *a3 = a2;
  *p_var0 = (__CFString *)a2;
  return (const PCString *)p_var0;
}

__n128 std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__construct_node<std::pair<PCString,std::vector<PCString>>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  PCString::PCString((PCString *)v6 + 4, (const PCString *)a2);
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v6 + 40) = result;
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2C78C74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCString *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,std::vector<PCString>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,std::vector<PCString>>,void *>>>::operator()[abi:ne180100](uint64_t a1, PCString *__p)
{
  PCString *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 5;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
    PCString::~PCString(__p + 4);
  }
  if (__p)
    operator delete(__p);
}

_QWORD *std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _QWORD *v7;
  void *v8;

  result[1] = 0;
  if (a4)
  {
    v7 = result;
    if (a4 > result[2] << 6)
    {
      v8 = (void *)*result;
      if (*v7)
      {
        operator delete(v8);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
      }
      std::vector<BOOL>::__vallocate[abi:ne180100](v7, a4);
    }
    return std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(v7, a2, a3, a4);
  }
  return result;
}

_QWORD *std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(_QWORD *result, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result[1];
  v5 = v4 + a4;
  result[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*result + 8 * v6) = 0;
  }
  if (a2 != a3)
  {
    v7 = v4 & 0x3F;
    v8 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      v9 = 1 << v7;
      if (*a2)
        v10 = *v8 | v9;
      else
        v10 = *v8 & ~v9;
      *v8 = v10;
      ++a2;
      v8 += v7 == 63;
      if (v7 == 63)
        v7 = 0;
      else
        ++v7;
    }
    while (a2 != a3);
  }
  return result;
}

void OZChannelFolder::OZChannelFolder(OZChannelFolder *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, unsigned int a7)
{
  void (**v9)(OZChannelFolder *__hidden);
  _QWORD *v10;
  uint64_t v11;

  OZChannelBase::OZChannelBase((OZChannelBase *)this, a2, a3, a4, a5, a6);
  v9 = &off_1E655A260;
  *v10 = &off_1E655A260;
  v10[2] = &unk_1E655A538;
  v10[14] = 0;
  if (a7)
  {
    v11 = operator new();
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *((_QWORD *)this + 14) = v11;
    std::vector<void *>::reserve((void **)v11, a7);
    v9 = *(void (***)(OZChannelFolder *__hidden))this;
  }
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 7) |= 0x1000uLL;
  v9[16](this);
}

void sub_1B2C78E94(_Unwind_Exception *a1)
{
  OZChannelBase *v1;

  OZChannelBase::~OZChannelBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelFolder::OZChannelFolder(OZChannelFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6)
{
  OZFactory *Instance;
  void (**v13)(OZChannelFolder *__hidden);
  uint64_t v14;

  Instance = (OZFactory *)OZChannelFolder_Factory::getInstance((OZChannelFolder_Factory *)this);
  OZChannelBase::OZChannelBase((OZChannelBase *)this, Instance, a2, a3, a4, a5);
  v13 = &off_1E655A260;
  *(_QWORD *)this = &off_1E655A260;
  *((_QWORD *)this + 2) = &unk_1E655A538;
  *((_QWORD *)this + 14) = 0;
  if (a6)
  {
    v14 = operator new();
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *((_QWORD *)this + 14) = v14;
    std::vector<void *>::reserve((void **)v14, a6);
    v13 = *(void (***)(OZChannelFolder *__hidden))this;
  }
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 7) |= 0x1000uLL;
  v13[16](this);
}

void sub_1B2C78F74(_Unwind_Exception *a1)
{
  OZChannelBase *v1;

  OZChannelBase::~OZChannelBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelFolder::OZChannelFolder(OZChannelFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  void (**v7)(OZChannelFolder *__hidden);
  _QWORD *v8;
  uint64_t v9;

  OZChannelBase::OZChannelBase((OZChannelBase *)this, a2, a3, a4);
  v7 = &off_1E655A260;
  *v8 = &off_1E655A260;
  v8[2] = &unk_1E655A538;
  v8[14] = 0;
  if (a5)
  {
    v9 = operator new();
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *((_QWORD *)this + 14) = v9;
    std::vector<void *>::reserve((void **)v9, a5);
    v7 = *(void (***)(OZChannelFolder *__hidden))this;
  }
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 7) |= 0x1000uLL;
  v7[16](this);
}

void sub_1B2C7901C(_Unwind_Exception *a1)
{
  OZChannelBase *v1;

  OZChannelBase::~OZChannelBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelFolder::OZChannelFolder(OZChannelFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v5;
  void **var0;
  unint64_t v7;
  uint64_t v8;

  OZChannelBase::OZChannelBase((OZChannelBase *)this, a2, a3);
  *v5 = &off_1E655A260;
  v5[2] = &unk_1E655A538;
  v5[14] = 0;
  var0 = a2[1].var0;
  if (var0)
  {
    v7 = *((_QWORD *)a2[1].var0 + 1) - (_QWORD)*var0;
    if ((v7 & 0x7FFFFFFF8) != 0)
    {
      v8 = operator new();
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *((_QWORD *)this + 14) = v8;
      std::vector<void *>::reserve((void **)v8, (v7 >> 3));
    }
  }
  *((_QWORD *)this + 15) = a2[1].var1;
  *((_QWORD *)this + 7) |= 0x1000uLL;
}

void sub_1B2C790D4(_Unwind_Exception *a1)
{
  OZChannelBase *v1;

  OZChannelBase::~OZChannelBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelFolder::~OZChannelFolder(OZChannelFolder *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E655A260;
  *((_QWORD *)this + 2) = &unk_1E655A538;
  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *(void **)v2;
    *(_QWORD *)(v2 + 8) = *(_QWORD *)v2;
    if (v3)
      operator delete(v3);
    MEMORY[0x1B5E29170](v2, 0x80C40D6874129);
    *((_QWORD *)this + 14) = 0;
  }
  OZChannelBase::~OZChannelBase((OZChannelBase *)this);
}

{
  OZChannelFolder::~OZChannelFolder(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelFolder::~OZChannelFolder(OZChannelFolder *this)
{
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
}

{
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

OZChannelBase *OZChannelFolder::finishInitializing(OZChannelFolder *this)
{
  OZChannelBase *result;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  result = OZChannelBase::finishInitializing((OZChannelBase *)this);
  v3 = (uint64_t **)*((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    while (v4 != v5)
    {
      v6 = *v4++;
      result = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
    }
  }
  return result;
}

uint64_t OZChannelFolder::operator=(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
}

OZChannelFolder *OZChannelFolder::clone(OZChannelFolder *this)
{
  OZChannelFolder *v2;

  v2 = (OZChannelFolder *)operator new();
  OZChannelFolder::OZChannelFolder(v2, (const OZChannelBase *)this, 0);
  return v2;
}

void sub_1B2C79248(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

uint64_t OZChannelFolder::compare(OZChannelFolder *this, const OZChannelBase *a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;

  if ((a2->var7 & 0x1000) == 0)
    return 0;
  result = OZChannelBase::compare((OZChannelBase *)this, a2);
  if ((_DWORD)result)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 14);
    if (!v6)
      return 0;
    v7 = (uint64_t *)v5[14];
    if (!v7)
      return 0;
    v8 = *v6;
    v9 = *(_QWORD *)(*((_QWORD *)this + 14) + 8);
    v10 = *v7;
    if (v9 - v8 != v7[1] - *v7)
      return 0;
    if (v8 == v9)
    {
      return 1;
    }
    else
    {
      v11 = v8 + 8;
      do
      {
        v10 += 8;
        v12 = OZChannelBase::operator!=(*(_QWORD *)(v11 - 8));
        if ((v12 & 1) != 0)
          break;
        v13 = v11 == v9;
        v11 += 8;
      }
      while (!v13);
      return v12 ^ 1u;
    }
  }
  return result;
}

double OZChannelFolder::copy(OZChannelFolder *this, const OZChannelBase *a2)
{
  double result;
  double *v5;

  OZChannelBase::copy((OZChannelBase *)this, a2);
  if (a2)
  {
    if (v5)
    {
      result = v5[15];
      *((double *)this + 15) = result;
    }
  }
  return result;
}

_QWORD *OZChannelFolder::assign(OZChannelFolder *this, const OZChannelBase *a2)
{
  _QWORD *result;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OZChannelBase::assign((OZChannelBase *)this, a2);
  result = (_QWORD *)(*(uint64_t (**)(OZChannelFolder *, const OZChannelBase *))(*(_QWORD *)this + 264))(this, a2);
  if ((_DWORD)result)
  {
    result = a2
    v5 = (uint64_t **)*((_QWORD *)this + 14);
    if (v5)
    {
      v6 = result[14];
      if (v6)
      {
        v8 = *v5;
        v7 = v5[1];
        v9 = *(uint64_t **)v6;
        if ((char *)v7 - (char *)*v5 == *(_QWORD *)(v6 + 8) - *(_QWORD *)v6 && v8 != v7)
        {
          do
          {
            v12 = *v8++;
            v11 = v12;
            v13 = *v9++;
            result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 256))(v11, v13);
          }
          while (v8 != v7);
        }
      }
    }
  }
  return result;
}

uint64_t OZChannelFolder::allowsAssignment(OZChannelFolder *this, const OZChannelBase *a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;

  if ((a2->var7 & 0x1000) == 0)
    return 0;
  result = OZChannelBase::allowsAssignment((OZChannelBase *)this, a2);
  if ((_DWORD)result)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 14);
    v7 = (uint64_t *)v5[14];
    if (v6)
    {
      if (v7)
      {
        v8 = *v6;
        v9 = *(_QWORD *)(*((_QWORD *)this + 14) + 8);
        v10 = *v7;
        v11 = *(_QWORD *)(v5[14] + 8);
        if (v9 - v8 == v11 - v10)
        {
          if (v8 != v9 && v10 != v11)
          {
            v13 = v8 + 8;
            v14 = v10 + 8;
            do
            {
              result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 - 8) + 264))(*(_QWORD *)(v13 - 8), *(_QWORD *)(v14 - 8));
              if ((_DWORD)result)
                v15 = v13 == v9;
              else
                v15 = 1;
              v13 += 8;
              v16 = v15 || v14 == v11;
              v14 += 8;
            }
            while (!v16);
            return result;
          }
          return 1;
        }
      }
    }
    else if (!v7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

OZChannelFolder *OZChannelFolder::copyKeyframesFromChannel(OZChannelFolder *this, const CMTime *a2, OZChannelBase *a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;

  v3 = (uint64_t **)*((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        v8 = *v4++;
        this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t, const CMTime *, OZChannelBase *))(*(_QWORD *)v8 + 304))(v8, a2, a3);
      }
      while (v4 != v5);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::setValue(OZChannelFolder *this, const OZChannelBase *lpsrc)
{
  OZChannelFolder *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;

  if ((lpsrc->var7 & 0x1000) != 0)
  {
    v2 = this;
    v3 = (uint64_t *)*((_QWORD *)v2 + 14);
    if (v3)
    {
      v4 = (uint64_t *)*((_QWORD *)this + 14);
      if (v4)
      {
        v5 = *v3;
        v6 = *(_QWORD *)(*((_QWORD *)v2 + 14) + 8);
        v7 = *v4;
        v8 = *(_QWORD *)(*((_QWORD *)this + 14) + 8);
        v9 = v6 - v5 != v8 - v7 || v5 == v6;
        if (!v9 && v7 != v8)
        {
          v11 = v5 + 8;
          v12 = v7 + 8;
          do
          {
            this = (OZChannelFolder *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 - 8) + 312))(*(_QWORD *)(v11 - 8), *(_QWORD *)(v12 - 8));
            if (v11 == v6)
              break;
            v11 += 8;
            v9 = v12 == v8;
            v12 += 8;
          }
          while (!v9);
        }
      }
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::findMatchingDescendant(OZChannelFolder *this, const OZChannelBase *a2, OZChannelBase **a3)
{
  OZChannelFolder ***v3;
  OZChannelFolder **v4;
  OZChannelFolder **v5;
  PCString *p_var4;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  OZChannelFolder *v12;

  v3 = (OZChannelFolder ***)*((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      p_var4 = &a2->var4;
      do
      {
        if ((*(unsigned int (**)(OZChannelFolder *, const OZChannelBase *))(*(_QWORD *)*v4 + 264))(*v4, a2))
        {
          v9 = a2->var3 == *((_DWORD *)*v4 + 6);
          v10 = PCString::caseInsensitiveCompare(p_var4, (const PCString *)*v4 + 4);
          LODWORD(v11) = v9 | 2;
          v11 = v10 ? v9 : v11;
          if (!a3[v11])
            a3[v11] = (OZChannelBase *)*v4;
        }
        this = *v4;
        if ((*((_BYTE *)*v4 + 57) & 0x10) != 0)
        {
          this = (OZChannelFolder *)OZChannelFolder::findMatchingDescendant(v12, a2, a3);
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return this;
}

OZChannelBase *OZChannelFolder::findMatchingCompoundChannel(OZChannelFolder *this, const PCString *a2)
{
  const void ***v2;
  const void **v3;
  const void **v4;
  _BYTE *v6;
  OZChannelBase *v7;
  OZChannelBase *v8;
  int v9;
  OZChannelFolder *v10;
  uint64_t MatchingCompoundChannel;
  PCString v13;

  v2 = (const void ***)*((_QWORD *)this + 14);
  if (!v2)
    return 0;
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
    return 0;
  while (1)
  {
    v6 = *v3;
    if (v7)
    {
      v8 = v7;
      OZChannelBase::getFullDisplayName(v7, &v13);
      v9 = PCString::caseInsensitiveCompare(&v13, a2);
      PCString::~PCString(&v13);
      if (!v9)
        return v8;
      v6 = *v3;
    }
    if ((v6[57] & 0x10) != 0)
    {
      MatchingCompoundChannel = OZChannelFolder::findMatchingCompoundChannel(v10, a2);
      if (MatchingCompoundChannel)
        break;
    }
    if (++v3 == v4)
      return 0;
  }
  return (OZChannelBase *)MatchingCompoundChannel;
}

void sub_1B2C797EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

OZChannelFolder *OZChannelFolder::findMatchingDescendant(OZChannelFolder *this, const OZChannelBase *a2)
{
  __CFString *v2;
  const OZChannelBase *var6;
  BOOL v6;
  const OZChannelBase *v7;
  OZChannelBase *v8;
  char v9;
  OZChannelFolder *v10;
  OZChannelBase *v11;
  int v12;
  int v13;
  OZChannelFolder *MatchingCompoundChannel;
  OZChannelBase *v15;
  OZChannelBase *v16;
  PCString v18;
  PCString v19;
  PCString v20;
  PCString v21;
  OZChannelBase *v22[2];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(OZChannelFolder *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return this;
  var6 = (const OZChannelBase *)a2->var6;
  if (var6)
    goto LABEL_4;
  PCString::PCString(&v21, &a2->var4);
  PCURL::PCURL((PCURL *)&v20, CFSTR("."));
  v12 = PCString::find(&v21, &v20);
  PCString::~PCString(&v20);
  if ((v12 & 0x80000000) == 0)
  {
    PCString::substrTo(&v21, v12 - 1, (CFStringRef *)&v20.var0);
    PCString::substrFrom(&v21, (v12 + 1), (CFStringRef *)&v19.var0);
    PCURL::PCURL((PCURL *)&v18, CFSTR("."));
    v13 = PCString::find(&v19, &v18);
    PCString::~PCString(&v18);
    if ((v13 & 0x80000000) == 0)
    {
      v2 = PCString::size(&v20);
      PCString::substrTo(&v21, (int)v2 + v13, (CFStringRef *)&v18.var0);
      PCString::set(&v20, &v18);
      PCString::~PCString(&v18);
      PCString::substrFrom(&v21, v13 + (int)v2 + 2, (CFStringRef *)&v18.var0);
      PCString::set(&v19, &v18);
      PCString::~PCString(&v18);
    }
    MatchingCompoundChannel = (OZChannelFolder *)OZChannelFolder::findMatchingCompoundChannel(this, &v20);
    if (MatchingCompoundChannel)
    {
      v15 = (OZChannelBase *)(*((uint64_t (**)(const OZChannelBase *))a2->var0 + 31))(a2);
      OZChannelBase::setName(v15, &v19, 0);
      *(_OWORD *)v22 = 0u;
      v23 = 0u;
      OZChannelFolder::findMatchingDescendant(MatchingCompoundChannel, v15, v22);
      if (v15)
        (*((void (**)(OZChannelBase *))v15->var0 + 1))(v15);
      v16 = v22[1];
      if ((_QWORD)v23)
        v16 = (OZChannelBase *)v23;
      if (*((_QWORD *)&v23 + 1))
        v2 = (__CFString *)*((_QWORD *)&v23 + 1);
      else
        v2 = (__CFString *)v16;
    }
    PCString::~PCString(&v19);
    PCString::~PCString(&v20);
    if (MatchingCompoundChannel)
    {
      PCString::~PCString(&v21);
      return (OZChannelFolder *)v2;
    }
  }
  PCString::~PCString(&v21);
  var6 = (const OZChannelBase *)a2->var6;
  if (var6)
LABEL_4:
  v6 = var6 != 0;
  if (var6)
    v7 = var6;
  else
    v7 = a2;
  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  OZChannelFolder::findMatchingDescendant(this, v7, v22);
  v8 = (OZChannelBase *)v23;
  if (!(_QWORD)v23)
    v8 = v22[1];
  if (*((_QWORD *)&v23 + 1))
    v2 = (__CFString *)*((_QWORD *)&v23 + 1);
  else
    v2 = (__CFString *)v8;
  v9 = !v6;
  if (!v2)
    v9 = 1;
  if ((v9 & 1) == 0)
  {
    if (v10)
    {
      *(_OWORD *)v22 = 0u;
      v23 = 0u;
      OZChannelFolder::findMatchingDescendant(v10, a2, v22);
      v11 = v22[1];
      if ((_QWORD)v23)
        v11 = (OZChannelBase *)v23;
      if (*((_QWORD *)&v23 + 1))
        return (OZChannelFolder *)*((_QWORD *)&v23 + 1);
      else
        return (OZChannelFolder *)v11;
    }
  }
  return (OZChannelFolder *)v2;
}

void sub_1B2C79AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void OZChannelFolder::push_back(OZChannelFolder *this, OZChannelBase *a2)
{
  _QWORD *v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  if (a2)
  {
    if (!*((_QWORD *)this + 14))
    {
      v4 = (_QWORD *)operator new();
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      *((_QWORD *)this + 14) = v4;
    }
    OZChannelBase::registerParent(a2, this);
    v5 = (void **)*((_QWORD *)this + 14);
    v6 = v5[1];
    v7 = (unint64_t)v5[2];
    if ((unint64_t)v6 >= v7)
    {
      v9 = ((char *)v6 - (_BYTE *)*v5) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v10 = v7 - (_QWORD)*v5;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v5 + 2), v12);
      else
        v13 = 0;
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = a2;
      v8 = v14 + 8;
      v17 = (char *)*v5;
      v16 = (char *)v5[1];
      if (v16 != *v5)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        v16 = (char *)*v5;
      }
      *v5 = v14;
      v5[1] = v8;
      v5[2] = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v6 = a2;
      v8 = v6 + 1;
    }
    v5[1] = v8;
  }
}

char *OZChannelFolder::push_front(OZChannelFolder *this, OZChannelBase *a2)
{
  _QWORD *v4;
  OZChannelBase *v6;

  v6 = a2;
  if (!*((_QWORD *)this + 14))
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *((_QWORD *)this + 14) = v4;
  }
  OZChannelBase::registerParent(a2, this);
  return std::vector<OZChannelBase *>::insert(*((_QWORD *)this + 14), **((char ***)this + 14), (char *)&v6);
}

char *OZChannelFolder::insertDescendantBefore(OZChannelFolder *this, const OZChannelBase *a2, OZChannelBase *a3)
{
  _QWORD *v6;
  char **v7;
  char *v8;
  char *v9;
  OZChannelBase *v11;

  v11 = a3;
  if (!*((_QWORD *)this + 14))
  {
    v6 = (_QWORD *)operator new();
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
    *((_QWORD *)this + 14) = v6;
  }
  OZChannelBase::registerParent(a3, this);
  v7 = (char **)*((_QWORD *)this + 14);
  if (a2)
  {
    v8 = *v7;
    v9 = v7[1];
    if (*v7 != v9)
    {
      while (*(const OZChannelBase **)v8 != a2)
      {
        v8 += 8;
        if (v8 == v9)
        {
          v8 = v7[1];
          return std::vector<OZChannelBase *>::insert((uint64_t)v7, v8, (char *)&v11);
        }
      }
    }
  }
  else
  {
    v8 = v7[1];
  }
  return std::vector<OZChannelBase *>::insert((uint64_t)v7, v8, (char *)&v11);
}

char *OZChannelFolder::insertDescendantAfter(OZChannelFolder *this, const OZChannelBase *a2, OZChannelBase *a3)
{
  _QWORD *v6;
  char **v7;
  char *v8;
  const OZChannelBase **v9;
  const OZChannelBase **v10;
  OZChannelBase *v12;

  v12 = a3;
  if (!*((_QWORD *)this + 14))
  {
    v6 = (_QWORD *)operator new();
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
    *((_QWORD *)this + 14) = v6;
  }
  OZChannelBase::registerParent(a3, this);
  v7 = (char **)*((_QWORD *)this + 14);
  v8 = *v7;
  if (a2)
  {
    v9 = (const OZChannelBase **)v7[1];
    v10 = (const OZChannelBase **)*v7;
    if (v8 != (char *)v9)
    {
      while (*v10 != a2)
      {
        if (++v10 == v9)
        {
          v10 = (const OZChannelBase **)v7[1];
          break;
        }
      }
    }
    if (v10 != v9)
      v8 = (char *)(v10 + 1);
  }
  return std::vector<OZChannelBase *>::insert((uint64_t)v7, v8, (char *)&v12);
}

OZChannelFolder *OZChannelFolder::removeDescendant(OZChannelFolder *this, OZChannelBase *a2)
{
  uint64_t v2;
  uint64_t v3;
  OZChannelBase **v4;
  OZChannelFolder *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;

  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *(_QWORD *)v2;
    v4 = *(OZChannelBase ***)(v2 + 8);
    if ((OZChannelBase **)v3 != v4)
    {
      v5 = this;
      v6 = -v3;
      while (*(OZChannelBase **)v3 != a2)
      {
        v3 += 8;
        v6 -= 8;
        if ((OZChannelBase **)v3 == v4)
          return this;
      }
      this = (OZChannelFolder *)OZChannelBase::unregisterParent(a2, this);
      v7 = *((_QWORD *)v5 + 14);
      v8 = -v6;
      v9 = (const void *)(8 - v6);
      v10 = *(_QWORD *)(v7 + 8) - (8 - v6);
      if (v10)
        this = (OZChannelFolder *)memmove((void *)v8, v9, v10);
      *(_QWORD *)(v7 + 8) = v8 + v10;
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::removeAllDescendants(OZChannelFolder *this, int a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;
  OZChannelFolder *v5;
  OZChannelBase *v6;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v2)
  {
    if (a2)
    {
      v3 = *v2;
      v4 = v2[1];
      if (*v2 != v4)
      {
        v5 = this;
        do
        {
          v6 = *v3++;
          this = (OZChannelFolder *)OZChannelBase::unregisterParent(v6, v5);
        }
        while (v3 != v4);
        v2 = (OZChannelBase ***)*((_QWORD *)v5 + 14);
      }
    }
    v2[1] = *v2;
  }
  return this;
}

uint64_t OZChannelFolder::getDescendant(OZChannelFolder *this, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = (uint64_t *)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    while (v3 != v4)
    {
      result = *(_QWORD *)v3;
      if (*(_DWORD *)(*(_QWORD *)v3 + 24) == a2)
        return result;
      v3 += 8;
    }
  }
  return 0;
}

void OZChannelFolder::getAllDescendantsFlattened(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  const void ***v4;
  const void **v5;
  const void **v6;
  uint64_t v10;
  uint64_t v11;
  OZChannelBase *v12;
  _BYTE *v13;
  void *v14;
  unint64_t v15;
  const void **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  const void **v23;
  char *v24;
  char *v25;
  const void *v26;

  v4 = *(const void ****)(a1 + 112);
  if (v4)
  {
    v6 = *v4;
    v5 = v4[1];
    if (*v4 != v5)
    {
      v10 = a3;
      v11 = (uint64_t)(a2 + 2);
      do
      {
        v12 = (OZChannelBase *)*v6;
        {
          if (!OZChannelBase::testFlag(v12, v10))
          {
            v16 = (const void **)a2[1];
            v15 = (unint64_t)a2[2];
            if ((unint64_t)v16 >= v15)
            {
              v18 = ((char *)v16 - (_BYTE *)*a2) >> 3;
              if ((unint64_t)(v18 + 1) >> 61)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v19 = v15 - (_QWORD)*a2;
              v20 = v19 >> 2;
              if (v19 >> 2 <= (unint64_t)(v18 + 1))
                v20 = v18 + 1;
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
                v21 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v21 = v20;
              if (v21)
                v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v11, v21);
              else
                v22 = 0;
              v23 = (const void **)&v22[8 * v18];
              *v23 = *v6;
              v17 = v23 + 1;
              v25 = (char *)*a2;
              v24 = (char *)a2[1];
              if (v24 != *a2)
              {
                do
                {
                  v26 = (const void *)*((_QWORD *)v24 - 1);
                  v24 -= 8;
                  *--v23 = v26;
                }
                while (v24 != v25);
                v24 = (char *)*a2;
              }
              *a2 = v23;
              a2[1] = v17;
              a2[2] = &v22[8 * v21];
              if (v24)
                operator delete(v24);
            }
            else
            {
              *v16 = *v6;
              v17 = v16 + 1;
            }
            a2[1] = v17;
            goto LABEL_32;
          }
          v12 = (OZChannelBase *)*v6;
        }
        if ((v12->var7 & 0x1000) != 0 && !OZChannelBase::testFlag(v12, v10))
        {
          v13 = *v6;
          if (*v6)
          {
            if (!a4)
              goto LABEL_24;
          }
          else
          {
            v14 = 0;
            if (!a4)
              goto LABEL_24;
          }
          if ((v13[57] & 0x20) == 0)
LABEL_24:
            OZChannelFolder::getAllDescendantsFlattened(v14, a2, a3, 0);
        }
LABEL_32:
        ++v6;
      }
      while (v6 != v5);
    }
  }
}

OZChannelFolder *OZChannelFolder::bake(OZChannelFolder *this, const PCTimeRange *a2, const CMTime *a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;

  v3 = (uint64_t **)*((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        v8 = *v4++;
        this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t, const PCTimeRange *, const CMTime *))(*(_QWORD *)v8 + 368))(v8, a2, a3);
      }
      while (v4 != v5);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::setExtrapolation(OZChannelFolder *this, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;

  v3 = (uint64_t **)*((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        v8 = *v4++;
        this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 384))(v8, a2, a3);
      }
      while (v4 != v5);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::generateKeys(OZChannelFolder *this, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;

  v3 = (uint64_t **)*((_QWORD *)this + 14);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 != v5)
  {
    do
    {
      v8 = *v4++;
      this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 392))(v8, a2, a3);
    }
    while (v4 != v5);
  }
  return this;
}

OZChannelFolder *OZChannelFolder::simplify(OZChannelFolder *this, const CMTime *a2, const CMTime *a3, const CMTime *a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v18;

  v8 = (uint64_t **)*((_QWORD *)this + 14);
  v9 = *v8;
  v10 = v8[1];
  if (*v8 != v10)
  {
    do
    {
      v18 = *v9++;
      this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t, const CMTime *, const CMTime *, const CMTime *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v18 + 376))(v18, a2, a3, a4, a6, a7, a8, a5);
    }
    while (v9 != v10);
  }
  return this;
}

OZChannelFolder *OZChannelFolder::setFoldFlags(OZChannelFolder *this, int a2)
{
  OZChannelFolder *v3;

  v3 = this;
  if ((a2 & 0xFF7DDFF0) != 0)
    this = (OZChannelFolder *)(*(uint64_t (**)(OZChannelFolder *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  *((_DWORD *)v3 + 30) = a2;
  return this;
}

OZChannelFolder *OZChannelFolder::setFoldFlag(OZChannelFolder *this, int a2)
{
  OZChannelFolder *v3;

  v3 = this;
  if ((a2 & 0xFF7DDFF0) != 0)
    this = (OZChannelFolder *)(*(uint64_t (**)(OZChannelFolder *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  *((_DWORD *)v3 + 30) |= a2;
  return this;
}

OZChannelFolder *OZChannelFolder::resetFoldFlag(OZChannelFolder *this, int a2)
{
  OZChannelFolder *v3;

  v3 = this;
  if ((a2 & 0xFF7DDFF0) != 0)
    this = (OZChannelFolder *)(*(uint64_t (**)(OZChannelFolder *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  *((_DWORD *)v3 + 30) &= ~a2;
  return this;
}

BOOL OZChannelFolder::testFoldFlag(OZChannelFolder *this, int a2)
{
  return (*((_DWORD *)this + 30) & a2) != 0;
}

uint64_t OZChannelFolder::resetTimeIndependentFlagIfNeeded(OZChannelFolder *this, int a2, int a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  result = OZChannelBase::isLocked((OZChannelBase *)this, 1);
  if ((result & 1) != 0)
    return result;
  if (!a3)
    goto LABEL_5;
  result = *((_QWORD *)this + 6);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 704))(result, 0, 1);
LABEL_5:
    if (!a2)
      return result;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 14);
  if (v7)
  {
    v8 = *v7;
    v9 = v7[1];
    if (*v7 != v9)
    {
      do
      {
        result = *(_QWORD *)v8;
        if ((*(_BYTE *)(*(_QWORD *)v8 + 57) & 0x10) != 0)
        {
          result = (*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)v10 + 704))(v10, 1, 0);
        }
        v8 += 8;
      }
      while (v8 != v9);
    }
  }
  return result;
}

uint64_t OZChannelFolder::lockFromParent(OZChannelFolder *this, int a2, uint64_t a3)
{
  uint64_t result;
  OZChannelBase ***v7;
  OZChannelBase **v8;
  OZChannelBase **v9;
  uint64_t v10;

  result = OZChannelBase::isLocked((OZChannelBase *)this, a3);
  v7 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v7)
  {
    v8 = *v7;
    v9 = v7[1];
    if (*v7 != v9)
    {
      v10 = result | a2;
      do
      {
        result = OZChannelBase::testFlag(*v8, 2);
        if ((result & 1) == 0)
          result = (*((uint64_t (**)(OZChannelBase *, uint64_t, uint64_t))(*v8)->var0 + 37))(*v8, v10, a3);
        ++v8;
      }
      while (v8 != v9);
    }
  }
  return result;
}

uint64_t OZChannelFolder::lock(OZChannelFolder *this, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  OZChannelBase ***v7;
  OZChannelBase **v8;
  OZChannelBase **v9;

  result = OZChannelBase::lock((OZChannelBase *)this, a2);
  v7 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v7)
  {
    v8 = *v7;
    v9 = v7[1];
    while (v8 != v9)
    {
      result = OZChannelBase::testFlag(*v8, 2);
      if ((result & 1) == 0)
        result = (*((uint64_t (**)(OZChannelBase *, uint64_t, uint64_t))(*v8)->var0 + 37))(*v8, a2, a3);
      ++v8;
    }
  }
  return result;
}

OZChannelFolder *OZChannelFolder::undoWillReplace(OZChannelFolder *this)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = (uint64_t **)*((_QWORD *)this + 14);
  if (v1)
  {
    v2 = *v1;
    v3 = v1[1];
    while (v2 != v3)
    {
      v4 = *v2++;
      this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 352))(v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::undoDidReplace(OZChannelFolder *this)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = (uint64_t **)*((_QWORD *)this + 14);
  if (v1)
  {
    v2 = *v1;
    v3 = v1[1];
    while (v2 != v3)
    {
      v4 = *v2++;
      this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 360))(v4);
    }
  }
  return this;
}

uint64_t OZChannelFolder::resetToDefault(OZChannelFolder *this, uint64_t a2)
{
  uint64_t result;
  OZChannelBase ***v5;
  OZChannelBase **v6;
  OZChannelBase **v7;

  result = (*(uint64_t (**)(OZChannelFolder *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  v5 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v5)
  {
    v6 = *v5;
    v7 = v5[1];
    while (v6 != v7)
    {
      result = OZChannelBase::testFlag(*v6, 0x20000000000);
      if ((result & 1) == 0)
        result = (*((uint64_t (**)(OZChannelBase *, uint64_t))(*v6)->var0 + 36))(*v6, a2);
      ++v6;
    }
  }
  return result;
}

OZChannelBase *OZChannelFolder::saveStateAsDefault(OZChannelFolder *this)
{
  OZChannelBase *result;

  result = OZChannelBase::saveStateAsDefault((OZChannelBase *)this);
  *((_DWORD *)this + 31) = *((_DWORD *)this + 30) & 0xFF7DDFF0;
  return result;
}

BOOL OZChannelFolder::isStateModified(OZChannelFolder *this)
{
  return (*((_QWORD *)this + 7) & 0xFFFFFFFDECA4CF86) != *((_QWORD *)this + 8)
      || (*((_DWORD *)this + 30) & 0xFF7DDFF0) != *((_DWORD *)this + 31);
}

OZChannelFolder *OZChannelFolder::setDefaultToCurrentValue(OZChannelFolder *this)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = (uint64_t **)*((_QWORD *)this + 14);
  if (v1)
  {
    v2 = *v1;
    v3 = v1[1];
    while (v2 != v3)
    {
      v4 = *v2++;
      this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
    }
  }
  return this;
}

uint64_t OZChannelFolder::saveWhenAtDefaultState(OZChannelFolder *this)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (OZChannelBase::testFlag((OZChannelBase *)this, 0x100000000))
    return 1;
  v3 = (_QWORD *)*((_QWORD *)this + 14);
  if (!v3)
    return 0;
  v4 = v3[1];
  if (*v3 == v4)
    return 0;
  v5 = *v3 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 - 8) + 144))(*(_QWORD *)(v5 - 8));
    if ((result & 1) != 0)
      break;
    v6 = v5 == v4;
    v5 += 8;
  }
  while (!v6);
  return result;
}

uint64_t *OZChannelFolder::markFactoriesForSerialization(OZChannelFolder *this, PCSerializerWriteStream *a2)
{
  uint64_t *result;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  result = OZFactory::setNeedsSaving(*((OZFactory **)this + 1), (const OZFactory *)1);
  v5 = (uint64_t **)*((_QWORD *)this + 14);
  if (v5)
  {
    v6 = *v5;
    v7 = v5[1];
    while (v6 != v7)
    {
      v8 = *v6++;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)v8 + 416))(v8, a2, 0);
    }
  }
  return result;
}

uint64_t *`non-virtual thunk to'OZChannelFolder::markFactoriesForSerialization(OZChannelFolder *this, PCSerializerWriteStream *a2)
{
  return OZChannelFolder::markFactoriesForSerialization((OZChannelFolder *)((char *)this - 16), a2);
}

uint64_t OZChannelFolder::writeBody(OZChannelFolder *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  OZChannelBase ***v11;
  BOOL v12;
  OZChannelBase **v13;
  OZChannelBase **v14;
  uint64_t p_var2;

  OZChannelBase::writeBody((OZChannelBase *)this, a2, a3);
  v10 = *((unsigned int *)this + 30);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelFolderScope);
  if ((_DWORD)v10)
  {
    if (!(*(unsigned int (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2)
      || (v10 &= 0x7FF8DFF0u, (_DWORD)v10))
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 111);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v10);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  v11 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v11)
    v12 = a4 == 0;
  else
    v12 = 1;
  if (!v12 && (*((_BYTE *)this + 123) & 1) == 0)
  {
    v13 = *v11;
    v14 = v11[1];
    while (v13 != v14)
    {
      if ((!OZChannelBase::testFlag(*v13, 8)
         || (*((unsigned int (**)(OZChannelBase *))(*v13)->var0 + 18))(*v13)
         && (*(unsigned int (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2)
         && !OZChannelBase::testFlag(*v13, 128))
        && ((a5 & 1) != 0
         || ((*((uint64_t (**)(OZChannelBase *, _QWORD))(*v13)->var0 + 62))(*v13, 0) & 1) != 0
         || ((*((uint64_t (**)(OZChannelBase *))(*v13)->var0 + 19))(*v13) & 1) != 0
         || (*((unsigned int (**)(OZChannelBase *))(*v13)->var0 + 18))(*v13)))
      {
        p_var2 = (uint64_t)&(*v13)->var2;
        (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t))(*(_QWORD *)p_var2 + 16))(p_var2, a2, a3);
        (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)p_var2 + 24))(p_var2, a2, a3, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      }
      ++v13;
    }
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZChannelFolder::writeBody(OZChannelFolder *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelFolder::writeBody((OZChannelFolder *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZChannelFolder::calcHashForState(OZChannelFolder *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  result = OZChannelBase::calcHashForState((OZChannelBase *)this, a2, a3);
  v7 = (uint64_t **)*((_QWORD *)this + 14);
  if (v7)
  {
    v8 = *v7;
    v9 = v7[1];
    v10 = *((_QWORD *)this + 7) & 0x8000;
    (*(void (**)(PCSerializerWriteStream *, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 72))(a2, v10);
    result = (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    while (v8 != v9)
    {
      v11 = *v8++;
      result = (*(uint64_t (**)(uint64_t, PCSerializerWriteStream *, const CMTime *))(*(_QWORD *)v11 + 448))(v11, a2, a3);
    }
  }
  return result;
}

uint64_t OZChannelFolder::parseBegin(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  OZChannelBase::parseBegin((OZChannelBase *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelFolderScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelFolder::parseBegin(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  OZChannelBase::parseBegin((OZChannelBase *)((char *)this - 16), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelFolderScope);
  return 1;
}

uint64_t OZChannelFolder::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  OZChannelBase::parseEnd((OZChannelBase *)this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelFolder::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  OZChannelBase::parseEnd((OZChannelBase *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelFolder::parseElement(OZChannelFolder *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  OZChannelBase ***v7;
  OZChannelBase **v8;
  OZChannelBase **v9;
  OZChannelBase *v10;
  OZFactories *AttributeAsUInt32;
  OZFactories *Instance;
  const void *v13;
  void *v14;
  void *v15;
  const void *v16;
  OZChannel *v17;
  unint64_t var1;
  char *v19;
  char *v20;
  PCString v21;
  OZChannel *v22;
  PCString v24;
  double v25;
  unint64_t v26;
  int v27;
  unsigned int v28[2];
  PCSharedCount v29[2];

  *(_QWORD *)v28 = 0;
  v27 = 0;
  v25 = 0.0;
  v26 = 0;
  OZChannelBase::parseElement((OZChannelBase *)this, a2, a3);
  v6 = *((_DWORD *)a3 + 2);
  if (v6 == 111)
  {
    if ((*(unsigned int (**)(PCStreamElement *, int *))(*(_QWORD *)a3 + 32))(a3, &v27))
      *((_DWORD *)this + 30) = v27 & 0xFDDDFFFF | *((_DWORD *)this + 30) & 0x2220000;
  }
  else if (v6 == 110)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v28[1]);
    v7 = (OZChannelBase ***)*((_QWORD *)this + 14);
    if (!v7 || (v8 = *v7, v9 = v7[1], v8 == v9))
    {
LABEL_7:
      v28[0] = 0;
      AttributeAsUInt32 = (OZFactories *)PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v28);
      Instance = (OZFactories *)OZFactories::getInstance(AttributeAsUInt32);
      v13 = (const void *)OZFactories::lookupFactory(Instance, v28[0]);
      if (!v13)
        goto LABEL_24;
      if (!v14)
        goto LABEL_24;
      v15 = v14;
      PCSharedCount::PCSharedCount(v29);
      PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)v29);
      v16 = (const void *)(*(uint64_t (**)(void *, PCSharedCount *, _QWORD))(*(_QWORD *)v15 + 16))(v15, v29, v28[1]);
      v10 = v16
      OZChannelFolder::push_back(this, v10);
      PCString::~PCString((PCString *)v29);
      if (!v10)
      {
LABEL_24:
        (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 40))(a2);
        return 1;
      }
    }
    else
    {
      while (1)
      {
        v10 = *v8;
        if ((*v8)->var3 == v28[1])
          break;
        if (++v8 == v9)
          goto LABEL_7;
      }
    }
    if (PCSerializerReadStream::getAttributeAsUInt64((uint64_t)a2, (uint64_t)a3, 112, (uint64_t)&v26))
    {
      v26 = v10->var7 & 0x2080A3898 | v26 & 0xFFFFFFFDF7F5C767;
      OZChannelBase::setFlags(v10, v26);
    }
    if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 115, (uint64_t)&v25))
    {
      if (v17)
        OZChannel::setDefaultValue(v17, v25);
    }
    var1 = (unint64_t)v10->var1;
    *(_OWORD *)&v29[0].var0 = xmmword_1B3555A90;
    if (OZFactory::isKindOfClass(var1, (int32x4_t *)v29))
    {
      PCSharedCount::PCSharedCount(v29);
      if (v19)
      {
        v20 = v19;
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, PCSharedCount *))(*(_QWORD *)a3 + 96))(a3, 114, v29))
        {
          (*(void (**)(char *, _QWORD))(*(_QWORD *)v20 + 608))(v20, MEMORY[0x1E0CA2E68]);
          PCString::PCString(&v24, (const PCString *)v29);
          v21.var0 = (__CFString *)&v24;
          OZChannelBlindData::setData((OZChannelBlindData *)v20, v21);
          PCString::~PCString(&v24);
        }
        else
        {
          PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v20 + 16));
          (*(void (**)(char *, PCSerializerReadStream *, PCStreamElement *))(*(_QWORD *)v20 + 440))(v20, a2, a3);
        }
      }
      PCString::~PCString((PCString *)v29);
    }
    else
    {
      if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 114, (uint64_t)&v25))
      {
        if (v22)
          OZChannel::setInitialValue(v22, v25, 0);
      }
      PCSerializerReadStream::pushHandler(a2, (PCSerializer *)&v10->var2);
    }
  }
  return 1;
}

void sub_1B2C7AE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCString a15)
{
  PCString::~PCString(&a10);
  PCString::~PCString(&a15);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelFolder::parseElement(OZChannelFolder *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelFolder::parseElement((OZChannelFolder *)((char *)this - 16), a2, a3);
  return 1;
}

OZChannelFolder *OZChannelFolder::setIsSpline(OZChannelFolder *this, uint64_t a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, uint64_t))(*v3)->var0 + 60))(*v3, a2);
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::setKeyframable(OZChannelFolder *this, uint64_t a2, uint64_t a3)
{
  OZChannelBase ***v3;
  OZChannelBase **v4;
  OZChannelBase **v5;
  BOOL v8;

  v3 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v4, 2);
        if ((_DWORD)this)
          v8 = (_DWORD)a3 == 0;
        else
          v8 = 0;
        if (!v8)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, uint64_t, uint64_t))(*v4)->var0 + 63))(*v4, a2, a3);
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return this;
}

uint64_t OZChannelFolder::isKeyframable(OZChannelFolder *this)
{
  OZChannelBase ***v1;
  OZChannelBase **v2;
  OZChannelBase **v3;

  v1 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v1)
  {
    v2 = *v1;
    v3 = v1[1];
    while (v2 != v3)
    {
      if (!OZChannelBase::testFlag(*v2, 2)
        && ((*((uint64_t (**)(OZChannelBase *))(*v2)->var0 + 64))(*v2) & 1) != 0)
      {
        return 1;
      }
      ++v2;
    }
  }
  return 0;
}

uint64_t OZChannelFolder::isModified(OZChannelFolder *this, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  BOOL v8;

  if ((_DWORD)a2 && OZChannelBase::testFlag((OZChannelBase *)this, 2))
    return 0;
  if ((*((_BYTE *)this + 122) & 2) != 0)
    return !OZChannelBase::testFlag((OZChannelBase *)this, 0x8000);
  v4 = (_QWORD *)*((_QWORD *)this + 14);
  if (!v4)
    return 0;
  v5 = v4[1];
  if (*v4 == v5)
    return 0;
  v6 = *v4 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 - 8) + 496))(*(_QWORD *)(v6 - 8), a2);
    if ((result & 1) != 0)
      break;
    v8 = v6 == v5;
    v6 += 8;
  }
  while (!v8);
  return result;
}

uint64_t OZChannelFolder::isSpline(OZChannelFolder *this)
{
  OZChannelBase ***v1;
  OZChannelBase **v2;
  OZChannelBase **v3;

  v1 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v1)
  {
    v2 = *v1;
    v3 = v1[1];
    while (v2 != v3)
    {
      if (!OZChannelBase::testFlag(*v2, 2)
        && ((*((uint64_t (**)(OZChannelBase *))(*v2)->var0 + 61))(*v2) & 1) != 0)
      {
        return 1;
      }
      ++v2;
    }
  }
  return 0;
}

uint64_t OZChannelFolder::hasKeypoints(OZChannelFolder *this, unsigned int a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;
  uint64_t v5;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (!v2)
    return 0;
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
    return 0;
  v5 = a2;
  while (OZChannelBase::testFlag(*v3, 2)
       || OZChannelBase::testFlag(*v3, v5)
       || ((*((uint64_t (**)(OZChannelBase *, _QWORD))(*v3)->var0 + 69))(*v3, 0) & 1) == 0)
  {
    if (++v3 == v4)
      return 0;
  }
  return 1;
}

uint64_t OZChannelFolder::hasMoreThanOneKeypoint(OZChannelFolder *this)
{
  OZChannelBase ***v1;
  OZChannelBase **v2;
  OZChannelBase **v3;

  v1 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v1)
  {
    v2 = *v1;
    v3 = v1[1];
    while (v2 != v3)
    {
      if (!OZChannelBase::testFlag(*v2, 2)
        && ((*((uint64_t (**)(OZChannelBase *))(*v2)->var0 + 70))(*v2) & 1) != 0)
      {
        return 1;
      }
      ++v2;
    }
  }
  return 0;
}

uint64_t OZChannelFolder::hasFadeHandles(OZChannelFolder *this)
{
  OZChannelBase ***v1;
  OZChannelBase **v2;
  OZChannelBase **v3;

  v1 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v1)
  {
    v2 = *v1;
    v3 = v1[1];
    while (v2 != v3)
    {
      if (!OZChannelBase::testFlag(*v2, 2)
        && ((*((uint64_t (**)(OZChannelBase *))(*v2)->var0 + 83))(*v2) & 1) != 0)
      {
        return 1;
      }
      ++v2;
    }
  }
  return 0;
}

OZChannelFolder *OZChannelFolder::scaleFadeHandles(OZChannelFolder *this, double a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, double))(*v3)->var0 + 84))(*v3, a2);
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

uint64_t OZChannelFolder::keyframesWithChannels(uint64_t result, _OWORD *a2, uint64_t a3)
{
  OZChannelBase ***v3;
  OZChannelBase **v4;
  OZChannelBase **v5;
  OZChannelBase *v8;
  __int128 v9;
  _OWORD v10[3];

  v3 = *(OZChannelBase ****)(result + 112);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        result = OZChannelBase::testFlag(*v4, 2);
        if ((result & 1) == 0)
        {
          v8 = *v4;
          v9 = a2[1];
          v10[0] = *a2;
          v10[1] = v9;
          v10[2] = a2[2];
          result = (*((uint64_t (**)(OZChannelBase *, _OWORD *, uint64_t))v8->var0 + 67))(v8, v10, a3);
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return result;
}

uint64_t OZChannelFolder::hasKeypointAt(OZChannelFolder *this, const CMTime *a2, unsigned int a3)
{
  OZChannelBase ***v3;
  OZChannelBase **v4;
  OZChannelBase **v5;
  uint64_t v7;

  v3 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (!v3)
    return 0;
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
    return 0;
  v7 = a3;
  while (OZChannelBase::testFlag(*v4, 2)
       || OZChannelBase::testFlag(*v4, v7)
       || ((*((uint64_t (**)(OZChannelBase *, const CMTime *, _QWORD))(*v4)->var0 + 71))(*v4, a2, 0) & 1) == 0)
  {
    if (++v4 == v5)
      return 0;
  }
  return 1;
}

uint64_t OZChannelFolder::allHaveKeypointsAt(OZChannelFolder *this, const CMTime *a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;
  char v6;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (!v2)
    return 0;
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_10:
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      if (!OZChannelBase::testFlag(*v3, 2))
      {
        if (!(*((unsigned int (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 72))(*v3, a2))
          goto LABEL_10;
        v6 = 1;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return v6 & 1;
}

uint64_t OZChannelFolder::hasOnlyOneKeypointAt(OZChannelFolder *this, const CMTime *a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;
  unsigned int v6;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (!v2)
    return 1;
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
    return 1;
  v6 = 0;
  while (1)
  {
    if (!OZChannelBase::testFlag(*v3, 2))
    {
      v6 += (*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 74))(*v3, a2);
      if (v6 > 1)
        break;
    }
    if (++v3 == v4)
      return 1;
  }
  return 0;
}

uint64_t OZChannelFolder::numberOfKeypointsAt(OZChannelFolder *this, const CMTime *a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;
  uint64_t v6;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (!v2)
    return 0;
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
    return 0;
  v6 = 0;
  do
  {
    if (!OZChannelBase::testFlag(*v3, 2))
      v6 = (*((unsigned int (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 74))(*v3, a2)
         + v6;
    ++v3;
  }
  while (v3 != v4);
  return v6;
}

OZChannelFolder *OZChannelFolder::addKeypointAt(OZChannelFolder *this, const CMTime *a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 75))(*v3, a2);
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::deleteKeypoints(OZChannelFolder *this, const CMTime *a2, const CMTime *a3)
{
  OZChannelBase ***v3;
  OZChannelBase **v4;
  OZChannelBase **v5;

  v3 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v4, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *, const CMTime *))(*v4)->var0
                                     + 85))(*v4, a2, a3);
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::deleteKeypointAt(OZChannelFolder *this, const CMTime *a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 76))(*v3, a2);
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

uint64_t OZChannelFolder::moveKeypointTo@<X0>(OZChannelFolder *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, CMTime *a5@<X8>)
{
  OZChannelBase *AncestorRootBase;
  uint64_t result;
  OZChannelBase ***v12;
  OZChannelBase **v13;
  OZChannelBase **v14;
  CMTime v15;
  CMTime v16;
  CMTime rhs;
  CMTime lhs;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime time2;
  CMTime time1;

  v21 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  AncestorRootBase = OZChannelBase::getAncestorRootBase((OZChannelBase *)this);
  if (AncestorRootBase)
    (*((void (**)(CMTime *__return_ptr))AncestorRootBase->var0 + 110))(&v21);
  v20 = *a2;
  *(_OWORD *)&a5->value = *(_OWORD *)&a3->value;
  a5->epoch = a3->epoch;
  time1 = *a2;
  time2 = *a3;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    v19 = v20;
    result = (*(uint64_t (**)(OZChannelFolder *, CMTime *, _QWORD))(*(_QWORD *)this + 624))(this, &v19, 0);
    if (!(_DWORD)result)
      goto LABEL_10;
    lhs = v19;
    rhs = v21;
    CMTimeAdd(&time1, &lhs, &rhs);
    v19 = time1;
    time2 = *a5;
    result = CMTimeCompare(&time1, &time2);
    if ((int)result < 1)
      goto LABEL_10;
LABEL_9:
    *a5 = v19;
    goto LABEL_10;
  }
  v19 = v20;
  result = (*(uint64_t (**)(OZChannelFolder *, CMTime *, _QWORD))(*(_QWORD *)this + 632))(this, &v19, 0);
  if ((_DWORD)result)
  {
    v16 = v19;
    v15 = v21;
    CMTimeSubtract(&time1, &v16, &v15);
    v19 = time1;
    time2 = *a5;
    result = CMTimeCompare(&time1, &time2);
    if ((result & 0x80000000) != 0)
      goto LABEL_9;
  }
LABEL_10:
  v12 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v12)
  {
    v13 = *v12;
    v14 = v12[1];
    while (v13 != v14)
    {
      result = OZChannelBase::testFlag(*v13, 2);
      if ((result & 1) == 0)
        result = (uint64_t)(*((_QWORD *(**)(CMTime *__return_ptr, OZChannelBase *, CMTime *, CMTime *, uint64_t, _QWORD))(*v13)->var0
                           + 77))(&time1, *v13, &v20, a5, a4, 0);
      ++v13;
    }
  }
  return result;
}

uint64_t OZChannelFolder::previousKeypoint(OZChannelFolder *this, CMTime *a2, unsigned int a3)
{
  OZChannelBase ***v3;
  OZChannelBase **v4;
  OZChannelBase **v5;
  char v7;
  uint64_t v8;
  CMTime v10;
  CMTime v11;
  CMTime time2;
  CMTime time1;

  v3 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (!v3)
    return 0;
  v11 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v10.value = *MEMORY[0x1E0CA2E28];
  v10.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
    return 0;
  v7 = 0;
  v8 = a3;
  do
  {
    if (!OZChannelBase::testFlag(*v4, 2) && !OZChannelBase::testFlag(*v4, v8))
    {
      v11 = *a2;
      if ((*((unsigned int (**)(OZChannelBase *, CMTime *, _QWORD))(*v4)->var0 + 78))(*v4, &v11, 0))
      {
        time1 = v10;
        time2 = v11;
        if (CMTimeCompare(&time1, &time2) < 0)
          v10 = v11;
        v7 = 1;
      }
    }
    ++v4;
  }
  while (v4 != v5);
  if ((v7 & 1) == 0)
    return 0;
  *(_OWORD *)&a2->value = *(_OWORD *)&v10.value;
  a2->epoch = v10.epoch;
  return 1;
}

uint64_t OZChannelFolder::nextKeypoint(OZChannelFolder *this, CMTime *a2, unsigned int a3)
{
  OZChannelBase ***v3;
  OZChannelBase **v4;
  OZChannelBase **v5;
  char v7;
  uint64_t v8;
  CMTime v10;
  CMTime v11;
  CMTime time2;
  CMTime time1;

  v3 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (!v3)
    return 0;
  v11 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v10.value = *MEMORY[0x1E0CA2E30];
  v10.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
    return 0;
  v7 = 0;
  v8 = a3;
  do
  {
    if (!OZChannelBase::testFlag(*v4, 2) && !OZChannelBase::testFlag(*v4, v8))
    {
      v11 = *a2;
      if ((*((unsigned int (**)(OZChannelBase *, CMTime *, _QWORD))(*v4)->var0 + 79))(*v4, &v11, 0))
      {
        time1 = v10;
        time2 = v11;
        if (CMTimeCompare(&time1, &time2) >= 1)
          v10 = v11;
        v7 = 1;
      }
    }
    ++v4;
  }
  while (v4 != v5);
  if ((v7 & 1) == 0)
    return 0;
  *(_OWORD *)&a2->value = *(_OWORD *)&v10.value;
  a2->epoch = v10.epoch;
  return 1;
}

OZChannelFolder *OZChannelFolder::retimeKeypoints(OZChannelFolder *this, double a2, const CMTime *a3)
{
  OZChannelBase ***v3;
  OZChannelBase **v4;
  OZChannelBase **v5;

  v3 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v4, 0x20000);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *, double))(*v4)->var0 + 80))(*v4, a3, a2);
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::setInterpolation(OZChannelFolder *this, uint64_t a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, uint64_t))(*v3)->var0 + 82))(*v3, a2);
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::adjustToFrameDuration(OZChannelFolder *this, const CMTime *a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v2 = (uint64_t **)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        v6 = *v3++;
        this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t, const CMTime *))(*(_QWORD *)v6 + 648))(v6, a2);
      }
      while (v3 != v4);
    }
  }
  return this;
}

const __CFString *OZChannelFolder::getObjCWrapperName(OZChannelFolder *this)
{
  return CFSTR("CHChannelFolder");
}

OZChannelFolder *OZChannelFolder::beginPlayback(OZChannelFolder *this, const CMTime *a2, uint64_t a3, uint64_t a4, const CMTime *a5)
{
  OZChannelBase ***v5;
  OZChannelBase **v6;
  OZChannelBase **v7;

  v5 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v5)
  {
    v6 = *v5;
    v7 = v5[1];
    if (*v5 != v7)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v6, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *, uint64_t, uint64_t, const CMTime *))(*v6)->var0
                                     + 20))(*v6, a2, a3, a4, a5);
        ++v6;
      }
      while (v6 != v7);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::endPlayback(OZChannelFolder *this, const CMTime *a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 21))(*v3, a2);
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::beginRecording(OZChannelFolder *this, const CMTime *a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 22))(*v3, a2);
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::endRecording(OZChannelFolder *this, const CMTime *a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 23))(*v3, a2);
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::updateCurrentRecordingTime(OZChannelFolder *this, const CMTime *a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 24))(*v3, a2);
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::registerRecordingCallback(OZChannelFolder *this, void (*a2)(OZChannelBase *, const CMTime *, void *), void *a3, uint64_t a4)
{
  OZChannelBase ***v4;
  OZChannelBase **v5;
  OZChannelBase **v6;

  v4 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v4)
  {
    v5 = *v4;
    v6 = v4[1];
    if (*v4 != v6)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v5, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, void (*)(OZChannelBase *, const CMTime *, void *), void *, uint64_t))(*v5)->var0
                                     + 25))(*v5, a2, a3, a4);
        ++v5;
      }
      while (v5 != v6);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::unregisterRecordingCallback(OZChannelFolder *this, void (*a2)(OZChannelBase *, const CMTime *, void *), void *a3)
{
  OZChannelBase ***v3;
  OZChannelBase **v4;
  OZChannelBase **v5;

  v3 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v4, 2);
        if ((this & 1) == 0)
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, _QWORD, void *))(*v4)->var0 + 26))(*v4, a2, a3);
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return this;
}

uint64_t OZChannelFolder::hasDescendant(OZChannelFolder *this, const OZChannelBase *a2)
{
  const OZChannelBase ***v2;
  const OZChannelBase **v3;
  const OZChannelBase **v4;
  const OZChannelBase *v6;
  OZChannelFolder *v7;

  v2 = (const OZChannelBase ***)*((_QWORD *)this + 14);
  if (!v2)
    return 0;
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
    return 0;
  while (1)
  {
    v6 = *v3;
    if (*v3 == a2)
      break;
    if ((v6->var7 & 0x1000) != 0)
    {
      if ((OZChannelFolder::hasDescendant(v7, a2) & 1) != 0)
        break;
    }
    if (++v3 == v4)
      return 0;
  }
  return 1;
}

void OZChannelGradient::OZChannelGradient(OZChannelGradient *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  TXParagraphStyleFolder_Factory *v7;
  OZFactoryBase *v8;
  TXParagraphStyleFolder_Factory *v9;
  OZFactoryBase *v10;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  OZChannelGradient::OZChannelGradient_gammaImpl *v13;
  OZChannelImpl *Instance;
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  OZChannelGradient::OZChannelGradient_colorSpaceIDImpl *v19;
  OZChannelImpl *v20;
  void *ChannelRootBase;
  double v22;
  PCString v23;
  PCString v24;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, a6, 0);
  *(_QWORD *)v7 = &off_1E655A5A8;
  *((_QWORD *)v7 + 2) = &unk_1E655A880;
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Channel Gradient Folder RGB"));
  OZChannelGradientRGBFolder::OZChannelGradientRGBFolder((OZChannelGradient *)((char *)this + 128), &v24, (OZChannelFolder *)this, 1u, 0);
  PCString::~PCString(&v24);
  TXParagraphStyleFolder_Factory::createInstance(v9, v10);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Channel Gradient Folder Alpha"));
  OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder((OZChannelGradient *)((char *)this + 256), &v24, (OZChannelFolder *)this, 2u, 0);
  PCString::~PCString(&v24);
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Channel Gamma"));
  Instance = (OZChannelImpl *)OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(v13);
  OZChannelDouble::OZChannelDouble((OZChannelGradient *)((char *)this + 384), &v24, (OZChannelFolder *)this, 0x50u, 138, Instance, 0);
  PCString::~PCString(&v24);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Channel Color Space Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v23, CFSTR("Channel Color Space"));
  v20 = (OZChannelImpl *)OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(v19);
  OZChannelEnum::OZChannelEnum((OZChannelGradient *)((char *)this + 536), &v24, &v23, (OZChannelFolder *)this, 0xBu, 0x82u, v20, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  *((_DWORD *)this + 198) = 0;
  *((_BYTE *)this + 796) = 0;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 15);
  (*(void (**)(OZChannelGradient *))(*(_QWORD *)this + 128))(this);
  OZChannelGradient::resetToDefaultStandard(this);
  ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (ChannelRootBase)
  {
    OZChannel::setValue((OZChannel *)((char *)this + 384), MEMORY[0x1E0CA2E68], 2.2, 0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 384), 2.2);
    v22 = (double)(*(int (**)(void *))(*(_QWORD *)ChannelRootBase + 864))(ChannelRootBase);
    OZChannel::setValue((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], v22, 0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 536), v22);
  }
}

void sub_1B2C7C2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelFolder *v10;
  OZChannelGradientRGBFolder *v11;

  PCString::~PCString(&a10);
  OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

OZChannelBase *OZChannelGradient::resetToDefaultStandard(OZChannelGradient *this)
{
  OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0);
  OZChannelGradientRGBFolder::addSample((OZChannelFolder *)((char *)this + 128), 0.64, 0.68, 0.77, 0.0, 0.5, 2);
  OZChannelGradientRGBFolder::addSample((OZChannelFolder *)((char *)this + 128), 0.21, 0.43, 0.75, 1.0, 0.5, 2);
  OZChannelGradientFolder::sortAndRename((OZChannelGradient *)((char *)this + 128));
  OZChannelBase::setID(***((OZChannelBase ****)this + 30), 1u);
  OZChannelBase::setID(*(OZChannelBase **)(**((_QWORD **)this + 30) + 8), 2u);
  OZChannelGradientAlphaFolder::addSample((OZChannelFolder *)((char *)this + 256), 1.0, 0.0, 0.5, 2);
  OZChannelGradientFolder::sortAndRename((OZChannelGradient *)((char *)this + 256));
  return OZChannelBase::setID(***((OZChannelBase ****)this + 46), 1u);
}

void OZChannelGradient::OZChannelGradient(OZChannelGradient *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;
  TXParagraphStyleFolder_Factory *v7;
  OZFactoryBase *v8;
  TXParagraphStyleFolder_Factory *v9;
  OZFactoryBase *v10;
  OZChannelGradient::OZChannelGradient_gammaImpl *v11;
  OZChannelImpl *Instance;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;
  OZChannelGradient::OZChannelGradient_colorSpaceIDImpl *v17;
  OZChannelImpl *v18;
  void *ChannelRootBase;
  double v20;
  PCString v21;
  PCString v22;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(_QWORD *)v5 = &off_1E655A5A8;
  *((_QWORD *)v5 + 2) = &unk_1E655A880;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v22, CFSTR("Channel Gradient Folder RGB"));
  OZChannelGradientRGBFolder::OZChannelGradientRGBFolder((OZChannelGradient *)((char *)this + 128), &v22, (OZChannelFolder *)this, 1u, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v22, CFSTR("Channel Gradient Folder Alpha"));
  OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder((OZChannelGradient *)((char *)this + 256), &v22, (OZChannelFolder *)this, 2u, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v9, v10);
  PCURL::PCURL((PCURL *)&v22, CFSTR("Channel Gamma"));
  Instance = (OZChannelImpl *)OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(v11);
  OZChannelDouble::OZChannelDouble((OZChannelGradient *)((char *)this + 384), &v22, (OZChannelFolder *)this, 0x50u, 138, Instance, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v22, CFSTR("Channel Color Space Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel Color Space"));
  v18 = (OZChannelImpl *)OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(v17);
  OZChannelEnum::OZChannelEnum((OZChannelGradient *)((char *)this + 536), &v22, &v21, (OZChannelFolder *)this, 0xBu, 0x82u, v18, 0);
  PCString::~PCString(&v21);
  PCString::~PCString(&v22);
  *((_DWORD *)this + 198) = 0;
  *((_BYTE *)this + 796) = 0;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 15);
  (*(void (**)(OZChannelGradient *))(*(_QWORD *)this + 128))(this);
  OZChannelGradient::resetToDefaultStandard(this);
  ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (ChannelRootBase)
  {
    OZChannel::setValue((OZChannel *)((char *)this + 384), MEMORY[0x1E0CA2E68], 2.2, 0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 384), 2.2);
    v20 = (double)(*(int (**)(void *))(*(_QWORD *)ChannelRootBase + 864))(ChannelRootBase);
    OZChannel::setValue((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], v20, 0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 536), v20);
  }
}

void sub_1B2C7C66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelFolder *v10;
  OZChannelGradientRGBFolder *v11;

  PCString::~PCString(&a10);
  OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradient::OZChannelGradient(OZChannelGradient *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;
  OZChannelGradient::OZChannelGradient_gammaImpl *v17;
  OZChannelImpl *v18;
  TXParagraphStyleFolder_Factory *v19;
  OZFactoryBase *v20;
  TXParagraphStyleFolder_Factory *v21;
  OZFactoryBase *v22;
  OZChannelGradient::OZChannelGradient_colorSpaceIDImpl *v23;
  OZChannelImpl *v24;
  void *ChannelRootBase;
  double v26;
  PCString v27;
  PCString v28;

  Instance = (OZFactory *)OZChannelGradient_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(_QWORD *)this = &off_1E655A5A8;
  *((_QWORD *)this + 2) = &unk_1E655A880;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v28, CFSTR("Channel Gradient Folder RGB"));
  OZChannelGradientRGBFolder::OZChannelGradientRGBFolder((OZChannelGradient *)((char *)this + 128), &v28, (OZChannelFolder *)this, 1u, 0);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v28, CFSTR("Channel Gradient Folder Alpha"));
  OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder((OZChannelGradient *)((char *)this + 256), &v28, (OZChannelFolder *)this, 2u, 0);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v28, CFSTR("Channel Gamma"));
  v18 = (OZChannelImpl *)OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(v17);
  OZChannelDouble::OZChannelDouble((OZChannelGradient *)((char *)this + 384), &v28, (OZChannelFolder *)this, 0x50u, 138, v18, 0);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v28, CFSTR("Channel Color Space Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v27, CFSTR("Channel Color Space"));
  v24 = (OZChannelImpl *)OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(v23);
  OZChannelEnum::OZChannelEnum((OZChannelGradient *)((char *)this + 536), &v28, &v27, (OZChannelFolder *)this, 0xBu, 0x82u, v24, 0);
  PCString::~PCString(&v27);
  PCString::~PCString(&v28);
  *((_DWORD *)this + 198) = 0;
  *((_BYTE *)this + 796) = 0;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 15);
  (*(void (**)(OZChannelGradient *))(*(_QWORD *)this + 128))(this);
  OZChannelGradient::resetToDefaultStandard(this);
  ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (ChannelRootBase)
  {
    OZChannel::setValue((OZChannel *)((char *)this + 384), MEMORY[0x1E0CA2E68], 2.2, 0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 384), 2.2);
    v26 = (double)(*(int (**)(void *))(*(_QWORD *)ChannelRootBase + 864))(ChannelRootBase);
    OZChannel::setValue((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], v26, 0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 536), v26);
  }
}

void sub_1B2C7C984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelFolder *v10;
  OZChannelGradientRGBFolder *v11;

  PCString::~PCString(&a10);
  OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradient::OZChannelGradient(OZChannelGradient *this, const OZChannelGradient *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *v5 = &off_1E655A5A8;
  v5[2] = &unk_1E655A880;
  OZChannelGradientRGBFolder::OZChannelGradientRGBFolder((OZChannelGradientRGBFolder *)(v5 + 16), (const OZChannelBase *)((char *)a2 + 128), (OZChannelFolder *)this);
  OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder((OZChannelGradient *)((char *)this + 256), (const OZChannelBase *)((char *)a2 + 256), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 384), (const OZChannelBase *)((char *)a2 + 384), (OZChannelFolder *)this);
  *((_QWORD *)this + 48) = &off_1E6551358;
  *((_QWORD *)this + 50) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZChannelGradient *)((char *)this + 536), (const OZChannelGradient *)((char *)a2 + 536), (OZChannelFolder *)this);
  *((_DWORD *)this + 198) = *((_DWORD *)a2 + 198);
  *((_BYTE *)this + 796) = *((_BYTE *)a2 + 796);
}

void sub_1B2C7CAF4(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;
  OZChannelGradientRGBFolder *v2;
  OZChannelGradientAlphaFolder *v3;
  OZChannel *v4;

  OZChannel::~OZChannel(v4);
  OZChannelGradientAlphaFolder::~OZChannelGradientAlphaFolder(v3);
  OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradient::~OZChannelGradient(OZChannelGradient *this)
{
  *(_QWORD *)this = &off_1E655A5A8;
  *((_QWORD *)this + 2) = &unk_1E655A880;
  OZChannelEnum::~OZChannelEnum((OZChannelGradient *)((char *)this + 536));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 384));
  OZChannelGradientAlphaFolder::~OZChannelGradientAlphaFolder((OZChannelGradient *)((char *)this + 256));
  OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder((OZChannelGradient *)((char *)this + 128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  OZChannelGradient::~OZChannelGradient(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelGradient::~OZChannelGradient(OZChannelGradient *this)
{
  OZChannelGradient::~OZChannelGradient((OZChannelGradient *)((char *)this - 16));
}

{
  OZChannelGradient::~OZChannelGradient((OZChannelGradient *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChannelGradient::resetToDefault(OZChannelGradient *this, uint64_t a2)
{
  OZChannelFolder *v3;
  double v4;
  double v5;
  OZChannelFolder *v6;
  double v7;
  double v8;
  int v9;
  double v10;
  OZChannelFolder *v11;
  int v12;

  OZChannelFolder::resetToDefault((OZChannelFolder *)this, a2);
  switch(*((_DWORD *)this + 198))
  {
    case 0:
      OZChannelGradient::resetToDefaultStandard(this);
      return;
    case 1:
      v3 = (OZChannelFolder *)((char *)this + 128);
      OZChannelGradientRGBFolder::addSample((OZChannelFolder *)((char *)this + 128), 1.0, 1.0, 1.0, 1.0, 0.5, 2);
      v4 = 0.0;
      v5 = 0.0;
      goto LABEL_5;
    case 2:
      if (*((_BYTE *)this + 796))
        v9 = 1;
      else
        v9 = 2;
      OZChannelGradientRGBFolder::addSample((OZChannelFolder *)((char *)this + 128), 0.0, 0.0, 0.0, 1.0, 0.5, v9);
      OZChannelGradientRGBFolder::addSample((OZChannelFolder *)((char *)this + 128), 1.0, 1.0, 1.0, 0.0, 0.5, v9);
      OZChannelGradientFolder::sortAndRename((OZChannelGradient *)((char *)this + 128));
      v6 = (OZChannelFolder *)((char *)this + 256);
      v7 = 1.0;
      v8 = 0.0;
      v10 = 0.5;
      v11 = v6;
      v12 = v9;
      goto LABEL_12;
    case 3:
      OZChannelGradientRGBFolder::addSample((OZChannelFolder *)((char *)this + 128), 0.0, 0.0, 0.0, 1.0, 0.5, 2);
      OZChannelGradientRGBFolder::addSample((OZChannelFolder *)((char *)this + 128), 1.0, 1.0, 1.0, 0.0, 0.5, 2);
      OZChannelGradientFolder::sortAndRename((OZChannelGradient *)((char *)this + 128));
      v6 = (OZChannelFolder *)((char *)this + 256);
      OZChannelGradientAlphaFolder::addSample(v6, 1.0, 0.0, 0.5, 2);
      v7 = 0.0;
      v8 = 1.0;
      goto LABEL_11;
    default:
      v3 = (OZChannelFolder *)((char *)this + 128);
      OZChannelGradientRGBFolder::addSample((OZChannelFolder *)((char *)this + 128), 1.0, 0.0, 0.0, 0.0, 0.5, 2);
      v4 = 1.0;
      v5 = 1.0;
LABEL_5:
      OZChannelGradientRGBFolder::addSample(v3, 0.0, 0.0, v4, v5, 0.5, 2);
      OZChannelGradientFolder::sortAndRename((OZChannelGradientFolder *)v3);
      v6 = (OZChannelFolder *)((char *)this + 256);
      v7 = 1.0;
      v8 = 0.0;
LABEL_11:
      v10 = 0.5;
      v11 = v6;
      v12 = 2;
LABEL_12:
      OZChannelGradientAlphaFolder::addSample(v11, v7, v8, v10, v12);
      OZChannelGradientFolder::sortAndRename((OZChannelGradientFolder *)v6);
      return;
  }
}

OZChannelGradient *OZChannelGradient::clone(OZChannelGradient *this)
{
  OZChannelGradient *v2;

  v2 = (OZChannelGradient *)operator new();
  OZChannelGradient::OZChannelGradient(v2, this, 0);
  return v2;
}

void sub_1B2C7CE20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4072D3B705);
  _Unwind_Resume(a1);
}

void OZChannelGradient::copy(OZChannelGradient *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZChannelFolder::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannelVaryingFolder::copy((OZChannelFolder *)((char *)this + 128), (const OZChannelBase *)((char *)v4 + 128));
  OZChannelVaryingFolder::copy((OZChannelFolder *)((char *)this + 256), (const OZChannelBase *)((char *)v4 + 256));
  OZChannel::copy((OZChannel *)((char *)this + 384), (const OZChannelBase *)((char *)v4 + 384), a3);
  OZChannelEnum::copy((PCString *)this + 67, (const OZChannelBase *)((char *)v4 + 536), a3);
}

_QWORD *OZChannelGradient::assign(OZChannelBase *this, const OZChannelBase *a2)
{
  _QWORD *result;
  const OZChannelBase ***v5;
  const OZChannelBase **v6;
  const OZChannelBase **v7;

  OZChannelBase::assign(this, a2);
  v5 = (const OZChannelBase ***)result[14];
  v6 = *v5;
  v7 = v5[1];
  while (v6 != v7)
  {
    result = OZChannelFolder::findMatchingDescendant((OZChannelFolder *)this, *v6);
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, const OZChannelBase *))(*result + 256))(result, *v6);
    ++v6;
  }
  return result;
}

uint64_t OZChannelGradient::allowsAssignment(OZChannelBase *this, const OZChannelBase *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  void **var0;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;

  if (!lpsrc)
    return 0;
  if (result)
  {
    v4 = result;
    result = OZChannelBase::allowsAssignment(this, (const OZChannelBase *)result);
    if ((_DWORD)result)
    {
      var0 = this[1].var0;
      if (var0 && (v6 = *(_QWORD **)(v4 + 112)) != 0)
      {
        v7 = (char *)*var0;
        v8 = (char *)var0[1];
        v9 = v6[1];
        if (*v6 == v9 || v7 == v8)
        {
          return 1;
        }
        else
        {
          v11 = v7 + 8;
          v12 = *v6 + 8;
          do
          {
            result = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v11 - 1) + 264))(*((_QWORD *)v11 - 1), *(_QWORD *)(v12 - 8));
            if ((_DWORD)result)
              v13 = v12 == v9;
            else
              v13 = 1;
            v14 = v13 || v11 == v8;
            v11 += 8;
            v12 += 8;
          }
          while (!v14);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

OZChannelFolder *OZChannelGradient::setValue(OZChannelFolder *this, const OZChannelBase *lpsrc)
{
  _BYTE *v4;
  _BYTE *v5;
  OZChannelFolder *result;
  char v7;

  if (!v4)
    return OZChannelFolder::setValue(this, lpsrc);
  v5 = v4;
  OZChannelFolder::operator=((uint64_t)this);
  OZChannelFolder::operator=((uint64_t)this + 128);
  OZChannelFolder::operator=((uint64_t)this + 256);
  OZChannelBase::operator=((uint64_t)this + 384, (uint64_t)(v5 + 384));
  result = (OZChannelFolder *)OZChannelBase::operator=((uint64_t)this + 536, (uint64_t)(v5 + 536));
  v7 = v5[796];
  *((_DWORD *)this + 198) = *((_DWORD *)v5 + 198);
  *((_BYTE *)this + 796) = v7;
  return result;
}

uint64_t *OZChannelGradient::markFactoriesForSerialization(OZChannelFolder *this, PCSerializerWriteStream *a2, int a3)
{
  uint64_t *result;
  uint64_t Instance;
  OZFactory *Factory;
  __int128 v7;

  result = OZChannelFolder::markFactoriesForSerialization(this, a2);
  if (a3)
  {
    Instance = OZFactories::getInstance((OZFactories *)result);
    v7 = xmmword_1B3555900;
    Factory = (OZFactory *)OZFactories::findFactory(Instance, (unsigned int *)&v7);
    return OZFactory::setNeedsSaving(Factory, (const OZFactory *)1);
  }
  return result;
}

uint64_t *`non-virtual thunk to'OZChannelGradient::markFactoriesForSerialization(OZChannelGradient *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannelGradient::markFactoriesForSerialization((OZChannelFolder *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelGradient::getFactoryForSerialization(OZChannelGradient *this, PCSerializerWriteStream *a2, int a3)
{
  uint64_t Instance;
  __int128 v5;

  if (!a3)
    return *((_QWORD *)this + 1);
  Instance = OZFactories::getInstance(this);
  v5 = xmmword_1B3555900;
  return OZFactories::findFactory(Instance, (unsigned int *)&v5);
}

uint64_t OZChannelGradient::writeHeader(OZChannelBase *this, OZFactory *a2, int a3)
{
  uint64_t Instance;
  OZFactory *Factory;
  OZFactory *var1;
  const OZFactory *v9;
  const OZFactory *v10;
  __int128 v12;

  if (a3)
  {
    Instance = OZFactories::getInstance((OZFactories *)this);
    v12 = xmmword_1B3555900;
    Factory = (OZFactory *)OZFactories::findFactory(Instance, (unsigned int *)&v12);
    var1 = this->var1;
    v10 = (const OZFactory *)OZFactory::fileRefID(Factory, v9);
    OZFactory::setFileRefID(var1, v10);
  }
  return OZChannelBase::writeHeader(this, a2, a3);
}

uint64_t `non-virtual thunk to'OZChannelGradient::writeHeader(OZChannelGradient *this, OZFactory *a2, int a3)
{
  return OZChannelGradient::writeHeader((OZChannelBase *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelGradient::writeBody(OZChannelBase *this, PCSerializerWriteStream *a2, int a3, int a4, uint64_t a5)
{
  char v7;
  uint64_t var1_low;
  void **var0;
  OZChannelBase **v12;
  OZChannelBase **v13;
  OZChannelBase **v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  OZChannelGradient *v19;
  char v21;
  char v22;
  char *v23;
  uint64_t v24;

  v7 = a3;
  OZChannelBase::writeBody(this, a2, a3);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelFolderScope);
  var1_low = LODWORD(this[1].var1);
  if (!(*(unsigned int (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2)
    || (var1_low = var1_low & 0xFFF8DFF0, (_DWORD)var1_low))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 111);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, var1_low);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  var0 = this[1].var0;
  if (var0 && a4)
  {
    v13 = (OZChannelBase **)*var0;
    v12 = (OZChannelBase **)var0[1];
    if ((v7 & 1) != 0)
    {
      if (*var0 != v12)
      {
        v14 = v13 + 1;
        v15 = 1;
        do
        {
          if (!OZChannelBase::testFlag(*(v14 - 1), 8))
          {
            v16 = *(v14 - 1);
            v17 = v16[2];
            v16 += 2;
            (*(void (**)(_QWORD *, PCSerializerWriteStream *, uint64_t))(v17 + 16))(v16, a2, 1);
            (*(void (**)(_QWORD *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*v16 + 24))(v16, a2, 1, 1, a5);
            (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
          }
          v18 = (v14++ != v12) & v15;
          v15 = 0;
        }
        while ((v18 & 1) != 0);
      }
      return PCSerializerWriteStream::popScope((uint64_t)a2);
    }
    if (*var0 == v12)
      return PCSerializerWriteStream::popScope((uint64_t)a2);
    do
    {
      if (!OZChannelBase::testFlag(*v13, 8))
      {
        v19 = (OZChannelGradient *)*v13;
        if (*v13 == (OZChannelBase *)&this[1].var2 || v19 == (OZChannelGradient *)&this[2].var4)
        {
          if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) != 0
            || ((*((uint64_t (**)(OZChannelBase *, _QWORD))this->var0 + 62))(this, 0) & 1) != 0)
          {
LABEL_27:
            v19 = (OZChannelGradient *)*v13;
LABEL_28:
            v24 = *((_QWORD *)v19 + 2);
            v23 = (char *)v19 + 16;
            (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(v24 + 16))(v23, a2, 0);
            (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v23 + 24))(v23, a2, 0, 1, a5);
            (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
            goto LABEL_29;
          }
          v19 = (OZChannelGradient *)*v13;
        }
        if ((a5 & 1) != 0)
          goto LABEL_28;
        v21 = (*(uint64_t (**)(OZChannelGradient *, _QWORD))(*(_QWORD *)v19 + 496))(v19, 0);
        v19 = (OZChannelGradient *)*v13;
        if ((v21 & 1) != 0)
          goto LABEL_28;
        v22 = (*(uint64_t (**)(OZChannelBase *))(*(_QWORD *)v19 + 152))(*v13);
        v19 = (OZChannelGradient *)*v13;
        if ((v22 & 1) != 0)
          goto LABEL_28;
        if ((*(unsigned int (**)(OZChannelBase *))(*(_QWORD *)v19 + 144))(*v13))
          goto LABEL_27;
      }
LABEL_29:
      ++v13;
    }
    while (v13 != v12);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZChannelGradient::writeBody(OZChannelGradient *this, PCSerializerWriteStream *a2, int a3, int a4, uint64_t a5)
{
  return OZChannelGradient::writeBody((OZChannelBase *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZChannelGradient::parseBegin(OZChannelGradient *this, PCSerializerReadStream *a2)
{
  OZChannelGradient::resetToDefaultStandard(this);
  return OZChannelFolder::parseBegin((OZChannelFolder *)this, a2);
}

uint64_t `non-virtual thunk to'OZChannelGradient::parseBegin(OZChannelGradient *this, PCSerializerReadStream *a2)
{
  OZChannelFolder *v3;

  v3 = (OZChannelFolder *)((char *)this - 16);
  OZChannelGradient::resetToDefaultStandard((OZChannelGradient *)((char *)this - 16));
  return OZChannelFolder::parseBegin(v3, a2);
}

uint64_t `non-virtual thunk to'OZChannelGradient::parseElement(OZChannelGradient *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZChannelFolder::parseElement((OZChannelFolder *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelGradient::parseEnd(OZChannelGradient *this, PCSerializerReadStream *a2)
{
  uint64_t v4;
  const PCString *v5;
  int v6;
  const PCString *v7;
  double v8;
  int v10;

  v4 = OZChannelFolder::parseEnd((OZChannelFolder *)this, a2);
  OZChannelGradientFolder::sortAndRename((OZChannelGradient *)((char *)this + 128));
  OZChannelGradientFolder::sortAndRename((OZChannelGradient *)((char *)this + 256));
  if (*((_DWORD *)a2 + 26) <= 3u)
  {
    v6 = OZChannelBase::setRangeName((OZChannelBase *)2, v5);
    OZChannel::setValue((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], (double)v6, 0);
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 384), MEMORY[0x1E0CA2E68], 0.0);
  if (v8 == 0.0 || v8 == 1.0)
  {
    v10 = OZChannelBase::setRangeName((OZChannelBase *)3, v7);
    OZChannel::setValue((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], (double)v10, 0);
  }
  return v4;
}

uint64_t `non-virtual thunk to'OZChannelGradient::parseEnd(OZChannelGradient *this, PCSerializerReadStream *a2)
{
  return OZChannelGradient::parseEnd((OZChannelGradient *)((char *)this - 16), a2);
}

void OZChannelGradient::getColor(uint64_t **this, const CMTime *a2, double a3, PCColor *a4)
{
  char *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float v25;
  float v26;
  float v27;
  CGColorSpace *ColorSpace;
  uint64_t *v29;
  _QWORD *v30[2];
  uint64_t *v31;
  _QWORD *v32[2];
  _DWORD v33[4];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v32[0] = 0;
  v32[1] = 0;
  v30[1] = 0;
  v31 = (uint64_t *)v32;
  v29 = (uint64_t *)v30;
  v30[0] = 0;
  v8 = (char *)(this + 16);
  OZChannelGradientRGBFolder::getLookup(this + 16, a2, &v31);
  OZChannelGradientAlphaFolder::getLookup(this + 32, a2, &v29);
  OZChannelGradientRGBFolder::getARGBFromLookup(a3, v14, v15, v16, (uint64_t)v8, (uint64_t)v33, (uint64_t)&v31, v9, v10, v11, v12, v13);
  OZChannelGradientAlphaFolder::getARGBFromLookup(a3, v22, v23, v24, (uint64_t)(this + 32), v33, (uint64_t)&v29, v17, v18, v19, v20, v21);
  LODWORD(a3) = v33[2];
  v25 = *(float *)&v33[3];
  v26 = *(float *)v33;
  v27 = *(float *)&v33[1];
  ColorSpace = (CGColorSpace *)OZChannelGradient::getColorSpace((OZChannelGradient *)this);
  PCColor::setRGBA(a4, v27, *(float *)&a3, v25, v26, ColorSpace);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v31, v32[0]);
}

void sub_1B2C7D694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, _QWORD *a14)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

uint64_t OZChannelGradient::getColorSpace(OZChannelGradient *this)
{
  uint64_t ValueAsInt;
  CGColorSpace **v2;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0);
  v2 = (CGColorSpace **)PCColorSpaceCache::intToColorSpaceID(ValueAsInt, 3u);
  return PCColorSpaceCache::getCGColorSpaceByID(v2);
}

void OZChannelGradient::getGradient(uint64_t **a1, const CMTime *a2, CGColorSpace *a3, _BYTE *a4, unsigned int a5, int a6, PCToneMapMethod *a7)
{
  int v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  void *__p[3];

  v14 = 4 * a5;
  std::vector<float>::vector(__p, 4 * a5);
  v15 = (float *)__p[0];
  OZChannelGradient::getGradient(a1, a2, 0, a3, (uint64_t)__p[0], a5, a6, a7);
  for (; v14; --v14)
  {
    v16 = *v15++;
    v17 = v16;
    if (v16 <= 1.0)
      v18 = v17;
    else
      v18 = 1.0;
    if (v17 >= 0.0)
      v19 = v18;
    else
      v19 = 0.0;
    *a4++ = vcvtmd_s64_f64(v19 * 255.0 + 0.5 + 0.0000001);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B2C7D7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZChannelGradient::getGradient(uint64_t **a1, const CMTime *a2, int a3, CGColorSpace *a4, uint64_t a5, unsigned int a6, int a7, PCToneMapMethod *a8)
{
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unsigned int v23;
  uint64_t v24;
  double v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  CGColorSpace *ColorSpace;
  int v35;
  _QWORD v38[4];
  int v39;
  int v40;
  _QWORD v41[5];
  CGColorSpace *v42;
  CGColorSpace *v43;
  void *__p[3];
  uint64_t *v45;
  _QWORD *v46[2];
  uint64_t *v47;
  _QWORD *v48[3];

  v48[0] = 0;
  v48[1] = 0;
  v47 = (uint64_t *)v48;
  v46[0] = 0;
  v46[1] = 0;
  v45 = (uint64_t *)v46;
  v14 = (uint64_t)(a1 + 16);
  OZChannelGradientRGBFolder::getLookup(a1 + 16, a2, &v47);
  OZChannelGradientAlphaFolder::getLookup(a1 + 32, a2, &v45);
  std::vector<float>::vector(__p, 4 * a6);
  if (a6)
  {
    v23 = 0;
    v24 = 0;
    v20.i64[0] = 1.0;
    v25 = 1.0 / (double)(a6 - 1);
    do
    {
      OZChannelGradientRGBFolder::getARGBFromLookup(v25 * (double)v23, v20, v21, v22, v14, (uint64_t)__p[0] + 4 * (v24 & 0xFFFFFFFC), (uint64_t)&v47, v15, v16, v17, v18, v19);
      OZChannelGradientAlphaFolder::getARGBFromLookup(v25 * (double)v23, v31, v32, v33, (uint64_t)(a1 + 32), (_DWORD *)__p[0] + (v24 & 0xFFFFFFFC), (uint64_t)&v45, v26, v27, v28, v29, v30);
      v24 += 4;
      ++v23;
    }
    while (4 * a6 != v24);
  }
  ColorSpace = (CGColorSpace *)OZChannelGradient::getColorSpace((OZChannelGradient *)a1);
  PCGetCachedExtendedRangeColorSpace(ColorSpace, &v43);
  PCGetCachedExtendedRangeColorSpace(a4, &v42);
  v41[0] = a6;
  v41[1] = __p[0];
  v41[2] = 4;
  v41[3] = v43;
  v41[4] = 1;
  if (a3)
    v35 = 2;
  else
    v35 = 1;
  v38[0] = a6;
  v38[1] = a5;
  v38[2] = 4;
  v38[3] = v42;
  v39 = v35;
  v40 = a7;
  PCColorUtil::transformColorWithDynamicRange((uint64_t)v41, (uint64_t)v38, a8);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v42);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v43);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v45, v46[0]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v47, v48[0]);
}

void sub_1B2C7D9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CGColorSpace *a23,CGColorSpace *a24,void *__p,uint64_t a26,uint64_t a27,char a28,_QWORD *a29)
{
  uint64_t v29;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a23);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a24);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a28, a29);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v29 - 128, *(_QWORD **)(v29 - 120));
  _Unwind_Resume(a1);
}

void OZChannelGradient::getGradient(uint64_t **a1, const CMTime *a2, CGColorSpace *a3, _WORD *a4, unsigned int a5, int a6, PCToneMapMethod *a7)
{
  int v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  void *__p[3];

  v14 = 4 * a5;
  std::vector<float>::vector(__p, 4 * a5);
  v15 = (float *)__p[0];
  OZChannelGradient::getGradient(a1, a2, 0, a3, (uint64_t)__p[0], a5, a6, a7);
  for (; v14; --v14)
  {
    v16 = *v15++;
    v17 = v16;
    if (v16 <= 1.0)
      v18 = v17;
    else
      v18 = 1.0;
    if (v17 >= 0.0)
      v19 = v18;
    else
      v19 = 0.0;
    *a4++ = vcvtmd_s64_f64(v19 * 65535.0 + 0.5 + 0.0000001);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B2C7DB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZChannelGradient::getGradient(uint64_t **a1, const CMTime *a2, CGColorSpace *a3, uint64_t a4, unsigned int a5, int a6, PCToneMapMethod *a7)
{
  OZChannelGradient::getGradient(a1, a2, 0, a3, a4, a5, a6, a7);
}

void OZChannelGradient::getGradientHash(uint64_t a1)
{
  uint64_t v1;
  PVPerfStats::FrameStats *v2;
  PVPerfStats::FrameStats *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  PCColorSpaceCache *v8;
  PCColorSpaceCache *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  CGColorSpace *v17;
  int v18;
  int Size;
  int8x8_t v20[521];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = v1;
  v16 = v15;
  v20[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v20);
  (*(void (**)(uint64_t, int8x8_t *, uint64_t))(*(_QWORD *)v14 + 448))(v14, v20, v13);
  PCHashWriteStream::writeValue(v20, v11);
  PCHashWriteStream::writeValue(v20, v7);
  v18 = PCColorSpaceCache::identifyColorSpace(v9, v17);
  PCHashWriteStream::writeValue(v20, v18);
  PCHashWriteStream::writeValue(v20, v5);
  Size = PVPerfStats::FrameStats::GetSize(v3);
  PCHashWriteStream::writeValue(v20, Size);
  *v16 = *(_OWORD *)PCHashWriteStream::getHash(v20)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v20);
}

void sub_1B2C7DC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

const __CFString *OZChannelGradient::getObjCWrapperName(OZChannelGradient *this)
{
  return CFSTR("CHChannelGradient");
}

uint64_t OZChannelGradient::isModified(OZChannelBase *this, uint64_t a2)
{
  void **var0;
  OZChannelBase **v6;
  OZChannelBase **v7;
  OZChannelBase *v8;
  BOOL v9;
  void **var2;
  const void **v11;
  __CFString *v12;
  char *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  const void *v19;
  char *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  const void *v26;
  char *v27;
  double v28;
  double v29;
  double v30;

  if ((_DWORD)a2 && OZChannelBase::testFlag(this, 2))
    return 0;
  var0 = this[1].var0;
  if (!var0 || (v6 = (OZChannelBase **)*var0, v7 = (OZChannelBase **)var0[1], *var0 == v7))
  {
LABEL_12:
    if (!LODWORD(this[7].var1))
    {
      var2 = this[2].var2;
      if (var2)
      {
        v11 = (const void **)*var2;
        if (((*((_QWORD *)this[2].var2 + 1) - (_QWORD)v11) & 0x7FFFFFFF8) == 0x10)
        {
          v12 = this[3].var4.var0;
          if (v12)
          {
            if (((v12->info - (unint64_t)v12->isa) & 0x7FFFFFFF8) == 8)
            {
              v13 = *v11
              if (((*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v13 + 496))(v13, a2) & 1) == 0
                && OZChannel::getValueAsInt((OZChannel *)(v13 + 432), MEMORY[0x1E0CA2E68], 0.0) == 2)
              {
                OZChannel::getValueAsDouble((OZChannel *)(v13 + 128), MEMORY[0x1E0CA2E68], 0.0);
                if (fabs(v14) < 0.0000001)
                {
                  OZChannel::getValueAsDouble((OZChannel *)(v13 + 280), MEMORY[0x1E0CA2E68], 0.0);
                  if (fabs(v15 + -0.5) < 0.0000001)
                  {
                    OZChannel::getValueAsDouble((OZChannel *)(v13 + 824), MEMORY[0x1E0CA2E68], 0.0);
                    if (fabs(v16 + -0.64) < 0.0000001)
                    {
                      OZChannel::getValueAsDouble((OZChannel *)(v13 + 976), MEMORY[0x1E0CA2E68], 0.0);
                      if (fabs(v17 + -0.68) < 0.0000001)
                      {
                        OZChannel::getValueAsDouble((OZChannel *)(v13 + 1128), MEMORY[0x1E0CA2E68], 0.0);
                        if (fabs(v18 + -0.77) < 0.0000001 && *((_DWORD *)v13 + 6) == 1)
                        {
                          v19 = (const void *)*((_QWORD *)*this[2].var2 + 1);
                          v20 = v19
                          if (((*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v20 + 496))(v20, a2) & 1) == 0
                            && OZChannel::getValueAsInt((OZChannel *)(v20 + 432), MEMORY[0x1E0CA2E68], 0.0) == 2)
                          {
                            OZChannel::getValueAsDouble((OZChannel *)(v20 + 128), MEMORY[0x1E0CA2E68], 0.0);
                            if (fabs(v21 + -1.0) < 0.0000001)
                            {
                              OZChannel::getValueAsDouble((OZChannel *)(v20 + 280), MEMORY[0x1E0CA2E68], 0.0);
                              if (fabs(v22 + -0.5) < 0.0000001)
                              {
                                OZChannel::getValueAsDouble((OZChannel *)(v20 + 824), MEMORY[0x1E0CA2E68], 0.0);
                                if (fabs(v23 + -0.21) < 0.0000001)
                                {
                                  OZChannel::getValueAsDouble((OZChannel *)(v20 + 976), MEMORY[0x1E0CA2E68], 0.0);
                                  if (fabs(v24 + -0.43) < 0.0000001)
                                  {
                                    OZChannel::getValueAsDouble((OZChannel *)(v20 + 1128), MEMORY[0x1E0CA2E68], 0.0);
                                    if (fabs(v25 + -0.75) < 0.0000001 && *((_DWORD *)v20 + 6) == 2)
                                    {
                                      v26 = *(const void **)this[3].var4.var0->isa;
                                      v27 = v26
                                      if (((*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v27 + 496))(v27, a2) & 1) == 0&& OZChannel::getValueAsInt((OZChannel *)(v27 + 432), MEMORY[0x1E0CA2E68], 0.0) == 2)
                                      {
                                        OZChannel::getValueAsDouble((OZChannel *)(v27 + 128), MEMORY[0x1E0CA2E68], 0.0);
                                        if (fabs(v28) < 0.0000001)
                                        {
                                          OZChannel::getValueAsDouble((OZChannel *)(v27 + 280), MEMORY[0x1E0CA2E68], 0.0);
                                          if (fabs(v29 + -0.5) < 0.0000001)
                                          {
                                            OZChannel::getValueAsDouble((OZChannel *)(v27 + 688), MEMORY[0x1E0CA2E68], 0.0);
                                            if (fabs(v30 + -1.0) < 0.0000001 && *((_DWORD *)v27 + 6) == 1)
                                              return 0;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    while (1)
    {
      v8 = *v6;
      v9 = *v6 == (OZChannelBase *)&this[1].var2 || v8 == (OZChannelBase *)&this[2].var4;
      if (!v9 && ((*((uint64_t (**)(OZChannelBase *, uint64_t))v8->var0 + 62))(v8, a2) & 1) != 0)
        break;
      if (++v6 == v7)
        goto LABEL_12;
    }
  }
  return 1;
}

uint64_t OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(OZChannelGradient::OZChannelGradient_gammaImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(void)::OZChannelGradient_gammaImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(void)::OZChannelGradient_gammaImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelGradient::OZChannelGradient_gammaImpl::_OZChannelGradient_gamma;
}

void std::__call_once_param<std::tuple<OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelGradient::OZChannelGradient_gammaImpl *v0;

  if (!OZChannelGradient::OZChannelGradient_gammaImpl::_OZChannelGradient_gamma)
  {
    v0 = (OZChannelGradient::OZChannelGradient_gammaImpl *)operator new();
    OZChannelGradient::OZChannelGradient_gammaImpl::OZChannelGradient_gammaImpl(v0);
    OZChannelGradient::OZChannelGradient_gammaImpl::_OZChannelGradient_gamma = (uint64_t)v0;
  }
}

void sub_1B2C7E1A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelGradient::OZChannelGradient_gammaImpl *OZChannelGradient::OZChannelGradient_gammaImpl::OZChannelGradient_gammaImpl(OZChannelGradient::OZChannelGradient_gammaImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 2.2);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 2.2, 0, 1);
  PCSingleton::PCSingleton((OZChannelGradient::OZChannelGradient_gammaImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E655A8F0;
  *((_QWORD *)this + 5) = &unk_1E655A910;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2C7E268(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(OZChannelGradient::OZChannelGradient_colorSpaceIDImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(void)::OZChannelGradient_colorSpaceIDImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(void)::OZChannelGradient_colorSpaceIDImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::_OZChannelGradient_colorSpaceID;
}

void std::__call_once_param<std::tuple<OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelGradient::OZChannelGradient_colorSpaceIDImpl *v0;
  const PCString *v1;

  if (!OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::_OZChannelGradient_colorSpaceID)
  {
    v0 = (OZChannelGradient::OZChannelGradient_colorSpaceIDImpl *)operator new();
    OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::OZChannelGradient_colorSpaceIDImpl(v0, v1);
    OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::_OZChannelGradient_colorSpaceID = (uint64_t)v0;
  }
}

void sub_1B2C7E334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelGradient::OZChannelGradient_colorSpaceIDImpl *OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::OZChannelGradient_colorSpaceIDImpl(OZChannelGradient::OZChannelGradient_colorSpaceIDImpl *this, const PCString *a2)
{
  OZChannelEnum *v3;
  OZCurve *OZChannelEnumCurve;
  const PCString *v5;
  int v6;

  v3 = (OZChannelEnum *)OZChannelBase::setRangeName((OZChannelBase *)3, a2);
  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(v3, (double)(int)v3);
  v6 = OZChannelBase::setRangeName((OZChannelBase *)3, v5);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, (double)v6, 0, 1);
  PCSingleton::PCSingleton((OZChannelGradient::OZChannelGradient_colorSpaceIDImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E655A968;
  *((_QWORD *)this + 5) = &unk_1E655A988;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2C7E3F8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::OZChannelGradientExtras(OZChannelGradientExtras *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  TXParagraphStyleFolder_Factory *v7;
  OZFactoryBase *v8;
  TXParagraphStyleFolder_Factory *v9;
  OZFactoryBase *v10;
  OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl *v11;
  OZChannelImpl *Instance;
  PCString v13;
  PCString v14;

  OZChannelGradient::OZChannelGradient(this, a2, a3, a4, a5, a6);
  *(_QWORD *)v7 = &off_1E655A9E0;
  *((_QWORD *)v7 + 2) = &unk_1E655ACB8;
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Gradient Type Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v9, v10);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel Gradient Type"));
  Instance = (OZChannelImpl *)OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(v11);
  OZChannelEnum::OZChannelEnum((OZChannelGradientExtras *)((char *)this + 800), &v14, &v13, (OZChannelFolder *)this, 3u, 0, Instance, 0);
  PCString::~PCString(&v13);
  PCString::~PCString(&v14);
}

void sub_1B2C7E4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradient *v10;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZChannelGradient::~OZChannelGradient(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::OZChannelGradientExtras(OZChannelGradientExtras *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;
  TXParagraphStyleFolder_Factory *v7;
  OZFactoryBase *v8;
  OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl *v9;
  OZChannelImpl *Instance;
  PCString v11;
  PCString v12;

  OZChannelGradient::OZChannelGradient(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E655A9E0;
  *((_QWORD *)v5 + 2) = &unk_1E655ACB8;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Gradient Type Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v11, CFSTR("Channel Gradient Type"));
  Instance = (OZChannelImpl *)OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(v9);
  OZChannelEnum::OZChannelEnum((OZChannelGradientExtras *)((char *)this + 800), &v12, &v11, (OZChannelFolder *)this, 3u, 0, Instance, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
}

void sub_1B2C7E5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradient *v10;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZChannelGradient::~OZChannelGradient(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::OZChannelGradientExtras(OZChannelGradientExtras *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl *v15;
  OZChannelImpl *v16;
  PCString v17;
  PCString v18;

  Instance = (OZFactory *)OZChannelGradientExtras_Factory::getInstance(this);
  OZChannelGradient::OZChannelGradient(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E655A9E0;
  *((_QWORD *)this + 2) = &unk_1E655ACB8;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v18, CFSTR("Channel Gradient Type Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v17, CFSTR("Channel Gradient Type"));
  v16 = (OZChannelImpl *)OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(v15);
  OZChannelEnum::OZChannelEnum((OZChannelGradientExtras *)((char *)this + 800), &v18, &v17, (OZChannelFolder *)this, 3u, 0, v16, 0);
  PCString::~PCString(&v17);
  PCString::~PCString(&v18);
}

void sub_1B2C7E6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradient *v10;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZChannelGradient::~OZChannelGradient(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::OZChannelGradientExtras(OZChannelGradientExtras *this, const OZChannelGradientExtras *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZChannelGradient::OZChannelGradient(this, a2, a3);
  *v5 = &off_1E655A9E0;
  v5[2] = &unk_1E655ACB8;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 100), (const OZChannelGradientExtras *)((char *)a2 + 800), (OZChannelFolder *)this);
}

void sub_1B2C7E758(_Unwind_Exception *a1)
{
  OZChannelGradient *v1;

  OZChannelGradient::~OZChannelGradient(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::~OZChannelGradientExtras(OZChannelGradientExtras *this)
{
  *(_QWORD *)this = &off_1E655A9E0;
  *((_QWORD *)this + 2) = &unk_1E655ACB8;
  OZChannelEnum::~OZChannelEnum((OZChannelGradientExtras *)((char *)this + 800));
  OZChannelGradient::~OZChannelGradient(this);
}

{
  *(_QWORD *)this = &off_1E655A9E0;
  *((_QWORD *)this + 2) = &unk_1E655ACB8;
  OZChannelEnum::~OZChannelEnum((OZChannelGradientExtras *)((char *)this + 800));
  OZChannelGradient::~OZChannelGradient(this);
}

{
  *(_QWORD *)this = &off_1E655A9E0;
  *((_QWORD *)this + 2) = &unk_1E655ACB8;
  OZChannelEnum::~OZChannelEnum((OZChannelGradientExtras *)((char *)this + 800));
  OZChannelGradient::~OZChannelGradient(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelGradientExtras::~OZChannelGradientExtras(OZChannelGradientExtras *this)
{
  *(_QWORD *)this = &unk_1E655ACB8;
  *((_QWORD *)this - 2) = &off_1E655A9E0;
  OZChannelEnum::~OZChannelEnum((OZChannelGradientExtras *)((char *)this + 784));
  OZChannelGradient::~OZChannelGradient((OZChannelGradientExtras *)((char *)this - 16));
}

{
  OZChannelGradientExtras::~OZChannelGradientExtras((OZChannelGradientExtras *)((char *)this - 16));
}

OZChannelGradientExtras *OZChannelGradientExtras::clone(OZChannelGradientExtras *this)
{
  OZChannelGradientExtras *v2;

  v2 = (OZChannelGradientExtras *)operator new();
  OZChannelGradientExtras::OZChannelGradientExtras(v2, this, 0);
  return v2;
}

void sub_1B2C7E8C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409FA7E95DLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::copy(PCString *this, const OZChannelBase *a2, char a3)
{
  char *v6;

  OZChannelGradient::copy((OZChannelGradient *)this, a2, a3);
  if (a2)
  else
    v6 = 0;
  OZChannelEnum::copy(this + 100, (const OZChannelBase *)(v6 + 800), a3);
}

const __CFString *OZChannelGradientExtras::getObjCWrapperName(OZChannelGradientExtras *this)
{
  return CFSTR("CHChannelGradientExtras");
}

uint64_t OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(void)::OZChannelGradientExtras_gradientTypeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(void)::OZChannelGradientExtras_gradientTypeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::_OZChannelGradientExtras_gradientType;
}

void std::__call_once_param<std::tuple<OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl *v0;

  if (!OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::_OZChannelGradientExtras_gradientType)
  {
    v0 = (OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl *)operator new();
    OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::OZChannelGradientExtras_gradientTypeImpl(v0);
    OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::_OZChannelGradientExtras_gradientType = (uint64_t)v0;
  }
}

void sub_1B2C7EA04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl *OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::OZChannelGradientExtras_gradientTypeImpl(OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E655AD28;
  *((_QWORD *)this + 5) = &unk_1E655AD48;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2C7EAB4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientFolder::OZChannelGradientFolder(OZChannelGradientFolder *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  uint64_t v6;

  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3, a4, a5, a6);
  *(_QWORD *)v6 = off_1E655ADA0;
  *(_QWORD *)(v6 + 16) = &unk_1E655B0A0;
  *(_QWORD *)(v6 + 56) &= ~0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v6);
}

void sub_1B2C7EB20(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelVaryingFolder::~OZChannelVaryingFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientFolder::OZChannelGradientFolder(OZChannelGradientFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3, a4);
  *(_QWORD *)v4 = off_1E655ADA0;
  *(_QWORD *)(v4 + 16) = &unk_1E655B0A0;
  *(_QWORD *)(v4 + 56) &= ~0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v4);
}

void sub_1B2C7EB7C(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelVaryingFolder::~OZChannelVaryingFolder(v1);
  _Unwind_Resume(a1);
}

OZChannelBase *OZChannelGradientFolder::cloneSample(OZChannelFolder *this, int a2)
{
  OZChannelBase *Descendant;
  unsigned int NextUniqueID;

  Descendant = (OZChannelBase *)OZChannelFolder::getDescendant(this, a2);
  if (Descendant)
  {
    (*(void (**)(OZChannelFolder *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
    Descendant = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))Descendant->var0 + 31))(Descendant);
    NextUniqueID = OZChannelBase::getNextUniqueID(Descendant);
    OZChannelBase::setID(Descendant, NextUniqueID);
    OZChannelFolder::push_back(this, Descendant);
  }
  return Descendant;
}

OZChannelBase *OZChannelGradientFolder::deleteSample(OZChannelFolder *this, int a2)
{
  OZChannelBase *result;
  OZChannelBase *v4;

  result = (OZChannelBase *)OZChannelFolder::getDescendant(this, a2);
  if (result)
  {
    v4 = result;
    OZChannelFolder::removeDescendant(this, result);
    return (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v4->var0 + 1))(v4);
  }
  return result;
}

void OZChannelGradientFolder::spread(OZChannelGradientFolder *this, const CMTime *a2)
{
  const void ***v2;
  const void **v4;
  const void **v5;
  double v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  double v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;

  v2 = (const void ***)*((_QWORD *)this + 14);
  if (v2)
  {
    v17 = 0;
    v18 = 0;
    v16 = (uint64_t *)&v17;
    v4 = *v2;
    v5 = v2[1];
    v6 = 1.0;
    if (*v2 != v5)
    {
      do
      {
        if (*v4)
        else
          v7 = 0;
        OZChannel::getValueAsDouble((OZChannel *)(v7 + 128), a2, 0.0);
        v15 = v8;
        v19 = &v15;
        std::__tree<std::__value_type<double,OZChannelGradientSample *>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientSample *>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientSample *>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(&v16, (double *)&v15, (uint64_t)&std::piecewise_construct, &v19)[5] = (uint64_t)v7;
        ++v4;
      }
      while (v4 != v5);
      if (v18 >= 2)
        v6 = 1.0 / (double)(v18 - 1);
    }
    v9 = v16;
    if (v16 != (uint64_t *)&v17)
    {
      v10 = 0.0;
      do
      {
        v11 = v9[5];
        (*(void (**)(uint64_t, const CMTime *, _QWORD, double))(*(_QWORD *)(v11 + 128) + 712))(v11 + 128, a2, 0, v6 * v10);
        (*(void (**)(uint64_t, const CMTime *, _QWORD, double))(*(_QWORD *)(v11 + 280) + 712))(v11 + 280, a2, 0, 0.5);
        v12 = (uint64_t *)v9[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (uint64_t *)v9[2];
            v14 = *v13 == (_QWORD)v9;
            v9 = v13;
          }
          while (!v14);
        }
        v10 = v10 + 1.0;
        v9 = v13;
      }
      while (v13 != (uint64_t *)&v17);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v16, v17);
  }
}

void sub_1B2C7EE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void OZChannelGradientFolder::flop(OZChannelGradientFolder *this, const CMTime *a2)
{
  const void ***v2;
  uint64_t *v3;
  const void **v4;
  const void **v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  double v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  int ValueAsInt;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30[2];
  uint64_t *v31;

  v2 = (const void ***)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = (uint64_t *)v30;
    v30[0] = 0;
    v30[1] = 0;
    v29 = (uint64_t *)v30;
    v4 = *v2;
    v5 = v2[1];
    if (*v2 != v5)
    {
      do
      {
        if (*v4)
        else
          v7 = 0;
        OZChannel::getValueAsDouble((OZChannel *)(v7 + 128), a2, 0.0);
        v28 = v8;
        v31 = &v28;
        std::__tree<std::__value_type<double,OZChannelGradientSample *>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientSample *>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientSample *>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(&v29, (double *)&v28, (uint64_t)&std::piecewise_construct, &v31)[5] = (uint64_t)v7;
        ++v4;
      }
      while (v4 != v5);
      if (v30 != (_QWORD **)v29)
      {
        do
        {
          v9 = *v3;
          v10 = (uint64_t *)*v3;
          v11 = v3;
          if (*v3)
          {
            do
            {
              v12 = v10;
              v10 = (uint64_t *)v10[1];
            }
            while (v10);
          }
          else
          {
            do
            {
              v12 = (uint64_t *)v11[2];
              v13 = *v12 == (_QWORD)v11;
              v11 = v12;
            }
            while (v13);
          }
          v14 = v3;
          if (v9)
          {
            do
            {
              v15 = v9;
              v9 = *(_QWORD *)(v9 + 8);
            }
            while (v9);
          }
          else
          {
            do
            {
              v15 = v14[2];
              v13 = *(_QWORD *)v15 == (_QWORD)v14;
              v14 = (uint64_t *)v15;
            }
            while (v13);
          }
          v16 = (_QWORD *)v12[5];
          (*(void (**)(_QWORD *, const CMTime *, _QWORD, double))(v16[16] + 712))(v16 + 16, a2, 0, 1.0 - *(double *)(v15 + 32));
          v17 = (uint64_t *)*v3;
          v18 = v3;
          if (*v3)
          {
            do
            {
              v3 = v17;
              v17 = (uint64_t *)v17[1];
            }
            while (v17);
          }
          else
          {
            do
            {
              v3 = (uint64_t *)v18[2];
              v13 = *v3 == (_QWORD)v18;
              v18 = v3;
            }
            while (v13);
          }
          v19 = v3;
          if (v3 != v29)
          {
            v20 = (uint64_t *)*v3;
            v21 = v3;
            if (*v3)
            {
              do
              {
                v22 = v20;
                v20 = (uint64_t *)v20[1];
              }
              while (v20);
            }
            else
            {
              do
              {
                v22 = (uint64_t *)v21[2];
                v13 = *v22 == (_QWORD)v21;
                v21 = v22;
              }
              while (v13);
            }
            OZChannel::getValueAsDouble((OZChannel *)(v22[5] + 280), a2, 0.0);
            (*(void (**)(_QWORD *, const CMTime *, _QWORD, double))(v16[35] + 712))(v16 + 35, a2, 0, 1.0 - v23);
            v24 = (uint64_t *)*v3;
            v25 = v3;
            if (*v3)
            {
              do
              {
                v26 = v24;
                v24 = (uint64_t *)v24[1];
              }
              while (v24);
            }
            else
            {
              do
              {
                v26 = (uint64_t *)v25[2];
                v13 = *v26 == (_QWORD)v25;
                v25 = v26;
              }
              while (v13);
            }
            ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v26[5] + 432), a2, 0.0);
            (*(void (**)(_QWORD *, const CMTime *, _QWORD, double))(v16[54] + 712))(v16 + 54, a2, 0, (double)ValueAsInt);
            v19 = v29;
          }
        }
        while (v3 != v19);
      }
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v29, v30[0]);
  }
}

void sub_1B2C7F0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void OZChannelGradientFolder::sortAndRename(OZChannelGradientFolder *this)
{
  const void ***v1;
  const void **v2;
  const void **v3;
  const CMTime *v5;
  char *v6;
  __CFString *v7;
  uint64_t *v8;
  int v9;
  const PCString *v10;
  OZChannelBase *v11;
  void **v12;
  OZChannelBase **v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  OZChannelBase **v21;
  char *v22;
  char *v23;
  OZChannelBase *v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  PCString v28;
  uint64_t *v29;
  _QWORD *v30[2];
  char __str[8];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = (const void ***)*((_QWORD *)this + 14);
  if (v1)
  {
    v30[0] = 0;
    v30[1] = 0;
    v29 = (uint64_t *)v30;
    v2 = *v1;
    v3 = v1[1];
    if (*v1 == v3)
    {
      v1[1] = v2;
    }
    else
    {
      v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        if (*v2)
        else
          v6 = 0;
        OZChannel::getValueAsDouble((OZChannel *)(v6 + 128), v5, 0.0);
        v28.var0 = v7;
        *(_QWORD *)__str = &v28;
        std::__tree<std::__value_type<double,OZChannelGradientSample *>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientSample *>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientSample *>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(&v29, (double *)&v28, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[5] = (uint64_t)v6;
        ++v2;
      }
      while (v2 != v3);
      v8 = v29;
      *(_QWORD *)(*((_QWORD *)this + 14) + 8) = **((_QWORD **)this + 14);
      if (v8 != (uint64_t *)v30)
      {
        v9 = 1;
        do
        {
          v10 = (const PCString *)(*(uint64_t (**)(OZChannelGradientFolder *))(*(_QWORD *)this + 712))(this);
          PCString::PCString(&v28, v10);
          snprintf(__str, 0x20uLL, "%d", v9);
          PCString::append(&v28, __str);
          v11 = (OZChannelBase *)v8[5];
          v12 = (void **)*((_QWORD *)this + 14);
          v13 = (OZChannelBase **)v12[1];
          v14 = (unint64_t)v12[2];
          if ((unint64_t)v13 >= v14)
          {
            v16 = ((char *)v13 - (_BYTE *)*v12) >> 3;
            if ((unint64_t)(v16 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v17 = v14 - (_QWORD)*v12;
            v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1))
              v18 = v16 + 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v12 + 2), v19);
            else
              v20 = 0;
            v21 = (OZChannelBase **)&v20[8 * v16];
            *v21 = v11;
            v15 = v21 + 1;
            v23 = (char *)*v12;
            v22 = (char *)v12[1];
            if (v22 != *v12)
            {
              do
              {
                v24 = (OZChannelBase *)*((_QWORD *)v22 - 1);
                v22 -= 8;
                *--v21 = v24;
              }
              while (v22 != v23);
              v22 = (char *)*v12;
            }
            *v12 = v21;
            v12[1] = v15;
            v12[2] = &v20[8 * v19];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v13 = v11;
            v15 = v13 + 1;
          }
          v12[1] = v15;
          if (PCString::compare(&v11->var4, &v28))
          {
            (*((void (**)(OZChannelBase *, uint64_t))v11->var0 + 58))(v11, 1);
            OZChannelBase::setName(v11, &v28, 0);
          }
          PCString::~PCString(&v28);
          v25 = (uint64_t *)v8[1];
          if (v25)
          {
            do
            {
              v26 = v25;
              v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v26 = (uint64_t *)v8[2];
              v27 = *v26 == (_QWORD)v8;
              v8 = v26;
            }
            while (!v27);
          }
          ++v9;
          v8 = v26;
        }
        while (v26 != (uint64_t *)v30);
      }
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v29, v30[0]);
  }
}

void sub_1B2C7F3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, char a12, _QWORD *a13)
{
  PCString::~PCString(&a11);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

const __CFString *OZChannelGradientFolder::getObjCWrapperName(OZChannelGradientFolder *this)
{
  return CFSTR("CHChannelGradientFolder");
}

uint64_t OZChannelGradientFolder::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  *((_QWORD *)this + 7) &= ~0x10000uLL;
  return OZChannelVaryingFolder::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'OZChannelGradientFolder::parseEnd(OZChannelGradientFolder *this, PCSerializerReadStream *a2)
{
  *((_QWORD *)this + 5) &= ~0x10000uLL;
  return OZChannelVaryingFolder::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
}

void OZChannelGradientRGBFolder::OZChannelGradientRGBFolder(OZChannelGradientRGBFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZChannelGradientFolder::OZChannelGradientFolder(this, a2, a3, a4);
  *v4 = &off_1E655B0F8;
  v4[2] = &unk_1E655B3F8;
}

void OZChannelGradientRGBFolder::OZChannelGradientRGBFolder(OZChannelGradientRGBFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)OZChannelGradientRGBFolder_Factory::getInstance(this);
  OZChannelGradientFolder::OZChannelGradientFolder(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E655B0F8;
  *((_QWORD *)this + 2) = &unk_1E655B3F8;
}

void OZChannelGradientRGBFolder::OZChannelGradientRGBFolder(OZChannelGradientRGBFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3);
  *v3 = &off_1E655B0F8;
  v3[2] = &unk_1E655B3F8;
}

void `non-virtual thunk to'OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder(OZChannelGradientRGBFolder *this)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelFolder *)((char *)this - 16));
}

{
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder(OZChannelFolder *this)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder(this);
  JUMPOUT(0x1B5E29170);
}

OZChannelVaryingFolder *OZChannelGradientRGBFolder::clone(const OZChannelBase *this)
{
  OZChannelVaryingFolder *v2;

  v2 = (OZChannelVaryingFolder *)operator new();
  OZChannelVaryingFolder::OZChannelVaryingFolder(v2, this, 0);
  *(_QWORD *)v2 = &off_1E655B0F8;
  *((_QWORD *)v2 + 2) = &unk_1E655B3F8;
  return v2;
}

void sub_1B2C7F588(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

TXParagraphStyleFolder_Factory *OZChannelGradientRGBFolder::getSampleBaseName(OZChannelGradientRGBFolder *this)
{
  TXParagraphStyleFolder_Factory *v1;
  OZFactoryBase *v2;

  v1 = (TXParagraphStyleFolder_Factory *)OZChannelGradientRGBFolder::_baseName;
  if (!OZChannelGradientRGBFolder::_baseName)
  {
    v1 = (TXParagraphStyleFolder_Factory *)operator new();
    TXParagraphStyleFolder_Factory::createInstance(v1, v2);
    PCURL::PCURL(v1, CFSTR("Channel Gradient Folder RGB"));
    OZChannelGradientRGBFolder::_baseName = (uint64_t)v1;
  }
  return v1;
}

void sub_1B2C7F610(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientRGBFolder::addSample(OZChannelFolder *this, double a2, double a3, double a4, double a5, double a6, int a7)
{
  OZChannelGradientSampleRGB *v14;
  OZChannelBase *v15;
  unsigned int NextUniqueID;

  v14 = (OZChannelGradientSampleRGB *)operator new();
  v15 = (OZChannelBase *)(*(uint64_t (**)(OZChannelFolder *))(*(_QWORD *)this + 712))(this);
  NextUniqueID = OZChannelBase::getNextUniqueID(v15);
  OZChannelGradientSampleRGB::OZChannelGradientSampleRGB(v14, (const PCString *)v15, a2, a3, a4, a5, a6, a7, 0, NextUniqueID, 0);
  OZChannelFolder::push_back(this, (OZChannelBase *)v14);
}

void sub_1B2C7F6F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40C9B629ABLL);
  _Unwind_Resume(a1);
}

OZChannelGradientSampleRGB *OZChannelGradientRGBFolder::insertSample(OZChannelFolder *this, const CMTime *a2, double a3)
{
  _QWORD *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double v11;
  uint64_t v12;
  OZChannelGradientSampleRGB *v13;
  OZChannelBase *v14;
  __int128 v15;
  double v16;
  int v17;
  unsigned int v18;
  OZChannelBase *v19;
  unsigned int NextUniqueID;
  _QWORD *v22;
  _QWORD v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23[0] = 0;
  v23[1] = 0;
  v22 = v23;
  v24 = 0u;
  v25 = 0u;
  (*(void (**)(OZChannelFolder *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  (*(void (**)(OZChannelFolder *, const CMTime *, _QWORD **))(*(_QWORD *)this + 728))(this, a2, &v22);
  v6 = (_QWORD *)v23[0];
  if (!v23[0])
    goto LABEL_11;
  v7 = (double *)v23;
  v8 = (double *)v23[0];
  do
  {
    v9 = v8;
    v10 = v7;
    v11 = v8[4];
    if (v11 >= a3)
      v7 = v8;
    else
      ++v8;
    v8 = *(double **)v8;
  }
  while (v8);
  if (v7 == (double *)v23)
    goto LABEL_11;
  if (v11 < a3)
    v9 = v10;
  if (v9[4] <= a3)
  {
    v13 = 0;
  }
  else
  {
LABEL_11:
    v12 = (*(uint64_t (**)(OZChannelFolder *, __int128 *, _QWORD **, double))(*(_QWORD *)this + 744))(this, &v24, &v22, a3);
    v13 = (OZChannelGradientSampleRGB *)operator new();
    if (v23 == (_QWORD *)v12)
    {
      v19 = (OZChannelBase *)(*(uint64_t (**)(OZChannelFolder *))(*(_QWORD *)this + 712))(this);
      NextUniqueID = OZChannelBase::getNextUniqueID(v19);
      OZChannelGradientSampleRGB::OZChannelGradientSampleRGB(v13, (const PCString *)v19, 0.64, 0.68, 0.77, a3, 0.5, 2, 0, NextUniqueID, 0);
    }
    else
    {
      v14 = (OZChannelBase *)(*(uint64_t (**)(OZChannelFolder *))(*(_QWORD *)this + 712))(this);
      v15 = v24;
      v16 = *(double *)&v25;
      v17 = *(_DWORD *)(v12 + 80);
      v18 = OZChannelBase::getNextUniqueID(v14);
      OZChannelGradientSampleRGB::OZChannelGradientSampleRGB(v13, (const PCString *)v14, *(double *)&v15, *((double *)&v15 + 1), v16, a3, 0.5, v17, 0, v18, 0);
    }
    OZChannelFolder::push_back(this, (OZChannelBase *)v13);
    v6 = (_QWORD *)v23[0];
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v22, v6);
  return v13;
}

void sub_1B2C7F948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;

  MEMORY[0x1B5E29170](v11, 0x10F1C40C9B629ABLL);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t **OZChannelGradientRGBFolder::getLookup(uint64_t **result, const CMTime *a2, uint64_t **a3)
{
  uint64_t *v3;
  const void **v4;
  const void **v5;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  int ValueAsInt;
  double v18;
  double v19;
  double *v20;

  v3 = result[14];
  if (v3)
  {
    v4 = (const void **)*v3;
    v5 = (const void **)v3[1];
    if ((const void **)*v3 != v5)
    {
      do
      {
        if (*v4)
        else
          v8 = 0;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 824), a2, 0.0);
        v10 = v9;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 976), a2, 0.0);
        v12 = v11;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 1128), a2, 0.0);
        v14 = v13;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 280), a2, 0.0);
        v16 = v15;
        ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v8 + 432), a2, 0.0);
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 128), a2, 0.0);
        v19 = v18;
        v20 = &v19;
        result = std::__tree<std::__value_type<double,OZChannelGradientFolder::Sample>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientFolder::Sample>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientFolder::Sample>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(a3, &v19, (uint64_t)&std::piecewise_construct, (_QWORD **)&v20);
        result[5] = v10;
        result[6] = v12;
        result[7] = v14;
        result[9] = v16;
        ++v4;
        *((_DWORD *)result + 20) = ValueAsInt;
      }
      while (v4 != v5);
    }
  }
  return result;
}

void OZChannelGradientRGBFolder::getARGBFromLookup(double a1, int8x16_t a2, int8x16_t a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  double v21;
  float v22;
  uint64_t v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double Parameter;
  float v29;
  uint64_t v30;
  double *v31;
  double *v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  double v36;
  float v37;
  uint64_t v38;
  double *v39;
  double *v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  double v44;
  double v45[4];
  double v46[2];
  uint64_t v47;
  uint64_t v48;
  double v49[2];
  uint64_t v50;
  uint64_t v51;
  double v52[4];
  double v53[4];
  double v54[5];

  v54[4] = *(double *)MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a7 + 16))
  {
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 4) = 0;
    return;
  }
  v13 = a7 + 8;
  v14 = *(_QWORD *)(a7 + 8);
  v15 = a7 + 8;
  if (v14)
  {
    v15 = a7 + 8;
    v16 = *(_QWORD *)(a7 + 8);
    do
    {
      v17 = (uint64_t *)(v16 + 8);
      if (*(double *)(v16 + 32) >= a1)
      {
        v17 = (uint64_t *)v16;
        v15 = v16;
      }
      v16 = *v17;
    }
    while (*v17);
  }
  if (v15 != *(_QWORD *)a7)
  {
    if (v15 != v13)
    {
      v18 = *(_QWORD *)v15;
      if (*(_QWORD *)v15)
      {
        do
        {
          v19 = v18;
          v18 = *(_QWORD *)(v18 + 8);
        }
        while (v18);
      }
      else
      {
        v23 = v15;
        do
        {
          v19 = *(_QWORD *)(v23 + 16);
          v20 = *(_QWORD *)v19 == v23;
          v23 = v19;
        }
        while (v20);
      }
      v24 = *(_DWORD *)(v19 + 80);
      if (v24 == 2)
      {
        a3.i64[0] = *(_QWORD *)(v15 + 32);
        v50 = *(_QWORD *)(v15 + 40);
        v51 = v50;
        a4.i64[0] = *(_QWORD *)(v15 + 56);
        v47 = *(_QWORD *)(v15 + 48);
        v48 = v47;
        v45[2] = *(double *)a4.i64;
        v45[3] = *(double *)a4.i64;
        a4.i64[0] = *(_QWORD *)(v19 + 32);
        v49[0] = *(double *)(v19 + 40);
        v49[1] = v49[0];
        v26 = a1 - *(double *)a4.i64;
        *(double *)a2.i64 = *(double *)a3.i64 - *(double *)a4.i64;
        a4.i64[0] = *(_QWORD *)(v19 + 56);
        v46[0] = *(double *)(v19 + 48);
        v46[1] = v46[0];
        v45[0] = *(double *)a4.i64;
        v45[1] = *(double *)a4.i64;
        v53[3] = 1.0;
        v54[0] = 0.0;
        v53[0] = 0.0;
        v52[0] = 0.0;
        a3.i64[0] = *(_QWORD *)(v19 + 72);
        v54[1] = *(double *)a3.i64;
        v54[2] = *(double *)a3.i64;
        v53[1] = *(double *)a3.i64;
        v53[2] = *(double *)a3.i64;
        v52[1] = *(double *)a3.i64;
        v52[2] = *(double *)a3.i64;
        v54[3] = 1.0;
        v27 = v26 / *(double *)a2.i64;
        v52[3] = 1.0;
        Parameter = OZBezierFindParameter(v54, v26 / *(double *)a2.i64, a2, a3, a4, a6, (double *)a7, a8);
        v29 = OZBezierEval(v49, Parameter);
        *(float *)(a6 + 4) = v29;
        v36 = OZBezierFindParameter(v53, v27, v33, v34, v35, v30, v31, v32);
        v37 = OZBezierEval(v46, v36);
        *(float *)(a6 + 8) = v37;
        v44 = OZBezierFindParameter(v52, v27, v41, v42, v43, v38, v39, v40);
        v21 = OZBezierEval(v45, v44);
      }
      else if (v24 == 1)
      {
        v25 = (a1 - *(double *)(v19 + 32)) / (*(double *)(v15 + 32) - *(double *)(v19 + 32));
        *(float32x2_t *)(a6 + 4) = vcvt_f32_f64(vaddq_f64(*(float64x2_t *)(v19 + 40), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v15 + 40), *(float64x2_t *)(v19 + 40)), v25)));
        v21 = *(double *)(v19 + 56) + v25 * (*(double *)(v15 + 56) - *(double *)(v19 + 56));
      }
      else
      {
        if (v24)
        {
          PCPrint("File %s, line %d should not have been reached:\n\t", a6, a7, (uint64_t)a8, a9, a10, a11, a12, (char)"/Library/Caches/com.apple.xbs/Sources/ProChanneliOS/Channels/OZChannelGradientFolder.cpp");
          pcAbortImpl();
        }
        *(float32x2_t *)(a6 + 4) = vcvt_f32_f64(*(float64x2_t *)(v19 + 40));
        v21 = *(double *)(v19 + 56);
      }
      goto LABEL_18;
    }
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = *(_QWORD *)(v14 + 8);
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = *(_QWORD *)(v13 + 16);
        v20 = *(_QWORD *)v15 == v13;
        v13 = v15;
      }
      while (v20);
    }
  }
  *(float32x2_t *)(a6 + 4) = vcvt_f32_f64(*(float64x2_t *)(v15 + 40));
  v21 = *(double *)(v15 + 56);
LABEL_18:
  v22 = v21;
  *(float *)(a6 + 12) = v22;
}

_QWORD *OZChannelGradientRGBFolder::getRGBAFromLookup(double a1, int8x16_t a2, int8x16_t a3, int8x16_t a4, uint64_t a5, double *a6, uint64_t a7, double *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  _QWORD *v14;
  _QWORD *result;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _QWORD *v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double Parameter;
  uint64_t v27;
  double *v28;
  double *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  double v33;
  uint64_t v34;
  double *v35;
  double *v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  double v40;
  double v41;
  double v42[4];
  double v43[2];
  uint64_t v44;
  uint64_t v45;
  double v46[2];
  uint64_t v47;
  uint64_t v48;
  double v49[4];
  double v50[4];
  double v51[5];

  v51[4] = *(double *)MEMORY[0x1E0C80C00];
  v12 = (_QWORD *)(a7 + 8);
  if (!*(_QWORD *)(a7 + 16))
    return (_QWORD *)(a7 + 8);
  v14 = (_QWORD *)*v12;
  result = (_QWORD *)(a7 + 8);
  if (*v12)
  {
    result = (_QWORD *)(a7 + 8);
    v16 = (_QWORD *)*v12;
    do
    {
      v17 = v16 + 1;
      if (*((double *)v16 + 4) >= a1)
      {
        v17 = v16;
        result = v16;
      }
      v16 = (_QWORD *)*v17;
    }
    while (*v17);
  }
  if (result == *(_QWORD **)a7)
    goto LABEL_17;
  if (result == v12)
  {
    if (v14)
    {
      do
      {
        result = v14;
        v14 = (_QWORD *)v14[1];
      }
      while (v14);
    }
    else
    {
      do
      {
        result = (_QWORD *)v12[2];
        v20 = *result == (_QWORD)v12;
        v12 = result;
      }
      while (v20);
    }
LABEL_17:
    *a6 = *((double *)result + 5);
    a6[1] = *((double *)result + 6);
    a6[2] = *((double *)result + 7);
    return result;
  }
  v18 = *result;
  if (*result)
  {
    do
    {
      v19 = v18;
      v18 = *(_QWORD *)(v18 + 8);
    }
    while (v18);
  }
  else
  {
    v21 = result;
    do
    {
      v19 = v21[2];
      v20 = *(_QWORD *)v19 == (_QWORD)v21;
      v21 = (_QWORD *)v19;
    }
    while (v20);
  }
  v22 = *(_DWORD *)(v19 + 80);
  if (v22 == 2)
  {
    a3.i64[0] = result[4];
    v47 = result[5];
    v48 = v47;
    a4.i64[0] = result[7];
    v44 = result[6];
    v45 = v44;
    v42[2] = *(double *)a4.i64;
    v42[3] = *(double *)a4.i64;
    a4.i64[0] = *(_QWORD *)(v19 + 32);
    v46[0] = *(double *)(v19 + 40);
    v46[1] = v46[0];
    v24 = a1 - *(double *)a4.i64;
    *(double *)a2.i64 = *(double *)a3.i64 - *(double *)a4.i64;
    a4.i64[0] = *(_QWORD *)(v19 + 56);
    v43[0] = *(double *)(v19 + 48);
    v43[1] = v43[0];
    v42[0] = *(double *)a4.i64;
    v42[1] = *(double *)a4.i64;
    v50[3] = 1.0;
    v51[0] = 0.0;
    v50[0] = 0.0;
    v49[0] = 0.0;
    a3.i64[0] = *(_QWORD *)(v19 + 72);
    v51[1] = *(double *)a3.i64;
    v51[2] = *(double *)a3.i64;
    v50[1] = *(double *)a3.i64;
    v50[2] = *(double *)a3.i64;
    v49[1] = *(double *)a3.i64;
    v49[2] = *(double *)a3.i64;
    v51[3] = 1.0;
    v25 = v24 / *(double *)a2.i64;
    v49[3] = 1.0;
    Parameter = OZBezierFindParameter(v51, v24 / *(double *)a2.i64, a2, a3, a4, (uint64_t)a6, (double *)a7, a8);
    *a6 = OZBezierEval(v46, Parameter);
    v33 = OZBezierFindParameter(v50, v25, v30, v31, v32, v27, v28, v29);
    a6[1] = OZBezierEval(v43, v33);
    v40 = OZBezierFindParameter(v49, v25, v37, v38, v39, v34, v35, v36);
    v23 = OZBezierEval(v42, v40);
  }
  else if (v22 == 1)
  {
    v41 = (a1 - *(double *)(v19 + 32)) / (*((double *)result + 4) - *(double *)(v19 + 32));
    *a6 = *(double *)(v19 + 40) + v41 * (*((double *)result + 5) - *(double *)(v19 + 40));
    a6[1] = *(double *)(v19 + 48) + v41 * (*((double *)result + 6) - *(double *)(v19 + 48));
    v23 = *(double *)(v19 + 56) + v41 * (*((double *)result + 7) - *(double *)(v19 + 56));
  }
  else
  {
    if (v22)
    {
      PCPrint("File %s, line %d should not have been reached:\n\t", (uint64_t)a6, a7, (uint64_t)a8, a9, a10, a11, a12, (char)"/Library/Caches/com.apple.xbs/Sources/ProChanneliOS/Channels/OZChannelGradientFolder.cpp");
      pcAbortImpl();
    }
    *a6 = *(double *)(v19 + 40);
    a6[1] = *(double *)(v19 + 48);
    v23 = *(double *)(v19 + 56);
  }
  a6[2] = v23;
  return (_QWORD *)v19;
}

const __CFString *OZChannelGradientRGBFolder::getObjCWrapperName(OZChannelGradientRGBFolder *this)
{
  return CFSTR("CHChannelGradientRGBFolder");
}

void OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder(OZChannelGradientAlphaFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZChannelGradientFolder::OZChannelGradientFolder(this, a2, a3, a4);
  *v4 = &off_1E655B450;
  v4[2] = &unk_1E655B750;
}

void OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder(OZChannelGradientAlphaFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)OZChannelGradientAlphaFolder_Factory::getInstance(this);
  OZChannelGradientFolder::OZChannelGradientFolder(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E655B450;
  *((_QWORD *)this + 2) = &unk_1E655B750;
}

void OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder(OZChannelGradientAlphaFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3);
  *v3 = &off_1E655B450;
  v3[2] = &unk_1E655B750;
}

void `non-virtual thunk to'OZChannelGradientAlphaFolder::~OZChannelGradientAlphaFolder(OZChannelGradientAlphaFolder *this)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelFolder *)((char *)this - 16));
}

{
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChannelGradientAlphaFolder::~OZChannelGradientAlphaFolder(OZChannelFolder *this)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder(this);
  JUMPOUT(0x1B5E29170);
}

OZChannelVaryingFolder *OZChannelGradientAlphaFolder::clone(const OZChannelBase *this)
{
  OZChannelVaryingFolder *v2;

  v2 = (OZChannelVaryingFolder *)operator new();
  OZChannelVaryingFolder::OZChannelVaryingFolder(v2, this, 0);
  *(_QWORD *)v2 = &off_1E655B450;
  *((_QWORD *)v2 + 2) = &unk_1E655B750;
  return v2;
}

void sub_1B2C80184(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

uint64_t **OZChannelGradientAlphaFolder::getLookup(uint64_t **result, const CMTime *a2, uint64_t **a3)
{
  uint64_t *v3;
  const void **v4;
  const void **v5;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  int ValueAsInt;
  double v14;
  double v15;
  double *v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = result[14];
  if (v3)
  {
    v4 = (const void **)*v3;
    v5 = (const void **)v3[1];
    if ((const void **)*v3 != v5)
    {
      do
      {
        if (*v4)
        else
          v8 = 0;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 688), a2, 0.0);
        v10 = v9;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 280), a2, 0.0);
        v12 = v11;
        ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v8 + 432), a2, 0.0);
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 128), a2, 0.0);
        v15 = v14;
        v16 = &v15;
        result = std::__tree<std::__value_type<double,OZChannelGradientFolder::Sample>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientFolder::Sample>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientFolder::Sample>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(a3, &v15, (uint64_t)&std::piecewise_construct, (_QWORD **)&v16);
        *(_OWORD *)(result + 5) = v17;
        result[7] = v18;
        result[8] = v10;
        result[9] = v12;
        *((_DWORD *)result + 20) = ValueAsInt;
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return result;
}

TXParagraphStyleFolder_Factory *OZChannelGradientAlphaFolder::getSampleBaseName(OZChannelGradientAlphaFolder *this)
{
  TXParagraphStyleFolder_Factory *v1;
  OZFactoryBase *v2;

  v1 = (TXParagraphStyleFolder_Factory *)OZChannelGradientAlphaFolder::_baseName;
  if (!OZChannelGradientAlphaFolder::_baseName)
  {
    v1 = (TXParagraphStyleFolder_Factory *)operator new();
    TXParagraphStyleFolder_Factory::createInstance(v1, v2);
    PCURL::PCURL(v1, CFSTR("Channel Gradient Folder Alpha"));
    OZChannelGradientAlphaFolder::_baseName = (uint64_t)v1;
  }
  return v1;
}

void sub_1B2C8036C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientAlphaFolder::addSample(OZChannelFolder *this, double a2, double a3, double a4, int a5)
{
  OZChannelGradientSampleAlpha *v10;
  OZChannelBase *v11;
  unsigned int NextUniqueID;

  v10 = (OZChannelGradientSampleAlpha *)operator new();
  v11 = (OZChannelBase *)(*(uint64_t (**)(OZChannelFolder *))(*(_QWORD *)this + 712))(this);
  NextUniqueID = OZChannelBase::getNextUniqueID(v11);
  OZChannelGradientSampleAlpha::OZChannelGradientSampleAlpha(v10, (const PCString *)v11, a2, a3, a4, a5, 0, NextUniqueID, 0);
  OZChannelFolder::push_back(this, (OZChannelBase *)v10);
}

void sub_1B2C80438(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408C14BFF9);
  _Unwind_Resume(a1);
}

OZChannelGradientSampleAlpha *OZChannelGradientAlphaFolder::insertSample(OZChannelFolder *this, const CMTime *a2, double a3)
{
  _QWORD *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double v11;
  uint64_t v12;
  OZChannelGradientSampleAlpha *v13;
  OZChannelBase *v14;
  double v15;
  int v16;
  unsigned int v17;
  OZChannelBase *v18;
  unsigned int NextUniqueID;
  _QWORD *v21;
  _QWORD v22[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v22[0] = 0;
  v22[1] = 0;
  v21 = v22;
  v23 = 0u;
  v24 = 0u;
  (*(void (**)(OZChannelFolder *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  (*(void (**)(OZChannelFolder *, const CMTime *, _QWORD **))(*(_QWORD *)this + 728))(this, a2, &v21);
  v6 = (_QWORD *)v22[0];
  if (!v22[0])
    goto LABEL_11;
  v7 = (double *)v22;
  v8 = (double *)v22[0];
  do
  {
    v9 = v8;
    v10 = v7;
    v11 = v8[4];
    if (v11 >= a3)
      v7 = v8;
    else
      ++v8;
    v8 = *(double **)v8;
  }
  while (v8);
  if (v7 == (double *)v22)
    goto LABEL_11;
  if (v11 < a3)
    v9 = v10;
  if (v9[4] <= a3)
  {
    v13 = 0;
  }
  else
  {
LABEL_11:
    v12 = (*(uint64_t (**)(OZChannelFolder *, __int128 *, _QWORD **, double))(*(_QWORD *)this + 744))(this, &v23, &v21, a3);
    v13 = (OZChannelGradientSampleAlpha *)operator new();
    if (v22 == (_QWORD *)v12)
    {
      v18 = (OZChannelBase *)(*(uint64_t (**)(OZChannelFolder *))(*(_QWORD *)this + 712))(this);
      NextUniqueID = OZChannelBase::getNextUniqueID(v18);
      OZChannelGradientSampleAlpha::OZChannelGradientSampleAlpha(v13, (const PCString *)v18, 1.0, a3, 0.5, 2, 0, NextUniqueID, 0);
    }
    else
    {
      v14 = (OZChannelBase *)(*(uint64_t (**)(OZChannelFolder *))(*(_QWORD *)this + 712))(this);
      v15 = *((double *)&v24 + 1);
      v16 = *(_DWORD *)(v12 + 80);
      v17 = OZChannelBase::getNextUniqueID(v14);
      OZChannelGradientSampleAlpha::OZChannelGradientSampleAlpha(v13, (const PCString *)v14, v15, a3, 0.5, v16, 0, v17, 0);
    }
    OZChannelFolder::push_back(this, (OZChannelBase *)v13);
    v6 = (_QWORD *)v22[0];
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v21, v6);
  return v13;
}

void sub_1B2C80664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;

  MEMORY[0x1B5E29170](v11, 0x10F1C408C14BFF9);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

float OZChannelGradientAlphaFolder::getARGBFromLookup(double a1, int8x16_t a2, int8x16_t a3, int8x16_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, double *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  double *v13;
  double *v14;
  double *v15;
  uint64_t v16;
  uint64_t *v17;
  double v18;
  double v19;
  BOOL v20;
  double *v21;
  int v22;
  double v23;
  double Parameter;
  double v26[2];
  uint64_t v27;
  uint64_t v28;
  double v29[5];

  v29[4] = *(double *)MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a7 + 16))
  {
    v13 = (double *)(a7 + 8);
    v14 = *(double **)(a7 + 8);
    v15 = (double *)(a7 + 8);
    if (v14)
    {
      v15 = (double *)(a7 + 8);
      v16 = *(_QWORD *)(a7 + 8);
      do
      {
        v17 = (uint64_t *)(v16 + 8);
        if (*(double *)(v16 + 32) >= a1)
        {
          v17 = (uint64_t *)v16;
          v15 = (double *)v16;
        }
        v16 = *v17;
      }
      while (*v17);
    }
    if (v15 != *(double **)a7)
    {
      if (v15 != v13)
      {
        v18 = *v15;
        if (*(_QWORD *)v15)
        {
          do
          {
            v19 = v18;
            v18 = *(double *)(*(_QWORD *)&v18 + 8);
          }
          while (v18 != 0.0);
        }
        else
        {
          v21 = v15;
          do
          {
            v19 = v21[2];
            v20 = **(_QWORD **)&v19 == (_QWORD)v21;
            v21 = *(double **)&v19;
          }
          while (v20);
        }
        v22 = *(_DWORD *)(*(_QWORD *)&v19 + 80);
        if (v22 == 2)
        {
          v27 = *((_QWORD *)v15 + 8);
          v28 = v27;
          a3.i64[0] = *(_QWORD *)(*(_QWORD *)&v19 + 72);
          v26[0] = *(double *)(*(_QWORD *)&v19 + 64);
          v26[1] = v26[0];
          v29[0] = 0.0;
          v29[1] = *(double *)a3.i64;
          v29[2] = *(double *)a3.i64;
          v29[3] = 1.0;
          a2.i64[0] = *(_QWORD *)(*(_QWORD *)&v19 + 32);
          v23 = a1 - *(double *)a2.i64;
          a3.i64[0] = (uint64_t)v15[4];
          *(double *)a2.i64 = *(double *)a3.i64 - *(double *)a2.i64;
          Parameter = OZBezierFindParameter(v29, v23 / *(double *)a2.i64, a2, a3, a4, (uint64_t)a6, (double *)a7, a8);
          a1 = OZBezierEval(v26, Parameter);
        }
        else if (v22 == 1)
        {
          a1 = *(double *)(*(_QWORD *)&v19 + 64)
             + (a1 - *(double *)(*(_QWORD *)&v19 + 32))
             / (v15[4] - *(double *)(*(_QWORD *)&v19 + 32))
             * (v15[8] - *(double *)(*(_QWORD *)&v19 + 64));
        }
        else
        {
          if (v22)
          {
            PCPrint("File %s, line %d should not have been reached:\n\t", (uint64_t)a6, a7, (uint64_t)a8, a9, a10, a11, a12, (char)"/Library/Caches/com.apple.xbs/Sources/ProChanneliOS/Channels/OZChannelGradientFolder.cpp");
            pcAbortImpl();
          }
          a1 = *(double *)(*(_QWORD *)&v19 + 64);
        }
        goto LABEL_18;
      }
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (double *)*((_QWORD *)v14 + 1);
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (double *)*((_QWORD *)v13 + 2);
          v20 = *(_QWORD *)v15 == (_QWORD)v13;
          v13 = v15;
        }
        while (v20);
      }
    }
    a1 = v15[8];
LABEL_18:
    *(float *)&a1 = a1;
    *a6 = LODWORD(a1);
    return *(float *)&a1;
  }
  *a6 = 0;
  return *(float *)&a1;
}

_QWORD *OZChannelGradientAlphaFolder::getRGBAFromLookup(double a1, int8x16_t a2, int8x16_t a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  _QWORD *v14;
  _QWORD *result;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _QWORD *v21;
  int v22;
  double v23;
  double v24;
  double Parameter;
  double v26[2];
  uint64_t v27;
  uint64_t v28;
  double v29[5];

  v29[4] = *(double *)MEMORY[0x1E0C80C00];
  v12 = (_QWORD *)(a7 + 8);
  if (!*(_QWORD *)(a7 + 16))
    return (_QWORD *)(a7 + 8);
  v14 = (_QWORD *)*v12;
  result = (_QWORD *)(a7 + 8);
  if (*v12)
  {
    result = (_QWORD *)(a7 + 8);
    v16 = (_QWORD *)*v12;
    do
    {
      v17 = v16 + 1;
      if (*((double *)v16 + 4) >= a1)
      {
        v17 = v16;
        result = v16;
      }
      v16 = (_QWORD *)*v17;
    }
    while (*v17);
  }
  if (result == *(_QWORD **)a7)
    goto LABEL_17;
  if (result == v12)
  {
    if (v14)
    {
      do
      {
        result = v14;
        v14 = (_QWORD *)v14[1];
      }
      while (v14);
    }
    else
    {
      do
      {
        result = (_QWORD *)v12[2];
        v20 = *result == (_QWORD)v12;
        v12 = result;
      }
      while (v20);
    }
LABEL_17:
    *(_QWORD *)(a6 + 24) = result[8];
    return result;
  }
  v18 = *result;
  if (*result)
  {
    do
    {
      v19 = v18;
      v18 = *(_QWORD *)(v18 + 8);
    }
    while (v18);
  }
  else
  {
    v21 = result;
    do
    {
      v19 = v21[2];
      v20 = *(_QWORD *)v19 == (_QWORD)v21;
      v21 = (_QWORD *)v19;
    }
    while (v20);
  }
  v22 = *(_DWORD *)(v19 + 80);
  if (v22 == 2)
  {
    v27 = result[8];
    v28 = v27;
    a3.i64[0] = *(_QWORD *)(v19 + 72);
    v26[0] = *(double *)(v19 + 64);
    v26[1] = v26[0];
    v29[0] = 0.0;
    v29[1] = *(double *)a3.i64;
    v29[2] = *(double *)a3.i64;
    v29[3] = 1.0;
    a2.i64[0] = *(_QWORD *)(v19 + 32);
    v24 = a1 - *(double *)a2.i64;
    a3.i64[0] = result[4];
    *(double *)a2.i64 = *(double *)a3.i64 - *(double *)a2.i64;
    Parameter = OZBezierFindParameter(v29, v24 / *(double *)a2.i64, a2, a3, a4, a6, (double *)a7, a8);
    v23 = OZBezierEval(v26, Parameter);
  }
  else if (v22 == 1)
  {
    v23 = *(double *)(v19 + 64)
        + (a1 - *(double *)(v19 + 32))
        / (*((double *)result + 4) - *(double *)(v19 + 32))
        * (*((double *)result + 8) - *(double *)(v19 + 64));
  }
  else
  {
    if (v22)
    {
      PCPrint("File %s, line %d should not have been reached:\n\t", a6, a7, (uint64_t)a8, a9, a10, a11, a12, (char)"/Library/Caches/com.apple.xbs/Sources/ProChanneliOS/Channels/OZChannelGradientFolder.cpp");
      pcAbortImpl();
    }
    v23 = *(double *)(v19 + 64);
  }
  *(double *)(a6 + 24) = v23;
  return (_QWORD *)v19;
}

const __CFString *OZChannelGradientAlphaFolder::getObjCWrapperName(OZChannelGradientAlphaFolder *this)
{
  return CFSTR("CHChannelGradientAlphaFolder");
}

uint64_t *std::__tree<std::__value_type<double,OZChannelGradientSample *>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientSample *>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientSample *>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(uint64_t **a1, double *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  double v8;
  uint64_t **v9;
  double v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((double *)v6 + 4);
        if (v8 >= v10)
          break;
        v6 = (uint64_t *)*v6;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t **std::__tree<std::__value_type<double,OZChannelGradientFolder::Sample>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientFolder::Sample>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientFolder::Sample>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(uint64_t **a1, double *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  double v8;
  uint64_t **v9;
  double v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((double *)v6 + 4);
        if (v8 >= v10)
          break;
        v6 = (uint64_t *)*v6;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x58uLL);
    *((_QWORD *)v11 + 4) = **a4;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void OZChannelGradientPositioned::OZChannelGradientPositioned(OZChannelGradientPositioned *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;
  TXParagraphStyleFolder_Factory *v7;
  OZFactoryBase *v8;
  PCString v9;

  OZChannelGradientExtras::OZChannelGradientExtras(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E655B7F0;
  *((_QWORD *)v5 + 2) = &unk_1E655BAC8;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Gradient Start"));
  OZChannelPosition::OZChannelPosition((OZChannelGradientPositioned *)((char *)this + 1056), &v9, (OZChannelFolder *)this, 4u, 0, 2u, 0, 0);
  PCString::~PCString(&v9);
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Gradient End"));
  OZChannelPosition::OZChannelPosition((OZChannelGradientPositioned *)((char *)this + 1760), &v9, (OZChannelFolder *)this, 5u, 0, 2u, 0, 0);
  PCString::~PCString(&v9);
  *((_BYTE *)this + 2464) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1056), 16, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1760), 16, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1192), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1344), -100.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1056), 0);
  *((_BYTE *)this + 1496) = 0;
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1896), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2048), 100.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1760), 0);
  *((_BYTE *)this + 2200) = 0;
}

void sub_1B2C80D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradientExtras *v10;
  OZChannelPosition *v11;

  PCString::~PCString(&a10);
  OZChannelPosition::~OZChannelPosition(v11);
  OZChannelGradientExtras::~OZChannelGradientExtras(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientPositioned::OZChannelGradientPositioned(OZChannelGradientPositioned *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  PCString v15;

  Instance = (OZFactory *)OZChannelGradientPositioned_Factory::getInstance(this);
  OZChannelGradientExtras::OZChannelGradientExtras(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E655B7F0;
  *((_QWORD *)this + 2) = &unk_1E655BAC8;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Gradient Start"));
  OZChannelPosition::OZChannelPosition((OZChannelGradientPositioned *)((char *)this + 1056), &v15, (OZChannelFolder *)this, 4u, 0, 2u, 0, 0);
  PCString::~PCString(&v15);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Gradient End"));
  OZChannelPosition::OZChannelPosition((OZChannelGradientPositioned *)((char *)this + 1760), &v15, (OZChannelFolder *)this, 5u, 0, 2u, 0, 0);
  PCString::~PCString(&v15);
  *((_BYTE *)this + 2464) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1056), 16, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1760), 16, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1192), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1344), 100.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1056), 0);
  *((_BYTE *)this + 1496) = 0;
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1896), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2048), -100.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1760), 0);
  *((_BYTE *)this + 2200) = 0;
}

void sub_1B2C80F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradientExtras *v10;
  OZChannelPosition *v11;

  PCString::~PCString(&a10);
  OZChannelPosition::~OZChannelPosition(v11);
  OZChannelGradientExtras::~OZChannelGradientExtras(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientPositioned::OZChannelGradientPositioned(OZChannelGradientPositioned *this, const OZChannelGradientPositioned *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZChannelGradientExtras::OZChannelGradientExtras(this, a2, a3);
  *v5 = &off_1E655B7F0;
  v5[2] = &unk_1E655BAC8;
  OZChannelPosition::OZChannelPosition((OZChannelPosition *)(v5 + 132), (const OZChannelGradientPositioned *)((char *)a2 + 1056), (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZChannelGradientPositioned *)((char *)this + 1760), (const OZChannelGradientPositioned *)((char *)a2 + 1760), (OZChannelFolder *)this);
  *((_BYTE *)this + 2464) = *((_BYTE *)a2 + 2464);
}

void sub_1B2C81010(_Unwind_Exception *a1)
{
  OZChannelGradientExtras *v1;
  OZChannelPosition *v2;

  OZChannelPosition::~OZChannelPosition(v2);
  OZChannelGradientExtras::~OZChannelGradientExtras(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientPositioned::~OZChannelGradientPositioned(OZChannelGradientPositioned *this)
{
  *(_QWORD *)this = &off_1E655B7F0;
  *((_QWORD *)this + 2) = &unk_1E655BAC8;
  OZChannelPosition::~OZChannelPosition((OZChannelGradientPositioned *)((char *)this + 1760));
  OZChannelPosition::~OZChannelPosition((OZChannelGradientPositioned *)((char *)this + 1056));
  OZChannelGradientExtras::~OZChannelGradientExtras(this);
}

{
  OZChannelGradientPositioned::~OZChannelGradientPositioned(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelGradientPositioned::~OZChannelGradientPositioned(OZChannelGradientPositioned *this)
{
  OZChannelGradientPositioned::~OZChannelGradientPositioned((OZChannelGradientPositioned *)((char *)this - 16));
}

{
  OZChannelGradientPositioned::~OZChannelGradientPositioned((OZChannelGradientPositioned *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

OZChannelGradientPositioned *OZChannelGradientPositioned::clone(OZChannelGradientPositioned *this)
{
  OZChannelGradientPositioned *v2;

  v2 = (OZChannelGradientPositioned *)operator new();
  OZChannelGradientPositioned::OZChannelGradientPositioned(v2, this, 0);
  return v2;
}

void sub_1B2C8111C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40C94B7CBALL);
  _Unwind_Resume(a1);
}

void OZChannelGradientPositioned::copy(PCString *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZChannelGradientExtras::copy(this, a2, a3);
  if (v4)
  OZChannelPosition::copy((OZChannelPosition *)&this[132], (const OZChannelBase *)((char *)v4 + 1056), a3);
  OZChannelPosition::copy((OZChannelPosition *)&this[220], (const OZChannelBase *)((char *)v4 + 1760), a3);
}

uint64_t OZChannelGradientPositioned::setDoNotSerializeAsRoot(uint64_t this, char a2)
{
  *(_BYTE *)(this + 2464) = a2;
  return this;
}

uint64_t `non-virtual thunk to'OZChannelGradientPositioned::writeHeader(OZChannelGradientPositioned *this, OZFactory *a2, int a3)
{
  return OZChannelGradient::writeHeader((OZChannelBase *)((char *)this - 16), a2, a3);
}

uint64_t `non-virtual thunk to'OZChannelGradientPositioned::writeBody(OZChannelGradientPositioned *this, PCSerializerWriteStream *a2, int a3, int a4, uint64_t a5)
{
  return OZChannelGradient::writeBody((OZChannelBase *)((char *)this - 16), a2, a3, a4, a5);
}

const __CFString *OZChannelGradientPositioned::getObjCWrapperName(OZChannelGradientPositioned *this)
{
  return CFSTR("CHChannelGradientPositioned");
}

void OZChannelGradientSample::OZChannelGradientSample(OZChannelGradientSample *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  TXParagraphStyleFolder_Factory *v7;
  OZFactoryBase *v8;
  TXParagraphStyleFolder_Factory *v9;
  OZFactoryBase *v10;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  OZChannelGradientSample::OZChannelGradientSample_interpolationImpl *v15;
  OZChannelImpl *Instance;
  PCString v17;
  PCString v18;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, a6, 0);
  *(_QWORD *)v7 = &off_1E655BB38;
  *((_QWORD *)v7 + 2) = &unk_1E655BE10;
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v18, CFSTR("Channel GradientSample Offset"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 128), 0.0, &v18, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v18);
  TXParagraphStyleFolder_Factory::createInstance(v9, v10);
  PCURL::PCURL((PCURL *)&v18, CFSTR("Channel GradientSample Middle"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 280), 0.0, &v18, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v18);
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v18, CFSTR("Channel GradientSample Interpolation Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v17, CFSTR("Channel GradientSample Interpolation"));
  Instance = (OZChannelImpl *)OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(v15);
  OZChannelEnum::OZChannelEnum((OZChannelGradientSample *)((char *)this + 432), 2u, &v18, &v17, (OZChannelFolder *)this, 0x64u, 0, Instance, 0);
  PCString::~PCString(&v17);
  PCString::~PCString(&v18);
  (*(void (**)(OZChannelGradientSample *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2C81348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelFolder *v12;
  OZChannelPercent *v13;
  OZChannelPercent *v14;
  OZChannelEnum *v15;
  OZChannelEnum *v16;

  v16 = v15;
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B2C813C8()
{
  JUMPOUT(0x1B2C813B8);
}

void OZChannelGradientSample::OZChannelGradientSample(OZChannelGradientSample *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;
  TXParagraphStyleFolder_Factory *v7;
  OZFactoryBase *v8;
  TXParagraphStyleFolder_Factory *v9;
  OZFactoryBase *v10;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  OZChannelGradientSample::OZChannelGradientSample_interpolationImpl *v13;
  OZChannelImpl *Instance;
  PCString v15;
  PCString v16;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(_QWORD *)v5 = &off_1E655BB38;
  *((_QWORD *)v5 + 2) = &unk_1E655BE10;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v16, CFSTR("Channel GradientSample Offset"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 128), 0.0, &v16, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v16);
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v16, CFSTR("Channel GradientSample Middle"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 280), 0.0, &v16, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v16);
  TXParagraphStyleFolder_Factory::createInstance(v9, v10);
  PCURL::PCURL((PCURL *)&v16, CFSTR("Channel GradientSample Interpolation Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel GradientSample Interpolation"));
  Instance = (OZChannelImpl *)OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(v13);
  OZChannelEnum::OZChannelEnum((OZChannelGradientSample *)((char *)this + 432), 2u, &v16, &v15, (OZChannelFolder *)this, 0x64u, 0, Instance, 0);
  PCString::~PCString(&v15);
  PCString::~PCString(&v16);
  (*(void (**)(OZChannelGradientSample *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2C8153C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelFolder *v12;
  OZChannelPercent *v13;
  OZChannelPercent *v14;
  OZChannelEnum *v15;
  OZChannelEnum *v16;

  v16 = v15;
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B2C815BC()
{
  JUMPOUT(0x1B2C815ACLL);
}

void OZChannelGradientSample::OZChannelGradientSample(OZChannelGradientSample *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  OZChannelGradientSample::OZChannelGradientSample_interpolationImpl *v19;
  OZChannelImpl *v20;
  PCString v21;
  PCString v22;

  Instance = (OZFactory *)OZChannelGradientSample_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(_QWORD *)this = &off_1E655BB38;
  *((_QWORD *)this + 2) = &unk_1E655BE10;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v22, CFSTR("Channel GradientSample Offset"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 128), 0.0, &v22, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v22, CFSTR("Channel GradientSample Middle"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 280), 0.0, &v22, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v22, CFSTR("Channel GradientSample Interpolation Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel GradientSample Interpolation"));
  v20 = (OZChannelImpl *)OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(v19);
  OZChannelEnum::OZChannelEnum((OZChannelGradientSample *)((char *)this + 432), 2u, &v22, &v21, (OZChannelFolder *)this, 0x64u, 0, v20, 0);
  PCString::~PCString(&v21);
  PCString::~PCString(&v22);
  (*(void (**)(OZChannelGradientSample *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2C81768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelFolder *v12;
  OZChannelPercent *v13;
  OZChannelPercent *v14;
  OZChannelEnum *v15;
  OZChannelEnum *v16;

  v16 = v15;
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B2C817E8()
{
  JUMPOUT(0x1B2C817D8);
}

void OZChannelGradientSample::OZChannelGradientSample(OZChannelGradientSample *this, OZFactory *a2, const PCString *a3, double a4, double a5, unsigned int a6, OZChannelFolder *a7, unsigned int a8, int a9)
{
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  TXParagraphStyleFolder_Factory *v19;
  OZFactoryBase *v20;
  OZChannelGradientSample::OZChannelGradientSample_interpolationImpl *v21;
  OZChannelImpl *Instance;
  PCString v23;
  PCString v24;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a7, a8, a9, 0);
  *(_QWORD *)v13 = &off_1E655BB38;
  *((_QWORD *)v13 + 2) = &unk_1E655BE10;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Channel GradientSample Offset"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 128), a4, &v24, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v24);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Channel GradientSample Middle"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 280), a5, &v24, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v24);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Channel GradientSample Interpolation Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v23, CFSTR("Channel GradientSample Interpolation"));
  if (a6 == 2)
    Instance = (OZChannelImpl *)OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(v21);
  else
    Instance = 0;
  OZChannelEnum::OZChannelEnum((OZChannelGradientSample *)((char *)this + 432), a6, &v24, &v23, (OZChannelFolder *)this, 0x64u, 0, Instance, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  (*(void (**)(OZChannelGradientSample *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2C81998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelFolder *v12;
  OZChannelPercent *v13;
  OZChannelPercent *v14;
  OZChannelEnum *v15;

  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B2C81A14()
{
  JUMPOUT(0x1B2C81A04);
}

void OZChannelGradientSample::OZChannelGradientSample(OZChannelGradientSample *this, const OZChannelGradientSample *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E655BB38;
  *(_QWORD *)(v5 + 16) = &unk_1E655BE10;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)(v5 + 128), (const OZChannelBase *)((char *)a2 + 128), (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 280), (const OZChannelBase *)((char *)a2 + 280), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelGradientSample *)((char *)this + 432), (const OZChannelGradientSample *)((char *)a2 + 432), (OZChannelFolder *)this);
}

void sub_1B2C81A98(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;
  OZChannelPercent *v2;
  OZChannelPercent *v3;

  OZChannelPercent::~OZChannelPercent(v3);
  OZChannelPercent::~OZChannelPercent(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientSample::~OZChannelGradientSample(OZChannelGradientSample *this)
{
  *(_QWORD *)this = &off_1E655BB38;
  *((_QWORD *)this + 2) = &unk_1E655BE10;
  OZChannelEnum::~OZChannelEnum((OZChannelGradientSample *)((char *)this + 432));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 280));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  OZChannelGradientSample::~OZChannelGradientSample(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelGradientSample::~OZChannelGradientSample(OZChannelGradientSample *this)
{
  OZChannelGradientSample::~OZChannelGradientSample((OZChannelGradientSample *)((char *)this - 16));
}

{
  OZChannelGradientSample::~OZChannelGradientSample((OZChannelGradientSample *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

OZChannelGradientSample *OZChannelGradientSample::clone(OZChannelGradientSample *this)
{
  OZChannelGradientSample *v2;

  v2 = (OZChannelGradientSample *)operator new();
  OZChannelGradientSample::OZChannelGradientSample(v2, this, 0);
  return v2;
}

void sub_1B2C81BBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40E74858DCLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientSample::copy(OZChannelGradientSample *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZChannelFolder::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannel::copy((OZChannel *)((char *)this + 128), (const OZChannelBase *)((char *)v4 + 128), a3);
  OZChannel::copy((OZChannel *)((char *)this + 280), (const OZChannelBase *)((char *)v4 + 280), a3);
  OZChannelEnum::copy((PCString *)this + 54, (const OZChannelBase *)((char *)v4 + 432), a3);
}

const __CFString *OZChannelGradientSample::getObjCWrapperName(OZChannelGradientSample *this)
{
  return CFSTR("CHChannelGradientSample");
}

uint64_t OZChannelGradientSample::parseEnd(OZChannelGradientSample *this, PCSerializerReadStream *a2)
{
  *((_QWORD *)this + 7) &= ~0x10000uLL;
  return OZChannelFolder::parseEnd((OZChannelFolder *)this, a2);
}

uint64_t `non-virtual thunk to'OZChannelGradientSample::parseEnd(OZChannelGradientSample *this, PCSerializerReadStream *a2)
{
  *((_QWORD *)this + 5) &= ~0x10000uLL;
  return OZChannelFolder::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
}

void OZChannelGradientSampleRGB::OZChannelGradientSampleRGB(OZChannelGradientSampleRGB *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;
  PCString v7;

  OZChannelGradientSample::OZChannelGradientSample(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E655BE80;
  *((_QWORD *)v5 + 2) = &unk_1E655C158;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel GradientSample Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelGradientSampleRGB *)((char *)this + 688), &v7, (OZChannelFolder *)this, 3u, 0, 5u);
  PCString::~PCString(&v7);
}

void sub_1B2C81D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradientSample *v10;

  PCString::~PCString(&a10);
  OZChannelGradientSample::~OZChannelGradientSample(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleRGB::OZChannelGradientSampleRGB(OZChannelGradientSampleRGB *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  PCString v13;

  Instance = (OZFactory *)OZChannelGradientSampleRGB_Factory::getInstance(this);
  OZChannelGradientSample::OZChannelGradientSample(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E655BE80;
  *((_QWORD *)this + 2) = &unk_1E655C158;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel GradientSample Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelGradientSampleRGB *)((char *)this + 688), &v13, (OZChannelFolder *)this, 3u, 0, 5u);
  PCString::~PCString(&v13);
}

void sub_1B2C81DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradientSample *v10;

  PCString::~PCString(&a10);
  OZChannelGradientSample::~OZChannelGradientSample(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleRGB::OZChannelGradientSampleRGB(OZChannelGradientSampleRGB *this, const PCString *a2, double a3, double a4, double a5, double a6, double a7, unsigned int a8, OZChannelFolder *a9, unsigned int a10, int a11)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v23;
  OZFactoryBase *v24;
  PCString v25;

  Instance = (OZFactory *)OZChannelGradientSampleRGB_Factory::getInstance(this);
  OZChannelGradientSample::OZChannelGradientSample(this, Instance, a2, a6, a7, a8, a9, a10, a11);
  *(_QWORD *)this = &off_1E655BE80;
  *((_QWORD *)this + 2) = &unk_1E655C158;
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v25, CFSTR("Channel GradientSample Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelGradientSampleRGB *)((char *)this + 688), a3, a4, a5, &v25, (OZChannelFolder *)this, 3u, 0, 5u);
  PCString::~PCString(&v25);
}

void sub_1B2C81F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradientSample *v10;

  PCString::~PCString(&a10);
  OZChannelGradientSample::~OZChannelGradientSample(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleRGB::OZChannelGradientSampleRGB(OZChannelGradientSampleRGB *this, const OZChannelGradientSampleRGB *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZChannelGradientSample::OZChannelGradientSample(this, a2, a3);
  *v5 = &off_1E655BE80;
  v5[2] = &unk_1E655C158;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelColorNoAlpha *)(v5 + 86), (const OZChannelGradientSampleRGB *)((char *)a2 + 688), (OZChannelFolder *)this);
}

void sub_1B2C81F98(_Unwind_Exception *a1)
{
  OZChannelGradientSample *v1;

  OZChannelGradientSample::~OZChannelGradientSample(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleRGB::~OZChannelGradientSampleRGB(OZChannelGradientSampleRGB *this)
{
  *(_QWORD *)this = &off_1E655BE80;
  *((_QWORD *)this + 2) = &unk_1E655C158;
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZChannelGradientSampleRGB *)((char *)this + 688));
  OZChannelGradientSample::~OZChannelGradientSample(this);
}

{
  *(_QWORD *)this = &off_1E655BE80;
  *((_QWORD *)this + 2) = &unk_1E655C158;
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZChannelGradientSampleRGB *)((char *)this + 688));
  OZChannelGradientSample::~OZChannelGradientSample(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelGradientSampleRGB::~OZChannelGradientSampleRGB(OZChannelGradientSampleRGB *this)
{
  *(_QWORD *)this = &unk_1E655C158;
  *((_QWORD *)this - 2) = &off_1E655BE80;
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZChannelGradientSampleRGB *)((char *)this + 672));
  OZChannelGradientSample::~OZChannelGradientSample((OZChannelGradientSampleRGB *)((char *)this - 16));
}

{
  OZChannelGradientSampleRGB::~OZChannelGradientSampleRGB((OZChannelGradientSampleRGB *)((char *)this - 16));
}

OZChannelGradientSampleRGB *OZChannelGradientSampleRGB::clone(OZChannelGradientSampleRGB *this)
{
  OZChannelGradientSampleRGB *v2;

  v2 = (OZChannelGradientSampleRGB *)operator new();
  OZChannelGradientSampleRGB::OZChannelGradientSampleRGB(v2, this, 0);
  return v2;
}

void sub_1B2C820C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40C9B629ABLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleRGB::copy(OZChannelGradientSampleRGB *this, const OZChannelBase *a2, char a3)
{
  char *v6;

  OZChannelGradientSample::copy(this, a2, a3);
  if (a2)
  else
    v6 = 0;
  OZChannelColorNoAlpha::copy((OZChannelGradientSampleRGB *)((char *)this + 688), (const OZChannelBase *)(v6 + 688), a3);
}

const __CFString *OZChannelGradientSampleRGB::getObjCWrapperName(OZChannelGradientSampleRGB *this)
{
  return CFSTR("CHChannelGradientSampleRGB");
}

void OZChannelGradientSampleAlpha::OZChannelGradientSampleAlpha(OZChannelGradientSampleAlpha *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;
  PCString v7;

  OZChannelGradientSample::OZChannelGradientSample(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E655C1C8;
  *((_QWORD *)v5 + 2) = &unk_1E655C4A0;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel GradientSample Alpha"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), 0.0, &v7, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v7);
}

void sub_1B2C821E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradientSample *v10;

  PCString::~PCString(&a10);
  OZChannelGradientSample::~OZChannelGradientSample(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleAlpha::OZChannelGradientSampleAlpha(OZChannelGradientSampleAlpha *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  PCString v13;

  Instance = (OZFactory *)OZChannelGradientSampleAlpha_Factory::getInstance(this);
  OZChannelGradientSample::OZChannelGradientSample(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E655C1C8;
  *((_QWORD *)this + 2) = &unk_1E655C4A0;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel GradientSample Alpha"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), 0.0, &v13, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v13);
}

void sub_1B2C822D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradientSample *v10;

  PCString::~PCString(&a10);
  OZChannelGradientSample::~OZChannelGradientSample(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleAlpha::OZChannelGradientSampleAlpha(OZChannelGradientSampleAlpha *this, const PCString *a2, double a3, double a4, double a5, unsigned int a6, OZChannelFolder *a7, unsigned int a8, int a9)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v19;
  OZFactoryBase *v20;
  PCString v21;

  Instance = (OZFactory *)OZChannelGradientSampleAlpha_Factory::getInstance(this);
  OZChannelGradientSample::OZChannelGradientSample(this, Instance, a2, a4, a5, a6, a7, a8, a9);
  *(_QWORD *)this = &off_1E655C1C8;
  *((_QWORD *)this + 2) = &unk_1E655C4A0;
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel GradientSample Alpha"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), a3, &v21, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v21);
}

void sub_1B2C823EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradientSample *v10;

  PCString::~PCString(&a10);
  OZChannelGradientSample::~OZChannelGradientSample(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleAlpha::OZChannelGradientSampleAlpha(OZChannelGradientSampleAlpha *this, const OZChannelGradientSampleAlpha *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannelGradientSample::OZChannelGradientSample(this, a2, a3);
  *(_QWORD *)v5 = &off_1E655C1C8;
  *(_QWORD *)(v5 + 16) = &unk_1E655C4A0;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)(v5 + 688), (const OZChannelBase *)((char *)a2 + 688), (OZChannelFolder *)this);
}

void sub_1B2C82460(_Unwind_Exception *a1)
{
  OZChannelGradientSample *v1;

  OZChannelGradientSample::~OZChannelGradientSample(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleAlpha::~OZChannelGradientSampleAlpha(OZChannelGradientSampleAlpha *this)
{
  *(_QWORD *)this = &off_1E655C1C8;
  *((_QWORD *)this + 2) = &unk_1E655C4A0;
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 688));
  OZChannelGradientSample::~OZChannelGradientSample(this);
}

{
  *(_QWORD *)this = &off_1E655C1C8;
  *((_QWORD *)this + 2) = &unk_1E655C4A0;
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 688));
  OZChannelGradientSample::~OZChannelGradientSample(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelGradientSampleAlpha::~OZChannelGradientSampleAlpha(OZChannelGradientSampleAlpha *this)
{
  *(_QWORD *)this = &unk_1E655C4A0;
  *((_QWORD *)this - 2) = &off_1E655C1C8;
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 672));
  OZChannelGradientSample::~OZChannelGradientSample((OZChannelGradientSampleAlpha *)((char *)this - 16));
}

{
  OZChannelGradientSampleAlpha::~OZChannelGradientSampleAlpha((OZChannelGradientSampleAlpha *)((char *)this - 16));
}

OZChannelGradientSampleAlpha *OZChannelGradientSampleAlpha::clone(OZChannelGradientSampleAlpha *this)
{
  OZChannelGradientSampleAlpha *v2;

  v2 = (OZChannelGradientSampleAlpha *)operator new();
  OZChannelGradientSampleAlpha::OZChannelGradientSampleAlpha(v2, this, 0);
  return v2;
}

void sub_1B2C82590(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408C14BFF9);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleAlpha::copy(OZChannelGradientSampleAlpha *this, const OZChannelBase *a2, char a3)
{
  char *v6;

  OZChannelGradientSample::copy(this, a2, a3);
  if (a2)
  else
    v6 = 0;
  OZChannel::copy((OZChannel *)((char *)this + 688), (const OZChannelBase *)(v6 + 688), a3);
}

const __CFString *OZChannelGradientSampleAlpha::getObjCWrapperName(OZChannelGradientSampleAlpha *this)
{
  return CFSTR("CHChannelGradientSampleAlpha");
}

uint64_t OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(OZChannelGradientSample::OZChannelGradientSample_interpolationImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(void)::OZChannelGradientSample_interpolationImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(void)::OZChannelGradientSample_interpolationImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::_OZChannelGradientSample_interpolation;
}

void std::__call_once_param<std::tuple<OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelGradientSample::OZChannelGradientSample_interpolationImpl *v0;

  if (!OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::_OZChannelGradientSample_interpolation)
  {
    v0 = (OZChannelGradientSample::OZChannelGradientSample_interpolationImpl *)operator new();
    OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::OZChannelGradientSample_interpolationImpl(v0);
    OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::_OZChannelGradientSample_interpolation = (uint64_t)v0;
  }
}

void sub_1B2C826D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelGradientSample::OZChannelGradientSample_interpolationImpl *OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::OZChannelGradientSample_interpolationImpl(OZChannelGradientSample::OZChannelGradientSample_interpolationImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 2.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 2.0, 0, 1);
  PCSingleton::PCSingleton((OZChannelGradientSample::OZChannelGradientSample_interpolationImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E655C510;
  *((_QWORD *)this + 5) = &unk_1E655C530;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2C82780(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithAngle::OZChannelGradientWithAngle(OZChannelGradientWithAngle *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;
  OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl *v7;
  OZChannelImpl *Instance;
  PCString v9;

  OZChannelGradientExtras::OZChannelGradientExtras(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E655C588;
  *((_QWORD *)v5 + 2) = &unk_1E655C860;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Gradient Angle"));
  Instance = (OZChannelImpl *)OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::getInstance(v7);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 1056), -1.57079633, &v9, (OZChannelFolder *)this, 4u, 0, Instance, 0);
  PCString::~PCString(&v9);
}

void sub_1B2C82834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradientExtras *v10;

  PCString::~PCString(&a10);
  OZChannelGradientExtras::~OZChannelGradientExtras(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithAngle::OZChannelGradientWithAngle(OZChannelGradientWithAngle *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl *v13;
  OZChannelImpl *v14;
  PCString v15;

  Instance = (OZFactory *)OZChannelGradientWithAngle_Factory::getInstance(this);
  OZChannelGradientExtras::OZChannelGradientExtras(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E655C588;
  *((_QWORD *)this + 2) = &unk_1E655C860;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Gradient Angle"));
  v14 = (OZChannelImpl *)OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::getInstance(v13);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 1056), -1.57079633, &v15, (OZChannelFolder *)this, 4u, 0, v14, 0);
  PCString::~PCString(&v15);
}

void sub_1B2C82928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelGradientExtras *v10;

  PCString::~PCString(&a10);
  OZChannelGradientExtras::~OZChannelGradientExtras(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithAngle::OZChannelGradientWithAngle(OZChannelGradientWithAngle *this, const OZChannelGradientWithAngle *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannelGradientExtras::OZChannelGradientExtras(this, a2, a3);
  *(_QWORD *)v5 = &off_1E655C588;
  *(_QWORD *)(v5 + 16) = &unk_1E655C860;
  OZChannel::OZChannel((OZChannel *)(v5 + 1056), (const OZChannelBase *)((char *)a2 + 1056), (OZChannelFolder *)this);
  *((_QWORD *)this + 132) = &off_1E6551728;
  *((_QWORD *)this + 134) = &unk_1E6551A88;
}

void sub_1B2C829B4(_Unwind_Exception *a1)
{
  OZChannelGradientExtras *v1;

  OZChannelGradientExtras::~OZChannelGradientExtras(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithAngle::~OZChannelGradientWithAngle(OZChannelGradientWithAngle *this)
{
  *(_QWORD *)this = &off_1E655C588;
  *((_QWORD *)this + 2) = &unk_1E655C860;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1056));
  OZChannelGradientExtras::~OZChannelGradientExtras(this);
}

{
  *(_QWORD *)this = &off_1E655C588;
  *((_QWORD *)this + 2) = &unk_1E655C860;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1056));
  OZChannelGradientExtras::~OZChannelGradientExtras(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelGradientWithAngle::~OZChannelGradientWithAngle(OZChannelGradientWithAngle *this)
{
  *(_QWORD *)this = &unk_1E655C860;
  *((_QWORD *)this - 2) = &off_1E655C588;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1040));
  OZChannelGradientExtras::~OZChannelGradientExtras((OZChannelGradientWithAngle *)((char *)this - 16));
}

{
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle((OZChannelGradientWithAngle *)((char *)this - 16));
}

OZChannelGradientWithAngle *OZChannelGradientWithAngle::clone(OZChannelGradientWithAngle *this)
{
  OZChannelGradientWithAngle *v2;

  v2 = (OZChannelGradientWithAngle *)operator new();
  OZChannelGradientWithAngle::OZChannelGradientWithAngle(v2, this, 0);
  return v2;
}

void sub_1B2C82AE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40FB5DE3D8);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithAngle::copy(OZChannelGradientWithAngle *this, const OZChannelBase *a2, char a3)
{
  char *v6;

  OZChannelGradientExtras::copy((PCString *)this, a2, a3);
  if (a2)
  else
    v6 = 0;
  OZChannel::copy((OZChannel *)((char *)this + 1056), (const OZChannelBase *)(v6 + 1056), a3);
}

const __CFString *OZChannelGradientWithAngle::getObjCWrapperName(OZChannelGradientWithAngle *this)
{
  return CFSTR("CHChannelGradientWithAngle");
}

uint64_t OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::getInstance(OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::getInstance(void)::OZChannelGradientWithAngle_angleImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::getInstance(void)::OZChannelGradientWithAngle_angleImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::_OZChannelGradientWithAngle_angle;
}

void std::__call_once_param<std::tuple<OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelAngle *v0;

  if (!OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::_OZChannelGradientWithAngle_angle)
  {
    v0 = (OZChannelAngle *)operator new();
    OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::OZChannelGradientWithAngle_angleImpl(v0);
    OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::_OZChannelGradientWithAngle_angle = (uint64_t)v0;
  }
}

void sub_1B2C82C24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelAngle *OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::OZChannelGradientWithAngle_angleImpl(OZChannelAngle *this)
{
  OZCurve *OZChannelAngleCurve;

  OZChannelAngleCurve = (OZCurve *)OZChannelAngle::createOZChannelAngleCurve(this, -1.57079633);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelAngleCurve, -1.57079633, 0, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E655C8D0;
  this->var5 = (PCString *)&unk_1E655C8F0;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2C82CE8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1B2C82DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40C4B5480ALL);
  _Unwind_Resume(a1);
}

void OZChannelHistogram::OZChannelHistogram(OZChannelHistogram *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  TXParagraphStyleFolder_Factory *v19;
  OZFactoryBase *v20;
  TXParagraphStyleFolder_Factory *v21;
  OZFactoryBase *v22;
  TXParagraphStyleFolder_Factory *v23;
  OZFactoryBase *v24;
  TXParagraphStyleFolder_Factory *v25;
  OZFactoryBase *v26;
  PCString v27;
  PCString v28;

  Instance = (OZFactory *)OZChannelHistogram_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(_QWORD *)this = &off_1E655C948;
  *((_QWORD *)this + 2) = &unk_1E655CC90;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v28, CFSTR("Channel Histogram Entries"));
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v27, CFSTR("Channel Histogram Label"));
  OZChannelEnum::OZChannelEnum((OZChannelHistogram *)((char *)this + 136), &v28, &v27, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v27);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v28, CFSTR("Channel Histogram RGB Folder"));
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 392), &v28, (OZChannelFolder *)this, 2u, 0, 5u);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v28, CFSTR("Channel Histogram Red Folder"));
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 1288), &v28, (OZChannelFolder *)this, 3u, 0, 5u);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v28, CFSTR("Channel Histogram Green Folder"));
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 2184), &v28, (OZChannelFolder *)this, 4u, 0, 5u);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v28, CFSTR("Channel Histogram Blue Folder"));
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3080), &v28, (OZChannelFolder *)this, 5u, 0, 5u);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v25, v26);
  PCURL::PCURL((PCURL *)&v28, CFSTR("Channel Histogram Alpha Folder"));
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3976), &v28, (OZChannelFolder *)this, 6u, 0, 5u);
  PCString::~PCString(&v28);
  *((_QWORD *)this + 609) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
}

void sub_1B2C830B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelEnum *v11;
  OZChannelHistogramSample *v12;
  OZChannelHistogramSample *v13;
  OZChannelHistogramSample *v14;
  OZChannelHistogramSample *v15;

  PCString::~PCString(&a10);
  OZChannelHistogramSample::~OZChannelHistogramSample(v15);
  OZChannelHistogramSample::~OZChannelHistogramSample(v14);
  OZChannelHistogramSample::~OZChannelHistogramSample(v13);
  OZChannelHistogramSample::~OZChannelHistogramSample(v12);
  OZChannelEnum::~OZChannelEnum(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void sub_1B2C83170()
{
  JUMPOUT(0x1B2C83150);
}

void sub_1B2C83178()
{
  JUMPOUT(0x1B2C83158);
}

void sub_1B2C83190()
{
  JUMPOUT(0x1B2C83160);
}

void OZChannelHistogram::OZChannelHistogram(OZChannelHistogram *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  TXParagraphStyleFolder_Factory *v6;
  OZFactoryBase *v7;
  TXParagraphStyleFolder_Factory *v8;
  OZFactoryBase *v9;
  TXParagraphStyleFolder_Factory *v10;
  OZFactoryBase *v11;
  TXParagraphStyleFolder_Factory *v12;
  OZFactoryBase *v13;
  TXParagraphStyleFolder_Factory *v14;
  OZFactoryBase *v15;
  TXParagraphStyleFolder_Factory *v16;
  OZFactoryBase *v17;
  TXParagraphStyleFolder_Factory *v18;
  OZFactoryBase *v19;
  PCString v20;
  PCString v21;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_1E655C948;
  *((_QWORD *)v6 + 2) = &unk_1E655CC90;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel Histogram Entries"));
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Channel Histogram Label"));
  OZChannelEnum::OZChannelEnum((OZChannelHistogram *)((char *)this + 136), &v21, &v20, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v20);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel Histogram RGB Folder"));
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 392), &v21, (OZChannelFolder *)this, 2u, 0, 5u);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v12, v13);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel Histogram Red Folder"));
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 1288), &v21, (OZChannelFolder *)this, 3u, 0, 5u);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v14, v15);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel Histogram Green Folder"));
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 2184), &v21, (OZChannelFolder *)this, 4u, 0, 5u);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v16, v17);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel Histogram Blue Folder"));
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3080), &v21, (OZChannelFolder *)this, 5u, 0, 5u);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v18, v19);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel Histogram Alpha Folder"));
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3976), &v21, (OZChannelFolder *)this, 6u, 0, 5u);
  PCString::~PCString(&v21);
  *((_QWORD *)this + 609) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
}

void sub_1B2C833DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelEnum *v11;
  OZChannelHistogramSample *v12;
  OZChannelHistogramSample *v13;
  OZChannelHistogramSample *v14;
  OZChannelHistogramSample *v15;

  PCString::~PCString(&a10);
  OZChannelHistogramSample::~OZChannelHistogramSample(v15);
  OZChannelHistogramSample::~OZChannelHistogramSample(v14);
  OZChannelHistogramSample::~OZChannelHistogramSample(v13);
  OZChannelHistogramSample::~OZChannelHistogramSample(v12);
  OZChannelEnum::~OZChannelEnum(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void sub_1B2C8349C()
{
  JUMPOUT(0x1B2C8347CLL);
}

void sub_1B2C834A4()
{
  JUMPOUT(0x1B2C83484);
}

void sub_1B2C834BC()
{
  JUMPOUT(0x1B2C8348CLL);
}

void OZChannelHistogram::OZChannelHistogram(OZChannelHistogram *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3);
  *v5 = &off_1E655C948;
  v5[2] = &unk_1E655CC90;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 17), (const OZChannelEnum *)&a2[1].var3, (OZChannelFolder *)this);
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 392), (const OZChannelHistogramSample *)&a2[3].var7, (OZChannelFolder *)this);
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 1288), (const OZChannelHistogramSample *)&a2[11].var7, (OZChannelFolder *)this);
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 2184), (const OZChannelHistogramSample *)&a2[19].var7, (OZChannelFolder *)this);
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3080), (const OZChannelHistogramSample *)&a2[27].var7, (OZChannelFolder *)this);
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3976), (const OZChannelHistogramSample *)&a2[35].var7, (OZChannelFolder *)this);
  *((_QWORD *)this + 609) = 0;
}

void sub_1B2C83594(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannelEnum *v2;
  OZChannelHistogramSample *v3;
  OZChannelHistogramSample *v4;
  OZChannelHistogramSample *v5;
  OZChannelHistogramSample *v6;

  OZChannelHistogramSample::~OZChannelHistogramSample(v6);
  OZChannelHistogramSample::~OZChannelHistogramSample(v5);
  OZChannelHistogramSample::~OZChannelHistogramSample(v4);
  OZChannelHistogramSample::~OZChannelHistogramSample(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

void sub_1B2C835F0()
{
  JUMPOUT(0x1B2C835E0);
}

void OZChannelHistogram::~OZChannelHistogram(OZChannelHistogram *this)
{
  OZHistogramDelegate *v2;

  *(_QWORD *)this = &off_1E655C948;
  *((_QWORD *)this + 2) = &unk_1E655CC90;
  v2 = (OZHistogramDelegate *)*((_QWORD *)this + 609);
  if (v2)
    OZHistogramDelegate::notifyReferrers(v2);
  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3976));
  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3080));
  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 2184));
  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 1288));
  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 392));
  OZChannelEnum::~OZChannelEnum((OZChannelHistogram *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

{
  OZChannelHistogram::~OZChannelHistogram(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelHistogram::~OZChannelHistogram(OZChannelHistogram *this)
{
  OZChannelHistogram::~OZChannelHistogram((OZChannelHistogram *)((char *)this - 16));
}

{
  OZChannelHistogram::~OZChannelHistogram((OZChannelHistogram *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

OZChannelHistogram *OZChannelHistogram::clone(const OZChannelBase *this)
{
  OZChannelHistogram *v2;

  v2 = (OZChannelHistogram *)operator new();
  OZChannelHistogram::OZChannelHistogram(v2, this, 0);
  return v2;
}

void sub_1B2C83710(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40F1099EF6);
  _Unwind_Resume(a1);
}

void OZChannelHistogram::copy(OZChannelHistogram *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannelEnum::copy((PCString *)this + 17, (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannelHistogramSample::copy((OZChannelHistogram *)((char *)this + 392), (const OZChannelBase *)((char *)v4 + 392), a3);
  OZChannelHistogramSample::copy((OZChannelHistogram *)((char *)this + 1288), (const OZChannelBase *)((char *)v4 + 1288), a3);
  OZChannelHistogramSample::copy((OZChannelHistogram *)((char *)this + 2184), (const OZChannelBase *)((char *)v4 + 2184), a3);
  OZChannelHistogramSample::copy((OZChannelHistogram *)((char *)this + 3080), (const OZChannelBase *)((char *)v4 + 3080), a3);
  OZChannelHistogramSample::copy((OZChannelHistogram *)((char *)this + 3976), (const OZChannelBase *)((char *)v4 + 3976), a3);
}

uint64_t OZChannelHistogram::getBlackIn(OZChannelHistogram *this, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = (uint64_t)this + 528;
      break;
    case 1:
      result = (uint64_t)this + 1424;
      break;
    case 2:
      result = (uint64_t)this + 2320;
      break;
    case 3:
      result = (uint64_t)this + 3216;
      break;
    case 4:
      result = (uint64_t)this + 4112;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t OZChannelHistogram::getBlackOut(OZChannelHistogram *this, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = (uint64_t)this + 680;
      break;
    case 1:
      result = (uint64_t)this + 1576;
      break;
    case 2:
      result = (uint64_t)this + 2472;
      break;
    case 3:
      result = (uint64_t)this + 3368;
      break;
    case 4:
      result = (uint64_t)this + 4264;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t OZChannelHistogram::getWhiteIn(OZChannelHistogram *this, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = (uint64_t)this + 832;
      break;
    case 1:
      result = (uint64_t)this + 1728;
      break;
    case 2:
      result = (uint64_t)this + 2624;
      break;
    case 3:
      result = (uint64_t)this + 3520;
      break;
    case 4:
      result = (uint64_t)this + 4416;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t OZChannelHistogram::getWhiteOut(OZChannelHistogram *this, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = (uint64_t)this + 984;
      break;
    case 1:
      result = (uint64_t)this + 1880;
      break;
    case 2:
      result = (uint64_t)this + 2776;
      break;
    case 3:
      result = (uint64_t)this + 3672;
      break;
    case 4:
      result = (uint64_t)this + 4568;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t OZChannelHistogram::getGamma(OZChannelHistogram *this, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = (uint64_t)this + 1136;
      break;
    case 1:
      result = (uint64_t)this + 2032;
      break;
    case 2:
      result = (uint64_t)this + 2928;
      break;
    case 3:
      result = (uint64_t)this + 3824;
      break;
    case 4:
      result = (uint64_t)this + 4720;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void OZChannelHistogram::getBlackInValue(OZChannelHistogram *this, int a2, const CMTime *a3, double a4)
{
  OZChannel *v4;

  switch(a2)
  {
    case 0:
      v4 = (OZChannel *)((char *)this + 528);
      goto LABEL_7;
    case 1:
      v4 = (OZChannel *)((char *)this + 1424);
      goto LABEL_7;
    case 2:
      v4 = (OZChannel *)((char *)this + 2320);
      goto LABEL_7;
    case 3:
      v4 = (OZChannel *)((char *)this + 3216);
      goto LABEL_7;
    case 4:
      v4 = (OZChannel *)((char *)this + 4112);
LABEL_7:
      OZChannel::getValueAsDouble(v4, a3, a4);
      break;
    default:
      return;
  }
}

void OZChannelHistogram::getBlackOutValue(OZChannelHistogram *this, int a2, const CMTime *a3, double a4)
{
  OZChannel *v4;

  switch(a2)
  {
    case 0:
      v4 = (OZChannel *)((char *)this + 680);
      goto LABEL_7;
    case 1:
      v4 = (OZChannel *)((char *)this + 1576);
      goto LABEL_7;
    case 2:
      v4 = (OZChannel *)((char *)this + 2472);
      goto LABEL_7;
    case 3:
      v4 = (OZChannel *)((char *)this + 3368);
      goto LABEL_7;
    case 4:
      v4 = (OZChannel *)((char *)this + 4264);
LABEL_7:
      OZChannel::getValueAsDouble(v4, a3, a4);
      break;
    default:
      return;
  }
}

void OZChannelHistogram::getWhiteInValue(OZChannelHistogram *this, int a2, const CMTime *a3, double a4)
{
  OZChannel *v4;

  switch(a2)
  {
    case 0:
      v4 = (OZChannel *)((char *)this + 832);
      goto LABEL_7;
    case 1:
      v4 = (OZChannel *)((char *)this + 1728);
      goto LABEL_7;
    case 2:
      v4 = (OZChannel *)((char *)this + 2624);
      goto LABEL_7;
    case 3:
      v4 = (OZChannel *)((char *)this + 3520);
      goto LABEL_7;
    case 4:
      v4 = (OZChannel *)((char *)this + 4416);
LABEL_7:
      OZChannel::getValueAsDouble(v4, a3, a4);
      break;
    default:
      return;
  }
}

void OZChannelHistogram::getWhiteOutValue(OZChannelHistogram *this, int a2, const CMTime *a3, double a4)
{
  OZChannel *v4;

  switch(a2)
  {
    case 0:
      v4 = (OZChannel *)((char *)this + 984);
      goto LABEL_7;
    case 1:
      v4 = (OZChannel *)((char *)this + 1880);
      goto LABEL_7;
    case 2:
      v4 = (OZChannel *)((char *)this + 2776);
      goto LABEL_7;
    case 3:
      v4 = (OZChannel *)((char *)this + 3672);
      goto LABEL_7;
    case 4:
      v4 = (OZChannel *)((char *)this + 4568);
LABEL_7:
      OZChannel::getValueAsDouble(v4, a3, a4);
      break;
    default:
      return;
  }
}

void OZChannelHistogram::getGammaValue(OZChannelHistogram *this, int a2, const CMTime *a3, double a4)
{
  OZChannel *v4;

  switch(a2)
  {
    case 0:
      v4 = (OZChannel *)((char *)this + 1136);
      goto LABEL_7;
    case 1:
      v4 = (OZChannel *)((char *)this + 2032);
      goto LABEL_7;
    case 2:
      v4 = (OZChannel *)((char *)this + 2928);
      goto LABEL_7;
    case 3:
      v4 = (OZChannel *)((char *)this + 3824);
      goto LABEL_7;
    case 4:
      v4 = (OZChannel *)((char *)this + 4720);
LABEL_7:
      OZChannel::getValueAsDouble(v4, a3, a4);
      break;
    default:
      return;
  }
}

const __CFString *OZChannelHistogram::getObjCWrapperName(OZChannelHistogram *this)
{
  return CFSTR("CHChannelHistogram");
}

void OZChannelHistogramSample::~OZChannelHistogramSample(OZChannelHistogramSample *this)
{
  *(_QWORD *)this = &off_1E655CD00;
  *((_QWORD *)this + 2) = &unk_1E655D048;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 744));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 592));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

{
  OZChannelHistogramSample::~OZChannelHistogramSample(this);
  JUMPOUT(0x1B5E29170);
}

void OZChannelHistogramSample::OZChannelHistogramSample(OZChannelHistogramSample *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  TXParagraphStyleFolder_Factory *v19;
  OZFactoryBase *v20;
  TXParagraphStyleFolder_Factory *v21;
  OZFactoryBase *v22;
  PCString v23;

  Instance = (OZFactory *)OZChannelHistogramSample_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(_QWORD *)this = &off_1E655CD00;
  *((_QWORD *)this + 2) = &unk_1E655D048;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v23, CFSTR("Channel Histogram Black In Label"));
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 136), 0.0, &v23, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v23);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v23, CFSTR("Channel Histogram Black Out Label"));
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 288), 0.0, &v23, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v23);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v23, CFSTR("Channel Histogram White In Label"));
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 440), 1.0, &v23, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v23);
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v23, CFSTR("Channel Histogram White Out Label"));
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 592), 1.0, &v23, (OZChannelFolder *)this, 4u, 0, 0, 0);
  PCString::~PCString(&v23);
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v23, CFSTR("Channel Histogram Gamma Label"));
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 744), 1.0, &v23, (OZChannelFolder *)this, 5u, 0, 0, 0);
  PCString::~PCString(&v23);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 592), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 744), 5.0);
}

void sub_1B2C83E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannel *v13;
  OZChannel *v14;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelHistogramSample::OZChannelHistogramSample(OZChannelHistogramSample *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  TXParagraphStyleFolder_Factory *v6;
  OZFactoryBase *v7;
  TXParagraphStyleFolder_Factory *v8;
  OZFactoryBase *v9;
  TXParagraphStyleFolder_Factory *v10;
  OZFactoryBase *v11;
  TXParagraphStyleFolder_Factory *v12;
  OZFactoryBase *v13;
  TXParagraphStyleFolder_Factory *v14;
  OZFactoryBase *v15;
  PCString v16;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_1E655CD00;
  *((_QWORD *)v6 + 2) = &unk_1E655D048;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v16, CFSTR("Channel Histogram Black In Label"));
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 136), 0.0, &v16, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v16);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v16, CFSTR("Channel Histogram Black Out Label"));
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 288), 0.0, &v16, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v16);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v16, CFSTR("Channel Histogram White In Label"));
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 440), 1.0, &v16, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v16);
  TXParagraphStyleFolder_Factory::createInstance(v12, v13);
  PCURL::PCURL((PCURL *)&v16, CFSTR("Channel Histogram White Out Label"));
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 592), 1.0, &v16, (OZChannelFolder *)this, 4u, 0, 0, 0);
  PCString::~PCString(&v16);
  TXParagraphStyleFolder_Factory::createInstance(v14, v15);
  PCURL::PCURL((PCURL *)&v16, CFSTR("Channel Histogram Gamma Label"));
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 744), 1.0, &v16, (OZChannelFolder *)this, 5u, 0, 0, 0);
  PCString::~PCString(&v16);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 592), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 744), 5.0);
}

void sub_1B2C840D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannel *v13;
  OZChannel *v14;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelHistogramSample::OZChannelHistogramSample(OZChannelHistogramSample *this, const OZChannelHistogramSample *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E655CD00;
  *(_QWORD *)(v5 + 16) = &unk_1E655D048;
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((_QWORD *)this + 17) = &off_1E6551358;
  *((_QWORD *)this + 19) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((_QWORD *)this + 36) = &off_1E6551358;
  *((_QWORD *)this + 38) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((_QWORD *)this + 55) = &off_1E6551358;
  *((_QWORD *)this + 57) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)a2 + 592), (OZChannelFolder *)this);
  *((_QWORD *)this + 74) = &off_1E6551358;
  *((_QWORD *)this + 76) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 744), (const OZChannelBase *)((char *)a2 + 744), (OZChannelFolder *)this);
  *((_QWORD *)this + 93) = &off_1E6551358;
  *((_QWORD *)this + 95) = &unk_1E65516B8;
}

void sub_1B2C84298(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannel *v2;
  OZChannel *v3;
  OZChannel *v4;
  OZChannel *v5;

  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

OZChannelHistogramSample *OZChannelHistogramSample::clone(OZChannelHistogramSample *this)
{
  OZChannelHistogramSample *v2;

  v2 = (OZChannelHistogramSample *)operator new();
  OZChannelHistogramSample::OZChannelHistogramSample(v2, this, 0);
  return v2;
}

void sub_1B2C84338(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40933A2D21);
  _Unwind_Resume(a1);
}

void OZChannelHistogramSample::copy(OZChannelHistogramSample *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
  OZChannel::copy((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)v4 + 592), a3);
  OZChannel::copy((OZChannel *)((char *)this + 744), (const OZChannelBase *)((char *)v4 + 744), a3);
}

const __CFString *OZChannelHistogramSample::getObjCWrapperName(OZChannelHistogramSample *this)
{
  return CFSTR("CHChannelHistogramSample");
}

void `non-virtual thunk to'OZChannelHistogramSample::~OZChannelHistogramSample(OZChannelHistogramSample *this)
{
  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogramSample *)((char *)this - 16));
}

{
  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogramSample *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void sub_1B2C84528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40C173384DLL);
  _Unwind_Resume(a1);
}

void sub_1B2C848F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void sub_1B2C84C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C40F1099EF6);
  _Unwind_Resume(a1);
}

void OZChannelInfo::OZChannelInfo(OZChannelInfo *this)
{
  *(_QWORD *)this = &off_1E655D0B8;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 8) = CFSTR("PISliderTransformer");
  *((_BYTE *)this + 72) = 1;
}

void OZChannelInfo::OZChannelInfo(OZChannelInfo *this, double a2, double a3, double a4, double a5, double a6, const char *a7)
{
  PCString *v14;

  *(_QWORD *)this = &off_1E655D0B8;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *((double *)this + 1) = a3;
  *((double *)this + 2) = a2;
  *((double *)this + 3) = a5;
  *((double *)this + 4) = a4;
  *((double *)this + 5) = a6;
  *((_QWORD *)this + 6) = 0;
  PCString::set(v14, a7);
  *((_QWORD *)this + 8) = CFSTR("PISliderTransformer");
  *((_BYTE *)this + 72) = 1;
}

void sub_1B2C85218(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZChannelInfo::OZChannelInfo(OZChannelInfo *this, double a2, double a3, double a4, double a5, double a6, const PCString *a7)
{
  PCString *v14;

  *(_QWORD *)this = &off_1E655D0B8;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *((double *)this + 1) = a3;
  *((double *)this + 2) = a2;
  *((double *)this + 3) = a5;
  *((double *)this + 4) = a4;
  *((double *)this + 5) = a6;
  *((_QWORD *)this + 6) = 0;
  PCString::set(v14, a7);
  *((_QWORD *)this + 8) = CFSTR("PISliderTransformer");
  *((_BYTE *)this + 72) = 1;
}

void sub_1B2C852C8(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZChannelInfo::OZChannelInfo(OZChannelInfo *this, const OZChannelInfo *a2)
{
  PCString *v4;
  const void *v5;

  *(_QWORD *)this = &off_1E655D0B8;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  PCString::set(v4, (const PCString *)a2 + 7);
  v5 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)this + 8) = v5;
  if (v5)
    CFRetain(v5);
  *((_BYTE *)this + 72) = 0;
}

void sub_1B2C85354(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZChannelInfo::~OZChannelInfo(OZChannelInfo *this)
{
  const void *v2;

  *(_QWORD *)this = &off_1E655D0B8;
  v2 = (const void *)*((_QWORD *)this + 8);
  if (v2)
    CFRelease(v2);
  PCString::~PCString((PCString *)this + 7);
}

{
  OZChannelInfo::~OZChannelInfo(this);
  JUMPOUT(0x1B5E29170);
}

void OZChannelInfo::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  PCString::set((PCString *)(a1 + 56), (const PCString *)(a2 + 56));
  OZChannelInfo::setSliderTransformerName((OZChannelInfo *)a1, *(CFTypeRef *)(a2 + 64));
  *(_BYTE *)(a1 + 72) = 0;
}

void OZChannelInfo::setSliderTransformerName(OZChannelInfo *this, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = (CFTypeRef)*((_QWORD *)this + 8);
  if (v3 != cf)
  {
    if (v3)
      CFRelease(v3);
    *((_QWORD *)this + 8) = cf;
    if (cf)
      CFRetain(cf);
  }
}

BOOL OZChannelInfo::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32)
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48)
      && !PCString::compare((PCString *)(a1 + 56), (const PCString *)(a2 + 56))
      && CFStringCompare(*(CFStringRef *)(a1 + 64), *(CFStringRef *)(a2 + 64), 0) == kCFCompareEqualTo;
}

void OZChannelLevels::OZChannelLevels(OZChannelLevels *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  PCString v19;

  Instance = (OZFactory *)OZChannelLevels_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(_QWORD *)this = &off_1E655D0E8;
  *((_QWORD *)this + 2) = &unk_1E655D430;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Levels Black Label"));
  OZChannelDouble::OZChannelDouble((OZChannelLevels *)((char *)this + 136), 0.0, &v19, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Levels White Label"));
  OZChannelDouble::OZChannelDouble((OZChannelLevels *)((char *)this + 288), 1.0, &v19, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Levels Gamma Label"));
  OZChannelDouble::OZChannelDouble((OZChannelLevels *)((char *)this + 440), 1.0, &v19, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v19);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 5.0);
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
}

void sub_1B2C856C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;
  OZChannel *v12;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelLevels::OZChannelLevels(OZChannelLevels *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  TXParagraphStyleFolder_Factory *v6;
  OZFactoryBase *v7;
  TXParagraphStyleFolder_Factory *v8;
  OZFactoryBase *v9;
  TXParagraphStyleFolder_Factory *v10;
  OZFactoryBase *v11;
  PCString v12;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_1E655D0E8;
  *((_QWORD *)v6 + 2) = &unk_1E655D430;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Levels Black Label"));
  OZChannelDouble::OZChannelDouble((OZChannelLevels *)((char *)this + 136), 0.0, &v12, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v12);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Levels White Label"));
  OZChannelDouble::OZChannelDouble((OZChannelLevels *)((char *)this + 288), 1.0, &v12, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v12);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Levels Gamma Label"));
  OZChannelDouble::OZChannelDouble((OZChannelLevels *)((char *)this + 440), 1.0, &v12, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v12);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 5.0);
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
}

void sub_1B2C858A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;
  OZChannel *v12;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelLevels::OZChannelLevels(OZChannelLevels *this, const OZChannelLevels *a2, OZChannelFolder *a3)
{
  uint64_t v5;
  OZChannel *v6;

  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E655D0E8;
  *(_QWORD *)(v5 + 16) = &unk_1E655D430;
  v6 = (OZChannel *)(v5 + 136);
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((_QWORD *)this + 17) = &off_1E6551358;
  *((_QWORD *)this + 19) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((_QWORD *)this + 36) = &off_1E6551358;
  *((_QWORD *)this + 38) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((_QWORD *)this + 55) = &off_1E6551358;
  *((_QWORD *)this + 57) = &unk_1E65516B8;
  OZChannel::setSliderMax(v6, 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 5.0);
}

void sub_1B2C85A04(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannel *v2;
  OZChannel *v3;

  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

OZChannelLevels *OZChannelLevels::clone(OZChannelLevels *this)
{
  OZChannelLevels *v2;

  v2 = (OZChannelLevels *)operator new();
  OZChannelLevels::OZChannelLevels(v2, this, 0);
  return v2;
}

void sub_1B2C85A94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void OZChannelLevels::copy(OZChannelLevels *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
}

uint64_t OZChannelLevels::getWhite(OZChannelLevels *this)
{
  return (uint64_t)this + 288;
}

uint64_t OZChannelLevels::getGamma(OZChannelLevels *this)
{
  return (uint64_t)this + 440;
}

void OZChannelLevels::getBlackValue(OZChannelLevels *this, const CMTime *a2, double a3)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, a3);
}

void OZChannelLevels::getWhiteValue(OZChannelLevels *this, const CMTime *a2, double a3)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, a3);
}

void OZChannelLevels::getGammaValue(OZChannelLevels *this, const CMTime *a2, double a3)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 440), a2, a3);
}

uint64_t OZChannelLevels::setBlackValue(OZChannelLevels *this, const CMTime *a2, double a3, char a4)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 136), a2, a3, a4);
}

uint64_t OZChannelLevels::setWhiteValue(OZChannelLevels *this, const CMTime *a2, double a3, char a4)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 288), a2, a3, a4);
}

uint64_t OZChannelLevels::setGammaValue(OZChannelLevels *this, const CMTime *a2, double a3, char a4)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 440), a2, a3, a4);
}

const __CFString *OZChannelLevels::getObjCWrapperName(OZChannelLevels *this)
{
  return CFSTR("CHChannelLevels");
}

void OZChannelLevels::~OZChannelLevels(OZChannelLevels *this)
{
  OZChannelLevels::~OZChannelLevels(this);
  JUMPOUT(0x1B5E29170);
}

{
  *(_QWORD *)this = &off_1E655D0E8;
  *((_QWORD *)this + 2) = &unk_1E655D430;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

void `non-virtual thunk to'OZChannelLevels::~OZChannelLevels(OZChannelLevels *this)
{
  OZChannelLevels::~OZChannelLevels((OZChannelLevels *)((char *)this - 16));
}

{
  OZChannelLevels::~OZChannelLevels((OZChannelLevels *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChannelObjectRootBase::OZChannelObjectRootBase(OZChannelObjectRootBase *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, a6, 0);
  *(_QWORD *)v6 = &off_1E655D4A0;
  *(_QWORD *)(v6 + 16) = &unk_1E655D828;
  v7 = MEMORY[0x1E0CA2E68];
  v8 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)(v6 + 152) = *MEMORY[0x1E0CA2E68];
  v9 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v6 + 168) = v9;
  *(_OWORD *)(v6 + 176) = v8;
  *(_QWORD *)(v6 + 192) = v9;
  *(_OWORD *)(v6 + 128) = v8;
  *(_QWORD *)(v6 + 144) = v9;
  *(_QWORD *)(v6 + 56) |= 0x2040uLL;
  *(_WORD *)(v6 + 200) = 256;
}

void OZChannelObjectRootBase::OZChannelObjectRootBase(OZChannelObjectRootBase *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  Instance = (OZFactory *)OZChannelObjectRootBase_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(_QWORD *)this = &off_1E655D4A0;
  *((_QWORD *)this + 2) = &unk_1E655D828;
  v11 = MEMORY[0x1E0CA2E68];
  v12 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 152) = *MEMORY[0x1E0CA2E68];
  v13 = *(_QWORD *)(v11 + 16);
  *((_QWORD *)this + 21) = v13;
  *((_OWORD *)this + 11) = v12;
  *((_QWORD *)this + 24) = v13;
  *((_OWORD *)this + 8) = v12;
  *((_QWORD *)this + 18) = v13;
  *((_QWORD *)this + 7) |= 0x2040uLL;
  *((_WORD *)this + 100) = 256;
}

void OZChannelObjectRootBase::OZChannelObjectRootBase(OZChannelObjectRootBase *this, const OZChannelObjectRootBase *a2, OZChannelFolder *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v4 = &off_1E655D4A0;
  *(_QWORD *)(v4 + 16) = &unk_1E655D828;
  v5 = MEMORY[0x1E0CA2E68];
  v6 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)(v4 + 152) = *MEMORY[0x1E0CA2E68];
  v7 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v4 + 168) = v7;
  *(_OWORD *)(v4 + 176) = v6;
  *(_QWORD *)(v4 + 192) = v7;
  *(_QWORD *)(v4 + 56) |= 0x2040uLL;
  v8 = *((_OWORD *)a2 + 8);
  *(_QWORD *)(v4 + 144) = *((_QWORD *)a2 + 18);
  *(_OWORD *)(v4 + 128) = v8;
  if ((const OZChannelObjectRootBase *)v4 != a2)
  {
    v9 = *(_OWORD *)((char *)a2 + 152);
    *(_QWORD *)(v4 + 168) = *((_QWORD *)a2 + 21);
    *(_OWORD *)(v4 + 152) = v9;
    v10 = *((_OWORD *)a2 + 11);
    *(_QWORD *)(v4 + 192) = *((_QWORD *)a2 + 24);
    *(_OWORD *)(v4 + 176) = v10;
  }
  *(_BYTE *)(v4 + 201) = *((_BYTE *)a2 + 201);
  *(_BYTE *)(v4 + 200) = 0;
}

void OZChannelObjectRootBase::OZChannelObjectRootBase(OZChannelObjectRootBase *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(_QWORD *)v4 = &off_1E655D4A0;
  *(_QWORD *)(v4 + 16) = &unk_1E655D828;
  v5 = MEMORY[0x1E0CA2E68];
  v6 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)(v4 + 152) = *MEMORY[0x1E0CA2E68];
  v7 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v4 + 168) = v7;
  *(_OWORD *)(v4 + 176) = v6;
  *(_QWORD *)(v4 + 192) = v7;
  *(_OWORD *)(v4 + 128) = v6;
  *(_QWORD *)(v4 + 144) = v7;
  *(_QWORD *)(v4 + 56) |= 0x2040uLL;
  *(_WORD *)(v4 + 200) = 256;
}

void `non-virtual thunk to'OZChannelObjectRootBase::~OZChannelObjectRootBase(OZChannelObjectRootBase *this)
{
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
}

{
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChannelObjectRootBase::~OZChannelObjectRootBase(OZChannelFolder *this)
{
  OZChannelFolder::~OZChannelFolder(this);
  JUMPOUT(0x1B5E29170);
}

OZChannelObjectRootBase *OZChannelObjectRootBase::clone(OZChannelObjectRootBase *this)
{
  OZChannelObjectRootBase *v2;

  v2 = (OZChannelObjectRootBase *)operator new();
  OZChannelObjectRootBase::OZChannelObjectRootBase(v2, this, 0);
  return v2;
}

void sub_1B2C85F10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C173384DLL);
  _Unwind_Resume(a1);
}

void OZChannelObjectRootBase::assign(OZChannelObjectRootBase *this, const OZChannelBase *a2)
{
  PCString *v4;
  PCString *var5;
  PCString *v6;
  PCString *v7;
  PCString *p_var4;

  OZChannelFolder::assign((OZChannelFolder *)this, a2);
  PCString::set((PCString *)this + 4, &a2->var4);
  v4 = (PCString *)*((_QWORD *)this + 5);
  if (v4)
  {
    if (a2->var5)
      var5 = a2->var5;
    else
      var5 = &a2->var4;
    PCString::set(v4, var5);
  }
  else
  {
    v6 = (PCString *)operator new();
    v7 = v6;
    if (a2->var5)
      p_var4 = a2->var5;
    else
      p_var4 = &a2->var4;
    PCString::PCString(v6, p_var4);
    *((_QWORD *)this + 5) = v7;
  }
}

void sub_1B2C85FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

const OZChannelBase *OZChannelObjectRootBase::compare(OZChannelObjectRootBase *this, const OZChannelBase *lpsrc)
{
  const OZChannelBase *result;
  const OZChannelBase *v4;
  CMTime v5;
  CMTime time1;

  if (!lpsrc)
    return 0;
  if (result)
  {
    v4 = result;
    result = (const OZChannelBase *)(OZChannelFolder::compare((OZChannelFolder *)this, result)
                                  && (time1 = *(CMTime *)((char *)this + 128),
                                      v5 = *(CMTime *)&v4[1].var2,
                                      !CMTimeCompare(&time1, &v5))
                                  && (time1 = *(CMTime *)((char *)this + 152),
                                      v5 = *(CMTime *)&v4[1].var5,
                                      !CMTimeCompare(&time1, &v5))
                                  && (time1 = *(CMTime *)((char *)this + 176),
                                      v5 = *(CMTime *)&v4[1].var8,
                                      !CMTimeCompare(&time1, &v5)));
  }
  return result;
}

void OZChannelObjectRootBase::copy(OZChannelObjectRootBase *this, const OZChannelBase *a2)
{
  OZChannelObjectRootBase *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  OZChannelFolder::copy((OZChannelFolder *)this, a2);
  if (a2)
  {
    if (v4)
    {
      v5 = *((_OWORD *)v4 + 8);
      *((_QWORD *)this + 18) = *((_QWORD *)v4 + 18);
      *((_OWORD *)this + 8) = v5;
      if (v4 != this)
      {
        v6 = *(_OWORD *)((char *)v4 + 152);
        *((_QWORD *)this + 21) = *((_QWORD *)v4 + 21);
        *(_OWORD *)((char *)this + 152) = v6;
        v7 = *((_OWORD *)v4 + 11);
        *((_QWORD *)this + 24) = *((_QWORD *)v4 + 24);
        *((_OWORD *)this + 11) = v7;
      }
      *((_BYTE *)this + 201) = *((_BYTE *)v4 + 201);
    }
  }
}

__n128 OZChannelObjectRootBase::getTimeOffset@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[8];
  *a2 = result;
  a2[1].n128_u64[0] = this[9].n128_u64[0];
  return result;
}

__n128 OZChannelObjectRootBase::setTimeOffset(__n128 *this, const CMTime *a2, char a3)
{
  __n128 result;

  if ((a3 & 1) == 0)
    (*(void (**)(__n128 *, uint64_t))(this->n128_u64[0] + 464))(this, 1);
  result = *(__n128 *)&a2->value;
  this[9].n128_u64[0] = a2->epoch;
  this[8] = result;
  return result;
}

double OZChannelObjectRootBase::globalToLocalTime@<D0>(OZChannelObjectRootBase *this@<X0>, OZChannelBase *a2@<X1>, uint64_t a3@<X8>)
{
  return OZChannelBase::globalToLocalTime(a2, (const CMTime *)((char *)this + 128), a3);
}

double OZChannelObjectRootBase::localToGlobalTime@<D0>(OZChannelObjectRootBase *this@<X0>, OZChannelBase *a2@<X1>, uint64_t a3@<X8>)
{
  return OZChannelBase::localToGlobalTime(a2, (const CMTime *)((char *)this + 128), a3);
}

uint64_t OZChannelObjectRootBase::setTimeExtent(OZChannelObjectRootBase *this, const PCTimeRange *a2, char a3)
{
  uint64_t result;
  double Seconds;
  Float64 v7;
  __int128 v8;
  __int128 v9;
  CMTime v10;
  CMTime time;

  if ((a3 & 1) == 0)
    (*(void (**)(OZChannelObjectRootBase *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  result = (*(uint64_t (**)(OZChannelObjectRootBase *))(*(_QWORD *)this + 664))(this);
  if ((_DWORD)result)
  {
    time = *(CMTime *)((_BYTE *)a2 + 1);
    Seconds = CMTimeGetSeconds(&time);
    v10 = *(CMTime *)((char *)this + 176);
    v7 = CMTimeGetSeconds(&v10);
    result = (*(uint64_t (**)(OZChannelObjectRootBase *, double))(*(_QWORD *)this + 672))(this, Seconds / v7);
  }
  if ((OZChannelObjectRootBase *)((char *)this + 152) != a2)
  {
    v8 = *(_OWORD *)a2;
    *((_QWORD *)this + 21) = *((_QWORD *)a2 + 2);
    *(_OWORD *)((char *)this + 152) = v8;
    v9 = *(_OWORD *)((char *)a2 + 24);
    *((_QWORD *)this + 24) = *((_QWORD *)a2 + 5);
    *((_OWORD *)this + 11) = v9;
  }
  return result;
}

uint64_t OZChannelObjectRootBase::wasChannelModified(OZChannelObjectRootBase *this, OZChannelBase *a2, BOOL *a3)
{
  return 1;
}

uint64_t OZChannelObjectRootBase::shouldAddKeypointAt0(OZChannelObjectRootBase *this, const CMTime *a2)
{
  return 0;
}

uint64_t OZChannelObjectRootBase::isChannelAffectedByBehaviors(OZChannelObjectRootBase *this, const OZChannelBase *a2)
{
  return 0;
}

uint64_t OZChannelObjectRootBase::isChannelAffectedBySelectedBehaviors(OZChannelObjectRootBase *this, const OZChannelBase *a2)
{
  return 0;
}

uint64_t OZChannelObjectRootBase::isChannelRigged(OZChannelObjectRootBase *this, const OZChannelBase *a2)
{
  return 0;
}

BOOL OZChannelObjectRootBase::isObjectSelected(OZChannelBase *this)
{
  return OZChannelBase::testFlag(this, 1);
}

double OZChannelObjectRootBase::adjustToFrameDuration(OZChannelObjectRootBase *this, const CMTime *a2)
{
  double result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  OZChannelFolder::adjustToFrameDuration((OZChannelFolder *)this, a2);
  v5 = *(_OWORD *)((char *)this + 152);
  v6 = *((_QWORD *)this + 21);
  operator*((__int128 *)&a2->value, (uint64_t)&v5, (uint64_t)&v7);
  *(_OWORD *)((char *)this + 152) = v7;
  *((_QWORD *)this + 21) = v8;
  v5 = *((_OWORD *)this + 11);
  v6 = *((_QWORD *)this + 24);
  operator*((__int128 *)&a2->value, (uint64_t)&v5, (uint64_t)&v7);
  result = *(double *)&v7;
  *((_OWORD *)this + 11) = v7;
  *((_QWORD *)this + 24) = v8;
  return result;
}

OZChannelObjectRootBase *OZChannelObjectRootBase::markVaryingFolderFactoriesForSerialization(OZChannelObjectRootBase *this, OZChannelFolder *a2, PCSerializerWriteStream *a3)
{
  const void ***v3;
  const void **i;
  const void *v6;
  void *v7;
  void *v8;
  PCSerializerWriteStream *v9;
  BOOL v10;

  v3 = (const void ***)*((_QWORD *)this + 14);
  if (v3)
  {
    for (i = *v3; i != v3[1]; ++i)
    {
      v6 = *i;
      if (*i)
      {
        if (!v7
          || (this = (OZChannelObjectRootBase *)(*(uint64_t (**)(void *, OZChannelFolder *, _QWORD))(*(_QWORD *)v7 + 416))(v7, a2, 0), (v6 = *i) != 0))
        {
          if (this)
            v10 = v8 == 0;
          else
            v10 = 0;
          if (v10)
            this = (OZChannelObjectRootBase *)OZChannelObjectRootBase::markVaryingFolderFactoriesForSerialization(this, a2, v9);
        }
      }
    }
  }
  return this;
}

uint64_t OZChannelObjectRootBase::writeBody(OZChannelObjectRootBase *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  double v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  CMTime v16;
  _BYTE v17[24];
  CMTime v18;
  CMTime v19;
  CMTime v20;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelObjectRootBaseScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 150);
  if (*((_BYTE *)this + 201))
  {
    v20 = *(CMTime *)((char *)this + 152);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, CMTime *))(*(_QWORD *)a2 + 208))(a2, 1, &v20);
    (*(void (**)(CMTime *__return_ptr, OZChannelObjectRootBase *))(*(_QWORD *)this + 880))(&v16, this);
    v20 = *(CMTime *)((char *)this + 152);
    v19 = *(CMTime *)((char *)this + 176);
    PC_CMTimeSaferAdd(&v20, &v19, (uint64_t)&v18);
    v20 = v18;
    v19 = v16;
    v10 = PC_CMTimeSaferSubtract(&v20, &v19, (uint64_t)v17);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, _BYTE *, double))(*(_QWORD *)a2 + 208))(a2, 2, v17, v10);
  }
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 208))(a2, 3, (char *)this + 128);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v11 = *((_QWORD *)this + 7);
  v12 = (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2);
  v13 = 0x40000;
  if (!v12)
    v13 = -45069;
  v14 = v13 & v11;
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 152);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 72))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  if ((OZChannelBase::isEnabled((OZChannelBase *)this, 0, 0) & 1) == 0)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 153);
    (*(void (**)(PCSerializerWriteStream *, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  if (OZChannelBase::isLocked((OZChannelBase *)this, 0))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 154);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZChannelFolder::writeBody((OZChannelFolder *)this, a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'OZChannelObjectRootBase::writeBody(OZChannelObjectRootBase *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelObjectRootBase::writeBody((OZChannelObjectRootBase *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZChannelObjectRootBase::serializeSelfOnly(OZChannelObjectRootBase *this, PCSerializerWriteStream *a2)
{
  double v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  CMTime v10;
  _BYTE v11[24];
  CMTime v12;
  CMTime v13;
  CMTime v14;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelObjectRootBaseScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 150);
  if (*((_BYTE *)this + 201))
  {
    v14 = *(CMTime *)((char *)this + 152);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, CMTime *))(*(_QWORD *)a2 + 208))(a2, 1, &v14);
    (*(void (**)(CMTime *__return_ptr, OZChannelObjectRootBase *))(*(_QWORD *)this + 880))(&v10, this);
    v14 = *(CMTime *)((char *)this + 152);
    v13 = *(CMTime *)((char *)this + 176);
    PC_CMTimeSaferAdd(&v14, &v13, (uint64_t)&v12);
    v14 = v12;
    v13 = v10;
    v4 = PC_CMTimeSaferSubtract(&v14, &v13, (uint64_t)v11);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, _BYTE *, double))(*(_QWORD *)a2 + 208))(a2, 2, v11, v4);
  }
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 208))(a2, 3, (char *)this + 128);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v5 = *((unsigned int *)this + 30);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 151);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v6 = *((_DWORD *)this + 14);
  if ((*(unsigned int (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2))
    v7 = 0x40000;
  else
    v7 = -45069;
  v8 = v7 & v6;
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 152);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  if ((OZChannelBase::isEnabled((OZChannelBase *)this, 0, 0) & 1) == 0)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 153);
    (*(void (**)(PCSerializerWriteStream *, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  if (OZChannelBase::isLocked((OZChannelBase *)this, 0))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 154);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZChannelObjectRootBase::calcHashForStateSelfOnly(OZChannelObjectRootBase *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v5 = *((_QWORD *)this + 7) & 0x48000;
  (*(void (**)(PCSerializerWriteStream *, _QWORD, const CMTime *))(*(_QWORD *)a2 + 16))(a2, 0, a3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 72))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v6 = *((_DWORD *)this + 30) & 0xFFF8DFF0;
  (*(void (**)(PCSerializerWriteStream *, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(_QWORD *__return_ptr, OZChannelObjectRootBase *))(*(_QWORD *)this + 320))(v8, this);
  (*(void (**)(PCSerializerWriteStream *, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0);
  (*(void (**)(PCSerializerWriteStream *, _QWORD *))(*(_QWORD *)a2 + 112))(a2, v8);
  return (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t OZChannelObjectRootBase::parseBegin(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  OZChannelFolder::parseBegin(this, a2);
  *((_BYTE *)this + 200) = 0;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelObjectRootBaseScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelObjectRootBase::parseBegin(OZChannelObjectRootBase *this, PCSerializerReadStream *a2)
{
  OZChannelFolder::parseBegin((OZChannelFolder *)((char *)this - 16), a2);
  *((_BYTE *)this + 184) = 0;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelObjectRootBaseScope);
  return 1;
}

uint64_t OZChannelObjectRootBase::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  OZChannelFolder::parseEnd(this, a2);
  if (*((_BYTE *)this + 200))
    (*(void (**)(OZChannelFolder *, uint64_t, uint64_t))(*(_QWORD *)this + 96))(this, 1, 1);
  *((_BYTE *)this + 200) = 0;
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelObjectRootBase::parseEnd(OZChannelObjectRootBase *this, PCSerializerReadStream *a2)
{
  OZChannelObjectRootBase::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelObjectRootBase::parseElement(OZChannelObjectRootBase *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  unsigned int v9;
  int v10;
  CMTimeEpoch epoch;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  __int16 v16;
  unsigned int v17;
  Float64 v18;
  CMTime v19;
  __int128 v20;
  uint64_t v21;
  CMTime v22;
  CMTime v23;

  v18 = 0.0;
  v17 = 0;
  v16 = 0;
  OZChannelFolder::parseElement((OZChannelFolder *)this, a2, a3);
  switch(*((_DWORD *)a3 + 2))
  {
    case 0x96:
      v6 = *(_QWORD *)a3;
      if (*((_DWORD *)a2 + 26) < 5u)
      {
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(v6 + 144))(a3, 1, &v18))
        {
          v22 = *(CMTime *)((char *)a2 + 112);
          operator*(&v22, &v23, v18);
          *(CMTime *)((char *)this + 152) = v23;
        }
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(*(_QWORD *)a3 + 144))(a3, 2, &v18))
        {
          v14 = *(CMTime *)((char *)a2 + 112);
          operator*(&v14, &v15, v18);
          *(_OWORD *)&v13.value = *((_OWORD *)a2 + 7);
          v13.epoch = *((_QWORD *)a2 + 16);
          v23 = v15;
          v22 = *(CMTime *)((char *)this + 152);
          PC_CMTimeSaferSubtract(&v23, &v22, (uint64_t)&v19);
          v23 = v19;
          v22 = v13;
          PC_CMTimeSaferAdd(&v23, &v22, (uint64_t)&v20);
          *((_OWORD *)this + 11) = v20;
          *((_QWORD *)this + 24) = v21;
        }
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(*(_QWORD *)a3 + 144))(a3, 3, &v18))
        {
          v22 = *(CMTime *)((char *)a2 + 112);
          operator*(&v22, &v23, v18);
          *((_OWORD *)this + 8) = *(_OWORD *)&v23.value;
          epoch = v23.epoch;
LABEL_32:
          *((_QWORD *)this + 18) = epoch;
        }
      }
      else
      {
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, CMTime *))(v6 + 168))(a3, 1, &v15))
          *(CMTime *)((char *)this + 152) = v15;
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, CMTime *))(*(_QWORD *)a3 + 168))(a3, 2, &v15))
        {
          if (*((_BYTE *)a2 + 144))
            v14 = *(CMTime *)((char *)a2 + 112);
          else
            (*(void (**)(CMTime *__return_ptr, OZChannelObjectRootBase *))(*(_QWORD *)this + 880))(&v14, this);
          v23 = v15;
          v22 = *(CMTime *)((char *)this + 152);
          PC_CMTimeSaferSubtract(&v23, &v22, (uint64_t)&v19);
          v23 = v19;
          v22 = v14;
          PC_CMTimeSaferAdd(&v23, &v22, (uint64_t)&v20);
          *((_OWORD *)this + 11) = v20;
          *((_QWORD *)this + 24) = v21;
        }
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, CMTime *))(*(_QWORD *)a3 + 168))(a3, 3, &v15))
        {
          *((_OWORD *)this + 8) = *(_OWORD *)&v15.value;
          epoch = v15.epoch;
          goto LABEL_32;
        }
      }
      return 1;
    case 0x97:
      if ((*(unsigned int (**)(PCStreamElement *, unsigned int *))(*(_QWORD *)a3 + 32))(a3, &v17))
        *((_DWORD *)this + 30) = v17;
      return 1;
    case 0x98:
      if ((*(unsigned int (**)(PCStreamElement *, unsigned int *))(*(_QWORD *)a3 + 32))(a3, &v17))
      {
        if (OZChannelBase::testFlag((OZChannelBase *)this, 0x8000))
          v7 = 0x8000;
        else
          v7 = 0;
        v17 = v17 & 0xFFFF7FFF | v7;
        v8 = OZChannelBase::testFlag((OZChannelBase *)this, 4);
        v9 = v17 & 0xFFFFCFFB;
        if (v8)
          v10 = 12292;
        else
          v10 = 12288;
        v17 = v10 | v9;
        OZChannelBase::setFlags((OZChannelBase *)this, v10 | v9);
      }
      return 1;
    case 0x99:
      if ((*(unsigned int (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 72))(a3, (char *)&v16 + 1))
        (*(void (**)(OZChannelObjectRootBase *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, HIBYTE(v16), 0);
      return 1;
    case 0x9A:
      if ((*(unsigned int (**)(PCStreamElement *, __int16 *))(*(_QWORD *)a3 + 72))(a3, &v16))
        *((_BYTE *)this + 200) = v16;
      return 1;
    default:
      return 1;
  }
}

uint64_t `non-virtual thunk to'OZChannelObjectRootBase::parseElement(OZChannelObjectRootBase *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelObjectRootBase::parseElement((OZChannelObjectRootBase *)((char *)this - 16), a2, a3);
  return 1;
}

const __CFString *OZChannelObjectRootBase::getObjCWrapperName(OZChannelObjectRootBase *this)
{
  return CFSTR("CHChannelObjectRootBase");
}

__n128 OZChannelObjectRootBase::getTimeExtent@<Q0>(OZChannelObjectRootBase *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 152);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 21);
  result = *((__n128 *)this + 11);
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 24);
  return result;
}

uint64_t OZChannelObjectRootBase::getTimeExtentForChannel(OZChannelObjectRootBase *this, const OZChannelBase *a2)
{
  return (*(uint64_t (**)(OZChannelObjectRootBase *))(*(_QWORD *)this + 712))(this);
}

__n128 OZChannelObjectRootBase::getCurrentTime@<Q0>(OZChannelObjectRootBase *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t Instance;
  __n128 result;

  Instance = OZCoreGlobals::getInstance(this);
  result = *(__n128 *)(Instance + 12);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)(Instance + 28);
  return result;
}

CMTime *OZChannelObjectRootBase::getFrameDuration@<X0>(CMTime *a1@<X8>)
{
  return CMTimeMake(a1, 1, 30);
}

void OZChannelDouble::OZChannelDouble(OZChannelDouble *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelDouble *v11;
  OZChannelDouble *OZChannelDoubleInfo;
  uint64_t v13;
  uint64_t v14;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)v11 = &off_1E6551358;
  *((_QWORD *)v11 + 2) = &unk_1E65516B8;
  OZChannelDoubleInfo = (OZChannelDouble *)OZChannelDouble::createOZChannelDoubleInfo(v11);
  if (a8)
  {
    v13 = *((_QWORD *)this + 17);
  }
  else
  {
    v13 = OZChannelDouble::_OZChannelDoubleInfo;
    *((_QWORD *)this + 17) = OZChannelDouble::_OZChannelDoubleInfo;
  }
  *((_QWORD *)this + 16) = v13;
  OZChannelDouble::createOZChannelDoubleImpl(OZChannelDoubleInfo);
  if (a7)
  {
    v14 = *((_QWORD *)this + 15);
  }
  else
  {
    v14 = OZChannelDouble::_OZChannelDoubleImpl;
    *((_QWORD *)this + 15) = OZChannelDouble::_OZChannelDoubleImpl;
  }
  *((_QWORD *)this + 14) = v14;
}

void sub_1B2C87048(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelDoubleOverRange::OZChannelDoubleOverRange(OZChannelDoubleOverRange *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;

  Instance = (OZFactory *)OZChannelDoubleOverRange_Factory::getInstance(this);
  OZChannelDouble::OZChannelDouble(this, Instance, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = &off_1E655D898;
  *((_QWORD *)this + 2) = &unk_1E655DC48;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((OZChannelDoubleOverRange *)((char *)this + 152), CFSTR("Channel Over Range Range Name"));
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  (*(void (**)(OZChannelDoubleOverRange *, _QWORD))(*(_QWORD *)this + 288))(this, 0);
  (*(void (**)(OZChannelDoubleOverRange *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2C87164(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelDoubleOverRange::OZChannelDoubleOverRange(OZChannelDoubleOverRange *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;

  OZChannelDouble::OZChannelDouble(this, a2, a3, a4, 0, 0);
  *(_QWORD *)v5 = &off_1E655D898;
  *((_QWORD *)v5 + 2) = &unk_1E655DC48;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((OZChannelDoubleOverRange *)((char *)this + 152), CFSTR("Channel Over Range Range Name"));
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  (*(void (**)(OZChannelDoubleOverRange *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2C87224(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelDoubleOverRange::OZChannelDoubleOverRange(OZChannelDoubleOverRange *this, const OZChannelDoubleOverRange *a2, OZChannelFolder *a3)
{
  PCString *v4;

  OZChannel::OZChannel((OZChannel *)this, (const OZChannelBase *)a2, a3);
  v4->var0 = (__CFString *)&off_1E655D898;
  v4[2].var0 = (__CFString *)&unk_1E655DC48;
  PCString::PCString(v4 + 19, (const PCString *)a2 + 19);
}

void sub_1B2C87294(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelDoubleOverRange::getValueOverRangeAsDouble(OZChannel *this, const CMTime *a2, Float64 a3)
{
  double Seconds;
  CMTime v6;
  CMTime v7;

  OZFigTimeForChannelSeconds(&v7, a3, 0x40000);
  v6 = *a2;
  Seconds = CMTimeGetSeconds(&v6);
  OZChannel::getValueAsDouble(this, &v7, Seconds);
}

uint64_t OZChannelDoubleOverRange::writeBody(OZChannelDoubleOverRange *this, PCSerializerWriteStream *a2, int a3)
{
  PCString v7;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelOverRangeScope);
  OZChannel::writeBody((OZChannel *)this, a2, a3);
  PCString::PCString(&v7, (const PCString *)this + 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 160);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v7);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v7);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2C873C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelDoubleOverRange::writeBody(OZChannelDoubleOverRange *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannelDoubleOverRange::writeBody((OZChannelDoubleOverRange *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelDoubleOverRange::parseBegin(OZChannel *this, PCSerializerReadStream *a2)
{
  OZChannel::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelOverRangeScope);
  OZChannel::deleteAllKeyframes(this, MEMORY[0x1E0CA2E68]);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelDoubleOverRange::parseBegin(OZChannelDoubleOverRange *this, PCSerializerReadStream *a2)
{
  OZChannelDoubleOverRange::parseBegin((OZChannel *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelDoubleOverRange::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u)
    OZChannel::linearTimeWarp(this, 1.0 / *((double *)a2 + 17), MEMORY[0x1E0CA2E68]);
  OZChannel::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelDoubleOverRange::parseEnd(OZChannelDoubleOverRange *this, PCSerializerReadStream *a2)
{
  OZChannelDoubleOverRange::parseEnd((OZChannel *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelDoubleOverRange::parseElement(OZChannel *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannel::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 160)
    PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&this[1]);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelDoubleOverRange::parseElement(OZChannelDoubleOverRange *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelDoubleOverRange::parseElement((OZChannel *)((char *)this - 16), a2, a3);
  return 1;
}

__n128 OZChannelDoubleOverRange::getTimeOffset@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)a1 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 + 16);
  return result;
}

__n128 OZChannelDoubleOverRange::globalToLocalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

__n128 OZChannelDoubleOverRange::localToGlobalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

uint64_t OZChannelDoubleOverRange::hasKeypointAt(OZChannelDoubleOverRange *this, Float64 a2)
{
  CMTime v4;

  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 568))(this, &v4, 0);
}

uint64_t OZChannelDoubleOverRange::allHaveKeypointsAt(OZChannelDoubleOverRange *this, Float64 a2)
{
  CMTime v4;

  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *))(*(_QWORD *)this + 576))(this, &v4);
}

uint64_t OZChannelDoubleOverRange::addKeypointAt(OZChannelDoubleOverRange *this, Float64 a2)
{
  CMTime v4;

  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *))(*(_QWORD *)this + 600))(this, &v4);
}

_QWORD *OZChannelDoubleOverRange::moveKeypointTo(OZChannelDoubleOverRange *this, Float64 a2, Float64 a3, uint64_t a4)
{
  _QWORD v8[3];
  CMTime v9;
  CMTime v10;

  OZFigTimeForChannelSeconds(&v10, a2, 0x40000);
  OZFigTimeForChannelSeconds(&v9, a3, 0x40000);
  return (*(_QWORD *(**)(_QWORD *__return_ptr, OZChannelDoubleOverRange *, CMTime *, CMTime *, uint64_t, _QWORD))(*(_QWORD *)this + 616))(v8, this, &v10, &v9, a4, 0);
}

uint64_t OZChannelDoubleOverRange::deleteKeypointAt(OZChannelDoubleOverRange *this, Float64 a2)
{
  CMTime v4;

  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *))(*(_QWORD *)this + 608))(this, &v4);
}

uint64_t OZChannelDoubleOverRange::previousKeypoint(OZChannelDoubleOverRange *this, double *a2)
{
  uint64_t v4;
  CMTime v6;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  if (a2)
  {
    OZFigTimeForChannelSeconds(&v7, *a2, 0x40000);
    v4 = (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 624))(this, &v7, 0);
    v6 = v7;
    *a2 = CMTimeGetSeconds(&v6);
  }
  else
  {
    v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    return (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 624))(this, &v7, 0);
  }
  return v4;
}

uint64_t OZChannelDoubleOverRange::nextKeypoint(OZChannelDoubleOverRange *this, double *a2)
{
  uint64_t v4;
  CMTime v6;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  if (a2)
  {
    OZFigTimeForChannelSeconds(&v7, *a2, 0x40000);
    v4 = (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 632))(this, &v7, 0);
    v6 = v7;
    *a2 = CMTimeGetSeconds(&v6);
  }
  else
  {
    v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    return (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 632))(this, &v7, 0);
  }
  return v4;
}

BOOL OZChannelDoubleOverRange::hasKeypointAt(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getKeyframe(this, a2) != 0;
}

BOOL OZChannelDoubleOverRange::allHaveKeypointsAt(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getKeyframe(this, a2) != 0;
}

uint64_t OZChannelDoubleOverRange::addKeypointAt(OZChannel *this, const CMTime *a2)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0)
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
  return OZChannel::setKeyframe(this, a2);
}

void *OZChannelDoubleOverRange::moveKeypointTo@<X0>(OZChannel *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  void *result;
  void *v13;

  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0)
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
  *(_OWORD *)&a6->value = *(_OWORD *)&a3->value;
  a6->epoch = a3->epoch;
  result = (void *)OZChannel::getKeyframe(this, a2);
  if (result)
  {
    v13 = result;
    (*((void (**)(OZChannel *, void *, CMTime *, uint64_t, uint64_t))this->var0 + 105))(this, result, a6, a5, a4);
    return (void *)OZChannel::getKeyframe(this, v13, a6, 0);
  }
  return result;
}

void *OZChannelDoubleOverRange::deleteKeypointAt(OZChannel *this, const CMTime *a2)
{
  void *result;

  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  result = (void *)OZChannel::getKeyframe(this, a2);
  if (result)
    return (void *)OZChannel::deleteKeyframe(this, result);
  return result;
}

double OZChannelDoubleOverRange::previousKeypoint(OZChannel *this, CMTime *a2)
{
  double result;
  double v4;
  CMTime v5;

  v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v4 = 0.0;
  if (OZChannel::getPreviousKeyframe(this, a2, &v5, &v4))
  {
    result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

double OZChannelDoubleOverRange::nextKeypoint(OZChannel *this, CMTime *a2)
{
  double result;
  double v4;
  CMTime v5;

  v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v4 = 0.0;
  if (OZChannel::getNextKeyframe(this, a2, &v5, &v4))
  {
    result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

uint64_t OZChannelDoubleOverRange::resetToDefault(OZChannel *this, char a2)
{
  CMTime v4;

  OZChannel::resetToDefault(this, a2);
  OZChannel::setKeyframe(this, MEMORY[0x1E0CA2E68]);
  CMTimeMake(&v4, 1, 1);
  return OZChannel::setKeyframe(this, &v4);
}

void OZChannelDoubleOverRange::getBakeParameters(OZChannelDoubleOverRange *this, const PCTimeRange *a2, double *a3, double *a4, double *a5)
{
  uint64_t v8;
  __int128 v9;
  CMTime v10;
  CMTime v11;
  CMTime time;
  CMTime v13;
  CMTime v14;
  CMTime v15;

  v8 = *(_QWORD *)this;
  v9 = *MEMORY[0x1E0CA2E68];
  v15.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v14.epoch = v15.epoch;
  v13.epoch = v15.epoch;
  *(_OWORD *)&v15.value = v9;
  *(_OWORD *)&v14.value = v9;
  *(_OWORD *)&v13.value = v9;
  (*(void (**)(OZChannelDoubleOverRange *, const PCTimeRange *, CMTime *, CMTime *, CMTime *))(v8 + 816))(this, a2, &v15, &v14, &v13);
  if (a3)
  {
    time = v15;
    *a3 = CMTimeGetSeconds(&time);
  }
  if (a4)
  {
    v11 = v14;
    *a4 = CMTimeGetSeconds(&v11);
  }
  if (a5)
  {
    v10 = v13;
    *a5 = CMTimeGetSeconds(&v10);
  }
}

double OZChannelDoubleOverRange::getBakeParameters(OZChannelDoubleOverRange *this, const PCTimeRange *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  __int128 v7;
  double result;
  CMTime v9;

  v7 = *MEMORY[0x1E0CA2E68];
  a3->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)&a3->value = v7;
  CMTimeMake(&v9, 1, 1);
  *a4 = v9;
  OZFigTimeForChannelSeconds(&v9, 0.0005, 0x40000);
  result = *(double *)&v9.value;
  *a5 = v9;
  return result;
}

const __CFString *OZChannelDoubleOverRange::getObjCWrapperName(OZChannelDoubleOverRange *this)
{
  return CFSTR("CHChannelDouble");
}

void OZChannelAngle::OZChannelAngle(OZChannelAngle *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelAngle *v11;
  OZChannelAngle *OZChannelAngleInfo;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, a7, a8);
  v11->var0 = (void **)&off_1E6551728;
  v11->var2 = (void **)&unk_1E6551A88;
  OZChannelAngleInfo = (OZChannelAngle *)OZChannelAngle::createOZChannelAngleInfo(v11);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelAngle::_OZChannelAngleInfo;
    this->var17 = (OZChannelInfo *)OZChannelAngle::_OZChannelAngleInfo;
  }
  this->var16 = var17;
  OZChannelAngle::createOZChannelAngleImpl(OZChannelAngleInfo);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelAngle::_OZChannelAngleImpl;
    this->var15 = (OZChannelImpl *)OZChannelAngle::_OZChannelAngleImpl;
  }
  this->var14 = var15;
}

void sub_1B2C87D44(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelAngleOverRange::OZChannelAngleOverRange(OZChannelAngleOverRange *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;

  Instance = (OZFactory *)OZChannelAngleOverRange_Factory::getInstance(this);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this, Instance, a2, a3, a4, a5, a6, a7);
  *(_QWORD *)this = &off_1E655DCA0;
  *((_QWORD *)this + 2) = &unk_1E655E050;
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((OZChannelAngleOverRange *)((char *)this + 152), CFSTR("Channel Over Range Range Name"));
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  (*(void (**)(OZChannelAngleOverRange *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2C87E34(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelAngleOverRange::OZChannelAngleOverRange(OZChannelAngleOverRange *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;

  Instance = (OZFactory *)OZChannelAngleOverRange_Factory::getInstance(this);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this, Instance, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = &off_1E655DCA0;
  *((_QWORD *)this + 2) = &unk_1E655E050;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((OZChannelAngleOverRange *)((char *)this + 152), CFSTR("Channel Over Range Range Name"));
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  (*(void (**)(OZChannelAngleOverRange *, _QWORD))(*(_QWORD *)this + 288))(this, 0);
  (*(void (**)(OZChannelAngleOverRange *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2C87F64(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelAngleOverRange::OZChannelAngleOverRange(OZChannelAngleOverRange *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;

  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this, a2, a3, a4, 0, 0);
  *(_QWORD *)v5 = &off_1E655DCA0;
  *((_QWORD *)v5 + 2) = &unk_1E655E050;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((OZChannelAngleOverRange *)((char *)this + 152), CFSTR("Channel Over Range Range Name"));
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  (*(void (**)(OZChannelAngleOverRange *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2C88024(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelAngleOverRange::OZChannelAngleOverRange(OZChannelAngleOverRange *this, const OZChannelAngleOverRange *a2, OZChannelFolder *a3)
{
  PCString *v4;

  OZChannel::OZChannel((OZChannel *)this, (const OZChannelBase *)a2, a3);
  v4->var0 = (__CFString *)&off_1E655DCA0;
  v4[2].var0 = (__CFString *)&unk_1E655E050;
  PCString::PCString(v4 + 19, (const PCString *)a2 + 19);
}

void sub_1B2C88094(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelAngleOverRange::setValueOverRange(OZChannel *this, Float64 a2, Float64 a3, double a4)
{
  CMTime v8;
  CMTime v9;

  OZFigTimeForChannelSeconds(&v8, a2, 0x40000);
  OZFigTimeForChannelSeconds(&v9, a3, 0x40000);
  return OZChannel::setKeyframe(this, &v9, a4, 1);
}

void OZChannelAngleOverRange::getValueOverRangeAsDouble(OZChannel *this, Float64 a2, Float64 a3)
{
  CMTime v5;

  OZFigTimeForChannelSeconds(&v5, a2, 0x40000);
  OZChannelDoubleOverRange::getValueOverRangeAsDouble(this, &v5, a3);
}

uint64_t OZChannelAngleOverRange::writeBody(OZChannelAngleOverRange *this, PCSerializerWriteStream *a2, int a3)
{
  PCString v7;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelOverRangeScope);
  OZChannel::writeBody((OZChannel *)this, a2, a3);
  PCString::PCString(&v7, (const PCString *)this + 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 160);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v7);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v7);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2C8821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelAngleOverRange::writeBody(OZChannelAngleOverRange *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannelAngleOverRange::writeBody((OZChannelAngleOverRange *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelAngleOverRange::parseBegin(OZChannel *this, PCSerializerReadStream *a2)
{
  OZChannel::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelOverRangeScope);
  OZChannel::deleteAllKeyframes(this, MEMORY[0x1E0CA2E68]);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelAngleOverRange::parseBegin(OZChannelAngleOverRange *this, PCSerializerReadStream *a2)
{
  OZChannelAngleOverRange::parseBegin((OZChannel *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelAngleOverRange::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u)
    OZChannel::linearTimeWarp(this, 1.0 / *((double *)a2 + 17), MEMORY[0x1E0CA2E68]);
  OZChannel::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelAngleOverRange::parseEnd(OZChannelAngleOverRange *this, PCSerializerReadStream *a2)
{
  OZChannelAngleOverRange::parseEnd((OZChannel *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelAngleOverRange::parseElement(OZChannel *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannel::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 160)
    PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&this[1]);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelAngleOverRange::parseElement(OZChannelAngleOverRange *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelAngleOverRange::parseElement((OZChannel *)((char *)this - 16), a2, a3);
  return 1;
}

__n128 OZChannelAngleOverRange::getTimeOffset@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)a1 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 + 16);
  return result;
}

__n128 OZChannelAngleOverRange::globalToLocalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

__n128 OZChannelAngleOverRange::localToGlobalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

uint64_t OZChannelAngleOverRange::hasKeypointAt(OZChannelAngleOverRange *this, Float64 a2)
{
  CMTime v4;

  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 568))(this, &v4, 0);
}

uint64_t OZChannelAngleOverRange::allHaveKeypointsAt(OZChannelAngleOverRange *this, Float64 a2)
{
  CMTime v4;

  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *))(*(_QWORD *)this + 576))(this, &v4);
}

uint64_t OZChannelAngleOverRange::addKeypointAt(OZChannelAngleOverRange *this, Float64 a2)
{
  CMTime v4;

  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *))(*(_QWORD *)this + 600))(this, &v4);
}

_QWORD *OZChannelAngleOverRange::moveKeypointTo(OZChannelAngleOverRange *this, Float64 a2, Float64 a3, uint64_t a4)
{
  _QWORD v8[3];
  CMTime v9;
  CMTime v10;

  OZFigTimeForChannelSeconds(&v10, a2, 0x40000);
  OZFigTimeForChannelSeconds(&v9, a3, 0x40000);
  return (*(_QWORD *(**)(_QWORD *__return_ptr, OZChannelAngleOverRange *, CMTime *, CMTime *, uint64_t, _QWORD))(*(_QWORD *)this + 616))(v8, this, &v10, &v9, a4, 0);
}

uint64_t OZChannelAngleOverRange::deleteKeypointAt(OZChannelAngleOverRange *this, Float64 a2)
{
  CMTime v4;

  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *))(*(_QWORD *)this + 608))(this, &v4);
}

uint64_t OZChannelAngleOverRange::previousKeypoint(OZChannelAngleOverRange *this, double *a2)
{
  uint64_t v4;
  CMTime v6;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  if (a2)
  {
    OZFigTimeForChannelSeconds(&v7, *a2, 0x40000);
    v4 = (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 624))(this, &v7, 0);
    v6 = v7;
    *a2 = CMTimeGetSeconds(&v6);
  }
  else
  {
    v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    return (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 624))(this, &v7, 0);
  }
  return v4;
}

uint64_t OZChannelAngleOverRange::nextKeypoint(OZChannelAngleOverRange *this, double *a2)
{
  uint64_t v4;
  CMTime v6;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  if (a2)
  {
    OZFigTimeForChannelSeconds(&v7, *a2, 0x40000);
    v4 = (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 632))(this, &v7, 0);
    v6 = v7;
    *a2 = CMTimeGetSeconds(&v6);
  }
  else
  {
    v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    return (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 632))(this, &v7, 0);
  }
  return v4;
}

BOOL OZChannelAngleOverRange::hasKeypointAt(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getKeyframe(this, a2) != 0;
}

BOOL OZChannelAngleOverRange::allHaveKeypointsAt(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getKeyframe(this, a2) != 0;
}

uint64_t OZChannelAngleOverRange::addKeypointAt(OZChannel *this, const CMTime *a2)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0)
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
  return OZChannel::setKeyframe(this, a2);
}

void *OZChannelAngleOverRange::moveKeypointTo@<X0>(OZChannel *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  void *result;
  void *v13;

  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0)
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
  *(_OWORD *)&a6->value = *(_OWORD *)&a3->value;
  a6->epoch = a3->epoch;
  result = (void *)OZChannel::getKeyframe(this, a2);
  if (result)
  {
    v13 = result;
    (*((void (**)(OZChannel *, void *, CMTime *, uint64_t, uint64_t))this->var0 + 105))(this, result, a6, a5, a4);
    return (void *)OZChannel::getKeyframe(this, v13, a6, 0);
  }
  return result;
}

void *OZChannelAngleOverRange::deleteKeypointAt(OZChannel *this, const CMTime *a2)
{
  void *result;

  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  result = (void *)OZChannel::getKeyframe(this, a2);
  if (result)
    return (void *)OZChannel::deleteKeyframe(this, result);
  return result;
}

double OZChannelAngleOverRange::previousKeypoint(OZChannel *this, CMTime *a2)
{
  double result;
  double v4;
  CMTime v5;

  v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v4 = 0.0;
  if (OZChannel::getPreviousKeyframe(this, a2, &v5, &v4))
  {
    result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

double OZChannelAngleOverRange::nextKeypoint(OZChannel *this, CMTime *a2)
{
  double result;
  double v4;
  CMTime v5;

  v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v4 = 0.0;
  if (OZChannel::getNextKeyframe(this, a2, &v5, &v4))
  {
    result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

uint64_t OZChannelAngleOverRange::resetToDefault(OZChannel *this, char a2)
{
  CMTime v4;

  OZChannel::resetToDefault(this, a2);
  OZChannel::setKeyframe(this, MEMORY[0x1E0CA2E68]);
  CMTimeMake(&v4, 1, 1);
  return OZChannel::setKeyframe(this, &v4);
}

void OZChannelAngleOverRange::getBakeParameters(OZChannelAngleOverRange *this, const PCTimeRange *a2, double *a3, double *a4, double *a5)
{
  uint64_t v8;
  __int128 v9;
  CMTime v10;
  CMTime v11;
  CMTime time;
  CMTime v13;
  CMTime v14;
  CMTime v15;

  v8 = *(_QWORD *)this;
  v9 = *MEMORY[0x1E0CA2E68];
  v15.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v14.epoch = v15.epoch;
  v13.epoch = v15.epoch;
  *(_OWORD *)&v15.value = v9;
  *(_OWORD *)&v14.value = v9;
  *(_OWORD *)&v13.value = v9;
  (*(void (**)(OZChannelAngleOverRange *, const PCTimeRange *, CMTime *, CMTime *, CMTime *))(v8 + 816))(this, a2, &v15, &v14, &v13);
  if (a3)
  {
    time = v15;
    *a3 = CMTimeGetSeconds(&time);
  }
  if (a4)
  {
    v11 = v14;
    *a4 = CMTimeGetSeconds(&v11);
  }
  if (a5)
  {
    v10 = v13;
    *a5 = CMTimeGetSeconds(&v10);
  }
}

double OZChannelAngleOverRange::getBakeParameters(OZChannelAngleOverRange *this, const PCTimeRange *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  __int128 v7;
  double result;
  CMTime v9;

  v7 = *MEMORY[0x1E0CA2E68];
  a3->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)&a3->value = v7;
  CMTimeMake(&v9, 1, 1);
  *a4 = v9;
  OZFigTimeForChannelSeconds(&v9, 0.0005, 0x40000);
  result = *(double *)&v9.value;
  *a5 = v9;
  return result;
}

const __CFString *OZChannelAngleOverRange::getObjCWrapperName(OZChannelAngleOverRange *this)
{
  return CFSTR("CHChannelAngle");
}

void OZChannelPercentOverRange::OZChannelPercentOverRange(OZChannelPercentOverRange *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;

  Instance = (OZFactory *)OZChannelPercentOverRange_Factory::getInstance(this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this, Instance, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = &off_1E655E0A8;
  *((_QWORD *)this + 2) = &unk_1E655E458;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((OZChannelPercentOverRange *)((char *)this + 152), CFSTR("Channel Over Range Range Name"));
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  (*(void (**)(OZChannelPercentOverRange *, _QWORD))(*(_QWORD *)this + 288))(this, 0);
  (*(void (**)(OZChannelPercentOverRange *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2C88C10(_Unwind_Exception *a1)
{
  OZChanObjectRef *v1;

  OZChanObjectRef::~OZChanObjectRef(v1);
  _Unwind_Resume(a1);
}

void OZChannelPercentOverRange::OZChannelPercentOverRange(OZChannelPercentOverRange *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;

  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this, a2, a3, a4, 0, 0);
  *(_QWORD *)v5 = &off_1E655E0A8;
  *((_QWORD *)v5 + 2) = &unk_1E655E458;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((OZChannelPercentOverRange *)((char *)this + 152), CFSTR("Channel Over Range Range Name"));
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  (*(void (**)(OZChannelPercentOverRange *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2C88CD0(_Unwind_Exception *a1)
{
  OZChanObjectRef *v1;

  OZChanObjectRef::~OZChanObjectRef(v1);
  _Unwind_Resume(a1);
}

void OZChannelPercentOverRange::OZChannelPercentOverRange(OZChannelPercentOverRange *this, const OZChannelPercentOverRange *a2, OZChannelFolder *a3)
{
  PCString *v4;

  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this, (const OZChannelBase *)a2, a3);
  v4->var0 = (__CFString *)&off_1E655E0A8;
  v4[2].var0 = (__CFString *)&unk_1E655E458;
  PCString::PCString(v4 + 19, (const PCString *)a2 + 19);
}

void sub_1B2C88D40(_Unwind_Exception *a1)
{
  OZChanObjectRef *v1;

  OZChanObjectRef::~OZChanObjectRef(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelPercentOverRange::writeBody(OZChannelPercentOverRange *this, PCSerializerWriteStream *a2, int a3)
{
  PCString v7;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelOverRangeScope);
  OZChannel::writeBody((OZChannel *)this, a2, a3);
  PCString::PCString(&v7, (const PCString *)this + 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 160);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v7);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v7);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2C88E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelPercentOverRange::writeBody(OZChannelPercentOverRange *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannelPercentOverRange::writeBody((OZChannelPercentOverRange *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelPercentOverRange::parseBegin(OZChannel *this, PCSerializerReadStream *a2)
{
  OZChannel::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelOverRangeScope);
  OZChannel::deleteAllKeyframes(this, MEMORY[0x1E0CA2E68]);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelPercentOverRange::parseBegin(OZChannelPercentOverRange *this, PCSerializerReadStream *a2)
{
  OZChannelPercentOverRange::parseBegin((OZChannel *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelPercentOverRange::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u)
    OZChannel::linearTimeWarp(this, 1.0 / *((double *)a2 + 17), MEMORY[0x1E0CA2E68]);
  OZChannel::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelPercentOverRange::parseEnd(OZChannelPercentOverRange *this, PCSerializerReadStream *a2)
{
  OZChannelPercentOverRange::parseEnd((OZChannel *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelPercentOverRange::parseElement(OZChannel *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannel::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 160)
    PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&this[1]);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelPercentOverRange::parseElement(OZChannelPercentOverRange *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelPercentOverRange::parseElement((OZChannel *)((char *)this - 16), a2, a3);
  return 1;
}

__n128 OZChannelPercentOverRange::getTimeOffset@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)a1 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 + 16);
  return result;
}

__n128 OZChannelPercentOverRange::globalToLocalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

__n128 OZChannelPercentOverRange::localToGlobalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

uint64_t OZChannelPercentOverRange::hasKeypointAt(OZChannelPercentOverRange *this, Float64 a2)
{
  CMTime v4;

  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 568))(this, &v4, 0);
}

uint64_t OZChannelPercentOverRange::allHaveKeypointsAt(OZChannelPercentOverRange *this, Float64 a2)
{
  CMTime v4;

  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *))(*(_QWORD *)this + 576))(this, &v4);
}

uint64_t OZChannelPercentOverRange::addKeypointAt(OZChannelPercentOverRange *this, Float64 a2)
{
  CMTime v4;

  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *))(*(_QWORD *)this + 600))(this, &v4);
}

_QWORD *OZChannelPercentOverRange::moveKeypointTo(OZChannelPercentOverRange *this, Float64 a2, Float64 a3, uint64_t a4)
{
  _QWORD v8[3];
  CMTime v9;
  CMTime v10;

  OZFigTimeForChannelSeconds(&v10, a2, 0x40000);
  OZFigTimeForChannelSeconds(&v9, a3, 0x40000);
  return (*(_QWORD *(**)(_QWORD *__return_ptr, OZChannelPercentOverRange *, CMTime *, CMTime *, uint64_t, _QWORD))(*(_QWORD *)this + 616))(v8, this, &v10, &v9, a4, 0);
}

uint64_t OZChannelPercentOverRange::deleteKeypointAt(OZChannelPercentOverRange *this, Float64 a2)
{
  CMTime v4;

  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *))(*(_QWORD *)this + 608))(this, &v4);
}

uint64_t OZChannelPercentOverRange::previousKeypoint(OZChannelPercentOverRange *this, double *a2)
{
  uint64_t v4;
  CMTime v6;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  if (a2)
  {
    OZFigTimeForChannelSeconds(&v7, *a2, 0x40000);
    v4 = (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 624))(this, &v7, 0);
    v6 = v7;
    *a2 = CMTimeGetSeconds(&v6);
  }
  else
  {
    v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    return (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 624))(this, &v7, 0);
  }
  return v4;
}

uint64_t OZChannelPercentOverRange::nextKeypoint(OZChannelPercentOverRange *this, double *a2)
{
  uint64_t v4;
  CMTime v6;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  if (a2)
  {
    OZFigTimeForChannelSeconds(&v7, *a2, 0x40000);
    v4 = (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 632))(this, &v7, 0);
    v6 = v7;
    *a2 = CMTimeGetSeconds(&v6);
  }
  else
  {
    v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    return (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *, _QWORD))(*(_QWORD *)this + 632))(this, &v7, 0);
  }
  return v4;
}

BOOL OZChannelPercentOverRange::hasKeypointAt(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getKeyframe(this, a2) != 0;
}

BOOL OZChannelPercentOverRange::allHaveKeypointsAt(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getKeyframe(this, a2) != 0;
}

uint64_t OZChannelPercentOverRange::addKeypointAt(OZChannel *this, const CMTime *a2)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0)
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
  return OZChannel::setKeyframe(this, a2);
}

void *OZChannelPercentOverRange::moveKeypointTo@<X0>(OZChannel *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  void *result;
  void *v13;

  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0)
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
  *(_OWORD *)&a6->value = *(_OWORD *)&a3->value;
  a6->epoch = a3->epoch;
  result = (void *)OZChannel::getKeyframe(this, a2);
  if (result)
  {
    v13 = result;
    (*((void (**)(OZChannel *, void *, CMTime *, uint64_t, uint64_t))this->var0 + 105))(this, result, a6, a5, a4);
    return (void *)OZChannel::getKeyframe(this, v13, a6, 0);
  }
  return result;
}

void *OZChannelPercentOverRange::deleteKeypointAt(OZChannel *this, const CMTime *a2)
{
  void *result;

  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  result = (void *)OZChannel::getKeyframe(this, a2);
  if (result)
    return (void *)OZChannel::deleteKeyframe(this, result);
  return result;
}

double OZChannelPercentOverRange::previousKeypoint(OZChannel *this, CMTime *a2)
{
  double result;
  double v4;
  CMTime v5;

  v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v4 = 0.0;
  if (OZChannel::getPreviousKeyframe(this, a2, &v5, &v4))
  {
    result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

double OZChannelPercentOverRange::nextKeypoint(OZChannel *this, CMTime *a2)
{
  double result;
  double v4;
  CMTime v5;

  v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v4 = 0.0;
  if (OZChannel::getNextKeyframe(this, a2, &v5, &v4))
  {
    result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

uint64_t OZChannelPercentOverRange::resetToDefault(OZChannel *this, char a2)
{
  CMTime v4;

  OZChannel::resetToDefault(this, a2);
  OZChannel::setKeyframe(this, MEMORY[0x1E0CA2E68]);
  CMTimeMake(&v4, 1, 1);
  return OZChannel::setKeyframe(this, &v4);
}

void OZChannelPercentOverRange::getBakeParameters(OZChannelPercentOverRange *this, const PCTimeRange *a2, double *a3, double *a4, double *a5)
{
  uint64_t v8;
  __int128 v9;
  CMTime v10;
  CMTime v11;
  CMTime time;
  CMTime v13;
  CMTime v14;
  CMTime v15;

  v8 = *(_QWORD *)this;
  v9 = *MEMORY[0x1E0CA2E68];
  v15.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v14.epoch = v15.epoch;
  v13.epoch = v15.epoch;
  *(_OWORD *)&v15.value = v9;
  *(_OWORD *)&v14.value = v9;
  *(_OWORD *)&v13.value = v9;
  (*(void (**)(OZChannelPercentOverRange *, const PCTimeRange *, CMTime *, CMTime *, CMTime *))(v8 + 816))(this, a2, &v15, &v14, &v13);
  if (a3)
  {
    time = v15;
    *a3 = CMTimeGetSeconds(&time);
  }
  if (a4)
  {
    v11 = v14;
    *a4 = CMTimeGetSeconds(&v11);
  }
  if (a5)
  {
    v10 = v13;
    *a5 = CMTimeGetSeconds(&v10);
  }
}

double OZChannelPercentOverRange::getBakeParameters(OZChannelPercentOverRange *this, const PCTimeRange *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  __int128 v7;
  double result;
  CMTime v9;

  v7 = *MEMORY[0x1E0CA2E68];
  a3->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)&a3->value = v7;
  CMTimeMake(&v9, 1, 1);
  *a4 = v9;
  OZFigTimeForChannelSeconds(&v9, 0.0005, 0x40000);
  result = *(double *)&v9.value;
  *a5 = v9;
  return result;
}

const __CFString *OZChannelPercentOverRange::getObjCWrapperName(OZChannelPercentOverRange *this)
{
  return CFSTR("CHChannelPercent");
}

void OZChannel2DOverRange::OZChannel2DOverRange(OZChannel2DOverRange *this, double a2, double a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, OZChannelImpl *a8, OZChannelInfo *a9)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v19;
  OZFactoryBase *v20;

  Instance = (OZFactory *)OZChannel2DOverRange_Factory::getInstance(this);
  OZChannel2D::OZChannel2D(this, Instance, a4, a5, a6, a7, 2u, a8, a9);
  *(_QWORD *)this = &off_1E655E4B0;
  *((_QWORD *)this + 2) = &unk_1E655E828;
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((OZChannel2DOverRange *)((char *)this + 440), CFSTR("Channel Over Range Range Name"));
  OZChannel::setDiscrete((OZChannel *)((char *)this + 136), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 288), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 134414336, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 288), 134414336, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 136), a2);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 136), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 288), a3);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 288), 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 136));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 288));
}

void sub_1B2C89854(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannel2DOverRange::OZChannel2DOverRange(OZChannel2DOverRange *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;

  OZChannel2D::OZChannel2D(this, a2, a3, a4, 2u, 0, 0);
  *(_QWORD *)v5 = &off_1E655E4B0;
  *((_QWORD *)v5 + 2) = &unk_1E655E828;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((OZChannel2DOverRange *)((char *)this + 440), CFSTR("Channel Over Range Range Name"));
  OZChannel::setDiscrete((OZChannel *)((char *)this + 136), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 288), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 134414336, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 288), 134414336, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 136));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 288));
}

void sub_1B2C89940(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannel2DOverRange::OZChannel2DOverRange(OZChannel2DOverRange *this, const PCString *a2, OZChannelFolder *a3)
{
  PCString *v4;

  OZChannel2D::OZChannel2D(this, (const OZChannel2D *)a2, a3);
  v4->var0 = (__CFString *)&off_1E655E4B0;
  v4[2].var0 = (__CFString *)&unk_1E655E828;
  PCString::PCString(v4 + 55, a2 + 55);
}

void sub_1B2C899B0(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannel2DOverRange::getValueOverRange(OZChannel2DOverRange *this, Float64 a2, Float64 a3, double *a4, double *a5)
{
  CMTime v9;

  OZFigTimeForChannelSeconds(&v9, a2, 0x40000);
  OZChannel2DOverRange::getValueOverRange(this, &v9, a3, a4, a5);
}

void OZChannel2DOverRange::getValueOverRange(OZChannel2DOverRange *this, const CMTime *a2, Float64 a3, double *a4, double *a5)
{
  double Seconds;
  double v10;
  uint64_t v11;
  uint64_t v12;
  CMTime v13;
  CMTime v14;

  OZFigTimeForChannelSeconds(&v14, a3, 0x40000);
  v13 = *a2;
  Seconds = CMTimeGetSeconds(&v13);
  v10 = Seconds;
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), &v14, Seconds);
    *(_QWORD *)a4 = v11;
  }
  if (a5)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), &v14, v10);
    *(_QWORD *)a5 = v12;
  }
}

uint64_t OZChannel2DOverRange::writeBody(OZChannel2DOverRange *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  PCString v11;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelOverRangeScope);
  OZChannelFolder::writeBody((OZChannelFolder *)this, a2, a3, a4, a5);
  PCString::PCString(&v11, (const PCString *)this + 55);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 160);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v11);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v11);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2C89B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannel2DOverRange::writeBody(OZChannel2DOverRange *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannel2DOverRange::writeBody((OZChannel2DOverRange *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZChannel2DOverRange::parseBegin(OZChannel2DOverRange *this, PCSerializerReadStream *a2)
{
  const CMTime *v4;

  OZChannelFolder::parseBegin((OZChannelFolder *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelOverRangeScope);
  v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::deleteAllKeyframes((OZChannel *)((char *)this + 136), MEMORY[0x1E0CA2E68]);
  OZChannel::deleteAllKeyframes((OZChannel *)((char *)this + 288), v4);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannel2DOverRange::parseBegin(OZChannel2DOverRange *this, PCSerializerReadStream *a2)
{
  OZChannel2DOverRange::parseBegin((OZChannel2DOverRange *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannel2DOverRange::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  const CMTime *v4;

  if (*((_DWORD *)a2 + 26) <= 4u)
  {
    v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::linearTimeWarp((OZChannel *)((char *)this + 136), 1.0 / *((double *)a2 + 17), MEMORY[0x1E0CA2E68]);
    OZChannel::linearTimeWarp((OZChannel *)((char *)this + 288), 1.0 / *((double *)a2 + 17), v4);
  }
  OZChannelFolder::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannel2DOverRange::parseEnd(OZChannel2DOverRange *this, PCSerializerReadStream *a2)
{
  OZChannel2DOverRange::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannel2DOverRange::parseElement(OZChannelFolder *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelFolder::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 160)
    PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)this + 440);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannel2DOverRange::parseElement(OZChannel2DOverRange *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannel2DOverRange::parseElement((OZChannelFolder *)((char *)this - 16), a2, a3);
  return 1;
}

__n128 OZChannel2DOverRange::getTimeOffset@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)a1 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 + 16);
  return result;
}

__n128 OZChannel2DOverRange::globalToLocalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

__n128 OZChannel2DOverRange::localToGlobalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

uint64_t OZChannel2DOverRange::resetToDefault(OZChannelFolder *this, uint64_t a2)
{
  OZChannelFolder *v2;
  const CMTime *v3;
  CMTime v5;

  v2 = this;
  OZChannelFolder::resetToDefault(this, a2);
  v3 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::setKeyframe((OZChannel *)((char *)v2 + 136), MEMORY[0x1E0CA2E68]);
  CMTimeMake(&v5, 1, 1);
  OZChannel::setKeyframe((OZChannel *)((char *)v2 + 136), &v5);
  v2 = (OZChannelFolder *)((char *)v2 + 288);
  OZChannel::setKeyframe((OZChannel *)v2, v3);
  CMTimeMake(&v5, 1, 1);
  return OZChannel::setKeyframe((OZChannel *)v2, &v5);
}

void OZChannel2DOverRange::getBakeParameters(OZChannel2DOverRange *this, const PCTimeRange *a2, double *a3, double *a4, double *a5)
{
  uint64_t v8;
  __int128 v9;
  CMTime v10;
  CMTime v11;
  CMTime time;
  CMTime v13;
  CMTime v14;
  CMTime v15;

  v8 = *(_QWORD *)this;
  v9 = *MEMORY[0x1E0CA2E68];
  v15.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v14.epoch = v15.epoch;
  v13.epoch = v15.epoch;
  *(_OWORD *)&v15.value = v9;
  *(_OWORD *)&v14.value = v9;
  *(_OWORD *)&v13.value = v9;
  (*(void (**)(OZChannel2DOverRange *, const PCTimeRange *, CMTime *, CMTime *, CMTime *))(v8 + 864))(this, a2, &v15, &v14, &v13);
  if (a3)
  {
    time = v15;
    *a3 = CMTimeGetSeconds(&time);
  }
  if (a4)
  {
    v11 = v14;
    *a4 = CMTimeGetSeconds(&v11);
  }
  if (a5)
  {
    v10 = v13;
    *a5 = CMTimeGetSeconds(&v10);
  }
}

double OZChannel2DOverRange::getBakeParameters(OZChannel2DOverRange *this, const PCTimeRange *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  __int128 v7;
  double result;
  CMTime v9;

  v7 = *MEMORY[0x1E0CA2E68];
  a3->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)&a3->value = v7;
  CMTimeMake(&v9, 1, 1);
  *a4 = v9;
  OZFigTimeForChannelSeconds(&v9, 0.0005, 0x40000);
  result = *(double *)&v9.value;
  *a5 = v9;
  return result;
}

uint64_t OZChannel2DOverRange::moveKeypointTo@<X0>(uint64_t this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  const void ***v7;
  const void **v8;
  const void **v9;
  OZChannel *v12;
  CMTime v13;

  v13 = *a2;
  *a6 = *a3;
  v7 = *(const void ****)(this + 112);
  if (v7)
  {
    v8 = *v7;
    v9 = v7[1];
    if (*v7 != v9)
    {
      do
      {
        if (*v8)
        else
          v12 = 0;
        (*((void (**)(OZChannel *, uint64_t))v12->var0 + 58))(v12, 1);
        if (((*((uint64_t (**)(OZChannel *))v12->var0 + 61))(v12) & 1) == 0)
          (*((void (**)(OZChannel *, uint64_t))v12->var0 + 60))(v12, 1);
        this = OZChannel::getKeyframe(v12, &v13);
        if (this)
          this = (*((uint64_t (**)(OZChannel *, uint64_t, CMTime *, uint64_t, uint64_t))v12->var0 + 105))(v12, this, a6, a5, a4);
        ++v8;
      }
      while (v8 != v9);
    }
  }
  return this;
}

const __CFString *OZChannel2DOverRange::getObjCWrapperName(OZChannel2DOverRange *this)
{
  return CFSTR("CHChannel2D");
}

void OZChannelScaleOverRange::OZChannelScaleOverRange(OZChannelScaleOverRange *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;

  Instance = (OZFactory *)OZChannelScaleOverRange_Factory::getInstance(this);
  OZChannelScale::OZChannelScale(this, Instance, a2, a3, a4, a5, 2u, a6, a7);
  *(_QWORD *)this = &off_1E655E880;
  *((_QWORD *)this + 2) = &unk_1E655EBF8;
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((OZChannelScaleOverRange *)((char *)this + 440), CFSTR("Channel Over Range Range Name"));
  OZChannel::setDiscrete((OZChannel *)((char *)this + 136), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 288), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 134414336, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 288), 134414336, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 136));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 288));
}

void sub_1B2C8A194(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScaleOverRange::OZChannelScaleOverRange(OZChannelScaleOverRange *this, double a2, double a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, OZChannelImpl *a8, OZChannelInfo *a9)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v19;
  OZFactoryBase *v20;

  Instance = (OZFactory *)OZChannelScaleOverRange_Factory::getInstance(this);
  OZChannelScale::OZChannelScale(this, Instance, a4, a5, a6, a7, 2u, a8, a9);
  *(_QWORD *)this = &off_1E655E880;
  *((_QWORD *)this + 2) = &unk_1E655EBF8;
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((OZChannelScaleOverRange *)((char *)this + 440), CFSTR("Channel Over Range Range Name"));
  OZChannel::setDiscrete((OZChannel *)((char *)this + 136), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 288), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 134414336, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 288), 134414336, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 136), a2);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 136), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 288), a3);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 288), 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 136));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 288));
}

void sub_1B2C8A30C(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScaleOverRange::OZChannelScaleOverRange(OZChannelScaleOverRange *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;

  OZChannelScale::OZChannelScale(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E655E880;
  *((_QWORD *)v5 + 2) = &unk_1E655EBF8;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((OZChannelScaleOverRange *)((char *)this + 440), CFSTR("Channel Over Range Range Name"));
  OZChannel::setDiscrete((OZChannel *)((char *)this + 136), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 288), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 134414336, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 288), 134414336, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 136));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 288));
}

void sub_1B2C8A3EC(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScaleOverRange::OZChannelScaleOverRange(OZChannelScaleOverRange *this, const PCString *a2, OZChannelFolder *a3)
{
  PCString *v4;

  OZChannelScale::OZChannelScale(this, (const OZChannelScale *)a2, a3);
  v4->var0 = (__CFString *)&off_1E655E880;
  v4[2].var0 = (__CFString *)&unk_1E655EBF8;
  PCString::PCString(v4 + 55, a2 + 55);
}

void sub_1B2C8A45C(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelScaleOverRange::setValueOverRange(OZChannelScaleOverRange *this, Float64 a2, Float64 a3, double a4, double a5)
{
  const CMTime *v9;
  CMTime v11;

  OZFigTimeForChannelSeconds(&v11, a2, 0x40000);
  return OZChannelScaleOverRange::setValueOverRange(this, v9, a3, a4, a5);
}

uint64_t OZChannelScaleOverRange::setValueOverRange(OZChannelScaleOverRange *this, const CMTime *a2, Float64 a3, double a4, double a5)
{
  OZChannel *v9;
  CMTime v11;

  v9 = (OZChannel *)((char *)this + 136);
  OZFigTimeForChannelSeconds(&v11, a3, 0x40000);
  OZChannel::setKeyframe(v9, &v11, a4, 1);
  OZFigTimeForChannelSeconds(&v11, a3, 0x40000);
  return OZChannel::setKeyframe((OZChannel *)((char *)this + 288), &v11, a5, 1);
}

uint64_t OZChannelScaleOverRange::writeBody(OZChannelScaleOverRange *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  PCString v11;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelOverRangeScope);
  OZChannelFolder::writeBody((OZChannelFolder *)this, a2, a3, a4, a5);
  PCString::PCString(&v11, (const PCString *)this + 55);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 160);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v11);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v11);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2C8A620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelScaleOverRange::writeBody(OZChannelScaleOverRange *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelScaleOverRange::writeBody((OZChannelScaleOverRange *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZChannelScaleOverRange::parseBegin(OZChannelScaleOverRange *this, PCSerializerReadStream *a2)
{
  const CMTime *v4;

  OZChannelFolder::parseBegin((OZChannelFolder *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelOverRangeScope);
  v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::deleteAllKeyframes((OZChannel *)((char *)this + 136), MEMORY[0x1E0CA2E68]);
  OZChannel::deleteAllKeyframes((OZChannel *)((char *)this + 288), v4);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelScaleOverRange::parseBegin(OZChannelScaleOverRange *this, PCSerializerReadStream *a2)
{
  OZChannelScaleOverRange::parseBegin((OZChannelScaleOverRange *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelScaleOverRange::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  const CMTime *v4;

  if (*((_DWORD *)a2 + 26) <= 4u)
  {
    v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::linearTimeWarp((OZChannel *)((char *)this + 136), 1.0 / *((double *)a2 + 17), MEMORY[0x1E0CA2E68]);
    OZChannel::linearTimeWarp((OZChannel *)((char *)this + 288), 1.0 / *((double *)a2 + 17), v4);
  }
  OZChannelFolder::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelScaleOverRange::parseEnd(OZChannelScaleOverRange *this, PCSerializerReadStream *a2)
{
  OZChannelScaleOverRange::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelScaleOverRange::parseElement(OZChannelFolder *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelFolder::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 160)
    PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)this + 440);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelScaleOverRange::parseElement(OZChannelScaleOverRange *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelScaleOverRange::parseElement((OZChannelFolder *)((char *)this - 16), a2, a3);
  return 1;
}

__n128 OZChannelScaleOverRange::getTimeOffset@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)a1 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 + 16);
  return result;
}

__n128 OZChannelScaleOverRange::globalToLocalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

__n128 OZChannelScaleOverRange::localToGlobalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

uint64_t OZChannelScaleOverRange::resetToDefault(OZChannelFolder *this, uint64_t a2)
{
  OZChannelFolder *v2;
  const CMTime *v3;
  CMTime v5;

  v2 = this;
  OZChannelFolder::resetToDefault(this, a2);
  v3 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::setKeyframe((OZChannel *)((char *)v2 + 136), MEMORY[0x1E0CA2E68]);
  CMTimeMake(&v5, 1, 1);
  OZChannel::setKeyframe((OZChannel *)((char *)v2 + 136), &v5);
  v2 = (OZChannelFolder *)((char *)v2 + 288);
  OZChannel::setKeyframe((OZChannel *)v2, v3);
  CMTimeMake(&v5, 1, 1);
  return OZChannel::setKeyframe((OZChannel *)v2, &v5);
}

void OZChannelScaleOverRange::getBakeParameters(OZChannelScaleOverRange *this, const PCTimeRange *a2, double *a3, double *a4, double *a5)
{
  uint64_t v8;
  __int128 v9;
  CMTime v10;
  CMTime v11;
  CMTime time;
  CMTime v13;
  CMTime v14;
  CMTime v15;

  v8 = *(_QWORD *)this;
  v9 = *MEMORY[0x1E0CA2E68];
  v15.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v14.epoch = v15.epoch;
  v13.epoch = v15.epoch;
  *(_OWORD *)&v15.value = v9;
  *(_OWORD *)&v14.value = v9;
  *(_OWORD *)&v13.value = v9;
  (*(void (**)(OZChannelScaleOverRange *, const PCTimeRange *, CMTime *, CMTime *, CMTime *))(v8 + 864))(this, a2, &v15, &v14, &v13);
  if (a3)
  {
    time = v15;
    *a3 = CMTimeGetSeconds(&time);
  }
  if (a4)
  {
    v11 = v14;
    *a4 = CMTimeGetSeconds(&v11);
  }
  if (a5)
  {
    v10 = v13;
    *a5 = CMTimeGetSeconds(&v10);
  }
}

double OZChannelScaleOverRange::getBakeParameters(OZChannelScaleOverRange *this, const PCTimeRange *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  __int128 v7;
  double result;
  CMTime v9;

  v7 = *MEMORY[0x1E0CA2E68];
  a3->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)&a3->value = v7;
  CMTimeMake(&v9, 1, 1);
  *a4 = v9;
  OZFigTimeForChannelSeconds(&v9, 0.0005, 0x40000);
  result = *(double *)&v9.value;
  *a5 = v9;
  return result;
}

uint64_t OZChannelScaleOverRange::moveKeypointTo@<X0>(uint64_t this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  const void ***v7;
  const void **v8;
  const void **v9;
  OZChannel *v12;
  CMTime v13;

  v13 = *a2;
  *a6 = *a3;
  v7 = *(const void ****)(this + 112);
  if (v7)
  {
    v8 = *v7;
    v9 = v7[1];
    if (*v7 != v9)
    {
      do
      {
        if (*v8)
        else
          v12 = 0;
        (*((void (**)(OZChannel *, uint64_t))v12->var0 + 58))(v12, 1);
        if (((*((uint64_t (**)(OZChannel *))v12->var0 + 61))(v12) & 1) == 0)
          (*((void (**)(OZChannel *, uint64_t))v12->var0 + 60))(v12, 1);
        this = OZChannel::getKeyframe(v12, &v13);
        if (this)
          this = (*((uint64_t (**)(OZChannel *, uint64_t, CMTime *, uint64_t, uint64_t))v12->var0 + 105))(v12, this, a6, a5, a4);
        ++v8;
      }
      while (v8 != v9);
    }
  }
  return this;
}

const __CFString *OZChannelScaleOverRange::getObjCWrapperName(OZChannelScaleOverRange *this)
{
  return CFSTR("CHChannelScale");
}

void OZChannelDoubleOverRange::~OZChannelDoubleOverRange(PCString *this)
{
  this->var0 = (__CFString *)&off_1E655D898;
  this[2].var0 = (__CFString *)&unk_1E655DC48;
  PCString::~PCString(this + 19);
  OZChannel::~OZChannel((OZChannel *)this);
}

{
  this->var0 = (__CFString *)&off_1E655D898;
  this[2].var0 = (__CFString *)&unk_1E655DC48;
  PCString::~PCString(this + 19);
  OZChannel::~OZChannel((OZChannel *)this);
  JUMPOUT(0x1B5E29170);
}

void OZChannelDoubleOverRange::getRangeName(const PCString *this@<X0>, PCString *a2@<X8>)
{
  PCString::PCString(a2, this + 19);
}

void OZChannelDoubleOverRange::setRangeName(PCString *this, const PCString *a2)
{
  PCString::set(this + 19, a2);
}

void `non-virtual thunk to'OZChannelDoubleOverRange::~OZChannelDoubleOverRange(PCString *this)
{
  OZChannel *v1;

  this[-2].var0 = (__CFString *)&off_1E655D898;
  v1 = (OZChannel *)&this[-2];
  this->var0 = (__CFString *)&unk_1E655DC48;
  PCString::~PCString(this + 17);
  OZChannel::~OZChannel(v1);
}

{
  OZChannel *v1;

  this[-2].var0 = (__CFString *)&off_1E655D898;
  v1 = (OZChannel *)&this[-2];
  this->var0 = (__CFString *)&unk_1E655DC48;
  PCString::~PCString(this + 17);
  OZChannel::~OZChannel(v1);
  JUMPOUT(0x1B5E29170);
}

void OZChannelAngleOverRange::~OZChannelAngleOverRange(PCString *this)
{
  this->var0 = (__CFString *)&off_1E655DCA0;
  this[2].var0 = (__CFString *)&unk_1E655E050;
  PCString::~PCString(this + 19);
  OZChannel::~OZChannel((OZChannel *)this);
}

{
  this->var0 = (__CFString *)&off_1E655DCA0;
  this[2].var0 = (__CFString *)&unk_1E655E050;
  PCString::~PCString(this + 19);
  OZChannel::~OZChannel((OZChannel *)this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelAngleOverRange::~OZChannelAngleOverRange(PCString *this)
{
  OZChannel *v1;

  this[-2].var0 = (__CFString *)&off_1E655DCA0;
  v1 = (OZChannel *)&this[-2];
  this->var0 = (__CFString *)&unk_1E655E050;
  PCString::~PCString(this + 17);
  OZChannel::~OZChannel(v1);
}

{
  OZChannel *v1;

  this[-2].var0 = (__CFString *)&off_1E655DCA0;
  v1 = (OZChannel *)&this[-2];
  this->var0 = (__CFString *)&unk_1E655E050;
  PCString::~PCString(this + 17);
  OZChannel::~OZChannel(v1);
  JUMPOUT(0x1B5E29170);
}

void OZChannelPercentOverRange::~OZChannelPercentOverRange(PCString *this)
{
  this->var0 = (__CFString *)&off_1E655E0A8;
  this[2].var0 = (__CFString *)&unk_1E655E458;
  PCString::~PCString(this + 19);
  OZChanObjectRef::~OZChanObjectRef((OZChanObjectRef *)this);
}

{
  this->var0 = (__CFString *)&off_1E655E0A8;
  this[2].var0 = (__CFString *)&unk_1E655E458;
  PCString::~PCString(this + 19);
  OZChanObjectRef::~OZChanObjectRef((OZChanObjectRef *)this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelPercentOverRange::~OZChannelPercentOverRange(PCString *this)
{
  OZChanObjectRef *v1;

  this[-2].var0 = (__CFString *)&off_1E655E0A8;
  v1 = (OZChanObjectRef *)&this[-2];
  this->var0 = (__CFString *)&unk_1E655E458;
  PCString::~PCString(this + 17);
  OZChanObjectRef::~OZChanObjectRef(v1);
}

{
  OZChanObjectRef *v1;

  this[-2].var0 = (__CFString *)&off_1E655E0A8;
  v1 = (OZChanObjectRef *)&this[-2];
  this->var0 = (__CFString *)&unk_1E655E458;
  PCString::~PCString(this + 17);
  OZChanObjectRef::~OZChanObjectRef(v1);
  JUMPOUT(0x1B5E29170);
}

void OZChannel2DOverRange::~OZChannel2DOverRange(PCString *this)
{
  this->var0 = (__CFString *)&off_1E655E4B0;
  this[2].var0 = (__CFString *)&unk_1E655E828;
  PCString::~PCString(this + 55);
  OZChannel2D::~OZChannel2D((OZChannel2D *)this);
}

{
  this->var0 = (__CFString *)&off_1E655E4B0;
  this[2].var0 = (__CFString *)&unk_1E655E828;
  PCString::~PCString(this + 55);
  OZChannel2D::~OZChannel2D((OZChannel2D *)this);
  JUMPOUT(0x1B5E29170);
}

void OZChannel2DOverRange::getRangeName(const PCString *this@<X0>, PCString *a2@<X8>)
{
  PCString::PCString(a2, this + 55);
}

void OZChannel2DOverRange::setRangeName(PCString *this, const PCString *a2)
{
  PCString::set(this + 55, a2);
}

void `non-virtual thunk to'OZChannel2DOverRange::~OZChannel2DOverRange(PCString *this)
{
  this->var0 = (__CFString *)&unk_1E655E828;
  this[-2].var0 = (__CFString *)&off_1E655E4B0;
  PCString::~PCString(this + 53);
  OZChannel2D::~OZChannel2D((OZChannel2D *)&this[-2]);
}

{
  this->var0 = (__CFString *)&unk_1E655E828;
  this[-2].var0 = (__CFString *)&off_1E655E4B0;
  PCString::~PCString(this + 53);
  OZChannel2D::~OZChannel2D((OZChannel2D *)&this[-2]);
  JUMPOUT(0x1B5E29170);
}

void OZChannelScaleOverRange::~OZChannelScaleOverRange(PCString *this)
{
  this->var0 = (__CFString *)&off_1E655E880;
  this[2].var0 = (__CFString *)&unk_1E655EBF8;
  PCString::~PCString(this + 55);
  OZChannel2D::~OZChannel2D((OZChannel2D *)this);
}

{
  this->var0 = (__CFString *)&off_1E655E880;
  this[2].var0 = (__CFString *)&unk_1E655EBF8;
  PCString::~PCString(this + 55);
  OZChannel2D::~OZChannel2D((OZChannel2D *)this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelScaleOverRange::~OZChannelScaleOverRange(PCString *this)
{
  this->var0 = (__CFString *)&unk_1E655EBF8;
  this[-2].var0 = (__CFString *)&off_1E655E880;
  PCString::~PCString(this + 53);
  OZChannel2D::~OZChannel2D((OZChannel2D *)&this[-2]);
}

{
  this->var0 = (__CFString *)&unk_1E655EBF8;
  this[-2].var0 = (__CFString *)&off_1E655E880;
  PCString::~PCString(this + 53);
  OZChannel2D::~OZChannel2D((OZChannel2D *)&this[-2]);
  JUMPOUT(0x1B5E29170);
}

void sub_1B2C8B170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZChannelPosition::OZChannelPosition(OZChannelPosition *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelPosition::OZChannelPosition_valueImpl *Instance;
  OZFactory *v16;
  OZChannelPosition::OZChannelPosition_valueInfo *v17;
  OZChannelInfo *v18;
  OZChannelInfo *v19;
  OZChannelInfo *v20;

  *(_QWORD *)this = &off_1E655ECC8;
  *((_QWORD *)this + 2) = &unk_1E655F020;
  Instance = (OZChannelPosition::OZChannelPosition_valueImpl *)OZChannelPosition_Factory::getInstance(this);
  v16 = (OZFactory *)Instance;
  if (!a7)
    a7 = (OZChannelImpl *)OZChannelPosition::OZChannelPosition_valueImpl::getInstance(Instance);
  OZChannel2D::OZChannel2D(this, v16, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = &off_1E655ECC8;
  *((_QWORD *)this + 2) = &unk_1E655F020;
  *((_QWORD *)this + 71) = 0x3FF0000000000000;
  *((_QWORD *)this + 66) = 0x3FF0000000000000;
  *((_QWORD *)this + 61) = 0x3FF0000000000000;
  *((_QWORD *)this + 56) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 175) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_QWORD *)this + 86) = 0;
  if (!a8)
  {
    v18 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance(v17);
    v19 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v18);
    v20 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance((OZChannelPosition::OZChannelPosition_valueInfo *)v19);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v20);
  }
  *((_BYTE *)this + 440) = 1;
  *((_DWORD *)this + 174) = 0;
}

void sub_1B2C8B310(_Unwind_Exception *a1)
{
  OZChannel2D *v1;
  PCSpinLock *v2;
  void **v3;
  PCSpinLock *v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = v2;
  PCSpinLock::~PCSpinLock(v4);
  v6 = (void *)*((_QWORD *)v1 + 84);
  if (v6)
  {
    *((_QWORD *)v1 + 85) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v1 + 81);
  if (v7)
  {
    *((_QWORD *)v1 + 82) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)v1 + 78);
  if (v8)
  {
    *((_QWORD *)v1 + 79) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)v1 + 75);
  if (v9)
  {
    *((_QWORD *)v1 + 76) = v9;
    operator delete(v9);
  }
  v10 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 73) = v10;
    operator delete(v10);
  }
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelPosition::OZChannelPosition(OZChannelPosition *this, double a2, double a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, unsigned int a8, OZChannelImpl *a9, OZChannelInfo *a10)
{
  OZChannelPosition::OZChannelPosition_valueImpl *Instance;
  OZFactory *v20;
  OZChannelPosition::OZChannelPosition_valueInfo *v21;
  OZChannelInfo *v22;
  OZChannelInfo *v23;
  OZChannelInfo *v24;

  *(_QWORD *)this = &off_1E655ECC8;
  *((_QWORD *)this + 2) = &unk_1E655F020;
  Instance = (OZChannelPosition::OZChannelPosition_valueImpl *)OZChannelPosition_Factory::getInstance(this);
  v20 = (OZFactory *)Instance;
  if (!a9)
    a9 = (OZChannelImpl *)OZChannelPosition::OZChannelPosition_valueImpl::getInstance(Instance);
  OZChannel2D::OZChannel2D(this, a2, a3, v20, a4, a5, a6, a7, a8, a9, a10);
  *(_QWORD *)this = &off_1E655ECC8;
  *((_QWORD *)this + 2) = &unk_1E655F020;
  *((_QWORD *)this + 71) = 0x3FF0000000000000;
  *((_QWORD *)this + 66) = 0x3FF0000000000000;
  *((_QWORD *)this + 61) = 0x3FF0000000000000;
  *((_QWORD *)this + 56) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 175) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_QWORD *)this + 86) = 0;
  if (!a10)
  {
    v22 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance(v21);
    v23 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v22);
    v24 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance((OZChannelPosition::OZChannelPosition_valueInfo *)v23);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v24);
  }
  *((_BYTE *)this + 440) = 1;
  *((_DWORD *)this + 174) = 0;
}

void sub_1B2C8B4D8(_Unwind_Exception *a1)
{
  OZChannel2D *v1;
  PCSpinLock *v2;
  void **v3;
  PCSpinLock *v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = v2;
  PCSpinLock::~PCSpinLock(v4);
  v6 = (void *)*((_QWORD *)v1 + 84);
  if (v6)
  {
    *((_QWORD *)v1 + 85) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v1 + 81);
  if (v7)
  {
    *((_QWORD *)v1 + 82) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)v1 + 78);
  if (v8)
  {
    *((_QWORD *)v1 + 79) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)v1 + 75);
  if (v9)
  {
    *((_QWORD *)v1 + 76) = v9;
    operator delete(v9);
  }
  v10 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 73) = v10;
    operator delete(v10);
  }
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelPosition::OZChannelPosition(OZChannelPosition *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5, OZChannelImpl *Instance, OZChannelInfo *a7)
{
  OZChannelPosition::OZChannelPosition_valueInfo *v13;
  OZChannelInfo *v14;
  OZChannelInfo *v15;
  OZChannelInfo *v16;

  *(_QWORD *)this = &off_1E655ECC8;
  *((_QWORD *)this + 2) = &unk_1E655F020;
  if (!Instance)
    Instance = (OZChannelImpl *)OZChannelPosition::OZChannelPosition_valueImpl::getInstance(this);
  OZChannel2D::OZChannel2D(this, a2, a3, a4, a5, Instance, a7);
  *(_QWORD *)this = &off_1E655ECC8;
  *((_QWORD *)this + 2) = &unk_1E655F020;
  *((_QWORD *)this + 71) = 0x3FF0000000000000;
  *((_QWORD *)this + 66) = 0x3FF0000000000000;
  *((_QWORD *)this + 61) = 0x3FF0000000000000;
  *((_QWORD *)this + 56) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 175) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_QWORD *)this + 86) = 0;
  if (!a7)
  {
    v14 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance(v13);
    v15 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v14);
    v16 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance((OZChannelPosition::OZChannelPosition_valueInfo *)v15);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v16);
  }
  *((_BYTE *)this + 440) = 1;
  *((_DWORD *)this + 174) = 0;
}

void sub_1B2C8B65C(_Unwind_Exception *a1)
{
  OZChannel2D *v1;
  PCSpinLock *v2;
  void **v3;
  PCSpinLock *v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = v2;
  PCSpinLock::~PCSpinLock(v4);
  v6 = (void *)*((_QWORD *)v1 + 84);
  if (v6)
  {
    *((_QWORD *)v1 + 85) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v1 + 81);
  if (v7)
  {
    *((_QWORD *)v1 + 82) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)v1 + 78);
  if (v8)
  {
    *((_QWORD *)v1 + 79) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)v1 + 75);
  if (v9)
  {
    *((_QWORD *)v1 + 76) = v9;
    operator delete(v9);
  }
  v10 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 73) = v10;
    operator delete(v10);
  }
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelPosition::OZChannelPosition(OZChannelPosition *this, const OZChannelPosition *a2, OZChannelFolder *a3)
{
  uint64_t v4;

  OZChannel2D::OZChannel2D(this, a2, a3);
  *(_QWORD *)v4 = &off_1E655ECC8;
  *(_QWORD *)(v4 + 16) = &unk_1E655F020;
  *(_QWORD *)(v4 + 568) = 0x3FF0000000000000;
  *(_QWORD *)(v4 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(v4 + 488) = 0x3FF0000000000000;
  *(_QWORD *)(v4 + 448) = 0x3FF0000000000000;
  *(_OWORD *)(v4 + 456) = 0u;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 496) = 0u;
  *(_OWORD *)(v4 + 512) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 576) = 0u;
  *(_OWORD *)(v4 + 592) = 0u;
  *(_OWORD *)(v4 + 608) = 0u;
  *(_OWORD *)(v4 + 624) = 0u;
  *(_OWORD *)(v4 + 640) = 0u;
  *(_OWORD *)(v4 + 656) = 0u;
  *(_OWORD *)(v4 + 672) = 0u;
  *(_OWORD *)(v4 + 688) = 0u;
  *(_BYTE *)(v4 + 440) = *((_BYTE *)a2 + 440);
}

void OZChannelPosition::~OZChannelPosition(OZChannelPosition *this)
{
  PCSpinLock *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E655ECC8;
  *((_QWORD *)this + 2) = &unk_1E655F020;
  v2 = (PCSpinLock *)((char *)this + 700);
  PCSpinLock::lock((os_unfair_lock_t)this + 175);
  *((_QWORD *)this + 71) = 0x3FF0000000000000;
  *((_QWORD *)this + 66) = 0x3FF0000000000000;
  *((_QWORD *)this + 61) = 0x3FF0000000000000;
  *((_QWORD *)this + 56) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 174) = 0;
  PCSpinLock::unlock(&v2->_lock);
  PCSpinLock::~PCSpinLock(v2);
  v3 = (void *)*((_QWORD *)this + 84);
  if (v3)
  {
    *((_QWORD *)this + 85) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 81);
  if (v4)
  {
    *((_QWORD *)this + 82) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 78);
  if (v5)
  {
    *((_QWORD *)this + 79) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 75);
  if (v6)
  {
    *((_QWORD *)this + 76) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 72);
  if (v7)
  {
    *((_QWORD *)this + 73) = v7;
    operator delete(v7);
  }
  OZChannel2D::~OZChannel2D(this);
}

{
  OZChannelPosition::~OZChannelPosition(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelPosition::~OZChannelPosition(OZChannelPosition *this)
{
  OZChannelPosition::~OZChannelPosition((OZChannelPosition *)((char *)this - 16));
}

{
  OZChannelPosition::~OZChannelPosition((OZChannelPosition *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelPosition::operator=(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, a2, 1);
  return a1;
}

uint64_t OZChannelPosition::clone(OZChannelPosition *this)
{
  uint64_t v2;

  v2 = operator new();
  OZChannel2D::OZChannel2D((OZChannel2D *)v2, this, 0);
  *(_QWORD *)v2 = &off_1E655ECC8;
  *(_QWORD *)(v2 + 16) = &unk_1E655F020;
  *(_QWORD *)(v2 + 568) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 488) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 448) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 496) = 0u;
  *(_OWORD *)(v2 + 512) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *(_OWORD *)(v2 + 552) = 0u;
  *(_OWORD *)(v2 + 576) = 0u;
  *(_OWORD *)(v2 + 592) = 0u;
  *(_OWORD *)(v2 + 608) = 0u;
  *(_OWORD *)(v2 + 624) = 0u;
  *(_OWORD *)(v2 + 640) = 0u;
  *(_OWORD *)(v2 + 656) = 0u;
  *(_OWORD *)(v2 + 672) = 0u;
  *(_OWORD *)(v2 + 688) = 0u;
  *(_BYTE *)(v2 + 440) = *((_BYTE *)this + 440);
  return v2;
}

void sub_1B2C8B950(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4011F1C4E7);
  _Unwind_Resume(a1);
}

void OZChannelPosition::copy(OZChannelPosition *this, const OZChannelBase *a2, char a3)
{
  _BYTE *v6;
  _BYTE *v7;

  if (a2)
  {
    if (v6)
    {
      v7 = v6;
      PCSpinLock::lock((os_unfair_lock_t)this + 175);
      *((_BYTE *)this + 440) = v7[440];
      *((_QWORD *)this + 76) = *((_QWORD *)this + 75);
      *((_QWORD *)this + 73) = *((_QWORD *)this + 72);
      *((_QWORD *)this + 79) = *((_QWORD *)this + 78);
      *((_QWORD *)this + 82) = *((_QWORD *)this + 81);
      *((_QWORD *)this + 85) = *((_QWORD *)this + 84);
      *((_QWORD *)this + 71) = 0x3FF0000000000000;
      *((_QWORD *)this + 66) = 0x3FF0000000000000;
      *((_QWORD *)this + 61) = 0x3FF0000000000000;
      *((_QWORD *)this + 56) = 0x3FF0000000000000;
      *(_OWORD *)((char *)this + 456) = 0u;
      *(_OWORD *)((char *)this + 472) = 0u;
      *((_OWORD *)this + 31) = 0u;
      *((_OWORD *)this + 32) = 0u;
      *(_OWORD *)((char *)this + 552) = 0u;
      *(_OWORD *)((char *)this + 536) = 0u;
      *((_DWORD *)this + 174) = 0;
      PCSpinLock::unlock((os_unfair_lock_t)this + 175);
    }
  }
  OZChannel2D::copy(this, a2, a3);
}

uint64_t OZChannelPosition::setPosition(OZChannelPosition *this, const CMTime *a2, double a3, double a4, uint64_t a5)
{
  double v10;
  double v11;
  double v12;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, 0.0);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, 0.0);
  return OZChannelPosition::offsetPosition(this, a2, a3 - v11, a4 - v12, a5);
}

uint64_t OZChannelPosition::offsetPosition(OZChannelPosition *this, const CMTime *a2, double a3, double a4, uint64_t a5)
{
  OZChannel *v10;
  double CurveValue;
  double v12;
  CMTime v14;

  v10 = (OZChannel *)((char *)this + 136);
  OZChannelBase::globalToLocalTime((OZChannelBase *)((char *)this + 136), a2, (uint64_t)&v14);
  CurveValue = OZChannel::getCurveValue(v10, &v14, 0);
  OZChannelBase::globalToLocalTime((OZChannelBase *)((char *)this + 288), a2, (uint64_t)&v14);
  v12 = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v14, 0);
  return OZChannel2D::setValue(this, a2, CurveValue + a3, v12 + a4, a5);
}

const void *OZChannelPosition::willBeModified(OZChannelPosition *this, uint64_t a2)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)((char *)this + 700);
  PCSpinLock::lock((os_unfair_lock_t)this + 175);
  *((_QWORD *)this + 76) = *((_QWORD *)this + 75);
  *((_QWORD *)this + 73) = *((_QWORD *)this + 72);
  *((_QWORD *)this + 79) = *((_QWORD *)this + 78);
  *((_QWORD *)this + 82) = *((_QWORD *)this + 81);
  *((_QWORD *)this + 85) = *((_QWORD *)this + 84);
  *((_QWORD *)this + 71) = 0x3FF0000000000000;
  *((_QWORD *)this + 66) = 0x3FF0000000000000;
  *((_QWORD *)this + 61) = 0x3FF0000000000000;
  *((_QWORD *)this + 56) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_DWORD *)this + 174) = 0;
  PCSpinLock::unlock(v4);
  return OZCompoundChannel::willBeModified((OZChannelBase *)this, a2);
}

double OZChannelPosition::getLength(uint64_t a1, uint64_t a2, double *a3)
{
  os_unfair_lock_s *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;

  v5 = (os_unfair_lock_s *)(a1 + 700);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 700));
  if (*(_DWORD *)(a1 + 696))
  {
    if (!a3)
    {
      v11 = *(_QWORD *)(a1 + 608);
      goto LABEL_18;
    }
    v6 = 0;
    v7 = 0;
    v8 = 0;
LABEL_4:
    v9 = 0;
    while (vabdd_f64(a3[v6 + v9], *(double *)(a1 + v6 * 8 + v9 * 8 + 448)) < 0.0000001)
    {
      if (++v9 == 4)
      {
        v8 = v7 > 2;
        v6 += 4;
        if (++v7 != 4)
          goto LABEL_4;
        goto LABEL_12;
      }
    }
    if (!v8)
      goto LABEL_13;
LABEL_12:
    v11 = *(_QWORD *)(a1 + 584);
    if (*(_QWORD *)(a1 + 576) != v11)
      goto LABEL_18;
LABEL_13:
    OZChannelPosition::getCachedVectors(a1, 0, 0, 0, 0, 0, a3);
  }
  else
  {
    OZChannelPosition::getCachedVectors(a1, 0, 0, 0, 0, 0, a3);
    if (!a3)
    {
      v10 = *(_QWORD *)(a1 + 600);
      v11 = *(_QWORD *)(a1 + 608);
      goto LABEL_15;
    }
  }
  v10 = *(_QWORD *)(a1 + 576);
  v11 = *(_QWORD *)(a1 + 584);
LABEL_15:
  if (v10 != v11)
  {
LABEL_18:
    v12 = *(double *)(v11 - 8);
    goto LABEL_19;
  }
  v12 = 0.0;
LABEL_19:
  PCSpinLock::unlock(v5);
  return v12;
}

uint64_t OZChannelPosition::getCachedVectors(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unsigned int *a6, double *a7)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  OZChannel *v27;
  OZChannel *v28;
  double Seconds;
  double v30;
  int Interpolation;
  double v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  void **v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(void);
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  double *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  double *v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  double *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  double *v85;
  uint64_t v86;
  void **v87;
  unsigned int *v88;
  uint64_t v89;
  double *v90;
  uint64_t i;
  char *v92;
  unint64_t v93;
  void **v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float64_t v108;
  float64_t v109;
  double *v110;
  double v111;
  double *v112;
  unint64_t v113;
  double *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  double *v120;
  uint64_t v121;
  uint64_t v122;
  void **v123;
  unsigned int v125;
  _QWORD *v126;
  unsigned int *v127;
  void *v128;
  uint64_t v129;
  OZChannel *v130;
  OZChannel *v131;
  unsigned int *v132;
  void *v133;
  double *v134;
  int isParametricCurveClosed;
  void **v136;
  uint64_t *v137;
  uint64_t *v138;
  float64x2_t v139[2];
  float64x2_t v140;
  __int128 v141;
  float64x2_t v142;
  __int128 v143;
  float64x2_t v144;
  __int128 v145;
  CMTime v146;
  CMTime v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  CMTime v156;
  CMTime v157;
  float64_t v158;
  float64_t v159;
  void *v160[3];
  char *v161;
  char *v162;
  CMTime v163;
  CMTime time;
  CMTime v165;
  float64x2_t v166;
  uint64_t v167;

  v14 = a1 + 136;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 136) + 832))(a1 + 136);
  v16 = v14 + 152;
  if (v15 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v14 + 152) + 832))(v14 + 152))
    return 0;
  v134 = a7;
  v127 = a6;
  if (a7)
  {
    v17 = 0;
    v18 = 0;
    v19 = a1 + 448;
    v20 = a7;
LABEL_4:
    v21 = 0;
    while (vabdd_f64(v20[v21], *(double *)(v19 + v21 * 8)) < 0.0000001)
    {
      if (++v21 == 4)
      {
        v18 = v17 > 2;
        v19 += 32;
        v20 += 4;
        if (++v17 != 4)
          goto LABEL_4;
        goto LABEL_11;
      }
    }
    if (!v18)
      goto LABEL_36;
LABEL_11:
    if (*(_QWORD *)(a1 + 576) != *(_QWORD *)(a1 + 584))
      goto LABEL_12;
LABEL_36:
    v132 = (unsigned int *)(a1 + 696);
  }
  else
  {
LABEL_12:
    v132 = (unsigned int *)(a1 + 696);
    v23 = *(_DWORD *)(a1 + 696);
    if (v23)
    {
      if (a2)
      {
        *a2 = operator new[]();
        v23 = *v132;
      }
      if (a3)
      {
        *a3 = operator new[]();
        v23 = *v132;
      }
      if (a4)
      {
        *a4 = operator new[]();
        v23 = *v132;
      }
      if (a5)
      {
        *a5 = operator new[]();
        v23 = *v132;
      }
      if (v23)
      {
        v24 = 0;
        v25 = 576;
        if (!a7)
          v25 = 600;
        do
        {
          if (a2)
            *(_QWORD *)(*a2 + v24) = *(_QWORD *)(*(_QWORD *)(a1 + 672) + v24);
          if (a3)
            *(_QWORD *)(*a3 + v24) = *(_QWORD *)(*(_QWORD *)(a1 + 624) + v24);
          if (a4)
            *(_QWORD *)(*a4 + v24) = *(_QWORD *)(*(_QWORD *)(a1 + 648) + v24);
          if (a5)
            *(_QWORD *)(*a5 + v24) = *(_QWORD *)(*(_QWORD *)(a1 + v25) + v24);
          v24 += 8;
        }
        while (8 * v23 != v24);
      }
      if (a6)
        *a6 = v23;
      return 1;
    }
  }
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a1 + 624);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a1 + 672);
  *(_DWORD *)(a1 + 696) = 0;
  v26 = (double *)(a1 + 448);
  *(_QWORD *)(a1 + 568) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 488) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 448) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  v27 = (OZChannel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 136) + 248))(v14);
  v28 = (OZChannel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 288) + 248))(v16);
  v166 = 0uLL;
  v167 = 0;
  OZChannel::getKeyframeParametricRange(v27, (uint64_t)&v166);
  memset(&v165, 0, sizeof(v165));
  OZChannel::getKeyframeMinTime(v27, (uint64_t)&v165);
  v144 = *(float64x2_t *)&v165.value;
  *(_QWORD *)&v145 = v165.epoch;
  v142 = v166;
  *(_QWORD *)&v143 = v167;
  PC_CMTimeSaferAdd((CMTime *)&v144, (CMTime *)&v142, (uint64_t)&v140);
  v167 = v141;
  v166 = v140;
  *(float64x2_t *)&time.value = v140;
  time.epoch = v141;
  Seconds = CMTimeGetSeconds(&time);
  v163 = v165;
  v30 = CMTimeGetSeconds(&v163);
  isParametricCurveClosed = OZChannel::isParametricCurveClosed(v27);
  Interpolation = OZChannel::getInterpolation(v27);
  OZChannel::getKeyframes(v27, 1, &v161);
  v130 = v28;
  OZChannel::getKeyframes(v28, 1, v160);
  v131 = v27;
  v137 = (uint64_t *)(a1 + 648);
  v138 = (uint64_t *)(a1 + 624);
  v126 = (_QWORD *)(a1 + 672);
  if ((*((unsigned int (**)(OZChannel *))v27->var0 + 104))(v27) < 2 || (unint64_t)(v162 - v161) < 9)
  {
LABEL_84:
    v136 = (void **)(a1 + 600);
    std::vector<double>::reserve((void **)(a1 + 600), *v132);
    v59 = *(_QWORD **)(a1 + 608);
    v60 = (_QWORD *)(a1 + 616);
    v61 = *(_QWORD *)(a1 + 616);
    if ((unint64_t)v59 >= v61)
    {
      v63 = *v136;
      v64 = ((char *)v59 - (_BYTE *)*v136) >> 3;
      v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v66 = v61 - (_QWORD)v63;
      if (v66 >> 2 > v65)
        v65 = v66 >> 2;
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
        v67 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v67 = v65;
      if (v67)
      {
        v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 616, v67);
        v59 = *(_QWORD **)(a1 + 608);
        v63 = *(_QWORD **)(a1 + 600);
      }
      else
      {
        v68 = 0;
      }
      v69 = &v68[8 * v64];
      v70 = &v68[8 * v67];
      *(_QWORD *)v69 = 0;
      v62 = (double *)(v69 + 8);
      while (v59 != v63)
      {
        v71 = *--v59;
        *((_QWORD *)v69 - 1) = v71;
        v69 -= 8;
      }
      *(_QWORD *)(a1 + 600) = v69;
      *(_QWORD *)(a1 + 608) = v62;
      *(_QWORD *)(a1 + 616) = v70;
      if (v63)
        operator delete(v63);
    }
    else
    {
      *v59 = 0;
      v62 = (double *)(v59 + 1);
    }
    *(_QWORD *)(a1 + 608) = v62;
    LODWORD(v72) = *(_DWORD *)(a1 + 696);
    if (v72 >= 2)
    {
      v73 = 1;
      do
      {
        v74 = (double *)*v136;
        v75 = 8 * v73 - 8;
        v76 = *(double *)(*v138 + 8 * v73) - *(double *)(*v138 + v75);
        v77 = *(double *)(*v137 + 8 * v73) - *(double *)(*v137 + v75);
        v78 = *(double *)((char *)*v136 + v75) + sqrt(v76 * v76 + v77 * v77);
        if ((unint64_t)v62 >= *v60)
        {
          v80 = v62 - v74;
          v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v82 = *v60 - (_QWORD)v74;
          if (v82 >> 2 > v81)
            v81 = v82 >> 2;
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
            v83 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v83 = v81;
          if (v83)
          {
            v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 616, v83);
            v62 = *(double **)(a1 + 608);
            v74 = *(double **)(a1 + 600);
          }
          else
          {
            v84 = 0;
          }
          v85 = (double *)&v84[8 * v80];
          *v85 = v78;
          v79 = v85 + 1;
          while (v62 != v74)
          {
            v86 = *((_QWORD *)v62-- - 1);
            *((_QWORD *)v85-- - 1) = v86;
          }
          *(_QWORD *)(a1 + 600) = v85;
          *(_QWORD *)(a1 + 608) = v79;
          *(_QWORD *)(a1 + 616) = &v84[8 * v83];
          if (v74)
            operator delete(v74);
        }
        else
        {
          *v62 = v78;
          v79 = v62 + 1;
        }
        *(_QWORD *)(a1 + 608) = v79;
        ++v73;
        v72 = *(unsigned int *)(a1 + 696);
        v62 = v79;
      }
      while (v73 < v72);
    }
    v87 = (void **)(a1 + 576);
    if (v134)
    {
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 576);
      std::vector<double>::reserve((void **)(a1 + 576), v72);
      v88 = v127;
      if (v26 != v134)
      {
        v89 = 0;
        v90 = v134;
        do
        {
          for (i = 0; i != 4; ++i)
            v26[i] = v90[i];
          ++v89;
          v26 += 4;
          v90 += 4;
        }
        while (v89 != 4);
      }
      v92 = *(char **)(a1 + 584);
      v129 = a1 + 592;
      v93 = *(_QWORD *)(a1 + 592);
      if ((unint64_t)v92 >= v93)
      {
        v96 = (char *)*v87;
        v97 = (v92 - (_BYTE *)*v87) >> 3;
        v98 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v99 = v93 - (_QWORD)v96;
        if (v99 >> 2 > v98)
          v98 = v99 >> 2;
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
          v100 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v100 = v98;
        if (v100)
        {
          v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v129, v100);
          v94 = (void **)(a1 + 576);
          v92 = *(char **)(a1 + 584);
          v96 = *(char **)(a1 + 576);
        }
        else
        {
          v94 = (void **)(a1 + 576);
          v101 = 0;
        }
        v102 = &v101[8 * v97];
        v103 = &v101[8 * v100];
        *(_QWORD *)v102 = 0;
        v95 = v102 + 8;
        while (v92 != v96)
        {
          v104 = *((_QWORD *)v92 - 1);
          v92 -= 8;
          *((_QWORD *)v102 - 1) = v104;
          v102 -= 8;
        }
        *(_QWORD *)(a1 + 576) = v102;
        *(_QWORD *)(a1 + 584) = v95;
        *(_QWORD *)(a1 + 592) = v103;
        if (v96)
          operator delete(v96);
      }
      else
      {
        v94 = (void **)(a1 + 576);
        *(_QWORD *)v92 = 0;
        v95 = v92 + 8;
      }
      *(_QWORD *)(a1 + 584) = v95;
      LODWORD(v72) = *(_DWORD *)(a1 + 696);
      v87 = v94;
      if (v72 >= 2)
      {
        v105 = 1;
        do
        {
          v106 = *v138;
          v107 = *v137;
          v108 = *(double *)(*v137 + 8 * (v105 - 1));
          v144.f64[0] = *(float64_t *)(*v138 + 8 * (v105 - 1));
          v144.f64[1] = v108;
          v145 = xmmword_1B304EEE0;
          v109 = *(double *)(v107 + 8 * v105);
          v142.f64[0] = *(float64_t *)(v106 + 8 * v105);
          v142.f64[1] = v109;
          v143 = xmmword_1B304EEE0;
          PCMatrix44Tmpl<double>::transform<double>(v134, v144.f64, v144.f64);
          PCMatrix44Tmpl<double>::transform<double>(v134, v142.f64, v142.f64);
          v110 = *(double **)(a1 + 576);
          v111 = v110[v105 - 1]
               + sqrt((v142.f64[0] - v144.f64[0]) * (v142.f64[0] - v144.f64[0])+ (v142.f64[1] - v144.f64[1]) * (v142.f64[1] - v144.f64[1]));
          v112 = *(double **)(a1 + 584);
          v113 = *(_QWORD *)(a1 + 592);
          if ((unint64_t)v112 >= v113)
          {
            v115 = v112 - v110;
            v116 = v115 + 1;
            if ((unint64_t)(v115 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v117 = v113 - (_QWORD)v110;
            if (v117 >> 2 > v116)
              v116 = v117 >> 2;
            if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
              v118 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v118 = v116;
            if (v118)
            {
              v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v129, v118);
              v112 = *(double **)(a1 + 584);
              v110 = *(double **)(a1 + 576);
            }
            else
            {
              v119 = 0;
            }
            v120 = (double *)&v119[8 * v115];
            *v120 = v111;
            v114 = v120 + 1;
            while (v112 != v110)
            {
              v121 = *((_QWORD *)v112-- - 1);
              *((_QWORD *)v120-- - 1) = v121;
            }
            *(_QWORD *)(a1 + 576) = v120;
            *(_QWORD *)(a1 + 584) = v114;
            *(_QWORD *)(a1 + 592) = &v119[8 * v118];
            if (v110)
              operator delete(v110);
          }
          else
          {
            *v112 = v111;
            v114 = v112 + 1;
          }
          *(_QWORD *)(a1 + 584) = v114;
          ++v105;
          v72 = *(unsigned int *)(a1 + 696);
        }
        while (v105 < v72);
        v88 = v127;
        v87 = v94;
      }
    }
    else
    {
      v88 = v127;
    }
    if (a2)
    {
      *a2 = operator new[]();
      LODWORD(v72) = *v132;
    }
    if (a3)
    {
      *a3 = operator new[]();
      LODWORD(v72) = *v132;
    }
    if (a4)
    {
      *a4 = operator new[]();
      LODWORD(v72) = *v132;
    }
    if (a5)
    {
      *a5 = operator new[]();
      LODWORD(v72) = *v132;
    }
    if ((_DWORD)v72)
    {
      v122 = 0;
      v123 = (void **)(a1 + 600);
      if (v134)
        v123 = v87;
      do
      {
        if (a2)
          *(_QWORD *)(*a2 + v122) = *(_QWORD *)(*v126 + v122);
        if (a3)
          *(_QWORD *)(*a3 + v122) = *(_QWORD *)(*v138 + v122);
        if (a4)
          *(_QWORD *)(*a4 + v122) = *(_QWORD *)(*v137 + v122);
        if (a5)
          *(_QWORD *)(*a5 + v122) = *(_QWORD *)((char *)*v123 + v122);
        v122 += 8;
      }
      while (8 * v72 != v122);
    }
    if (v88)
      *v88 = v72;
    (*((void (**)(OZChannel *))v131->var0 + 1))(v131);
    if (v130)
      (*((void (**)(OZChannel *))v130->var0 + 1))(v130);
    v22 = 1;
    goto LABEL_187;
  }
  v32 = Seconds - v30;
  if (Interpolation > 9)
  {
    if (Interpolation != 10 && Interpolation != 12)
      goto LABEL_84;
    *v132 = (int)(v32 / 0.025) + (isParametricCurveClosed ^ 1);
    if (!OZChannel::getSamples((uint64_t)v27))
      goto LABEL_78;
    goto LABEL_77;
  }
  if (Interpolation == 1)
  {
    *v132 = (int)v32 + 1;
    if (!OZChannel::getSamples((uint64_t)v27))
      goto LABEL_78;
LABEL_77:
    if ((OZChannel::getSamples((uint64_t)v28) & 1) != 0)
      goto LABEL_84;
LABEL_78:
    v58 = (void (*)(void))*((_QWORD *)v27->var0 + 1);
    goto LABEL_79;
  }
  if (Interpolation != 4)
    goto LABEL_84;
  v158 = 0.0;
  v159 = 0.0;
  v33 = (void *)*((_QWORD *)v161 + 1);
  if (!v33)
  {
LABEL_70:
    v56 = *(_QWORD *)(a1 + 680);
    if (v56 == *(_QWORD *)(a1 + 672))
    {
      v57 = *(_QWORD *)(a1 + 680);
    }
    else
    {
      v144.f64[0] = v30 + v32;
      std::vector<double>::push_back[abi:ne180100]((uint64_t)v126, &v144);
      std::vector<double>::push_back[abi:ne180100]((uint64_t)v138, &v159);
      std::vector<double>::push_back[abi:ne180100]((uint64_t)v137, &v158);
      v57 = *(_QWORD *)(a1 + 680);
      v56 = *(_QWORD *)(a1 + 672);
    }
    *v132 = (unint64_t)(v57 - v56) >> 3;
    goto LABEL_84;
  }
  v128 = *(void **)&v161[8 * ((v162 - v161) >> 3) - 8];
  v35 = *(void **)v160[0];
  v34 = (void *)*((_QWORD *)v160[0] + 1);
  v36 = *(void **)v161;
  v125 = 1;
  while (1)
  {
    v133 = v34;
    v154 = 0.0;
    v155 = 0.0;
    v152 = 0.0;
    v153 = 0.0;
    v150 = 0.0;
    v151 = 0.0;
    v148 = 0.0;
    v149 = 0.0;
    v37 = v36;
    OZChannel::getKeyframe(v131, v36, &v157, &v155);
    OZChannel::getKeyframe(v130, v35, 0, &v154);
    OZChannel::getKeyframe(v131, v33, &v156, &v149);
    OZChannel::getKeyframe(v130, v133, 0, &v148);
    v147 = v157;
    v38 = CMTimeGetSeconds(&v147);
    v146 = v156;
    v39 = CMTimeGetSeconds(&v146);
    v40 = ((v37 == v128) & isParametricCurveClosed) != 0 ? v32 : -0.0;
    OZChannel::getKeyframeOutputTangents(v131, v37, 0, &v153, 1);
    OZChannel::getKeyframeOutputTangents(v130, v35, 0, &v152, 1);
    OZChannel::getKeyframeInputTangents(v131, v33, 0, &v151, 1);
    OZChannel::getKeyframeInputTangents(v130, v133, 0, &v150, 1);
    v41 = v148;
    v42 = v149;
    if (vabdd_f64(v155, v149) >= 0.0000001)
    {
      v43 = (uint64_t)v131;
    }
    else
    {
      v43 = (uint64_t)v131;
      if (vabdd_f64(v154, v148) < 0.0000001)
      {
        v42 = v149 + 0.000001;
        v41 = v148 + 0.000001;
        v148 = v148 + 0.000001;
        v149 = v149 + 0.000001;
      }
    }
    v144.f64[0] = v155;
    v144.f64[1] = v154;
    v145 = xmmword_1B304EEE0;
    v44 = v155 + v153;
    v45 = v154 + v152;
    v142.f64[0] = v155 + v153;
    v142.f64[1] = v154 + v152;
    v143 = xmmword_1B304EEE0;
    v46 = v151 + v42;
    v47 = v150 + v41;
    v140.f64[0] = v151 + v42;
    v140.f64[1] = v150 + v41;
    v141 = xmmword_1B304EEE0;
    v139[0].f64[0] = v42;
    v139[0].f64[1] = v41;
    v139[1] = (float64x2_t)xmmword_1B304EEE0;
    if (vabdd_f64(v155 + v153, v155) >= 0.0000001 && vabdd_f64(v46, v44) >= 0.0000001)
    {
      v48 = v44 - v155;
      v49 = v45 - v154;
      v50 = sqrt(v48 * v48 + v49 * v49);
      if (v50 <= -0.000000100000001 || v50 >= 0.000000100000001)
      {
        v48 = v48 / v50;
        v49 = v49 / v50;
      }
      v51 = v46 - v44;
      v52 = v47 - v45;
      v53 = sqrt(v51 * v51 + v52 * v52);
      if (v53 <= -0.000000100000001 || v53 >= 0.000000100000001)
      {
        v51 = v51 / v53;
        v52 = v52 / v53;
      }
      if (fabs(v48 * v51 + v49 * v52 + 1.0) < 0.001)
        break;
    }
    PCAlgorithm::BezierSubdivide(&v144, &v142, &v140, v139, 6, v134, (uint64_t)v138, (uint64_t)v137, v38, v40 + v39 - v38, 0, (uint64_t)v126);
LABEL_64:
    v158 = v139[0].f64[1];
    v159 = v139[0].f64[0];
    if (v37 == v128)
      goto LABEL_70;
    if (v33 == v128)
    {
      v33 = v128;
      if (!isParametricCurveClosed)
        goto LABEL_70;
      v54 = (void **)v161;
      v55 = (void **)v160[0];
    }
    else
    {
      v54 = (void **)&v161[8 * ++v125];
      v55 = (void **)((char *)v160[0] + 8 * v125);
    }
    v36 = v33;
    v33 = *v54;
    v34 = *v55;
    v35 = v133;
    if (!v33)
      goto LABEL_70;
  }
  if (OZChannel::getSamples(v43) && (OZChannel::getSamples((uint64_t)v130) & 1) != 0)
    goto LABEL_64;
  v58 = *(void (**)(void))(*(_QWORD *)v43 + 8);
LABEL_79:
  v58();
  if (v130)
    (*((void (**)(OZChannel *))v130->var0 + 1))(v130);
  v22 = 0;
LABEL_187:
  if (v160[0])
  {
    v160[1] = v160[0];
    operator delete(v160[0]);
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  return v22;
}

void sub_1B2C8CCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  void *v50;
  void *v51;

  v50 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v50;
    operator delete(v50);
  }
  v51 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v51;
    operator delete(v51);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelPosition::getPositionsReparametrizedWithRange(os_unfair_lock_s *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7)
{
  os_unfair_lock_s *v13;
  double v14;
  double v15;
  unint64_t v16;
  double v17;
  signed int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  double v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  double v48;
  unint64_t v49;
  double *v50;
  double *v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  double *v68;
  double *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  double *v75;
  double *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  double v84;
  unint64_t v85;
  double *v86;
  double *v87;
  double *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  double *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  double *v118;
  uint64_t v119;
  double v120;
  unint64_t v121;
  double *v122;
  double *v123;
  double *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  double *v136;
  uint64_t v137;
  double v138;
  unint64_t v139;
  double *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  double *v158;
  uint64_t v159;
  double v160;
  unint64_t v161;
  double *v162;
  double *v163;
  double *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  double *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  double *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  _QWORD *v198;
  unint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  uint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  int v231;

  v231 = 0;
  v229 = 0;
  v230 = 0;
  v227 = 0;
  v228 = 0;
  v13 = a1 + 175;
  PCSpinLock::lock(a1 + 175);
  OZChannelPosition::getCachedVectors((uint64_t)a1, (uint64_t *)&v228, (uint64_t *)&v230, (uint64_t *)&v229, &v227, (unsigned int *)&v231, a7);
  PCSpinLock::unlock(v13);
  v14 = 0.0;
  v15 = 0.0;
  if (v231 >= 2)
    v15 = *(double *)(v227 + 8 * (v231 - 1));
  v16 = (unint64_t)a2;
  v17 = v15 / a2;
  std::vector<double>::reserve((void **)a4, v16);
  std::vector<double>::reserve((void **)a5, v16);
  std::vector<double>::reserve((void **)a6, v16);
  v18 = 0;
  v225 = a5 + 16;
  v226 = a4 + 16;
  v19 = 1;
  while (v14 < v15 || vabdd_f64(v14, v15) < 0.0000001)
  {
    v20 = v18;
    v21 = *(double *)(v227 + 8 * v18);
    v22 = vabdd_f64(v14, v21);
    if (v22 >= 0.0000001)
    {
      if (v18 < v231)
      {
        v24 = (double *)(v227 + 8 * v18);
        v25 = v231 - (uint64_t)v18;
        while (*v24 < v14)
        {
          ++v18;
          ++v24;
          if (!--v25)
          {
            v18 = v231;
            break;
          }
        }
      }
      v20 = --v18;
      v21 = *(double *)(v227 + 8 * v18);
      v23 = v14 - v21;
      v22 = vabdd_f64(v14, v21);
    }
    else
    {
      v23 = v14 - v21;
    }
    if (v22 >= 0.0000001)
    {
      if (v14 >= v21)
      {
        if (v14 <= v21)
          goto LABEL_250;
        v42 = v18 + 1;
        v43 = *(double *)(v227 + 8 * v42);
        v44 = v228;
        if (vabdd_f64(v43, v21) >= 0.0000001)
        {
          v84 = *(double *)&v228[v20] + v23 * ((*(double *)&v228[v42] - *(double *)&v228[v20]) / (v43 - v21));
          v86 = *(double **)(a6 + 8);
          v85 = *(_QWORD *)(a6 + 16);
          if ((unint64_t)v86 >= v85)
          {
            v100 = *(double **)a6;
            v101 = ((uint64_t)v86 - *(_QWORD *)a6) >> 3;
            v102 = v101 + 1;
            if ((unint64_t)(v101 + 1) >> 61)
              goto LABEL_310;
            v103 = v85 - (_QWORD)v100;
            if (v103 >> 2 > v102)
              v102 = v103 >> 2;
            if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
              v104 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v104 = v102;
            if (v104)
            {
              v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v104);
              v100 = *(double **)a6;
              v86 = *(double **)(a6 + 8);
            }
            else
            {
              v105 = 0;
            }
            v158 = (double *)&v105[8 * v101];
            *v158 = v84;
            v87 = v158 + 1;
            while (v86 != v100)
            {
              v159 = *((_QWORD *)v86-- - 1);
              *((_QWORD *)v158-- - 1) = v159;
            }
            *(_QWORD *)a6 = v158;
            *(_QWORD *)(a6 + 8) = v87;
            *(_QWORD *)(a6 + 16) = &v105[8 * v104];
            if (v100)
              operator delete(v100);
          }
          else
          {
            *v86 = v84;
            v87 = v86 + 1;
          }
          *(_QWORD *)(a6 + 8) = v87;
          v160 = *(double *)&v230[v20]
               + (v14 - *(double *)(v227 + 8 * v20))
               * ((*(double *)&v230[v42] - *(double *)&v230[v20])
                / (*(double *)(v227 + 8 * v42) - *(double *)(v227 + 8 * v20)));
          v162 = *(double **)(a4 + 8);
          v161 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v162 >= v161)
          {
            v164 = *(double **)a4;
            v165 = ((uint64_t)v162 - *(_QWORD *)a4) >> 3;
            v166 = v165 + 1;
            if ((unint64_t)(v165 + 1) >> 61)
              goto LABEL_311;
            v167 = v161 - (_QWORD)v164;
            if (v167 >> 2 > v166)
              v166 = v167 >> 2;
            if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8)
              v168 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v168 = v166;
            if (v168)
            {
              v169 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v226, v168);
              v164 = *(double **)a4;
              v162 = *(double **)(a4 + 8);
            }
            else
            {
              v169 = 0;
            }
            v177 = (double *)&v169[8 * v165];
            *v177 = v160;
            v163 = v177 + 1;
            while (v162 != v164)
            {
              v178 = *((_QWORD *)v162-- - 1);
              *((_QWORD *)v177-- - 1) = v178;
            }
            *(_QWORD *)a4 = v177;
            *(_QWORD *)(a4 + 8) = v163;
            *(_QWORD *)(a4 + 16) = &v169[8 * v168];
            if (v164)
              operator delete(v164);
          }
          else
          {
            *v162 = v160;
            v163 = v162 + 1;
          }
          *(_QWORD *)(a4 + 8) = v163;
          v138 = *(double *)&v229[v20]
               + (v14 - *(double *)(v227 + 8 * v20))
               * ((*(double *)&v229[v42] - *(double *)&v229[v20])
                / (*(double *)(v227 + 8 * v42) - *(double *)(v227 + 8 * v20)));
          v140 = *(double **)(a5 + 8);
          v179 = *(_QWORD *)(a5 + 16);
          if ((unint64_t)v140 >= v179)
          {
            v69 = *(double **)a5;
            v180 = ((uint64_t)v140 - *(_QWORD *)a5) >> 3;
            v181 = v180 + 1;
            if ((unint64_t)(v180 + 1) >> 61)
              goto LABEL_312;
            v182 = v179 - (_QWORD)v69;
            if (v182 >> 2 > v181)
              v181 = v182 >> 2;
            if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8)
              v73 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v73 = v181;
            if (v73)
            {
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v225, v73);
              v69 = *(double **)a5;
              v140 = *(double **)(a5 + 8);
            }
            else
            {
              v74 = 0;
            }
            v75 = (double *)&v74[8 * v180];
            *v75 = v138;
            v76 = v75 + 1;
            while (v140 != v69)
            {
              v184 = *((_QWORD *)v140-- - 1);
              *((_QWORD *)v75-- - 1) = v184;
            }
            goto LABEL_247;
          }
LABEL_229:
          *v140 = v138;
          v173 = v140 + 1;
          goto LABEL_230;
        }
        v46 = *(_QWORD **)(a6 + 8);
        v45 = *(_QWORD *)(a6 + 16);
        if ((unint64_t)v46 >= v45)
        {
          v94 = *(_QWORD **)a6;
          v95 = ((uint64_t)v46 - *(_QWORD *)a6) >> 3;
          v96 = v95 + 1;
          if ((unint64_t)(v95 + 1) >> 61)
            goto LABEL_310;
          v97 = v45 - (_QWORD)v94;
          if (v97 >> 2 > v96)
            v96 = v97 >> 2;
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
            v98 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v98 = v96;
          if (v98)
          {
            v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v98);
            v94 = *(_QWORD **)a6;
            v46 = *(_QWORD **)(a6 + 8);
          }
          else
          {
            v99 = 0;
          }
          v146 = &v99[8 * v95];
          *(_QWORD *)v146 = v44[v20];
          v47 = v146 + 8;
          while (v46 != v94)
          {
            v147 = *--v46;
            *((_QWORD *)v146 - 1) = v147;
            v146 -= 8;
          }
          *(_QWORD *)a6 = v146;
          *(_QWORD *)(a6 + 8) = v47;
          *(_QWORD *)(a6 + 16) = &v99[8 * v98];
          if (v94)
            operator delete(v94);
        }
        else
        {
          *v46 = v228[v20];
          v47 = v46 + 1;
        }
        *(_QWORD *)(a6 + 8) = v47;
        v148 = v230;
        v150 = *(_QWORD **)(a4 + 8);
        v149 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v150 >= v149)
        {
          v152 = *(_QWORD **)a4;
          v153 = ((uint64_t)v150 - *(_QWORD *)a4) >> 3;
          v154 = v153 + 1;
          if ((unint64_t)(v153 + 1) >> 61)
            goto LABEL_311;
          v155 = v149 - (_QWORD)v152;
          if (v155 >> 2 > v154)
            v154 = v155 >> 2;
          if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
            v156 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v156 = v154;
          if (v156)
          {
            v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v226, v156);
            v152 = *(_QWORD **)a4;
            v150 = *(_QWORD **)(a4 + 8);
          }
          else
          {
            v157 = 0;
          }
          v170 = &v157[8 * v153];
          *(_QWORD *)v170 = v148[v20];
          v151 = v170 + 8;
          while (v150 != v152)
          {
            v171 = *--v150;
            *((_QWORD *)v170 - 1) = v171;
            v170 -= 8;
          }
          *(_QWORD *)a4 = v170;
          *(_QWORD *)(a4 + 8) = v151;
          *(_QWORD *)(a4 + 16) = &v157[8 * v156];
          if (v152)
            operator delete(v152);
        }
        else
        {
          *v150 = v230[v20];
          v151 = v150 + 1;
        }
        *(_QWORD *)(a4 + 8) = v151;
        v66 = v229;
        v68 = *(double **)(a5 + 8);
        v172 = *(_QWORD *)(a5 + 16);
        if ((unint64_t)v68 >= v172)
        {
          v69 = *(double **)a5;
          v174 = ((uint64_t)v68 - *(_QWORD *)a5) >> 3;
          v175 = v174 + 1;
          if ((unint64_t)(v174 + 1) >> 61)
            goto LABEL_312;
          v176 = v172 - (_QWORD)v69;
          if (v176 >> 2 > v175)
            v175 = v176 >> 2;
          if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF8)
            v73 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v73 = v175;
          if (v73)
          {
            v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v225, v73);
            v69 = *(double **)a5;
            v68 = *(double **)(a5 + 8);
          }
          else
          {
            v74 = 0;
          }
          v75 = (double *)&v74[8 * v174];
          *v75 = *(double *)&v66[v20];
          v76 = v75 + 1;
          while (v68 != v69)
          {
            v183 = *((_QWORD *)v68-- - 1);
            *((_QWORD *)v75-- - 1) = v183;
          }
          goto LABEL_247;
        }
      }
      else
      {
        v30 = v18 - 1;
        v31 = *(double *)(v227 + 8 * v30);
        if (vabdd_f64(v21, v31) >= 0.0000001)
        {
          v48 = *(double *)&v228[v30] + (v14 - v31) * ((*(double *)&v228[v20] - *(double *)&v228[v30]) / (v21 - v31));
          v50 = *(double **)(a6 + 8);
          v49 = *(_QWORD *)(a6 + 16);
          if ((unint64_t)v50 >= v49)
          {
            v88 = *(double **)a6;
            v89 = ((uint64_t)v50 - *(_QWORD *)a6) >> 3;
            v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 61)
              goto LABEL_310;
            v91 = v49 - (_QWORD)v88;
            if (v91 >> 2 > v90)
              v90 = v91 >> 2;
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
              v92 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v92 = v90;
            if (v92)
            {
              v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v92);
              v88 = *(double **)a6;
              v50 = *(double **)(a6 + 8);
            }
            else
            {
              v93 = 0;
            }
            v118 = (double *)&v93[8 * v89];
            *v118 = v48;
            v51 = v118 + 1;
            while (v50 != v88)
            {
              v119 = *((_QWORD *)v50-- - 1);
              *((_QWORD *)v118-- - 1) = v119;
            }
            *(_QWORD *)a6 = v118;
            *(_QWORD *)(a6 + 8) = v51;
            *(_QWORD *)(a6 + 16) = &v93[8 * v92];
            if (v88)
              operator delete(v88);
          }
          else
          {
            *v50 = v48;
            v51 = v50 + 1;
          }
          *(_QWORD *)(a6 + 8) = v51;
          v120 = *(double *)&v230[v30]
               + (v14 - *(double *)(v227 + 8 * v30))
               * ((*(double *)&v230[v20] - *(double *)&v230[v30])
                / (*(double *)(v227 + 8 * v20) - *(double *)(v227 + 8 * v30)));
          v122 = *(double **)(a4 + 8);
          v121 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v122 >= v121)
          {
            v124 = *(double **)a4;
            v125 = ((uint64_t)v122 - *(_QWORD *)a4) >> 3;
            v126 = v125 + 1;
            if ((unint64_t)(v125 + 1) >> 61)
              goto LABEL_311;
            v127 = v121 - (_QWORD)v124;
            if (v127 >> 2 > v126)
              v126 = v127 >> 2;
            if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
              v128 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v128 = v126;
            if (v128)
            {
              v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v226, v128);
              v124 = *(double **)a4;
              v122 = *(double **)(a4 + 8);
            }
            else
            {
              v129 = 0;
            }
            v136 = (double *)&v129[8 * v125];
            *v136 = v120;
            v123 = v136 + 1;
            while (v122 != v124)
            {
              v137 = *((_QWORD *)v122-- - 1);
              *((_QWORD *)v136-- - 1) = v137;
            }
            *(_QWORD *)a4 = v136;
            *(_QWORD *)(a4 + 8) = v123;
            *(_QWORD *)(a4 + 16) = &v129[8 * v128];
            if (v124)
              operator delete(v124);
          }
          else
          {
            *v122 = v120;
            v123 = v122 + 1;
          }
          *(_QWORD *)(a4 + 8) = v123;
          v138 = *(double *)&v229[v30]
               + (v14 - *(double *)(v227 + 8 * v30))
               * ((*(double *)&v229[v20] - *(double *)&v229[v30])
                / (*(double *)(v227 + 8 * v20) - *(double *)(v227 + 8 * v30)));
          v140 = *(double **)(a5 + 8);
          v139 = *(_QWORD *)(a5 + 16);
          if ((unint64_t)v140 >= v139)
          {
            v69 = *(double **)a5;
            v141 = ((uint64_t)v140 - *(_QWORD *)a5) >> 3;
            v142 = v141 + 1;
            if ((unint64_t)(v141 + 1) >> 61)
              goto LABEL_312;
            v143 = v139 - (_QWORD)v69;
            if (v143 >> 2 > v142)
              v142 = v143 >> 2;
            if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8)
              v73 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v73 = v142;
            if (v73)
            {
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v225, v73);
              v69 = *(double **)a5;
              v140 = *(double **)(a5 + 8);
            }
            else
            {
              v74 = 0;
            }
            v75 = (double *)&v74[8 * v141];
            *v75 = v138;
            v76 = v75 + 1;
            while (v140 != v69)
            {
              v145 = *((_QWORD *)v140-- - 1);
              *((_QWORD *)v75-- - 1) = v145;
            }
            goto LABEL_247;
          }
          goto LABEL_229;
        }
        v32 = v228;
        v34 = *(_QWORD **)(a6 + 8);
        v33 = *(_QWORD *)(a6 + 16);
        if ((unint64_t)v34 >= v33)
        {
          v78 = *(_QWORD **)a6;
          v79 = ((uint64_t)v34 - *(_QWORD *)a6) >> 3;
          v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 61)
            goto LABEL_310;
          v81 = v33 - (_QWORD)v78;
          if (v81 >> 2 > v80)
            v80 = v81 >> 2;
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
            v82 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v82 = v80;
          if (v82)
          {
            v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v82);
            v78 = *(_QWORD **)a6;
            v34 = *(_QWORD **)(a6 + 8);
          }
          else
          {
            v83 = 0;
          }
          v106 = &v83[8 * v79];
          *(_QWORD *)v106 = v32[v20];
          v35 = v106 + 8;
          while (v34 != v78)
          {
            v107 = *--v34;
            *((_QWORD *)v106 - 1) = v107;
            v106 -= 8;
          }
          *(_QWORD *)a6 = v106;
          *(_QWORD *)(a6 + 8) = v35;
          *(_QWORD *)(a6 + 16) = &v83[8 * v82];
          if (v78)
            operator delete(v78);
        }
        else
        {
          *v34 = v228[v20];
          v35 = v34 + 1;
        }
        *(_QWORD *)(a6 + 8) = v35;
        v108 = v230;
        v110 = *(_QWORD **)(a4 + 8);
        v109 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v110 >= v109)
        {
          v112 = *(_QWORD **)a4;
          v113 = ((uint64_t)v110 - *(_QWORD *)a4) >> 3;
          v114 = v113 + 1;
          if ((unint64_t)(v113 + 1) >> 61)
            goto LABEL_311;
          v115 = v109 - (_QWORD)v112;
          if (v115 >> 2 > v114)
            v114 = v115 >> 2;
          if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
            v116 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v116 = v114;
          if (v116)
          {
            v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v226, v116);
            v112 = *(_QWORD **)a4;
            v110 = *(_QWORD **)(a4 + 8);
          }
          else
          {
            v117 = 0;
          }
          v130 = &v117[8 * v113];
          *(_QWORD *)v130 = v108[v20];
          v111 = v130 + 8;
          while (v110 != v112)
          {
            v131 = *--v110;
            *((_QWORD *)v130 - 1) = v131;
            v130 -= 8;
          }
          *(_QWORD *)a4 = v130;
          *(_QWORD *)(a4 + 8) = v111;
          *(_QWORD *)(a4 + 16) = &v117[8 * v116];
          if (v112)
            operator delete(v112);
        }
        else
        {
          *v110 = v230[v20];
          v111 = v110 + 1;
        }
        *(_QWORD *)(a4 + 8) = v111;
        v66 = v229;
        v68 = *(double **)(a5 + 8);
        v132 = *(_QWORD *)(a5 + 16);
        if ((unint64_t)v68 >= v132)
        {
          v69 = *(double **)a5;
          v133 = ((uint64_t)v68 - *(_QWORD *)a5) >> 3;
          v134 = v133 + 1;
          if ((unint64_t)(v133 + 1) >> 61)
            goto LABEL_312;
          v135 = v132 - (_QWORD)v69;
          if (v135 >> 2 > v134)
            v134 = v135 >> 2;
          if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8)
            v73 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v73 = v134;
          if (v73)
          {
            v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v225, v73);
            v69 = *(double **)a5;
            v68 = *(double **)(a5 + 8);
          }
          else
          {
            v74 = 0;
          }
          v75 = (double *)&v74[8 * v133];
          *v75 = *(double *)&v66[v20];
          v76 = v75 + 1;
          while (v68 != v69)
          {
            v144 = *((_QWORD *)v68-- - 1);
            *((_QWORD *)v75-- - 1) = v144;
          }
          goto LABEL_247;
        }
      }
    }
    else
    {
      v26 = v228;
      v28 = *(_QWORD **)(a6 + 8);
      v27 = *(_QWORD *)(a6 + 16);
      if ((unint64_t)v28 >= v27)
      {
        v36 = *(_QWORD **)a6;
        v37 = ((uint64_t)v28 - *(_QWORD *)a6) >> 3;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61)
          goto LABEL_310;
        v39 = v27 - (_QWORD)v36;
        if (v39 >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v40);
          v36 = *(_QWORD **)a6;
          v28 = *(_QWORD **)(a6 + 8);
        }
        else
        {
          v41 = 0;
        }
        v52 = &v41[8 * v37];
        *(_QWORD *)v52 = v26[v20];
        v29 = v52 + 8;
        while (v28 != v36)
        {
          v53 = *--v28;
          *((_QWORD *)v52 - 1) = v53;
          v52 -= 8;
        }
        *(_QWORD *)a6 = v52;
        *(_QWORD *)(a6 + 8) = v29;
        *(_QWORD *)(a6 + 16) = &v41[8 * v40];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *v28 = v228[v20];
        v29 = v28 + 1;
      }
      *(_QWORD *)(a6 + 8) = v29;
      v54 = v230;
      v56 = *(_QWORD **)(a4 + 8);
      v55 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v56 >= v55)
      {
        v58 = *(_QWORD **)a4;
        v59 = ((uint64_t)v56 - *(_QWORD *)a4) >> 3;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61)
          goto LABEL_311;
        v61 = v55 - (_QWORD)v58;
        if (v61 >> 2 > v60)
          v60 = v61 >> 2;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
          v62 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62)
        {
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v226, v62);
          v58 = *(_QWORD **)a4;
          v56 = *(_QWORD **)(a4 + 8);
        }
        else
        {
          v63 = 0;
        }
        v64 = &v63[8 * v59];
        *(_QWORD *)v64 = v54[v20];
        v57 = v64 + 8;
        while (v56 != v58)
        {
          v65 = *--v56;
          *((_QWORD *)v64 - 1) = v65;
          v64 -= 8;
        }
        *(_QWORD *)a4 = v64;
        *(_QWORD *)(a4 + 8) = v57;
        *(_QWORD *)(a4 + 16) = &v63[8 * v62];
        if (v58)
          operator delete(v58);
      }
      else
      {
        *v56 = v230[v20];
        v57 = v56 + 1;
      }
      *(_QWORD *)(a4 + 8) = v57;
      v66 = v229;
      v68 = *(double **)(a5 + 8);
      v67 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v68 >= v67)
      {
        v69 = *(double **)a5;
        v70 = ((uint64_t)v68 - *(_QWORD *)a5) >> 3;
        v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 61)
          goto LABEL_312;
        v72 = v67 - (_QWORD)v69;
        if (v72 >> 2 > v71)
          v71 = v72 >> 2;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
          v73 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v73 = v71;
        if (v73)
        {
          v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v225, v73);
          v69 = *(double **)a5;
          v68 = *(double **)(a5 + 8);
        }
        else
        {
          v74 = 0;
        }
        v75 = (double *)&v74[8 * v70];
        *v75 = *(double *)&v66[v20];
        v76 = v75 + 1;
        while (v68 != v69)
        {
          v77 = *((_QWORD *)v68-- - 1);
          *((_QWORD *)v75-- - 1) = v77;
        }
LABEL_247:
        *(_QWORD *)a5 = v75;
        *(_QWORD *)(a5 + 8) = v76;
        *(_QWORD *)(a5 + 16) = &v74[8 * v73];
        if (v69)
          operator delete(v69);
        goto LABEL_249;
      }
    }
    *v68 = *(double *)&v66[v20];
    v173 = v68 + 1;
LABEL_230:
    v76 = v173;
LABEL_249:
    *(_QWORD *)(a5 + 8) = v76;
LABEL_250:
    v19 = 0;
    v14 = v17 + v14;
  }
  if ((v19 & (v231 != 0)) != 0)
  {
    v185 = v228;
    v187 = *(_QWORD **)(a6 + 8);
    v186 = *(_QWORD *)(a6 + 16);
    if ((unint64_t)v187 >= v186)
    {
      v189 = *(_QWORD **)a6;
      v190 = ((uint64_t)v187 - *(_QWORD *)a6) >> 3;
      v191 = v190 + 1;
      if ((unint64_t)(v190 + 1) >> 61)
LABEL_310:
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v192 = v186 - (_QWORD)v189;
      if (v192 >> 2 > v191)
        v191 = v192 >> 2;
      if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF8)
        v193 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v193 = v191;
      if (v193)
      {
        v194 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v193);
        v189 = *(_QWORD **)a6;
        v187 = *(_QWORD **)(a6 + 8);
      }
      else
      {
        v194 = 0;
      }
      v195 = &v194[8 * v190];
      v196 = &v194[8 * v193];
      *(_QWORD *)v195 = *v185;
      v188 = v195 + 8;
      while (v187 != v189)
      {
        v197 = *--v187;
        *((_QWORD *)v195 - 1) = v197;
        v195 -= 8;
      }
      *(_QWORD *)a6 = v195;
      *(_QWORD *)(a6 + 8) = v188;
      *(_QWORD *)(a6 + 16) = v196;
      if (v189)
        operator delete(v189);
    }
    else
    {
      *v187 = *v228;
      v188 = v187 + 1;
    }
    *(_QWORD *)(a6 + 8) = v188;
    v198 = v230;
    v200 = *(_QWORD **)(a4 + 8);
    v199 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v200 >= v199)
    {
      v202 = *(_QWORD **)a4;
      v203 = ((uint64_t)v200 - *(_QWORD *)a4) >> 3;
      v204 = v203 + 1;
      if ((unint64_t)(v203 + 1) >> 61)
LABEL_311:
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v205 = v199 - (_QWORD)v202;
      if (v205 >> 2 > v204)
        v204 = v205 >> 2;
      if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8)
        v206 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v206 = v204;
      if (v206)
      {
        v207 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v226, v206);
        v202 = *(_QWORD **)a4;
        v200 = *(_QWORD **)(a4 + 8);
      }
      else
      {
        v207 = 0;
      }
      v208 = &v207[8 * v203];
      v209 = &v207[8 * v206];
      *(_QWORD *)v208 = *v198;
      v201 = v208 + 8;
      while (v200 != v202)
      {
        v210 = *--v200;
        *((_QWORD *)v208 - 1) = v210;
        v208 -= 8;
      }
      *(_QWORD *)a4 = v208;
      *(_QWORD *)(a4 + 8) = v201;
      *(_QWORD *)(a4 + 16) = v209;
      if (v202)
        operator delete(v202);
    }
    else
    {
      *v200 = *v230;
      v201 = v200 + 1;
    }
    *(_QWORD *)(a4 + 8) = v201;
    v211 = v229;
    v213 = *(_QWORD **)(a5 + 8);
    v212 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v213 >= v212)
    {
      v215 = *(_QWORD **)a5;
      v216 = ((uint64_t)v213 - *(_QWORD *)a5) >> 3;
      v217 = v216 + 1;
      if ((unint64_t)(v216 + 1) >> 61)
LABEL_312:
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v218 = v212 - (_QWORD)v215;
      if (v218 >> 2 > v217)
        v217 = v218 >> 2;
      if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFF8)
        v219 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v219 = v217;
      if (v219)
      {
        v220 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v225, v219);
        v215 = *(_QWORD **)a5;
        v213 = *(_QWORD **)(a5 + 8);
      }
      else
      {
        v220 = 0;
      }
      v221 = &v220[8 * v216];
      v222 = &v220[8 * v219];
      *(_QWORD *)v221 = *v211;
      v214 = v221 + 8;
      while (v213 != v215)
      {
        v223 = *--v213;
        *((_QWORD *)v221 - 1) = v223;
        v221 -= 8;
      }
      *(_QWORD *)a5 = v221;
      *(_QWORD *)(a5 + 8) = v214;
      *(_QWORD *)(a5 + 16) = v222;
      if (v215)
        operator delete(v215);
    }
    else
    {
      *v213 = *v229;
      v214 = v213 + 1;
    }
    *(_QWORD *)(a5 + 8) = v214;
  }
  if (v230)
    MEMORY[0x1B5E2914C](v230, 0x1000C8000313F17);
  if (v229)
    MEMORY[0x1B5E2914C](v229, 0x1000C8000313F17);
  if (v228)
    MEMORY[0x1B5E2914C](v228, 0x1000C8000313F17);
  if (v227)
    MEMORY[0x1B5E2914C](v227, 0x1000C8000313F17);
  return 0;
}

void OZChannelPosition::generatePathFromShape(OZChannelPosition *this, const CMTime *a2, OZChannelCurve *a3)
{
  OZChannel *v6;
  OZChannel *v7;
  void **v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void **v32;
  unint64_t v33;
  unsigned int v34;
  char *__p;
  char *v36;
  char *v37;
  void *v38;
  char *v39;
  char *v40;
  void *v41[3];
  void *v42;
  _BYTE *v43;
  double v44;
  double v45;
  double v46;
  double v47;

  v47 = 0.0;
  v45 = 0.0;
  v46 = 0.0;
  v44 = 0.0;
  v6 = (OZChannel *)((char *)this + 136);
  (*(void (**)(OZChannelPosition *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  OZChannel::generateKeyframesFromDynamicCurve(v6, a2, (OZChannelCurve *)((char *)a3 + 288));
  v7 = (OZChannel *)((char *)this + 288);
  OZChannel::generateKeyframesFromDynamicCurve(v7, a2, (OZChannelCurve *)((char *)a3 + 520));
  OZChannel::getKeyframes(v6, 1, &v42);
  OZChannel::getKeyframes(v7, 1, v41);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  __p = 0;
  v36 = 0;
  v37 = 0;
  v8 = (void **)v42;
  if (v43 == v42)
  {
    v32 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if (v10)
      {
        v11 = v10 - 1;
        OZChannel::getKeyframe(v6, v8[v11], 0, &v45);
        OZChannel::getKeyframe(v7, *((void **)v41[0] + v11), 0, &v44);
        OZChannel::getKeyframe(v6, *((void **)v42 + v9), 0, &v47);
        OZChannel::getKeyframe(v7, *((void **)v41[0] + v9), 0, &v46);
        if (vabdd_f64(v45, v47) < 0.0000001 && vabdd_f64(v44, v46) < 0.0000001)
        {
          v12 = v42;
          v13 = v39;
          if (v39 >= v40)
          {
            v15 = (v39 - (_BYTE *)v38) >> 3;
            if ((unint64_t)(v15 + 1) >> 61)
              goto LABEL_54;
            v16 = (v40 - (_BYTE *)v38) >> 2;
            if (v16 <= v15 + 1)
              v16 = v15 + 1;
            if ((unint64_t)(v40 - (_BYTE *)v38) >= 0x7FFFFFFFFFFFFFF8)
              v17 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v17 = v16;
            if (v17)
              v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v40, v17);
            else
              v18 = 0;
            v19 = &v18[8 * v15];
            *(_QWORD *)v19 = v12[v9];
            v14 = v19 + 8;
            v21 = (char *)v38;
            v20 = v39;
            if (v39 != v38)
            {
              do
              {
                v22 = *((_QWORD *)v20 - 1);
                v20 -= 8;
                *((_QWORD *)v19 - 1) = v22;
                v19 -= 8;
              }
              while (v20 != v21);
              v20 = (char *)v38;
            }
            v38 = v19;
            v39 = v14;
            v40 = &v18[8 * v17];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *(_QWORD *)v39 = *((_QWORD *)v42 + v9);
            v14 = v13 + 8;
          }
          v39 = v14;
          v23 = v41[0];
          if (v36 >= v37)
          {
            v25 = (v36 - __p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
LABEL_54:
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v26 = (v37 - __p) >> 2;
            if (v26 <= v25 + 1)
              v26 = v25 + 1;
            if ((unint64_t)(v37 - __p) >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v37, v27);
            else
              v28 = 0;
            v29 = &v28[8 * v25];
            *(_QWORD *)v29 = v23[v9];
            v24 = v29 + 8;
            v30 = v36;
            if (v36 != __p)
            {
              do
              {
                v31 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v29 - 1) = v31;
                v29 -= 8;
              }
              while (v30 != __p);
              v30 = __p;
            }
            __p = v29;
            v37 = &v28[8 * v27];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v36 = *((_QWORD *)v41[0] + v9);
            v24 = v36 + 8;
          }
          v36 = v24;
        }
      }
      v8 = (void **)v42;
      v9 = ++v10;
    }
    while (v10 < (unint64_t)((v43 - (_BYTE *)v42) >> 3));
    v32 = (void **)v38;
    if (v39 != v38)
    {
      v33 = 0;
      v34 = 1;
      do
      {
        OZChannel::deleteKeyframe(v6, v32[v33]);
        OZChannel::deleteKeyframe(v7, *(void **)&__p[8 * v33]);
        v33 = v34;
        v32 = (void **)v38;
        ++v34;
      }
      while (v33 < (v39 - (_BYTE *)v38) >> 3);
    }
  }
  if (__p)
  {
    operator delete(__p);
    v32 = (void **)v38;
  }
  if (v32)
  {
    v39 = (char *)v32;
    operator delete(v32);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
}

void sub_1B2C8DF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const __CFString *OZChannelPosition::getObjCWrapperName(OZChannelPosition *this)
{
  return CFSTR("CHChannelPosition");
}

uint64_t OZChannelPosition::OZChannelPosition_valueImpl::getInstance(OZChannelPosition::OZChannelPosition_valueImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelPosition::OZChannelPosition_valueImpl::getInstance(void)::_OZChannelPosition_value_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelPosition::OZChannelPosition_valueImpl::getInstance(void)::_OZChannelPosition_value_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelPosition::OZChannelPosition_valueImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelPosition::OZChannelPosition_valueImpl::_OZChannelPosition_value;
}

void std::__call_once_param<std::tuple<OZChannelPosition::OZChannelPosition_valueImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPosition::OZChannelPosition_valueImpl *v0;

  if (!OZChannelPosition::OZChannelPosition_valueImpl::_OZChannelPosition_value)
  {
    v0 = (OZChannelPosition::OZChannelPosition_valueImpl *)operator new();
    OZChannelPosition::OZChannelPosition_valueImpl::OZChannelPosition_valueImpl(v0);
    OZChannelPosition::OZChannelPosition_valueImpl::_OZChannelPosition_value = (uint64_t)v0;
  }
}

void sub_1B2C8E084(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPosition::OZChannelPosition_valueImpl *OZChannelPosition::OZChannelPosition_valueImpl::OZChannelPosition_valueImpl(OZChannelPosition::OZChannelPosition_valueImpl *this)
{
  OZCurveDouble *v2;

  v2 = (OZCurveDouble *)operator new();
  OZCurveDouble::OZCurveDouble(v2, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, (OZCurve *)v2, 0.0, 1, 1);
  PCSingleton::PCSingleton((OZChannelPosition::OZChannelPosition_valueImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E655F090;
  *((_QWORD *)this + 5) = &unk_1E655F0B0;
  OZChannelImpl::setInterpolation((OZChannelImpl *)this);
  return this;
}

void sub_1B2C8E140(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;
  PCSingleton *v2;

  PCSingleton::~PCSingleton(v2);
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelPosition::OZChannelPosition_valueInfo::getInstance(OZChannelPosition::OZChannelPosition_valueInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelPosition::OZChannelPosition_valueInfo::getInstance(void)::OZChannelPosition_valueInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelPosition::OZChannelPosition_valueInfo::getInstance(void)::OZChannelPosition_valueInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelPosition::OZChannelPosition_valueInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelPosition::OZChannelPosition_valueInfo::_OZChannelPosition_valueInfo;
}

void std::__call_once_param<std::tuple<OZChannelPosition::OZChannelPosition_valueInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPosition::OZChannelPosition_valueInfo *v0;
  OZFactoryBase *v1;

  if (!OZChannelPosition::OZChannelPosition_valueInfo::_OZChannelPosition_valueInfo)
  {
    v0 = (OZChannelPosition::OZChannelPosition_valueInfo *)operator new();
    OZChannelPosition::OZChannelPosition_valueInfo::OZChannelPosition_valueInfo(v0, v1);
    OZChannelPosition::OZChannelPosition_valueInfo::_OZChannelPosition_valueInfo = (uint64_t)v0;
  }
}

void sub_1B2C8E22C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelPosition::OZChannelPosition_valueInfo *OZChannelPosition::OZChannelPosition_valueInfo::OZChannelPosition_valueInfo(OZChannelPosition::OZChannelPosition_valueInfo *this, OZFactoryBase *a2)
{
  PCString v4;

  TXParagraphStyleFolder_Factory::createInstance(this, a2);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Channel Position Suffix"));
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -3.40282347e38, 3.40282347e38, 1.0, 0.01, 1.0, &v4);
  PCString::~PCString(&v4);
  PCSingleton::PCSingleton((OZChannelPosition::OZChannelPosition_valueInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E655F108;
  *((_QWORD *)this + 10) = &unk_1E655F128;
  return this;
}

void sub_1B2C8E2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelPosition3D::OZChannelPosition3D(OZChannelPosition3D *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6)
{
  uint64_t v7;
  OZFactoryBase *v8;
  OZChannelPosition::OZChannelPosition_valueImpl *v9;
  OZChannelImpl *Instance;
  OZChannelPosition3D_Factory *v11;
  OZChannelPosition::OZChannelPosition_valueInfo *v12;
  OZChannelInfo *v13;
  PCString v14;

  OZChannelPosition::OZChannelPosition(this, a2, a3, a4, a5, a6, 0, 0);
  *(_QWORD *)v7 = &off_1E655F180;
  *(_QWORD *)(v7 + 16) = &unk_1E655F4D8;
  *(_QWORD *)(v7 + 704) = 0;
  *(_QWORD *)(v7 + 720) = 0;
  *(_QWORD *)(v7 + 712) = 0;
  *(_BYTE *)(v7 + 728) = 1;
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v7, v8);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Z"));
  Instance = (OZChannelImpl *)OZChannelPosition::OZChannelPosition_valueImpl::getInstance(v9);
  OZChannelDouble::OZChannelDouble((OZChannelPosition3D *)((char *)this + 736), &v14, (OZChannelFolder *)this, 3u, 0, Instance, 0);
  PCString::~PCString(&v14);
  v12 = (OZChannelPosition::OZChannelPosition_valueInfo *)OZChannelPosition3D_Factory::getInstance(v11);
  *((_QWORD *)this + 1) = v12;
  v13 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance(v12);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 736), v13);
}

void sub_1B2C8E3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelPosition *v10;
  void *v12;

  PCString::~PCString(&a10);
  v12 = (void *)*((_QWORD *)v10 + 88);
  if (v12)
  {
    *((_QWORD *)v10 + 89) = v12;
    operator delete(v12);
  }
  OZChannelPosition::~OZChannelPosition(v10);
  _Unwind_Resume(a1);
}

void OZChannelPosition3D::OZChannelPosition3D(OZChannelPosition3D *this, double a2, double a3, double a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, unsigned int a9)
{
  uint64_t v11;
  OZFactoryBase *v12;
  OZChannelPosition::OZChannelPosition_valueImpl *v13;
  OZChannelImpl *Instance;
  OZChannelPosition3D_Factory *v15;
  OZChannelPosition::OZChannelPosition_valueInfo *v16;
  OZChannelInfo *v17;
  PCString v18;

  OZChannelPosition::OZChannelPosition(this, a2, a3, a5, a6, a7, a8, a9, 0, 0);
  *(_QWORD *)v11 = &off_1E655F180;
  *(_QWORD *)(v11 + 16) = &unk_1E655F4D8;
  *(_QWORD *)(v11 + 704) = 0;
  *(_QWORD *)(v11 + 720) = 0;
  *(_QWORD *)(v11 + 712) = 0;
  *(_BYTE *)(v11 + 728) = 1;
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v11, v12);
  PCURL::PCURL((PCURL *)&v18, CFSTR("Channel Z"));
  Instance = (OZChannelImpl *)OZChannelPosition::OZChannelPosition_valueImpl::getInstance(v13);
  OZChannelDouble::OZChannelDouble((OZChannelPosition3D *)((char *)this + 736), a4, &v18, (OZChannelFolder *)this, 3u, 0, Instance, 0);
  PCString::~PCString(&v18);
  v16 = (OZChannelPosition::OZChannelPosition_valueInfo *)OZChannelPosition3D_Factory::getInstance(v15);
  *((_QWORD *)this + 1) = v16;
  v17 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance(v16);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 736), v17);
}

void sub_1B2C8E4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelPosition *v10;
  void *v12;

  PCString::~PCString(&a10);
  v12 = (void *)*((_QWORD *)v10 + 88);
  if (v12)
  {
    *((_QWORD *)v10 + 89) = v12;
    operator delete(v12);
  }
  OZChannelPosition::~OZChannelPosition(v10);
  _Unwind_Resume(a1);
}

void OZChannelPosition3D::OZChannelPosition3D(OZChannelPosition3D *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v6;
  OZFactoryBase *v7;
  OZChannelPosition::OZChannelPosition_valueImpl *v8;
  OZChannelImpl *Instance;
  OZChannelPosition::OZChannelPosition_valueInfo *v10;
  OZChannelInfo *v11;
  PCString v12;

  OZChannelPosition::OZChannelPosition(this, a2, a3, a4, a5, 0, 0);
  *(_QWORD *)v6 = &off_1E655F180;
  *(_QWORD *)(v6 + 16) = &unk_1E655F4D8;
  *(_QWORD *)(v6 + 704) = 0;
  *(_QWORD *)(v6 + 720) = 0;
  *(_QWORD *)(v6 + 712) = 0;
  *(_BYTE *)(v6 + 728) = 1;
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v6, v7);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Z"));
  Instance = (OZChannelImpl *)OZChannelPosition::OZChannelPosition_valueImpl::getInstance(v8);
  OZChannelDouble::OZChannelDouble((OZChannelPosition3D *)((char *)this + 736), &v12, (OZChannelFolder *)this, 3u, 0, Instance, 0);
  PCString::~PCString(&v12);
  v11 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance(v10);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 736), v11);
}

void sub_1B2C8E608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelPosition *v10;
  OZChannel *v11;
  void *v13;

  OZChannel::~OZChannel(v11);
  v13 = (void *)*((_QWORD *)v10 + 88);
  if (v13)
  {
    *((_QWORD *)v10 + 89) = v13;
    operator delete(v13);
  }
  OZChannelPosition::~OZChannelPosition(v10);
  _Unwind_Resume(a1);
}

void OZChannelPosition3D::OZChannelPosition3D(OZChannelPosition3D *this, const OZChannelPosition3D *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannelPosition::OZChannelPosition(this, a2, a3);
  *(_QWORD *)v5 = &off_1E655F180;
  *(_QWORD *)(v5 + 16) = &unk_1E655F4D8;
  *(_QWORD *)(v5 + 704) = 0;
  *(_QWORD *)(v5 + 720) = 0;
  *(_QWORD *)(v5 + 712) = 0;
  *(_BYTE *)(v5 + 728) = *((_BYTE *)a2 + 728);
  OZChannel::OZChannel((OZChannel *)(v5 + 736), (const OZChannelBase *)((char *)a2 + 736), (OZChannelFolder *)this);
  *((_QWORD *)this + 92) = &off_1E6551358;
  *((_QWORD *)this + 94) = &unk_1E65516B8;
}

void sub_1B2C8E6D8(_Unwind_Exception *a1)
{
  OZChannelPosition *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 89) = v4;
    operator delete(v4);
  }
  OZChannelPosition::~OZChannelPosition(v1);
  _Unwind_Resume(a1);
}

void OZChannelPosition3D::~OZChannelPosition3D(OZChannelPosition3D *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E655F180;
  *((_QWORD *)this + 2) = &unk_1E655F4D8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 736));
  v2 = (void *)*((_QWORD *)this + 88);
  if (v2)
  {
    *((_QWORD *)this + 89) = v2;
    operator delete(v2);
  }
  OZChannelPosition::~OZChannelPosition(this);
}

{
  OZChannelPosition3D::~OZChannelPosition3D(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelPosition3D::~OZChannelPosition3D(OZChannelPosition3D *this)
{
  OZChannelPosition3D::~OZChannelPosition3D((OZChannelPosition3D *)((char *)this - 16));
}

{
  OZChannelPosition3D::~OZChannelPosition3D((OZChannelPosition3D *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

OZChannelPosition3D *OZChannelPosition3D::clone(OZChannelPosition3D *this)
{
  OZChannelPosition3D *v2;

  v2 = (OZChannelPosition3D *)operator new();
  OZChannelPosition3D::OZChannelPosition3D(v2, this, 0);
  return v2;
}

void sub_1B2C8E7EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40CC6A35F7);
  _Unwind_Resume(a1);
}

void OZChannelPosition3D::copy(OZChannelPosition3D *this, const OZChannelBase *a2, char a3)
{
  char *v6;
  char *v7;

  OZChannelPosition::copy(this, a2, a3);
  if (a2)
  {
    if (v6)
    {
      v7 = v6;
      PCSpinLock::lock((os_unfair_lock_t)this + 175);
      *((_QWORD *)this + 89) = *((_QWORD *)this + 88);
      PCSpinLock::unlock((os_unfair_lock_t)this + 175);
      OZChannel::copy((OZChannel *)((char *)this + 736), (const OZChannelBase *)(v7 + 736), a3);
      *((_BYTE *)this + 728) = v7[728];
    }
  }
}

uint64_t OZChannelPosition3D::setPosition(OZChannelPosition3D *this, const CMTime *a2, double a3, double a4, double a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, 0.0);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, 0.0);
  v13 = v12;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 736), a2, 0.0);
  return OZChannelPosition3D::offsetPosition(this, a2, a3 - v11, a4 - v13, a5 - v14, 1);
}

uint64_t OZChannelPosition3D::offsetPosition(OZChannelPosition3D *this, const CMTime *a2, double a3, double a4, double a5, char a6)
{
  OZChannel *v12;
  double CurveValue;
  double v14;
  double v15;
  CMTime v17;

  memset(&v17, 0, sizeof(v17));
  v12 = (OZChannel *)((char *)this + 136);
  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)this + 328))(&v17);
  CurveValue = OZChannel::getCurveValue(v12, &v17, 0);
  v14 = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v17, 0);
  v15 = OZChannel::getCurveValue((OZChannel *)((char *)this + 736), &v17, 0);
  if ((a6 & 1) != 0)
    return OZChannelPosition3D::setValue(this, a2, CurveValue + a3, v14 + a4, v15 + a5);
  OZChannel::willBeModified(v12, 1);
  OZChannel::offsetChannel(v12, a2, CurveValue + a3);
  OZChannel::willBeModified((OZChannel *)((char *)this + 288), 1);
  OZChannel::offsetChannel((OZChannel *)((char *)this + 288), a2, v14 + a4);
  OZChannel::willBeModified((OZChannel *)((char *)this + 736), 1);
  return OZChannel::offsetChannel((OZChannel *)((char *)this + 736), a2, v15 + a5);
}

uint64_t OZChannelPosition3D::setValue(OZChannelPosition3D *this, const CMTime *a2, double a3, double a4, double a5)
{
  OZChannel *v10;
  uint64_t result;

  v10 = (OZChannel *)((char *)this + 136);
  (*(void (**)(char *, const CMTime *, _QWORD))(*((_QWORD *)this + 17) + 712))((char *)this + 136, a2, 0);
  (*((void (**)(OZChannel *, const CMTime *, _QWORD, double))v10[1].var0 + 89))(v10 + 1, a2, 0, a4);
  (*((void (**)(OZCurve **, const CMTime *, _QWORD, double))v10[3].var18 + 89))(&v10[3].var18, a2, 0, a5);
  result = OZChannel::isParametricCurveClosed(v10);
  if ((result & 1) == 0)
    return OZChannelPosition3D::derivePath(this, a2, a3, a4, a5, 0);
  return result;
}

uint64_t OZChannelPosition3D::derivePath(OZChannelPosition3D *this, const CMTime *a2, double a3, double a4, double a5, int a6)
{
  OZChannel *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int PreviousKeyframe;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  double CurveValue;
  void *v24;
  void *v25;
  uint64_t v26;
  CMTime *v27;
  void *v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  double v32;
  int v33;
  int v34;
  uint64_t v35;
  double v36;
  _BOOL4 v37;
  double v38;
  int v39;
  int v40;
  _BOOL4 v41;
  void *v42;
  void *v43;
  void *v44;
  double v45;
  double v46;
  double v47;
  OZChannel *v48;
  void *v49;
  void *v50;
  char KeyframeFlags;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _BOOL4 v58;
  int v59;
  CMTime *v60;
  BOOL v61;
  void *v62;
  int v63;
  OZChannel *v64;
  OZChannel *v65;
  void *v66;
  double v67;
  OZChannel *v68;
  void *v69;
  double v70;
  int v71;
  int v72;
  int v73;
  OZChannel *v74;
  void *v75;
  int v76;
  int v77;
  int v78;
  double v79;
  void *v80;
  OZChannel *v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL4 v88;
  _BOOL4 v89;
  int v90;
  BOOL v91;
  int v92;
  double v93;
  double v94;
  double v95;
  double v96;
  void *v97;
  void *v98;
  OZChannel *v99;
  void *v100;
  double v101;
  int v102;
  int v103;
  int v104;
  OZChannel *v105;
  void *v106;
  int v107;
  int v108;
  int v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  int v116;
  int v117;
  void *v118;
  void *v119;
  void *v120;
  int v121;
  int v122;
  _BOOL4 v123;
  void *v124;
  void *v125;
  OZChannel *v126;
  OZChannel *v127;
  void *v128;
  double v129;
  uint64_t Keyframe;
  int NextKeyframe;
  double v132;
  void *v133;
  CMTime v134;
  CMTime v135;
  double v136;
  CMTime v137;
  CMTime v138;
  CMTime v139;
  CMTime v140;
  CMTime v141;
  CMTime v142;
  CMTime v143;
  CMTime v144;
  CMTime v145;
  CMTime v146;
  CMTime v147;
  CMTime v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  CMTime v161;
  CMTime v162;

  v159 = 0.0;
  v160 = 0.0;
  v157 = 0.0;
  v158 = 0.0;
  v156 = 0.0;
  v155 = 0.0;
  v154 = 0.0;
  v153 = 0.0;
  v152 = 0.0;
  v151 = 0.0;
  v150 = 0.0;
  v149 = 0.0;
  v148 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v147 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v146 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v145 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v144 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v143 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v142 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v141 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v140 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v139 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v138 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v137 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v12 = (OZChannel *)((char *)this + 136);
  v136 = 0.0;
  if (OZChannel::isParametric((OZChannel *)((char *)this + 136)) && a6)
    OZChannel2D::deriveChannel(this, a2);
  result = OZChannel::isParametricCurveClosed(v12);
  if ((result & 1) != 0)
    return result;
  memset(&v135, 0, sizeof(v135));
  (*(void (**)(CMTime *__return_ptr, OZChannelPosition3D *))(*(_QWORD *)this + 320))(&v134, this);
  v162 = *a2;
  v161 = v134;
  PC_CMTimeSaferSubtract(&v162, &v161, (uint64_t)&v135);
  Keyframe = OZChannel::getKeyframe(v12, &v135);
  v14 = OZChannel::getKeyframe((OZChannel *)((char *)this + 288), &v135);
  v15 = OZChannel::getKeyframe((OZChannel *)((char *)this + 736), &v135);
  PreviousKeyframe = OZChannel::getPreviousKeyframe(v12, &v135, &v148, &v158);
  v17 = 0;
  if (PreviousKeyframe)
    v17 = OZChannel::getKeyframe(v12, &v148);
  if (OZChannel::getPreviousKeyframe((OZChannel *)((char *)this + 288), &v135, &v147, &v154))
  {
    v18 = OZChannel::getKeyframe((OZChannel *)((char *)this + 288), &v147);
  }
  else
  {
    PreviousKeyframe = 0;
    v18 = 0;
  }
  if (OZChannel::getPreviousKeyframe((OZChannel *)((char *)this + 736), &v135, &v146, &v150))
  {
    v19 = OZChannel::getKeyframe((OZChannel *)((char *)this + 736), &v146);
  }
  else
  {
    PreviousKeyframe = 0;
    v19 = 0;
  }
  v128 = (void *)v14;
  v120 = (void *)v18;
  v118 = (void *)v19;
  if (v17)
  {
    v20 = v18;
    v21 = v18 != 0;
    if (!v20)
    {
      v22 = v19;
      CurveValue = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v148, 1);
      v19 = v22;
      v154 = CurveValue;
    }
    v24 = (void *)v15;
    v25 = (void *)v17;
    if (v19)
    {
      v122 = 1;
      goto LABEL_26;
    }
    v27 = &v148;
    goto LABEL_22;
  }
  v24 = (void *)v15;
  v25 = 0;
  if (!v18)
  {
    if (v19)
    {
      v122 = 1;
      v158 = OZChannel::getCurveValue(v12, &v146, 1);
      v21 = 0;
      v154 = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v146, 1);
    }
    else
    {
      v122 = 0;
      v21 = 0;
    }
    goto LABEL_26;
  }
  v122 = 1;
  v26 = v19;
  v158 = OZChannel::getCurveValue(v12, &v147, 1);
  v21 = 1;
  if (!v26)
  {
    v27 = &v147;
LABEL_22:
    v122 = 0;
    v150 = OZChannel::getCurveValue((OZChannel *)((char *)this + 736), v27, 1);
  }
LABEL_26:
  NextKeyframe = OZChannel::getNextKeyframe(v12, &v135, &v145, &v157);
  if (NextKeyframe)
    v133 = (void *)OZChannel::getKeyframe(v12, &v145);
  else
    v133 = 0;
  v28 = v25;
  if (OZChannel::getNextKeyframe((OZChannel *)((char *)this + 288), &v135, &v144, &v153))
  {
    v125 = (void *)OZChannel::getKeyframe((OZChannel *)((char *)this + 288), &v144);
  }
  else
  {
    v125 = 0;
    NextKeyframe = 0;
  }
  if (OZChannel::getNextKeyframe((OZChannel *)((char *)this + 736), &v135, &v143, &v149))
  {
    v29 = OZChannel::getKeyframe((OZChannel *)((char *)this + 736), &v143);
  }
  else
  {
    v29 = 0;
    NextKeyframe = 0;
  }
  v124 = v24;
  v126 = (OZChannel *)((char *)this + 288);
  v119 = (void *)v29;
  if (v133)
  {
    v30 = v125 != 0;
    if (!v125)
    {
      v31 = v29;
      v32 = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v145, 1);
      v30 = 0;
      v29 = v31;
      v153 = v32;
    }
    v33 = a6;
    if (v29)
    {
      v34 = 1;
      goto LABEL_48;
    }
    v37 = v30;
    v36 = OZChannel::getCurveValue((OZChannel *)((char *)this + 736), &v145, 1);
    v30 = v37;
    goto LABEL_44;
  }
  if (!v125)
  {
    v33 = a6;
    if (v29)
    {
      v34 = 1;
      v157 = OZChannel::getCurveValue(v12, &v143, 1);
      v38 = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v143, 1);
      v30 = 0;
      v153 = v38;
    }
    else
    {
      v34 = 0;
      v30 = 0;
    }
    goto LABEL_48;
  }
  v33 = a6;
  v34 = 1;
  v35 = v29;
  v157 = OZChannel::getCurveValue(v12, &v144, 1);
  v30 = 1;
  if (!v35)
  {
    v36 = OZChannel::getCurveValue((OZChannel *)((char *)this + 736), &v144, 1);
    v30 = 1;
LABEL_44:
    v34 = 0;
    v149 = v36;
  }
LABEL_48:
  v121 = v33;
  v127 = (OZChannel *)((char *)this + 736);
  if (v133)
    v39 = 1;
  else
    v39 = v34 | v30;
  if (v28)
    v40 = 1;
  else
    v40 = v122 | v21;
  v41 = v30;
  result = OZChannelBase::testFlag((OZChannelBase *)this, 0x200000);
  v42 = v24;
  v44 = v128;
  v43 = (void *)Keyframe;
  if ((result & 1) == 0)
  {
    v123 = v41;
    if (((v39 | PreviousKeyframe & v40 ^ 1) & 1) != 0)
      goto LABEL_106;
    v45 = a3 - v158;
    v46 = a4 - v154;
    v47 = a5 - v150;
    if (v28)
    {
      v48 = v12;
      v49 = v28;
    }
    else
    {
      if (v21)
      {
        v50 = v120;
        KeyframeFlags = OZChannel::getKeyframeFlags(v126, v120);
        goto LABEL_62;
      }
      v48 = v127;
      v49 = v118;
    }
    KeyframeFlags = OZChannel::getKeyframeFlags(v48, v49);
    v50 = v120;
LABEL_62:
    v52 = v45 / 6.0;
    v53 = v46 / 6.0;
    if (KeyframeFlags < 0)
    {
LABEL_96:
      if (v43)
      {
        v74 = v12;
        v75 = v43;
      }
      else if (v44)
      {
        v74 = v126;
        v75 = v44;
      }
      else
      {
        v74 = v127;
        v75 = v124;
      }
      result = OZChannel::getKeyframeFlags(v74, v75);
      if ((result & 0x80) == 0 || v121)
      {
        OZChannel::getKeyframeInputTangents(v12, v43, &v136, 0, 1);
        OZChannel::setKeyframeInputTangents(v12, v43, v136, -v52, 1);
        OZChannel::getKeyframeInputTangents(v126, v44, &v136, 0, 1);
        OZChannel::setKeyframeInputTangents(v126, v44, v136, -v53, 1);
        OZChannel::getKeyframeInputTangents(v127, v124, &v136, 0, 1);
        OZChannel::setKeyframeInputTangents(v127, v124, v136, -(v47 / 6.0), 1);
        if (v121)
        {
          OZChannel::getKeyframeOutputTangents(v12, v43, &v136, 0, 1);
          OZChannel::setKeyframeOutputTangents(v12, v43, v136, 0.0, 1);
          OZChannel::getKeyframeOutputTangents(v126, v44, &v136, 0, 1);
          OZChannel::setKeyframeOutputTangents(v126, v44, v136, 0.0, 1);
          OZChannel::getKeyframeOutputTangents(v127, v124, &v136, 0, 1);
          OZChannel::setKeyframeOutputTangents(v127, v124, v136, 0.0, 1);
        }
        v76 = OZChannel::getKeyframeFlags(v12, v43);
        OZChannel::setKeyframeFlags(v12, v43, v76 & 0xFFFFFF7F);
        v77 = OZChannel::getKeyframeFlags(v126, v44);
        OZChannel::setKeyframeFlags(v126, v44, v77 & 0xFFFFFF7F);
        v78 = OZChannel::getKeyframeFlags(v127, v124);
        result = OZChannel::setKeyframeFlags(v127, v124, v78 & 0xFFFFFF7F);
      }
LABEL_106:
      if (((v40 | NextKeyframe & v39 ^ 1) & 1) != 0)
      {
LABEL_155:
        if ((v40 & v39) == 1)
        {
          if (v121)
          {
            v110 = (v157 - v158) / 6.0;
            v111 = (v153 - v154) / 6.0;
            v112 = (v149 - v150) / 6.0;
            OZChannel::getKeyframeInputTangents(v12, v43, &v136, 0, 1);
            OZChannel::setKeyframeInputTangents(v12, v43, v136, -(v110 * 0.5), 1);
            OZChannel::getKeyframeInputTangents(v126, v44, &v136, 0, 1);
            OZChannel::setKeyframeInputTangents(v126, v44, v136, -(v111 * 0.5), 1);
            OZChannel::getKeyframeInputTangents(v127, v42, &v136, 0, 1);
            OZChannel::setKeyframeInputTangents(v127, v42, v136, -(v112 * 0.5), 1);
            OZChannel::getKeyframeOutputTangents(v12, v43, &v136, 0, 1);
            OZChannel::setKeyframeOutputTangents(v12, v43, v136, v110 * 0.5, 1);
            OZChannel::getKeyframeOutputTangents(v126, v44, &v136, 0, 1);
            OZChannel::setKeyframeOutputTangents(v126, v44, v136, v111 * 0.5, 1);
            OZChannel::getKeyframeOutputTangents(v127, v42, &v136, 0, 1);
            return OZChannel::setKeyframeOutputTangents(v127, v42, v136, v112 * 0.5, 1);
          }
        }
        return result;
      }
      v79 = v149 - a5;
      v80 = v133;
      if (v133)
      {
        v81 = v12;
      }
      else if (v123)
      {
        v80 = v125;
        v81 = v126;
      }
      else
      {
        v81 = v127;
        v80 = v119;
      }
      v82 = (v157 - a3) / 6.0;
      v83 = (v153 - a4) / 6.0;
      v84 = v79 / 6.0;
      if ((OZChannel::getKeyframeFlags(v81, v80) & 0x80) != 0)
      {
LABEL_145:
        if (v43)
        {
          v105 = v12;
          v106 = v43;
        }
        else if (v44)
        {
          v105 = v126;
          v106 = v44;
        }
        else
        {
          v105 = v127;
          v106 = v42;
        }
        result = OZChannel::getKeyframeFlags(v105, v106);
        if ((result & 0x80) == 0 || v121)
        {
          OZChannel::getKeyframeOutputTangents(v12, v43, &v136, 0, 1);
          OZChannel::setKeyframeOutputTangents(v12, v43, v136, v82, 1);
          OZChannel::getKeyframeOutputTangents(v126, v44, &v136, 0, 1);
          OZChannel::setKeyframeOutputTangents(v126, v44, v136, v83, 1);
          OZChannel::getKeyframeOutputTangents(v127, v42, &v136, 0, 1);
          OZChannel::setKeyframeOutputTangents(v127, v42, v136, v84, 1);
          if (v121)
          {
            OZChannel::getKeyframeInputTangents(v12, v43, &v136, 0, 1);
            OZChannel::setKeyframeInputTangents(v12, v43, v136, 0.0, 1);
            OZChannel::getKeyframeInputTangents(v126, v44, &v136, 0, 1);
            OZChannel::setKeyframeInputTangents(v126, v44, v136, 0.0, 1);
            OZChannel::getKeyframeInputTangents(v127, v42, &v136, 0, 1);
            OZChannel::setKeyframeInputTangents(v127, v42, v136, 0.0, 1);
          }
          v107 = OZChannel::getKeyframeFlags(v12, v43);
          OZChannel::setKeyframeFlags(v12, v43, v107 & 0xFFFFFF7F);
          v108 = OZChannel::getKeyframeFlags(v126, v44);
          OZChannel::setKeyframeFlags(v126, v44, v108 & 0xFFFFFF7F);
          v109 = OZChannel::getKeyframeFlags(v127, v42);
          result = OZChannel::setKeyframeFlags(v127, v42, v109 & 0xFFFFFF7F);
        }
        goto LABEL_155;
      }
      if (OZChannel::getNextKeyframe(v12, &v145, &v139, &v159))
        v85 = OZChannel::getKeyframe(v12, &v139);
      else
        v85 = 0;
      v117 = v40;
      if (OZChannel::getNextKeyframe(v126, &v144, &v138, &v155))
        v86 = OZChannel::getKeyframe(v126, &v138);
      else
        v86 = 0;
      if (OZChannel::getNextKeyframe(v127, &v143, &v137, &v151))
        v87 = OZChannel::getKeyframe(v127, &v137);
      else
        v87 = 0;
      v88 = v86 != 0;
      if (v85)
      {
        if (!v86)
          v155 = OZChannel::getCurveValue(v126, &v139, 1);
        if (v87)
        {
          v89 = 1;
        }
        else
        {
          v89 = 0;
          v151 = OZChannel::getCurveValue(v127, &v139, 1);
        }
        v90 = v88;
        goto LABEL_133;
      }
      if (v86)
      {
        v90 = 1;
        v159 = OZChannel::getCurveValue(v12, &v138, 1);
        v89 = v87 != 0;
        if (!v87)
        {
          v42 = v124;
          if (!v123)
            goto LABEL_134;
          goto LABEL_130;
        }
      }
      else
      {
        if (!v87)
        {
          v42 = v124;
          if (!v123)
          {
            v89 = 0;
            v90 = 0;
LABEL_134:
            v91 = vabdd_f64(v159, v157) < 0.0000001
               && vabdd_f64(v155, v153) < 0.0000001
               && vabdd_f64(v151, v149) < 0.0000001;
            v44 = v128;
            v92 = v89 | v90;
            if (v85)
              v92 = 1;
            if (v92 != 1 || v91)
            {
              v97 = v133;
              OZChannel::getKeyframeInputTangents(v12, v133, &v136, 0, 1);
              OZChannel::setKeyframeInputTangents(v12, v133, v136, -v82, 1);
              v98 = v125;
              OZChannel::getKeyframeInputTangents(v126, v125, &v136, 0, 1);
              OZChannel::setKeyframeInputTangents(v126, v125, v136, -v83, 1);
              v99 = v127;
              v100 = v119;
              OZChannel::getKeyframeInputTangents(v127, v119, &v136, 0, 1);
              OZChannel::setKeyframeInputTangents(v127, v119, v136, -v84, 1);
            }
            else
            {
              v93 = (a3 - v159) / 6.0;
              v129 = (a4 - v155) / 6.0 * 0.5;
              v94 = a5 - v151;
              v95 = v83;
              v96 = v94 / 6.0;
              v132 = v94 / 6.0 * 0.5;
              v97 = v133;
              OZChannel::getKeyframeInputTangents(v12, v133, &v136, 0, 1);
              OZChannel::setKeyframeInputTangents(v12, v133, v136, -(v93 * 0.5), 1);
              v98 = v125;
              OZChannel::getKeyframeInputTangents(v126, v125, &v136, 0, 1);
              v84 = v79 / 6.0;
              OZChannel::setKeyframeInputTangents(v126, v125, v136, -v129, 1);
              v99 = v127;
              v100 = v119;
              OZChannel::getKeyframeInputTangents(v127, v119, &v136, 0, 1);
              v101 = -(v96 * 0.5);
              v83 = v95;
              OZChannel::setKeyframeInputTangents(v127, v119, v136, v101, 1);
              OZChannel::getKeyframeOutputTangents(v12, v133, &v136, 0, 1);
              OZChannel::setKeyframeOutputTangents(v12, v133, v136, v93 * 0.5, 1);
              OZChannel::getKeyframeOutputTangents(v126, v125, &v136, 0, 1);
              OZChannel::setKeyframeOutputTangents(v126, v125, v136, v129, 1);
              OZChannel::getKeyframeOutputTangents(v127, v119, &v136, 0, 1);
              OZChannel::setKeyframeOutputTangents(v127, v119, v136, v132, 1);
            }
            v43 = (void *)Keyframe;
            v102 = OZChannel::getKeyframeFlags(v12, v97);
            OZChannel::setKeyframeFlags(v12, v97, v102 & 0xFFFFFF7F);
            v103 = OZChannel::getKeyframeFlags(v126, v98);
            OZChannel::setKeyframeFlags(v126, v98, v103 & 0xFFFFFF7F);
            v104 = OZChannel::getKeyframeFlags(v99, v100);
            OZChannel::setKeyframeFlags(v99, v100, v104 & 0xFFFFFF7F);
            v40 = v117;
            goto LABEL_145;
          }
LABEL_130:
          v89 = 0;
          v151 = OZChannel::getCurveValue(v127, &v138, 1);
          v90 = v88;
          goto LABEL_134;
        }
        v89 = 1;
        v159 = OZChannel::getCurveValue(v12, &v137, 1);
        v90 = 0;
        v155 = OZChannel::getCurveValue(v126, &v137, 1);
      }
LABEL_133:
      v42 = v124;
      goto LABEL_134;
    }
    if (OZChannel::getPreviousKeyframe(v12, &v148, &v142, &v160))
      v54 = OZChannel::getKeyframe(v12, &v142);
    else
      v54 = 0;
    v116 = v40;
    if (OZChannel::getPreviousKeyframe(v126, &v147, &v141, &v156))
      v55 = OZChannel::getKeyframe(v126, &v141);
    else
      v55 = 0;
    v56 = v39;
    if (OZChannel::getPreviousKeyframe(v127, &v146, &v140, &v152))
      v57 = OZChannel::getKeyframe(v127, &v146);
    else
      v57 = 0;
    if (v54)
    {
      v58 = v55 != 0;
      if (!v55)
        v160 = OZChannel::getCurveValue(v126, &v142, 1);
      if (v57)
      {
        v59 = 1;
        goto LABEL_85;
      }
      v60 = &v142;
    }
    else
    {
      if (!v55)
      {
        if (v57)
        {
          v59 = 1;
          v160 = OZChannel::getCurveValue(v12, &v140, 1);
          v58 = 0;
          v156 = OZChannel::getCurveValue(v126, &v140, 1);
        }
        else
        {
          v59 = 0;
          v58 = 0;
        }
        goto LABEL_85;
      }
      v59 = 1;
      v160 = OZChannel::getCurveValue(v12, &v141, 1);
      v58 = 1;
      if (v57)
      {
LABEL_85:
        v61 = vabdd_f64(v160, v158) < 0.0000001
           && vabdd_f64(v156, v154) < 0.0000001
           && vabdd_f64(v152, v150) < 0.0000001;
        v39 = v56;
        v62 = v50;
        v63 = v59 | v58;
        if (v54)
          v63 = 1;
        if (v63 != 1 || v61)
        {
          OZChannel::getKeyframeOutputTangents(v12, v28, &v136, 0, 1);
          OZChannel::setKeyframeOutputTangents(v12, v28, v136, v52, 1);
          OZChannel::getKeyframeOutputTangents(v126, v50, &v136, 0, 1);
          OZChannel::setKeyframeOutputTangents(v126, v50, v136, v53, 1);
          v64 = v126;
          v65 = v127;
          v66 = v118;
          OZChannel::getKeyframeOutputTangents(v127, v118, &v136, 0, 1);
          v67 = v136;
          v68 = v127;
          v69 = v118;
          v70 = v47 / 6.0;
        }
        else
        {
          v113 = (a3 - v160) / 6.0 * 0.5;
          v114 = (a4 - v156) / 6.0 * 0.5;
          v115 = (a5 - v152) / 6.0 * 0.5;
          OZChannel::getKeyframeInputTangents(v12, v28, &v136, 0, 1);
          OZChannel::setKeyframeInputTangents(v12, v28, v136, -v113, 1);
          OZChannel::getKeyframeInputTangents(v126, v50, &v136, 0, 1);
          OZChannel::setKeyframeInputTangents(v126, v50, v136, -v114, 1);
          v64 = v126;
          v65 = v127;
          v66 = v118;
          OZChannel::getKeyframeInputTangents(v127, v118, &v136, 0, 1);
          OZChannel::setKeyframeInputTangents(v127, v118, v136, -v115, 1);
          OZChannel::getKeyframeOutputTangents(v12, v28, &v136, 0, 1);
          OZChannel::setKeyframeOutputTangents(v12, v28, v136, v113, 1);
          OZChannel::getKeyframeOutputTangents(v126, v62, &v136, 0, 1);
          OZChannel::setKeyframeOutputTangents(v126, v62, v136, v114, 1);
          OZChannel::getKeyframeOutputTangents(v127, v118, &v136, 0, 1);
          v67 = v136;
          v68 = v127;
          v69 = v118;
          v70 = v115;
        }
        OZChannel::setKeyframeOutputTangents(v68, v69, v67, v70, 1);
        v44 = v128;
        v43 = (void *)Keyframe;
        v71 = OZChannel::getKeyframeFlags(v12, v28);
        OZChannel::setKeyframeFlags(v12, v28, v71 & 0xFFFFFF7F);
        v72 = OZChannel::getKeyframeFlags(v64, v62);
        OZChannel::setKeyframeFlags(v64, v62, v72 & 0xFFFFFF7F);
        v73 = OZChannel::getKeyframeFlags(v65, v66);
        OZChannel::setKeyframeFlags(v65, v66, v73 & 0xFFFFFF7F);
        v40 = v116;
        goto LABEL_96;
      }
      v60 = &v141;
    }
    v59 = 0;
    v152 = OZChannel::getCurveValue(v127, v60, 1);
    goto LABEL_85;
  }
  return result;
}

void OZChannelPosition3D::insertBezierPoint(OZChannelPosition3D *this, const CMTime *a2, double a3, double a4, double a5)
{
  OZChannel *v10;
  int isParametricCurveClosed;
  void *Keyframe;
  OZChannel *v13;
  uint64_t v14;
  OZChannel *v15;
  uint64_t v16;
  void *v17;
  int v18;
  const CMTime *v19;
  _BOOL4 v20;
  void *v21;
  int v22;
  const CMTime *v23;
  int v24;
  void *v25;
  void *v26;
  void *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double Seconds;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  int *v41;
  double *v42;
  double *v43;
  double v44;
  double *v45;
  double v46;
  double *v47;
  double v48;
  double *v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  __n128 v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  double v68;
  double v69;
  double v70;
  int KeyframeFlags;
  int v72;
  int v73;
  double *v74;
  _QWORD v75[51];
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  CMTime v83;
  CMTime v84;
  CMTime v85;
  CMTime v86;
  CMTime v87;
  CMTime v88;
  double *v89;
  double *v90;
  double *v91;
  double *v92;
  int v93;
  unsigned int v94;
  CMTime v95;
  double v96;
  CMTime v97;
  CMTime v98;
  CMTime v99;
  CMTime v100;
  CMTime v101;
  CMTime v102;
  double v103;
  double v104;
  double v105;
  double CurveValue;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  __int128 v121;
  double v122;
  double v123;
  CMTime v124;
  double v125;
  CMTime v126;
  double v127;
  CMTime v128;
  double v129;
  CMTime v130;
  double v131;
  CMTime v132;
  double v133[5];

  v133[2] = *(double *)MEMORY[0x1E0C80C00];
  v107 = 0.0;
  v108 = 0.0;
  v105 = 0.0;
  CurveValue = 0.0;
  v103 = 0.0;
  v104 = 0.0;
  v102 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v101 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v100 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v99 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v98 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v97 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v10 = (OZChannel *)((char *)this + 136);
  v96 = 0.0;
  isParametricCurveClosed = OZChannel::isParametricCurveClosed((OZChannel *)((char *)this + 136));
  OZChannel::getPreviousKeyframe(v10, a2, &v102, &v108);
  Keyframe = (void *)OZChannel::getKeyframe(v10, &v102);
  v13 = (OZChannel *)((char *)this + 288);
  OZChannel::getPreviousKeyframe((OZChannel *)((char *)this + 288), a2, &v101, &CurveValue);
  v14 = OZChannel::getKeyframe((OZChannel *)((char *)this + 288), &v101);
  v15 = (OZChannel *)((char *)this + 736);
  OZChannel::getPreviousKeyframe(v15, a2, &v100, &v104);
  v16 = OZChannel::getKeyframe(v15, &v100);
  v17 = (void *)v16;
  v80 = Keyframe;
  if (Keyframe)
  {
    LODWORD(v78) = v14 != 0;
    if (v14)
    {
      if (v16)
      {
LABEL_4:
        v18 = 1;
        goto LABEL_14;
      }
    }
    else
    {
      CurveValue = OZChannel::getCurveValue(v13, &v102, 1);
      if (v17)
        goto LABEL_4;
    }
    v19 = &v102;
LABEL_10:
    v18 = 0;
    v104 = OZChannel::getCurveValue(v15, v19, 1);
    goto LABEL_14;
  }
  if (v14)
  {
    v18 = 1;
    v108 = OZChannel::getCurveValue(v10, &v101, 1);
    LODWORD(v78) = 1;
    if (v17)
      goto LABEL_14;
    LODWORD(v78) = 1;
    v19 = &v101;
    goto LABEL_10;
  }
  if (v16)
  {
    v18 = 1;
    v108 = OZChannel::getCurveValue(v10, &v100, 1);
    LODWORD(v78) = 0;
    CurveValue = OZChannel::getCurveValue(v13, &v100, 1);
  }
  else
  {
    v18 = 0;
    LODWORD(v78) = 0;
  }
LABEL_14:
  if (OZChannel::getNextKeyframe(v10, a2, &v99, &v107))
  {
    v82 = (void *)OZChannel::getKeyframe(v10, &v99);
    goto LABEL_22;
  }
  if (isParametricCurveClosed)
  {
    if (OZChannel::getFirstKeyframe(v10, &v99, &v107))
    {
      v82 = (void *)OZChannel::getKeyframe(v10, &v99);
      CMTimeMake(&v126, 1, 1);
      v132 = v102;
      v130 = v126;
      PC_CMTimeSaferAdd(&v132, &v130, (uint64_t)&v128);
      v99 = v128;
    }
    else
    {
      v82 = 0;
    }
LABEL_22:
    if ((OZChannel::getNextKeyframe(v13, a2, &v98, &v105) & 1) == 0)
    {
      if (isParametricCurveClosed && OZChannel::getFirstKeyframe(v13, &v98, &v105))
      {
        v81 = (void *)OZChannel::getKeyframe(v13, &v98);
        CMTimeMake(&v126, 1, 1);
        v132 = v101;
        v130 = v126;
        PC_CMTimeSaferAdd(&v132, &v130, (uint64_t)&v128);
        v98 = v128;
      }
      else
      {
        v81 = 0;
      }
      goto LABEL_28;
    }
    goto LABEL_23;
  }
  v81 = 0;
  v82 = 0;
  if (OZChannel::getNextKeyframe(v13, a2, &v98, &v105))
LABEL_23:
    v81 = (void *)OZChannel::getKeyframe(v13, &v98);
LABEL_28:
  if (OZChannel::getNextKeyframe(v15, a2, &v97, &v103))
  {
    v79 = (void *)OZChannel::getKeyframe(v15, &v97);
  }
  else if (isParametricCurveClosed && OZChannel::getFirstKeyframe(v15, &v97, &v103))
  {
    v79 = (void *)OZChannel::getKeyframe(v15, &v97);
    CMTimeMake(&v126, 1, 1);
    v132 = v100;
    v130 = v126;
    PC_CMTimeSaferAdd(&v132, &v130, (uint64_t)&v128);
    v97 = v128;
  }
  else
  {
    v79 = 0;
  }
  v77 = v17;
  if (v82)
  {
    v20 = v81 != 0;
    if (!v81)
      v105 = OZChannel::getCurveValue(v13, &v99, 1);
    v21 = (void *)v14;
    if (v79)
    {
      v22 = 1;
      goto LABEL_47;
    }
    v23 = &v99;
LABEL_43:
    v22 = 0;
    v103 = OZChannel::getCurveValue(v15, v23, 1);
    goto LABEL_47;
  }
  if (v81)
  {
    v21 = (void *)v14;
    v22 = 1;
    v107 = OZChannel::getCurveValue(v10, &v98, 1);
    v20 = 1;
    if (v79)
      goto LABEL_47;
    v23 = &v98;
    goto LABEL_43;
  }
  v21 = (void *)v14;
  if (v79)
  {
    v22 = 1;
    v107 = OZChannel::getCurveValue(v10, &v97, 1);
    v20 = 0;
    v105 = OZChannel::getCurveValue(v13, &v97, 1);
  }
  else
  {
    v22 = 0;
    v20 = 0;
  }
LABEL_47:
  v24 = v20 | v22;
  if (v82)
    v24 = 1;
  if (!v80 && ((v18 | v78) & 1) == 0)
  {
    if (!v24)
      return;
    OZChannel::setKeyframe(v10, a2, a3, 1);
    v25 = (void *)OZChannel::getKeyframe(v10, a2);
    OZChannel::setKeyframe(v13, a2, a4, 1);
    v26 = (void *)OZChannel::getKeyframe(v13, a2);
    OZChannel::setKeyframe(v15, a2, a5, 1);
    v27 = (void *)OZChannel::getKeyframe(v15, a2);
    v28 = (v107 - a3) / 3.0;
    v29 = (v105 - a4) / 3.0;
    v30 = (v103 - a5) / 3.0;
    OZChannel::getKeyframeOutputTangents(v10, v25, &v96, 0, 1);
    OZChannel::setKeyframeOutputTangents(v10, v25, v96, v28, 1);
    OZChannel::getKeyframeInputTangents(v10, v25, &v96, 0, 1);
    OZChannel::setKeyframeInputTangents(v10, v25, v96, -v28, 1);
    OZChannel::getKeyframeOutputTangents(v13, v26, &v96, 0, 1);
    OZChannel::setKeyframeOutputTangents(v13, v26, v96, v29, 1);
    OZChannel::getKeyframeInputTangents(v13, v26, &v96, 0, 1);
    OZChannel::setKeyframeInputTangents(v13, v26, v96, -v29, 1);
    OZChannel::getKeyframeOutputTangents(v15, v27, &v96, 0, 1);
    OZChannel::setKeyframeOutputTangents(v15, v27, v96, v30, 1);
    OZChannel::getKeyframeInputTangents(v15, v27, &v96, 0, 1);
    v31 = v96;
    v32 = -v30;
    goto LABEL_67;
  }
  if ((v24 & 1) == 0)
  {
    v68 = (a3 - v108) / 3.0;
    v69 = (a4 - CurveValue) / 3.0;
    v70 = (a5 - v104) / 3.0;
    OZChannel::setKeyframe(v10, a2, a3, 1);
    v25 = (void *)OZChannel::getKeyframe(v10, a2);
    OZChannel::setKeyframe(v13, a2, a4, 1);
    v26 = (void *)OZChannel::getKeyframe(v13, a2);
    OZChannel::setKeyframe(v15, a2, a5, 1);
    v27 = (void *)OZChannel::getKeyframe(v15, a2);
    OZChannel::getKeyframeOutputTangents(v10, v25, &v96, 0, 1);
    OZChannel::setKeyframeOutputTangents(v10, v25, v96, v68, 1);
    OZChannel::getKeyframeInputTangents(v10, v25, &v96, 0, 1);
    OZChannel::setKeyframeInputTangents(v10, v25, v96, -v68, 1);
    OZChannel::getKeyframeOutputTangents(v13, v26, &v96, 0, 1);
    OZChannel::setKeyframeOutputTangents(v13, v26, v96, v69, 1);
    OZChannel::getKeyframeInputTangents(v13, v26, &v96, 0, 1);
    OZChannel::setKeyframeInputTangents(v13, v26, v96, -v69, 1);
    OZChannel::getKeyframeOutputTangents(v15, v27, &v96, 0, 1);
    OZChannel::setKeyframeOutputTangents(v15, v27, v96, v70, 1);
    OZChannel::getKeyframeInputTangents(v15, v27, &v96, 0, 1);
    v31 = v96;
    v32 = -v70;
LABEL_67:
    OZChannel::setKeyframeInputTangents(v15, v27, v31, v32, 1);
    KeyframeFlags = OZChannel::getKeyframeFlags(v10, v25);
    OZChannel::setKeyframeFlags(v10, v25, KeyframeFlags & 0xFFFFFF7F);
    v72 = OZChannel::getKeyframeFlags(v13, v26);
    OZChannel::setKeyframeFlags(v13, v26, v72 & 0xFFFFFF7F);
    v73 = OZChannel::getKeyframeFlags(v15, v27);
    OZChannel::setKeyframeFlags(v15, v27, v73 & 0xFFFFFF7F);
    return;
  }
  v95 = *a2;
  Seconds = CMTimeGetSeconds(&v95);
  OZChannel::getKeyframe(v10, v80, 0, (double *)&v132.value);
  OZChannel::getKeyframeOutputTangents(v10, v80, 0, (double *)&v132.timescale, 1);
  *(double *)&v132.timescale = *(double *)&v132.timescale + *(double *)&v132.value;
  OZChannel::getKeyframe(v13, v21, 0, (double *)&v130.value);
  v78 = v21;
  OZChannel::getKeyframeOutputTangents(v13, v21, 0, (double *)&v130.timescale, 1);
  *(double *)&v130.timescale = *(double *)&v130.timescale + *(double *)&v130.value;
  OZChannel::getKeyframe(v15, v77, 0, (double *)&v128.value);
  OZChannel::getKeyframeOutputTangents(v15, v77, 0, (double *)&v128.timescale, 1);
  *(double *)&v128.timescale = *(double *)&v128.timescale + *(double *)&v128.value;
  OZChannel::getKeyframe(v10, v82, 0, v133);
  OZChannel::getKeyframeInputTangents(v10, v82, 0, (double *)&v132.epoch, 1);
  *(double *)&v132.epoch = *(double *)&v132.epoch + v133[0];
  OZChannel::getKeyframe(v13, v81, 0, &v131);
  OZChannel::getKeyframeInputTangents(v13, v81, 0, (double *)&v130.epoch, 1);
  *(double *)&v130.epoch = *(double *)&v130.epoch + v131;
  OZChannel::getKeyframe(v15, v79, 0, &v129);
  OZChannel::getKeyframeInputTangents(v15, v79, 0, (double *)&v128.epoch, 1);
  *(double *)&v128.epoch = *(double *)&v128.epoch + v129;
  v93 = 0;
  v94 = 50;
  v92 = (double *)operator new[]();
  v91 = (double *)operator new[]();
  v90 = (double *)operator new[]();
  v89 = (double *)operator new[]();
  MEMORY[0x1E0C80A78](v89);
  v88 = v102;
  v34 = CMTimeGetSeconds(&v88);
  v126 = v99;
  v124 = v102;
  PC_CMTimeSaferSubtract(&v126, &v124, (uint64_t)&v121);
  operator/(&v121, 0x32u, (uint64_t)&v87);
  v35 = CMTimeGetSeconds(&v87);
  v36 = 0.0;
  OZChannel::getSamples(v10, v34, v35, &v94, &v89, &v92, 0.0);
  v86 = v102;
  v37 = CMTimeGetSeconds(&v86);
  v126 = v99;
  v124 = v102;
  PC_CMTimeSaferSubtract(&v126, &v124, (uint64_t)&v121);
  operator/(&v121, v94, (uint64_t)&v85);
  v38 = CMTimeGetSeconds(&v85);
  OZChannel::getSamples(v13, v37, v38, &v94, 0, &v91, 0.0);
  v84 = v100;
  v39 = CMTimeGetSeconds(&v84);
  v126 = v97;
  v124 = v100;
  PC_CMTimeSaferSubtract(&v126, &v124, (uint64_t)&v121);
  operator/(&v121, v94, (uint64_t)&v83);
  v40 = CMTimeGetSeconds(&v83);
  OZChannel::getSamples(v15, v39, v40, &v94, 0, &v90, 0.0);
  v75[0] = 0;
  v42 = (double *)v94;
  if (v94 >= 2)
  {
    v43 = v92 + 1;
    v44 = *v92;
    v45 = v91 + 1;
    v46 = *v91;
    v47 = v90 + 1;
    v48 = *v90;
    v49 = (double *)&v76;
    v50 = v94 - 1;
    do
    {
      v51 = *v43++;
      v52 = v51;
      v53 = (v51 - v44) * (v51 - v44);
      v54 = *v45++;
      v55 = v54;
      v56 = v54 - v46;
      v57 = *v47++;
      v36 = v36 + sqrt(v53 + v56 * v56 + (v57 - v48) * (v57 - v48));
      *v49++ = v36;
      v48 = v57;
      v46 = v55;
      v44 = v52;
      --v50;
    }
    while (v50);
  }
  PCAlgorithm::bisect(v89, v42, &v93, Seconds, v41);
  v58.n128_f64[0] = PCAlgorithm::DeCasteljauSubdivide((PCAlgorithm *)&v132, 0.0, *(double *)&v75[v94 - 1], *(double *)&v75[v93], (double *)&v130.value, (double *)&v128.value, (double *)&v126.value, (double *)&v124.value, (double *)&v121, &v117, &v113, &v109, v74);
  if (v92)
    MEMORY[0x1B5E2914C](v92, 0x1000C8000313F17, v58.n128_f64[0]);
  v59 = v77;
  if (v91)
    MEMORY[0x1B5E2914C](v91, 0x1000C8000313F17, v58);
  if (v90)
    MEMORY[0x1B5E2914C](v90, 0x1000C8000313F17, v58);
  if (v89)
    MEMORY[0x1B5E2914C](v89, 0x1000C8000313F17, v58);
  *(double *)&v126.timescale = *(double *)&v126.timescale - *(double *)&v126.value;
  *(double *)&v126.epoch = *(double *)&v126.epoch - v127;
  v118 = v118 - v117;
  v119 = v119 - v120;
  *(double *)&v124.timescale = *(double *)&v124.timescale - *(double *)&v124.value;
  *(double *)&v124.epoch = *(double *)&v124.epoch - v125;
  v114 = v114 - v113;
  v115 = v115 - v116;
  *((double *)&v121 + 1) = *((double *)&v121 + 1) - *(double *)&v121;
  v122 = v122 - v123;
  v110 = v110 - v109;
  v111 = v111 - v112;
  OZChannel::setKeyframe(v10, a2, a3, 1);
  v60 = (void *)OZChannel::getKeyframe(v10, a2);
  OZChannel::setKeyframe(v13, a2, a4, 1);
  v61 = (void *)OZChannel::getKeyframe(v13, a2);
  OZChannel::setKeyframe(v15, a2, a5, 1);
  v62 = (void *)OZChannel::getKeyframe(v15, a2);
  OZChannel::getKeyframeOutputTangents(v10, v60, &v96, 0, 1);
  OZChannel::setKeyframeOutputTangents(v10, v60, v96, v118, 1);
  OZChannel::getKeyframeInputTangents(v10, v60, &v96, 0, 1);
  OZChannel::setKeyframeInputTangents(v10, v60, v96, *(double *)&v126.epoch, 1);
  OZChannel::getKeyframeOutputTangents(v13, v61, &v96, 0, 1);
  OZChannel::setKeyframeOutputTangents(v13, v61, v96, v114, 1);
  OZChannel::getKeyframeInputTangents(v13, v61, &v96, 0, 1);
  OZChannel::setKeyframeInputTangents(v13, v61, v96, *(double *)&v124.epoch, 1);
  OZChannel::getKeyframeOutputTangents(v15, v62, &v96, 0, 1);
  OZChannel::setKeyframeOutputTangents(v15, v62, v96, v110, 1);
  OZChannel::getKeyframeInputTangents(v15, v62, &v96, 0, 1);
  OZChannel::setKeyframeInputTangents(v15, v62, v96, v122, 1);
  v63 = v80;
  OZChannel::getKeyframeOutputTangents(v10, v80, &v96, 0, 1);
  OZChannel::setKeyframeOutputTangents(v10, v63, v96, *(double *)&v126.timescale, 1);
  v64 = v78;
  OZChannel::getKeyframeOutputTangents(v13, v78, &v96, 0, 1);
  OZChannel::setKeyframeOutputTangents(v13, v64, v96, *(double *)&v124.timescale, 1);
  OZChannel::getKeyframeOutputTangents(v15, v59, &v96, 0, 1);
  OZChannel::setKeyframeOutputTangents(v15, v59, v96, *((double *)&v121 + 1), 1);
  v65 = v82;
  OZChannel::getKeyframeInputTangents(v10, v82, &v96, 0, 1);
  OZChannel::setKeyframeInputTangents(v10, v65, v96, v119, 1);
  v66 = v81;
  OZChannel::getKeyframeInputTangents(v13, v81, &v96, 0, 1);
  OZChannel::setKeyframeInputTangents(v13, v66, v96, v115, 1);
  v67 = v79;
  OZChannel::getKeyframeInputTangents(v15, v79, &v96, 0, 1);
  OZChannel::setKeyframeInputTangents(v15, v67, v96, v111, 1);
}

const void *OZChannelPosition3D::willBeModified(os_unfair_lock_s *this, uint64_t a2)
{
  os_unfair_lock_s *v4;

  v4 = this + 175;
  PCSpinLock::lock(this + 175);
  *(_QWORD *)&this[178]._os_unfair_lock_opaque = *(_QWORD *)&this[176]._os_unfair_lock_opaque;
  PCSpinLock::unlock(v4);
  return OZChannelPosition::willBeModified((OZChannelPosition *)this, a2);
}

void OZChannelPosition3D::getNormals(OZChannelPosition3D *this, const CMTime *a2, double *a3, double *a4, double *a5)
{
  OZChannel *v10;
  double v11;
  double v12;
  OZChannel *v13;
  double v14;
  double v15;
  OZChannel *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;

  if (a3 || a4 || a5)
  {
    CMTimeMake(&v29, 1, 50);
    v32 = *a2;
    v31 = v29;
    PC_CMTimeSaferSubtract(&v32, &v31, (uint64_t)&v30);
    v10 = (OZChannel *)((char *)this + 136);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), &v30, 0.0);
    v12 = v11;
    v13 = (OZChannel *)((char *)this + 288);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), &v30, 0.0);
    v15 = v14;
    v16 = (OZChannel *)((char *)this + 736);
    OZChannel::getValueAsDouble(v16, &v30, 0.0);
    v18 = v17;
    CMTimeMake(&v29, 1, 50);
    v32 = *a2;
    v31 = v29;
    PC_CMTimeSaferAdd(&v32, &v31, (uint64_t)&v30);
    OZChannel::getValueAsDouble(v10, &v30, 0.0);
    v20 = v19;
    OZChannel::getValueAsDouble(v13, &v30, 0.0);
    v22 = v21;
    OZChannel::getValueAsDouble(v16, &v30, 0.0);
    v23 = v20 - v12;
    v24 = v22 - v15;
    v26 = v25 - v18;
    v27 = sqrt(v23 * v23 + v24 * v24 + v26 * v26);
    if (v27 <= -0.0000001 || v27 >= 0.0000001)
    {
      v23 = v23 / v27;
      v24 = v24 / v27;
      v26 = v26 / v27;
    }
    v28 = v24 * 0.0;
    if (a3)
      *a3 = v28 - v26;
    if (a4)
      *a4 = v26 * 0.0 - v23 * 0.0;
    if (a5)
      *a5 = v23 - v28;
  }
}

uint64_t OZChannelPosition3D::getTangent(OZChannelPosition3D *a1, const CMTime *a2, double *a3, double a4)
{
  const CMTime *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v18 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  v14 = 0.0;
  v15 = 0.0;
  v13 = 0.0;
  OZChannelPosition3D::getPositionOnPath(a1, a2, a4 + -1.0, &v18, &v17, &v16, 0, 0, 0, 0);
  OZChannelPosition3D::getPositionOnPath(a1, v7, a4 + 1.0, &v15, &v14, &v13, 0, 0, 0, 0);
  v8 = v15 - v18;
  v9 = v14 - v17;
  v10 = v13 - v16;
  v11 = sqrt(v8 * v8 + v9 * v9 + v10 * v10);
  if (v11 <= -0.0000001 || v11 >= 0.0000001)
  {
    v8 = v8 / v11;
    v9 = v9 / v11;
    v10 = v10 / v11;
  }
  *a3 = v8;
  a3[1] = v9;
  a3[2] = v10;
  return 1;
}

uint64_t OZChannelPosition3D::getPositionOnPath(OZChannelPosition3D *this, const CMTime *a2, double a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  char *v22;
  OZChannel *v23;
  OZChannel *v24;
  OZChannel *v25;
  int v26;
  int Interpolation;
  int *v28;
  double v29;
  double v30;
  double v31;
  double *v33;
  double v34;
  double v35;
  double v36;
  void *v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  OZChannel *v45;
  uint64_t v46;
  double CurveValue;
  double v48;
  double *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  int v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  double v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  int v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  int isParametricCurveClosed;
  OZChannel *v89;
  CMTime v91;
  CMTime v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  PCAlgorithm *v99;
  double *v100;
  double *v101;
  double *v102;
  double *v103;
  void *__p[3];
  void *v105[3];
  void *v106[3];
  int v107[2];
  CMTime v108;
  CMTime v109;
  CMTime v110[2];

  *(_QWORD *)v107 = 0;
  v17 = (_QWORD *)((char *)this + 136);
  v18 = (*(uint64_t (**)(char *, const CMTime *))(*((_QWORD *)this + 17) + 832))((char *)this + 136, a2);
  v19 = v17 + 19;
  v20 = 0;
  if (v18 != (*(unsigned int (**)(_QWORD *))(v17[19] + 832))(v17 + 19))
    return v20;
  v21 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)this + 17) + 832))(v17);
  v22 = (char *)this + 736;
  if (v21 != (*(unsigned int (**)(char *))(*((_QWORD *)this + 92) + 832))((char *)this + 736)
    || !(*(unsigned int (**)(_QWORD *))(*v17 + 832))(v17)
    || !(*(unsigned int (**)(_QWORD *))(*v19 + 832))(v17 + 19)
    || !(*(unsigned int (**)(char *))(*(_QWORD *)v22 + 832))((char *)this + 736))
  {
    return 0;
  }
  v23 = (OZChannel *)(*(uint64_t (**)(_QWORD *))(*v17 + 248))(v17);
  v24 = (OZChannel *)(*(uint64_t (**)(_QWORD *))(*v19 + 248))(v19);
  v25 = (OZChannel *)(*(uint64_t (**)(char *))(*(_QWORD *)v22 + 248))((char *)this + 736);
  v26 = (*((uint64_t (**)(OZChannel *))v23->var0 + 104))(v23);
  OZChannel::getKeyframes(v23, 0, v106);
  v89 = v24;
  OZChannel::getKeyframes(v24, 0, v105);
  OZChannel::getKeyframes(v25, 0, __p);
  v102 = 0;
  v103 = 0;
  v100 = 0;
  v101 = 0;
  v99 = 0;
  PCSpinLock::lock((os_unfair_lock_t)this + 175);
  OZChannelPosition3D::getCachedVectors(this, &v100, &v103, &v102, &v101, (double **)&v99, v107);
  PCSpinLock::unlock((os_unfair_lock_t)this + 175);
  isParametricCurveClosed = OZChannel::isParametricCurveClosed(v23);
  Interpolation = OZChannel::getInterpolation(v23);
  if (a3 >= 0.0)
  {
    v33 = (double *)v107[0];
    v34 = *((double *)v99 + v107[0] - 1);
    if (v34 >= a3 && vabdd_f64(a3, v34) >= 0.0000001)
    {
      v20 = 0;
    }
    else
    {
      v97 = 0.0;
      v98 = 0.0;
      v95 = 0.0;
      v96 = 0.0;
      v93 = 0.0;
      v94 = 0.0;
      v108 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (isParametricCurveClosed)
      {
        v35 = *((double *)v99 + v107[0] - 1);
        do
        {
          do
          {
            v36 = a3;
            a3 = a3 - v35;
          }
          while (v36 > v35);
        }
        while (vabdd_f64(v36, v35) < 0.0000001);
        a3 = v36;
      }
      else
      {
        v45 = v25;
        if (Interpolation == 4)
        {
          v46 = v26 - 1;
          OZChannel::getKeyframeInputTangents(v23, *((void **)v106[0] + v46), 0, &v98, 1);
          OZChannel::getKeyframeInputTangents(v89, *((void **)v105[0] + v46), 0, &v97, 1);
          OZChannel::getKeyframeInputTangents(v25, *((void **)__p[0] + v46), 0, &v96, 1);
          OZChannel::getKeyframe(v23, *((void **)v106[0] + v46), &v108, &v95);
          OZChannel::getKeyframe(v89, *((void **)v105[0] + v46), 0, &v94);
          OZChannel::getKeyframe(v25, *((void **)__p[0] + v46), 0, &v93);
          CMTimeMake(&v91, 1, 50);
          v110[0] = v108;
          v109 = v91;
          PC_CMTimeSaferSubtract(v110, &v109, (uint64_t)&v92);
          CurveValue = OZChannel::getCurveValue(v23, &v92, 1);
          CMTimeMake(&v91, 1, 50);
          v110[0] = v108;
          v109 = v91;
          PC_CMTimeSaferSubtract(v110, &v109, (uint64_t)&v92);
          v48 = OZChannel::getCurveValue(v89, &v92, 1);
          CMTimeMake(&v91, 1, 50);
          v49 = a10;
          v110[0] = v108;
          v109 = v91;
          PC_CMTimeSaferSubtract(v110, &v109, (uint64_t)&v92);
          v50 = OZChannel::getCurveValue(v25, &v92, 1);
          v51 = -v98;
          v52 = -v97;
          v97 = -v97;
          v98 = -v98;
          v53 = v96;
        }
        else
        {
          v62 = v26 - 2;
          OZChannel::getKeyframe(v23, *((void **)v106[0] + v62), 0, &v98);
          OZChannel::getKeyframe(v89, *((void **)v105[0] + v62), 0, &v97);
          OZChannel::getKeyframe(v45, *((void **)__p[0] + v62), 0, &v96);
          v63 = v26 - 1;
          OZChannel::getKeyframe(v23, *((void **)v106[0] + v63), &v108, &v95);
          OZChannel::getKeyframe(v89, *((void **)v105[0] + v63), 0, &v94);
          OZChannel::getKeyframe(v45, *((void **)__p[0] + v63), 0, &v93);
          v51 = -(v98 - v95);
          v52 = -(v97 - v94);
          v97 = v52;
          v98 = v51;
          v53 = v96 - v93;
          CurveValue = 0.0;
          v48 = 0.0;
          v50 = 0.0;
          v25 = v45;
          v49 = a10;
        }
        v64 = -v53;
        v96 = -v53;
        v65 = sqrt(v53 * v53 + v51 * v51 + v52 * v52);
        if (v65 <= 10.0)
        {
          v51 = v95 - CurveValue;
          v52 = v94 - v48;
          v97 = v52;
          v98 = v51;
          v64 = v93 - v50;
          v96 = v64;
          v65 = sqrt(v51 * v51 + v52 * v52 + v64 * v64);
        }
        v33 = (double *)v107[0];
        v66 = v107[0] - 1;
        v67 = (a3 - *((double *)v99 + v107[0] - 1)) / v65;
        if (a4)
          *a4 = v67 * v51 + v95;
        if (a5)
          *a5 = v67 * v52 + v94;
        if (a6)
          *a6 = v67 * v64 + v93;
        if (v49)
          *v49 = v100[v66];
        if (a7 && a8 && a9)
        {
          *a7 = v51 / v65;
          *a8 = v52 / v65;
          *a9 = v64 / v65;
          v68 = *a7;
          v69 = *a8 * 0.0;
          v70 = v64 / v65 * 0.0 - *a7 * 0.0;
          *a7 = v69 - v64 / v65;
          *a8 = v70;
          *a9 = v68 - v69;
        }
      }
      v20 = isParametricCurveClosed ^ 1u;
    }
  }
  else
  {
    v97 = 0.0;
    v98 = 0.0;
    v95 = 0.0;
    v96 = 0.0;
    v93 = 0.0;
    v94 = 0.0;
    v108 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (isParametricCurveClosed)
    {
      v29 = -a3;
      v30 = *((double *)v99 + v107[0] - 1);
      do
      {
        do
        {
          v31 = v29;
          v29 = v29 - v30;
        }
        while (v31 > v30);
      }
      while (vabdd_f64(v31, v30) < 0.0000001);
      a3 = v30 - v31;
    }
    else
    {
      v37 = *(void **)v106[0];
      if (Interpolation == 4)
      {
        OZChannel::getKeyframeOutputTangents(v23, v37, 0, &v98, 1);
        v38 = a10;
        OZChannel::getKeyframeOutputTangents(v24, *(void **)v105[0], 0, &v97, 1);
        OZChannel::getKeyframeOutputTangents(v25, *(void **)__p[0], 0, &v96, 1);
        OZChannel::getKeyframe(v23, *(void **)v106[0], &v108, &v95);
        OZChannel::getKeyframe(v24, *(void **)v105[0], 0, &v94);
        OZChannel::getKeyframe(v25, *(void **)__p[0], 0, &v93);
        CMTimeMake(&v91, 1, 50);
        v110[0] = v108;
        v109 = v91;
        PC_CMTimeSaferAdd(v110, &v109, (uint64_t)&v92);
        v39 = OZChannel::getCurveValue(v23, &v92, 1);
        CMTimeMake(&v91, 1, 50);
        v110[0] = v108;
        v109 = v91;
        PC_CMTimeSaferAdd(v110, &v109, (uint64_t)&v92);
        v40 = OZChannel::getCurveValue(v24, &v92, 1);
        CMTimeMake(&v91, 1, 50);
        v110[0] = v108;
        v109 = v91;
        PC_CMTimeSaferAdd(v110, &v109, (uint64_t)&v92);
        v41 = OZChannel::getCurveValue(v25, &v92, 1);
        v42 = -v98;
        v43 = -v97;
        v44 = v96;
      }
      else
      {
        OZChannel::getKeyframe(v23, v37, &v108, &v95);
        v38 = a10;
        OZChannel::getKeyframe(v24, *(void **)v105[0], 0, &v94);
        OZChannel::getKeyframe(v25, *(void **)__p[0], 0, &v93);
        OZChannel::getKeyframe(v23, *((void **)v106[0] + 1), 0, &v98);
        OZChannel::getKeyframe(v24, *((void **)v105[0] + 1), 0, &v97);
        OZChannel::getKeyframe(v25, *((void **)__p[0] + 1), 0, &v96);
        v42 = -(v98 - v95);
        v43 = -(v97 - v94);
        v44 = v96 - v93;
        v39 = 0.0;
        v40 = 0.0;
        v41 = 0.0;
      }
      v54 = sqrt(v44 * v44 + v42 * v42 + v43 * v43);
      if (v54 <= 10.0)
      {
        v42 = v95 - v39;
        v43 = v94 - v40;
        v97 = v43;
        v98 = v42;
        v55 = v93 - v41;
        v96 = v55;
        v54 = sqrt(v42 * v42 + v43 * v43 + v55 * v55);
      }
      else
      {
        v55 = -v44;
      }
      v56 = a3 / v54;
      if (a4)
        *a4 = v95 - v56 * v42;
      if (a5)
        *a5 = v94 - v56 * v43;
      if (a6)
        *a6 = v93 - v56 * v55;
      if (v38)
        *v38 = 0.0;
      if (a7 && a8 && a9)
      {
        *a7 = -v42 / v54;
        *a8 = -v43 / v54;
        v57 = -v55 / v54;
        *a9 = v57;
        v58 = *a7;
        v59 = *a8 * 0.0;
        v60 = v59 - v57;
        v61 = v57 * 0.0 - *a7 * 0.0;
        *a7 = v60;
        *a8 = v61;
        *a9 = v58 - v59;
      }
    }
    v20 = isParametricCurveClosed ^ 1u;
    v33 = (double *)v107[0];
  }
  if ((v20 & 1) == 0 && (int)v33 >= 1)
  {
    PCAlgorithm::bisect((double *)v99, v33, &v107[1], a3, v28);
    v71 = *((double *)v99 + v107[1]);
    if (vabdd_f64(a3, v71) >= 0.0000001)
    {
      if (a3 >= v71)
      {
        v75 = 0.0;
        v76 = 0.0;
        v77 = 0.0;
        v78 = 0.0;
        if (a3 <= v71)
          goto LABEL_71;
        v79 = v107[1] + 1;
        v80 = *((double *)v99 + v107[1] + 1);
        v74 = v100;
        if (vabdd_f64(v80, v71) < 0.0000001)
        {
LABEL_65:
          v75 = v74[v107[1]];
          v76 = v103[v107[1]];
          v77 = v102[v107[1]];
          v78 = v101[v107[1]];
LABEL_71:
          if (a10)
            *a10 = v75;
          if (a4)
            *a4 = v76;
          if (a5)
            *a5 = v77;
          if (a6)
            *a6 = v78;
          memset(&v92, 0, sizeof(v92));
          OZFigTimeForChannelSeconds(&v92, v75, 0x40000);
          v87 = *((_QWORD *)this + 6);
          if (v87)
          {
            (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v87 + 320))(&v91);
            v109 = v92;
            v108 = v91;
            PC_CMTimeSaferAdd(&v109, &v108, (uint64_t)v110);
            v92 = v110[0];
          }
          OZChannelPosition3D::getNormals(this, &v92, a7, a8, a9);
          v20 = 1;
          goto LABEL_82;
        }
        v81 = a3 - v71;
        v82 = v80 - v71;
        v75 = v100[v107[1]] + v81 * ((v100[v79] - v100[v107[1]]) / v82);
        v76 = v103[v107[1]] + v81 * ((v103[v79] - v103[v107[1]]) / v82);
        v77 = v102[v107[1]] + v81 * ((v102[v79] - v102[v107[1]]) / v82);
        v83 = v101[v107[1]];
        v84 = v81 * ((v101[v79] - v83) / v82);
      }
      else
      {
        v72 = v107[1] - 1;
        v73 = *((double *)v99 + v72);
        if (vabdd_f64(v71, v73) < 0.0000001)
          goto LABEL_64;
        v85 = v71 - v73;
        v86 = a3 - v73;
        v75 = v100[v72] + (a3 - v73) * ((v100[v107[1]] - v100[v72]) / v85);
        v76 = v103[v72] + v86 * ((v103[v107[1]] - v103[v72]) / v85);
        v77 = v102[v72] + v86 * ((v102[v107[1]] - v102[v72]) / v85);
        v83 = v101[v72];
        v84 = v86 * ((v101[v107[1]] - v83) / v85);
      }
      v78 = v83 + v84;
      goto LABEL_71;
    }
LABEL_64:
    v74 = v100;
    goto LABEL_65;
  }
LABEL_82:
  if (v103)
    MEMORY[0x1B5E2914C](v103, 0x1000C8000313F17);
  v103 = 0;
  if (v102)
    MEMORY[0x1B5E2914C](v102, 0x1000C8000313F17);
  v102 = 0;
  if (v101)
    MEMORY[0x1B5E2914C](v101, 0x1000C8000313F17);
  v101 = 0;
  if (v100)
    MEMORY[0x1B5E2914C](v100, 0x1000C8000313F17);
  v100 = 0;
  if (v99)
    MEMORY[0x1B5E2914C](v99, 0x1000C8000313F17);
  v99 = 0;
  (*((void (**)(OZChannel *))v23->var0 + 1))(v23);
  if (v89)
    (*((void (**)(OZChannel *))v89->var0 + 1))(v89);
  if (v25)
    (*((void (**)(OZChannel *))v25->var0 + 1))(v25);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v105[0])
  {
    v105[1] = v105[0];
    operator delete(v105[0]);
  }
  if (v106[0])
  {
    v106[1] = v106[0];
    operator delete(v106[0]);
  }
  return v20;
}

void sub_1B2C92248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (__p)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  if (a37)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelPosition3D::getOrientations(OZChannelPosition3D *this, const CMTime *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, int a7, int a8, double a9, char a10)
{
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double KeyframeNormal;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v38;
  double v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  double v62;

  v61 = 0uLL;
  v62 = 0.0;
  if (*((_BYTE *)this + 729) || OZChannelPosition3D::isInZEqualsZeroPlane(this))
  {
    OZChannelPosition3D::getTangent(this, a2, (double *)&v61, a9);
    v17 = *((double *)&v61 + 1);
    v18 = *(double *)&v61;
    v19 = -*((double *)&v61 + 1);
    v20 = 0.0;
    v21 = v62;
    v22 = *((double *)&v61 + 1) * 0.0 - *(double *)&v61 * v62;
    v23 = -(*((double *)&v61 + 1) * v62) - *(double *)&v61 * 0.0;
    v24 = v18 * v18;
    v25 = *((double *)&v61 + 1) * *((double *)&v61 + 1) + *(double *)&v61 * *(double *)&v61;
    v26 = *(double *)&v61;
  }
  else
  {
    KeyframeNormal = OZChannel::getKeyframeNormal((OZChannel *)((char *)this + 136), a2);
    v28 = OZChannel::getKeyframeNormal((OZChannel *)((char *)this + 288), a2);
    v29 = OZChannel::getKeyframeNormal((OZChannel *)((char *)this + 736), a2);
    OZChannelPosition3D::getTangent(this, a2, (double *)&v61, a9);
    v17 = *((double *)&v61 + 1);
    v18 = *(double *)&v61;
    v21 = v62;
    v30 = v29 * *((double *)&v61 + 1) - v28 * v62;
    v31 = KeyframeNormal * v62 - v29 * *(double *)&v61;
    v32 = v28 * *(double *)&v61 - KeyframeNormal * *((double *)&v61 + 1);
    v38 = *(double *)&v61 * v32 - v62 * v30;
    v39 = v62 * v31 - *((double *)&v61 + 1) * v32;
    v33 = *((double *)&v61 + 1) * v30 - *(double *)&v61 * v31;
    v47 = 0uLL;
    v48 = 0.0;
    v40 = 0uLL;
    *(_QWORD *)&v41 = 0;
    OZChannelPosition3D::getTangent(this, a2, (double *)&v47, a9 + -100.0);
    OZChannelPosition3D::getTangent(this, a2, (double *)&v40, a9 + 100.0);
    v20 = *(double *)&v41 - v48;
    v34 = fabs(fabs(v29 * v21 + v28 * v17 + KeyframeNormal * v18) + -1.0);
    if (v34 < 0.01)
    {
      v26 = *((double *)&v40 + 1) - *((double *)&v47 + 1);
    }
    else
    {
      v20 = v33;
      v26 = v38;
    }
    v19 = v39;
    if (v34 < 0.01)
      v19 = *(double *)&v40 - *(double *)&v47;
    v22 = v17 * v20 - v21 * v26;
    v23 = v21 * v19 - v18 * v20;
    v25 = v18 * v26 - v17 * v19;
    v24 = v26 * v26;
  }
  v35 = sqrt(v20 * v20 + v24 + v19 * v19);
  if (v35 <= -0.000000100000001 || v35 >= 0.000000100000001)
  {
    v19 = v19 / v35;
    v26 = v26 / v35;
    v20 = v20 / v35;
  }
  v36 = sqrt(v25 * v25 + v23 * v23 + v22 * v22);
  if (v36 <= -0.000000100000001 || v36 >= 0.000000100000001)
  {
    v22 = v22 / v36;
    v23 = v23 / v36;
    v25 = v25 / v36;
  }
  if (a10)
  {
    v19 = -v19;
    v26 = -v26;
    v20 = -v20;
    v18 = -v18;
    v17 = -v17;
    *(double *)&v61 = v18;
    *((double *)&v61 + 1) = v17;
    v21 = -v21;
    v62 = v21;
  }
  v49 = 0;
  v53 = 0;
  *(double *)&v47 = v18;
  *((double *)&v47 + 1) = v19;
  v50 = v17;
  v51 = v26;
  v54 = v21;
  v55 = v20;
  v58 = 0;
  v59 = 0;
  v57 = 0;
  v48 = v22;
  v52 = v23;
  v56 = v25;
  v60 = xmmword_1B304EEE0;
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  v43 = 4;
  v44 = 0u;
  v45 = 0u;
  v46 = 0;
  PCMatrix44Tmpl<double>::getTransformation(&v47, (uint64_t)&v40);
  if (a3)
    *a3 = v44;
  if (a4)
    *a4 = *((_QWORD *)&v44 + 1);
  if (a5)
    *a5 = v45;
  if (a6)
  {
    *(_OWORD *)a6 = v61;
    *(double *)(a6 + 16) = v62;
  }
  return 1;
}

double OZChannelPosition3D::getLength(os_unfair_lock_s *this, const CMTime *a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  double v5;

  v3 = this + 175;
  PCSpinLock::lock(this + 175);
  if (this[174]._os_unfair_lock_opaque)
  {
    v4 = *(_QWORD *)&this[152]._os_unfair_lock_opaque;
  }
  else
  {
    OZChannelPosition3D::getCachedVectors((OZChannelPosition3D *)this, 0, 0, 0, 0, 0, 0);
    v4 = *(_QWORD *)&this[152]._os_unfair_lock_opaque;
    if (*(_QWORD *)&this[150]._os_unfair_lock_opaque == v4)
    {
      v5 = 0.0;
      goto LABEL_5;
    }
  }
  v5 = *(double *)(v4 - 8);
LABEL_5:
  PCSpinLock::unlock(v3);
  return v5;
}

uint64_t OZChannelPosition3D::getCachedVectors(OZChannelPosition3D *this, double **a2, double **a3, double **a4, double **a5, double **a6, int *a7)
{
  OZChannel *v14;
  int v15;
  int v16;
  int *v17;
  int v18;
  uint64_t i;
  uint64_t v20;
  OZChannel *v22;
  OZChannel *v23;
  uint64_t v24;
  double Seconds;
  double v26;
  int Interpolation;
  unsigned int v28;
  _QWORD *v29;
  double v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  double *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void **v44;
  unint64_t v45;
  unint64_t v46;
  double *v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  double *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  OZChannel *v64;
  uint64_t v65;
  _DWORD *v66;
  int *v67;
  int isParametricCurveClosed;
  void **v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  CMTime v73;
  CMTime time;
  CMTime __p;
  CMTime v76;
  CMTime v77;
  CMTime v78;
  CMTime v79;

  v14 = (OZChannel *)((char *)this + 136);
  v15 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 17) + 832))((char *)this + 136);
  if (v15 != (*((unsigned int (**)(OZChannel *))v14[1].var0 + 104))(v14 + 1))
    return 0;
  v67 = a7;
  v16 = (*(uint64_t (**)(OZChannel *))(*((_QWORD *)this + 17) + 832))(v14);
  if (v16 != (*(unsigned int (**)(char *))(*((_QWORD *)this + 92) + 832))((char *)this + 736))
    return 0;
  v17 = (int *)((char *)this + 696);
  v18 = *((_DWORD *)this + 174);
  if (v18)
  {
    if (a2)
    {
      *a2 = (double *)operator new[]();
      v18 = *v17;
    }
    if (a3)
    {
      *a3 = (double *)operator new[]();
      v18 = *v17;
    }
    if (a4)
    {
      *a4 = (double *)operator new[]();
      v18 = *v17;
    }
    if (a5)
    {
      *a5 = (double *)operator new[]();
      v18 = *v17;
    }
    if (a6)
    {
      *a6 = (double *)operator new[]();
      v18 = *v17;
    }
    if (v18)
    {
      for (i = 0; i != v18; ++i)
      {
        if (a2)
          (*a2)[i] = *(double *)(*((_QWORD *)this + 84) + i * 8);
        if (a3)
          (*a3)[i] = *(double *)(*((_QWORD *)this + 78) + i * 8);
        if (a4)
          (*a4)[i] = *(double *)(*((_QWORD *)this + 81) + i * 8);
        if (a5)
          (*a5)[i] = *(double *)(*((_QWORD *)this + 88) + i * 8);
        if (a6)
          (*a6)[i] = *(double *)(*((_QWORD *)this + 75) + i * 8);
      }
    }
    if (v67)
      *v67 = v18;
    return 1;
  }
  v66 = (_DWORD *)((char *)this + 696);
  *((_QWORD *)this + 76) = *((_QWORD *)this + 75);
  *((_QWORD *)this + 73) = *((_QWORD *)this + 72);
  *((_QWORD *)this + 79) = *((_QWORD *)this + 78);
  *((_QWORD *)this + 82) = *((_QWORD *)this + 81);
  *((_QWORD *)this + 89) = *((_QWORD *)this + 88);
  *((_QWORD *)this + 85) = *((_QWORD *)this + 84);
  *((_DWORD *)this + 174) = 0;
  *((_QWORD *)this + 71) = 0x3FF0000000000000;
  *((_QWORD *)this + 66) = 0x3FF0000000000000;
  *((_QWORD *)this + 61) = 0x3FF0000000000000;
  *((_QWORD *)this + 56) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  v22 = (OZChannel *)(*(uint64_t (**)(OZChannel *))(*((_QWORD *)this + 17) + 248))(v14);
  v23 = (OZChannel *)(*(uint64_t (**)(OZChannel *))(*((_QWORD *)this + 36) + 248))(v14 + 1);
  v24 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 92) + 248))((char *)this + 736);
  memset(&v77, 0, sizeof(v77));
  OZChannel::getKeyframeParametricRange(v22, (uint64_t)&v77);
  memset(&v76, 0, sizeof(v76));
  OZChannel::getKeyframeMinTime(v22, (uint64_t)&v76);
  v79 = v76;
  v78 = v77;
  PC_CMTimeSaferAdd(&v79, &v78, (uint64_t)&__p);
  v77 = __p;
  time = __p;
  Seconds = CMTimeGetSeconds(&time);
  v73 = v76;
  v26 = CMTimeGetSeconds(&v73);
  isParametricCurveClosed = OZChannel::isParametricCurveClosed(v22);
  Interpolation = OZChannel::getInterpolation(v14);
  OZChannel::getKeyframes(v22, 1, &v79);
  v64 = v23;
  OZChannel::getKeyframes(v23, 1, &v78);
  OZChannel::getKeyframes(v22, 1, &__p);
  v65 = (uint64_t)v22;
  v28 = (*((uint64_t (**)(OZChannel *))v22->var0 + 104))(v22);
  v71 = (_QWORD *)((char *)this + 648);
  v72 = (_QWORD *)((char *)this + 624);
  v70 = (_QWORD *)((char *)this + 704);
  v29 = (_QWORD *)((char *)this + 672);
  if (v28 < 2 || *(_QWORD *)&v79.timescale - v79.value < 9uLL)
    goto LABEL_48;
  v30 = Seconds - v26;
  if (Interpolation > 9)
  {
    if (Interpolation == 10 || Interpolation == 12)
    {
      *v66 = (int)(v30 / 0.025) + (isParametricCurveClosed ^ 1);
      if (!OZChannel::getSamples(v65) || !OZChannel::getSamples((uint64_t)v23))
        goto LABEL_58;
      goto LABEL_47;
    }
LABEL_48:
    v69 = (void **)((char *)this + 600);
    std::vector<double>::reserve((void **)this + 75, *v66);
    v63 = v24;
    v31 = (_QWORD *)*((_QWORD *)this + 76);
    v32 = (_QWORD *)((char *)this + 616);
    v33 = *((_QWORD *)this + 77);
    if ((unint64_t)v31 >= v33)
    {
      v35 = *v69;
      v36 = ((char *)v31 - (_BYTE *)*v69) >> 3;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v38 = v33 - (_QWORD)v35;
      if (v38 >> 2 > v37)
        v37 = v38 >> 2;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 616, v39);
        v31 = (_QWORD *)*((_QWORD *)this + 76);
        v35 = (_QWORD *)*((_QWORD *)this + 75);
      }
      else
      {
        v40 = 0;
      }
      v41 = &v40[8 * v36];
      v42 = &v40[8 * v39];
      *(_QWORD *)v41 = 0;
      v34 = (double *)(v41 + 8);
      while (v31 != v35)
      {
        v43 = *--v31;
        *((_QWORD *)v41 - 1) = v43;
        v41 -= 8;
      }
      *((_QWORD *)this + 75) = v41;
      *((_QWORD *)this + 76) = v34;
      *((_QWORD *)this + 77) = v42;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *v31 = 0;
      v34 = (double *)(v31 + 1);
    }
    v44 = (void **)((char *)this + 600);
    *((_QWORD *)this + 76) = v34;
    LODWORD(v45) = *((_DWORD *)this + 174);
    if (v45 >= 2)
    {
      v46 = 1;
      do
      {
        v47 = (double *)*v44;
        v48 = 8 * v46 - 8;
        v49 = *(double *)(*v72 + 8 * v46) - *(double *)(*v72 + v48);
        v50 = *(double *)(*v71 + 8 * v46) - *(double *)(*v71 + v48);
        v51 = v49 * v49 + v50 * v50;
        v52 = *(double *)(*v70 + 8 * v46) - *(double *)(*v70 + v48);
        v53 = *(double *)((char *)*v44 + v48) + sqrt(v51 + v52 * v52);
        if ((unint64_t)v34 >= *v32)
        {
          v55 = v34 - v47;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v57 = *v32 - (_QWORD)v47;
          if (v57 >> 2 > v56)
            v56 = v57 >> 2;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
          {
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 616, v58);
            v34 = (double *)*((_QWORD *)this + 76);
            v47 = (double *)*((_QWORD *)this + 75);
          }
          else
          {
            v59 = 0;
          }
          v60 = (double *)&v59[8 * v55];
          *v60 = v53;
          v54 = v60 + 1;
          while (v34 != v47)
          {
            v61 = *((_QWORD *)v34-- - 1);
            *((_QWORD *)v60-- - 1) = v61;
          }
          *((_QWORD *)this + 75) = v60;
          *((_QWORD *)this + 76) = v54;
          *((_QWORD *)this + 77) = &v59[8 * v58];
          if (v47)
            operator delete(v47);
          v44 = (void **)((char *)this + 600);
        }
        else
        {
          *v34 = v53;
          v54 = v34 + 1;
        }
        *((_QWORD *)this + 76) = v54;
        ++v46;
        v45 = *((unsigned int *)this + 174);
        v34 = v54;
      }
      while (v46 < v45);
      v29 = (_QWORD *)((char *)this + 672);
    }
    if (a2)
    {
      v24 = v63;
      *a2 = (double *)operator new[]();
      LODWORD(v45) = *v66;
      v44 = (void **)((char *)this + 600);
      if (!a3)
      {
LABEL_94:
        if (a4)
        {
          *a4 = (double *)operator new[]();
          LODWORD(v45) = *v66;
          v44 = (void **)((char *)this + 600);
        }
        if (a5)
        {
          *a5 = (double *)operator new[]();
          LODWORD(v45) = *v66;
          v44 = (void **)((char *)this + 600);
        }
        if (a6)
        {
          *a6 = (double *)operator new[]();
          LODWORD(v45) = *v66;
          v44 = (void **)((char *)this + 600);
        }
        if ((_DWORD)v45)
        {
          v62 = 0;
          do
          {
            if (a2)
              (*a2)[v62] = *(double *)(*v29 + v62 * 8);
            if (a3)
              (*a3)[v62] = *(double *)(*v72 + v62 * 8);
            if (a4)
              (*a4)[v62] = *(double *)(*v71 + v62 * 8);
            if (a5)
              (*a5)[v62] = *(double *)(*v70 + v62 * 8);
            if (a6)
              (*a6)[v62] = *(double *)((char *)*v44 + v62 * 8);
            ++v62;
          }
          while (v45 != v62);
        }
        if (v67)
          *v67 = v45;
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
        if (v64)
          (*((void (**)(OZChannel *))v64->var0 + 1))(v64);
        v20 = 1;
        if (!v24)
          goto LABEL_119;
        goto LABEL_118;
      }
    }
    else
    {
      v24 = v63;
      if (!a3)
        goto LABEL_94;
    }
    *a3 = (double *)operator new[]();
    LODWORD(v45) = *v66;
    v44 = (void **)((char *)this + 600);
    goto LABEL_94;
  }
  if (Interpolation == 1)
  {
    *v66 = (int)v30 + 1;
    if (!OZChannel::getSamples(v65) || !OZChannel::getSamples((uint64_t)v23))
      goto LABEL_58;
  }
  else
  {
    if (Interpolation != 4)
      goto LABEL_48;
    *v66 = (int)(v30 / 0.025) + 1;
    if (!OZChannel::getSamples(v65) || !OZChannel::getSamples((uint64_t)v23))
      goto LABEL_58;
  }
LABEL_47:
  if ((OZChannel::getSamples(v24) & 1) != 0)
    goto LABEL_48;
LABEL_58:
  (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  if (v23)
    (*((void (**)(OZChannel *))v23->var0 + 1))(v23);
  v20 = 0;
  if (!v24)
    goto LABEL_119;
LABEL_118:
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
LABEL_119:
  if (__p.value)
  {
    *(_QWORD *)&__p.timescale = __p.value;
    operator delete((void *)__p.value);
  }
  if (v78.value)
  {
    *(_QWORD *)&v78.timescale = v78.value;
    operator delete((void *)v78.value);
  }
  if (v79.value)
  {
    *(_QWORD *)&v79.timescale = v79.value;
    operator delete((void *)v79.value);
  }
  return v20;
}

void sub_1B2C93098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;
  void *v31;

  if (__p)
    operator delete(__p);
  v30 = *(void **)(v28 - 160);
  if (v30)
  {
    *(_QWORD *)(v28 - 152) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(v28 - 128);
  if (v31)
  {
    *(_QWORD *)(v28 - 120) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelPosition3D::getPositionReparametrizedWithRange(OZChannelPosition3D *this, const CMTime *a2, double a3, double *a4, double *a5, double *a6, double *a7)
{
  return OZChannelPosition3D::getPositionOnPath(this, a2, a3, a4, a5, a6, 0, 0, 0, a7);
}

const __CFString *OZChannelPosition3D::getObjCWrapperName(OZChannelPosition3D *this)
{
  return CFSTR("CHChannelPosition3D");
}

BOOL OZChannelPosition3D::isInZEqualsZeroPlane(OZChannelPosition3D *this)
{
  OZChannel *v1;
  void **v2;
  unint64_t v3;
  unsigned int v4;
  __n128 v5;
  _BOOL8 v6;
  double v8;
  CMTime v9;
  void *__p;
  void **v11;

  v1 = (OZChannel *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 92) + 248))((char *)this + 736);
  OZChannel::getKeyframes(v1, 0, &__p);
  v2 = (void **)__p;
  if (v11 == __p)
  {
    v6 = 1;
    if (!__p)
      return v6;
    goto LABEL_11;
  }
  v3 = 0;
  v4 = 1;
  do
  {
    v8 = 0.0;
    OZChannel::getKeyframe(v1, v2[v3], &v9, &v8);
    v5.n128_f64[0] = v8;
    v6 = v8 < 0.0000001 && v8 > -0.0000001;
    if (!v6)
      break;
    v3 = v4;
    v2 = (void **)__p;
    ++v4;
  }
  while (v3 < ((char *)v11 - (_BYTE *)__p) >> 3);
  if (v1)
    (*((void (**)(OZChannel *, __n128))v1->var0 + 1))(v1, v5);
  v2 = (void **)__p;
  if (__p)
  {
LABEL_11:
    v11 = v2;
    operator delete(v2);
  }
  return v6;
}

void sub_1B2C9321C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelPosition3D::flattenAtTime(OZChannel *this, const CMTime *a2)
{
  OZChannel *v3;
  void *Keyframe;

  v3 = this;
  OZChannel2D::flattenAtTime(this, a2);
  v3 = (OZChannel *)((char *)v3 + 736);
  Keyframe = (void *)OZChannel::getKeyframe(v3, a2);
  OZChannel::setKeyframeOutputTangents(v3, Keyframe, 0.0, 0.0, 1);
  OZChannel::setKeyframeInputTangents(v3, Keyframe, 0.0, 0.0, 1);
  return OZChannel::setKeyframeTangentsBroken(v3, Keyframe, 0);
}

uint64_t OZChannelPosition3D::setLinearAtTime(OZChannel *this, const CMTime *a2)
{
  OZChannel *v3;
  void *Keyframe;

  v3 = this;
  OZChannel2D::setLinearAtTime(this, a2);
  v3 = (OZChannel *)((char *)v3 + 736);
  Keyframe = (void *)OZChannel::getKeyframe(v3, a2);
  return OZChannel::setKeyframeInterpolation(v3, Keyframe, 1);
}

void OZChannelPositionPercent::OZChannelPositionPercent(OZChannelPositionPercent *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  OZChannelInfo *v15;
  OZFactoryBase *v16;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  PCString v19;

  Instance = (OZFactory *)OZChannelPositionPercent_Factory::getInstance(this);
  OZChannel2D::OZChannel2D(this, Instance, a2, a3, a4, a5, 2u, 0, 0);
  *(_QWORD *)this = &off_1E655F548;
  *((_QWORD *)this + 2) = &unk_1E655F8A0;
  *((_BYTE *)this + 440) = 1;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel X"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 136), &v19, 0);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Y"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 288), &v19, 0);
  PCString::~PCString(&v19);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 136), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 136), 0.0001);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 288), 0.01);
  v15 = OZChannel::setFineDelta((OZChannel *)((char *)this + 288), 0.0001);
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v15, v16);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Position Suffix"));
  OZChannel::setSuffix((OZChannel *)((char *)this + 136), &v19);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Position Suffix"));
  OZChannel::setSuffix((OZChannel *)((char *)this + 288), &v19);
  PCString::~PCString(&v19);
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
}

void sub_1B2C934D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel2D *v10;

  PCString::~PCString(&a10);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelPositionPercent::OZChannelPositionPercent(OZChannelPositionPercent *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  OZFactoryBase *v6;
  TXParagraphStyleFolder_Factory *v7;
  OZFactoryBase *v8;
  OZChannelInfo *v9;
  OZFactoryBase *v10;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  PCString v13;

  OZChannel2D::OZChannel2D(this, a2, a3, a4, 2u, 0, 0);
  *(_QWORD *)v5 = &off_1E655F548;
  *(_QWORD *)(v5 + 16) = &unk_1E655F8A0;
  *(_BYTE *)(v5 + 440) = 1;
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v5, v6);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel X"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 136), &v13, 0);
  PCString::~PCString(&v13);
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel Y"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 288), &v13, 0);
  PCString::~PCString(&v13);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 136), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 136), 0.0001);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 288), 0.01);
  v9 = OZChannel::setFineDelta((OZChannel *)((char *)this + 288), 0.0001);
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v9, v10);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel Position Suffix"));
  OZChannel::setSuffix((OZChannel *)((char *)this + 136), &v13);
  PCString::~PCString(&v13);
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel Position Suffix"));
  OZChannel::setSuffix((OZChannel *)((char *)this + 288), &v13);
  PCString::~PCString(&v13);
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
}

void sub_1B2C936CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel2D *v10;

  PCString::~PCString(&a10);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelPositionPercent::OZChannelPositionPercent(OZChannelPositionPercent *this, const OZChannelPositionPercent *a2, OZChannelFolder *a3)
{
  uint64_t v3;

  OZChannel2D::OZChannel2D(this, a2, a3);
  *(_QWORD *)v3 = &off_1E655F548;
  *(_QWORD *)(v3 + 16) = &unk_1E655F8A0;
  *(_BYTE *)(v3 + 440) = 1;
}

uint64_t OZChannelPositionPercent::clone(OZChannelPositionPercent *this)
{
  uint64_t v2;

  v2 = operator new();
  OZChannel2D::OZChannel2D((OZChannel2D *)v2, this, 0);
  *(_QWORD *)v2 = &off_1E655F548;
  *(_QWORD *)(v2 + 16) = &unk_1E655F8A0;
  *(_BYTE *)(v2 + 440) = 1;
  return v2;
}

void sub_1B2C937A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40D0902988);
  _Unwind_Resume(a1);
}

const __CFString *OZChannelPositionPercent::getObjCWrapperName(OZChannelPositionPercent *this)
{
  return CFSTR("CHChannelPositionPercent");
}

void OZChannelPositionPercent::~OZChannelPositionPercent(OZChannelPositionPercent *this)
{
  OZChannel2D::~OZChannel2D(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelPositionPercent::~OZChannelPositionPercent(OZChannelPositionPercent *this)
{
  OZChannel2D::~OZChannel2D((OZChannelPositionPercent *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelProgress::createOZChannelProgressInfo(OZChannelProgress *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelProgress::createOZChannelProgressInfo(void)::_OZChannelProgressInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelProgress::createOZChannelProgressInfo(void)::_OZChannelProgressInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelProgress::createOZChannelProgressInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelProgress::_OZChannelProgressInfo;
}

uint64_t OZChannelProgress::createOZChannelProgressImpl(OZChannelProgress *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelProgress::createOZChannelProgressImpl(void)::_OZChannelProgressImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelProgress::createOZChannelProgressImpl(void)::_OZChannelProgressImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelProgress::createOZChannelProgressImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelProgress::_OZChannelProgressImpl;
}

void OZChannelProgress::OZChannelProgress(OZChannelProgress *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelProgress *v5;
  OZChannelProgress *OZChannelProgressInfo;
  uint64_t v7;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, 0, 0);
  *(_QWORD *)v5 = &off_1E655F910;
  *((_QWORD *)v5 + 2) = &unk_1E655FC70;
  OZChannelProgressInfo = (OZChannelProgress *)OZChannelProgress::createOZChannelProgressInfo(v5);
  *((_QWORD *)this + 16) = OZChannelProgressInfo;
  *((_QWORD *)this + 17) = OZChannelProgressInfo;
  OZChannelProgress::createOZChannelProgressImpl(OZChannelProgressInfo);
  v7 = OZChannelProgress::_OZChannelProgressImpl;
  *((_QWORD *)this + 14) = OZChannelProgress::_OZChannelProgressImpl;
  *((_QWORD *)this + 15) = v7;
  *((_QWORD *)this + 7) |= 8uLL;
  *((_WORD *)this + 76) = 0;
}

void sub_1B2C93940(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelProgress::OZChannelProgress(OZChannelProgress *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  uint64_t v4;

  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  *(_QWORD *)v4 = &off_1E655F910;
  *(_QWORD *)(v4 + 16) = &unk_1E655FC70;
  *(_WORD *)(v4 + 152) = a2[1].var5;
}

uint64_t OZChannelProgress::clone(const OZChannelBase *this)
{
  uint64_t v2;

  v2 = operator new();
  OZChannel::OZChannel((OZChannel *)v2, this, 0);
  *(_QWORD *)v2 = &off_1E655F910;
  *(_QWORD *)(v2 + 16) = &unk_1E655FC70;
  *(_WORD *)(v2 + 152) = this[1].var5;
  return v2;
}

void sub_1B2C939F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C6BB7E01);
  _Unwind_Resume(a1);
}

const __CFString *OZChannelProgress::getObjCWrapperName(OZChannelProgress *this)
{
  return CFSTR("CHChannelProgress");
}

void OZChannelProgress::~OZChannelProgress(OZChannel *this)
{
  OZChannel::~OZChannel(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelProgress::~OZChannelProgress(OZChannelProgress *this)
{
  OZChannel::~OZChannel((OZChannel *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZChannelProgress::createOZChannelProgressInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelProgressInfo *v0;

  if (!OZChannelProgress::_OZChannelProgressInfo)
  {
    v0 = (OZChannelProgressInfo *)operator new();
    OZChannelProgressInfo::OZChannelProgressInfo(v0);
    OZChannelProgress::_OZChannelProgressInfo = (uint64_t)v0;
  }
}

void sub_1B2C93AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelProgressInfo::OZChannelProgressInfo(OZChannelProgressInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 0.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E655FCE0;
  *((_QWORD *)this + 10) = &unk_1E655FD00;
}

void sub_1B2C93B48(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelProgress::createOZChannelProgressImpl(void)::{lambda(void)#1} &&>>()
{
  OZChannelProgress::createOZChannelProgressImpl(void)::{lambda(void)#1}::operator()();
}

void OZChannelProgress::createOZChannelProgressImpl(void)::{lambda(void)#1}::operator()()
{
  OZCurveDouble *v0;
  OZChannelImpl *v1;

  if (!OZChannelProgress::_OZChannelProgressImpl)
  {
    v0 = (OZCurveDouble *)operator new();
    OZCurveDouble::OZCurveDouble(v0, 0.0);
    v1 = (OZChannelImpl *)operator new();
    OZChannelImpl::OZChannelImpl(v1, (OZCurve *)v0, 0.0, 0, 1);
    OZChannelProgress::_OZChannelProgressImpl = (uint64_t)v1;
    OZChannelImpl::setMin(v1, 0.0);
    OZChannelImpl::setMax((OZChannelImpl *)OZChannelProgress::_OZChannelProgressImpl, 100.0);
  }
}

void sub_1B2C93C14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void sub_1B2C93F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void sub_1B2C940A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZChannelQuad::OZChannelQuad(OZChannelQuad *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  TXParagraphStyleFolder_Factory *v19;
  OZFactoryBase *v20;
  PCString v21;

  Instance = (OZFactory *)OZChannelQuad_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(_QWORD *)this = &off_1E655FD58;
  *((_QWORD *)this + 2) = &unk_1E65600A0;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel Bottom Left"));
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 136), &v21, (OZChannelFolder *)this, 1u, 0, 2u, 0, 0);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel Bottom Right"));
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 840), &v21, (OZChannelFolder *)this, 2u, 0, 2u, 0, 0);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel Top Right"));
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 1544), &v21, (OZChannelFolder *)this, 3u, 0, 2u, 0, 0);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Channel Top Left"));
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 2248), &v21, (OZChannelFolder *)this, 4u, 0, 2u, 0, 0);
  PCString::~PCString(&v21);
}

void sub_1B2C942F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelPosition *v11;
  OZChannelPosition *v12;
  OZChannelPosition *v13;

  PCString::~PCString(&a10);
  OZChannelPosition::~OZChannelPosition(v13);
  OZChannelPosition::~OZChannelPosition(v12);
  OZChannelPosition::~OZChannelPosition(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void sub_1B2C94370()
{
  JUMPOUT(0x1B2C94360);
}

void OZChannelQuad::OZChannelQuad(OZChannelQuad *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  TXParagraphStyleFolder_Factory *v6;
  OZFactoryBase *v7;
  TXParagraphStyleFolder_Factory *v8;
  OZFactoryBase *v9;
  TXParagraphStyleFolder_Factory *v10;
  OZFactoryBase *v11;
  TXParagraphStyleFolder_Factory *v12;
  OZFactoryBase *v13;
  PCString v14;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_1E655FD58;
  *((_QWORD *)v6 + 2) = &unk_1E65600A0;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Bottom Left"));
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 136), &v14, (OZChannelFolder *)this, 1u, 0, 2u, 0, 0);
  PCString::~PCString(&v14);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Bottom Right"));
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 840), &v14, (OZChannelFolder *)this, 2u, 0, 2u, 0, 0);
  PCString::~PCString(&v14);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Top Right"));
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 1544), &v14, (OZChannelFolder *)this, 3u, 0, 2u, 0, 0);
  PCString::~PCString(&v14);
  TXParagraphStyleFolder_Factory::createInstance(v12, v13);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Top Left"));
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 2248), &v14, (OZChannelFolder *)this, 4u, 0, 2u, 0, 0);
  PCString::~PCString(&v14);
}

void sub_1B2C944F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelPosition *v11;
  OZChannelPosition *v12;
  OZChannelPosition *v13;

  PCString::~PCString(&a10);
  OZChannelPosition::~OZChannelPosition(v13);
  OZChannelPosition::~OZChannelPosition(v12);
  OZChannelPosition::~OZChannelPosition(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void sub_1B2C94574()
{
  JUMPOUT(0x1B2C94564);
}

void OZChannelQuad::OZChannelQuad(OZChannelQuad *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3);
  *v5 = &off_1E655FD58;
  v5[2] = &unk_1E65600A0;
  OZChannelPosition::OZChannelPosition((OZChannelPosition *)(v5 + 17), (const OZChannelPosition *)&a2[1].var3, (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 840), (const OZChannelPosition *)&a2[7].var7, (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 1544), (const OZChannelPosition *)&a2[13].var11, (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 2248), (const OZChannelPosition *)&a2[20].var1, (OZChannelFolder *)this);
}

void sub_1B2C94618(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannelPosition *v2;
  OZChannelPosition *v3;
  OZChannelPosition *v4;

  OZChannelPosition::~OZChannelPosition(v4);
  OZChannelPosition::~OZChannelPosition(v3);
  OZChannelPosition::~OZChannelPosition(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

OZChannelQuad *OZChannelQuad::clone(const OZChannelBase *this)
{
  OZChannelQuad *v2;

  v2 = (OZChannelQuad *)operator new();
  OZChannelQuad::OZChannelQuad(v2, this, 0);
  return v2;
}

void sub_1B2C946A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C408B27E029);
  _Unwind_Resume(a1);
}

const __CFString *OZChannelQuad::getObjCWrapperName(OZChannelQuad *this)
{
  return CFSTR("CHChannelQuad");
}

void `non-virtual thunk to'OZChannelQuad::~OZChannelQuad(OZChannelQuad *this)
{
  OZChannelQuad::~OZChannelQuad((OZChannelQuad *)((char *)this - 16));
}

{
  OZChannelQuad::~OZChannelQuad((OZChannelQuad *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChannelPosition::getPosition(OZChannelPosition *this, const CMTime *a2, double *a3, double *a4, double a5)
{
  uint64_t v10;
  uint64_t v11;

  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, a5);
    *(_QWORD *)a3 = v10;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, a5);
    *(_QWORD *)a4 = v11;
  }
}

uint64_t OZHistogramDelegate::notifyReferrers(OZHistogramDelegate *this)
{
  void **i;
  void **v3;
  void *v4;

  v3 = (void **)*((_QWORD *)this + 2);
  for (i = (void **)*((_QWORD *)this + 3); v3 != i; i = (void **)*((_QWORD *)this + 3))
  {
    v4 = *v3++;
    objc_msgSend(v4, "removeReference:", *((_QWORD *)this + 1));
  }
  return (*(uint64_t (**)(OZHistogramDelegate *))(*(_QWORD *)this + 8))(this);
}

void OZChannelRotation3D::OZChannelRotation3D(OZChannelRotation3D *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  TXParagraphStyleFolder_Factory *v19;
  OZFactoryBase *v20;
  TXParagraphStyleFolder_Factory *v21;
  OZFactoryBase *v22;
  TXParagraphStyleFolder_Factory *v23;
  OZFactoryBase *v24;
  TXParagraphStyleFolder_Factory *v25;
  OZFactoryBase *v26;
  OZChannelEnumInterpMode_Factory *v27;
  OZFactory *v28;
  PCString v29;
  PCString v30;

  Instance = (OZFactory *)OZChannelRotation3D_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(_QWORD *)this = &off_1E6560110;
  *((_QWORD *)this + 2) = &unk_1E6560460;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v30, CFSTR("Channel X"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 136), 0.0, &v30, (OZChannelFolder *)this, 1u, 0, a7, a8);
  PCString::~PCString(&v30);
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v30, CFSTR("Channel Y"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 288), 0.0, &v30, (OZChannelFolder *)this, 2u, 0, a7, a8);
  PCString::~PCString(&v30);
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v30, CFSTR("Channel Z"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 440), 0.0, &v30, (OZChannelFolder *)this, 3u, 0, a7, a8);
  PCString::~PCString(&v30);
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v30, CFSTR("Channel Rotation3D Iterpolation Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v25, v26);
  PCURL::PCURL((PCURL *)&v29, CFSTR("Channel Rotation3D Iterpolation Label"));
  v28 = (OZFactory *)OZChannelEnumInterpMode_Factory::getInstance(v27);
  OZChannelEnum::OZChannelEnum((OZChannel *)((char *)this + 592), &v30, v28, &v29, (OZChannelFolder *)this, 4u, 0, 0, 0);
  *((_QWORD *)this + 74) = &off_1E65604D0;
  *((_QWORD *)this + 76) = &unk_1E6560840;
  PCString::~PCString(&v29);
  PCString::~PCString(&v30);
  *((_DWORD *)this + 212) = 0;
  OZChannelRotation3D::initCustomInterpolator(this);
}

void sub_1B2C949FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelObjectRootBase *v12;
  OZChannel *v13;
  OZChannel *v14;
  OZChannel *v15;
  PCSpinLock *v16;
  PCString *v17;
  PCSpinLock *v18;

  v18 = v16;
  PCSpinLock::~PCSpinLock(v18);
  OZChannelEnum::~OZChannelEnum(v17);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v12);
  _Unwind_Resume(a1);
}

void sub_1B2C94A9C()
{
  JUMPOUT(0x1B2C94A84);
}

void sub_1B2C94AA4()
{
  JUMPOUT(0x1B2C94A8CLL);
}

OZChannelImpl *OZChannelRotation3D::initCustomInterpolator(OZChannelRotation3D *this)
{
  uint64_t v2;
  OZChannel *v3;
  char *v4;
  OZChannel *v5;
  OZChannelBase *v6;

  v2 = OZChannelRotation3D::_interpolator;
  if (!OZChannelRotation3D::_interpolator)
  {
    v2 = operator new();
    OZInterpolator::OZInterpolator((OZInterpolator *)v2);
    *(_QWORD *)v2 = &off_1E6560898;
    *(_BYTE *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 20) = 0;
    OZChannelRotation3D::_interpolator = v2;
  }
  v3 = (OZChannel *)((char *)this + 136);
  v4 = (char *)this + 848;
  OZChannel::setCustomInterpolator((OZChannelBase *)((char *)this + 136), v2, (uint64_t)this + 848);
  v5 = (OZChannel *)((char *)this + 288);
  OZChannel::setCustomInterpolator((OZChannelBase *)((char *)this + 288), OZChannelRotation3D::_interpolator, (uint64_t)this + 848);
  v6 = (OZChannelBase *)((char *)this + 440);
  OZChannel::setCustomInterpolator(v6, OZChannelRotation3D::_interpolator, (uint64_t)v4);
  OZChannel::setOwnerChannel(v3, v3);
  OZChannel::setOwnerChannel(v5, v5);
  return OZChannel::setOwnerChannel((OZChannel *)v6, (OZChannel *)v6);
}

void sub_1B2C94B7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

void OZChannelRotation3D::OZChannelRotation3D(OZChannelRotation3D *this, double a2, double a3, double a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, unsigned int a9, OZChannelImpl *a10, OZChannelInfo *a11)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v23;
  OZFactoryBase *v24;
  TXParagraphStyleFolder_Factory *v25;
  OZFactoryBase *v26;
  TXParagraphStyleFolder_Factory *v27;
  OZFactoryBase *v28;
  TXParagraphStyleFolder_Factory *v29;
  OZFactoryBase *v30;
  TXParagraphStyleFolder_Factory *v31;
  OZFactoryBase *v32;
  OZChannelEnumInterpMode_Factory *v33;
  OZFactory *v34;
  PCString v35;
  PCString v36;

  Instance = (OZFactory *)OZChannelRotation3D_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a5, a6, a7, a8, 0, a9);
  *(_QWORD *)this = &off_1E6560110;
  *((_QWORD *)this + 2) = &unk_1E6560460;
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v36, CFSTR("Channel X"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 136), a2, &v36, (OZChannelFolder *)this, 1u, 0, a10, a11);
  PCString::~PCString(&v36);
  TXParagraphStyleFolder_Factory::createInstance(v25, v26);
  PCURL::PCURL((PCURL *)&v36, CFSTR("Channel Y"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 288), a3, &v36, (OZChannelFolder *)this, 2u, 0, a10, a11);
  PCString::~PCString(&v36);
  TXParagraphStyleFolder_Factory::createInstance(v27, v28);
  PCURL::PCURL((PCURL *)&v36, CFSTR("Channel Z"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 440), a4, &v36, (OZChannelFolder *)this, 3u, 0, a10, a11);
  PCString::~PCString(&v36);
  TXParagraphStyleFolder_Factory::createInstance(v29, v30);
  PCURL::PCURL((PCURL *)&v36, CFSTR("Channel Rotation3D Iterpolation Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v31, v32);
  PCURL::PCURL((PCURL *)&v35, CFSTR("Channel Rotation3D Iterpolation Label"));
  v34 = (OZFactory *)OZChannelEnumInterpMode_Factory::getInstance(v33);
  OZChannelEnum::OZChannelEnum((OZChannel *)((char *)this + 592), &v36, v34, &v35, (OZChannelFolder *)this, 4u, 0, 0, 0);
  *((_QWORD *)this + 74) = &off_1E65604D0;
  *((_QWORD *)this + 76) = &unk_1E6560840;
  PCString::~PCString(&v35);
  PCString::~PCString(&v36);
  *((_DWORD *)this + 212) = 0;
  OZChannelRotation3D::initCustomInterpolator(this);
}

void sub_1B2C94DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelObjectRootBase *v12;
  OZChannel *v13;
  OZChannel *v14;
  OZChannel *v15;
  PCSpinLock *v16;
  PCString *v17;
  PCSpinLock *v18;

  v18 = v16;
  PCSpinLock::~PCSpinLock(v18);
  OZChannelEnum::~OZChannelEnum(v17);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v12);
  _Unwind_Resume(a1);
}

void sub_1B2C94E78()
{
  JUMPOUT(0x1B2C94E60);
}

void sub_1B2C94E80()
{
  JUMPOUT(0x1B2C94E68);
}

void OZChannelRotation3D::OZChannelRotation3D(OZChannelRotation3D *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  TXParagraphStyleFolder_Factory *v6;
  OZFactoryBase *v7;
  TXParagraphStyleFolder_Factory *v8;
  OZFactoryBase *v9;
  TXParagraphStyleFolder_Factory *v10;
  OZFactoryBase *v11;
  TXParagraphStyleFolder_Factory *v12;
  OZFactoryBase *v13;
  TXParagraphStyleFolder_Factory *v14;
  OZFactoryBase *v15;
  OZChannelEnumInterpMode_Factory *v16;
  OZFactory *Instance;
  PCString v18;
  PCString v19;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_1E6560110;
  *((_QWORD *)v6 + 2) = &unk_1E6560460;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel X"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 136), 0.0, &v19, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Y"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 288), 0.0, &v19, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Z"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 440), 0.0, &v19, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v12, v13);
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Rotation3D Iterpolation Enum"));
  TXParagraphStyleFolder_Factory::createInstance(v14, v15);
  PCURL::PCURL((PCURL *)&v18, CFSTR("Channel Rotation3D Iterpolation Label"));
  Instance = (OZFactory *)OZChannelEnumInterpMode_Factory::getInstance(v16);
  OZChannelEnum::OZChannelEnum((OZChannel *)((char *)this + 592), &v19, Instance, &v18, (OZChannelFolder *)this, 4u, 0, 0, 0);
  *((_QWORD *)this + 74) = &off_1E65604D0;
  *((_QWORD *)this + 76) = &unk_1E6560840;
  PCString::~PCString(&v18);
  PCString::~PCString(&v19);
  *((_DWORD *)this + 212) = 0;
  OZChannelRotation3D::initCustomInterpolator(this);
}

void sub_1B2C95064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelObjectRootBase *v12;
  OZChannel *v13;
  OZChannel *v14;
  OZChannel *v15;
  PCSpinLock *v16;
  PCString *v17;

  PCSpinLock::~PCSpinLock(v16);
  OZChannelEnum::~OZChannelEnum(v17);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v12);
  _Unwind_Resume(a1);
}

void sub_1B2C95100()
{
  JUMPOUT(0x1B2C950E8);
}

void sub_1B2C95108()
{
  JUMPOUT(0x1B2C950F0);
}

void OZChannelRotation3D::OZChannelRotation3D(OZChannelRotation3D *this, const OZChannelRotation3D *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E6560110;
  *(_QWORD *)(v5 + 16) = &unk_1E6560460;
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((_QWORD *)this + 17) = &off_1E6551728;
  *((_QWORD *)this + 19) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((_QWORD *)this + 36) = &off_1E6551728;
  *((_QWORD *)this + 38) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((_QWORD *)this + 55) = &off_1E6551728;
  *((_QWORD *)this + 57) = &unk_1E6551A88;
  OZChannelEnum::OZChannelEnum((OZChannelRotation3D *)((char *)this + 592), (const OZChannelRotation3D *)((char *)a2 + 592), (OZChannelFolder *)this);
  *((_QWORD *)this + 74) = &off_1E65604D0;
  *((_QWORD *)this + 76) = &unk_1E6560840;
  *((_DWORD *)this + 212) = 0;
  OZChannelRotation3D::initCustomInterpolator(this);
}

void sub_1B2C9520C(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannel *v2;
  OZChannel *v3;
  OZChannel *v4;
  PCSpinLock *v5;
  PCString *v6;
  PCSpinLock *v7;

  v7 = v5;
  PCSpinLock::~PCSpinLock(v7);
  OZChannelEnum::~OZChannelEnum(v6);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelRotation3D::~OZChannelRotation3D(OZChannelRotation3D *this)
{
  *(_QWORD *)this = &off_1E6560110;
  *((_QWORD *)this + 2) = &unk_1E6560460;
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 212);
  OZChannelEnum::~OZChannelEnum((PCString *)this + 74);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

{
  OZChannelRotation3D::~OZChannelRotation3D(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelRotation3D::~OZChannelRotation3D(OZChannelRotation3D *this)
{
  OZChannelRotation3D::~OZChannelRotation3D((OZChannelRotation3D *)((char *)this - 16));
}

{
  OZChannelRotation3D::~OZChannelRotation3D((OZChannelRotation3D *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChannelRotation3D::copy(OZChannelRotation3D *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
  OZChannelEnum::copy((PCString *)this + 74, (const OZChannelBase *)((char *)v4 + 592), a3);
}

OZChannelRotation3D *OZChannelRotation3D::clone(OZChannelRotation3D *this)
{
  OZChannelRotation3D *v2;

  v2 = (OZChannelRotation3D *)operator new();
  OZChannelRotation3D::OZChannelRotation3D(v2, this, 0);
  return v2;
}

void sub_1B2C953FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40A120F8A5);
  _Unwind_Resume(a1);
}

OZChannelBase *OZChannelRotation3D::interpWillBeModified(OZChannelRotation3D *this, uint64_t a2)
{
  OZChannel::parentWillBeModified((OZChannel *)((char *)this + 136), a2);
  OZChannel::parentWillBeModified((OZChannel *)((char *)this + 288), a2);
  return OZChannel::parentWillBeModified((OZChannel *)((char *)this + 440), a2);
}

uint64_t OZChannelRotation3D::setCurveInterpolation(OZChannelRotation3D *this, uint64_t a2)
{
  OZChannel *v4;

  v4 = (OZChannel *)((char *)this + 136);
  (*(void (**)(OZChannelRotation3D *, _QWORD))(*(_QWORD *)this + 824))(this, 0);
  OZChannel::setInterpolation(v4, a2);
  OZChannel::setInterpolation((OZChannel *)((char *)this + 288), a2);
  return OZChannel::setInterpolation((OZChannel *)((char *)this + 440), a2);
}

uint64_t OZChannelRotation3D::setKeypointInterpolation(OZChannelRotation3D *this, OZChannel *a2, void *a3, uint64_t a4)
{
  void *Keyframe;
  uint64_t v8;
  void *v9;
  OZChannel *v10;
  void *v11;
  double v13;
  CMTime v14;

  v14 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v13 = 0.0;
  OZChannel::getKeyframe(a2, a3, &v14, &v13);
  if ((OZChannel *)((char *)this + 136) == a2 || (Keyframe = (void *)OZChannel::getKeyframe(a2, &v14)) == 0)
  {
    v8 = 0;
  }
  else
  {
    OZChannel::setKeyframeInterpolation((OZChannel *)((char *)this + 136), Keyframe, a4);
    v8 = 1;
  }
  if ((OZChannel *)((char *)this + 288) != a2)
  {
    v9 = (void *)OZChannel::getKeyframe(a2, &v14);
    if (v9)
    {
      OZChannel::setKeyframeInterpolation((OZChannel *)((char *)this + 288), v9, a4);
      v8 = 1;
    }
  }
  v10 = (OZChannel *)((char *)this + 440);
  if (v10 != a2)
  {
    v11 = (void *)OZChannel::getKeyframe(a2, &v14);
    if (v11)
    {
      OZChannel::setKeyframeInterpolation(v10, v11, a4);
      return 1;
    }
  }
  return v8;
}

OZChannelFolder *OZChannelRotation3D::setValue(OZChannelRotation3D *this, OZChannel *a2, const CMTime *a3, double a4)
{
  OZChannel *v8;
  OZChannel *v9;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  OZChannel *v17;
  const CMTime *v18;
  double v19;
  OZChannel *v20;
  const CMTime *v21;
  double v22;
  OZChannel *v23;
  const CMTime *v24;
  double v25;

  if (!OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000))
    return (OZChannelFolder *)(*((uint64_t (**)(OZChannel *, const CMTime *, _QWORD, double))a2->var0 + 89))(a2, a3, 0, a4);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x100000);
  v8 = (OZChannel *)((char *)this + 288);
  v9 = (OZChannel *)((char *)this + 440);
  if ((OZChannel *)((char *)this + 136) == a2 || v8 == a2 || v9 == a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a3, 0.0);
    v12 = v11;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a3, 0.0);
    v14 = v13;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 440), a3, 0.0);
    v16 = v15;
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 0.0, 1);
    if ((OZChannel *)((char *)this + 136) == a2)
    {
      v17 = a2;
      v18 = a3;
      v19 = a4;
    }
    else
    {
      v17 = (OZChannel *)((char *)this + 136);
      v18 = a3;
      v19 = v12;
    }
    OZChannel::setValue(v17, v18, v19, 0);
    if (v8 == a2)
    {
      v20 = a2;
      v21 = a3;
      v22 = a4;
    }
    else
    {
      v20 = (OZChannel *)((char *)this + 288);
      v21 = a3;
      v22 = v14;
    }
    OZChannel::setValue(v20, v21, v22, 0);
    if (v9 == a2)
    {
      v23 = a2;
      v24 = a3;
      v25 = a4;
    }
    else
    {
      v23 = (OZChannel *)((char *)this + 440);
      v24 = a3;
      v25 = v16;
    }
    OZChannel::setValue(v23, v24, v25, 0);
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 1.0, 1);
  }
  else
  {
    (*((void (**)(OZChannel *, const CMTime *, _QWORD, double))a2->var0 + 89))(a2, a3, 0, a4);
  }
  return OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x100000);
}

OZChannelFolder *OZChannelRotation3D::compoundAddKeypointAt(OZChannelRotation3D *this, OZChannel *a2, const CMTime *a3, char a4)
{
  const CMTime *v9;

  if (!OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000) && (a4 & 1) == 0)
    return (OZChannelFolder *)(*((uint64_t (**)(OZChannel *, const CMTime *))a2->var0 + 75))(a2, a3);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x100000);
  if ((OZChannel *)((char *)this + 136) == a2
    || (OZChannel *)((char *)this + 288) == a2
    || (OZChannel *)((char *)this + 440) == a2)
  {
    v9 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 0.0, 1);
    OZChannel::addKeypointAt((OZChannel *)((char *)this + 136), a3);
    OZChannel::addKeypointAt((OZChannel *)((char *)this + 288), a3);
    OZChannel::addKeypointAt((OZChannel *)((char *)this + 440), a3);
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), v9, 1.0, 1);
  }
  else
  {
    (*((void (**)(OZChannel *, const CMTime *))a2->var0 + 75))(a2, a3);
  }
  return OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x100000);
}

double OZChannelRotation3D::compoundMoveKeypointTo@<D0>(OZChannelRotation3D *this@<X0>, OZChannel *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, CMTime *a8@<X8>)
{
  OZChannel *v15;
  OZChannel *v16;
  double result;
  CMTime v18;
  CMTime v19;

  v19 = *a4;
  if ((OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000) || (a7 & 1) != 0)
    && ((OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x100000),
         v15 = (OZChannel *)((char *)this + 288),
         v16 = (OZChannel *)((char *)this + 440),
         (OZChannel *)((char *)this + 136) == a2)
     || v15 == a2
     || v16 == a2))
  {
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 0.0, 1);
    (*((void (**)(CMTime *__return_ptr, OZChannel *, const CMTime *, CMTime *, uint64_t, uint64_t))a2->var0 + 77))(&v18, a2, a3, &v19, a5, a6);
    v19 = v18;
    if ((OZChannel *)((char *)this + 136) != a2)
      OZChannel::moveKeypointTo((OZChannel *)((char *)this + 136), a3, &v19, a5, a6, (uint64_t)&v18);
    if (v15 != a2)
      OZChannel::moveKeypointTo((OZChannel *)((char *)this + 288), a3, &v19, a5, a6, (uint64_t)&v18);
    if (v16 != a2)
      OZChannel::moveKeypointTo((OZChannel *)((char *)this + 440), a3, &v19, a5, a6, (uint64_t)&v18);
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 1.0, 1);
    OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x100000);
    result = *(double *)&v19.value;
    *a8 = v19;
  }
  else
  {
    (*((void (**)(OZChannel *, const CMTime *, CMTime *, uint64_t, uint64_t))a2->var0 + 77))(a2, a3, &v19, a5, a6);
  }
  return result;
}

OZChannelFolder *OZChannelRotation3D::compoundDeleteKeypointAt(OZChannelRotation3D *this, OZChannel *a2, const CMTime *a3, char a4)
{
  const CMTime *v9;

  if (!OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000) && (a4 & 1) == 0)
    return (OZChannelFolder *)(*((uint64_t (**)(OZChannel *, const CMTime *))a2->var0 + 76))(a2, a3);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x100000);
  if ((OZChannel *)((char *)this + 136) == a2
    || (OZChannel *)((char *)this + 288) == a2
    || (OZChannel *)((char *)this + 440) == a2)
  {
    v9 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 0.0, 1);
    OZChannel::deleteKeypointAt((OZChannel *)((char *)this + 136), a3);
    OZChannel::deleteKeypointAt((OZChannel *)((char *)this + 288), a3);
    OZChannel::deleteKeypointAt((OZChannel *)((char *)this + 440), a3);
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), v9, 1.0, 1);
  }
  else
  {
    (*((void (**)(OZChannel *, const CMTime *))a2->var0 + 76))(a2, a3);
  }
  return OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x100000);
}

OZChannelFolder *OZChannelRotation3D::compoundReset(OZChannelRotation3D *this, OZChannel *a2, char a3)
{
  const CMTime *v7;

  if (!OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000) && (a3 & 1) == 0)
    return (OZChannelFolder *)(*((uint64_t (**)(OZChannel *, _QWORD))a2->var0 + 36))(a2, 0);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x100000);
  if ((OZChannel *)((char *)this + 136) == a2
    || (OZChannel *)((char *)this + 288) == a2
    || (OZChannel *)((char *)this + 440) == a2)
  {
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 0.0, 1);
    OZChannelBase::reset((OZChannelBase *)((char *)this + 136), 0);
    OZChannelBase::reset((OZChannelBase *)((char *)this + 288), 0);
    OZChannelBase::reset((OZChannelBase *)((char *)this + 440), 0);
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), v7, 1.0, 1);
  }
  else
  {
    (*((void (**)(OZChannel *, _QWORD))a2->var0 + 36))(a2, 0);
  }
  return OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x100000);
}

OZChannelFolder *OZChannelRotation3D::compoundSetIsSpline(OZChannelRotation3D *this, OZChannel *a2, uint64_t a3, char a4)
{
  const CMTime *v9;

  if (!OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000) && (a4 & 1) == 0)
    return (OZChannelFolder *)(*((uint64_t (**)(OZChannel *, uint64_t))a2->var0 + 60))(a2, a3);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x100000);
  if ((OZChannel *)((char *)this + 136) == a2
    || (OZChannel *)((char *)this + 288) == a2
    || (OZChannel *)((char *)this + 440) == a2)
  {
    v9 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 0.0, 1);
    OZChannel::setIsSpline((OZChannel *)((char *)this + 136), a3);
    OZChannel::setIsSpline((OZChannel *)((char *)this + 288), a3);
    OZChannel::setIsSpline((OZChannel *)((char *)this + 440), a3);
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), v9, 1.0, 1);
  }
  else
  {
    (*((void (**)(OZChannel *, uint64_t))a2->var0 + 60))(a2, a3);
  }
  return OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x100000);
}

BOOL OZChannelRotation3D::isQuaternionMode(OZChannelRotation3D *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 0.0) == 1;
}

uint64_t OZChannelRotation3D::willBeModified(OZChannelBase *this, uint64_t a2)
{
  OZChannelBase::willBeModified(this, a2);
  return (*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 103))(this, a2);
}

double OZChannelRotation3D::getValueAsQuatd(uint64_t a1, double *a2, CMTime *a3, double a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __double2 v13;
  double v14;
  __double2 v15;
  double v16;
  __double2 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double result;
  double v27;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 136), a3, a4);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 288), a3, a4);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 440), a3, a4);
  v27 = v12;
  v13 = __sincos_stret(v9 * 0.5);
  v14 = v13.__sinval * 0.0;
  v15 = __sincos_stret(v11 * 0.5);
  v16 = v15.__sinval * 0.0;
  v17 = __sincos_stret(v27 * 0.5);
  v18 = v13.__cosval * v15.__cosval - (v14 * v16 + v14 * v15.__sinval + v13.__sinval * v16);
  v19 = v13.__sinval * v15.__cosval + v13.__cosval * v16 + v14 * v15.__sinval - v14 * v16;
  v20 = v14 * v15.__cosval + v13.__cosval * v15.__sinval + v13.__sinval * v16 - v14 * v16;
  v21 = v14 * v16 - v13.__sinval * v15.__sinval + v14 * v15.__cosval + v13.__cosval * v16;
  v22 = v17.__sinval * 0.0 * v19;
  v23 = v17.__sinval * 0.0 * v20;
  v24 = v17.__sinval * 0.0 * v18;
  v25 = v17.__sinval * 0.0 * v21;
  a2[2] = v25 - v17.__sinval * v19 + v17.__cosval * v20 + v24;
  a2[3] = v22 - v23 + v17.__cosval * v21 + v17.__sinval * v18;
  result = v17.__sinval * v20 - v25 + v17.__cosval * v19 + v24;
  *a2 = v17.__cosval * v18 - (v17.__sinval * v21 + v22 + v23);
  a2[1] = result;
  return result;
}

BOOL PCQuat<double>::getIncrementalEulerAngles(double *a1, double *a2, double *a3, double *a4, unsigned int a5)
{
  double v9;
  double v10;
  double v11;
  _BOOL8 result;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _OWORD v22[3];
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v9 = *a2;
  v10 = *a3;
  v11 = *a4;
  v36 = 0x3FF0000000000000;
  v33 = 0x3FF0000000000000;
  v30 = 0x3FF0000000000000;
  v27 = 0x3FF0000000000000;
  v28 = 0u;
  v29 = 0u;
  v31 = 0u;
  v32 = 0u;
  v34 = 0u;
  v35 = 0u;
  PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v27, a1);
  memset(v22, 0, sizeof(v22));
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  v23 = a5;
  result = PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v27, (uint64_t)v22);
  v13 = *((_QWORD *)&v24 + 1);
  *(_QWORD *)a2 = v24;
  *(_QWORD *)a3 = v13;
  *(_QWORD *)a4 = v25;
  *a2 = *a2 + (double)(int)vcvtmd_s64_f64((v9 - *a2) / 6.28318531 + 0.5 + 0.0000001) * 6.28318531;
  *a3 = *a3 + (double)(int)vcvtmd_s64_f64((v10 - *a3) / 6.28318531 + 0.5 + 0.0000001) * 6.28318531;
  v14 = *a4 + (double)(int)vcvtmd_s64_f64((v11 - *a4) / 6.28318531 + 0.5 + 0.0000001) * 6.28318531;
  *a4 = v14;
  v15 = -v14;
  v16 = -*a2;
  v17 = -*a3;
  if (((1 << a5) & 0x14) != 0)
    v17 = *a3;
  else
    v16 = *a2;
  if (((1 << a5) & 0xA) != 0)
  {
    v16 = *a2;
    v17 = *a3;
  }
  else
  {
    v15 = v14;
  }
  if (a5 > 5)
  {
    v16 = *a2;
    v17 = *a3;
    v15 = v14;
  }
  v18 = v15 + 3.14159265;
  v19 = v16
      + 3.14159265
      + (double)(int)vcvtmd_s64_f64((v9 - (v16 + 3.14159265)) / 6.28318531 + 0.5 + 0.0000001) * 6.28318531;
  v20 = v17
      + 3.14159265
      + (double)(int)vcvtmd_s64_f64((v10 - (v17 + 3.14159265)) / 6.28318531 + 0.5 + 0.0000001) * 6.28318531;
  v21 = v18 + (double)(int)vcvtmd_s64_f64((v11 - v18) / 6.28318531 + 0.5 + 0.0000001) * 6.28318531;
  if (vabdd_f64(v19, v9) + vabdd_f64(v20, v10) + vabdd_f64(v21, v11) < vabdd_f64(*a2, v9)
                                                                      + vabdd_f64(*a3, v10)
                                                                      + vabdd_f64(v14, v11))
  {
    *a2 = v19;
    *a3 = v20;
    *a4 = v21;
  }
  return result;
}

void OZChannelRotation3D::getValueAsEulerAngles(uint64_t a1, const CMTime *a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 136), a2, a4);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 288), a2, a4);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 440), a2, a4);
  *a3 = v9;
  a3[1] = v11;
  a3[2] = v12;
}

OZChannelFolder *OZChannelRotation3D::interpolationModeWasSet(OZChannelRotation3D *this)
{
  OZChannelFolder *v1;
  OZChannel *v2;
  CMTime *v3;
  int v4;
  OZChannel *v5;
  OZChannel *v6;
  OZChannel *v7;
  OZChannel *v8;
  OZChannel *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  OZChannelFolder *v13;
  int i;
  OZChannel *v15;
  OZChannel *v16;
  void *Keyframe;
  uint64_t KeyframeInterpolation;
  OZChannel *v20;
  uint64_t v21;
  double v22;
  CMTime v23;
  void *__p[3];

  v1 = (OZChannelFolder *)this;
  v2 = (OZChannel *)((char *)this + 592);
  v3 = (CMTime *)MEMORY[0x1E0CA2E68];
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 0.0) != 1)
    return OZChannelFolder::resetFoldFlag(v1, 0x100000);
  v20 = v2;
  OZChannel::setKeyframe(v2, v3, 0.0, 1);
  OZChannelFolder::setFoldFlag(v1, 0x100000);
  v4 = 0;
  v5 = (OZChannel *)((char *)v1 + 288);
  v6 = (OZChannel *)((char *)v1 + 136);
  v7 = (OZChannel *)((char *)v1 + 440);
  do
  {
    if (v4 == 1)
      v8 = v5;
    else
      v8 = v7;
    if (v4)
      v9 = v8;
    else
      v9 = v6;
    v10 = (*((uint64_t (**)(OZChannel *))v9->var0 + 104))(v9);
    if (v10)
    {
      v11 = v10;
      OZChannel::getKeyframes(v9, 0, __p);
      v12 = 0;
      v21 = v11;
      do
      {
        v23 = *v3;
        v22 = 0.0;
        OZChannel::getKeyframe(v9, *((void **)__p[0] + v12), &v23, &v22);
        OZChannelFolder::addKeypointAt(v1, &v23);
        v13 = v1;
        for (i = 0; i != 3; ++i)
        {
          if (v4 != i)
          {
            if (i == 1)
              v15 = v5;
            else
              v15 = v7;
            if (i)
              v16 = v15;
            else
              v16 = v6;
            Keyframe = (void *)OZChannel::getKeyframe(v16, &v23);
            if (Keyframe)
            {
              KeyframeInterpolation = OZChannel::getKeyframeInterpolation(v9, *((void **)__p[0] + v12));
              OZChannel::setKeyframeInterpolation(v16, Keyframe, KeyframeInterpolation);
            }
          }
        }
        ++v12;
        v1 = v13;
        v3 = (CMTime *)MEMORY[0x1E0CA2E68];
      }
      while (v12 != v21);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    ++v4;
  }
  while (v4 != 3);
  return (OZChannelFolder *)OZChannel::setKeyframe(v20, MEMORY[0x1E0CA2E68], 1.0, 1);
}

void sub_1B2C9648C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const __CFString *OZChannelRotation3D::getObjCWrapperName(OZChannelRotation3D *this)
{
  return CFSTR("CHChannelRotation3D");
}

uint64_t OZChannelRotation3D::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  OZChannelFolder::parseEnd(this, a2);
  OZChannelRotation3D::interpolationModeWasSet((OZChannelRotation3D *)this);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelRotation3D::parseEnd(OZChannelRotation3D *this, PCSerializerReadStream *a2)
{
  OZChannelRotation3D *v2;

  v2 = (OZChannelRotation3D *)((char *)this - 16);
  OZChannelFolder::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
  OZChannelRotation3D::interpolationModeWasSet(v2);
  return 1;
}

uint64_t OZChannelEnumInterpMode_Factory::getInstance(OZChannelEnumInterpMode_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelEnumInterpMode_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelEnumInterpMode_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnumInterpMode_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnumInterpMode_Factory::_instance;
}

const __CFString *OZChannelEnumInterpMode::getObjCWrapperName(OZChannelEnumInterpMode *this)
{
  return CFSTR("CHChannelEnum");
}

void *OZChannelEnumInterpMode::willBeModified(OZChannel *this, uint64_t a2)
{
  void *result;

  OZChannel::willBeModified(this, a2);
  result = this->var6;
  if (result)
  {
    if (result)
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)result + 824))(result, a2);
  }
  return result;
}

void *OZChannelEnumInterpMode::addToUndo(OZChannelBase *this, const PCString *a2)
{
  OZChannelFolder *var6;
  void *result;
  uint64_t v5;
  BOOL v6;

  var6 = this->var6;
  result = OZChannelBase::getChannelRootBase(this);
  if (var6)
  {
    v5 = (uint64_t)result;
    result = (void *)(*(uint64_t (**)(OZChannelFolder *))(*(_QWORD *)var6 + 120))(var6);
    if ((_DWORD)result)
      v6 = v5 == 0;
    else
      v6 = 1;
    if (!v6)
      return (void *)(*(uint64_t (**)(uint64_t, OZChannelFolder *, const PCString *))(*(_QWORD *)v5 + 752))(v5, var6, a2);
  }
  return result;
}

void OZQuaternionCubicInterpolator::~OZQuaternionCubicInterpolator(PCSpinLock *this)
{
  const PCString *v2;

  *(_QWORD *)&this->_lock._os_unfair_lock_opaque = &off_1E6560898;
  PCSpinLock::~PCSpinLock(this + 5);
  OZChannelBase::setRangeName((OZChannelBase *)this, v2);
}

{
  const PCString *v2;

  *(_QWORD *)&this->_lock._os_unfair_lock_opaque = &off_1E6560898;
  PCSpinLock::~PCSpinLock(this + 5);
  OZChannelBase::setRangeName((OZChannelBase *)this, v2);
  JUMPOUT(0x1B5E29170);
}

FILE *OZQuaternionCubicInterpolator::interpolate(OZQuaternionCubicInterpolator *this, OZSpline *a2, const CMTime *a3, char *a4, char *a5, const CMTime *a6)
{
  int v11;
  const void *v12;
  char *v13;
  char *CurveInterface;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  __double2 v23;
  double v24;
  double v25;
  __double2 v26;
  double v27;
  __double2 v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  __double2 v37;
  double v38;
  __double2 v39;
  double v40;
  __double2 v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  Float64 v66;
  double v67;
  Float64 Seconds;
  CMTime *v69;
  const CMTime *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  __double2 v77;
  double v78;
  __double2 v79;
  double v80;
  __double2 v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  __double2 v90;
  double v91;
  __double2 v92;
  double v93;
  __double2 v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  _BOOL8 Transformation;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  FILE *result;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  _BYTE time2[32];
  __int128 v140;
  int v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  CMTime time1;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  CMTime v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  CMTime v158;
  uint64_t v159;
  void *v160;
  void *v161;
  CMTime v162;
  _BYTE v163[24];
  CMTime v164;
  __int128 v165;
  uint64_t v166;
  CMTime time;
  Float64 v168;
  CMTime v169;
  double v170;
  CMTime v171;
  double v172;
  CMTime v173;
  CMTime v174[2];

  v11 = (*(uint64_t (**)(char *, OZSpline *, const CMTime *))(*(_QWORD *)a4 + 208))(a4, a2, a3);
  v174[0] = *(CMTime *)(a4 + 16);
  v173 = *(CMTime *)(a5 + 16);
  time1 = *(CMTime *)(a4 + 16);
  *(_OWORD *)time2 = *((_OWORD *)a5 + 1);
  *(_QWORD *)&time2[16] = *((_QWORD *)a5 + 4);
  if (CMTimeCompare(&time1, (CMTime *)time2) >= 1)
  {
    OZSpline::getSmallDeltaU(a2, &v169);
    time1 = v174[0];
    *(CMTime *)time2 = v169;
    PC_CMTimeSaferAdd(&time1, (CMTime *)time2, (uint64_t)&v171);
    v173 = v171;
  }
  v12 = *(const void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 20) + 32) + 152) + 48);
  if (v12)
  else
    v13 = 0;
  CurveInterface = (char *)OZChannel::getCurveInterface((OZChannel *)(v13 + 136));
  if (CurveInterface)
  v15 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)(CurveInterface + 40));
  v16 = (char *)OZChannel::getCurveInterface((OZChannel *)(v13 + 288));
  if (v16)
  v17 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)(v16 + 40));
  v18 = (char *)OZChannel::getCurveInterface((OZChannel *)(v13 + 440));
  if (v18)
  v19 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)(v18 + 40));
  v20 = MEMORY[0x1E0CA2E68];
  v21 = (*(double (**)(uint64_t, CMTime *, _QWORD, _QWORD))(*(_QWORD *)v15 + 240))(v15, v174, MEMORY[0x1E0CA2E68], 0);
  v137 = (*(double (**)(uint64_t, CMTime *, uint64_t, _QWORD))(*(_QWORD *)v15 + 240))(v15, &v173, v20, 0);
  v22 = (*(double (**)(uint64_t, CMTime *, uint64_t, _QWORD))(*(_QWORD *)v17 + 240))(v17, v174, v20, 0);
  v135 = (*(double (**)(uint64_t, CMTime *, uint64_t, _QWORD))(*(_QWORD *)v17 + 240))(v17, &v173, v20, 0);
  v130 = (*(double (**)(uint64_t, CMTime *, uint64_t, _QWORD))(*(_QWORD *)v19 + 240))(v19, v174, v20, 0);
  v133 = (*(double (**)(uint64_t, CMTime *, uint64_t, _QWORD))(*(_QWORD *)v19 + 240))(v19, &v173, v20, 0);
  v23 = __sincos_stret(v21 * 0.5);
  v24 = 0.0;
  v25 = v23.__sinval * 0.0;
  v26 = __sincos_stret(v22 * 0.5);
  v27 = v26.__sinval * 0.0;
  v28 = __sincos_stret(v130 * 0.5);
  v29 = v23.__cosval * v26.__cosval - (v25 * v27 + v25 * v26.__sinval + v23.__sinval * v27);
  v30 = v23.__sinval * v26.__cosval + v23.__cosval * v27 + v25 * v26.__sinval - v25 * v27;
  v31 = v25 * v26.__cosval + v23.__cosval * v26.__sinval + v23.__sinval * v27 - v25 * v27;
  v32 = v25 * v27 - v23.__sinval * v26.__sinval + v25 * v26.__cosval + v23.__cosval * v27;
  v33 = v30 * (v28.__sinval * 0.0);
  v34 = v31 * (v28.__sinval * 0.0);
  v131 = v29 * v28.__cosval - (v32 * v28.__sinval + v33 + v34);
  v35 = v29 * (v28.__sinval * 0.0);
  v36 = v32 * (v28.__sinval * 0.0);
  v126 = v31 * v28.__cosval + v35 + v36 - v30 * v28.__sinval;
  v128 = v30 * v28.__cosval + v35 + v31 * v28.__sinval - v36;
  v124 = v29 * v28.__sinval + v32 * v28.__cosval + v33 - v34;
  v169.value = 0x3FF0000000000000;
  v37 = __sincos_stret(v137 * 0.5);
  v38 = v37.__sinval * 0.0;
  v39 = __sincos_stret(v135 * 0.5);
  v40 = v39.__sinval * 0.0;
  v41 = __sincos_stret(v133 * 0.5);
  v42 = v37.__cosval * v39.__cosval - (v38 * v40 + v38 * v39.__sinval + v37.__sinval * v40);
  v43 = v37.__sinval * v39.__cosval + v37.__cosval * v40 + v38 * v39.__sinval - v38 * v40;
  v44 = v38 * v39.__cosval + v37.__cosval * v39.__sinval + v37.__sinval * v40 - v38 * v40;
  v45 = v38 * v40 - v37.__sinval * v39.__sinval + v38 * v39.__cosval + v37.__cosval * v40;
  v46 = v43 * (v41.__sinval * 0.0);
  v47 = v44 * (v41.__sinval * 0.0);
  v48 = v42 * v41.__cosval - (v45 * v41.__sinval + v46 + v47);
  v49 = v42 * (v41.__sinval * 0.0);
  v50 = v42 * v41.__sinval + v45 * v41.__cosval;
  v51 = v45 * (v41.__sinval * 0.0);
  v52 = v43 * v41.__cosval + v49 + v44 * v41.__sinval - v51;
  v53 = v44 * v41.__cosval + v49 + v51 - v43 * v41.__sinval;
  v54 = v50 + v46 - v47;
  v55 = sqrt(v131 * v131 + v124 * v124 + v128 * v128 + v126 * v126);
  if (v55 == 0.0)
  {
    *(_QWORD *)&v171.timescale = 0;
    v171.epoch = 0;
    v172 = 0.0;
    v58 = 1.0;
    v57 = 0.0;
    v56 = 0.0;
  }
  else
  {
    v56 = v128 / v55;
    v57 = v126 / v55;
    *(double *)&v171.timescale = v128 / v55;
    *(double *)&v171.epoch = v126 / v55;
    v24 = v124 / v55;
    v172 = v124 / v55;
    v58 = v131 / v55;
  }
  *(double *)&v171.value = v58;
  v59 = sqrt(v48 * v48 + v54 * v54 + v52 * v52 + v53 * v53);
  if (v59 == 0.0)
  {
    *(_QWORD *)&v169.timescale = 0;
    v169.epoch = 0;
    v170 = 0.0;
    v63 = 1.0;
    v62 = 0.0;
    v61 = 0.0;
    v60 = 0.0;
  }
  else
  {
    v60 = v52 / v59;
    v61 = v53 / v59;
    *(double *)&v169.timescale = v60;
    *(double *)&v169.epoch = v61;
    v62 = v54 / v59;
    v170 = v62;
    v63 = v48 / v59;
  }
  *(double *)&v169.value = v63;
  v64 = (v58 - v63) * (v58 - v63) + (v56 - v60) * (v56 - v60) + (v57 - v61) * (v57 - v61) + (v24 - v62) * (v24 - v62);
  v65 = (v58 + v63) * (v58 + v63) + (v56 + v60) * (v56 + v60) + (v57 + v61) * (v57 + v61) + (v24 + v62) * (v24 + v62);
  if (v65 < v64)
  {
    *(double *)&v169.value = -v63;
    *(double *)&v169.timescale = -v60;
    *(double *)&v169.epoch = -v61;
    v170 = -v62;
  }
  if (v11 == 8)
  {
    time1 = *a6;
    *(CMTime *)time2 = v174[0];
    PC_CMTimeSaferSubtract(&time1, (CMTime *)time2, (uint64_t)&v154);
    operator*(&v154, &v158, 3.14159265);
    time1 = v173;
    *(CMTime *)time2 = v174[0];
    PC_CMTimeSaferSubtract(&time1, (CMTime *)time2, (uint64_t)&v165);
    operator/((__int128 *)&v158.value, (uint64_t)&v165, (uint64_t)&v164);
    Seconds = CMTimeGetSeconds(&v164);
    v67 = sin(Seconds * 0.5);
    goto LABEL_24;
  }
  if (v11 == 7)
  {
    time1 = *a6;
    *(CMTime *)time2 = v174[0];
    PC_CMTimeSaferSubtract(&time1, (CMTime *)time2, (uint64_t)&v154);
    operator*(&v154, &v158, 3.14159265);
    time1 = v173;
    *(CMTime *)time2 = v174[0];
    PC_CMTimeSaferSubtract(&time1, (CMTime *)time2, (uint64_t)&v165);
    operator/((__int128 *)&v158.value, (uint64_t)&v165, (uint64_t)&time);
    v66 = CMTimeGetSeconds(&time);
    v67 = 1.0 - cos(v66 * 0.5);
LABEL_24:
    v168 = v67;
    v11 = 1;
    goto LABEL_29;
  }
  time1 = *a6;
  *(CMTime *)time2 = v174[0];
  PC_CMTimeSaferSubtract(&time1, (CMTime *)time2, (uint64_t)&v158);
  time1 = v173;
  *(CMTime *)time2 = v174[0];
  PC_CMTimeSaferSubtract(&time1, (CMTime *)time2, (uint64_t)&v154);
  if ((v11 - 13) > 1)
  {
    operator/((__int128 *)&v158.value, (uint64_t)&v154, (uint64_t)&v162);
    v69 = &v162;
  }
  else
  {
    operator/((__int128 *)&v158.value, (uint64_t)&v154, (uint64_t)v163);
    v69 = (CMTime *)v163;
  }
  v168 = CMTimeGetSeconds(v69);
LABEL_29:
  v160 = 0;
  v161 = 0;
  v70 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZSpline::getPreviousValidVertex(a2, a4, &v161, MEMORY[0x1E0CA2E68]);
  OZSpline::getNextValidVertex((void ***)a2, a5, &v160, v70);
  if ((v11 & 0xFFFFFFFD) == 4)
  {
    v71 = (char *)v161;
    if (!v161)
    {
      v161 = a4;
      v71 = a4;
    }
    v122 = v65;
    v123 = v64;
    v72 = (char *)v160;
    if (!v160)
    {
      v160 = a5;
      v72 = a5;
    }
    v158.value = 0x3FF0000000000000;
    *(_QWORD *)&v158.timescale = 0;
    v158.epoch = 0;
    v159 = 0;
    v165 = *((_OWORD *)v71 + 1);
    v166 = *((_QWORD *)v71 + 4);
    v156 = *((_OWORD *)v72 + 1);
    v157 = *((_QWORD *)v72 + 4);
    v73 = MEMORY[0x1E0CA2E68];
    v74 = (*(double (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v15 + 240))(v15, &v165, MEMORY[0x1E0CA2E68], 0);
    v138 = (*(double (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v15 + 240))(v15, &v156, v73, 0);
    v75 = (*(double (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v17 + 240))(v17, &v165, v73, 0);
    v136 = (*(double (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v17 + 240))(v17, &v156, v73, 0);
    v76 = (*(double (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v19 + 240))(v19, &v165, v73, 0);
    v134 = (*(double (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v19 + 240))(v19, &v156, v73, 0);
    v77 = __sincos_stret(v74 * 0.5);
    v78 = v77.__sinval * 0.0;
    v79 = __sincos_stret(v75 * 0.5);
    v80 = v79.__sinval * 0.0;
    v81 = __sincos_stret(v76 * 0.5);
    v82 = v77.__cosval * v79.__cosval - (v78 * v80 + v78 * v79.__sinval + v77.__sinval * v80);
    v83 = v77.__sinval * v79.__cosval + v77.__cosval * v80 + v78 * v79.__sinval - v78 * v80;
    v84 = v78 * v79.__cosval + v77.__cosval * v79.__sinval + v77.__sinval * v80 - v78 * v80;
    v85 = v78 * v80 - v77.__sinval * v79.__sinval + v78 * v79.__cosval + v77.__cosval * v80;
    v86 = v83 * (v81.__sinval * 0.0);
    v87 = v84 * (v81.__sinval * 0.0);
    v132 = v82 * v81.__cosval - (v85 * v81.__sinval + v86 + v87);
    v88 = v82 * (v81.__sinval * 0.0);
    v89 = v85 * (v81.__sinval * 0.0);
    v127 = v84 * v81.__cosval + v88 + v89 - v83 * v81.__sinval;
    v129 = v83 * v81.__cosval + v88 + v84 * v81.__sinval - v89;
    v125 = v82 * v81.__sinval + v85 * v81.__cosval + v86 - v87;
    *(_QWORD *)time2 = 0x3FF0000000000000;
    v90 = __sincos_stret(v138 * 0.5);
    v91 = v90.__sinval * 0.0;
    v92 = __sincos_stret(v136 * 0.5);
    v93 = v92.__sinval * 0.0;
    v94 = __sincos_stret(v134 * 0.5);
    v95 = v90.__cosval * v92.__cosval - (v91 * v93 + v91 * v92.__sinval + v90.__sinval * v93);
    v96 = v90.__sinval * v92.__cosval + v90.__cosval * v93 + v91 * v92.__sinval - v91 * v93;
    v97 = v91 * v92.__cosval + v90.__cosval * v92.__sinval + v90.__sinval * v93 - v91 * v93;
    v98 = v91 * v93 - v90.__sinval * v92.__sinval + v91 * v92.__cosval + v90.__cosval * v93;
    v99 = v96 * (v94.__sinval * 0.0);
    v100 = v97 * (v94.__sinval * 0.0);
    v101 = v95 * v94.__cosval - (v98 * v94.__sinval + v99 + v100);
    v102 = v95 * (v94.__sinval * 0.0);
    v103 = v98 * (v94.__sinval * 0.0);
    v104 = v103 - v96 * v94.__sinval;
    v105 = v96 * v94.__cosval + v102 + v97 * v94.__sinval - v103;
    v106 = v97 * v94.__cosval + v102 + v104;
    v107 = v95 * v94.__sinval + v98 * v94.__cosval + v99 - v100;
    v108 = sqrt(v132 * v132 + v125 * v125 + v129 * v129 + v127 * v127);
    if (v108 == 0.0)
    {
      *(_QWORD *)&time1.timescale = 0;
      time1.epoch = 0;
      *(_QWORD *)&v146 = 0;
      v109 = 1.0;
    }
    else
    {
      *(double *)&time1.timescale = v129 / v108;
      *(double *)&time1.epoch = v127 / v108;
      *(double *)&v146 = v125 / v108;
      v109 = v132 / v108;
    }
    *(double *)&time1.value = v109;
    v110 = sqrt(v101 * v101 + v107 * v107 + v105 * v105 + v106 * v106);
    if (v110 == 0.0)
    {
      memset(&time2[8], 0, 24);
      v114 = 1.0;
      v113 = 0.0;
      v112 = 0.0;
      v111 = 0.0;
    }
    else
    {
      v111 = v105 / v110;
      v112 = v106 / v110;
      *(double *)&time2[8] = v111;
      *(double *)&time2[16] = v112;
      v113 = v107 / v110;
      *(double *)&time2[24] = v113;
      v114 = v101 / v110;
    }
    *(double *)time2 = v114;
    if (v122 < v123)
    {
      *(double *)time2 = -v114;
      *(double *)&time2[8] = -v111;
      *(double *)&time2[16] = -v112;
      *(double *)&time2[24] = -v113;
    }
    spline<double>((double *)&time1.value, (double *)&v171.value, (double *)&v169.value, (double *)time2, &v168, (uint64_t)&v154);
    v158 = v154;
    v159 = v155;
  }
  else
  {
    slerp<double>((double *)&v171.value, (double *)&v169.value, &v168, (uint64_t)&time1);
    v158 = time1;
    v159 = v146;
  }
  v153 = 0x3FF0000000000000;
  v150 = 0x3FF0000000000000;
  v147 = 0x3FF0000000000000;
  time1.value = 0x3FF0000000000000;
  *(_OWORD *)&time1.timescale = 0u;
  v146 = 0u;
  v148 = 0u;
  v149 = 0u;
  v151 = 0u;
  v152 = 0u;
  PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&time1, (double *)&v158.value);
  v140 = 0u;
  memset(time2, 0, sizeof(time2));
  v141 = 4;
  v142 = 0u;
  v143 = 0u;
  v144 = 0;
  Transformation = PCMatrix44Tmpl<double>::getTransformation((__int128 *)&time1.value, (uint64_t)time2);
  result = _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/ProChanneliOS/Channels/OZChannelRotation3D.cpp", 745, v116, v117, v118, v119, v120);
  *((_BYTE *)this + 16) = 0;
  return result;
}

double spline<double>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  double v12[4];
  double v13[4];

  intermediate<double>(a1, a2, a3, (uint64_t)v13);
  intermediate<double>(a2, a3, a4, (uint64_t)v12);
  return squad<double>(a2, v13, v12, a3, a5, a6);
}

void slerp<double>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  long double v16;
  long double v17;
  long double v18;
  long double v19;
  double v20;
  double v21;
  double v22;
  long double v23;
  double v24;
  double v25;
  double v26;

  v5 = *a1;
  v6 = a1[1];
  v8 = *a2;
  v7 = a2[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = a2[2];
  v12 = a2[3];
  v13 = *a1 * *a2 + v6 * v7 + v9 * v11 + v10 * v12;
  if (v13 >= 1.0)
  {
    *(double *)a4 = v5;
    *(double *)(a4 + 8) = v6;
  }
  else
  {
    v14 = sqrt(1.0 - v13 * v13);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    v15 = *a3;
    if (v14 * 1.79769313e308 <= 1.0)
    {
      if (v13 <= 0.0)
      {
        v22 = sin((0.5 - v15) * 3.14159265);
        v23 = sin(v15 * 3.14159265);
        v20 = v10 * v23 + v5 * v22;
        v21 = v6 * v22 - v9 * v23;
        v9 = v23 * v6 + v9 * v22;
        v10 = v10 * v22 - v5 * v23;
      }
      else
      {
        v20 = v8 * v15 + v5 * (1.0 - v15);
        v21 = v7 * v15 + v6 * (1.0 - v15);
        v9 = v11 * v15 + v9 * (1.0 - v15);
        v10 = v12 * v15 + v10 * (1.0 - v15);
      }
    }
    else
    {
      v25 = v7;
      v26 = v14;
      v24 = acos(v13);
      v16 = sin(v24 * (1.0 - v15));
      v17 = v24 * v15;
      v18 = v16 / v26;
      v19 = sin(v17) / v26;
      v20 = v8 * v19 + v5 * v18;
      v21 = v25 * v19 + v6 * v18;
      v9 = v11 * v19 + v9 * v18;
      v10 = v12 * v19 + v10 * v18;
    }
    *(double *)a4 = v20;
    *(double *)(a4 + 8) = v21;
  }
  *(double *)(a4 + 16) = v9;
  *(double *)(a4 + 24) = v10;
}

uint64_t OZQuaternionCubicInterpolator::useTangents(OZQuaternionCubicInterpolator *this)
{
  return 0;
}

char *OZQuaternionCubicInterpolator::isActive(OZQuaternionCubicInterpolator *this, OZSpline *a2, void *a3)
{
  int v4;
  uint64_t v5;
  char *result;

  if (a3)
    v4 = (*(uint64_t (**)(void *))(*(_QWORD *)a3 + 208))(a3) == 0;
  else
    v4 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 20) + 32) + 152);
  if (!v5)
    return 0;
  result = *(char **)(v5 + 48);
  if (result)
  {
    if (result)
      return (char *)((OZChannel::getValueAsInt((OZChannel *)(result + 592), MEMORY[0x1E0CA2E68], 0.0) != 0) & ~v4);
  }
  return result;
}

void std::__call_once_param<std::tuple<OZChannelEnumInterpMode_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelEnumInterpMode_Factory *v0;

  v0 = (OZChannelEnumInterpMode_Factory *)operator new();
  OZChannelEnumInterpMode_Factory::OZChannelEnumInterpMode_Factory(v0);
  OZChannelEnumInterpMode_Factory::_instance = (uint64_t)v0;
}

void sub_1B2C977D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelEnumInterpMode_Factory::OZChannelEnumInterpMode_Factory(OZChannelEnumInterpMode_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B35558F0;
  v4 = xmmword_1B3557570;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6560968;
  *((_QWORD *)this + 16) = &unk_1E6560A38;
}

void sub_1B2C97878(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelEnumInterpMode_Factory *OZChannelEnumInterpMode_Factory::create(OZChannelEnumInterpMode_Factory *this, const PCString *a2, unsigned int a3)
{
  OZChannelEnumInterpMode_Factory *v5;
  OZFactory *Instance;

  v5 = (OZChannelEnumInterpMode_Factory *)operator new();
  Instance = (OZFactory *)OZChannelEnumInterpMode_Factory::getInstance(v5);
  OZChannelEnum::OZChannelEnum((OZChannel *)v5, Instance, a2, a3, 0, 0);
  *(_QWORD *)v5 = &off_1E65604D0;
  *((_QWORD *)v5 + 2) = &unk_1E6560840;
  return v5;
}

void sub_1B2C97908(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelEnumInterpMode_Factory::createCopy(OZChannelEnumInterpMode_Factory *this, OZFactoryBase *a2)
{
  OZChannelEnum *v3;
  const OZChannelEnum *v4;

  v3 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v3, v4, 0);
  *(_QWORD *)v3 = &off_1E65604D0;
  *((_QWORD *)v3 + 2) = &unk_1E6560840;
  return v3;
}

void sub_1B2C979A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelEnumInterpMode_Factory::createChannelCopy(OZChannelEnumInterpMode_Factory *this, OZChannelBase *a2)
{
  OZChannelEnum *v3;
  const OZChannelEnum *v4;

  v3 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v3, v4, 0);
  *(_QWORD *)v3 = &off_1E65604D0;
  *((_QWORD *)v3 + 2) = &unk_1E6560840;
  return v3;
}

void sub_1B2C97A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void intermediate<double>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  long double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  BOOL v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  long double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v52;
  long double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;

  v6 = *a2;
  v5 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = v6 * v6 + v5 * v5 + v7 * v7 + v8 * v8;
  v10 = *a2;
  v11 = v5;
  v12 = v7;
  v13 = v8;
  if (v9 != 0.0)
  {
    v10 = v6 / v9;
    v11 = -v5 / v9;
    v12 = -v7 / v9;
    v13 = -v8 / v9;
  }
  v70 = a2[1];
  v14 = a3[1];
  v15 = a3[2];
  v16 = a3[3];
  v69 = v10 * *a3 - (v11 * v14 + v12 * v15 + v13 * v16);
  v65 = v11 * *a3 + v10 * v14;
  v63 = v13 * *a3 + v10 * v16;
  v64 = v12 * *a3 + v10 * v15;
  v61 = v13 * v14 - v11 * v16;
  v62 = v12 * v16 - v13 * v15;
  v60 = v11 * v15 - v12 * v14;
  v17 = a1[1];
  v18 = a1[2];
  v19 = a1[3];
  v20 = v11 * *a1 + v10 * v17 + v12 * v19 - v13 * v18;
  v21 = v12 * *a1 + v10 * v18 + v13 * v17 - v11 * v19;
  v22 = v11 * v18 - v12 * v17 + v13 * *a1 + v10 * v19;
  if (v10 * *a1 - (v11 * v17 + v12 * v18 + v13 * v19) <= 1.0)
    v23 = v10 * *a1 - (v11 * v17 + v12 * v18 + v13 * v19);
  else
    v23 = 1.0;
  v24 = acos(v23);
  v25 = sin(v24);
  if (v24 == 0.0)
  {
    v66 = v22;
    v67 = v21;
    v68 = v20;
  }
  else
  {
    v26 = fabs(v25);
    v29 = v26 < 1.0;
    v27 = fabs(v24);
    v28 = v26 * 1.79769313e308;
    v29 = !v29 || v27 < v28;
    if (v29)
      v30 = v24 / v25;
    else
      v30 = 0.0;
    v67 = v21 * v30;
    v68 = v20 * v30;
    v66 = v22 * v30;
  }
  v31 = v65 + v62;
  v32 = v64 + v61;
  v33 = v60 + v63;
  v34 = v69;
  if (v69 > 1.0)
    v34 = 1.0;
  v35 = acos(v34);
  v36 = sin(v35);
  if (v35 != 0.0)
  {
    v37 = fabs(v36);
    v29 = v37 < 1.0;
    v38 = fabs(v35);
    v39 = v37 * 1.79769313e308;
    if (!v29 || v38 < v39)
      v41 = v35 / v36;
    else
      v41 = 0.0;
    v31 = v31 * v41;
    v32 = v32 * v41;
    v33 = v33 * v41;
  }
  v42 = v66 + v33;
  v43 = (v68 + v31) * -0.25;
  v44 = (v67 + v32) * -0.25;
  v45 = v42 * -0.25;
  v46 = sqrt(v44 * v44 + v43 * v43 + v45 * v45);
  v47 = sin(v46);
  v48 = fabs(v46);
  v29 = v48 < 1.0;
  v49 = fabs(v47);
  v50 = v48 * 1.79769313e308;
  if (!v29 || v49 < v50)
    v52 = v47 / v46;
  else
    v52 = 0.0;
  v53 = cos(v46);
  v54 = v6 * v53 - (v8 * (v45 * v52) + v70 * (v43 * v52) + v7 * (v44 * v52));
  v55 = v70 * v53 + v6 * (v43 * v52) + v7 * (v45 * v52) - v8 * (v44 * v52);
  v56 = v7 * v53 + v6 * (v44 * v52) + v8 * (v43 * v52) - v70 * (v45 * v52);
  v57 = v70 * (v44 * v52) - v7 * (v43 * v52) + v8 * v53 + v6 * (v45 * v52);
  v58 = sqrt(v54 * v54 + v57 * v57 + v55 * v55 + v56 * v56);
  if (v58 == 0.0)
  {
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    v59 = 1.0;
  }
  else
  {
    *(double *)(a4 + 8) = v55 / v58;
    *(double *)(a4 + 16) = v56 / v58;
    *(double *)(a4 + 24) = v57 / v58;
    v59 = v54 / v58;
  }
  *(double *)a4 = v59;
}

double squad<double>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  double result;
  double v11;
  double v12[4];
  double v13[4];

  slerp<double>(a1, a4, a5, (uint64_t)v13);
  slerp<double>(a2, a3, a5, (uint64_t)v12);
  v11 = (*a5 + *a5) * (1.0 - *a5);
  slerp<double>(v13, v12, &v11, a6);
  return result;
}

void sub_1B2C97FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale(OZChannelScale *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelScale::OZChannelScale_valueImpl *Instance;
  OZFactory *v16;
  OZChannelScale::OZChannelScale_valueInfo *v17;
  OZChannelInfo *v18;
  OZChannelInfo *v19;
  OZChannelInfo *v20;

  *(_QWORD *)this = &off_1E6560A90;
  *((_QWORD *)this + 2) = &unk_1E6560DE8;
  Instance = (OZChannelScale::OZChannelScale_valueImpl *)OZChannelScale_Factory::getInstance(this);
  v16 = (OZFactory *)Instance;
  if (!a7)
    a7 = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(Instance);
  OZChannel2D::OZChannel2D(this, v16, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = &off_1E6560A90;
  *((_QWORD *)this + 2) = &unk_1E6560DE8;
  if (!a8)
  {
    v18 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v17);
    v19 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v18);
    v20 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance((OZChannelScale::OZChannelScale_valueInfo *)v19);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v20);
  }
}

void sub_1B2C98168(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale(OZChannelScale *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, unsigned int a7, OZChannelImpl *Instance, OZChannelInfo *a9)
{
  OZChannelScale::OZChannelScale_valueInfo *v16;
  OZChannelInfo *v17;
  OZChannelInfo *v18;
  OZChannelInfo *v19;

  *(_QWORD *)this = &off_1E6560A90;
  *((_QWORD *)this + 2) = &unk_1E6560DE8;
  if (!Instance)
    Instance = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(this);
  OZChannel2D::OZChannel2D(this, a2, a3, a4, a5, a6, a7, Instance, a9);
  *(_QWORD *)this = &off_1E6560A90;
  *((_QWORD *)this + 2) = &unk_1E6560DE8;
  if (!a9)
  {
    v17 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v16);
    v18 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v17);
    v19 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance((OZChannelScale::OZChannelScale_valueInfo *)v18);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v19);
  }
}

void sub_1B2C98254(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale(OZChannelScale *this, double a2, double a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, unsigned int a8, OZChannelImpl *a9, OZChannelInfo *a10)
{
  OZChannelScale::OZChannelScale_valueImpl *Instance;
  OZFactory *v20;
  OZChannelScale::OZChannelScale_valueInfo *v21;
  OZChannelInfo *v22;
  OZChannelInfo *v23;
  OZChannelInfo *v24;

  *(_QWORD *)this = &off_1E6560A90;
  *((_QWORD *)this + 2) = &unk_1E6560DE8;
  Instance = (OZChannelScale::OZChannelScale_valueImpl *)OZChannelScale_Factory::getInstance(this);
  v20 = (OZFactory *)Instance;
  if (!a9)
    a9 = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(Instance);
  OZChannel2D::OZChannel2D(this, a2, a3, v20, a4, a5, a6, a7, a8, a9, a10);
  *(_QWORD *)this = &off_1E6560A90;
  *((_QWORD *)this + 2) = &unk_1E6560DE8;
  if (!a10)
  {
    v22 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v21);
    v23 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v22);
    v24 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance((OZChannelScale::OZChannelScale_valueInfo *)v23);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v24);
  }
}

void sub_1B2C98360(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale(OZChannelScale *this, double a2, double a3, OZFactory *a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, unsigned int a9, OZChannelImpl *Instance, OZChannelInfo *a11)
{
  OZChannelScale::OZChannelScale_valueInfo *v20;
  OZChannelInfo *v21;
  OZChannelInfo *v22;
  OZChannelInfo *v23;

  *(_QWORD *)this = &off_1E6560A90;
  *((_QWORD *)this + 2) = &unk_1E6560DE8;
  if (!Instance)
    Instance = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(this);
  OZChannel2D::OZChannel2D(this, a2, a3, a4, a5, a6, a7, a8, a9, Instance, a11);
  *(_QWORD *)this = &off_1E6560A90;
  *((_QWORD *)this + 2) = &unk_1E6560DE8;
  if (!a11)
  {
    v21 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v20);
    v22 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v21);
    v23 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance((OZChannelScale::OZChannelScale_valueInfo *)v22);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v23);
  }
}

void sub_1B2C98464(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale(OZChannelScale *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelImpl *Instance;
  OZChannelScale::OZChannelScale_valueInfo *v9;
  OZChannelInfo *v10;
  OZChannelInfo *v11;
  OZChannelInfo *v12;

  *(_QWORD *)this = &off_1E6560A90;
  *((_QWORD *)this + 2) = &unk_1E6560DE8;
  Instance = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(this);
  OZChannel2D::OZChannel2D(this, a2, a3, a4, 0, Instance, 0);
  *(_QWORD *)this = &off_1E6560A90;
  *((_QWORD *)this + 2) = &unk_1E6560DE8;
  v10 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v9);
  v11 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v10);
  v12 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance((OZChannelScale::OZChannelScale_valueInfo *)v11);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v12);
}

void sub_1B2C98514(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale(OZChannelScale *this, const OZChannelScale *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannel2D::OZChannel2D(this, a2, a3);
  *v3 = &off_1E6560A90;
  v3[2] = &unk_1E6560DE8;
}

OZChannel2D *OZChannelScale::clone(OZChannelScale *this)
{
  OZChannel2D *v2;

  v2 = (OZChannel2D *)operator new();
  OZChannel2D::OZChannel2D(v2, this, 0);
  *(_QWORD *)v2 = &off_1E6560A90;
  *((_QWORD *)v2 + 2) = &unk_1E6560DE8;
  return v2;
}

void sub_1B2C985B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

const __CFString *OZChannelScale::getObjCWrapperName(OZChannelScale *this)
{
  return CFSTR("CHChannelScale");
}

uint64_t OZChannelScale::OZChannelScale_valueImpl::getInstance(OZChannelScale::OZChannelScale_valueImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelScale::OZChannelScale_valueImpl::getInstance(void)::OZChannelScale_valueImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelScale::OZChannelScale_valueImpl::getInstance(void)::OZChannelScale_valueImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelScale::OZChannelScale_valueImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelScale::OZChannelScale_valueImpl::_OZChannelScale_value;
}

void std::__call_once_param<std::tuple<OZChannelScale::OZChannelScale_valueImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelScale::OZChannelScale_valueImpl *v0;

  if (!OZChannelScale::OZChannelScale_valueImpl::_OZChannelScale_value)
  {
    v0 = (OZChannelScale::OZChannelScale_valueImpl *)operator new();
    OZChannelScale::OZChannelScale_valueImpl::OZChannelScale_valueImpl(v0);
    OZChannelScale::OZChannelScale_valueImpl::_OZChannelScale_value = (uint64_t)v0;
  }
}

void sub_1B2C9868C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelScale::OZChannelScale_valueImpl *OZChannelScale::OZChannelScale_valueImpl::OZChannelScale_valueImpl(OZChannelScale::OZChannelScale_valueImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((OZChannelScale::OZChannelScale_valueImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6560E58;
  *((_QWORD *)this + 5) = &unk_1E6560E78;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2C98740(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelScale::OZChannelScale_valueInfo::getInstance(OZChannelScale::OZChannelScale_valueInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelScale::OZChannelScale_valueInfo::getInstance(void)::OZChannelScale_valueInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelScale::OZChannelScale_valueInfo::getInstance(void)::OZChannelScale_valueInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelScale::OZChannelScale_valueInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelScale::OZChannelScale_valueInfo::_OZChannelScale_valueInfo;
}

void std::__call_once_param<std::tuple<OZChannelScale::OZChannelScale_valueInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelScale::OZChannelScale_valueInfo *v0;

  if (!OZChannelScale::OZChannelScale_valueInfo::_OZChannelScale_valueInfo)
  {
    v0 = (OZChannelScale::OZChannelScale_valueInfo *)operator new();
    OZChannelScale::OZChannelScale_valueInfo::OZChannelScale_valueInfo(v0);
    OZChannelScale::OZChannelScale_valueInfo::_OZChannelScale_valueInfo = (uint64_t)v0;
  }
}

void sub_1B2C9880C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelScale::OZChannelScale_valueInfo *OZChannelScale::OZChannelScale_valueInfo::OZChannelScale_valueInfo(OZChannelScale::OZChannelScale_valueInfo *this)
{
  PCString v3;

  PCURL::PCURL((PCURL *)&v3, CFSTR("%"));
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 4.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZChannelScale::OZChannelScale_valueInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6560ED0;
  *((_QWORD *)this + 10) = &unk_1E6560EF0;
  return this;
}

void sub_1B2C988C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelScale3D::OZChannelScale3D(OZChannelScale3D *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v11;
  OZFactoryBase *v12;
  OZChannelScale::OZChannelScale_valueImpl *v13;
  OZChannelImpl *v14;
  OZChannelScale::OZChannelScale_valueInfo *v15;
  OZChannelInfo *v16;
  PCString v17;

  Instance = (OZFactory *)OZChannelScale3D_Factory::getInstance(this);
  OZChannelScale::OZChannelScale(this, Instance, a2, a3, a4, a5, 2u, 0, 0);
  *(_QWORD *)this = &off_1E6560F48;
  *((_QWORD *)this + 2) = &unk_1E65612A0;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v17, CFSTR("Channel Z"));
  v14 = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(v13);
  OZChannelDouble::OZChannelDouble((OZChannelScale3D *)((char *)this + 440), &v17, (OZChannelFolder *)this, 3u, 0, v14, 0);
  PCString::~PCString(&v17);
  v16 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v15);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 440), v16);
}

void sub_1B2C989C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel2D *v10;
  OZChannel *v11;

  OZChannel::~OZChannel(v11);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelScale3D::OZChannelScale3D(OZChannelScale3D *this, double a2, double a3, double a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v17;
  OZFactoryBase *v18;
  OZChannelScale::OZChannelScale_valueImpl *v19;
  OZChannelImpl *v20;
  OZChannelScale::OZChannelScale_valueInfo *v21;
  OZChannelInfo *v22;
  PCString v23;

  Instance = (OZFactory *)OZChannelScale3D_Factory::getInstance(this);
  OZChannelScale::OZChannelScale(this, a2, a3, Instance, a5, a6, a7, a8, 2u, 0, 0);
  *(_QWORD *)this = &off_1E6560F48;
  *((_QWORD *)this + 2) = &unk_1E65612A0;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v23, CFSTR("Channel Z"));
  v20 = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(v19);
  OZChannelDouble::OZChannelDouble((OZChannelScale3D *)((char *)this + 440), a4, &v23, (OZChannelFolder *)this, 3u, 0, v20, 0);
  PCString::~PCString(&v23);
  v22 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v21);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 440), v22);
}

void sub_1B2C98B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel2D *v10;
  OZChannel *v11;

  OZChannel::~OZChannel(v11);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelScale3D::OZChannelScale3D(OZChannelScale3D *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v6;
  OZChannelScale::OZChannelScale_valueImpl *v7;
  OZChannelImpl *Instance;
  OZChannelScale::OZChannelScale_valueInfo *v9;
  OZChannelInfo *v10;
  PCString v11;

  OZChannelScale::OZChannelScale(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E6560F48;
  *((_QWORD *)v5 + 2) = &unk_1E65612A0;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v11, CFSTR("Channel Z"));
  Instance = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(v7);
  OZChannelDouble::OZChannelDouble((OZChannelScale3D *)((char *)this + 440), &v11, (OZChannelFolder *)this, 3u, 0, Instance, 0);
  PCString::~PCString(&v11);
  v10 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v9);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 440), v10);
}

void sub_1B2C98BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel2D *v10;
  OZChannel *v11;

  OZChannel::~OZChannel(v11);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelScale3D::OZChannelScale3D(OZChannelScale3D *this, const OZChannelScale3D *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannelScale::OZChannelScale(this, a2, a3);
  *(_QWORD *)v5 = &off_1E6560F48;
  *(_QWORD *)(v5 + 16) = &unk_1E65612A0;
  OZChannel::OZChannel((OZChannel *)(v5 + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((_QWORD *)this + 55) = &off_1E6551358;
  *((_QWORD *)this + 57) = &unk_1E65516B8;
}

void sub_1B2C98C84(_Unwind_Exception *a1)
{
  OZChannel2D *v1;

  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

OZChannelScale3D *OZChannelScale3D::clone(OZChannelScale3D *this)
{
  OZChannelScale3D *v2;

  v2 = (OZChannelScale3D *)operator new();
  OZChannelScale3D::OZChannelScale3D(v2, this, 0);
  return v2;
}

void sub_1B2C98CE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void OZChannelScale3D::copy(OZChannelScale3D *this, const OZChannelBase *a2, char a3)
{
  char *v6;

  OZChannel2D::copy(this, a2, a3);
  if (a2)
  else
    v6 = 0;
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)(v6 + 440), a3);
}

const __CFString *OZChannelScale3D::getObjCWrapperName(OZChannelScale3D *this)
{
  return CFSTR("CHChannelScale3D");
}

void `non-virtual thunk to'OZChannelScale3D::~OZChannelScale3D(OZChannelScale3D *this)
{
  *(_QWORD *)this = &unk_1E65612A0;
  *((_QWORD *)this - 2) = &off_1E6560F48;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 424));
  OZChannel2D::~OZChannel2D((OZChannelScale3D *)((char *)this - 16));
}

{
  OZChannelScale3D::~OZChannelScale3D((OZChannelScale3D *)((char *)this - 16));
}

const __CFString *OZChannelScaleOverLife::getObjCWrapperName(OZChannelScaleOverLife *this)
{
  return CFSTR("CHChannelScaleOverLife");
}

void OZChannelScaleOverLife::OZChannelScaleOverLife(OZChannelScaleOverLife *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZChannelCurve::OZChannelCurve(this, a2, a3, a4);
  *v4 = &off_1E6561310;
  v4[2] = &unk_1E65616B8;
}

void OZChannelScaleOverLife::OZChannelScaleOverLife(OZChannelScaleOverLife *this, const OZChannelScaleOverLife *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannelCurve::OZChannelCurve(this, a2, a3);
  *v3 = &off_1E6561310;
  v3[2] = &unk_1E65616B8;
}

void `non-virtual thunk to'OZChannelScaleOverLife::~OZChannelScaleOverLife(OZChannelScaleOverLife *this)
{
  OZChannelCurve::~OZChannelCurve((OZChannel *)((char *)this - 16));
}

{
  OZChannelCurve::~OZChannelCurve((OZChannel *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChannelScaleOverLife::~OZChannelScaleOverLife(OZChannel *this)
{
  OZChannelCurve::~OZChannelCurve(this);
  JUMPOUT(0x1B5E29170);
}

void OZChannelShear::OZChannelShear(OZChannelShear *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6)
{
  OZFactory *Instance;
  TXParagraphStyleFolder_Factory *v13;
  OZFactoryBase *v14;
  TXParagraphStyleFolder_Factory *v15;
  OZFactoryBase *v16;
  PCString v17;

  Instance = (OZFactory *)OZChannelShear_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(_QWORD *)this = &off_1E6561728;
  *((_QWORD *)this + 2) = &unk_1E6561A70;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v17, CFSTR("Channel X"));
  OZChannelShearAngle::OZChannelShearAngle((OZChannelShearAngle *)((char *)this + 136), &v17, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v17);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v17, CFSTR("Channel Y"));
  OZChannelShearAngle::OZChannelShearAngle((OZChannelShearAngle *)((char *)this + 288), &v17, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v17);
}

void sub_1B2C98FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelShear::OZChannelShear(OZChannelShear *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  TXParagraphStyleFolder_Factory *v6;
  OZFactoryBase *v7;
  TXParagraphStyleFolder_Factory *v8;
  OZFactoryBase *v9;
  PCString v10;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_1E6561728;
  *((_QWORD *)v6 + 2) = &unk_1E6561A70;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel X"));
  OZChannelShearAngle::OZChannelShearAngle((OZChannelShearAngle *)((char *)this + 136), &v10, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v10);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel Y"));
  OZChannelShearAngle::OZChannelShearAngle((OZChannelShearAngle *)((char *)this + 288), &v10, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v10);
}

void sub_1B2C990F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannel *v11;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelShear::OZChannelShear(OZChannelShear *this, const OZChannelShear *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E6561728;
  *(_QWORD *)(v5 + 16) = &unk_1E6561A70;
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((_QWORD *)this + 17) = &off_1E6552298;
  *((_QWORD *)this + 19) = &unk_1E65525F8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((_QWORD *)this + 36) = &off_1E6552298;
  *((_QWORD *)this + 38) = &unk_1E65525F8;
}

void sub_1B2C991CC(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannel *v2;

  OZChannel::~OZChannel(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

OZChannelShear *OZChannelShear::clone(OZChannelShear *this)
{
  OZChannelShear *v2;

  v2 = (OZChannelShear *)operator new();
  OZChannelShear::OZChannelShear(v2, this, 0);
  return v2;
}

void sub_1B2C9923C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

void OZChannelShear::copy(OZChannelShear *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
}

const __CFString *OZChannelShear::getObjCWrapperName(OZChannelShear *this)
{
  return CFSTR("CHChannelShear");
}

void OZChannelShear::~OZChannelShear(OZChannelShear *this)
{
  OZChannelShear::~OZChannelShear(this);
  JUMPOUT(0x1B5E29170);
}

{
  *(_QWORD *)this = &off_1E6561728;
  *((_QWORD *)this + 2) = &unk_1E6561A70;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

void `non-virtual thunk to'OZChannelShear::~OZChannelShear(OZChannelShear *this)
{
  OZChannelShear::~OZChannelShear((OZChannelShear *)((char *)this - 16));
}

{
  OZChannelShear::~OZChannelShear((OZChannelShear *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

const __CFString *OZChannelText::getObjCWrapperName(OZChannelText *this)
{
  return CFSTR("CHChannelText");
}

void OZChannelText::OZChannelText(OZChannelText *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  OZChannelText *v11;
  OZChannelInfo *OZChannelTextInfo;
  OZChannelImpl *v13;

  Instance = (OZFactory *)OZChannelText_Factory::getInstance((OZChannelText_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a3, a4, a5, 0, 0);
  this->var0 = (void **)&off_1E6561AE0;
  this->var2 = (void **)&unk_1E6561E60;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var19);
  this->var20 = 0;
  OZChannelTextInfo = (OZChannelInfo *)OZChannelText::createOZChannelTextInfo(v11);
  this->var16 = OZChannelTextInfo;
  this->var17 = OZChannelTextInfo;
  OZChannelText::createOZChannelTextImpl((OZChannelText *)OZChannelTextInfo);
  v13 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var14 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var15 = v13;
  this->var7 |= 0x10000uLL;
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
  (*((void (**)(OZChannelText *))this->var0 + 16))(this);
}

void sub_1B2C99454(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelText::createOZChannelTextInfo(OZChannelText *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelText::createOZChannelTextInfo(void)::_OZChannelTextInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelText::createOZChannelTextInfo(void)::_OZChannelTextInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelText::createOZChannelTextInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelText::_OZChannelTextInfo;
}

uint64_t OZChannelText::createOZChannelTextImpl(OZChannelText *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelText::createOZChannelTextImpl(void)::_OZChannelTextImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelText::createOZChannelTextImpl(void)::_OZChannelTextImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelText::createOZChannelTextImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelText::_OZChannelTextImpl;
}

void OZChannelText::OZChannelText(OZChannelText *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  PCSharedCount *v5;
  OZChannelText *v6;
  OZChannelInfo *OZChannelTextInfo;
  OZChannelImpl *v8;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, 0, 0);
  v5->var0 = (PC_Sp_counted_base *)&off_1E6561AE0;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1E6561E60;
  PCSharedCount::PCSharedCount(v5 + 19);
  this->var20 = 0;
  OZChannelTextInfo = (OZChannelInfo *)OZChannelText::createOZChannelTextInfo(v6);
  this->var16 = OZChannelTextInfo;
  this->var17 = OZChannelTextInfo;
  OZChannelText::createOZChannelTextImpl((OZChannelText *)OZChannelTextInfo);
  v8 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var14 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var15 = v8;
  this->var7 |= 0x10000uLL;
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
  (*((void (**)(OZChannelText *))this->var0 + 16))(this);
}

void sub_1B2C995D0(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelText::OZChannelText(OZChannelText *this, const PCString *a2, PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZFactory *Instance;
  OZChannelText *v13;
  OZChannelInfo *OZChannelTextInfo;
  OZChannelImpl *v15;

  Instance = (OZFactory *)OZChannelText_Factory::getInstance((OZChannelText_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a4, a5, a6, 0, 0);
  this->var0 = (void **)&off_1E6561AE0;
  this->var2 = (void **)&unk_1E6561E60;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var19);
  this->var20 = 0;
  OZChannelTextInfo = (OZChannelInfo *)OZChannelText::createOZChannelTextInfo(v13);
  this->var16 = OZChannelTextInfo;
  this->var17 = OZChannelTextInfo;
  OZChannelText::createOZChannelTextImpl((OZChannelText *)OZChannelTextInfo);
  v15 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var14 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var15 = v15;
  PCString::set(&this->var19, a3);
  this->var7 |= 0x10000uLL;
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
  (*((void (**)(OZChannelText *))this->var0 + 16))(this);
}

void sub_1B2C996D8(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelText::OZChannelText(OZChannelText *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  PCSharedCount *v5;
  PCString *v6;

  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  v5->var0 = (PC_Sp_counted_base *)&off_1E6561AE0;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1E6561E60;
  v6 = (PCString *)&v5[19];
  PCSharedCount::PCSharedCount(v5 + 19);
  this->var20 = (BOOL)a2[1].var6;
  PCString::set(v6, (const PCString *)&a2[1].var5);
  this->var20 = (BOOL)a2[1].var6;
}

void sub_1B2C9976C(_Unwind_Exception *a1)
{
  OZChannel *v1;
  PCString *v2;

  PCString::~PCString(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

OZChannelText *OZChannelText::clone(OZChannelText *this)
{
  OZChannelText *v2;

  v2 = (OZChannelText *)operator new();
  OZChannelText::OZChannelText(v2, (const OZChannelBase *)this, 0);
  return v2;
}

void sub_1B2C997DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40BB3F29BDLL);
  _Unwind_Resume(a1);
}

void OZChannelText::OZChannelText(OZChannelText *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  PCSharedCount *v7;
  OZChannelText *v8;
  OZChannelInfo *OZChannelTextInfo;
  OZChannelImpl *v10;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, 0, 0);
  v7->var0 = (PC_Sp_counted_base *)&off_1E6561AE0;
  v7[2].var0 = (PC_Sp_counted_base *)&unk_1E6561E60;
  PCSharedCount::PCSharedCount(v7 + 19);
  this->var20 = 0;
  OZChannelTextInfo = (OZChannelInfo *)OZChannelText::createOZChannelTextInfo(v8);
  this->var16 = OZChannelTextInfo;
  this->var17 = OZChannelTextInfo;
  OZChannelText::createOZChannelTextImpl((OZChannelText *)OZChannelTextInfo);
  v10 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var14 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var15 = v10;
  this->var7 |= 0x10000uLL;
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
  (*((void (**)(OZChannelText *))this->var0 + 16))(this);
}

void sub_1B2C9989C(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelText::copy(OZChannelText *this, const OZChannelBase *a2, char a3)
{
  const PCString *v5;
  const PCString *v6;

  OZChannel::copy((OZChannel *)this, a2, a3);
  if (a2)
  {
    if (v5)
    {
      v6 = v5;
      PCString::set(&this->var19, v5 + 19);
      this->var20 = (BOOL)v6[20].var0;
    }
  }
}

void OZChannelText::~OZChannelText(OZChannelText *this)
{
  this->var0 = (void **)&off_1E6561AE0;
  this->var2 = (void **)&unk_1E6561E60;
  PCString::~PCString(&this->var19);
  OZChannel::~OZChannel((OZChannel *)this);
}

{
  this->var0 = (void **)&off_1E6561AE0;
  this->var2 = (void **)&unk_1E6561E60;
  PCString::~PCString(&this->var19);
  OZChannel::~OZChannel((OZChannel *)this);
}

{
  this->var0 = (void **)&off_1E6561AE0;
  this->var2 = (void **)&unk_1E6561E60;
  PCString::~PCString(&this->var19);
  OZChannel::~OZChannel((OZChannel *)this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelText::~OZChannelText(OZChannelText *this)
{
  OZChannel *p_var19;

  this[-1].var19.var0 = (__CFString *)&off_1E6561AE0;
  p_var19 = (OZChannel *)&this[-1].var19;
  this->var0 = (void **)&unk_1E6561E60;
  PCString::~PCString((PCString *)&this->var17);
  OZChannel::~OZChannel(p_var19);
}

{
  OZChannelText::~OZChannelText((OZChannelText *)((char *)this - 16));
}

void OZChannelText::assign(OZChannelText *this, const OZChannelBase *a2)
{
  const PCString *v4;
  const PCString *v5;

  OZChannel::assign((OZChannel *)this, a2);
  if (a2)
  {
    if (v4)
    {
      v5 = v4;
      PCString::set(&this->var19, v4 + 19);
      this->var20 = (BOOL)v5[20].var0;
    }
  }
}

uint64_t OZChannelText::isModified(OZChannelText *this)
{
  return 1;
}

void OZChannelText::getString(OZChannelText *this@<X0>, PCString *a2@<X8>)
{
  PCString::PCString(a2, &this->var19);
}

PCString *OZChannelText::getStringPtr(OZChannelText *this)
{
  return &this->var19;
}

void OZChannelText::setString(OZChannelText *this, PCString a2, char a3)
{
  if ((a3 & 1) == 0)
    (*((void (**)(OZChannelText *, uint64_t))this->var0 + 58))(this, 1);
  PCString::set(&this->var19, (const PCString *)a2.var0);
}

void OZChannelText::setAttributedString(OZChannelText *this, CFAttributedStringRef aStr)
{
  const __CFString *String;
  const char *CStringPtr;
  PCString v5;

  String = CFAttributedStringGetString(aStr);
  CStringPtr = CFStringGetCStringPtr(String, 0x8000100u);
  PCString::PCString(&v5, CStringPtr);
  (*((void (**)(OZChannelText *, PCString *, _QWORD, _QWORD))this->var0 + 108))(this, &v5, 0, 0);
  PCString::~PCString(&v5);
}

void sub_1B2C99B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelText::writeHeader(OZChannelText *this, OZFactory *a2, int a3)
{
  return OZChannelBase::writeHeader((OZChannelBase *)&this[-1].var19, a2, a3);
}

uint64_t OZChannelText::writeBody(OZChannelText *this, PCSerializerWriteStream *a2, int a3)
{
  PCString *p_var19;
  PCString v7;

  OZChannelBase::writeBody((OZChannelBase *)this, a2, a3);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelTextScope);
  p_var19 = &this->var19;
  if (PCString::size(p_var19))
  {
    PCString::PCString(&v7, p_var19);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 114);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v7);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v7);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2C99C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelText::writeBody(OZChannelText *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannelText::writeBody((OZChannelText *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelText::parseBegin(OZChannelText *this, PCSerializerReadStream *a2)
{
  OZChannelBase::parseBegin((OZChannelBase *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelTextScope);
  PCString::clear(&this->var19);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelText::parseBegin(OZChannelText *this, PCSerializerReadStream *a2)
{
  OZChannelText::parseBegin((OZChannelText *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelText::parseElement(OZChannelText *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 114)
  {
    (*(void (**)(PCStreamElement *, PCString *))(*(_QWORD *)a3 + 16))(a3, &this->var19);
    OZChannelBase::parseElement((OZChannelBase *)this, a2, a3);
  }
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelText::parseElement(OZChannelText *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelBase *p_var19;

  if (*((_DWORD *)a3 + 2) == 114)
  {
    p_var19 = (OZChannelBase *)&this[-1].var19;
    (*(void (**)(PCStreamElement *, OZChannelInfo **))(*(_QWORD *)a3 + 16))(a3, &this->var17);
    OZChannelBase::parseElement(p_var19, a2, a3);
  }
  return 1;
}

uint64_t OZChannelText::parseEnd(OZChannelText *this, PCSerializerReadStream *a2)
{
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  PCString v7;
  PCString v8;

  OZChannelBase::parseEnd((OZChannelBase *)this, a2);
  if (this->var20)
  {
    v3 = (__CFString *)PCString::ns_str(&this->var19);
    v4 = objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet");
    -[__CFString rangeOfCharacterFromSet:](v3, "rangeOfCharacterFromSet:", v4);
    if (v5)
    {
      v8.var0 = 0;
      PCString::set(&v8, (CFStringRef)objc_msgSend((id)-[__CFString componentsSeparatedByCharactersInSet:](v3, "componentsSeparatedByCharactersInSet:", v4), "componentsJoinedByString:", &stru_1E65EDDA0));
      PCString::PCString(&v7, &v8);
      (*((void (**)(OZChannelText *, PCString *, uint64_t, _QWORD))this->var0 + 108))(this, &v7, 1, 0);
      PCString::~PCString(&v7);
      PCString::~PCString(&v8);
    }
  }
  return 1;
}

void sub_1B2C99E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelText::parseEnd(OZChannelText *this, PCSerializerReadStream *a2)
{
  OZChannelText::parseEnd((OZChannelText *)((char *)this - 16), a2);
  return 1;
}

void std::__call_once_param<std::tuple<OZChannelText::createOZChannelTextInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelTextInfo *v0;

  if (!OZChannelText::_OZChannelTextInfo)
  {
    v0 = (OZChannelTextInfo *)operator new();
    OZChannelTextInfo::OZChannelTextInfo(v0);
    OZChannelText::_OZChannelTextInfo = (uint64_t)v0;
  }
}

void sub_1B2C99E98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelTextInfo::OZChannelTextInfo(OZChannelTextInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E6561ED0;
  *((_QWORD *)this + 10) = &unk_1E6561EF0;
}

void sub_1B2C99F20(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelText::createOZChannelTextImpl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCurveBool *v0;
  OZChannelImpl *v1;

  if (!OZChannelText::_OZChannelTextImpl)
  {
    v0 = (OZCurveBool *)operator new();
    OZCurveBool::OZCurveBool(v0, 0.0);
    v1 = (OZChannelImpl *)operator new();
    OZChannelImpl::OZChannelImpl(v1, (OZCurve *)v0, 0.0, 1u, 1);
    OZChannelText::_OZChannelTextImpl = (uint64_t)v1;
  }
}

void sub_1B2C99FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

const __CFString *OZChannelBlindData::getObjCWrapperName(OZChannelBlindData *this)
{
  return CFSTR("CHChannelBlindData");
}

void OZChannelBlindData::OZChannelBlindData(OZChannelBlindData *this, const PCString *a2, void *a3, OZChannelFolder *a4, unsigned int a5, int a6, char a7, NSData *(*a8)(NSData *, NSData *, float, void *), NSData *a9, BOOL (*a10)(NSData *, NSData *, void *), NSData *a11)
{
  OZFactory *Instance;
  OZChannelBlindData *v20;
  OZChannelBlindData *OZChannelBlindDataInfo;
  uint64_t v22;
  uint64_t v23;

  Instance = (OZFactory *)OZChannelBlindData_Factory::getInstance((OZChannelBlindData_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a4, a5, a6, 0, 0);
  *(_QWORD *)this = &off_1E6561F48;
  *((_QWORD *)this + 2) = &unk_1E65622A8;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 176), 1);
  *((_QWORD *)this + 22) = &unk_1E64E2000;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_BYTE *)this + 296) = a7;
  *((_QWORD *)this + 38) = a8;
  *((_QWORD *)this + 39) = -[NSData copy](a9, "copy");
  *((_QWORD *)this + 40) = a10;
  *((_QWORD *)this + 41) = -[NSData copy](a11, "copy");
  *((_BYTE *)this + 336) = 1;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 43);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 44);
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_BYTE *)this + 384) = 0;
  *((_QWORD *)this + 47) = 0;
  OZChannelBlindDataInfo = (OZChannelBlindData *)OZChannelBlindData::createOZChannelBlindDataInfo(v20);
  *((_QWORD *)this + 16) = OZChannelBlindDataInfo;
  *((_QWORD *)this + 17) = OZChannelBlindDataInfo;
  OZChannelBlindData::createOZChannelBlindDataImpl(OZChannelBlindDataInfo);
  v22 = OZChannelBlindData::_OZChannelBlindDataImpl;
  *((_QWORD *)this + 14) = OZChannelBlindData::_OZChannelBlindDataImpl;
  *((_QWORD *)this + 15) = v22;
  OZChannelBlindData::setDefaultValue(this, a3);
  (*(void (**)(OZChannelBlindData *, _QWORD))(*(_QWORD *)this + 280))(this, 0);
  v23 = operator new();
  *(_QWORD *)v23 = (char *)this + 176;
  *(_BYTE *)(v23 + 8) = 0;
  *((_QWORD *)this + 34) = v23;
}

{
  OZChannelBlindData::OZChannelBlindData(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_1B2C9A178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  OZChannel *v10;
  PCMutex *v11;
  PCString *v12;
  void **v13;
  OZFactory *v15;

  PCString::~PCString(v12);
  PCMutex::~PCMutex(v11);
  v15 = (OZFactory *)*v13;
  if (*v13)
  {
    v10[1].var1 = v15;
    operator delete(v15);
  }
  OZChannel::~OZChannel(v10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::createOZChannelBlindDataInfo(OZChannelBlindData *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelBlindData::createOZChannelBlindDataInfo(void)::_OZChannelBlindDataInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelBlindData::createOZChannelBlindDataInfo(void)::_OZChannelBlindDataInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBlindData::createOZChannelBlindDataInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBlindData::_OZChannelBlindDataInfo;
}

uint64_t OZChannelBlindData::createOZChannelBlindDataImpl(OZChannelBlindData *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelBlindData::createOZChannelBlindDataImpl(void)::_OZChannelBlindDataImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelBlindData::createOZChannelBlindDataImpl(void)::_OZChannelBlindDataImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBlindData::createOZChannelBlindDataImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBlindData::_OZChannelBlindDataImpl;
}

uint64_t OZChannelBlindData::setDefaultValue(OZChannelBlindData *this, void *a2)
{
  PCMutex *v4;
  id v5;
  void *v6;
  char *v8;
  uint64_t v9;

  v4 = (PCMutex *)((char *)this + 176);
  v8 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  LOBYTE(v9) = 1;
  *((_BYTE *)this + 336) = 1;
  v5 = OZChannelBlindData::encodeObjectToData(this, a2);
  if (OZChannelBase::testFlag((OZChannelBase *)this, 0x200000000))
  {
    v6 = (void *)*((_QWORD *)this + 35);
    if (v5)
    {
      if (v6 && (objc_msgSend(v6, "isEqualToData:", v5, v8, v9) & 1) != 0)
        goto LABEL_8;
    }
    else if (!v6)
    {
      goto LABEL_8;
    }
    OZChannelBase::setFlag((OZChannelBase *)this, 0x100000000, 1);
  }
LABEL_8:

  *((_QWORD *)this + 35) = v5;
  return PCMutex::unlock(v4);
}

void sub_1B2C9A348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void OZChannelBlindData::OZChannelBlindData(OZChannelBlindData *this, OZFactory *a2, const PCString *a3, unsigned int a4, char a5, NSData *(*a6)(NSData *, NSData *, float, void *), NSData *a7, BOOL (*a8)(NSData *, NSData *, void *), NSData *a9)
{
  uint64_t v14;
  uint64_t v15;
  OZChannelBlindData *v16;
  OZChannelBlindData *OZChannelBlindDataInfo;
  uint64_t v18;
  uint64_t v19;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, 0, 0);
  *(_QWORD *)v14 = &off_1E6561F48;
  *(_QWORD *)(v14 + 16) = &unk_1E65622A8;
  *(_QWORD *)(v14 + 152) = 0;
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 168) = 0;
  v15 = v14 + 176;
  PCMutex::PCMutex((PCMutex *)(v14 + 176), 1);
  *((_QWORD *)this + 22) = &unk_1E64E2000;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_BYTE *)this + 296) = a5;
  *((_QWORD *)this + 38) = a6;
  *((_QWORD *)this + 39) = -[NSData copy](a7, "copy");
  *((_QWORD *)this + 40) = a8;
  *((_QWORD *)this + 41) = -[NSData copy](a9, "copy");
  *((_BYTE *)this + 336) = 1;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 43);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 44);
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_BYTE *)this + 384) = 0;
  *((_QWORD *)this + 47) = 0;
  OZChannelBlindDataInfo = (OZChannelBlindData *)OZChannelBlindData::createOZChannelBlindDataInfo(v16);
  *((_QWORD *)this + 16) = OZChannelBlindDataInfo;
  *((_QWORD *)this + 17) = OZChannelBlindDataInfo;
  OZChannelBlindData::createOZChannelBlindDataImpl(OZChannelBlindDataInfo);
  v18 = OZChannelBlindData::_OZChannelBlindDataImpl;
  *((_QWORD *)this + 14) = OZChannelBlindData::_OZChannelBlindDataImpl;
  *((_QWORD *)this + 15) = v18;
  v19 = operator new();
  *(_QWORD *)v19 = v15;
  *(_BYTE *)(v19 + 8) = 0;
  *((_QWORD *)this + 34) = v19;
}

{
  OZChannelBlindData::OZChannelBlindData(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B2C9A4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  OZChannel *v10;
  PCMutex *v11;
  PCString *v12;
  void **v13;
  OZFactory *v15;

  PCString::~PCString(v12);
  PCMutex::~PCMutex(v11);
  v15 = (OZFactory *)*v13;
  if (*v13)
  {
    v10[1].var1 = v15;
    operator delete(v15);
  }
  OZChannel::~OZChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelBlindData::OZChannelBlindData(OZChannelBlindData *this, OZChannelBase *a2, OZChannelFolder *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OZChannelFolder *var6;
  OZChannelFolder *v9;

  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  *(_QWORD *)v5 = &off_1E6561F48;
  *(_QWORD *)(v5 + 16) = &unk_1E65622A8;
  *(_QWORD *)(v5 + 152) = 0;
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 168) = 0;
  v6 = v5 + 176;
  PCMutex::PCMutex((PCMutex *)(v5 + 176), 1);
  *((_QWORD *)this + 22) = &unk_1E64E2000;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_BYTE *)this + 296) = 1;
  *((_BYTE *)this + 336) = 1;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 43);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 44);
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_BYTE *)this + 384) = 0;
  *((_QWORD *)this + 47) = 0;
  v7 = operator new();
  *(_QWORD *)v7 = v6;
  *(_BYTE *)(v7 + 8) = 0;
  *((_QWORD *)this + 34) = v7;
  var6 = a2[2].var6;
  if (*(_QWORD *)var6 && !*((_BYTE *)var6 + 8))
  {
    PCMutex::lock(*(PCMutex **)var6);
    *((_BYTE *)var6 + 8) = 1;
  }
  OZChannelBlindData::copyInternalData(this, (id *)&a2->var0);
  v9 = a2[2].var6;
  if (*(_QWORD *)v9)
  {
    if (*((_BYTE *)v9 + 8))
    {
      PCMutex::unlock(*(PCMutex **)v9);
      *((_BYTE *)v9 + 8) = 0;
    }
  }
}

void sub_1B2C9A638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  OZChannel *v10;
  PCMutex *v11;
  PCString *v12;
  void **v13;
  OZFactory *v15;

  PCString::~PCString(v12);
  PCMutex::~PCMutex(v11);
  v15 = (OZFactory *)*v13;
  if (*v13)
  {
    v10[1].var1 = v15;
    operator delete(v15);
  }
  OZChannel::~OZChannel(v10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::copyInternalData(OZChannelBlindData *this, id *a2)
{
  PCMutex *v4;
  uint64_t v5;
  id **v6;
  id *v7;
  char *i;
  id v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  id *v20;
  id *v21;
  char *v22;
  __int128 v23;
  __int128 v25;
  uint64_t v26;

  v4 = (PCMutex *)((char *)this + 176);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  *((_BYTE *)this + 336) = 1;
  *((_QWORD *)this + 35) = a2[35];
  *((_QWORD *)this + 36) = a2[36];
  *((_BYTE *)this + 296) = *((_BYTE *)a2 + 296);
  *((_QWORD *)this + 38) = a2[38];
  *((_QWORD *)this + 39) = objc_msgSend(a2[39], "copy");
  *((_QWORD *)this + 40) = a2[40];
  v5 = objc_msgSend(a2[41], "copy");
  v6 = (id **)((char *)this + 152);
  v7 = (id *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 41) = v5;
  if (v7 != *((id **)this + 20))
  {
    do
    {

      v7 += 4;
    }
    while (v7 != *((id **)this + 20));
    v7 = *v6;
  }
  *((_QWORD *)this + 20) = v7;
  for (i = (char *)a2[19]; i != a2[20]; i += 32)
  {
    v25 = *(_OWORD *)i;
    v26 = *((_QWORD *)i + 2);
    v9 = *((id *)i + 3);
    v10 = v9;
    v11 = *((_QWORD *)this + 20);
    v12 = *((_QWORD *)this + 21);
    if (v11 >= v12)
    {
      v14 = (uint64_t)(v11 - (_QWORD)*v6) >> 5;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 59)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v16 = v12 - (_QWORD)*v6;
      if (v16 >> 4 > v15)
        v15 = v16 >> 4;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
        v17 = 0x7FFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)this + 168, v17);
      else
        v18 = 0;
      v19 = &v18[32 * v14];
      *(_OWORD *)v19 = v25;
      *((_QWORD *)v19 + 2) = v26;
      *((_QWORD *)v19 + 3) = v10;
      v21 = (id *)*((_QWORD *)this + 19);
      v20 = (id *)*((_QWORD *)this + 20);
      v22 = v19;
      if (v20 != v21)
      {
        do
        {
          v23 = *((_OWORD *)v20 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v20 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v20 -= 4;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      v13 = v19 + 32;
      *((_QWORD *)this + 19) = v22;
      *((_QWORD *)this + 20) = v19 + 32;
      *((_QWORD *)this + 21) = &v18[32 * v17];
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_OWORD *)v11 = v25;
      *(_QWORD *)(v11 + 16) = v26;
      *(_QWORD *)(v11 + 24) = v9;
      v13 = (char *)(v11 + 32);
    }
    *((_QWORD *)this + 20) = v13;
  }
  return PCMutex::unlock(v4);
}

void sub_1B2C9A898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZChannelBlindData::~OZChannelBlindData(OZChannelBlindData *this)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E6561F48;
  *((_QWORD *)this + 2) = &unk_1E65622A8;
  v2 = *((_QWORD *)this + 34);
  if (v2)
  {
    if (*(_QWORD *)v2 && *(_BYTE *)(v2 + 8))
    {
      PCMutex::unlock(*(PCMutex **)v2);
      *(_BYTE *)(v2 + 8) = 0;
    }
    MEMORY[0x1B5E29170](v2, 0x1020C405F07FB98);
  }
  for (i = *((_QWORD *)this + 19); i != *((_QWORD *)this + 20); i += 32)

  v5 = (void **)((char *)this + 360);
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v5);
  PCString::~PCString((PCString *)this + 44);
  PCString::~PCString((PCString *)this + 43);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 176));
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  OZChannel::~OZChannel((OZChannel *)this);
}

{
  OZChannelBlindData::~OZChannelBlindData(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelBlindData::~OZChannelBlindData(OZChannelBlindData *this)
{
  OZChannelBlindData::~OZChannelBlindData((OZChannelBlindData *)((char *)this - 16));
}

{
  OZChannelBlindData::~OZChannelBlindData((OZChannelBlindData *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelBlindData::resetToDefault(OZChannelBlindData *this, char a2)
{
  uint64_t v3;

  OZChannel::resetToDefault((OZChannel *)this, a2);
  PCMutex::lock((PCMutex *)((char *)this + 176));

  *((_QWORD *)this + 36) = 0;
  *((_BYTE *)this + 336) = 1;
  v3 = *((_QWORD *)this + 19);
  if (v3 != *((_QWORD *)this + 20))
  {
    do
    {

      v3 += 32;
    }
    while (v3 != *((_QWORD *)this + 20));
    v3 = *((_QWORD *)this + 19);
  }
  *((_QWORD *)this + 20) = v3;
  return PCMutex::unlock((PCMutex *)((char *)this + 176));
}

void sub_1B2C9AAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id OZChannelBlindData::encodeObjectToData(OZChannelBlindData *this, void *a2)
{
  void *v3;
  id v4;

  if (!*((_BYTE *)this + 296))
    return OZChannelBlindData::legacyEncodeObjectToData(this, a2);
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
  objc_msgSend(v3, "encodeObject:forKey:", a2, CFSTR("BlindDataObject"));
  objc_msgSend(v3, "encodeObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0), CFSTR("DataIsLegacy"));
  v4 = (id)objc_msgSend(v3, "encodedData");

  return v4;
}

OZChannelBlindData *OZChannelBlindData::clone(OZChannelBlindData *this)
{
  OZChannelBlindData *v2;

  v2 = (OZChannelBlindData *)operator new();
  OZChannelBlindData::OZChannelBlindData(v2, (OZChannelBase *)this, 0);
  return v2;
}

void sub_1B2C9AC1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

PCMutex *OZChannelBlindData::copy(OZChannelBlindData *this, const OZChannelBase *a2, char a3)
{
  OZChannelFolder *var6;
  OZChannelFolder *v7;
  PCMutex *result;

  var6 = a2[2].var6;
  if (*(_QWORD *)var6 && !*((_BYTE *)var6 + 8))
  {
    PCMutex::lock(*(PCMutex **)var6);
    *((_BYTE *)var6 + 8) = 1;
  }
  OZChannel::copy((OZChannel *)this, a2, a3);
  OZChannelBlindData::copyInternalData(this, (id *)&a2->var0);
  v7 = a2[2].var6;
  result = *(PCMutex **)v7;
  if (*(_QWORD *)v7)
  {
    if (*((_BYTE *)v7 + 8))
    {
      result = (PCMutex *)PCMutex::unlock(result);
      *((_BYTE *)v7 + 8) = 0;
    }
  }
  return result;
}

uint64_t OZChannelBlindData::assign(OZChannelBlindData *this, const OZChannelBase *a2)
{
  OZChannelFolder *var6;
  void *v5;
  void *v6;
  id **v7;
  id *v8;
  PCString *i;
  __CFString *v10;
  __CFString *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  id *v21;
  id *v22;
  char *v23;
  __int128 v24;
  OZChannelFolder *v25;
  __int128 v27;
  __CFString *var0;

  var6 = a2[2].var6;
  if (*(_QWORD *)var6 && !*((_BYTE *)var6 + 8))
  {
    PCMutex::lock(*(PCMutex **)var6);
    *((_BYTE *)var6 + 8) = 1;
  }
  OZChannel::assign((OZChannel *)this, a2);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  *((_BYTE *)this + 336) = 1;
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5 != (void *)a2[2].var7)
  {

    *((_QWORD *)this + 35) = (id)a2[2].var7;
  }
  v6 = (void *)*((_QWORD *)this + 36);
  if (v6 != (void *)a2[2].var8)
  {

    *((_QWORD *)this + 36) = (id)a2[2].var8;
  }
  v8 = (id *)*((_QWORD *)this + 19);
  v7 = (id **)((char *)this + 152);
  if (v8 != *((id **)this + 20))
  {
    do
    {

      v8 += 4;
    }
    while (v8 != *((id **)this + 20));
    v8 = *v7;
  }
  *((_QWORD *)this + 20) = v8;
  for (i = a2[1].var5; i != (PCString *)a2[1].var6; i += 4)
  {
    v27 = *(_OWORD *)&i->var0;
    var0 = i[2].var0;
    v10 = i[3].var0;
    v11 = v10;
    v12 = *((_QWORD *)this + 20);
    v13 = *((_QWORD *)this + 21);
    if (v12 >= v13)
    {
      v15 = (uint64_t)(v12 - (_QWORD)*v7) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v17 = v13 - (_QWORD)*v7;
      if (v17 >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)this + 168, v18);
      else
        v19 = 0;
      v20 = &v19[32 * v15];
      *(_OWORD *)v20 = v27;
      *((_QWORD *)v20 + 2) = var0;
      *((_QWORD *)v20 + 3) = v11;
      v22 = (id *)*((_QWORD *)this + 19);
      v21 = (id *)*((_QWORD *)this + 20);
      v23 = v20;
      if (v21 != v22)
      {
        do
        {
          v24 = *((_OWORD *)v21 - 1);
          *((_OWORD *)v23 - 2) = *((_OWORD *)v21 - 2);
          *((_OWORD *)v23 - 1) = v24;
          v23 -= 32;
          v21 -= 4;
        }
        while (v21 != v22);
        v21 = *v7;
      }
      v14 = v20 + 32;
      *((_QWORD *)this + 19) = v23;
      *((_QWORD *)this + 20) = v20 + 32;
      *((_QWORD *)this + 21) = &v19[32 * v18];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_OWORD *)v12 = v27;
      *(_QWORD *)(v12 + 16) = var0;
      *(_QWORD *)(v12 + 24) = v10;
      v14 = (char *)(v12 + 32);
    }
    *((_QWORD *)this + 20) = v14;
  }
  *((_BYTE *)this + 296) = a2[2].var9;
  *((_QWORD *)this + 38) = a2[2].var10;
  *((_QWORD *)this + 39) = -[__CFString copy](a2[2].var11, "copy", v27, var0);
  *((_QWORD *)this + 40) = a2[2].var12;
  *((_QWORD *)this + 41) = -[OZChannelTimeConverter copy](a2[2].var13, "copy");
  v25 = a2[2].var6;
  if (*(_QWORD *)v25 && *((_BYTE *)v25 + 8))
  {
    PCMutex::unlock(*(PCMutex **)v25);
    *((_BYTE *)v25 + 8) = 0;
  }
  return PCMutex::unlock((PCMutex *)((char *)this + 176));
}

void sub_1B2C9AF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::compare(OZChannelBlindData *this, OZChannelBase *a2)
{
  uint64_t v4;
  OZChannelFolder *var6;
  char v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  OZChannelFolder *v14;
  uint64_t v15;
  CMTime v17;
  CMTime time1;
  _BYTE v19[152];
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[152];
  __int128 *v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 34);
  if (*(_QWORD *)v4 && !*(_BYTE *)(v4 + 8))
  {
    PCMutex::lock(*(PCMutex **)v4);
    *(_BYTE *)(v4 + 8) = 1;
  }
  var6 = a2[2].var6;
  if (*(_QWORD *)var6 && !*((_BYTE *)var6 + 8))
  {
    PCMutex::lock(*(PCMutex **)var6);
    *((_BYTE *)var6 + 8) = 1;
  }
  OZChannelBlindData::OZChannelBlindData((OZChannelBlindData *)v24, a2, a2->var6);
  OZChannelBlindData::OZChannelBlindData((OZChannelBlindData *)v19, (OZChannelBase *)this, *((OZChannelFolder **)this + 6));
  if (!*((_BYTE *)this + 296))
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (!objc_msgSend(v27, "isEqualTo:", v22))
        goto LABEL_26;
      v6 = objc_msgSend(v28, "isEqualTo:", v23);
    }
    else
    {
      if (!objc_msgSend(v27, "isEqual:", v22))
        goto LABEL_26;
      v6 = objc_msgSend(v28, "isEqual:", v23);
    }
    if ((v6 & 1) != 0)
      goto LABEL_17;
LABEL_26:
    v9 = 0;
    goto LABEL_27;
  }
  if (((*((uint64_t (**)(id, uint64_t, _QWORD))this + 40))(v27, v22, *((_QWORD *)this + 41)) & 1) != 0
    || ((*((uint64_t (**)(id, uint64_t, _QWORD))this + 40))(v28, v23, *((_QWORD *)this + 41)) & 1) != 0)
  {
    goto LABEL_26;
  }
LABEL_17:
  v7 = v25;
  v8 = v20;
  v9 = 1;
  if (v26 - (_QWORD)v25 == (char *)v21 - (char *)v20 && v20 != v21)
  {
    while (1)
    {
      v10 = *v8;
      time1.epoch = *((_QWORD *)v8 + 2);
      *(_OWORD *)&time1.value = v10;
      v11 = *v7;
      v17.epoch = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v17.value = v11;
      if (CMTimeCompare(&time1, &v17))
        goto LABEL_26;
      v12 = (void *)*((_QWORD *)v8 + 3);
      if (*((_BYTE *)this + 296))
        v13 = (*((uint64_t (**)(void *, _QWORD, _QWORD))this + 40))(v12, *((_QWORD *)v7 + 3), *((_QWORD *)this + 41));
      else
        v13 = objc_msgSend(v12, "isEqualTo:", *((_QWORD *)v7 + 3));
      v9 = v13;
      v8 += 2;
      if (v8 != v21)
      {
        v7 += 2;
        if ((v13 & 1) != 0)
          continue;
      }
      break;
    }
  }
LABEL_27:
  v14 = a2[2].var6;
  if (*(_QWORD *)v14 && *((_BYTE *)v14 + 8))
  {
    PCMutex::unlock(*(PCMutex **)v14);
    *((_BYTE *)v14 + 8) = 0;
  }
  v15 = *((_QWORD *)this + 34);
  if (*(_QWORD *)v15 && *(_BYTE *)(v15 + 8))
  {
    PCMutex::unlock(*(PCMutex **)v15);
    *(_BYTE *)(v15 + 8) = 0;
  }
  OZChannelBlindData::~OZChannelBlindData((OZChannelBlindData *)v19);
  OZChannelBlindData::~OZChannelBlindData((OZChannelBlindData *)v24);
  return v9;
}

void sub_1B2C9B188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  OZChannelBlindData::~OZChannelBlindData((OZChannelBlindData *)&a65);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::writeHeader(OZChannelBlindData *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelBlindDataScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 110);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 216))(a2, 110, (char *)this + 32);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, *((unsigned int *)this + 6));
  return OZChannelBase::writeFlags((uint64_t)this, a2, 0);
}

uint64_t `non-virtual thunk to'OZChannelBlindData::writeHeader(OZChannelBlindData *this, PCSerializerWriteStream *a2)
{
  return OZChannelBlindData::writeHeader((OZChannelBlindData *)((char *)this - 16), a2);
}

void OZChannelBlindData::writeBody(OZChannelBlindData *this, PCSerializerWriteStream *a2, int a3)
{
  PCMutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t j;
  void *v12;
  void *v13;
  __int128 *v14;
  unint64_t v15;
  PCString *v16;
  __int128 v17;
  uint64_t k;
  uint64_t v19;
  BOOL v20;
  PCString v21;
  PCString v22;
  PCString v23;
  __int128 v24;
  uint64_t v25;
  PCString v26;
  PCString v27;
  _BYTE v28[88];
  PCMutex *v29;
  char v30;

  v6 = (PCMutex *)((char *)this + 176);
  v29 = (PCMutex *)((char *)this + 176);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  v30 = 1;
  if (a3)
    OZChannelBase::writeFlags((uint64_t)this, a2, 1);
  v8 = *((_QWORD *)this + 19);
  v7 = *((_QWORD *)this + 20);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, unint64_t))(*(_QWORD *)a2 + 56))(a2, (unint64_t)(v7 - v8) >> 5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  if (*((_BYTE *)this + 336))
  {
    *((_BYTE *)this + 336) = 0;
    v10 = *((_QWORD *)this + 45);
    for (i = *((_QWORD *)this + 46); i != v10; PCString::~PCString((PCString *)(i - 8)))
      ;
    *((_QWORD *)this + 46) = v10;
    for (j = *((_QWORD *)this + 19); j != *((_QWORD *)this + 20); j += 32)
    {
      v12 = *(void **)(j + 24);
      PCAsciiStream::PCAsciiStream((PCAsciiStream *)v28);
      PCAsciiStream::write((PCAsciiStream *)v28, (_BYTE *)objc_msgSend(v12, "bytes"), objc_msgSend(v12, "length"));
      PCAsciiStream::close((PCAsciiStream *)v28);
      PCAsciiStream::getString((PCAsciiStream *)v28, &v27);
      std::vector<PCString>::push_back[abi:ne180100]((uint64_t *)this + 45, &v27);
      PCString::~PCString(&v27);
      PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v28);
    }
    PCAsciiStream::PCAsciiStream((PCAsciiStream *)v28);
    PCAsciiStream::write((PCAsciiStream *)v28, (_BYTE *)objc_msgSend(*((id *)this + 35), "bytes"), objc_msgSend(*((id *)this + 35), "length"));
    PCAsciiStream::close((PCAsciiStream *)v28);
    PCAsciiStream::getString((PCAsciiStream *)v28, &v27);
    PCString::set((PCString *)this + 43, &v27);
    PCString::~PCString(&v27);
    PCAsciiStream::PCAsciiStream((PCAsciiStream *)&v27);
    v13 = (void *)*((_QWORD *)this + 36);
    if (!v13)
      v13 = (void *)*((_QWORD *)this + 35);
    PCAsciiStream::write((PCAsciiStream *)&v27, (_BYTE *)objc_msgSend(v13, "bytes"), objc_msgSend(v13, "length"));
    PCAsciiStream::close((PCAsciiStream *)&v27);
    PCAsciiStream::getString((PCAsciiStream *)&v27, &v26);
    PCString::set((PCString *)this + 44, &v26);
    PCString::~PCString(&v26);
    PCAsciiStream::~PCAsciiStream((PCAsciiStream *)&v27);
    PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v28);
  }
  v14 = (__int128 *)*((_QWORD *)this + 19);
  if (v14 == *((__int128 **)this + 20))
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    v16 = (PCString *)*((_QWORD *)this + 45);
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
      v17 = *v14;
      v25 = *((_QWORD *)v14 + 2);
      v24 = v17;
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 3);
      (*(void (**)(PCSerializerWriteStream *, __int128 *))(*(_QWORD *)a2 + 112))(a2, &v24);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      PCString::PCString(&v23, v16);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v23);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      PCString::~PCString(&v23);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v15 += PCString::size(v16++);
      v14 += 2;
    }
    while (v14 != *((__int128 **)this + 20));
  }
  PCString::PCString(&v22, (const PCString *)this + 43);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v22);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v22);
  PCString::PCString(&v21, (const PCString *)this + 44);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 6);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v21);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v21);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  if (v15 <= 0x80000 && PCString::size((PCString *)this + 44) <= 0x80000)
  {
    v20 = 0;
    if (!v6)
      return;
    goto LABEL_25;
  }
  v19 = *((_QWORD *)this + 45);
  for (k = *((_QWORD *)this + 46); k != v19; PCString::~PCString((PCString *)(k - 8)))
    ;
  *((_QWORD *)this + 46) = v19;
  PCString::clear((PCString *)this + 44);
  *((_BYTE *)this + 336) = 1;
  v6 = v29;
  v20 = v30 == 0;
  if (v29)
  {
LABEL_25:
    if (!v20)
      PCMutex::unlock(v6);
  }
}

void sub_1B2C9B670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, PCString a15, uint64_t a16, uint64_t a17, uint64_t a18, PCString a19, PCString a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  PCString::~PCString(&a19);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)&a20);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)&a31);
  PCLockSentry<PCMutex>::~PCLockSentry(v31 - 80);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZChannelBlindData::writeBody(OZChannelBlindData *this, PCSerializerWriteStream *a2, int a3)
{
  OZChannelBlindData::writeBody((OZChannelBlindData *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelBlindData::parseBegin(OZChannelBlindData *this, PCSerializerReadStream *a2)
{
  OZChannelBase::parseBegin((OZChannelBase *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelBlindDataScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelBlindData::parseBegin(OZChannelBlindData *this, PCSerializerReadStream *a2)
{
  OZChannelBase::parseBegin((OZChannelBase *)((char *)this - 16), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelBlindDataScope);
  return 1;
}

uint64_t OZChannelBlindData::parseEnd(OZChannelBlindData *this, PCSerializerReadStream *a2)
{
  OZChannel::parseEnd((OZChannel *)this, a2);
  if (*((_QWORD *)this + 36) && objc_msgSend(*((id *)this + 35), "isEqualToData:"))
  {

    *((_QWORD *)this + 36) = 0;
  }
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelBlindData::parseEnd(OZChannelBlindData *this, PCSerializerReadStream *a2)
{
  OZChannelBlindData::parseEnd((OZChannelBlindData *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelBlindData::parseElement(OZChannelBlindData *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  uint64_t v7;
  PCString v8;
  PCString *v9;
  PCString v10;
  PCString v11;
  PCString v13;
  PCString v14;
  PCString v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  PCSharedCount v19;
  int v20;

  v20 = 0;
  PCSharedCount::PCSharedCount(&v19);
  v6 = *((_DWORD *)a3 + 2);
  if (*((_DWORD *)a2 + 26) > 4u)
  {
    switch(v6)
    {
      case 1:
        PCSerializerReadStream::getAsInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v20);
        break;
      case 2:
        goto LABEL_10;
      case 3:
        PCSerializerReadStream::getAsFigTime((uint64_t)a2, (uint64_t)a3, (uint64_t)&v17);
        *(_OWORD *)((char *)this + 248) = v17;
        *((_QWORD *)this + 33) = v18;
        break;
      case 4:
        PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v19);
        PCString::PCString(&v15, (const PCString *)&v19);
        v8.var0 = (__CFString *)&v15;
        OZChannelBlindData::setData(this, v8);
        v9 = &v15;
        goto LABEL_15;
      case 5:
        PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v19);
        PCString::PCString(&v14, (const PCString *)&v19);
        v10.var0 = (__CFString *)&v14;
        OZChannelBlindData::setDefaultData(this, v10);
        v9 = &v14;
        goto LABEL_15;
      case 6:
        PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v19);
        PCString::PCString(&v13, (const PCString *)&v19);
        v11.var0 = (__CFString *)&v13;
        OZChannelBlindData::setValueData(this, v11);
        v9 = &v13;
LABEL_15:
        PCString::~PCString(v9);
        break;
      default:
        if (v6 == 110)
        {
LABEL_10:
          OZChannelBase::parseElement((OZChannelBase *)this, a2, a3);
        }
        else if (v6 == 112)
        {
          v16 = 0;
          if ((*(unsigned int (**)(PCStreamElement *, unint64_t *))(*(_QWORD *)a3 + 48))(a3, &v16))
            OZChannelBase::setFlags((OZChannelBase *)this, v16);
        }
        break;
    }
  }
  else if (v6 == 110)
  {
    (*(void (**)(PCStreamElement *, uint64_t, PCSharedCount *))(*(_QWORD *)a3 + 96))(a3, 114, &v19);
    v7 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)((char *)this + 248) = *MEMORY[0x1E0CA2E68];
    *((_QWORD *)this + 33) = *(_QWORD *)(v7 + 16);
    OZChannelBase::parseElement((OZChannelBase *)this, a2, a3);
  }
  PCString::~PCString((PCString *)&v19);
  return 1;
}

void sub_1B2C9B9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, __int16 a11, char a12, char a13, PCString a14)
{
  uint64_t v14;

  PCString::~PCString(&a10);
  PCString::~PCString((PCString *)(v14 - 48));
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::setData(OZChannelBlindData *this, PCString a2)
{
  unsigned int v4;
  _BYTE *v5;
  char *CStr;
  unsigned int v7;
  unint64_t v8;
  void *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  CMTime v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char v30;
  _BYTE v31[88];

  PCAsciiStream::PCAsciiStream((PCAsciiStream *)v31);
  v4 = PCString::size((PCString *)a2.var0);
  v5 = malloc_type_malloc(v4, 0x2956BA2EuLL);
  CStr = PCString::createCStr((PCString *)a2.var0);
  PCAsciiStream::open((PCAsciiStream *)v31, CStr);
  v7 = PCString::size((PCString *)a2.var0);
  v8 = PCAsciiStream::read((PCAsciiStream *)v31, v5, v7);
  PCAsciiStream::close((PCAsciiStream *)v31);
  free(CStr);
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:", v5, v8);
  v29 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  v30 = 1;
  *((_BYTE *)this + 336) = 1;
  if (v9)
  {
    v10 = v9;
    v27 = *(_OWORD *)((char *)this + 248);
    v28 = *((_QWORD *)this + 33);
    (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, char *))(*(_QWORD *)this + 336))(&v26, this, (char *)this + 248);
    OZChannel::addKeypointAt((OZChannel *)this, &v26);
    v11 = *((_QWORD *)this + 21);
    v12 = *((_QWORD *)this + 20);
    if (v12 >= v11)
    {
      v14 = *((_QWORD *)this + 19);
      v15 = (uint64_t)(v12 - v14) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v17 = v11 - v14;
      if (v17 >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)this + 168, v18);
      else
        v19 = 0;
      v20 = &v19[32 * v15];
      v21 = &v19[32 * v18];
      *(_OWORD *)v20 = v27;
      *((_QWORD *)v20 + 2) = v28;
      *((_QWORD *)v20 + 3) = v9;
      v13 = v20 + 32;
      v23 = (char *)*((_QWORD *)this + 19);
      v22 = (char *)*((_QWORD *)this + 20);
      if (v22 != v23)
      {
        do
        {
          v24 = *((_OWORD *)v22 - 1);
          *((_OWORD *)v20 - 2) = *((_OWORD *)v22 - 2);
          *((_OWORD *)v20 - 1) = v24;
          v20 -= 32;
          v22 -= 32;
        }
        while (v22 != v23);
        v22 = (char *)*((_QWORD *)this + 19);
      }
      *((_QWORD *)this + 19) = v20;
      *((_QWORD *)this + 20) = v13;
      *((_QWORD *)this + 21) = v21;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_OWORD *)v12 = v27;
      *(_QWORD *)(v12 + 16) = v28;
      *(_QWORD *)(v12 + 24) = v9;
      v13 = (char *)(v12 + 32);
    }
    *((_QWORD *)this + 20) = v13;
  }
  PCMutex::unlock((PCMutex *)((char *)this + 176));
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v31);
  return 0;
}

void sub_1B2C9BC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::setDefaultData(OZChannelBlindData *this, PCString a2)
{
  unsigned int v4;
  _BYTE *v5;
  char *CStr;
  unsigned int v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  _BYTE v14[88];

  PCAsciiStream::PCAsciiStream((PCAsciiStream *)v14);
  v4 = PCString::size((PCString *)a2.var0);
  v5 = malloc_type_malloc(v4, 0x6BC5F659uLL);
  CStr = PCString::createCStr((PCString *)a2.var0);
  PCAsciiStream::open((PCAsciiStream *)v14, CStr);
  v7 = PCString::size((PCString *)a2.var0);
  v8 = PCAsciiStream::read((PCAsciiStream *)v14, v5, v7);
  PCAsciiStream::close((PCAsciiStream *)v14);
  free(CStr);
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:", v5, v8);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  *((_BYTE *)this + 336) = 1;
  if (!OZChannelBase::testFlag((OZChannelBase *)this, 0x200000000))
  {
LABEL_8:
    if (!v9)
      goto LABEL_12;
    goto LABEL_9;
  }
  v10 = (void *)*((_QWORD *)this + 35);
  if (!v9)
  {
    if (!v10)
      goto LABEL_12;
    goto LABEL_7;
  }
  if (!v10)
  {
LABEL_7:
    OZChannelBase::setFlag((OZChannelBase *)this, 0x100000000, 1);
    goto LABEL_8;
  }
  if ((objc_msgSend(v10, "isEqualToData:", v9) & 1) == 0)
    OZChannelBase::setFlag((OZChannelBase *)this, 0x100000000, 1);
LABEL_9:
  v11 = (void *)*((_QWORD *)this + 35);
  if (v11)

  v12 = v9;
  *((_QWORD *)this + 35) = v9;
LABEL_12:
  PCMutex::unlock((PCMutex *)((char *)this + 176));
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v14);
  return 0;
}

void sub_1B2C9BDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::setValueData(OZChannelBlindData *this, PCString a2)
{
  unsigned int v4;
  _BYTE *v5;
  char *CStr;
  unsigned int v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  _BYTE v13[88];

  PCAsciiStream::PCAsciiStream((PCAsciiStream *)v13);
  v4 = PCString::size((PCString *)a2.var0);
  v5 = malloc_type_malloc(v4, 0xAD9AE79EuLL);
  CStr = PCString::createCStr((PCString *)a2.var0);
  PCAsciiStream::open((PCAsciiStream *)v13, CStr);
  v7 = PCString::size((PCString *)a2.var0);
  v8 = PCAsciiStream::read((PCAsciiStream *)v13, v5, v7);
  PCAsciiStream::close((PCAsciiStream *)v13);
  free(CStr);
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:", v5, v8);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  *((_BYTE *)this + 336) = 1;
  if (v9)
  {
    v10 = (void *)*((_QWORD *)this + 36);
    if (v10)

    v11 = v9;
    *((_QWORD *)this + 36) = v9;
  }
  PCMutex::unlock((PCMutex *)((char *)this + 176));
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v13);
  return 0;
}

void sub_1B2C9BEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelBlindData::parseElement(OZChannelBlindData *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelBlindData::parseElement((OZChannelBlindData *)((char *)this - 16), a2, a3);
  return 1;
}

uint64_t OZChannelBlindData::calcHashForState(OZChannelBlindData *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  uint64_t result;
  PCMutex *v7;
  NSData *PluginDataPtr;
  id v9;
  PCString v10;
  PCString v11;
  PCSharedCount v12;
  _BYTE v13[88];
  char *v14;
  char v15;

  result = OZChannelBase::testFlag((OZChannelBase *)this, 128);
  if ((result & 1) == 0)
  {
    v7 = (PCMutex *)((char *)this + 176);
    v14 = (char *)this + 176;
    PCMutex::lock((PCMutex *)((char *)this + 176));
    v15 = 1;
    OZChannel::calcHashForState((OZChannel *)this, a2, a3);
    PluginDataPtr = OZChannelBlindData::getPluginDataPtr(this, a3);
    v9 = OZChannelBlindData::encodeObjectToData(this, PluginDataPtr);
    PCAsciiStream::PCAsciiStream((PCAsciiStream *)v13);
    PCSharedCount::PCSharedCount(&v12);
    PCAsciiStream::write((PCAsciiStream *)v13, (_BYTE *)objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"));
    PCAsciiStream::close((PCAsciiStream *)v13);
    PCAsciiStream::getString((PCAsciiStream *)v13, &v11);
    PCString::set((PCString *)&v12, &v11);
    PCString::~PCString(&v11);
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelBlindDataScope);
    PCString::PCString(&v10, (const PCString *)&v12);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v10);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v10);
    PCSerializerWriteStream::popScope((uint64_t)a2);

    PCString::~PCString((PCString *)&v12);
    PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v13);
    return PCMutex::unlock(v7);
  }
  return result;
}

void sub_1B2C9C074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, char a12)
{
  uint64_t v12;

  PCString::~PCString(&a10);
  PCString::~PCString(&a11);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)&a12);
  PCLockSentry<PCMutex>::~PCLockSentry(v12 - 48);
  _Unwind_Resume(a1);
}

NSData *OZChannelBlindData::getPluginDataPtr(OZChannelBlindData *this, const CMTime *a2)
{
  PCMutex *v4;
  __int128 *Keyframe;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  NSData *v10;
  NSData *v11;
  CMTimeEpoch v12;
  NSData *v13;
  CMTimeEpoch v14;
  __int128 v15;
  __int128 v16;
  double Seconds;
  float v18;
  float v19;
  uint64_t v20;
  BOOL v21;
  double v22;
  _BYTE v24[24];
  __int128 v25;
  CMTime time;
  CMTime v27;
  PCMutex *v28;
  char v29;
  CMTime time2;
  CMTime time1;

  v4 = (PCMutex *)((char *)this + 176);
  v28 = (PCMutex *)((char *)this + 176);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  v29 = 1;
  memset(&v27, 0, sizeof(v27));
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, const CMTime *))(*(_QWORD *)this + 328))(&v27, this, a2);
  if ((*(unsigned int (**)(OZChannelBlindData *, _QWORD))(*(_QWORD *)this + 552))(this, 0))
  {
    Keyframe = OZChannelBlindData::findKeyframe(this, &v27, 1);
    v6 = Keyframe;
    v7 = (__int128 *)*((_QWORD *)this + 19);
    v8 = Keyframe - 2;
    if (v7 == Keyframe)
      v9 = (__int128 *)*((_QWORD *)this + 19);
    else
      v9 = Keyframe - 2;
    v10 = (NSData *)*((_QWORD *)v9 + 3);
    if (*((__int128 **)this + 20) != Keyframe)
    {
      v11 = OZChannelBlindData::decodeObjectFromData(this, *((NSData **)Keyframe + 3));
      if (!v11)
        objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("Unable to unarchive data"), 0));
      time1 = v27;
      v12 = *((_QWORD *)v6 + 2);
      *(_OWORD *)&time2.value = *v6;
      time2.epoch = v12;
      if (!CMTimeCompare(&time1, &time2))
      {
LABEL_19:
        v21 = 0;
        if (!v4)
          return v11;
        goto LABEL_20;
      }
      if (v7 != v6)
      {
        v13 = OZChannelBlindData::decodeObjectFromData(this, *((NSData **)v9 + 3));
        if (!v13)
          objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("Unable to unarchive data"), 0));
        time1 = v27;
        v14 = *((_QWORD *)v8 + 2);
        *(_OWORD *)&time2.value = *v8;
        time2.epoch = v14;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
        v15 = *v6;
        time1.epoch = *((_QWORD *)v6 + 2);
        *(_OWORD *)&time1.value = v15;
        v16 = *v8;
        time2.epoch = *((_QWORD *)v8 + 2);
        *(_OWORD *)&time2.value = v16;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v24);
        operator/(&v25, (uint64_t)v24, (uint64_t)&time);
        Seconds = CMTimeGetSeconds(&time);
        v18 = Seconds;
        if (*((_BYTE *)this + 296))
        {
          v19 = Seconds;
          v20 = (*((uint64_t (**)(NSData *, NSData *, _QWORD, float))this + 38))(v13, v11, *((_QWORD *)this + 39), v19);
LABEL_18:
          v11 = (NSData *)v20;
          goto LABEL_19;
        }
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          *(float *)&v22 = v18;
          v20 = -[NSData interpolateBetween:withWeight:](v13, "interpolateBetween:withWeight:", v11, v22);
          goto LABEL_18;
        }
      }
    }
  }
  else
  {
    v10 = (NSData *)*((_QWORD *)this + 36);
    if (!v10)
      v10 = (NSData *)*((_QWORD *)this + 35);
  }
  v11 = OZChannelBlindData::decodeObjectFromData(this, v10);
  v4 = v28;
  v21 = v29 == 0;
  if (!v28)
    return v11;
LABEL_20:
  if (!v21)
    PCMutex::unlock(v4);
  return v11;
}

void sub_1B2C9C36C(void *a1)
{
  PCString *v1;

  objc_begin_catch(a1);
  PCString::cf_str(v1 + 4);
  NSLog(CFSTR("Unable to unarchive data in %s for channel %@"));
  objc_end_catch();
  JUMPOUT(0x1B2C9C288);
}

void sub_1B2C9C3C0()
{
  objc_end_catch();
  JUMPOUT(0x1B2C9C3D8);
}

void sub_1B2C9C3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZChannelBlindData::setInterpolateContext(OZChannelBlindData *this, NSData *a2)
{
  void *v4;
  id v5;

  v4 = (void *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = -[NSData copy](a2, "copy");

  v5 = (id)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = -[NSData copy](a2, "copy");

}

__int128 *OZChannelBlindData::findKeyframe(OZChannelBlindData *this, const CMTime *a2, int a3)
{
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  __int128 *v8;
  __int128 v9;
  int32_t v10;
  __int128 v11;
  CMTime v13;
  CMTime time1;

  v5 = (__int128 *)*((_QWORD *)this + 19);
  v6 = (__int128 *)*((_QWORD *)this + 20);
  if (v6 != v5)
  {
    v7 = ((char *)v6 - (char *)v5) >> 5;
    do
    {
      v8 = &v5[2 * (v7 >> 1)];
      v9 = *v8;
      time1.epoch = *((_QWORD *)v8 + 2);
      *(_OWORD *)&time1.value = v9;
      v13 = *a2;
      v10 = CMTimeCompare(&time1, &v13);
      if (v10 >= 0)
        v7 >>= 1;
      else
        v7 += ~(v7 >> 1);
      if (v10 < 0)
        v5 = v8 + 2;
    }
    while (v7);
  }
  if (v5 == v6)
    return v6;
  if (a3 != 1)
  {
    if (a3)
      return v6;
    v11 = *v5;
    time1.epoch = *((_QWORD *)v5 + 2);
    *(_OWORD *)&time1.value = v11;
    v13 = *a2;
    if (CMTimeCompare(&time1, &v13))
      return v6;
  }
  return v5;
}

NSData *OZChannelBlindData::decodeObjectFromData(OZChannelBlindData *this, NSData *a2)
{
  NSData *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v8;

  v2 = a2;
  if (!*((_BYTE *)this + 296))
    return (NSData *)OZChannelBlindData::legacyDecodeObjectFromData(this, a2);
  v8 = 0;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", a2, &v8);
  if (!v3)
  {
    v4 = (void *)MEMORY[0x1E0C99DA0];
    v5 = objc_msgSend(v8, "localizedFailureReason");
    objc_msgSend(v4, "raise:format:", *MEMORY[0x1E0C99850], CFSTR("%@"), v5);
  }
  v6 = (void *)objc_msgSend(v3, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("DataIsLegacy"));
  if (v6)
  {
    if ((objc_msgSend(v6, "BOOLValue") & 1) == 0)
      v2 = (NSData *)objc_msgSend(v3, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("BlindDataObject"));
  }

  return v2;
}

void sub_1B2C9C634(void *a1)
{
  PCString *v1;

  objc_begin_catch(a1);
  PCString::cf_str(v1 + 4);
  objc_msgSend(0, "error");
  NSLog(CFSTR("Unable to unarchive data in %s for channel %@. Error: %@"));
  objc_end_catch();
  JUMPOUT(0x1B2C9C5FCLL);
}

void sub_1B2C9C67C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::setPluginDataPtr(OZChannelBlindData *this, const CMTime *a2, void *a3, char a4, int a5, char a6)
{
  __int128 *Keyframe;
  id v13;
  char **v14;
  __int128 *v15;
  __int128 v16;
  unint64_t v17;
  __int128 v18;
  __int128 *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 *v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v33;
  __int128 v34;
  char *v35;
  char v36;
  CMTime v37;
  CMTime time2;
  CMTime time1;

  memset(&v37, 0, sizeof(v37));
  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)this + 328))(&v37);
  if ((a4 & 1) == 0)
    (*(void (**)(OZChannelBlindData *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  v35 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  v36 = 1;
  *((_BYTE *)this + 336) = 1;

  *((_QWORD *)this + 36) = 0;
  if (((*(uint64_t (**)(OZChannelBlindData *, _QWORD))(*(_QWORD *)this + 552))(this, 0) & 1) != 0
    || OZChannel::isAnimated((OZChannel *)this))
  {
    if (a3)
    {
      Keyframe = OZChannelBlindData::findKeyframe(this, &v37, 1);
      v13 = OZChannelBlindData::encodeObjectToData(this, a3);
      v33 = *(_OWORD *)&v37.value;
      *(_QWORD *)&v34 = v37.epoch;
      *((_QWORD *)&v34 + 1) = v13;
      v14 = (char **)((char *)this + 152);
      v15 = (__int128 *)*((_QWORD *)this + 20);
      if (v15 == Keyframe)
      {
        v17 = *((_QWORD *)this + 21);
        if (v17 <= (unint64_t)Keyframe)
        {
          v21 = ((char *)v15 - *v14) >> 5;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 59)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v23 = v17 - (_QWORD)*v14;
          if (v23 >> 4 > v22)
            v22 = v23 >> 4;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
            v24 = 0x7FFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)this + 168, v24);
          else
            v25 = 0;
          v26 = (__int128 *)&v25[32 * v21];
          v27 = &v25[32 * v24];
          v28 = v34;
          *v26 = v33;
          v26[1] = v28;
          v19 = v26 + 2;
          v30 = (char *)*((_QWORD *)this + 19);
          v29 = (char *)*((_QWORD *)this + 20);
          if (v29 != v30)
          {
            do
            {
              v31 = *((_OWORD *)v29 - 1);
              *(v26 - 2) = *((_OWORD *)v29 - 2);
              *(v26 - 1) = v31;
              v26 -= 2;
              v29 -= 32;
            }
            while (v29 != v30);
            v29 = *v14;
          }
          *((_QWORD *)this + 19) = v26;
          *((_QWORD *)this + 20) = v19;
          *((_QWORD *)this + 21) = v27;
          if (v29)
            operator delete(v29);
        }
        else
        {
          v18 = v34;
          *Keyframe = v33;
          Keyframe[1] = v18;
          v19 = Keyframe + 2;
        }
        *((_QWORD *)this + 20) = v19;
        if (a5)
        {
          (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, CMTime *))(*(_QWORD *)this + 336))(&time1, this, &v37);
          OZChannel::addKeypointAt((OZChannel *)this, &time1);
        }
      }
      else
      {
        v16 = *Keyframe;
        time1.epoch = *((_QWORD *)Keyframe + 2);
        *(_OWORD *)&time1.value = v16;
        time2 = v37;
        if (CMTimeCompare(&time1, &time2))
        {
          std::vector<std::pair<CMTime,void *>>::insert((char **)this + 19, (char *)Keyframe, (char *)&v33);
          if (a5)
          {
            (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, CMTime *))(*(_QWORD *)this + 336))(&time1, this, &v37);
            OZChannel::addKeypointAt((OZChannel *)this, &time1);
          }
        }
        else if ((a6 & 1) != 0)
        {
          v20 = (void *)*((_QWORD *)Keyframe + 3);
          *((_QWORD *)Keyframe + 3) = v13;

        }
        else
        {
          std::vector<std::pair<CMTime,void *>>::insert((char **)this + 19, (char *)Keyframe + 32, (char *)&v33);
        }
      }
    }
    else
    {
      (*(void (**)(OZChannelBlindData *, const CMTime *))(*(_QWORD *)this + 608))(this, a2);
    }
  }
  else
  {
    *((_QWORD *)this + 36) = OZChannelBlindData::encodeObjectToData(this, a3);
  }
  return PCMutex::unlock((PCMutex *)((char *)this + 176));
}

void sub_1B2C9C958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<CMTime,void *>>::insert(char **a1, char *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *i;
  __int128 v43;
  __int128 v44;
  char *v45;

  v3 = a3;
  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = v7 >> 5;
  v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  v11 = (uint64_t)(a1 + 2);
  v10 = (unint64_t)a1[2];
  if (v5 >= v10)
  {
    v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 5) + 1;
    if (v18 >> 59)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v20 = v10 - (_QWORD)v6;
    if (v20 >> 4 > v18)
      v18 = v20 >> 4;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
      v21 = 0x7FFFFFFFFFFFFFFLL;
    else
      v21 = v18;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)(a1 + 2), v21);
    else
      v22 = 0;
    v24 = &v22[32 * v8];
    v25 = &v22[32 * v21];
    if (v8 == v21)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v31 = 1;
        else
          v31 = v7 >> 4;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(v11, v31);
        v24 = &v32[32 * (v31 >> 2)];
        v25 = &v32[32 * v33];
        if (v22)
        {
          v34 = &v32[32 * v33];
          operator delete(v22);
          v25 = v34;
        }
      }
      else
      {
        v26 = v8 + 2;
        if (v8 >= -1)
          v26 = v8 + 1;
        v24 -= 32 * (v26 >> 1);
      }
    }
    v35 = *((_OWORD *)v3 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v3;
    *((_OWORD *)v24 + 1) = v35;
    v36 = v24 + 32;
    v37 = *a1;
    v38 = v24;
    if (*a1 != v9)
    {
      v39 = v9;
      v40 = v24;
      do
      {
        v38 = v40 - 32;
        v41 = *((_OWORD *)v39 - 1);
        *((_OWORD *)v40 - 2) = *((_OWORD *)v39 - 2);
        *((_OWORD *)v40 - 1) = v41;
        v39 -= 32;
        v40 -= 32;
      }
      while (v39 != v37);
    }
    for (i = a1[1]; v9 != i; v36 += 32)
    {
      v43 = *(_OWORD *)v9;
      v44 = *((_OWORD *)v9 + 1);
      v9 += 32;
      *(_OWORD *)v36 = v43;
      *((_OWORD *)v36 + 1) = v44;
    }
    v45 = *a1;
    *a1 = v38;
    a1[1] = v36;
    a1[2] = v25;
    if (v45)
      operator delete(v45);
    return v24;
  }
  else if (v9 == (char *)v5)
  {
    v23 = *((_OWORD *)a3 + 1);
    *(_OWORD *)v9 = *(_OWORD *)a3;
    *((_OWORD *)v9 + 1) = v23;
    a1[1] = v9 + 32;
  }
  else
  {
    v12 = v9 + 32;
    v13 = v5 - 32;
    if (v5 < 0x20)
    {
      v15 = a1[1];
    }
    else
    {
      v14 = (__int128 *)(v5 - 32);
      v15 = a1[1];
      do
      {
        v16 = *v14;
        v17 = v14[1];
        v14 += 2;
        *(_OWORD *)v15 = v16;
        *((_OWORD *)v15 + 1) = v17;
        v15 += 32;
      }
      while ((unint64_t)v14 < v5);
    }
    a1[1] = v15;
    if ((_OWORD *)v5 != v12)
    {
      v27 = 32 * ((uint64_t)(v5 - (_QWORD)v12) >> 5);
      v28 = (uint64_t)&v6[32 * v8 - 8];
      do
      {
        v29 = *(_OWORD *)(v28 + v27 - 24);
        *(_QWORD *)(v13 + 16) = *(_QWORD *)(v28 + v27 - 8);
        *(_OWORD *)v13 = v29;
        *(_QWORD *)(v13 + 24) = *(_QWORD *)(v28 + v27);
        v13 -= 32;
        v27 -= 32;
      }
      while (v27);
    }
    if (v9 <= a3)
      v3 = &a3[32 * (a1[1] > a3)];
    v30 = *(_OWORD *)v3;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v9 = v30;
    *(_QWORD *)&v6[32 * v8 + 24] = *((_QWORD *)v3 + 3);
  }
  return v9;
}

void sub_1B2C9CBF8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelBlindData::isModified(OZChannelBlindData *this)
{
  if (*((_QWORD *)this + 36))
    return 1;
  else
    return OZChannel::isModified((OZChannel *)this);
}

BOOL OZChannelBlindData::hasKeypoints(OZChannelBlindData *this)
{
  return *((_QWORD *)this + 20) != *((_QWORD *)this + 19);
}

BOOL OZChannelBlindData::hasMoreThanOneKeypoint(OZChannelBlindData *this)
{
  return *((_QWORD *)this + 20) - *((_QWORD *)this + 19) > 0x20uLL;
}

BOOL OZChannelBlindData::hasKeypointAt(OZChannelBlindData *this, const CMTime *a2)
{
  PCMutex *v4;
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  __int128 *v8;
  __int128 v9;
  int32_t v10;
  __int128 v11;
  _BOOL8 v12;
  CMTime v14;
  __int128 v15;
  CMTimeEpoch v16;
  char *v17;
  char v18;
  CMTime time2;
  CMTime time1;

  v4 = (PCMutex *)((char *)this + 176);
  v17 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  v18 = 1;
  v15 = 0uLL;
  v16 = 0;
  (*(void (**)(__int128 *__return_ptr, OZChannelBlindData *, const CMTime *))(*(_QWORD *)this + 328))(&v15, this, a2);
  v6 = (__int128 *)*((_QWORD *)this + 19);
  v5 = (__int128 *)*((_QWORD *)this + 20);
  *(_OWORD *)&v14.value = v15;
  v14.epoch = v16;
  if (v5 == v6)
    goto LABEL_11;
  v7 = ((char *)v5 - (char *)v6) >> 5;
  do
  {
    v8 = &v6[2 * (v7 >> 1)];
    v9 = *v8;
    time1.epoch = *((_QWORD *)v8 + 2);
    *(_OWORD *)&time1.value = v9;
    time2 = v14;
    v10 = CMTimeCompare(&time1, &time2);
    if (v10 >= 0)
      v7 >>= 1;
    else
      v7 += ~(v7 >> 1);
    if (v10 < 0)
      v6 = v8 + 2;
  }
  while (v7);
  if (v6 == v5)
  {
LABEL_11:
    v12 = 0;
  }
  else
  {
    time1 = v14;
    v11 = *v6;
    time2.epoch = *((_QWORD *)v6 + 2);
    *(_OWORD *)&time2.value = v11;
    v12 = CMTimeCompare(&time1, &time2) >= 0;
  }
  PCMutex::unlock(v4);
  return v12;
}

void sub_1B2C9CD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::addKeypointAt(OZChannelBlindData *this, const CMTime *a2)
{
  uint64_t result;
  __int128 *Keyframe;
  __int128 *v6;
  __int128 **v7;
  __int128 v8;
  CMTime *v9;
  NSData *value;
  NSData *v11;
  double Seconds;
  NSData *v13;
  NSData *v14;
  double v15;
  id v16;
  void **v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  CMTimeEpoch epoch;
  CMTimeScale *p_timescale;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  CMTime *v31;
  char *v32;
  __int128 *v33;
  __int128 *v34;
  __int128 v35;
  CMTime v36;
  id v37;
  _BYTE v38[24];
  __int128 v39;
  CMTime time;
  CMTime v41;
  CMTime v42;
  char *v43;
  char v44;
  CMTime v45;
  CMTime time2;

  result = (*(uint64_t (**)(OZChannelBlindData *))(*(_QWORD *)this + 512))(this);
  if ((_DWORD)result)
  {
    OZChannel::addKeypointAt((OZChannel *)this, a2);
    memset(&v45, 0, sizeof(v45));
    (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, const CMTime *))(*(_QWORD *)this + 328))(&v45, this, a2);
    v43 = (char *)this + 176;
    PCMutex::lock((PCMutex *)((char *)this + 176));
    v44 = 1;
    *((_BYTE *)this + 336) = 1;
    Keyframe = OZChannelBlindData::findKeyframe(this, &v45, 1);
    v6 = Keyframe;
    v7 = (__int128 **)((char *)this + 152);
    if (*((__int128 **)this + 20) != Keyframe)
    {
      v8 = *Keyframe;
      v36.epoch = *((_QWORD *)Keyframe + 2);
      *(_OWORD *)&v36.value = v8;
      time2 = v45;
      if (CMTimeCompare(&v36, &time2))
      {
        if (*((__int128 **)this + 19) == v6)
          v9 = (CMTime *)*((_QWORD *)this + 19);
        else
          v9 = (CMTime *)(v6 - 2);
        value = (NSData *)v9[1].value;
        OZChannelBlindData::decodeObjectFromData(this, value);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          if (*v7 == v6)
          {
            v16 = *((id *)v6 + 3);
          }
          else
          {
            *(_OWORD *)&v42.value = *v6;
            v11 = (NSData *)*((_QWORD *)v6 + 3);
            v42.epoch = *((_QWORD *)v6 + 2);
            v41 = *v9;
            v36 = v45;
            time2 = v41;
            PC_CMTimeSaferSubtract(&v36, &time2, (uint64_t)&v39);
            v36 = v42;
            time2 = v41;
            PC_CMTimeSaferSubtract(&v36, &time2, (uint64_t)v38);
            operator/(&v39, (uint64_t)v38, (uint64_t)&time);
            Seconds = CMTimeGetSeconds(&time);
            v13 = OZChannelBlindData::decodeObjectFromData(this, v11);
            v14 = OZChannelBlindData::decodeObjectFromData(this, value);
            *(float *)&v15 = Seconds;
            v16 = OZChannelBlindData::encodeObjectToData(this, (void *)-[NSData interpolateBetween:withWeight:](v14, "interpolateBetween:withWeight:", v13, v15));
          }
          v36 = v45;
          v37 = v16;
          std::vector<std::pair<CMTime,void *>>::insert((char **)this + 19, (char *)v6, (char *)&v36);
        }
        else
        {
          *(_OWORD *)&v36.value = *(_OWORD *)&v45.value;
          v19 = (void *)*((_QWORD *)v6 + 3);
          v36.epoch = v45.epoch;
          v37 = v19;
          v20 = v19;
          std::vector<std::pair<CMTime,void *>>::insert((char **)this + 19, (char *)v6, (char *)&v36);
        }
      }
      return PCMutex::unlock((PCMutex *)((char *)this + 176));
    }
    if (*v7 == Keyframe)
    {
      v18 = (void *)*((_QWORD *)this + 36);
      if (v18)
        goto LABEL_15;
      v17 = (void **)((char *)this + 280);
    }
    else
    {
      v17 = (void **)Keyframe - 1;
    }
    v18 = *v17;
LABEL_15:
    v21 = v18;
    v36 = v45;
    v22 = *((_QWORD *)this + 21);
    v23 = *((_QWORD *)this + 20);
    if (v23 >= v22)
    {
      v26 = (uint64_t)(v23 - (_QWORD)*v7) >> 5;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 59)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v28 = v22 - (_QWORD)*v7;
      if (v28 >> 4 > v27)
        v27 = v28 >> 4;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0)
        v29 = 0x7FFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)this + 168, v29);
      else
        v30 = 0;
      v31 = (CMTime *)&v30[32 * v26];
      v32 = &v30[32 * v29];
      *v31 = v36;
      v31[1].value = (CMTimeValue)v21;
      p_timescale = &v31[1].timescale;
      v34 = (__int128 *)*((_QWORD *)this + 19);
      v33 = (__int128 *)*((_QWORD *)this + 20);
      if (v33 != v34)
      {
        do
        {
          v35 = *(v33 - 1);
          *(_OWORD *)&v31[-2].epoch = *(v33 - 2);
          *(_OWORD *)&v31[-1].timescale = v35;
          v31 = (CMTime *)((char *)v31 - 32);
          v33 -= 2;
        }
        while (v33 != v34);
        v33 = *v7;
      }
      *((_QWORD *)this + 19) = v31;
      *((_QWORD *)this + 20) = p_timescale;
      *((_QWORD *)this + 21) = v32;
      if (v33)
        operator delete(v33);
    }
    else
    {
      epoch = v45.epoch;
      *(_OWORD *)v23 = *(_OWORD *)&v45.value;
      *(_QWORD *)(v23 + 16) = epoch;
      *(_QWORD *)(v23 + 24) = v21;
      p_timescale = (CMTimeScale *)(v23 + 32);
    }
    *((_QWORD *)this + 20) = p_timescale;
    return PCMutex::unlock((PCMutex *)((char *)this + 176));
  }
  return result;
}

void sub_1B2C9D118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::deleteKeypointAt(OZChannelBlindData *this, const CMTime *a2)
{
  PCMutex *v4;
  __int128 *Keyframe;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  CMTime v12;
  char *v13;
  char v14;

  v4 = (PCMutex *)((char *)this + 176);
  v13 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  v14 = 1;
  memset(&v12, 0, sizeof(v12));
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, const CMTime *))(*(_QWORD *)this + 328))(&v12, this, a2);
  *((_BYTE *)this + 336) = 1;
  Keyframe = OZChannelBlindData::findKeyframe(this, &v12, 0);
  v6 = (__int128 *)*((_QWORD *)this + 20);
  if (v6 != Keyframe)
  {
    if ((__int128 *)((char *)v6 - *((_QWORD *)this + 19)) == (__int128 *)32)
    {

      *((_QWORD *)this + 36) = *((id *)Keyframe + 3);
    }

    v7 = (__int128 *)*((_QWORD *)this + 20);
    if (Keyframe + 2 != v7)
    {
      do
      {
        v8 = Keyframe + 2;
        *Keyframe = Keyframe[2];
        v9 = *((_QWORD *)Keyframe + 7);
        *((_QWORD *)Keyframe + 2) = *((_QWORD *)Keyframe + 6);
        *((_QWORD *)Keyframe + 3) = v9;
        v10 = Keyframe + 4;
        Keyframe += 2;
      }
      while (v10 != v7);
      Keyframe = v8;
    }
    *((_QWORD *)this + 20) = Keyframe;
    OZChannel::deleteKeypointAt((OZChannel *)this, a2);
  }
  return PCMutex::unlock(v4);
}

void sub_1B2C9D268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::previousKeypoint(OZChannelBlindData *this, CMTime *a2)
{
  PCMutex *v4;
  uint64_t v5;
  CMTimeEpoch v6;
  __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  __int128 v11;
  int32_t v12;
  uint64_t v13;
  CMTime v15;
  PCMutex *v16;
  char v17;
  CMTime time2;
  CMTime time1;

  v4 = (PCMutex *)((char *)this + 176);
  v16 = (PCMutex *)((char *)this + 176);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  v17 = 1;
  memset(&v15, 0, sizeof(v15));
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, CMTime *))(*(_QWORD *)this + 328))(&v15, this, a2);
  v5 = *((_QWORD *)this + 19);
  if (*((_QWORD *)this + 20) == v5)
    goto LABEL_14;
  time1 = v15;
  v6 = *(_QWORD *)(v5 + 16);
  *(_OWORD *)&time2.value = *(_OWORD *)v5;
  time2.epoch = v6;
  if (CMTimeCompare(&time1, &time2) < 1)
    goto LABEL_14;
  v7 = (__int128 *)*((_QWORD *)this + 19);
  v8 = *((_QWORD *)this + 20) - (_QWORD)v7;
  if (!v8)
    goto LABEL_15;
  v9 = v8 >> 5;
  do
  {
    v10 = &v7[2 * (v9 >> 1)];
    v11 = *v10;
    time1.epoch = *((_QWORD *)v10 + 2);
    *(_OWORD *)&time1.value = v11;
    time2 = v15;
    v12 = CMTimeCompare(&time1, &time2);
    if (v12 >= 0)
      v9 >>= 1;
    else
      v9 += ~(v9 >> 1);
    if (v12 < 0)
      v7 = v10 + 2;
  }
  while (v9);
  if (*((__int128 **)this + 19) == v7)
  {
LABEL_14:
    LOBYTE(v8) = 0;
LABEL_15:
    v13 = 0;
    if (!v4)
      return v13;
    goto LABEL_16;
  }
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, __int128 *))(*(_QWORD *)this + 336))(&time1, this, v7 - 2);
  *a2 = time1;
  v4 = v16;
  LOBYTE(v8) = v17 == 0;
  v13 = 1;
  if (!v16)
    return v13;
LABEL_16:
  if ((v8 & 1) == 0)
    PCMutex::unlock(v4);
  return v13;
}

void sub_1B2C9D404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::nextKeypoint(OZChannelBlindData *this, CMTime *a2)
{
  PCMutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  CMTimeEpoch v9;
  uint64_t v10;
  CMTime v12;
  PCMutex *v13;
  char v14;
  CMTime time2;
  CMTime time1;

  v4 = (PCMutex *)((char *)this + 176);
  v13 = (PCMutex *)((char *)this + 176);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  v14 = 1;
  memset(&v12, 0, sizeof(v12));
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, CMTime *))(*(_QWORD *)this + 328))(&v12, this, a2);
  v5 = *((_QWORD *)this + 19);
  v6 = *((_QWORD *)this + 20) - v5;
  if (v6)
  {
    v7 = v6 >> 5;
    do
    {
      v8 = v5 + 32 * (v7 >> 1);
      time1 = v12;
      v9 = *(_QWORD *)(v8 + 16);
      *(_OWORD *)&time2.value = *(_OWORD *)v8;
      time2.epoch = v9;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        v7 >>= 1;
      }
      else
      {
        v5 = v8 + 32;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
    if (v5 == *((_QWORD *)this + 20))
    {
      v10 = 0;
      LOBYTE(v6) = 0;
      if (!v4)
        return v10;
    }
    else
    {
      (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, uint64_t))(*(_QWORD *)this + 336))(&time1, this, v5);
      *a2 = time1;
      v4 = v13;
      LOBYTE(v6) = v14 == 0;
      v10 = 1;
      if (!v13)
        return v10;
    }
  }
  else
  {
    v10 = 0;
    if (!v4)
      return v10;
  }
  if ((v6 & 1) == 0)
    PCMutex::unlock(v4);
  return v10;
}

void sub_1B2C9D578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::visibleKeypoints@<X0>(OZChannelBlindData *this@<X0>, CMTimeRange *a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  PCMutex *v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  CMTimeFlags v12;
  CMTimeEpoch v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  __int128 v58;
  PCMutex *v60;
  uint64_t v61;
  CMTime v62;
  CMTime v63;
  __int128 v64;
  uint64_t v65;
  CMTimeValue v66;
  CMTimeScale v67;
  CMTimeFlags v68;
  CMTimeEpoch v69;
  CMTime time;
  CMTimeRange v71;
  CMTime time2;
  CMTime time1;
  CMTimeRange range;
  CMTime v75;
  CMTimeRange v76;
  char *v77;
  char v78;
  CMTimeValue v79;
  CMTimeScale v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v8 = (PCMutex *)((char *)this + 176);
  v77 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  v78 = 1;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v9 = *(_OWORD *)&a2->start.epoch;
  *(_OWORD *)&v76.start.value = *(_OWORD *)&a2->start.value;
  *(_OWORD *)&v76.start.epoch = v9;
  *(_OWORD *)&v76.duration.timescale = *(_OWORD *)&a2->duration.timescale;
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, CMTimeRange *))(*(_QWORD *)this + 328))(&v75, this, a2);
  v76.start = v75;
  std::vector<CMTime>::reserve((void **)a4, (uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 5);
  v60 = v8;
  memset(&v75, 0, sizeof(v75));
  range = v76;
  CMTimeRangeGetEnd(&v75, &range);
  v10 = *((_QWORD *)this + 19);
  if (v10 != *((_QWORD *)this + 20))
  {
    v11 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
    v61 = (uint64_t)(a4 + 2);
    while (1)
    {
      v79 = *(_QWORD *)v10;
      v12 = *(_DWORD *)(v10 + 12);
      v80 = *(_DWORD *)(v10 + 8);
      v13 = *(_QWORD *)(v10 + 16);
      time1.timescale = v80;
      time1.flags = v12;
      time1.epoch = v13;
      time2 = v75;
      time1.value = v79;
      if (CMTimeCompare(&time1, &time2) < 0)
        LOBYTE(v11) = v12;
      v71 = v76;
      time.value = v79;
      time.timescale = v80;
      time.flags = v12;
      time.epoch = v13;
      if (CMTimeRangeContainsTime(&v71, &time))
      {
        if (a3 && (v11 & 1) != 0)
        {
          v66 = v79;
          v67 = v80;
          v68 = v12;
          v69 = v13;
          (*(void (**)(__int128 *__return_ptr, OZChannelBlindData *, CMTimeValue *))(*(_QWORD *)this + 336))(&v64, this, &v66);
          v15 = a4[1];
          v14 = a4[2];
          if (v15 >= v14)
          {
            v18 = 0xAAAAAAAAAAAAAAABLL * ((v15 - *a4) >> 3);
            v19 = v18 + 1;
            if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v20 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3);
            if (2 * v20 > v19)
              v19 = 2 * v20;
            if (v20 >= 0x555555555555555)
              v21 = 0xAAAAAAAAAAAAAAALL;
            else
              v21 = v19;
            if (v21)
              v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v61, v21);
            else
              v22 = 0;
            v23 = &v22[24 * v18];
            v24 = v64;
            *((_QWORD *)v23 + 2) = v65;
            *(_OWORD *)v23 = v24;
            v26 = *a4;
            v25 = a4[1];
            v27 = v23;
            if (v25 != *a4)
            {
              do
              {
                v28 = *(_OWORD *)(v25 - 24);
                *((_QWORD *)v27 - 1) = *((_QWORD *)v25 - 1);
                *(_OWORD *)(v27 - 24) = v28;
                v27 -= 24;
                v25 -= 24;
              }
              while (v25 != v26);
              v25 = *a4;
            }
            v17 = v23 + 24;
            *a4 = v27;
            a4[1] = v23 + 24;
            a4[2] = &v22[24 * v21];
            if (v25)
              operator delete(v25);
          }
          else
          {
            v16 = v64;
            *((_QWORD *)v15 + 2) = v65;
            *(_OWORD *)v15 = v16;
            v17 = v15 + 24;
          }
          a4[1] = v17;
        }
        v66 = v79;
        v67 = v80;
        v68 = v12;
        v69 = v13;
        (*(void (**)(__int128 *__return_ptr, OZChannelBlindData *, CMTimeValue *))(*(_QWORD *)this + 336))(&v64, this, &v66);
        v30 = a4[1];
        v29 = a4[2];
        if (v30 >= v29)
        {
          v33 = 0xAAAAAAAAAAAAAAABLL * ((v30 - *a4) >> 3);
          v34 = v33 + 1;
          if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v35 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a4) >> 3);
          if (2 * v35 > v34)
            v34 = 2 * v35;
          if (v35 >= 0x555555555555555)
            v36 = 0xAAAAAAAAAAAAAAALL;
          else
            v36 = v34;
          if (v36)
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v61, v36);
          else
            v37 = 0;
          v38 = &v37[24 * v33];
          v39 = v64;
          *((_QWORD *)v38 + 2) = v65;
          *(_OWORD *)v38 = v39;
          v41 = *a4;
          v40 = a4[1];
          v42 = v38;
          if (v40 != *a4)
          {
            do
            {
              v43 = *(_OWORD *)(v40 - 24);
              *((_QWORD *)v42 - 1) = *((_QWORD *)v40 - 1);
              *(_OWORD *)(v42 - 24) = v43;
              v42 -= 24;
              v40 -= 24;
            }
            while (v40 != v41);
            v40 = *a4;
          }
          v32 = v38 + 24;
          *a4 = v42;
          a4[1] = v38 + 24;
          a4[2] = &v37[24 * v36];
          if (v40)
            operator delete(v40);
        }
        else
        {
          v31 = v64;
          *((_QWORD *)v30 + 2) = v65;
          *(_OWORD *)v30 = v31;
          v32 = v30 + 24;
        }
        a4[1] = v32;
      }
      v63.value = v79;
      v63.timescale = v80;
      v63.flags = v12;
      v63.epoch = v13;
      v62 = v75;
      if (CMTimeCompare(&v63, &v62) >= 1)
        break;
      v10 += 32;
      if (v10 == *((_QWORD *)this + 20))
        return PCMutex::unlock(v60);
    }
    if (a3 && (v12 & 1) != 0)
    {
      v66 = v79;
      v67 = v80;
      v68 = v12;
      v69 = v13;
      (*(void (**)(__int128 *__return_ptr, OZChannelBlindData *, CMTimeValue *))(*(_QWORD *)this + 336))(&v64, this, &v66);
      v45 = a4[1];
      v44 = a4[2];
      if (v45 >= v44)
      {
        v48 = 0xAAAAAAAAAAAAAAABLL * ((v45 - *a4) >> 3);
        v49 = v48 + 1;
        if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v50 = 0xAAAAAAAAAAAAAAABLL * ((v44 - *a4) >> 3);
        if (2 * v50 > v49)
          v49 = 2 * v50;
        if (v50 >= 0x555555555555555)
          v51 = 0xAAAAAAAAAAAAAAALL;
        else
          v51 = v49;
        if (v51)
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v61, v51);
        else
          v52 = 0;
        v53 = &v52[24 * v48];
        v54 = &v52[24 * v51];
        v55 = v64;
        *((_QWORD *)v53 + 2) = v65;
        *(_OWORD *)v53 = v55;
        v47 = v53 + 24;
        v57 = *a4;
        v56 = a4[1];
        if (v56 != *a4)
        {
          do
          {
            v58 = *(_OWORD *)(v56 - 24);
            *((_QWORD *)v53 - 1) = *((_QWORD *)v56 - 1);
            *(_OWORD *)(v53 - 24) = v58;
            v53 -= 24;
            v56 -= 24;
          }
          while (v56 != v57);
          v56 = *a4;
        }
        *a4 = v53;
        a4[1] = v47;
        a4[2] = v54;
        if (v56)
          operator delete(v56);
      }
      else
      {
        v46 = v64;
        *((_QWORD *)v45 + 2) = v65;
        *(_OWORD *)v45 = v46;
        v47 = v45 + 24;
      }
      a4[1] = v47;
    }
  }
  return PCMutex::unlock(v60);
}

void sub_1B2C9DB34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  PCLockSentry<PCMutex>::~PCLockSentry(v2 - 136);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::moveKeypointTo@<X0>(OZChannelBlindData *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  PCMutex *v12;
  __int128 *Keyframe;
  __int128 *v14;
  NSData *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  NSData *v19;
  uint64_t v21;
  CMTime v22;
  char *v23;
  char v24;

  v12 = (PCMutex *)((char *)this + 176);
  v23 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  v24 = 1;
  memset(&v22, 0, sizeof(v22));
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, const CMTime *))(*(_QWORD *)this + 328))(&v22, this, a2);
  *((_BYTE *)this + 336) = 1;
  Keyframe = OZChannelBlindData::findKeyframe(this, &v22, 0);
  v14 = (__int128 *)*((_QWORD *)this + 20);
  if (v14 != Keyframe)
  {
    v15 = (NSData *)*((_QWORD *)Keyframe + 3);
    if (Keyframe + 2 != v14)
    {
      do
      {
        v16 = Keyframe + 2;
        *Keyframe = Keyframe[2];
        v17 = *((_QWORD *)Keyframe + 7);
        *((_QWORD *)Keyframe + 2) = *((_QWORD *)Keyframe + 6);
        *((_QWORD *)Keyframe + 3) = v17;
        v18 = Keyframe + 4;
        Keyframe += 2;
      }
      while (v18 != v14);
      Keyframe = v16;
    }
    *((_QWORD *)this + 20) = Keyframe;
    v19 = OZChannelBlindData::decodeObjectFromData(this, v15);
    OZChannelBlindData::setPluginDataPtr(this, a3, v19, 0, 0, 1);

    OZChannel::moveKeypointTo((OZChannel *)this, a2, a3, a4, a5, (uint64_t)&v21);
  }
  *(_OWORD *)a6 = *(_OWORD *)&a3->value;
  *(_QWORD *)(a6 + 16) = a3->epoch;
  return PCMutex::unlock(v12);
}

void sub_1B2C9DCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::moveKeyframe(OZChannelBlindData *this, void *a2, const CMTime *a3, uint64_t a4, uint64_t a5)
{
  PCMutex *v10;
  __int128 *Keyframe;
  __int128 *v12;
  NSData *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 *v16;
  NSData *v17;
  uint64_t v18;
  CMTime v20;
  CMTime v21;
  char *v22;
  char v23;

  v10 = (PCMutex *)((char *)this + 176);
  v22 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  v23 = 1;
  v21 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v20 = *a3;
  if ((OZChannel::getKeyframe((OZChannel *)this, a2, &v21, 0) & 1) == 0
    || (*((_BYTE *)this + 336) = 1,
        Keyframe = OZChannelBlindData::findKeyframe(this, &v21, 0),
        v12 = (__int128 *)*((_QWORD *)this + 20),
        v12 == Keyframe))
  {
    v18 = 0;
  }
  else
  {
    v13 = (NSData *)*((_QWORD *)Keyframe + 3);
    if (Keyframe + 2 != v12)
    {
      do
      {
        v14 = Keyframe + 2;
        *Keyframe = Keyframe[2];
        v15 = *((_QWORD *)Keyframe + 7);
        *((_QWORD *)Keyframe + 2) = *((_QWORD *)Keyframe + 6);
        *((_QWORD *)Keyframe + 3) = v15;
        v16 = Keyframe + 4;
        Keyframe += 2;
      }
      while (v16 != v12);
      Keyframe = v14;
    }
    *((_QWORD *)this + 20) = Keyframe;
    v17 = OZChannelBlindData::decodeObjectFromData(this, v13);
    OZChannelBlindData::setPluginDataPtr(this, &v20, v17, 0, 0, a5);

    OZChannel::moveKeyframe((OZChannel *)this, a2, &v20, a4, a5);
    v18 = 1;
  }
  PCMutex::unlock(v10);
  return v18;
}

void sub_1B2C9DE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::getNumberOfKeyframes(OZChannelBlindData *this)
{
  return (*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 5;
}

uint64_t OZChannelBlindData::removeValue(OZChannelBlindData *this, const CMTime *a2)
{
  (*(void (**)(OZChannelBlindData *, const CMTime *))(*(_QWORD *)this + 608))(this, a2);
  return 1;
}

uint64_t OZChannelBlindData::removeAllValues(OZChannelBlindData *this, const CMTime *a2)
{
  return (*(uint64_t (**)(OZChannelBlindData *, _QWORD))(*(_QWORD *)this + 280))(this, 0);
}

uint64_t OZChannelBlindData::moveValue(OZChannelBlindData *this, const CMTime *a2, const CMTime *a3)
{
  _QWORD v4[3];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 616))(v4);
  return 1;
}

uint64_t OZChannelBlindData::setValueAndIgnoreRecordOption(OZChannelBlindData *this, const CMTime *a2)
{
  return (*(uint64_t (**)(OZChannelBlindData *, const CMTime *))(*(_QWORD *)this + 600))(this, a2);
}

id OZChannelBlindData::legacyEncodeObjectToData(OZChannelBlindData *this, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
  objc_msgSend(v3, "encodeObject:", a2);
  objc_msgSend(v3, "finishEncoding");
  v4 = (id)objc_msgSend(v3, "encodedData");

  return v4;
}

void sub_1B2C9DF6C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  __cxa_begin_catch(a1);

  if (*(_BYTE *)(v2 + 384))
  {
    v5 = (void *)objc_msgSend(objc_alloc(*(Class *)(v4 + 1784)), "initRequiringSecureCoding:", 0);
    objc_msgSend(v5, "encodeObject:", v1);
    objc_msgSend(v5, "finishEncoding");
    (id)objc_msgSend(v5, "encodedData");

  }
  __cxa_end_catch();
  JUMPOUT(0x1B2C9DF54);
}

void sub_1B2C9DFC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::legacyDecodeObjectFromData(OZChannelBlindData *this, NSData *a2)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingWithData:", a2);
  v3 = objc_msgSend(v2, "decodeObject");

  return v3;
}

void sub_1B2C9E02C(void *a1)
{
  PCString *v1;

  objc_begin_catch(a1);
  PCString::cf_str(v1 + 4);
  NSLog(CFSTR("Unable to unarchive data in %s for channel %@"));
  objc_end_catch();
  JUMPOUT(0x1B2C9E010);
}

void sub_1B2C9E05C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelBlindData::createOZChannelBlindDataInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelBlindDataInfo *v0;

  if (!OZChannelBlindData::_OZChannelBlindDataInfo)
  {
    v0 = (OZChannelBlindDataInfo *)operator new();
    OZChannelBlindDataInfo::OZChannelBlindDataInfo(v0);
    OZChannelBlindData::_OZChannelBlindDataInfo = (uint64_t)v0;
  }
}

void sub_1B2C9E0BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelBlindDataInfo::OZChannelBlindDataInfo(OZChannelBlindDataInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E6562318;
  *((_QWORD *)this + 10) = &unk_1E6562338;
}

void sub_1B2C9E144(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBlindData::createOZChannelBlindDataImpl(void)::{lambda(void)#1} &&>>()
{
  OZChannelBlindData::createOZChannelBlindDataImpl(void)::{lambda(void)#1}::operator()();
}

void OZChannelBlindData::createOZChannelBlindDataImpl(void)::{lambda(void)#1}::operator()()
{
  OZCurveInt *v0;
  OZChannelImpl *v1;

  if (!OZChannelBlindData::_OZChannelBlindDataImpl)
  {
    v0 = (OZCurveInt *)operator new();
    OZCurveInt::OZCurveInt(v0, 0.0);
    v1 = (OZChannelImpl *)operator new();
    OZChannelImpl::OZChannelImpl(v1, (OZCurve *)v0, 0.0, 1u, 1);
    OZChannelBlindData::_OZChannelBlindDataImpl = (uint64_t)v1;
    OZChannelImpl::setMin(v1, 0.0);
    OZChannelImpl::setMax((OZChannelImpl *)OZChannelBlindData::_OZChannelBlindDataImpl, 0.0);
  }
}

void sub_1B2C9E20C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void OZChannelTransformSwitch::OZChannelTransformSwitch(OZChannelTransformSwitch *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  TXParagraphStyleFolder_Factory *v6;
  OZFactoryBase *v7;
  TXParagraphStyleFolder_Factory *v8;
  OZFactoryBase *v9;
  TXParagraphStyleFolder_Factory *v10;
  OZFactoryBase *v11;
  PCString v12;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_1E6562390;
  *((_QWORD *)v6 + 2) = &unk_1E65626D8;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Position"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 136), &v12, (OZChannelFolder *)this, 1u, 2u, 0, 0);
  PCString::~PCString(&v12);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Scale"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 288), &v12, (OZChannelFolder *)this, 2u, 2u, 0, 0);
  PCString::~PCString(&v12);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Rotation"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), &v12, (OZChannelFolder *)this, 3u, 2u, 0, 0);
  PCString::~PCString(&v12);
}

void sub_1B2C9E360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelBool *v11;
  OZChannelBool *v12;

  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelTransformSwitch::OZChannelTransformSwitch(OZChannelTransformSwitch *this, const OZChannelTransformSwitch *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E6562390;
  *(_QWORD *)(v5 + 16) = &unk_1E65626D8;
  OZChannelBool::OZChannelBool((OZChannelBool *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
}

void sub_1B2C9E444(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannelBool *v2;
  OZChannelBool *v3;

  OZChannelBool::~OZChannelBool(v3);
  OZChannelBool::~OZChannelBool(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

OZChannelTransformSwitch *OZChannelTransformSwitch::clone(OZChannelTransformSwitch *this)
{
  OZChannelTransformSwitch *v2;

  v2 = (OZChannelTransformSwitch *)operator new();
  OZChannelTransformSwitch::OZChannelTransformSwitch(v2, this, 0);
  return v2;
}

void sub_1B2C9E4C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void OZChannelTransformSwitch::copy(OZChannelTransformSwitch *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
}

const __CFString *OZChannelTransformSwitch::getObjCWrapperName(OZChannelTransformSwitch *this)
{
  return CFSTR("CHChannelTransformSelector");
}

void OZChannelTransformSwitch::~OZChannelTransformSwitch(OZChannelTransformSwitch *this)
{
  OZChannelTransformSwitch::~OZChannelTransformSwitch(this);
  JUMPOUT(0x1B5E29170);
}

{
  *(_QWORD *)this = &off_1E6562390;
  *((_QWORD *)this + 2) = &unk_1E65626D8;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 440));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 288));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 136));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

void `non-virtual thunk to'OZChannelTransformSwitch::~OZChannelTransformSwitch(OZChannelTransformSwitch *this)
{
  OZChannelTransformSwitch::~OZChannelTransformSwitch((OZChannelTransformSwitch *)((char *)this - 16));
}

{
  OZChannelTransformSwitch::~OZChannelTransformSwitch((OZChannelTransformSwitch *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void sub_1B2C9E6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C40FB5DE3D8);
  _Unwind_Resume(a1);
}

void sub_1B2C9E8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C40C7C6813ELL);
  _Unwind_Resume(a1);
}

void sub_1B2C9E9F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_1B2C9EC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  CGColorSpace *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, CGColorSpace *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va1);
  _Unwind_Resume(a1);
}

void sub_1B2C9F0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void sub_1B2C9F5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

void OZChannelVaryingFolder::OZChannelVaryingFolder(OZChannelVaryingFolder *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  uint64_t v6;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, a6, 0);
  *(_QWORD *)v6 = &off_1E6562748;
  *(_QWORD *)(v6 + 16) = &unk_1E6562A20;
  *(_QWORD *)(v6 + 56) |= 0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v6);
}

void sub_1B2C9FCBC(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVaryingFolder::OZChannelVaryingFolder(OZChannelVaryingFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(_QWORD *)v4 = &off_1E6562748;
  *(_QWORD *)(v4 + 16) = &unk_1E6562A20;
  *(_QWORD *)(v4 + 56) |= 0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v4);
}

void sub_1B2C9FD1C(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVaryingFolder::OZChannelVaryingFolder(OZChannelVaryingFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  OZChannelFolder *v11;

  Instance = (OZFactory *)OZChannelVaryingFolder_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(_QWORD *)this = &off_1E6562748;
  *((_QWORD *)this + 2) = &unk_1E6562A20;
  *((_QWORD *)this + 7) |= 0x10000uLL;
  OZChannelFolder::saveStateAsDefault(v11);
}

void sub_1B2C9FDBC(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVaryingFolder::OZChannelVaryingFolder(OZChannelVaryingFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v5;
  void **var0;
  _QWORD *v7;
  _QWORD *v8;
  OZChannelBase *v9;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3);
  *v5 = &off_1E6562748;
  v5[2] = &unk_1E6562A20;
  var0 = a2[1].var0;
  if (var0)
  {
    v7 = *var0;
    v8 = var0[1];
    while (v7 != v8)
    {
      v9 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 248))(*v7);
      v9->var6 = (OZChannelFolder *)this;
      OZChannelFolder::push_back((OZChannelFolder *)this, v9);
      ++v7;
    }
  }
}

void sub_1B2C9FE54(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVaryingFolder::~OZChannelVaryingFolder(OZChannelFolder *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)this = &off_1E6562748;
  *((_QWORD *)this + 2) = &unk_1E6562A20;
  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *(_QWORD **)v2;
    v4 = *(_QWORD **)(v2 + 8);
    while (v3 != v4)
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      ++v3;
    }
  }
  OZChannelFolder::~OZChannelFolder(this);
}

{
  OZChannelVaryingFolder::~OZChannelVaryingFolder(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelVaryingFolder::~OZChannelVaryingFolder(OZChannelVaryingFolder *this)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelFolder *)((char *)this - 16));
}

{
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

OZChannelBase *OZChannelVaryingFolder::resetToDefault(OZChannelVaryingFolder *this)
{
  OZChannelBase *result;
  OZChannelBase ***v3;
  OZChannelBase **v4;
  OZChannelBase **v5;

  (*(void (**)(OZChannelVaryingFolder *))(*(_QWORD *)this + 352))(this);
  result = (OZChannelBase *)(*(uint64_t (**)(OZChannelVaryingFolder *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  v3 = (OZChannelBase ***)*((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        OZChannelBase::unregisterParent(*v4, (*v4)->var6);
        result = *v4;
        if (*v4)
          result = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))result->var0 + 1))(result);
        *v4++ = 0;
      }
      while (v4 != v5);
      v3 = (OZChannelBase ***)*((_QWORD *)this + 14);
      v4 = *v3;
    }
    v3[1] = v4;
  }
  return result;
}

OZChannelVaryingFolder *OZChannelVaryingFolder::clone(const OZChannelBase *this)
{
  OZChannelVaryingFolder *v2;

  v2 = (OZChannelVaryingFolder *)operator new();
  OZChannelVaryingFolder::OZChannelVaryingFolder(v2, this, 0);
  return v2;
}

void sub_1B2CA0008(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZChannelVaryingFolder::copy(OZChannelFolder *this, const OZChannelBase *a2)
{
  const OZChannelVaryingFolder *v4;

  OZChannelFolder::copy(this, a2);
  if (a2)
  else
    v4 = 0;
  OZChannelVaryingFolder::copyDescendants(this, v4);
}

void OZChannelVaryingFolder::copyDescendants(OZChannelFolder *this, const OZChannelVaryingFolder *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  OZChannelBase *v8;
  uint64_t v9;
  void *v10;

  (*(void (**)(OZChannelFolder *, _QWORD))(*(_QWORD *)this + 288))(this, 0);
  v4 = (uint64_t **)*((_QWORD *)a2 + 14);
  if (v4)
  {
    v5 = *v4;
    v6 = v4[1];
    while (v5 != v6)
    {
      v7 = *v5++;
      v8 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 248))(v7);
      v8->var6 = this;
      OZChannelFolder::push_back(this, v8);
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 14);
    if (v9)
    {
      v10 = *(void **)v9;
      if (*(_QWORD *)v9)
      {
        *(_QWORD *)(v9 + 8) = v10;
        operator delete(v10);
      }
      MEMORY[0x1B5E29170](v9, 0x80C40D6874129);
    }
    *((_QWORD *)this + 14) = 0;
  }
}

void OZChannelVaryingFolder::assign(OZChannelBase *this, const OZChannelBase *a2)
{
  const OZChannelVaryingFolder *v4;

  OZChannelBase::assign(this, a2);
  if (a2)
  else
    v4 = 0;
  OZChannelVaryingFolder::copyDescendants((OZChannelFolder *)this, v4);
}

uint64_t OZChannelVaryingFolder::allowsAssignment(OZChannelBase *this, const OZChannelBase *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  void **var0;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;

  if (!lpsrc)
    return 0;
  if (result)
  {
    v4 = result;
    result = OZChannelBase::allowsAssignment(this, (const OZChannelBase *)result);
    if ((_DWORD)result)
    {
      var0 = this[1].var0;
      if (var0 && (v6 = *(_QWORD **)(v4 + 112)) != 0)
      {
        v7 = (char *)*var0;
        v8 = (char *)var0[1];
        v9 = v6[1];
        if (*v6 == v9 || v7 == v8)
        {
          return 1;
        }
        else
        {
          v11 = v7 + 8;
          v12 = *v6 + 8;
          do
          {
            result = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v11 - 1) + 264))(*((_QWORD *)v11 - 1), *(_QWORD *)(v12 - 8));
            if ((_DWORD)result)
              v13 = v12 == v9;
            else
              v13 = 1;
            v14 = v13 || v11 == v8;
            v11 += 8;
            v12 += 8;
          }
          while (!v14);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

OZChannelFolder *OZChannelVaryingFolder::setValue(OZChannelFolder *this, const OZChannelBase *lpsrc)
{
  {
    return (OZChannelFolder *)OZChannelFolder::operator=((uint64_t)this);
  }
  else
  {
    return OZChannelFolder::setValue(this, lpsrc);
  }
}

void *OZChannelVaryingFolder::undoWillReplace(OZChannelBase *this)
{
  void *result;

  result = OZChannelBase::getChannelRootBase(this);
  if (result)
    return (void *)(*(uint64_t (**)(void *, OZChannelBase *))(*(_QWORD *)result + 768))(result, this);
  return result;
}

void *OZChannelVaryingFolder::undoDidReplace(OZChannelBase *this)
{
  void *result;

  result = OZChannelBase::getChannelRootBase(this);
  if (result)
    return (void *)(*(uint64_t (**)(void *, OZChannelBase *))(*(_QWORD *)result + 760))(result, this);
  return result;
}

uint64_t OZChannelVaryingFolder::parseBegin(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  uint64_t v4;

  (*(void (**)(OZChannelFolder *))(*(_QWORD *)this + 352))(this);
  v4 = OZChannelFolder::parseBegin(this, a2);
  (*(void (**)(OZChannelFolder *, _QWORD))(*(_QWORD *)this + 288))(this, 0);
  return v4;
}

uint64_t `non-virtual thunk to'OZChannelVaryingFolder::parseBegin(OZChannelVaryingFolder *this, PCSerializerReadStream *a2)
{
  OZChannelFolder *v3;
  uint64_t v4;

  v3 = (OZChannelFolder *)((char *)this - 16);
  (*(void (**)(char *))(*((_QWORD *)this - 2) + 352))((char *)this - 16);
  v4 = OZChannelFolder::parseBegin(v3, a2);
  (*(void (**)(OZChannelFolder *, _QWORD))(*(_QWORD *)v3 + 288))(v3, 0);
  return v4;
}

uint64_t OZChannelVaryingFolder::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  (*(void (**)(OZChannelFolder *))(*(_QWORD *)this + 360))(this);
  return OZChannelFolder::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'OZChannelVaryingFolder::parseEnd(OZChannelVaryingFolder *this, PCSerializerReadStream *a2)
{
  OZChannelFolder *v3;

  v3 = (OZChannelFolder *)((char *)this - 16);
  (*(void (**)(char *))(*((_QWORD *)this - 2) + 360))((char *)this - 16);
  return OZChannelFolder::parseEnd(v3, a2);
}

uint64_t OZChannelVaryingFolder::writeBody(OZChannelFolder *this, PCSerializerWriteStream *a2, BOOL a3, int a4)
{
  return OZChannelFolder::writeBody(this, a2, 1, a4, 1);
}

uint64_t `non-virtual thunk to'OZChannelVaryingFolder::writeBody(OZChannelVaryingFolder *this, PCSerializerWriteStream *a2, BOOL a3, int a4)
{
  return OZChannelFolder::writeBody((OZChannelFolder *)((char *)this - 16), a2, 1, a4, 1);
}

const __CFString *OZChannelVaryingFolder::getObjCWrapperName(OZChannelVaryingFolder *this)
{
  return CFSTR("CHChannelVaryingFolder");
}

void sub_1B2CA0538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  uint64_t v12;

  PCString::~PCString(&a12);
  MEMORY[0x1B5E29170](v12, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

void OZChannelVertexFolder::OZChannelVertexFolder(OZChannelVertexFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  OZChannelFolder *v11;

  Instance = (OZFactory *)OZChannelVertexFolder_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(_QWORD *)this = &off_1E6562A90;
  *((_QWORD *)this + 2) = &unk_1E6562D68;
  *((_QWORD *)this + 7) |= 0x10000uLL;
  *((_QWORD *)this + 16) = 0;
  OZChannelFolder::saveStateAsDefault(v11);
}

void sub_1B2CA07AC(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVertexFolder::OZChannelVertexFolder(OZChannelVertexFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(_QWORD *)v4 = &off_1E6562A90;
  *(_QWORD *)(v4 + 16) = &unk_1E6562D68;
  *(_QWORD *)(v4 + 56) |= 0x10000uLL;
  *(_QWORD *)(v4 + 128) = 0;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v4);
}

void sub_1B2CA0814(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVertexFolder::OZChannelVertexFolder(OZChannelVertexFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  uint64_t v3;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3);
  *(_QWORD *)v3 = &off_1E6562A90;
  *(_QWORD *)(v3 + 16) = &unk_1E6562D68;
  *(_QWORD *)(v3 + 56) |= 0x10000uLL;
  *(_QWORD *)(v3 + 128) = 0;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v3);
}

void sub_1B2CA0878(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVertexFolder::~OZChannelVertexFolder(OZChannelVertexFolder *this)
{
  *(_QWORD *)this = &off_1E6562A90;
  *((_QWORD *)this + 2) = &unk_1E6562D68;
  *((_QWORD *)this + 7) |= 0x10000uLL;
  *((_QWORD *)this + 16) = 0;
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  *(_QWORD *)this = &off_1E6562A90;
  *((_QWORD *)this + 2) = &unk_1E6562D68;
  *((_QWORD *)this + 7) |= 0x10000uLL;
  *((_QWORD *)this + 16) = 0;
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelVertexFolder::~OZChannelVertexFolder(OZChannelVertexFolder *this)
{
  *(_QWORD *)this = &unk_1E6562D68;
  *((_QWORD *)this + 5) |= 0x10000uLL;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this - 2) = &off_1E6562A90;
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
}

{
  *(_QWORD *)this = &unk_1E6562D68;
  *((_QWORD *)this + 5) |= 0x10000uLL;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this - 2) = &off_1E6562A90;
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelVertexFolder::writeHeader(OZFactory **this, OZFactory *a2, int a3)
{
  char v3;
  int v6;
  uint64_t v7;
  const OZFactory *v8;
  uint64_t v9;

  v3 = a3;
  if (a3 && OZFactory::fileRefID(this[1], a2))
    v6 = (*(uint64_t (**)(OZFactory *))(*(_QWORD *)a2 + 232))(a2) ^ 1;
  else
    v6 = 0;
  TXSequenceChannels::pushChannelIntoChannelList((TXSequenceChannels *)a2, (OZChannelBase *)&OZChannelVertexFolderScope);
  (*(void (**)(OZFactory *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 122);
  v7 = 216;
  if (v6)
    v7 = 200;
  (*(void (**)(OZFactory *, uint64_t, char *))(*(_QWORD *)a2 + v7))(a2, 110, (char *)this + 32);
  (*(void (**)(OZFactory *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, *((unsigned int *)this + 6));
  if ((v3 & 1) == 0)
    OZChannelBase::writeFlags((uint64_t)this, (TXSequenceChannels *)a2, 0);
  if (v6 && ((*(uint64_t (**)(OZFactory *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    v9 = OZFactory::fileRefID(this[1], v8);
    (*(void (**)(OZFactory *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v9);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZChannelVertexFolder::writeHeader(OZFactory **this, OZFactory *a2, int a3)
{
  return OZChannelVertexFolder::writeHeader(this - 2, a2, a3);
}

const __CFString *OZChannelVertexFolder::getObjCWrapperName(OZChannelVertexFolder *this)
{
  return CFSTR("CHChannelVertexFolder");
}

OZChannelBase *OZChannelVertexFolder::setVertexSaveWhenAtDefaultState(OZChannelFolder *this)
{
  OZChannelBase *Descendant;

  Descendant = (OZChannelBase *)OZChannelFolder::getDescendant(this, 2);
  return OZChannelBase::setFlag(Descendant, 0x100000000, 0);
}

uint64_t OZChannelVertexFolder::isVertexSaveWhenAtDefaultState(OZChannelFolder *this)
{
  uint64_t Descendant;

  Descendant = OZChannelFolder::getDescendant(this, 2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)Descendant + 144))(Descendant);
}

void sub_1B2CA0B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C40C94B7CBALL);
  _Unwind_Resume(a1);
}

void sub_1B2CA0D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C40E74858DCLL);
  _Unwind_Resume(a1);
}

void sub_1B2CA0E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C40C9B629ABLL);
  _Unwind_Resume(a1);
}

void sub_1B2CA0FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C408C14BFF9);
  _Unwind_Resume(a1);
}

void OZCompoundChannel::OZCompoundChannel(OZCompoundChannel *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, BOOL a7, unsigned int a8)
{
  uint64_t v9;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, a6, a8);
  *(_QWORD *)v9 = &off_1E6562DD8;
  *(_QWORD *)(v9 + 16) = &unk_1E6563120;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)v9, 15);
  (*(void (**)(OZCompoundChannel *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2CA1060(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZCompoundChannel::OZCompoundChannel(OZCompoundChannel *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  _QWORD *v5;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5);
  *v5 = &off_1E6562DD8;
  v5[2] = &unk_1E6563120;
}

void OZCompoundChannel::OZCompoundChannel(OZCompoundChannel *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3);
  *v3 = &off_1E6562DD8;
  v3[2] = &unk_1E6563120;
}

void `non-virtual thunk to'OZCompoundChannel::~OZCompoundChannel(OZCompoundChannel *this)
{
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
}

{
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZCompoundChannel::~OZCompoundChannel(OZChannelFolder *this)
{
  OZChannelFolder::~OZChannelFolder(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZCompoundChannel::getObjCWrapperName(OZCompoundChannel *this)
{
  return 0;
}

uint64_t OZCompoundChannel::clone(const OZChannelBase *this)
{
  uint64_t v2;

  v2 = operator new();
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)v2, this, 0);
  *(_QWORD *)v2 = &off_1E6562DD8;
  *(_QWORD *)(v2 + 16) = &unk_1E6563120;
  return v2;
}

void sub_1B2CA1180(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40441104D3);
  _Unwind_Resume(a1);
}

BOOL OZCompoundChannel::compare(OZChannelFolder *this, const OZChannelBase *lpsrc)
{
  OZChannelFolder *v4;
  OZChannelFolder *v5;
  _BOOL4 v6;
  _BOOL8 result;

  result = 0;
  if (lpsrc)
  {
    if (v4)
    {
      v5 = v4;
      v6 = OZChannelFolder::testFoldFlag(this, 0x100000);
      if (v6 == OZChannelFolder::testFoldFlag(v5, 0x100000) && (OZChannelFolder::compare(this, lpsrc) & 1) != 0)
        return 1;
    }
  }
  return result;
}

void OZCompoundChannel::copy(OZChannelFolder *this, const OZChannelBase *a2)
{
  OZChannelFolder *v4;

  OZChannelFolder::copy(this, a2);
  if (a2)
  {
    if (v4)
    {
      if (OZChannelFolder::testFoldFlag(v4, 0x100000))
        *((_DWORD *)this + 30) |= 0x100000u;
    }
  }
}

uint64_t OZCompoundChannel::hasOnlyOneKeypointAt(OZCompoundChannel *this, const CMTime *a2)
{
  return (*(uint64_t (**)(OZCompoundChannel *, const CMTime *, _QWORD))(*(_QWORD *)this + 568))(this, a2, 0);
}

uint64_t OZCompoundChannel::numberOfKeypointsAt(OZCompoundChannel *this, const CMTime *a2)
{
  return (*(uint64_t (**)(OZCompoundChannel *, const CMTime *, _QWORD))(*(_QWORD *)this + 568))(this, a2, 0);
}

uint64_t OZCompoundChannel::setValue(OZCompoundChannel *this, unsigned int a2, const CMTime *a3, double a4)
{
  void *v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;

  (*(void (**)(void *, const CMTime *, _QWORD, double))(*(_QWORD *)v8 + 712))(v8, a3, 0, a4);
  result = OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000);
  if ((_DWORD)result)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 14);
    v11 = *v10;
    if (v10[1] != *v10)
    {
      LODWORD(v12) = 0;
      do
      {
        if (a2 != (_DWORD)v12)
        {
          result = (*(uint64_t (**)(void *, const CMTime *))(*(_QWORD *)v13 + 736))(v13, a3);
          v10 = (uint64_t *)*((_QWORD *)this + 14);
          v11 = *v10;
        }
        v12 = (v12 + 1);
      }
      while (v12 < (v10[1] - v11) >> 3);
    }
  }
  return result;
}

uint64_t OZCompoundChannel::setValue(OZChannelFolder *this, unsigned int a2, const CMTime *a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void *v11;
  void *v12;

  result = OZChannelFolder::testFoldFlag(this, 0x100000);
  v7 = (uint64_t *)*((_QWORD *)this + 14);
  if ((_DWORD)result)
  {
    v8 = *v7;
    if (*(_QWORD *)(*((_QWORD *)this + 14) + 8) != v8)
    {
      v9 = 0;
      v10 = 1;
      do
      {
        result = (*(uint64_t (**)(void *, const CMTime *))(*(_QWORD *)v11 + 736))(v11, a3);
        v9 = v10;
        v8 = **((_QWORD **)this + 14);
        ++v10;
      }
      while (v9 < (*(_QWORD *)(*((_QWORD *)this + 14) + 8) - v8) >> 3);
    }
  }
  else
  {
    return (*(uint64_t (**)(void *, const CMTime *))(*(_QWORD *)v12 + 736))(v12, a3);
  }
  return result;
}

OZChannelFolder *OZCompoundChannel::setValue(OZChannelFolder *this, OZChannel *a2, const CMTime *a3, double a4)
{
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  OZChannel *v11;

  if (!OZChannelFolder::testFoldFlag(this, 0x100000))
    return (OZChannelFolder *)(*((uint64_t (**)(OZChannel *, const CMTime *, _QWORD, double))a2->var0 + 89))(a2, a3, 0, a4);
  OZChannelFolder::resetFoldFlag(this, 0x100000);
  v8 = **((_QWORD **)this + 14);
  if (*(_QWORD *)(*((_QWORD *)this + 14) + 8) != v8)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      v11 = *(OZChannel **)(v8 + 8 * v9);
      if (v11)
      if (v11 == a2)
        (*((void (**)(OZChannel *, const CMTime *, _QWORD, double))a2->var0 + 89))(a2, a3, 0, a4);
      else
        (*((void (**)(OZChannel *, const CMTime *))v11->var0 + 92))(v11, a3);
      v9 = v10;
      v8 = **((_QWORD **)this + 14);
      ++v10;
    }
    while (v9 < (*(_QWORD *)(*((_QWORD *)this + 14) + 8) - v8) >> 3);
  }
  return OZChannelFolder::setFoldFlag(this, 0x100000);
}

OZChannelFolder *OZCompoundChannel::compoundAddKeypointAt(OZChannelFolder *this, OZChannel *a2, const CMTime *a3, char a4)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  if (!OZChannelFolder::testFoldFlag(this, 0x100000) && (a4 & 1) == 0)
    return (OZChannelFolder *)(*((uint64_t (**)(OZChannel *, const CMTime *))a2->var0 + 75))(a2, a3);
  OZChannelFolder::resetFoldFlag(this, 0x100000);
  v9 = **((_QWORD **)this + 14);
  if (*(_QWORD *)(*((_QWORD *)this + 14) + 8) != v9)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      (*(void (**)(_QWORD, const CMTime *))(**(_QWORD **)(v9 + 8 * v10) + 600))(*(_QWORD *)(v9 + 8 * v10), a3);
      v10 = v11;
      v9 = **((_QWORD **)this + 14);
      ++v11;
    }
    while (v10 < (*(_QWORD *)(*((_QWORD *)this + 14) + 8) - v9) >> 3);
  }
  return OZChannelFolder::setFoldFlag(this, 0x100000);
}

__n128 OZCompoundChannel::compoundMoveKeypointTo@<Q0>(OZChannelFolder *this@<X0>, OZChannel *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  __n128 result;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  OZChannel *v21;
  _QWORD v22[3];
  _QWORD v23[3];

  if (OZChannelFolder::testFoldFlag(this, 0x100000) || (a7 & 1) != 0)
  {
    OZChannelFolder::resetFoldFlag(this, 0x100000);
    memset(v23, 0, sizeof(v23));
    (*((void (**)(_QWORD *__return_ptr, OZChannel *, const CMTime *, const CMTime *, uint64_t, uint64_t))a2->var0
     + 77))(v23, a2, a3, a4, a5, a6);
    v17 = (uint64_t *)*((_QWORD *)this + 14);
    v18 = *v17;
    if (v17[1] != *v17)
    {
      v19 = 0;
      v20 = 1;
      do
      {
        v21 = *(OZChannel **)(v18 + 8 * v19);
        if (v21 != a2)
        {
          (*((void (**)(_QWORD *__return_ptr, OZChannel *, const CMTime *, _QWORD *, uint64_t, _QWORD))v21->var0
           + 77))(v22, v21, a3, v23, a5, 0);
          v17 = (uint64_t *)*((_QWORD *)this + 14);
          v18 = *v17;
        }
        v19 = v20++;
      }
      while (v19 < (v17[1] - v18) >> 3);
    }
    OZChannelFolder::setFoldFlag(this, 0x100000);
    result = *(__n128 *)&a4->value;
    *(_OWORD *)a8 = *(_OWORD *)&a4->value;
    *(_QWORD *)(a8 + 16) = a4->epoch;
  }
  else
  {
    (*((void (**)(OZChannel *, const CMTime *, const CMTime *, uint64_t, _QWORD))a2->var0 + 77))(a2, a3, a4, a5, 0);
  }
  return result;
}

OZChannelFolder *OZCompoundChannel::compoundDeleteKeypointAt(OZChannelFolder *this, OZChannel *a2, const CMTime *a3, char a4)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  if (!OZChannelFolder::testFoldFlag(this, 0x100000) && (a4 & 1) == 0)
    return (OZChannelFolder *)(*((uint64_t (**)(OZChannel *, const CMTime *))a2->var0 + 76))(a2, a3);
  OZChannelFolder::resetFoldFlag(this, 0x100000);
  v9 = **((_QWORD **)this + 14);
  if (*(_QWORD *)(*((_QWORD *)this + 14) + 8) != v9)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      (*(void (**)(_QWORD, const CMTime *))(**(_QWORD **)(v9 + 8 * v10) + 608))(*(_QWORD *)(v9 + 8 * v10), a3);
      v10 = v11;
      v9 = **((_QWORD **)this + 14);
      ++v11;
    }
    while (v10 < (*(_QWORD *)(*((_QWORD *)this + 14) + 8) - v9) >> 3);
  }
  return OZChannelFolder::setFoldFlag(this, 0x100000);
}

OZChannelFolder *OZCompoundChannel::compoundReset(OZChannelFolder *this, OZChannel *a2, char a3)
{
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;

  if (!OZChannelFolder::testFoldFlag(this, 0x100000) && (a3 & 1) == 0)
    return (OZChannelFolder *)(*((uint64_t (**)(OZChannel *, _QWORD))a2->var0 + 36))(a2, 0);
  OZChannelFolder::resetFoldFlag(this, 0x100000);
  v7 = **((_QWORD **)this + 14);
  if (*(_QWORD *)(*((_QWORD *)this + 14) + 8) != v7)
  {
    v8 = 0;
    v9 = 1;
    do
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 8 * v8) + 288))(*(_QWORD *)(v7 + 8 * v8), 0);
      v8 = v9;
      v7 = **((_QWORD **)this + 14);
      ++v9;
    }
    while (v8 < (*(_QWORD *)(*((_QWORD *)this + 14) + 8) - v7) >> 3);
  }
  return OZChannelFolder::setFoldFlag(this, 0x100000);
}

OZChannelFolder *OZCompoundChannel::compoundSetIsSpline(OZChannelFolder *this, OZChannel *a2, uint64_t a3, char a4)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  if (!OZChannelFolder::testFoldFlag(this, 0x100000) && (a4 & 1) == 0)
    return (OZChannelFolder *)(*((uint64_t (**)(OZChannel *, uint64_t))a2->var0 + 60))(a2, a3);
  OZChannelFolder::resetFoldFlag(this, 0x100000);
  v9 = **((_QWORD **)this + 14);
  if (*(_QWORD *)(*((_QWORD *)this + 14) + 8) != v9)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 8 * v10) + 480))(*(_QWORD *)(v9 + 8 * v10), a3);
      v10 = v11;
      v9 = **((_QWORD **)this + 14);
      ++v11;
    }
    while (v10 < (*(_QWORD *)(*((_QWORD *)this + 14) + 8) - v9) >> 3);
  }
  return OZChannelFolder::setFoldFlag(this, 0x100000);
}

uint64_t OZCompoundChannel::removeValue(OZCompoundChannel *this, unsigned int a2, const CMTime *a3)
{
  uint64_t v6;
  int v7;
  const void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  const void *v17;
  void *v18;
  void *v19;

  v6 = *(_QWORD *)(**((_QWORD **)this + 14) + 8 * a2);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
  v8 = *(const void **)(**((_QWORD **)this + 14) + 8 * a2);
  if (v7)
  {
    v10 = (*(uint64_t (**)(void *, const CMTime *))(*(_QWORD *)v9 + 800))(v9, a3);
  }
  else
  {
    if (!v8
    {
      v12 = 0;
      goto LABEL_8;
    }
    v10 = (*(uint64_t (**)(void *, const CMTime *, _QWORD))(*(_QWORD *)v11 + 744))(v11, a3, 0);
  }
  v12 = v10;
LABEL_8:
  if (OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000))
  {
    v13 = **((_QWORD **)this + 14);
    if (*(_QWORD *)(*((_QWORD *)this + 14) + 8) != v13)
    {
      v14 = 0;
      v15 = 1;
      do
      {
        v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 8 * v14) + 120))(*(_QWORD *)(v13 + 8 * v14));
        v17 = *(const void **)(**((_QWORD **)this + 14) + 8 * v14);
        if (v16)
        {
          (*(void (**)(void *, const CMTime *))(*(_QWORD *)v18 + 800))(v18, a3);
        }
        else if (v17)
        {
          if (v19)
            (*(void (**)(void *, const CMTime *, _QWORD))(*(_QWORD *)v19 + 744))(v19, a3, 0);
        }
        v14 = v15;
        v13 = **((_QWORD **)this + 14);
        ++v15;
      }
      while (v14 < (*(_QWORD *)(*((_QWORD *)this + 14) + 8) - v13) >> 3);
    }
  }
  return v12;
}

uint64_t OZCompoundChannel::removeValue(OZCompoundChannel *this, const CMTime *a2)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  unsigned int v7;
  int v8;
  void *v9;
  void *v10;

  v2 = **((_QWORD **)this + 14);
  if (*(_QWORD *)(*((_QWORD *)this + 14) + 8) == v2)
  {
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 1;
    do
    {
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v5) + 120))(*(_QWORD *)(v2 + 8 * v5));
      v9 = *(void **)(**((_QWORD **)this + 14) + 8 * v5);
      if (v8)
      {
        LOBYTE(v9) = (*(uint64_t (**)(void *, const CMTime *))(*(_QWORD *)v10 + 800))(v10, a2);
      }
      else if (v9)
      {
        if (v9)
          LOBYTE(v9) = (*(uint64_t (**)(void *, const CMTime *, _QWORD))(*(_QWORD *)v9 + 744))(v9, a2, 0);
      }
      v6 |= v9;
      v5 = v7;
      v2 = **((_QWORD **)this + 14);
      ++v7;
    }
    while (v5 < (*(_QWORD *)(*((_QWORD *)this + 14) + 8) - v2) >> 3);
  }
  return v6 & 1;
}

uint64_t OZCompoundChannel::removeAllValues(OZChannelFolder *this, const CMTime *a2, unsigned int a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  void *v12;
  uint64_t v13;
  int v14;
  void *v15;

  result = OZChannelFolder::testFoldFlag(this, 0x100000);
  v7 = (uint64_t *)*((_QWORD *)this + 14);
  if ((_DWORD)result)
  {
    v8 = *v7;
    if (*(_QWORD *)(*((_QWORD *)this + 14) + 8) != v8)
    {
      v9 = 0;
      v10 = 1;
      do
      {
        v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 8 * v9) + 120))(*(_QWORD *)(v8 + 8 * v9));
        result = *(_QWORD *)(**((_QWORD **)this + 14) + 8 * v9);
        if (v11)
        {
          result = (*(uint64_t (**)(void *, const CMTime *))(*(_QWORD *)v12 + 816))(v12, a2);
        }
        else if (result)
        {
          if (result)
            result = (*(uint64_t (**)(uint64_t, const CMTime *, _QWORD))(*(_QWORD *)result + 752))(result, a2, 0);
        }
        v9 = v10;
        v8 = **((_QWORD **)this + 14);
        ++v10;
      }
      while (v9 < (*(_QWORD *)(*((_QWORD *)this + 14) + 8) - v8) >> 3);
    }
  }
  else
  {
    v13 = *(_QWORD *)(*v7 + 8 * a3);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 120))(v13);
    result = *(_QWORD *)(**((_QWORD **)this + 14) + 8 * a3);
    if (v14)
    {
      return (*(uint64_t (**)(void *, const CMTime *))(*(_QWORD *)v15 + 816))(v15, a2);
    }
    else if (result)
    {
      if (result)
        return (*(uint64_t (**)(uint64_t, const CMTime *, _QWORD))(*(_QWORD *)result + 752))(result, a2, 0);
    }
  }
  return result;
}

_QWORD **OZCompoundChannel::removeAllValues(_QWORD **this, const CMTime *a2)
{
  uint64_t v2;
  _QWORD **v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  void *v8;

  v2 = *this[14];
  if (this[14][1] != v2)
  {
    v4 = this;
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v5) + 120))(*(_QWORD *)(v2 + 8 * v5));
      this = *(_QWORD ***)(*v4[14] + 8 * v5);
      if (v7)
      {
        this = (_QWORD **)(*(uint64_t (**)(void *, const CMTime *))(*(_QWORD *)v8 + 816))(v8, a2);
      }
      else if (this)
      {
        if (this)
          this = (_QWORD **)((uint64_t (*)(_QWORD **, const CMTime *, _QWORD))(*this)[94])(this, a2, 0);
      }
      v5 = v6;
      v2 = *v4[14];
      ++v6;
    }
    while (v5 < (v4[14][1] - v2) >> 3);
  }
  return this;
}

uint64_t *OZCompoundChannel::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
}

uint64_t *`non-virtual thunk to'OZCompoundChannel::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZFactory::setNeedsSaving(*(this - 1), (const OZFactory *)1);
}

const void *OZCompoundChannel::willBeModified(OZChannelBase *this, uint64_t a2)
{
  const void *result;
  void **var0;
  _QWORD *v6;
  unint64_t v7;
  unsigned int v8;

  result = OZChannelBase::willBeModified(this, a2);
  var0 = this[1].var0;
  if (var0)
  {
    v6 = *var0;
    if (var0[1] != *var0)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        result = (const void *)v6[v7];
        if (result)
        {
          if (result)
          {
            result = (const void *)(*(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)result + 704))(result, a2);
            var0 = this[1].var0;
            v6 = *var0;
          }
        }
        v7 = v8++;
      }
      while (v7 < ((_BYTE *)var0[1] - (_BYTE *)v6) >> 3);
    }
  }
  return result;
}

void sub_1B2CA2144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

void sub_1B2CA2AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void OZConvexInterpolator::OZConvexInterpolator(OZConvexInterpolator *this)
{
  _QWORD *v1;

  OZInterpolator::OZInterpolator(this);
  *v1 = &off_1E6563190;
}

void OZConvexInterpolator::~OZConvexInterpolator(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);
  JUMPOUT(0x1B5E29170);
}

double OZConvexInterpolator::interpolate(OZConvexInterpolator *this, OZSpline *a2, const CMTime *a3, char *a4, _BYTE **a5, const CMTime *a6)
{
  double Seconds;
  double v13;
  double v14;
  double v15;
  float v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime time;
  CMTime v27;

  time = *(CMTime *)(a4 + 16);
  v27 = *(CMTime *)(a5 + 2);
  Seconds = CMTimeGetSeconds(&time);
  v25 = v27;
  v13 = CMTimeGetSeconds(&v25);
  if (Seconds > v13)
  {
    OZSpline::getSmallDeltaU(a2, &v24);
    v13 = Seconds + CMTimeGetSeconds(&v24);
  }
  memset(&v23, 0, sizeof(v23));
  (*(void (**)(CMTime *__return_ptr, OZConvexInterpolator *, OZSpline *, const CMTime *, char *, _BYTE **))(*(_QWORD *)this + 104))(&v23, this, a2, a6, a4, a5);
  v14 = (*(double (**)(char *, const CMTime *))(*(_QWORD *)a4 + 24))(a4, a3);
  v15 = (*((double (**)(_BYTE **, const CMTime *))*a5 + 3))(a5, a3);
  v22 = v23;
  v16 = (CMTimeGetSeconds(&v22) - Seconds) / (v13 - Seconds) * 1.57079633;
  if (v14 >= v15)
  {
    v20 = cosf(v16);
    v19 = v14 * v20;
    v18 = v15 * (1.0 - v20);
  }
  else
  {
    v17 = sinf(v16);
    v18 = v14 * (1.0 - v17);
    v19 = v15 * v17;
  }
  return v19 + v18;
}

uint64_t OZConvexInterpolator::subDivide(OZConvexInterpolator *this, OZSpline *a2, const CMTime *a3, void *a4, void *a5, _OWORD *a6)
{
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v12 = a6[1];
  v13 = *((_QWORD *)a6 + 4);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 104))(&v10);
  v12 = v10;
  v13 = v11;
  (*(void (**)(OZSpline *, __int128 *, const CMTime *, _QWORD))(*(_QWORD *)a2 + 240))(a2, &v12, a3, 0);
  return (*(uint64_t (**)(_OWORD *, const CMTime *))(*(_QWORD *)a6 + 32))(a6, a3);
}

void OZConcaveInterpolator::OZConcaveInterpolator(OZConcaveInterpolator *this)
{
  _QWORD *v1;

  OZInterpolator::OZInterpolator(this);
  *v1 = &off_1E6563228;
}

void OZConcaveInterpolator::~OZConcaveInterpolator(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);
  JUMPOUT(0x1B5E29170);
}

double OZConcaveInterpolator::interpolate(OZConcaveInterpolator *this, OZSpline *a2, const CMTime *a3, char *a4, _BYTE **a5, const CMTime *a6)
{
  double Seconds;
  double v13;
  double v14;
  double v15;
  float v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime time;
  CMTime v27;

  time = *(CMTime *)(a4 + 16);
  v27 = *(CMTime *)(a5 + 2);
  Seconds = CMTimeGetSeconds(&time);
  v25 = v27;
  v13 = CMTimeGetSeconds(&v25);
  if (Seconds > v13)
  {
    OZSpline::getSmallDeltaU(a2, &v24);
    v13 = Seconds + CMTimeGetSeconds(&v24);
  }
  memset(&v23, 0, sizeof(v23));
  (*(void (**)(CMTime *__return_ptr, OZConcaveInterpolator *, OZSpline *, const CMTime *, char *, _BYTE **))(*(_QWORD *)this + 104))(&v23, this, a2, a6, a4, a5);
  v14 = (*(double (**)(char *, const CMTime *))(*(_QWORD *)a4 + 24))(a4, a3);
  v15 = (*((double (**)(_BYTE **, const CMTime *))*a5 + 3))(a5, a3);
  v22 = v23;
  v16 = (CMTimeGetSeconds(&v22) - Seconds) / (v13 - Seconds) * 1.57079633;
  if (v14 >= v15)
  {
    v20 = 1.0 - sinf(v16);
    v19 = v14 * v20;
    v18 = v15 * (1.0 - v20);
  }
  else
  {
    v17 = 1.0 - cosf(v16);
    v18 = v14 * (1.0 - v17);
    v19 = v15 * v17;
  }
  return v19 + v18;
}

uint64_t OZConcaveInterpolator::subDivide(OZConcaveInterpolator *this, OZSpline *a2, const CMTime *a3, void *a4, void *a5, _OWORD *a6)
{
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v12 = a6[1];
  v13 = *((_QWORD *)a6 + 4);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 104))(&v10);
  v12 = v10;
  v13 = v11;
  (*(void (**)(OZSpline *, __int128 *, const CMTime *, _QWORD))(*(_QWORD *)a2 + 240))(a2, &v12, a3, 0);
  return (*(uint64_t (**)(_OWORD *, const CMTime *))(*(_QWORD *)a6 + 32))(a6, a3);
}

void OZSCurveInterpolator::OZSCurveInterpolator(OZSCurveInterpolator *this)
{
  _QWORD *v1;

  OZInterpolator::OZInterpolator(this);
  *v1 = &off_1E65632C0;
}

void OZSCurveInterpolator::~OZSCurveInterpolator(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);
  JUMPOUT(0x1B5E29170);
}

double OZSCurveInterpolator::interpolate(OZSCurveInterpolator *this, OZSpline *a2, const CMTime *a3, char *a4, _BYTE **a5, const CMTime *a6)
{
  double Seconds;
  double v13;
  float v14;
  double v15;
  double v16;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime time;
  CMTime v23;

  time = *(CMTime *)(a4 + 16);
  v23 = *(CMTime *)(a5 + 2);
  Seconds = CMTimeGetSeconds(&time);
  v21 = v23;
  v13 = CMTimeGetSeconds(&v21);
  if (Seconds > v13)
  {
    OZSpline::getSmallDeltaU(a2, &v20);
    v13 = Seconds + CMTimeGetSeconds(&v20);
  }
  memset(&v19, 0, sizeof(v19));
  (*(void (**)(CMTime *__return_ptr, OZSCurveInterpolator *, OZSpline *, const CMTime *, char *, _BYTE **))(*(_QWORD *)this + 104))(&v19, this, a2, a6, a4, a5);
  v18 = v19;
  v14 = (CMTimeGetSeconds(&v18) - Seconds) / (v13 - Seconds) * 3.14159265;
  v15 = (1.0 - cosf(v14)) * 0.5;
  v16 = (*(double (**)(char *, const CMTime *))(*(_QWORD *)a4 + 24))(a4, a3) * (1.0 - v15);
  return (*((double (**)(_BYTE **, const CMTime *))*a5 + 3))(a5, a3) * v15 + v16;
}

uint64_t OZSCurveInterpolator::subDivide(OZSCurveInterpolator *this, OZSpline *a2, const CMTime *a3, void *a4, void *a5, _OWORD *a6)
{
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v12 = a6[1];
  v13 = *((_QWORD *)a6 + 4);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 104))(&v10);
  v12 = v10;
  v13 = v11;
  (*(void (**)(OZSpline *, __int128 *, const CMTime *, _QWORD))(*(_QWORD *)a2 + 240))(a2, &v12, a3, 0);
  return (*(uint64_t (**)(_OWORD *, const CMTime *))(*(_QWORD *)a6 + 32))(a6, a3);
}

void sub_1B2CA3B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40D0902988);
  _Unwind_Resume(a1);
}

void HGradientBlend::HGradientBlend(HGradientBlend *this)
{
  _QWORD *v1;

  HgcGradientBlend::HgcGradientBlend(this);
  *v1 = off_1E6563358;
}

void HGradientBlend::~HGradientBlend(HGNode *this)
{
  void *v1;

  HgcGradientBlend::~HgcGradientBlend(this);
  HGObject::operator delete(v1);
}

uint64_t HGradientBlend::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v9;
  uint64_t v10;
  HGNode *v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >= 2)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v10 = v9;
  v11 = HGRenderer::GetInput(a2, this, 1u);
  v12 = HGRenderer::GetDOD(a2, v11);
  return HGRectIntersection(DOD, v10, v12, v13);
}

uint64_t HGradientBlend::GetROI(HGNode *this, HGRenderer *a2, signed int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v10;

  if (a3 >= 2)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  Input = HGRenderer::GetInput(a2, this, a3);
  DOD = HGRenderer::GetDOD(a2, Input);
  return HGRectIntersection(DOD, v10, v6, v5);
}

float createColorBalance@<S0>(_QWORD *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, char a5@<W4>, HgcColorBalance **a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>)
{
  HgcColorBalance *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float result;

  v20 = (HgcColorBalance *)HGObject::operator new(0x1F0uLL);
  HgcColorBalance::HgcColorBalance(v20);
  (*(void (**)(HgcColorBalance *, _QWORD, _QWORD))(*(_QWORD *)v20 + 120))(v20, 0, *a1);
  v21 = *a2;
  v22 = a2[1];
  v23 = a2[2];
  (*(void (**)(HgcColorBalance *, _QWORD, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 0, v21, v22, v23, 0.0);
  v24 = *a3;
  v25 = a3[1];
  v26 = a3[2];
  (*(void (**)(HgcColorBalance *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 1, v24, v25, v26, 0.0);
  v27 = *a4;
  v28 = a4[1];
  v29 = a4[2];
  (*(void (**)(HgcColorBalance *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 2, v27, v28, v29, 0.0);
  v30 = a7;
  (*(void (**)(HgcColorBalance *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 3, v30, v30, v30, v30);
  v31 = a8;
  v32 = a9;
  (*(void (**)(HgcColorBalance *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 4, v31, v32, 0.0, 0.0);
  result = a10;
  *((float *)v20 + 121) = result;
  *((_BYTE *)v20 + 488) = a5;
  *a6 = v20;
  return result;
}

void sub_1B2CA3EB4(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HSampleTiledNoise::HSampleTiledNoise(HSampleTiledNoise *this)
{
  _QWORD *v1;

  HgcSampleTiledNoise::HgcSampleTiledNoise(this);
  *v1 = off_1E65635C0;
  v1[52] = 0;
}

uint64_t HSampleTiledNoise::GetDOD(HSampleTiledNoise *this, HGRenderer *a2, int a3, HGRect a4)
{
  int v5;
  int v6;
  int v7;
  int v8;

  if (a3)
    return 0;
  v5 = *((_DWORD *)this + 104);
  if (v5 >= 0)
    v6 = *((_DWORD *)this + 104);
  else
    v6 = v5 + 1;
  v7 = *((_DWORD *)this + 105);
  if (v7 >= 0)
    v8 = *((_DWORD *)this + 105);
  else
    v8 = v7 + 1;
  return HGRectMake4i(-(v6 >> 1), -(v8 >> 1), v5 - (v6 >> 1), v7 - (v8 >> 1));
}

void HSampleTiledNoise::~HSampleTiledNoise(HGNode *this)
{
  void *v1;

  HgcSampleTiledNoise::~HgcSampleTiledNoise(this);
  HGObject::operator delete(v1);
}

uint64_t FxColorDescription::FxColorDescription(uint64_t a1, CGColorSpace *a2, int a3, _QWORD *a4, char a5)
{
  CGColorSpace *v7;
  CGColorSpaceRef space[2];
  int v10;

  PCColorDescription::PCColorDescription((uint64_t)space, a2, a3, a4);
  v7 = space[0];
  *(CGColorSpaceRef *)a1 = space[0];
  if (v7)
    PCCFRefTraits<CGColorSpace *>::retain(v7);
  *(CGColorSpaceRef *)(a1 + 8) = space[1];
  *(_DWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = a5;
  PCCFRef<CGColorSpace *>::~PCCFRef(space);
  return a1;
}

void sub_1B2CA3FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

BOOL FxColorDescription::isPremultiplied(FxColorDescription *this)
{
  return this->_isPremultiplied;
}

void FxColorDescription::FxColorDescription(FxColorDescription *this, const FxColorDescription *a2, CGColorSpace *a3)
{
  uint64_t v4;

  PCColorDescription::PCColorDescription(&this->_pcColorDesc, &a2->_pcColorDesc, a3);
  *(_BYTE *)(v4 + 24) = a2->_isPremultiplied;
}

uint64_t FxColorDescription::FxColorDescription(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = PCColorDescription::PCColorDescription(a1, a2, a3);
  *(_BYTE *)(result + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

void FxColorDescription::FxColorDescription(FxColorDescription *this, const FxColorDescription *a2, const PCToneMapMethod *a3)
{
  uint64_t v4;

  PCColorDescription::PCColorDescription(&this->_pcColorDesc, &a2->_pcColorDesc, a3);
  *(_BYTE *)(v4 + 24) = a2->_isPremultiplied;
}

void FxColorDescription::FxColorDescription(FxColorDescription *this, CGColorSpace *a2, PCToneMapMethod *a3, char a4)
{
  uint64_t v5;

  PCColorDescription::PCColorDescription(&this->_pcColorDesc, a2, a3);
  *(_BYTE *)(v5 + 24) = a4;
}

uint64_t FxMakeLegacyColorDescription@<X0>(CGColorSpace *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return FxColorDescription::FxColorDescription(a3, a1, 0, &kPCNoToneMapMethod, a2);
}

uint64_t FxGetDefaultWorkingColorDescription@<X0>(uint64_t a1@<X8>)
{
  CGColorSpace *v2;
  uint64_t v4;

  v2 = (CGColorSpace *)PCGetGamutColorSpace();
  v4 = 4;
  return FxColorDescription::FxColorDescription(a1, v2, 0, &v4, 1);
}

int8x8_t *FxHashColorDescription(int8x8_t *a1, const FxColorDescription *a2)
{
  PCHashColorDescription(a1, &a2->_pcColorDesc);
  return PCHashWriteStream::writeValue(a1, a2->_isPremultiplied);
}

BOOL operator!=(uint64_t a1, uint64_t a2, CGColorSpace *a3)
{
  return (*(_BYTE *)(a1 + 24) != 0) != (*(_BYTE *)(a2 + 24) != 0) || !operator==(a1, a2, a3);
}

void HGaussianBlur::HGaussianBlur(HGaussianBlur *this)
{
  _QWORD *v1;

  HGNode::HGNode((HGNode *)this);
  *v1 = off_1E6563828;
  v1[51] = 0;
  v1[52] = 0;
}

void HGaussianBlur::~HGaussianBlur(HGNode *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E6563828;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 51);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HGaussianBlur::~HGaussianBlur(this);
  HGObject::operator delete(v1);
}

HConvolvePass8Tap8Bit *HGaussianBlur::init(HGaussianBlur *this, float a2, float a3, float a4, char a5, int a6, char a7)
{
  double v11;
  float v12;
  int v13;
  HGBlur *v15;
  HGBlur *v16;
  HGBlur *v17;
  HConvolvePass8Tap8Bit *result;
  float v19;
  float v20;
  unsigned int v21;
  HConvolvePass8Tap8Bit *v22;
  float v24;
  float v25;
  float v26;
  float v27;
  HConvolvePass8Tap8Bit *v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  HConvolvePass8Tap8Bit *v32;
  HConvolvePass8Tap8Bit **v33;
  HGaussianBlur *v34;
  _OWORD v36[2];
  _OWORD v37[2];
  float __b[8];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if ((a5 & 1) != 0)
  {
    v11 = a2 / 1.3;
    v12 = v11;
    if (a2 >= 1.3)
    {
      v19 = v11;
      v20 = (float)(logf(v19) / 1.0397) + 1.0;
      if (v20 < 0.0)
        v20 = 0.0;
      v13 = 2 * (int)v20 + 2;
      if (v13 < 1)
      {
        result = (HConvolvePass8Tap8Bit *)*((_QWORD *)this + 52);
        if (!result)
          return result;
        v22 = 0;
        v33 = (HConvolvePass8Tap8Bit **)((char *)this + 416);
        goto LABEL_48;
      }
      v34 = this;
      v12 = v20 - (float)(int)v20;
    }
    else
    {
      v34 = this;
      v13 = 2;
    }
    v21 = 0;
    v22 = 0;
    do
    {
      memset_pattern16(__b, &unk_1B35577D0, 0x20uLL);
      if (v21 == v13 - 1 || v21 == v13 - 2)
        v24 = v12;
      else
        v24 = 1.0;
      v25 = v24 * (float)(1 << (v21 >> 1));
      v26 = v25 * a4;
      if ((v21 & 1) != 0)
        v26 = 0.0;
      v27 = v25 * a3;
      if ((v21 & 1) == 0)
        v27 = 0.0;
      v37[0] = vmulq_n_f32((float32x4_t)xmmword_1B35577B0, v27);
      v37[1] = vmulq_n_f32((float32x4_t)xmmword_1B35577C0, v27);
      v36[0] = vmulq_n_f32((float32x4_t)xmmword_1B35577B0, v26);
      v36[1] = vmulq_n_f32((float32x4_t)xmmword_1B35577C0, v26);
      v28 = (HConvolvePass8Tap8Bit *)HGObject::operator new(0x1A0uLL);
      if (a6)
      {
        HConvolvePass8Tap8Bit::HConvolvePass8Tap8Bit(v28);
      }
      else
      {
        HgcConvolvePass8tap::HgcConvolvePass8tap(v28);
        *(_QWORD *)v28 = &unk_1E6564738;
      }
      for (i = 0; i != 8; ++i)
      {
        (*(void (**)(HConvolvePass8Tap8Bit *, uint64_t, float, float, float, float))(*(_QWORD *)v28 + 96))(v28, i, -*((float *)v37 + i), -*((float *)v36 + i), 0.0, 0.0);
        (*(void (**)(HConvolvePass8Tap8Bit *, _QWORD, float, float, float, float))(*(_QWORD *)v28 + 96))(v28, (i + 8), __b[i], __b[i], __b[i], __b[i]);
      }
      v30 = *(_QWORD *)v28;
      if (v22)
      {
        (*(void (**)(HConvolvePass8Tap8Bit *, _QWORD, HConvolvePass8Tap8Bit *))(v30 + 120))(v28, 0, v22);
        v31 = (*(uint64_t (**)(HConvolvePass8Tap8Bit *, _QWORD))(*(_QWORD *)v28 + 128))(v28, 0);
        *(_DWORD *)(v31 + 16) |= 2u;
        if (v22 != v28)
        {
          (*(void (**)(HConvolvePass8Tap8Bit *))(*(_QWORD *)v22 + 24))(v22);
          v22 = v28;
          (*(void (**)(HConvolvePass8Tap8Bit *))(*(_QWORD *)v28 + 16))(v28);
        }
      }
      else
      {
        (*(void (**)(HConvolvePass8Tap8Bit *))(v30 + 16))(v28);
        v32 = (HConvolvePass8Tap8Bit *)*((_QWORD *)v34 + 51);
        v22 = v28;
        if (v32 != v28)
        {
          if (v32)
            (*(void (**)(HConvolvePass8Tap8Bit *))(*(_QWORD *)v32 + 24))(v32);
          *((_QWORD *)v34 + 51) = v28;
          (*(void (**)(HConvolvePass8Tap8Bit *))(*(_QWORD *)v28 + 16))(v28);
          v22 = v28;
        }
      }
      (*(void (**)(HConvolvePass8Tap8Bit *))(*(_QWORD *)v28 + 24))(v28);
      ++v21;
    }
    while (v21 != v13);
    result = (HConvolvePass8Tap8Bit *)*((_QWORD *)v34 + 52);
    if (result == v22)
      return (HConvolvePass8Tap8Bit *)(*(uint64_t (**)(HConvolvePass8Tap8Bit *))(*(_QWORD *)v22 + 24))(v22);
    v33 = (HConvolvePass8Tap8Bit **)((char *)v34 + 416);
    if (!result)
    {
LABEL_49:
      *v33 = v22;
      if (!v22)
        return result;
      (*(void (**)(HConvolvePass8Tap8Bit *))(*(_QWORD *)v22 + 16))(v22);
      return (HConvolvePass8Tap8Bit *)(*(uint64_t (**)(HConvolvePass8Tap8Bit *))(*(_QWORD *)v22 + 24))(v22);
    }
LABEL_48:
    result = (HConvolvePass8Tap8Bit *)(*(uint64_t (**)(HConvolvePass8Tap8Bit *))(*(_QWORD *)result + 24))(result);
    goto LABEL_49;
  }
  v15 = (HGBlur *)HGObject::operator new(0x220uLL);
  HGBlur::HGBlur(v15);
  (*(void (**)(HGBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v15 + 96))(v15, 0, fabsf(a2 * a3), fabsf(a2 * a4), 0.0, 0.0);
  if ((a7 & 1) == 0)
    (*(void (**)(HGBlur *, uint64_t, float, float, float, float))(*(_QWORD *)v15 + 96))(v15, 2, 1.0, 0.0, 0.0, 0.0);
  v16 = (HGBlur *)*((_QWORD *)this + 51);
  if (v16 != v15)
  {
    if (v16)
      (*(void (**)(HGBlur *))(*(_QWORD *)v16 + 24))(v16);
    *((_QWORD *)this + 51) = v15;
    (*(void (**)(HGBlur *))(*(_QWORD *)v15 + 16))(v15);
  }
  v17 = (HGBlur *)*((_QWORD *)this + 52);
  if (v17 != v15)
  {
    if (v17)
      (*(void (**)(HGBlur *))(*(_QWORD *)v17 + 24))(v17);
    *((_QWORD *)this + 52) = v15;
    (*(void (**)(HGBlur *))(*(_QWORD *)v15 + 16))(v15);
  }
  return (HConvolvePass8Tap8Bit *)(*(uint64_t (**)(HGBlur *))(*(_QWORD *)v15 + 24))(v15);
}

void sub_1B2CA46B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HGaussianBlur::GetOutput(HGNode *this, HGRenderer *a2)
{
  uint64_t v3;
  HGNode *Input;

  v3 = *((_QWORD *)this + 51);
  Input = HGRenderer::GetInput(a2, this, 0);
  (*(void (**)(uint64_t, _QWORD, HGNode *))(*(_QWORD *)v3 + 120))(v3, 0, Input);
  return *((_QWORD *)this + 52);
}

uint64_t **FxDeviceMakeSetByAddingDeviceToSet(uint64_t a1, void *a2)
{
  uint64_t **v3;
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  _QWORD v11[2];
  void *__p;
  char *v13;
  uint64_t v14;

  v3 = (uint64_t **)a1;
  if (a1)
  {
    __p = a2;
    if ((_QWORD *)(a1 + 8) != std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::find<FxDevice const*>(a1, (uint64_t *)&__p))return v3;
    deviceSetToRegistryList(v3, &__p);
  }
  else
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
  }
  v11[0] = FxDeviceGetDeviceKey(a2);
  v11[1] = v4;
  v6 = (char *)__p;
  v5 = v13;
  if (v13 != __p)
  {
    v7 = (v13 - (_BYTE *)__p) >> 4;
    do
    {
      v8 = (uint64_t)&v6[16 * (v7 >> 1)];
      v9 = operator<(v8, (uint64_t)v11);
      if (v9)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v9)
        v6 = (char *)(v8 + 16);
    }
    while (v7);
    v5 = v6;
  }
  std::vector<FxDeviceKey>::insert((uint64_t)&__p, v5, (char *)v11);
  v3 = findOrAddSetToSingletonMap((uint64_t *)&__p, (uint64_t)v3, (uint64_t)a2);
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
  return v3;
}

void sub_1B2CA48AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void deviceSetToRegistryList(_QWORD *a1@<X0>, void **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t DeviceKey;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = a1 + 1;
  v3 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v5 = (uint64_t)(a2 + 2);
    do
    {
      DeviceKey = FxDeviceGetDeviceKey(v3[4]);
      v8 = DeviceKey;
      v9 = v7;
      v11 = (uint64_t *)a2[1];
      v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = ((char *)v11 - (_BYTE *)*a2) >> 4;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v15 = v10 - (_QWORD)*a2;
        if (v15 >> 3 > v14)
          v14 = v15 >> 3;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v5, v16);
        else
          v17 = 0;
        v18 = (uint64_t *)&v17[16 * v13];
        *v18 = v8;
        v18[1] = v9;
        v20 = (char *)*a2;
        v19 = (char *)a2[1];
        v21 = v18;
        if (v19 != *a2)
        {
          do
          {
            *((_OWORD *)v21 - 1) = *((_OWORD *)v19 - 1);
            v21 -= 2;
            v19 -= 16;
          }
          while (v19 != v20);
          v19 = (char *)*a2;
        }
        v12 = v18 + 2;
        *a2 = v21;
        a2[1] = v18 + 2;
        a2[2] = &v17[16 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v11 = DeviceKey;
        v11[1] = v7;
        v12 = v11 + 2;
      }
      a2[1] = v12;
      v22 = (_QWORD *)v3[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v3[2];
          v24 = *v23 == (_QWORD)v3;
          v3 = v23;
        }
        while (!v24);
      }
      v3 = v23;
    }
    while (v23 != v2);
  }
}

void sub_1B2CA4A38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<FxDeviceKey>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 4) + 1;
    if (v14 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 4;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 3 > v14)
      v14 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[16 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 3;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v8, v22);
        v20 = &v23[16 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[16 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 16 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_OWORD *)v20 = *(_OWORD *)v3;
    v28 = v20 + 16;
    v4 = (char *)std::vector<FxDeviceKey>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 16;
  }
  else
  {
    v9 = __src + 16;
    v10 = v6 - 16;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 16 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_OWORD *)v4 = *(_OWORD *)v3;
  }
  return v4;
}

void sub_1B2CA4C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **findOrAddSetToSingletonMap(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t **v8;
  uint64_t **v9;
  PCMutex *v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14[2];
  PCMutex *v15;
  char v16;
  uint64_t v17;

  {
    v11 = (PCMutex *)operator new();
    PCMutex::PCMutex(v11);
    getSingletonLock(void)::mutex = (uint64_t)v11;
  }
  v15 = (PCMutex *)getSingletonLock(void)::mutex;
  PCMutex::lock((PCMutex *)getSingletonLock(void)::mutex);
  v16 = 1;
  {
    v12 = (_QWORD *)operator new();
    v12[2] = 0;
    v12[1] = 0;
    *v12 = v12 + 1;
    getSingletonMap(void)::result = (uint64_t)v12;
  }
  v8 = (uint64_t **)getSingletonMap(void)::result;
  v9 = (uint64_t **)std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::find<std::vector<FxDeviceKey>>(getSingletonMap(void)::result, a1);
  if (v8 + 1 == v9)
  {
    if (a2)
    {
      std::set<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::set[abi:ne180100]((uint64_t *)&v13, a2);
      if (!a3)
        goto LABEL_9;
    }
    else
    {
      v14[0] = 0;
      v14[1] = 0;
      v13 = (uint64_t *)v14;
      if (!a3)
      {
LABEL_9:
        v9 = (uint64_t **)std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__emplace_unique_key_args<std::vector<FxDeviceKey>,std::vector<FxDeviceKey> const&,FxDeviceSetObj>(v8, a1, (uint64_t)a1, &v13);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v13, v14[0]);
        goto LABEL_10;
      }
    }
    v17 = a3;
    std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__emplace_unique_key_args<FxDevice const*,FxDevice const* const&>(&v13, &v17, &v17);
    goto LABEL_9;
  }
LABEL_10:
  if (v15 && v16)
    PCMutex::unlock(v15);
  return v9 + 7;
}

void sub_1B2CA4E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **FxDeviceGetAllGPUs(HGComputeDeviceManager *a1)
{
  uint64_t *GPUComputeDeviceList;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **SetByAddingDeviceToSet;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *DeviceForHGDevice;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  GPUComputeDeviceList = HGComputeDeviceManager::GetGPUComputeDeviceList(a1);
  v2 = (uint64_t *)*GPUComputeDeviceList;
  v3 = (uint64_t *)GPUComputeDeviceList[1];
  if ((uint64_t *)*GPUComputeDeviceList == v3)
    return 0;
  SetByAddingDeviceToSet = 0;
  do
  {
    v5 = v2[1];
    v13 = *v2;
    v14 = (std::__shared_weak_count *)v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    DeviceForHGDevice = FxDeviceGetDeviceForHGDevice(&v13);
    SetByAddingDeviceToSet = FxDeviceMakeSetByAddingDeviceToSet((uint64_t)SetByAddingDeviceToSet, DeviceForHGDevice);
    v9 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v2 += 2;
  }
  while (v2 != v3);
  return SetByAddingDeviceToSet;
}

void sub_1B2CA4F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **FxDeviceComputeActiveGPUsSet(HGComputeDeviceManager *a1)
{
  uint64_t **AllGPUs;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t **SetByAddingDeviceToSet;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;

  AllGPUs = FxDeviceGetAllGPUs(a1);
  if (!AllGPUs)
    return 0;
  v2 = AllGPUs + 1;
  v3 = *AllGPUs;
  if (*AllGPUs == (uint64_t *)(AllGPUs + 1))
    return 0;
  SetByAddingDeviceToSet = 0;
  do
  {
    v5 = (void *)v3[4];
    if (FxDeviceIsSharedGPU((HGGPUComputeDevice **)v5))
      SetByAddingDeviceToSet = FxDeviceMakeSetByAddingDeviceToSet((uint64_t)SetByAddingDeviceToSet, v5);
    v6 = (uint64_t *)v3[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (uint64_t *)v3[2];
        v8 = *v7 == (_QWORD)v3;
        v3 = v7;
      }
      while (!v8);
    }
    v3 = v7;
  }
  while (v7 != (uint64_t *)v2);
  return SetByAddingDeviceToSet;
}

uint64_t FxDeviceLogActiveSet(_QWORD *a1)
{
  return logGPUList("Active GPUs", a1);
}

uint64_t logGPUList(const char *a1, _QWORD *a2)
{
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  void (****v9)(HGGPUComputeDevice *__hidden);
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  void **v16;
  void *__p[2];
  unsigned __int8 v19;
  _QWORD v20[11];
  char v21;
  uint64_t v22;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  v4 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)a1, v4);
  if (a2)
  {
    v7 = (_QWORD *)*a2;
    v5 = a2 + 1;
    v6 = v7;
    if (v7 != v5)
    {
      v8 = ": ";
      do
      {
        v9 = (void (****)(HGGPUComputeDevice *__hidden))v6[4];
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v8, 2);
        FxDeviceGetLogStdString(v9);
        if ((v19 & 0x80u) == 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        if ((v19 & 0x80u) == 0)
          v12 = v19;
        else
          v12 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
        if ((char)v19 < 0)
          operator delete(__p[0]);
        v13 = (_QWORD *)v6[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v6[2];
            v15 = *v14 == (_QWORD)v6;
            v6 = v14;
          }
          while (!v15);
        }
        v8 = ", ";
        v6 = v14;
      }
      while (v14 != v5);
    }
  }
  std::stringbuf::str();
  if ((v19 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  NSLog(CFSTR("%s\n"), v16);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v20[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v20[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v21 < 0)
    operator delete((void *)v20[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](&v22);
}

void sub_1B2CA51F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::find<FxDevice const*>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = FxDeviceSortOrder(v3[4], *a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || FxDeviceSortOrder(*a2, v5[4]))
    return v2;
  return v5;
}

_QWORD *std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::find<std::vector<FxDeviceKey>>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = (_QWORD *)(a1 + 8);
  v4 = std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__lower_bound<std::vector<FxDeviceKey>>(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 == v4)
    return v3;
  v5 = v4;
  if (std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<FxDeviceKey const*>,std::__wrap_iter<FxDeviceKey const*>>(*a2, a2[1], v5[4], v5[5]))return v3;
  return v5;
}

_QWORD *std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__lower_bound<std::vector<FxDeviceKey>>(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  int v7;
  _QWORD *v8;

  if (a3)
  {
    v5 = a3;
    do
    {
      v7 = std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<FxDeviceKey const*>,std::__wrap_iter<FxDeviceKey const*>>(v5[4], v5[5], *a2, a2[1]);
      v8 = v5 + 1;
      if (!v7)
      {
        v8 = v5;
        a4 = v5;
      }
      v5 = (_QWORD *)*v8;
    }
    while (*v8);
  }
  return a4;
}

uint64_t std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<FxDeviceKey const*>,std::__wrap_iter<FxDeviceKey const*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  BOOL v8;
  uint64_t result;

  if (a3 == a4)
    return 0;
  v5 = a3;
  while (a1 != a2 && !operator<(a1, v5))
  {
    v8 = operator<(v5, a1);
    result = 0;
    if (!v8)
    {
      a1 += 16;
      v5 += 16;
      if (v5 != a4)
        continue;
    }
    return result;
  }
  return 1;
}

uint64_t *std::set<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::insert[abi:ne180100]<std::__tree_const_iterator<FxDevice const*,std::__tree_node<FxDevice const*,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1B2CA5438(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::insert[abi:ne180100]<std::__tree_const_iterator<FxDevice const*,std::__tree_node<FxDevice const*,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__emplace_hint_unique_key_args<FxDevice const*,FxDevice const* const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__emplace_hint_unique_key_args<FxDevice const*,FxDevice const* const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__find_equal<FxDevice const*>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__find_equal<FxDevice const*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || FxDeviceSortOrder(*a5, a2[4]))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (FxDeviceSortOrder(v12[4], *a5))
      goto LABEL_16;
    return std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__find_equal<FxDevice const*>((uint64_t)a1, a3, a5);
  }
  if (FxDeviceSortOrder(a2[4], *a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!FxDeviceSortOrder(*a5, v15[4]))
        return std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__find_equal<FxDevice const*>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__find_equal<FxDevice const*>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (!FxDeviceSortOrder(*a3, v4[4]))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!FxDeviceSortOrder(v7[4], *a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__emplace_unique_key_args<FxDevice const*,FxDevice const* const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__find_equal<FxDevice const*>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__emplace_unique_key_args<std::vector<FxDeviceKey>,std::vector<FxDeviceKey> const&,FxDeviceSetObj>(uint64_t **a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__find_equal<std::vector<FxDeviceKey>>((uint64_t)a1, &v12, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__construct_node<std::vector<FxDeviceKey> const&,FxDeviceSetObj>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v12, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__find_equal<std::vector<FxDeviceKey>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (!std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<FxDeviceKey const*>,std::__wrap_iter<FxDeviceKey const*>>(*a3, a3[1], v4[4], v4[5]))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<FxDeviceKey const*>,std::__wrap_iter<FxDeviceKey const*>>(v7[4], v7[5], *a3, a3[1]))break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__construct_node<std::vector<FxDeviceKey> const&,FxDeviceSetObj>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::vector<FxDeviceKey> const,FxDeviceSetObj const>::pair[abi:ne180100]<std::vector<FxDeviceKey> const&,FxDeviceSetObj,0>(v8 + 4, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1B2CA5968(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::vector<FxDeviceKey> const,FxDeviceSetObj const>::pair[abi:ne180100]<std::vector<FxDeviceKey> const&,FxDeviceSetObj,0>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<FxDeviceKey>::__init_with_size[abi:ne180100]<FxDeviceKey*,FxDeviceKey*>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  a1[3] = *a3;
  v5 = a3 + 1;
  v6 = a3[1];
  a1[4] = v6;
  v7 = a1 + 4;
  v8 = a3[2];
  a1[5] = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    a1[3] = v7;
  }
  return a1;
}

_QWORD *std::vector<FxDeviceKey>::__init_with_size[abi:ne180100]<FxDeviceKey*,FxDeviceKey*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B2CA5A54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<FxDeviceKey> const,FxDeviceSetObj const>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<FxDeviceKey> const,FxDeviceSetObj const>,0>(uint64_t a1)
{
  void *v2;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void *std::vector<FxDeviceKey>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

HGNode *applyColorSpaceConform@<X0>(CGColorSpaceRef space@<X1>, CGColorSpace *a2@<X3>, uint64_t *a3@<X0>, CGColorSpace *a4@<X2>, char *a5@<X4>, uint64_t *a6@<X8>)
{
  int v13;
  int v14;
  CFStringRef v15;
  CFStringRef v16;
  unint64_t RGBNCLCFromRGBColorSpace;
  int v18;
  _BYTE buf[12];
  __int16 v20;
  CFStringRef v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (PCColorSpaceHandle::isSameColorSpace(space, a2, a4))
    return (HGNode *)applyPremultiplyOnly(a3, (int)a4, (int)a5, a6);
  RGBNCLCFromRGBColorSpace = getRGBNCLCFromRGBColorSpace(space);
  v18 = v13;
  if (PCNCLCCodeIsKnownRGB(&RGBNCLCFromRGBColorSpace))
  {
    *(_QWORD *)buf = getRGBNCLCFromRGBColorSpace(a2);
    *(_DWORD *)&buf[8] = v14;
    if (PCNCLCCodeIsKnownRGB(buf))
      return applyNCLCConform(a3, (int *)&RGBNCLCFromRGBColorSpace, (uint64_t)a4, (int *)buf, a5, a6);
  }
  v15 = CFCopyDescription(space);
  v16 = CFCopyDescription(a2);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v15;
    v20 = 2112;
    v21 = v16;
    _os_log_impl(&dword_1B2737000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unsupported color space arguments in FxApplyColorConform(): %@ and %@", buf, 0x16u);
  }
  CFRelease(v15);
  CFRelease(v16);
  return (HGNode *)applyPremultiplyOnly(a3, (int)a4, (int)a5, a6);
}

HGNode *FxApplyColorConform@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t *a6@<X8>)
{
  int v11;
  int v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v16 = PCMakeRGBNCLCCode(a2);
  v17 = v11;
  v14 = PCMakeRGBNCLCCode(a4);
  v15 = v12;
  return applyNCLCConform(a1, (int *)&v16, a3, (int *)&v14, a5, a6);
}

HGNode *applyNCLCConform@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, char *a5@<X4>, uint64_t *a6@<X8>)
{
  HGNode *result;
  int v13;
  int HGTransfer;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char *v29;
  int v30;
  _QWORD *v31;
  HGNode *v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (operator==((uint64_t)a2, (uint64_t)a4))
    return (HGNode *)applyPremultiplyOnly(a1, a3, (int)a5, a6);
  v31 = a6;
  v13 = *a2 - 5;
  if (v13 > 7)
    v30 = 0;
  else
    v30 = dword_1B3557800[v13];
  HGTransfer = getHGTransfer((uint64_t)a2);
  v15 = a2[2] - 1;
  if (v15 > 8)
    v16 = 0;
  else
    v16 = dword_1B3557820[v15];
  v17 = *a4 - 5;
  if (v17 > 7)
    v18 = 0;
  else
    v18 = dword_1B3557800[v17];
  v19 = getHGTransfer((uint64_t)a4);
  v20 = a4[2] - 1;
  if (v20 > 8)
    v21 = 0;
  else
    v21 = dword_1B3557820[v20];
  FxSupport::newHGRefWithInput<HGColorConform>(*a1, (HGColorConform **)&v32);
  HGColorConform::SetPremultiplyState(v32, a3, a5);
  if ((HGColorConform::SetConversion((uint64_t)v32, v30, HGTransfer, v16, v18, v19, v21) & 1) == 0
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v23 = *a2;
    v24 = a2[1];
    v25 = a2[2];
    v26 = *a4;
    v27 = a4[1];
    v28 = a4[2];
    *(_DWORD *)buf = 67110400;
    v34 = v23;
    v35 = 1024;
    v36 = v24;
    v37 = 1024;
    v38 = v25;
    v39 = 1024;
    v40 = v26;
    v41 = 1024;
    v42 = v27;
    v43 = 1024;
    v44 = v28;
    _os_log_impl(&dword_1B2737000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unsupported nclc arguments in FxApplyColorConform(): (%d-%d-%d) and (%d-%d-%d)", buf, 0x26u);
  }
  HGColorConform::SetToneQualityMode(v32, 2, v22);
  result = HGColorConform::SetAntiSymmetricToneCurves(v32, 1, v29);
  *v31 = v32;
  return result;
}

void sub_1B2CA6064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(exception_object);
}

HGNode *FxApplyColorConform@<X0>(uint64_t *a1@<X0>, FxColorDescription *a2@<X1>, FxColorDescription *a3@<X2>, uint64_t *a4@<X8>)
{
  int isSDR;
  int isHDR;
  HGNode *result;
  uint64_t DynamicRange;
  const PCToneMapMethod *ToneMapMethod;
  CGColorSpace *CGColorSpace;
  _BOOL8 isPremultiplied;
  CGColorSpace *v15;
  _BOOL8 v16;

  if (!operator==((uint64_t)a2, (uint64_t)a3, (CGColorSpace *)a3)
    && FxColorDescription::isColorManaged(a2)
    && (FxColorDescription::isColorManaged(a3) & 1) != 0)
  {
    if ((FxColorDescriptionCanToneMap(a2) & 1) != 0)
    {
      isSDR = FxColorDescription::isSDR(a2);
      if (isSDR == FxColorDescription::isSDR(a3)
        || (isHDR = FxColorDescription::isHDR(a2), isHDR == FxColorDescription::isHDR(a3)))
      {
        DynamicRange = FxColorDescription::getDynamicRange(a2);
        FxColorDescription::setDynamicRange(a3, DynamicRange);
        ToneMapMethod = (const PCToneMapMethod *)FxColorDescription::getToneMapMethod(a2);
        FxColorDescription::setToneMapMethod(a3, ToneMapMethod);
      }
      else
      {
        if (FxColorDescription::isSDR(a2) && FxColorDescription::isHDR(a3))
          return (HGNode *)conformInverseToneMap(a1, a2, a3, a4);
        if (FxColorDescription::isHDR(a2) && FxColorDescription::isSDR(a3))
          return (HGNode *)conformToneMap(a1, a2, a3, a4);
      }
    }
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    isPremultiplied = FxColorDescription::isPremultiplied(a2);
    v15 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    v16 = FxColorDescription::isPremultiplied(a3);
    return applyColorSpaceConform(CGColorSpace, v15, a1, (CGColorSpace *)isPremultiplied, (char *)v16, a4);
  }
  result = (HGNode *)*a1;
  *a4 = *a1;
  if (result)
    return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t conformInverseToneMap@<X0>(uint64_t *a1@<X0>, FxColorDescription *a2@<X1>, FxColorDescription *a3@<X2>, uint64_t *a4@<X8>)
{
  CGColorSpace *v8;
  PVPerfStats::FrameStats *ToneMapMethod;
  CGColorSpace *CGColorSpace;
  CGColorSpace *v11;
  CGColorSpace *v12;
  CGColorSpace *v13;
  PCColorUtil *Size;
  float Gain;
  CGColorSpace *v16;
  _BOOL8 isPremultiplied;
  uint64_t v18;
  unint64_t v19;
  CGColorSpace *v20;
  _BOOL8 v21;
  PCColorUtil *v22;
  unint64_t v23;
  CGColorSpace *v24;
  _BOOL8 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  CGColorSpace *v30;
  _BOOL8 v31;
  uint64_t result;
  unint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  uint64_t v38;
  unint64_t v39;
  CGColorSpace *v40;
  _BOOL8 v41;
  CGColorSpace *v42;
  int v43;
  int v44;
  int v45;
  CGColorSpace *v46;
  CGColorSpace *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  unint64_t v52;
  CGColorSpace *v53;
  _BOOL8 v54;
  uint64_t v55;
  uint64_t v56;
  CGColorSpace *v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  CGColorSpace *v61;
  CGColorSpace *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  int v68;

  v8 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
  ToneMapMethod = (PVPerfStats::FrameStats *)FxColorDescription::getToneMapMethod(a2);
  if ((PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 4
     || PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 5)
    && FxColorDescription::isPremultiplied(a2)
    && FxColorDescription::isPremultiplied(a3))
  {
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    if (PCColorSpaceHandle::isSameColorSpace(CGColorSpace, v8, v11))
    {
      v12 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
      if (PCColorSpaceHandle::isSameColorSpace(v12, v8, v13))
      {
        Size = (PCColorUtil *)PVPerfStats::FrameStats::GetSize(ToneMapMethod);
        if ((_DWORD)Size == 5)
          Gain = PCToneMapMethod::getGain((PCToneMapMethod *)ToneMapMethod);
        else
          PCColorUtil::getHLGDiffuseWhiteGain(Size);
        return FxApplyGain(a1, a4, Gain);
      }
    }
  }
  *a4 = 0;
  if (PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 6)
  {
    v16 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    isPremultiplied = FxColorDescription::isPremultiplied(a2);
    applyColorSpaceConform(v16, v8, a1, (CGColorSpace *)isPremultiplied, 0, (uint64_t *)&v67);
    v18 = *a4;
    v19 = v67;
    if (*a4 == v67)
    {
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
    }
    else
    {
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      *a4 = v19;
    }
    FxApplyInverseSimpleToneCurve(a4, &v67, 0.7, 12.0);
    v28 = *a4;
    v29 = v67;
    if (*a4 == v67)
    {
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
    }
    else
    {
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
        v29 = v67;
      }
      *a4 = v29;
    }
    v30 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    v31 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v30, a4, 0, (char *)v31, (uint64_t *)&v67);
    result = *a4;
    v33 = v67;
    if (*a4 != v67)
    {
      if (result)
        goto LABEL_78;
      goto LABEL_79;
    }
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  if (PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 4)
  {
    v20 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    v21 = FxColorDescription::isPremultiplied(a2);
    applyColorSpaceConform(v20, v8, a1, (CGColorSpace *)v21, 0, (uint64_t *)&v67);
    v22 = (PCColorUtil *)*a4;
    v23 = v67;
    if (*a4 == v67)
    {
      if (v22)
        v22 = (PCColorUtil *)(*(uint64_t (**)(PCColorUtil *))(*(_QWORD *)v22 + 24))(v22);
    }
    else
    {
      if (v22)
        v22 = (PCColorUtil *)(*(uint64_t (**)(PCColorUtil *))(*(_QWORD *)v22 + 24))(v22);
      *a4 = v23;
    }
    PCColorUtil::getHLGDiffuseWhiteGain(v22);
    FxApplyGain(a4, (uint64_t *)&v67, v37);
    v38 = *a4;
    v39 = v67;
    if (*a4 == v67)
    {
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
    }
    else
    {
      if (v38)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
        v39 = v67;
      }
      *a4 = v39;
    }
    v40 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    v41 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v40, a4, 0, (char *)v41, (uint64_t *)&v67);
    result = *a4;
    v33 = v67;
    if (*a4 != v67)
    {
      if (result)
        goto LABEL_78;
      goto LABEL_79;
    }
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  if (PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 5)
  {
    v24 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    v25 = FxColorDescription::isPremultiplied(a2);
    applyColorSpaceConform(v24, v8, a1, (CGColorSpace *)v25, 0, (uint64_t *)&v67);
    v26 = *a4;
    v27 = v67;
    if (*a4 == v67)
    {
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
    }
    else
    {
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
      *a4 = v27;
    }
    v50 = PCToneMapMethod::getGain((PCToneMapMethod *)ToneMapMethod);
    FxApplyGain(a4, (uint64_t *)&v67, v50);
    v51 = *a4;
    v52 = v67;
    if (*a4 == v67)
    {
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
    }
    else
    {
      if (v51)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
        v52 = v67;
      }
      *a4 = v52;
    }
    v53 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    v54 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v53, a4, 0, (char *)v54, (uint64_t *)&v67);
    result = *a4;
    v33 = v67;
    if (*a4 != v67)
    {
      if (result)
LABEL_78:
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
LABEL_79:
      *a4 = v33;
      return result;
    }
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  v34 = FxColorDescription::isPremultiplied(a2);
  applyPremultiplyOnly(a1, v34, 0, (uint64_t *)&v67);
  v35 = *a4;
  v36 = v67;
  if (*a4 == v67)
  {
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  }
  else
  {
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
    *a4 = v36;
  }
  v42 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
  v67 = PCGetNCLCCodeForColorSpace(v42);
  v68 = v43;
  v66 = 0;
  v44 = PVPerfStats::FrameStats::GetSize(ToneMapMethod);
  if (v44 == 3)
    v45 = 2;
  else
    v45 = 1;
  if (v44 == 1)
    v45 = 0;
  v65 = 0;
  v66 = v45;
  if (v44 != 3)
  {
    if (PCNCLCCodeCompareRGB(&v67, &kPCNCLC_Rec709))
    {
      v65 = 0;
      goto LABEL_89;
    }
    if (PCNCLCCodeCompareRGB(&v67, &kPCNCLC_P3_D65))
    {
      v65 = 1;
      goto LABEL_89;
    }
    v65 = 2;
    v61 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020);
    v62 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    applyColorSpaceConform(v62, v61, a4, 0, 0, &v64);
    v48 = *a4;
    v49 = v64;
    if (*a4 != v64)
    {
      if (!v48)
        goto LABEL_65;
      goto LABEL_64;
    }
    if (!v48)
      goto LABEL_89;
LABEL_88:
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
    goto LABEL_89;
  }
  v46 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec709);
  v47 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
  applyColorSpaceConform(v47, v46, a4, 0, 0, &v64);
  v48 = *a4;
  v49 = v64;
  if (*a4 == v64)
  {
    if (!v48)
      goto LABEL_89;
    goto LABEL_88;
  }
  if (v48)
LABEL_64:
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
LABEL_65:
  *a4 = v49;
  v64 = 0;
LABEL_89:
  FxSupport::newHGRefWithInput<HGHLG::SDRToHLG,HGHLG::SDRToHLG::SDRInputType &,HGHLG::SDRToHLG::ConversionMethod const&>(*a4, &v65, &v66, &v64);
  HGHLG::HLGToSDR::SetToneQualityMode(v64, 2);
  v55 = *a4;
  v56 = v64;
  if (*a4 != v64)
  {
    if (v55)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(*a4);
      v56 = v64;
    }
    *a4 = v56;
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
  }
  v57 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
  v58 = FxColorDescription::isPremultiplied(a3);
  applyColorSpaceConform(v8, v57, a4, 0, (char *)v58, &v63);
  v59 = *a4;
  v60 = v63;
  if (*a4 == v63)
  {
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
  }
  else
  {
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
    *a4 = v60;
  }
  result = v64;
  if (v64)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
  return result;
}

void sub_1B2CA6994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v13;
  uint64_t v14;

  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  if (*v13)
    (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 24))(*v13);
  _Unwind_Resume(exception_object);
}

uint64_t conformToneMap@<X0>(uint64_t *a1@<X0>, FxColorDescription *a2@<X1>, FxColorDescription *a3@<X2>, uint64_t *a4@<X8>)
{
  CGColorSpace *v8;
  PVPerfStats::FrameStats *ToneMapMethod;
  CGColorSpace *CGColorSpace;
  CGColorSpace *v11;
  CGColorSpace *v12;
  CGColorSpace *v13;
  PCColorUtil *Size;
  float Gain;
  CGColorSpace *v16;
  _BOOL8 isPremultiplied;
  uint64_t v18;
  unint64_t v19;
  PCColorUtil *v20;
  float v21;
  uint64_t v22;
  unint64_t v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  CGColorSpace *v27;
  _BOOL8 v28;
  uint64_t result;
  unint64_t v30;
  int v31;
  CGColorSpace *v32;
  int v33;
  HGHLG::HLGToSDR *v34;
  HGPremultiply *v35;
  CGColorSpace *v36;
  _BOOL8 v37;
  HGHLG::HLGToSDR *v38;
  CGColorSpace *v39;
  _BOOL8 v40;
  uint64_t v41;
  unint64_t v42;
  CGColorSpace *v43;
  _BOOL8 v44;
  CGColorSpace *v45;
  HGHLG::HLGToSDR *v46;
  CGColorSpace *v47;
  _BOOL8 v48;
  uint64_t v49;
  HGPremultiply *v50;
  uint64_t v51;
  HGHLG::HLGToSDR *v52;
  unint64_t v53;
  int v54;
  HGHLG::HLGToSDR *v55;
  int v56;
  HGPremultiply *v57;

  v8 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
  ToneMapMethod = (PVPerfStats::FrameStats *)FxColorDescription::getToneMapMethod(a2);
  if ((PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 4
     || PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 5)
    && FxColorDescription::isPremultiplied(a2)
    && FxColorDescription::isPremultiplied(a3))
  {
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    if (PCColorSpaceHandle::isSameColorSpace(CGColorSpace, v8, v11))
    {
      v12 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
      if (PCColorSpaceHandle::isSameColorSpace(v12, v8, v13))
      {
        Size = (PCColorUtil *)PVPerfStats::FrameStats::GetSize(ToneMapMethod);
        if ((_DWORD)Size == 5)
          Gain = PCToneMapMethod::getGain((PCToneMapMethod *)ToneMapMethod);
        else
          PCColorUtil::getHLGDiffuseWhiteGain(Size);
        return FxApplyGain(a1, a4, 1.0 / Gain);
      }
    }
  }
  v16 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
  isPremultiplied = FxColorDescription::isPremultiplied(a2);
  applyColorSpaceConform(v16, v8, a1, (CGColorSpace *)isPremultiplied, 0, a4);
  if (PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 6)
  {
    FxApplySimpleToneCurve(a4, &v53, 0.7, 12.0);
    v18 = *a4;
    v19 = v53;
    if (*a4 == v53)
    {
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
    }
    else
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v53;
      }
      *a4 = v19;
    }
    v27 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    v28 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v27, a4, 0, (char *)v28, (uint64_t *)&v53);
    result = *a4;
    v30 = v53;
    if (*a4 != v53)
    {
      if (result)
        goto LABEL_57;
      goto LABEL_58;
    }
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  v20 = (PCColorUtil *)PVPerfStats::FrameStats::GetSize(ToneMapMethod);
  if ((_DWORD)v20 == 4)
  {
    PCColorUtil::getHLGDiffuseWhiteGain(v20);
    FxApplyGain(a4, (uint64_t *)&v53, 1.0 / v21);
    v22 = *a4;
    v23 = v53;
    if (*a4 == v53)
    {
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
    }
    else
    {
      if (v22)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
        v23 = v53;
      }
      *a4 = v23;
    }
    v36 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    v37 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v36, a4, 0, (char *)v37, (uint64_t *)&v53);
    result = *a4;
    v30 = v53;
    if (*a4 != v53)
    {
      if (result)
        goto LABEL_57;
      goto LABEL_58;
    }
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  if (PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 5)
  {
    v24 = PCToneMapMethod::getGain((PCToneMapMethod *)ToneMapMethod);
    FxApplyGain(a4, (uint64_t *)&v53, 1.0 / v24);
    v25 = *a4;
    v26 = v53;
    if (*a4 == v53)
    {
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    }
    else
    {
      if (v25)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
        v26 = v53;
      }
      *a4 = v26;
    }
    v43 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    v44 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v43, a4, 0, (char *)v44, (uint64_t *)&v53);
    result = *a4;
    v30 = v53;
    if (*a4 != v53)
    {
      if (result)
LABEL_57:
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
LABEL_58:
      *a4 = v30;
      return result;
    }
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  v56 = 0;
  if (PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 3)
    v31 = 1;
  else
    v31 = 2;
  v56 = v31;
  FxSupport::newHGRefWithInput<HGHLG::HLGToSDR,HGHLG::HLGToSDR::ConversionMethod const&>(*a4, &v56, &v55);
  HGHLG::HLGToSDR::SetToneQualityMode((uint64_t)v55, 2);
  HGHLG::HLGToSDR::SetMinimumInputValueZero((uint64_t)v55, 1);
  if (v56 != 1)
  {
    HGHLG::HLGToSDR::SetOutputIsRec709Gamma((uint64_t)v55, 0);
    v38 = v55;
    v57 = v55;
    if (v55)
      (*(void (**)(HGHLG::HLGToSDR *))(*(_QWORD *)v55 + 16))(v55);
    v39 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    v40 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v39, (uint64_t *)&v57, 0, (char *)v40, (uint64_t *)&v53);
    v41 = *a4;
    v42 = v53;
    if (*a4 == v53)
    {
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
    }
    else
    {
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
      *a4 = v42;
      v53 = 0;
    }
    if (v38)
      (*(void (**)(HGHLG::HLGToSDR *))(*(_QWORD *)v38 + 24))(v38);
    goto LABEL_91;
  }
  HGHLG::HLGToSDR::SetOutputIsRec709Gamma((uint64_t)v55, 1);
  v32 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
  v53 = PCGetNCLCCodeForColorSpace(v32);
  v54 = v33;
  if (!PCNCLCCodeCompareRGB(&v53, &kPCNCLC_Rec709))
  {
    v45 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec709);
    v46 = v55;
    v52 = v55;
    if (v55)
      (*(void (**)(HGHLG::HLGToSDR *))(*(_QWORD *)v55 + 16))(v55);
    v47 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    v48 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v45, v47, (uint64_t *)&v52, 0, (char *)v48, (uint64_t *)&v57);
    v49 = *a4;
    v50 = v57;
    if ((HGPremultiply *)*a4 == v57)
    {
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
    }
    else
    {
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
      *a4 = (uint64_t)v50;
      v57 = 0;
    }
    if (v46)
      (*(void (**)(HGHLG::HLGToSDR *))(*(_QWORD *)v46 + 24))(v46);
    goto LABEL_91;
  }
  v34 = v55;
  if (v55)
    (*(void (**)(HGHLG::HLGToSDR *))(*(_QWORD *)v55 + 16))(v55);
  if (FxColorDescription::isPremultiplied(a3))
  {
    FxSupport::newHGRefWithInput<HGPremultiply>((uint64_t)v34, &v57);
    v35 = v57;
    goto LABEL_76;
  }
  if (v34)
  {
    (*(void (**)(HGHLG::HLGToSDR *))(*(_QWORD *)v34 + 16))(v34);
    v35 = v34;
LABEL_76:
    v51 = *a4;
    if ((HGPremultiply *)*a4 == v35)
    {
      if (v35)
        (*(void (**)(HGPremultiply *))(*(_QWORD *)v35 + 24))(v35);
      goto LABEL_89;
    }
    if (!v51)
    {
LABEL_88:
      *a4 = (uint64_t)v35;
LABEL_89:
      if (v34)
        (*(void (**)(HGHLG::HLGToSDR *))(*(_QWORD *)v34 + 24))(v34);
      goto LABEL_91;
    }
LABEL_87:
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
    goto LABEL_88;
  }
  v51 = *a4;
  if (*a4)
  {
    v35 = 0;
    goto LABEL_87;
  }
LABEL_91:
  result = (uint64_t)v55;
  if (v55)
    return (*(uint64_t (**)(HGHLG::HLGToSDR *))(*(_QWORD *)v55 + 24))(v55);
  return result;
}

void sub_1B2CA7244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  if (*v12)
    (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 24))(*v12);
  _Unwind_Resume(exception_object);
}

HGHLG::OOTF *FxConvertHLGToPQ@<X0>(uint64_t *a1@<X0>, CGColorSpace *a2@<X1>, CGColorSpace *a3@<X2>, CGColorSpace *a4@<X3>, char *a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  CGColorSpace *v14;
  uint64_t v15;
  float v16;
  HGHLG::OOTF *v17;
  HGPQ::InverseOOTF *v18;
  HGHLG::OOTF *result;
  HGPQ::InverseOOTF *v20;
  HGPQ::InverseOOTF *v21;
  HGHLG::OOTF *v22;
  unsigned int v23;
  uint64_t v24;

  v14 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
  applyColorSpaceConform(a2, v14, a1, a3, 0, &v24);
  v23 = 1;
  v15 = v24;
  FxSupport::newHGRefWithInput<HGHLG::OOTF,HGHLG::OOTF::ColorPrimaries const&>(v24, &v23, &v22);
  v16 = HGHLG::OOTF::setPeakDisplayLuminance(v22, a7);
  v17 = v22;
  if (v22)
    (*(void (**)(HGHLG::OOTF *, float))(*(_QWORD *)v22 + 16))(v22, v16);
  FxSupport::newHGRefWithInput<HGPQ::InverseOOTF>((uint64_t)v17, &v21);
  if (v17)
    (*(void (**)(HGHLG::OOTF *))(*(_QWORD *)v17 + 24))(v17);
  v18 = v21;
  v20 = v21;
  if (v21)
    (*(void (**)(HGPQ::InverseOOTF *))(*(_QWORD *)v21 + 16))(v21);
  applyColorSpaceConform(v14, a4, (uint64_t *)&v20, 0, a5, a6);
  if (v18)
    (*(void (**)(HGPQ::InverseOOTF *))(*(_QWORD *)v18 + 24))(v18);
  if (v21)
    (*(void (**)(HGPQ::InverseOOTF *))(*(_QWORD *)v21 + 24))(v21);
  result = v22;
  if (v22)
    result = (HGHLG::OOTF *)(*(uint64_t (**)(HGHLG::OOTF *))(*(_QWORD *)v22 + 24))(v22);
  if (v15)
    return (HGHLG::OOTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  return result;
}

void sub_1B2CA75E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  _Unwind_Resume(exception_object);
}

uint64_t applyPremultiplyOnly@<X0>(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  HGPremultiply *v6;

  if (a2 == a3)
  {
    result = *a1;
    *a4 = result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  else
  {
    if (a2)
      result = FxSupport::newHGRefWithInput<HGUnpremultiply>(*a1, &v6);
    else
      result = FxSupport::newHGRefWithInput<HGPremultiply>(*a1, &v6);
    *a4 = (uint64_t)v6;
  }
  return result;
}

unint64_t getRGBNCLCFromRGBColorSpace(CGColorSpace *a1)
{
  int v1;
  unint64_t v3;
  int v4;

  v3 = PCGetNCLCCodeForColorSpace(a1);
  v4 = v1;
  if (PCNCLCCodeIsKnownRGB(&v3))
    return PCMakeRGBNCLCCode(v3, HIDWORD(v3));
  else
    return 0x200000002;
}

uint64_t FxSupport::newHGRefWithInput<HGUnpremultiply>@<X0>(uint64_t a1@<X0>, HGUnpremultiply **a2@<X8>)
{
  HGUnpremultiply *v4;

  v4 = (HGUnpremultiply *)HGObject::operator new(0x1A0uLL);
  HGUnpremultiply::HGUnpremultiply(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGUnpremultiply *, _QWORD, uint64_t))(*(_QWORD *)v4 + 120))(v4, 0, a1);
}

void sub_1B2CA77A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::newHGRefWithInput<HGPremultiply>@<X0>(uint64_t a1@<X0>, HGPremultiply **a2@<X8>)
{
  HGPremultiply *v4;

  v4 = (HGPremultiply *)HGObject::operator new(0x1A0uLL);
  HGPremultiply::HGPremultiply(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGPremultiply *, _QWORD, uint64_t))(*(_QWORD *)v4 + 120))(v4, 0, a1);
}

void sub_1B2CA782C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t getHGTransfer(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) - 8;
  if (v1 > 0xA)
    return 1;
  else
    return dword_1B3557844[v1];
}

uint64_t FxSupport::newHGRefWithInput<HGColorConform>@<X0>(uint64_t a1@<X0>, HGColorConform **a2@<X8>)
{
  HGColorConform *v4;

  v4 = (HGColorConform *)HGObject::operator new(0x320uLL);
  HGColorConform::HGColorConform(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGColorConform *, _QWORD, uint64_t))(*(_QWORD *)v4 + 120))(v4, 0, a1);
}

void sub_1B2CA78D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::newHGRefWithInput<HGHLG::SDRToHLG,HGHLG::SDRToHLG::SDRInputType &,HGHLG::SDRToHLG::ConversionMethod const&>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;

  v8 = HGObject::operator new(0x1B0uLL);
  HGHLG::SDRToHLG::SDRToHLG((uint64_t)v8, *a2, *a3);
  *a4 = v8;
  return (*(uint64_t (**)(void *, _QWORD, uint64_t))(*(_QWORD *)v8 + 120))(v8, 0, a1);
}

void sub_1B2CA7974(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::newHGRefWithInput<HGHLG::HLGToSDR,HGHLG::HLGToSDR::ConversionMethod const&>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;

  v6 = HGObject::operator new(0x1B0uLL);
  HGHLG::HLGToSDR::HLGToSDR((uint64_t)v6, *a2);
  *a3 = v6;
  return (*(uint64_t (**)(void *, _QWORD, uint64_t))(*(_QWORD *)v6 + 120))(v6, 0, a1);
}

void sub_1B2CA7A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::newHGRefWithInput<HGHLG::OOTF,HGHLG::OOTF::ColorPrimaries const&>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;

  v6 = HGObject::operator new(0x1C0uLL);
  HGHLG::OOTF::OOTF((uint64_t)v6, *a2, 100.0);
  *a3 = v6;
  return (*(uint64_t (**)(void *, _QWORD, uint64_t))(*(_QWORD *)v6 + 120))(v6, 0, a1);
}

void sub_1B2CA7A98(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::newHGRefWithInput<HGPQ::InverseOOTF>@<X0>(uint64_t a1@<X0>, HGPQ::InverseOOTF **a2@<X8>)
{
  HGPQ::InverseOOTF *v4;

  v4 = (HGPQ::InverseOOTF *)HGObject::operator new(0x1B0uLL);
  HGPQ::InverseOOTF::InverseOOTF(v4, 1, 100.0, 100.0);
  *a2 = v4;
  return (*(uint64_t (**)(HGPQ::InverseOOTF *, _QWORD, uint64_t))(*(_QWORD *)v4 + 120))(v4, 0, a1);
}

void sub_1B2CA7B34(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxApplyGradientBlendRequest@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, HGradientBlend **a3@<X8>)
{
  HGradientBlend *v6;

  v6 = (HGradientBlend *)HGObject::operator new(0x1A0uLL);
  HGradientBlend::HGradientBlend(v6);
  *a3 = v6;
  (*(void (**)(HGradientBlend *, _QWORD, _QWORD))(*(_QWORD *)v6 + 120))(v6, 0, *a1);
  return (*(uint64_t (**)(HGradientBlend *, uint64_t, _QWORD))(*(_QWORD *)v6 + 120))(v6, 1, *a2);
}

void sub_1B2CA7BD4(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::makeHeliumFormat(int a1)
{
  if ((a1 - 1) > 0x10)
    return 0;
  else
    return dword_1B35578B8[a1 - 1];
}

uint64_t FxSupport::createTextureHandleNode@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, HGBitmapLoader **a5@<X8>)
{
  unsigned int Name;
  unsigned int Width;
  unsigned int Height;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  HGBitmap *v16;
  HGObject *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  HGBitmapLoader *v21;
  uint64_t result;

  Name = ProGL::TextureHandle::getName((HGGLBlendingInfo **)a1);
  Width = ProGL::TextureHandle::getWidth((ProGL::Private::TextureImpl **)a1);
  Height = ProGL::TextureHandle::getHeight((ProGL::Private::TextureImpl **)a1);
  v13 = HGRectMake4i(*a4, a4[1], *a4 + Width, a4[1] + Height);
  v15 = v14;
  v16 = (HGBitmap *)HGObject::operator new(0xC8uLL);
  HGGLTexture::HGGLTexture((uint64_t)v16, v13, v15, a2, a3, Name, 1);
  v17 = (HGObject *)HGObject::operator new(0x20uLL);
  HGObject::HGObject(v17);
  *(_QWORD *)v17 = off_1E6563A90;
  v18 = *(_QWORD *)(a1 + 8);
  *((_QWORD *)v17 + 2) = *(_QWORD *)a1;
  *((_QWORD *)v17 + 3) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  HGBitmap::SetStorage(v16, v17);
  v21 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v21, v16);
  *a5 = v21;
  result = (*(uint64_t (**)(HGObject *))(*(_QWORD *)v17 + 24))(v17);
  if (v16)
    return (*(uint64_t (**)(HGBitmap *))(*(_QWORD *)v16 + 24))(v16);
  return result;
}

void sub_1B2CA7D58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  HGObject::operator delete(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

HGBitmapLoader *FxSupport::createBitmapNode@<X0>(PCBitmap **a1@<X0>, unsigned int *a2@<X1>, HGBitmapLoader **a3@<X8>)
{
  HGBitmap *v4;
  HGBitmapLoader *v5;
  HGBitmapLoader *result;
  HGBitmap *v7;

  FxSupport::pcBitmapToHGBitmap(a1, a2, &v7);
  v4 = v7;
  v5 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  result = HGBitmapLoader::HGBitmapLoader(v5, v4);
  *a3 = v5;
  if (v4)
    return (HGBitmapLoader *)(*(uint64_t (**)(HGBitmap *))(*(_QWORD *)v4 + 24))(v4);
  return result;
}

void sub_1B2CA7E34(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  HGObject::operator delete(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::pcBitmapToHGBitmap@<X0>(PCBitmap **a1@<X0>, unsigned int *a2@<X1>, HGBitmap **a3@<X8>)
{
  int v6;
  uint64_t HeliumFormat;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  HGObject *v13;
  PCBitmap *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int BytesPerRow;
  uint64_t AllocationSize;
  HGBitmap *v20;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*a1 + 8) + 48))(*((_QWORD *)*a1 + 8));
  HeliumFormat = FxSupport::makeHeliumFormat(v6);
  v8 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)*a1 + 16))(*a1);
  v9 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)*a1 + 24))(*a1);
  v10 = HGRectMake4i(*a2, a2[1], *a2 + v8, a2[1] + v9);
  v12 = v11;
  v13 = (HGObject *)HGObject::operator new(0x20uLL);
  HGObject::HGObject(v13);
  *(_QWORD *)v13 = off_1E6563AE0;
  v14 = a1[1];
  *((_QWORD *)v13 + 2) = *a1;
  *((_QWORD *)v13 + 3) = v14;
  if (v14)
  {
    v15 = (unint64_t *)((char *)v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*a1 + 8) + 16))(*((_QWORD *)*a1 + 8));
  BytesPerRow = PCBitmap::getBytesPerRow(*a1);
  AllocationSize = PCBitmap::getAllocationSize(*a1);
  v20 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v20, v10, v12, HeliumFormat, v17, BytesPerRow, AllocationSize);
  *a3 = v20;
  HGBitmap::SetStorage(v20, v13);
  return (*(uint64_t (**)(HGObject *))(*(_QWORD *)v13 + 24))(v13);
}

void sub_1B2CA7FC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::TextureHandleStorage::~TextureHandleStorage(_anonymous_namespace_::TextureHandleStorage *this)
{
  *(_QWORD *)this = off_1E6563A90;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  HGObject::~HGObject(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E6563A90;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  HGObject::~HGObject(this);
  HGObject::operator delete(v2);
}

void `anonymous namespace'::BitmapStorage::~BitmapStorage(_anonymous_namespace_::BitmapStorage *this)
{
  *(_QWORD *)this = off_1E6563AE0;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  HGObject::~HGObject(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E6563AE0;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  HGObject::~HGObject(this);
  HGObject::operator delete(v2);
}

double FxDeviceGetComputeDeviceForRenderer@<D0>(const HGRenderer *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *GPUComputeDeviceList;
  double result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  if (a1
  {
    GPUComputeDeviceList = HGComputeDeviceManager::GetGPUComputeDeviceList(a1);
    v6 = *(_QWORD *)*GPUComputeDeviceList;
    v5 = *(_QWORD *)(*GPUComputeDeviceList + 8);
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *a2 = v6;
    a2[1] = v5;
  }
  else
  {
    HGComputeDeviceManager::GetCPUComputeDevice(a1, &v9);
    result = *(double *)&v9;
    *(_OWORD *)a2 = v9;
  }
  return result;
}

uint64_t FxDeviceGetVirtualScreenForComputeDevice(uint64_t a1)
{
  HGGPUComputeDevice *v2;
  std::__shared_weak_count *v3;
  uint64_t GLVirtualScreen;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(HGGPUComputeDevice **)a1;
  if (!*((_DWORD *)v2 + 2))
    return 0xFFFFFFFFLL;
  if (*(void (***)(HGGPUComputeDevice *__hidden))v2 == off_1E6523A60)
  {
    v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  GLVirtualScreen = HGGPUComputeDevice::GetGLVirtualScreen(v2);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return GLVirtualScreen;
}

void sub_1B2CA8230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FxDeviceIsCPU(uint64_t result)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  unint64_t v4;

  if (result)
  {
    if (*(_QWORD *)result && **(_UNKNOWN ***)result == &unk_1E6523A40)
    {
      v1 = *(std::__shared_weak_count **)(result + 8);
      if (v1)
      {
        p_shared_owners = (unint64_t *)&v1->__shared_owners_;
        do
          v3 = __ldxr(p_shared_owners);
        while (__stxr(v3 + 1, p_shared_owners));
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
          std::__shared_weak_count::__release_weak(v1);
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t FxDeviceIsGPU(uint64_t result)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  unint64_t v4;

  if (result)
  {
    if (*(_QWORD *)result && **(void (****)(HGGPUComputeDevice *__hidden))result == off_1E6523A60)
    {
      v1 = *(std::__shared_weak_count **)(result + 8);
      if (v1)
      {
        p_shared_owners = (unint64_t *)&v1->__shared_owners_;
        do
          v3 = __ldxr(p_shared_owners);
        while (__stxr(v3 + 1, p_shared_owners));
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
          std::__shared_weak_count::__release_weak(v1);
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t *FxDeviceGetName(void (****a1)(HGGPUComputeDevice *__hidden this))
{
  void (***v2)(HGGPUComputeDevice *__hidden);
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unsigned __int8 v8;
  unint64_t *v10;
  unint64_t v11;

  if (a1)
  {
    if (FxDeviceIsGPU((uint64_t)a1))
    {
      v2 = *a1;
      if (!*a1)
        return (uint64_t *)(v2 + 8);
      if (*v2 == off_1E6523A60)
      {
        v3 = (std::__shared_weak_count *)a1[1];
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldxr(p_shared_owners);
          while (__stxr(v5 + 1, p_shared_owners));
          v6 = (uint64_t *)(v2 + 8);
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          goto LABEL_24;
        }
        return (uint64_t *)(v2 + 8);
      }
      goto LABEL_14;
    }
    if (FxDeviceIsCPU((uint64_t)a1))
    {
      v2 = *a1;
      if (!*a1)
        return (uint64_t *)(v2 + 8);
      if (*v2 == (void (**)(HGGPUComputeDevice *__hidden))&unk_1E6523A40)
      {
        v3 = (std::__shared_weak_count *)a1[1];
        if (v3)
        {
          v10 = (unint64_t *)&v3->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          v6 = (uint64_t *)(v2 + 8);
          do
            v7 = __ldaxr(v10);
          while (__stlxr(v7 - 1, v10));
LABEL_24:
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
          return v6;
        }
        return (uint64_t *)(v2 + 8);
      }
LABEL_14:
      v2 = 0;
      return (uint64_t *)(v2 + 8);
    }
  }
  if ((v8 & 1) != 0)
    return &FxDeviceGetName(FxDevice const*)::empty;
  v6 = &FxDeviceGetName(FxDevice const*)::empty;
  {
    FxDeviceGetName(FxDevice const*)::empty = 0;
    *(_QWORD *)algn_1EF075AA8 = 0;
    qword_1EF075AB0 = 0;
    __cxa_atexit(MEMORY[0x1E0DE44D0], &FxDeviceGetName(FxDevice const*)::empty, &dword_1B2737000);
  }
  return v6;
}

uint64_t FxDeviceGetMemorySize(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (!FxDeviceIsGPU((uint64_t)a1))
    return 0;
  v2 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3)
    return *(_QWORD *)(v2 + 112);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  v6 = *(_QWORD *)(v2 + 112);
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

BOOL FxDeviceIsHeadless(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BOOL8 v6;
  unint64_t v7;

  if (!FxDeviceIsGPU((uint64_t)a1))
    return 0;
  v2 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3)
    return *(_BYTE *)(v2 + 154) != 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  v6 = *(unsigned __int8 *)(v2 + 154) != 0;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

BOOL FxDeviceIsRemovable(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BOOL8 v6;
  unint64_t v7;

  if (!FxDeviceIsGPU((uint64_t)a1))
    return 0;
  v2 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3)
    return *(_BYTE *)(v2 + 153) != 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  v6 = *(unsigned __int8 *)(v2 + 153) != 0;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

uint64_t FxDeviceIsDisplayAttached(TXParagraphStyleFolder_Factory **a1)
{
  TXParagraphStyleFolder_Factory *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (!FxDeviceIsGPU((uint64_t)a1))
    return 0;
  v2 = *a1;
  if (*a1 && *(void (***)(HGGPUComputeDevice *__hidden))v2 == off_1E6523A60)
  {
    v3 = (std::__shared_weak_count *)a1[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  v4 = TXParagraphStyleFolder_Factory::version(v2);
  if (v3)
  {
    v5 = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v4;
}

void sub_1B2CA873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL operator<(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a2)
    return 0;
  if (*(_BYTE *)a1)
    return 1;
  return *(_QWORD *)(a1 + 8) < *(_QWORD *)(a2 + 8);
}

uint64_t makeDeviceKeyForFxDevice(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  if (!FxDeviceIsGPU(a1))
    return 1;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return 0;
}

uint64_t FxDeviceSortOrder(uint64_t a1, uint64_t a2)
{
  char DeviceKeyForFxDevice;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  BOOL v8;
  unsigned int v9;

  DeviceKeyForFxDevice = makeDeviceKeyForFxDevice(a1);
  v5 = v4;
  v6 = makeDeviceKeyForFxDevice(a2);
  if (DeviceKeyForFxDevice)
    v8 = 0;
  else
    v8 = v5 >= v7;
  v9 = !v8;
  if (v6)
    return 0;
  else
    return v9;
}

uint64_t *FxDeviceGetDeviceForHGDevice(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;

  v1 = *a1;
  if (!*a1)
    return 0;
  if (*(_DWORD *)(v1 + 8) == 1)
  {
    v2 = *(_QWORD *)(v1 + 96);
    *(_QWORD *)&v4 = 0;
    *((_QWORD *)&v4 + 1) = v2;
  }
  else
  {
    v4 = xmmword_1B3056A60;
  }
  return getFxDeviceForDeviceKey(&v4, a1);
}

uint64_t *getFxDeviceForDeviceKey(_OWORD *a1, _QWORD *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  PCMutex *v15;
  _QWORD *v16;
  __int128 v17;
  PCMutex *v18;
  char v19;

  {
    v15 = (PCMutex *)operator new();
    PCMutex::PCMutex(v15);
    getSingletonLock(void)::mutex = (uint64_t)v15;
  }
  v18 = (PCMutex *)getSingletonLock(void)::mutex;
  PCMutex::lock((PCMutex *)getSingletonLock(void)::mutex);
  v19 = 1;
  {
    v16 = (_QWORD *)operator new();
    v16[2] = 0;
    v16[1] = 0;
    *v16 = v16 + 1;
    getSingletonMap(void)::result = (uint64_t)v16;
  }
  v6 = (uint64_t **)getSingletonMap(void)::result;
  v7 = std::__tree<std::__value_type<FxDeviceKey,FxDeviceObj const>,std::__map_value_compare<FxDeviceKey,std::__value_type<FxDeviceKey,FxDeviceObj const>,std::less<FxDeviceKey>,true>,std::allocator<std::__value_type<FxDeviceKey,FxDeviceObj const>>>::find<FxDeviceKey>(getSingletonMap(void)::result, (uint64_t)a1);
  if (v6 + 1 == (uint64_t **)v7)
  {
    v9 = a2[1];
    *(_QWORD *)&v17 = *a2;
    *((_QWORD *)&v17 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v7 = std::__tree<std::__value_type<FxDeviceKey,FxDeviceObj const>,std::__map_value_compare<FxDeviceKey,std::__value_type<FxDeviceKey,FxDeviceObj const>,std::less<FxDeviceKey>,true>,std::allocator<std::__value_type<FxDeviceKey,FxDeviceObj const>>>::__emplace_unique_key_args<FxDeviceKey,FxDeviceKey const&,FxDeviceObj>(v6, (uint64_t)a1, a1, &v17);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  if (v18 && v19)
    PCMutex::unlock(v18);
  return v7 + 6;
}

void sub_1B2CA8A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FxDeviceGetVirtualScreen(HGGPUComputeDevice **a1)
{
  HGGPUComputeDevice *v2;
  std::__shared_weak_count *v3;
  uint64_t GLVirtualScreen;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (!FxDeviceIsGPU((uint64_t)a1))
    return 0xFFFFFFFFLL;
  if (a1 && (v2 = *a1) != 0 && *(void (***)(HGGPUComputeDevice *__hidden))v2 == off_1E6523A60)
  {
    v3 = (std::__shared_weak_count *)a1[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  GLVirtualScreen = HGGPUComputeDevice::GetGLVirtualScreen(v2);
  if (v3)
  {
    v5 = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return GLVirtualScreen;
}

void sub_1B2CA8B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL FxDeviceIsSharedGPU(HGGPUComputeDevice **a1)
{
  return (int)FxDeviceGetVirtualScreen(a1) >= 0;
}

uint64_t FxDeviceGetLogStdString(void (****a1)(HGGPUComputeDevice *__hidden this))
{
  uint64_t *Name;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t MemorySize;
  const char *v7;
  const char *v8;
  const char *v9;
  _QWORD *v10;
  size_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  _BOOL4 IsHeadless;
  _QWORD *v16;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  Name = FxDeviceGetName(a1);
  v3 = *((char *)Name + 23);
  if (v3 >= 0)
    v4 = (uint64_t)Name;
  else
    v4 = *Name;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)Name + 23);
  else
    v5 = Name[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v4, v5);
  if (FxDeviceIsGPU((uint64_t)a1))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" (", 2);
    MemorySize = FxDeviceGetMemorySize((uint64_t *)a1);
    v7 = "KB";
    v8 = "MB";
    if (MemorySize >> 20 >= 0x401)
      v8 = "GB";
    if (MemorySize >> 10 >= 0x401)
      v7 = v8;
    if (MemorySize >= 0x401)
      v9 = v7;
    else
      v9 = "B";
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v9, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
    if (FxDeviceIsRemovable((uint64_t *)a1))
      v12 = "external";
    else
      v12 = "internal";
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v12, 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
    if ((FxDeviceIsDisplayAttached((TXParagraphStyleFolder_Factory **)a1) & 1) != 0)
    {
      v13 = "has display";
      v14 = 11;
    }
    else
    {
      IsHeadless = FxDeviceIsHeadless((uint64_t *)a1);
      if (IsHeadless)
        v13 = "headless";
      else
        v13 = "no display";
      if (IsHeadless)
        v14 = 8;
      else
        v14 = 10;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", virtual screen ", 17);
    FxDeviceGetVirtualScreen((HGGPUComputeDevice **)a1);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)")", 1);
  }
  else
  {
    FxDeviceIsCPU((uint64_t)a1);
  }
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](&v20);
}

void sub_1B2CA8E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<FxDeviceKey,FxDeviceObj const>,std::__map_value_compare<FxDeviceKey,std::__value_type<FxDeviceKey,FxDeviceObj const>,std::less<FxDeviceKey>,true>,std::allocator<std::__value_type<FxDeviceKey,FxDeviceObj const>>>::find<FxDeviceKey>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v2;
  do
  {
    if (*(_BYTE *)a2)
    {
      v6 = v3;
    }
    else if (*((_BYTE *)v3 + 32))
    {
      ++v3;
    }
    else if (v3[5] < v5)
    {
      ++v3;
    }
    else
    {
      v6 = v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v6 == v2 || !*((_BYTE *)v6 + 32) && (*(_BYTE *)a2 || v5 < v6[5]))
    return v2;
  return v6;
}

uint64_t *std::__tree<std::__value_type<FxDeviceKey,FxDeviceObj const>,std::__map_value_compare<FxDeviceKey,std::__value_type<FxDeviceKey,FxDeviceObj const>,std::less<FxDeviceKey>,true>,std::allocator<std::__value_type<FxDeviceKey,FxDeviceObj const>>>::__emplace_unique_key_args<FxDeviceKey,FxDeviceKey const&,FxDeviceObj>(uint64_t **a1, uint64_t a2, _OWORD *a3, __int128 *a4)
{
  void **v7;
  uint64_t *v8;
  uint64_t **v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v7 = (void **)std::__tree<std::__value_type<FxDeviceKey,FxDeviceObj const>,std::__map_value_compare<FxDeviceKey,std::__value_type<FxDeviceKey,FxDeviceObj const>,std::less<FxDeviceKey>,true>,std::allocator<std::__value_type<FxDeviceKey,FxDeviceObj const>>>::__find_equal<FxDeviceKey>((uint64_t)a1, &v14, a2);
  v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (uint64_t *)operator new(0x40uLL);
    v12[1] = a1 + 1;
    v10 = *a4;
    *((_OWORD *)v8 + 2) = *a3;
    *((_OWORD *)v8 + 3) = v10;
    *(_QWORD *)a4 = 0;
    *((_QWORD *)a4 + 1) = 0;
    v13 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v14, v9, v8);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<FxDeviceKey,FxDeviceObj const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<FxDeviceKey,FxDeviceObj const>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<FxDeviceKey,FxDeviceObj const>,std::__map_value_compare<FxDeviceKey,std::__value_type<FxDeviceKey,FxDeviceObj const>,std::less<FxDeviceKey>,true>,std::allocator<std::__value_type<FxDeviceKey,FxDeviceObj const>>>::__find_equal<FxDeviceKey>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  v5 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *(_QWORD *)(a3 + 8);
    while (1)
    {
      v7 = (_QWORD *)v4;
      if (*(_BYTE *)(v4 + 32))
        break;
      if (*(_BYTE *)a3 || (v8 = *(_QWORD *)(v4 + 40), v6 < v8))
      {
        v4 = *v7;
        result = v7;
        if (!*v7)
          goto LABEL_14;
      }
      else
      {
        if (v8 >= v6)
          goto LABEL_14;
LABEL_5:
        result = v7 + 1;
        v4 = v7[1];
        if (!v4)
          goto LABEL_14;
      }
    }
    if (*(_BYTE *)a3)
      goto LABEL_14;
    goto LABEL_5;
  }
  v7 = result;
LABEL_14:
  *a2 = v7;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<FxDeviceKey,FxDeviceObj const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<FxDeviceKey,FxDeviceObj const>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 48);
    operator delete(v2);
  }
}

void HSmearToRect::~HSmearToRect(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6563B30;
  v2 = *((_QWORD *)this + 56);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HgcSmearToRect::~HgcSmearToRect(this);
}

{
  void *v1;

  HSmearToRect::~HSmearToRect(this);
  HGObject::operator delete(v1);
}

uint64_t HSmearToRect::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  HGNode *Input;
  uint64_t v8;
  int32x2_t v9;
  int64x2_t v10;
  float64x2_t v11;
  int32x2_t v12;
  HGRect v14[2];
  int32x2_t v15;
  int32x2_t v16;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    Input = HGRenderer::GetInput(a2, this, 0);
    *(_QWORD *)&v14[0].var0 = HGRenderer::GetDOD(a2, Input);
    *(_QWORD *)&v14[0].var2 = v8;
    Effect_toPCRecti(v14, (uint64_t)&v15);
    v9 = vadd_s32(v15, (int32x2_t)-1);
    v10.i64[0] = v9.i32[0];
    v10.i64[1] = v9.i32[1];
    v11 = vcvtq_f64_s64(v10);
    v12 = vadd_s32(v16, (int32x2_t)0x200000002);
    v10.i64[0] = v12.i32[0];
    v10.i64[1] = v12.i32[1];
    v14[0] = (HGRect)v11;
    v14[1] = (HGRect)vcvtq_f64_s64(v10);
    if (PCRect<double>::contains((double *)this + 52, (double *)&v14[0].var0))
      return HGRectMake4i(v15.u32[0], v15.u32[1], v16.i32[0] + v15.i32[0], v16.i32[1] + v15.i32[1]);
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

BOOL PCRect<double>::contains(double *a1, double *a2)
{
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v2 = a2[2];
  v3 = 1;
  if (v2 >= 0.0)
  {
    v4 = a2[3];
    if (v4 >= 0.0)
    {
      v5 = a1[2];
      if (v5 >= 0.0
        && (v6 = a1[3], v6 >= 0.0)
        && *a1 <= *a2
        && v5 + *a1 >= v2 + *a2
        && (v7 = a1[1], v8 = a2[1], v7 <= v8))
      {
        return v7 + v6 >= v8 + v4;
      }
      else
      {
        return 0;
      }
    }
  }
  return v3;
}

uint64_t HSmearToRect::GetROI(HSmearToRect *this, HGRenderer *a2, int a3, HGRect a4)
{
  double v5;
  double v6;
  signed int v7;
  signed int v8;
  double v9;
  signed int v10;
  signed int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  signed int v21;
  signed int v22;
  int v23;
  int v24;
  HGRect v25;

  if (a3)
    return 0;
  v6 = *((double *)this + 52);
  v5 = *((double *)this + 53);
  v7 = vcvtmd_s64_f64(v6 + 0.0000001);
  v8 = vcvtpd_s64_f64(v6 + *((double *)this + 54));
  v9 = v5 + *((double *)this + 55);
  v25 = a4;
  if (v8 - 2 < a4.var0)
    v25.var0 = v8 - 2;
  v10 = vcvtpd_s64_f64(v9);
  if (v7 + 2 > a4.var2)
    v25.var2 = v7 + 2;
  v11 = vcvtmd_s64_f64(v5 + 0.0000001);
  if (v10 - 2 < a4.var1)
    v25.var1 = v10 - 2;
  if (v11 + 2 > a4.var3)
    v25.var3 = v11 + 2;
  Effect_toPCRecti(&v25, (uint64_t)&v21);
  if (v21 <= v7)
    v12 = v7;
  else
    v12 = v21;
  if (v23 + v21 >= v8)
    v13 = v8;
  else
    v13 = v23 + v21;
  if (v22 <= v11)
    v14 = v11;
  else
    v14 = v22;
  if (v24 + v22 >= v10)
    v15 = v10;
  else
    v15 = v24 + v22;
  v16 = HGRectMake4i(v12, v14, v13, v15);
  v18 = v17;
  v20 = HGRectMake4f(v19, -1.0, -1.0, 1.0, 1.0);
  return HGRectGrow(v16, v18, v20);
}

HGNode *HSmearToRect::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  uint64_t v5;
  double v6;
  int v7;
  double v8;
  int v9;
  HGCrop *v10;
  double v11;
  double v12;
  float v13;
  float v14;
  HGTextureWrap *v15;
  HGTextureWrap *v16;
  char *v18;
  double v19[4];
  HGRect v20;
  double v21;
  double v22;
  int v23;
  int v24;
  int v25;
  int v26;

  Input = HGRenderer::GetInput(a2, this, 0);
  *(_QWORD *)&v20.var0 = HGRenderer::GetDOD(a2, Input);
  *(_QWORD *)&v20.var2 = v5;
  Effect_toPCRecti(&v20, (uint64_t)&v23);
  *(double *)&v20.var0 = (double)v23;
  *(double *)&v20.var2 = (double)v24;
  v21 = (double)v25;
  v22 = (double)v26;
  v19[0] = (double)(v23 - 1);
  v19[1] = (double)(v24 - 1);
  v19[2] = (double)(v25 + 2);
  v19[3] = (double)(v26 + 2);
  if (!PCRect<double>::contains((double *)this + 52, v19))
  {
    if (PCRect<double>::contains((double *)&v20.var0, (double *)this + 52)
      && (v6 = *((double *)this + 52), v7 = vcvtmd_s64_f64(v6 + 0.5 + 0.0000001), vabdd_f64(v6, (double)v7) < 0.0000001)
      && vabdd_f64(v6 + *((double *)this + 54), (double)v7 + (double)(int)(vcvtmd_s64_f64(v6 + *((double *)this + 54) + 0.5 + 0.0000001) - v7)) < 0.0000001&& (v8 = *((double *)this + 53), v9 = vcvtmd_s64_f64(v8 + 0.5 + 0.0000001), vabdd_f64(v8 + *((double *)this + 55), (double)v9 + (double)(int)(vcvtmd_s64_f64(v8 + *((double *)this + 55) + 0.5 + 0.0000001) - v9)) < 0.0000001)&& vabdd_f64(v8, (double)v9) < 0.0000001)
    {
      v10 = (HGCrop *)HGObject::operator new(0x1A0uLL);
      HGCrop::HGCrop(v10);
      v11 = *((double *)this + 52);
      v12 = *((double *)this + 53);
      v13 = v11;
      v14 = v12;
      *(float *)&v11 = v11 + *((double *)this + 54);
      *(float *)&v12 = v12 + *((double *)this + 55);
      (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v10 + 96))(v10, 0, v13, v14, *(float *)&v11, *(float *)&v12);
      (*(void (**)(HGCrop *, _QWORD, HGNode *))(*(_QWORD *)v10 + 120))(v10, 0, Input);
      v15 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
      HGTextureWrap::HGTextureWrap(v15);
      v16 = (HGTextureWrap *)*((_QWORD *)this + 56);
      if (v16 == v15)
      {
        (*(void (**)(HGTextureWrap *))(*(_QWORD *)v15 + 24))(v15);
        v15 = (HGTextureWrap *)*((_QWORD *)this + 56);
      }
      else
      {
        if (v16)
          (*(void (**)(HGTextureWrap *))(*(_QWORD *)v16 + 24))(v16);
        *((_QWORD *)this + 56) = v15;
      }
      (*(void (**)(HGTextureWrap *, _QWORD, HGCrop *))(*(_QWORD *)v15 + 120))(v15, 0, v10);
      HGTextureWrap::SetTextureWrapMode(*((_QWORD *)this + 56), (const char *)1, v18);
      Input = (HGNode *)*((_QWORD *)this + 56);
      (*(void (**)(HGCrop *))(*(_QWORD *)v10 + 24))(v10);
    }
    else
    {
      return this;
    }
  }
  return Input;
}

void sub_1B2CA9540(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HSmearToRect::setRect(_OWORD *a1, uint64_t a2)
{
  __int128 v2;
  double v3;
  float v4;
  float v5;

  v2 = *(_OWORD *)(a2 + 16);
  a1[26] = *(_OWORD *)a2;
  a1[27] = v2;
  v3 = *(double *)(a2 + 8);
  v4 = *(double *)a2 + 0.5;
  *(float *)&v2 = v3 + 0.5;
  v5 = *(double *)a2 + *(double *)(a2 + 16) + -0.5;
  *(float *)&v3 = v3 + *(double *)(a2 + 24) + -0.5;
  return (*(uint64_t (**)(_OWORD *, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, v4, *(float *)&v2, v5, *(float *)&v3);
}

uint64_t Fx_smearToRect@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, HgcSmearToRect **a3@<X8>)
{
  HgcSmearToRect *v6;
  uint64_t result;

  v6 = (HgcSmearToRect *)HGObject::operator new(0x1D0uLL);
  HgcSmearToRect::HgcSmearToRect(v6);
  *(_QWORD *)v6 = off_1E6563B30;
  *((_QWORD *)v6 + 52) = 0;
  *((_QWORD *)v6 + 53) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)v6 + 27) = _Q0;
  *((_QWORD *)v6 + 56) = 0;
  HSmearToRect::setRect(v6, a2);
  result = (*(uint64_t (**)(HgcSmearToRect *, _QWORD, _QWORD))(*(_QWORD *)v6 + 120))(v6, 0, *a1);
  *a3 = v6;
  return result;
}

void sub_1B2CA9678(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

HGColorGamma *PAECreateGammaEncodingNode(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, char a5, char a6)
{
  HGColorGamma *v12;
  char *v13;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;

  v12 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
  HGColorGamma::HGColorGamma(v12);
  if (a1)
    (*(void (**)(HGColorGamma *, _QWORD, uint64_t))(*(_QWORD *)v12 + 120))(v12, 0, a1);
  if (a4 == 3)
  {
    __asm { FMOV            V0.4S, #1.0 }
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = (uint64_t)v12;
    v26 = 15;
    goto LABEL_7;
  }
  if (a4 == 1)
  {
    __asm { FMOV            V0.4S, #1.0 }
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = (uint64_t)v12;
    v26 = 16;
LABEL_7:
    HGColorGamma::SetGammaFunction(v25, v26, v13, _Q0, v19, v20, v21, v22, v23, v24);
    goto LABEL_18;
  }
  if (a2 > 2)
    v27 = 0;
  else
    v27 = dword_1B355792C[a2];
  if (a3 > 2)
    v28 = 0;
  else
    v28 = dword_1B355792C[a3];
  if (a4 > 4)
    v29 = 1;
  else
    v29 = dword_1B3557918[a4];
  HGColorGamma::SetConversion((uint64_t)v12, v27, (char *)8, 0, v28, v29, 0);
LABEL_18:
  HGColorGamma::SetPremultiplyState(v12, a5, a6);
  return v12;
}

void sub_1B2CA97FC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

HGColorGamma *PAECreateGammaDecodingNode(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, char a5, char a6)
{
  HGColorGamma *v12;
  char *v13;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;

  v12 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
  HGColorGamma::HGColorGamma(v12);
  if (a1)
    (*(void (**)(HGColorGamma *, _QWORD, uint64_t))(*(_QWORD *)v12 + 120))(v12, 0, a1);
  if (a4 == 3)
  {
    __asm { FMOV            V0.4S, #1.0 }
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = (uint64_t)v12;
    v26 = 14;
    goto LABEL_7;
  }
  if (a4 == 1)
  {
    __asm { FMOV            V0.4S, #1.0 }
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = (uint64_t)v12;
    v26 = 17;
LABEL_7:
    HGColorGamma::SetGammaFunction(v25, v26, v13, _Q0, v19, v20, v21, v22, v23, v24);
    goto LABEL_18;
  }
  if (a2 > 2)
    v27 = 0;
  else
    v27 = dword_1B355792C[a2];
  if (a4 > 4)
    v28 = 1;
  else
    v28 = dword_1B3557918[a4];
  if (a3 > 2)
    v29 = 0;
  else
    v29 = dword_1B355792C[a3];
  HGColorGamma::SetConversion((uint64_t)v12, v27, (char *)v28, 0, v29, 8, 0);
LABEL_18:
  HGColorGamma::SetPremultiplyState(v12, a5, a6);
  return v12;
}

void sub_1B2CA9964(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PAEUploadBitmap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  HGTexture *v6;
  HGBitmapLoader *v7;

  v6 = (HGTexture *)HGObject::operator new(0x80uLL);
  HGTexture::HGTexture(v6, *(HGRect *)(a1 + 20), (HGBitmap *)a1);
  v7 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v7, (HGBitmap *)v6);
  (*(void (**)(HGTexture *))(*(_QWORD *)v6 + 24))(v6);
  (*(void (**)(uint64_t, uint64_t, HGBitmapLoader *))(*(_QWORD *)a2 + 120))(a2, a3, v7);
  return (*(uint64_t (**)(HGBitmapLoader *))(*(_QWORD *)v7 + 24))(v7);
}

void sub_1B2CA9A08(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PAEUpload3DLUTEvaluator(void *a1, HGNode **a2, uint64_t a3)
{
  int v6;
  float v7;
  float v8;
  HGNode *v9;
  HGNode *v10;

  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 24))(a1);
  v7 = (*(float (**)(void *))(*(_QWORD *)a1 + 32))(a1);
  v8 = (*(float (**)(void *))(*(_QWORD *)a1 + 40))(a1) - v7;
  v9 = (HGNode *)HGObject::operator new(0x210uLL);
  HGApply3DLUT::HGApply3DLUT(v9, v6, 0x19u, 1, 0, 1, 1, 1, v8, v7, 0.0, 1.0, 0.0, 0.0, 0);
  v10 = *a2;
  if (*a2 == v9)
  {
    if (v9)
      (*(void (**)(HGNode *))(*(_QWORD *)v9 + 24))(v9);
  }
  else
  {
    if (v10)
      (*(void (**)(HGNode *))(*(_QWORD *)v10 + 24))(v10);
    *a2 = v9;
  }
  return (*(uint64_t (**)(HGNode *, _QWORD, uint64_t))(*(_QWORD *)v9 + 120))(v9, 0, a3);
}

void sub_1B2CA9B50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::Evaluate3DIndex(_anonymous_namespace_ *this, _DWORD *a2, float a3, float a4, float a5, float *a6, float *a7, float *a8, float *a9)
{
  __int128 v13;
  __int128 v14;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)&v13 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  *((_QWORD *)&v13 + 1) = LODWORD(a5);
  v17 = v13;
  v16 = 0uLL;
  (*(void (**)(_anonymous_namespace_ *, __int128 *, __int128 *, float *, float *, float *))(*(_QWORD *)this + 16))(this, &v17, &v16, a7, a8, a9);
  v14 = v16;
  *a2 = v16;
  *a6 = *((float *)&v14 + 1);
  *a7 = *((float *)&v14 + 2);
  *a8 = 1.0;
  return 0;
}

void NewEquirectWrapNode(float32x2_t *a1@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X2>, float32x2_t *a4@<X3>, float32x2_t *a5@<X4>, HGNode **a6@<X8>)
{
  HGNode *v12;

  v12 = (HGNode *)HGObject::operator new(0x1B0uLL);
  HGNode::HGNode(v12);
  *(_QWORD *)v12 = off_1E65649A0;
  *((_QWORD *)v12 + 51) = 0;
  *((_QWORD *)v12 + 52) = 0;
  HEquirectWrap::init((uint64_t)v12, a1, a2, a3, a4, a5);
  *a6 = v12;
}

void sub_1B2CA9C90(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxBalancedBlendRecord::FxBalancedBlendRecord(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5;

  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  *(double *)(a1 + 8) = a3;
  return a1;
}

uint64_t FxBalancedBlendRecord::node@<X0>(FxBalancedBlendRecord *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)this;
  *a2 = result;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t FxSupport::makeHeliumXForm@<X0>(double *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  HGTransform *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  HGXForm *v20;
  __n128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  if (PCMatrix44Tmpl<double>::is2Didentity(a1))
  {
    result = *a2;
    *a5 = *a2;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  else
  {
    v11 = (HGTransform *)HGObject::operator new(0x90uLL);
    HGTransform::HGTransform(v11);
    v12 = *((_OWORD *)a1 + 5);
    v28 = *((_OWORD *)a1 + 4);
    v29 = v12;
    v13 = *((_OWORD *)a1 + 7);
    v30 = *((_OWORD *)a1 + 6);
    v31 = v13;
    v14 = *((_OWORD *)a1 + 1);
    v23 = *(_OWORD *)a1;
    v24 = v14;
    v15 = *((_OWORD *)a1 + 3);
    v25 = *((_OWORD *)a1 + 2);
    v16 = *((_QWORD *)&v23 + 1);
    v17 = v24;
    v18 = *((_QWORD *)&v28 + 1);
    *((_QWORD *)&v23 + 1) = v25;
    *(_QWORD *)&v24 = v28;
    v19 = *((_QWORD *)&v29 + 1);
    *((_QWORD *)&v24 + 1) = v30;
    *(_QWORD *)&v25 = v16;
    *(_QWORD *)&v28 = v17;
    *((_QWORD *)&v28 + 1) = v15;
    v26 = v18;
    v27 = *((_QWORD *)&v30 + 1);
    *((_QWORD *)&v29 + 1) = v31;
    *(_QWORD *)&v30 = *((_QWORD *)&v17 + 1);
    *((_QWORD *)&v30 + 1) = *((_QWORD *)&v15 + 1);
    *(_QWORD *)&v31 = v19;
    (*(void (**)(HGTransform *, __int128 *))(*(_QWORD *)v11 + 72))(v11, &v23);
    v20 = (HGXForm *)HGObject::operator new(0x210uLL);
    HGXForm::HGXForm(v20);
    (*(void (**)(HGXForm *, HGTransform *))(*(_QWORD *)v20 + 576))(v20, v11);
    v22 = *(_QWORD *)v20;
    if (a3)
    {
      v21.n128_u32[0] = 8.0;
      if (!a4)
      {
        (*(void (**)(HGXForm *, _QWORD, float))(v22 + 592))(v20, 0, 1.0);
        v22 = *(_QWORD *)v20;
        v21.n128_u32[0] = 0;
      }
      (*(void (**)(HGXForm *, __n128))(v22 + 632))(v20, v21);
    }
    else
    {
      (*(void (**)(HGXForm *, _QWORD, float))(v22 + 592))(v20, 0, 0.0);
    }
    if (*a2)
      (*(void (**)(HGXForm *, _QWORD))(*(_QWORD *)v20 + 120))(v20, 0);
    *a5 = v20;
    return (*(uint64_t (**)(HGTransform *))(*(_QWORD *)v11 + 24))(v11);
  }
  return result;
}

void sub_1B2CA9EB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  HGObject::operator delete(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

BOOL PCMatrix44Tmpl<double>::is2Didentity(double *a1)
{
  double v1;

  v1 = a1[15];
  return fabs(v1) >= 0.0000001
      && fabs(a1[12]) < 0.0000001
      && fabs(a1[13]) < 0.0000001
      && vabdd_f64(*a1, v1) < 0.0000001
      && vabdd_f64(a1[5], v1) < 0.0000001
      && fabs(a1[1]) < 0.0000001
      && fabs(a1[3]) < 0.0000001
      && fabs(a1[4]) < 0.0000001
      && fabs(a1[7]) < 0.0000001;
}

uint64_t PCMatrix44Tmpl<double>::eigen22(uint64_t a1, PCMath *this, double *a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  double v9;
  uint64_t result;

  a7.i64[0] = *(_QWORD *)(a1 + 40);
  *(double *)a5.i64 = -(*(double *)a1 + *(double *)a7.i64);
  v9 = *(double *)a1 * *(double *)a7.i64 - *(double *)(a1 + 8) * *(double *)(a1 + 32);
  a7.i64[0] = 0x3E7AD7F29ABCAF48;
  result = PCMath::quadratic(this, 1.0, a5, v9, a3, a3, a7);
  if ((_DWORD)result == 1)
  {
    *a3 = *(double *)this;
    return 2;
  }
  return result;
}

uint64_t HContrastBezierRGB::GetDOD(HContrastBezierRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HContrastBezierRGB::GetROI(HContrastBezierRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 == 1)
  {
    v5 = HGRectMake4i(0, 0, 0x400u, 1u);
    v7 = v6;
    v8 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v5, v7, v8);
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)&a4.var0;
  }
}

uint64_t HContrastBezierLuma::GetDOD(HContrastBezierLuma *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HContrastBezierLuma::GetROI(HContrastBezierLuma *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 == 1)
  {
    v5 = HGRectMake4i(0, 0, 0x400u, 1u);
    v7 = v6;
    v8 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v5, v7, v8);
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)&a4.var0;
  }
}

void HContrastBezierRGB::~HContrastBezierRGB(HGNode *this)
{
  void *v1;

  HgcContrastBezierRGB::~HgcContrastBezierRGB(this);
  HGObject::operator delete(v1);
}

void HContrastBezierLuma::~HContrastBezierLuma(HGNode *this)
{
  void *v1;

  HgcContrastBezierLuma::~HgcContrastBezierLuma(this);
  HGObject::operator delete(v1);
}

uint64_t applyAlphaIgnore@<X0>(_QWORD *a1@<X0>, HgcStripAlpha **a2@<X8>)
{
  HgcStripAlpha *v4;

  v4 = (HgcStripAlpha *)HGObject::operator new(0x1A0uLL);
  HgcStripAlpha::HgcStripAlpha(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HgcStripAlpha *, _QWORD, _QWORD))(*(_QWORD *)v4 + 120))(v4, 0, *a1);
}

void sub_1B2CAA200(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t applyAlphaInvert@<X0>(_QWORD *a1@<X0>, HGInvertAlpha **a2@<X8>)
{
  HGInvertAlpha *v4;

  v4 = (HGInvertAlpha *)HGObject::operator new(0x1A0uLL);
  HGInvertAlpha::HGInvertAlpha(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGInvertAlpha *, _QWORD, _QWORD))(*(_QWORD *)v4 + 120))(v4, 0, *a1);
}

void sub_1B2CAA284(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t applyPremultiply@<X0>(_QWORD *a1@<X0>, HGPremultiply **a2@<X8>)
{
  HGPremultiply *v4;

  v4 = (HGPremultiply *)HGObject::operator new(0x1A0uLL);
  HGPremultiply::HGPremultiply(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGPremultiply *, _QWORD, _QWORD))(*(_QWORD *)v4 + 120))(v4, 0, *a1);
}

void sub_1B2CAA308(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t applyPremultiplyWhiteToBlack@<X0>(_QWORD *a1@<X0>, HGPremultiplyWhiteToBlack **a2@<X8>)
{
  HGPremultiplyWhiteToBlack *v4;

  v4 = (HGPremultiplyWhiteToBlack *)HGObject::operator new(0x1A0uLL);
  HGPremultiplyWhiteToBlack::HGPremultiplyWhiteToBlack(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGPremultiplyWhiteToBlack *, _QWORD, _QWORD))(*(_QWORD *)v4 + 120))(v4, 0, *a1);
}

void sub_1B2CAA38C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t applyClamp@<X0>(_QWORD *a1@<X0>, HgcClampToAlpha **a2@<X8>)
{
  HgcClampToAlpha *v4;

  v4 = (HgcClampToAlpha *)HGObject::operator new(0x1A0uLL);
  HgcClampToAlpha::HgcClampToAlpha(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HgcClampToAlpha *, _QWORD, _QWORD))(*(_QWORD *)v4 + 120))(v4, 0, *a1);
}

void sub_1B2CAA410(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

HGPremultiply **FxApplyAlphaRequest@<X0>(HGPremultiply **result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, HGPremultiply **a5@<X8>)
{
  HGPremultiply *v9;
  HGPremultiply *v10;
  HGPremultiply *v11;
  HGPremultiply *v12;
  HGPremultiply *v13;
  HGPremultiply *v14;

  v9 = *result;
  *a5 = *result;
  if (v9)
    result = (HGPremultiply **)(*(uint64_t (**)(HGPremultiply *))(*(_QWORD *)v9 + 16))(v9);
  switch(a2)
  {
    case 0:
      result = (HGPremultiply **)applyAlphaIgnore(a5, &v14);
      v10 = v14;
      if (v9 != v14)
      {
        if (!v9)
          goto LABEL_41;
        goto LABEL_40;
      }
      if (!v9)
        goto LABEL_53;
      goto LABEL_52;
    case 1:
      if (a3)
      {
        applyAlphaInvert(a5, &v14);
        v11 = v14;
        if (v9 == v14)
        {
          if (v9)
          {
            (*(void (**)(HGPremultiply *))(*(_QWORD *)v9 + 24))(v9);
            v11 = v9;
          }
          else
          {
            v11 = 0;
          }
        }
        else
        {
          if (v9)
            (*(void (**)(HGPremultiply *))(*(_QWORD *)v9 + 24))(v9);
          *a5 = v11;
        }
        v9 = v11;
      }
      result = (HGPremultiply **)applyPremultiply(a5, &v14);
      v10 = v14;
      if (v9 != v14)
      {
        if (!v9)
          goto LABEL_41;
        goto LABEL_40;
      }
      if (!v9)
        goto LABEL_53;
      goto LABEL_52;
    case 2:
      if (!a3)
        goto LABEL_43;
      result = (HGPremultiply **)applyAlphaInvert(a5, &v14);
      v10 = v14;
      if (v9 != v14)
      {
        if (!v9)
          goto LABEL_41;
        goto LABEL_40;
      }
      if (!v9)
        goto LABEL_53;
      goto LABEL_52;
    case 3:
      if (a3)
      {
        applyAlphaInvert(a5, &v14);
        v12 = v14;
        if (v9 == v14)
        {
          if (v9)
          {
            (*(void (**)(HGPremultiply *))(*(_QWORD *)v9 + 24))(v9);
            v12 = v9;
          }
          else
          {
            v12 = 0;
          }
        }
        else
        {
          if (v9)
            (*(void (**)(HGPremultiply *))(*(_QWORD *)v9 + 24))(v9);
          *a5 = v12;
        }
        v9 = v12;
      }
      result = (HGPremultiply **)applyPremultiplyWhiteToBlack(a5, &v14);
      v10 = v14;
      if (v9 == v14)
      {
        if (v9)
        {
LABEL_52:
          result = (HGPremultiply **)(*(uint64_t (**)(HGPremultiply *))(*(_QWORD *)v9 + 24))(v9);
          v10 = v9;
        }
        else
        {
LABEL_53:
          v10 = 0;
        }
      }
      else
      {
        if (v9)
LABEL_40:
          result = (HGPremultiply **)(*(uint64_t (**)(HGPremultiply *))(*(_QWORD *)v9 + 24))(v9);
LABEL_41:
        *a5 = v10;
      }
      v9 = v10;
LABEL_43:
      if (a4)
      {
        result = (HGPremultiply **)applyClamp(a5, &v14);
        v13 = v14;
        if (v9 == v14)
        {
          if (v9)
            return (HGPremultiply **)(*(uint64_t (**)(HGPremultiply *))(*(_QWORD *)v9 + 24))(v9);
        }
        else
        {
          if (v9)
            result = (HGPremultiply **)(*(uint64_t (**)(HGPremultiply *))(*(_QWORD *)v9 + 24))(v9);
          *a5 = v13;
        }
      }
      return result;
    default:
      goto LABEL_43;
  }
}

void sub_1B2CAA710(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
  _Unwind_Resume(exception_object);
}

void sub_1B2CAADD8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2CAADCCLL);
}

void sub_1B2CAB354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PAEGenerateNoise(int a1@<W0>, int a2@<W1>, int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, int a6@<W5>, HSampleTiledNoise **a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  int v15;
  int v16;
  unsigned __int8 v17;
  unint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unsigned __int8 v27;
  unint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned __int8 v35;
  unint64_t v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unsigned __int8 v43;
  unint64_t v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unsigned __int8 v51;
  unint64_t v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  HGBitmapLoader *v59;
  int v60;
  unsigned int v61;
  _BYTE *v62;
  _BYTE *v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  HGBitmapLoader *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  HSampleTiledNoise *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  float v78;
  HGaussianBlur *v79;
  HGHWBlendFlipped *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  PCBitmap *v89;
  std::__shared_weak_count *v90;
  __int128 v91;
  HGBitmapLoader *v92[312];
  __int128 v93;
  uint64_t v94;
  _OWORD v95[3];

  v15 = (int)(a9 + a9);
  v91 = 0uLL;
  if (a5)
    v16 = (int)(a9 + a9);
  else
    v16 = a6;
  switch(a3)
  {
    case 0:
      {
      }
      v18 = (unk_1EF075AC8 - getTVNoiseBitmap(int)::bitmaps[0]) >> 4;
      v19 = v16 % v18;
      if (v19 >= 0)
        LODWORD(v18) = 0;
      v20 = *(_OWORD *)(getTVNoiseBitmap(int)::bitmaps[0] + 16 * ((int)v18 + v19));
      v21 = *(_QWORD *)(getTVNoiseBitmap(int)::bitmaps[0] + 16 * ((int)v18 + v19) + 8);
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      v91 = v20;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        goto LABEL_54;
      }
      break;
    case 1:
      {
      }
      v52 = (unk_1EF075AE8 - getWhiteNoiseBitmap(int)::bitmaps[0]) >> 4;
      v53 = v16 % v52;
      if (v53 >= 0)
        LODWORD(v52) = 0;
      v54 = *(_OWORD *)(getWhiteNoiseBitmap(int)::bitmaps[0] + 16 * ((int)v52 + v53));
      v55 = *(_QWORD *)(getWhiteNoiseBitmap(int)::bitmaps[0] + 16 * ((int)v52 + v53) + 8);
      if (v55)
      {
        v56 = (unint64_t *)(v55 + 8);
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      v91 = v54;
      if (v24)
      {
        v58 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v58);
        while (__stlxr(v26 - 1, v58));
        goto LABEL_54;
      }
      break;
    case 2:
      {
      }
      v36 = (unk_1EF075B08 - getGaussianNoiseBitmap(int)::bitmaps[0]) >> 4;
      v37 = v16 % v36;
      if (v37 >= 0)
        LODWORD(v36) = 0;
      v38 = *(_OWORD *)(getGaussianNoiseBitmap(int)::bitmaps[0] + 16 * ((int)v36 + v37));
      v39 = *(_QWORD *)(getGaussianNoiseBitmap(int)::bitmaps[0] + 16 * ((int)v36 + v37) + 8);
      if (v39)
      {
        v40 = (unint64_t *)(v39 + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      v91 = v38;
      if (v24)
      {
        v42 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v42);
        while (__stlxr(v26 - 1, v42));
        goto LABEL_54;
      }
      break;
    case 3:
      {
      }
      v44 = (unk_1EF075B28 - getBlueNoiseBitmap(int)::bitmaps[0]) >> 4;
      v45 = v16 % v44;
      if (v45 >= 0)
        LODWORD(v44) = 0;
      v46 = *(_OWORD *)(getBlueNoiseBitmap(int)::bitmaps[0] + 16 * ((int)v44 + v45));
      v47 = *(_QWORD *)(getBlueNoiseBitmap(int)::bitmaps[0] + 16 * ((int)v44 + v45) + 8);
      if (v47)
      {
        v48 = (unint64_t *)(v47 + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      v91 = v46;
      if (v24)
      {
        v50 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v50);
        while (__stlxr(v26 - 1, v50));
        goto LABEL_54;
      }
      break;
    case 4:
      {
      }
      v28 = (unk_1EF075B48 - getPinkNoiseBitmap(int)::bitmaps[0]) >> 4;
      v29 = v16 % v28;
      if (v29 >= 0)
        LODWORD(v28) = 0;
      v30 = *(_OWORD *)(getPinkNoiseBitmap(int)::bitmaps[0] + 16 * ((int)v28 + v29));
      v31 = *(_QWORD *)(getPinkNoiseBitmap(int)::bitmaps[0] + 16 * ((int)v28 + v29) + 8);
      if (v31)
      {
        v32 = (unint64_t *)(v31 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      v91 = v30;
      if (v24)
      {
        v34 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v34);
        while (__stlxr(v26 - 1, v34));
LABEL_54:
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)&v95[0] = 0;
  FxSupport::createBitmapNode((PCBitmap **)&v91, (unsigned int *)v95, v92);
  v59 = v92[0];
  if (a5)
    v60 = v15 + 12321 * a6;
  else
    v60 = a6;
  std::vector<unsigned char>::vector(v95, 0x100uLL);
  v61 = v60 ^ ((int)(a4 << 31) >> 31);
  v63 = (_BYTE *)*((_QWORD *)&v95[0] + 1);
  v62 = *(_BYTE **)&v95[0];
  if (*(_QWORD *)&v95[0] != *((_QWORD *)&v95[0] + 1))
  {
    v64 = 0;
    do
      *v62++ = v64++;
    while (v62 != v63);
  }
  LODWORD(v92[0]) = v61;
  v65 = 1;
  v66 = v61;
  do
  {
    v66 = v65 + 1812433253 * (v66 ^ (v66 >> 30));
    *((_DWORD *)v92 + v65++) = v66;
  }
  while (v65 != 624);
  v93 = 0u;
  v94 = -1;
  PCRandomShuffle<std::__wrap_iter<unsigned char *>,Rand>(*(uint64_t *)&v95[0], *((char **)&v95[0] + 1), (uint64_t)v92);
  PCCreateBitmap(256, 1, 5, 1, (uint64_t)&v89);
  v67 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v89 + 8) + 16))(*((_QWORD *)v89 + 8));
  v68 = 0;
  v69 = (_BYTE *)(v67 + 1);
  do
  {
    *(v69 - 1) = *(_BYTE *)(*(_QWORD *)&v95[0] + v68);
    *v69 = *(_BYTE *)(*(_QWORD *)&v95[0] + v68);
    v69[1] = *(_BYTE *)(*(_QWORD *)&v95[0] + v68);
    v69[2] = -1;
    ++v68;
    v69 += 4;
  }
  while (v68 != 256);
  if (*(_QWORD *)&v95[0])
  {
    *((_QWORD *)&v95[0] + 1) = *(_QWORD *)&v95[0];
    operator delete(*(void **)&v95[0]);
  }
  *(_QWORD *)&v95[0] = 0;
  FxSupport::createBitmapNode(&v89, (unsigned int *)v95, v92);
  v70 = v92[0];
  *a7 = 0;
  v71 = 1;
  LODWORD(v92[0]) = v61;
  do
  {
    v61 = v71 + 1812433253 * (v61 ^ (v61 >> 30));
    *((_DWORD *)v92 + v71++) = v61;
  }
  while (v71 != 624);
  v93 = 0u;
  v94 = -1;
  v95[0] = xmmword_1B3557980;
  v72 = std::uniform_int_distribution<unsigned long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v93 + 8, (uint64_t)v92, v95);
  v95[0] = xmmword_1B3557980;
  v73 = std::uniform_int_distribution<unsigned long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v93 + 8, (uint64_t)v92, v95);
  v74 = (HSampleTiledNoise *)HGObject::operator new(0x1B0uLL);
  HSampleTiledNoise::HSampleTiledNoise(v74);
  (*(void (**)(HSampleTiledNoise *, uint64_t, HGBitmapLoader *))(*(_QWORD *)v74 + 120))(v74, 1, v59);
  (*(void (**)(HSampleTiledNoise *, _QWORD, HGBitmapLoader *))(*(_QWORD *)v74 + 120))(v74, 0, v70);
  (*(void (**)(PCBitmap *))(*(_QWORD *)v89 + 16))(v89);
  (*(void (**)(HSampleTiledNoise *, uint64_t, float, float, float, float))(*(_QWORD *)v74 + 96))(v74, 2, (float)v75, 0.0, 0.0, 0.0);
  v76 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v91 + 16))(v91);
  (*(void (**)(_QWORD))(*(_QWORD *)v91 + 24))(v91);
  (*(void (**)(HSampleTiledNoise *, _QWORD, float, float, float, float))(*(_QWORD *)v74 + 96))(v74, 0, (float)(v76 >> 6), (float)(v77 >> 6), 0.0, 0.0);
  (*(void (**)(HSampleTiledNoise *, uint64_t, float, float, float, float))(*(_QWORD *)v74 + 96))(v74, 1, 64.0, 64.0, 0.0, 0.0);
  (*(void (**)(HSampleTiledNoise *, uint64_t, float, float, float, float))(*(_QWORD *)v74 + 96))(v74, 3, (float)a4, 0.0, 0.0, 0.0);
  v78 = a8;
  (*(void (**)(HSampleTiledNoise *, uint64_t, float, float, float, float))(*(_QWORD *)v74 + 96))(v74, 4, v78, 0.0, 0.0, 0.0);
  HTarget::SetFrameSize((uint64_t)v74, a1, a2);
  (*(void (**)(HSampleTiledNoise *, uint64_t, float, float, float, float))(*(_QWORD *)v74 + 96))(v74, 5, (float)(unint64_t)v72, (float)(unint64_t)v73, 0.0, 0.0);
  *a7 = v74;
  (*(void (**)(HSampleTiledNoise *))(*(_QWORD *)v74 + 16))(v74);
  if (!a3)
  {
    HTarget::SetFrameSize((uint64_t)v74, (int)(float)((float)a1 + 40.0), a2);
    v79 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
    HGaussianBlur::HGaussianBlur(v79);
    HGaussianBlur::init(v79, 20.0, 1.0, 0.0, 0, 0, 0);
    (*(void (**)(HGaussianBlur *, _QWORD, HSampleTiledNoise *))(*(_QWORD *)v79 + 120))(v79, 0, v74);
    v80 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
    HGHWBlendFlipped::HGHWBlendFlipped(v80);
    (*(void (**)(HGHWBlendFlipped *, _QWORD, float, float, float, float))(*(_QWORD *)v80 + 96))(v80, 0, 9.0, 0.0, 0.0, 0.0);
    (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v80 + 96))(v80, 1, 0.2, 0.0, 0.0, 0.0);
    (*(void (**)(HGHWBlendFlipped *, _QWORD, HSampleTiledNoise *))(*(_QWORD *)v80 + 120))(v80, 0, v74);
    (*(void (**)(HGHWBlendFlipped *, uint64_t, HGaussianBlur *))(*(_QWORD *)v80 + 120))(v80, 1, v79);
    if (v74 != v80)
    {
      (*(void (**)(HSampleTiledNoise *))(*(_QWORD *)v74 + 24))(v74);
      *a7 = v80;
      (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v80 + 16))(v80);
    }
    (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v80 + 24))(v80);
    (*(void (**)(HGaussianBlur *))(*(_QWORD *)v79 + 24))(v79);
  }
  (*(void (**)(HSampleTiledNoise *))(*(_QWORD *)v74 + 24))(v74);
  if (v70)
    (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v70 + 24))(v70);
  v81 = v90;
  if (!v90)
    goto LABEL_80;
  v82 = (unint64_t *)&v90->__shared_owners_;
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v83 - 1, v82));
  if (v83)
  {
LABEL_80:
    if (!v59)
      goto LABEL_82;
    goto LABEL_81;
  }
  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
  std::__shared_weak_count::__release_weak(v81);
  if (v59)
LABEL_81:
    (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v59 + 24))(v59);
LABEL_82:
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
}

void sub_1B2CABDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::Bitmaps *`anonymous namespace'::Bitmaps::Bitmaps(_anonymous_namespace_::Bitmaps *this, const char *a2)
{
  Class v4;
  void *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;

  std::vector<std::shared_ptr<PCBitmap>>::vector(this, 3uLL);
  v4 = NSClassFromString(CFSTR("PVEffectAssets"));
  if (v4)
    v5 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", v4);
  else
    v5 = 0;
  v6 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), "isEqualToString:", objc_msgSend(v5, "bundleIdentifier"));
  if (v5)
    v7 = v6;
  else
    v7 = 1;
  if ((v7 & 1) == 0)
  {
    v8 = 0;
    do
    {
      v9 = v8 + 1;
      PCLoadBitmap((const __CFURL *)objc_msgSend(v5, "URLForResource:withExtension:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s%u"), a2, v8 + 1), CFSTR("tiff")), (uint64_t *)&v14);
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100](*(_QWORD *)this + 16 * v8, &v14);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
      if (*((_QWORD *)&v14 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v8 = v9;
    }
    while (v9 != 3);
  }
  return this;
}

void sub_1B2CAC0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::Bitmaps::~Bitmaps(void **this)
{
  void **v1;

  v1 = this;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_QWORD *std::vector<std::shared_ptr<PCBitmap>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1B2CAC198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t PCRandomShuffle<std::__wrap_iter<unsigned char *>,Rand>(uint64_t result, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD v12[12];

  if ((char *)result != a2)
  {
    v12[10] = v3;
    v12[11] = v4;
    v6 = result;
    v7 = (char *)(result + 1);
    if ((char *)(result + 1) != a2)
    {
      v9 = a3 + 2504;
      v10 = 0x200000000;
      do
      {
        v12[0] = 0;
        v12[1] = (v10 >> 32) - 1;
        result = std::uniform_int_distribution<unsigned long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(v9, a3, v12);
        v11 = *v7;
        *v7++ = *(_BYTE *)(v6 + result);
        *(_BYTE *)(v6 + result) = v11;
        v10 += 0x100000000;
      }
      while (v7 != a2);
    }
  }
  return result;
}

uint64_t std::uniform_int_distribution<unsigned long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0)
    v3 = (a3 >> 5) + 1;
  else
    v3 = a3 >> 5;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      v6 = 0;
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      *(_QWORD *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E)
    v6 = 0;
  else
    v6 = 0x80000000uLL >> v4 << (v4 + 1);
LABEL_13:
  *(_QWORD *)(result + 48) = v6;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  if (v4 >= 0x1F)
    v8 = -1;
  else
    v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      do
        v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(_QWORD *)(a1 + 40) <= (unint64_t)v4);
      v5 = *(_QWORD *)(a1 + 16);
      if (v5 >= 0x40)
        v6 = 0;
      else
        v6 = v2 << v5;
      v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      v7 = *(_QWORD *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    v2 = 0;
    v7 = 0;
  }
  for (; v7 < *(_QWORD *)(a1 + 24); ++v7)
  {
    do
      v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(_QWORD *)(a1 + 48) <= (unint64_t)v8);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 >= 0x3F)
      v10 = 0;
    else
      v10 = v2 << (v9 + 1);
    v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

BOOL Effect_toPCRecti@<W0>(const HGRect *a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;
  int32x2_t v5;
  int32x2_t v6;
  int32x2_t v7;

  *(_OWORD *)a2 = xmmword_1B30503B0;
  result = HGRectIsNull(*(_QWORD *)&a1->var0, *(_QWORD *)&a1->var2);
  if (result)
  {
    v5 = (int32x2_t)-1;
  }
  else
  {
    v6 = vmax_s32(*(int32x2_t *)&a1->var0, vdup_n_s32(0xC0000001));
    v7 = vmin_s32(*(int32x2_t *)&a1->var2, vdup_n_s32(0x3FFFFFFEu));
    *(int32x2_t *)a2 = v6;
    v5 = vsub_s32(v7, v6);
  }
  *(int32x2_t *)(a2 + 8) = v5;
  return result;
}

uint64_t FxSupport::makeHeliumCrop@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X1>, HGCrop **a3@<X8>)
{
  HGCrop *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;

  v6 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v6);
  (*(void (**)(HGCrop *, _QWORD, _QWORD))(*(_QWORD *)v6 + 120))(v6, 0, *a2);
  v7 = HGRectMake4i(*a1, a1[1], a1[2] + *a1, a1[3] + a1[1]);
  result = (*(uint64_t (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v6 + 96))(v6, 0, (float)(int)v7, (float)SHIDWORD(v7), (float)v8, (float)v9);
  *a3 = v6;
  return result;
}

void sub_1B2CAC624(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

__int128 *getFxTimeZero(void)
{
  unsigned __int8 v0;

  {
    getFxTimeZero(void)::kZeroTime = *MEMORY[0x1E0CA2E68];
    qword_1EF075B70 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  }
  return &getFxTimeZero(void)::kZeroTime;
}

__int128 *getFxTimeInvalid(void)
{
  unsigned __int8 v0;

  {
    getFxTimeInvalid(void)::kInvalidTime = *MEMORY[0x1E0CA2E18];
    qword_1EF075B90 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  return &getFxTimeInvalid(void)::kInvalidTime;
}

void sub_1B2CAC980(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t sub_1B2CACAF4()
{
  return 0;
}

void sub_1B2CACF40(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2CAD028(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2CAD0B4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
  _Unwind_Resume(exception_object);
}

void sub_1B2CAD200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  _Unwind_Resume(exception_object);
}

void sub_1B2CAD404(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 232);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

void sub_1B2CAD494(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
  _Unwind_Resume(exception_object);
}

int *Interval::pixelToFloat@<X0>(int *this@<X0>, double *a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v4 = this[1];
  v5 = this[2];
  v6 = this[3];
  v7 = (double)*this + 0.5;
  v8 = (double)v5 + -0.5;
  if (v8 >= v7)
    v9 = (double)*this + 0.5;
  else
    v9 = (double)v5 + -0.5;
  if (v7 >= v8)
    v10 = (double)*this + 0.5;
  else
    v10 = (double)v5 + -0.5;
  v11 = (double)v4 + 0.5;
  v12 = (double)v6 + -0.5;
  if (v12 >= v11)
    v13 = (double)v4 + 0.5;
  else
    v13 = (double)v6 + -0.5;
  if (v11 >= v12)
    v14 = (double)v4 + 0.5;
  else
    v14 = (double)v6 + -0.5;
  if (v9 > v10)
    boost::numeric::interval_lib::exception_create_empty::operator()();
  if (v13 > v14)
    boost::numeric::interval_lib::exception_create_empty::operator()();
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v13;
  a2[3] = v14;
  return this;
}

unint64_t Interval::floatToPixel(double *a1)
{
  uint64_t v1;
  double v2;
  unint64_t v3;

  v1 = (uint64_t)"um";
  LODWORD(v1) = vcvtmd_s64_f64(*a1 + -0.51);
  if (fabs(*a1) == INFINITY)
    v1 = 0x80000000;
  v2 = a1[2];
  v3 = (unint64_t)vcvtmd_s64_f64(v2 + -0.51) << 32;
  if (fabs(v2) == INFINITY)
    v3 = 0x8000000000000000;
  return v3 | v1;
}

double Interval::normalized@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double result;

  v2 = *a1;
  v3 = a1[1];
  v4 = sqrt(v2 * v2 + v3 * v3);
  if (v4 < 0.000000100000001 && v4 > -0.000000100000001)
    v4 = 1.0;
  result = v2 / v4;
  *a2 = result;
  a2[1] = v3 / v4;
  return result;
}

_QWORD *Interval::eightPointDOD@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (***a3)(int8x16_t *__return_ptr, _QWORD, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  int8x16_t v21;
  uint64_t v22;
  _QWORD *result;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  int8x16_t v28;
  uint64_t v29;
  double v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  int8x16_t v34;
  uint64_t v35;
  double v36;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  int8x16_t v40;
  double v41;
  double v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  int8x16_t v46;
  uint64_t v47;
  double v48;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  int8x16_t v52;
  __int128 v53;
  int8x16_t v54;

  PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::PCVector2(a4);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v53 = *(_QWORD *)a1;
  *((_QWORD *)&v53 + 1) = v8;
  (**a3)(&v54, a3, &v53);
  v10 = v54.i64[1];
  v9 = v54.i64[0];
  *(_QWORD *)a4 = v54.i64[0];
  *(_OWORD *)(a4 + 8) = __PAIR128__(v10, v9);
  *(_QWORD *)(a4 + 24) = v10;
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v53 = *(_QWORD *)a1;
  *((_QWORD *)&v53 + 1) = v11;
  (**a3)(&v54, a3, &v53);
  v12 = *(double *)a4;
  v13 = *(double *)(a4 + 24);
  if (*(double *)v54.i64 < *(double *)a4)
    v12 = *(double *)v54.i64;
  v14.f64[0] = *(float64_t *)(a4 + 8);
  *(_QWORD *)&v14.f64[1] = v54.i64[1];
  *(_QWORD *)&v15.f64[0] = v54.i64[0];
  v15.f64[1] = *(float64_t *)(a4 + 16);
  v16 = vbslq_s8((int8x16_t)vcgtq_f64(v15, v14), v54, *(int8x16_t *)(a4 + 8));
  if (v13 < *(double *)&v54.i64[1])
    v13 = *(double *)&v54.i64[1];
  *(double *)a4 = v12;
  *(int8x16_t *)(a4 + 8) = v16;
  *(double *)(a4 + 24) = v13;
  v53 = *(_OWORD *)(a1 + 8);
  (**a3)(&v54, a3, &v53);
  v17 = *(double *)a4;
  v18 = *(double *)(a4 + 24);
  v19.f64[0] = *(float64_t *)(a4 + 8);
  *(_QWORD *)&v19.f64[1] = v54.i64[1];
  if (*(double *)v54.i64 < *(double *)a4)
    v17 = *(double *)v54.i64;
  *(_QWORD *)&v20.f64[0] = v54.i64[0];
  v20.f64[1] = *(float64_t *)(a4 + 16);
  v21 = vbslq_s8((int8x16_t)vcgtq_f64(v20, v19), v54, *(int8x16_t *)(a4 + 8));
  if (v18 < *(double *)&v54.i64[1])
    v18 = *(double *)&v54.i64[1];
  *(double *)a4 = v17;
  *(int8x16_t *)(a4 + 8) = v21;
  *(double *)(a4 + 24) = v18;
  v22 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v53 = *(_QWORD *)(a1 + 8);
  *((_QWORD *)&v53 + 1) = v22;
  result = ((_QWORD *(*)(int8x16_t *__return_ptr, _QWORD, __int128 *))**a3)(&v54, a3, &v53);
  v24 = *(double *)a4;
  v25 = *(double *)(a4 + 24);
  v26.f64[0] = *(float64_t *)(a4 + 8);
  *(_QWORD *)&v26.f64[1] = v54.i64[1];
  *(_QWORD *)&v27.f64[0] = v54.i64[0];
  if (*(double *)v54.i64 < *(double *)a4)
    v24 = *(double *)v54.i64;
  v27.f64[1] = *(float64_t *)(a4 + 16);
  v28 = vbslq_s8((int8x16_t)vcgtq_f64(v27, v26), v54, *(int8x16_t *)(a4 + 8));
  if (v25 < *(double *)&v54.i64[1])
    v25 = *(double *)&v54.i64[1];
  *(double *)a4 = v24;
  *(int8x16_t *)(a4 + 8) = v28;
  *(double *)(a4 + 24) = v25;
  if (*(double *)a1 <= *(double *)a2 && *(double *)a2 <= *(double *)(a1 + 8))
  {
    v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v53 = *(_QWORD *)a2;
    *((_QWORD *)&v53 + 1) = v29;
    (**a3)(&v54, a3, &v53);
    v30 = *(double *)a4;
    v31 = *(double *)(a4 + 24);
    v32.f64[0] = *(float64_t *)(a4 + 8);
    *(_QWORD *)&v32.f64[1] = v54.i64[1];
    if (*(double *)v54.i64 < *(double *)a4)
      v30 = *(double *)v54.i64;
    *(_QWORD *)&v33.f64[0] = v54.i64[0];
    v33.f64[1] = *(float64_t *)(a4 + 16);
    v34 = vbslq_s8((int8x16_t)vcgtq_f64(v33, v32), v54, *(int8x16_t *)(a4 + 8));
    if (v31 < *(double *)&v54.i64[1])
      v31 = *(double *)&v54.i64[1];
    *(double *)a4 = v30;
    *(int8x16_t *)(a4 + 8) = v34;
    *(double *)(a4 + 24) = v31;
    v35 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)&v53 = *(_QWORD *)a2;
    *((_QWORD *)&v53 + 1) = v35;
    result = ((_QWORD *(*)(int8x16_t *__return_ptr, _QWORD, __int128 *))**a3)(&v54, a3, &v53);
    v36 = *(double *)a4;
    v37 = *(double *)(a4 + 24);
    v38.f64[0] = *(float64_t *)(a4 + 8);
    *(_QWORD *)&v38.f64[1] = v54.i64[1];
    if (*(double *)v54.i64 < *(double *)a4)
      v36 = *(double *)v54.i64;
    *(_QWORD *)&v39.f64[0] = v54.i64[0];
    v39.f64[1] = *(float64_t *)(a4 + 16);
    v40 = vbslq_s8((int8x16_t)vcgtq_f64(v39, v38), v54, *(int8x16_t *)(a4 + 8));
    if (v37 < *(double *)&v54.i64[1])
      v37 = *(double *)&v54.i64[1];
    *(double *)a4 = v36;
    *(int8x16_t *)(a4 + 8) = v40;
    *(double *)(a4 + 24) = v37;
  }
  v41 = *(double *)(a2 + 8);
  if (*(double *)(a1 + 16) <= v41 && v41 <= *(double *)(a1 + 24))
  {
    *(_QWORD *)&v53 = *(_QWORD *)a1;
    *((double *)&v53 + 1) = v41;
    (**a3)(&v54, a3, &v53);
    v42 = *(double *)a4;
    v43 = *(double *)(a4 + 24);
    v44.f64[0] = *(float64_t *)(a4 + 8);
    *(_QWORD *)&v44.f64[1] = v54.i64[1];
    if (*(double *)v54.i64 < *(double *)a4)
      v42 = *(double *)v54.i64;
    *(_QWORD *)&v45.f64[0] = v54.i64[0];
    v45.f64[1] = *(float64_t *)(a4 + 16);
    v46 = vbslq_s8((int8x16_t)vcgtq_f64(v45, v44), v54, *(int8x16_t *)(a4 + 8));
    if (v43 < *(double *)&v54.i64[1])
      v43 = *(double *)&v54.i64[1];
    *(double *)a4 = v42;
    *(int8x16_t *)(a4 + 8) = v46;
    *(double *)(a4 + 24) = v43;
    v47 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v53 = *(_QWORD *)(a1 + 8);
    *((_QWORD *)&v53 + 1) = v47;
    result = ((_QWORD *(*)(int8x16_t *__return_ptr, _QWORD, __int128 *))**a3)(&v54, a3, &v53);
    v48 = *(double *)a4;
    v49 = *(double *)(a4 + 24);
    v50.f64[0] = *(float64_t *)(a4 + 8);
    *(_QWORD *)&v50.f64[1] = v54.i64[1];
    if (*(double *)v54.i64 < *(double *)a4)
      v48 = *(double *)v54.i64;
    *(_QWORD *)&v51.f64[0] = v54.i64[0];
    v51.f64[1] = *(float64_t *)(a4 + 16);
    v52 = vbslq_s8((int8x16_t)vcgtq_f64(v51, v50), v54, *(int8x16_t *)(a4 + 8));
    if (v49 < *(double *)&v54.i64[1])
      v49 = *(double *)&v54.i64[1];
    *(double *)a4 = v48;
    *(int8x16_t *)(a4 + 8) = v52;
    *(double *)(a4 + 24) = v49;
  }
  return result;
}

uint64_t NewEquirectProjectNode@<X0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, char a4@<W3>, LiHgcEquirectProject **a5@<X8>, float a6@<S0>, float a7@<S1>, float a8@<S2>, float a9@<S3>, float a10@<S4>)
{
  LiHgcEquirectProject *v20;
  __n128 v21;
  char *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t result;

  v20 = (LiHgcEquirectProject *)HGObject::operator new(0x1B0uLL);
  *(_OWORD *)v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  *((_OWORD *)v20 + 2) = 0u;
  *((_OWORD *)v20 + 3) = 0u;
  *((_OWORD *)v20 + 4) = 0u;
  *((_OWORD *)v20 + 5) = 0u;
  *((_OWORD *)v20 + 6) = 0u;
  *((_OWORD *)v20 + 7) = 0u;
  *((_OWORD *)v20 + 8) = 0u;
  *((_OWORD *)v20 + 9) = 0u;
  *((_OWORD *)v20 + 10) = 0u;
  *((_OWORD *)v20 + 11) = 0u;
  *((_OWORD *)v20 + 12) = 0u;
  *((_OWORD *)v20 + 13) = 0u;
  *((_OWORD *)v20 + 14) = 0u;
  *((_OWORD *)v20 + 15) = 0u;
  *((_OWORD *)v20 + 16) = 0u;
  *((_OWORD *)v20 + 17) = 0u;
  *((_OWORD *)v20 + 18) = 0u;
  *((_OWORD *)v20 + 19) = 0u;
  *((_OWORD *)v20 + 20) = 0u;
  *((_OWORD *)v20 + 21) = 0u;
  *((_OWORD *)v20 + 22) = 0u;
  *((_OWORD *)v20 + 23) = 0u;
  *((_OWORD *)v20 + 24) = 0u;
  *((_OWORD *)v20 + 25) = 0u;
  *((_OWORD *)v20 + 26) = 0u;
  LiHgcEquirectProject::LiHgcEquirectProject(v20);
  *(_QWORD *)v20 = &unk_1E6565528;
  *((_QWORD *)v20 + 52) = 0;
  *((_BYTE *)v20 + 424) = 0;
  v21.n128_f32[0] = a6;
  LiHgcEquirectProject::SetParameter(v20, 0, v21, 0.0, 0.0, 0.0, v22);
  (*(void (**)(LiHgcEquirectProject *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 1, a7, 0.0, 0.0, 0.0);
  (*(void (**)(LiHgcEquirectProject *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 2, a10, 0.0, 0.0, 0.0);
  v23 = *a1;
  v24 = a1[1];
  v25 = a1[2];
  (*(void (**)(LiHgcEquirectProject *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 3, v23, v24, v25, 0.0);
  v26 = a1[4];
  v27 = a1[5];
  v28 = a1[6];
  (*(void (**)(LiHgcEquirectProject *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 4, v26, v27, v28, 0.0);
  v29 = a1[8];
  v30 = a1[9];
  v31 = a1[10];
  (*(void (**)(LiHgcEquirectProject *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 5, v29, v30, v31, 0.0);
  v32 = *a2;
  v33 = a2[1];
  v34 = a2[2];
  v35 = a2[3];
  (*(void (**)(LiHgcEquirectProject *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 8, v32, v33, v34, v35);
  v36 = a2[4];
  v37 = a2[5];
  v38 = a2[6];
  v39 = a2[7];
  (*(void (**)(LiHgcEquirectProject *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 9, v36, v37, v38, v39);
  v40 = *a3;
  v41 = a3[1];
  v42 = a3[2];
  v43 = a3[3];
  (*(void (**)(LiHgcEquirectProject *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 6, v40, v41, v42, v43);
  v44 = a3[4];
  v45 = a3[5];
  v46 = a3[6];
  v47 = a3[7];
  (*(void (**)(LiHgcEquirectProject *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 7, v44, v45, v46, v47);
  HUnderwaterRefractV2::SetMaxOffsets((uint64_t)v20, a8, a9);
  result = LiHeEquirectProject::setCanTile((uint64_t)v20, a4);
  *a5 = v20;
  return result;
}

void sub_1B2CADF10(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

float computeDistanceToEquirectImagePlane(float a1, float a2, LiHeEquirectProject *a3)
{
  float v3;

  v3 = a2 * 3.14159265 / 180.0;
  return LiHeEquirectProject::computeDistanceToImagePlane(a3, a1, v3);
}

uint64_t RetimeAddBlend2::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27)
    return 27;
  else
    return a2;
}

uint64_t RetimeAddBlend6::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27)
    return 27;
  else
    return a2;
}

void FxSupport::makeRetimeAddBlend2(HgcRetimeAddBlend2 **a1@<X8>)
{
  HgcRetimeAddBlend2 *v3;

  v3 = (HgcRetimeAddBlend2 *)HGObject::operator new(0x1A0uLL);
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_OWORD *)v3 + 22) = 0u;
  *((_OWORD *)v3 + 23) = 0u;
  *((_OWORD *)v3 + 24) = 0u;
  *((_OWORD *)v3 + 25) = 0u;
  HgcRetimeAddBlend2::HgcRetimeAddBlend2(v3);
  *(_QWORD *)v3 = off_1E6564268;
  *a1 = v3;
}

void sub_1B2CADFF8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void FxSupport::makeRetimeAddBlend6(HgcRetimeAddBlend6 **a1@<X8>)
{
  HgcRetimeAddBlend6 *v3;

  v3 = (HgcRetimeAddBlend6 *)HGObject::operator new(0x1A0uLL);
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_OWORD *)v3 + 22) = 0u;
  *((_OWORD *)v3 + 23) = 0u;
  *((_OWORD *)v3 + 24) = 0u;
  *((_OWORD *)v3 + 25) = 0u;
  HgcRetimeAddBlend6::HgcRetimeAddBlend6(v3);
  *(_QWORD *)v3 = off_1E65644D0;
  *a1 = v3;
}

void sub_1B2CAE080(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void RetimeAddBlend2::~RetimeAddBlend2(HGNode *this)
{
  void *v1;

  HgcRetimeAddBlend2::~HgcRetimeAddBlend2(this);
  HGObject::operator delete(v1);
}

void RetimeAddBlend6::~RetimeAddBlend6(HGNode *this)
{
  void *v1;

  HgcRetimeAddBlend6::~HgcRetimeAddBlend6(this);
  HGObject::operator delete(v1);
}

void sub_1B2CAE238(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B2CAE414(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

FxMatrix44 *FxMatrixFromPCMatrix(uint64_t a1)
{
  return -[FxMatrix44 initWithMatrix44Data:]([FxMatrix44 alloc], "initWithMatrix44Data:", a1);
}

__n128 FxMatrixToPCMatrix@<Q0>(FxMatrix44 *a1@<X0>, uint64_t a2@<X8>)
{
  double (*v3)[4][4];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v3 = -[FxMatrix44 matrix](a1, "matrix");
  v4 = *(_OWORD *)&(*v3)[2][2];
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&(*v3)[2][0];
  *(_OWORD *)(a2 + 80) = v4;
  v5 = *(_OWORD *)&(*v3)[3][2];
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&(*v3)[3][0];
  *(_OWORD *)(a2 + 112) = v5;
  v6 = *(_OWORD *)&(*v3)[0][2];
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v6;
  result = *(__n128 *)&(*v3)[1][0];
  v8 = *(_OWORD *)&(*v3)[1][2];
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v8;
  return result;
}

uint64_t FxApplySDRToHDR@<X0>(uint64_t a1@<X0>, CGColorSpace *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  return FxApplySDRToHDR(a2, a1, (uint64_t)a2, a3, a4);
}

uint64_t FxApplySDRToHDR@<X0>(CGColorSpace *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  int v10;
  CGColorSpaceRef v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  CGColorSpaceRef v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  int v21;
  int v22;

  v22 = 0;
  v20 = PCGetNCLCCodeForColorSpace(a1);
  v21 = v10;
  if (operator==((uint64_t)&v20, (uint64_t)&kPCNCLC_Rec709) || operator==((uint64_t)&v20, (uint64_t)&kPCNCLC_sRGB))
  {
    v11 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec709);
    v22 = 0;
  }
  else
  {
    if (operator==((uint64_t)&v20, (uint64_t)&kPCNCLC_P3_D65))
    {
      v11 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_P3_D65);
      v12 = 1;
    }
    else
    {
      v11 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020);
      v12 = 2;
    }
    v22 = v12;
  }
  FxApplyColorConform(a2, a1, 1, v11, 0);
  v19 = a4 != 0;
  FxSupport::newHGRefWithInput<HGHLG::SDRToHLG,HGHLG::SDRToHLG::SDRInputType &,HGHLG::SDRToHLG::ConversionMethod const&>(*a5, &v22, (int *)&v19, &v18);
  v13 = *a5;
  v14 = v18;
  if (*a5 == v18)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  }
  else
  {
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      v14 = v18;
    }
    *a5 = v14;
  }
  v15 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
  FxApplyColorConform(a5, v15, 0, a3, 1);
  result = *a5;
  v17 = v18;
  if (*a5 == v18)
  {
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  else
  {
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      v17 = v18;
    }
    *a5 = v17;
  }
  return result;
}

void sub_1B2CAE720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _QWORD *v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (*v9)
    (*(void (**)(_QWORD))(*(_QWORD *)*v9 + 24))(*v9);
  _Unwind_Resume(exception_object);
}

CGColorSpace **FxApplyBT2446A@<X0>(float *a1@<X0>, float *a2@<X8>)
{
  CGColorSpace *v4;

  v4 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020);
  return FxApplyBT2446A(a1, v4, v4, a2);
}

CGColorSpace **FxApplyBT2446A@<X0>(float *a1@<X0>, CGColorSpace *a2@<X1>, CGColorSpace *a3@<X2>, float *a4@<X8>)
{
  CGColorSpace *v6;
  float v7;
  int var0;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unsigned __int8 v26;
  float v27;
  float v28;
  float v29;
  CGColorSpace *v30;
  float v31;
  float v32;
  int v33;
  float v34;
  int v36;
  int v37;
  PCColor v38;
  float v39[3];
  float v40;
  uint64_t v41;
  PCColor v42;

  PCColor::PCColor(&v42, *a1, a1[1], a1[2], a2);
  v6 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020);
  v41 = 0;
  v40 = 0.0;
  PCColor::getRGB(&v42, (float *)&v41 + 1, (float *)&v41, &v40, v6);
  v39[0] = *((float *)&v41 + 1);
  LODWORD(v39[1]) = v41;
  v39[2] = v40;
  getRec2020RGBToYCbCrMatrix();
  operator*<float>((float *)&getRec2020RGBToYCbCrMatrix(void)::result, v39, (float *)&v38.var0.var0);
  var0 = v38.var0.var0;
  v7 = *((float *)&v38.var0.var0 + 1);
  v9 = *(float *)v38.var0.var1;
  v10 = powf(*(float *)&v38.var0.var0 * 255.0, flt_1B3059068[(float)(*(float *)&v38.var0.var0 * 255.0) > 70.0]+ (float)((float)(*(float *)&v38.var0.var0 * 255.0)* (float)(flt_1B3059060[(float)(*(float *)&v38.var0.var0 * 255.0) > 70.0]+ (float)((float)(*(float *)&v38.var0.var0 * 255.0)* flt_1B3059058[(float)(*(float *)&v38.var0.var0 * 255.0) > 70.0]))));
  v11 = 1.0;
  if (*(float *)&var0 > 0.0)
    v11 = (float)(v10 / *(float *)&var0) * 1.075;
  v12 = v7 * v11;
  v13 = v9 * v11;
  v14 = v10 + (float)(v13 * 1.4746);
  v15 = v14 / 1000.0;
  if (v14 > 1000.0)
    v15 = 1.0;
  if (v14 >= 0.0)
    v16 = v15;
  else
    v16 = 0.0;
  v17 = powf(v16, 2.4);
  v18 = (float)(v10 + (float)(v12 * -0.16455)) + (float)(v13 * -0.57135);
  v19 = v18 / 1000.0;
  if (v18 > 1000.0)
    v19 = 1.0;
  if (v18 >= 0.0)
    v20 = v19;
  else
    v20 = 0.0;
  v21 = powf(v20, 2.4);
  v22 = v10 + (float)(v12 * 1.8814);
  v23 = v22 / 1000.0;
  if (v22 > 1000.0)
    v23 = 1.0;
  if (v22 >= 0.0)
    v24 = v23;
  else
    v24 = 0.0;
  v25 = powf(v24, 2.4);
  {
    getRec2020RGBToYCbCrMatrix();
    v36 = getRec2020RGBToYCbCrMatrix(void)::result;
    getRec2020RGBToYCbCrMatrix();
    v37 = dword_1EF075BA4;
    getRec2020RGBToYCbCrMatrix();
    getRec2020LuminanceCoefficients(void)::result = v36;
    *(_DWORD *)algn_1EF075BD4 = v37;
    dword_1EF075BD8 = dword_1EF075BA8;
  }
  v27 = *(float *)&getRec2020LuminanceCoefficients(void)::result;
  v28 = *(float *)algn_1EF075BD4;
  v29 = *(float *)&dword_1EF075BD8;
  v30 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
  v31 = (float)((float)(v17 * v27) + (float)(v21 * v28)) + (float)(v25 * v29);
  v32 = powf(v31, -0.16667) * 12.0;
  if (v31 <= 0.0)
    v32 = 0.0;
  PCColor::PCColor(&v38, v17 * v32, v21 * v32, v25 * v32, v30);
  PCColor::getRGB(&v38, (float *)&v41 + 1, (float *)&v41, &v40, a3);
  v33 = v41;
  v34 = v40;
  *a4 = *((float *)&v41 + 1);
  *((_DWORD *)a4 + 1) = v33;
  a4[2] = v34;
  PCCFRef<CGColorSpace *>::~PCCFRef(&v38.var1._obj);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v42.var1._obj);
}

void sub_1B2CAEAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,CGColorSpace *a26)
{
  uint64_t v26;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v26 + 48));
  PCCFRef<CGColorSpace *>::~PCCFRef(&a26);
  _Unwind_Resume(a1);
}

CGColorSpace **FxApplyBT2446A@<X0>(float *a1@<X0>, CGColorSpace *a2@<X1>, float *a3@<X8>)
{
  return FxApplyBT2446A(a1, a2, a2, a3);
}

float operator*<float>@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;
  float result;
  float v6;
  float v7;

  v3 = a2[1];
  v4 = a2[2];
  result = (float)((float)(*a1 * *a2) + (float)(a1[1] * v3)) + (float)(a1[2] * v4);
  v6 = (float)((float)(*a2 * a1[3]) + (float)(v3 * a1[4])) + (float)(v4 * a1[5]);
  v7 = (float)((float)(*a2 * a1[6]) + (float)(v3 * a1[7])) + (float)(v4 * a1[8]);
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

void getRec2020RGBToYCbCrMatrix(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      makeRec2020RGBToYCbCrMatrix();
    }
  }
}

double makeRec2020RGBToYCbCrMatrix(void)
{
  __int128 v0;
  double result;

  *(_QWORD *)&v0 = 0x3D72E48F3F2D9168;
  *((_QWORD *)&v0 + 1) = 0xBEB88269BE0EFB2FLL;
  getRec2020RGBToYCbCrMatrix(void)::result = 1049002141;
  *(_OWORD *)&dword_1EF075BA4 = v0;
  dword_1EF075BB4 = 1056964608;
  result = -0.000013070241;
  qword_1EF075BB8 = 0xBEEB69083F000000;
  dword_1EF075BC0 = -1121667137;
  return result;
}

CGColorSpace **FxGetRGBAForRenderingCGI(PCColor *a1, FxColorDescription *this, float *a3, float *a4, float *a5, float *a6)
{
  CGColorSpace *CGColorSpace;
  PCToneMapMethod v14;

  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(this);
  if (FxColorDescription::isHDR(this))
  {
    v14 = *(PCToneMapMethod *)FxColorDescription::getToneMapMethod(this);
    if (a6)
      return PCColor::getRGBA(&a1->var0.var0, a3, a4, a5, a6, CGColorSpace, 1, &v14);
    else
      return PCColor::getRGB(&a1->var0.var0, a3, a4, a5, CGColorSpace, 1, &v14);
  }
  else if (a6)
  {
    return PCColor::getRGBA(a1, a3, a4, a5, a6, CGColorSpace);
  }
  else
  {
    return PCColor::getRGB(a1, a3, a4, a5, CGColorSpace);
  }
}

uint64_t createContrastBezierLumaNode@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, int a4@<W3>, HContrastBezierLuma **a5@<X8>, double a6@<D0>)
{
  HContrastBezierLuma *v12;
  __n128 v13;
  __n128 v14;
  float v15;
  uint64_t result;

  v12 = (HContrastBezierLuma *)HGObject::operator new(0x1A0uLL);
  HContrastBezierLuma::HContrastBezierLuma(v12);
  (*(void (**)(HContrastBezierLuma *, _QWORD, _QWORD))(*(_QWORD *)v12 + 120))(v12, 0, *a1);
  (*(void (**)(HContrastBezierLuma *, uint64_t, _QWORD))(*(_QWORD *)v12 + 120))(v12, 1, *a2);
  if (a3)
    v13.n128_f32[0] = 1.0;
  else
    v13.n128_f32[0] = 0.0;
  (*(void (**)(HContrastBezierLuma *, uint64_t, __n128, float, float, float))(*(_QWORD *)v12 + 96))(v12, 1, v13, 0.0, 0.0, 0.0);
  if (a4)
    v14.n128_f32[0] = 1.0;
  else
    v14.n128_f32[0] = 0.0;
  (*(void (**)(HContrastBezierLuma *, uint64_t, __n128, float, float, float))(*(_QWORD *)v12 + 96))(v12, 2, v14, 0.0, 0.0, 0.0);
  v15 = a6;
  result = (*(uint64_t (**)(HContrastBezierLuma *, _QWORD, float, float, float, float))(*(_QWORD *)v12 + 96))(v12, 0, v15, 0.0, 0.0, 0.0);
  *a5 = v12;
  return result;
}

void sub_1B2CAEE2C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t createContrastBezierRGBNode@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, int a4@<W3>, HContrastBezierRGB **a5@<X8>, double a6@<D0>)
{
  HContrastBezierRGB *v12;
  __n128 v13;
  __n128 v14;
  float v15;
  uint64_t result;

  v12 = (HContrastBezierRGB *)HGObject::operator new(0x1A0uLL);
  HContrastBezierRGB::HContrastBezierRGB(v12);
  (*(void (**)(HContrastBezierRGB *, _QWORD, _QWORD))(*(_QWORD *)v12 + 120))(v12, 0, *a1);
  (*(void (**)(HContrastBezierRGB *, uint64_t, _QWORD))(*(_QWORD *)v12 + 120))(v12, 1, *a2);
  if (a3)
    v13.n128_f32[0] = 1.0;
  else
    v13.n128_f32[0] = 0.0;
  (*(void (**)(HContrastBezierRGB *, uint64_t, __n128, float, float, float))(*(_QWORD *)v12 + 96))(v12, 1, v13, 0.0, 0.0, 0.0);
  if (a4)
    v14.n128_f32[0] = 1.0;
  else
    v14.n128_f32[0] = 0.0;
  (*(void (**)(HContrastBezierRGB *, uint64_t, __n128, float, float, float))(*(_QWORD *)v12 + 96))(v12, 2, v14, 0.0, 0.0, 0.0);
  v15 = a6;
  result = (*(uint64_t (**)(HContrastBezierRGB *, _QWORD, float, float, float, float))(*(_QWORD *)v12 + 96))(v12, 0, v15, 0.0, 0.0, 0.0);
  *a5 = v12;
  return result;
}

void sub_1B2CAEF6C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t createContrastLumaNode@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, HgcContrastLuma **a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  HgcContrastLuma *v14;
  float v15;
  float v16;
  __n128 v17;
  __n128 v18;
  float v19;
  uint64_t result;

  v14 = (HgcContrastLuma *)HGObject::operator new(0x1A0uLL);
  HgcContrastLuma::HgcContrastLuma(v14);
  (*(void (**)(HgcContrastLuma *, _QWORD, _QWORD))(*(_QWORD *)v14 + 120))(v14, 0, *a1);
  v15 = a5;
  (*(void (**)(HgcContrastLuma *, uint64_t, float, float, float, float))(*(_QWORD *)v14 + 96))(v14, 1, v15, 0.0, 0.0, 0.0);
  v16 = a6;
  (*(void (**)(HgcContrastLuma *, _QWORD, float, float, float, float))(*(_QWORD *)v14 + 96))(v14, 0, v16, 0.0, 0.0, 0.0);
  if (a2)
    v17.n128_f32[0] = 1.0;
  else
    v17.n128_f32[0] = 0.0;
  (*(void (**)(HgcContrastLuma *, uint64_t, __n128, float, float, float))(*(_QWORD *)v14 + 96))(v14, 3, v17, 0.0, 0.0, 0.0);
  v18.n128_u32[0] = 0;
  if (a3)
    v18.n128_f32[0] = 1.0;
  (*(void (**)(HgcContrastLuma *, uint64_t, __n128, float, float, float))(*(_QWORD *)v14 + 96))(v14, 4, v18, 0.0, 0.0, 0.0);
  v19 = a7;
  result = (*(uint64_t (**)(HgcContrastLuma *, uint64_t, float, float, float, float))(*(_QWORD *)v14 + 96))(v14, 2, v19, 0.0, 0.0, 0.0);
  *a4 = v14;
  return result;
}

void sub_1B2CAF0E4(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t createContrastRGBNode@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, HgcContrastRGB **a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  HgcContrastRGB *v14;
  float v15;
  float v16;
  __n128 v17;
  __n128 v18;
  float v19;
  uint64_t result;

  v14 = (HgcContrastRGB *)HGObject::operator new(0x1A0uLL);
  HgcContrastRGB::HgcContrastRGB(v14);
  (*(void (**)(HgcContrastRGB *, _QWORD, _QWORD))(*(_QWORD *)v14 + 120))(v14, 0, *a1);
  v15 = a5;
  (*(void (**)(HgcContrastRGB *, uint64_t, float, float, float, float))(*(_QWORD *)v14 + 96))(v14, 1, v15, 0.0, 0.0, 0.0);
  v16 = a6;
  (*(void (**)(HgcContrastRGB *, _QWORD, float, float, float, float))(*(_QWORD *)v14 + 96))(v14, 0, v16, 0.0, 0.0, 0.0);
  if (a2)
    v17.n128_f32[0] = 1.0;
  else
    v17.n128_f32[0] = 0.0;
  (*(void (**)(HgcContrastRGB *, uint64_t, __n128, float, float, float))(*(_QWORD *)v14 + 96))(v14, 3, v17, 0.0, 0.0, 0.0);
  v18.n128_u32[0] = 0;
  if (a3)
    v18.n128_f32[0] = 1.0;
  (*(void (**)(HgcContrastRGB *, uint64_t, __n128, float, float, float))(*(_QWORD *)v14 + 96))(v14, 4, v18, 0.0, 0.0, 0.0);
  v19 = a7;
  result = (*(uint64_t (**)(HgcContrastRGB *, uint64_t, float, float, float, float))(*(_QWORD *)v14 + 96))(v14, 2, v19, 0.0, 0.0, 0.0);
  *a4 = v14;
  return result;
}

void sub_1B2CAF25C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HContrastBezierLuma::HContrastBezierLuma(HContrastBezierLuma *this)
{
  HGNode *v1;

  HgcContrastBezierLuma::HgcContrastBezierLuma(this);
  *(_QWORD *)v1 = &unk_1E6564000;
  HGNode::SetFlags(v1, 1, 2);
}

void sub_1B2CAF2D0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcContrastBezierLuma::~HgcContrastBezierLuma(v1);
  _Unwind_Resume(a1);
}

void HContrastBezierRGB::HContrastBezierRGB(HContrastBezierRGB *this)
{
  HGNode *v1;

  HgcContrastBezierRGB::HgcContrastBezierRGB(this);
  *(_QWORD *)v1 = &unk_1E6563D98;
  HGNode::SetFlags(v1, 1, 2);
}

void sub_1B2CAF328(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcContrastBezierRGB::~HgcContrastBezierRGB(v1);
  _Unwind_Resume(a1);
}

uint64_t HConvolvePass8Tap::GetOutput(HConvolvePass8Tap *this, HGRenderer *a2)
{
  (*(void (**)(HConvolvePass8Tap *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 32);
  return HgcConvolvePass8tap::GetOutput(this, a2);
}

void HConvolvePass8Tap::~HConvolvePass8Tap(HGNode *this)
{
  void *v1;

  HgcConvolvePass8tap::~HgcConvolvePass8tap(this);
  HGObject::operator delete(v1);
}

void HEquirectWrap::init(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6)
{
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  HGCrop *v14;
  float64x2_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  HGCrop *v29;
  HGXForm *v30;
  HGXForm *v31;
  HGHWMultiBlend *v32;
  HGCrop *v33;
  double v34;
  double v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  HGTextureWrap *v44;
  char *v45;
  HGTextureWrap *v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  double v50;
  float64x2_t v51[9];
  float64x2_t v52[9];
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55[9];
  _OWORD v56[4];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  float64x2_t v63[9];
  _OWORD v64[4];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v70 = 0x3FF0000000000000;
  v66 = 0;
  v67 = 0x3FF0000000000000;
  v65 = 0;
  v68 = 0u;
  v69 = 0u;
  v10 = vcvtq_f64_f32(a3[1]);
  v64[0] = vcvtq_f64_f32(*a3);
  v64[1] = v10;
  v11 = vcvtq_f64_f32(a4[1]);
  v64[2] = vcvtq_f64_f32(*a4);
  v64[3] = v11;
  HGTransform::HGTransform((HGTransform *)v63);
  HGTransform::LoadMatrixd((HGTransform *)v63, (double *)v64);
  HGTransform::Transpose((HGTransform *)v63);
  v62 = 0x3FF0000000000000;
  v59 = 0x3FF0000000000000;
  v58 = 0;
  v57 = 0;
  v60 = 0u;
  v61 = 0u;
  v12 = vcvtq_f64_f32(a5[1]);
  v56[0] = vcvtq_f64_f32(*a5);
  v56[1] = v12;
  v13 = vcvtq_f64_f32(a6[1]);
  v56[2] = vcvtq_f64_f32(*a6);
  v56[3] = v13;
  HGTransform::HGTransform((HGTransform *)v55);
  HGTransform::LoadMatrixd((HGTransform *)v55, (double *)v56);
  HGTransform::Transpose((HGTransform *)v55);
  v14 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v14);
  __asm { FMOV            V1.2D, #-0.5 }
  v20 = vcvtq_f64_f32(*a2);
  v47 = _Q1;
  v53 = vmulq_f64(v20, _Q1);
  v54 = v20;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)v56, v53.f64, (uint64_t)&v53);
  v21 = v53.f64[0];
  v22 = v53.f64[1];
  v23 = v53.f64[0] + v54.f64[0];
  v24 = v53.f64[1] + v54.f64[1];
  v26 = HGRectMake4f(v25, v21, v22, v23, v24);
  (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v14 + 96))(v14, 0, (float)(int)v26, (float)SHIDWORD(v26), (float)v27, (float)v28);
  v29 = *(HGCrop **)(a1 + 408);
  if (v29 != v14)
  {
    if (v29)
      (*(void (**)(HGCrop *))(*(_QWORD *)v29 + 24))(v29);
    *(_QWORD *)(a1 + 408) = v14;
    (*(void (**)(HGCrop *))(*(_QWORD *)v14 + 16))(v14);
  }
  HGTransform::HGTransform((HGTransform *)v52);
  HGTransform::Multiply(v52, v63);
  HGTransform::Scale((HGTransform *)v52, 1.0, -1.0, 1.0);
  HGTransform::Translate((HGTransform *)v52, a2->f32[0] * -0.5, a2->f32[1], 0.0);
  HGTransform::Multiply(v52, v55);
  HGTransform::HGTransform((HGTransform *)v51);
  HGTransform::Multiply(v51, v63);
  HGTransform::Scale((HGTransform *)v51, 1.0, -1.0, 1.0);
  HGTransform::Translate((HGTransform *)v51, a2->f32[0] * 0.5, a2->f32[1], 0.0);
  HGTransform::Multiply(v51, v55);
  v30 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v30);
  (*(void (**)(HGXForm *, float64x2_t *))(*(_QWORD *)v30 + 576))(v30, v52);
  (*(void (**)(HGXForm *, _QWORD, HGCrop *))(*(_QWORD *)v30 + 120))(v30, 0, v14);
  v31 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v31);
  (*(void (**)(HGXForm *, float64x2_t *))(*(_QWORD *)v31 + 576))(v31, v51);
  (*(void (**)(HGXForm *, _QWORD, HGCrop *))(*(_QWORD *)v31 + 120))(v31, 0, v14);
  v32 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
  HGHWMultiBlend::HGHWMultiBlend(v32);
  (*(void (**)(HGHWMultiBlend *, _QWORD, HGXForm *))(*(_QWORD *)v32 + 120))(v32, 0, v30);
  (*(void (**)(HGHWMultiBlend *, uint64_t, HGXForm *))(*(_QWORD *)v32 + 120))(v32, 1, v31);
  (*(void (**)(HGHWMultiBlend *, uint64_t, HGCrop *))(*(_QWORD *)v32 + 120))(v32, 2, v14);
  v33 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v33);
  v34 = COERCE_FLOAT(*a2);
  v35 = COERCE_FLOAT(HIDWORD(*(unint64_t *)a2));
  v48 = vmulq_f64(vcvtq_f64_f32(*a2), v47);
  v49 = v34;
  v50 = v35 + v35;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)v56, v48.f64, (uint64_t)&v48);
  v36 = v48.f64[0];
  v37 = v48.f64[1];
  v38 = v48.f64[0] + v49;
  v39 = v48.f64[1] + v50;
  v41 = HGRectMake4f(v40, v36, v37, v38, v39);
  (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v33 + 96))(v33, 0, (float)(int)v41, (float)SHIDWORD(v41), (float)v42, (float)v43);
  (*(void (**)(HGCrop *, _QWORD, HGHWMultiBlend *))(*(_QWORD *)v33 + 120))(v33, 0, v32);
  v44 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
  HGTextureWrap::HGTextureWrap(v44);
  HGTextureWrap::SetTextureWrapMode((uint64_t)v44, (const char *)3, v45);
  (*(void (**)(HGTextureWrap *, _QWORD, HGCrop *))(*(_QWORD *)v44 + 120))(v44, 0, v33);
  v46 = *(HGTextureWrap **)(a1 + 416);
  if (v46 != v44)
  {
    if (v46)
      (*(void (**)(HGTextureWrap *))(*(_QWORD *)v46 + 24))(v46);
    *(_QWORD *)(a1 + 416) = v44;
    (*(void (**)(HGTextureWrap *))(*(_QWORD *)v44 + 16))(v44);
  }
  (*(void (**)(HGTextureWrap *))(*(_QWORD *)v44 + 24))(v44);
  (*(void (**)(HGCrop *))(*(_QWORD *)v33 + 24))(v33);
  (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v32 + 24))(v32);
  (*(void (**)(HGXForm *))(*(_QWORD *)v31 + 24))(v31);
  (*(void (**)(HGXForm *))(*(_QWORD *)v30 + 24))(v30);
  HGTransform::~HGTransform((HGTransform *)v51);
  HGTransform::~HGTransform((HGTransform *)v52);
  (*(void (**)(HGCrop *))(*(_QWORD *)v14 + 24))(v14);
  HGTransform::~HGTransform((HGTransform *)v55);
  HGTransform::~HGTransform((HGTransform *)v63);
}

void sub_1B2CAF91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57);
  (*(void (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
  (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 24))(v58);
  (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
  HGTransform::~HGTransform((HGTransform *)&a15);
  HGTransform::~HGTransform((HGTransform *)&a33);
  (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
  HGTransform::~HGTransform((HGTransform *)&a55);
  HGTransform::~HGTransform((HGTransform *)&STACK[0x280]);
  _Unwind_Resume(a1);
}

uint64_t HEquirectWrap::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;

  Input = HGRenderer::GetInput(a2, this, 0);
  (*(void (**)(_QWORD, _QWORD, HGNode *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 0, Input);
  return *((_QWORD *)this + 52);
}

void HEquirectWrap::~HEquirectWrap(HGNode *this)
{
  void *v1;

  HEquirectWrap::~HEquirectWrap(this);
  HGObject::operator delete(v1);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E65649A0;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 51);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
}

void HConvolvePass8Tap8Bit::HConvolvePass8Tap8Bit(HConvolvePass8Tap8Bit *this)
{
  HGNode *v1;
  char *v2;

  HgcConvolvePass8tap::HgcConvolvePass8tap(this);
  *(_QWORD *)v1 = &unk_1E6564C08;
  HGNode::SetSupportedFormatPrecisions(v1, (const char *)1, v2);
}

void sub_1B2CAFBA8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcConvolvePass8tap::~HgcConvolvePass8tap(v1);
  _Unwind_Resume(a1);
}

void sub_1B2CB071C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  PCAutoreleasePool::~PCAutoreleasePool((id *)va);
  _Unwind_Resume(a1);
}

void HRenderToEquirect::HRenderToEquirect(HRenderToEquirect *this)
{
  uint64_t v2;

  HgcRenderToEquirect::HgcRenderToEquirect(this);
  *(_QWORD *)v2 = off_1E6564E70;
  *(_QWORD *)(v2 + 536) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 496) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 456) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 416) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 480) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_QWORD *)(v2 + 664) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 624) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 584) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 544) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 552) = 0u;
  *(_OWORD *)(v2 + 568) = 0u;
  *(_OWORD *)(v2 + 592) = 0u;
  *(_OWORD *)(v2 + 608) = 0u;
  *(_OWORD *)(v2 + 648) = 0u;
  *(_OWORD *)(v2 + 632) = 0u;
  *(_QWORD *)(v2 + 792) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 752) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 712) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 672) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 680) = 0u;
  *(_OWORD *)(v2 + 696) = 0u;
  *(_OWORD *)(v2 + 720) = 0u;
  *(_OWORD *)(v2 + 736) = 0u;
  *(_OWORD *)(v2 + 776) = 0u;
  *(_OWORD *)(v2 + 760) = 0u;
  *(_QWORD *)(v2 + 920) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 880) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 840) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 800) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 808) = 0u;
  *(_OWORD *)(v2 + 824) = 0u;
  *(_OWORD *)(v2 + 848) = 0u;
  *(_OWORD *)(v2 + 864) = 0u;
  *(_OWORD *)(v2 + 904) = 0u;
  *(_OWORD *)(v2 + 888) = 0u;
  *(_QWORD *)(v2 + 1048) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 1008) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 968) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 928) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 952) = 0u;
  *(_OWORD *)(v2 + 936) = 0u;
  *(_OWORD *)(v2 + 976) = 0u;
  *(_OWORD *)(v2 + 992) = 0u;
  *(_OWORD *)(v2 + 1032) = 0u;
  *(_OWORD *)(v2 + 1016) = 0u;
  *(_QWORD *)(v2 + 1176) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 1136) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 1096) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 1056) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 1080) = 0u;
  *(_OWORD *)(v2 + 1064) = 0u;
  *(_OWORD *)(v2 + 1120) = 0u;
  *(_OWORD *)(v2 + 1104) = 0u;
  *(_OWORD *)(v2 + 1160) = 0u;
  *(_OWORD *)(v2 + 1144) = 0u;
  HGNode::SetFlags((HGNode *)v2, 0, 2);
  (*(void (**)(HRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 2);
  (*(void (**)(HRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 2, 2);
  (*(void (**)(HRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 3, 2);
  (*(void (**)(HRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 4, 2);
  (*(void (**)(HRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 5, 2);
}

void sub_1B2CB09E8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcRenderToEquirect::~HgcRenderToEquirect(v1);
  _Unwind_Resume(a1);
}

void HRenderToEquirect::~HRenderToEquirect(HGNode *this)
{
  *(_QWORD *)this = off_1E6564E70;
  HgcRenderToEquirect::~HgcRenderToEquirect(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E6564E70;
  HgcRenderToEquirect::~HgcRenderToEquirect(this);
  HGObject::operator delete(v1);
}

uint64_t HRenderToEquirect::SetXPlusPT(double *a1, double *a2)
{
  double *v3;
  uint64_t i;
  uint64_t j;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v3 = a1 + 52;
  if (a1 + 52 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 4; ++j)
        v3[j] = a2[j];
      v3 += 4;
      a2 += 4;
    }
  }
  v6 = a1[52];
  v7 = a1[53];
  v8 = a1[54];
  v9 = a1[55];
  v10 = a1[56];
  v11 = a1[57];
  v12 = a1[58];
  v13 = a1[59];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 13, v6, v7, v8, v9);
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 14, v10, v11, v12, v13);
}

uint64_t HRenderToEquirect::SetXMinusPT(double *a1, double *a2)
{
  double *v3;
  uint64_t i;
  uint64_t j;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v3 = a1 + 68;
  if (a1 + 68 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 4; ++j)
        v3[j] = a2[j];
      v3 += 4;
      a2 += 4;
    }
  }
  v6 = a1[68];
  v7 = a1[69];
  v8 = a1[70];
  v9 = a1[71];
  v10 = a1[72];
  v11 = a1[73];
  v12 = a1[74];
  v13 = a1[75];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 15, v6, v7, v8, v9);
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 16, v10, v11, v12, v13);
}

uint64_t HRenderToEquirect::SetYPlusPT(double *a1, double *a2)
{
  double *v3;
  uint64_t i;
  uint64_t j;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v3 = a1 + 84;
  if (a1 + 84 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 4; ++j)
        v3[j] = a2[j];
      v3 += 4;
      a2 += 4;
    }
  }
  v6 = a1[84];
  v7 = a1[85];
  v8 = a1[86];
  v9 = a1[87];
  v10 = a1[88];
  v11 = a1[89];
  v12 = a1[90];
  v13 = a1[91];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 9, v6, v7, v8, v9);
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 10, v10, v11, v12, v13);
}

uint64_t HRenderToEquirect::SetYMinusPT(double *a1, double *a2)
{
  double *v3;
  uint64_t i;
  uint64_t j;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v3 = a1 + 100;
  if (a1 + 100 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 4; ++j)
        v3[j] = a2[j];
      v3 += 4;
      a2 += 4;
    }
  }
  v6 = a1[100];
  v7 = a1[101];
  v8 = a1[102];
  v9 = a1[103];
  v10 = a1[104];
  v11 = a1[105];
  v12 = a1[106];
  v13 = a1[107];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 11, v6, v7, v8, v9);
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 12, v10, v11, v12, v13);
}

uint64_t HRenderToEquirect::SetZPlusPT(double *a1, double *a2)
{
  double *v3;
  uint64_t i;
  uint64_t j;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v3 = a1 + 116;
  if (a1 + 116 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 4; ++j)
        v3[j] = a2[j];
      v3 += 4;
      a2 += 4;
    }
  }
  v6 = a1[116];
  v7 = a1[117];
  v8 = a1[118];
  v9 = a1[119];
  v10 = a1[120];
  v11 = a1[121];
  v12 = a1[122];
  v13 = a1[123];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, v6, v7, v8, v9);
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, v10, v11, v12, v13);
}

uint64_t HRenderToEquirect::SetZMinusPT(double *a1, double *a2)
{
  double *v3;
  uint64_t i;
  uint64_t j;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v3 = a1 + 132;
  if (a1 + 132 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 4; ++j)
        v3[j] = a2[j];
      v3 += 4;
      a2 += 4;
    }
  }
  v6 = a1[132];
  v7 = a1[133];
  v8 = a1[134];
  v9 = a1[135];
  v10 = a1[136];
  v11 = a1[137];
  v12 = a1[138];
  v13 = a1[139];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, v6, v7, v8, v9);
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 8, v10, v11, v12, v13);
}

uint64_t HRenderToEquirect::GetDOD(HRenderToEquirect *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 v5;
  float64x2_t v6;
  float64x2_t v7;
  float v14;
  float v15;
  float64x2_t v16;
  double v17;
  double v18;
  _OWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  (*(void (**)(HRenderToEquirect *, uint64_t, _OWORD *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, 1, v19, *(_QWORD *)&a4.var0, *(_QWORD *)&a4.var2);
  v15 = *(float *)v19;
  (*(void (**)(HRenderToEquirect *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 2, v19);
  v14 = *(float *)v19;
  (*(void (**)(HRenderToEquirect *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 3, v19);
  v5 = v19[0];
  (*(void (**)(HRenderToEquirect *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 4, v19);
  v22 = 0x3FF0000000000000;
  v20 = 0;
  v21 = 0;
  v6 = vcvtq_f64_f32(*(float32x2_t *)&v19[0]);
  v23 = 0;
  v7 = vcvtq_f64_f32(*(float32x2_t *)((char *)v19 + 8));
  v19[1] = vcvtq_f64_f32(*(float32x2_t *)((char *)&v5 + 8));
  v19[0] = vcvtq_f64_f32(*(float32x2_t *)&v5);
  v19[2] = v6;
  v19[3] = v7;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::invert((double *)v19, (double *)v19, 0.0);
  __asm { FMOV            V2.2D, #-0.5 }
  v16 = vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v14), LODWORD(v15))), _Q2);
  v17 = v15;
  v18 = v14;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)v19, v16.f64, (uint64_t)&v16);
  return HGRectMake4i(vcvtmd_s64_f64(v16.f64[0]), vcvtmd_s64_f64(v16.f64[1]), vcvtpd_s64_f64(v16.f64[0] + v17), vcvtpd_s64_f64(v16.f64[1] + v18));
}

uint64_t *HRenderToEquirect::getInputPixelTransform(HRenderToEquirect *this, int a2)
{
  uint64_t *result;
  unsigned __int8 v3;

  switch(a2)
  {
    case 0:
      result = (uint64_t *)((char *)this + 416);
      break;
    case 1:
      result = (uint64_t *)((char *)this + 544);
      break;
    case 2:
      result = (uint64_t *)((char *)this + 672);
      break;
    case 3:
      result = (uint64_t *)((char *)this + 800);
      break;
    case 4:
      result = (uint64_t *)((char *)this + 928);
      break;
    case 5:
      result = (uint64_t *)((char *)this + 1056);
      break;
    default:
      if ((v3 & 1) != 0)
      {
        result = &HRenderToEquirect::getInputPixelTransform(int)::transform;
      }
      else
      {
        {
          qword_1EF075C60 = 0x3FF0000000000000;
          qword_1EF075C38 = 0x3FF0000000000000;
          qword_1EF075C10 = 0x3FF0000000000000;
          HRenderToEquirect::getInputPixelTransform(int)::transform = 0x3FF0000000000000;
          unk_1EF075BF0 = 0u;
          unk_1EF075C00 = 0u;
          xmmword_1EF075C18 = 0u;
          unk_1EF075C28 = 0u;
          unk_1EF075C40 = 0u;
          unk_1EF075C50 = 0u;
        }
        result = &HRenderToEquirect::getInputPixelTransform(int)::transform;
      }
      break;
  }
  return result;
}

uint64_t HRenderToEquirect::GetROI(HRenderToEquirect *this, HGRenderer *a2, int a3, HGRect a4)
{
  double v6;
  uint64_t *InputPixelTransform;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  (*(void (**)(HRenderToEquirect *, _QWORD, double *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, 0, &v13, *(_QWORD *)&a4.var0, *(_QWORD *)&a4.var2);
  v6 = *(float *)&v13;
  v13 = *(float *)&v13 * -0.5;
  v14 = v13;
  v15 = v6;
  v16 = v6;
  InputPixelTransform = HRenderToEquirect::getInputPixelTransform(this, a3);
  PCMatrix44Tmpl<double>::transformRect<double>((double *)InputPixelTransform, &v13, (uint64_t)&v13);
  v8 = HGRectMake4i(vcvtmd_s64_f64(v13), vcvtmd_s64_f64(v14), vcvtpd_s64_f64(v13 + v15), vcvtpd_s64_f64(v14 + v16));
  v10 = v9;
  v11 = HGRectMake4i(0xFFFFFFFE, 0xFFFFFFFE, 2u, 2u);
  return HGRectGrow(v8, v10, v11);
}

uint64_t fx_RenderToEquirect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, HRenderToEquirect **a9@<X8>, int a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16, double *a17)
{
  HRenderToEquirect *v26;
  float v27;
  float v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t result;

  v26 = (HRenderToEquirect *)HGObject::operator new(0x4A0uLL);
  HRenderToEquirect::HRenderToEquirect(v26);
  (*(void (**)(HRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)v26 + 120))(v26, 4, a1);
  (*(void (**)(HRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)v26 + 120))(v26, 5, a2);
  (*(void (**)(HRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)v26 + 120))(v26, 2, a3);
  (*(void (**)(HRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)v26 + 120))(v26, 3, a4);
  (*(void (**)(HRenderToEquirect *, _QWORD, uint64_t))(*(_QWORD *)v26 + 120))(v26, 0, a5);
  (*(void (**)(HRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)v26 + 120))(v26, 1, a6);
  (*(void (**)(HRenderToEquirect *, _QWORD, float, float, float, float))(*(_QWORD *)v26 + 96))(v26, 0, (float)a7, 0.0, 0.0, 0.0);
  (*(void (**)(HRenderToEquirect *, uint64_t, float, float, float, float))(*(_QWORD *)v26 + 96))(v26, 1, (float)a8, 0.0, 0.0, 0.0);
  (*(void (**)(HRenderToEquirect *, uint64_t, float, float, float, float))(*(_QWORD *)v26 + 96))(v26, 2, (float)a10, 0.0, 0.0, 0.0);
  v27 = (double)a8 * 0.5;
  v28 = (double)a10 * 0.5;
  (*(void (**)(HRenderToEquirect *, uint64_t, float, float, float, float))(*(_QWORD *)v26 + 96))(v26, 17, v27, v28, 0.0, 0.0);
  v29 = a11[4];
  v30 = a11[5];
  v31 = a11[6];
  v32 = a11[7];
  v33 = *a11;
  v34 = a11[1];
  v35 = a11[2];
  v36 = a11[3];
  (*(void (**)(HRenderToEquirect *, uint64_t, float, float, float, float))(*(_QWORD *)v26 + 96))(v26, 3, v33, v34, v35, v36);
  v37 = v29;
  v38 = v30;
  v39 = v31;
  v40 = v32;
  (*(void (**)(HRenderToEquirect *, uint64_t, float, float, float, float))(*(_QWORD *)v26 + 96))(v26, 4, v37, v38, v39, v40);
  HRenderToEquirect::SetXPlusPT((double *)v26, a12);
  HRenderToEquirect::SetXMinusPT((double *)v26, a13);
  HRenderToEquirect::SetYPlusPT((double *)v26, a14);
  HRenderToEquirect::SetYMinusPT((double *)v26, a15);
  HRenderToEquirect::SetZPlusPT((double *)v26, a16);
  result = HRenderToEquirect::SetZMinusPT((double *)v26, a17);
  *a9 = v26;
  return result;
}

void sub_1B2CB1550(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t FxBitmapRepHGBitmap::FxBitmapRepHGBitmap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_QWORD *)a1 = &off_1E65650D8;
  *(_QWORD *)(a1 + 8) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v4 = *(int *)(*(_QWORD *)(a1 + 8) + 16);
  if (v4 <= 0x1D && ((0x3BC800ABu >> v4) & 1) != 0)
    *(_DWORD *)(a1 + 16) = dword_1B3557A80[v4];
  return a1;
}

uint64_t FxBitmapRepHGBitmap::getData(FxBitmapRepHGBitmap *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 80);
}

uint64_t FxBitmapRepHGBitmap::getAllocationSize(FxBitmapRepHGBitmap *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 72);
}

uint64_t FxBitmapRepHGBitmap::getWidth(FxBitmapRepHGBitmap *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 1) + 28) - *(_DWORD *)(*((_QWORD *)this + 1) + 20));
}

uint64_t FxBitmapRepHGBitmap::getHeight(FxBitmapRepHGBitmap *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 1) + 32) - *(_DWORD *)(*((_QWORD *)this + 1) + 24));
}

uint64_t FxBitmapRepHGBitmap::getPixelFormat(FxBitmapRepHGBitmap *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t FxBitmapRepHGBitmap::getBytesPerRow(FxBitmapRepHGBitmap *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 64);
}

void FxBitmapRepHGBitmap::~FxBitmapRepHGBitmap(FxBitmapRepHGBitmap *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E65650D8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E65650D8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  JUMPOUT(0x1B5E29170);
}

void HSimpleBorder::~HSimpleBorder(HGNode *this)
{
  *(_QWORD *)this = off_1E6565148;
  HgcSimpleBorder::~HgcSimpleBorder(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E6565148;
  HgcSimpleBorder::~HgcSimpleBorder(this);
  HGObject::operator delete(v1);
}

uint64_t HSimpleBorder::GetDOD(HSimpleBorder *this, HGRenderer *a2, int a3, HGRect a4)
{
  return HGRectMake4i(vcvtms_s32_f32(*((float *)this + 106)), vcvtms_s32_f32(*((float *)this + 107)), vcvtps_s32_f32(*((float *)this + 108)), vcvtps_s32_f32(*((float *)this + 109)));
}

uint64_t HSimpleBorder::GetROI(HSimpleBorder *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

HGNode *fxSimpleBorder@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, double *a3@<X2>, double *a4@<X3>, int a5@<W4>, HGNode **a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  __int128 v16;
  double v17;
  double v18;
  HGNode *v19;
  HGNode *result;
  float v26;
  float v27;
  float v28;
  float v29;
  char *v30;
  double v31;
  float v32;
  float v33;
  float v34;
  char *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  __int128 v56;
  double v57;
  double v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  double v62;
  __int128 v63;
  __int128 v64;
  double v65;
  __int128 v66;
  __int128 v67;
  double v68;
  __int128 v69;
  __int128 v70;
  double v71;

  v71 = 1.0;
  v68 = 1.0;
  v65 = 1.0;
  v62 = 1.0;
  v63 = 0u;
  v64 = 0u;
  v66 = 0u;
  v67 = 0u;
  v69 = 0u;
  v70 = 0u;
  if (!PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v62, a4, 0.0))
  {
    v19 = (HGNode *)HGObject::operator new(0x1A0uLL);
    result = HGNode::HGNode(v19);
    goto LABEL_11;
  }
  v16 = a2[1];
  v60 = *a2;
  v61 = v16;
  if (a5 == 2)
  {
    *(double *)&v60 = *(double *)&v60 - a7;
    *((double *)&v60 + 1) = *((double *)&v60 + 1) - a8;
    v17 = *((double *)&v61 + 1);
    *(double *)&v61 = a7 + a7 + *(double *)&v61;
    v18 = a8 + a8;
    goto LABEL_7;
  }
  if (a5 == 1)
  {
    v17 = a8;
    *(double *)&v60 = *(double *)&v60 - a7 * 0.5;
    *((double *)&v60 + 1) = *((double *)&v60 + 1) - a8 * 0.5;
    v18 = *((double *)&v61 + 1);
    *(double *)&v61 = *(double *)&v61 + a7;
LABEL_7:
    *((double *)&v61 + 1) = v18 + v17;
  }
  v57 = 0.0;
  v58 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v59 = _Q0;
  if (PCMatrix44Tmpl<double>::transformRect<double>(a4, (double *)&v60, (uint64_t)&v57))
  {
    v26 = v57;
    v27 = v58;
    v28 = v57 + *(double *)&v59;
    v29 = v58 + *((double *)&v59 + 1);
    HGRectf::Init((HGRectf *)&v56, v26, v27, v28, v29);
    v30 = (char *)HGObject::operator new(0x240uLL);
    HgcSimpleBorder::HgcSimpleBorder((HgcSimpleBorder *)v30);
    *(_QWORD *)v30 = off_1E6565148;
    *((_QWORD *)v30 + 52) = 0;
    *(_OWORD *)(v30 + 424) = HGRectfNull;
    *((_QWORD *)v30 + 70) = 0x3FF0000000000000;
    *((_QWORD *)v30 + 65) = 0x3FF0000000000000;
    *((_QWORD *)v30 + 60) = 0x3FF0000000000000;
    *((_QWORD *)v30 + 55) = 0x3FF0000000000000;
    *((_OWORD *)v30 + 28) = 0u;
    *((_OWORD *)v30 + 29) = 0u;
    *(_OWORD *)(v30 + 488) = 0u;
    *(_OWORD *)(v30 + 504) = 0u;
    *((_OWORD *)v30 + 33) = 0u;
    *((_OWORD *)v30 + 34) = 0u;
    v31 = *a3;
    *(float *)&v31 = *a3;
    v32 = a3[1];
    v33 = a3[2];
    v34 = a3[3];
    *(float *)&v31 = *(float *)&v31 * v34;
    HgcSimpleBorder::SetParameter((HgcSimpleBorder *)v30, 2, (__n128)*(unint64_t *)&v31, v32 * v34, v33 * v34, v34, v35);
    *((float *)v30 + 104) = a7;
    *((float *)v30 + 105) = a8;
    (*(void (**)(char *, _QWORD, float, float, float, float))(*(_QWORD *)v30 + 96))(v30, 0, a7, a8, 0.0, 0.0);
    *(_OWORD *)(v30 + 424) = v56;
    (*(void (**)(char *, uint64_t, float, float, float, float))(*(_QWORD *)v30 + 96))(v30, 1, *(float *)&v56, *((float *)&v56 + 1), *((float *)&v56 + 2), *((float *)&v56 + 3));
    v36 = *(double *)&v60;
    v37 = *((double *)&v60 + 1);
    v38 = *(double *)&v60 + *(double *)&v61;
    v39 = *((double *)&v60 + 1) + *((double *)&v61 + 1);
    (*(void (**)(char *, uint64_t, float, float, float, float))(*(_QWORD *)v30 + 96))(v30, 1, v36, v37, v38, v39);
    v40 = v62;
    v41 = *(double *)&v63;
    v42 = *((double *)&v63 + 1);
    v43 = *(double *)&v64;
    (*(void (**)(char *, uint64_t, float, float, float, float))(*(_QWORD *)v30 + 96))(v30, 3, v40, v41, v42, v43);
    v44 = *((double *)&v64 + 1);
    v45 = v65;
    v46 = *(double *)&v66;
    v47 = *((double *)&v66 + 1);
    (*(void (**)(char *, uint64_t, float, float, float, float))(*(_QWORD *)v30 + 96))(v30, 4, v44, v45, v46, v47);
    v48 = *(double *)&v67;
    v49 = *((double *)&v67 + 1);
    v50 = v68;
    v51 = *(double *)&v69;
    (*(void (**)(char *, uint64_t, float, float, float, float))(*(_QWORD *)v30 + 96))(v30, 5, v48, v49, v50, v51);
    v52 = *((double *)&v69 + 1);
    v53 = *(double *)&v70;
    v54 = *((double *)&v70 + 1);
    v55 = v71;
    (*(void (**)(char *, uint64_t, float, float, float, float))(*(_QWORD *)v30 + 96))(v30, 6, v52, v53, v54, v55);
    result = (HGNode *)(*(uint64_t (**)(char *, _QWORD, _QWORD))(*(_QWORD *)v30 + 120))(v30, 0, *a1);
    *a6 = (HGNode *)v30;
    return result;
  }
  v19 = (HGNode *)HGObject::operator new(0x1A0uLL);
  result = HGNode::HGNode(v19);
LABEL_11:
  *a6 = v19;
  return result;
}

void sub_1B2CB1ACC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

float32_t OMUtil::computeAverageOfVec3fSample@<S0>(_QWORD *a1@<X0>, float32x2_t *a2@<X8>, double a3@<D2>)
{
  unint64_t v3;
  uint64_t v4;
  float *v5;
  float32x2_t v6;
  float v7;
  float v8;
  float32_t result;

  v3 = (a1[1] - *a1) / 12;
  if (a1[1] == *a1)
  {
    v6 = 0;
    v7 = 0.0;
  }
  else
  {
    if (v3 <= 1)
      v4 = 1;
    else
      v4 = (a1[1] - *a1) / 12;
    v5 = (float *)(*a1 + 8);
    v6 = 0;
    v7 = 0.0;
    do
    {
      a3 = *((double *)v5 - 1);
      v6 = vadd_f32(v6, *(float32x2_t *)&a3);
      v8 = *v5;
      v5 += 3;
      v7 = v7 + v8;
      --v4;
    }
    while (v4);
  }
  *(float *)&a3 = (float)v3;
  *a2 = vdiv_f32(v6, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  result = v7 / (float)v3;
  a2[1].f32[0] = result;
  return result;
}

uint64_t OMUtil::getBoundingBox(uint64_t *a1, uint64_t a2, int a3, float32x2_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int32x4_t a12)
{
  float v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float32x2_t v21;
  unint64_t v22;
  float32x2_t v23;
  unint64_t v24;
  float32x2_t v25;
  unint64_t v26;
  float32x2_t v27;
  unint64_t v28;
  float32x2_t v29;
  unint64_t v30;
  float32x2_t v31;
  _DWORD *v32;
  float32x2_t v33;
  float32x2_t v34;
  uint64_t v35;
  void **v36;
  double v37;
  Mat4f *v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float32x2_t *v51;
  float32x2_t v52;
  float32x2_t v53;
  float v54;
  float v55;
  double v56;
  float32x2_t v57;
  float v58;
  Vec3f v60;
  float32x4_t v61[4];
  Vec3f v62;
  float32x4_t v63[4];
  float32x4_t v64[4];
  Vec3f v65;
  float *v66;
  float *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  float32x4_t v72[4];

  v16 = a4->f32[0] + 0.004;
  v17 = a4->f32[1] + 0.004;
  v72[0].f32[0] = v16;
  v72[0].f32[1] = v17;
  *(float *)&a7 = a4[1].f32[0] + 0.004;
  v72[0].f32[2] = *(float *)&a7;
  v19 = a1[1];
  v18 = a1[2];
  if (v19 >= v18)
  {
    v20 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    v18 = a1[2];
  }
  else
  {
    *(float *)v19 = v16;
    *(float *)(v19 + 4) = v17;
    v20 = v19 + 12;
    *(_DWORD *)(v19 + 8) = LODWORD(a7);
  }
  a1[1] = v20;
  v21 = vadd_f32(*a4, (float32x2_t)vdup_n_s32(0x3B83126Fu));
  *(float32x2_t *)v72[0].f32 = v21;
  v72[0].f32[2] = a4[1].f32[0] + -0.004;
  if (v20 >= v18)
  {
    v22 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    v18 = a1[2];
  }
  else
  {
    *(_DWORD *)v20 = v21.i32[0];
    *(_QWORD *)(v20 + 4) = *(uint64_t *)((char *)v72[0].i64 + 4);
    v22 = v20 + 12;
  }
  a1[1] = v22;
  v23 = vadd_f32(*a4, (float32x2_t)0xBB83126F3B83126FLL);
  *(float32x2_t *)v72[0].f32 = v23;
  v72[0].f32[2] = a4[1].f32[0] + 0.004;
  if (v22 >= v18)
  {
    v24 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    v18 = a1[2];
  }
  else
  {
    *(_DWORD *)v22 = v23.i32[0];
    *(_QWORD *)(v22 + 4) = *(uint64_t *)((char *)v72[0].i64 + 4);
    v24 = v22 + 12;
  }
  a1[1] = v24;
  v25 = vadd_f32(*a4, (float32x2_t)0xBB83126F3B83126FLL);
  *(float32x2_t *)v72[0].f32 = v25;
  v72[0].f32[2] = a4[1].f32[0] + -0.004;
  if (v24 >= v18)
  {
    v26 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    v18 = a1[2];
  }
  else
  {
    *(_DWORD *)v24 = v25.i32[0];
    *(_QWORD *)(v24 + 4) = *(uint64_t *)((char *)v72[0].i64 + 4);
    v26 = v24 + 12;
  }
  a1[1] = v26;
  v27 = vadd_f32(*a4, (float32x2_t)0x3B83126FBB83126FLL);
  *(float32x2_t *)v72[0].f32 = v27;
  v72[0].f32[2] = a4[1].f32[0] + 0.004;
  if (v26 >= v18)
  {
    v28 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    v18 = a1[2];
  }
  else
  {
    *(_DWORD *)v26 = v27.i32[0];
    *(_QWORD *)(v26 + 4) = *(uint64_t *)((char *)v72[0].i64 + 4);
    v28 = v26 + 12;
  }
  a1[1] = v28;
  v29 = vadd_f32(*a4, (float32x2_t)0x3B83126FBB83126FLL);
  *(float32x2_t *)v72[0].f32 = v29;
  v72[0].f32[2] = a4[1].f32[0] + -0.004;
  if (v28 >= v18)
  {
    v30 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    v18 = a1[2];
  }
  else
  {
    *(_DWORD *)v28 = v29.i32[0];
    *(_QWORD *)(v28 + 4) = *(uint64_t *)((char *)v72[0].i64 + 4);
    v30 = v28 + 12;
  }
  a1[1] = v30;
  v31 = vadd_f32(*a4, (float32x2_t)vdup_n_s32(0xBB83126F));
  *(float32x2_t *)v72[0].f32 = v31;
  v72[0].f32[2] = a4[1].f32[0] + 0.004;
  if (v30 >= v18)
  {
    v32 = (_DWORD *)std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    v18 = a1[2];
  }
  else
  {
    *(_DWORD *)v30 = v31.i32[0];
    *(_QWORD *)(v30 + 4) = *(uint64_t *)((char *)v72[0].i64 + 4);
    v32 = (_DWORD *)(v30 + 12);
  }
  a1[1] = (uint64_t)v32;
  v34 = (float32x2_t)vdup_n_s32(0xBB83126F);
  v33 = vadd_f32(*a4, v34);
  *(float32x2_t *)v72[0].f32 = v33;
  v34.f32[0] = a4[1].f32[0] + -0.004;
  v72[0].f32[2] = v34.f32[0];
  if ((unint64_t)v32 >= v18)
  {
    v35 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
  }
  else
  {
    *v32 = v33.i32[0];
    v32[1] = v72[0].i32[1];
    v33.i32[0] = v72[0].i32[2];
    v32[2] = v72[0].i32[2];
    v35 = (uint64_t)(v32 + 3);
  }
  a1[1] = v35;
  v69 = 0;
  v70 = 0;
  v36 = (void **)a1;
  v71 = 0;
  if (a3)
  {
    OMUtil::reduceSample(a1, (uint64_t *)&v69, 5.62950094e14);
    v36 = &v69;
    OMUtil::computeAverageOfVec3fSample(&v69, (float32x2_t *)v72, v37);
    v33.i32[1] = v72[0].i32[1];
    *a4 = *(float32x2_t *)v72[0].f32;
    v33.i32[0] = v72[0].i32[2];
    a4[1].i32[0] = v72[0].i32[2];
  }
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v39 = PCPrincipalComponentAnalysisCompute<Vec3f,std::vector<Vec3f>>((float32x2_t **)v36, a4, (uint64_t)v72, (uint64_t *)&v66, *(double *)&v33, *(double *)&v34, a7, a8, a9, a10, a11, a12);
  if (!(_DWORD)v39)
  {
    v40 = v66[1];
    v41 = v66[2];
    v42 = v66[3];
    v43 = sqrtf((float)((float)(*v66 * *v66) + (float)(v40 * v40)) + (float)(v41 * v41));
    v72[0].f32[0] = *v66 / v43;
    v72[0].f32[1] = v40 / v43;
    v72[0].f32[2] = v41 / v43;
    v44 = v66[4];
    v45 = v66[5];
    v46 = sqrtf((float)((float)(v42 * v42) + (float)(v44 * v44)) + (float)(v45 * v45));
    v64[0].f32[0] = v42 / v46;
    v64[0].f32[1] = v44 / v46;
    v64[0].f32[2] = v45 / v46;
    v47 = v66[6];
    v48 = v66[7];
    v49 = v66[8];
    v50 = sqrtf((float)((float)(v47 * v47) + (float)(v48 * v48)) + (float)(v49 * v49));
    v63[0].f32[0] = v47 / v50;
    v63[0].f32[1] = v48 / v50;
    v63[0].f32[2] = v49 / v50;
    OMUtil::setBwMatrixWithDirectionalVector((OMUtil *)v72, (const Vec3f *)v64, (const Vec3f *)v63, &v65, v38);
    inv((const Mat4f *)&v65, v72);
    v51 = (float32x2_t *)*v36;
    v52 = (float32x2_t)vdup_n_s32(0x49742400u);
    v53 = (float32x2_t)vdup_n_s32(0xC9742400);
    v54 = -1000000.0;
    if (*v36 == v36[1])
    {
      v55 = 1000000.0;
    }
    else
    {
      v55 = 1000000.0;
      do
      {
        *(float32x2_t *)v63[0].f32 = *v51;
        v63[0].i32[2] = v51[1].i32[0];
        v63[0].i32[3] = 1065353216;
        operator*(v72[0].f32, v63[0].f32, v64[0].f32);
        proj((float32x2_t *)v64, (float32x2_t *)v61, v56);
        v52 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v52, *(float32x2_t *)v61[0].f32), *(int8x8_t *)v61[0].f32, (int8x8_t)v52);
        v53 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v61[0].f32, v53), *(int8x8_t *)v61[0].f32, (int8x8_t)v53);
        if (v61[0].f32[2] < v55)
          v55 = v61[0].f32[2];
        if (v61[0].f32[2] > v54)
          v54 = v61[0].f32[2];
        v51 = (float32x2_t *)((char *)v51 + 12);
      }
      while (v51 != v36[1]);
    }
    v57 = vmul_f32(vsub_f32(v53, v52), (float32x2_t)0x3F0000003F000000);
    v58 = (float)(v54 - v55) * 0.5;
    *(float32x2_t *)v62.var0 = vadd_f32(v52, v57);
    v62.var0[2] = v55 + v58;
    Mat4f::MakeHTrans((Mat4f *)v63, &v62);
    Mat4f::operator*(v65.var0, v63, v64);
    *(float32x2_t *)v60.var0 = v57;
    v60.var0[2] = v58;
    Mat4f::MakeHScale((Mat4f *)v61, &v60);
    Mat4f::operator*(v64[0].f32, v61, v72);
    Mat4f::operator=(a2, (uint64_t)v72);
  }
  std::vector<Vec3f>::erase((uint64_t)a1, a1[1] - 96, a1[1]);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  return v39;
}

void sub_1B2CB2118(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 208);
  if (v3)
  {
    *(_QWORD *)(v1 - 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 184);
  if (v4)
  {
    *(_QWORD *)(v1 - 176) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OMUtil::reduceSample(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float32x2_t v10;
  float v11;
  float32x2_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float32x2_t v27;
  float v28;

  a2[1] = *a2;
  std::vector<Vec3f>::reserve(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2));
  v5 = *a1;
  v6 = a2[1];
  if ((int)(-1431655765 * ((unint64_t)(a1[1] - *a1) >> 2)) >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(float *)&a3;
    v10 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
    do
    {
      v11 = rintf(*(float *)(v5 + v7 + 8) * v9) / v9;
      v12 = vdiv_f32(vrndx_f32(vmul_n_f32(*(float32x2_t *)(v5 + v7), v9)), v10);
      v27 = v12;
      v28 = v11;
      if (v6 >= a2[2])
      {
        v13 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a2, &v27);
        v9 = *(float *)&a3;
        v6 = v13;
        v5 = *a1;
      }
      else
      {
        *(_DWORD *)v6 = v12.i32[0];
        *(_DWORD *)(v6 + 4) = v27.i32[1];
        *(float *)(v6 + 8) = v28;
        v6 += 12;
      }
      a2[1] = v6;
      ++v8;
      v7 += 12;
    }
    while (v8 < (int)(-1431655765 * ((unint64_t)(a1[1] - v5) >> 2)));
  }
  v14 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a2) >> 2));
  if (v6 == *a2)
    v15 = 0;
  else
    v15 = v14;
  v16 = (float *)*a2;
  v17 = a2[1];
  if (*a2 == v17 || (v18 = v16 + 3, v16 + 3 == (float *)v17))
  {
LABEL_17:
    v16 = (float *)a2[1];
  }
  else
  {
    v19 = *v16;
    while (1)
    {
      v20 = v19;
      v19 = *v18;
      if (vabds_f32(v20, *v18) < 0.00001
        && vabds_f32(*(v18 - 2), v18[1]) < 0.00001
        && vabds_f32(*(v18 - 1), v18[2]) < 0.00001)
      {
        break;
      }
      v18 += 3;
      v16 += 3;
      if (v18 == (float *)v17)
        goto LABEL_17;
    }
    v22 = v18 - 3;
    if (v18 - 3 != (float *)v17)
    {
      v23 = v18 + 3;
      if (v23 != (float *)v17)
      {
        v24 = *v22;
        do
        {
          v25 = *v23;
          if (vabds_f32(v24, *v23) >= 0.00001
            || vabds_f32(v22[1], v23[1]) >= 0.00001
            || vabds_f32(v22[2], v23[2]) >= 0.00001)
          {
            v22[3] = v25;
            v22 += 3;
            v22[1] = v23[1];
            v22[2] = v23[2];
            v24 = v25;
          }
          v23 += 3;
        }
        while (v23 != (float *)v17);
      }
      v16 = v22 + 3;
    }
  }
  return std::vector<Vec3f>::erase((uint64_t)a2, (uint64_t)v16, v17);
}

float OMUtil::setBwMatrixWithDirectionalVector(OMUtil *this, const Vec3f *a2, const Vec3f *a3, const Vec3f *a4, Mat4f *a5)
{
  float v9;
  float v10;
  float v11;
  _BYTE v13[64];

  Mat4f::MakeDiag((uint64_t)a4, 1.0);
  v9 = *((float *)this + 2);
  *(_QWORD *)a4->var0 = *(_QWORD *)this;
  a4->var0[2] = v9;
  a4[1].var0[0] = 0.0;
  v10 = a2->var0[2];
  *(_QWORD *)&a4[1].var0[1] = *(_QWORD *)a2->var0;
  a4[2].var0[0] = v10;
  a4[2].var0[1] = 0.0;
  v11 = a3->var0[2];
  *(_QWORD *)&a4[2].var0[2] = *(_QWORD *)a3->var0;
  a4[3].var0[1] = v11;
  a4[3].var0[2] = 0.0;
  trans((const Mat4f *)a4, (uint64_t)v13);
  return Mat4f::operator=((uint64_t)a4, (uint64_t)v13);
}

uint64_t std::vector<Vec3f>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 != a3)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = a2;
    if (a3 != v3)
    {
      v5 = 4 * ((a3 - a2) >> 2);
      v4 = a2;
      do
      {
        *(_QWORD *)v4 = *(_QWORD *)(v4 + v5);
        *(_DWORD *)(v4 + 8) = *(_DWORD *)(v4 + v5 + 8);
        v4 += 12;
      }
      while (v4 + v5 != v3);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a2;
}

void std::vector<Vec3f>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<Vec3f>>(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 12 * v6;
    std::vector<Vec3f>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 12) % 0xCuLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_1B2CB2594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL OMUtil::findIntersectionOfLineSegment(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  _BOOL4 v16;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2] - *a1;
  v6 = a2[1];
  v7 = a2[3] - v6;
  v8 = a1[3] - v4;
  v9 = a2[2] - *a2;
  if (vabds_f32(v5 * v7, v8 * v9) < 0.000001)
    return 0;
  v11 = (float)(v5 * v7) - (float)(v8 * v9);
  v12 = v4 - v6;
  v13 = v3 - *a2;
  v14 = (float)((float)(v12 * v9) - (float)(v7 * v13)) / v11;
  v15 = (float)((float)(v5 * v12) - (float)(v8 * v13)) / v11;
  v16 = v14 > 1.0;
  if (v15 > 1.0)
    v16 = 1;
  if (v14 < -0.0000001)
    v16 = 1;
  if (v15 < -0.0000001)
    v16 = 1;
  if (!v16)
  {
    *a3 = v3 + (float)(v5 * v14);
    a3[1] = a1[1] + (float)(v14 * (float)(a1[3] - a1[1]));
  }
  return !v16;
}

BOOL OMUtil::findIntersectionOfLineSegment(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _BOOL4 v14;

  v2 = a1[1];
  v3 = a1[2] - *a1;
  v4 = a2[1];
  v5 = a2[3] - v4;
  v6 = a1[3] - v2;
  v7 = a2[2] - *a2;
  if (vabds_f32(v3 * v5, v6 * v7) < 0.000001)
    return 0;
  v9 = (float)(v3 * v5) - (float)(v6 * v7);
  v10 = v2 - v4;
  v11 = *a1 - *a2;
  v12 = (float)((float)(v10 * v7) - (float)(v5 * v11)) / v9;
  v13 = (float)((float)(v3 * v10) - (float)(v6 * v11)) / v9;
  v14 = v12 <= 1.0;
  if (v13 > 1.0)
    v14 = 0;
  if (v12 < -0.0000001)
    v14 = 0;
  return v13 >= -0.0000001 && v14;
}

BOOL OMUtil::findIntersectionOfLineSegmentExclusive(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _BOOL4 v14;

  v2 = a1[1];
  v3 = a1[2] - *a1;
  v4 = a2[1];
  v5 = a2[3] - v4;
  v6 = a1[3] - v2;
  v7 = a2[2] - *a2;
  if (vabds_f32(v3 * v5, v6 * v7) < 0.000001)
    return 0;
  v9 = (float)(v3 * v5) - (float)(v6 * v7);
  v10 = v2 - v4;
  v11 = *a1 - *a2;
  v12 = (float)((float)(v10 * v7) - (float)(v5 * v11)) / v9;
  v13 = (float)((float)(v3 * v10) - (float)(v6 * v11)) / v9;
  v14 = v12 <= 0.9999;
  if (v13 > 0.9999)
    v14 = 0;
  if (v12 < 0.0001)
    v14 = 0;
  return v13 >= 0.0001 && v14;
}

void OMUtilErf::errorFunction(OMUtilErf *this, float a2, float a3, float a4)
{
  if (a2 >= 1.0)
  {
    if (a2 >= 4.0)
      erff((float)((float)(a3 + -0.5) - a4) * a2);
    else
      erff((float)((float)(a3 + -0.5) - a4) * 4.0);
  }
  else
  {
    powf(a3, a2 + 1.0);
    powf(1.0 - a3, a2 + 1.0);
  }
}

void OMUtilErf::setSigma(OMUtilErf **this, float a2, float a3, int a4)
{
  OMUtilErf *v4;
  OMUtilErf *v8;
  int v9;
  float v10;
  _QWORD *v11;
  int v12;
  int v13;
  OMUtilErf *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;

  v4 = *this;
  this[1] = *this;
  if (a4 >= 1)
  {
    v8 = (OMUtilErf *)this;
    v9 = 0;
    v10 = (float)(a4 - 1);
    v11 = this + 2;
    do
    {
      OMUtilErf::errorFunction((OMUtilErf *)this, a2, (float)v9 / v10, a3);
      v13 = v12;
      if ((unint64_t)v4 >= *v11)
      {
        this = *(OMUtilErf ***)v8;
        v15 = ((uint64_t)v4 - *(_QWORD *)v8) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v17 = *v11 - (_QWORD)this;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v11, v18);
          this = *(OMUtilErf ***)v8;
          v4 = (OMUtilErf *)*((_QWORD *)v8 + 1);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[4 * v15];
        *(_DWORD *)v20 = v13;
        v14 = (OMUtilErf *)(v20 + 4);
        while (v4 != (OMUtilErf *)this)
        {
          v21 = *((_DWORD *)v4 - 1);
          v4 = (OMUtilErf *)((char *)v4 - 4);
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        *(_QWORD *)v8 = v20;
        *((_QWORD *)v8 + 1) = v14;
        *((_QWORD *)v8 + 2) = &v19[4 * v18];
        if (this)
          operator delete(this);
      }
      else
      {
        *(_DWORD *)v4 = v12;
        v14 = (OMUtilErf *)((char *)v4 + 4);
      }
      *((_QWORD *)v8 + 1) = v14;
      ++v9;
      v4 = v14;
    }
    while (v9 != a4);
  }
}

uint64_t PCPrincipalComponentAnalysisCompute<Vec3f,std::vector<Vec3f>>(float32x2_t **a1, float32x2_t *a2, uint64_t a3, uint64_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int32x4_t a12)
{
  int32x4_t v12;
  float32x4_t v15;
  float32x2_t *v16;
  float32x2_t *v17;
  float32x2_t v18;
  float v19;
  float32x2_t v20;
  float v21;
  float32x2_t v22;
  __int32 v23;
  float32x2_t v24;
  int8x16_t v25;
  float32x2_t v26;
  int v27;
  __CLPK_integer v28;
  __CLPK_real *v29;
  __CLPK_integer *v30;
  int v31;
  __CLPK_real v32;
  __CLPK_real v33;
  unint64_t v34;
  __CLPK_real *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __CLPK_real v39;
  uint64_t v40;
  __CLPK_real v42;
  uint64_t v43;
  __CLPK_integer __info;
  __CLPK_integer v45;
  __CLPK_integer __iwork;
  __CLPK_integer __lwork;
  __CLPK_real __work;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_real __w[2];
  int v52;
  __CLPK_real __a[10];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  __lda = 3;
  __n = 3;
  __lwork = -1;
  __work = 0.0;
  v45 = -1;
  __iwork = 0;
  __info = 0;
  v15 = 0uLL;
  memset(__a, 0, 36);
  a4[1] = *a4;
  v16 = *a1;
  v17 = a1[1];
  if (*a1 != v17)
  {
    v18 = *a2;
    v19 = a2[1].f32[0];
    v20 = 0;
    v21 = 0.0;
    v22 = 0;
    do
    {
      *(float *)&v23 = v16[1].f32[0] - v19;
      v24 = *v16;
      v16 = (float32x2_t *)((char *)v16 + 12);
      *(float32x2_t *)a12.i8 = vsub_f32(v24, v18);
      v12.i32[0] = vdup_lane_s32(*(int32x2_t *)a12.i8, 1).u32[0];
      v12.i32[1] = v23;
      v25 = (int8x16_t)vmulq_f32((float32x4_t)vzip1q_s32(a12, vrev64q_s32(a12)), (float32x4_t)vzip1q_s32(v12, v12));
      v12 = (int32x4_t)vextq_s8(v25, v25, 8uLL);
      v26.i32[0] = vmul_f32(*(float32x2_t *)a12.i8, *(float32x2_t *)a12.i8).u32[0];
      v26.i32[1] = v25.i32[0];
      v20 = vadd_f32(v26, v20);
      v21 = *(float *)&v25.i32[3] + v21;
      __a[2] = v21;
      v15 = vaddq_f32((float32x4_t)v25, v15);
      *(float32x4_t *)&__a[3] = v15;
      *(float32x2_t *)__a = v20;
      *(float *)&v12.i32[1] = *(float *)&v23 * *(float *)&v23;
      v22 = vadd_f32(*(float32x2_t *)v12.i8, v22);
      *(float32x2_t *)&__a[7] = v22;
    }
    while (v16 != v17);
  }
  v27 = ssyevd_("Vectors", "Upper", &__n, __a, &__lda, __w, &__work, &__lwork, &__iwork, &v45, &__info);
  v28 = __info;
  if (!(v27 | __info))
  {
    __lwork = (int)__work;
    v29 = (__CLPK_real *)operator new[]();
    v45 = __iwork;
    v30 = (__CLPK_integer *)operator new[]();
    v27 = ssyevd_("Vectors", "Upper", &__n, __a, &__lda, __w, v29, &__lwork, v30, &v45, &__info);
    if (!(v27 | __info))
    {
      v31 = v52;
      *(_QWORD *)a3 = *(_QWORD *)__w;
      *(_DWORD *)(a3 + 8) = v31;
      v32 = __a[1];
      v33 = __a[2];
      v42 = __a[0];
      v43 = *(_QWORD *)&__a[1];
      v35 = (__CLPK_real *)a4[1];
      v34 = a4[2];
      if ((unint64_t)v35 >= v34)
      {
        v36 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a4, &v42);
        v34 = a4[2];
      }
      else
      {
        *v35 = __a[0];
        v35[1] = v32;
        v36 = (unint64_t)(v35 + 3);
        v35[2] = v33;
      }
      a4[1] = v36;
      v37 = *(_QWORD *)&__a[4];
      v42 = __a[3];
      v43 = *(_QWORD *)&__a[4];
      if (v36 >= v34)
      {
        v38 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a4, &v42);
        v34 = a4[2];
      }
      else
      {
        *(__CLPK_real *)v36 = __a[3];
        *(_QWORD *)(v36 + 4) = v37;
        v38 = v36 + 12;
      }
      a4[1] = v38;
      v39 = __a[7];
      v42 = __a[6];
      v43 = *(_QWORD *)&__a[7];
      if (v38 >= v34)
      {
        v40 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a4, &v42);
      }
      else
      {
        *(__CLPK_real *)v38 = __a[6];
        *(__CLPK_real *)(v38 + 4) = v39;
        *(_DWORD *)(v38 + 8) = HIDWORD(v43);
        v40 = v38 + 12;
      }
      a4[1] = v40;
    }
    MEMORY[0x1B5E2914C](v29, 0x1000C8052888210);
    MEMORY[0x1B5E2914C](v30, 0x1000C8052888210);
    v28 = __info;
  }
  return v28 | v27;
}

void std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::CVec3LessThan &,Vec3f *,false>(float *a1, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *j;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unint64_t v26;
  float *m;
  float v28;
  float v29;
  float v31;
  float v32;
  BOOL v33;
  float v35;
  float *v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v42;
  float v43;
  float v44;
  BOOL v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v54;
  float v55;
  float v57;
  float v58;
  float *k;
  float v61;
  float v62;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  float v72;
  float v73;
  float v74;
  int v76;
  uint64_t v77;
  float *v78;
  BOOL v80;
  uint64_t v81;
  float *v82;
  float *v83;
  float v84;
  float v85;
  float v86;
  int v87;
  float *v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  float *v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  uint64_t v98;
  float *v99;
  float *v100;
  float v101;
  float v102;
  float v103;
  float *v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  float v109;
  int64_t v111;
  uint64_t v112;
  int v113;
  float v114;
  int v115;
  _DWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  float *v123;
  float v124;
  float v125;
  float v126;
  float *v127;
  unint64_t v128;
  float v129;
  float v130;
  float v131;
  float *i;
  float *v135;
  float v136;
  float v137;
  float v138;
  float *v139;
  float v140;
  float v141;
  int v142;
  float v143;
  float v144;

BOOL `anonymous namespace'::CVec3LessThan::operator()(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;

  v2 = *a1;
  v3 = *a2;
  if (vabds_f32(*a1, *a2) >= 0.00001)
    return v2 < v3;
  v2 = a1[1];
  v3 = a2[1];
  if (vabds_f32(v2, v3) >= 0.00001)
    return v2 < v3;
  v4 = a1[2];
  v5 = a2[2];
  return vabds_f32(v4, v5) >= 0.00001 && v4 < v5;
}

float std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::CVec3LessThan &,Vec3f *,0>(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  float result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  {
    v11 = *((_DWORD *)a4 + 2);
    v12 = *(_QWORD *)a4;
    *a4 = *a5;
    a4[1] = a5[1];
    a4[2] = a5[2];
    *(_QWORD *)a5 = v12;
    *((_DWORD *)a5 + 2) = v11;
    {
      v13 = *((_DWORD *)a3 + 2);
      v14 = *(_QWORD *)a3;
      *a3 = *a4;
      a3[1] = a4[1];
      a3[2] = a4[2];
      *(_QWORD *)a4 = v14;
      *((_DWORD *)a4 + 2) = v13;
      {
        v15 = *((_DWORD *)a2 + 2);
        v16 = *(_QWORD *)a2;
        *a2 = *a3;
        a2[1] = a3[1];
        a2[2] = a3[2];
        *(_QWORD *)a3 = v16;
        *((_DWORD *)a3 + 2) = v15;
        {
          result = a1[2];
          v17 = *(_QWORD *)a1;
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          *(_QWORD *)a2 = v17;
          a2[2] = result;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::CVec3LessThan &,Vec3f *>(float *a1, float *a2, float *a3)
{
  BOOL v6;
  _BOOL8 result;
  int v8;
  float v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (v6)
  {
    v9 = *a1;
    v8 = *((_DWORD *)a1 + 1);
    v10 = *((_DWORD *)a1 + 2);
    if (result)
    {
      *a1 = *a3;
      a1[1] = a3[1];
      a1[2] = a3[2];
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      *a2 = v9;
      *((_DWORD *)a2 + 1) = v8;
      *((_DWORD *)a2 + 2) = v10;
      if (!result)
        return result;
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
    }
    *a3 = v9;
    *((_DWORD *)a3 + 1) = v8;
    *((_DWORD *)a3 + 2) = v10;
  }
  else if (result)
  {
    v11 = *((_DWORD *)a2 + 2);
    v12 = *(_QWORD *)a2;
    *a2 = *a3;
    a2[1] = a3[1];
    a2[2] = a3[2];
    *(_QWORD *)a3 = v12;
    *((_DWORD *)a3 + 2) = v11;
    if (result)
    {
      v13 = *((_DWORD *)a1 + 2);
      v14 = *(_QWORD *)a1;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      *(_QWORD *)a2 = v14;
      *((_DWORD *)a2 + 2) = v13;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::CVec3LessThan &,Vec3f *>(float *a1, float *a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v22;
  int v23;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      {
        v6 = *((_DWORD *)a1 + 2);
        v7 = *(_QWORD *)a1;
        *a1 = *(a2 - 3);
        a1[1] = *(a2 - 2);
        a1[2] = *(a2 - 1);
        *(_QWORD *)(a2 - 3) = v7;
        *((_DWORD *)a2 - 1) = v6;
      }
      return 1;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      return 1;
    default:
      v8 = a1 + 6;
      v9 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (2)
  {
      goto LABEL_24;
    v12 = *v9;
    v13 = v9[1];
    v14 = v9[2];
    *v9 = *v8;
    v9[1] = v8[1];
    v9[2] = v8[2];
    v15 = a1;
    if (v8 == a1)
      goto LABEL_23;
    v16 = v10;
    while (1)
    {
      v17 = (uint64_t)a1 + v16;
      v18 = *(float *)((char *)a1 + v16 + 12);
      if (vabds_f32(v12, v18) >= 0.00001)
      {
        if (v12 >= v18)
        {
          v15 = (float *)((char *)a1 + v16 + 24);
          goto LABEL_23;
        }
        v19 = *(float *)((char *)a1 + v16 + 16);
        goto LABEL_19;
      }
      v19 = *(float *)(v17 + 16);
      if (vabds_f32(v13, v19) < 0.00001)
        break;
      if (v13 >= v19)
        goto LABEL_22;
LABEL_19:
      v8 -= 3;
      *(float *)(v17 + 24) = v18;
      v22 = (uint64_t)a1 + v16;
      v23 = *(_DWORD *)((char *)a1 + v16 + 20);
      *(float *)(v22 + 28) = v19;
      *(_DWORD *)(v22 + 32) = v23;
      v16 -= 12;
      if (v16 == -24)
      {
        v15 = a1;
        goto LABEL_23;
      }
    }
    v20 = *(float *)((char *)a1 + v16 + 20);
    if (vabds_f32(v14, v20) >= 0.00001 && v14 < v20)
      goto LABEL_19;
LABEL_22:
    v15 = v8;
LABEL_23:
    *v15 = v12;
    v15[1] = v13;
    v15[2] = v14;
    if (++v11 != 8)
    {
LABEL_24:
      v8 = v9;
      v10 += 12;
      v9 += 3;
      if (v9 == a2)
        return 1;
      continue;
    }
    return v9 + 3 == a2;
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::CVec3LessThan &,Vec3f *>(float *a1, float *a2, float *a3, float *a4)
{
  float result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  {
    v9 = *((_DWORD *)a3 + 2);
    v10 = *(_QWORD *)a3;
    *a3 = *a4;
    a3[1] = a4[1];
    a3[2] = a4[2];
    *(_QWORD *)a4 = v10;
    *((_DWORD *)a4 + 2) = v9;
    {
      v11 = *((_DWORD *)a2 + 2);
      v12 = *(_QWORD *)a2;
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
      *(_QWORD *)a3 = v12;
      *((_DWORD *)a3 + 2) = v11;
      {
        result = a1[2];
        v13 = *(_QWORD *)a1;
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        *(_QWORD *)a2 = v13;
        a2[2] = result;
      }
    }
  }
  return result;
}

BOOL OMRect::pickInside(OMRect *this, const Vec2f *a2)
{
  float v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v8);
  (*(void (**)(uint64_t *__return_ptr, OMRect *))(*(_QWORD *)this + 24))(&v7, this);
  if (a2->var0[0] < *(float *)&v8 || a2->var0[0] > *(float *)&v7)
    return 0;
  v6 = a2->var0[1];
  return v6 <= *((float *)&v7 + 1) && v6 >= *((float *)&v8 + 1);
}

float OMRect::move(OMRect *this, int a2, const Vec2f *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int32x2_t v6;
  float result;
  uint64_t v8;
  float *v9;
  float v10;
  float32x2_t *v11;
  float *v12;
  float v13;
  unsigned int v14;
  float v15;
  float v16;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    if (a2 != v3)
    {
      v6 = vceq_f32(*(float32x2_t *)(*((_QWORD *)this + 3) + 8 * v3), *(float32x2_t *)(*((_QWORD *)this + 3) + 8 * a2));
      if ((v6.i8[0] & 1) != 0)
        v5 = v3;
      if ((v6.i8[4] & 1) != 0)
        v4 = v3;
    }
    ++v3;
  }
  while (v3 != 4);
  result = a3->var0[0];
  v8 = *((_QWORD *)this + 3);
  v9 = (float *)(v8 + 8 * v4);
  if (a3->var0[0] != *v9)
  {
    v10 = a3->var0[1];
    v11 = (float32x2_t *)(v8 + 8 * v5);
    if (v10 != v11->f32[1])
    {
      v12 = (float *)(v8 + 8 * a2);
      v13 = v12[1];
      *(float *)&v14 = result - *v12;
      v15 = v10 - v13;
      *v12 = *v12 + *(float *)&v14;
      v12[1] = v13 + v15;
      *v11 = vadd_f32((float32x2_t)v14, *v11);
      result = *v9 + 0.0;
      v16 = v15 + v9[1];
      *v9 = result;
      v9[1] = v16;
    }
  }
  return result;
}

uint64_t OMRect::getBottom@<X0>(uint64_t this@<X0>, float32x2_t *a2@<X8>)
{
  uint64_t v2;
  float32x2_t v3;

  v2 = 0;
  v3 = (float32x2_t)vdup_n_s32(0x47C35000u);
  do
  {
    v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, *(float32x2_t *)(*(_QWORD *)(this + 24) + v2)), *(int8x8_t *)(*(_QWORD *)(this + 24) + v2), (int8x8_t)v3);
    v2 += 8;
  }
  while (v2 != 32);
  *a2 = v3;
  return this;
}

uint64_t OMRect::getTop@<X0>(uint64_t this@<X0>, float32x2_t *a2@<X8>)
{
  uint64_t v2;
  float32x2_t v3;

  v2 = 0;
  v3 = (float32x2_t)vdup_n_s32(0xC7C35000);
  do
  {
    v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(*(_QWORD *)(this + 24) + v2), v3), *(int8x8_t *)(*(_QWORD *)(this + 24) + v2), (int8x8_t)v3);
    v2 += 8;
  }
  while (v2 != 32);
  *a2 = v3;
  return this;
}

void OMRect::~OMRect(OMRect *this)
{
  OMSamplesElem::~OMSamplesElem(this);
  JUMPOUT(0x1B5E29170);
}

void OMSamplesElem::~OMSamplesElem(OMSamplesElem *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E6565418;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

void OMSamplesElem::getBottom(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1B2CB42F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2CB42D8);
}

float cross@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float result;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a3[2];
  v9 = a3[3];
  v10 = (float)(v6 * v9) - (float)(v8 * v7);
  v11 = (float)(v8 * v5) - (float)(v4 * v9);
  v12 = (float)(v4 * v7) - (float)(v6 * v5);
  v14 = *a1;
  v13 = a1[1];
  v16 = *a2;
  v15 = a2[1];
  v18 = *a3;
  v17 = a3[1];
  v19 = (float)(v17 * v12) + (float)((float)(v13 * v10) + (float)(v15 * v11));
  v20 = -(float)((float)((float)(*a1 * v10) + (float)(v11 * *a2)) + (float)(v12 * *a3));
  *a4 = v19;
  a4[1] = v20;
  result = -(float)((float)((float)((float)((float)(v15 * v8) - (float)(v17 * v6)) * v14)
                          + (float)((float)((float)(v17 * v4) - (float)(v13 * v8)) * v16))
                  + (float)((float)((float)(v13 * v6) - (float)(v15 * v4)) * v18));
  a4[2] = (float)((float)(v14 * (float)((float)(v15 * v9) - (float)(v17 * v7)))
                + (float)((float)((float)(v17 * v5) - (float)(v13 * v9)) * v16))
        + (float)((float)((float)(v13 * v7) - (float)(v15 * v5)) * v18);
  a4[3] = result;
  return result;
}

float proj@<S0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X8>, double a3@<D1>)
{
  float v3;
  float result;

  v3 = a1[1].f32[0];
  LODWORD(a3) = a1[1].i32[1];
  *a2 = vdiv_f32(*a1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  result = v3 / *(float *)&a3;
  a2[1].f32[0] = v3 / *(float *)&a3;
  return result;
}

Mat2f *Mat2f::MakeRot(Mat2f *this, double a2)
{
  __double2 v3;
  float sinval;
  float cosval;

  v3 = __sincos_stret(a2);
  sinval = v3.__sinval;
  cosval = v3.__cosval;
  *(float *)this = cosval;
  *((float *)this + 1) = -sinval;
  *((float *)this + 2) = sinval;
  *((float *)this + 3) = cosval;
  return this;
}

void Mat4f::Mat4f(Mat4f *this, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18)
{
  *(float *)this = a2;
  *((float *)this + 1) = a3;
  *((float *)this + 2) = a4;
  *((float *)this + 3) = a5;
  *((float *)this + 4) = a6;
  *((float *)this + 5) = a7;
  *((float *)this + 6) = a8;
  *((float *)this + 7) = a9;
  *((_OWORD *)this + 2) = a17;
  *((_OWORD *)this + 3) = a18;
}

float Mat4f::operator=(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  result = *(float *)(a2 + 60);
  *(float *)(a1 + 60) = result;
  return result;
}

float32x4_t Mat4f::operator*@<Q0>(float *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t result;
  float32x4_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(*a2, a1[4]), vmulq_n_f32(v4, a1[5])), vmulq_n_f32(v5, a1[6])), vmulq_n_f32(v6, a1[7]));
  *a3 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(*a2, *a1), vmulq_n_f32(v4, a1[1])), vmulq_n_f32(v5, a1[2])), vmulq_n_f32(v6, a1[3]));
  a3[1] = v7;
  result = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v3, a1[8]), vmulq_n_f32(v4, a1[9])), vmulq_n_f32(v5, a1[10])), vmulq_n_f32(v6, a1[11]));
  v9 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v3, a1[12]), vmulq_n_f32(v4, a1[13])), vmulq_n_f32(v5, a1[14])), vmulq_n_f32(v6, a1[15]));
  a3[2] = result;
  a3[3] = v9;
  return result;
}

float32x4_t Mat4f::operator/=(float32x4_t *a1, int32x2_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t result;

  v2 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v3 = vdivq_f32(a1[1], v2);
  *a1 = vdivq_f32(*a1, v2);
  a1[1] = v3;
  v4 = vdivq_f32(a1[2], v2);
  result = vdivq_f32(a1[3], v2);
  a1[2] = v4;
  a1[3] = result;
  return result;
}

float operator*@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float result;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = (float)((float)((float)(*a2 * a1[4]) + (float)(v4 * a1[5])) + (float)(v5 * a1[6])) + (float)(v6 * a1[7]);
  *a3 = (float)((float)((float)(*a2 * *a1) + (float)(v4 * a1[1])) + (float)(v5 * a1[2])) + (float)(v6 * a1[3]);
  a3[1] = v7;
  v8 = (float)((float)((float)(v3 * a1[8]) + (float)(v4 * a1[9])) + (float)(v5 * a1[10])) + (float)(v6 * a1[11]);
  result = (float)((float)((float)(v3 * a1[12]) + (float)(v4 * a1[13])) + (float)(v5 * a1[14])) + (float)(v6 * a1[15]);
  a3[2] = v8;
  a3[3] = result;
  return result;
}

float trans@<S0>(const Mat4f *a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  float result;
  int v12;
  int v13;
  int v14;

  v2 = *((_DWORD *)a1 + 1);
  v3 = *((_DWORD *)a1 + 4);
  v4 = *((_DWORD *)a1 + 5);
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = v3;
  v5 = *((_DWORD *)a1 + 9);
  v6 = *((_DWORD *)a1 + 12);
  v7 = *((_DWORD *)a1 + 13);
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a1 + 8);
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 16) = v2;
  *(_DWORD *)(a2 + 20) = v4;
  *(_DWORD *)(a2 + 24) = v5;
  *(_DWORD *)(a2 + 28) = v7;
  v8 = *((_DWORD *)a1 + 3);
  v9 = *((_DWORD *)a1 + 6);
  v10 = *((_DWORD *)a1 + 7);
  *(_DWORD *)(a2 + 32) = *((_DWORD *)a1 + 2);
  *(_DWORD *)(a2 + 36) = v9;
  result = *((float *)a1 + 10);
  v12 = *((_DWORD *)a1 + 11);
  v13 = *((_DWORD *)a1 + 14);
  v14 = *((_DWORD *)a1 + 15);
  *(float *)(a2 + 40) = result;
  *(_DWORD *)(a2 + 44) = v13;
  *(_DWORD *)(a2 + 48) = v8;
  *(_DWORD *)(a2 + 52) = v10;
  *(_DWORD *)(a2 + 56) = v12;
  *(_DWORD *)(a2 + 60) = v14;
  return result;
}

float32x4_t adj@<Q0>(const Mat4f *a1@<X0>, float32x4_t *a2@<X8>)
{
  float *v4;
  float *v5;
  float *v6;
  float32x4_t result;
  float32x4_t v8;

  v4 = (float *)((char *)a1 + 16);
  v5 = (float *)((char *)a1 + 32);
  v6 = (float *)((char *)a1 + 48);
  cross((float *)a1 + 4, (float *)a1 + 8, (float *)a1 + 12, v8.f32);
  *a2 = v8;
  cross((float *)a1, v5, v6, v8.f32);
  a2[1] = vnegq_f32(v8);
  cross((float *)a1, v4, v6, v8.f32);
  a2[2] = v8;
  cross((float *)a1, v4, v5, v8.f32);
  result = vnegq_f32(v8);
  a2[3] = result;
  return result;
}

double inv@<D0>(const Mat4f *a1@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v4;
  __int32 v5;
  uint64_t v6;
  __int32 v7;
  __int32 v8;
  __int32 v9;
  __int32 v10;
  __int32 v11;
  __int32 v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  __int32 v16;
  __int32 v17;
  __int32 v18;
  double result;
  float32x4_t v20;
  __int32 v21;
  __int32 v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;

  v4 = adj(a1, &v20);
  v6 = *(uint64_t *)((char *)v20.i64 + 4);
  v5 = v20.i32[3];
  v7 = v21;
  v8 = v22;
  v9 = v23;
  v10 = v24;
  v11 = v25;
  v12 = v26;
  v13 = v27;
  v14 = v28;
  v15 = v29;
  v16 = v30;
  v17 = v31;
  v18 = v32;
  v4.f32[0] = (float)((float)((float)(v20.f32[0] * *(float *)a1) + (float)(v20.f32[1] * *((float *)a1 + 1)))
                    + (float)(v20.f32[2] * *((float *)a1 + 2)))
            + (float)(v20.f32[3] * *((float *)a1 + 3));
  a2->i32[0] = v20.i32[0];
  a2->i32[1] = v7;
  a2->i32[2] = v11;
  a2->i32[3] = v15;
  a2[1].i32[0] = v6;
  a2[1].i32[1] = v8;
  a2[1].i32[2] = v12;
  a2[1].i32[3] = v16;
  a2[2].i32[0] = HIDWORD(v6);
  a2[2].i32[1] = v9;
  a2[2].i32[2] = v13;
  a2[2].i32[3] = v17;
  a2[3].i32[0] = v5;
  a2[3].i32[1] = v10;
  a2[3].i32[2] = v14;
  a2[3].i32[3] = v18;
  *(_QWORD *)&result = Mat4f::operator/=(a2, *(int32x2_t *)v4.f32).u64[0];
  return result;
}

uint64_t Mat4f::MakeDiag(uint64_t this, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;

  v2 = 0;
  v3 = this;
  do
  {
    for (i = 0; i != 4; ++i)
    {
      if (v2 == i)
        *(float *)(this + 16 * v2 + 4 * v2) = a2;
      else
        *(_DWORD *)(v3 + 4 * i) = 0;
    }
    ++v2;
    v3 += 16;
  }
  while (v2 != 4);
  return this;
}

float Mat4f::MakeHRot(float *a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float *v7;
  uint64_t i;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float result;

  v2 = 0;
  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a1;
  do
  {
    for (i = 0; i != 4; ++i)
    {
      if (v2 == i)
        a1[4 * v2 + v2] = 1.0;
      else
        v7[i] = 0.0;
    }
    ++v2;
    v7 += 4;
  }
  while (v2 != 4);
  v9 = v5 + v5;
  v10 = (float)(v5 + v5) * v6;
  v11 = v3 + v3;
  v12 = (float)(v3 + v3) * v6;
  v13 = v4 + v4;
  v14 = v13 * v6;
  v15 = (float)(v3 + v3) * v5;
  v16 = v13 * v5;
  v17 = v13 * v3;
  v18 = v13 * *a2;
  v19 = v11 * a2[1];
  v20 = v9 * a2[2];
  *a1 = (float)(1.0 - v19) - v20;
  a1[1] = v17 - v10;
  a1[2] = v16 + v12;
  v21 = 1.0 - v18;
  a1[4] = v17 + v10;
  a1[5] = v21 - v20;
  a1[6] = v15 - v14;
  a1[8] = v16 - v12;
  a1[9] = v15 + v14;
  result = v21 - v19;
  a1[10] = v21 - v19;
  return result;
}

float Mat4f::MakeHRot(Mat4f *this, const Vec3f *a2, double a3)
{
  __double2 v5;
  float sinval;
  float cosval;
  float32x2_t v9;
  float v10;
  float v11;

  v5 = __sincos_stret(a3 * 0.5);
  sinval = v5.__sinval;
  v9 = vmul_n_f32(*(float32x2_t *)a2->var0, sinval);
  cosval = v5.__cosval;
  v10 = a2->var0[2] * sinval;
  v11 = cosval;
  return Mat4f::MakeHRot((float *)this, (float *)&v9);
}

float Mat4f::MakeHScale(Mat4f *this, const Vec3f *a2)
{
  uint64_t v2;
  Mat4f *v3;
  uint64_t i;
  float result;

  v2 = 0;
  v3 = this;
  do
  {
    for (i = 0; i != 4; ++i)
    {
      if (v2 == i)
        *((_DWORD *)this + 4 * v2 + v2) = 1065353216;
      else
        *((_DWORD *)v3 + i) = 0;
    }
    ++v2;
    v3 = (Mat4f *)((char *)v3 + 16);
  }
  while (v2 != 4);
  *(float *)this = a2->var0[0];
  *((_DWORD *)this + 5) = LODWORD(a2->var0[1]);
  result = a2->var0[2];
  *((float *)this + 10) = result;
  return result;
}

float Mat4f::MakeHTrans(Mat4f *this, const Vec3f *a2)
{
  uint64_t v2;
  Mat4f *v3;
  uint64_t i;
  float result;

  v2 = 0;
  v3 = this;
  do
  {
    for (i = 0; i != 4; ++i)
    {
      if (v2 == i)
        *((_DWORD *)this + 4 * v2 + v2) = 1065353216;
      else
        *((_DWORD *)v3 + i) = 0;
    }
    ++v2;
    v3 = (Mat4f *)((char *)v3 + 16);
  }
  while (v2 != 4);
  *((_DWORD *)this + 3) = LODWORD(a2->var0[0]);
  *((_DWORD *)this + 7) = LODWORD(a2->var0[1]);
  result = a2->var0[2];
  *((float *)this + 11) = result;
  return result;
}

uint64_t FxApplySimpleToneCurve@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  float v7;
  uint64_t result;
  HgcSimpleToneCurve *v9;

  FxSupport::newHGRefWithInput<HgcSimpleToneCurve>(*a1, &v9);
  v7 = powf(a4, a3);
  (*(void (**)(HgcSimpleToneCurve *, _QWORD, float, float, float, float))(*(_QWORD *)v9 + 96))(v9, 0, 1.0 / v7, 0.0, 0.0, 0.0);
  result = (*(uint64_t (**)(HgcSimpleToneCurve *, uint64_t, float, float, float, float))(*(_QWORD *)v9 + 96))(v9, 1, a3, 0.0, 0.0, 0.0);
  *a2 = v9;
  return result;
}

void sub_1B2CB4B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t FxApplyInverseSimpleToneCurve@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  float v7;
  uint64_t result;
  HgcInverseSimpleToneCurve *v9;

  FxSupport::newHGRefWithInput<HgcInverseSimpleToneCurve>(*a1, &v9);
  v7 = powf(a4, a3);
  (*(void (**)(HgcInverseSimpleToneCurve *, _QWORD, float, float, float, float))(*(_QWORD *)v9 + 96))(v9, 0, 1.0 / (float)(1.0 / v7), 0.0, 0.0, 0.0);
  result = (*(uint64_t (**)(HgcInverseSimpleToneCurve *, uint64_t, float, float, float, float))(*(_QWORD *)v9 + 96))(v9, 1, 1.0 / a3, 0.0, 0.0, 0.0);
  *a2 = v9;
  return result;
}

void sub_1B2CB4C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t FxApplyGain@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  uint64_t result;
  HGColorMatrix *v6;

  if (fabsf(a3 + -1.0) >= 0.00001)
  {
    FxSupport::newHGRefWithInput<HGColorMatrix>(*a1, &v6);
    (*(void (**)(HGColorMatrix *, _QWORD, float, float, float, float))(*(_QWORD *)v6 + 96))(v6, 0, a3, 0.0, 0.0, 0.0);
    (*(void (**)(HGColorMatrix *, uint64_t, float, float, float, float))(*(_QWORD *)v6 + 96))(v6, 1, 0.0, a3, 0.0, 0.0);
    (*(void (**)(HGColorMatrix *, uint64_t, float, float, float, float))(*(_QWORD *)v6 + 96))(v6, 2, 0.0, 0.0, a3, 0.0);
    result = (*(uint64_t (**)(HGColorMatrix *, uint64_t, float, float, float, float))(*(_QWORD *)v6 + 96))(v6, 3, 0.0, 0.0, 0.0, 1.0);
    *a2 = (uint64_t)v6;
  }
  else
  {
    result = *a1;
    *a2 = result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_1B2CB4D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t FxSupport::newHGRefWithInput<HgcSimpleToneCurve>@<X0>(uint64_t a1@<X0>, HgcSimpleToneCurve **a2@<X8>)
{
  HgcSimpleToneCurve *v4;

  v4 = (HgcSimpleToneCurve *)HGObject::operator new(0x1A0uLL);
  HgcSimpleToneCurve::HgcSimpleToneCurve(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HgcSimpleToneCurve *, _QWORD, uint64_t))(*(_QWORD *)v4 + 120))(v4, 0, a1);
}

void sub_1B2CB4DB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::newHGRefWithInput<HgcInverseSimpleToneCurve>@<X0>(uint64_t a1@<X0>, HgcInverseSimpleToneCurve **a2@<X8>)
{
  HgcInverseSimpleToneCurve *v4;

  v4 = (HgcInverseSimpleToneCurve *)HGObject::operator new(0x1A0uLL);
  HgcInverseSimpleToneCurve::HgcInverseSimpleToneCurve(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HgcInverseSimpleToneCurve *, _QWORD, uint64_t))(*(_QWORD *)v4 + 120))(v4, 0, a1);
}

void sub_1B2CB4E3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

unint64_t FxConvertFxNCLCValueToPCNCLCCode(int a1)
{
  return PCMakeNCLCCode(BYTE2(a1), BYTE1(a1));
}

uint64_t FxConvertPCNCLCCodeToFxNCLCValue(_DWORD *a1)
{
  return (*a1 << 16) | (a1[1] << 8);
}

uint64_t OMKeyer2D::getAlphaLuma(OMKeyer2D *this, float a2)
{
  (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 32))(this);
  (*(void (**)(OMKeyer2D *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(OMKeyer2D *))(*(_QWORD *)this + 48))(this);
  return (*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 56))(this);
}

float OMKeyer2D::getAlphaSatOffset(OMKeyer2D *this, int a2)
{
  return *(float *)(*((_QWORD *)this + 9) + 4 * a2);
}

void OMKeyer2D::~OMKeyer2D(OMKeyer2D *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_1E6565458;
  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 16) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 12);
  if (v4)
  {
    *((_QWORD *)this + 13) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 9);
  if (v5)
  {
    *((_QWORD *)this + 10) = v5;
    operator delete(v5);
  }
}

void OMKeyer2D::tolAdd(OMKeyer2D *a1, _QWORD *a2, _QWORD *a3, int a4, float *a5, float *a6, float *a7)
{
  float *v9;
  float *v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  __float2 v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  __float2 v24;
  float v25;
  float v26;
  float *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  float *v33;
  float *v34;
  int v35;
  float v36;
  float v37;
  __n128 v38;
  uint64_t v39;
  int v40;
  std::vector<int>::pointer begin;
  int v42;
  std::vector<int>::pointer v43;
  std::vector<int>::pointer v44;
  std::vector<int>::pointer v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  BOOL v53;
  float v54;
  float v55;
  float v56;
  __float2 v57;
  float v58;
  float v59;
  float v60;
  const Vec2f *v61;
  __float2 v62;
  int v63;
  int v64;
  __int128 v65;
  float32x2_t v66;
  double v67;
  __int128 v68;
  double v69;
  double v70;
  double v71;
  int32x4_t v72;
  int v73;
  uint64_t v74;
  float32x2_t *v75;
  float32x2_t v76;
  float v77;
  uint64_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float v81;
  float v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  float32x2_t v87;
  float v88;
  float32x2_t v89;
  float32x2_t v90;
  int32x2_t v91;
  float32x2_t v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  uint64_t v98;
  __int32 *v99;
  float *v100;
  uint64_t v101;
  int v102;
  float v103;
  float v104;
  int v105;
  int v106;
  int v107;
  float32x2_t v108;
  float32x2_t v109;
  int v110;
  float32x2_t v111;
  float32x2_t v112;
  uint64_t v113;
  float v114;
  __int128 v115;
  float v116;
  float v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  int32x2_t v122;
  float v123;
  int32x2_t v124;
  float32x2_t v125;
  int32x2_t v126;
  float v127;
  _QWORD *v128;
  uint64_t v129;
  const Vec2f *v130;
  uint64_t v131;
  uint64_t v132;
  OMPie *v133;
  uint64_t v134;
  const Vec2f *v135;
  float32x2_t **v136;
  float32x2_t **v137;
  float32x2_t v138;
  int32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  int32x2_t v142;
  float32x2_t **v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float v148;
  float v149;
  float v150;
  float v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float v156;
  float v157;
  uint64_t v158;
  float v159;
  float v160;
  const Vec2f *v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  __float2 v168;
  float v169;
  float v170;
  __float2 v171;
  _DWORD *v172;
  uint64_t v173;
  uint64_t v174;
  float v175;
  uint64_t v176;
  uint64_t v177;
  float v178;
  uint64_t v179;
  float32x2_t *v180;
  float32x2_t *v181;
  float32x2_t v182;
  int32x2_t v183;
  float32x2_t v184;
  int32x2_t v185;
  int32x2_t v186;
  OMPie *v187;
  uint64_t v188;
  float *v189;
  float v190;
  float v191;
  float32x2_t v194;
  float32x2_t v195;
  float v196;
  float v197;
  float v198;
  float32x2_t v199;
  float v200;
  float32x2_t v201;
  float v207;
  float v208;
  __int128 v209;
  float32x2_t v210;
  float v211;
  std::vector<int>::value_type __x[4];
  void *v213;
  void *v214;
  uint64_t v215;
  float v216;
  float v217;
  __int128 v218;
  uint64_t v219;
  float v220;
  float v221;
  __int128 v222;
  uint64_t v223;
  float v224;
  float v225;
  __int128 v226;
  float32x2_t v227;
  float v228;
  float v229;
  __int128 v230;
  Vec2f v231;
  float v232;
  float v233;
  float32x2_t v234;
  unint64_t v235;
  float v236;
  void *v237;
  void *v238;
  uint64_t v239;
  std::vector<int> v240;
  std::vector<int> v241;
  void *__p;
  float *v243;
  float *v244;
  std::vector<int> v245;
  __int128 v246;
  float v247;
  float v248;
  float v249;
  float v250;
  Vec2f v251;
  float v252;
  Vec2f v253;
  float v254;
  Vec2f v255;
  float v256;
  Vec2f v257;
  float v258;
  uint64_t v259;
  float32x2x2_t v260;

  v259 = *MEMORY[0x1E0C80C00];
  if (*a2 == a2[1])
    return;
  if ((a4 & 1) == 0)
  {
    v9 = (float *)*((_QWORD *)a1 + 9);
    if (*v9 == 0.0)
    {
      v155 = 1;
      do
      {
        if (v155 == 255)
          return;
        v156 = v9[v155++];
      }
      while (v156 == 0.0);
      if ((unint64_t)(v155 - 2) > 0xFD)
        return;
    }
  }
  __x[0] = 0;
  std::vector<int>::vector(&v245, 0x168uLL, __x);
  __p = 0;
  v243 = 0;
  v244 = 0;
  if ((int)(-1431655765 * ((a2[1] - *a2) >> 2)) < 1)
  {
    v13 = 1000.0;
    v14 = -1000.0;
    v12 = -1000.0;
    v207 = 1000.0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = -1000.0;
    v13 = 1000.0;
    v207 = 1000.0;
    v14 = -1000.0;
    do
    {
      v15 = (float *)(*a3 + 12 * v11);
      if (a4)
      {
        v16 = v15[1];
        v17 = __sincosf_stret(*v15 * 6.2832);
        v18 = v15[2];
        if (v18 > v14)
        {
          *a6 = v16;
          v14 = v18;
        }
        v19 = v16 * v17.__cosval;
        v20 = v16 * v17.__sinval;
        if (v18 < v207)
        {
          *a5 = v16;
          v207 = v18;
        }
      }
      else
      {
        v21 = v15[2];
        v22 = 0.0;
        if ((float)(v21 * 255.0) >= 0.0)
        {
          v22 = 255.0;
          if ((float)(v21 * 255.0) <= 255.0)
            v22 = v21 * 255.0;
        }
        v23 = v15[1];
        v24 = __sincosf_stret(*v15 * 6.2832);
        v25 = *(float *)(*((_QWORD *)a1 + 9) + 4 * (int)v22);
        v19 = (float)(v23 * v24.__cosval) - (float)(v25 * *((float *)a1 + 14));
        v20 = (float)(v23 * v24.__sinval) - (float)(v25 * *((float *)a1 + 15));
        if (v21 > v14)
          v14 = v21;
        v26 = v207;
        if (v21 < v207)
          v26 = v21;
        v207 = v26;
      }
      if (v10 >= v244)
      {
        v27 = (float *)__p;
        v28 = ((char *)v10 - (_BYTE *)__p) >> 3;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v30 = (char *)v244 - (_BYTE *)__p;
        if (((char *)v244 - (_BYTE *)__p) >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v244, v31);
          v27 = (float *)__p;
          v10 = v243;
        }
        else
        {
          v32 = 0;
        }
        v33 = (float *)&v32[8 * v28];
        *v33 = v19;
        v33[1] = v20;
        v34 = v33;
        while (v10 != v27)
        {
          v35 = *((_DWORD *)v10 - 2);
          v10 -= 2;
          *((_DWORD *)v34 - 2) = v35;
          v34 -= 2;
          v34[1] = v10[1];
        }
        v10 = v33 + 2;
        __p = v34;
        v243 = v33 + 2;
        v244 = (float *)&v32[8 * v31];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v10 = v19;
        v10[1] = v20;
        v10 += 2;
      }
      v243 = v10;
      v36 = sqrtf((float)(v19 * v19) + (float)(v20 * v20));
      v37 = atan2f(v20, v19);
      if (v37 < 0.0)
        v37 = v37 + 6.2832;
      v245.__begin_[(float)((float)(v37 / 6.2832) * 360.0)] = 1;
      if (v36 > v12)
        v12 = v36;
      if (v36 < v13)
        v13 = v36;
      ++v11;
    }
    while (v11 < (int)(-1431655765 * ((a2[1] - *a2) >> 2)));
  }
  __x[0] = -1;
  std::vector<int>::vector(&v241, 0x168uLL, __x);
  __x[0] = -1;
  std::vector<int>::vector(&v240, 0x168uLL, __x);
  v39 = 0;
  v40 = 0;
  begin = v241.__begin_;
  v42 = 10000;
  v43 = v240.__begin_;
  do
  {
    v44 = v245.__begin_;
    v45 = v240.__begin_;
    v46 = 360;
    v47 = v39;
    do
    {
      v48 = v47 - 360;
      if (v47 <= 0x167)
        v48 = v47;
      v49 = v44[v48];
      if (begin[v39] < 0)
      {
        if (!v49)
          goto LABEL_54;
        begin[v39] = v48;
LABEL_53:
        v45[v39] = v48;
        goto LABEL_54;
      }
      if (v49)
        goto LABEL_53;
LABEL_54:
      ++v47;
      --v46;
    }
    while (v46);
    v50 = v43[v39];
    v51 = begin[v39];
    if (v50 <= v51)
      v50 += 360;
    v52 = v50 - v51;
    if (v52 < v42)
    {
      v42 = v52;
      v40 = v39;
    }
    ++v39;
  }
  while (v39 != 360);
  v38.n128_f64[0] = v13;
  v53 = v13 >= 0.1 || v42 <= 90;
  if (v53 && v38.n128_f64[0] >= 0.01)
  {
    v54 = ((double)v240.__begin_[v40] + 1.0) / 360.0;
    v208 = v54;
    v55 = (float)begin[v40] / 360.0;
    v56 = (float)(v55 + v55) * 3.14159265;
    v57 = __sincosf_stret(v56);
    v58 = v12 * v57.__cosval;
    v59 = v12 * v57.__sinval;
    *(float *)__x = v12 * v57.__cosval;
    *(float *)&__x[1] = v12 * v57.__sinval;
    v60 = (float)(v208 + v208) * 3.14159265;
    v62 = __sincosf_stret(v60);
    v251.var0[0] = v12 * v62.__cosval;
    v251.var0[1] = v12 * v62.__sinval;
    if (sqrtf((float)((float)(v58 - (float)(v12 * v62.__cosval)) * (float)(v58 - (float)(v12 * v62.__cosval)))+ (float)((float)(v59 - (float)(v12 * v62.__sinval)) * (float)(v59 - (float)(v12 * v62.__sinval)))) >= 0.05&& sqrtf((float)((float)(v58 - (float)(v13 * v57.__cosval)) * (float)(v58 - (float)(v13 * v57.__cosval)))+ (float)((float)(v59 - (float)(v13 * v57.__sinval)) * (float)(v59 - (float)(v13 * v57.__sinval)))) >= 0.05)
    {
      *(float *)&v63 = 0.01;
    }
    else
    {
      *(float *)&v63 = 0.05;
    }
    v211 = *(float *)&v63;
    *(_QWORD *)&v246 = 1065353216;
    v157 = OMUtil::angle((OMUtil *)&v246, (const Vec2f *)__x, v61);
    v158 = v246;
    v160 = *(float *)__x;
    v159 = *(float *)&__x[1];
    *(_QWORD *)&v246 = 1065353216;
    v162 = OMUtil::angle((OMUtil *)&v246, &v251, v161);
    if ((float)((float)(*(float *)&v158 * v159) - (float)(*((float *)&v158 + 1) * v160)) >= 0.0)
      v163 = v157;
    else
      v163 = 6.2832 - v157;
    v164 = v251.var0[0];
    v165 = v251.var0[1];
    if ((float)((float)(*(float *)&v246 * v251.var0[1]) - (float)(*((float *)&v246 + 1) * v251.var0[0])) >= 0.0)
      v166 = v162;
    else
      v166 = 6.2832 - v162;
    v167 = sqrtf((float)(*(float *)__x * *(float *)__x) + (float)(*(float *)&__x[1] * *(float *)&__x[1]));
    v168 = __sincosf_stret(v163 - v211);
    v169 = (float)(v211 + 1.0) * v167;
    *(float *)__x = v168.__cosval * v169;
    *(float *)&__x[1] = v168.__sinval * v169;
    v170 = sqrtf((float)(v164 * v164) + (float)(v165 * v165));
    v171 = __sincosf_stret(v211 + v166);
    v251.var0[0] = (float)((float)(v211 + 1.0) * v170) * v171.__cosval;
    v251.var0[1] = (float)((float)(v211 + 1.0) * v170) * v171.__sinval;
    v172 = *(_DWORD **)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1) + 40);
    *v172 = __x[0];
    v172[1] = __x[1];
    v173 = (*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1);
    *(Vec2f *)(*(_QWORD *)(v173 + 40) + 16) = v251;
    *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1) + 40) + 8) = 0;
    v174 = (*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1);
    v175 = sqrtf((float)((float)(v13 * v57.__cosval) * (float)(v13 * v57.__cosval))+ (float)((float)(v13 * v57.__sinval) * (float)(v13 * v57.__sinval)))* (float)(1.0 - v211);
    v176 = *(_QWORD *)(v174 + 40);
    *(float *)(v176 + 24) = v175 * v168.__cosval;
    *(float *)(v176 + 28) = v175 * v168.__sinval;
    v177 = (*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1);
    v178 = sqrtf((float)((float)(v13 * v62.__cosval) * (float)(v13 * v62.__cosval))+ (float)((float)(v13 * v62.__sinval) * (float)(v13 * v62.__sinval)))* (float)(1.0 - v211);
    v179 = *(_QWORD *)(v177 + 40);
    *(float *)(v179 + 32) = v178 * v171.__cosval;
    *(float *)(v179 + 36) = v178 * v171.__sinval;
  }
  else
  {
    v237 = 0;
    v238 = 0;
    v239 = 0;
    v73 = v64;
    v74 = (v64 - 1);
    if (v64 <= 1)
    {
      v85 = (uint64_t *)((char *)a1 + 208);
      v93 = *((_QWORD *)a1 + 26);
      *((_QWORD *)a1 + 27) = v93;
      v236 = 0.0;
      HIDWORD(v235) = 0;
      LODWORD(v65) = 0;
      v66.i32[0] = 0;
      LODWORD(v67) = 0;
      v84 = (_DWORD *)v93;
    }
    else
    {
      v75 = (float32x2_t *)((char *)v237 + 8);
      v76 = *(float32x2_t *)v237;
      v77 = 10000.0;
      v78 = (v64 - 1);
      do
      {
        v79 = *v75++;
        v67 = *(double *)&v79;
        v80 = vsub_f32(v79, v76);
        v81 = sqrtf(vaddv_f32(vmul_f32(v80, v80)));
        if (v81 >= v77)
          v82 = v77;
        else
          v82 = v81;
        if (v81 >= 0.0001)
          v77 = v82;
        v76 = *(float32x2_t *)&v67;
        --v78;
      }
      while (v78);
      v83 = 0;
      v85 = (uint64_t *)((char *)a1 + 208);
      v84 = (_DWORD *)*((_QWORD *)a1 + 26);
      *((_QWORD *)a1 + 27) = v84;
      v235 = 0;
      v236 = 0.0;
      do
      {
        v86 = v83++;
        *(_QWORD *)&v65 = *((_QWORD *)v237 + v86);
        v87 = vsub_f32(*(float32x2_t *)((char *)v237 + 8 * v83), *(float32x2_t *)&v65);
        v66 = vmul_f32(v87, v87);
        v88 = sqrtf(vaddv_f32(v66));
        if (v88 != 0.0)
        {
          *(_QWORD *)__x = *((_QWORD *)v237 + v86);
          __x[2] = 0;
          if ((unint64_t)v84 >= *((_QWORD *)a1 + 28))
          {
            v84 = (_DWORD *)std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>((uint64_t *)a1 + 26, __x);
          }
          else
          {
            *v84 = v65;
            v84[1] = __x[1];
            v84[2] = __x[2];
            v84 += 3;
          }
          *((_QWORD *)a1 + 27) = v84;
          *(float *)&v65 = v77;
          if (v77 < v88)
          {
            do
            {
              v68 = v65;
              v89 = *(float32x2_t *)((char *)v237 + 8 * v86);
              v90 = vsub_f32(*(float32x2_t *)((char *)v237 + 8 * v83), v89);
              v91 = (int32x2_t)vmul_f32(v90, v90);
              *(float *)v91.i32 = sqrtf(vaddv_f32((float32x2_t)v91));
              v209 = v68;
              v92 = vadd_f32(v89, vmul_n_f32(vdiv_f32(v90, (float32x2_t)vdup_lane_s32(v91, 0)), *(float *)&v68));
              *(float32x2_t *)__x = v92;
              __x[2] = 0;
              if ((unint64_t)v84 >= *((_QWORD *)a1 + 28))
              {
                v84 = (_DWORD *)std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>((uint64_t *)a1 + 26, __x);
              }
              else
              {
                *v84 = v92.i32[0];
                v84[1] = __x[1];
                v84[2] = __x[2];
                v84 += 3;
              }
              *((_QWORD *)a1 + 27) = v84;
              HIDWORD(v67) = __x[1];
              v66 = vadd_f32((float32x2_t)v235, *(float32x2_t *)__x);
              v235 = (unint64_t)v66;
              v236 = v236 + *(float *)&__x[2];
              v65 = v209;
              *(float *)&v65 = v77 + *(float *)&v209;
            }
            while ((float)(v77 + *(float *)&v209) < v88);
          }
        }
      }
      while (v83 != v74);
      v93 = *v85;
      v66.i32[0] = HIDWORD(v235);
      LODWORD(v67) = v235;
      *(float *)&v65 = v236;
    }
    *(float *)&v68 = (float)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v84 - v93) >> 2));
    *(float *)&v67 = *(float *)&v67 / *(float *)&v68;
    v66.f32[0] = v66.f32[0] / *(float *)&v68;
    *(float *)&v65 = *(float *)&v65 / *(float *)&v68;
    v235 = __PAIR64__(v66.u32[0], LODWORD(v67));
    v236 = *(float *)&v65;
    OMUtil::getBoundingBox(v85, (uint64_t)a1 + 144, 1, (float32x2_t *)&v235, *(double *)&v65, *(double *)&v66, v67, *(double *)&v68, v69, v70, v71, v72);
    v246 = xmmword_1B3051310;
    operator*((float *)a1 + 36, (float *)&v246, (float *)__x);
    proj((float32x2_t *)__x, (float32x2_t *)&v231, v94);
    v251 = v231;
    v252 = v232;
    v246 = xmmword_1B3557B90;
    operator*((float *)a1 + 36, (float *)&v246, (float *)__x);
    proj((float32x2_t *)__x, (float32x2_t *)&v231, v95);
    v253 = v231;
    v254 = v232;
    v246 = xmmword_1B3557BA0;
    operator*((float *)a1 + 36, (float *)&v246, (float *)__x);
    proj((float32x2_t *)__x, (float32x2_t *)&v231, v96);
    v255 = v231;
    v256 = v232;
    v246 = xmmword_1B3557BB0;
    operator*((float *)a1 + 36, (float *)&v246, (float *)__x);
    proj((float32x2_t *)__x, (float32x2_t *)&v231, v97);
    v98 = 0;
    v257 = v231;
    v258 = v232;
    v99 = (__int32 *)&v253 + 1;
    do
    {
      v260.val[0].i32[0] = *(v99 - 4);
      v260.val[0].i32[1] = *(v99 - 1);
      v260.val[1].i32[0] = *(v99 - 3);
      v260.val[1].i32[1] = *v99;
      v100 = (float *)((char *)&v246 + v98);
      vst2_f32(v100, v260);
      v98 += 16;
      v99 += 6;
    }
    while (v98 != 32);
    v101 = 0;
    v102 = 0;
    v103 = 1000.0;
    do
    {
      v104 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)((char *)&v246 + 8 * v101), *(float32x2_t *)((char *)&v246
                                                                                                 + 8 * v101))));
      if (v104 < v103)
      {
        v103 = v104;
        v102 = v101;
      }
      ++v101;
    }
    while (v101 != 4);
    if (v102 <= 2)
      v105 = v102 + 1;
    else
      v105 = 0;
    v106 = v102 - 1;
    if (v102 < 1)
      v106 = 3;
    if (sqrtf((float)(*((float *)&v246 + 2 * v105) * *((float *)&v246 + 2 * v105))+ (float)(*((float *)&v246 + 2 * v105 + 1) * *((float *)&v246 + 2 * v105 + 1))) < sqrtf((float)(*((float *)&v246 + 2 * v106) * *((float *)&v246 + 2 * v106))+ (float)(*((float *)&v246 + 2 * v106 + 1) * *((float *)&v246 + 2 * v106 + 1))))
    {
      v106 = v102;
      v102 = v105;
    }
    if (v102 <= 2)
      v107 = v102 + 1;
    else
      v107 = 0;
    v108 = *(float32x2_t *)((char *)&v246 + 8 * v106);
    v109 = *(float32x2_t *)((char *)&v246 + 8 * v102);
    if (v107 <= 2)
      v110 = v107 + 1;
    else
      v110 = 0;
    v195 = v109;
    v111 = vmul_f32(vadd_f32(v108, v109), (float32x2_t)0x3F0000003F000000);
    v199 = *(float32x2_t *)((char *)&v246 + 8 * v110);
    v201 = *(float32x2_t *)((char *)&v246 + 8 * v107);
    v112 = vsub_f32(v111, vmul_f32(vadd_f32(v201, v199), (float32x2_t)0x3F0000003F000000));
    v234 = vadd_f32(v111, vmul_f32(v112, (float32x2_t)vdup_n_s32(0x3E4CCCCDu)));
    v113 = v246;
    v114 = *((float *)&v246 + 3);
    v198 = *((float *)&v246 + 2);
    v196 = v250;
    v197 = v249;
    v194 = v108;
    *(float32x2_t *)&v115 = v108;
    *((float32x2_t *)&v115 + 1) = v234;
    v210 = v234;
    *(_OWORD *)__x = v115;
    v116 = (float)((float)((float)(*(float *)&v246 + *((float *)&v246 + 2)) + v247) + v249) * 0.25;
    v231 = 0;
    v117 = (float)((float)((float)(*((float *)&v246 + 1) + *((float *)&v246 + 3)) + v248) + v250) * 0.25;
    v232 = v116;
    v233 = v117;
    if (OMUtil::findIntersectionOfLineSegment((float *)__x, (float *)&v231))
      goto LABEL_114;
    *(float32x2_t *)&v118 = v210;
    *((float32x2_t *)&v118 + 1) = v195;
    v230 = v118;
    v227 = 0;
    v228 = v116;
    v229 = v117;
    if (OMUtil::findIntersectionOfLineSegment((float *)&v230, (float *)&v227))
      goto LABEL_114;
    *(float32x2_t *)&v119 = v195;
    *((float32x2_t *)&v119 + 1) = v201;
    v226 = v119;
    v223 = 0;
    v224 = v116;
    v225 = v117;
    if (OMUtil::findIntersectionOfLineSegment((float *)&v226, (float *)&v223))
      goto LABEL_114;
    *(float32x2_t *)&v120 = v201;
    *((float32x2_t *)&v120 + 1) = v199;
    v222 = v120;
    v219 = 0;
    v220 = v116;
    v221 = v117;
    if (OMUtil::findIntersectionOfLineSegment((float *)&v222, (float *)&v219)
      || (*(float32x2_t *)&v121 = v199,
          *((float32x2_t *)&v121 + 1) = v194,
          v218 = v121,
          v215 = 0,
          v216 = v116,
          v217 = v117,
          OMUtil::findIntersectionOfLineSegment((float *)&v218, (float *)&v215)))
    {
LABEL_114:
      v122 = (int32x2_t)vmul_f32(v112, v112);
      *(float *)v122.i32 = sqrtf(vaddv_f32((float32x2_t)v122));
      v210 = vmul_f32(vdiv_f32(v112, (float32x2_t)vdup_lane_s32(v122, 0)), (float32x2_t)vdup_n_s32(0x3C23D70Au));
      v234 = v210;
    }
    if (v12 == 0.0)
      v123 = 0.01;
    else
      v123 = v12;
    v124 = (int32x2_t)vmul_f32(v199, v199);
    *(float *)v124.i32 = sqrtf(vaddv_f32((float32x2_t)v124));
    v125 = vdiv_f32(v199, (float32x2_t)vdup_lane_s32(v124, 0));
    v200 = v123;
    v231 = (Vec2f)vmul_n_f32(v125, v123);
    v126 = (int32x2_t)vmul_f32(v201, v201);
    *(float *)v126.i32 = sqrtf(vaddv_f32((float32x2_t)v126));
    *(float32x2_t *)&v230 = vmul_n_f32(vdiv_f32(v201, (float32x2_t)vdup_lane_s32(v126, 0)), v200);
    v127 = sqrtf((float)((float)(*(float *)&v113 - v198) * (float)(*(float *)&v113 - v198))+ (float)((float)(*((float *)&v113 + 1) - v114) * (float)(*((float *)&v113 + 1) - v114)))/ sqrtf((float)((float)(*(float *)&v113 - v197) * (float)(*(float *)&v113 - v197))+ (float)((float)(*((float *)&v113 + 1) - v196) * (float)(*((float *)&v113 + 1) - v196)));
    if (v127 > 0.8 && v127 < 1.2 && sqrtf((float)(v116 * v116) + (float)(v117 * v117)) < 0.02)
    {
      OMPie::OMPie((OMPie *)__x, 0);
      v128 = v213;
      *(Vec2f *)v213 = v231;
      v128[2] = v230;
      v128[1] = 0;
      v128[3] = 0;
      v128[4] = 0;
      OMPie::computeOppositeArc((OMPie *)__x, v129, v130);
      OMPie::getArcOut((float32x2_t **)__x, 0.6, &v227);
      v231 = (Vec2f)v227;
      OMPie::getArcOut((float32x2_t **)__x, 0.4, &v227);
      *(float32x2_t *)&v230 = v227;
      OMPie::getArcOut((float32x2_t **)__x, 0.5, &v227);
      v210 = v227;
      v234 = v227;
      if (v213)
      {
        v214 = v213;
        operator delete(v213);
      }
    }
    v131 = (*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1);
    **(Vec2f **)(v131 + 40) = v231;
    v132 = (*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1);
    *(_QWORD *)(*(_QWORD *)(v132 + 40) + 16) = v230;
    *(float32x2_t *)(*(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1) + 40) + 8) = v210;
    *(float32x2_t *)(*(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1) + 40) + 24) = v210;
    *(float32x2_t *)(*(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1) + 40) + 32) = v210;
    v133 = (OMPie *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1);
    OMPie::computeArc(v133, v134, v135);
    v136 = (float32x2_t **)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1);
    OMPie::getArcOut(v136, -0.01, (float32x2_t *)__x);
    v137 = (float32x2_t **)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1);
    OMPie::getArcOut(v137, 1.01, &v227);
    v138 = vsub_f32(*(float32x2_t *)__x, v210);
    v139 = (int32x2_t)vmul_f32(v138, v138);
    *(float *)v139.i32 = sqrtf(vaddv_f32((float32x2_t)v139));
    v140 = (float32x2_t)vdup_n_s32(0x3F851EB8u);
    *(float32x2_t *)__x = vadd_f32(v210, vmul_f32(vmul_n_f32(vdiv_f32(v138, (float32x2_t)vdup_lane_s32(v139, 0)), *(float *)v139.i32), v140));
    v141 = vsub_f32(v227, v210);
    v142 = (int32x2_t)vmul_f32(v141, v141);
    *(float *)v142.i32 = sqrtf(vaddv_f32((float32x2_t)v142));
    v227 = vadd_f32(v210, vmul_f32(vmul_n_f32(vdiv_f32(v141, (float32x2_t)vdup_lane_s32(v142, 0)), *(float *)v142.i32), v140));
    v143 = (float32x2_t **)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1);
    OMPie::getArcOut(v143, 0.5, (float32x2_t *)&v226);
    v144 = v226;
    v231 = *(Vec2f *)__x;
    *(float32x2_t *)&v230 = v227;
    v145 = (*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1);
    **(Vec2f **)(v145 + 40) = v231;
    v146 = (*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1);
    *(_QWORD *)(*(_QWORD *)(v146 + 40) + 16) = v230;
    v147 = (*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1);
    v148 = sqrtf((float)((float)(v210.f32[0] - *(float *)&v144) * (float)(v210.f32[0] - *(float *)&v144))+ (float)((float)(v210.f32[1] - *((float *)&v144 + 1)) * (float)(v210.f32[1] - *((float *)&v144 + 1))));
    v149 = sqrtf((float)((float)(*(float *)&v144 - v210.f32[0]) * (float)(*(float *)&v144 - v210.f32[0]))+ (float)((float)(*((float *)&v144 + 1) - v210.f32[1]) * (float)(*((float *)&v144 + 1) - v210.f32[1])));
    v150 = *(float *)&v144 + (float)((float)(v149 * (float)((float)(v210.f32[0] - *(float *)&v144) / v148)) * 1.04);
    v151 = *((float *)&v144 + 1)
         + (float)((float)(v149 * (float)((float)(v210.f32[1] - *((float *)&v144 + 1)) / v148)) * 1.04);
    v152 = *(_QWORD *)(v147 + 40);
    *(float *)(v152 + 8) = v150;
    *(float *)(v152 + 12) = v151;
    v153 = *(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1) + 40);
    *(float *)(v153 + 24) = v150;
    *(float *)(v153 + 28) = v151;
    v154 = *(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1) + 40);
    *(float *)(v154 + 32) = v150;
    *(float *)(v154 + 36) = v151;
    if (v237)
    {
      v238 = v237;
      operator delete(v237);
    }
  }
  v180 = *(float32x2_t **)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1) + 40);
  v181 = *(float32x2_t **)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1) + 40);
  v182 = *v180;
  v183 = (int32x2_t)vmul_f32(v182, v182);
  v184 = v181[2];
  v185 = (int32x2_t)vmul_f32(v184, v184);
  v186 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v183, v185), (float32x2_t)vzip2_s32(v183, v185)));
  if (*(float *)v186.i32 >= *(float *)&v186.i32[1])
  {
    if (*(float *)v186.i32 > *(float *)&v186.i32[1])
      v181[2] = vmul_n_f32(vdiv_f32(v184, (float32x2_t)vdup_lane_s32(v186, 1)), *(float *)v186.i32);
  }
  else
  {
    *v180 = vmul_lane_f32(vdiv_f32(v182, (float32x2_t)vdup_lane_s32(v186, 0)), (float32x2_t)v186, 1);
  }
  (*(void (**)(OMKeyer2D *, float))(*(_QWORD *)a1 + 72))(a1, (float)(v207 + v207) + -1.0);
  (*(void (**)(OMKeyer2D *, float))(*(_QWORD *)a1 + 80))(a1, (float)(v14 + v14) + -1.0);
  if (a4)
  {
    if (v42 <= 179
      && (v187 = (OMPie *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)a1 + 96))(a1), OMPie::isQuadActive(v187)))
    {
      *a7 = 1.0;
      if ((int)(-1431655765 * ((uint64_t)(a2[1] - *a2) >> 2)) >= 1)
      {
        v188 = -1431655765 * ((uint64_t)(a2[1] - *a2) >> 2);
        v189 = (float *)(*a3 + 8);
        v190 = 1.0;
        do
        {
          v191 = *(v189 - 1);
          if (*v189 > (float)(v207 + (float)((float)(v14 - v207) * 0.45))
            && *v189 < (float)(v207 + (float)((float)(v14 - v207) * 0.55))
            && v191 < v190)
          {
            *a7 = v191;
            v190 = v191;
          }
          v189 += 3;
          --v188;
        }
        while (v188);
      }
    }
    else
    {
      *a5 = 0.0;
      *a6 = 0.0;
      *a7 = 0.0;
    }
    OMKeyer2D::computeSatOffsetVector(a1);
  }
  if (v240.__begin_)
  {
    v240.__end_ = v240.__begin_;
    operator delete(v240.__begin_);
  }
  if (v241.__begin_)
  {
    v241.__end_ = v241.__begin_;
    operator delete(v241.__begin_);
  }
  if (__p)
  {
    v243 = (float *)__p;
    operator delete(__p);
  }
  if (v245.__begin_)
  {
    v245.__end_ = v245.__begin_;
    operator delete(v245.__begin_);
  }
}

void sub_1B2CB630C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  void *a68;

  if (__p)
    operator delete(__p);
  if (a59)
    operator delete(a59);
  if (a62)
    operator delete(a62);
  if (a65)
    operator delete(a65);
  if (a68)
    operator delete(a68);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::chainHull_2D(float32x2_t **a1, uint64_t a2, __n128 a3)
{
  float32x2_t *v4;
  float32x2_t *v5;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  float32x2_t *v16;
  __int32 v17;
  float32x2_t v18;
  float32x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  float32x2_t *v25;
  __int32 v26;
  float32x2_t v27;
  float32x2_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  float32x2_t *v34;
  __int32 v35;
  float32x2_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  float32x2_t *v44;
  __int32 v45;
  unint64_t v46;
  uint64_t v47;
  float32x2_t *v48;
  unint64_t v49;
  unint64_t v50;
  float v51;
  int v52;
  uint64_t v53;
  float *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  float32x2_t *v58;
  uint64_t v59;
  uint64_t v60;
  float32x2_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  float32x2_t *v72;
  float32x2_t v73;
  float32x2_t v74;
  int32x2_t v75;
  int v76;
  float32x2_t *v77;
  BOOL v78;
  float32x2_t v79;
  float32x2_t v80;
  int32x2_t v81;
  _DWORD *v82;
  uint64_t v83;
  _DWORD *v84;
  int v85;
  uint64_t v86;
  _DWORD *v87;
  float32x2_t v88;
  int32x2_t v89;
  uint64_t v90;
  int v91;
  int v92;
  float32x2_t *v93;
  int32x2_t v94;
  _DWORD *v95;
  uint64_t v96;
  _DWORD *v97;
  BOOL (*v98)(_anonymous_namespace_ *, const Vec2f *, const Vec2f *);

  v4 = *a1;
  v5 = a1[1];
  if (v4 == v5)
    return 0;
  v7 = vadd_f32(*v4, (float32x2_t)vdup_n_s32(0x3A83126Fu));
  v8 = a1[2];
  if (v5 >= v8)
  {
    v11 = v5 - v4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      goto LABEL_127;
    v13 = (char *)v8 - (char *)v4;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), v14);
      v4 = *a1;
      v5 = a1[1];
    }
    else
    {
      v15 = 0;
    }
    v16 = (float32x2_t *)&v15[8 * v11];
    v8 = (float32x2_t *)&v15[8 * v14];
    *v16 = v7;
    v9 = v16 + 1;
    while (v5 != v4)
    {
      v17 = v5[-1].i32[0];
      --v5;
      v16[-1].i32[0] = v17;
      --v16;
      v16->i32[1] = v5->i32[1];
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = v8;
    if (v4)
    {
      operator delete(v4);
      v4 = *a1;
      v8 = a1[2];
    }
    else
    {
      v4 = v16;
    }
  }
  else
  {
    *v5 = v7;
    v9 = v5 + 1;
  }
  a1[1] = v9;
  v18 = vadd_f32(*v4, (float32x2_t)0x3A83126FBA83126FLL);
  if (v9 >= v8)
  {
    v20 = v9 - v4;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61)
      goto LABEL_127;
    v22 = (char *)v8 - (char *)v4;
    if (v22 >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), v23);
      v4 = *a1;
      v9 = a1[1];
    }
    else
    {
      v24 = 0;
    }
    v25 = (float32x2_t *)&v24[8 * v20];
    v8 = (float32x2_t *)&v24[8 * v23];
    *v25 = v18;
    v19 = v25 + 1;
    while (v9 != v4)
    {
      v26 = v9[-1].i32[0];
      --v9;
      v25[-1].i32[0] = v26;
      --v25;
      v25->i32[1] = v9->i32[1];
    }
    *a1 = v25;
    a1[1] = v19;
    a1[2] = v8;
    if (v4)
    {
      operator delete(v4);
      v4 = *a1;
      v8 = a1[2];
    }
    else
    {
      v4 = v25;
    }
  }
  else
  {
    *v9 = v18;
    v19 = v9 + 1;
  }
  a1[1] = v19;
  v27 = vadd_f32(*v4, (float32x2_t)vdup_n_s32(0xBA83126F));
  if (v19 >= v8)
  {
    v29 = v19 - v4;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61)
      goto LABEL_127;
    v31 = (char *)v8 - (char *)v4;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), v32);
      v4 = *a1;
      v19 = a1[1];
    }
    else
    {
      v33 = 0;
    }
    v34 = (float32x2_t *)&v33[8 * v29];
    v8 = (float32x2_t *)&v33[8 * v32];
    *v34 = v27;
    v28 = v34 + 1;
    while (v19 != v4)
    {
      v35 = v19[-1].i32[0];
      --v19;
      v34[-1].i32[0] = v35;
      --v34;
      v34->i32[1] = v19->i32[1];
    }
    *a1 = v34;
    a1[1] = v28;
    a1[2] = v8;
    if (v4)
    {
      operator delete(v4);
      v4 = *a1;
      v8 = a1[2];
    }
    else
    {
      v4 = v34;
    }
  }
  else
  {
    *v19 = v27;
    v28 = v19 + 1;
  }
  a1[1] = v28;
  a3.n128_u64[0] = (unint64_t)*v4;
  v36 = vadd_f32(*v4, (float32x2_t)0xBA83126F3A83126FLL);
  if (v28 < v8)
  {
    *v28 = v36;
    v37 = (uint64_t *)&v28[1];
    goto LABEL_71;
  }
  v38 = v28 - v4;
  v39 = v38 + 1;
  if ((unint64_t)(v38 + 1) >> 61)
LABEL_127:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v40 = (char *)v8 - (char *)v4;
  if (v40 >> 2 > v39)
    v39 = v40 >> 2;
  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
    v41 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v41 = v39;
  if (v41)
  {
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), v41);
    v4 = *a1;
    v28 = a1[1];
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[8 * v38];
  v44 = (float32x2_t *)&v42[8 * v41];
  *(float32x2_t *)v43 = v36;
  v37 = (uint64_t *)(v43 + 8);
  while (v28 != v4)
  {
    v45 = v28[-1].i32[0];
    --v28;
    *((_DWORD *)v43 - 2) = v45;
    v43 -= 8;
    a3.n128_u32[0] = v28->u32[1];
    *((_DWORD *)v43 + 1) = a3.n128_u32[0];
  }
  *a1 = (float32x2_t *)v43;
  a1[1] = (float32x2_t *)v37;
  a1[2] = v44;
  if (v4)
  {
    operator delete(v4);
    v4 = *a1;
  }
  else
  {
    v4 = (float32x2_t *)v43;
  }
LABEL_71:
  v46 = 126 - 2 * __clz(((char *)v37 - (char *)v4) >> 3);
  a1[1] = (float32x2_t *)v37;
  if (v37 == (uint64_t *)v4)
    v47 = 0;
  else
    v47 = v46;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*,false>((unint64_t)v4, v37, (uint64_t (**)(uint64_t *, uint64_t *))&v98, v47, 1, a3);
  if ((float32x2_t **)a2 != a1)
    std::vector<Vec2f>::__assign_with_size[abi:ne180100]<Vec2f*,Vec2f*>((_QWORD *)a2, *a1, a1[1], a1[1] - *a1);
  v48 = *a1;
  v49 = (char *)a1[1] - (char *)*a1;
  v50 = v49 >> 3;
  v51 = (*a1)->f32[0];
  v52 = (v49 >> 3) - 2;
  if ((int)(v49 >> 3) >= 2)
  {
    v53 = (v49 >> 3);
    v54 = (float *)&v48[1];
    v55 = 1;
    while (*v54 == v51)
    {
      ++v55;
      v54 += 2;
      if (v53 == v55)
      {
        v56 = v50 - 1;
        goto LABEL_84;
      }
    }
    v56 = v55 - 1;
    if ((_DWORD)v50 == (_DWORD)v55)
      goto LABEL_84;
    v60 = (int)v50 - 1;
    v61 = &v48[v60];
    v63 = (v50 - 2);
    v64 = v63 + 1;
    v65 = (float *)&v48[v63];
    while (*v65 == v61->f32[0])
    {
      v65 -= 2;
      if (v64-- <= 1)
      {
        v52 = -1;
        goto LABEL_95;
      }
    }
    v52 = v64 - 1;
LABEL_95:
    v67 = 0;
    v68 = v52 + 1;
    v69 = *(_QWORD *)a2;
    *(float *)v69 = v51;
    *(_DWORD *)(v69 + 4) = v48->i32[1];
    v70 = v56;
LABEL_96:
    v71 = v70;
    v72 = &v48[v70 + 1];
    while (v71 <= v52)
    {
      v70 = v71 + 1;
      v73 = *v72++;
      v74 = v73;
      if (v71 < v52)
      {
        v75 = (int32x2_t)vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v74, *v48)), vsub_f32(v48[v68], *v48));
        ++v71;
        if (vsub_f32((float32x2_t)v75, (float32x2_t)vdup_lane_s32(v75, 1)).f32[0] >= 0.0)
          continue;
      }
      v76 = v67 & (v67 >> 31);
      v77 = (float32x2_t *)(v69 + 8 * v67);
      while (1)
      {
        v78 = __OFSUB__(v67--, 1);
        if (v67 < 0 != v78)
          break;
        v79 = *v77;
        v80 = v77[-1];
        --v77;
        v81 = (int32x2_t)vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v74, v80)), vsub_f32(v79, v80));
        if (vsub_f32((float32x2_t)v81, (float32x2_t)vdup_lane_s32(v81, 1)).f32[0] > 0.0)
        {
          v76 = v67 + 1;
          break;
        }
      }
      v67 = v76 + 1;
      v82 = (_DWORD *)(v69 + 8 * (v76 + 1));
      *v82 = v74.i32[0];
      v82[1] = v72[-1].i32[1];
      goto LABEL_96;
    }
    if ((_DWORD)v60 == v68)
    {
      v83 = v67;
    }
    else
    {
      v83 = ++v67;
      v84 = (_DWORD *)(v69 + 8 * v67);
      *v84 = v61->i32[0];
      v84[1] = v61->i32[1];
    }
    v85 = v67;
LABEL_109:
    v86 = v68;
    v87 = (_DWORD *)&v48[v68] + 1;
    while (v86 >= (int)v55)
    {
      v68 = v86 - 1;
      v88 = *(float32x2_t *)(v87 - 3);
      v87 -= 2;
      if (v86 > (int)v55)
      {
        v89 = (int32x2_t)vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v88, *v61)), vsub_f32(v48[v56], *v61));
        --v86;
        if (vsub_f32((float32x2_t)v89, (float32x2_t)vdup_lane_s32(v89, 1)).f32[0] >= 0.0)
          continue;
      }
      v90 = v85;
      if (v85 >= v67)
        v91 = v67;
      else
        v91 = v85;
      v92 = v85 + 1;
      while (v90 > v83)
      {
        v93 = (float32x2_t *)(v69 + 8 * v90--);
        v94 = (int32x2_t)vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v88, v93[-1])), vsub_f32(*v93, v93[-1]));
        --v92;
        if (vsub_f32((float32x2_t)v94, (float32x2_t)vdup_lane_s32(v94, 1)).f32[0] > 0.0)
          goto LABEL_121;
      }
      v92 = v91;
LABEL_121:
      v85 = v92 + 1;
      v95 = (_DWORD *)(v69 + 8 * v85);
      *v95 = v88.i32[0];
      v95[1] = *v87;
      goto LABEL_109;
    }
    if (v56)
    {
      v96 = v85 + 1;
      v97 = (_DWORD *)(v69 + 8 * v96);
      *v97 = v48->i32[0];
      v97[1] = v48->i32[1];
    }
    else
    {
      v96 = v85;
    }
    v62 = v69 + 8 * v96;
    goto LABEL_126;
  }
  if ((_DWORD)v50 != 1)
  {
    v56 = 0;
    v60 = (int)v50 - 1;
    v61 = &v48[v60];
    LODWORD(v55) = 1;
    goto LABEL_95;
  }
  v56 = 0;
LABEL_84:
  v57 = *(_QWORD *)a2;
  *(float *)v57 = v51;
  *(_DWORD *)(v57 + 4) = v48->i32[1];
  v58 = &v48[v56];
  if (v58->f32[1] == v48->f32[1])
  {
    v59 = 1;
  }
  else
  {
    *(_DWORD *)(v57 + 8) = v58->i32[0];
    *(_DWORD *)(v57 + 12) = v58->i32[1];
    v59 = 2;
  }
  v62 = v57 + 8 * v59;
  *(_DWORD *)v62 = v48->i32[0];
  *(_DWORD *)(v62 + 4) = v48->i32[1];
LABEL_126:
  std::vector<Vec2f>::erase(a2, (char *)(v62 + 8), *(char **)(a2 + 8));
  return (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
}

BOOL `anonymous namespace'::rotateSegmentHAroundM(_QWORD *a1, int a2, _QWORD *a3, Vec2f *a4, int a5, float a6)
{
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  __int128 v20;
  _BOOL4 IntersectionOfLineSegment;
  const Vec2f *v22;
  float v23;
  float v24;
  float v25;
  __float2 v26;
  __int128 v28;
  uint64_t v29;
  int v30;
  int v31;

  if (a5 < 1)
  {
    return 1;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = a2 & ~(a2 >> 31);
    v14 = a2 - 1;
LABEL_3:
    v15 = 0;
    v16 = 4;
    while (v13 != v15)
    {
      v17 = v15 + 1;
      if (v14 == v15)
        v18 = 0;
      else
        v18 = v15 + 1;
      v19 = (int *)(*a3 + 8 * v18);
      v29 = *(_QWORD *)(*a3 + v16 - 4);
      v30 = *v19;
      v31 = v19[1];
      *(_QWORD *)&v20 = *a1;
      *((Vec2f *)&v20 + 1) = *a4;
      v28 = v20;
      IntersectionOfLineSegment = OMUtil::findIntersectionOfLineSegment((float *)&v29, (float *)&v28);
      v16 += 8;
      v15 = v17;
      if (IntersectionOfLineSegment)
      {
        v29 = 1065353216;
        v23 = OMUtil::angle((OMUtil *)&v29, a4, v22);
        v24 = a4->var0[1];
        if ((float)((float)(*(float *)&v29 * v24) - (float)(*((float *)&v29 + 1) * a4->var0[0])) < 0.0)
          v23 = 6.2832 - v23;
        v25 = sqrtf((float)(a4->var0[0] * a4->var0[0]) + (float)(v24 * v24));
        v26 = __sincosf_stret(v23 + a6);
        a4->var0[0] = v25 * v26.__cosval;
        a4->var0[1] = v25 * v26.__sinval;
        v11 = ++v12 >= a5;
        if (v12 != a5)
          goto LABEL_3;
        return v11;
      }
    }
  }
  return v11;
}

void OMKeyer2D::computeSatOffsetVector(OMKeyer2D *this)
{
  OMPie *v2;
  uint64_t v3;
  const Vec2f *v4;
  float32x2_t **v5;
  float v6;
  float v7;
  float32x2_t v8;

  v2 = (OMPie *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 96))(this);
  OMPie::computeArc(v2, v3, v4);
  v5 = (float32x2_t **)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 96))(this);
  OMPie::getArcOut(v5, 0.5, &v8);
  v6 = sqrtf((float)(v8.f32[0] * v8.f32[0]) + (float)(v8.f32[1] * v8.f32[1]));
  v7 = v8.f32[1] / v6;
  *((float *)this + 14) = v8.f32[0] / v6;
  *((float *)this + 15) = v7;
}

void OMKeyer2D::setSoftBasedOnOffsetFromTol(OMKeyer2D *this, float a2, float a3, float a4, float a5)
{
  float v10;
  float v11;
  OMPie *v12;
  OMPie *v13;
  float *v14;
  uint64_t v15;
  float v16;

  v10 = (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(OMKeyer2D *, float))(*(_QWORD *)this + 64))(this, v10 - (float)(a2 * a3));
  v11 = (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 48))(this);
  (*(void (**)(OMKeyer2D *, float))(*(_QWORD *)this + 88))(this, (float)(a2 * a4) + v11);
  v12 = (OMPie *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this);
  v13 = (OMPie *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 96))(this);
  OMPie::setBasedOnOffsetFromOtherPie(v12, v13, a2, a5, (const Vec2f *)1);
  v14 = *(float **)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this) + 40);
  v15 = *(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this) + 40);
  if (vabds_f32(*v14, *(float *)(v15 + 16)) < 0.02)
  {
    v16 = v14[1];
    if (vabds_f32(v16, *(float *)(v15 + 20)) < 0.02)
      OMKeyer2D::makeSoftCircle(this, sqrtf((float)(*v14 * *v14) + (float)(v16 * v16)));
  }
}

float OMKeyer2D::makeSoftCircle(OMKeyer2D *this, float a2)
{
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float32x2_t *v6;
  uint64_t v7;
  float32x2_t v8;
  uint64_t v9;
  int32x2_t v10;
  float32x2_t v11;
  const Vec2f *v12;
  float v13;
  float v14;
  __float2 v15;
  __float2 v16;
  float result;
  uint64_t v19;

  v3 = *(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this) + 40);
  v4 = *(float **)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this) + 40);
  v5 = *(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this) + 40);
  v6 = *(float32x2_t **)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this) + 40);
  v7 = (*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this);
  v8 = *(float32x2_t *)(v3 + 8);
  v3 += 8;
  v9 = *(_QWORD *)(v7 + 40);
  v10 = (int32x2_t)vmul_f32(v8, v8);
  *(float *)v10.i32 = sqrtf(vaddv_f32((float32x2_t)v10));
  v11 = vmul_n_f32(vdiv_f32(v8, (float32x2_t)vdup_lane_s32(v10, 0)), a2);
  v6[3] = v11;
  *(_DWORD *)(v9 + 32) = v11.i32[0];
  *(_DWORD *)(v9 + 36) = v6[3].i32[1];
  *(_DWORD *)v3 = v11.i32[0];
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(v9 + 36);
  v19 = 1065353216;
  v13 = OMUtil::angle((OMUtil *)&v19, (const Vec2f *)v3, v12);
  if ((float)((float)(*(float *)&v19 * *(float *)(v3 + 4)) - (float)(*((float *)&v19 + 1) * *(float *)v3)) >= 0.0)
    v14 = v13;
  else
    v14 = 6.2832 - v13;
  v15 = __sincosf_stret(v14 + 0.1);
  *v4 = v15.__cosval * a2;
  v4[1] = v15.__sinval * a2;
  v16 = __sincosf_stret(v14 + -0.1);
  result = v16.__sinval * a2;
  *(float *)(v5 + 16) = v16.__cosval * a2;
  *(float *)(v5 + 20) = v16.__sinval * a2;
  return result;
}

uint64_t OMKeyer2D::setSoftBasedOnHisto(OMKeyer2D *this, float a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  OMPie *v7;
  OMPie *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  float v31[4];
  float v32[4];
  float v33;
  float v34;

  v3 = a2 * 0.2;
  v4 = a2 * 0.3 + 1.0;
  v5 = (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(OMKeyer2D *, float))(*(_QWORD *)this + 64))(this, v5 - v4);
  v6 = (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 48))(this);
  (*(void (**)(OMKeyer2D *, float))(*(_QWORD *)this + 88))(this, v6 + v4);
  v7 = (OMPie *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this);
  v8 = (OMPie *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 96))(this);
  OMPie::setBasedOnOffsetFromOtherPie(v7, v8, 0.8, 1.0, (const Vec2f *)1);
  v9 = *(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this) + 40);
  v10 = *(float *)(v9 + 8);
  v11 = *(float *)(v9 + 12);
  v12 = sqrtf((float)(v10 * v10) + (float)(v11 * v11));
  v13 = v10 / v12;
  v14 = v11 / v12;
  v15 = *(float **)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this) + 40);
  v16 = *v15;
  v17 = v15[1];
  v18 = *(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 96))(this) + 40);
  v19 = *(float *)(v18 + 24);
  v20 = *(float *)(v18 + 28);
  v21 = sqrtf((float)((float)(v19 - v16) * (float)(v19 - v16)) + (float)((float)(v20 - v17) * (float)(v20 - v17)));
  v32[0] = v16;
  v32[1] = v17;
  v32[2] = v19 + (float)((float)(v19 - v16) / v21);
  v32[3] = v20 + (float)((float)(v20 - v17) / v21);
  v31[0] = -v13;
  v31[1] = -v14;
  v31[2] = v13;
  v31[3] = v14;
  if (OMUtil::findIntersectionOfLineSegment(v32, v31, &v33))
  {
    v22 = sqrtf((float)(v33 * v33) + (float)(v34 * v34));
    if (sqrtf((float)((float)(v13 + v33) * (float)(v13 + v33)) + (float)((float)(v14 + v34) * (float)(v14 + v34))) >= sqrtf((float)((float)(v13 - v33) * (float)(v13 - v33)) + (float)((float)(v14 - v34) * (float)(v14 - v34))))
      v23 = v22;
    else
      v23 = -v22;
    if (v3 < v23)
      v3 = v23;
  }
  v24 = v14 * v3;
  v25 = (float)(v13 * v3) + 0.0;
  v26 = v24 + 0.0;
  v27 = *(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this) + 40);
  *(float *)(v27 + 8) = v25;
  *(float *)(v27 + 12) = v26;
  v28 = *(_QWORD *)((*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this) + 40);
  *(float *)(v28 + 24) = v25;
  *(float *)(v28 + 28) = v26;
  result = (*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this);
  v30 = *(_QWORD *)(result + 40);
  *(float *)(v30 + 32) = v25;
  *(float *)(v30 + 36) = v26;
  return result;
}

void OMKeyer2D::computeCH(uint64_t a1, uint64_t *a2, _QWORD *a3, float *a4, float *a5, _DWORD *a6, float *a7, float *a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  int v23;
  float v24;
  __float2 v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  float *v36;
  float *v37;
  int v38;
  float *v39;
  float *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  float *v46;
  char *v47;
  int v48;
  int v49;
  float v50;
  float v51;
  uint64_t v52;
  float *v53;
  float v54;
  void *__p;
  float *v59;
  char *v60;
  float v61;
  float v62;
  float v63;

  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    __p = 0;
    v59 = 0;
    v60 = 0;
    if ((int)(-1431655765 * ((unint64_t)(v10 - v9) >> 2)) < 1)
    {
      v16 = 0;
      v19 = 1000.0;
      v20 = -1000.0;
      v18 = -1000.0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = -1000.0;
      v19 = 1000.0;
      v20 = -1000.0;
      do
      {
        v21 = v9 + 12 * v17;
        if ((*(_DWORD *)v21 & 0x7FFFFFFFu) <= 0x7F7FFFFF
          && (*(_DWORD *)(v21 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF
          && (*(_DWORD *)(v21 + 8) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          OMKeyer2DColorUtil::rgb2hsl((uint64_t *)v21, (uint64_t)&v61, *(unsigned int *)(a1 + 232), (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
          v22 = 0.0;
          if ((float)(v63 * 255.0) >= 0.0)
          {
            v22 = 255.0;
            if ((float)(v63 * 255.0) <= 255.0)
              v22 = v63 * 255.0;
          }
          v23 = (int)v22;
          if (v62 <= 1.0)
            v24 = v62;
          else
            v24 = 1.0;
          v25 = __sincosf_stret(v61 * 6.2832);
          v26 = *(float *)(*(_QWORD *)(a1 + 72) + 4 * v23);
          v27 = (float)(v24 * v25.__cosval) - (float)(v26 * *(float *)(a1 + 56));
          v28 = (float)(v24 * v25.__sinval) - (float)(v26 * *(float *)(a1 + 60));
          v29 = v59;
          if (v59 >= (float *)v60)
          {
            v30 = (float *)__p;
            v31 = ((char *)v59 - (_BYTE *)__p) >> 3;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v33 = v60 - (_BYTE *)__p;
            if ((v60 - (_BYTE *)__p) >> 2 > v32)
              v32 = v33 >> 2;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v60, v34);
              v30 = (float *)__p;
              v29 = v59;
            }
            else
            {
              v35 = 0;
            }
            v36 = (float *)&v35[8 * v31];
            *v36 = v27;
            v36[1] = v28;
            v37 = v36;
            while (v29 != v30)
            {
              v38 = *((_DWORD *)v29 - 2);
              v29 -= 2;
              *((_DWORD *)v37 - 2) = v38;
              v37 -= 2;
              v37[1] = v29[1];
            }
            v16 = v36 + 2;
            __p = v37;
            v59 = v36 + 2;
            v60 = &v35[8 * v34];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *v59 = v27;
            v29[1] = v28;
            v16 = v29 + 2;
          }
          v59 = v16;
          if (v63 > v18)
            v18 = v63;
          if (v63 < v19)
            v19 = v63;
          if (v62 > v20)
            v20 = v62;
        }
        ++v17;
        v9 = *a2;
      }
      while (v17 < (int)(-1431655765 * ((unint64_t)(a2[1] - *a2) >> 2)));
    }
    *a5 = (float)(v18 + v18) + -1.0;
    a9.n128_f32[0] = (float)(v19 + v19) + -1.0;
    *a6 = a9.n128_u32[0];
    *a7 = v20;
    if (a8)
    {
      if (v16 >= (float *)v60)
      {
        v40 = (float *)__p;
        v41 = ((char *)v16 - (_BYTE *)__p) >> 3;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v43 = v60 - (_BYTE *)__p;
        if ((v60 - (_BYTE *)__p) >> 2 > v42)
          v42 = v43 >> 2;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44)
        {
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v60, v44);
          v40 = (float *)__p;
          v16 = v59;
        }
        else
        {
          v45 = 0;
        }
        v46 = (float *)&v45[8 * v41];
        v47 = &v45[8 * v44];
        *v46 = *a8;
        a9.n128_f32[0] = a8[1];
        v46[1] = a9.n128_f32[0];
        v39 = v46 + 2;
        while (v16 != v40)
        {
          v48 = *((_DWORD *)v16 - 2);
          v16 -= 2;
          *((_DWORD *)v46 - 2) = v48;
          v46 -= 2;
          a9.n128_f32[0] = v16[1];
          v46[1] = a9.n128_f32[0];
        }
        __p = v46;
        v59 = v39;
        v60 = v47;
        if (v40)
          operator delete(v40);
      }
      else
      {
        *v16 = *a8;
        a9.n128_f32[0] = a8[1];
        v16[1] = a9.n128_f32[0];
        v39 = v16 + 2;
      }
      v59 = v39;
    }
    v50 = *a4;
    if (v49 <= 0)
    {
      v51 = a4[1];
    }
    else
    {
      v51 = a4[1];
      v52 = v49;
      v53 = (float *)(*a3 + 4);
      do
      {
        v50 = *(v53 - 1) + v50;
        *a4 = v50;
        v54 = *v53;
        v53 += 2;
        v51 = v54 + v51;
        a4[1] = v51;
        --v52;
      }
      while (v52);
    }
    *a4 = v50 / (float)v49;
    a4[1] = v51 / (float)v49;
    if (__p)
    {
      v59 = (float *)__p;
      operator delete(__p);
    }
  }
}

void sub_1B2CB7600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OMKeyer2D::adjustToRestriction(OMKeyer2D *this)
{
  float v2;
  float v3;
  float v4;
  float v5;
  OMPie *v6;
  OMPie *v7;

  v2 = (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 32))(this);
  v3 = (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 40))(this);
  v4 = (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 48))(this);
  v5 = (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 56))(this);
  if (v2 >= v3)
    (*(void (**)(OMKeyer2D *, float))(*(_QWORD *)this + 64))(this, v3 + -0.01);
  if (v5 <= v4)
    (*(void (**)(OMKeyer2D *, float))(*(_QWORD *)this + 88))(this, v4 + 0.01);
  v6 = (OMPie *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 112))(this);
  v7 = (OMPie *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 96))(this);
  return OMPie::offsetSegmentIfNeeded(v6, v7, 0.001);
}

void OMKeyer2D::computeModel(OMKeyer2D *this, int a2, float a3, int a4, OMSamples *a5, float a6, float a7, float a8, BOOL a9, int a10)
{
  _QWORD *Description;
  _QWORD *Serializer;
  OMSpline *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t *v31;
  double v32;
  __n128 v33;
  uint64_t *EdgeSamples;
  float32x2_t v35;
  double v36;
  float32x2_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  float *v57;
  float32x2_t v58;
  float v59;
  int32x2_t v60;
  float v61;
  int BoundingBox;
  uint64_t v63;
  float v64;
  float v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  double v69;
  float *v70;
  uint64_t v71;
  OMSpline *v73;
  OMSpline *v74;
  unint64_t v75;
  uint64_t v76;
  float *v77;
  float v78;
  float v79;
  float v80;
  float v81;
  unint64_t v82;
  Vec3f v83;
  float32x4_t v84[4];
  float32x4_t v85[4];
  float32x4_t v86[4];
  float32x4_t v87[4];
  Vec2f v88;
  float32x2_t v89;
  float v90;
  float *v91;
  float *v92;
  unint64_t v93;

  if (*((_BYTE *)a5 + 8))
  {
    Description = (_QWORD *)ProGL::Private::TextureImpl::getDescription(a5);
    Serializer = (_QWORD *)OZSceneNode::getSerializer(a5);
    v87[0].i32[0] = 0;
    v86[0].i32[0] = 0;
    v85[0].i32[0] = 0;
    OMKeyer2D::tolAdd(this, Description, Serializer, 1, v87[0].f32, v86[0].f32, v85[0].f32);
    v21 = (OMSpline *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 16))(this);
    *((_QWORD *)v21 + 1) = *(_QWORD *)v21;
    v22 = (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 40))(this);
    v23 = (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 48))(this);
    if (a4)
    {
      v24 = (float)(v86[0].f32[0] - v87[0].f32[0]) * 0.5;
      v25 = v85[0].f32[0] - v87[0].f32[0];
      if (v86[0].f32[0] <= v87[0].f32[0])
        v26 = (float)(v86[0].f32[0] - v87[0].f32[0]) * 0.5;
      else
        v26 = -v24;
      v81 = a6;
      v80 = a8;
      if (v86[0].f32[0] <= v87[0].f32[0])
        v27 = -v24;
      else
        v27 = (float)(v86[0].f32[0] - v87[0].f32[0]) * 0.5;
      v87[0].f32[0] = v26;
      v86[0].f32[0] = v27;
      v28 = a3;
      v29 = a7;
      v30 = v25 + v26;
      v88 = (Vec2f)3212836864;
      OMSpline::addVertexAtEnd(v21, &v88);
      v88.var0[0] = v22;
      v88.var0[1] = v26;
      OMSpline::addVertexAtEnd(v21, &v88);
      v88.var0[0] = (float)(v22 + v23) * 0.5;
      v88.var0[1] = v30;
      a7 = v29;
      a3 = v28;
      OMSpline::addVertexAtEnd(v21, &v88);
      v88.var0[0] = v23;
      v88.var0[1] = v27;
      a8 = v80;
      a6 = v81;
    }
    else
    {
      v88 = (Vec2f)3212836864;
      OMSpline::addVertexAtEnd(v21, &v88);
      v88.var0[0] = v22;
      v88.var0[1] = 0.0;
      OMSpline::addVertexAtEnd(v21, &v88);
      v88.var0[0] = (float)(v22 + v23) * 0.5;
      v88.var0[1] = 0.0;
      OMSpline::addVertexAtEnd(v21, &v88);
      v88.var0[0] = v23;
      v88.var0[1] = 0.0;
    }
    OMSpline::addVertexAtEnd(v21, &v88);
    v88 = (Vec2f)1065353216;
    OMSpline::addVertexAtEnd(v21, &v88);
    v31 = (uint64_t *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 16))(this);
    LODWORD(v32) = -1.0;
    v33.n128_u32[0] = 1.0;
    OMSpline::computeLinearArray(v31, (uint64_t *)this + 9, v32, v33, -1.0, 1.0, 1.0);
    OMKeyer2D::tolAdd(this, Description, Serializer, 0, 0, 0, 0);
  }
  if (a2)
  {
    if (a10)
      OMKeyer2D::setSoftBasedOnHisto(this, a3);
    else
      OMKeyer2D::setSoftBasedOnOffsetFromTol(this, a3 * 0.05, a6, a7, a8);
    EdgeSamples = (uint64_t *)OMSamples::getEdgeSamples(a5);
    v44 = *EdgeSamples;
    v43 = EdgeSamples[1];
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v45 = v43 - v44;
    if (v45)
    {
      v46 = EdgeSamples;
      v47 = 0;
      v48 = v45 / 88;
      if (v48 <= 1)
        v48 = 1;
      v82 = v48;
      do
      {
        v49 = *v46;
        v50 = *v46 + 88 * v47;
        v53 = *(_QWORD *)(v50 + 48);
        v52 = (uint64_t *)(v50 + 48);
        v51 = v53;
        v89 = 0;
        v90 = 0.0;
        v54 = v52[1];
        v55 = (v54 - v53) / 12;
        if (v54 != v53)
        {
          if (v55 <= 1)
            v56 = 1;
          else
            v56 = v55;
          v57 = (float *)(v51 + 8);
          v58 = 0;
          v59 = 0.0;
          do
          {
            v60 = *(int32x2_t *)(v57 - 2);
            v58 = vadd_f32(v58, (float32x2_t)v60);
            v61 = *v57;
            v57 += 3;
            v59 = v59 + v61;
            v89 = v58;
            v90 = v59;
            --v56;
          }
          while (v56);
          *(float *)v60.i32 = (float)v55;
          *(float *)&v36 = v59 / (float)v55;
          v37 = (float32x2_t)vdup_lane_s32(v60, 0);
          v35 = vdiv_f32(v58, v37);
          v89 = v35;
          v90 = *(float *)&v36;
        }
        BoundingBox = OMUtil::getBoundingBox(v52, (uint64_t)&v88, 0, &v89, *(double *)&v35, v36, *(double *)&v37, v38, v39, v40, v41, v42);
        if (BoundingBox)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C20], "OMUtil::getBoundingBox result = %d\n", BoundingBox);
        }
        else
        {
          inv((const Mat4f *)&v88, v87);
          v63 = v49 + 88 * v47;
          v64 = *(float *)(v63 + 76);
          if (*(_BYTE *)(v63 + 84))
            v64 = 1.0 - v64;
          if (v64 >= 0.5)
            v65 = (float)(v64 * 8.0) + -3.0;
          else
            v65 = v64 + v64;
          v83.var0[0] = v65;
          v83.var0[1] = v65;
          v83.var0[2] = v65;
          Mat4f::MakeHScale((Mat4f *)v84, &v83);
          Mat4f::operator*((float *)&v88, v84, v85);
          v35 = (float32x2_t)Mat4f::operator*(v85[0].f32, v87, v86).u64[0];
          if (v54 != v51)
          {
            v66 = 0;
            v67 = 1;
            do
            {
              v68 = *v52 + 12 * v66;
              v84[0].i64[0] = *(_QWORD *)v68;
              v84[0].i32[2] = *(_DWORD *)(v68 + 8);
              v84[0].i32[3] = 1065353216;
              operator*(v86[0].f32, v84[0].f32, v85[0].f32);
              proj((float32x2_t *)v85, (float32x2_t *)&v83, v69);
              v70 = v92;
              if ((unint64_t)v92 >= v93)
              {
                v71 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>((uint64_t *)&v91, &v83);
              }
              else
              {
                *v92 = v83.var0[0];
                v70[1] = v83.var0[1];
                v35.i32[0] = LODWORD(v83.var0[2]);
                v70[2] = v83.var0[2];
                v71 = (uint64_t)(v70 + 3);
              }
              v92 = (float *)v71;
              v66 = v67;
            }
            while (v55 > v67++);
          }
        }
        ++v47;
      }
      while (v47 != v82);
    }
    OMKeyer2D::adjustSoft((uint64_t)this, (uint64_t *)&v91);
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
  }
  else if (OMKeyer2D::adjustToRestriction(this))
  {
    OMKeyer2D::setSoftBasedOnOffsetFromTol(this, a3 * 0.05, a6, a7, a8);
  }
  v73 = (OMSpline *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 16))(this);
  v74 = v73;
  v75 = *((_QWORD *)v73 + 1) - *(_QWORD *)v73;
  if ((int)(v75 >> 5) < 1)
  {
LABEL_49:
    v78 = (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 40))(this);
    v79 = (*(float (**)(OMKeyer2D *))(*(_QWORD *)this + 48))(this);
    *((_QWORD *)v74 + 1) = *(_QWORD *)v74;
    v88 = (Vec2f)3212836864;
    OMSpline::addVertexAtEnd(v74, &v88);
    v88.var0[0] = v78;
    v88.var0[1] = 0.0;
    OMSpline::addVertexAtEnd(v74, &v88);
    v88.var0[0] = (float)(v78 + v79) * 0.5;
    v88.var0[1] = 0.0;
    OMSpline::addVertexAtEnd(v74, &v88);
    v88.var0[0] = v79;
    v88.var0[1] = 0.0;
    OMSpline::addVertexAtEnd(v74, &v88);
    v88 = (Vec2f)1065353216;
    OMSpline::addVertexAtEnd(v74, &v88);
  }
  else
  {
    v76 = (v75 >> 5);
    v77 = (float *)(*(_QWORD *)v73 + 28);
    while (*v77 == 0.0)
    {
      v77 += 8;
      if (!--v76)
        goto LABEL_49;
    }
  }
}

void sub_1B2CB7D64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 80);
  if (v3)
  {
    *(_QWORD *)(v1 + 88) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OMKeyer2D::adjustSoft(uint64_t a1, uint64_t *a2)
{
  OMPie *v4;
  float32x2_t *v5;
  uint64_t v6;
  const Vec2f *v7;
  float *v8;
  float32x2_t v9;
  __n128 v10;
  OMPie *v11;
  OMPie *v12;
  Vec2f *v13;
  float v14;
  float v15;
  int v16;
  unsigned int v17;
  _BYTE *v18;
  unint64_t v19;
  float *v20;
  unsigned int v21;
  float v22;
  float v23;
  BOOL v24;
  int v25;
  Vec2f v26;
  void *__p;
  _BYTE *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  float32x2_t v37;

  if (*a2 != a2[1])
  {
    v4 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    v5 = (float32x2_t *)*((_QWORD *)v4 + 5);
    OMPie::computeArc(v4, v6, v7);
    OMPie::getArcOut((float32x2_t **)v4, 0.5, &v37);
    v9 = v5[1];
    v8 = (float *)&v5[1];
    v10.n128_u64[0] = (unint64_t)vmul_f32(vadd_f32(v9, v37), (float32x2_t)0x3F0000003F000000);
    v36 = v10.n128_u64[0];
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v31 = 0;
    v32 = 0;
    v30 = 0.0;
    OMKeyer2D::computeCH(a1, a2, &v33, (float *)&v32, (float *)&v31 + 1, &v31, &v30, (float *)&v36, v10);
    v11 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    v12 = v11;
    v13 = (Vec2f *)*((_QWORD *)v11 + 5);
    if (sqrtf((float)(v13->var0[0] * v13->var0[0]) + (float)(v13->var0[1] * v13->var0[1])) < v30
      || sqrtf((float)(v13[2].var0[0] * v13[2].var0[0]) + (float)(v13[2].var0[1] * v13[2].var0[1])) < v30)
    {
      __p = 0;
      v28 = 0;
      v29 = 0;
      v26.var0[0] = v30;
      v26.var0[1] = 0.0;
      v25 = 11;
      OMPie::move(v11, &v25, &v26, (float32x2_t *)&v26);
      if (__p)
      {
        v28 = __p;
        operator delete(__p);
      }
    }
    v14 = *(float *)&v31;
    if (v14 < (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
      (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 64))(a1, v14);
    v15 = *((float *)&v31 + 1);
    if (v15 > (*(float (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
      v16 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a1 + 88))(a1, v15);
    __p = 0;
    v28 = 0;
    v17 = 125;
    v29 = 0;
    do
    {
      if (__p != v28)
        break;
      OMKeyer2D::computeCostPie(v16, (uint64_t *)&__p, v8, (float *)&v37, (float *)&v13[1], v13, v13 + 2, v4, v12, &v33, v17 + 25);
      v17 += 25;
    }
    while (v17 <= 0x145);
    OMKeyer2D::computeCostPieAsQuad(v16, (uint64_t *)&__p, (uint64_t)v4, v12, &v33);
    v18 = __p;
    if (v28 == __p)
    {
      if (!__p)
        goto LABEL_21;
    }
    else
    {
      v19 = 0x2E8BA2E8BA2E8BA3 * ((v28 - (_BYTE *)__p) >> 2);
      v20 = (float *)((char *)__p + 20);
      v21 = 1;
      v22 = 10000.0;
      do
      {
        v23 = *(v20 - 5);
        if (v23 < v22)
        {
          v13[1].var0[0] = *(v20 - 4);
          v13[1].var0[1] = *(v20 - 3);
          v13->var0[0] = *(v20 - 2);
          v13->var0[1] = *(v20 - 1);
          v13[2].var0[0] = *v20;
          v13[2].var0[1] = v20[1];
          v13[3].var0[0] = v20[2];
          v13[3].var0[1] = v20[3];
          v13[4].var0[0] = v20[4];
          v13[4].var0[1] = v20[5];
          v22 = v23;
        }
        v24 = v19 > v21++;
        v20 += 11;
      }
      while (v24);
    }
    v28 = v18;
    operator delete(v18);
LABEL_21:
    if (v33)
    {
      v34 = v33;
      operator delete(v33);
    }
  }
}

void sub_1B2CB8084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

float32x2_t OMKeyer2D::getTolCenterCbCr@<D0>(OMKeyer2D *this@<X0>, float32x2_t *a2@<X8>)
{
  OMPie *v3;
  uint64_t v4;
  const Vec2f *v5;
  float32x2_t result;
  float32x2_t v7;
  float32x2_t v8;

  v3 = (OMPie *)(*(uint64_t (**)(OMKeyer2D *))(*(_QWORD *)this + 96))(this);
  OMPie::computeArc(v3, v4, v5);
  OMPie::getArcIn(v3, 0.5, (float *)&v8);
  OMPie::getArcOut((float32x2_t **)v3, 0.5, &v7);
  result = vmul_f32(vadd_f32(v8, v7), (float32x2_t)0x3F0000003F000000);
  *a2 = result;
  return result;
}

void OMKeyer2D::getSpillSuppressTransf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8, float a9, float a10, float a11, float a12)
{
  OMPie *v23;
  uint64_t v24;
  const Vec2f *v25;
  uint64_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;

  v23 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  OMPie::computeArc(v23, v24, v25);
  OMPie::getArcIn(v23, 0.5, (float *)&v28);
  OMPie::getArcOut((float32x2_t **)v23, 0.5, &v27);
  v29 = vmul_f32(vadd_f32(v28, v27), (float32x2_t)0x3F0000003F000000);
  OMKeyer2D::getSpillSuppressTransf((float *)&v29, a2, a3, a4, a5, a6, a7, v26, a8, a9, a10, a11, a12);
}

void OMKeyer2D::getSpillSuppressTransf(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, float a12, float a13)
{
  float v20;
  float v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  float32x4_t *v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  double v32;
  double v33;
  double v34;
  float v35;
  OMColorUtil *v36;
  float v37;
  OMColorUtil *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x2_t v54;
  float32x4_t v58[4];
  Vec3f v59;
  float32x4_t v60[4];
  Vec3f v61;
  float32x4_t v62[4];
  Vec3f v63;
  float32x4_t v64[4];
  Vec3f v65;
  float32x4_t v66[4];
  Vec3f v67;
  float32x4_t v68[4];
  Vec3f v69;
  float32x4_t v70[4];
  float32x4_t v71[4];
  float32x4_t v72[4];
  float32x4_t v73[4];
  float32x4_t v74[4];
  float32x4_t v75[4];
  float32x4_t v76[4];
  float v77;
  float32x2_t v78;
  float32x4_t v79[4];
  float32x4_t v80[4];
  float v81[16];
  float32x4_t v82[4];

  v20 = *a1;
  v21 = a1[1];
  if ((_DWORD)a7)
  {
    OMColorUtil::getRec2020to709Matrix(a2, a3, a4, a5, a6, a7, a8, (Mat4f *)v80);
    if ((v22 & 1) == 0
    {
      OMColorUtil::getRGBToYCbCrMatrix(0, v39, v40, v41, v42, v43, v44, v45, (Mat4f *)v79);
      Mat4f::operator*(v79[0].f32, v80, OMKeyer2D::getSpillSuppressTransf(Vec2f const&,float,Vec3f const&,float,float,float,Mat4f &,Mat4f &,Mat4f &,float,OMColorPrimaries,BOOL)::matrixTunedForRec2020);
    }
    if ((v23 & 1) == 0
    {
      inv((const Mat4f *)OMKeyer2D::getSpillSuppressTransf(Vec2f const&,float,Vec3f const&,float,float,float,Mat4f &,Mat4f &,Mat4f &,float,OMColorPrimaries,BOOL)::matrixTunedForRec2020, OMKeyer2D::getSpillSuppressTransf(Vec2f const&,float,Vec3f const&,float,float,float,Mat4f &,Mat4f &,Mat4f &,float,OMColorPrimaries,BOOL)::inversematrixTunedForRec2020);
    }
    Mat4f::operator=((uint64_t)v82, (uint64_t)OMKeyer2D::getSpillSuppressTransf(Vec2f const&,float,Vec3f const&,float,float,float,Mat4f &,Mat4f &,Mat4f &,float,OMColorPrimaries,BOOL)::matrixTunedForRec2020);
    v24 = OMKeyer2D::getSpillSuppressTransf(Vec2f const&,float,Vec3f const&,float,float,float,Mat4f &,Mat4f &,Mat4f &,float,OMColorPrimaries,BOOL)::inversematrixTunedForRec2020;
  }
  else
  {
    if ((v25 & 1) == 0)
    {
      v46 = a6;
      {
        OMColorUtil::getRGBToYCbCrMatrix(v46, v47, v48, v49, v50, v51, v52, v53, (Mat4f *)&OMKeyer2D::getSpillSuppressTransf(Vec2f const&,float,Vec3f const&,float,float,float,Mat4f &,Mat4f &,Mat4f &,float,OMColorPrimaries,BOOL)::matrixNormal);
      }
    }
    if ((v26 & 1) == 0
    {
      inv((const Mat4f *)&OMKeyer2D::getSpillSuppressTransf(Vec2f const&,float,Vec3f const&,float,float,float,Mat4f &,Mat4f &,Mat4f &,float,OMColorPrimaries,BOOL)::matrixNormal, OMKeyer2D::getSpillSuppressTransf(Vec2f const&,float,Vec3f const&,float,float,float,Mat4f &,Mat4f &,Mat4f &,float,OMColorPrimaries,BOOL)::inverseMatrixNormal);
    }
    Mat4f::operator=((uint64_t)v82, (uint64_t)&OMKeyer2D::getSpillSuppressTransf(Vec2f const&,float,Vec3f const&,float,float,float,Mat4f &,Mat4f &,Mat4f &,float,OMColorPrimaries,BOOL)::matrixNormal);
    v24 = OMKeyer2D::getSpillSuppressTransf(Vec2f const&,float,Vec3f const&,float,float,float,Mat4f &,Mat4f &,Mat4f &,float,OMColorPrimaries,BOOL)::inverseMatrixNormal;
  }
  Mat4f::operator=((uint64_t)v81, (uint64_t)v24);
  v27 = sqrtf((float)(v20 * v20) + (float)(v21 * v21));
  v28 = atan2f(v21, v20);
  if (v28 >= 0.0)
    v29 = v28;
  else
    v29 = v28 + 6.2832;
  v30 = v27 * 0.4;
  v31 = (float)(a9 / (float)(v30 + a9)) + a12;
  v79[0].i64[0] = *(_QWORD *)a2;
  v79[0].i32[2] = *(_DWORD *)(a2 + 8);
  v79[0].i32[3] = 1065353216;
  operator*(v82[0].f32, v79[0].f32, v80[0].f32);
  proj((float32x2_t *)v80, (float32x2_t *)&v77, v32);
  *(_QWORD *)v69.var0 = 1065353216;
  v69.var0[2] = 0.0;
  v33 = (float)(v29 + 1.5708);
  v34 = (float)(-1.5708 - v29);
  v35 = (v77 + -0.5) * 0.4;
  v54 = vadd_f32(v78, v78);
  Mat4f::MakeHRot((Mat4f *)v70, &v69, v33);
  Mat4f::operator*(v81, v70, v71);
  *(_QWORD *)v67.var0 = 0;
  v67.var0[2] = a9;
  Mat4f::MakeHTrans((Mat4f *)v68, &v67);
  Mat4f::operator*(v71[0].f32, v68, v72);
  v65.var0[0] = 1.0;
  v65.var0[1] = a13;
  v65.var0[2] = v31;
  Mat4f::MakeHScale((Mat4f *)v66, &v65);
  Mat4f::operator*(v72[0].f32, v66, v73);
  *(_QWORD *)v63.var0 = 0;
  v63.var0[2] = -a9;
  Mat4f::MakeHTrans((Mat4f *)v64, &v63);
  Mat4f::operator*(v73[0].f32, v64, v74);
  *(_QWORD *)v61.var0 = 1065353216;
  v61.var0[2] = 0.0;
  Mat4f::MakeHRot((Mat4f *)v62, &v61, v34);
  Mat4f::operator*(v74[0].f32, v62, v75);
  v59.var0[0] = v35;
  *(float32x2_t *)&v59.var0[1] = v54;
  Mat4f::MakeHTrans((Mat4f *)v60, &v59);
  Mat4f::operator*(v75[0].f32, v60, v76);
  OMColorUtil::Level4f(v36, a10, a11, v58);
  Mat4f::operator*(v76[0].f32, v58, v79);
  Mat4f::operator*(v79[0].f32, v82, v80);
  Mat4f::operator=(a4, (uint64_t)v80);
  *(_QWORD *)v69.var0 = 1065353216;
  v69.var0[2] = 0.0;
  Mat4f::MakeHRot((Mat4f *)v70, &v69, v33);
  Mat4f::operator*(v81, v70, v71);
  *(_QWORD *)v67.var0 = 0;
  v67.var0[2] = a9;
  Mat4f::MakeHTrans((Mat4f *)v68, &v67);
  Mat4f::operator*(v71[0].f32, v68, v72);
  v37 = sqrtf((float)(*a1 * *a1) + (float)(a1[1] * a1[1])) * 0.5;
  *(_QWORD *)v65.var0 = 0;
  v65.var0[2] = v37;
  Mat4f::MakeHTrans((Mat4f *)v66, &v65);
  Mat4f::operator*(v72[0].f32, v66, v73);
  *(_QWORD *)v63.var0 = 0;
  v63.var0[2] = -a9;
  Mat4f::MakeHTrans((Mat4f *)v64, &v63);
  Mat4f::operator*(v73[0].f32, v64, v74);
  *(_QWORD *)v61.var0 = 1065353216;
  v61.var0[2] = 0.0;
  Mat4f::MakeHRot((Mat4f *)v62, &v61, v34);
  Mat4f::operator*(v74[0].f32, v62, v75);
  v59.var0[0] = v35;
  *(float32x2_t *)&v59.var0[1] = v54;
  Mat4f::MakeHTrans((Mat4f *)v60, &v59);
  Mat4f::operator*(v75[0].f32, v60, v76);
  OMColorUtil::Level4f(v38, a10, a11, v58);
  Mat4f::operator*(v76[0].f32, v58, v79);
  Mat4f::operator*(v79[0].f32, v82, v80);
  Mat4f::operator=(a5, (uint64_t)v80);
  v74[0].i64[0] = 0;
  v74[0].f32[2] = -a9;
  Mat4f::MakeHTrans((Mat4f *)v76, (const Vec3f *)v74);
  v73[0].i64[0] = 1065353216;
  v73[0].i32[2] = 0;
  Mat4f::MakeHRot((Mat4f *)v75, (const Vec3f *)v73, v34);
  Mat4f::operator*(v76[0].f32, v75, v79);
  Mat4f::operator*(v79[0].f32, v82, v80);
  Mat4f::operator=(a3, (uint64_t)v80);
}

void sub_1B2CB87C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OMKeyer2D::computeCostPie(int a1, uint64_t *a2, float *a3, float *a4, float *a5, Vec2f *a6, Vec2f *a7, OMPie *this, OMPie *a9, _QWORD *a10, int a11)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  Vec2f *v24;
  float v25;
  float v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  __int128 v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _BYTE v38[40];
  void *__p;
  void *v40;
  Vec2f v41;
  Vec2f v42;
  _QWORD v43[2];

  v18 = 0.0;
  do
  {
    v19 = *a3 - *a4;
    v20 = a3[1] - a4[1];
    v21 = sqrtf((float)(v19 * v19) + (float)(v20 * v20));
    v22 = v18 * (float)(v19 / v21);
    v23 = v18 * (float)(v20 / v21);
    *(float *)v43 = v22;
    *((float *)v43 + 1) = v23;
    if ((OMPie::isQuadActive(this)
       || sqrtf((float)(*a5 * *a5) + (float)(a5[1] * a5[1])) > sqrtf((float)(*a3 * *a3) + (float)(a3[1] * a3[1])))
      && (OMPie::isQuadActive(a9)
       || sqrtf((float)(v22 * v22) + (float)(v23 * v23)) > sqrtf((float)(*a5 * *a5) + (float)(a5[1] * a5[1]))))
    {
      v42 = *a6;
      {
        v41 = *a7;
        {
          OMPie::OMPie((OMPie *)v38, 1);
          v24 = (Vec2f *)__p;
          *((float *)__p + 2) = v22;
          v24[1].var0[1] = v23;
          *v24 = v42;
          v24[2] = v41;
          v24[3].var0[0] = v22;
          v24[3].var0[1] = v23;
          v24[4].var0[0] = v22;
          v24[4].var0[1] = v23;
          OMPie::getArea((OMPie *)v38);
          v26 = v18 + v18 + v25;
          *(Vec2f *)&v27 = v42;
          v30 = v26;
          v31 = v22;
          v32 = v23;
          *((Vec2f *)&v27 + 1) = v41;
          v33 = v27;
          v34 = v22;
          v35 = v23;
          v36 = v22;
          v37 = v23;
          v28 = a2[1];
          if (v28 >= a2[2])
          {
            v29 = std::vector<OMCostPie>::__push_back_slow_path<OMCostPie>(a2, &v30);
          }
          else
          {
            *(float *)v28 = v26;
            *(float *)(v28 + 4) = v31;
            *(float *)(v28 + 8) = v32;
            *(_OWORD *)(v28 + 12) = v33;
            *(float *)(v28 + 28) = v34;
            *(float *)(v28 + 32) = v35;
            *(float *)(v28 + 36) = v36;
            *(float *)(v28 + 40) = v37;
            v29 = v28 + 44;
            a2[1] = v28 + 44;
          }
          a2[1] = v29;
          if (__p)
          {
            v40 = __p;
            operator delete(__p);
          }
        }
      }
    }
    v18 = v18 + 0.01;
  }
  while (v18 < 2.0);
}

void sub_1B2CB8AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OMKeyer2D::computeCostPieAsQuad(int a1, uint64_t *a2, uint64_t a3, OMPie *this, _QWORD *a5)
{
  _DWORD *v9;
  char *v10;
  char **v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  int v52;
  unint64_t v53;
  std::vector<int>::pointer begin;
  uint64_t v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  int v63;
  std::vector<int>::pointer v64;
  int v65;
  std::vector<int>::pointer v66;
  std::vector<int>::pointer v67;
  std::vector<int>::pointer v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  BOOL v76;
  int *v77;
  float v78;
  float v79;
  float v80;
  __float2 v81;
  float v82;
  __float2 v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float *v89;
  float v90;
  float *v91;
  float v92;
  float v93;
  const Vec2f *v94;
  const Vec2f *v95;
  float v96;
  uint64_t v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  unint64_t v113;
  uint64_t v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  uint64_t v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  Vec2f v132;
  std::vector<int>::value_type __x[10];
  void *__p;
  void *v135;
  std::vector<int> v136;
  std::vector<int> v137;
  std::vector<int> v138;

  if (!OMPie::isQuadActive(this))
    return;
  v9 = (_DWORD *)*((_QWORD *)this + 5);
  v11 = (char **)(a5 + 2);
  v10 = (char *)a5[2];
  v12 = (char *)a5[1];
  if (v12 >= v10)
  {
    v14 = (char *)*a5;
    v15 = (uint64_t)&v12[-*a5] >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      goto LABEL_123;
    v17 = v10 - v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a5 + 2), v18);
      v14 = (char *)*a5;
      v12 = (char *)a5[1];
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    v10 = &v19[8 * v18];
    *(_DWORD *)v20 = *v9;
    *((_DWORD *)v20 + 1) = v9[1];
    v13 = v20 + 8;
    while (v12 != v14)
    {
      v21 = *((_DWORD *)v12 - 2);
      v12 -= 8;
      *((_DWORD *)v20 - 2) = v21;
      v20 -= 8;
      *((_DWORD *)v20 + 1) = *((_DWORD *)v12 + 1);
    }
    *a5 = v20;
    a5[1] = v13;
    a5[2] = v10;
    if (v14)
    {
      operator delete(v14);
      v10 = *v11;
    }
  }
  else
  {
    *(_DWORD *)v12 = *v9;
    *((_DWORD *)v12 + 1) = v9[1];
    v13 = v12 + 8;
  }
  a5[1] = v13;
  v22 = *((_QWORD *)this + 5);
  if (v13 >= v10)
  {
    v24 = (char *)*a5;
    v25 = (uint64_t)&v13[-*a5] >> 3;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      goto LABEL_123;
    v27 = v10 - v24;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a5 + 2), v28);
      v24 = (char *)*a5;
      v13 = (char *)a5[1];
    }
    else
    {
      v29 = 0;
    }
    v30 = &v29[8 * v25];
    v10 = &v29[8 * v28];
    *(_DWORD *)v30 = *(_DWORD *)(v22 + 16);
    *((_DWORD *)v30 + 1) = *(_DWORD *)(v22 + 20);
    v23 = v30 + 8;
    while (v13 != v24)
    {
      v31 = *((_DWORD *)v13 - 2);
      v13 -= 8;
      *((_DWORD *)v30 - 2) = v31;
      v30 -= 8;
      *((_DWORD *)v30 + 1) = *((_DWORD *)v13 + 1);
    }
    *a5 = v30;
    a5[1] = v23;
    a5[2] = v10;
    if (v24)
    {
      operator delete(v24);
      v10 = *v11;
    }
  }
  else
  {
    *(_DWORD *)v13 = *(_DWORD *)(v22 + 16);
    *((_DWORD *)v13 + 1) = *(_DWORD *)(v22 + 20);
    v23 = v13 + 8;
  }
  a5[1] = v23;
  v32 = *((_QWORD *)this + 5);
  if (v23 >= v10)
  {
    v34 = (char *)*a5;
    v35 = (uint64_t)&v23[-*a5] >> 3;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 61)
      goto LABEL_123;
    v37 = v10 - v34;
    if (v37 >> 2 > v36)
      v36 = v37 >> 2;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    if (v38)
    {
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a5 + 2), v38);
      v34 = (char *)*a5;
      v23 = (char *)a5[1];
    }
    else
    {
      v39 = 0;
    }
    v40 = &v39[8 * v35];
    v10 = &v39[8 * v38];
    *(_DWORD *)v40 = *(_DWORD *)(v32 + 24);
    *((_DWORD *)v40 + 1) = *(_DWORD *)(v32 + 28);
    v33 = v40 + 8;
    while (v23 != v34)
    {
      v41 = *((_DWORD *)v23 - 2);
      v23 -= 8;
      *((_DWORD *)v40 - 2) = v41;
      v40 -= 8;
      *((_DWORD *)v40 + 1) = *((_DWORD *)v23 + 1);
    }
    *a5 = v40;
    a5[1] = v33;
    a5[2] = v10;
    if (v34)
    {
      operator delete(v34);
      v10 = *v11;
    }
  }
  else
  {
    *(_DWORD *)v23 = *(_DWORD *)(v32 + 24);
    *((_DWORD *)v23 + 1) = *(_DWORD *)(v32 + 28);
    v33 = v23 + 8;
  }
  a5[1] = v33;
  v42 = *((_QWORD *)this + 5);
  if (v33 >= v10)
  {
    v44 = (char *)*a5;
    v45 = (uint64_t)&v33[-*a5] >> 3;
    v46 = v45 + 1;
    if (!((unint64_t)(v45 + 1) >> 61))
    {
      v47 = v10 - v44;
      if (v47 >> 2 > v46)
        v46 = v47 >> 2;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a5 + 2), v48);
        v44 = (char *)*a5;
        v33 = (char *)a5[1];
      }
      else
      {
        v49 = 0;
      }
      v50 = &v49[8 * v45];
      v51 = &v49[8 * v48];
      *(_DWORD *)v50 = *(_DWORD *)(v42 + 32);
      *((_DWORD *)v50 + 1) = *(_DWORD *)(v42 + 36);
      v43 = v50 + 8;
      while (v33 != v44)
      {
        v52 = *((_DWORD *)v33 - 2);
        v33 -= 8;
        *((_DWORD *)v50 - 2) = v52;
        v50 -= 8;
        *((_DWORD *)v50 + 1) = *((_DWORD *)v33 + 1);
      }
      *a5 = v50;
      a5[1] = v43;
      a5[2] = v51;
      if (v44)
        operator delete(v44);
      goto LABEL_66;
    }
LABEL_123:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)v33 = *(_DWORD *)(v42 + 32);
  *((_DWORD *)v33 + 1) = *(_DWORD *)(v42 + 36);
  v43 = v33 + 8;
LABEL_66:
  a5[1] = v43;
  __x[0] = 0;
  std::vector<int>::vector(&v138, 0x168uLL, __x);
  v53 = a5[1] - *a5;
  if ((int)(v53 >> 3) < 1)
  {
    v58 = 1000.0;
    v57 = -1000.0;
  }
  else
  {
    begin = v138.__begin_;
    v55 = (v53 >> 3);
    v56 = (float *)(*a5 + 4);
    v57 = -1000.0;
    v58 = 1000.0;
    do
    {
      v59 = *(v56 - 1);
      v60 = sqrtf((float)(v59 * v59) + (float)(*v56 * *v56));
      v61 = atan2f(*v56, v59);
      if (v61 < 0.0)
        v61 = v61 + 6.2832;
      begin[(float)((float)(v61 / 6.2832) * 360.0)] = 1;
      if (v60 > v57)
        v57 = v60;
      if (v60 < v58)
        v58 = v60;
      v56 += 2;
      --v55;
    }
    while (v55);
  }
  __x[0] = -1;
  std::vector<int>::vector(&v137, 0x168uLL, __x);
  __x[0] = -1;
  std::vector<int>::vector(&v136, 0x168uLL, __x);
  v62 = 0;
  v63 = 0;
  v64 = v137.__begin_;
  v65 = 10000;
  v66 = v136.__begin_;
  do
  {
    v67 = v138.__begin_;
    v68 = v136.__begin_;
    v69 = 360;
    v70 = v62;
    do
    {
      v71 = v70 - 360;
      if (v70 <= 0x167)
        v71 = v70;
      v72 = v67[v71];
      if (v64[v62] < 0)
      {
        if (!v72)
          goto LABEL_87;
        v64[v62] = v71;
LABEL_86:
        v68[v62] = v71;
        goto LABEL_87;
      }
      if (v72)
        goto LABEL_86;
LABEL_87:
      ++v70;
      --v69;
    }
    while (v69);
    v73 = v66[v62];
    v74 = v64[v62];
    if (v73 <= v74)
      v73 += 360;
    v75 = v73 - v74;
    if (v75 < v65)
    {
      v65 = v75;
      v63 = v62;
    }
    ++v62;
  }
  while (v62 != 360);
  v76 = v58 >= 0.1 || v65 <= 90;
  v77 = v136.__begin_;
  if (v76 && v58 >= 0.01)
  {
    v78 = ((double)v136.__begin_[v63] + 1.0) / 360.0;
    v79 = (float)v64[v63] / 360.0;
    v80 = (float)(v79 + v79) * 3.14159265;
    v81 = __sincosf_stret(v80);
    v82 = (float)(v78 + v78) * 3.14159265;
    v83 = __sincosf_stret(v82);
    OMPie::OMPie((OMPie *)__x, 1);
    v84 = v57 * v81.__cosval;
    v85 = v57 * v81.__sinval;
    v86 = v57 * v83.__cosval;
    v87 = v57 * v83.__sinval;
    v88 = v86;
    v89 = (float *)__p;
    *((_QWORD *)__p + 1) = 0;
    *v89 = v84;
    v89[1] = v85;
    v89[4] = v86;
    v89[5] = v87;
    v120 = v58 * v81.__sinval;
    v121 = v58 * v81.__cosval;
    v89[6] = v58 * v81.__cosval;
    v89[7] = v58 * v81.__sinval;
    v89[8] = v58 * v83.__cosval;
    v89[9] = v58 * v83.__sinval;
    v90 = sqrtf((float)(v84 * v84) + (float)(v85 * v85));
    v122 = v84 / v90;
    *(float *)&v123 = v85 / v90;
    v91 = *(float **)(a3 + 40);
    v92 = v91[1];
    v93 = sqrtf((float)(*v91 * *v91) + (float)(v92 * v92));
    v132.var0[0] = *v91 / v93;
    v132.var0[1] = v92 / v93;
    v96 = OMUtil::angle((OMUtil *)&v122, &v132, v94);
    v116 = v58 * v83.__sinval;
    v117 = v58 * v83.__cosval;
    if ((float)((float)(v122 * v132.var0[1]) - (float)(*(float *)&v123 * v132.var0[0])) < 0.0)
      v96 = 6.2832 - v96;
    v115 = v96;
    v97 = *(_QWORD *)(a3 + 40);
    v98 = *(float *)(v97 + 16);
    v99 = *(float *)(v97 + 20);
    v100 = sqrtf((float)(v98 * v98) + (float)(v99 * v99));
    v122 = v98 / v100;
    *(float *)&v123 = v99 / v100;
    v101 = sqrtf((float)(v88 * v88) + (float)(v87 * v87));
    v118 = v87;
    v119 = v88;
    v132.var0[0] = v88 / v101;
    v132.var0[1] = v87 / v101;
    v102 = OMUtil::angle((OMUtil *)&v122, &v132, v95);
    v103 = v122;
    v104 = *(float *)&v123;
    v105 = v132.var0[0];
    v106 = v132.var0[1];
    OMPie::getArea((OMPie *)__x);
    if ((float)((float)(v103 * v106) - (float)(v104 * v105)) >= 0.0)
      v108 = v102;
    else
      v108 = 6.2832 - v102;
    if (v115 <= 1.4)
      v109 = 0.0;
    else
      v109 = 1000.0;
    v110 = v109 + v107;
    if (v108 <= 1.4)
      v111 = 0.0;
    else
      v111 = 1000.0;
    v112 = v110 + v111;
    v122 = v112;
    v123 = 0;
    v124 = v84;
    v125 = v85;
    v126 = v119;
    v127 = v118;
    v128 = v121;
    v129 = v120;
    v130 = v117;
    v131 = v116;
    v113 = a2[1];
    if (v113 >= a2[2])
    {
      v114 = std::vector<OMCostPie>::__push_back_slow_path<OMCostPie>(a2, &v122);
    }
    else
    {
      *(float *)v113 = v112;
      *(_DWORD *)(v113 + 4) = 0;
      *(_DWORD *)(v113 + 8) = 0;
      *(float *)(v113 + 12) = v84;
      *(float *)(v113 + 16) = v85;
      *(float *)(v113 + 20) = v119;
      *(float *)(v113 + 24) = v118;
      *(float *)(v113 + 28) = v121;
      *(float *)(v113 + 32) = v120;
      *(float *)(v113 + 36) = v117;
      *(float *)(v113 + 40) = v116;
      v114 = v113 + 44;
      a2[1] = v113 + 44;
    }
    a2[1] = v114;
    if (__p)
    {
      v135 = __p;
      operator delete(__p);
    }
    v77 = v136.__begin_;
  }
  if (v77)
  {
    v136.__end_ = v77;
    operator delete(v77);
  }
  if (v137.__begin_)
  {
    v137.__end_ = v137.__begin_;
    operator delete(v137.__begin_);
  }
  if (v138.__begin_)
  {
    v138.__end_ = v138.__begin_;
    operator delete(v138.__begin_);
  }
}

void sub_1B2CB92AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  v31 = *(void **)v29;
  if (*(_QWORD *)v29)
  {
    *(_QWORD *)(v29 + 8) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v29 + 24);
  if (v32)
  {
    *(_QWORD *)(v29 + 32) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

BOOL `anonymous namespace'::isVec2fLessThan(_anonymous_namespace_ *this, const Vec2f *a2, const Vec2f *a3)
{
  if (*(float *)this == a2->var0[0])
    return *((float *)this + 1) < a2->var0[1];
  else
    return *(float *)this < a2->var0[0];
}

char *std::vector<Vec2f>::erase(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;

  if (a2 != a3)
  {
    v3 = *(char **)(a1 + 8);
    v4 = a2;
    if (a3 != v3)
    {
      v5 = 8 * ((a3 - a2) >> 3);
      v4 = a2;
      do
      {
        v6 = *(_DWORD *)&v4[v5 + 4];
        *(_DWORD *)v4 = *(_DWORD *)&v4[v5];
        *((_DWORD *)v4 + 1) = v6;
        v4 += 8;
      }
      while (&v4[v5] != v3);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a2;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*,false>(unint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5, __n128 a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  char v20;
  BOOL v21;
  uint64_t v22;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(uint64_t result, _QWORD *a2, uint64_t (**a3)(_QWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  int v14;
  _DWORD *v15;
  int v16;
  _QWORD v17[9];

  if ((_QWORD *)result != a2)
  {
    v17[7] = v3;
    v17[8] = v4;
    v6 = (_DWORD *)result;
    v7 = (_QWORD *)(result + 8);
    if ((_QWORD *)(result + 8) != a2)
    {
      v9 = 0;
      v10 = (_QWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v17[0] = *v10;
          v12 = v9;
          while (1)
          {
            v13 = (char *)v6 + v12;
            v14 = *(_DWORD *)((char *)v6 + v12 + 4);
            *((_DWORD *)v13 + 2) = *(_DWORD *)((char *)v6 + v12);
            *((_DWORD *)v13 + 3) = v14;
            if (!v12)
              break;
            v12 -= 8;
            result = (*a3)(v17, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              v15 = (_DWORD *)((char *)v6 + v12 + 8);
              goto LABEL_10;
            }
          }
          v15 = v6;
LABEL_10:
          v16 = HIDWORD(v17[0]);
          *v15 = v17[0];
          v15[1] = v16;
        }
        v7 = v10 + 1;
        v9 += 8;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(uint64_t result, _QWORD *a2, uint64_t (**a3)(_QWORD *, _DWORD *))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  _DWORD *v9;
  _QWORD *v10;
  _DWORD *v11;
  int v12;
  int v13;
  _QWORD v14[9];

  if ((_QWORD *)result != a2)
  {
    v14[7] = v3;
    v14[8] = v4;
    v6 = (_QWORD *)result;
    v7 = (_QWORD *)(result + 8);
    if ((_QWORD *)(result + 8) != a2)
    {
      v9 = (_DWORD *)(result - 8);
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v14[0] = *v6;
          v11 = v9;
          do
          {
            v12 = v11[3];
            v11[4] = v11[2];
            v11[5] = v12;
            result = (*a3)(v14, v11);
            v11 -= 2;
          }
          while ((result & 1) != 0);
          v13 = HIDWORD(v14[0]);
          v11[4] = v14[0];
          v11[5] = v13;
        }
        v7 = v6 + 1;
        v9 += 2;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v12 = *a2;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *((_DWORD *)a2 + 1) = *((_DWORD *)a3 + 1);
    *a3 = v12;
    if (!(*a4)(a2, a1))
      return 1;
    v13 = *a1;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
    *a2 = v13;
    return 2;
  }
  v11 = *(_DWORD *)a1;
  v10 = *((_DWORD *)a1 + 1);
  if (!(_DWORD)result)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
    *(_DWORD *)a2 = v11;
    *((_DWORD *)a2 + 1) = v10;
    if (!(*a4)(a3, a2))
      return 1;
    v14 = *a2;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *((_DWORD *)a2 + 1) = *((_DWORD *)a3 + 1);
    *a3 = v14;
    return 2;
  }
  *(_DWORD *)a1 = *(_DWORD *)a3;
  *((_DWORD *)a1 + 1) = *((_DWORD *)a3 + 1);
  *(_DWORD *)a3 = v11;
  *((_DWORD *)a3 + 1) = v10;
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,Vec2f *,BOOL (*&)(Vec2f const&,Vec2f const&)>(unint64_t a1, _DWORD *a2, uint64_t (**a3)(uint64_t *, unint64_t))
{
  _DWORD *v4;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;

  v4 = a2;
  v11 = *(_QWORD *)a1;
  if (((*a3)(&v11, (unint64_t)(a2 - 2)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 8;
    while (((*a3)(&v11, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 8;
    do
    {
      v6 = v7;
      if (v7 >= (unint64_t)v4)
        break;
      v8 = (*a3)(&v11, v7);
      v7 = v6 + 8;
    }
    while (!v8);
  }
  if (v6 < (unint64_t)v4)
  {
    do
      v4 -= 2;
    while (((*a3)(&v11, (unint64_t)v4) & 1) != 0);
  }
  while (v6 < (unint64_t)v4)
  {
    v9 = *(_QWORD *)v6;
    *(_DWORD *)v6 = *v4;
    *(_DWORD *)(v6 + 4) = v4[1];
    *(_QWORD *)v4 = v9;
    do
      v6 += 8;
    while (!(*a3)(&v11, v6));
    do
      v4 -= 2;
    while (((*a3)(&v11, (unint64_t)v4) & 1) != 0);
  }
  if (v6 - 8 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v6 - 8);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v6 - 4);
  }
  *(_QWORD *)(v6 - 8) = v11;
  return v6;
}

float std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,Vec2f *,BOOL (*&)(Vec2f const&,Vec2f const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  float result;
  uint64_t v12;

  v6 = 0;
  v12 = *a1;
  do
    ++v6;
  while (((*a3)(&a1[v6], &v12) & 1) != 0);
  v7 = (unint64_t)&a1[v6];
  if (v6 == 1)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      --a2;
    }
    while (((*a3)(a2, &v12) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v12));
  }
  v8 = (unint64_t)&a1[v6];
  if (v7 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)v8;
      *(_DWORD *)v8 = *(_DWORD *)v9;
      *(_DWORD *)(v8 + 4) = *((_DWORD *)v9 + 1);
      *v9 = v10;
      do
        v8 += 8;
      while (((*a3)((uint64_t *)v8, &v12) & 1) != 0);
      do
        --v9;
      while (!(*a3)(v9, &v12));
    }
    while (v8 < (unint64_t)v9);
  }
  if ((uint64_t *)(v8 - 8) != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v8 - 8);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(v8 - 4);
  }
  *(_DWORD *)(v8 - 8) = v12;
  result = *((float *)&v12 + 1);
  *(_DWORD *)(v8 - 4) = HIDWORD(v12);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;

  v6 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 1, (uint64_t *)a1))
      {
        v8 = *(_QWORD *)a1;
        *(_DWORD *)a1 = *((_DWORD *)a2 - 2);
        *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>((uint64_t *)a1, (uint64_t *)(a1 + 8), a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(a1, a1 + 8, a1 + 16, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(a1, a1 + 8, a1 + 16, a1 + 24, (_DWORD *)a2 - 2, a3);
      return 1;
    default:
      v9 = (uint64_t *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>((uint64_t *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), a3);
      v10 = (uint64_t *)(a1 + 24);
      if ((uint64_t *)(a1 + 24) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v10, v9))
    {
      v18 = *v10;
      v13 = v11;
      while (1)
      {
        v14 = a1 + v13;
        v15 = *(_DWORD *)(a1 + v13 + 20);
        *(_DWORD *)(v14 + 24) = *(_DWORD *)(a1 + v13 + 16);
        *(_DWORD *)(v14 + 28) = v15;
        if (v13 == -16)
          break;
        v13 -= 8;
        if (((*a3)(&v18, (uint64_t *)(v14 + 8)) & 1) == 0)
        {
          v16 = (_DWORD *)(a1 + v13 + 24);
          goto LABEL_12;
        }
      }
      v16 = (_DWORD *)a1;
LABEL_12:
      v17 = HIDWORD(v18);
      *v16 = v18;
      v16[1] = v17;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  float result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3, a5);
  if ((*a5)(a4, (uint64_t *)a3))
  {
    v11 = *(_QWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)(a3 + 4) = *((_DWORD *)a4 + 1);
    *a4 = v11;
    if ((*a5)((uint64_t *)a3, (uint64_t *)a2))
    {
      v12 = *(_QWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_QWORD *)a3 = v12;
      if ((*a5)((uint64_t *)a2, (uint64_t *)a1))
      {
        v13 = *(_QWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        result = *(float *)(a2 + 4);
        *(float *)(a1 + 4) = result;
        *(_QWORD *)a2 = v13;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  float v12;
  float result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(a1, a2, a3, (uint64_t *)a4, a6);
  if (((unsigned int (*)(_DWORD *, uint64_t, float))*a6)(a5, a4, v12))
  {
    v14 = *(_QWORD *)a4;
    *(_DWORD *)a4 = *a5;
    *(_DWORD *)(a4 + 4) = a5[1];
    *(_QWORD *)a5 = v14;
    if ((*a6)((uint64_t *)a4, (uint64_t *)a3))
    {
      v15 = *(_QWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
      *(_QWORD *)a4 = v15;
      if ((*a6)((uint64_t *)a3, (uint64_t *)a2))
      {
        v16 = *(_QWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        *(_QWORD *)a3 = v16;
        if ((*a6)((uint64_t *)a2, (uint64_t *)a1))
        {
          v17 = *(_QWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          result = *(float *)(a2 + 4);
          *(float *)(a1 + 4) = result;
          *(_QWORD *)a2 = v17;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*,Vec2f*>(char *a1, char *a2, char *a3, unsigned int (**a4)(uint64_t, uint64_t), __n128 a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  char *v21;

  if (a1 != a2)
  {
    v9 = a2 - a1;
    v10 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = &a1[8 * v11];
      do
      {
        a5.n128_f32[0] = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>((uint64_t)a1, a4, v10, v13);
        v13 -= 8;
        --v12;
      }
      while (v12);
    }
    v14 = a2;
    if (a2 != a3)
    {
      v15 = a2;
      do
      {
        if (((unsigned int (*)(char *, char *, __n128))*a4)(v15, a1, a5))
        {
          v16 = *(_QWORD *)v15;
          *(_DWORD *)v15 = *(_DWORD *)a1;
          *((_DWORD *)v15 + 1) = *((_DWORD *)a1 + 1);
          *(_QWORD *)a1 = v16;
          a5.n128_f32[0] = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>((uint64_t)a1, a4, v10, a1);
        }
        v15 += 8;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 >= 9)
    {
      v17 = (unint64_t)v9 >> 3;
      v18 = a2 - 8;
      do
      {
        v20 = *(_DWORD *)a1;
        v19 = *((_DWORD *)a1 + 1);
        v21 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(a1, a4, v17);
        if (v18 == v21)
        {
          *(_DWORD *)v21 = v20;
          *((_DWORD *)v21 + 1) = v19;
        }
        else
        {
          *(_DWORD *)v21 = *(_DWORD *)v18;
          *((_DWORD *)v21 + 1) = *((_DWORD *)v18 + 1);
          *(_DWORD *)v18 = v20;
          *((_DWORD *)v18 + 1) = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>((uint64_t)a1, (uint64_t)(v21 + 8), (uint64_t (**)(_QWORD, _QWORD))a4, (v21 + 8 - a1) >> 3);
        }
        v18 -= 8;
      }
      while (v17-- > 2);
    }
    return v14;
  }
  return a3;
}

float std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(uint64_t a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  float result;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[13];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v20[11] = v4;
    v20[12] = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 3)
    {
      v12 = ((uint64_t)a4 - a1) >> 2;
      v13 = v12 + 1;
      v14 = (_DWORD *)(a1 + 8 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 2))
      {
        v14 += 2;
        v13 = v15;
      }
      if ((((uint64_t (*)(_DWORD *, _DWORD *))*a2)(v14, v7) & 1) == 0)
      {
        v20[0] = *(_QWORD *)v7;
        do
        {
          v17 = v14;
          *v7 = *v14;
          v7[1] = v14[1];
          if (v9 < v13)
            break;
          v18 = (2 * v13) | 1;
          v14 = (_DWORD *)(a1 + 8 * v18);
          v19 = 2 * v13 + 2;
          if (v19 < a3)
          {
            if ((*a2)(a1 + 8 * v18, v14 + 2))
            {
              v14 += 2;
              v18 = v19;
            }
          }
          v7 = v17;
          v13 = v18;
        }
        while (!(*a2)(v14, v20));
        *v17 = v20[0];
        result = *((float *)v20 + 1);
        v17[1] = HIDWORD(v20[0]);
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(_DWORD *a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[2 * v6 + 2];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)((uint64_t)&a1[2 * v6 + 2], (uint64_t)&a1[2 * v6 + 4]))
    {
      v9 += 2;
      v10 = v11;
    }
    *a1 = *v9;
    a1[1] = v9[1];
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  double result;
  _QWORD *v13;
  _QWORD v14[9];

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v14[7] = v4;
    v14[8] = v5;
    v9 = v6 >> 1;
    v10 = (_DWORD *)(a1 + 8 * (v6 >> 1));
    v11 = (_QWORD *)(a2 - 8);
    if ((*a3)(v10, a2 - 8))
    {
      v14[0] = *v11;
      do
      {
        v13 = v10;
        *(_DWORD *)v11 = *v10;
        *((_DWORD *)v11 + 1) = v10[1];
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (_DWORD *)(a1 + 8 * v9);
        v11 = v13;
      }
      while (((*a3)(v10, v14) & 1) != 0);
      result = *(double *)v14;
      *v13 = v14[0];
    }
  }
  return result;
}

char *std::vector<Vec2f>::__assign_with_size[abi:ne180100]<Vec2f*,Vec2f*>(_QWORD *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _DWORD *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v17 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v17;
    v18 = (v17 - result) >> 3;
    if (v18 >= a4)
    {
      v22 = result;
      if (a2 != a3)
      {
        v23 = result;
        do
        {
          *(_DWORD *)v23 = *v6;
          *((_DWORD *)v23 + 1) = v6[1];
          v22 += 8;
          v6 += 2;
          v23 += 8;
        }
        while (v6 != a3);
      }
      v16 = (char *)(v22 - result);
      v12 = result;
    }
    else
    {
      v19 = &a2[2 * v18];
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)result = *v6;
          *((_DWORD *)result + 1) = v6[1];
          v6 += 2;
          result += 8;
        }
        while (v6 != v19);
      }
      v20 = v12;
      if (v19 != a3)
      {
        v21 = v12;
        do
        {
          *(_DWORD *)v21 = *v19;
          *((_DWORD *)v21 + 1) = v19[1];
          v20 += 8;
          v19 += 2;
          v21 += 8;
        }
        while (v19 != a3);
      }
      v16 = (char *)(v20 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<double>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        *(_DWORD *)v15 = *v6;
        *((_DWORD *)v15 + 1) = v6[1];
        v15 += 8;
        v6 += 2;
      }
      while (v6 != a3);
    }
    v16 = (char *)(v15 - v12);
  }
  *v13 = &v16[(_QWORD)v12];
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1B2CBA55C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<OMCostPie>::__push_back_slow_path<OMCostPie>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x5D1745D1745D174)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2E8BA2E8BA2E8BALL)
    v9 = 0x5D1745D1745D174;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OMCostPie>>(v7, v9);
  v11 = &v10[44 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[44 * v12];
  *(_DWORD *)v11 = *a2;
  *((_DWORD *)v11 + 1) = a2[1];
  *((_DWORD *)v11 + 2) = a2[2];
  *((_DWORD *)v11 + 3) = a2[3];
  *((_DWORD *)v11 + 4) = a2[4];
  *((_DWORD *)v11 + 5) = a2[5];
  *((_DWORD *)v11 + 6) = a2[6];
  *((_DWORD *)v11 + 7) = a2[7];
  *((_DWORD *)v11 + 8) = a2[8];
  *((_DWORD *)v11 + 9) = a2[9];
  *((_DWORD *)v11 + 10) = a2[10];
  v17 = v11 + 44;
  std::vector<OMCostPie>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 44) % 0x2CuLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1B2CBA6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<OMCostPie>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OMCostPie>,std::reverse_iterator<OMCostPie*>,std::reverse_iterator<OMCostPie*>,std::reverse_iterator<OMCostPie*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<OMCostPie>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5D1745D1745D175)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(44 * a2);
}

float std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OMCostPie>,std::reverse_iterator<OMCostPie*>,std::reverse_iterator<OMCostPie*>,std::reverse_iterator<OMCostPie*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  float result;

  v7 = a7;
  if (a3 != a5)
  {
    v8 = a7 - 20;
    do
    {
      v9 = *(_DWORD *)(a3 - 44);
      a3 -= 44;
      *(_DWORD *)(v8 - 24) = v9;
      *(_DWORD *)(v8 - 20) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(v8 - 16) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v8 - 12) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(v8 - 4) = *(_DWORD *)(a3 + 20);
      *(_DWORD *)v8 = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(v8 + 4) = *(_DWORD *)(a3 + 28);
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 32);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(a3 + 36);
      result = *(float *)(a3 + 40);
      *(float *)(v8 + 16) = result;
      v8 -= 44;
      v7 -= 44;
    }
    while (a3 != a5);
  }
  return result;
}

_DWORD *std::vector<Vec3f>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Vec3f*>,std::__wrap_iter<Vec3f*>>(uint64_t *a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  _DWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  char *v25;
  char *v26;
  void *__p;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v5 = (_DWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 2)) < a5)
  {
    v13 = *a1;
    v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 2);
    if (v14 > 0x1555555555555555)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 2);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 2);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 2);
    if (v16 >= 0xAAAAAAAAAAAAAAALL)
      v18 = 0x1555555555555555;
    else
      v18 = v17;
    v32 = v9;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Vec3f>>(v9, v18);
    else
      v19 = 0;
    v25 = &v19[12 * v15];
    __p = v19;
    v29 = v25;
    v31 = &v19[12 * v18];
    v26 = &v25[12 * a5];
    do
    {
      *(_DWORD *)v25 = *a3;
      *((_DWORD *)v25 + 1) = a3[1];
      *((_DWORD *)v25 + 2) = a3[2];
      v25 += 12;
      a3 += 3;
    }
    while (v25 != v26);
    v30 = v26;
    v5 = (_DWORD *)std::vector<Vec3f>::__swap_out_circular_buffer(a1, &__p, v5);
    if (v30 != v29)
      v30 = &v29[(v30 - v29 - 12) % 0xCuLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 2)) >= a5)
  {
    v20 = &a3[3 * a5];
LABEL_18:
    std::vector<Vec3f>::__move_range((uint64_t)a1, a2, v12, a2 + 12 * a5);
    if (v20 != a3)
    {
      v24 = v5;
      do
      {
        *v24 = *a3;
        v24[1] = a3[1];
        v24[2] = a3[2];
        a3 += 3;
        v24 += 3;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[(uint64_t)(v12 - a2) >> 2];
  v21 = *(_QWORD *)(v9 - 8);
  if (v20 != a4)
  {
    v22 = &a3[(uint64_t)(v12 - a2) >> 2];
    v23 = *(_DWORD **)(v9 - 8);
    do
    {
      *v23 = *v22;
      v23[1] = v22[1];
      v23[2] = v22[2];
      v21 += 12;
      v22 += 3;
      v23 += 3;
    }
    while (v22 != a4);
  }
  a1[1] = v21;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_1B2CBAACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float std::vector<Vec3f>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  float result;
  uint64_t v8;
  uint64_t v9;
  float *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 + v4 - a4;
  v6 = v4;
  while (v5 < a3)
  {
    *(_DWORD *)v6 = *(_DWORD *)v5;
    *(_DWORD *)(v6 + 4) = *(_DWORD *)(v5 + 4);
    result = *(float *)(v5 + 8);
    *(float *)(v6 + 8) = result;
    v6 += 12;
    v5 += 12;
  }
  *(_QWORD *)(a1 + 8) = v6;
  if (v4 != a4)
  {
    v8 = 4 * ((v4 - a4) >> 2);
    v9 = a2 - 4;
    v10 = (float *)(v4 - 4);
    do
    {
      *(v10 - 2) = *(float *)(v9 + v8 - 8);
      *(v10 - 1) = *(float *)(v9 + v8 - 4);
      result = *(float *)(v9 + v8);
      *v10 = result;
      v10 -= 3;
      v8 -= 12;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<Vec3f>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  _DWORD *i;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_DWORD *)*a1;
  v6 = result;
  if ((_DWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *(v7 - 3);
      v7 -= 3;
      *(_DWORD *)(v6 - 12) = v8;
      v6 -= 12;
      *(_DWORD *)(v6 + 4) = v7[1];
      *(_DWORD *)(v6 + 8) = v7[2];
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_DWORD *)a1[1];
  for (i = (_DWORD *)a2[2]; a3 != v9; a3 += 3)
  {
    *i = *a3;
    i[1] = a3[1];
    i[2] = a3[2];
    i += 3;
  }
  a2[2] = i;
  v11 = (_DWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void OMSpline::getCurveSamples(uint64_t *a1, uint64_t a2, int a3, int a4, double a5, __n128 a6)
{
  int v6;
  int v10;
  float v11;

  v6 = ((unint64_t)(a1[1] - *a1) >> 5) - (a4 ^ 1);
  if (v6 >= 1)
  {
    v10 = 0;
    a6.n128_u32[0] = 1.0;
    v11 = 1.0 / (float)a3;
    do
      OMSpline::getPartialCurveSamples(a1, a2, v10++, a3, v11, a6);
    while (v6 != v10);
  }
}

void OMSpline::getPartialCurveSamples(uint64_t *a1, uint64_t a2, int a3, int a4, float a5, __n128 a6)
{
  uint64_t v6;
  int v7;
  int v11;
  float32x2_t *v12;
  float32x2_t *v13;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  _QWORD *v28;
  float32x2_t *v29;
  float32x2_t v30;
  float32x2_t *v31;
  float32x2_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  float32x2_t *v38;
  __int32 v39;
  __n128 v40;

  v6 = *a1;
  if (((unint64_t)(a1[1] - *a1) >> 5) - 1 == a3)
    v7 = 0;
  else
    v7 = a3 + 1;
  if (a4 >= 1)
  {
    v11 = 0;
    v12 = (float32x2_t *)(v6 + 32 * a3);
    v13 = (float32x2_t *)(v6 + 32 * v7);
    __asm { FMOV            V0.2S, #3.0 }
    v20 = v12[1];
    v19 = v12[2];
    v21 = vmul_f32(v20, _D0);
    v22 = vmul_f32(v19, _D0);
    v23 = vsub_f32(v22, v21);
    __asm { FMOV            V4.2S, #-6.0 }
    v25 = vmul_f32(*v13, _D0);
    v26 = vadd_f32(vadd_f32(v21, vmul_f32(v19, _D4)), v25);
    a6.n128_u64[0] = (unint64_t)vsub_f32(v22, v20);
    v27 = vadd_f32(vsub_f32((float32x2_t)a6.n128_u64[0], v25), v13[1]);
    v28 = (_QWORD *)(a2 + 16);
    v29 = *(float32x2_t **)(a2 + 8);
    a6.n128_u32[0] = 0;
    do
    {
      v30 = vadd_f32(v20, vmul_n_f32(vadd_f32(v23, vmul_n_f32(vadd_f32(v26, vmul_n_f32(v27, a6.n128_f32[0])), a6.n128_f32[0])), a6.n128_f32[0]));
      if ((unint64_t)v29 >= *v28)
      {
        v32 = *(float32x2_t **)a2;
        v33 = ((uint64_t)v29 - *(_QWORD *)a2) >> 3;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v40 = a6;
        v35 = *v28 - (_QWORD)v32;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v28, v36);
          v32 = *(float32x2_t **)a2;
          v29 = *(float32x2_t **)(a2 + 8);
        }
        else
        {
          v37 = 0;
        }
        v38 = (float32x2_t *)&v37[8 * v33];
        *v38 = v30;
        v31 = v38 + 1;
        while (v29 != v32)
        {
          v39 = v29[-1].i32[0];
          --v29;
          v38[-1].i32[0] = v39;
          --v38;
          v38->i32[1] = v29->i32[1];
        }
        *(_QWORD *)a2 = v38;
        *(_QWORD *)(a2 + 8) = v31;
        *(_QWORD *)(a2 + 16) = &v37[8 * v36];
        if (v32)
          operator delete(v32);
        a6 = v40;
      }
      else
      {
        *v29 = v30;
        v31 = v29 + 1;
      }
      *(_QWORD *)(a2 + 8) = v31;
      ++v11;
      a6.n128_f32[0] = a6.n128_f32[0] + a5;
      v29 = v31;
    }
    while (v11 != a4);
  }
}

uint64_t OMSpline::recomputeInternalBezier(uint64_t this)
{
  float32x2_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  float32x2_t *v9;
  float32x2_t v10;
  float32x2_t v11;
  int v12;
  int v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  __int128 v18;

  v1 = *(float32x2_t **)this;
  v2 = *(_QWORD *)(this + 8) - *(_QWORD *)this;
  v3 = v2 >> 5;
  if (v2 >= 0x41 && (int)v3 >= 1)
  {
    v5 = 0;
    v6 = (v3 - 1);
    v7 = *(unsigned __int8 *)(this + 33);
    v8 = (v2 >> 5);
    v9 = v1 + 2;
    v10 = (float32x2_t)vdup_n_s32(0x3F2AAAABu);
    v11 = (float32x2_t)vdup_n_s32(0x3EAAAAABu);
    do
    {
      if (v7)
      {
        v12 = v5 - (v5 != 0);
        if (v6 == v5)
          v13 = v5;
        else
          v13 = v5 + 1;
      }
      else
      {
        v12 = v5 - 1;
        if (!v5)
          v12 = v6;
        if (v6 == v5)
          v13 = 0;
        else
          v13 = v5 + 1;
      }
      v14 = v9[1];
      v15 = v1[4 * v12 + 3];
      v16 = vadd_f32(v15, vmul_f32(vsub_f32(v14, v15), v10));
      v9[-2] = v16;
      v17 = vadd_f32(v14, vmul_f32(vsub_f32(v1[4 * v13 + 3], v14), v11));
      *v9 = v17;
      if (v7 && (!v5 || v6 == v5))
      {
        *(float32x2_t *)&v18 = v14;
        *((float32x2_t *)&v18 + 1) = v14;
        *(_OWORD *)v9[-2].f32 = v18;
        *v9 = v14;
      }
      else
      {
        v9[-1] = vadd_f32(v16, vmul_f32(vsub_f32(v17, v16), (float32x2_t)0x3F0000003F000000));
      }
      ++v5;
      v9 += 4;
    }
    while (v8 != v5);
  }
  return this;
}

float OMSpline::move(OMSpline *this, int a2, float *a3, unsigned int a4)
{
  uint64_t v5;
  _DWORD *v6;
  float *v7;
  float v8;
  float result;
  float v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  _DWORD *v18;
  float v19;
  float *v20;
  float v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _DWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  int v42;
  int v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  void *__p;
  _DWORD *v54;
  unint64_t v55;

  v5 = a2;
  v6 = *(_DWORD **)this;
  v7 = (float *)(*(_QWORD *)this + 32 * v5);
  v8 = v7[3];
  result = *a3 + v7[2];
  v7[2] = result;
  v10 = a3[1] + v8;
  v7[3] = v10;
  if (!a4)
  {
    *v7 = result;
    v7[1] = v10;
    v7[4] = result;
    v7[5] = v10;
    return result;
  }
  if (a4 > 2)
  {
    if (a4 != 3)
      return result;
    goto LABEL_12;
  }
  v12 = *((_QWORD *)this + 1) - (_QWORD)v6;
  if ((unint64_t)v12 <= 0x5F)
  {
LABEL_12:
    v19 = v7[1];
    *v7 = *a3 + *v7;
    v7[1] = a3[1] + v19;
    v20 = (float *)&v6[8 * v5];
    v21 = v20[5];
    v20[4] = *a3 + v20[4];
    result = a3[1] + v21;
    v20[5] = result;
    return result;
  }
  v13 = (unint64_t)v12 >> 5;
  v14 = (int)(v12 >> 5) - 1;
  if (a4 == 2)
  {
    if (!a2)
    {
      __p = 0;
      v54 = 0;
      v55 = 0;
      v28 = (_DWORD *)std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)&__p, v6);
      v29 = *(_DWORD **)this;
      v30 = v55;
      v54 = v28;
      if ((unint64_t)v28 >= v55)
      {
        v31 = (_DWORD *)std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)&__p, v29);
        v29 = *(_DWORD **)this;
        v30 = v55;
      }
      else
      {
        *v28 = *v29;
        v28[1] = v29[1];
        v28[2] = v29[2];
        v28[3] = v29[3];
        v28[4] = v29[4];
        v28[5] = v29[5];
        v28[6] = v29[6];
        v28[7] = v29[7];
        v31 = v28 + 8;
      }
      v54 = v31;
      if ((unint64_t)v31 >= v30)
      {
        v34 = (_DWORD *)std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)&__p, v29);
        v29 = *(_DWORD **)this;
        v30 = v55;
      }
      else
      {
        *v31 = *v29;
        v31[1] = v29[1];
        v31[2] = v29[2];
        v31[3] = v29[3];
        v31[4] = v29[4];
        v31[5] = v29[5];
        v31[6] = v29[6];
        v31[7] = v29[7];
        v34 = v31 + 8;
      }
      v54 = v34;
      if ((unint64_t)v34 >= v30)
      {
        v35 = (_DWORD *)std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)&__p, v29 + 8);
        v29 = *(_DWORD **)this;
        v30 = v55;
      }
      else
      {
        *v34 = v29[8];
        v34[1] = v29[9];
        v34[2] = v29[10];
        v34[3] = v29[11];
        v34[4] = v29[12];
        v34[5] = v29[13];
        v34[6] = v29[14];
        v34[7] = v29[15];
        v35 = v34 + 8;
      }
      v54 = v35;
      if ((unint64_t)v35 >= v30)
      {
        v36 = std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)&__p, v29 + 16);
      }
      else
      {
        *v35 = v29[16];
        v35[1] = v29[17];
        v35[2] = v29[18];
        v35[3] = v29[19];
        v35[4] = v29[20];
        v35[5] = v29[21];
        v35[6] = v29[22];
        v35[7] = v29[23];
        v36 = (uint64_t)(v35 + 8);
      }
      v54 = (_DWORD *)v36;
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 0, 1, 2);
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 1, 2, 3);
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 2, 3, 4);
      v32 = __p;
      v37 = *(_DWORD **)this;
      *v37 = *((_DWORD *)__p + 16);
      v37[1] = v32[17];
      v37[2] = v32[18];
      v37[3] = v32[19];
      v37[4] = v32[20];
      v37[5] = v32[21];
      v37[6] = v32[22];
      v37[7] = v32[23];
      v37[8] = v32[24];
      v37[9] = v32[25];
      v37[10] = v32[26];
      v37[11] = v32[27];
      v37[12] = v32[28];
      v37[13] = v32[29];
      v37[14] = v32[30];
      v37[15] = v32[31];
      v37[16] = v32[32];
      v37[17] = v32[33];
      v37[18] = v32[34];
      v37[19] = v32[35];
      v37[20] = v32[36];
      v37[21] = v32[37];
      v37[22] = v32[38];
      v37[23] = v32[39];
      *(_QWORD *)v37 = *(_QWORD *)&v37[8 * v5 + 2];
      goto LABEL_62;
    }
    if (a2 == 1 && (v12 >> 5) == 3)
    {
      __p = 0;
      v54 = 0;
      v55 = 0;
      v15 = (_DWORD *)std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)&__p, v6);
      v16 = *(_DWORD **)this;
      v17 = v55;
      v54 = v15;
      if ((unint64_t)v15 >= v55)
      {
        v18 = (_DWORD *)std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)&__p, v16);
        v16 = *(_DWORD **)this;
        v17 = v55;
      }
      else
      {
        *v15 = *v16;
        v15[1] = v16[1];
        v15[2] = v16[2];
        v15[3] = v16[3];
        v15[4] = v16[4];
        v15[5] = v16[5];
        v15[6] = v16[6];
        v15[7] = v16[7];
        v18 = v15 + 8;
      }
      v54 = v18;
      if ((unint64_t)v18 >= v17)
      {
        v44 = (_DWORD *)std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)&__p, v16 + 8);
        v16 = *(_DWORD **)this;
        v17 = v55;
      }
      else
      {
        *v18 = v16[8];
        v18[1] = v16[9];
        v18[2] = v16[10];
        v18[3] = v16[11];
        v18[4] = v16[12];
        v18[5] = v16[13];
        v18[6] = v16[14];
        v18[7] = v16[15];
        v44 = v18 + 8;
      }
      v54 = v44;
      if ((unint64_t)v44 >= v17)
      {
        v45 = (_DWORD *)std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)&__p, v16 + 16);
        v16 = *(_DWORD **)this;
        v17 = v55;
      }
      else
      {
        *v44 = v16[16];
        v44[1] = v16[17];
        v44[2] = v16[18];
        v44[3] = v16[19];
        v44[4] = v16[20];
        v44[5] = v16[21];
        v44[6] = v16[22];
        v44[7] = v16[23];
        v45 = v44 + 8;
      }
      v54 = v45;
      if ((unint64_t)v45 >= v17)
      {
        v46 = std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)&__p, v16 + 16);
      }
      else
      {
        *v45 = v16[16];
        v45[1] = v16[17];
        v45[2] = v16[18];
        v45[3] = v16[19];
        v45[4] = v16[20];
        v45[5] = v16[21];
        v45[6] = v16[22];
        v45[7] = v16[23];
        v46 = (uint64_t)(v45 + 8);
      }
      v54 = (_DWORD *)v46;
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 0, 1, 2);
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 1, 2, 3);
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 2, 3, 4);
      v32 = __p;
      v47 = *(_DWORD **)this;
      *v47 = *((_DWORD *)__p + 8);
      v47[1] = v32[9];
      v47[2] = v32[10];
      v47[3] = v32[11];
      v47[4] = v32[12];
      v47[5] = v32[13];
      v47[6] = v32[14];
      v47[7] = v32[15];
      v47[8] = v32[16];
      v47[9] = v32[17];
      v47[10] = v32[18];
      v47[11] = v32[19];
      v47[12] = v32[20];
      v47[13] = v32[21];
      v47[14] = v32[22];
      v47[15] = v32[23];
      v47[16] = v32[24];
      v47[17] = v32[25];
      v47[18] = v32[26];
      v47[19] = v32[27];
      v47[20] = v32[28];
      v47[21] = v32[29];
      v47[22] = v32[30];
      v47[23] = v32[31];
      goto LABEL_62;
    }
    if (a2 == 1)
    {
      __p = 0;
      v54 = 0;
      v55 = 0;
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, v6);
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, *(_DWORD **)this);
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, (_DWORD *)(*(_QWORD *)this + 32));
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, (_DWORD *)(*(_QWORD *)this + 64));
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, (_DWORD *)(*(_QWORD *)this + 96));
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 0, 1, 2);
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 1, 2, 3);
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 2, 3, 4);
      v32 = __p;
      v33 = *(_DWORD **)this;
      *v33 = *((_DWORD *)__p + 8);
      v33[1] = v32[9];
      v33[2] = v32[10];
      v33[3] = v32[11];
      v33[4] = v32[12];
      v33[5] = v32[13];
      v33[6] = v32[14];
      v33[7] = v32[15];
      v33[8] = v32[16];
      v33[9] = v32[17];
      v33[10] = v32[18];
      v33[11] = v32[19];
      v33[12] = v32[20];
      v33[13] = v32[21];
      v33[14] = v32[22];
      v33[15] = v32[23];
      v33[16] = v32[24];
      v33[17] = v32[25];
      v33[18] = v32[26];
      v33[19] = v32[27];
      v33[20] = v32[28];
      v33[21] = v32[29];
      v33[22] = v32[30];
      v33[23] = v32[31];
      v33[24] = v32[32];
      v33[25] = v32[33];
      v33[26] = v32[34];
      v33[27] = v32[35];
      v33[28] = v32[36];
      v33[29] = v32[37];
      v33[30] = v32[38];
      v33[31] = v32[39];
LABEL_62:
      v54 = v32;
      operator delete(v32);
      return result;
    }
    if ((_DWORD)v14 == a2)
    {
      __p = 0;
      v54 = 0;
      v55 = 0;
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, &v6[8 * v5 - 16]);
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, (_DWORD *)(*(_QWORD *)this + 32 * (v5 - 1)));
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, (_DWORD *)(*(_QWORD *)this + 32 * v5));
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, (_DWORD *)(*(_QWORD *)this + 32 * v5));
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, (_DWORD *)(*(_QWORD *)this + 32 * v5));
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 0, 1, 2);
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 1, 2, 3);
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 2, 3, 4);
      v32 = __p;
      v38 = *(_QWORD *)this;
      v39 = (_DWORD *)(*(_QWORD *)this + 32 * (v5 - 2));
      *v39 = *(_DWORD *)__p;
      v39[1] = v32[1];
      v39[2] = v32[2];
      v39[3] = v32[3];
      v39[4] = v32[4];
      v39[5] = v32[5];
      v39[6] = v32[6];
      v39[7] = v32[7];
      v40 = (_DWORD *)(v38 + 32 * (v5 - 1));
      *v40 = v32[8];
      v40[1] = v32[9];
      v40[2] = v32[10];
      v40[3] = v32[11];
      v40[4] = v32[12];
      v40[5] = v32[13];
      v40[6] = v32[14];
      v40[7] = v32[15];
      v41 = (_DWORD *)(v38 + 32 * v5);
      *v41 = v32[16];
      v41[1] = v32[17];
      v42 = v32[18];
      v41[2] = v42;
      v43 = v32[19];
      v41[3] = v43;
      v41[4] = v32[20];
      v41[5] = v32[21];
      v41[6] = v32[22];
      v41[7] = v32[23];
      v41[4] = v42;
      v41[5] = v43;
      goto LABEL_62;
    }
    if ((_DWORD)v13 - 2 == a2)
    {
      __p = 0;
      v54 = 0;
      v55 = 0;
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, &v6[8 * v5 - 16]);
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, (_DWORD *)(*(_QWORD *)this + 32 * (v5 - 1)));
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, (_DWORD *)(*(_QWORD *)this + 32 * v5));
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, (_DWORD *)(*(_QWORD *)this + 32 * v14));
      std::vector<OMVertex>::push_back[abi:ne180100]((uint64_t *)&__p, (_DWORD *)(*(_QWORD *)this + 32 * v14));
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 0, 1, 2);
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 1, 2, 3);
      OMSpline::tangentsAuto((uint64_t)this, (uint64_t *)&__p, 2, 3, 4);
      v32 = __p;
      v48 = *(_QWORD *)this;
      v49 = (_DWORD *)(*(_QWORD *)this + 32 * (v5 - 2));
      *v49 = *(_DWORD *)__p;
      v49[1] = v32[1];
      v49[2] = v32[2];
      v49[3] = v32[3];
      v49[4] = v32[4];
      v49[5] = v32[5];
      v49[6] = v32[6];
      v49[7] = v32[7];
      v50 = (_DWORD *)(v48 + 32 * (v5 - 1));
      *v50 = v32[8];
      v50[1] = v32[9];
      v50[2] = v32[10];
      v50[3] = v32[11];
      v50[4] = v32[12];
      v50[5] = v32[13];
      v50[6] = v32[14];
      v50[7] = v32[15];
      v51 = (_DWORD *)(v48 + 32 * v5);
      *v51 = v32[16];
      v51[1] = v32[17];
      v51[2] = v32[18];
      v51[3] = v32[19];
      v51[4] = v32[20];
      v51[5] = v32[21];
      v51[6] = v32[22];
      v51[7] = v32[23];
      v52 = (_DWORD *)(v48 + 32 * v14);
      *v52 = v32[24];
      v52[1] = v32[25];
      v52[2] = v32[26];
      v52[3] = v32[27];
      v52[4] = v32[28];
      v52[5] = v32[29];
      v52[6] = v32[30];
      v52[7] = v32[31];
      goto LABEL_62;
    }
    OMSpline::tangentsAuto(this, a2 - 2, a2 - 1, a2);
    OMSpline::tangentsAuto(this, a2 - 1, a2, a2 + 1);
    return OMSpline::tangentsAuto(this, a2, a2 + 1, a2 + 2);
  }
  else
  {
    if (a2 == 1)
    {
      v25 = 0;
      v27 = 3;
      v26 = 2;
    }
    else
    {
      v22 = v13 - 2;
      v23 = a2 + 2;
      if (v22 == a2)
        v24 = (v12 >> 5) - 1;
      else
        v24 = a2 + 1;
      if (v22 == a2)
        v23 = 0;
      if ((_DWORD)v14 == a2)
      {
        v24 = 0;
        v23 = 1;
      }
      if (a2)
        v25 = a2 - 1;
      else
        v25 = (v12 >> 5) - 1;
      if (a2)
      {
        v22 = a2 - 2;
        v26 = v24;
      }
      else
      {
        v26 = 1;
      }
      if (a2)
        v27 = v23;
      else
        v27 = 2;
      LODWORD(v14) = v22;
    }
    OMSpline::tangentsAuto(this, v14, v25, a2);
    OMSpline::tangentsAuto(this, v25, a2, v26);
    return OMSpline::tangentsAuto(this, a2, v26, v27);
  }
}

void sub_1B2CBBC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<OMVertex>::push_back[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = std::vector<OMVertex>::__push_back_slow_path<OMVertex>(a1, a2);
  }
  else
  {
    *v3 = *a2;
    v3[1] = a2[1];
    v3[2] = a2[2];
    v3[3] = a2[3];
    v3[4] = a2[4];
    v3[5] = a2[5];
    v3[6] = a2[6];
    v3[7] = a2[7];
    result = (uint64_t)(v3 + 8);
  }
  a1[1] = result;
  return result;
}

float OMSpline::tangentsAuto(uint64_t a1, uint64_t *a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float result;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  uint64_t v22;

  v5 = *a2;
  v6 = *a2 + 32 * a4;
  v7 = *a2 + 32 * a3;
  result = *(float *)(v6 + 8);
  v9 = *(float *)(v6 + 12);
  v11 = *(float *)(v7 + 8);
  v10 = *(float *)(v7 + 12);
  v12 = *(float *)(a1 + 28);
  v13 = *a2 + 32 * a5;
  v14 = *(float *)(v13 + 8);
  v15 = *(float *)(v13 + 12);
  v16 = v14 - v11;
  v17 = v15 - v10;
  v18 = sqrtf((float)(v16 * v16) + (float)(v17 * v17));
  if (v18 != 0.0)
  {
    v19 = sqrtf((float)((float)(result - v11) * (float)(result - v11)) + (float)((float)(v9 - v10) * (float)(v9 - v10)))
        / v12;
    if (v19 != 0.0)
    {
      v20 = (float *)(v5 + 32 * a4);
      *v20 = result - (float)((float)(v16 * v19) / v18);
      v20[1] = v9 - (float)((float)(v17 * v19) / v18);
    }
  }
  if (v18 != 0.0)
  {
    v21 = sqrtf((float)((float)(result - v14) * (float)(result - v14)) + (float)((float)(v9 - v15) * (float)(v9 - v15)))
        / v12;
    if (v21 != 0.0)
    {
      result = result + (float)((float)(v16 * v21) / v18);
      v22 = v5 + 32 * a4;
      *(float *)(v22 + 16) = result;
      *(float *)(v22 + 20) = v9 + (float)((float)(v17 * v21) / v18);
    }
  }
  return result;
}

float OMSpline::tangentsAuto(OMSpline *this, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float *v19;
  float v20;
  uint64_t v21;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)this + 32 * a3;
  v6 = *(_QWORD *)this + 32 * a2;
  result = *(float *)(v5 + 8);
  v8 = *(float *)(v5 + 12);
  v10 = *(float *)(v6 + 8);
  v9 = *(float *)(v6 + 12);
  v11 = *((float *)this + 7);
  v12 = *(_QWORD *)this + 32 * a4;
  v13 = *(float *)(v12 + 8);
  v14 = *(float *)(v12 + 12);
  v15 = v13 - v10;
  v16 = v14 - v9;
  v17 = sqrtf((float)(v15 * v15) + (float)(v16 * v16));
  if (v17 != 0.0)
  {
    v18 = sqrtf((float)((float)(result - v10) * (float)(result - v10)) + (float)((float)(v8 - v9) * (float)(v8 - v9)))
        / v11;
    if (v18 != 0.0)
    {
      v19 = (float *)(v4 + 32 * a3);
      *v19 = result - (float)((float)(v15 * v18) / v17);
      v19[1] = v8 - (float)((float)(v16 * v18) / v17);
    }
  }
  if (v17 != 0.0)
  {
    v20 = sqrtf((float)((float)(result - v13) * (float)(result - v13)) + (float)((float)(v8 - v14) * (float)(v8 - v14)))
        / v11;
    if (v20 != 0.0)
    {
      result = result + (float)((float)(v15 * v20) / v17);
      v21 = v4 + 32 * a3;
      *(float *)(v21 + 16) = result;
      *(float *)(v21 + 20) = v8 + (float)((float)(v16 * v20) / v17);
    }
  }
  return result;
}

void OMSpline::addVertexAtEnd(OMSpline *this, const Vec2f *a2)
{
  int v3;
  float *v4;
  float *v5;
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  unint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;

  v3 = *((_DWORD *)this + 6);
  if (v3)
  {
    if (v3 == 1)
    {
      v5 = *(float **)this;
      v4 = (float *)*((_QWORD *)this + 1);
      v6 = ((unint64_t)v4 - *(_QWORD *)this) >> 5;
      if ((int)v6 < 2)
      {
        if ((_DWORD)v6 == 1)
        {
          v14 = a2->var0[0];
          v15 = a2->var0[1];
          v16 = (float)(a2->var0[0] - v5[2]) * 0.1;
          v17 = (float)(v15 - v5[3]) * 0.1;
          v18 = a2->var0[0] - v16;
          v19 = a2->var0[0] + v16;
          *(float *)&v27 = v18;
          *((float *)&v27 + 1) = v15 - v17;
          v28 = v14;
          v29 = v15;
          v30 = v19;
          v31 = v15 + v17;
          if ((unint64_t)v4 >= *((_QWORD *)this + 2))
          {
            v20 = std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)this, &v27);
            v5 = *(float **)this;
          }
          else
          {
            *v4 = v18;
            v4[1] = v15 - v17;
            v4[2] = v14;
            v4[3] = v15;
            v20 = (uint64_t)(v4 + 8);
            v4[4] = v19;
            v4[5] = v15 + v17;
          }
          *((_QWORD *)this + 1) = v20;
          v25 = v5[2];
          v26 = v5[3];
          v5[4] = v16 + v25;
          v5[5] = v17 + v26;
          *v5 = v25 - v16;
          v5[1] = v26 - v17;
        }
        else
        {
          v22 = a2->var0[0];
          v23 = a2->var0[1];
          v27 = __PAIR64__(LODWORD(v23), LODWORD(v22));
          v28 = v22;
          v29 = v23;
          v30 = v22;
          v31 = v23;
          if ((unint64_t)v4 >= *((_QWORD *)this + 2))
          {
            v24 = std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)this, &v27);
          }
          else
          {
            *v4 = v22;
            v4[1] = v23;
            v4[2] = v22;
            v4[3] = v23;
            v24 = (uint64_t)(v4 + 8);
            v4[4] = v22;
            v4[5] = v23;
          }
          *((_QWORD *)this + 1) = v24;
        }
      }
      else
      {
        v7 = a2->var0[0];
        v8 = a2->var0[1];
        v27 = __PAIR64__(LODWORD(v8), LODWORD(v7));
        v28 = v7;
        v29 = v8;
        v30 = v7;
        v31 = v8;
        if ((unint64_t)v4 >= *((_QWORD *)this + 2))
        {
          v9 = std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)this, &v27);
        }
        else
        {
          *v4 = v7;
          v4[1] = v8;
          v4[2] = v7;
          v4[3] = v8;
          v9 = (uint64_t)(v4 + 8);
          v4[4] = v7;
          v4[5] = v8;
        }
        *((_QWORD *)this + 1) = v9;
        if (*((_BYTE *)this + 32))
        {
          v21 = ((unint64_t)(v9 - *(_QWORD *)this) >> 5) - 1;
          v27 = 0;
          OMSpline::move(this, v21, (float *)&v27, 2u);
        }
      }
    }
  }
  else
  {
    v10 = a2->var0[0];
    v11 = a2->var0[1];
    v32 = a2->var0[0];
    v33 = v11;
    v12 = *((_QWORD *)this + 1);
    if (v12 >= *((_QWORD *)this + 2))
    {
      v13 = std::vector<OMVertex>::__push_back_slow_path<OMVertex>((uint64_t *)this, &v27);
    }
    else
    {
      *(float *)(v12 + 24) = v10;
      *(float *)(v12 + 28) = v11;
      v13 = v12 + 32;
    }
    *((_QWORD *)this + 1) = v13;
    OMSpline::recomputeInternalBezier((uint64_t)this);
  }
}

void OMSpline::computeLinearArray(uint64_t *a1, uint64_t *a2, double a3, __n128 a4, float a5, float a6, float a7)
{
  float v10;
  float v11;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  float v30;
  float v31;
  float *v32;
  float *v33;
  uint64_t v34;

  v10 = a4.n128_f32[0];
  v11 = *(float *)&a3;
  v14 = *a2;
  v13 = a2[1];
  v32 = 0;
  v33 = 0;
  v34 = 0;
  OMSpline::getCurveSamples(a1, (uint64_t)&v32, 64, 0, a3, a4);
  v15 = v32;
  v16 = v33;
  if (v32 != v33)
  {
    v17 = (unint64_t)(v13 - v14) >> 2;
    if ((int)v17 > 0)
    {
      v18 = 0;
      v19 = 0;
      v20 = v32[1];
      v21 = *v32;
      v22 = *a2;
      v23 = (int)(((char *)v33 - (char *)v32) >> 3);
      v24 = v11;
      v25 = v20;
      do
      {
        v26 = (float)((float)((float)(v10 - v11) * (float)(1.0 / (float)((int)v17 - 1))) * (float)(int)v18) + v11;
        if (v26 >= v21)
        {
          v27 = (uint64_t)&v15[2 * v19 + 3];
          v28 = v19 + 1;
          do
          {
            v20 = v25;
            v24 = v21;
            v29 = &v15[2 * ((unint64_t)((char *)v16 - (char *)v15) >> 3) - 1];
            v21 = v10 + 0.0001;
            if (v28 < v23)
            {
              v21 = *(float *)(v27 - 4);
              v29 = (float *)v27;
            }
            v25 = *v29;
            ++v19;
            v27 += 8;
            ++v28;
          }
          while (v26 >= v21);
        }
        v30 = v20 + (float)((float)((float)(v26 - v24) * (float)(v25 - v20)) / (float)(v21 - v24));
        v31 = a5;
        if (v30 >= a5)
        {
          v31 = a6;
          if (v30 <= a6)
            v31 = v30;
        }
        *(float *)(v22 + 4 * v18++) = v31 * a7;
      }
      while (v18 != ((unint64_t)(v13 - v14) >> 2));
    }
  }
  if (v15)
  {
    v33 = v15;
    operator delete(v15);
  }
}

void sub_1B2CBC208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<OMVertex>::__push_back_slow_path<OMVertex>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(v7, v9);
  v11 = &v10[32 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[32 * v12];
  *(_DWORD *)v11 = *a2;
  *((_DWORD *)v11 + 1) = a2[1];
  *((_DWORD *)v11 + 2) = a2[2];
  *((_DWORD *)v11 + 3) = a2[3];
  *((_DWORD *)v11 + 4) = a2[4];
  *((_DWORD *)v11 + 5) = a2[5];
  *((_DWORD *)v11 + 6) = a2[6];
  *((_DWORD *)v11 + 7) = a2[7];
  v17 = v11 + 32;
  std::vector<OMVertex>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 += (v16 - v17 + 31) & 0xFFFFFFFFFFFFFFE0;
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1B2CBC33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<OMVertex>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OMVertex>,std::reverse_iterator<OMVertex*>,std::reverse_iterator<OMVertex*>,std::reverse_iterator<OMVertex*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

float std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OMVertex>,std::reverse_iterator<OMVertex*>,std::reverse_iterator<OMVertex*>,std::reverse_iterator<OMVertex*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  float result;

  v7 = a7;
  if (a3 != a5)
  {
    v8 = a7 - 16;
    do
    {
      v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v8 - 16) = v9;
      *(_DWORD *)(v8 - 12) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v8 - 4) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)v8 = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(v8 + 4) = *(_DWORD *)(a3 + 20);
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 24);
      result = *(float *)(a3 + 28);
      *(float *)(v8 + 12) = result;
      v8 -= 32;
      v7 -= 32;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t LiHeEquirectProject::setCanTile(uint64_t this, char a2)
{
  *(_BYTE *)(this + 424) = a2;
  return this;
}

float LiHeEquirectProject::computeDistanceToImagePlane(LiHeEquirectProject *this, float a2, float a3)
{
  return (float)(a2 * 0.5) / tanf(a3 * 0.5);
}

uint64_t LiHeEquirectProject::GetDOD(float32x2_t *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  __int128 v6;
  float32x2_t v7;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v16;
  float64x2_t v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!this[53].i8[0])
    return 0x8000000080000000;
  v4 = *(_QWORD *)&a4.var0;
  (*(void (**)(float32x2_t *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 6, v18);
  v6 = v18[0];
  (*(void (**)(float32x2_t *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 7, v18);
  v7 = *(float32x2_t *)((char *)v18 + 8);
  __asm { FMOV            V3.2D, #-0.5 }
  v13 = vcvtq_f64_f32(this[52]);
  v16 = vmulq_f64(v13, _Q3);
  v17 = v13;
  v18[1] = vcvtq_f64_f32(*(float32x2_t *)((char *)&v6 + 8));
  v14 = vcvtq_f64_f32(*(float32x2_t *)&v18[0]);
  v18[0] = vcvtq_f64_f32(*(float32x2_t *)&v6);
  v18[2] = v14;
  v18[3] = vcvtq_f64_f32(v7);
  v19 = 0;
  v20 = 0;
  v21 = 0x3FF0000000000000;
  v22 = 0u;
  v23 = 0u;
  v24 = 0x3FF0000000000000;
  if (PCMatrix44Tmpl<double>::invert((double *)v18, (double *)v18, 0.0))
  {
    PCMatrix44Tmpl<double>::transformRect<double>((double *)v18, v16.f64, (uint64_t)&v16);
    return HGRectMake4i(vcvtmd_s64_f64(v16.f64[0]), vcvtmd_s64_f64(v16.f64[1]), vcvtpd_s64_f64(v16.f64[0] + v17.f64[0]), vcvtpd_s64_f64(v16.f64[1] + v17.f64[1]));
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"Unable to invert image to pixel space transform in LiHeEquirectProject::GetDOD()\n", 81);
  }
  return v4;
}

uint64_t LiHeEquirectProject::GetROI(LiHeEquirectProject *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  unint64_t v5;
  float v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  float v11;
  float v12;
  int v13;
  float v14;
  double v15;
  double v16;
  float v23;
  double v24;
  double v25;
  float v26;
  double v27;
  double v28;
  float v29;
  double v30;
  double v31;
  double v32;
  float v33;
  float v34;
  signed int v35;
  _BOOL4 v36;
  float v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  int32x2_t v52[2];
  float64x2_t v53;
  double v54;
  double v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  v79 = *MEMORY[0x1E0C80C00];
  (*(void (**)(LiHeEquirectProject *, _QWORD, __int128 *))(*(_QWORD *)this + 104))(this, 0, &v66);
  LODWORD(v46) = v66;
  (*(void (**)(LiHeEquirectProject *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 1, &v66);
  LODWORD(v47) = v66;
  (*(void (**)(LiHeEquirectProject *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 2, &v66);
  v7 = *(float *)&v66;
  (*(void (**)(LiHeEquirectProject *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 3, &v66);
  v64 = v66;
  v65 = DWORD2(v66);
  (*(void (**)(LiHeEquirectProject *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 4, &v66);
  v62 = v66;
  v63 = DWORD2(v66);
  (*(void (**)(LiHeEquirectProject *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 5, &v66);
  v60 = v66;
  v61 = DWORD2(v66);
  (*(void (**)(LiHeEquirectProject *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 6, &v66);
  v59 = v66;
  (*(void (**)(LiHeEquirectProject *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 7, &v66);
  v58 = v66;
  (*(void (**)(LiHeEquirectProject *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 8, &v66);
  v8 = v66;
  v57 = v66;
  (*(void (**)(LiHeEquirectProject *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 9, &v66);
  v9 = v66;
  v56 = v66;
  if (!*((_BYTE *)this + 424))
  {
    __asm { FMOV            V5.2D, #-0.5 }
    v53 = vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v47), LODWORD(v46))), _Q5);
    v54 = v46;
    v55 = v47;
    *(double *)&v66 = *(float *)&v8;
    *((double *)&v66 + 1) = *((float *)&v8 + 1);
    v67 = *((float *)&v8 + 2);
    v68 = *((float *)&v8 + 3);
    v69 = *(float *)&v9;
    v70 = *((float *)&v9 + 1);
    v71 = *((float *)&v9 + 2);
    v72 = *((float *)&v9 + 3);
    v73 = 0;
    v74 = 0;
    v76 = 0u;
    v77 = 0u;
    v75 = 0x3FF0000000000000;
    v78 = 0x3FF0000000000000;
    if (PCMatrix44Tmpl<double>::transformRect<double>((double *)&v66, v53.f64, (uint64_t)&v53))
      return HGRectMake4i(vcvtmd_s64_f64(v53.f64[0]), vcvtmd_s64_f64(v53.f64[1]), vcvtpd_s64_f64(v53.f64[0] + v54), vcvtpd_s64_f64(v53.f64[1] + v55));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"Unable to transform rect. Using default ROI.\n", 45);
    return HGRectMake4i((int)(floor(v46 * -0.5) + -1.0), (int)(floor(v47 * -0.5) + -2.0), (int)(ceil(v46 * 0.5) + 1.0), (int)(ceil(v47 * 0.5) + 1.0));
  }
  v66 = xmmword_1B30503B0;
  if (SHIDWORD(v5) <= SHIDWORD(v4))
  {
    v10 = HIDWORD(v5);
    do
    {
      getROIPoint((float *)&v64, (float *)&v62, (float *)&v60, (float *)&v59, (float *)&v58, (float *)&v57, (float *)&v56, (int32x2_t *)&v53, (float)(int)v5, (float)(int)v10, v46, v47, v7);
      PCRect<int>::operator|=((int32x2_t *)&v66, (int32x2_t *)&v53);
      getROIPoint((float *)&v64, (float *)&v62, (float *)&v60, (float *)&v59, (float *)&v58, (float *)&v57, (float *)&v56, v52, (float)(int)v4, (float)(int)v10, v46, v47, v7);
      PCRect<int>::operator|=((int32x2_t *)&v66, v52);
      LODWORD(v10) = v10 + 1;
    }
    while (HIDWORD(v4) + 1 != (_DWORD)v10);
  }
  v11 = (float)SHIDWORD(v5);
  v12 = (float)SHIDWORD(v4);
  if ((int)v5 <= (int)v4)
  {
    v13 = v5;
    do
    {
      getROIPoint((float *)&v64, (float *)&v62, (float *)&v60, (float *)&v59, (float *)&v58, (float *)&v57, (float *)&v56, (int32x2_t *)&v53, (float)v13, v11, v46, v47, v7);
      PCRect<int>::operator|=((int32x2_t *)&v66, (int32x2_t *)&v53);
      getROIPoint((float *)&v64, (float *)&v62, (float *)&v60, (float *)&v59, (float *)&v58, (float *)&v57, (float *)&v56, v52, (float)v13, v12, v46, v47, v7);
      PCRect<int>::operator|=((int32x2_t *)&v66, v52);
      ++v13;
    }
    while ((_DWORD)v4 + 1 != v13);
  }
  getLatLong((float *)&v64, (float *)&v62, (float *)&v60, (float *)&v59, (float *)&v58, (float *)&v53, (float)(int)v5, v11, v7);
  getLatLong((float *)&v64, (float *)&v62, (float *)&v60, (float *)&v59, (float *)&v58, (float *)v52, (float)(int)v4, v11, v7);
  getLatLong((float *)&v64, (float *)&v62, (float *)&v60, (float *)&v59, (float *)&v58, &v50, (float)(int)v4, v12, v7);
  getLatLong((float *)&v64, (float *)&v62, (float *)&v60, (float *)&v59, (float *)&v58, &v48, (float)(int)v5, v12, v7);
  v14 = *(float *)v52[0].i32 - *(float *)v53.f64;
  v15 = (float)(*(float *)v52[0].i32 - *(float *)v53.f64);
  if (v15 <= 3.14159265)
  {
    if (v15 >= -3.14159265)
      goto LABEL_15;
    v16 = 6.28318531;
  }
  else
  {
    v16 = -6.28318531;
  }
  v14 = v15 + v16;
LABEL_15:
  v23 = v50 - *(float *)v52[0].i32;
  v24 = (float)(v50 - *(float *)v52[0].i32);
  if (v24 <= 3.14159265)
  {
    if (v24 >= -3.14159265)
      goto LABEL_20;
    v25 = 6.28318531;
  }
  else
  {
    v25 = -6.28318531;
  }
  v23 = v24 + v25;
LABEL_20:
  v26 = v48 - v50;
  v27 = (float)(v48 - v50);
  if (v27 <= 3.14159265)
  {
    if (v27 >= -3.14159265)
      goto LABEL_25;
    v28 = 6.28318531;
  }
  else
  {
    v28 = -6.28318531;
  }
  v26 = v27 + v28;
LABEL_25:
  v29 = *(float *)v53.f64 - v48;
  v30 = (float)(*(float *)v53.f64 - v48);
  if (v30 <= 3.14159265)
  {
    if (v30 >= -3.14159265)
      goto LABEL_30;
    v31 = 6.28318531;
  }
  else
  {
    v31 = -6.28318531;
  }
  v29 = v30 + v31;
LABEL_30:
  v32 = (float)((float)((float)(v14 + v23) + v26) + v29);
  if (v32 > 3.14159265 || v32 < -3.14159265)
  {
    v33 = *((float *)v53.f64 + 1);
    if (*((float *)v53.f64 + 1) >= *(float *)&v52[0].i32[1])
      v34 = *((float *)v53.f64 + 1);
    else
      v34 = *(float *)&v52[0].i32[1];
    if (v34 < v51)
      v34 = v51;
    if (v34 < v49)
      v34 = v49;
    if (*(float *)&v52[0].i32[1] < *((float *)v53.f64 + 1))
      v33 = *(float *)&v52[0].i32[1];
    if (v51 < v33)
      v33 = v51;
    if (v49 < v33)
      v33 = v49;
    if (3.14159265 - v34 <= v33)
    {
      HIDWORD(v66) += DWORD1(v66) + 1;
      DWORD1(v66) = -1;
    }
    else
    {
      v35 = vcvtps_s32_f32(v47);
      if (HIDWORD(v66) + DWORD1(v66) > v35)
        v35 = HIDWORD(v66) + DWORD1(v66);
      HIDWORD(v66) = v35 - DWORD1(v66) + 1;
    }
  }
  if (*((_BYTE *)this + 424))
  {
    v36 = v49 < 4.0;
    v37 = v47 + -4.0;
    if (v49 > (float)(v47 + -4.0))
      v36 = 1;
    v38 = v51 < 4.0;
    if (v51 > v37)
      v38 = 1;
    v39 = *(float *)&v52[0].i32[1] < 4.0;
    if (*(float *)&v52[0].i32[1] > v37)
      v39 = 1;
    v40 = *((float *)v53.f64 + 1) < 4.0;
    if (*((float *)v53.f64 + 1) > v37)
      v40 = 1;
    v41 = v38 + v36 + v39 + v40;
    v42 = v66;
    v43 = DWORD2(v66);
    if (v41 >= 2)
    {
      v44 = DWORD2(v66) + v66;
      v45 = vcvtps_s32_f32(v46);
      v42 = -1;
      if (DWORD2(v66) + (int)v66 <= v45)
        v44 = v45;
      v43 = v44 + 2;
      LODWORD(v66) = -1;
      DWORD2(v66) = v43;
    }
  }
  else
  {
    v42 = v66;
    v43 = DWORD2(v66);
  }
  return HGRectMake4i((int)(float)((float)v42 + -5.0), (int)(float)((float)SDWORD1(v66) + -5.0), (int)(float)((float)(v43 + v42) + 5.0), (int)(float)((float)(HIDWORD(v66) + DWORD1(v66)) + 5.0));
}

int32x2_t *getROIPoint@<X0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, float *a5@<X4>, float *a6@<X5>, float *a7@<X6>, int32x2_t *a8@<X8>, float a9@<S0>, float a10@<S1>, float a11@<S2>, float a12@<S3>, float a13@<S4>)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float32_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float v50[2];

  getLatLong(a1, a2, a3, a4, a5, v50, a9, a10, a13);
  v18 = (float)(v50[0] * a11) / 6.28318531;
  v19 = a12 * 0.5 + (float)(v50[1] * a12) / -3.14159265;
  v20 = a11 * 0.5;
  v21 = fmodf((float)(a11 * 0.5) + (float)((float)(floorf(v18 + -0.5) + 0.5) + -0.5), a11);
  if (v21 >= 0.0)
    v22 = -0.0;
  else
    v22 = a11;
  v23 = (float)((float)(v21 + v22) + 0.5) - v20;
  v24 = fmodf(v20 + (float)((float)(v23 + 1.0) + -0.5), a11);
  if (v24 >= 0.0)
    v25 = -0.0;
  else
    v25 = a11;
  v26 = (float)((float)(v24 + v25) + 0.5) - v20;
  v27 = floorf(v19 + -0.5) + 0.5;
  v28 = 0.5 - (float)(a12 * 0.5);
  v29 = (float)(a12 * 0.5) + -0.5;
  if (v29 >= v27)
    v30 = v27;
  else
    v30 = (float)(a12 * 0.5) + -0.5;
  if (v28 <= v27)
    v31 = v30;
  else
    v31 = 0.5 - (float)(a12 * 0.5);
  if (v29 >= (float)(v31 + 1.0))
    v29 = v31 + 1.0;
  if (v28 > (float)(v31 + 1.0))
    v29 = 0.5 - (float)(a12 * 0.5);
  v32 = a6[1];
  v33 = *a6 * v23;
  v34 = v31 * v32;
  v35 = a6[3];
  v36 = v35 + (float)(v33 + (float)(v31 * v32));
  v37 = a7[1];
  v38 = v23 * *a7;
  v39 = v31 * v37;
  v40 = a7[3];
  v41 = v32 * v29;
  v42 = v29 * v37;
  v43 = *a6 * v26;
  v44 = *a7 * v26;
  v49.f32[0] = v36;
  v49.f32[1] = v40 + (float)(v38 + v39);
  v48.f32[0] = v35 + (float)(v33 + v41);
  v48.f32[1] = v40 + (float)(v38 + v42);
  v47.f32[0] = v35 + (float)(v34 + v43);
  v47.f32[1] = v40 + (float)(v39 + v44);
  v46.f32[0] = v35 + (float)(v41 + v43);
  v46.f32[1] = v40 + (float)(v42 + v44);
  *(_OWORD *)a8->i8 = xmmword_1B30503B0;
  addToRect(&v49, a8);
  addToRect(&v48, a8);
  addToRect(&v47, a8);
  return addToRect(&v46, a8);
}

void getLatLong(float *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, float *a5@<X4>, float *a6@<X8>, float a7@<S0>, float a8@<S1>, float a9@<S2>)
{
  float v9;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  v9 = a9;
  v11 = a4[3] + (float)(a4[2] + (float)((float)(*a4 * a7) + (float)(a4[1] * a8)));
  v12 = a5[3] + (float)(a5[2] + (float)((float)(*a5 * a7) + (float)(a5[1] * a8)));
  v13 = sqrtf((float)(v9 * v9) + (float)((float)(v11 * v11) + (float)(v12 * v12)));
  if (v13 <= -0.00001 || v13 >= 0.00001)
  {
    v11 = v11 / v13;
    v12 = v12 / v13;
    v9 = a9 / v13;
  }
  v14 = (float)((float)(v11 * *a1) + (float)(v12 * a1[1])) + (float)(v9 * a1[2]);
  v15 = *a2;
  v16 = a2[1];
  v17 = a2[2];
  v18 = (float)((float)(v11 * *a3) + (float)(v12 * a3[1])) + (float)(v9 * a3[2]);
  if (v18 <= -0.00001 || v18 >= 0.00001)
    v19 = atan2f(v14, v18);
  else
    v19 = flt_1B3557BF8[v14 < 0.0];
  v20 = acosf((float)((float)(v11 * v15) + (float)(v12 * v16)) + (float)(v9 * v17));
  *a6 = v19;
  a6[1] = v20;
}

void LiHeEquirectProject::~LiHeEquirectProject(HGNode *this)
{
  void *v1;

  LiHgcEquirectProject::~LiHgcEquirectProject(this);
  HGObject::operator delete(v1);
}

int32x2_t *addToRect(float32x2_t *a1, int32x2_t *a2)
{
  int32x2_t v5;

  v5 = vcvt_s32_f32(vrndm_f32(*a1));
  PCRect<int>::operator|=(a2, &v5);
  v5 = vcvt_s32_f32(vrndp_f32(*a1));
  return PCRect<int>::operator|=(a2, &v5);
}

int32x2_t *PCRect<int>::operator|=(int32x2_t *result, int32x2_t *a2)
{
  __int32 v2;
  __int32 v3;
  int32x2_t v4;
  int32x2_t v5;

  v2 = result[1].i32[0];
  if (v2 < 0 || (v3 = result[1].i32[1], v3 < 0))
  {
    v5 = 0;
    v4 = *a2;
  }
  else
  {
    v4 = vmin_s32(*result, *a2);
    v5 = vsub_s32(vmax_s32(vadd_s32((int32x2_t)__PAIR64__(v3, v2), *result), *a2), v4);
  }
  *result = v4;
  result[1] = v5;
  return result;
}

__n128 OMPie::moveAll(OMPie *this, const Vec2f *a2)
{
  uint64_t v3;
  __n128 result;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v3 = *((_QWORD *)this + 5);
  if (*((_DWORD *)this + 8))
  {
    result.n128_u32[0] = *(_DWORD *)(v3 + 4);
    v6 = *(float *)(v3 + 16);
    v5 = *(float *)(v3 + 20);
    v8 = *(float *)(v3 + 8);
    v7 = *(float *)(v3 + 12);
    v9 = a2->var0[0] + *(float *)v3;
LABEL_3:
    *(float *)v3 = v9;
    *(float *)(v3 + 4) = a2->var0[1] + result.n128_f32[0];
    *(float *)(v3 + 16) = a2->var0[0] + v6;
    *(float *)(v3 + 20) = a2->var0[1] + v5;
    *(float *)(v3 + 8) = a2->var0[0] + v8;
    *(float *)(v3 + 12) = a2->var0[1] + v7;
    if (OMPie::isQuadActive(this))
    {
      v10 = *(float *)(v3 + 36);
      *(float *)(v3 + 32) = a2->var0[0] + *(float *)(v3 + 32);
      *(float *)(v3 + 36) = a2->var0[1] + v10;
      v11 = *(float *)(v3 + 28);
      *(float *)(v3 + 24) = a2->var0[0] + *(float *)(v3 + 24);
      result.n128_f32[0] = a2->var0[1] + v11;
      *(_DWORD *)(v3 + 28) = result.n128_u32[0];
    }
    else
    {
      result.n128_u64[0] = *(_QWORD *)(v3 + 8);
      result.n128_u64[1] = result.n128_u64[0];
      *(__n128 *)(v3 + 24) = result;
    }
    return result;
  }
  result.n128_u32[0] = *(_DWORD *)(v3 + 4);
  v12 = a2->var0[0];
  v13 = a2->var0[1];
  v9 = *(float *)v3 + a2->var0[0];
  if (sqrtf((float)(v9 * v9) + (float)((float)(result.n128_f32[0] + v13) * (float)(result.n128_f32[0] + v13))) <= 1.0)
  {
    v8 = *(float *)(v3 + 8);
    v7 = *(float *)(v3 + 12);
    if (sqrtf((float)((float)(v8 + v12) * (float)(v8 + v12)) + (float)((float)(v7 + v13) * (float)(v7 + v13))) <= 1.0)
    {
      v6 = *(float *)(v3 + 16);
      v5 = *(float *)(v3 + 20);
      if (sqrtf((float)((float)(v6 + v12) * (float)(v6 + v12)) + (float)((float)(v5 + v13) * (float)(v5 + v13))) <= 1.0)
        goto LABEL_3;
    }
  }
  return result;
}

BOOL OMPie::isQuadActive(OMPie *this)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  BOOL v5;
  __int128 v6;
  __int128 v8;
  float v9[4];

  v1 = *((_QWORD *)this + 5);
  v3 = *(float *)(v1 + 8);
  v2 = *(float *)(v1 + 12);
  if (sqrtf((float)(v3 * v3) + (float)(v2 * v2)) >= 0.00002)
    return 0;
  v4 = *(float *)(v1 + 28);
  v5 = v3 == *(float *)(v1 + 24) && v2 == v4;
  if (v5 && v3 == *(float *)(v1 + 32) && v2 == *(float *)(v1 + 36))
    return 0;
  v9[0] = *(float *)(v1 + 24);
  v9[1] = v4;
  v9[2] = *(float *)v1;
  v9[3] = *(float *)(v1 + 4);
  *(_QWORD *)&v6 = *(_QWORD *)(v1 + 32);
  *((_QWORD *)&v6 + 1) = *(_QWORD *)(v1 + 16);
  v8 = v6;
  return !OMUtil::findIntersectionOfLineSegmentExclusive(v9, (float *)&v8);
}

uint64_t OMPie::moveAroundArc(OMPie *this, float32x2_t *a2, Vec2f *a3)
{
  float32x2_t v5;
  float v6;
  float32x2_t v7;
  float v8;
  __float2 v9;
  uint64_t result;
  float v11;
  float v12;
  float v13;
  float32x2_t v14;
  float v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float v20;
  __float2 v21;
  float v22;
  float32x2_t v23;
  const Vec2f *v24;
  float v25;
  __float2 v26;
  float v27;
  float32x2_t v28;
  int32x2_t v29;
  Vec2f v30;
  float32x2_t v31;

  v5 = *(float32x2_t *)(*((_QWORD *)this + 5) + 8);
  v6 = v5.f32[1];
  v29 = (int32x2_t)v5;
  if (v5.f32[0] == 0.0 && v5.f32[1] == 0.0)
  {
    v7 = vsub_f32(*a2, v5);
    v30 = (Vec2f)1065353216;
    v31 = v7;
    v8 = OMUtil::angle((OMUtil *)&v31, &v30, a3);
    if ((float)((float)(v31.f32[0] * v30.var0[1]) - (float)(v31.f32[1] * v30.var0[0])) < 0.0)
      v8 = 6.2832 - v8;
    v9 = __sincosf_stret(v8);
    result = 0;
    v11 = sqrtf((float)((float)(a3->var0[0] - *(float *)v29.i32) * (float)(a3->var0[0] - *(float *)v29.i32))+ (float)((float)(a3->var0[1] - v6) * (float)(a3->var0[1] - v6)));
    v12 = *(float *)v29.i32 + (float)(v9.__cosval * v11);
    v13 = v6 - (float)(v9.__sinval * v11);
  }
  else
  {
    v14 = vsub_f32(*a2, v5);
    v30 = (Vec2f)vsub_f32(0, v5);
    v31 = v14;
    v15 = OMUtil::angle((OMUtil *)&v31, &v30, a3);
    if ((float)((float)(v31.f32[0] * v30.var0[1]) - (float)(v31.f32[1] * v30.var0[0])) >= 0.0)
      v16 = v15;
    else
      v16 = 6.2832 - v15;
    v17 = (float32x2_t)vdup_lane_s32(v29, 0);
    v17.i32[0] = LODWORD(a3->var0[0]);
    v18.i32[1] = v29.i32[1];
    v18.i32[0] = LODWORD(a3->var0[1]);
    v19 = vsqrt_f32(vadd_f32(vmul_f32(v17, v17), vmul_f32(v18, v18)));
    v27 = v19.f32[1];
    v28 = vmul_f32(v19, v19);
    v20 = vmuls_lane_f32(cosf(v16 + v16), v28, 1) + v28.f32[0];
    v21 = __sincosf_stret(v16);
    v22 = sqrtf(v20+ (float)((float)((float)(v27 + v27) * v21.__cosval)* sqrtf(v28.f32[0] - vmuls_lane_f32(v21.__sinval * v21.__sinval, v28, 1))));
    v23 = vsub_f32(*a2, (float32x2_t)v29);
    v30 = (Vec2f)1065353216;
    v31 = v23;
    v25 = OMUtil::angle((OMUtil *)&v31, &v30, v24);
    if ((float)((float)(v31.f32[0] * v30.var0[1]) - (float)(v31.f32[1] * v30.var0[0])) < 0.0)
      v25 = 6.2832 - v25;
    v26 = __sincosf_stret(v25);
    v12 = *(float *)v29.i32 + (float)(v22 * v26.__cosval);
    v13 = v6 - (float)(v22 * v26.__sinval);
    result = 0;
  }
  a3->var0[0] = v12;
  a3->var0[1] = v13;
  return result;
}

void OMPie::computeArc(OMPie *this, uint64_t a2, const Vec2f *a3)
{
  uint64_t v4;
  const Vec2f *v5;

  OMPie::computeArcIn(this, a2, a3);
  OMPie::computeArcOut(this, v4, v5);
}

void OMPie::getArcIn(OMPie *this@<X0>, float a2@<S0>, float *a3@<X8>)
{
  int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  __float2 v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  __float2 v20;
  uint64_t v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;

  if (!OMPie::isQuadActive(this))
    goto LABEL_7;
  v6 = *((_DWORD *)this + 8);
  if (v6 == 1)
  {
    v16 = *((float *)this + 4);
    v8 = 1.0 - a2;
    if (v16 != 0.0)
    {
      v17 = *((float *)this + 5);
      if (v17 != 0.0)
      {
        v18 = *((float *)this + 6) + (float)(*((float *)this + 7) * a2);
        v19 = (float)(v8 * v16) + (float)(v17 * a2);
        v20 = __sincosf_stret(v18);
        v21 = *((_QWORD *)this + 5);
        v22 = *(float *)(v21 + 12);
        *a3 = *(float *)(v21 + 8) + (float)(v19 * v20.__cosval);
        v14 = (float)(v19 * v20.__sinval) + v22;
        goto LABEL_9;
      }
    }
LABEL_13:
    v23 = (float *)*((_QWORD *)this + 5);
    v24 = v23[7] * a2;
    v25 = v8 * v23[8];
    v26 = v8 * v23[9];
    *a3 = (float)(v23[6] * a2) + v25;
    v14 = v24 + v26;
    goto LABEL_9;
  }
  if (v6)
  {
LABEL_7:
    v15 = *((_QWORD *)this + 5);
    v13 = *(float *)(v15 + 8);
    v14 = *(float *)(v15 + 12);
    goto LABEL_8;
  }
  v7 = *((float *)this + 4);
  v8 = 1.0 - a2;
  if (v7 == 0.0)
    goto LABEL_13;
  v9 = *((float *)this + 5);
  if (v9 == 0.0)
    goto LABEL_13;
  v10 = *((float *)this + 6) + (float)(*((float *)this + 7) * a2);
  v11 = (float)(v8 * v7) + (float)(v9 * a2);
  v12 = __sincosf_stret(v10);
  v13 = v11 * v12.__cosval;
  v14 = v11 * v12.__sinval;
LABEL_8:
  *a3 = v13;
LABEL_9:
  a3[1] = v14;
}

void OMPie::getArcOut(float32x2_t **this@<X0>, float a2@<S0>, float32x2_t *a3@<X8>)
{
  float v4;
  float v5;
  __float2 v6;
  float32x2_t v7;
  float v8;

  v4 = 1.0 - a2;
  if (*(float *)this == 0.0 || (v5 = *((float *)this + 1), v5 == 0.0))
  {
    v7 = vadd_f32(vmul_n_f32(*this[5], a2), vmul_n_f32(this[5][2], v4));
  }
  else
  {
    v8 = (float)(v4 * *(float *)this) + (float)(v5 * a2);
    v6 = __sincosf_stret(*((float *)this + 2) + (float)(*((float *)this + 3) * a2));
    v7 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v6.__sinval), LODWORD(v6.__cosval)), v8);
  }
  *a3 = v7;
}

void OMPie::move(OMPie *this, int *a2, Vec2f *a3, float32x2_t *a4)
{
  int v7;
  uint64_t v9;
  uint64_t v10;
  const Vec2f *v11;
  float32x4_t v12;
  float v13;
  int v14;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  float *v36;
  uint64_t v37;
  const Vec2f *v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  _BOOL4 isQuadActive;
  const Vec2f *v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  float v56;
  float *v57;
  Vec2f *v58;
  float v59;
  uint64_t v60;
  const Vec2f *v61;
  float32x2_t *v62;
  float32x2_t v63;
  float32x2_t v64;
  int32x2_t v65;
  int32x2_t v66;
  float32x2_t v67;
  int32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  int32x2_t v71;
  float v72;
  int32x2_t *v73;
  double v74;
  float v75;
  uint64_t v76;
  const Vec2f *v77;
  uint64_t v78;
  const Vec2f *v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x2_t v83;

  v7 = *a2;
  switch(*a2)
  {
    case 0:
      v16 = (float *)*((_QWORD *)this + 5);
      if (*((_DWORD *)this + 8))
      {
        v17 = v16[1];
        v18 = a4->f32[0] + *v16;
      }
      else
      {
        v17 = v16[1];
        v18 = *v16 + a4->f32[0];
        if (sqrtf((float)(v18 * v18) + (float)((float)(v17 + a4->f32[1]) * (float)(v17 + a4->f32[1]))) > 1.0)
          return;
      }
      *v16 = v18;
      v16[1] = a4->f32[1] + v17;
      return;
    case 1:
    case 8:
      v9 = *((_QWORD *)this + 5);
      *(Vec2f *)(v9 + 8) = *a3;
      OMPie::computeArcIn(this, (uint64_t)a2, a3);
      OMPie::computeArcOut(this, v10, v11);
      OMPie::getArcOut((float32x2_t **)this, 0.5, &v83);
      *(float32x2_t *)v12.f32 = vsub_f32(*(float32x2_t *)(v9 + 16), *(float32x2_t *)v9);
      v12.i64[1] = v12.i64[0];
      v82 = vmulq_f32(v12, (float32x4_t)xmmword_1B3557BC0);
      v12.i64[0] = *(_QWORD *)(v9 + 8);
      *(float32x2_t *)&v12.u32[2] = v83;
      v80 = v83;
      v81 = v12;
      if (OMUtil::findIntersectionOfLineSegment(v82.f32, v81.f32))
      {
        v14 = *(_DWORD *)(v9 + 8);
        v13 = *(float *)(v9 + 12);
        *(_DWORD *)(v9 + 32) = v14;
        *(float *)(v9 + 36) = v13;
        *(_DWORD *)(v9 + 24) = v14;
        v15 = 3;
      }
      else
      {
        v19 = sqrtf(vmul_f32(v80, v80).f32[0] + vmuls_lane_f32(v80.f32[1], v80, 1));
        v20 = (float)((float)(v80.f32[0] / v19) * a3->var0[0]) + (float)((float)(v80.f32[1] / v19) * a3->var0[1]);
        *(_QWORD *)(v9 + 8) = 0;
        v21 = *(float *)v9;
        v22 = *(float *)(v9 + 4);
        v23 = sqrtf((float)(v21 * v21) + (float)(v22 * v22));
        v24 = v20 * (float)(*(float *)v9 / v23);
        v25 = v20 * (float)(v22 / v23);
        v26 = *(float *)(v9 + 16);
        v13 = *(float *)(v9 + 20);
        if (sqrtf((float)(v24 * v24) + (float)(v25 * v25)) >= v23
          || (v27 = sqrtf((float)(v26 * v26) + (float)(v13 * v13)),
              v28 = v20 * (float)(v26 / v27),
              v29 = v20 * (float)(v13 / v27),
              sqrtf((float)(v28 * v28) + (float)(v29 * v29)) >= v27))
        {
          *(float *)(v9 + 24) = v21;
          *(float *)(v9 + 28) = v22;
          v15 = 4;
          *(float *)(v9 + 32) = v26;
        }
        else
        {
          *(float *)(v9 + 24) = v24;
          *(float *)(v9 + 28) = v25;
          v15 = 4;
          v13 = v29;
          *(float *)(v9 + 32) = v28;
        }
      }
      *(float *)(v9 + 8 * v15 + 4) = v13;
      v7 = *a2;
      goto LABEL_15;
    case 2:
      v30 = *((_QWORD *)this + 5);
      if (*((_DWORD *)this + 8))
      {
        v31 = *(float *)(v30 + 20);
        v32 = a4->f32[0] + *(float *)(v30 + 16);
      }
      else
      {
        v31 = *(float *)(v30 + 20);
        v32 = *(float *)(v30 + 16) + a4->f32[0];
        if (sqrtf((float)(v32 * v32) + (float)((float)(v31 + a4->f32[1]) * (float)(v31 + a4->f32[1]))) > 1.0)
          return;
      }
      *(float *)(v30 + 16) = v32;
      *(float *)(v30 + 20) = a4->f32[1] + v31;
      return;
    case 9:
      *a2 = 11;
LABEL_18:
      v36 = (float *)*((_QWORD *)this + 5);
      OMPie::computeArcIn(this, (uint64_t)a2, a3);
      OMPie::computeArcOut(this, v37, v38);
      OMPie::getArcOut((float32x2_t **)this, 0.5, (float32x2_t *)&v82);
      v39 = v82.i64[0];
      v40 = sqrtf((float)(a3->var0[0] * a3->var0[0]) + (float)(a3->var0[1] * a3->var0[1]));
      if (v40 <= 0.0)
        v40 = 0.02;
      v41 = v36[1];
      v42 = sqrtf((float)(*v36 * *v36) + (float)(v41 * v41));
      v43 = v40 * (float)(*v36 / v42);
      v44 = v40 * (float)(v41 / v42);
      v45 = v36[4];
      v46 = v36[5];
      v47 = sqrtf((float)(v45 * v45) + (float)(v46 * v46));
      v48 = v40 * (float)(v45 / v47);
      v49 = v40 * (float)(v46 / v47);
      isQuadActive = OMPie::isQuadActive(this);
      v52 = *((_QWORD *)this + 5);
      if (!isQuadActive)
        goto LABEL_47;
      if (sqrtf((float)(*(float *)(v52 + 24) * *(float *)(v52 + 24)) + (float)(*(float *)(v52 + 28)
                                                                              * *(float *)(v52 + 28))) >= sqrtf((float)(v43 * v43) + (float)(v44 * v44)))
      {
        v53 = *(float *)(v52 + 36);
      }
      else
      {
        v53 = *(float *)(v52 + 36);
        if (sqrtf((float)(*(float *)(v52 + 32) * *(float *)(v52 + 32)) + (float)(v53 * v53)) < sqrtf((float)(v48 * v48)+ (float)(v49 * v49)))goto LABEL_47;
      }
      v43 = *(float *)(v52 + 24);
      v44 = *(float *)(v52 + 28);
      v48 = *(float *)(v52 + 32);
      v49 = v53;
LABEL_47:
      *(float *)v52 = v43;
      *(float *)(v52 + 4) = v44;
      *(float *)(v52 + 16) = v48;
      *(float *)(v52 + 20) = v49;
      v75 = OMUtil::angle((OMUtil *)v52, (const Vec2f *)(v52 + 16), v51);
      if ((float)((float)(*(float *)v52 * *(float *)(v52 + 20)) - (float)(*(float *)(v52 + 4) * *(float *)(v52 + 16))) < 0.0)
        v75 = 6.2832 - v75;
      if (v75 > 3.14159265 && !OMPie::isQuadActive(this))
      {
        OMPie::computeArcIn(this, v76, v77);
        OMPie::computeArcOut(this, v78, v79);
        OMPie::getArcOut((float32x2_t **)this, 0.5, (float32x2_t *)&v81);
        *(float32x2_t *)(v52 + 8) = vmul_n_f32(*(float32x2_t *)(v52 + 8), sqrtf((float)(v81.f32[0] * v81.f32[0]) + (float)(v81.f32[1] * v81.f32[1]))/ sqrtf((float)(*(float *)&v39 * *(float *)&v39)+ (float)(*((float *)&v39 + 1) * *((float *)&v39 + 1))));
      }
      return;
    case 12:
      *a2 = 10;
LABEL_41:
      *(float32x2_t *)v82.f32 = vsub_f32((float32x2_t)*a3, *a4);
      v72 = OMUtil::angle((OMUtil *)&v82, a3, a3);
      if ((float)((float)(v82.f32[0] * a3->var0[1]) - (float)(v82.f32[1] * a3->var0[0])) < 0.0)
        v72 = 6.2832 - v72;
      v73 = (int32x2_t *)*((_QWORD *)this + 5);
      v74 = v72;
      Mat2f::MakeRot((Mat2f *)&v82, v72);
      *v73 = (int32x2_t)vadd_f32(vmul_f32((float32x2_t)vrev64_s32(*v73), *(float32x2_t *)&v82.i32[1]), vmul_f32((float32x2_t)*v73, (float32x2_t)__PAIR64__(v82.u32[3], v82.u32[0])));
      Mat2f::MakeRot((Mat2f *)&v82, v74);
      v73[1] = (int32x2_t)vadd_f32(vmul_f32((float32x2_t)vrev64_s32(v73[1]), *(float32x2_t *)&v82.i32[1]), vmul_f32((float32x2_t)v73[1], (float32x2_t)__PAIR64__(v82.u32[3], v82.u32[0])));
      Mat2f::MakeRot((Mat2f *)&v82, v74);
      v73[2] = (int32x2_t)vadd_f32(vmul_f32((float32x2_t)vrev64_s32(v73[2]), *(float32x2_t *)&v82.i32[1]), vmul_f32((float32x2_t)v73[2], (float32x2_t)__PAIR64__(v82.u32[3], v82.u32[0])));
      Mat2f::MakeRot((Mat2f *)&v82, v74);
      v73[3] = (int32x2_t)vadd_f32(vmul_f32((float32x2_t)vrev64_s32(v73[3]), *(float32x2_t *)&v82.i32[1]), vmul_f32((float32x2_t)v73[3], (float32x2_t)__PAIR64__(v82.u32[3], v82.u32[0])));
      Mat2f::MakeRot((Mat2f *)&v82, v74);
      v73[4] = (int32x2_t)vadd_f32(vmul_f32((float32x2_t)vrev64_s32(v73[4]), *(float32x2_t *)&v82.i32[1]), vmul_f32((float32x2_t)v73[4], (float32x2_t)__PAIR64__(v82.u32[3], v82.u32[0])));
      return;
    default:
LABEL_15:
      switch(v7)
      {
        case 3:
          v33 = *((_QWORD *)this + 5);
          if (*((_DWORD *)this + 8))
          {
            v34 = *(float *)(v33 + 28);
            v35 = a4->f32[0] + *(float *)(v33 + 24);
          }
          else
          {
            v34 = *(float *)(v33 + 28);
            v35 = *(float *)(v33 + 24) + a4->f32[0];
            if (sqrtf((float)(v35 * v35) + (float)((float)(v34 + a4->f32[1]) * (float)(v34 + a4->f32[1]))) > 1.0)
              return;
          }
          *(float *)(v33 + 24) = v35;
          *(float *)(v33 + 28) = a4->f32[1] + v34;
          return;
        case 4:
          v54 = *((_QWORD *)this + 5);
          if (*((_DWORD *)this + 8))
          {
            v55 = *(float *)(v54 + 36);
            v56 = a4->f32[0] + *(float *)(v54 + 32);
          }
          else
          {
            v55 = *(float *)(v54 + 36);
            v56 = *(float *)(v54 + 32) + a4->f32[0];
            if (sqrtf((float)(v56 * v56) + (float)((float)(v55 + a4->f32[1]) * (float)(v55 + a4->f32[1]))) > 1.0)
              return;
          }
          *(float *)(v54 + 32) = v56;
          *(float *)(v54 + 36) = a4->f32[1] + v55;
          break;
        case 6:
          OMPie::moveAroundArc(this, (float32x2_t *)a3, *((Vec2f **)this + 5));
          if (!OMPie::isQuadActive(this))
            goto LABEL_38;
          v57 = (float *)*((_QWORD *)this + 5);
          v58 = (Vec2f *)(v57 + 6);
          if (v57[6] != v57[2])
            goto LABEL_37;
          v59 = v57[7];
          goto LABEL_36;
        case 7:
          OMPie::moveAroundArc(this, (float32x2_t *)a3, (Vec2f *)(*((_QWORD *)this + 5) + 16));
          if (!OMPie::isQuadActive(this))
            goto LABEL_38;
          v57 = (float *)*((_QWORD *)this + 5);
          v58 = (Vec2f *)(v57 + 8);
          if (v57[8] != v57[2])
            goto LABEL_37;
          v59 = v57[9];
LABEL_36:
          if (v59 != v57[3])
LABEL_37:
            OMPie::moveAroundArc(this, (float32x2_t *)a3, v58);
LABEL_38:
          if (!OMPie::isQuadActive(this))
            OMPie::testIfShouldBeAQuad(this, v60, v61);
          return;
        case 9:
          v62 = (float32x2_t *)*((_QWORD *)this + 5);
          v63 = v62[1];
          v64 = vsub_f32(v63, (float32x2_t)*a3);
          v65 = (int32x2_t)vmul_f32(v64, v64);
          *(float *)v65.i32 = sqrtf(vaddv_f32((float32x2_t)v65));
          v66 = (int32x2_t)vmul_f32(*a4, vdiv_f32(v64, (float32x2_t)vdup_lane_s32(v65, 0)));
          v66.i32[0] = vadd_f32((float32x2_t)v66, (float32x2_t)vdup_lane_s32(v66, 1)).u32[0];
          v67 = vsub_f32(v63, *v62);
          v68 = (int32x2_t)vmul_f32(v67, v67);
          *(float *)v68.i32 = sqrtf(vaddv_f32((float32x2_t)v68));
          *v62 = vadd_f32(*v62, vmul_n_f32(vdiv_f32(v67, (float32x2_t)vdup_lane_s32(v68, 0)), *(float *)v66.i32));
          v69 = v62[2];
          v70 = vsub_f32(v63, v69);
          v71 = (int32x2_t)vmul_f32(v70, v70);
          *(float *)v71.i32 = sqrtf(vaddv_f32((float32x2_t)v71));
          v62[2] = vadd_f32(v69, vmul_n_f32(vdiv_f32(v70, (float32x2_t)vdup_lane_s32(v71, 0)), *(float *)v66.i32));
          goto LABEL_41;
        case 10:
          goto LABEL_41;
        case 11:
          goto LABEL_18;
        case 12:
          OMPie::moveAll(this, (const Vec2f *)a4);
          return;
        default:
          return;
      }
      return;
  }
}

BOOL OMPie::testIfShouldBeAQuad(OMPie *this, uint64_t a2, const Vec2f *a3)
{
  float32x2_t *v4;
  uint64_t v5;
  const Vec2f *v6;
  float32x4_t v7;
  _BOOL8 result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;

  v4 = (float32x2_t *)*((_QWORD *)this + 5);
  OMPie::computeArcIn(this, a2, a3);
  OMPie::computeArcOut(this, v5, v6);
  OMPie::getArcOut((float32x2_t **)this, 0.5, &v23);
  *(float32x2_t *)v7.f32 = vsub_f32(v4[2], *v4);
  v7.i64[1] = v7.i64[0];
  v22 = vmulq_f32(v7, (float32x4_t)xmmword_1B3557BC0);
  *(float32x2_t *)v7.f32 = v4[1];
  *(float32x2_t *)&v7.u32[2] = v23;
  v21 = v7;
  result = OMUtil::findIntersectionOfLineSegment(v22.f32, v21.f32);
  if (!result)
  {
    v9 = sqrtf((float)(v4[1].f32[0] * v4[1].f32[0]) + (float)(v4[1].f32[1] * v4[1].f32[1]));
    v4[1] = 0;
    v10 = v4->f32[1];
    v11 = sqrtf((float)(v4->f32[0] * v4->f32[0]) + (float)(v10 * v10));
    v12 = v9 * (float)(v4->f32[0] / v11);
    v13 = v9 * (float)(v10 / v11);
    v14 = v4[2].f32[0];
    v15 = v4[2].f32[1];
    v20 = sqrtf((float)(v12 * v12) + (float)(v13 * v13)) < v11;
    v16 = sqrtf((float)(v14 * v14) + (float)(v15 * v15));
    v17 = v9 * (float)(v15 / v16);
    v18 = v9 * (float)(v14 / v16);
    v19 = sqrtf((float)(v18 * v18) + (float)(v17 * v17));
    v20 = v20 && v19 < v16;
    if (!v20)
    {
      v12 = v4->f32[0];
      v13 = v4->f32[1];
      v18 = v4[2].f32[0];
      v17 = v4[2].f32[1];
    }
    v4[3].f32[0] = v12;
    v4[3].f32[1] = v13;
    v4[4].f32[0] = v18;
    v4[4].f32[1] = v17;
  }
  return result;
}

void OMPie::computeArcIn(OMPie *this, uint64_t a2, const Vec2f *a3)
{
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  const Vec2f *v18;
  float v19;
  float v20;
  Vec2f v21;
  unint64_t v22;

  v4 = (float *)*((_QWORD *)this + 5);
  v6 = v4[6];
  v5 = v4[7];
  v8 = v4[8];
  v7 = v4[9];
  if (*((_DWORD *)this + 8) == 1)
  {
    v10 = v4[2];
    v9 = v4[3];
    v11 = v6 - v10;
    v12 = v5 - v9;
    v13 = sqrtf((float)(v12 * v12) + (float)(v11 * v11));
    v8 = v8 - v10;
    v7 = v7 - v9;
    v14 = sqrtf((float)(v7 * v7) + (float)(v8 * v8));
    *((float *)this + 4) = v13;
    *((float *)this + 5) = v14;
    v22 = 1065353216;
    v15 = v11 / v13;
    v16 = v12 / v13;
  }
  else
  {
    v17 = sqrtf((float)(v6 * v6) + (float)(v5 * v5));
    v14 = sqrtf((float)(v8 * v8) + (float)(v7 * v7));
    *((float *)this + 4) = v17;
    *((float *)this + 5) = v14;
    v22 = 1065353216;
    v15 = v6 / v17;
    v16 = v5 / v17;
  }
  v21.var0[0] = v15;
  v21.var0[1] = v16;
  v19 = OMUtil::angle((OMUtil *)&v22, &v21, a3);
  if ((float)((float)(*(float *)&v22 * v21.var0[1]) - (float)(*((float *)&v22 + 1) * v21.var0[0])) < 0.0)
    v19 = 6.2832 - v19;
  *((float *)this + 6) = v19;
  v22 = __PAIR64__(LODWORD(v16), LODWORD(v15));
  v21.var0[0] = v8 / v14;
  v21.var0[1] = v7 / v14;
  v20 = OMUtil::angle((OMUtil *)&v22, &v21, v18);
  if ((float)((float)(*(float *)&v22 * v21.var0[1]) - (float)(*((float *)&v22 + 1) * v21.var0[0])) < 0.0)
    v20 = 6.2832 - v20;
  *((float *)this + 7) = v20;
}

void OMPie::computeArcOut(OMPie *this, uint64_t a2, const Vec2f *a3)
{
  float *v4;
  float v5;
  float v6;
  const Vec2f *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  Vec2f v15;
  uint64_t v16;

  v4 = (float *)*((_QWORD *)this + 5);
  *(float *)this = sqrtf((float)(*v4 * *v4) + (float)(v4[1] * v4[1]));
  *((float *)this + 1) = sqrtf((float)(v4[4] * v4[4]) + (float)(v4[5] * v4[5]));
  v16 = 1065353216;
  v5 = v4[1];
  v6 = sqrtf((float)(*v4 * *v4) + (float)(v5 * v5));
  v15.var0[0] = *v4 / v6;
  v15.var0[1] = v5 / v6;
  v8 = OMUtil::angle((OMUtil *)&v16, &v15, a3);
  if ((float)((float)(*(float *)&v16 * v15.var0[1]) - (float)(*((float *)&v16 + 1) * v15.var0[0])) < 0.0)
    v8 = 6.2832 - v8;
  *((float *)this + 2) = v8;
  v9 = v4[1];
  v10 = sqrtf((float)(*v4 * *v4) + (float)(v9 * v9));
  *(float *)&v16 = *v4 / v10;
  *((float *)&v16 + 1) = v9 / v10;
  v11 = v4[4];
  v12 = v4[5];
  v13 = sqrtf((float)(v11 * v11) + (float)(v12 * v12));
  v15.var0[0] = v11 / v13;
  v15.var0[1] = v12 / v13;
  v14 = OMUtil::angle((OMUtil *)&v16, &v15, v7);
  if ((float)((float)(*(float *)&v16 * v15.var0[1]) - (float)(*((float *)&v16 + 1) * v15.var0[0])) < 0.0)
    v14 = 6.2832 - v14;
  *((float *)this + 3) = v14;
}

void OMPie::computeOppositeArc(OMPie *this, uint64_t a2, const Vec2f *a3)
{
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  const Vec2f *v13;
  float v14;
  const Vec2f *v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  const Vec2f *v26;
  float v27;
  float v28;
  Vec2f v29;
  unint64_t v30;

  v4 = (float *)*((_QWORD *)this + 5);
  v5 = *v4;
  v6 = v4[1];
  v7 = v4[4];
  v8 = v4[5];
  v9 = sqrtf((float)(v7 * v7) + (float)(v8 * v8));
  v10 = sqrtf((float)(v5 * v5) + (float)(v6 * v6));
  *(float *)this = v9;
  *((float *)this + 1) = v10;
  v30 = 1065353216;
  v11 = v7 / v9;
  v12 = v8 / v9;
  v29.var0[0] = v7 / v9;
  v29.var0[1] = v8 / v9;
  v14 = OMUtil::angle((OMUtil *)&v30, &v29, a3);
  if ((float)((float)(*(float *)&v30 * v29.var0[1]) - (float)(*((float *)&v30 + 1) * v29.var0[0])) < 0.0)
    v14 = 6.2832 - v14;
  *((float *)this + 2) = v14;
  v30 = __PAIR64__(LODWORD(v12), LODWORD(v11));
  v29.var0[0] = v5 / v10;
  v29.var0[1] = v6 / v10;
  v16 = OMUtil::angle((OMUtil *)&v30, &v29, v13);
  if ((float)((float)(*(float *)&v30 * v29.var0[1]) - (float)(*((float *)&v30 + 1) * v29.var0[0])) < 0.0)
    v16 = 6.2832 - v16;
  *((float *)this + 3) = v16;
  v17 = (float *)*((_QWORD *)this + 5);
  v18 = v17[6];
  v19 = v17[7];
  v20 = v17[8];
  v21 = v17[9];
  v22 = sqrtf((float)(v18 * v18) + (float)(v19 * v19));
  v23 = sqrtf((float)(v20 * v20) + (float)(v21 * v21));
  *((float *)this + 4) = v22;
  *((float *)this + 5) = v23;
  v30 = 1065353216;
  v24 = v18 / v22;
  v25 = v19 / v22;
  v29.var0[0] = v18 / v22;
  v29.var0[1] = v19 / v22;
  v27 = OMUtil::angle((OMUtil *)&v30, &v29, v15);
  if ((float)((float)(*(float *)&v30 * v29.var0[1]) - (float)(*((float *)&v30 + 1) * v29.var0[0])) < 0.0)
    v27 = 6.2832 - v27;
  *((float *)this + 6) = v27;
  v30 = __PAIR64__(LODWORD(v25), LODWORD(v24));
  v29.var0[0] = v20 / v23;
  v29.var0[1] = v21 / v23;
  v28 = OMUtil::angle((OMUtil *)&v30, &v29, v26);
  if ((float)((float)(*(float *)&v30 * v29.var0[1]) - (float)(*((float *)&v30 + 1) * v29.var0[0])) < 0.0)
    v28 = 6.2832 - v28;
  *((float *)this + 7) = v28;
}

BOOL OMPie::setBasedOnOffsetFromOtherPie(OMPie *this, OMPie *a2, float a3, float a4, const Vec2f *a5)
{
  char v5;
  Vec2f *v9;
  float v10;
  uint64_t v11;
  const Vec2f *v12;
  float v13;
  uint64_t v14;
  const Vec2f *v15;
  float v16;
  float v17;
  float v18;
  __int128 v20;
  _BOOL4 IntersectionOfLineSegment;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  const Vec2f *v26;
  BOOL v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  const Vec2f *v34;
  float32x2_t v35;
  int32x2_t v36;
  float32x2_t v37;
  int32x2_t v38;
  float32x2_t v39;
  float v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t *v43;
  uint64_t v44;
  const Vec2f *v45;
  uint64_t v46;
  const Vec2f *v47;
  const Vec2f *v48;
  float v49;
  float v50;
  const Vec2f *v51;
  const Vec2f *v52;
  float v53;
  float v54;
  __int32 v55;
  Vec2f *v56;
  uint64_t v57;
  const Vec2f *v58;
  uint64_t v59;
  const Vec2f *v60;
  uint64_t v61;
  _BOOL8 result;
  float *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  float *v80;
  float v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int32 v86;
  float v87;
  float32x2_t v88;
  uint64_t v89;
  void *__p;
  void *v91;
  __int128 v92;
  float32x2_t v93;
  Vec2f v94;
  float32x2_t v95;

  v5 = (char)a5;
  v9 = (Vec2f *)*((_QWORD *)a2 + 5);
  if (a3 <= 0.45)
    v10 = a3;
  else
    v10 = (float)((float)(a3 + -0.45) * 0.333) + 0.45;
  v13 = OMUtil::angle(*((OMUtil **)a2 + 5), v9 + 2, a5);
  if ((float)((float)(v9->var0[0] * v9[2].var0[1]) - (float)(v9->var0[1] * v9[2].var0[0])) < 0.0)
    v13 = 6.2832 - v13;
  if (v13 <= 3.14159265)
  {
    OMPie::computeArcIn(a2, v11, v12);
    OMPie::computeArcOut(a2, v25, v26);
    OMPie::getArcOut((float32x2_t **)a2, 0.5, &v88);
    v16 = v9[1].var0[0];
    v17 = v9[1].var0[1];
    v27 = v16 == v88.f32[0] && v17 == v88.f32[1];
    v28 = sqrtf((float)(v16 * v16) + (float)(v17 * v17));
    v29 = v16 - (float)(v10 * (float)(v16 / v28));
    v30 = v17 - (float)(v10 * (float)(v17 / v28));
    v31 = sqrtf((float)((float)(v16 - v88.f32[0]) * (float)(v16 - v88.f32[0]))+ (float)((float)(v17 - v88.f32[1]) * (float)(v17 - v88.f32[1])));
    if (v27)
      v23 = v29;
    else
      v23 = v16 + (float)(v10 * (float)((float)(v16 - v88.f32[0]) / v31));
    if (v27)
      v24 = v30;
    else
      v24 = v17 + (float)(v10 * (float)((float)(v17 - v88.f32[1]) / v31));
  }
  else
  {
    OMPie::computeOppositeArc(a2, v11, v12);
    OMPie::getArcOut((float32x2_t **)a2, 0.5, &v93);
    v16 = v9[1].var0[0];
    v17 = v9[1].var0[1];
    v18 = v93.f32[0];
    if (v16 == v93.f32[0] && v17 == v93.f32[1])
      goto LABEL_12;
    v88.i32[0] = LODWORD(v9[1].var0[0]);
    v88.f32[1] = v17;
    v89 = 0;
    *(Vec2f *)&v20 = *v9;
    *((Vec2f *)&v20 + 1) = v9[2];
    v92 = v20;
    IntersectionOfLineSegment = OMUtil::findIntersectionOfLineSegment((float *)&v88, (float *)&v92);
    v16 = v9[1].var0[0];
    v17 = v9[1].var0[1];
    if (IntersectionOfLineSegment)
    {
LABEL_12:
      v22 = sqrtf((float)(v16 * v16) + (float)(v17 * v17));
      v23 = v16 + (float)(v10 * (float)(v16 / v22));
      v24 = v17 + (float)(v10 * (float)(v17 / v22));
    }
    else
    {
      v32 = sqrtf((float)((float)(v16 - v18) * (float)(v16 - v18))+ (float)((float)(v17 - v93.f32[1]) * (float)(v17 - v93.f32[1])));
      v23 = v16 - (float)(v10 * (float)((float)(v16 - v18) / v32));
      v24 = v17 - (float)(v10 * (float)((float)(v17 - v93.f32[1]) / v32));
    }
  }
  v87 = sqrtf((float)((float)(v16 - v23) * (float)(v16 - v23)) + (float)((float)(v17 - v24) * (float)(v17 - v24)));
  OMPie::computeArcIn(a2, v14, v15);
  OMPie::computeArcOut(a2, v33, v34);
  v35 = (float32x2_t)*v9;
  *(float *)v36.i32 = sqrtf(vaddv_f32(vmul_f32(v35, v35)));
  v37 = (float32x2_t)v9[2];
  v38 = (int32x2_t)vmul_f32(v37, v37);
  *(float *)v38.i32 = sqrtf(vaddv_f32((float32x2_t)v38));
  v39 = vdiv_f32(v37, (float32x2_t)vdup_lane_s32(v38, 0));
  if ((v5 & 1) != 0)
  {
    v40 = fmaxf(*(float *)v36.i32, 1.575);
    v41 = vmul_n_f32(vdiv_f32(v35, (float32x2_t)vdup_lane_s32(v36, 0)), v40);
    v42 = vmul_n_f32(v39, v40);
  }
  else
  {
    v41 = vadd_f32(v35, vmul_n_f32(vdiv_f32(v35, (float32x2_t)vdup_lane_s32(v36, 0)), v87));
    v42 = vadd_f32(v37, vmul_n_f32(v39, v87));
  }
  OMPie::OMPie((OMPie *)&v88, 0);
  v43 = (float32x2_t *)__p;
  *(float32x2_t *)__p = v41;
  v43[2] = v42;
  v43[1] = 0;
  OMPie::computeArcIn((OMPie *)&v88, v44, v45);
  OMPie::computeArcOut((OMPie *)&v88, v46, v47);
  v49 = OMUtil::angle((OMUtil *)v9, v9 + 2, v48);
  if ((float)((float)(v9->var0[0] * v9[2].var0[1]) - (float)(v9->var0[1] * v9[2].var0[0])) < 0.0)
    v49 = 6.2832 - v49;
  v50 = (float)((float)(v87 * a4) + (float)(v87 * a4)) * 3.14159265 * 0.200000003 / v49;
  OMPie::getArcOut((float32x2_t **)&v88, 0.0 - v50, (float32x2_t *)&v92);
  v86 = v92;
  v95 = (float32x2_t)v92;
  OMPie::getArcOut((float32x2_t **)&v88, v50 + 1.0, (float32x2_t *)&v92);
  v94 = (Vec2f)v92;
  if (__p)
  {
    v91 = __p;
    operator delete(__p);
  }
  v53 = OMUtil::angle((OMUtil *)v9, v9 + 2, v51);
  if ((float)((float)(v9->var0[0] * v9[2].var0[1]) - (float)(v9->var0[1] * v9[2].var0[0])) < 0.0)
    v53 = 6.2832 - v53;
  if (v53 <= 3.14159265)
  {
LABEL_38:
    v55 = v86;
    goto LABEL_39;
  }
  v54 = OMUtil::angle((OMUtil *)&v95, &v94, v52);
  v55 = v95.i32[0];
  if ((float)((float)(v95.f32[0] * v94.var0[1]) - (float)(v95.f32[1] * v94.var0[0])) < 0.0)
    v54 = 6.2832 - v54;
  if (v54 < 3.14159265)
  {
    OMPie::OMPie((OMPie *)&v88, 0);
    v56 = (Vec2f *)__p;
    *(float32x2_t *)__p = v95;
    v56[2] = v94;
    v56[1] = 0;
    OMPie::computeArcIn((OMPie *)&v88, v57, v58);
    OMPie::computeArcOut((OMPie *)&v88, v59, v60);
    OMPie::getArcOut((float32x2_t **)&v88, 0.501, (float32x2_t *)&v92);
    v86 = v92;
    v95 = (float32x2_t)v92;
    OMPie::getArcOut((float32x2_t **)&v88, 0.499, (float32x2_t *)&v92);
    v94 = (Vec2f)v92;
    if (__p)
    {
      v91 = __p;
      operator delete(__p);
      v55 = v95.i32[0];
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_39:
  v61 = *((_QWORD *)this + 5);
  *(_DWORD *)v61 = v55;
  *(_DWORD *)(v61 + 4) = v95.i32[1];
  *(float *)(v61 + 8) = v23;
  *(Vec2f *)(v61 + 16) = v94;
  *(float *)(v61 + 24) = v23;
  *(float *)(v61 + 28) = v24;
  *(float *)(v61 + 32) = v23;
  *(float *)(v61 + 36) = v24;
  *(float *)(v61 + 12) = v24;
  result = OMPie::isQuadActive(a2);
  if (result)
  {
    if ((v5 & 1) == 0)
    {
      v63 = (float *)*((_QWORD *)a2 + 5);
      v64 = v63[8] - v9[2].var0[0];
      v65 = v63[9] - v9[2].var0[1];
      v66 = (float)(v87 + v87) + sqrtf((float)(v64 * v64) + (float)(v65 * v65));
      v67 = sqrtf((float)((float)(0.0 - v94.var0[0]) * (float)(0.0 - v94.var0[0]))+ (float)((float)(0.0 - v94.var0[1]) * (float)(0.0 - v94.var0[1])));
      v68 = v94.var0[0] + (float)(v66 * (float)((float)(0.0 - v94.var0[0]) / v67));
      v69 = v63[7] - v9->var0[1];
      v70 = (float)(v87 + v87)
          + sqrtf((float)((float)(v63[6] - v9->var0[0]) * (float)(v63[6] - v9->var0[0])) + (float)(v69 * v69));
      v71 = sqrtf((float)((float)(0.0 - v95.f32[0]) * (float)(0.0 - v95.f32[0]))+ (float)((float)(0.0 - v95.f32[1]) * (float)(0.0 - v95.f32[1])));
      v72 = v95.f32[0] + (float)(v70 * (float)((float)(0.0 - v95.f32[0]) / v71));
      v73 = v95.f32[1] + (float)(v70 * (float)((float)(0.0 - v95.f32[1]) / v71));
      v88 = v95;
      *(float *)&v89 = v72;
      *((float *)&v89 + 1) = v73;
      *(Vec2f *)&v92 = v94;
      v74 = v94.var0[1] + (float)(v66 * (float)((float)(0.0 - v94.var0[1]) / v67));
      *((float *)&v92 + 2) = v68;
      *((float *)&v92 + 3) = v74;
      if (OMUtil::findIntersectionOfLineSegmentExclusive((float *)&v88, (float *)&v92))
      {
        v75 = sqrtf((float)(v68 * v68) + (float)(v74 * v74)) / v87;
        v76 = v23 * v75;
        v77 = v24 * v75;
        v78 = 1.0 - v75;
        v79 = *((_QWORD *)this + 5);
        *(float *)(v79 + 8) = v76 + (float)(v78 * (float)((float)(v68 + v72) * 0.5));
        *(float *)(v79 + 12) = v77 + (float)(v78 * (float)((float)(v74 + v73) * 0.5));
      }
      else
      {
        v83 = *((_QWORD *)this + 5);
        *(_QWORD *)(v83 + 8) = 0;
        *(float *)(v83 + 32) = v68;
        *(float *)(v83 + 36) = v74;
        *(float *)(v83 + 24) = v72;
        *(float *)(v83 + 28) = v73;
      }
    }
    result = OMPie::isQuadActive(this);
    if (!result)
    {
      v84 = *((_QWORD *)this + 5);
      *(float32x2_t *)&v85 = vmul_f32(*(float32x2_t *)(v84 + 8), (float32x2_t)vdup_n_s32(0x3CA3D70Au));
      *(_QWORD *)(v84 + 8) = v85;
      *((_QWORD *)&v85 + 1) = v85;
      *(_OWORD *)(v84 + 24) = v85;
    }
  }
  else
  {
    v80 = (float *)*((_QWORD *)this + 5);
    v81 = v9[1].var0[0];
    v80[6] = v81;
    v82 = v9[1].var0[1];
    v80[7] = v82;
    v80[8] = v81;
    v80[9] = v82;
    v80[2] = v81;
    v80[3] = v82;
  }
  return result;
}

void sub_1B2CBEC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OMPie::offsetSegment_180more(OMPie *this, float32x2_t *a2, const Vec2f *a3, Vec2f *a4, Vec2f *a5, Vec2f *a6, Vec2f *a7, float32x2_t **a8)
{
  __int128 v14;
  _BOOL4 isQuadActive;
  __int32 v16;
  __int32 v17;
  float v18;
  __int128 v19;
  uint64_t result;
  float32x2_t v21;
  float32x2_t v22;
  __int128 v23;
  float v24[6];
  Vec2f v25;

  *(Vec2f *)&v14 = *a7;
  *((Vec2f *)&v14 + 1) = *a6;
  *(_OWORD *)v24 = v14;
  *(float32x2_t *)&v14 = *a2;
  *((Vec2f *)&v14 + 1) = *a3;
  v23 = v14;
  if (OMUtil::findIntersectionOfLineSegment(v24, (float *)&v23, (float *)&v25))
    *a6 = v25;
  isQuadActive = OMPie::isQuadActive(this);
  OMPie::getArcOut(a8, 0.0, &v22);
  v17 = v22.i32[1];
  v16 = v22.i32[0];
  v18 = 0.04;
  while (1)
  {
    OMPie::getArcOut(a8, v18, &v21);
    *(Vec2f *)&v19 = *a6;
    *((Vec2f *)&v19 + 1) = *a4;
    *(_OWORD *)v24 = v19;
    *(_QWORD *)&v23 = __PAIR64__(v17, v16);
    v17 = v21.i32[1];
    v16 = v21.i32[0];
    *((float32x2_t *)&v23 + 1) = v21;
    result = OMUtil::findIntersectionOfLineSegment(v24, (float *)&v23);
    if ((_DWORD)result)
      break;
    v18 = v18 + 0.04;
    if (v18 > 1.0001)
      return result;
  }
  result = OMPie::moveAroundArc(this, a2, a4);
  if (isQuadActive)
    return OMPie::moveAroundArc(this, a2, a5);
  return result;
}

uint64_t OMPie::offsetSegmentIfNeeded(OMPie *this, OMPie *a2, float a3)
{
  float32x2_t *v5;
  __int128 v6;
  uint64_t v7;
  const Vec2f *v8;
  uint64_t v9;
  const Vec2f *v10;
  char *v11;
  uint64_t v12;
  const Vec2f *v13;
  uint64_t v14;
  const Vec2f *v15;
  const Vec2f *v16;
  unint64_t v17;
  float v18;
  float v19;
  float32x2_t v20;
  int32x2_t v21;
  float32x2_t v22;
  int32x2_t v23;
  float v24;
  float32x2_t *v25;
  uint64_t v26;
  const Vec2f *v27;
  uint64_t v28;
  const Vec2f *v29;
  const Vec2f *v30;
  float32x2_t *v31;
  float32x2_t *v32;
  float v33;
  float v34;
  float32x2_t v35;
  int32x2_t v36;
  float32x2_t v37;
  int32x2_t v38;
  float32x2_t v39;
  float v40;
  unint64_t v41;
  Vec2f v42;
  BOOL isQuadActive;
  const Vec2f *v44;
  float v45;
  char v46;
  const Vec2f *v47;
  uint64_t v48;
  const Vec2f *v49;
  uint64_t v50;
  const Vec2f *v51;
  uint64_t v52;
  const Vec2f *v53;
  uint64_t v54;
  const Vec2f *v55;
  __int32 v56;
  __int32 v57;
  float v58;
  float32x2_t v59;
  float32x2_t v60;
  int32x2_t v61;
  float32x2_t v62;
  _BOOL4 v68;
  _BOOL4 v69;
  uint64_t v70;
  const Vec2f *v71;
  uint64_t v72;
  const Vec2f *v73;
  uint64_t v74;
  const Vec2f *v75;
  uint64_t v76;
  const Vec2f *v77;
  int v78;
  int v79;
  int v80;
  int i;
  BOOL v82;
  unsigned int v83;
  int j;
  char v85;
  float32x2_t v87;
  float32x2_t v88;
  unint64_t v89;
  float32x2_t v90;
  unint64_t v91;
  float32x2_t v92;
  Vec2f v93[2];
  __n128 v94;
  _OWORD v95[2];
  int v96;
  void *__p;
  void *v98;
  uint64_t v99;

  v5 = (float32x2_t *)*((_QWORD *)this + 5);
  v6 = *((_OWORD *)a2 + 1);
  v95[0] = *(_OWORD *)a2;
  v95[1] = v6;
  v96 = *((_DWORD *)a2 + 8);
  v98 = 0;
  v99 = 0;
  __p = 0;
  std::vector<Vec2f>::__init_with_size[abi:ne180100]<Vec2f*,Vec2f*>((char *)&__p, *((_DWORD **)a2 + 5), *((_DWORD **)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3);
  OMPie::setBasedOnOffsetFromOtherPie((OMPie *)v95, a2, 0.02, 1.0, 0);
  OMPie::computeArcIn((OMPie *)v95, v7, v8);
  OMPie::computeArcOut((OMPie *)v95, v9, v10);
  v11 = (char *)__p;
  OMPie::computeArcIn(this, v12, v13);
  OMPie::computeArcOut(this, v14, v15);
  OMPie::getArcOut((float32x2_t **)this, 0.5, (float32x2_t *)&v94);
  v17 = v94.n128_u64[0];
  v18 = sqrtf((float)(*(float *)v11 * *(float *)v11) + (float)(*((float *)v11 + 1) * *((float *)v11 + 1)));
  v19 = sqrtf((float)(*((float *)v11 + 4) * *((float *)v11 + 4)) + (float)(*((float *)v11 + 5) * *((float *)v11 + 5)));
  if (v18 <= v19)
    v18 = v19;
  v20 = *v5;
  v21 = (int32x2_t)vmul_f32(v20, v20);
  *(float *)v21.i32 = sqrtf(vaddv_f32((float32x2_t)v21));
  if (*(float *)v21.i32 < v18)
    *v5 = vmul_n_f32(vdiv_f32(v20, (float32x2_t)vdup_lane_s32(v21, 0)), v18);
  v22 = v5[2];
  v23 = (int32x2_t)vmul_f32(v22, v22);
  *(float *)v23.i32 = sqrtf(vaddv_f32((float32x2_t)v23));
  if (*(float *)v23.i32 < v18)
    v5[2] = vmul_n_f32(vdiv_f32(v22, (float32x2_t)vdup_lane_s32(v23, 0)), v18);
  v24 = OMUtil::angle((OMUtil *)v5, (const Vec2f *)&v5[2], v16);
  v25 = v5 + 1;
  if ((float)((float)(v5->f32[0] * v5[2].f32[1]) - (float)(v5->f32[1] * v5[2].f32[0])) < 0.0)
    v24 = 6.2832 - v24;
  if (v24 > 3.14159265 && !OMPie::isQuadActive(this))
  {
    OMPie::computeArcIn(this, v26, v27);
    OMPie::computeArcOut(this, v28, v29);
    OMPie::getArcOut((float32x2_t **)this, 0.5, (float32x2_t *)v93);
    *v25 = vmul_n_f32(*v25, sqrtf((float)(v93[0].var0[0] * v93[0].var0[0]) + (float)(v93[0].var0[1] * v93[0].var0[1]))/ sqrtf((float)(*(float *)&v17 * *(float *)&v17) + (float)(*((float *)&v17 + 1) * *((float *)&v17 + 1))));
  }
  v31 = v5 + 3;
  v32 = v5 + 4;
  if (OMPie::isQuadActive(a2) && OMPie::isQuadActive(this))
  {
    v33 = sqrtf((float)(*((float *)v11 + 6) * *((float *)v11 + 6)) + (float)(*((float *)v11 + 7) * *((float *)v11 + 7)));
    v34 = sqrtf((float)(*((float *)v11 + 8) * *((float *)v11 + 8)) + (float)(*((float *)v11 + 9) * *((float *)v11 + 9)));
    if (v33 >= v34)
      v33 = v34;
    v35 = *v31;
    v36 = (int32x2_t)vmul_f32(v35, v35);
    *(float *)v36.i32 = sqrtf(vaddv_f32((float32x2_t)v36));
    if (*(float *)v36.i32 > v33)
      *v31 = vmul_n_f32(vdiv_f32(v35, (float32x2_t)vdup_lane_s32(v36, 0)), v33);
    v37 = *v32;
    v38 = (int32x2_t)vmul_f32(v37, v37);
    *(float *)v38.i32 = sqrtf(vaddv_f32((float32x2_t)v38));
    if (*(float *)v38.i32 > v33)
      *v32 = vmul_n_f32(vdiv_f32(v37, (float32x2_t)vdup_lane_s32(v38, 0)), v33);
  }
  v39 = v5[1];
  v94.n128_u64[0] = (unint64_t)vsub_f32(*v5, v39);
  v93[0] = (Vec2f)vsub_f32(v5[2], v39);
  v40 = OMUtil::angle((OMUtil *)&v94, v93, v30);
  v41 = v94.n128_u64[0];
  v42 = v93[0];
  isQuadActive = OMPie::isQuadActive(this);
  if ((float)((float)(*(float *)&v41 * v42.var0[1]) - (float)(*((float *)&v41 + 1) * v42.var0[0])) >= 0.0)
    v45 = v40;
  else
    v45 = 6.2832 - v40;
  v46 = v45 <= 3.14159265 || isQuadActive;
  if ((v46 & 1) != 0)
  {
    OMPie::adjustSegment(this, (Vec2f *)v5, (Vec2f *)&v5[3], v5 + 2, (float32x2_t *)v11, (float32x2_t *)v11 + 3, (const Vec2f *)v11 + 2, v44, 1, (OMPie *)v95);
    OMPie::adjustSegment(this, (Vec2f *)&v5[2], (Vec2f *)&v5[4], v5, (float32x2_t *)v11 + 2, (float32x2_t *)v11 + 4, (const Vec2f *)v11, v47, 0, (OMPie *)v95);
  }
  else
  {
    OMPie::offsetSegment_180more(this, (float32x2_t *)v11, (const Vec2f *)v11 + 1, (Vec2f *)v5, (Vec2f *)&v5[3], (Vec2f *)&v5[1], (Vec2f *)&v5[2], (float32x2_t **)v95);
    OMPie::offsetSegment_180more(this, (float32x2_t *)v11 + 2, (const Vec2f *)v11 + 1, (Vec2f *)&v5[2], (Vec2f *)&v5[4], (Vec2f *)&v5[1], (Vec2f *)v5, (float32x2_t **)v95);
  }
  OMPie::setBasedOnOffsetFromOtherPie((OMPie *)v95, a2, 0.01, 1.0, 0);
  OMPie::computeArcIn((OMPie *)v95, v48, v49);
  OMPie::computeArcOut((OMPie *)v95, v50, v51);
  if (!OMPie::isQuadActive(a2))
  {
    if (!OMPie::isQuadActive(this))
    {
      v94 = *(__n128 *)v25->f32;
      *(_OWORD *)v93[0].var0 = *(_OWORD *)(v11 + 8);
      if (OMUtil::findIntersectionOfLineSegmentExclusive((float *)&v94, (float *)v93)
        || (v91 = (unint64_t)v5[1],
            v92 = *v5,
            v89 = *((_QWORD *)v11 + 1),
            v90 = *(float32x2_t *)v11,
            OMUtil::findIntersectionOfLineSegmentExclusive((float *)&v91, (float *)&v89)))
      {
        v5[1].i32[0] = *((_DWORD *)v11 + 2);
        v5[1].i32[1] = *((_DWORD *)v11 + 3);
      }
      OMPie::computeArcIn(this, v52, v53);
      OMPie::computeArcOut(this, v54, v55);
      OMPie::getArcOut((float32x2_t **)this, 0.0, &v88);
      v94.n128_u64[0] = *((_QWORD *)v11 + 1);
      v94.n128_u64[1] = *(_QWORD *)v11;
      v93[0] = *(Vec2f *)(v11 + 8);
      v93[1] = *(Vec2f *)v11;
      v57 = v88.i32[1];
      v56 = v88.i32[0];
      v58 = 0.04;
      while (1)
      {
        OMPie::getArcOut((float32x2_t **)this, v58, &v87);
        v91 = __PAIR64__(v57, v56);
        v59 = v87;
        v92 = v87;
        if (OMUtil::findIntersectionOfLineSegment((float *)&v94, (float *)&v91))
          goto LABEL_33;
        v89 = __PAIR64__(v57, v56);
        v90 = v59;
        if (OMUtil::findIntersectionOfLineSegment((float *)v93, (float *)&v89))
          goto LABEL_33;
        v58 = v58 + 0.04;
        v57 = v59.i32[1];
        v56 = v59.i32[0];
        if (v58 > 1.0001)
          goto LABEL_41;
      }
    }
    if (OMPie::isQuadActive(this) && !OMPie::isQuadActive(a2))
    {
LABEL_33:
      v5[1].i32[0] = *((_DWORD *)v11 + 2);
      v5[1].i32[1] = *((_DWORD *)v11 + 3);
    }
  }
LABEL_41:
  v60 = *v25;
  v61 = (int32x2_t)vmul_f32(v60, v60);
  *(float *)v61.i32 = sqrtf(vaddv_f32((float32x2_t)v61));
  if (*(float *)v61.i32 > 1.5)
  {
    v62 = vdiv_f32(v60, (float32x2_t)vdup_lane_s32(v61, 0));
    __asm { FMOV            V1.2S, #1.5 }
    *v25 = vmul_f32(v62, _D1);
  }
  v68 = OMPie::isQuadActive(a2);
  v69 = OMPie::isQuadActive(this);
  OMPie::computeArcIn(a2, v70, v71);
  OMPie::computeArcOut(a2, v72, v73);
  OMPie::computeArcIn(this, v74, v75);
  OMPie::computeArcOut(this, v76, v77);
  v78 = 0;
  if (v68)
    v79 = 66;
  else
    v79 = 34;
  if (v69)
    v80 = 66;
  else
    v80 = 34;
  while (2)
  {
    OMPie::getNextEdgeTurnAround(this, v69, v78, (int8x16_t *)&v94);
    for (i = 0; i != v79; ++i)
    {
      OMPie::getNextEdgeTurnAround(a2, v68, i, (int8x16_t *)v93);
      if (OMUtil::findIntersectionOfLineSegmentExclusive((float *)v93, (float *)&v94))
      {
        v85 = 1;
        goto LABEL_60;
      }
    }
    if (++v78 != v80)
      continue;
    break;
  }
  v82 = 0;
  v83 = 0;
  while (2)
  {
    OMPie::getNextEdgeSweep((float32x2_t **)this, v69, v83, &v94);
    for (j = 0; j != v79; ++j)
    {
      OMPie::getNextEdgeTurnAround(a2, v68, j, (int8x16_t *)v93);
      if (OMUtil::findIntersectionOfLineSegmentExclusive((float *)v93, (float *)&v94))
      {
        v85 = v82;
        goto LABEL_60;
      }
    }
    v82 = v83 > 0x1E;
    v85 = 1;
    if (++v83 != 32)
      continue;
    break;
  }
LABEL_60:
  if (__p)
  {
    v98 = __p;
    operator delete(__p);
  }
  return v85 & 1;
}

void sub_1B2CBF490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OMPie::adjustSegment(OMPie *this, Vec2f *a2, Vec2f *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, const Vec2f *a7, const Vec2f *a8, BOOL a9, OMPie *a10)
{
  float32x2_t *v14;
  float32x2_t *v15;
  _BOOL4 isQuadActive;
  __int32 v17;
  __int32 v18;
  float v19;
  __int128 v20;
  __int32 v21;
  __int32 v22;
  __int32 v23;
  float v24;
  __int128 v25;
  float v26;
  float v27;
  const Vec2f *v28;
  float v29;
  float v30;
  float v31;
  __float2 v32;
  uint64_t result;
  __int128 v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  OMPie *v43;
  float32x2_t *v44;
  __int128 v45;
  float32x2_t v46;
  int32x2_t v47;
  float32x2_t v48;
  float32x2_t v54;
  float32x2_t v55;
  int32x2_t v56;
  float32x2_t v57;
  float v58;
  float32x2_t *v62;
  Vec2f v63;
  float32x2_t v64;
  float32x2_t v65[2];
  Vec2f v66[2];
  __int128 v67;
  float32x2_t v68;

  v62 = (float32x2_t *)*((_QWORD *)a10 + 5);
  v14 = (float32x2_t *)*((_QWORD *)this + 5);
  v15 = v14 + 1;
  isQuadActive = OMPie::isQuadActive(this);
  OMPie::getArcOut((float32x2_t **)a10, 0.0, &v68);
  v18 = v68.i32[1];
  v17 = v68.i32[0];
  v19 = 0.04;
  while (1)
  {
    OMPie::getArcOut((float32x2_t **)a10, v19, v65);
    *(float32x2_t *)&v20 = *v15;
    *((Vec2f *)&v20 + 1) = *a2;
    v67 = v20;
    LODWORD(v66[0].var0[0]) = v17;
    LODWORD(v66[0].var0[1]) = v18;
    v21 = v65[0].i32[1];
    v17 = v65[0].i32[0];
    v66[1] = (Vec2f)v65[0];
    if (OMUtil::findIntersectionOfLineSegment((float *)&v67, (float *)v66))
      break;
    v19 = v19 + 0.04;
    v18 = v21;
    if (v19 > 1.0001)
    {
      v68.i32[1] = v21;
      goto LABEL_7;
    }
  }
  v68.i32[1] = v18;
  OMPie::moveAroundArc(this, a5, a2);
  if (isQuadActive)
    OMPie::moveAroundArc(this, a5, a3);
LABEL_7:
  OMPie::getArcOut((float32x2_t **)a10, 0.04, (float32x2_t *)&v67);
  v23 = DWORD1(v67);
  v22 = v67;
  v68.i32[0] = v67;
  v24 = 0.04;
  while (1)
  {
    OMPie::getArcOut((float32x2_t **)a10, v24, v65);
    *(float32x2_t *)&v25 = *v15;
    *((Vec2f *)&v25 + 1) = *a2;
    v67 = v25;
    LODWORD(v66[0].var0[0]) = v22;
    LODWORD(v66[0].var0[1]) = v23;
    v23 = v65[0].i32[1];
    v22 = v65[0].i32[0];
    v66[1] = (Vec2f)v65[0];
    if (OMUtil::findIntersectionOfLineSegment((float *)&v67, (float *)v66))
      break;
    v24 = v24 + 0.04;
    if (v24 >= 1.0)
      goto LABEL_17;
  }
  v26 = v14[1].f32[0];
  v27 = v14[1].f32[1];
  v58 = sqrtf((float)(v26 * v26) + (float)(v27 * v27));
  v29 = asinf(sqrtf((float)(a5->f32[0] * a5->f32[0]) + (float)(a5->f32[1] * a5->f32[1])) / v58);
  if (a9)
    v30 = -v29;
  else
    v30 = v29;
  v66[0].var0[0] = -v26;
  v66[0].var0[1] = -v27;
  v63 = (Vec2f)1065353216;
  v31 = OMUtil::angle((OMUtil *)&v63, v66, v28);
  if ((float)((float)(v63.var0[0] * v66[0].var0[1]) - (float)(v63.var0[1] * v66[0].var0[0])) < 0.0)
    v31 = 6.2832 - v31;
  v32 = __sincosf_stret(v30 + v31);
  v63 = (Vec2f)vadd_f32(v14[1], vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v32.__sinval), LODWORD(v32.__cosval)), v58));
  OMPie::moveAroundArc(this, (float32x2_t *)&v63, a2);
LABEL_17:
  result = OMPie::isQuadActive(this);
  if ((result & 1) == 0)
  {
    if (OMPie::isQuadActive(a10))
    {
      OMPie::getArcIn(a10, 0.0, (float *)v65);
      *(float32x2_t *)&v34 = *v15;
      *((Vec2f *)&v34 + 1) = *a2;
      v67 = v34;
      v36 = v65[0].f32[1];
      v35 = v65[0].f32[0];
      v37 = 0.04;
      do
      {
        OMPie::getArcIn(a10, v37, (float *)&v63);
        v66[0].var0[0] = v35;
        v66[0].var0[1] = v36;
        v35 = v63.var0[0];
        v36 = v63.var0[1];
        v66[1] = v63;
        if (OMUtil::findIntersectionOfLineSegment((float *)&v67, (float *)v66))
        {
          v43 = this;
          v44 = a6;
          return OMPie::moveAroundArc(v43, v44, a2);
        }
        v37 = v37 + 0.04;
      }
      while (v37 <= 1.0001);
      v38 = a5->f32[0] * 0.95;
      v39 = a5->f32[1] * 0.95;
      v40 = sqrtf((float)(v38 * v38) + (float)(v39 * v39));
      v41 = a6->f32[1];
      v42 = sqrtf((float)(a6->f32[0] * a6->f32[0]) + (float)(v41 * v41));
      if (v40 < v42)
        v38 = a6->f32[0];
      LODWORD(v66[0].var0[0]) = a6->i32[0];
      v66[0].var0[1] = v41;
      if (v40 < v42)
        v39 = v41;
      v66[1].var0[0] = v38;
      v66[1].var0[1] = v39;
      result = OMUtil::findIntersectionOfLineSegment((float *)&v67, (float *)v66);
      if ((_DWORD)result)
      {
        v43 = this;
        v44 = a6;
        return OMPie::moveAroundArc(v43, v44, a2);
      }
    }
    else
    {
      *(float32x2_t *)&v45 = *v15;
      *((Vec2f *)&v45 + 1) = *a2;
      v67 = v45;
      *(float32x2_t *)&v45 = v62[1];
      *((Vec2f *)&v45 + 1) = *a7;
      *(_OWORD *)v66[0].var0 = v45;
      result = OMUtil::findIntersectionOfLineSegment((float *)&v67, (float *)v66);
      if ((_DWORD)result)
      {
        v46 = vsub_f32(v62[1], (float32x2_t)*a2);
        v47 = (int32x2_t)vmul_f32(v46, v46);
        *(float *)v47.i32 = sqrtf(vaddv_f32((float32x2_t)v47));
        v48 = vdiv_f32(v46, (float32x2_t)vdup_lane_s32(v47, 0));
        __asm { FMOV            V2.2S, #5.0 }
        v54 = vadd_f32((float32x2_t)*a2, vmul_f32(v48, _D2));
        v65[0] = (float32x2_t)*a2;
        v65[1] = v54;
        v55 = vsub_f32(*v15, *a4);
        v56 = (int32x2_t)vmul_f32(v55, v55);
        *(float *)v56.i32 = sqrtf(vaddv_f32((float32x2_t)v56));
        v57 = vadd_f32(*a4, vmul_f32(vdiv_f32(v55, (float32x2_t)vdup_lane_s32(v56, 0)), _D2));
        v63 = (Vec2f)*a4;
        v64 = v57;
        return OMUtil::findIntersectionOfLineSegment((float *)v65, (float *)&v63, (float *)&v14[1]);
      }
    }
  }
  return result;
}

void OMPie::getNextEdgeTurnAround(OMPie *this@<X0>, int a2@<W1>, int a3@<W2>, int8x16_t *a4@<X8>)
{
  uint64_t v6;
  int8x16_t v7;
  float32x2_t v8;
  float v9;
  int8x16_t v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;

  v6 = *((_QWORD *)this + 5);
  if (a2)
  {
    if (!a3)
    {
      v7.i64[0] = *(_QWORD *)(v6 + 24);
      v8 = *(float32x2_t *)v6;
      goto LABEL_15;
    }
    if (a3 > 32)
    {
      if (a3 == 33)
      {
        v7.i64[0] = *(_QWORD *)(v6 + 16);
        v8 = *(float32x2_t *)(v6 + 32);
LABEL_15:
        v7.u64[1] = (unint64_t)v8;
        goto LABEL_16;
      }
      v11 = (float)(a3 - 33) * 0.03125;
      OMPie::getArcIn(this, (float)(a3 - 34) * 0.03125, (float *)&v13);
      OMPie::getArcIn(this, v11, (float *)&v12);
LABEL_14:
      v8 = v12;
      *(float32x2_t *)v7.i8 = v13;
      goto LABEL_15;
    }
LABEL_8:
    v9 = (float)a3 * 0.03125;
    OMPie::getArcOut((float32x2_t **)this, (float)(a3 - 1) * 0.03125, &v13);
    OMPie::getArcOut((float32x2_t **)this, v9, &v12);
    goto LABEL_14;
  }
  if (a3)
  {
    if (a3 <= 32)
      goto LABEL_8;
    v10 = *(int8x16_t *)(v6 + 8);
  }
  else
  {
    v10 = *(int8x16_t *)v6;
  }
  v7 = vextq_s8(v10, v10, 8uLL);
LABEL_16:
  *a4 = v7;
}

__n128 OMPie::getNextEdgeSweep@<Q0>(float32x2_t **this@<X0>, int a2@<W1>, int a3@<W2>, __n128 *a4@<X8>)
{
  float v6;
  __n128 result;
  unint64_t v8;
  float32x2_t *v9;
  unint64_t v10;
  unint64_t v11;

  if (a2)
  {
    v6 = (float)a3 / 31.0;
    OMPie::getArcOut(this, v6, (float32x2_t *)&v11);
    OMPie::getArcIn((OMPie *)this, v6, (float *)&v10);
    v8 = v10;
    result.n128_u64[0] = v11;
  }
  else
  {
    v9 = this[5];
    OMPie::getArcOut(this, (float)a3 / 31.0, (float32x2_t *)&v11);
    result.n128_u64[0] = v11;
    v8 = (unint64_t)v9[1];
  }
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void OMPie::getArea(OMPie *this)
{
  Vec2f *v2;
  const Vec2f *v3;
  const Vec2f *v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  Vec2f v12;
  _DWORD v13[2];

  v2 = (Vec2f *)*((_QWORD *)this + 5);
  if (OMPie::isQuadActive(this))
  {
    OMUtil::angle((OMUtil *)v2, v2 + 2, v3);
    OMUtil::angle((OMUtil *)(*((_QWORD *)this + 5) + 24), (const Vec2f *)(*((_QWORD *)this + 5) + 32), v4);
  }
  else
  {
    v5 = *((_QWORD *)this + 5);
    v6 = *(float *)(v5 + 8);
    v7 = *(float *)(v5 + 12);
    v8 = v2->var0[0] - v6;
    v9 = v2->var0[1] - v7;
    v10 = v2[2].var0[0] - v6;
    v11 = v2[2].var0[1] - v7;
    *(float *)v13 = v8;
    *(float *)&v13[1] = v9;
    v12.var0[0] = v10;
    v12.var0[1] = v11;
    OMUtil::angle((OMUtil *)v13, &v12, v3);
  }
}

uint64_t OMSamples::syncAutokey(uint64_t a1, _DWORD **a2, _BYTE *a3)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t result;
  void *__p;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;

  v6 = (void **)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  v7 = **(_QWORD **)(a1 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - v7;
  if (v8)
  {
    v9 = 0;
    v10 = v8 >> 3;
    v11 = 1;
    while (*(_DWORD *)(*(_QWORD *)(v7 + 8 * v9) + 8) != 3)
    {
      v9 = v11;
      if (v10 <= v11++)
        goto LABEL_5;
    }
    *a3 = 1;
    v22 = operator new();
    v69 = 0;
    v70 = 0;
    v68 = 0;
    std::vector<Vec3f>::__init_with_size[abi:ne180100]<Vec3f*,Vec3f*>((char *)&v68, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    OMAutoSamples::OMAutoSamples(v22, (_DWORD **)&v68);
    v23 = (unint64_t)v6[2];
    v24 = (uint64_t *)v6[1];
    if ((unint64_t)v24 >= v23)
    {
      v26 = ((char *)v24 - (_BYTE *)*v6) >> 3;
      if ((unint64_t)(v26 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v27 = v23 - (_QWORD)*v6;
      v28 = v27 >> 2;
      if (v27 >> 2 <= (unint64_t)(v26 + 1))
        v28 = v26 + 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      if (v29)
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v6 + 2), v29);
      else
        v30 = 0;
      v36 = (uint64_t *)&v30[8 * v26];
      v37 = &v30[8 * v29];
      *v36 = v22;
      v25 = v36 + 1;
      v39 = (char *)*v6;
      v38 = (char *)v6[1];
      if (v38 != *v6)
      {
        do
        {
          v40 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v36 = v40;
        }
        while (v38 != v39);
        v38 = (char *)*v6;
      }
      *v6 = v36;
      v6[1] = v25;
      v6[2] = v37;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v24 = v22;
      v25 = v24 + 1;
    }
    v6[1] = v25;
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    v41 = *(uint64_t **)(a1 + 16);
    v42 = *v41;
    v43 = *(_QWORD *)(*v41 + 8 * v9);
    if (v43)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      v41 = *(uint64_t **)(a1 + 16);
      v42 = *v41;
    }
    v44 = v42 + 8 * v9;
    v45 = v41[1];
    v46 = v45 - (v44 + 8);
    if (v45 != v44 + 8)
      memmove((void *)v44, (const void *)(v44 + 8), v45 - (v44 + 8));
    v41[1] = v44 + v46;
  }
  else
  {
LABEL_5:
    *a3 = 1;
    v13 = operator new();
    v66 = 0;
    v67 = 0;
    __p = 0;
    std::vector<Vec3f>::__init_with_size[abi:ne180100]<Vec3f*,Vec3f*>((char *)&__p, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    OMAutoSamples::OMAutoSamples(v13, (_DWORD **)&__p);
    v14 = (unint64_t)v6[2];
    v15 = (uint64_t *)v6[1];
    if ((unint64_t)v15 >= v14)
    {
      v17 = ((char *)v15 - (_BYTE *)*v6) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v18 = v14 - (_QWORD)*v6;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v6 + 2), v20);
      else
        v21 = 0;
      v31 = (uint64_t *)&v21[8 * v17];
      v32 = &v21[8 * v20];
      *v31 = v13;
      v16 = v31 + 1;
      v34 = (char *)*v6;
      v33 = (char *)v6[1];
      if (v33 != *v6)
      {
        do
        {
          v35 = *((_QWORD *)v33 - 1);
          v33 -= 8;
          *--v31 = v35;
        }
        while (v33 != v34);
        v33 = (char *)*v6;
      }
      *v6 = v31;
      v6[1] = v16;
      v6[2] = v32;
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v15 = v13;
      v16 = v15 + 1;
    }
    v6[1] = v16;
    if (__p)
    {
      v66 = __p;
      operator delete(__p);
    }
  }
  v47 = *(_QWORD *)(a1 + 16);
  v48 = *(_QWORD **)(v47 + 8);
  if (v48 != *(_QWORD **)v47)
  {
    v49 = 0;
    v50 = 0;
    v48 = *(_QWORD **)v47;
    do
    {
      v51 = v48[v49];
      if (*(_DWORD *)(v51 + 8) != 3)
      {
        v53 = v6[1];
        v52 = (unint64_t)v6[2];
        if ((unint64_t)v53 >= v52)
        {
          v55 = ((char *)v53 - (_BYTE *)*v6) >> 3;
          if ((unint64_t)(v55 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v56 = v52 - (_QWORD)*v6;
          v57 = v56 >> 2;
          if (v56 >> 2 <= (unint64_t)(v55 + 1))
            v57 = v55 + 1;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v57;
          if (v58)
          {
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v6 + 2), v58);
            v51 = v48[v49];
          }
          else
          {
            v59 = 0;
          }
          v60 = &v59[8 * v55];
          *(_QWORD *)v60 = v51;
          v54 = v60 + 8;
          v62 = (char *)*v6;
          v61 = (char *)v6[1];
          if (v61 != *v6)
          {
            do
            {
              v63 = *((_QWORD *)v61 - 1);
              v61 -= 8;
              *((_QWORD *)v60 - 1) = v63;
              v60 -= 8;
            }
            while (v61 != v62);
            v61 = (char *)*v6;
          }
          *v6 = v60;
          v6[1] = v54;
          v6[2] = &v59[8 * v58];
          if (v61)
            operator delete(v61);
        }
        else
        {
          *v53 = v51;
          v54 = v53 + 1;
        }
        v6[1] = v54;
        v47 = *(_QWORD *)(a1 + 16);
        v48 = *(_QWORD **)v47;
      }
      v49 = ++v50;
    }
    while (v50 < (unint64_t)((uint64_t)(*(_QWORD *)(v47 + 8) - (_QWORD)v48) >> 3));
  }
  if (v48)
  {
    *(_QWORD *)(v47 + 8) = v48;
    operator delete(v48);
  }
  result = MEMORY[0x1B5E29170](v47, 0x80C40D6874129);
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

void sub_1B2CC00C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  MEMORY[0x1B5E29170](v13, 0x10A1C40B93B38D7);
  _Unwind_Resume(a1);
}

void OMSamples::updateTolAddSamples(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD v19[3];
  void *__p;
  void *v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  __p = 0;
  v4 = *(uint64_t **)(a1 + 16);
  v5 = *v4;
  if (v4[1] != *v4)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      v8 = *(_QWORD *)(v5 + 8 * v6);
      if ((*(_DWORD *)(v8 + 8) | 2) == 3)
      {
        std::vector<Vec3f>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Vec3f*>,std::__wrap_iter<Vec3f*>>((uint64_t *)&__p, (uint64_t)v21, *(_DWORD **)(v8 + 48), *(_DWORD **)(v8 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 56) - *(_QWORD *)(v8 + 48)) >> 2));
        v4 = *(uint64_t **)(a1 + 16);
        v5 = *v4;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(*(_QWORD *)(*v4 + 8 * v6) + 12);
      }
      v6 = v7++;
    }
    while (v6 < (v4[1] - v5) >> 3);
  }
  OMUtil::reduceSample((uint64_t *)&__p, (uint64_t *)(a1 + 24), 5.62950094e14);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 24);
  if ((int)(-1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v14) >> 2)) >= 1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      OMKeyer2DColorUtil::rgb2hsl((uint64_t *)(v14 + v15), (uint64_t)v19, a2, v9, v10, v11, v12, v13);
      v17 = *(_DWORD **)(a1 + 56);
      if ((unint64_t)v17 >= *(_QWORD *)(a1 + 64))
      {
        v18 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>((uint64_t *)(a1 + 48), v19);
      }
      else
      {
        *v17 = v19[0];
        v17[1] = v19[1];
        v17[2] = v19[2];
        v18 = (uint64_t)(v17 + 3);
      }
      *(_QWORD *)(a1 + 56) = v18;
      ++v16;
      v14 = *(_QWORD *)(a1 + 24);
      v15 += 12;
    }
    while (v16 < (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v14) >> 2)));
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_1B2CC029C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OMSamples::getEdgeSamples(OMSamples *this)
{
  return (uint64_t)this + 120;
}

char *OMSamples::addTolAddSamples(uint64_t a1, char *a2)
{
  void **v4;
  OMRect *v5;
  unint64_t v6;
  OMRect **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  OMRect **v14;
  char *v15;
  char *v16;
  char *v17;
  OMRect *v18;
  char *result;

  v4 = *(void ***)(a1 + 16);
  v5 = (OMRect *)operator new();
  OMRect::OMRect(v5, 0.0, 0.0, 0.0, 0.0, 1, 1, 10);
  v6 = (unint64_t)v4[2];
  v7 = (OMRect **)v4[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*v4) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*v4;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v4 + 2), v12);
    else
      v13 = 0;
    v14 = (OMRect **)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v5;
    v8 = v14 + 1;
    v17 = (char *)*v4;
    v16 = (char *)v4[1];
    if (v16 != *v4)
    {
      do
      {
        v18 = (OMRect *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*v4;
    }
    *v4 = v14;
    v4[1] = v8;
    v4[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  v4[1] = v8;
  result = (char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - 8) + 48);
  if (result != a2)
    return std::vector<Vec3f>::__assign_with_size[abi:ne180100]<Vec3f*,Vec3f*>(result, *(_DWORD **)a2, *((_DWORD **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 2));
  return result;
}

void sub_1B2CC042C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B93B38D7);
  _Unwind_Resume(a1);
}

uint64_t OMAutoSamples::OMAutoSamples(uint64_t a1, _DWORD **a2)
{
  _QWORD *v3;

  *(_DWORD *)(a1 + 8) = 3;
  *(_BYTE *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = 10;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)a1 = &unk_1E6565790;
  v3 = (_QWORD *)(a1 + 48);
  if (v3 != a2)
    std::vector<Vec3f>::__assign_with_size[abi:ne180100]<Vec3f*,Vec3f*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  return a1;
}

void sub_1B2CC04D4(_Unwind_Exception *a1)
{
  OMSamplesElem *v1;

  OMSamplesElem::~OMSamplesElem(v1);
  _Unwind_Resume(a1);
}

void OMRect::OMRect(OMRect *this, float a2, float a3, float a4, float a5, int a6, char a7, int a8)
{
  void **v13;
  float **v14;
  float *v15;
  float *v16;
  float *v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  int v22;
  float *v23;
  float *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  float *v30;
  int v31;
  float *v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  float *v39;
  int v40;
  float *v41;
  float *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  float *v48;
  char *v49;
  int v50;

  *((_DWORD *)this + 2) = a6;
  *((_BYTE *)this + 12) = a7;
  *((_DWORD *)this + 4) = a8;
  *(_OWORD *)((char *)this + 24) = 0u;
  v13 = (void **)((char *)this + 24);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v14 = (float **)((char *)this + 40);
  *((_BYTE *)this + 72) = 1;
  *(_QWORD *)this = &unk_1E65653B0;
  v15 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 40, 1uLL);
  v16 = (float *)*((_QWORD *)this + 3);
  v17 = (float *)*((_QWORD *)this + 4);
  v19 = &v15[2 * v18];
  *v15 = a2;
  v15[1] = a3;
  v20 = v15 + 2;
  v21 = v15;
  while (v17 != v16)
  {
    v22 = *((_DWORD *)v17 - 2);
    v17 -= 2;
    *((_DWORD *)v21 - 2) = v22;
    v21 -= 2;
    v21[1] = v17[1];
  }
  *((_QWORD *)this + 3) = v21;
  *((_QWORD *)this + 4) = v20;
  *((_QWORD *)this + 5) = v19;
  if (v16)
  {
    operator delete(v16);
    v19 = *v14;
  }
  *((_QWORD *)this + 4) = v20;
  if (v20 >= v19)
  {
    v24 = (float *)*v13;
    v25 = ((char *)v20 - (_BYTE *)*v13) >> 3;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v27 = (char *)v19 - (char *)v24;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v14, v28);
      v24 = (float *)*((_QWORD *)this + 3);
      v20 = (float *)*((_QWORD *)this + 4);
    }
    else
    {
      v29 = 0;
    }
    v30 = (float *)&v29[8 * v25];
    v19 = (float *)&v29[8 * v28];
    *v30 = a2;
    v30[1] = a5;
    v23 = v30 + 2;
    while (v20 != v24)
    {
      v31 = *((_DWORD *)v20 - 2);
      v20 -= 2;
      *((_DWORD *)v30 - 2) = v31;
      v30 -= 2;
      v30[1] = v20[1];
    }
    *((_QWORD *)this + 3) = v30;
    *((_QWORD *)this + 4) = v23;
    *((_QWORD *)this + 5) = v19;
    if (v24)
    {
      operator delete(v24);
      v19 = *v14;
    }
  }
  else
  {
    v15[2] = a2;
    v15[3] = a5;
    v23 = v15 + 4;
  }
  *((_QWORD *)this + 4) = v23;
  if (v23 >= v19)
  {
    v33 = (float *)*v13;
    v34 = ((char *)v23 - (_BYTE *)*v13) >> 3;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v36 = (char *)v19 - (char *)v33;
    if (v36 >> 2 > v35)
      v35 = v36 >> 2;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v14, v37);
      v33 = (float *)*((_QWORD *)this + 3);
      v23 = (float *)*((_QWORD *)this + 4);
    }
    else
    {
      v38 = 0;
    }
    v39 = (float *)&v38[8 * v34];
    v19 = (float *)&v38[8 * v37];
    *v39 = a4;
    v39[1] = a5;
    v32 = v39 + 2;
    while (v23 != v33)
    {
      v40 = *((_DWORD *)v23 - 2);
      v23 -= 2;
      *((_DWORD *)v39 - 2) = v40;
      v39 -= 2;
      v39[1] = v23[1];
    }
    *((_QWORD *)this + 3) = v39;
    *((_QWORD *)this + 4) = v32;
    *((_QWORD *)this + 5) = v19;
    if (v33)
    {
      operator delete(v33);
      v19 = *v14;
    }
  }
  else
  {
    *v23 = a4;
    v23[1] = a5;
    v32 = v23 + 2;
  }
  *((_QWORD *)this + 4) = v32;
  if (v32 >= v19)
  {
    v42 = (float *)*v13;
    v43 = ((char *)v32 - (_BYTE *)*v13) >> 3;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v45 = (char *)v19 - (char *)v42;
    if (v45 >> 2 > v44)
      v44 = v45 >> 2;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    if (v46)
    {
      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v14, v46);
      v42 = (float *)*((_QWORD *)this + 3);
      v32 = (float *)*((_QWORD *)this + 4);
    }
    else
    {
      v47 = 0;
    }
    v48 = (float *)&v47[8 * v43];
    v49 = &v47[8 * v46];
    *v48 = a4;
    v48[1] = a3;
    v41 = v48 + 2;
    while (v32 != v42)
    {
      v50 = *((_DWORD *)v32 - 2);
      v32 -= 2;
      *((_DWORD *)v48 - 2) = v50;
      v48 -= 2;
      v48[1] = v32[1];
    }
    *((_QWORD *)this + 3) = v48;
    *((_QWORD *)this + 4) = v41;
    *((_QWORD *)this + 5) = v49;
    if (v42)
      operator delete(v42);
  }
  else
  {
    *v32 = a4;
    v32[1] = a3;
    v41 = v32 + 2;
  }
  *((_QWORD *)this + 4) = v41;
}

void sub_1B2CC07F0(_Unwind_Exception *a1)
{
  OMSamplesElem *v1;

  OMSamplesElem::~OMSamplesElem(v1);
  _Unwind_Resume(a1);
}

char *std::vector<Vec3f>::__assign_with_size[abi:ne180100]<Vec3f*,Vec3f*>(_QWORD *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _DWORD *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  _DWORD *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 2) >= a4)
  {
    v18 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 2);
    if (v19 >= a4)
    {
      v23 = result;
      if (a2 != a3)
      {
        v24 = result;
        do
        {
          *(_DWORD *)v24 = *v6;
          *((_DWORD *)v24 + 1) = v6[1];
          *((_DWORD *)v24 + 2) = v6[2];
          v23 += 12;
          v6 += 3;
          v24 += 12;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v23 - result);
      v13 = result;
    }
    else
    {
      v20 = &a2[3 * v19];
      if (v13 != result)
      {
        do
        {
          *(_DWORD *)result = *v6;
          *((_DWORD *)result + 1) = v6[1];
          *((_DWORD *)result + 2) = v6[2];
          v6 += 3;
          result += 12;
        }
        while (v6 != v20);
      }
      v21 = v13;
      if (v20 != a3)
      {
        v22 = v13;
        do
        {
          *(_DWORD *)v22 = *v20;
          *((_DWORD *)v22 + 1) = v20[1];
          *((_DWORD *)v22 + 2) = v20[2];
          v21 += 12;
          v20 += 3;
          v22 += 12;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v21 - v13);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1555555555555555)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v11;
    result = std::vector<Vec3f>::__vallocate[abi:ne180100](a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        *(_DWORD *)v16 = *v6;
        *((_DWORD *)v16 + 1) = v6[1];
        *((_DWORD *)v16 + 2) = v6[2];
        v16 += 12;
        v6 += 3;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v16 - v13);
  }
  *v14 = &v17[(_QWORD)v13];
  return result;
}

char *std::vector<Vec3f>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Vec3f>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

char *std::vector<Vec3f>::__init_with_size[abi:ne180100]<Vec3f*,Vec3f*>(char *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<Vec3f>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v7[1] = a2[1];
      v7[2] = a2[2];
      v7 += 3;
      a2 += 3;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B2CC0AA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OMColorUtil::getRGBToYCbCrMatrix(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, Mat4f *a9@<X8>)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)&v11 = 0;
  *((_QWORD *)&v11 + 1) = 0x3F80000000000000;
  if (a1 == 1)
  {
    *(_QWORD *)&v9 = 0xBEEB68E03F000000;
    *((_QWORD *)&v9 + 1) = 3173300474;
    Mat4f::Mat4f(a9, 0.2627, 0.678, 0.059302, 0.0, -0.13963, -0.36037, 0.5, 0.0, a2, a3, a4, a5, a6, a7, a8, v9, v11);
  }
  else
  {
    *(_QWORD *)&v10 = 0xBEE887123F000000;
    *((_QWORD *)&v10 + 1) = 3174811502;
    Mat4f::Mat4f(a9, 0.21264, 0.71517, 0.072192, 0.0, -0.11459, -0.38541, 0.5, 0.0, a2, a3, a4, a5, a6, a7, a8, v10, v11);
  }
}

void OMColorUtil::getRec2020to709Matrix(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, Mat4f *a8@<X8>)
{
  __int128 v9;
  __int128 v10;

  *(_QWORD *)&v10 = 0;
  *((_QWORD *)&v10 + 1) = 0x3F80000000000000;
  *(_QWORD *)&v9 = 0xBDCE075FBC95182BLL;
  *((_QWORD *)&v9 + 1) = 1066348944;
  Mat4f::Mat4f(a8, 1.6605, -0.5876, -0.0728, 0.0, -0.1246, 1.1329, -0.0083, 0.0, a1, a2, a3, a4, a5, a6, a7, v9, v10);
}

void OMColorUtil::Level4f(OMColorUtil *this@<X0>, float a2@<S0>, float a3@<S1>, float32x4_t *a4@<X8>)
{
  Vec3f v12;
  float32x4_t v13[4];
  Vec3f v14;
  float v15[16];

  v14.var0[0] = a2;
  *(_QWORD *)&v14.var0[1] = 0;
  Mat4f::MakeHTrans((Mat4f *)v15, &v14);
  v12.var0[0] = (float)(a3 + 1.0) - a2;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)&v12.var0[1] = _D0;
  Mat4f::MakeHScale((Mat4f *)v13, &v12);
  Mat4f::operator*(v15, v13, a4);
}

float OMColorUtil::RGB2LumaHS(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v10;
  float v11;
  float v12;
  float v13;
  float result;
  float v15;
  uint64_t v16;
  int v17;
  int v18;
  float v19[16];
  float32x2_t v20[2];
  float32x2_t v21;
  float v22;

  OMColorUtil::getRGBToYCbCrMatrix(a3, a2, a3, a4, a5, a6, a7, a8, (Mat4f *)v19);
  v16 = *a1;
  v17 = *((_DWORD *)a1 + 2);
  v18 = 1065353216;
  operator*(v19, (float *)&v16, (float *)v20);
  proj(v20, &v21, v10);
  v11 = v21.f32[1];
  *(_DWORD *)a2 = v21.i32[0];
  v12 = v22;
  v13 = atan2f(v22, v11);
  if (v13 < 0.0)
    v13 = v13 + 6.2832;
  result = v13 / 6.2832;
  v15 = sqrtf((float)(v11 * v11) + (float)(v12 * v12));
  *(float *)(a2 + 4) = result;
  *(float *)(a2 + 8) = v15 + v15;
  return result;
}

float OMKeyer2DColorUtil::rgb2hsl(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float result;
  float v10;
  uint64_t v11;

  OMColorUtil::RGB2LumaHS(a1, (uint64_t)&v10, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)a2 = v11;
  result = v10;
  *(float *)(a2 + 8) = v10;
  return result;
}

void sub_1B2CC185C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1B2CC1CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  _Unwind_Resume(exception_object);
}

void sub_1B2CC1DC8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2CC1DBCLL);
}

void sub_1B2CC1F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B2CC21C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1B2CC22D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1B2CC2494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  _Unwind_Resume(a1);
}

const char *HgcRetimeAddBlend2::GetProgram(HgcRetimeAddBlend2 *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000031d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    output.color0 = float4(r0)*hg_Params[0];\n"
             "    output.color0 = float4(r1)*hg_Params[1] + output.color0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=a6f2738f:8a109c49:9f8e303a:93873d7d\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000300\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    output.color0 = r0*hg_Params[0];\n"
             "    output.color0 = r1*hg_Params[1] + output.color0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=1be635f9:660b7dcc:e57c3030:63e78bbe\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002d4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    gl_FragColor = r0*hg_ProgramLocal0;\n"
           "    gl_FragColor = r1*hg_ProgramLocal1 + gl_FragColor;\n"
           "}\n"
           "//MD5=429bb167:5e6f191c:22f11cc4:fb4e8fd4\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcRetimeAddBlend2::InitProgramDescriptor(HgcRetimeAddBlend2 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcRetimeAddBlend2_hgc_visible", "//Metal1.0     \n//LEN=0000000161\n[[ visible ]] FragmentOut HgcRetimeAddBlend2_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    output.color0 = r0*hg_Params[0];\n"
    "    output.color0 = r1*hg_Params[1] + output.color0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CC2604()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcRetimeAddBlend2");
}

void sub_1B2CC2614(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CC2754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CC279C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CC2794);
}

_QWORD *HgcRetimeAddBlend2::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcRetimeAddBlend2 [hgc1]");
}

uint64_t HgcRetimeAddBlend2::BindTexture(HgcRetimeAddBlend2 *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcRetimeAddBlend2::Bind(HgcRetimeAddBlend2 *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HgcRetimeAddBlend2 *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcRetimeAddBlend2::RenderTile(HgcRetimeAddBlend2 *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 12);
    v7 = 16 * *((int *)a2 + 22);
    v8 = *((_QWORD *)a2 + 10);
    v9 = 16 * *((int *)a2 + 26);
    v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = (float32x4_t *)*((_QWORD *)this + 51);
          v14 = v13[1];
          v15 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + v12 - 32), *v13), vmulq_f32(*(float32x4_t *)(v6 + v12 - 32), v14));
          v16 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + v12 - 16), *v13), vmulq_f32(*(float32x4_t *)(v6 + v12 - 16), v14));
          v17 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + v12), *v13), vmulq_f32(*(float32x4_t *)(v6 + v12), v14));
          v18 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + v12 + 16), *v13), vmulq_f32(*(float32x4_t *)(v6 + v12 + 16), v14));
          v19 = (float32x4_t *)(v5 + v12);
          v19[-2] = v15;
          v19[-1] = v16;
          *v19 = v17;
          v19[1] = v18;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v20) = -v11;
      }
      if ((int)v20 < v4)
      {
        v20 = v20;
        do
        {
          *(float32x4_t *)(v5 + 16 * v20) = vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + 16 * v20), *(float32x4_t *)*((_QWORD *)this + 51)), vmulq_f32(*(float32x4_t *)(v6 + 16 * v20), *(float32x4_t *)(*((_QWORD *)this + 51) + 16)));
          ++v20;
        }
        while (v20 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcRetimeAddBlend2::GetDOD(HgcRetimeAddBlend2 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcRetimeAddBlend2::GetROI(HgcRetimeAddBlend2 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcRetimeAddBlend2::HgcRetimeAddBlend2(HgcRetimeAddBlend2 *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65657E8;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CC2AE4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcRetimeAddBlend2::~HgcRetimeAddBlend2(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65657E8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40E0EAB150);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcRetimeAddBlend2::~HgcRetimeAddBlend2(this);
  HGObject::operator delete(v1);
}

uint64_t HgcRetimeAddBlend2::SetParameter(HgcRetimeAddBlend2 *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcRetimeAddBlend2::GetParameter(HgcRetimeAddBlend2 *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcInverseSimpleToneCurve::GetProgram(HgcInverseSimpleToneCurve *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000374\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fabs(r0.xyz)*half3(hg_Params[0].xyz);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2.xyz = r1.xyz*c0.xxx;\n"
             "    r0.xyz = half3(r0.xyz < c0.yyy);\n"
             "    output.color0.xyz = float3(r0.xyz)*float3(r2.xyz) + float3(r1.xyz);\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=bd3c0a0c:448bf4c3:fc12ffab:811426d6\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0002:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000344\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fabs(r0.xyz)*hg_Params[0].xyz;\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2.xyz = r1.xyz*c0.xxx;\n"
             "    r0.xyz = float3(r0.xyz < c0.yyy);\n"
             "    output.color0.xyz = r0.xyz*r2.xyz + r1.xyz;\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=2a737f2f:14893905:3367d370:94190f6c\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0002:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000344\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(-2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = abs(r0.xyz)*hg_ProgramLocal0.xyz;\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2.xyz = r1.xyz*c0.xxx;\n"
           "    r0.xyz = vec3(lessThan(r0.xyz, c0.yyy));\n"
           "    gl_FragColor.xyz = r0.xyz*r2.xyz + r1.xyz;\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=25754dcf:39a6290c:71b65a47:d37941f7\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0002:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcInverseSimpleToneCurve::InitProgramDescriptor(HgcInverseSimpleToneCurve *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcInverseSimpleToneCurve_hgc_visible", "//Metal1.0     \n//LEN=0000000227\n[[ visible ]] FragmentOut HgcInverseSimpleToneCurve_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fabs(r0.xyz)*hg_Params[0].xyz;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2.xyz = r1.xyz*c0.xxx;\n"
    "    r0.xyz = float3(r0.xyz < c0.yyy);\n"
    "    output.color0.xyz = r0.xyz*r2.xyz + r1.xyz;\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CC2CEC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcInverseSimpleToneCurve");
}

void sub_1B2CC2CFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CC2DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CC2E3C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CC2E34);
}

_QWORD *HgcInverseSimpleToneCurve::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcInverseSimpleToneCurve [hgc1]");
}

uint64_t HgcInverseSimpleToneCurve::BindTexture(HgcInverseSimpleToneCurve *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcInverseSimpleToneCurve::Bind(HgcInverseSimpleToneCurve *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HgcInverseSimpleToneCurve *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcInverseSimpleToneCurve::RenderTile(HgcInverseSimpleToneCurve *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t *v61;
  unsigned int v62;
  float32x4_t v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 6);
    v8 = 16 * *((int *)a2 + 22);
    do
    {
      if (v4 < 2)
      {
        v62 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v12 = *(float32x4_t *)(v6 + v10 - 16);
          v11 = *(float32x4_t *)(v6 + v10);
          v13 = *((_QWORD *)this + 51);
          v14 = *(float32x4_t *)(v13 + 16);
          v15 = vmulq_f32(vabsq_f32(v12), *(float32x4_t *)v13);
          v16 = vmulq_f32(vabsq_f32(v11), *(float32x4_t *)v13);
          v17 = *(int8x16_t *)(v13 + 32);
          v18 = *(float32x4_t *)(v13 + 48);
          v19 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v15), (int8x16_t)v18);
          v20 = *(float32x4_t *)(v13 + 64);
          v21 = *(int8x16_t *)(v13 + 80);
          v22 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v16), (int8x16_t)v18);
          v23 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v15, 0x17uLL)), (float32x4_t)vandq_s8(v21, (int8x16_t)vcgtq_f32(v20, v15)));
          v24 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v16, 0x17uLL)), (float32x4_t)vandq_s8(v21, (int8x16_t)vcgtq_f32(v20, v16)));
          v25 = *(float32x4_t *)(v13 + 96);
          v26 = *(float32x4_t *)(v13 + 112);
          v27 = (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v19, v26));
          v28 = (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v22, v26));
          v29 = *(float32x4_t *)(v13 + 128);
          v30 = *(float32x4_t *)(v13 + 144);
          v31 = vsubq_f32(v24, v25);
          v32 = vaddq_f32(vsubq_f32(v23, v25), v27);
          v33 = vsubq_f32(vsubq_f32(v19, v18), vmulq_f32(vmulq_f32(v29, v27), v19));
          v34 = vsubq_f32(vsubq_f32(v22, v18), vmulq_f32(vmulq_f32(v29, v28), v22));
          v35 = *(float32x4_t *)(v13 + 160);
          v36 = *(float32x4_t *)(v13 + 176);
          v37 = *(float32x4_t *)(v13 + 192);
          v38 = *(float32x4_t *)(v13 + 208);
          v39 = vmaxq_f32(vmulq_f32(v14, vaddq_f32(v32, vmulq_f32(v33, vaddq_f32(vaddq_f32(v36, vmulq_f32(v33, v37)), vmulq_f32(vmulq_f32(v33, v33), vaddq_f32(v30, vmulq_f32(v35, v33))))))), v38);
          v40 = vmaxq_f32(vmulq_f32(v14, vaddq_f32(vaddq_f32(v31, v28), vmulq_f32(v34, vaddq_f32(vaddq_f32(v36, vmulq_f32(v34, v37)), vmulq_f32(vmulq_f32(v34, v34), vaddq_f32(v30, vmulq_f32(v35, v34))))))), v38);
          v41 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
          v42 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
          v43 = vsubq_f32(v41, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v41, v39)));
          v44 = vsubq_f32(v42, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v42, v40)));
          v45 = vsubq_f32(v39, v43);
          v46 = vsubq_f32(v40, v44);
          v47 = *(float32x4_t *)(v13 + 224);
          v48 = *(float32x4_t *)(v13 + 240);
          v49 = vaddq_f32(v47, vmulq_f32(v48, v45));
          v50 = vaddq_f32(v47, vmulq_f32(v48, v46));
          v51 = vmulq_f32(v45, v49);
          v52 = *(float32x4_t *)(v13 + 256);
          v53 = *(int32x4_t *)(v13 + 272);
          v54 = vmulq_f32(vaddq_f32(v18, vmulq_f32(v45, vaddq_f32(v52, v51))), (float32x4_t)vshlq_n_s32(vaddq_s32(v53, vcvtq_s32_f32(v43)), 0x17uLL));
          v55 = vmulq_f32(vaddq_f32(v18, vmulq_f32(v46, vaddq_f32(v52, vmulq_f32(v46, v50)))), (float32x4_t)vshlq_n_s32(vaddq_s32(v53, vcvtq_s32_f32(v44)), 0x17uLL));
          v56 = *(float32x4_t *)(v13 + 288);
          v57 = *(float32x4_t *)(v13 + 304);
          v58 = vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v57, v12));
          v59 = vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v57, v11));
          v60 = *(int8x16_t *)(v13 + 320);
          v61 = (int8x16_t *)(v5 + v10);
          v61[-1] = vbslq_s8(v60, (int8x16_t)v12, (int8x16_t)vaddq_f32(v54, vmulq_f32(vmulq_f32(v56, v54), (float32x4_t)vbslq_s8(v60, (int8x16_t)v12, v58))));
          *v61 = vbslq_s8(v60, (int8x16_t)v11, (int8x16_t)vaddq_f32(v55, vmulq_f32(vmulq_f32(v56, v55), (float32x4_t)vbslq_s8(v60, (int8x16_t)v11, v59))));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v62 = -v9;
      }
      if ((int)v62 < v4)
      {
        v63 = *(float32x4_t *)(v6 + 16 * v62);
        v64 = *((_QWORD *)this + 51);
        v65 = vmulq_f32(vabsq_f32(v63), *(float32x4_t *)v64);
        v66 = *(float32x4_t *)(v64 + 48);
        v67 = (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v64 + 32), (int8x16_t)v65), (int8x16_t)v66);
        v68 = (float32x4_t)vandq_s8((int8x16_t)v66, (int8x16_t)vcgtq_f32(v67, *(float32x4_t *)(v64 + 112)));
        v69 = vsubq_f32(vsubq_f32(v67, v66), vmulq_f32(vmulq_f32(*(float32x4_t *)(v64 + 128), v68), v67));
        v70 = vmaxq_f32(vmulq_f32(*(float32x4_t *)(v64 + 16), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v65, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v64 + 80), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v64 + 64), v65))), *(float32x4_t *)(v64 + 96)), v68), vmulq_f32(v69, vaddq_f32(vaddq_f32(*(float32x4_t *)(v64 + 176), vmulq_f32(v69, *(float32x4_t *)(v64 + 192))), vmulq_f32(vmulq_f32(v69, v69), vaddq_f32(*(float32x4_t *)(v64 + 144), vmulq_f32(*(float32x4_t *)(v64 + 160), v69))))))),
                *(float32x4_t *)(v64 + 208));
        v71 = vcvtq_f32_s32(vcvtq_s32_f32(v70));
        v72 = vsubq_f32(v71, (float32x4_t)vandq_s8((int8x16_t)v66, (int8x16_t)vcgtq_f32(v71, v70)));
        v73 = vsubq_f32(v70, v72);
        v74 = vmulq_f32(vaddq_f32(v66, vmulq_f32(v73, vaddq_f32(*(float32x4_t *)(v64 + 256), vmulq_f32(v73, vaddq_f32(*(float32x4_t *)(v64 + 224), vmulq_f32(*(float32x4_t *)(v64 + 240), v73)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v64 + 272), vcvtq_s32_f32(v72)), 0x17uLL));
        *(int8x16_t *)(v5 + 16 * v62) = vbslq_s8(*(int8x16_t *)(v64 + 320), (int8x16_t)v63, (int8x16_t)vaddq_f32(v74, vmulq_f32(vmulq_f32(*(float32x4_t *)(v64 + 288), v74), (float32x4_t)vbslq_s8(*(int8x16_t *)(v64 + 320), (int8x16_t)v63, vandq_s8((int8x16_t)v66, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v64 + 304), v63))))));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcInverseSimpleToneCurve::GetDOD(HgcInverseSimpleToneCurve *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcInverseSimpleToneCurve::GetROI(HgcInverseSimpleToneCurve *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcInverseSimpleToneCurve::HgcInverseSimpleToneCurve(HgcInverseSimpleToneCurve *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6565A50;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = xmmword_1B3051600;
  *(_OWORD *)(v3 + 48) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 64) = xmmword_1B3051610;
  *(_OWORD *)(v3 + 80) = xmmword_1B3051620;
  *(_OWORD *)(v3 + 96) = xmmword_1B3051630;
  *(_OWORD *)(v3 + 112) = xmmword_1B3051640;
  *(_OWORD *)(v3 + 128) = xmmword_1B3051510;
  *(_OWORD *)(v3 + 144) = xmmword_1B3051650;
  *(_OWORD *)(v3 + 160) = xmmword_1B3051660;
  *(_OWORD *)(v3 + 176) = xmmword_1B3051670;
  *(_OWORD *)(v3 + 192) = xmmword_1B3051680;
  *(_OWORD *)(v3 + 208) = xmmword_1B3051690;
  *(_OWORD *)(v3 + 224) = xmmword_1B30516A0;
  *(_OWORD *)(v3 + 240) = xmmword_1B30516B0;
  *(_OWORD *)(v3 + 256) = xmmword_1B30516C0;
  *(_OWORD *)(v3 + 272) = xmmword_1B30516D0;
  *(_OWORD *)(v3 + 288) = xmmword_1B30534A0;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 320) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CC343C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcInverseSimpleToneCurve::~HgcInverseSimpleToneCurve(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6565A50;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C409BD2D9E4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcInverseSimpleToneCurve::~HgcInverseSimpleToneCurve(this);
  HGObject::operator delete(v1);
}

uint64_t HgcInverseSimpleToneCurve::SetParameter(HgcInverseSimpleToneCurve *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;
  int32x4_t v10;

  if ((_DWORD)a2 == 1)
  {
    v9 = *((_QWORD *)this + 51);
    if (*(float *)(v9 + 16) != a3.n128_f32[0]
      || *(float *)(v9 + 20) != a3.n128_f32[0]
      || *(float *)(v9 + 24) != a3.n128_f32[0]
      || *(float *)(v9 + 28) != 0.0)
    {
      v10 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v10.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      *(int32x4_t *)(v9 + 16) = v10;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v9 + 352) = a3;
      goto LABEL_13;
    }
    return 0;
  }
  if (!(_DWORD)a2)
  {
    v7 = *((_QWORD *)this + 51);
    if (*(float *)v7 != a3.n128_f32[0]
      || *(float *)(v7 + 4) != a3.n128_f32[0]
      || *(float *)(v7 + 8) != a3.n128_f32[0]
      || *(float *)(v7 + 12) != 0.0)
    {
      v8 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v8.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      *(int32x4_t *)v7 = v8;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v7 + 336) = a3;
LABEL_13:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcInverseSimpleToneCurve::GetParameter(HgcInverseSimpleToneCurve *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  uint64_t result;

  if (a2 == 1)
  {
    v5 = (float *)*((_QWORD *)this + 51);
    *a3 = v5[88];
    a3[1] = v5[89];
    a3[2] = v5[90];
    v4 = v5 + 91;
    goto LABEL_5;
  }
  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = v3[84];
    a3[1] = v3[85];
    a3[2] = v3[86];
    v4 = v3 + 87;
LABEL_5:
    result = 0;
    a3[3] = *v4;
    return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcSimpleToneCurve::GetProgram(HgcSimpleToneCurve *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000374\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = pow(fabs(r0.xyz), half3(hg_Params[1].xyz));\n"
             "    r1.xyz = r1.xyz*half3(hg_Params[0].xyz);\n"
             "    r2.xyz = r1.xyz*c0.xxx;\n"
             "    r0.xyz = half3(r0.xyz < c0.yyy);\n"
             "    output.color0.xyz = float3(r0.xyz)*float3(r2.xyz) + float3(r1.xyz);\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=121c40eb:fea358e3:1c5eacae:1ed8c37c\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0002:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000344\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = pow(fabs(r0.xyz), hg_Params[1].xyz);\n"
             "    r1.xyz = r1.xyz*hg_Params[0].xyz;\n"
             "    r2.xyz = r1.xyz*c0.xxx;\n"
             "    r0.xyz = float3(r0.xyz < c0.yyy);\n"
             "    output.color0.xyz = r0.xyz*r2.xyz + r1.xyz;\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=6df6fe31:0f0f92a3:1cae0ccc:4b490fb3\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0002:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000344\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(-2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = pow(abs(r0.xyz), hg_ProgramLocal1.xyz);\n"
           "    r1.xyz = r1.xyz*hg_ProgramLocal0.xyz;\n"
           "    r2.xyz = r1.xyz*c0.xxx;\n"
           "    r0.xyz = vec3(lessThan(r0.xyz, c0.yyy));\n"
           "    gl_FragColor.xyz = r0.xyz*r2.xyz + r1.xyz;\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=6d930ca3:a6a50e9c:15819e55:a3a8ad06\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0002:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcSimpleToneCurve::InitProgramDescriptor(HgcSimpleToneCurve *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSimpleToneCurve_hgc_visible", "//Metal1.0     \n//LEN=0000000220\n[[ visible ]] FragmentOut HgcSimpleToneCurve_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = pow(fabs(r0.xyz), hg_Params[1].xyz);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].xyz;\n"
    "    r2.xyz = r1.xyz*c0.xxx;\n"
    "    r0.xyz = float3(r0.xyz < c0.yyy);\n"
    "    output.color0.xyz = r0.xyz*r2.xyz + r1.xyz;\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CC36D0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSimpleToneCurve");
}

void sub_1B2CC36E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CC37E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CC3820()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CC3818);
}

_QWORD *HgcSimpleToneCurve::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSimpleToneCurve [hgc1]");
}

uint64_t HgcSimpleToneCurve::BindTexture(HgcSimpleToneCurve *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcSimpleToneCurve::Bind(HgcSimpleToneCurve *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HgcSimpleToneCurve *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcSimpleToneCurve::RenderTile(HgcSimpleToneCurve *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t *v65;
  unsigned int v66;
  float32x4_t v67;
  float32x4_t v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 6);
    v8 = 16 * *((int *)a2 + 22);
    do
    {
      if (v4 < 2)
      {
        v66 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v12 = *(float32x4_t *)(v6 + v10 - 16);
          v11 = *(float32x4_t *)(v6 + v10);
          v13 = vabsq_f32(v12);
          v14 = *((_QWORD *)this + 51);
          v16 = *(int8x16_t *)(v14 + 32);
          v15 = *(float32x4_t *)(v14 + 48);
          v17 = vabsq_f32(v11);
          v18 = (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v13), (int8x16_t)v15);
          v19 = *(float32x4_t *)(v14 + 64);
          v20 = *(int8x16_t *)(v14 + 80);
          v21 = (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v17), (int8x16_t)v15);
          v22 = (int8x16_t)vcgtq_f32(v19, v13);
          v23 = (float32x4_t)vandq_s8(v20, (int8x16_t)vcgtq_f32(v19, v17));
          v24 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v13, 0x17uLL)), (float32x4_t)vandq_s8(v20, v22));
          v25 = *(float32x4_t *)(v14 + 96);
          v26 = *(float32x4_t *)(v14 + 112);
          v27 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v17, 0x17uLL)), v23);
          v28 = vsubq_f32(v24, v25);
          v29 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v18, v26));
          v30 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v21, v26));
          v31 = vsubq_f32(v27, v25);
          v32 = *(float32x4_t *)(v14 + 128);
          v33 = *(float32x4_t *)(v14 + 144);
          v34 = vsubq_f32(vsubq_f32(v18, v15), vmulq_f32(vmulq_f32(v32, v29), v18));
          v35 = vsubq_f32(vsubq_f32(v21, v15), vmulq_f32(vmulq_f32(v32, v30), v21));
          v36 = *(float32x4_t *)(v14 + 160);
          v37 = *(float32x4_t *)(v14 + 176);
          v38 = vaddq_f32(v33, vmulq_f32(v36, v34));
          v39 = vaddq_f32(v33, vmulq_f32(v36, v35));
          v40 = *(float32x4_t *)(v14 + 192);
          v41 = *(float32x4_t *)(v14 + 208);
          v42 = vaddq_f32(vaddq_f32(v31, v30), vmulq_f32(v35, vaddq_f32(vaddq_f32(v37, vmulq_f32(v35, v40)), vmulq_f32(vmulq_f32(v35, v35), v39))));
          v43 = *(float32x4_t *)(v14 + 16);
          v44 = vmaxq_f32(vmulq_f32(v43, vaddq_f32(vaddq_f32(v28, v29), vmulq_f32(v34, vaddq_f32(vaddq_f32(v37, vmulq_f32(v34, v40)), vmulq_f32(vmulq_f32(v34, v34), v38))))), v41);
          v45 = vmaxq_f32(vmulq_f32(v43, v42), v41);
          v46 = vcvtq_f32_s32(vcvtq_s32_f32(v44));
          v47 = vcvtq_f32_s32(vcvtq_s32_f32(v45));
          v48 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v46, v44)));
          v49 = vsubq_f32(v47, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v47, v45)));
          v50 = vsubq_f32(v44, v48);
          v51 = *(float32x4_t *)(v14 + 224);
          v52 = *(float32x4_t *)(v14 + 240);
          v53 = vsubq_f32(v45, v49);
          v54 = vaddq_f32(v51, vmulq_f32(v52, v50));
          v55 = vaddq_f32(v51, vmulq_f32(v52, v53));
          v56 = *(float32x4_t *)(v14 + 256);
          v57 = *(int32x4_t *)(v14 + 272);
          v58 = vmulq_f32(*(float32x4_t *)v14, vmulq_f32(vaddq_f32(v15, vmulq_f32(v50, vaddq_f32(v56, vmulq_f32(v50, v54)))), (float32x4_t)vshlq_n_s32(vaddq_s32(v57, vcvtq_s32_f32(v48)), 0x17uLL)));
          v59 = vmulq_f32(*(float32x4_t *)v14, vmulq_f32(vaddq_f32(v15, vmulq_f32(v53, vaddq_f32(v56, vmulq_f32(v53, v55)))), (float32x4_t)vshlq_n_s32(vaddq_s32(v57, vcvtq_s32_f32(v49)), 0x17uLL)));
          v60 = *(float32x4_t *)(v14 + 288);
          v61 = *(float32x4_t *)(v14 + 304);
          v62 = vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v61, v12));
          v63 = vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v61, v11));
          v64 = *(int8x16_t *)(v14 + 320);
          v65 = (int8x16_t *)(v5 + v10);
          v65[-1] = vbslq_s8(v64, (int8x16_t)v12, (int8x16_t)vaddq_f32(v58, vmulq_f32(vmulq_f32(v60, v58), (float32x4_t)vbslq_s8(v64, (int8x16_t)v12, v62))));
          *v65 = vbslq_s8(v64, (int8x16_t)v11, (int8x16_t)vaddq_f32(v59, vmulq_f32(vmulq_f32(v60, v59), (float32x4_t)vbslq_s8(v64, (int8x16_t)v11, v63))));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v66 = -v9;
      }
      if ((int)v66 < v4)
      {
        v67 = *(float32x4_t *)(v6 + 16 * v66);
        v68 = vabsq_f32(v67);
        v69 = *((_QWORD *)this + 51);
        v70 = *(float32x4_t *)(v69 + 48);
        v71 = (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v69 + 32), (int8x16_t)v68), (int8x16_t)v70);
        v72 = (float32x4_t)vandq_s8((int8x16_t)v70, (int8x16_t)vcgtq_f32(v71, *(float32x4_t *)(v69 + 112)));
        v73 = vsubq_f32(vsubq_f32(v71, v70), vmulq_f32(vmulq_f32(*(float32x4_t *)(v69 + 128), v72), v71));
        v74 = vmaxq_f32(vmulq_f32(*(float32x4_t *)(v69 + 16), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v68, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v69 + 80), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v69 + 64), v68))), *(float32x4_t *)(v69 + 96)), v72), vmulq_f32(v73, vaddq_f32(vaddq_f32(*(float32x4_t *)(v69 + 176), vmulq_f32(v73, *(float32x4_t *)(v69 + 192))), vmulq_f32(vmulq_f32(v73, v73), vaddq_f32(*(float32x4_t *)(v69 + 144), vmulq_f32(*(float32x4_t *)(v69 + 160), v73))))))),
                *(float32x4_t *)(v69 + 208));
        v75 = vcvtq_f32_s32(vcvtq_s32_f32(v74));
        v76 = vsubq_f32(v75, (float32x4_t)vandq_s8((int8x16_t)v70, (int8x16_t)vcgtq_f32(v75, v74)));
        v77 = vsubq_f32(v74, v76);
        v78 = vmulq_f32(*(float32x4_t *)v69, vmulq_f32(vaddq_f32(v70, vmulq_f32(v77, vaddq_f32(*(float32x4_t *)(v69 + 256), vmulq_f32(v77, vaddq_f32(*(float32x4_t *)(v69 + 224), vmulq_f32(*(float32x4_t *)(v69 + 240), v77)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v69 + 272), vcvtq_s32_f32(v76)), 0x17uLL)));
        *(int8x16_t *)(v5 + 16 * v66) = vbslq_s8(*(int8x16_t *)(v69 + 320), (int8x16_t)v67, (int8x16_t)vaddq_f32(v78, vmulq_f32(vmulq_f32(*(float32x4_t *)(v69 + 288), v78), (float32x4_t)vbslq_s8(*(int8x16_t *)(v69 + 320), (int8x16_t)v67, vandq_s8((int8x16_t)v70, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v69 + 304), v67))))));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcSimpleToneCurve::GetDOD(HgcSimpleToneCurve *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcSimpleToneCurve::GetROI(HgcSimpleToneCurve *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcSimpleToneCurve::HgcSimpleToneCurve(HgcSimpleToneCurve *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6565CB8;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = xmmword_1B3051600;
  *(_OWORD *)(v3 + 48) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 64) = xmmword_1B3051610;
  *(_OWORD *)(v3 + 80) = xmmword_1B3051620;
  *(_OWORD *)(v3 + 96) = xmmword_1B3051630;
  *(_OWORD *)(v3 + 112) = xmmword_1B3051640;
  *(_OWORD *)(v3 + 128) = xmmword_1B3051510;
  *(_OWORD *)(v3 + 144) = xmmword_1B3051650;
  *(_OWORD *)(v3 + 160) = xmmword_1B3051660;
  *(_OWORD *)(v3 + 176) = xmmword_1B3051670;
  *(_OWORD *)(v3 + 192) = xmmword_1B3051680;
  *(_OWORD *)(v3 + 208) = xmmword_1B3051690;
  *(_OWORD *)(v3 + 224) = xmmword_1B30516A0;
  *(_OWORD *)(v3 + 240) = xmmword_1B30516B0;
  *(_OWORD *)(v3 + 256) = xmmword_1B30516C0;
  *(_OWORD *)(v3 + 272) = xmmword_1B30516D0;
  *(_OWORD *)(v3 + 288) = xmmword_1B30534A0;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 320) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CC3E20(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSimpleToneCurve::~HgcSimpleToneCurve(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6565CB8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C409BD2D9E4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSimpleToneCurve::~HgcSimpleToneCurve(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSimpleToneCurve::SetParameter(HgcSimpleToneCurve *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;
  int32x4_t v10;

  if ((_DWORD)a2 == 1)
  {
    v9 = *((_QWORD *)this + 51);
    if (*(float *)(v9 + 16) != a3.n128_f32[0]
      || *(float *)(v9 + 20) != a3.n128_f32[0]
      || *(float *)(v9 + 24) != a3.n128_f32[0]
      || *(float *)(v9 + 28) != 0.0)
    {
      v10 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v10.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      *(int32x4_t *)(v9 + 16) = v10;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v9 + 352) = a3;
      goto LABEL_13;
    }
    return 0;
  }
  if (!(_DWORD)a2)
  {
    v7 = *((_QWORD *)this + 51);
    if (*(float *)v7 != a3.n128_f32[0]
      || *(float *)(v7 + 4) != a3.n128_f32[0]
      || *(float *)(v7 + 8) != a3.n128_f32[0]
      || *(float *)(v7 + 12) != 0.0)
    {
      v8 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v8.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      *(int32x4_t *)v7 = v8;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v7 + 336) = a3;
LABEL_13:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcSimpleToneCurve::GetParameter(HgcSimpleToneCurve *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  uint64_t result;

  if (a2 == 1)
  {
    v5 = (float *)*((_QWORD *)this + 51);
    *a3 = v5[88];
    a3[1] = v5[89];
    a3[2] = v5[90];
    v4 = v5 + 91;
    goto LABEL_5;
  }
  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = v3[84];
    a3[1] = v3[85];
    a3[2] = v3[86];
    v4 = v3 + 87;
LABEL_5:
    result = 0;
    a3[3] = *v4;
    return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcRenderToEquirect::GetProgram(HgcRenderToEquirect *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return aMetal10Len0000_1314;
    else
      return aMetal10Len0000_1315;
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_487;
  }
}

void HgcRenderToEquirect::InitProgramDescriptor(HgcRenderToEquirect *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcRenderToEquirect_hgc_visible", aMetal10Len0000_1316);
}

void sub_1B2CC40B4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcRenderToEquirect");
}

void sub_1B2CC40C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3557D00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CC44C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CC4564()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CC455CLL);
}

_QWORD *HgcRenderToEquirect::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcRenderToEquirect [hgc1]");
}

uint64_t HgcRenderToEquirect::BindTexture(HgcRenderToEquirect *this, HGHandler *a2, int a3)
{
  int v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  void (*v9)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128);
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  HGHandler *v16;
  uint64_t v17;

  switch(a3)
  {
    case 0:
      v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      v7.n128_f32[0] = (float)*((int *)a2 + 60);
      v8.n128_f32[0] = (float)*((int *)a2 + 61);
      if (v4)
      {
        v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v5.n128_u32[0] = 1.0;
        v6.n128_u32[0] = 1.0;
      }
      else
      {
        v5.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
        v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
      }
      v16 = a2;
      v17 = 19;
      goto LABEL_27;
    case 1:
      v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      v7.n128_f32[0] = (float)*((int *)a2 + 60);
      v8.n128_f32[0] = (float)*((int *)a2 + 61);
      if (v11)
      {
        v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v5.n128_u32[0] = 1.0;
        v6.n128_u32[0] = 1.0;
      }
      else
      {
        v5.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
        v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
      }
      v16 = a2;
      v17 = 18;
      goto LABEL_27;
    case 2:
      v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      v7.n128_f32[0] = (float)*((int *)a2 + 60);
      v8.n128_f32[0] = (float)*((int *)a2 + 61);
      if (v12)
      {
        v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v5.n128_u32[0] = 1.0;
        v6.n128_u32[0] = 1.0;
      }
      else
      {
        v5.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
        v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
      }
      v16 = a2;
      v17 = 20;
      goto LABEL_27;
    case 3:
      v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      v7.n128_f32[0] = (float)*((int *)a2 + 60);
      v8.n128_f32[0] = (float)*((int *)a2 + 61);
      if (v13)
      {
        v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v5.n128_u32[0] = 1.0;
        v6.n128_u32[0] = 1.0;
      }
      else
      {
        v5.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
        v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
      }
      v16 = a2;
      v17 = 21;
      goto LABEL_27;
    case 4:
      v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      v7.n128_f32[0] = (float)*((int *)a2 + 60);
      v8.n128_f32[0] = (float)*((int *)a2 + 61);
      if (v14)
      {
        v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v5.n128_u32[0] = 1.0;
        v6.n128_u32[0] = 1.0;
      }
      else
      {
        v5.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
        v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
      }
      v16 = a2;
      v17 = 22;
      goto LABEL_27;
    case 5:
      v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      v7.n128_f32[0] = (float)*((int *)a2 + 60);
      v8.n128_f32[0] = (float)*((int *)a2 + 61);
      if (v15)
      {
        v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v5.n128_u32[0] = 1.0;
        v6.n128_u32[0] = 1.0;
      }
      else
      {
        v5.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
        v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
      }
      v16 = a2;
      v17 = 23;
LABEL_27:
      v9(v16, v17, v7, v8, v5, v6);
      result = 0;
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcRenderToEquirect::Bind(HgcRenderToEquirect *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, *((_QWORD *)this + 51) + 192, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 13, *((_QWORD *)this + 51) + 208, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 14, *((_QWORD *)this + 51) + 224, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 15, *((_QWORD *)this + 51) + 240, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 16, *((_QWORD *)this + 51) + 256, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 17, *((_QWORD *)this + 51) + 272, 1);
  (*(void (**)(HgcRenderToEquirect *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcRenderToEquirect::RenderTile(HgcRenderToEquirect *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  __int128 *v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  uint64_t v89;
  float32x4_t v90;
  uint64_t v91;
  int32x4_t v92;
  float32x2_t v93;
  float32x4_t *v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  float32x2_t v102;
  uint64_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  float32x4_t v109;
  int8x16_t v110;
  float32x4_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  uint64_t v117;
  float32x4_t v118;
  uint64_t v119;
  int32x4_t v120;
  float32x2_t v121;
  float32x4_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int32x4_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  float32x4_t v131;
  int8x16_t v132;
  int8x16_t v133;
  float32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  uint64_t v139;
  float32x4_t v140;
  uint64_t v141;
  int32x4_t v142;
  float32x2_t v143;
  float32x4_t *v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int32x4_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  uint64_t v153;
  float32x4_t v154;
  uint64_t v155;
  int32x4_t v156;
  float32x2_t v157;
  float32x4_t *v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  int32x4_t v162;
  int8x16_t v163;
  float32x4_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  float32x4_t v168;
  int8x16_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  uint64_t v179;
  float32x4_t v180;
  uint64_t v181;
  int32x4_t v182;
  float32x2_t v183;
  float32x4_t *v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  int32x4_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  float32x4_t v193;
  int8x16_t v194;
  float32x4_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  uint64_t v199;
  float32x4_t v200;
  uint64_t v201;
  int32x4_t v202;
  float32x2_t v203;
  float32x4_t *v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int32x4_t v208;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcRenderToEquirect *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = (float32x4_t)v9;
    do
    {
      if (v10 >= 1)
      {
        v15 = 0;
        v16 = v14;
        do
        {
          v17 = (__int128 *)*((_QWORD *)this + 51);
          v18 = (int8x16_t)*v17;
          v19 = (float32x4_t)vextq_s8(*((int8x16_t *)v17 + 1), *((int8x16_t *)v17 + 1), 8uLL);
          v20 = (float32x4_t)v17[18];
          v22 = (int8x16_t)v17[19];
          v21 = (float32x4_t)v17[20];
          v23 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v19), v20), (float32x4_t)v22), v21);
          v24 = (int8x16_t)vmulq_f32(v23, vrecpsq_f32(v19, v23));
          v25 = (float32x4_t)vextq_s8(*((int8x16_t *)v17 + 2), *((int8x16_t *)v17 + 2), 4uLL);
          v26 = vminq_f32(vmaxq_f32(vmulq_f32((float32x4_t)v22, vrecpeq_f32(v25)), v20), v21);
          v27 = (int8x16_t)vmulq_f32(v26, vrecpsq_f32(v25, v26));
          v28 = (int8x16_t)v17[21];
          v29 = (int8x16_t)v17[22];
          v30 = vbslq_s8(v28, v24, v27);
          v31 = (int8x16_t)vmulq_f32(v16, *((float32x4_t *)v17 + 4));
          v32 = (int8x16_t)vaddq_f32((float32x4_t)v31, (float32x4_t)vextq_s8(v31, v31, 4uLL));
          v32.i64[0] = vaddq_f32((float32x4_t)v32, (float32x4_t)vdupq_laneq_s64((int64x2_t)v32, 1)).u64[0];
          v32.i64[1] = v30.i64[1];
          v33 = (int8x16_t)vmulq_f32(v16, *((float32x4_t *)v17 + 3));
          v34 = (int8x16_t)vaddq_f32((float32x4_t)v33, (float32x4_t)vextq_s8(v33, v33, 4uLL));
          v35 = (float32x4_t)vbslq_s8(v29, (int8x16_t)vaddq_f32((float32x4_t)v34, (float32x4_t)vextq_s8(v34, v34, 8uLL)), v32);
          v36.i64[0] = vaddq_f32(*((float32x4_t *)v17 + 17), v35).u64[0];
          v36.i64[1] = v35.i64[1];
          v37 = (int8x16_t)vmulq_laneq_f32(v36, v35, 2);
          v38 = (float32x4_t)vbslq_s8(v29, v37, (int8x16_t)v36);
          v39 = (int8x16_t)vmulq_laneq_f32(v38, v38, 3);
          v22.i64[0] = vbslq_s8(v29, (int8x16_t)vaddq_f32(v20, vmulq_f32((float32x4_t)v22, (float32x4_t)vbslq_s8(v29, v37, v39))), v39).u64[0];
          v40 = (float32x4_t)v17[23];
          v41 = (int8x16_t)v17[24];
          v42 = vmulq_n_f32(v40, *(float *)v22.i32);
          v43 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
          v44 = vsubq_f32(v42, vsubq_f32(v43, (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v43, v42))));
          v45 = (float32x4_t)v17[25];
          v46 = (float32x4_t)v17[26];
          v47 = vsubq_f32(vabdq_f32(v44, v45), v46);
          v48 = vmulq_f32(v47, v47);
          v50 = (int8x16_t)v17[27];
          v49 = (float32x4_t)v17[28];
          v51 = (int8x16_t)v17[29];
          v52 = (int8x16_t)v17[30];
          v22.i64[1] = vmulq_f32(v47, vaddq_f32(*(float32x4_t *)&v52, vmulq_f32(v48, vaddq_f32(*(float32x4_t *)&v51, vmulq_f32(v48, vaddq_f32(v49, vmulq_f32(*(float32x4_t *)&v50, v48))))))).i64[1];
          v54 = (int8x16_t)v17[31];
          v53 = (float32x4_t)v17[32];
          v55 = vbslq_s8(v54, (int8x16_t)vmulq_laneq_f32((float32x4_t)v22, (float32x4_t)v52, 2), v22);
          v56 = vaddq_f32(v49, vmulq_lane_f32((float32x4_t)v51, *(float32x2_t *)v55.i8, 1));
          v57 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
          v58 = vaddq_f32(v49, vabdq_f32(vsubq_f32(v56, vsubq_f32(v57, (float32x4_t)vandq_s8(v50, (int8x16_t)vcgtq_f32(v57, v56)))), v46));
          v59 = vmulq_f32(v58, v58);
          v60 = vbslq_s8(v28, (int8x16_t)vmulq_f32(v58, vaddq_f32(v53, vmulq_f32(v59, vaddq_f32(v40, vmulq_f32(v59, vaddq_f32((float32x4_t)v41, vmulq_f32(v45, v59))))))), v55);
          v61 = vaddq_f32((float32x4_t)v52, vmulq_f32(v53, (float32x4_t)v60));
          v62 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
          v63 = vaddq_f32((float32x4_t)v52, vabdq_f32(vsubq_f32(v61, vsubq_f32(v62, (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v62, v61)))), v49));
          v64 = vmulq_f32(v63, v63);
          v65 = (float32x4_t)vbslq_s8(v29, (int8x16_t)vmulq_f32(v63, vaddq_f32((float32x4_t)v41, vmulq_f32(v64, vaddq_f32(v45, vmulq_f32(v64, vaddq_f32(v46, vmulq_f32((float32x4_t)v50, v64))))))), v60);
          v66 = vbslq_s8(v29, (int8x16_t)vmulq_laneq_f32(v65, v65, 2), v60);
          v66.i64[1] = vmulq_laneq_f32(*(float32x4_t *)&v66, *(float32x4_t *)&v66, 3).i64[1];
          v67 = vmulq_f32(v53, (float32x4_t)v66);
          v68 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
          v69 = vsubq_f32(vabdq_f32(vsubq_f32(v67, vsubq_f32(v68, (float32x4_t)vandq_s8(v52, (int8x16_t)vcgtq_f32(v68, v67)))), (float32x4_t)v51), v49);
          v70 = vmulq_f32(v69, v69);
          v71 = vbslq_s8(v54, (int8x16_t)vmulq_f32(v69, vaddq_f32((float32x4_t)v41, vmulq_f32(v70, vaddq_f32(v45, vmulq_f32(v70, vaddq_f32(v46, vmulq_f32((float32x4_t)v50, v70))))))), v66);
          v72 = (int8x16_t)vabsq_f32((float32x4_t)v71);
          v74 = (int8x16_t)v17[33];
          v73 = (int8x16_t)v17[34];
          v75 = (float32x4_t)vbslq_s8(v74, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v74, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8(v72, v72, 4uLL), (float32x4_t)vextq_s8(v72, v72, 8uLL)), v71), (float32x4_t)vrev64q_s32((int32x4_t)v72)), v71);
          v76 = vminq_f32(vmaxq_f32(vrecpeq_f32(v75), v53), v21);
          v77 = vminq_f32(vmaxq_f32(vmulq_f32(v76, vrecpsq_f32(v75, v76)), v53), v21);
          v78 = (float32x4_t)vbslq_s8(v74, (int8x16_t)vmulq_f32(v77, vrecpsq_f32(v75, v77)), v71);
          v79 = (int8x16_t)vmulq_laneq_f32(v78, v78, 3);
          v80 = vminq_f32(vmaxq_f32(vmulq_n_f32(v46, vaddq_f32((float32x4_t)v51, (float32x4_t)v79).f32[0]), (float32x4_t)v73), (float32x4_t)v50);
          v81.i64[0] = vsubq_f32((float32x4_t)v52, vminq_f32(vmaxq_f32(vmulq_n_f32((float32x4_t)v73, vaddq_f32((float32x4_t)v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.i8, 1)).f32[0]), v40), (float32x4_t)v52)).u64[0];
          v81.i64[1] = v80.i64[1];
          v82 = vbslq_s8(v74, (int8x16_t)vmulq_n_f32((float32x4_t)v73, COERCE_FLOAT(*v17)), v79);
          v83 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 3);
          v80.i64[0] = vsubq_f32(vmulq_n_f32((float32x4_t)vbslq_s8(v29, (int8x16_t)vsubq_f32((float32x4_t)v73, (float32x4_t)vdupq_laneq_s64((int64x2_t)v80, 1)), v81), COERCE_FLOAT(*v17)), v83).u64[0];
          v84 = (int8x16_t)v17[35];
          v80.i64[1] = *((_QWORD *)v17 + 71);
          v85 = (int8x16_t)vmulq_f32(*((float32x4_t *)v17 + 7), v80);
          v86 = (int8x16_t)vaddq_f32((float32x4_t)v85, (float32x4_t)vextq_s8(v85, v85, 4uLL));
          v87 = (int8x16_t)vmulq_f32(*((float32x4_t *)v17 + 8), v80);
          v88 = (int8x16_t)vaddq_f32((float32x4_t)v87, (float32x4_t)vextq_s8(v87, v87, 4uLL));
          v89 = *((int *)a2 + 26);
          v90 = vsubq_f32((float32x4_t)vbslq_s8(v29, (int8x16_t)vaddq_f32((float32x4_t)v86, (float32x4_t)vextq_s8(v86, v86, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v88, (float32x4_t)vextq_s8(v88, v88, 8uLL))), (float32x4_t)v9);
          v91 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v92 = vaddq_s32(vcvtq_s32_f32(v90), vcltzq_f32(v90));
            v93 = (float32x2_t)vsubq_f32(v90, vcvtq_f32_s32(v92)).u64[0];
            v94 = (float32x4_t *)(v91 + 16 * (v92.i32[0] + v92.i32[1] * (int)v89));
            v95 = vaddq_f32(*v94, vmulq_n_f32(vsubq_f32(v94[1], *v94), v93.f32[0]));
            v96 = vaddq_f32(v95, vmulq_lane_f32(vsubq_f32(vaddq_f32(v94[v89], vmulq_n_f32(vsubq_f32(v94[(int)v89 + 1], v94[v89]), v93.f32[0])), v95), v93, 1));
          }
          else
          {
            v97 = vaddq_f32(v90, v13);
            v98 = vcvtq_s32_f32(v97);
            v97.i64[0] = vaddq_s32(v98, vcgtq_f32(vcvtq_f32_s32(v98), v97)).u64[0];
            v96 = *(float32x4_t *)(v91 + 16 * (v97.i32[0] + v97.i32[1] * (int)v89));
          }
          v99 = vmvnq_s8(v29);
          v100 = vmvnq_s8(v74);
          v101 = vandq_s8(v51, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v79, v79, 8uLL), v40));
          v102 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)v18.i8, 0).u64[0];
          v103 = vextq_s8(v84, v84, 8uLL).u64[0];
          v104 = (float32x4_t)vorrq_s8(vandq_s8(vandq_s8(v84, v99), (int8x16_t)vcgeq_f32((float32x4_t)vrev64q_s32((int32x4_t)v101), (float32x4_t)v84)), vandq_s8(v101, v29));
          v105 = (float32x4_t)vextq_s8(v82, v82, 8uLL);
          v106 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32((float32x4_t)v84, v104), v99), vandq_s8(vandq_s8(v73, v29), (int8x16_t)vcgeq_f32(v105, (float32x4_t)v84)));
          v107 = vorrq_s8(vandq_s8(v29, (int8x16_t)vsubq_f32((float32x4_t)v73, v106)), vbicq_s8(v81, v29));
          v108 = vorrq_s8(vandq_s8(vextq_s8(v107, v107, 8uLL), v74), vandq_s8(v107, v100));
          *(float32x2_t *)v109.f32 = vsub_f32(vmul_f32(v102, (float32x2_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL)), *(float32x2_t *)v83.f32);
          v109.i64[1] = v103;
          v110 = (int8x16_t)vmulq_f32(v109, *((float32x4_t *)v17 + 6));
          v111 = vaddq_f32((float32x4_t)v110, (float32x4_t)vextq_s8(v110, v110, 4uLL));
          v112.i64[0] = v104.i64[0];
          v112.i64[1] = vaddq_f32(v111, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v111, 0)).i64[1];
          v113 = vmvnq_s8(v28);
          v114 = (int8x16_t)vmulq_f32(v109, *((float32x4_t *)v17 + 5));
          v115 = (int8x16_t)vaddq_f32((float32x4_t)v114, (float32x4_t)vextq_s8(v114, v114, 4uLL));
          v116 = vorrq_s8(vandq_s8(v112, v113), vandq_s8(v28, (int8x16_t)vaddq_f32((float32x4_t)v115, (float32x4_t)vextq_s8(v115, v115, 8uLL))));
          v117 = *((int *)a2 + 22);
          v118 = vsubq_f32((float32x4_t)vextq_s8(v116, v116, 8uLL), (float32x4_t)v9);
          v119 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v120 = vaddq_s32(vcvtq_s32_f32(v118), vcltzq_f32(v118));
            v121 = (float32x2_t)vsubq_f32(v118, vcvtq_f32_s32(v120)).u64[0];
            v122 = (float32x4_t *)(v119 + 16 * (v120.i32[0] + v120.i32[1] * (int)v117));
            v123 = vaddq_f32(*v122, vmulq_n_f32(vsubq_f32(v122[1], *v122), v121.f32[0]));
            v124 = vaddq_f32(v123, vmulq_lane_f32(vsubq_f32(vaddq_f32(v122[v117], vmulq_n_f32(vsubq_f32(v122[(int)v117 + 1], v122[v117]), v121.f32[0])), v123), v121, 1));
          }
          else
          {
            v125 = vaddq_f32(v118, v13);
            v126 = vcvtq_s32_f32(v125);
            v125.i64[0] = vaddq_s32(v126, vcgtq_f32(vcvtq_f32_s32(v126), v125)).u64[0];
            v124 = *(float32x4_t *)(v119 + 16 * (v125.i32[0] + v125.i32[1] * (int)v117));
          }
          v127 = vorrq_s8(vandq_s8(v29, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v104), (float32x4_t)v108)), vandq_s8(v108, v99));
          v128 = vorrq_s8(vandq_s8(vandq_s8(v84, v74), (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v127, v127, 4uLL), (float32x4_t)v84)), vandq_s8(v127, v100));
          v129 = (int8x16_t)v17[36];
          v130 = vorrq_s8(vandq_s8(v29, (int8x16_t)vminq_f32(vmaxq_f32(vmulq_lane_f32(vaddq_f32((float32x4_t)v73, v105), *(float32x2_t *)v73.i8, 1), (float32x4_t)v129), (float32x4_t)v73)), vandq_s8(v128, v99));
          v131 = (float32x4_t)vrev64q_s32((int32x4_t)v130);
          v132 = vandq_s8(v82, v113);
          v133 = vorrq_s8(vandq_s8(v28, (int8x16_t)vsubq_f32((float32x4_t)v129, v131)), v132);
          *(float32x2_t *)v134.f32 = vsub_f32(vmul_f32(v102, (float32x2_t)vorr_s8(vand_s8(*(int8x8_t *)v131.f32, *(int8x8_t *)v99.i8), vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL), *(int8x8_t *)v29.i8))), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v133, 3));
          v134.i64[1] = v103;
          v135 = (int8x16_t)vmulq_f32(*((float32x4_t *)v17 + 10), v134);
          v136 = (int8x16_t)vaddq_f32((float32x4_t)v135, (float32x4_t)vextq_s8(v135, v135, 4uLL));
          v137 = (int8x16_t)vmulq_f32(*((float32x4_t *)v17 + 9), v134);
          v138 = (int8x16_t)vaddq_f32((float32x4_t)v137, (float32x4_t)vextq_s8(v137, v137, 4uLL));
          v139 = *((int *)a2 + 30);
          v140 = vsubq_f32((float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)vaddq_f32((float32x4_t)v138, (float32x4_t)vextq_s8(v138, v138, 8uLL))), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)v136, (float32x4_t)vextq_s8(v136, v136, 8uLL)), v99)), (float32x4_t)v9);
          v141 = *((_QWORD *)a2 + 14);
          if (v5)
          {
            v142 = vaddq_s32(vcvtq_s32_f32(v140), vcltzq_f32(v140));
            v143 = (float32x2_t)vsubq_f32(v140, vcvtq_f32_s32(v142)).u64[0];
            v144 = (float32x4_t *)(v141 + 16 * (v142.i32[0] + v142.i32[1] * (int)v139));
            v145 = vaddq_f32(*v144, vmulq_n_f32(vsubq_f32(v144[1], *v144), v143.f32[0]));
            v146 = vaddq_f32(v145, vmulq_lane_f32(vsubq_f32(vaddq_f32(v144[v139], vmulq_n_f32(vsubq_f32(v144[(int)v139 + 1], v144[v139]), v143.f32[0])), v145), v143, 1));
          }
          else
          {
            v147 = vaddq_f32(v140, v13);
            v148 = vcvtq_s32_f32(v147);
            v147.i64[0] = vaddq_s32(v148, vcgtq_f32(vcvtq_f32_s32(v148), v147)).u64[0];
            v146 = *(float32x4_t *)(v141 + 16 * (v147.i32[0] + v147.i32[1] * (int)v139));
          }
          v149 = (int8x16_t)vmulq_f32(v134, *((float32x4_t *)v17 + 12));
          v150 = (int8x16_t)vaddq_f32((float32x4_t)v149, (float32x4_t)vextq_s8(v149, v149, 4uLL));
          v151 = (int8x16_t)vmulq_f32(v134, *((float32x4_t *)v17 + 11));
          v152 = (int8x16_t)vaddq_f32((float32x4_t)v151, (float32x4_t)vextq_s8(v151, v151, 4uLL));
          v153 = *((int *)a2 + 34);
          v154 = vsubq_f32((float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)vaddq_f32((float32x4_t)v152, (float32x4_t)vextq_s8(v152, v152, 8uLL))), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)v150, (float32x4_t)vextq_s8(v150, v150, 8uLL)), v99)), (float32x4_t)v9);
          v155 = *((_QWORD *)a2 + 16);
          if (v5)
          {
            v156 = vaddq_s32(vcvtq_s32_f32(v154), vcltzq_f32(v154));
            v157 = (float32x2_t)vsubq_f32(v154, vcvtq_f32_s32(v156)).u64[0];
            v158 = (float32x4_t *)(v155 + 16 * (v156.i32[0] + v156.i32[1] * (int)v153));
            v159 = vaddq_f32(*v158, vmulq_n_f32(vsubq_f32(v158[1], *v158), v157.f32[0]));
            v160 = vaddq_f32(v159, vmulq_lane_f32(vsubq_f32(vaddq_f32(v158[v153], vmulq_n_f32(vsubq_f32(v158[(int)v153 + 1], v158[v153]), v157.f32[0])), v159), v157, 1));
          }
          else
          {
            v161 = vaddq_f32(v154, v13);
            v162 = vcvtq_s32_f32(v161);
            v161.i64[0] = vaddq_s32(v162, vcgtq_f32(vcvtq_f32_s32(v162), v161)).u64[0];
            v160 = *(float32x4_t *)(v155 + 16 * (v161.i32[0] + v161.i32[1] * (int)v153));
          }
          v163 = (int8x16_t)v17[37];
          v164 = (float32x4_t)vorrq_s8(vandq_s8(vandq_s8(v129, v28), (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v133, v133, 0xCuLL), (float32x4_t)v163)), v132);
          v165 = (int8x16_t)vaddq_f32(v131, v164);
          v165.i64[0] = vandq_s8(v163, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v165, v165, 8uLL), (float32x4_t)v163)).u64[0];
          v165.i64[1] = vsubq_f32(*(float32x4_t *)&v129, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v165, 0)).i64[1];
          v166 = vmvnq_s8(v54);
          v167 = vandq_s8(v165, v166);
          v168 = (float32x4_t)vorrq_s8(vandq_s8(v54, (int8x16_t)vsubq_f32((float32x4_t)v129, (float32x4_t)vorrq_s8(v167, vandq_s8(vandq_s8(v129, v54), (int8x16_t)vcgeq_f32(v164, (float32x4_t)v163))))), v167);
          *(float32x2_t *)v169.i8 = vsub_f32(*(float32x2_t *)v163.i8, *(float32x2_t *)v130.i8);
          v169.i64[1] = v103;
          v170 = (float32x4_t)vorrq_s8(vandq_s8(v169, v166), vandq_s8(v130, v54));
          v171 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v164, 3);
          v172.i64[0] = vsubq_f32(vmulq_n_f32(v170, *(float *)v18.i32), v171).u64[0];
          v172.i64[1] = v170.i64[1];
          v173 = (int8x16_t)vmulq_f32(v172, *((float32x4_t *)v17 + 14));
          v174 = (int8x16_t)vaddq_f32((float32x4_t)v173, (float32x4_t)vextq_s8(v173, v173, 4uLL));
          v174.i64[0] = vaddq_f32((float32x4_t)v174, (float32x4_t)vdupq_laneq_s64((int64x2_t)v174, 1)).u64[0];
          v175 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v168), v168);
          v174.i64[1] = vandq_s8(v129, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v175, v175, 8uLL), *(float32x4_t *)&v129)).i64[1];
          v176 = (int8x16_t)vmulq_f32(v172, *((float32x4_t *)v17 + 13));
          v177 = (int8x16_t)vaddq_f32((float32x4_t)v176, (float32x4_t)vextq_s8(v176, v176, 4uLL));
          v178 = vorrq_s8(vandq_s8(v174, v99), vandq_s8(v29, (int8x16_t)vaddq_f32((float32x4_t)v177, (float32x4_t)vextq_s8(v177, v177, 8uLL))));
          v179 = *((int *)a2 + 38);
          v180 = vsubq_f32((float32x4_t)v178, (float32x4_t)v9);
          v181 = *((_QWORD *)a2 + 18);
          if (v5)
          {
            v182 = vaddq_s32(vcvtq_s32_f32(v180), vcltzq_f32(v180));
            v183 = (float32x2_t)vsubq_f32(v180, vcvtq_f32_s32(v182)).u64[0];
            v184 = (float32x4_t *)(v181 + 16 * (v182.i32[0] + v182.i32[1] * (int)v179));
            v185 = vaddq_f32(*v184, vmulq_n_f32(vsubq_f32(v184[1], *v184), v183.f32[0]));
            v186 = vaddq_f32(v185, vmulq_lane_f32(vsubq_f32(vaddq_f32(v184[v179], vmulq_n_f32(vsubq_f32(v184[(int)v179 + 1], v184[v179]), v183.f32[0])), v185), v183, 1));
          }
          else
          {
            v187 = vaddq_f32(v180, v13);
            v188 = vcvtq_s32_f32(v187);
            v187.i64[0] = vaddq_s32(v188, vcgtq_f32(vcvtq_f32_s32(v188), v187)).u64[0];
            v186 = *(float32x4_t *)(v181 + 16 * (v187.i32[0] + v187.i32[1] * (int)v179));
          }
          v189.i64[0] = vsubq_f32((float32x4_t)v129, (float32x4_t)vextq_s8(v178, v9, 4uLL)).u64[0];
          v189.i64[1] = v178.i64[1];
          v190 = vandq_s8(v163, v29);
          v191 = vorrq_s8(vandq_s8(v189, v99), vandq_s8(v190, (int8x16_t)vcgeq_f32(v164, v40)));
          v192.i64[0] = vorrq_s8(vandq_s8((int8x16_t)vsubq_f32((float32x4_t)v129, (float32x4_t)vrev64q_s32((int32x4_t)vandq_s8(v163, (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)vextq_s8(v191, v191, 4uLL)), (float32x4_t)v191), (float32x4_t)v163)))), v99), vandq_s8(v190, (int8x16_t)vcgeq_f32(v164, (float32x4_t)v84))).u64[0];
          *(float32x2_t *)v193.f32 = vsub_f32(vmul_f32(v102, *(float32x2_t *)v130.i8), *(float32x2_t *)v171.f32);
          v193.i64[1] = v103;
          v194 = (int8x16_t)vmulq_f32(v193, *((float32x4_t *)v17 + 16));
          v195 = vaddq_f32((float32x4_t)v194, (float32x4_t)vextq_s8(v194, v194, 4uLL));
          v192.i64[1] = vaddq_f32(v195, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v195, 0)).i64[1];
          v196 = (int8x16_t)vmulq_f32(v193, *((float32x4_t *)v17 + 15));
          v197 = (int8x16_t)vaddq_f32((float32x4_t)v196, (float32x4_t)vextq_s8(v196, v196, 4uLL));
          v198 = vorrq_s8(vandq_s8(v192, v113), vandq_s8(v28, (int8x16_t)vaddq_f32((float32x4_t)v197, (float32x4_t)vextq_s8(v197, v197, 8uLL))));
          v199 = *((int *)a2 + 42);
          v200 = vsubq_f32((float32x4_t)vextq_s8(v198, v198, 8uLL), (float32x4_t)v9);
          v201 = *((_QWORD *)a2 + 20);
          if (v5)
          {
            v202 = vaddq_s32(vcvtq_s32_f32(v200), vcltzq_f32(v200));
            v203 = (float32x2_t)vsubq_f32(v200, vcvtq_f32_s32(v202)).u64[0];
            v204 = (float32x4_t *)(v201 + 16 * (v202.i32[0] + v202.i32[1] * (int)v199));
            v205 = vaddq_f32(*v204, vmulq_n_f32(vsubq_f32(v204[1], *v204), v203.f32[0]));
            v206 = vaddq_f32(v205, vmulq_lane_f32(vsubq_f32(vaddq_f32(v204[v199], vmulq_n_f32(vsubq_f32(v204[(int)v199 + 1], v204[v199]), v203.f32[0])), v205), v203, 1));
          }
          else
          {
            v207 = vaddq_f32(v200, v13);
            v208 = vcvtq_s32_f32(v207);
            v207.i64[0] = vaddq_s32(v208, vcgtq_f32(vcvtq_f32_s32(v208), v207)).u64[0];
            v206 = *(float32x4_t *)(v201 + 16 * (v207.i32[0] + v207.i32[1] * (int)v199));
          }
          *(float32x4_t *)(v11 + v15) = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(vmulq_lane_f32(v96, *(float32x2_t *)v106.f32, 1), *(float *)v107.i32), vmulq_n_f32(v124, *(float *)v116.i32)), vmulq_laneq_f32(vmulq_laneq_f32(v146, (float32x4_t)v133, 2), v164, 2)), vmulq_lane_f32(vmulq_laneq_f32(v160, v168, 2), *(float32x2_t *)v168.f32, 1)), vmulq_n_f32(vmulq_lane_f32(v186, *(float32x2_t *)v191.i8, 1), *(float *)v191.i32)), vmulq_n_f32(vmulq_lane_f32(v206, *(float32x2_t *)v198.i8, 1), vsubq_f32((float32x4_t)v163, (float32x4_t)v198).f32[0]));
          v16 = vaddq_f32(v16, (float32x4_t)xmmword_1B304F230);
          v15 += 16;
        }
        while (16 * v10 != v15);
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v11 += v12;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcRenderToEquirect::GetDOD(HgcRenderToEquirect *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      if ((*(int (**)(HgcRenderToEquirect *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) <= 0)
        goto LABEL_4;
      goto LABEL_3;
    case 5:
      if ((*(int (**)(HgcRenderToEquirect *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
      {
LABEL_3:
        v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
        HGRectGrow(v5, v4, v6);
      }
LABEL_4:
      v7 = &HGRectInfinite;
      break;
    default:
      v7 = &HGRectNull;
      break;
  }
  return *(_QWORD *)v7;
}

uint64_t HgcRenderToEquirect::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGRenderer *v6;
  HGNode *v7;
  unsigned int v8;
  uint64_t DOD;
  HGNode *Input;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  switch(a3)
  {
    case 0:
      v6 = a2;
      v7 = this;
      v8 = 0;
      goto LABEL_9;
    case 1:
      v6 = a2;
      v7 = this;
      v8 = 1;
      goto LABEL_9;
    case 2:
      v6 = a2;
      v7 = this;
      v8 = 2;
      goto LABEL_9;
    case 3:
      v6 = a2;
      v7 = this;
      v8 = 3;
      goto LABEL_9;
    case 4:
      v6 = a2;
      v7 = this;
      v8 = 4;
      goto LABEL_9;
    case 5:
      v6 = a2;
      v7 = this;
      v8 = 5;
LABEL_9:
      Input = HGRenderer::GetInput(v6, v7, v8);
      DOD = HGRenderer::GetDOD(a2, Input);
      v12 = v11;
      if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
      {
        v13 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
        DOD = HGRectGrow(DOD, v12, v13);
      }
      break;
    default:
      DOD = 0;
      break;
  }
  return DOD;
}

void HgcRenderToEquirect::HgcRenderToEquirect(HgcRenderToEquirect *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6565F20;
  v3 = operator new();
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 288) = xmmword_1B3557D10;
  *(_OWORD *)(v3 + 304) = xmmword_1B3557D20;
  *(int32x4_t *)(v3 + 320) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 336) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 352) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 368) = xmmword_1B3557D30;
  *(_OWORD *)(v3 + 384) = xmmword_1B3557D40;
  *(_OWORD *)(v3 + 400) = xmmword_1B3557D50;
  *(_OWORD *)(v3 + 416) = xmmword_1B3557D60;
  *(_OWORD *)(v3 + 432) = xmmword_1B3557D70;
  *(_OWORD *)(v3 + 448) = xmmword_1B3557D80;
  *(_OWORD *)(v3 + 464) = xmmword_1B3557D90;
  *(_OWORD *)(v3 + 480) = xmmword_1B3557DA0;
  *(_OWORD *)(v3 + 496) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 512) = xmmword_1B3557DB0;
  *(_OWORD *)(v3 + 528) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 544) = xmmword_1B3557DC0;
  *(_OWORD *)(v3 + 560) = xmmword_1B3557DD0;
  *(_OWORD *)(v3 + 576) = xmmword_1B3557DE0;
  *(_OWORD *)(v3 + 592) = xmmword_1B3557DF0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  (*(void (**)(HgcRenderToEquirect *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  (*(void (**)(HgcRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 2, 1);
  (*(void (**)(HgcRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 3, 1);
  (*(void (**)(HgcRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 4, 1);
  (*(void (**)(HgcRenderToEquirect *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 5, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2CC5950(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcRenderToEquirect::~HgcRenderToEquirect(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6565F20;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C404B930091);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcRenderToEquirect::~HgcRenderToEquirect(this);
  HGObject::operator delete(v1);
}

uint64_t HgcRenderToEquirect::SetParameter(HgcRenderToEquirect *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 0x11)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcRenderToEquirect::GetParameter(HgcRenderToEquirect *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 0x11)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *LiHgcEquirectProject::GetProgram(LiHgcEquirectProject *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return aMetal10Len0000_1317;
    else
      return aMetal10Len0000_1318;
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_488;
  }
}

void LiHgcEquirectProject::InitProgramDescriptor(LiHgcEquirectProject *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHgcEquirectProject_hgc_visible", "//Metal1.0     \n//LEN=0000000f88\n[[ visible ]] FragmentOut LiHgcEquirectProject_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(-0.01348046958, 0.05747731403, -0.1212390736, 1.000000000);\n"
    "    const float4 c1 = float4(-0.3329946101, 0.1956359297, 0.9999956489, 1.570796371);\n"
    "    const float4 c2 = float4(0.000000000, -0.01872929931, 0.07426100224, 3.141592741);\n"
    "    const float4 c3 = float4(0.1591549367, -0.2121143937, 0.5000000000, 1.570728779);\n"
    "    const float4 c4 = float4(-0.3183098733, 0.5000000000, -2.000000000, -0.5000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = c0.w;\n"
    "    r1.x = dot(texCoord0, hg_Params[6]);\n"
    "    r1.z = hg_Params[2].z;\n"
    "    r1.y = dot(texCoord0, hg_Params[7]);\n"
    "    r1.xyz = normalize(r1.xyz).xyz;\n"
    "    r2.y = dot(r1.xyz, hg_Params[3].xyz);\n"
    "    r1.w = dot(r1.xyz, hg_Params[5].xyz);\n"
    "    r1.y = dot(r1.xyz, hg_Params[4].xyz);\n"
    "    r1.z = abs(r1.y);\n"
    "    r2.x = abs(r1.w);\n"
    "    r2.z = abs(r2.y);\n"
    "    r2.w = fmax(r2.x, r2.z);\n"
    "    r3.x = 1.00000f / r2.w;\n"
    "    r2.w = fmin(r2.x, r2.z);\n"
    "    r2.w = r2.w*r3.x;\n"
    "    r3.x = r2.w*r2.w;\n"
    "    r3.y = r3.x*c0.x + c0.y;\n"
    "    r3.y = r3.y*r3.x + c0.z;\n"
    "    r3.y = r3.y*r3.x + c1.y;\n"
    "    r3.y = r3.y*r3.x + c1.x;\n"
    "    r3.x = r3.y*r3.x + c1.z;\n"
    "    r2.w = r3.x*r2.w;\n"
    "    r2.z = r2.x - r2.z;\n"
    "    r3.x = c1.w - r2.w;\n"
    "    r2.z = select(r2.w, r3.x, r2.z < 0.00000f);\n"
    "    r2.w = -r2.z + c2.w;\n"
    "    r1.w = select(r2.z, r2.w, r1.w < 0.00000f);\n"
    "    r1.w = select(r1.w, -r1.w, r2.y < 0.00000f);\n"
    "    r2.z = c0.w - r1.z;\n"
    "    r2.x = float(-r2.x >= c2.x);\n"
    "    r1.x = 1.00000f / hg_Params[0].x;\n"
    "    r2.y = select(c1.w, -c1.w, r2.y < 0.00000f);\n"
    "    r1.w = select(r1.w, r2.y, -r2.x < 0.00000f);\n"
    "    r2.y = r1.z*c2.y + c2.z;\n"
    "    r2.y = r2.y*r1.z + c3.y;\n"
    "    r1.w = r1.w*hg_Params[0].x;\n"
    "    r1.w = r1.w*c3.x;\n"
    "    r3.y = r1.w - c3.z;\n"
    "    r2.x = floor(r3.y);\n"
    "    r2.x = hg_Params[0].x*-c3.z + r2.x;\n"
    "    r2.x = r2.x + c3.z;\n"
    "    r2.w = r2.x*r1.x;\n"
    "    r2.z = sqrt(r2.z);\n"
    "    r1.z = r2.y*r1.z + c3.w;\n"
    "    r1.z = r1.z*r2.z;\n"
    "    r2.z = floor(r2.w);\n"
    "    r2.x = -r2.z*hg_Params[0].x + r2.x;\n"
    "    r1.y = float(r1.y < c2.x);\n"
    "    r2.y = r1.y*r1.z;\n"
    "    r1.z = r2.y*c4.z + r1.z;\n"
    "    r1.y = r1.y*c2.w + r1.z;\n"
    "    r2.x = hg_Params[0].x*-c3.z + r2.x;\n"
    "    r1.z = hg_Params[0].x*-c3.z + r2.x;\n"
    "    r1.y = r1.y*hg_Params[1].x;\n"
    "    r4.x = r1.y*c4.x;\n"
    "    r4.x = hg_Params[1].x*c3.z + r4.x;\n"
    "    r1.z = r1.z + c0.w;\n"
    "    r3.x = r4.x - c3.z;\n"
    "    r4.x = r1.z*r1.x;\n"
    "    r1.x = floor(r3.x);\n"
    "    r4.y = r1.x + c3.z;\n"
    "    r1.xy = hg_Params[1].xx*c4.yw + c4.wy;\n"
    "    r4.x = floor(r4.x);\n"
    "    r4.x = -r4.x*hg_Params[0].x + r1.z;\n"
    "    r4.x = hg_Params[0].x*c4.w + r4.x;\n"
    "    r0.x = r4.x;\n"
    "    r4.y = fmin(r1.x, r4.y);\n"
    "    r4.y = fmax(r1.y, r4.y);\n"
    "    r1.z = r4.y + c0.w;\n"
    "    r1.z = fmin(r1.z, r1.x);\n"
    "    r4.z = fmax(r1.z, r1.y);\n"
    "    r0.y = r4.z;\n"
    "    r1.y = r4.z;\n"
    "    r1.x = r2.x;\n"
    "    r1.w = c0.w;\n"
    "    r2.y = r4.y;\n"
    "    r2.w = dot(r1.xyw, hg_Params[9].xyw);\n"
    "    r2.z = dot(r1.xyw, hg_Params[8].xyw);\n"
    "    r1.xy = r2.zw + hg_Params[10].xy;\n"
    "    r1.xy = r1.xy*hg_Params[10].zw;\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    r4.w = dot(r0.xyw, hg_Params[9].xyw);\n"
    "    r4.z = dot(r0.xyw, hg_Params[8].xyw);\n"
    "    r0.xy = r4.zw + hg_Params[10].xy;\n"
    "    r0.xy = r0.xy*hg_Params[10].zw;\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    r2.w = c0.w;\n"
    "    r4.w = dot(r2.xyw, hg_Params[9].xyw);\n"
    "    r4.z = dot(r2.xyw, hg_Params[8].xyw);\n"
    "    r2.xy = r4.zw + hg_Params[10].xy;\n"
    "    r2.xy = r2.xy*hg_Params[10].zw;\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
    "    r4.w = c0.w;\n"
    "    r3.y = fract(r3.y);\n"
    "    r3.w = dot(r4.xyw, hg_Params[9].xyw);\n"
    "    r3.z = dot(r4.xyw, hg_Params[8].xyw);\n"
    "    r4.xy = r3.zw + hg_Params[10].xy;\n"
    "    r4.xy = r4.xy*hg_Params[10].zw;\n"
    "    r4 = hg_Texture0.sample(hg_Sampler0, r4.xy);\n"
    "    r4 = mix(r2, r4, r3.yyyy);\n"
    "    r1 = mix(r1, r0, r3.yyyy);\n"
    "    r3.x = fract(r3.x);\n"
    "    output.color0 = mix(r4, r1, r3.xxxx);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CC5B58()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHgcEquirectProject");
}

void sub_1B2CC5B68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514D0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CC5CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CC5D38()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CC5D30);
}

_QWORD *LiHgcEquirectProject::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHgcEquirectProject [hgc1]");
}

uint64_t LiHgcEquirectProject::BindTexture(LiHgcEquirectProject *this, HGHandler *a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
    v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
  }
  v5.n128_f32[0] = (float)*((int *)a2 + 60);
  v6.n128_f32[0] = (float)*((int *)a2 + 61);
  (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 10, v5, v6, v7, v8);
  return 0;
}

uint64_t LiHgcEquirectProject::Bind(LiHgcEquirectProject *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(LiHgcEquirectProject *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHgcEquirectProject::RenderTile(LiHgcEquirectProject *this, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  float32x4_t v5;
  int v6;
  int32x2_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  _OWORD *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x8_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  int64x2_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int8x16_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int8x16_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  float32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int8x16_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int32x2_t v131;
  int8x16_t v132;
  float32x4_t v133;
  int32x4_t v134;
  int8x16_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  __int32 v139;
  __int32 v140;
  int32x4_t v141;
  __int32 v142;
  float32x4_t v143;
  int8x16_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  int32x4_t v149;
  int8x16_t v150;
  float32x4_t v151;
  int8x16_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  int32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    v6 = a2[1].i32[0] - v2.i32[0];
    v7 = a2[2];
    v8 = 16 * a2[3].i32[0];
    v9.i64[0] = 0x3F0000003F000000;
    v9.i64[1] = 0x3F0000003F000000;
    v10 = v5;
    do
    {
      if (v6 >= 1)
      {
        v11 = 0;
        v12 = v10;
        do
        {
          v13 = (_OWORD *)*((_QWORD *)this + 51);
          v14 = vmulq_f32(v12, *((float32x4_t *)v13 + 6));
          v15 = vaddq_f32(v14, (float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL));
          v15.i64[0] = vaddq_f32(v15, (float32x4_t)vdupq_laneq_s64((int64x2_t)v15, 1)).u64[0];
          v15.i64[1] = *((_QWORD *)v13 + 5);
          v16 = vmulq_f32(v12, *((float32x4_t *)v13 + 7));
          v17 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          v19 = *((float32x4_t *)v13 + 10);
          v18 = *((int8x16_t *)v13 + 11);
          v20 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)), (int8x16_t)v15);
          v21 = (int32x4_t)vmulq_f32(v20, v20);
          v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v21, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 1)));
          v23 = vminq_f32(vrsqrteq_f32(v22), v19);
          v24 = vminq_f32(vmulq_f32(v23, vrsqrtsq_f32(vmulq_f32(v23, v22), v23)), v19);
          v25 = vmulq_f32(vmulq_f32(v24, vrsqrtsq_f32(vmulq_f32(v24, v22), v24)), v20);
          v26 = vmulq_f32(*((float32x4_t *)v13 + 3), v25);
          v27 = (int32x4_t)vmulq_f32(*((float32x4_t *)v13 + 5), v25);
          v28 = *((int8x16_t *)v13 + 12);
          v29 = *((int32x4_t *)v13 + 13);
          v30 = (float32x4_t)vbslq_s8(v28, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v27), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL))), (int8x16_t)v25);
          v31 = (int8x16_t)vmulq_f32(*((float32x4_t *)v13 + 4), v30);
          *(float32x2_t *)v31.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, (int8x16_t)v5, 4uLL), vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)vrev64_s32(*(int32x2_t *)v31.i8)));
          v31.i64[1] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
          v32 = (int8x8_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
          *(int8x8_t *)v33.i8 = vqtbl1_s8(v31, *(int8x8_t *)v29.i8);
          v33.u64[1] = (unint64_t)vqtbl1_s8(v31, v32);
          v35 = *((int8x16_t *)v13 + 14);
          v34 = *((int8x16_t *)v13 + 15);
          v36 = (float32x4_t)vandq_s8(v33, v35);
          v37 = vbslq_s8(v34, (int8x16_t)vabsq_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 0xCuLL)), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL), vaddq_f32(v26, (float32x4_t)vrev64q_s32((int32x4_t)v26))));
          *(int8x8_t *)v29.i8 = vqtbl1_s8(v37, *(int8x8_t *)v29.i8);
          v33.i64[0] = v29.i64[0];
          v33.u64[1] = (unint64_t)vand_s8(vqtbl1_s8(v37, v32), (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
          *(int8x8_t *)v38.f32 = vext_s8(*(int8x8_t *)v29.i8, (int8x8_t)v33.u64[1], 4uLL);
          *(int8x8_t *)&v38.u32[2] = vext_s8((int8x8_t)v33.u64[1], *(int8x8_t *)v29.i8, 4uLL);
          v29.i64[1] = v33.i64[1];
          v39 = (int32x4_t)vbslq_s8(v28, (int8x16_t)vmaxq_f32(v38, (float32x4_t)vrev64q_s32(v29)), v33);
          v40 = (float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 0xCuLL);
          v41 = *((float32x4_t *)v13 + 16);
          v42 = *((float32x4_t *)v13 + 17);
          v43 = vminq_f32(vmaxq_f32(vrecpeq_f32(v40), v41), v42);
          v44 = vminq_f32(vmaxq_f32(vmulq_f32(v43, vrecpsq_f32(v40, v43)), v41), v42);
          v45 = (float32x4_t)vbslq_s8(v28, (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v28, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 4uLL), (float32x4_t)vrev64q_s32(v39)), v33), vmulq_f32(v44, vrecpsq_f32(v40, v44)).f32[0]), v33);
          v46 = (int32x4_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 0xCuLL), v45, 3);
          v47 = *((float32x4_t *)v13 + 18);
          v48 = *((float32x4_t *)v13 + 19);
          v49 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v46, (int8x16_t)vaddq_f32(v41, vmulq_f32(v47, (float32x4_t)vrev64q_s32(v46))));
          v50 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v46, (int8x16_t)vaddq_f32(v48, vmulq_n_f32(v49, v49.f32[0])));
          v51 = *((float32x4_t *)v13 + 20);
          v52 = *((float32x4_t *)v13 + 21);
          v53 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v46, (int8x16_t)vaddq_f32(v51, vmulq_n_f32(v50, v50.f32[0])));
          v54 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v46, (int8x16_t)vaddq_f32(v52, vmulq_n_f32(v53, v53.f32[0])));
          v55 = (float32x4_t)vbslq_s8(v28, (int8x16_t)vmulq_n_f32(v45, vaddq_f32(v52, vmulq_lane_f32(v54, *(float32x2_t *)v54.f32, 1)).f32[0]), v33);
          v56 = *((int8x16_t *)v13 + 22);
          v57 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), v55), (int8x16_t)v55);
          v58 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v57), (int8x16_t)vdupq_lane_s64(vsubq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 0xCuLL)).i64[0], 0), (int8x16_t)vrev64q_s32((int32x4_t)v57));
          v59.i64[0] = v57.i64[0];
          v59.i64[1] = vdupq_laneq_s64(v58, 1).u64[0];
          v57.i64[1] = v58.i64[1];
          v60 = (float32x4_t)vbslq_s8(v28, (int8x16_t)vsubq_f32(v52, (float32x4_t)vrev64q_s32(v59)), (int8x16_t)v57);
          v61 = (float32x4_t)vbslq_s8(v28, veorq_s8(vbslq_s8(v28, vbslq_s8((int8x16_t)vcgtq_f32(v51, v36), (int8x16_t)v60, (int8x16_t)vrev64q_s32((int32x4_t)v60)), (int8x16_t)v36), vandq_s8(vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL), *((int8x16_t *)v13 + 23))), (int8x16_t)v36);
          v60.i64[1] = vsubq_f32(v51, v61).i64[1];
          v62 = (int8x16_t)vcgeq_f32(vnegq_f32(v60), v48);
          v63 = *((float32x4_t *)v13 + 1);
          v64 = *((float32x4_t *)v13 + 24);
          v65 = *((float32x4_t *)v13 + 25);
          v66 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(*(float32x4_t *)v13), v64), v41), v42);
          v67 = (float32x4_t)vbslq_s8(v34, vandq_s8((int8x16_t)v47, v62), (int8x16_t)v60);
          v68 = *((float32x4_t *)v13 + 26);
          v69 = *((float32x4_t *)v13 + 27);
          v70 = vbslq_s8(v18, vbslq_s8((int8x16_t)vcgtq_f32(v68, v67), (int8x16_t)v65, (int8x16_t)v64), (int8x16_t)v67);
          v71 = vbslq_s8(v34, (int8x16_t)vmulq_f32(v66, vrecpsq_f32(*(float32x4_t *)v13, v66)), (int8x16_t)v61);
          v72 = (float32x4_t)vbslq_s8(v28, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v70, v70, 4uLL), v68), vextq_s8(v70, v70, 8uLL), v71), v71);
          v73 = *((float32x4_t *)v13 + 28);
          v74 = *((float32x4_t *)v13 + 29);
          v75 = vmulq_laneq_f32(vaddq_f32(v69, vmulq_f32(v73, (float32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v5, 4uLL))), v72, 2);
          v76 = (float32x4_t)vbslq_s8(v28, (int8x16_t)vmulq_n_f32(v72, COERCE_FLOAT(*v13)), v71);
          v78 = *((float32x4_t *)v13 + 30);
          v77 = *((float32x4_t *)v13 + 31);
          v79 = (float32x4_t)vbslq_s8(v28, (int8x16_t)vmulq_f32(v78, v76), v71);
          v76.i64[0] = vaddq_f32(v74, v75).u64[0];
          v80 = (int32x4_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL), v77);
          v81 = (float32x4_t)vrev64q_s32(v80);
          v76.i64[1] = v70.i64[1];
          v82 = vcvtq_f32_s32(vcvtq_s32_f32(v81));
          v83 = (int8x16_t)vsubq_f32(v82, (float32x4_t)vandq_s8((int8x16_t)v77, (int8x16_t)vcgtq_f32(v82, v81)));
          v84 = vmulq_laneq_f32(*(float32x4_t *)v13, v77, 2);
          v85 = vbslq_s8(v34, (int8x16_t)vaddq_f32(v68, (float32x4_t)vbslq_s8(v34, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v34, v83, (int8x16_t)v76), v84), (int8x16_t)v76)), (int8x16_t)v76);
          v86 = (float32x4_t)vbslq_s8(v28, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 4uLL), *(float *)v85.i32), v85);
          v87 = vminq_f32(vrsqrteq_f32(v86), v74);
          v88 = vminq_f32(vmulq_f32(v87, vrsqrtsq_f32(vmulq_f32(v87, v86), v87)), v74);
          v89 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v88, vrsqrtsq_f32(vmulq_f32(v88, v86), v88)), v74), v86), (int8x16_t)v86);
          v79.i64[1] = vmulq_f32(vaddq_f32(v73, vmulq_lane_f32(v79, *(float32x2_t *)&v89, 1)), v89).i64[1];
          v90 = (float32x4_t)vrev64q_s32((int32x4_t)v89);
          v91 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
          v92 = vsubq_f32(v91, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v91, v90), (int8x16_t)v78, (int8x16_t)0));
          v89.i64[1] = v92.i64[1];
          v93 = (float32x4_t)vbslq_s8(v18, vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v68, v79)), (int8x16_t)v79);
          v94 = (float32x4_t)vbslq_s8(v34, (int8x16_t)vsubq_f32(v89, vmulq_laneq_f32(*(float32x4_t *)v13, v92, 2)), (int8x16_t)vmulq_laneq_f32(v93, v93, 2));
          v95 = vaddq_f32(vmulq_lane_f32(v69, *(float32x2_t *)v94.f32, 1), v93);
          v92.i64[0] = v93.i64[0];
          v92.i64[1] = v95.i64[1];
          *(int8x8_t *)v95.f32 = vext_s8(*(int8x8_t *)v93.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL), 4uLL);
          v96 = vsubq_f32(v94, v84);
          v93.i64[0] = vbslq_s8(v34, (int8x16_t)v93, (int8x16_t)vaddq_f32(v95, vmulq_laneq_f32(v92, v77, 3))).u64[0];
          v93.i64[1] = vsubq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v96, 0), vmulq_n_f32(v77, COERCE_FLOAT(*v13))).i64[1];
          v97 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vmulq_n_f32(v93, v63.f32[0]), (int8x16_t)v93);
          v98 = vaddq_f32(vmulq_laneq_f32(v63, v77, 2), vmulq_f32(v74, (float32x4_t)vrev64q_s32((int32x4_t)v97)));
          v99 = vaddq_f32(v65, v97);
          v100 = (int8x16_t)vsubq_f32(v98, v73);
          v97.i64[1] = v99.i64[1];
          v101 = (float32x4_t)vbslq_s8(v34, v100, (int8x16_t)v80);
          v102 = vcvtq_f32_s32(vcvtq_s32_f32(v101));
          v103 = (float32x4_t)vcgtq_f32(v102, v101);
          v73.i64[0] = vsubq_f32(v102, (float32x4_t)vandq_s8((int8x16_t)v103, (int8x16_t)v77)).u64[0];
          v65.i64[0] = vdupq_laneq_s64((int64x2_t)v99, 1).u64[0];
          v73.i64[1] = v65.i64[0];
          v104 = (int8x16_t)vaddq_f32(v77, (float32x4_t)vrev64q_s32((int32x4_t)v73));
          v105 = (float32x4_t)vbslq_s8(v34, (int8x16_t)vmulq_laneq_f32(v97, v99, 2), v104);
          v106 = *((float32x4_t *)v13 + 32);
          v107 = *((float32x4_t *)v13 + 33);
          v108 = vaddq_f32(v106, vmulq_n_f32(v107, v63.f32[0]));
          v109 = vcvtq_f32_s32(vcvtq_s32_f32(v105));
          v110 = vsubq_f32(v109, (float32x4_t)vandq_s8((int8x16_t)v77, (int8x16_t)vcgtq_f32(v109, v105)));
          v109.i64[0] = v108.i64[0];
          v111 = (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v34, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v99, (int8x16_t)v108, 8uLL), vmulq_f32(*(float32x4_t *)v13, (float32x4_t)vbslq_s8(v34, (int8x16_t)v110, v104))), v104), vmulq_laneq_f32(*(float32x4_t *)v13, v107, 2));
          v110.i64[0] = v108.i64[0];
          v110.i64[1] = v65.i64[0];
          v109.i64[1] = v99.i64[1];
          v112 = (float32x4_t)vbslq_s8(v34, v111, v104);
          v113 = vbslq_s8(v34, v111, (int8x16_t)vmaxq_f32(v109, (float32x4_t)vbslq_s8(v34, v111, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v110), v112))));
          v114 = (int8x16_t)vaddq_f32(v106, (float32x4_t)vextq_s8((int8x16_t)v5, v113, 0xCuLL));
          *(float32x2_t *)v110.f32 = vmin_f32((float32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL), *(float32x2_t *)v108.f32);
          v65.i64[0] = v108.i64[0];
          v115 = (float32x4_t)vextq_s8(v114, (int8x16_t)v108, 8uLL);
          *(int8x8_t *)v107.f32 = vext_s8(*(int8x8_t *)v108.f32, *(int8x8_t *)v110.f32, 4uLL);
          *(int8x8_t *)v110.f32 = vext_s8(*(int8x8_t *)v110.f32, *(int8x8_t *)v108.f32, 4uLL);
          v108.i64[1] = v114.i64[1];
          v65.i64[1] = vminq_f32(v108, v115).i64[1];
          v110.i64[1] = v107.i64[0];
          v116 = vmaxq_f32(v65, v110);
          v110.i64[0] = v113.i64[0];
          v110.i64[1] = v116.i64[1];
          v117 = vextq_s8((int8x16_t)v110, (int8x16_t)v110, 4uLL);
          v118 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v96, v117);
          v112.i64[1] = *((_QWORD *)v13 + 21);
          v118.i32[3] = 1.0;
          v119 = *((float32x4_t *)v13 + 34);
          v120 = *((float32x4_t *)v13 + 8);
          v121 = *((float32x4_t *)v13 + 9);
          v122 = (int32x4_t)vmulq_f32(v121, v118);
          *(int8x8_t *)v109.f32 = vqtbl1_s8((int8x16_t)v122, *(int8x8_t *)v119.f32);
          v116.i64[0] = vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL).u64[0];
          *(int8x8_t *)v122.i8 = vqtbl1_s8((int8x16_t)v122, *(int8x8_t *)v116.f32);
          *(int8x8_t *)v123.f32 = vext_s8(*(int8x8_t *)v122.i8, *(int8x8_t *)v109.f32, 4uLL);
          v123.i64[1] = v123.i64[0];
          v96.i64[0] = vbslq_s8(v34, (int8x16_t)v96, v113).u64[0];
          v109.i64[1] = v109.i64[0];
          v124 = vmulq_f32(v120, v118);
          *(int8x8_t *)v125.f32 = vqtbl1_s8((int8x16_t)v124, *(int8x8_t *)v119.f32);
          *(int8x8_t *)v126.f32 = vqtbl1_s8((int8x16_t)v124, *(int8x8_t *)v116.f32);
          v126.i64[1] = v125.i64[0];
          v127 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v122, (int8x16_t)vrev64q_s32(v122), 8uLL), vaddq_f32(v109, v123));
          *(int8x8_t *)v123.f32 = vext_s8(*(int8x8_t *)v126.f32, *(int8x8_t *)v125.f32, 4uLL);
          v96.i64[1] = v127.i64[1];
          v125.i64[1] = v126.i64[0];
          *(int8x8_t *)&v123.u32[2] = vext_s8(*(int8x8_t *)v125.f32, *(int8x8_t *)v126.f32, 4uLL);
          v128 = (float32x4_t)vbslq_s8(v18, v117, (int8x16_t)v112);
          v129 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32(v125, vaddq_f32(v126, v123)), (int8x16_t)v96);
          LODWORD(v13) = a2[11].i32[0];
          v130 = vmulq_f32(v121, v128);
          *(int8x8_t *)v96.f32 = vqtbl1_s8((int8x16_t)v130, *(int8x8_t *)v119.f32);
          *(int8x8_t *)v130.f32 = vqtbl1_s8((int8x16_t)v130, *(int8x8_t *)v116.f32);
          *(int8x8_t *)v124.f32 = vext_s8(*(int8x8_t *)v130.f32, *(int8x8_t *)v96.f32, 4uLL);
          v124.i64[1] = v124.i64[0];
          v96.i64[1] = v96.i64[0];
          v131 = a2[10];
          v113.i64[1] = vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)&v130, (int8x16_t)vrev64q_s32(*(int32x4_t *)&v130), 8uLL), vaddq_f32(v96, v124)).i64[1];
          v132 = (int8x16_t)vmulq_f32(v120, v128);
          *(int8x8_t *)v130.f32 = vqtbl1_s8(v132, *(int8x8_t *)v119.f32);
          v133 = vaddq_f32(vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), v5), v9);
          *(int8x8_t *)v124.f32 = vqtbl1_s8(v132, *(int8x8_t *)v116.f32);
          v124.i64[1] = v130.i64[0];
          *(int8x8_t *)v109.f32 = vext_s8(*(int8x8_t *)v124.f32, *(int8x8_t *)v130.f32, 4uLL);
          v134 = vcvtq_s32_f32(v133);
          v130.i64[1] = v124.i64[0];
          *(int8x8_t *)&v109.u32[2] = vext_s8(*(int8x8_t *)v130.f32, *(int8x8_t *)v124.f32, 4uLL);
          v135 = vbslq_s8(v56, (int8x16_t)vaddq_f32(v130, vaddq_f32(v124, v109)), v113);
          v136 = (float32x4_t)vcgtq_f32(vcvtq_f32_s32(v134), v133);
          v137 = vaddq_f32(vsubq_f32((float32x4_t)vextq_s8(v135, v135, 8uLL), v5), v9);
          v138 = (float32x4_t)vcvtq_s32_f32(v137);
          v137.i64[0] = vaddq_s32((int32x4_t)v138, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v138), v137)).u64[0];
          v136.i64[0] = vaddq_s32(v134, (int32x4_t)v136).u64[0];
          v139 = v137.i32[0] + v137.i32[1] * (_DWORD)v13;
          v140 = v136.i32[1];
          v129.i32[3] = 1.0;
          v141 = (int32x4_t)vmulq_f32(v121, v129);
          *(int8x8_t *)v138.f32 = vqtbl1_s8((int8x16_t)v141, *(int8x8_t *)v119.f32);
          *(int8x8_t *)v141.i8 = vqtbl1_s8((int8x16_t)v141, *(int8x8_t *)v116.f32);
          v142 = v136.i32[0];
          *(int8x8_t *)v136.f32 = vext_s8(*(int8x8_t *)v141.i8, *(int8x8_t *)v138.f32, 4uLL);
          v136.i64[1] = v136.i64[0];
          v138.i64[1] = v138.i64[0];
          v143 = vaddq_f32(v138, v136);
          v144 = (int8x16_t)vmulq_f32(v120, v129);
          *(int8x8_t *)v124.f32 = vqtbl1_s8(v144, *(int8x8_t *)v119.f32);
          *(int8x8_t *)v127.f32 = vqtbl1_s8(v144, *(int8x8_t *)v116.f32);
          v127.i64[1] = v124.i64[0];
          v145 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v141, (int8x16_t)vrev64q_s32(v141), 8uLL), v143);
          *(int8x8_t *)v143.f32 = vext_s8(*(int8x8_t *)v127.f32, *(int8x8_t *)v124.f32, 4uLL);
          v124.i64[1] = v127.i64[0];
          v135.i64[1] = v145.i64[1];
          *(int8x8_t *)&v143.u32[2] = vext_s8(*(int8x8_t *)v124.f32, *(int8x8_t *)v127.f32, 4uLL);
          v146 = *(float32x4_t *)(*(_QWORD *)&v131 + 16 * (v142 + v140 * (int)v13));
          v147 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32(v124, vaddq_f32(v127, v143)), v135);
          v148 = vaddq_f32(vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL), v5), v9);
          v149 = vcvtq_s32_f32(v148);
          v147.i32[3] = 1.0;
          v150 = (int8x16_t)vsubq_f32(v101, vsubq_f32(v102, (float32x4_t)vandq_s8((int8x16_t)v103, (int8x16_t)v78)));
          v151 = vmulq_f32(v121, v147);
          *(int8x8_t *)v103.f32 = vqtbl1_s8((int8x16_t)v151, *(int8x8_t *)v119.f32);
          *(int8x8_t *)v151.f32 = vqtbl1_s8((int8x16_t)v151, *(int8x8_t *)v116.f32);
          *(int8x8_t *)v121.f32 = vext_s8(*(int8x8_t *)v151.f32, *(int8x8_t *)v103.f32, 4uLL);
          v102.i64[0] = vaddq_s32(v149, vcgtq_f32(vcvtq_f32_s32(v149), v148)).u64[0];
          v121.i64[1] = v121.i64[0];
          v103.i64[1] = v103.i64[0];
          v34.i64[0] = vbslq_s8(v34, v100, v150).u64[0];
          v152 = (int8x16_t)vmulq_f32(v120, v147);
          *(int8x8_t *)v119.f32 = vqtbl1_s8(v152, *(int8x8_t *)v119.f32);
          *(int8x8_t *)v116.f32 = vqtbl1_s8(v152, *(int8x8_t *)v116.f32);
          v116.i64[1] = v119.i64[0];
          v153 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v151, (int8x16_t)vrev64q_s32((int32x4_t)v151), 8uLL), vaddq_f32(v103, v121));
          *(int8x8_t *)v151.f32 = vext_s8(*(int8x8_t *)v116.f32, *(int8x8_t *)v119.f32, 4uLL);
          v119.i64[1] = v116.i64[0];
          v34.i64[1] = v153.i64[1];
          *(int8x8_t *)&v151.u32[2] = vext_s8(*(int8x8_t *)v119.f32, *(int8x8_t *)v116.f32, 4uLL);
          v154 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32(v119, vaddq_f32(v116, v151)), v34);
          v155 = vaddq_f32(vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL), v5), v9);
          v156 = vcvtq_s32_f32(v155);
          v155.i64[0] = vaddq_s32(v156, vcgtq_f32(vcvtq_f32_s32(v156), v155)).u64[0];
          v157 = *(float32x4_t *)(*(_QWORD *)&v131 + 16 * (v102.i32[0] + v102.i32[1] * (int)v13));
          v158 = vcvtq_f32_s32(vcvtq_s32_f32(v154));
          v159 = vaddq_f32(v157, vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v131 + 16 * (v155.i32[0] + v155.i32[1] * (int)v13)), v157), *(float32x2_t *)v154.f32, 1));
          *(float32x4_t *)(*(_QWORD *)&v7 + v11) = vaddq_f32(v159, vmulq_n_f32(vsubq_f32(vaddq_f32(v146, vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v131 + 16 * v139), v146), *(float32x2_t *)v154.f32, 1)), v159), vsubq_f32(v154, vsubq_f32(v158, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v158, v154), (int8x16_t)v77,
                                                                          (int8x16_t)0))).f32[0]));
          v12 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F230);
          v11 += 16;
        }
        while (16 * v6 != v11);
      }
      v10 = vaddq_f32(v10, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHgcEquirectProject::GetDOD(LiHgcEquirectProject *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;

  v4 = &HGRectInfinite;
  if (a3)
    v4 = &HGRectNull;
  return *(_QWORD *)v4;
}

uint64_t LiHgcEquirectProject::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  return HGRenderer::GetDOD(a2, Input);
}

void LiHgcEquirectProject::LiHgcEquirectProject(LiHgcEquirectProject *this)
{
  _QWORD *v2;
  LiHgcEquirectProject::State *v3;
  double v4;
  uint64_t v5;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6566188;
  v3 = (LiHgcEquirectProject::State *)operator new();
  v4 = LiHgcEquirectProject::State::State(v3);
  *((_QWORD *)this + 51) = v5;
  (*(void (**)(LiHgcEquirectProject *, _QWORD, uint64_t, double))(*(_QWORD *)this + 136))(this, 0, 1, v4);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2CC68CC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHgcEquirectProject::~LiHgcEquirectProject(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6566188;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4044C9E2E8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHgcEquirectProject::~LiHgcEquirectProject(this);
  HGObject::operator delete(v1);
}

uint64_t LiHgcEquirectProject::SetParameter(LiHgcEquirectProject *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  __n128 *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_53;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_53;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == 0.0
        && v10[2].n128_f32[1] == 0.0
        && v10[2].n128_f32[2] == a3.n128_f32[0]
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_u64[0] = 0;
      v10[2].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v10[2].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[35] = a3;
      goto LABEL_53;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_53;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_53;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_53;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_53;
    case 7:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6)
        return 0;
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_53;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_53;
    case 9:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6)
        return 0;
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
LABEL_53:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float LiHgcEquirectProject::GetParameter(LiHgcEquirectProject *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_12;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_12;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[140];
      a3[1] = v6[141];
      a3[2] = v6[142];
      v4 = v6 + 143;
      goto LABEL_12;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_12;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_12;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_12;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_12;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_12;
    case 8:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[32];
      a3[1] = v13[33];
      a3[2] = v13[34];
      v4 = v13 + 35;
      goto LABEL_12;
    case 9:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[36];
      a3[1] = v12[37];
      a3[2] = v12[38];
      v4 = v12 + 39;
LABEL_12:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double LiHgcEquirectProject::State::State(LiHgcEquirectProject::State *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 10) = xmmword_1B3557E30;
  *((_OWORD *)this + 11) = xmmword_1B3050FF0;
  *((_OWORD *)this + 12) = xmmword_1B3050F70;
  *((_OWORD *)this + 13) = xmmword_1B3557E40;
  *((_OWORD *)this + 14) = xmmword_1B3051020;
  *((_OWORD *)this + 15) = xmmword_1B3050E20;
  *((_OWORD *)this + 16) = xmmword_1B3051C20;
  *((int32x4_t *)this + 17) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 18) = xmmword_1B3557E50;
  *((_OWORD *)this + 19) = xmmword_1B3557E60;
  *((_OWORD *)this + 20) = xmmword_1B3557E70;
  *((_OWORD *)this + 21) = xmmword_1B3557E80;
  *((_OWORD *)this + 22) = xmmword_1B3050FE0;
  *((_OWORD *)this + 23) = xmmword_1B3557E90;
  *((_OWORD *)this + 24) = xmmword_1B3557EA0;
  *((_OWORD *)this + 25) = xmmword_1B3557EB0;
  *((_OWORD *)this + 26) = xmmword_1B3051880;
  *((_OWORD *)this + 27) = xmmword_1B3557EC0;
  *((_OWORD *)this + 28) = xmmword_1B3557ED0;
  *((_OWORD *)this + 29) = xmmword_1B3557EE0;
  *((_OWORD *)this + 30) = xmmword_1B3557EF0;
  *((_OWORD *)this + 31) = xmmword_1B3557F00;
  *((_OWORD *)this + 32) = xmmword_1B30510B0;
  *((_OWORD *)this + 33) = xmmword_1B3557F10;
  *((_OWORD *)this + 34) = xmmword_1B3051230;
  *((_OWORD *)this + 35) = 0u;
  return result;
}

const char *HgcGradientBlend::GetProgram(HgcGradientBlend *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000002e6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    output.color0 = float4(r0.wwww)*float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b4bc87a4:fe351ce8:53d5d7d0:cb789fc8\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002ca\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    output.color0 = r0.wwww*r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=840901ce:6cf857a3:8b59720c:358dc55d\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000248\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    gl_FragColor = r0.wwww*r1;\n"
           "}\n"
           "//MD5=fc30fb8e:6d0b1937:1491b653:13192ed3\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcGradientBlend::InitProgramDescriptor(HgcGradientBlend *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcGradientBlend_hgc_visible", "//Metal1.0     \n//LEN=0000000129\n[[ visible ]] FragmentOut HgcGradientBlend_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r1 = color1;\n"
    "    output.color0 = r0.wwww*r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CC6FA0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcGradientBlend");
}

void sub_1B2CC6FB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CC70F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CC7138()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CC7130);
}

_QWORD *HgcGradientBlend::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcGradientBlend [hgc1]");
}

uint64_t HgcGradientBlend::BindTexture(HgcGradientBlend *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcGradientBlend::Bind(HgcGradientBlend *this, HGHandler *a2)
{
  (*(void (**)(HgcGradientBlend *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcGradientBlend::RenderTile(HgcGradientBlend *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t *v16;
  uint64_t v17;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 12);
    v7 = 16 * *((int *)a2 + 22);
    v8 = *((_QWORD *)a2 + 10);
    v9 = 16 * *((int *)a2 + 26);
    v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = vmulq_laneq_f32(*(float32x4_t *)(v6 + v12 - 16), *(float32x4_t *)(v8 + v12 - 16), 3);
          v14 = vmulq_laneq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)(v8 + v12), 3);
          v15 = vmulq_laneq_f32(*(float32x4_t *)(v6 + v12 + 16), *(float32x4_t *)(v8 + v12 + 16), 3);
          v16 = (float32x4_t *)(v5 + v12);
          v16[-2] = vmulq_laneq_f32(*(float32x4_t *)(v6 + v12 - 32), *(float32x4_t *)(v8 + v12 - 32), 3);
          v16[-1] = v13;
          *v16 = v14;
          v16[1] = v15;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v17) = -v11;
      }
      if ((int)v17 < v4)
      {
        v17 = v17;
        do
        {
          *(float32x4_t *)(v5 + 16 * v17) = vmulq_laneq_f32(*(float32x4_t *)(v6 + 16 * v17), *(float32x4_t *)(v8 + 16 * v17), 3);
          ++v17;
        }
        while (v17 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcGradientBlend::GetDOD(HgcGradientBlend *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcGradientBlend::GetROI(HgcGradientBlend *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcGradientBlend::HgcGradientBlend(HgcGradientBlend *this)
{
  _QWORD *v2;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65663F0;
  *((_QWORD *)this + 51) = operator new();
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CC73E8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcGradientBlend::~HgcGradientBlend(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65663F0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0xC400A2AC0F1);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcGradientBlend::~HgcGradientBlend(this);
  HGObject::operator delete(v1);
}

uint64_t HgcGradientBlend::SetParameter(HgcGradientBlend *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcGradientBlend::GetParameter(HgcGradientBlend *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcColorBalanceNoClip::GetProgram(HgcColorBalanceNoClip *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000030e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r0*half4(hg_Params[0]);\n"
             "    r1 = half4(hg_Params[1])*r0.wwww + r1;\n"
             "    r2.xyz = pow(fabs(r1.xyz), half3(hg_Params[2].xyz));\n"
             "    r1.xyz = select(r2.xyz, -r2.xyz, r1.xyz < 0.00000h);\n"
             "    output.color0 = mix(float4(r0), float4(r1), hg_Params[3]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=495dfcdb:e6516cd9:0b27cff0:e742c35d\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0004:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002e3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r0*hg_Params[0];\n"
             "    r1 = hg_Params[1]*r0.wwww + r1;\n"
             "    r2.xyz = pow(fabs(r1.xyz), hg_Params[2].xyz);\n"
             "    r1.xyz = select(r2.xyz, -r2.xyz, r1.xyz < 0.00000f);\n"
             "    output.color0 = mix(r0, r1, hg_Params[3]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a853d778:834db82b:f879a4ec:9afacfb2\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0004:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000366\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = r0*hg_ProgramLocal0;\n"
           "    r1 = hg_ProgramLocal1*r0.wwww + r1;\n"
           "    r2.xyz = pow(abs(r1.xyz), hg_ProgramLocal2.xyz);\n"
           "    r1.xyz = vec3(r1.x < 0.00000 ? -r2.x : r2.x, r1.y < 0.00000 ? -r2.y : r2.y, r1.z < 0.00000 ? -r2.z : r2.z"
           ");\n"
           "    gl_FragColor = mix(r0, r1, hg_ProgramLocal3);\n"
           "}\n"
           "//MD5=d33d8d21:3461c00f:bb53e25e:d8ff5ca4\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0004:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcColorBalanceNoClip::InitProgramDescriptor(HgcColorBalanceNoClip *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcColorBalanceNoClip_hgc_visible", "//Metal1.0     \n//LEN=00000001c2\n[[ visible ]] FragmentOut HgcColorBalanceNoClip_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = r0*hg_Params[0];\n"
    "    r1 = hg_Params[1]*r0.wwww + r1;\n"
    "    r2.xyz = pow(fabs(r1.xyz), hg_Params[2].xyz);\n"
    "    r1.xyz = select(r2.xyz, -r2.xyz, r1.xyz < 0.00000f);\n"
    "    output.color0 = mix(r0, r1, hg_Params[3]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CC7534()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcColorBalanceNoClip");
}

void sub_1B2CC7544(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CC7644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CC7684()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CC767CLL);
}

_QWORD *HgcColorBalanceNoClip::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcColorBalanceNoClip [hgc1]");
}

uint64_t HgcColorBalanceNoClip::BindTexture(HgcColorBalanceNoClip *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcColorBalanceNoClip::Bind(HgcColorBalanceNoClip *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HgcColorBalanceNoClip *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcColorBalanceNoClip::RenderTile(HgcColorBalanceNoClip *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  float32x4_t *v68;
  unsigned int v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 6);
    v8 = 16 * *((int *)a2 + 22);
    do
    {
      if (v4 < 2)
      {
        v69 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v12 = *(float32x4_t *)(v6 + v10);
          v13 = *((_QWORD *)this + 51);
          v14 = *(float32x4_t *)(v13 + 16);
          v15 = vaddq_f32(vmulq_f32(v11, *(float32x4_t *)v13), vmulq_laneq_f32(v14, v11, 3));
          v16 = vaddq_f32(vmulq_f32(v12, *(float32x4_t *)v13), vmulq_laneq_f32(v14, v12, 3));
          v17 = vabsq_f32(v15);
          v18 = vabsq_f32(v16);
          v20 = *(int8x16_t *)(v13 + 64);
          v19 = *(float32x4_t *)(v13 + 80);
          v21 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v17), (int8x16_t)v19);
          v22 = *(float32x4_t *)(v13 + 96);
          v23 = *(int8x16_t *)(v13 + 112);
          v24 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v18), (int8x16_t)v19);
          v25 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v17, 0x17uLL)), (float32x4_t)vandq_s8(v23, (int8x16_t)vcgtq_f32(v22, v17)));
          v26 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v18, 0x17uLL)), (float32x4_t)vandq_s8(v23, (int8x16_t)vcgtq_f32(v22, v18)));
          v27 = *(float32x4_t *)(v13 + 128);
          v28 = *(float32x4_t *)(v13 + 144);
          v29 = vsubq_f32(v25, v27);
          v30 = vsubq_f32(v26, v27);
          v31 = (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_f32(v21, v28));
          v32 = (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_f32(v24, v28));
          v33 = *(float32x4_t *)(v13 + 160);
          v34 = *(float32x4_t *)(v13 + 176);
          v35 = vaddq_f32(v30, v32);
          v36 = vsubq_f32(vsubq_f32(v21, v19), vmulq_f32(vmulq_f32(v33, v31), v21));
          v37 = vsubq_f32(vsubq_f32(v24, v19), vmulq_f32(vmulq_f32(v33, v32), v24));
          v38 = *(float32x4_t *)(v13 + 192);
          v39 = *(float32x4_t *)(v13 + 208);
          v40 = vaddq_f32(v34, vmulq_f32(v38, v36));
          v41 = vaddq_f32(v34, vmulq_f32(v38, v37));
          v42 = *(float32x4_t *)(v13 + 224);
          v43 = *(float32x4_t *)(v13 + 240);
          v44 = vaddq_f32(vaddq_f32(v29, v31), vmulq_f32(v36, vaddq_f32(vaddq_f32(v39, vmulq_f32(v42, v36)), vmulq_f32(vmulq_f32(v36, v36), v40))));
          v45 = vaddq_f32(v35, vmulq_f32(v37, vaddq_f32(vaddq_f32(v39, vmulq_f32(v42, v37)), vmulq_f32(vmulq_f32(v37, v37), v41))));
          v46 = *(float32x4_t *)(v13 + 32);
          v47 = *(float32x4_t *)(v13 + 48);
          v48 = vmaxq_f32(vmulq_f32(v46, v44), v43);
          v49 = vmaxq_f32(vmulq_f32(v46, v45), v43);
          v50 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
          v51 = vcvtq_f32_s32(vcvtq_s32_f32(v49));
          v52 = vsubq_f32(v50, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_f32(v50, v48)));
          v53 = vsubq_f32(v51, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_f32(v51, v49)));
          v54 = vsubq_f32(v48, v52);
          v55 = vsubq_f32(v49, v53);
          v56 = *(float32x4_t *)(v13 + 256);
          v57 = *(float32x4_t *)(v13 + 272);
          v58 = vaddq_f32(v56, vmulq_f32(v57, v54));
          v59 = vaddq_f32(v56, vmulq_f32(v57, v55));
          v60 = *(float32x4_t *)(v13 + 288);
          v61 = *(int32x4_t *)(v13 + 304);
          v62 = vaddq_f32(v19, vmulq_f32(v54, vaddq_f32(v60, vmulq_f32(v54, v58))));
          v63 = vaddq_f32(v19, vmulq_f32(v55, vaddq_f32(v60, vmulq_f32(v55, v59))));
          v64 = (float32x4_t)vshlq_n_s32(vaddq_s32(v61, vcvtq_s32_f32(v53)), 0x17uLL);
          v65 = (int8x16_t)vmulq_f32(v62, (float32x4_t)vshlq_n_s32(vaddq_s32(v61, vcvtq_s32_f32(v52)), 0x17uLL));
          v66 = *(int8x16_t *)(v13 + 320);
          v67 = *(int8x16_t *)(v13 + 336);
          v68 = (float32x4_t *)(v5 + v10);
          v68[-1] = vaddq_f32(v11, vmulq_f32(v47, vsubq_f32((float32x4_t)vbslq_s8(v67, (int8x16_t)v15, veorq_s8(vandq_s8(v66, (int8x16_t)v15), v65)), v11)));
          *v68 = vaddq_f32(v12, vmulq_f32(v47, vsubq_f32((float32x4_t)vbslq_s8(v67, (int8x16_t)v16, veorq_s8(vandq_s8(v66, (int8x16_t)v16), (int8x16_t)vmulq_f32(v63, v64))), v12)));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v69 = -v9;
      }
      if ((int)v69 < v4)
      {
        v70 = *(float32x4_t *)(v6 + 16 * v69);
        v71 = *((_QWORD *)this + 51);
        v72 = vaddq_f32(vmulq_f32(v70, *(float32x4_t *)v71), vmulq_laneq_f32(*(float32x4_t *)(v71 + 16), v70, 3));
        v73 = vabsq_f32(v72);
        v74 = *(float32x4_t *)(v71 + 80);
        v75 = (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v71 + 64), (int8x16_t)v73), (int8x16_t)v74);
        v76 = (float32x4_t)vandq_s8((int8x16_t)v74, (int8x16_t)vcgtq_f32(v75, *(float32x4_t *)(v71 + 144)));
        v77 = vsubq_f32(vsubq_f32(v75, v74), vmulq_f32(vmulq_f32(*(float32x4_t *)(v71 + 160), v76), v75));
        v78 = vmaxq_f32(vmulq_f32(*(float32x4_t *)(v71 + 32), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v73, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v71 + 112), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v71 + 96), v73))), *(float32x4_t *)(v71 + 128)), v76), vmulq_f32(v77, vaddq_f32(vaddq_f32(*(float32x4_t *)(v71 + 208), vmulq_f32(*(float32x4_t *)(v71 + 224), v77)), vmulq_f32(vmulq_f32(v77, v77), vaddq_f32(*(float32x4_t *)(v71 + 176), vmulq_f32(*(float32x4_t *)(v71 + 192), v77))))))),
                *(float32x4_t *)(v71 + 240));
        v79 = vcvtq_f32_s32(vcvtq_s32_f32(v78));
        v80 = vsubq_f32(v79, (float32x4_t)vandq_s8((int8x16_t)v74, (int8x16_t)vcgtq_f32(v79, v78)));
        v81 = vsubq_f32(v78, v80);
        *(float32x4_t *)(v5 + 16 * v69) = vaddq_f32(v70, vmulq_f32(*(float32x4_t *)(v71 + 48), vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v71 + 336), (int8x16_t)v72, veorq_s8(vandq_s8(*(int8x16_t *)(v71 + 320), (int8x16_t)v72), (int8x16_t)vmulq_f32(vaddq_f32(v74, vmulq_f32(v81, vaddq_f32(*(float32x4_t *)(v71 + 288), vmulq_f32(v81, vaddq_f32(
                                                                                          *(float32x4_t *)(v71 + 256),
                                                                                          vmulq_f32(*(float32x4_t *)(v71 + 272), v81)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v71 + 304), vcvtq_s32_f32(v80)), 0x17uLL)))), v70)));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcColorBalanceNoClip::GetDOD(HgcColorBalanceNoClip *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcColorBalanceNoClip::GetROI(HgcColorBalanceNoClip *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcColorBalanceNoClip::HgcColorBalanceNoClip(HgcColorBalanceNoClip *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6566658;
  v3 = (_OWORD *)operator new();
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  v3[4] = xmmword_1B3051600;
  v3[5] = xmmword_1B3051560;
  v3[6] = xmmword_1B3051610;
  v3[7] = xmmword_1B3051620;
  v3[8] = xmmword_1B3051630;
  v3[9] = xmmword_1B3051640;
  v3[10] = xmmword_1B3051510;
  v3[11] = xmmword_1B3051650;
  v3[12] = xmmword_1B3051660;
  v3[13] = xmmword_1B3051670;
  v3[14] = xmmword_1B3051680;
  v3[15] = xmmword_1B3051690;
  v3[16] = xmmword_1B30516A0;
  v3[17] = xmmword_1B30516B0;
  v3[18] = xmmword_1B30516C0;
  v3[19] = xmmword_1B30516D0;
  v3[20] = xmmword_1B3053570;
  v3[21] = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CC7CC8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcColorBalanceNoClip::~HgcColorBalanceNoClip(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6566658;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AF73A19ALL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcColorBalanceNoClip::~HgcColorBalanceNoClip(this);
  HGObject::operator delete(v1);
}

uint64_t HgcColorBalanceNoClip::SetParameter(HgcColorBalanceNoClip *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcColorBalanceNoClip::GetParameter(HgcColorBalanceNoClip *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

uint64_t HgcColorBalanceNoClipGammaOne::Setup(HgcColorBalanceNoClipGammaOne *this, void *a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;

  v2 = (float32x4_t *)*((_QWORD *)this + 62);
  v3 = v2[1];
  v4 = v2[2];
  v5 = vaddq_f32(v2[8], vmulq_f32(v4, vsubq_f32(vaddq_f32(vmulq_f32(v2[8], *v2), vmulq_laneq_f32(v3, v2[8], 3)), v2[8])));
  v6 = vaddq_f32(v2[9], vmulq_f32(v4, vsubq_f32(vaddq_f32(vmulq_f32(v2[9], *v2), vmulq_laneq_f32(v3, v2[9], 3)), v2[9])));
  v7 = vaddq_f32(v2[10], vmulq_f32(v4, vsubq_f32(vaddq_f32(vmulq_f32(v2[10], *v2), vmulq_laneq_f32(v3, v2[10], 3)), v2[10])));
  v2[3] = vaddq_f32(v2[7], vmulq_f32(v4, vsubq_f32(vaddq_f32(vmulq_f32(v2[7], *v2), vmulq_laneq_f32(v3, v2[7], 3)), v2[7])));
  *(float32x4_t *)(*((_QWORD *)this + 62) + 64) = v5;
  *(float32x4_t *)(*((_QWORD *)this + 62) + 80) = v6;
  *(float32x4_t *)(*((_QWORD *)this + 62) + 96) = v7;
  return 0;
}

const char *HgcColorBalanceNoClipGammaOne::GetProgram(HgcColorBalanceNoClipGammaOne *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000298\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r0*half4(hg_Params[0]);\n"
             "    r1 = half4(hg_Params[1])*r0.wwww + r1;\n"
             "    output.color0 = mix(float4(r0), float4(r1), hg_Params[2]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c65cc828:2159394f:f80023c0:4f30c4ee\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0003:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000274\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r0*hg_Params[0];\n"
             "    r1 = hg_Params[1]*r0.wwww + r1;\n"
             "    output.color0 = mix(r0, r1, hg_Params[2]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=80bd144c:5259ff36:49efba23:99823071\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0003:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000029a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = r0*hg_ProgramLocal0;\n"
           "    r1 = hg_ProgramLocal1*r0.wwww + r1;\n"
           "    gl_FragColor = mix(r0, r1, hg_ProgramLocal2);\n"
           "}\n"
           "//MD5=6d318dea:60b330fa:6f2cc7f9:00c2cc0a\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0003:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcColorBalanceNoClipGammaOne::InitProgramDescriptor(HgcColorBalanceNoClipGammaOne *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcColorBalanceNoClipGammaOne_hgc_visible", "//Metal1.0     \n//LEN=000000015b\n[[ visible ]] FragmentOut HgcColorBalanceNoClipGammaOne_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = r0*hg_Params[0];\n"
    "    r1 = hg_Params[1]*r0.wwww + r1;\n"
    "    output.color0 = mix(r0, r1, hg_Params[2]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CC7F68()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcColorBalanceNoClipGammaOne");
}

void sub_1B2CC7F78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30513F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CC8078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CC80B8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CC80B0);
}

_QWORD *HgcColorBalanceNoClipGammaOne::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcColorBalanceNoClipGammaOne [hgc1]");
}

uint64_t HgcColorBalanceNoClipGammaOne::BindTexture(HgcColorBalanceNoClipGammaOne *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcColorBalanceNoClipGammaOne::Bind(HgcColorBalanceNoClipGammaOne *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 62), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 62) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 62) + 32, 1);
  (*(void (**)(HgcColorBalanceNoClipGammaOne *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcColorBalanceNoClipGammaOne::RenderTile(HgcColorBalanceNoClipGammaOne *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  uint64_t v21;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v21) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v12 = *(float32x4_t *)(v6 + v10);
          v13 = (float32x4_t *)*((_QWORD *)this + 62);
          v14 = v13[1];
          v15 = vsubq_f32(vaddq_f32(vmulq_f32(v11, *v13), vmulq_laneq_f32(v14, v11, 3)), v11);
          v16 = vsubq_f32(vaddq_f32(vmulq_f32(v12, *v13), vmulq_laneq_f32(v14, v12, 3)), v12);
          v17 = v13[2];
          v18 = vaddq_f32(*(float32x4_t *)(v6 + v10 - 32), vmulq_f32(v17, vsubq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), *v13), vmulq_laneq_f32(v14, *(float32x4_t *)(v6 + v10 - 32), 3)), *(float32x4_t *)(v6 + v10 - 32))));
          v19 = vaddq_f32(*(float32x4_t *)(v6 + v10 + 16), vmulq_f32(v17, vsubq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), *v13), vmulq_laneq_f32(v14, *(float32x4_t *)(v6 + v10 + 16), 3)), *(float32x4_t *)(v6 + v10 + 16))));
          v20 = (float32x4_t *)(v5 + v10);
          v20[-2] = v18;
          v20[-1] = vaddq_f32(v11, vmulq_f32(v17, v15));
          *v20 = vaddq_f32(v12, vmulq_f32(v17, v16));
          v20[1] = v19;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v21) = -v9;
      }
      if ((int)v21 < v4)
      {
        v21 = v21;
        do
        {
          *(float32x4_t *)(v5 + 16 * v21) = vaddq_f32(*(float32x4_t *)(v6 + 16 * v21), vmulq_f32(*(float32x4_t *)(*((_QWORD *)this + 62) + 32), vsubq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)(v6 + 16 * v21), *(float32x4_t *)*((_QWORD *)this + 62)), vmulq_laneq_f32(*(float32x4_t *)(*((_QWORD *)this + 62) + 16), *(float32x4_t *)(v6 + 16 * v21), 3)), *(float32x4_t *)(v6 + 16 * v21))));
          ++v21;
        }
        while (v21 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcColorBalanceNoClipGammaOne::GetDOD(HgcColorBalanceNoClipGammaOne *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcColorBalanceNoClipGammaOne::GetROI(HgcColorBalanceNoClipGammaOne *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcColorBalanceNoClipGammaOne::HgcColorBalanceNoClipGammaOne(HgcColorBalanceNoClipGammaOne *this)
{
  uint64_t v2;
  uint64_t v3;

  HGColorMatrix::HGColorMatrix(this);
  *(_QWORD *)v2 = off_1E65668A8;
  *(_DWORD *)(v2 + 504) = 1;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 64) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 80) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 96) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 112) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 128) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 144) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 160) = xmmword_1B304EFF0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *((_QWORD *)this + 62) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CC8440(_Unwind_Exception *a1)
{
  HGColorMatrix *v1;

  HGColorMatrix::~HGColorMatrix(v1);
  _Unwind_Resume(a1);
}

void HgcColorBalanceNoClipGammaOne::~HgcColorBalanceNoClipGammaOne(HgcColorBalanceNoClipGammaOne *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65668A8;
  v2 = *((_QWORD *)this + 62);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C408070C27FLL);
  HGColorMatrix::~HGColorMatrix(this);
}

{
  void *v1;

  HgcColorBalanceNoClipGammaOne::~HgcColorBalanceNoClipGammaOne(this);
  HGObject::operator delete(v1);
}

uint64_t HgcColorBalanceNoClipGammaOne::SetParameter(HgcColorBalanceNoClipGammaOne *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  uint64_t v8;
  float *v9;
  float *v10;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 62);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_19;
    case 1:
      v9 = (float *)*((_QWORD *)this + 62);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_19;
    case 2:
      v8 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((_QWORD *)this + 62) + 176) = a3;
      return v8;
    case 3:
      v10 = (float *)*((_QWORD *)this + 62);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
LABEL_19:
      v8 = 1;
      *((_DWORD *)this + 126) = 1;
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return v8;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcColorBalanceNoClipGammaOne::GetParameter(HgcColorBalanceNoClipGammaOne *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 62);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_6;
    case 1:
      v5 = (float *)*((_QWORD *)this + 62);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_6;
    case 2:
      v6 = (float *)*((_QWORD *)this + 62);
      *a3 = v6[44];
      a3[1] = v6[45];
      a3[2] = v6[46];
      v4 = v6 + 47;
      goto LABEL_6;
    case 3:
      v7 = (float *)*((_QWORD *)this + 62);
      *a3 = v7[8];
      a3[1] = v7[9];
      a3[2] = v7[10];
      v4 = v7 + 11;
LABEL_6:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

HGNode *HgcColorBalanceNoClipGammaOne::GetOutput(HgcColorBalanceNoClipGammaOne *this, HGRenderer *a2, __n128 a3, double a4, int32x2_t a5)
{
  uint64_t v7;

  if (*((_DWORD *)this + 126))
  {
    HgcColorBalanceNoClipGammaOne::Setup(this, a2);
    v7 = *((_QWORD *)this + 62);
    *((_OWORD *)this + 27) = *(_OWORD *)(v7 + 48);
    *((_OWORD *)this + 28) = *(_OWORD *)(v7 + 64);
    *((_OWORD *)this + 29) = *(_OWORD *)(v7 + 80);
    a3 = *(__n128 *)(v7 + 96);
    *((__n128 *)this + 30) = a3;
    *((_DWORD *)this + 126) = 0;
  }
  return HGColorMatrix::GetOutput(this, a2, a3.n128_f64[0], a4, a5);
}

const char *HgcColorBalanceClip::GetProgram(HgcColorBalanceClip *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000497\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r0*half4(hg_Params[0]);\n"
             "    r1 = half4(hg_Params[1])*r0.wwww + r1;\n"
             "    r2.xyz = pow(fabs(r1.xyz), half3(hg_Params[2].xyz));\n"
             "    r1.xyz = select(r2.xyz, -r2.xyz, r1.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz / fmax(r1.w, 6.10350e-05h);\n"
             "    r3.xyz = fmin(c0.xxx, r2.xyz);\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, half3(hg_Params[4].xxx) < 0.00000h);\n"
             "    r3.xyz = fmax(c0.yyy, r2.xyz);\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, half3(hg_Params[4].yyy) < 0.00000h);\n"
             "    r2.xyz = r2.xyz*r1.www;\n"
             "    r2.w = r1.w;\n"
             "    output.color0 = mix(float4(r0), float4(r2), hg_Params[3]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=cc94ffa7:a8f1aded:b91a8e07:d022c466\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0005:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000460\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r0*hg_Params[0];\n"
             "    r1 = hg_Params[1]*r0.wwww + r1;\n"
             "    r2.xyz = pow(fabs(r1.xyz), hg_Params[2].xyz);\n"
             "    r1.xyz = select(r2.xyz, -r2.xyz, r1.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
             "    r3.xyz = fmin(c0.xxx, r2.xyz);\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, hg_Params[4].xxx < 0.00000f);\n"
             "    r3.xyz = fmax(c0.yyy, r2.xyz);\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, hg_Params[4].yyy < 0.00000f);\n"
             "    r2.xyz = r2.xyz*r1.www;\n"
             "    r2.w = r1.w;\n"
             "    output.color0 = mix(r0, r2, hg_Params[3]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=64dd2f92:8f08076c:462fe5df:9f8ff622\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0005:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000005b4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = r0*hg_ProgramLocal0;\n"
           "    r1 = hg_ProgramLocal1*r0.wwww + r1;\n"
           "    r2.xyz = pow(abs(r1.xyz), hg_ProgramLocal2.xyz);\n"
           "    r1.xyz = vec3(r1.x < 0.00000 ? -r2.x : r2.x, r1.y < 0.00000 ? -r2.y : r2.y, r1.z < 0.00000 ? -r2.z : r2.z"
           ");\n"
           "    r2.xyz = r1.xyz / max(r1.w, 1.00000e-06);\n"
           "    r3.xyz = min(c0.xxx, r2.xyz);\n"
           "    r2.xyz = vec3(hg_ProgramLocal4.x < 0.00000 ? r3.x : r2.x, hg_ProgramLocal4.x < 0.00000 ? r3.y : r2.y, hg_"
           "ProgramLocal4.x < 0.00000 ? r3.z : r2.z);\n"
           "    r3.xyz = max(c0.yyy, r2.xyz);\n"
           "    r2.xyz = vec3(hg_ProgramLocal4.y < 0.00000 ? r3.x : r2.x, hg_ProgramLocal4.y < 0.00000 ? r3.y : r2.y, hg_"
           "ProgramLocal4.y < 0.00000 ? r3.z : r2.z);\n"
           "    r2.xyz = r2.xyz*r1.www;\n"
           "    r2.w = r1.w;\n"
           "    gl_FragColor = mix(r0, r2, hg_ProgramLocal3);\n"
           "}\n"
           "//MD5=a81534bc:fd1c914e:7d55a0c7:efeaf040\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0005:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcColorBalanceClip::InitProgramDescriptor(HgcColorBalanceClip *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcColorBalanceClip_hgc_visible", "//Metal1.0     \n//LEN=000000033d\n[[ visible ]] FragmentOut HgcColorBalanceClip_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = r0*hg_Params[0];\n"
    "    r1 = hg_Params[1]*r0.wwww + r1;\n"
    "    r2.xyz = pow(fabs(r1.xyz), hg_Params[2].xyz);\n"
    "    r1.xyz = select(r2.xyz, -r2.xyz, r1.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
    "    r3.xyz = fmin(c0.xxx, r2.xyz);\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, hg_Params[4].xxx < 0.00000f);\n"
    "    r3.xyz = fmax(c0.yyy, r2.xyz);\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, hg_Params[4].yyy < 0.00000f);\n"
    "    r2.xyz = r2.xyz*r1.www;\n"
    "    r2.w = r1.w;\n"
    "    output.color0 = mix(r0, r2, hg_Params[3]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CC87D8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcColorBalanceClip");
}

void sub_1B2CC87E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CC88E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CC8928()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CC8920);
}

_QWORD *HgcColorBalanceClip::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcColorBalanceClip [hgc1]");
}

uint64_t HgcColorBalanceClip::BindTexture(HgcColorBalanceClip *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcColorBalanceClip::Bind(HgcColorBalanceClip *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HgcColorBalanceClip *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcColorBalanceClip::RenderTile(HgcColorBalanceClip *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  __int128 v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t *v82;
  unsigned int v83;
  float32x4_t v84;
  uint64_t v85;
  float32x4_t v86;
  float32x4_t v87;
  __int128 v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int8x16_t v97;
  int8x16_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 6);
    v8 = 16 * *((int *)a2 + 22);
    do
    {
      if (v4 < 2)
      {
        v83 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v12 = *(float32x4_t *)(v6 + v10);
          v13 = *((_QWORD *)this + 51);
          v14 = *(float32x4_t *)(v13 + 16);
          v15 = vaddq_f32(vmulq_f32(v11, *(float32x4_t *)v13), vmulq_laneq_f32(v14, v11, 3));
          v16 = vaddq_f32(vmulq_f32(v12, *(float32x4_t *)v13), vmulq_laneq_f32(v14, v12, 3));
          v17 = vabsq_f32(v15);
          v18 = vabsq_f32(v16);
          v20 = *(_OWORD *)(v13 + 64);
          v19 = *(int8x16_t *)(v13 + 80);
          v21 = *(float32x4_t *)(v13 + 96);
          v22 = *(float32x4_t *)(v13 + 112);
          v23 = (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)v17), (int8x16_t)v21);
          v24 = *(int8x16_t *)(v13 + 128);
          v25 = *(float32x4_t *)(v13 + 144);
          v26 = (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)v18), (int8x16_t)v21);
          v27 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v18, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v22, v18)));
          v28 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v17, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v22, v17))), v25);
          v29 = *(float32x4_t *)(v13 + 160);
          v30 = *(float32x4_t *)(v13 + 176);
          v31 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v23, v29));
          v32 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v26, v29));
          v33 = vaddq_f32(vsubq_f32(v27, v25), v32);
          v34 = vsubq_f32(vsubq_f32(v23, v21), vmulq_f32(vmulq_f32(v30, v31), v23));
          v35 = vsubq_f32(vsubq_f32(v26, v21), vmulq_f32(vmulq_f32(v30, v32), v26));
          v36 = *(float32x4_t *)(v13 + 192);
          v37 = *(float32x4_t *)(v13 + 208);
          v38 = *(float32x4_t *)(v13 + 224);
          v39 = *(float32x4_t *)(v13 + 240);
          v40 = vaddq_f32(vaddq_f32(v28, v31), vmulq_f32(v34, vaddq_f32(vaddq_f32(v38, vmulq_f32(v39, v34)), vmulq_f32(vmulq_f32(v34, v34), vaddq_f32(v36, vmulq_f32(v37, v34))))));
          v41 = vaddq_f32(v33, vmulq_f32(v35, vaddq_f32(vaddq_f32(v38, vmulq_f32(v39, v35)), vmulq_f32(vmulq_f32(v35, v35), vaddq_f32(v36, vmulq_f32(v37, v35))))));
          v42 = *(float32x4_t *)(v13 + 32);
          v43 = *(float32x4_t *)(v13 + 48);
          v44 = vmulq_f32(v42, v40);
          v45 = vmulq_f32(v42, v41);
          v47 = *(float32x4_t *)(v13 + 256);
          v46 = *(float32x4_t *)(v13 + 272);
          v48 = vmaxq_f32(v44, v47);
          v49 = vmaxq_f32(v45, v47);
          v50 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
          v51 = vcvtq_f32_s32(vcvtq_s32_f32(v49));
          v52 = vsubq_f32(v50, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v50, v48)));
          v53 = vsubq_f32(v51, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v51, v49)));
          v54 = vsubq_f32(v48, v52);
          v55 = vsubq_f32(v49, v53);
          v56 = *(float32x4_t *)(v13 + 288);
          v57 = *(float32x4_t *)(v13 + 304);
          v58 = vmulq_f32(v55, vaddq_f32(v57, vmulq_f32(v55, vaddq_f32(v46, vmulq_f32(v56, v55)))));
          v59 = vaddq_f32(v21, vmulq_f32(v54, vaddq_f32(v57, vmulq_f32(v54, vaddq_f32(v46, vmulq_f32(v56, v54))))));
          v60 = vcvtq_s32_f32(v52);
          v61 = vcvtq_s32_f32(v53);
          v62 = *(int32x4_t *)(v13 + 320);
          v63 = *(int8x16_t *)(v13 + 336);
          v64 = veorq_s8(vandq_s8(v63, (int8x16_t)v15), (int8x16_t)vmulq_f32(v59, (float32x4_t)vshlq_n_s32(vaddq_s32(v62, v60), 0x17uLL)));
          v65 = veorq_s8(vandq_s8(v63, (int8x16_t)v16), (int8x16_t)vmulq_f32(vaddq_f32(v21, v58), (float32x4_t)vshlq_n_s32(vaddq_s32(v62, v61), 0x17uLL)));
          v66 = *(int8x16_t *)(v13 + 352);
          v67 = *(float32x4_t *)(v13 + 368);
          v68 = (float32x4_t)vbslq_s8(v66, (int8x16_t)v15, v64);
          v69 = (float32x4_t)vbslq_s8(v66, (int8x16_t)v16, v65);
          v70 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 3), v67);
          v71 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 3), v67);
          v72 = *(float32x4_t *)(v13 + 384);
          v73 = *(float32x4_t *)(v13 + 400);
          v74 = vmulq_f32(vrecpeq_f32(v70), v72);
          v75 = vmulq_f32(vrecpeq_f32(v71), v72);
          v76 = vmulq_f32(vmulq_f32(v74, vrecpsq_f32(v74, v70)), v68);
          v77 = vmulq_f32(vmulq_f32(v75, vrecpsq_f32(v75, v71)), v69);
          v78 = (int8x16_t)vcgtq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v20, 0));
          v79 = (float32x4_t)vbslq_s8(v78, (int8x16_t)vminq_f32(v76, v21), (int8x16_t)v76);
          v80 = (float32x4_t)vbslq_s8(v78, (int8x16_t)vminq_f32(v77, v21), (int8x16_t)v77);
          v81 = (int8x16_t)vcgtq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v20, 1));
          v82 = (float32x4_t *)(v5 + v10);
          v82[-1] = vaddq_f32(v11, vmulq_f32(v43, vsubq_f32((float32x4_t)vbslq_s8(v66, (int8x16_t)v15, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v81, (int8x16_t)vmaxq_f32(v79, v73), (int8x16_t)v79), v68, 3)), v11)));
          *v82 = vaddq_f32(v12, vmulq_f32(v43, vsubq_f32((float32x4_t)vbslq_s8(v66, (int8x16_t)v16, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v81, (int8x16_t)vmaxq_f32(v80, v73), (int8x16_t)v80), v69, 3)), v12)));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v83 = -v9;
      }
      if ((int)v83 < v4)
      {
        v84 = *(float32x4_t *)(v6 + 16 * v83);
        v85 = *((_QWORD *)this + 51);
        v86 = vaddq_f32(vmulq_f32(v84, *(float32x4_t *)v85), vmulq_laneq_f32(*(float32x4_t *)(v85 + 16), v84, 3));
        v87 = vabsq_f32(v86);
        v88 = *(_OWORD *)(v85 + 64);
        v89 = *(float32x4_t *)(v85 + 96);
        v90 = (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v85 + 80), (int8x16_t)v87), (int8x16_t)v89);
        v91 = (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgtq_f32(v90, *(float32x4_t *)(v85 + 160)));
        v92 = vsubq_f32(vsubq_f32(v90, v89), vmulq_f32(vmulq_f32(*(float32x4_t *)(v85 + 176), v91), v90));
        v93 = vmaxq_f32(vmulq_f32(*(float32x4_t *)(v85 + 32), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v87, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v85 + 128), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v85 + 112), v87))), *(float32x4_t *)(v85 + 144)), v91), vmulq_f32(v92, vaddq_f32(vaddq_f32(*(float32x4_t *)(v85 + 224), vmulq_f32(*(float32x4_t *)(v85 + 240), v92)), vmulq_f32(vmulq_f32(v92, v92), vaddq_f32(*(float32x4_t *)(v85 + 192), vmulq_f32(*(float32x4_t *)(v85 + 208), v92))))))),
                *(float32x4_t *)(v85 + 256));
        v94 = vcvtq_f32_s32(vcvtq_s32_f32(v93));
        v95 = vsubq_f32(v94, (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgtq_f32(v94, v93)));
        v96 = vsubq_f32(v93, v95);
        v97 = veorq_s8(vandq_s8(*(int8x16_t *)(v85 + 336), (int8x16_t)v86), (int8x16_t)vmulq_f32(vaddq_f32(v89, vmulq_f32(v96, vaddq_f32(*(float32x4_t *)(v85 + 304), vmulq_f32(v96, vaddq_f32(*(float32x4_t *)(v85 + 272), vmulq_f32(*(float32x4_t *)(v85 + 288), v96)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v85 + 320), vcvtq_s32_f32(v95)), 0x17uLL)));
        v98 = *(int8x16_t *)(v85 + 352);
        v99 = (float32x4_t)vbslq_s8(v98, (int8x16_t)v86, v97);
        v100 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 3), *(float32x4_t *)(v85 + 368));
        v101 = *(float32x4_t *)(v85 + 400);
        v102 = vmulq_f32(vrecpeq_f32(v100), *(float32x4_t *)(v85 + 384));
        v103 = vmulq_f32(vmulq_f32(v102, vrecpsq_f32(v102, v100)), v99);
        v104 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v101, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v88, 0)), (int8x16_t)vminq_f32(v103, v89), (int8x16_t)v103);
        *(float32x4_t *)(v5 + 16 * v83) = vaddq_f32(v84, vmulq_f32(*(float32x4_t *)(v85 + 48), vsubq_f32((float32x4_t)vbslq_s8(v98, (int8x16_t)v86, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v101, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v88, 1)), (int8x16_t)vmaxq_f32(v104, v101), (int8x16_t)v104), v99, 3)), v84)));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcColorBalanceClip::GetDOD(HgcColorBalanceClip *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcColorBalanceClip::GetROI(HgcColorBalanceClip *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcColorBalanceClip::HgcColorBalanceClip(HgcColorBalanceClip *this)
{
  _QWORD *v2;
  HgcColorBalanceClip::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6566B08;
  v3 = (HgcColorBalanceClip::State *)operator new();
  HgcColorBalanceClip::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CC8F9C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcColorBalanceClip::~HgcColorBalanceClip(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6566B08;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C407DC911DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcColorBalanceClip::~HgcColorBalanceClip(this);
  HGObject::operator delete(v1);
}

uint64_t HgcColorBalanceClip::SetParameter(HgcColorBalanceClip *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcColorBalanceClip::GetParameter(HgcColorBalanceClip *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcColorBalanceClipGammaOne::GetProgram(HgcColorBalanceClipGammaOne *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000425\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r0*half4(hg_Params[0]);\n"
             "    r1 = half4(hg_Params[1])*r0.wwww + r1;\n"
             "    r2.xyz = r1.xyz / fmax(r1.w, 6.10350e-05h);\n"
             "    r3.xyz = fmin(c0.xxx, r2.xyz);\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, half3(hg_Params[3].xxx) < 0.00000h);\n"
             "    r3.xyz = fmax(c0.yyy, r2.xyz);\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, half3(hg_Params[3].yyy) < 0.00000h);\n"
             "    r2.xyz = r2.xyz*r1.www;\n"
             "    r2.w = r1.w;\n"
             "    output.color0 = mix(float4(r0), float4(r2), hg_Params[2]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=83f75fc7:4ca1b897:e3759a6f:08207cfa\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0004:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000003f5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r0*hg_Params[0];\n"
             "    r1 = hg_Params[1]*r0.wwww + r1;\n"
             "    r2.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
             "    r3.xyz = fmin(c0.xxx, r2.xyz);\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, hg_Params[3].xxx < 0.00000f);\n"
             "    r3.xyz = fmax(c0.yyy, r2.xyz);\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, hg_Params[3].yyy < 0.00000f);\n"
             "    r2.xyz = r2.xyz*r1.www;\n"
             "    r2.w = r1.w;\n"
             "    output.color0 = mix(r0, r2, hg_Params[2]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c8cac95c:21f13127:583e3fea:a8bbd9f9\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0004:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004e8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = r0*hg_ProgramLocal0;\n"
           "    r1 = hg_ProgramLocal1*r0.wwww + r1;\n"
           "    r2.xyz = r1.xyz / max(r1.w, 1.00000e-06);\n"
           "    r3.xyz = min(c0.xxx, r2.xyz);\n"
           "    r2.xyz = vec3(hg_ProgramLocal3.x < 0.00000 ? r3.x : r2.x, hg_ProgramLocal3.x < 0.00000 ? r3.y : r2.y, hg_"
           "ProgramLocal3.x < 0.00000 ? r3.z : r2.z);\n"
           "    r3.xyz = max(c0.yyy, r2.xyz);\n"
           "    r2.xyz = vec3(hg_ProgramLocal3.y < 0.00000 ? r3.x : r2.x, hg_ProgramLocal3.y < 0.00000 ? r3.y : r2.y, hg_"
           "ProgramLocal3.y < 0.00000 ? r3.z : r2.z);\n"
           "    r2.xyz = r2.xyz*r1.www;\n"
           "    r2.w = r1.w;\n"
           "    gl_FragColor = mix(r0, r2, hg_ProgramLocal2);\n"
           "}\n"
           "//MD5=61be9d35:e7c0e125:f4958337:6edc34f0\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0004:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcColorBalanceClipGammaOne::InitProgramDescriptor(HgcColorBalanceClipGammaOne *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcColorBalanceClipGammaOne_hgc_visible", "//Metal1.0     \n//LEN=00000002da\n[[ visible ]] FragmentOut HgcColorBalanceClipGammaOne_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = r0*hg_Params[0];\n"
    "    r1 = hg_Params[1]*r0.wwww + r1;\n"
    "    r2.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
    "    r3.xyz = fmin(c0.xxx, r2.xyz);\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, hg_Params[3].xxx < 0.00000f);\n"
    "    r3.xyz = fmax(c0.yyy, r2.xyz);\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, hg_Params[3].yyy < 0.00000f);\n"
    "    r2.xyz = r2.xyz*r1.www;\n"
    "    r2.w = r1.w;\n"
    "    output.color0 = mix(r0, r2, hg_Params[2]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CC91A4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcColorBalanceClipGammaOne");
}

void sub_1B2CC91B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CC92B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CC92F4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CC92ECLL);
}

_QWORD *HgcColorBalanceClipGammaOne::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcColorBalanceClipGammaOne [hgc1]");
}

uint64_t HgcColorBalanceClipGammaOne::BindTexture(HgcColorBalanceClipGammaOne *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcColorBalanceClipGammaOne::Bind(HgcColorBalanceClipGammaOne *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HgcColorBalanceClipGammaOne *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcColorBalanceClipGammaOne::RenderTile(HgcColorBalanceClipGammaOne *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  __int128 v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float32x4_t *v44;
  uint64_t v45;
  float32x4_t v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  __int128 v52;
  float32x4_t v53;
  float32x4_t v54;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 6);
    v8 = 16 * *((int *)a2 + 22);
    do
    {
      if (v4 < 3)
      {
        LODWORD(v45) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = *(float32x4_t *)(v6 + v9);
          v12 = *(float32x4_t *)(v6 + v9 + 16);
          v13 = *(float32x4_t *)(v6 + v9 + 32);
          v14 = *((_QWORD *)this + 51);
          v15 = *(float32x4_t *)(v14 + 16);
          v16 = vaddq_f32(vmulq_f32(v11, *(float32x4_t *)v14), vmulq_laneq_f32(v15, v11, 3));
          v17 = vaddq_f32(vmulq_f32(v12, *(float32x4_t *)v14), vmulq_laneq_f32(v15, v12, 3));
          v18 = vaddq_f32(vmulq_f32(v13, *(float32x4_t *)v14), vmulq_laneq_f32(v15, v13, 3));
          v19 = *(float32x4_t *)(v14 + 64);
          v20 = *(float32x4_t *)(v14 + 80);
          v21 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v19);
          v22 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 3), v19);
          v23 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3), v19);
          v24 = vmulq_f32(vrecpeq_f32(v21), v20);
          v25 = vmulq_f32(vrecpeq_f32(v22), v20);
          v26 = vmulq_f32(vrecpeq_f32(v23), v20);
          v27 = vmulq_f32(v16, vmulq_f32(v24, vrecpsq_f32(v24, v21)));
          v28 = vmulq_f32(v17, vmulq_f32(v25, vrecpsq_f32(v25, v22)));
          v29 = vmulq_f32(v18, vmulq_f32(v26, vrecpsq_f32(v26, v23)));
          v30 = *(float32x4_t *)(v14 + 96);
          v31 = *(float32x4_t *)(v14 + 112);
          v33 = *(float32x4_t *)(v14 + 32);
          v32 = *(_OWORD *)(v14 + 48);
          v34 = (int8x16_t)vcgtq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v32, 0));
          v35 = (float32x4_t)vbslq_s8(v34, (int8x16_t)vminq_f32(v27, v30), (int8x16_t)v27);
          v36 = (float32x4_t)vbslq_s8(v34, (int8x16_t)vminq_f32(v28, v30), (int8x16_t)v28);
          v37 = (float32x4_t)vbslq_s8(v34, (int8x16_t)vminq_f32(v29, v30), (int8x16_t)v29);
          v38 = (int8x16_t)vmaxq_f32(v35, v31);
          v39 = (int8x16_t)vmaxq_f32(v36, v31);
          v40 = (int8x16_t)vmaxq_f32(v37, v31);
          v41 = (int8x16_t)vcgtq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v32, 1));
          v42 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v41, v38, (int8x16_t)v35), v16, 3);
          v43 = *(int8x16_t *)(v14 + 128);
          v44 = (float32x4_t *)(v5 + v9);
          *v44 = vaddq_f32(v11, vmulq_f32(v33, vsubq_f32((float32x4_t)vbslq_s8(v43, (int8x16_t)v16, v42), v11)));
          v44[1] = vaddq_f32(v12, vmulq_f32(v33, vsubq_f32((float32x4_t)vbslq_s8(v43, (int8x16_t)v17, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v41, v39, (int8x16_t)v36), v17, 3)), v12)));
          v44[2] = vaddq_f32(v13, vmulq_f32(v33, vsubq_f32((float32x4_t)vbslq_s8(v43, (int8x16_t)v18, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v41, v40, (int8x16_t)v37), v18, 3)), v13)));
          v10 -= 3;
          v9 += 48;
        }
        while (v4 + v10 > 2);
        LODWORD(v45) = -v10;
      }
      if ((int)v45 < v4)
      {
        v45 = v45;
        do
        {
          v46 = *(float32x4_t *)(v6 + 16 * v45);
          v47 = *((_QWORD *)this + 51);
          v48 = vaddq_f32(vmulq_f32(v46, *(float32x4_t *)v47), vmulq_laneq_f32(*(float32x4_t *)(v47 + 16), v46, 3));
          v49 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 3), *(float32x4_t *)(v47 + 64));
          v50 = vmulq_f32(vrecpeq_f32(v49), *(float32x4_t *)(v47 + 80));
          v51 = vmulq_f32(v48, vmulq_f32(v50, vrecpsq_f32(v50, v49)));
          v52 = *(_OWORD *)(v47 + 48);
          v53 = *(float32x4_t *)(v47 + 112);
          v54 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v52, 0)), (int8x16_t)vminq_f32(v51, *(float32x4_t *)(v47 + 96)), (int8x16_t)v51);
          *(float32x4_t *)(v5 + 16 * v45++) = vaddq_f32(v46, vmulq_f32(*(float32x4_t *)(v47 + 32), vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v47 + 128), (int8x16_t)v48, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v52, 1)), (int8x16_t)vmaxq_f32(v54, v53), (int8x16_t)v54), v48, 3)), v46)));
        }
        while (v45 < v4);
      }
      ++v3;
      v5 += v7;
      v6 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcColorBalanceClipGammaOne::GetDOD(HgcColorBalanceClipGammaOne *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcColorBalanceClipGammaOne::GetROI(HgcColorBalanceClipGammaOne *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcColorBalanceClipGammaOne::HgcColorBalanceClipGammaOne(HgcColorBalanceClipGammaOne *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6566D58;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(int32x4_t *)(v3 + 64) = vdupq_n_s32(0x358637BDu);
  *(_OWORD *)(v3 + 80) = xmmword_1B3051BC0;
  *(_OWORD *)(v3 + 96) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 144) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CC9780(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcColorBalanceClipGammaOne::~HgcColorBalanceClipGammaOne(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6566D58;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B8406A4ELL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcColorBalanceClipGammaOne::~HgcColorBalanceClipGammaOne(this);
  HGObject::operator delete(v1);
}

uint64_t HgcColorBalanceClipGammaOne::SetParameter(HgcColorBalanceClipGammaOne *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_24;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_24;
    case 2:
      v8 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((_QWORD *)this + 51) + 144) = a3;
      return v8;
    case 3:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_24;
    case 4:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
LABEL_24:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcColorBalanceClipGammaOne::GetParameter(HgcColorBalanceClipGammaOne *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_7;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_7;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[36];
      a3[1] = v6[37];
      a3[2] = v6[38];
      v4 = v6 + 39;
      goto LABEL_7;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[8];
      a3[1] = v7[9];
      a3[2] = v7[10];
      v4 = v7 + 11;
      goto LABEL_7;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[12];
      a3[1] = v8[13];
      a3[2] = v8[14];
      v4 = v8 + 15;
LABEL_7:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

void HgcColorBalance::HgcColorBalance(HgcColorBalance *this)
{
  uint64_t v1;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v1 = off_1E6566FA8;
  *(_QWORD *)(v1 + 416) = 0;
  *(_QWORD *)(v1 + 424) = 0x3F0000003F000000;
  *(_DWORD *)(v1 + 432) = 1056964608;
  *(_QWORD *)(v1 + 440) = 0x3F0000003F000000;
  *(_DWORD *)(v1 + 448) = 1056964608;
  *(_QWORD *)(v1 + 456) = 0x3F0000003F000000;
  *(_DWORD *)(v1 + 464) = 1056964608;
  *(_OWORD *)(v1 + 472) = xmmword_1B304F250;
  *(_BYTE *)(v1 + 488) = 0;
}

void HgcColorBalance::~HgcColorBalance(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6566FA8;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcColorBalance::~HgcColorBalance(this);
  HGObject::operator delete(v1);
}

uint64_t HgcColorBalance::GetOutput(HgcColorBalance *this, HGRenderer *a2)
{
  double v4;
  uint64_t v5;
  char *v6;
  double v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  double v15;
  char *v16;
  double v17;
  double v18;
  float v19;
  HgcColorBalanceClipGammaOne *v20;
  HgcColorBalanceClipGammaOne *v21;
  double v22;
  double v23;
  double v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  HGNode *Input;
  float v33;
  float v34;
  float v35;
  HgcColorBalanceNoClipGammaOne *v37;
  HgcColorBalanceNoClipGammaOne *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = *((float *)this + 121);
  if (*((_BYTE *)this + 488))
  {
    v5 = 0;
    v6 = (char *)this + 456;
    do
    {
      v7 = *(float *)&v6[v5 - 32] + -0.5;
      *(float *)&v7 = v7 + v7 * v4;
      *(float *)((char *)&v48 + v5) = *(float *)&v7;
      *(float *)&v7 = 1.0 - *(float *)&v6[v5] + 0.5 + (1.0 - *(float *)&v6[v5] + -0.5) * v4;
      *(float *)((char *)&v42 + v5) = *(float *)&v7;
      *(float *)&v7 = *(float *)&v6[v5 - 16] + 0.5 + (*(float *)&v6[v5 - 16] + -0.5) * v4;
      *(float *)((char *)&v45 + v5) = *(float *)&v7;
      v5 += 4;
    }
    while (v5 != 12);
    v9 = v42;
    v8 = v43;
    v10 = 1.0 - fabsf(v42);
    v11 = 1.0 - fabsf(v43);
    v12 = v44;
    v13 = 1.0 - fabsf(v44);
  }
  else
  {
    v14 = 0;
    v15 = (v4 + -1.0) * 1.25;
    v16 = (char *)this + 456;
    do
    {
      v17 = *(float *)&v16[v14 - 32] + -0.5;
      *(float *)&v17 = v17 + v17 * v15;
      *(float *)((char *)&v48 + v14) = *(float *)&v17;
      *(float *)&v17 = (1.0 - *(float *)&v16[v14] + -0.5) * v4 * 1.5 + 1.0;
      *(float *)((char *)&v42 + v14) = *(float *)&v17;
      *(float *)&v17 = *(float *)&v16[v14 - 16] + 0.5 + v15 * (*(float *)&v16[v14 - 16] + -0.5);
      *(float *)((char *)&v45 + v14) = *(float *)&v17;
      v14 += 4;
    }
    while (v14 != 12);
    v9 = v42;
    v8 = v43;
    v10 = vabds_f32(1.0, v42);
    v11 = vabds_f32(1.0, v43);
    v12 = v44;
    v13 = vabds_f32(1.0, v44);
  }
  v18 = v10;
  v19 = *((float *)this + 118);
  v40 = v12;
  v41 = v8;
  if (v18 < 0.000001 && v11 < 0.000001 && v13 < 0.000001)
  {
    if (v19 < 0.0 || *((float *)this + 119) < 0.0)
    {
      v20 = (HgcColorBalanceClipGammaOne *)HGObject::operator new(0x1A0uLL);
      HgcColorBalanceClipGammaOne::HgcColorBalanceClipGammaOne(v20);
      v21 = (HgcColorBalanceClipGammaOne *)*((_QWORD *)this + 52);
      if (v21 != v20)
      {
        if (v21)
          goto LABEL_20;
        goto LABEL_21;
      }
LABEL_22:
      (*(void (**)(HgcColorBalanceClipGammaOne *))(*(_QWORD *)v20 + 24))(v20);
      v20 = (HgcColorBalanceClipGammaOne *)*((_QWORD *)this + 52);
      goto LABEL_23;
    }
    v37 = (HgcColorBalanceNoClipGammaOne *)HGObject::operator new(0x200uLL);
    HgcColorBalanceNoClipGammaOne::HgcColorBalanceNoClipGammaOne(v37);
    v38 = (HgcColorBalanceNoClipGammaOne *)*((_QWORD *)this + 52);
    if (v38 != v37)
    {
      if (v38)
        goto LABEL_30;
      goto LABEL_31;
    }
    if (!v37)
      goto LABEL_24;
    goto LABEL_33;
  }
  if (v19 >= 0.0 && *((float *)this + 119) >= 0.0)
  {
    v37 = (HgcColorBalanceNoClipGammaOne *)HGObject::operator new(0x1A0uLL);
    HgcColorBalanceNoClip::HgcColorBalanceNoClip(v37);
    v38 = (HgcColorBalanceNoClipGammaOne *)*((_QWORD *)this + 52);
    if (v38 != v37)
    {
      if (v38)
LABEL_30:
        (*(void (**)(HgcColorBalanceNoClipGammaOne *))(*(_QWORD *)v38 + 24))(v38);
LABEL_31:
      *((_QWORD *)this + 52) = v37;
      goto LABEL_24;
    }
    if (!v37)
      goto LABEL_24;
LABEL_33:
    (*(void (**)(HgcColorBalanceNoClipGammaOne *))(*(_QWORD *)v37 + 24))(v37);
    goto LABEL_24;
  }
  v20 = (HgcColorBalanceClipGammaOne *)HGObject::operator new(0x1A0uLL);
  HgcColorBalanceClip::HgcColorBalanceClip(v20);
  v21 = (HgcColorBalanceClipGammaOne *)*((_QWORD *)this + 52);
  if (v21 == v20)
    goto LABEL_22;
  if (v21)
LABEL_20:
    (*(void (**)(HgcColorBalanceClipGammaOne *))(*(_QWORD *)v21 + 24))(v21);
LABEL_21:
  *((_QWORD *)this + 52) = v20;
LABEL_23:
  (*(void (**)(HgcColorBalanceClipGammaOne *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 4, *((float *)this + 118), *((float *)this + 119), 0.0, 0.0);
LABEL_24:
  v22 = (1.0 - v48) * v45;
  v23 = (1.0 - v49) * v46;
  v24 = (1.0 - v50) * v47;
  v25 = v48 * v45;
  v26 = v49 * v46;
  v27 = v50 * v47;
  v28 = fmax(v9, 0.000001);
  v39 = v28;
  v29 = fmax(v41, 0.000001);
  v30 = fmax(v40, 0.000001);
  v31 = *((_QWORD *)this + 52);
  Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  (*(void (**)(uint64_t, _QWORD, HGNode *))(*(_QWORD *)v31 + 120))(v31, 0, Input);
  v33 = v22;
  v34 = v23;
  v35 = v24;
  (*(void (**)(_QWORD, _QWORD, float, float, float, float))(**((_QWORD **)this + 52) + 96))(*((_QWORD *)this + 52), 0, v33, v34, v35, 1.0);
  (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 52) + 96))(*((_QWORD *)this + 52), 1, v25, v26, v27, 0.0);
  (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 52) + 96))(*((_QWORD *)this + 52), 2, v39, v29, v30, 1.0);
  (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 52) + 96))(*((_QWORD *)this + 52), 3, *((float *)this + 120), *((float *)this + 120), *((float *)this + 120), *((float *)this + 120));
  return *((_QWORD *)this + 52);
}

void sub_1B2CC9FE4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t HgcColorBalance::SetParameter(HgcColorBalance *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      if (*((float *)this + 106) == a3 && *((float *)this + 107) == a4 && *((float *)this + 108) == a5)
        return 0;
      *((float *)this + 106) = a3;
      *((float *)this + 107) = a4;
      *((float *)this + 108) = a5;
      *((_DWORD *)this + 109) = 1065353216;
      goto LABEL_20;
    case 1:
      if (*((float *)this + 110) == a3 && *((float *)this + 111) == a4 && *((float *)this + 112) == a5)
        return 0;
      *((float *)this + 110) = a3;
      *((float *)this + 111) = a4;
      *((float *)this + 112) = a5;
      *((_DWORD *)this + 113) = 1065353216;
      goto LABEL_20;
    case 2:
      if (*((float *)this + 114) == a3 && *((float *)this + 115) == a4 && *((float *)this + 116) == a5)
        return 0;
      *((float *)this + 114) = fabsf(a3);
      *((float *)this + 115) = fabsf(a4);
      *((float *)this + 116) = fabsf(a5);
      *((_DWORD *)this + 117) = 1065353216;
      goto LABEL_20;
    case 3:
      if (*((float *)this + 120) == a3)
        return 0;
      *((float *)this + 120) = a3;
      goto LABEL_20;
    case 4:
      if (*((float *)this + 118) == a3 && *((float *)this + 119) == a4)
        return 0;
      *((float *)this + 118) = a3;
      *((float *)this + 119) = a4;
LABEL_20:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcColorBalance::GetParameter(HgcColorBalance *this, int a2, float *a3)
{
  float *v3;
  uint64_t v4;
  float result;

  switch(a2)
  {
    case 0:
      *a3 = *((float *)this + 106);
      a3[1] = *((float *)this + 107);
      a3[2] = *((float *)this + 108);
      v3 = (float *)((char *)this + 436);
      goto LABEL_6;
    case 1:
      *a3 = *((float *)this + 110);
      a3[1] = *((float *)this + 111);
      a3[2] = *((float *)this + 112);
      v3 = (float *)((char *)this + 452);
      goto LABEL_6;
    case 2:
      *a3 = *((float *)this + 114);
      a3[1] = *((float *)this + 115);
      a3[2] = *((float *)this + 116);
      v3 = (float *)((char *)this + 468);
      goto LABEL_6;
    case 3:
      v3 = (float *)((char *)this + 480);
      *a3 = *((float *)this + 120);
      a3[1] = *((float *)this + 120);
      a3[2] = *((float *)this + 120);
LABEL_6:
      v4 = 3;
      goto LABEL_8;
    case 4:
      *a3 = *((float *)this + 118);
      v3 = (float *)((char *)this + 476);
      v4 = 1;
LABEL_8:
      result = *v3;
      a3[v4] = *v3;
      break;
    default:
      return result;
  }
  return result;
}

double HgcColorBalanceClip::State::State(HgcColorBalanceClip::State *this)
{
  double result;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_1B3051600;
  *((_OWORD *)this + 6) = xmmword_1B3051560;
  *((_OWORD *)this + 7) = xmmword_1B3051610;
  *((_OWORD *)this + 8) = xmmword_1B3051620;
  *((_OWORD *)this + 9) = xmmword_1B3051630;
  *((_OWORD *)this + 10) = xmmword_1B3051640;
  *((_OWORD *)this + 11) = xmmword_1B3051510;
  *((_OWORD *)this + 12) = xmmword_1B3051650;
  *((_OWORD *)this + 13) = xmmword_1B3051660;
  *((_OWORD *)this + 14) = xmmword_1B3051670;
  *((_OWORD *)this + 15) = xmmword_1B3051680;
  *((_OWORD *)this + 16) = xmmword_1B3051690;
  *((_OWORD *)this + 17) = xmmword_1B30516A0;
  *((_OWORD *)this + 18) = xmmword_1B30516B0;
  *((_OWORD *)this + 19) = xmmword_1B30516C0;
  *((_OWORD *)this + 20) = xmmword_1B30516D0;
  *((_OWORD *)this + 21) = xmmword_1B3053570;
  *((_OWORD *)this + 22) = xmmword_1B3050F70;
  *((int32x4_t *)this + 23) = vdupq_n_s32(0x358637BDu);
  result = 0.00793481058;
  *((_OWORD *)this + 24) = xmmword_1B3051BC0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  return result;
}

const char *HgcSampleTiledNoise::GetProgram(HgcSampleTiledNoise *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000b73\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(255.0000000, 0.5000000000, 1.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = 1.00000h / half(hg_Params[2].x);\n"
             "    s0.zw = frag._texCoord0.xy + hg_Params[5].zw;\n"
             "    s0.xy = s0.zw/hg_Params[1].xy;\n"
             "    s1.zw = floor(s0.xy);\n"
             "    s0.x = s1.z*float(r0.x);\n"
             "    s0.x = floor(s0.x);\n"
             "    s0.y = float(c0.y);\n"
             "    s0.x = -s0.x*hg_Params[2].x + s1.z;\n"
             "    s2.xy = s0.xy + hg_Params[6].xy;\n"
             "    s2.xy = s2.xy*hg_Params[6].zw;\n"
             "    s0.x = (float) hg_Texture0.sample(hg_Sampler0, s2.xy).x;\n"
             "    s0.x = s0.x*float(c0.x);\n"
             "    s0.x = floor(s0.x);\n"
             "    s0.x = s1.w + s0.x;\n"
             "    s0.y = float(r0.x)*s0.x;\n"
             "    s1.x = floor(s0.y);\n"
             "    s0.y = float(c0.y);\n"
             "    s0.x = -s1.x*hg_Params[2].x + s0.x;\n"
             "    s2.xy = s0.xy + hg_Params[6].xy;\n"
             "    s2.xy = s2.xy*hg_Params[6].zw;\n"
             "    s0.x = (float) hg_Texture0.sample(hg_Sampler0, s2.xy).x;\n"
             "    s0.x = s0.x*float(c0.x);\n"
             "    s1.x = floor(s0.x);\n"
             "    s1.y = float(r0.x)*s1.x;\n"
             "    s0.x = s1.w + s1.w;\n"
             "    s0.y = s0.x*float(r0.x);\n"
             "    s1.y = floor(s1.y);\n"
             "    s0.y = floor(s0.y);\n"
             "    s1.x = -s1.y*hg_Params[2].x + s1.x;\n"
             "    s0.x = -s0.y*hg_Params[2].x + s0.x;\n"
             "    s0.y = float(c0.y);\n"
             "    s2.xy = s0.xy + hg_Params[6].xy;\n"
             "    s2.xy = s2.xy*hg_Params[6].zw;\n"
             "    s0.x = (float) hg_Texture0.sample(hg_Sampler0, s2.xy).x;\n"
             "    s1.y = float(c0.y);\n"
             "    s2.xy = s1.xy + hg_Params[6].xy;\n"
             "    s2.xy = s2.xy*hg_Params[6].zw;\n"
             "    s1.x = (float) hg_Texture0.sample(hg_Sampler0, s2.xy).x;\n"
             "    s0.y = s1.x*float(c0.x);\n"
             "    s0.x = s0.x*float(c0.x);\n"
             "    s0.x = floor(s0.x);\n"
             "    s1.x = floor(s0.y);\n"
             "    s0.x = s1.z + s0.x;\n"
             "    s0.y = s0.x*float(r0.x);\n"
             "    s2.x = floor(s0.y);\n"
             "    s1.y = s1.x/hg_Params[0].y;\n"
             "    s0.y = float(c0.y);\n"
             "    s0.x = -s2.x*hg_Params[2].x + s0.x;\n"
             "    s2.xy = s0.xy + hg_Params[6].xy;\n"
             "    s2.xy = s2.xy*hg_Params[6].zw;\n"
             "    s0.x = (float) hg_Texture0.sample(hg_Sampler0, s2.xy).x;\n"
             "    s0.y = floor(s1.y);\n"
             "    s0.x = s0.x*float(c0.x);\n"
             "    s0.y = -s0.y*hg_Params[0].y + s1.x;\n"
             "    s0.x = floor(s0.x);\n"
             "    s1.y = s0.x/hg_Params[0].x;\n"
             "    s1.x = floor(s1.y);\n"
             "    s0.zw = -s1.zw*hg_Params[1].xy + s0.zw;\n"
             "    s0.x = -s1.x*hg_Params[0].x + s0.x;\n"
             "    s0.xy = s0.xy*hg_Params[1].xy + s0.zw;\n"
             "    s0.xy = s0.xy + hg_Params[7].xy;\n"
             "    s0.xy = s0.xy*hg_Params[7].zw;\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, s0.xy);\n"
             "    r0 = select(r0, r0.xxxw, half4(hg_Params[3]) < 0.00000h);\n"
             "    output.color0 = mix(float4(c0.yyyz), float4(r0), hg_Params[4]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2fe2b506:2d6bb22d:313529f7:a644a727\n"
             "//SIG=00400000:00000000:00000000:00000003:0001:0008:0004:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000ab7\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(255.0000000, 0.5000000000, 1.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = 1.00000f / hg_Params[2].x;\n"
             "    r1.zw = frag._texCoord0.xy + hg_Params[5].zw;\n"
             "    r1.xy = r1.zw/hg_Params[1].xy;\n"
             "    r2.zw = floor(r1.xy);\n"
             "    r1.x = r2.z*r0.x;\n"
             "    r1.x = floor(r1.x);\n"
             "    r1.y = c0.y;\n"
             "    r1.x = -r1.x*hg_Params[2].x + r2.z;\n"
             "    r3.xy = r1.xy + hg_Params[6].xy;\n"
             "    r3.xy = r3.xy*hg_Params[6].zw;\n"
             "    r1.x = hg_Texture0.sample(hg_Sampler0, r3.xy).x;\n"
             "    r1.x = r1.x*c0.x;\n"
             "    r1.x = floor(r1.x);\n"
             "    r1.x = r2.w + r1.x;\n"
             "    r1.y = r0.x*r1.x;\n"
             "    r2.x = floor(r1.y);\n"
             "    r1.y = c0.y;\n"
             "    r1.x = -r2.x*hg_Params[2].x + r1.x;\n"
             "    r3.xy = r1.xy + hg_Params[6].xy;\n"
             "    r3.xy = r3.xy*hg_Params[6].zw;\n"
             "    r1.x = hg_Texture0.sample(hg_Sampler0, r3.xy).x;\n"
             "    r1.x = r1.x*c0.x;\n"
             "    r2.x = floor(r1.x);\n"
             "    r2.y = r0.x*r2.x;\n"
             "    r1.x = r2.w + r2.w;\n"
             "    r1.y = r1.x*r0.x;\n"
             "    r2.y = floor(r2.y);\n"
             "    r1.y = floor(r1.y);\n"
             "    r2.x = -r2.y*hg_Params[2].x + r2.x;\n"
             "    r1.x = -r1.y*hg_Params[2].x + r1.x;\n"
             "    r1.y = c0.y;\n"
             "    r3.xy = r1.xy + hg_Params[6].xy;\n"
             "    r3.xy = r3.xy*hg_Params[6].zw;\n"
             "    r1.x = hg_Texture0.sample(hg_Sampler0, r3.xy).x;\n"
             "    r2.y = c0.y;\n"
             "    r3.xy = r2.xy + hg_Params[6].xy;\n"
             "    r3.xy = r3.xy*hg_Params[6].zw;\n"
             "    r2.x = hg_Texture0.sample(hg_Sampler0, r3.xy).x;\n"
             "    r1.y = r2.x*c0.x;\n"
             "    r1.x = r1.x*c0.x;\n"
             "    r1.x = floor(r1.x);\n"
             "    r2.x = floor(r1.y);\n"
             "    r1.x = r2.z + r1.x;\n"
             "    r1.y = r1.x*r0.x;\n"
             "    r3.x = floor(r1.y);\n"
             "    r2.y = r2.x/hg_Params[0].y;\n"
             "    r1.y = c0.y;\n"
             "    r1.x = -r3.x*hg_Params[2].x + r1.x;\n"
             "    r0.xy = r1.xy + hg_Params[6].xy;\n"
             "    r0.xy = r0.xy*hg_Params[6].zw;\n"
             "    r1.x = hg_Texture0.sample(hg_Sampler0, r0.xy).x;\n"
             "    r1.y = floor(r2.y);\n"
             "    r1.x = r1.x*c0.x;\n"
             "    r1.y = -r1.y*hg_Params[0].y + r2.x;\n"
             "    r1.x = floor(r1.x);\n"
             "    r2.y = r1.x/hg_Params[0].x;\n"
             "    r2.x = floor(r2.y);\n"
             "    r1.zw = -r2.zw*hg_Params[1].xy + r1.zw;\n"
             "    r1.x = -r2.x*hg_Params[0].x + r1.x;\n"
             "    r1.xy = r1.xy*hg_Params[1].xy + r1.zw;\n"
             "    r1.xy = r1.xy + hg_Params[7].xy;\n"
             "    r1.xy = r1.xy*hg_Params[7].zw;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, r1.xy);\n"
             "    r1 = select(r1, r1.xxxw, hg_Params[3] < 0.00000f);\n"
             "    output.color0 = mix(c0.yyyz, r1, hg_Params[4]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=82167b58:cbd9709c:b22bbbab:ef8606ed\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0008:0004:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000c0d\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(255.0000000, 0.5000000000, 1.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.x = 1.00000 / hg_ProgramLocal2.x;\n"
           "    r1.zw = hg_TexCoord0.xy + hg_ProgramLocal5.zw;\n"
           "    r1.xy = r1.zw/hg_ProgramLocal1.xy;\n"
           "    r2.zw = floor(r1.xy);\n"
           "    r1.x = r2.z*r0.x;\n"
           "    r1.x = floor(r1.x);\n"
           "    r1.y = c0.y;\n"
           "    r1.x = -r1.x*hg_ProgramLocal2.x + r2.z;\n"
           "    r3.xy = r1.xy + hg_ProgramLocal6.xy;\n"
           "    r3.xy = r3.xy*hg_ProgramLocal6.zw;\n"
           "    r1.x = texture2D(hg_Texture0, r3.xy).x;\n"
           "    r1.x = r1.x*c0.x;\n"
           "    r1.x = floor(r1.x);\n"
           "    r1.x = r2.w + r1.x;\n"
           "    r1.y = r0.x*r1.x;\n"
           "    r2.x = floor(r1.y);\n"
           "    r1.y = c0.y;\n"
           "    r1.x = -r2.x*hg_ProgramLocal2.x + r1.x;\n"
           "    r3.xy = r1.xy + hg_ProgramLocal6.xy;\n"
           "    r3.xy = r3.xy*hg_ProgramLocal6.zw;\n"
           "    r1.x = texture2D(hg_Texture0, r3.xy).x;\n"
           "    r1.x = r1.x*c0.x;\n"
           "    r2.x = floor(r1.x);\n"
           "    r2.y = r0.x*r2.x;\n"
           "    r1.x = r2.w + r2.w;\n"
           "    r1.y = r1.x*r0.x;\n"
           "    r2.y = floor(r2.y);\n"
           "    r1.y = floor(r1.y);\n"
           "    r2.x = -r2.y*hg_ProgramLocal2.x + r2.x;\n"
           "    r1.x = -r1.y*hg_ProgramLocal2.x + r1.x;\n"
           "    r1.y = c0.y;\n"
           "    r3.xy = r1.xy + hg_ProgramLocal6.xy;\n"
           "    r3.xy = r3.xy*hg_ProgramLocal6.zw;\n"
           "    r1.x = texture2D(hg_Texture0, r3.xy).x;\n"
           "    r2.y = c0.y;\n"
           "    r3.xy = r2.xy + hg_ProgramLocal6.xy;\n"
           "    r3.xy = r3.xy*hg_ProgramLocal6.zw;\n"
           "    r2.x = texture2D(hg_Texture0, r3.xy).x;\n"
           "    r1.y = r2.x*c0.x;\n"
           "    r1.x = r1.x*c0.x;\n"
           "    r1.x = floor(r1.x);\n"
           "    r2.x = floor(r1.y);\n"
           "    r1.x = r2.z + r1.x;\n"
           "    r1.y = r1.x*r0.x;\n"
           "    r3.x = floor(r1.y);\n"
           "    r2.y = r2.x/hg_ProgramLocal0.y;\n"
           "    r1.y = c0.y;\n"
           "    r1.x = -r3.x*hg_ProgramLocal2.x + r1.x;\n"
           "    r0.xy = r1.xy + hg_ProgramLocal6.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal6.zw;\n"
           "    r1.x = texture2D(hg_Texture0, r0.xy).x;\n"
           "    r1.y = floor(r2.y);\n"
           "    r1.x = r1.x*c0.x;\n"
           "    r1.y = -r1.y*hg_ProgramLocal0.y + r2.x;\n"
           "    r1.x = floor(r1.x);\n"
           "    r2.y = r1.x/hg_ProgramLocal0.x;\n"
           "    r2.x = floor(r2.y);\n"
           "    r1.zw = -r2.zw*hg_ProgramLocal1.xy + r1.zw;\n"
           "    r1.x = -r2.x*hg_ProgramLocal0.x + r1.x;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal1.xy + r1.zw;\n"
           "    r1.xy = r1.xy + hg_ProgramLocal7.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal7.zw;\n"
           "    r1 = texture2D(hg_Texture1, r1.xy);\n"
           "    r1 = vec4(hg_ProgramLocal3.x < 0.00000 ? r1.x : r1.x, hg_ProgramLocal3.y < 0.00000 ? r1.x : r1.y, hg_Prog"
           "ramLocal3.z < 0.00000 ? r1.x : r1.z, hg_ProgramLocal3.w < 0.00000 ? r1.w : r1.w);\n"
           "    gl_FragColor = mix(c0.yyyz, r1, hg_ProgramLocal4);\n"
           "}\n"
           "//MD5=0d7ad1dd:d494ce4a:9f611288:ffc05865\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0008:0004:0000:0000:0000:0000:0000:0001:02:0:1:0\n";
  }
}

void HgcSampleTiledNoise::InitProgramDescriptor(HgcSampleTiledNoise *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSampleTiledNoise_hgc_visible", "//Metal1.0     \n//LEN=00000009db\n[[ visible ]] FragmentOut HgcSampleTiledNoise_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(255.0000000, 0.5000000000, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = 1.00000f / hg_Params[2].x;\n"
    "    r1.zw = texCoord0.xy + hg_Params[5].zw;\n"
    "    r1.xy = r1.zw/hg_Params[1].xy;\n"
    "    r2.zw = floor(r1.xy);\n"
    "    r1.x = r2.z*r0.x;\n"
    "    r1.x = floor(r1.x);\n"
    "    r1.y = c0.y;\n"
    "    r1.x = -r1.x*hg_Params[2].x + r2.z;\n"
    "    r3.xy = r1.xy + hg_Params[6].xy;\n"
    "    r3.xy = r3.xy*hg_Params[6].zw;\n"
    "    r1.x = hg_Texture0.sample(hg_Sampler0, r3.xy).x;\n"
    "    r1.x = r1.x*c0.x;\n"
    "    r1.x = floor(r1.x);\n"
    "    r1.x = r2.w + r1.x;\n"
    "    r1.y = r0.x*r1.x;\n"
    "    r2.x = floor(r1.y);\n"
    "    r1.y = c0.y;\n"
    "    r1.x = -r2.x*hg_Params[2].x + r1.x;\n"
    "    r3.xy = r1.xy + hg_Params[6].xy;\n"
    "    r3.xy = r3.xy*hg_Params[6].zw;\n"
    "    r1.x = hg_Texture0.sample(hg_Sampler0, r3.xy).x;\n"
    "    r1.x = r1.x*c0.x;\n"
    "    r2.x = floor(r1.x);\n"
    "    r2.y = r0.x*r2.x;\n"
    "    r1.x = r2.w + r2.w;\n"
    "    r1.y = r1.x*r0.x;\n"
    "    r2.y = floor(r2.y);\n"
    "    r1.y = floor(r1.y);\n"
    "    r2.x = -r2.y*hg_Params[2].x + r2.x;\n"
    "    r1.x = -r1.y*hg_Params[2].x + r1.x;\n"
    "    r1.y = c0.y;\n"
    "    r3.xy = r1.xy + hg_Params[6].xy;\n"
    "    r3.xy = r3.xy*hg_Params[6].zw;\n"
    "    r1.x = hg_Texture0.sample(hg_Sampler0, r3.xy).x;\n"
    "    r2.y = c0.y;\n"
    "    r3.xy = r2.xy + hg_Params[6].xy;\n"
    "    r3.xy = r3.xy*hg_Params[6].zw;\n"
    "    r2.x = hg_Texture0.sample(hg_Sampler0, r3.xy).x;\n"
    "    r1.y = r2.x*c0.x;\n"
    "    r1.x = r1.x*c0.x;\n"
    "    r1.x = floor(r1.x);\n"
    "    r2.x = floor(r1.y);\n"
    "    r1.x = r2.z + r1.x;\n"
    "    r1.y = r1.x*r0.x;\n"
    "    r3.x = floor(r1.y);\n"
    "    r2.y = r2.x/hg_Params[0].y;\n"
    "    r1.y = c0.y;\n"
    "    r1.x = -r3.x*hg_Params[2].x + r1.x;\n"
    "    r0.xy = r1.xy + hg_Params[6].xy;\n"
    "    r0.xy = r0.xy*hg_Params[6].zw;\n"
    "    r1.x = hg_Texture0.sample(hg_Sampler0, r0.xy).x;\n"
    "    r1.y = floor(r2.y);\n"
    "    r1.x = r1.x*c0.x;\n"
    "    r1.y = -r1.y*hg_Params[0].y + r2.x;\n"
    "    r1.x = floor(r1.x);\n"
    "    r2.y = r1.x/hg_Params[0].x;\n"
    "    r2.x = floor(r2.y);\n"
    "    r1.zw = -r2.zw*hg_Params[1].xy + r1.zw;\n"
    "    r1.x = -r2.x*hg_Params[0].x + r1.x;\n"
    "    r1.xy = r1.xy*hg_Params[1].xy + r1.zw;\n"
    "    r1.xy = r1.xy + hg_Params[7].xy;\n"
    "    r1.xy = r1.xy*hg_Params[7].zw;\n"
    "    r1 = hg_Texture1.sample(hg_Sampler1, r1.xy);\n"
    "    r1 = select(r1, r1.xxxw, hg_Params[3] < 0.00000f);\n"
    "    output.color0 = mix(c0.yyyz, r1, hg_Params[4]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CCA45C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSampleTiledNoise");
}

void sub_1B2CCA46C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050E00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CCA66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CCA6CC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CCA6C4);
}

_QWORD *HgcSampleTiledNoise::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSampleTiledNoise [hgc1]");
}

uint64_t HgcSampleTiledNoise::BindTexture(HgcSampleTiledNoise *this, HGHandler *a2, int a3)
{
  int v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  void (*v9)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128);
  int v10;
  HGHandler *v12;
  uint64_t v13;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    v7.n128_f32[0] = (float)*((int *)a2 + 60);
    v8.n128_f32[0] = (float)*((int *)a2 + 61);
    if (v10)
    {
      v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v5.n128_u32[0] = 1.0;
      v6.n128_u32[0] = 1.0;
    }
    else
    {
      v5.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v12 = a2;
    v13 = 7;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    v7.n128_f32[0] = (float)*((int *)a2 + 60);
    v8.n128_f32[0] = (float)*((int *)a2 + 61);
    if (v4)
    {
      v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v5.n128_u32[0] = 1.0;
      v6.n128_u32[0] = 1.0;
    }
    else
    {
      v5.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v12 = a2;
    v13 = 6;
  }
  v9(v12, v13, v7, v8, v5, v6);
  return 0;
}

uint64_t HgcSampleTiledNoise::Bind(HgcSampleTiledNoise *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcSampleTiledNoise *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcSampleTiledNoise::RenderTile(HgcSampleTiledNoise *this, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  float32x4_t v5;
  int v6;
  float32x4_t v7;
  int32x2_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  int v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  __int32 v46;
  float32x4_t v47;
  int32x4_t v48;
  int32x2_t v49;
  __int32 v50;
  __int32 v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  __int32 v71;
  __int32 v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int8x16_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  int32x4_t v98;
  float32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  __int32 v102;
  int32x4_t v103;
  __int32 v104;
  float32x4_t v105;
  int32x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  int32x4_t v138;
  __int32 v139;
  __int32 v140;
  float32x4_t v141;
  int32x4_t v142;
  __int32 v143;
  __int32 v144;
  int8x16_t v145;
  int8x16_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  __int32 v169;
  float32x4_t v170;
  int32x4_t v171;
  int32x2_t v172;
  __int32 v173;
  __int32 v174;
  float32x4_t v175;
  int32x4_t v176;
  __int32 v177;
  __int32 v178;
  __int32 v179;
  int8x16_t v180;
  int8x16_t v181;
  float32x4_t v182;
  int8x16_t v183;
  float32x4_t *v184;
  uint64_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  int8x16_t v201;
  float32x4_t v202;
  float32x4_t v203;
  __int32 v204;
  float32x4_t v205;
  int32x4_t v206;
  int32x2_t v207;
  float32x4_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  int32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  int8x16_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  int32x4_t v230;
  int8x16_t v231;
  float32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  int32x4_t v250;
  int8x16_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  int32x4_t v264;
  int8x16_t v265;
  float32x4_t v267;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    v6 = a2[1].i32[0] - v2.i32[0];
    v7 = (float32x4_t)xmmword_1B304F240;
    v8 = a2[2];
    v9 = 16 * a2[3].i32[0];
    v10.i64[0] = 0x3F0000003F000000;
    v10.i64[1] = 0x3F0000003F000000;
    v11 = v5;
    do
    {
      if (v6 < 2)
      {
        v12 = 0;
        v14 = v11;
      }
      else
      {
        v12 = 0;
        v13 = v6;
        v267 = v11;
        v14 = v11;
        do
        {
          v15 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v16 = *((_QWORD *)this + 51);
          v17 = *(float32x4_t *)(v16 + 96);
          v18 = *(float32x4_t *)(v16 + 112);
          v19 = (float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL);
          v20 = *(float32x4_t *)(v16 + 32);
          v21 = *(float32x4_t *)(v16 + 64);
          v22 = *(float32x4_t *)(v16 + 80);
          v23 = vaddq_f32(v19, v22);
          v24 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), v22);
          v25 = *(float32x4_t *)(v16 + 16);
          v27 = *(float32x4_t *)(v16 + 128);
          v26 = *(float32x4_t *)(v16 + 144);
          v28 = vminq_f32(vmaxq_f32(vrecpeq_f32(v25), v18), v27);
          v29 = vminq_f32(vmaxq_f32(vmulq_f32(v28, vrecpsq_f32(v25, v28)), v18), v27);
          v30 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v20), v17), v18), v27);
          v31 = vmulq_f32(v29, vrecpsq_f32(v25, v29));
          v32 = (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v23, 1), v31), 8uLL);
          v33 = (float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v24, 1), v31), 8uLL);
          v34 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
          v35 = vcvtq_f32_s32(vcvtq_s32_f32(v33));
          v36 = (int8x16_t)vcgtq_f32(v34, v32);
          v37 = vmulq_f32(v30, vrecpsq_f32(v20, v30));
          v38 = vsubq_f32(v34, (float32x4_t)vandq_s8((int8x16_t)v18, v36));
          v39 = vsubq_f32(v35, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v35, v33)));
          v30.i64[0] = vmulq_laneq_f32(v37, v38, 2).u64[0];
          v33.i64[0] = vmulq_laneq_f32(v37, v39, 2).u64[0];
          v30.i64[1] = v23.i64[1];
          v33.i64[1] = v24.i64[1];
          v40 = vcvtq_f32_s32(vcvtq_s32_f32(v30));
          v41 = vcvtq_f32_s32(vcvtq_s32_f32(v33));
          v23.i32[0] = vsubq_f32(v40, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v40, v30))).u32[0];
          v24.i32[0] = vsubq_f32(v41, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v41, v33))).u32[0];
          v23.i32[1] = 0.5;
          v24.i32[1] = 0.5;
          v42 = *(int8x16_t *)(v16 + 160);
          v43 = *(float32x4_t *)(v16 + 176);
          v44 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), vmulq_f32(v20, v23)), (int8x16_t)v23);
          v45 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), vmulq_f32(v20, v24)), (int8x16_t)v24);
          v46 = a2[11].i32[0];
          v47 = vaddq_f32(vsubq_f32(v44, v5), v10);
          v48 = vcvtq_s32_f32(v47);
          v47.i64[0] = vaddq_s32(v48, vcgtq_f32(vcvtq_f32_s32(v48), v47)).u64[0];
          v49 = a2[10];
          v50 = v47.i32[1];
          v51 = v47.i32[0];
          v52 = vaddq_f32(vsubq_f32(v45, v5), v10);
          v53 = (float32x4_t)vcvtq_s32_f32(v52);
          v52.i64[0] = vaddq_s32((int32x4_t)v53, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v53), v52)).u64[0];
          v53.i64[0] = vmulq_f32(*(float32x4_t *)(*(_QWORD *)&v49 + 16 * (v51 + v50 * v46)), v43).u64[0];
          v52.i64[0] = vmulq_f32(*(float32x4_t *)(*(_QWORD *)&v49 + 16 * (v52.i32[0] + v52.i32[1] * v46)), v43).u64[0];
          v53.i64[1] = v44.i64[1];
          v52.i64[1] = v45.i64[1];
          v54 = vcvtq_f32_s32(vcvtq_s32_f32(v53));
          v55 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
          v53.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 0xCuLL), vsubq_f32(v54, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v54, v53), (int8x16_t)v26, (int8x16_t)0))).u64[0];
          v52.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 0xCuLL), vsubq_f32(v55, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v55, v52), (int8x16_t)v26, (int8x16_t)0))).u64[0];
          v54.i64[0] = v53.i64[0];
          v55.i64[0] = v52.i64[0];
          v54.i64[1] = v44.i64[1];
          v53.i64[1] = vdupq_laneq_s64((int64x2_t)v44, 1).u64[0];
          v55.i64[1] = v45.i64[1];
          v52.i64[1] = vdupq_laneq_s64((int64x2_t)v45, 1).u64[0];
          v56 = (float32x4_t)vrev64q_s32((int32x4_t)v52);
          v57 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)v53), v37.f32[0]);
          v58 = (int8x16_t)vmulq_n_f32(v56, v37.f32[0]);
          v60 = *(int8x16_t *)(v16 + 192);
          v59 = *(int8x16_t *)(v16 + 208);
          v61 = (float32x4_t)vbslq_s8(v60, v57, (int8x16_t)v54);
          v62 = (float32x4_t)vbslq_s8(v60, v58, (int8x16_t)v55);
          v63 = (float32x4_t)vrev64q_s32((int32x4_t)v61);
          v64 = (float32x4_t)vrev64q_s32((int32x4_t)v62);
          v65 = vcvtq_f32_s32(vcvtq_s32_f32(v63));
          v66 = vcvtq_f32_s32(vcvtq_s32_f32(v64));
          v63.i64[0] = vsubq_f32(v65, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v65, v63), (int8x16_t)v26, (int8x16_t)0)).u64[0];
          v64.i64[0] = vsubq_f32(v66, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v66, v64), (int8x16_t)v26, (int8x16_t)0)).u64[0];
          v63.i64[1] = v38.i64[1];
          v64.i64[1] = v39.i64[1];
          v61.i32[1] = 0.5;
          v62.i32[1] = 0.5;
          v67 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vsubq_f32(v61, vmulq_f32(v20, v63)), (int8x16_t)v61);
          v68 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vsubq_f32(v62, vmulq_f32(v20, v64)), (int8x16_t)v62);
          v69 = vaddq_f32(vsubq_f32(v67, v5), v10);
          v70 = vcvtq_s32_f32(v69);
          v69.i64[0] = vaddq_s32(v70, vcgtq_f32(vcvtq_f32_s32(v70), v69)).u64[0];
          v71 = v69.i32[1];
          v72 = v69.i32[0];
          v73 = vaddq_f32(vsubq_f32(v68, v5), v10);
          v74 = (float32x4_t)vcvtq_s32_f32(v73);
          v73.i64[0] = vaddq_s32((int32x4_t)v74, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v74), v73)).u64[0];
          v74.i64[0] = vmulq_f32(v43, *(float32x4_t *)(*(_QWORD *)&v49 + 16 * (v72 + v71 * v46))).u64[0];
          v73.i64[0] = vmulq_f32(v43, *(float32x4_t *)(*(_QWORD *)&v49 + 16 * (v73.i32[0] + v73.i32[1] * v46))).u64[0];
          v74.i64[1] = v67.i64[1];
          v73.i64[1] = v68.i64[1];
          v75 = vcvtq_f32_s32(vcvtq_s32_f32(v74));
          v76 = vcvtq_f32_s32(vcvtq_s32_f32(v73));
          v74.i64[0] = vsubq_f32(v75, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v75, v74), (int8x16_t)v26, (int8x16_t)0)).u64[0];
          v73.i64[0] = vsubq_f32(v76, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v76, v73), (int8x16_t)v26, (int8x16_t)0)).u64[0];
          v75.i64[0] = v74.i64[0];
          v75.i64[1] = v38.i64[1];
          v76.i64[0] = v73.i64[0];
          v76.i64[1] = v39.i64[1];
          v74.i64[1] = vdupq_laneq_s64((int64x2_t)v38, 1).u64[0];
          v73.i64[1] = vdupq_laneq_s64((int64x2_t)v39, 1).u64[0];
          v77 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)v74), v37.f32[0]), (int8x16_t)v75);
          v78 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)v73), v37.f32[0]), (int8x16_t)v76);
          v79 = vaddq_f32(v77, v77);
          v80 = vaddq_f32(v78, v78);
          v81.i64[0] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 0xCuLL).u64[0];
          v81.i64[1] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
          v67.i64[0] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 0xCuLL).u64[0];
          v67.i64[1] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u64[0];
          v82 = (float32x4_t)vrev64q_s32((int32x4_t)v37);
          v83 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_laneq_f32(v82, v79, 3), v81);
          v84 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_laneq_f32(v82, v80, 3), (int8x16_t)v67);
          v85 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
          v86 = vcvtq_f32_s32(vcvtq_s32_f32(v78));
          v87 = (int8x16_t)vsubq_f32(v86, (float32x4_t)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v86, v78)));
          v88 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vsubq_f32(v85, (float32x4_t)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v85, v77))), (int8x16_t)v75);
          v89 = vcvtq_f32_s32(vcvtq_s32_f32(v83));
          v90 = vcvtq_f32_s32(vcvtq_s32_f32(v84));
          v91 = (float32x4_t)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v89, v83));
          v92 = (float32x4_t)vbslq_s8(v60, v87, (int8x16_t)v76);
          v93 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vsubq_f32(v89, v91), v81);
          v89.i32[0] = vsubq_f32(v88, vmulq_lane_f32(v20, *(float32x2_t *)v88.f32, 1)).u32[0];
          v94 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vsubq_f32(v90, (float32x4_t)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v90, v84))), (int8x16_t)v67);
          v89.i64[1] = v88.i64[1];
          v84.i32[0] = vsubq_f32(v93, vmulq_lane_f32(v20, *(float32x2_t *)v93.f32, 1)).u32[0];
          v90.i32[0] = vsubq_f32(v94, vmulq_lane_f32(v20, *(float32x2_t *)v94.f32, 1)).u32[0];
          v84.i64[1] = v93.i64[1];
          v90.i64[1] = v94.i64[1];
          v84.i32[1] = 0.5;
          v90.i32[1] = 0.5;
          v95 = vaddq_f32(vsubq_f32(v84, v5), v10);
          v96 = vcvtq_s32_f32(v95);
          v97 = vaddq_f32(vsubq_f32(v90, v5), v10);
          v98 = vcvtq_s32_f32(v97);
          v89.i32[1] = 0.5;
          v99 = vaddq_f32(vsubq_f32(v89, v5), v10);
          v100 = vcvtq_s32_f32(v99);
          v101 = vcgtq_f32(vcvtq_f32_s32(v100), v99);
          v99.i32[0] = vsubq_f32(v92, vmulq_lane_f32(v20, *(float32x2_t *)v92.f32, 1)).u32[0];
          v99.i64[1] = v92.i64[1];
          v95.i64[0] = vaddq_s32(v96, vcgtq_f32(vcvtq_f32_s32(v96), v95)).u64[0];
          v100.i64[0] = vaddq_s32(v100, v101).u64[0];
          v101.i64[0] = vaddq_s32(v98, vcgtq_f32(vcvtq_f32_s32(v98), v97)).u64[0];
          v102 = v95.i32[0] + v95.i32[1] * v46;
          v103 = *(int32x4_t *)(*(_QWORD *)&v49 + 16 * (v100.i32[0] + v100.i32[1] * v46));
          v99.i32[1] = 0.5;
          v104 = v101.i32[0] + v101.i32[1] * v46;
          v105 = vaddq_f32(vsubq_f32(v99, v5), v10);
          v106 = vcvtq_s32_f32(v105);
          v107 = *(int8x16_t *)(*(_QWORD *)&v49 + 16 * v102);
          v105.i64[0] = vaddq_s32(v106, vcgtq_f32(vcvtq_f32_s32(v106), v105)).u64[0];
          v108 = *(int8x16_t *)(*(_QWORD *)&v49 + 16 * v104);
          v109 = *(int32x4_t *)(*(_QWORD *)&v49 + 16 * (v105.i32[0] + v105.i32[1] * v46));
          v107.i64[1] = v93.i64[1];
          v110 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v88, 1);
          v103.i64[1] = v110.i64[0];
          v108.i64[1] = v94.i64[1];
          v111 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v92, 1);
          v109.i64[1] = v111.i64[0];
          v112 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_f32(v26, (float32x4_t)vrev64q_s32(v103)), v107);
          v113 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_f32(v26, (float32x4_t)vrev64q_s32(v109)), v108);
          v114 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vmulq_f32(v43, v112), (int8x16_t)v112);
          v115 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vmulq_f32(v43, v113), (int8x16_t)v113);
          v116 = vcvtq_f32_s32(vcvtq_s32_f32(v114));
          v117 = vcvtq_f32_s32(vcvtq_s32_f32(v115));
          v118 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vsubq_f32(v116, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v116, v114))), (int8x16_t)v112);
          v119 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vsubq_f32(v117, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v117, v115))), (int8x16_t)v113);
          v120 = (float32x4_t)vrev64q_s32((int32x4_t)v118);
          v121 = (float32x4_t)vrev64q_s32((int32x4_t)v119);
          v110.i64[0] = vaddq_f32(v110, v118).u64[0];
          v110.i64[1] = v118.i64[1];
          v122 = vcvtq_f32_s32(vcvtq_s32_f32(v120));
          v123 = vcvtq_f32_s32(vcvtq_s32_f32(v121));
          v111.i64[0] = vaddq_f32(v111, v119).u64[0];
          v120.i64[0] = vsubq_f32(v122, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v122, v120), (int8x16_t)v26, (int8x16_t)0)).u64[0];
          v111.i64[1] = v119.i64[1];
          v123.i64[0] = vsubq_f32(v123, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v123, v121), (int8x16_t)v26, (int8x16_t)0)).u64[0];
          v124 = vminq_f32(vmaxq_f32(vmulq_f32(v17, vrecpeq_f32(*(float32x4_t *)v16)), v18), v27);
          v125 = vmulq_f32(v124, vrecpsq_f32(*(float32x4_t *)v16, v124));
          v126 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_n_f32(v82, v110.f32[0]), (int8x16_t)v110);
          v127 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_n_f32(v82, v111.f32[0]), (int8x16_t)v111);
          v120.i64[1] = v88.i64[1];
          v128 = (float32x4_t)vrev64q_s32((int32x4_t)v126);
          v129 = (float32x4_t)vrev64q_s32((int32x4_t)v127);
          v130 = vcvtq_f32_s32(vcvtq_s32_f32(v128));
          v131 = vsubq_f32(v130, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v130, v128)));
          v132 = vcvtq_f32_s32(vcvtq_s32_f32(v129));
          v126.i32[1] = 0.5;
          v127.i32[1] = 0.5;
          v123.i64[1] = v92.i64[1];
          v133 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_n_f32(v125, v120.f32[0]), (int8x16_t)v120);
          v134 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_n_f32(v125, v123.f32[0]), (int8x16_t)v123);
          v135 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vsubq_f32(v126, vmulq_f32(v20, v131)), (int8x16_t)v126);
          v136 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vsubq_f32(v127, vmulq_f32(v20, vsubq_f32(v132, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v132, v129))))), (int8x16_t)v127);
          v137 = vaddq_f32(vsubq_f32(v135, v5), v10);
          v138 = vcvtq_s32_f32(v137);
          v137.i64[0] = vaddq_s32(v138, vcgtq_f32(vcvtq_f32_s32(v138), v137)).u64[0];
          v139 = v137.i32[1];
          v140 = v137.i32[0];
          v141 = vaddq_f32(vsubq_f32(v136, v5), v10);
          v142 = vcvtq_s32_f32(v141);
          v141.i64[0] = vaddq_s32(v142, vcgtq_f32(vcvtq_f32_s32(v142), v141)).u64[0];
          v143 = v140 + v139 * v46;
          v144 = v141.i32[0] + v141.i32[1] * v46;
          v145 = *(int8x16_t *)(*(_QWORD *)&v49 + 16 * v143);
          v146 = *(int8x16_t *)(*(_QWORD *)&v49 + 16 * v144);
          v145.i64[1] = v135.i64[1];
          v147 = vcvtq_f32_s32(vcvtq_s32_f32(v133));
          v148 = vcvtq_f32_s32(vcvtq_s32_f32(v134));
          v146.i64[1] = v136.i64[1];
          v149 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vsubq_f32(v147, (float32x4_t)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v147, v133))), v145);
          v150 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vsubq_f32(v148, (float32x4_t)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v148, v134))), v146);
          v151 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vmulq_f32(v43, v149), (int8x16_t)v149);
          v152 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vmulq_f32(v43, v150), (int8x16_t)v150);
          v153 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v133), vmulq_f32(*(float32x4_t *)v16, v151)), (int8x16_t)v151);
          v154 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v134), vmulq_f32(*(float32x4_t *)v16, v152)), (int8x16_t)v152);
          v155 = vcvtq_f32_s32(vcvtq_s32_f32(v153));
          v156 = vcvtq_f32_s32(vcvtq_s32_f32(v154));
          v157 = (float32x4_t)vrev64q_s32(*(int32x4_t *)v16);
          v158 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vsubq_f32(v155, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v155, v153))), (int8x16_t)v153);
          v159 = vminq_f32(vmaxq_f32(vmulq_f32(v17, vrecpeq_f32(v157)), v18), v27);
          v160 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vsubq_f32(v156, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v156, v154))), (int8x16_t)v154);
          v161 = vmulq_f32(v159, vrecpsq_f32(v157, v159));
          v18.i64[0] = vmulq_n_f32(v161, v158.f32[0]).u64[0];
          v18.i64[1] = vdupq_laneq_s64((int64x2_t)v133, 1).u64[0];
          v161.i64[0] = vmulq_n_f32(v161, v160.f32[0]).u64[0];
          v161.i64[1] = vdupq_laneq_s64((int64x2_t)v134, 1).u64[0];
          v162 = (float32x4_t)vrev64q_s32((int32x4_t)v18);
          v163 = (float32x4_t)vrev64q_s32((int32x4_t)v161);
          v164 = vcvtq_f32_s32(vcvtq_s32_f32(v162));
          v165 = vcvtq_f32_s32(vcvtq_s32_f32(v163));
          v162.i64[0] = vsubq_f32(v164, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v164, v162), (int8x16_t)v26, (int8x16_t)0)).u64[0];
          v162.i64[1] = v133.i64[1];
          v163.i64[0] = vsubq_f32(v165, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v165, v163), (int8x16_t)v26, (int8x16_t)0)).u64[0];
          v166 = (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL);
          v163.i64[1] = v134.i64[1];
          v158.i64[1] = vsubq_f32(v158, vmulq_f32(v166, v133)).i64[1];
          v160.i64[1] = vsubq_f32(v160, vmulq_f32(v166, v134)).i64[1];
          v167 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vsubq_f32(v158, vmulq_f32(*(float32x4_t *)v16, v162)), (int8x16_t)v158);
          v168 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vsubq_f32(v160, vmulq_f32(*(float32x4_t *)v16, v163)), (int8x16_t)v160);
          v169 = a2[13].i32[0];
          v170 = vaddq_f32(vsubq_f32(vaddq_f32(vmulq_f32(v25, v167), (float32x4_t)vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL)), v5), v10);
          v171 = vcvtq_s32_f32(v170);
          v170.i64[0] = vaddq_s32(v171, vcgtq_f32(vcvtq_f32_s32(v171), v170)).u64[0];
          v172 = a2[12];
          v173 = v170.i32[1];
          v174 = v170.i32[0];
          v175 = vaddq_f32(vsubq_f32(vaddq_f32(vmulq_f32(v25, v168), (float32x4_t)vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL)), v5), v10);
          v176 = vcvtq_s32_f32(v175);
          v177 = v174 + v173 * v169;
          v175.i64[0] = vaddq_s32(v176, vcgtq_f32(vcvtq_f32_s32(v176), v175)).u64[0];
          v178 = v175.i32[1];
          v179 = v175.i32[0];
          v180 = *(int8x16_t *)(*(_QWORD *)&v172 + 16 * v177);
          v181 = *(int8x16_t *)(*(_QWORD *)&v172 + 16 * (v179 + v178 * v169));
          *(int8x8_t *)v171.i8 = vqtbl1_s8(v180, *(int8x8_t *)v59.i8);
          v162.i64[0] = vextq_s8(v59, v59, 8uLL).u64[0];
          v171.u64[1] = (unint64_t)vqtbl1_s8(v180, *(int8x8_t *)v162.f32);
          *(int8x8_t *)v160.f32 = vqtbl1_s8(v181, *(int8x8_t *)v59.i8);
          *(int8x8_t *)&v160.u32[2] = vqtbl1_s8(v181, *(int8x8_t *)v162.f32);
          v182 = *(float32x4_t *)(v16 + 240);
          v183 = (int8x16_t)vcgtq_f32(*(float32x4_t *)(v16 + 224), *(float32x4_t *)(v16 + 48));
          v184 = (float32x4_t *)(*(_QWORD *)&v8 + 16 * v12);
          *v184 = vaddq_f32(v182, vmulq_f32(v21, vsubq_f32((float32x4_t)vbslq_s8(v183, (int8x16_t)v171, v180), v182)));
          v184[1] = vaddq_f32(v182, vmulq_f32(v21, vsubq_f32((float32x4_t)vbslq_s8(v183, (int8x16_t)v160, v181), v182)));
          v14 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v12 += 2;
          v13 -= 2;
        }
        while (v13 > 1);
        v12 = v12;
        v7 = (float32x4_t)xmmword_1B304F240;
        v11 = v267;
      }
      if ((int)v12 < v6)
      {
        v185 = *((_QWORD *)this + 51);
        v186 = *(float32x4_t *)(v185 + 32);
        v187 = *(float32x4_t *)(v185 + 96);
        v188 = *(float32x4_t *)(v185 + 112);
        v190 = *(float32x4_t *)(v185 + 128);
        v189 = *(float32x4_t *)(v185 + 144);
        v191 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v186), v187), v188), v190);
        v192 = vmulq_f32(v191, vrecpsq_f32(v186, v191));
        v193 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), *(float32x4_t *)(v185 + 80));
        v194 = *(float32x4_t *)(v185 + 16);
        v195 = vminq_f32(vmaxq_f32(vrecpeq_f32(v194), v188), v190);
        v196 = vminq_f32(vmaxq_f32(vmulq_f32(v195, vrecpsq_f32(v194, v195)), v188), v190);
        v197 = (float32x4_t)vextq_s8((int8x16_t)v193, (int8x16_t)vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v193, 1), vmulq_f32(v196, vrecpsq_f32(v194, v196))), 8uLL);
        v198 = vcvtq_f32_s32(vcvtq_s32_f32(v197));
        v199 = vsubq_f32(v198, (float32x4_t)vandq_s8((int8x16_t)v188, (int8x16_t)vcgtq_f32(v198, v197)));
        v197.i64[0] = vmulq_laneq_f32(v192, v199, 2).u64[0];
        v197.i64[1] = v193.i64[1];
        v200 = vcvtq_f32_s32(vcvtq_s32_f32(v197));
        v193.i32[0] = vsubq_f32(v200, (float32x4_t)vandq_s8((int8x16_t)v189, (int8x16_t)vcgtq_f32(v200, v197))).u32[0];
        v193.i32[1] = 0.5;
        v201 = *(int8x16_t *)(v185 + 160);
        v202 = *(float32x4_t *)(v185 + 176);
        v203 = (float32x4_t)vbslq_s8(v201, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v199, (int8x16_t)v199, 8uLL), vmulq_f32(v186, v193)), (int8x16_t)v193);
        v204 = a2[11].i32[0];
        v205 = vaddq_f32(vsubq_f32(v203, v5), v10);
        v206 = vcvtq_s32_f32(v205);
        v205.i64[0] = vaddq_s32(v206, vcgtq_f32(vcvtq_f32_s32(v206), v205)).u64[0];
        v207 = a2[10];
        v205.i64[0] = vmulq_f32(*(float32x4_t *)(*(_QWORD *)&v207 + 16 * (v205.i32[0] + v205.i32[1] * v204)), v202).u64[0];
        v205.i64[1] = v203.i64[1];
        v208 = vcvtq_f32_s32(vcvtq_s32_f32(v205));
        v205.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v199, (int8x16_t)v199, 0xCuLL), vsubq_f32(v208, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v208, v205), (int8x16_t)v189, (int8x16_t)0))).u64[0];
        v209.i64[0] = v205.i64[0];
        v209.i64[1] = v203.i64[1];
        v205.i64[1] = vdupq_laneq_s64((int64x2_t)v203, 1).u64[0];
        v210 = (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)v205), v192.f32[0]);
        v212 = *(int8x16_t *)(v185 + 192);
        v211 = *(int8x16_t *)(v185 + 208);
        v213 = (float32x4_t)vbslq_s8(v212, v210, v209);
        v214 = (float32x4_t)vrev64q_s32((int32x4_t)v213);
        v215 = vcvtq_f32_s32(vcvtq_s32_f32(v214));
        v214.i64[0] = vsubq_f32(v215, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v215, v214), (int8x16_t)v189, (int8x16_t)0)).u64[0];
        v214.i64[1] = v199.i64[1];
        v213.i32[1] = 0.5;
        v216 = (float32x4_t)vbslq_s8(v201, (int8x16_t)vsubq_f32(v213, vmulq_f32(v186, v214)), (int8x16_t)v213);
        v217 = vaddq_f32(vsubq_f32(v216, v5), v10);
        v218 = vcvtq_s32_f32(v217);
        v217.i64[0] = vaddq_s32(v218, vcgtq_f32(vcvtq_f32_s32(v218), v217)).u64[0];
        v218.i64[0] = vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL).u64[0];
        v217.i64[0] = vmulq_f32(v202, *(float32x4_t *)(*(_QWORD *)&v207 + 16 * (v217.i32[0] + v217.i32[1] * v204))).u64[0];
        v217.i64[1] = v216.i64[1];
        v219 = vcvtq_f32_s32(vcvtq_s32_f32(v217));
        v219.i64[0] = vsubq_f32(v219, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v219, v217), (int8x16_t)v189, (int8x16_t)0)).u64[0];
        v217.i64[0] = v219.i64[0];
        v217.i64[1] = v199.i64[1];
        v219.i64[1] = vdupq_laneq_s64((int64x2_t)v199, 1).u64[0];
        v220 = (float32x4_t)vbslq_s8(v212, (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)v219), v192.f32[0]), (int8x16_t)v217);
        v221 = vaddq_f32(v220, v220);
        v222.i64[0] = vextq_s8((int8x16_t)v221, (int8x16_t)v221, 0xCuLL).u64[0];
        v222.i64[1] = v218.i64[0];
        v223 = (float32x4_t)vrev64q_s32((int32x4_t)v192);
        v224 = (float32x4_t)vbslq_s8(v212, (int8x16_t)vmulq_laneq_f32(v223, v221, 3), v222);
        v225 = vcvtq_f32_s32(vcvtq_s32_f32(v220));
        v226 = (float32x4_t)vbslq_s8(v212, (int8x16_t)vsubq_f32(v225, (float32x4_t)vandq_s8((int8x16_t)v202, (int8x16_t)vcgtq_f32(v225, v220))), (int8x16_t)v217);
        v227 = vcvtq_f32_s32(vcvtq_s32_f32(v224));
        v228 = (float32x4_t)vbslq_s8(v212, (int8x16_t)vsubq_f32(v227, (float32x4_t)vandq_s8((int8x16_t)v202, (int8x16_t)vcgtq_f32(v227, v224))), v222);
        v227.i32[0] = vsubq_f32(v226, vmulq_lane_f32(v186, *(float32x2_t *)v226.f32, 1)).u32[0];
        v227.i64[1] = v226.i64[1];
        v225.i32[0] = vsubq_f32(v228, vmulq_lane_f32(v186, *(float32x2_t *)v228.f32, 1)).u32[0];
        v225.i64[1] = v228.i64[1];
        v225.i32[1] = 0.5;
        v229 = vaddq_f32(vsubq_f32(v225, v5), v10);
        v230 = vcvtq_s32_f32(v229);
        v229.i64[0] = vaddq_s32(v230, vcgtq_f32(vcvtq_f32_s32(v230), v229)).u64[0];
        v231 = *(int8x16_t *)(*(_QWORD *)&v207 + 16 * (v229.i32[0] + v229.i32[1] * v204));
        v231.i64[1] = v228.i64[1];
        v227.i32[1] = 0.5;
        v232 = vaddq_f32(vsubq_f32(v227, v5), v10);
        v233 = vcvtq_s32_f32(v232);
        v232.i64[0] = vaddq_s32(v233, vcgtq_f32(vcvtq_f32_s32(v233), v232)).u64[0];
        v234 = *(int32x4_t *)(*(_QWORD *)&v207 + 16 * (v232.i32[0] + v232.i32[1] * v204));
        v235 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v226, 1);
        v234.i64[1] = v235.i64[0];
        v236 = (float32x4_t)vbslq_s8(v212, (int8x16_t)vmulq_f32(v189, (float32x4_t)vrev64q_s32(v234)), v231);
        v237 = (float32x4_t)vbslq_s8(v201, (int8x16_t)vmulq_f32(v202, v236), (int8x16_t)v236);
        v238 = vcvtq_f32_s32(vcvtq_s32_f32(v237));
        v239 = (float32x4_t)vbslq_s8(v201, (int8x16_t)vsubq_f32(v238, (float32x4_t)vandq_s8((int8x16_t)v189, (int8x16_t)vcgtq_f32(v238, v237))), (int8x16_t)v236);
        v240 = (float32x4_t)vrev64q_s32((int32x4_t)v239);
        v241 = vcvtq_f32_s32(vcvtq_s32_f32(v240));
        v240.i64[0] = vsubq_f32(v241, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v241, v240), (int8x16_t)v189, (int8x16_t)0)).u64[0];
        v242 = vminq_f32(vmaxq_f32(vmulq_f32(v187, vrecpeq_f32(*(float32x4_t *)v185)), v188), v190);
        v240.i64[1] = v226.i64[1];
        v226.i64[0] = vaddq_f32(v235, v239).u64[0];
        v226.i64[1] = v239.i64[1];
        v243 = (float32x4_t)vbslq_s8(v212, (int8x16_t)vmulq_n_f32(v223, v226.f32[0]), (int8x16_t)v226);
        v244 = (float32x4_t)vrev64q_s32((int32x4_t)v243);
        v245 = vcvtq_f32_s32(vcvtq_s32_f32(v244));
        v246 = vsubq_f32(v245, (float32x4_t)vandq_s8((int8x16_t)v189, (int8x16_t)vcgtq_f32(v245, v244)));
        v243.i32[1] = 0.5;
        v247 = (float32x4_t)vbslq_s8(v212, (int8x16_t)vmulq_n_f32(vmulq_f32(v242, vrecpsq_f32(*(float32x4_t *)v185, v242)), v240.f32[0]), (int8x16_t)v240);
        v248 = (float32x4_t)vbslq_s8(v201, (int8x16_t)vsubq_f32(v243, vmulq_f32(v186, v246)), (int8x16_t)v243);
        v249 = vaddq_f32(vsubq_f32(v248, v5), v10);
        v250 = vcvtq_s32_f32(v249);
        v249.i64[0] = vaddq_s32(v250, vcgtq_f32(vcvtq_f32_s32(v250), v249)).u64[0];
        v251 = *(int8x16_t *)(*(_QWORD *)&v207 + 16 * (v249.i32[0] + v249.i32[1] * v204));
        v251.i64[1] = v248.i64[1];
        v252 = vcvtq_f32_s32(vcvtq_s32_f32(v247));
        v253 = (float32x4_t)vbslq_s8(v212, (int8x16_t)vsubq_f32(v252, (float32x4_t)vandq_s8((int8x16_t)v202, (int8x16_t)vcgtq_f32(v252, v247))), v251);
        v254 = (float32x4_t)vbslq_s8(v201, (int8x16_t)vmulq_f32(v202, v253), (int8x16_t)v253);
        v255 = (float32x4_t)vbslq_s8(v212, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v247), vmulq_f32(*(float32x4_t *)v185, v254)), (int8x16_t)v254);
        v256 = vcvtq_f32_s32(vcvtq_s32_f32(v255));
        v257 = (float32x4_t)vbslq_s8(v201, (int8x16_t)vsubq_f32(v256, (float32x4_t)vandq_s8((int8x16_t)v189, (int8x16_t)vcgtq_f32(v256, v255))), (int8x16_t)v255);
        v258 = (float32x4_t)vrev64q_s32(*(int32x4_t *)v185);
        v259 = vminq_f32(vmaxq_f32(vmulq_f32(v187, vrecpeq_f32(v258)), v188), v190);
        v258.i64[0] = vmulq_n_f32(vmulq_f32(v259, vrecpsq_f32(v258, v259)), v257.f32[0]).u64[0];
        v258.i64[1] = vdupq_laneq_s64((int64x2_t)v247, 1).u64[0];
        v260 = (float32x4_t)vrev64q_s32((int32x4_t)v258);
        v261 = vcvtq_f32_s32(vcvtq_s32_f32(v260));
        v260.i64[0] = vsubq_f32(v261, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v261, v260), (int8x16_t)v189, (int8x16_t)0)).u64[0];
        v260.i64[1] = v247.i64[1];
        v257.i64[1] = vsubq_f32(v257, vmulq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v194, 0), v247)).i64[1];
        v262 = (float32x4_t)vbslq_s8(v201, (int8x16_t)vsubq_f32(v257, vmulq_f32(*(float32x4_t *)v185, v260)), (int8x16_t)v257);
        v263 = vaddq_f32(vsubq_f32(vaddq_f32(vmulq_f32(v194, v262), (float32x4_t)vextq_s8((int8x16_t)v262, (int8x16_t)v262, 8uLL)), v5), v10);
        v264 = vcvtq_s32_f32(v263);
        v263.i64[0] = vaddq_s32(v264, vcgtq_f32(vcvtq_f32_s32(v264), v263)).u64[0];
        v265 = *(int8x16_t *)(*(_QWORD *)&a2[12] + 16 * (v263.i32[0] + v263.i32[1] * a2[13].i32[0]));
        *(int8x8_t *)v264.i8 = vqtbl1_s8(v265, *(int8x8_t *)v211.i8);
        v264.u64[1] = (unint64_t)vqtbl1_s8(v265, (int8x8_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL));
        *(float32x4_t *)(*(_QWORD *)&v8 + 16 * v12) = vaddq_f32(*(float32x4_t *)(v185 + 240), vmulq_f32(*(float32x4_t *)(v185 + 64), vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v185 + 224), *(float32x4_t *)(v185 + 48)), (int8x16_t)v264, v265), *(float32x4_t *)(v185 + 240))));
      }
      v11 = vaddq_f32(v11, v7);
      *(_QWORD *)&v8 += v9;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcSampleTiledNoise::GetDOD(HgcSampleTiledNoise *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  __int128 *v4;

  v4 = &HGRectInfinite;
  if (a3 >= 2)
    v4 = &HGRectNull;
  return *(_QWORD *)v4;
}

uint64_t HgcSampleTiledNoise::GetROI(HGNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  HGNode *Input;

  if (a3 > 1)
    return 0;
  Input = HGRenderer::GetInput(a2, this, a3);
  return HGRenderer::GetDOD(a2, Input);
}

void HgcSampleTiledNoise::HgcSampleTiledNoise(HgcSampleTiledNoise *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6567270;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)&v4 = 0x8000000080000000;
  *((_QWORD *)&v4 + 1) = 0x8000000080000000;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = v4;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = xmmword_1B3052ED0;
  *(_OWORD *)(v3 + 112) = xmmword_1B3558000;
  *(int32x4_t *)(v3 + 128) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 144) = xmmword_1B3558010;
  *(_OWORD *)(v3 + 160) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 176) = xmmword_1B3558020;
  *(_OWORD *)(v3 + 192) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 208) = xmmword_1B3558030;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 240) = xmmword_1B3558040;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcSampleTiledNoise *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  (*(void (**)(HgcSampleTiledNoise *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2CCB85C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSampleTiledNoise::~HgcSampleTiledNoise(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6567270;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FDACBBE0);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSampleTiledNoise::~HgcSampleTiledNoise(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSampleTiledNoise::SetParameter(HgcSampleTiledNoise *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7, double a8)
{
  float *v8;
  float *v10;
  float *v11;
  __n128 *v12;
  __n128 *v13;
  int32x4_t v14;
  __n128 *v15;

  switch((int)a2)
  {
    case 0:
      v8 = (float *)*((_QWORD *)this + 51);
      if (*v8 == a3.n128_f32[0] && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
        return 0;
      *v8 = a3.n128_f32[0];
      v8[1] = a4;
      v8[2] = a5;
      v8[3] = a6;
      goto LABEL_33;
    case 1:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[4] == a3.n128_f32[0] && v10[5] == a4 && v10[6] == a5 && v10[7] == a6)
        return 0;
      v10[4] = a3.n128_f32[0];
      v10[5] = a4;
      v10[6] = a5;
      v10[7] = a6;
      goto LABEL_33;
    case 2:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[8] == a3.n128_f32[0] && v11[9] == a4 && v11[10] == a5 && v11[11] == a6)
        return 0;
      v11[8] = a3.n128_f32[0];
      v11[9] = a4;
      v11[10] = a5;
      v11[11] = a6;
      goto LABEL_33;
    case 3:
      *(float *)&a8 = -a3.n128_f32[0];
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[3].n128_f32[0] == (float)-a3.n128_f32[0]
        && v12[3].n128_f32[1] == *(float *)&a8
        && v12[3].n128_f32[2] == *(float *)&a8
        && v12[3].n128_f32[3] == *(float *)&a8)
      {
        return 0;
      }
      a3.n128_f32[1] = a4;
      v12[3] = (__n128)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[16] = a3;
      goto LABEL_33;
    case 4:
      v13 = (__n128 *)*((_QWORD *)this + 51);
      if (v13[4].n128_f32[0] == a3.n128_f32[0]
        && v13[4].n128_f32[1] == a3.n128_f32[0]
        && v13[4].n128_f32[2] == a3.n128_f32[0]
        && v13[4].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v14 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      v13[4] = (__n128)v14;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[17] = a3;
      goto LABEL_33;
    case 5:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[5].n128_f32[0] == 0.0
        && v15[5].n128_f32[1] == 0.0
        && v15[5].n128_f32[2] == a3.n128_f32[0]
        && v15[5].n128_f32[3] == a4)
      {
        return 0;
      }
      v15[5].n128_u64[0] = 0;
      v15[5].n128_u32[2] = a3.n128_u32[0];
      v15[5].n128_f32[3] = a4;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[18] = a3;
LABEL_33:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcSampleTiledNoise::GetParameter(HgcSampleTiledNoise *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_8;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_8;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_8;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[64];
      a3[1] = v7[65];
      a3[2] = v7[66];
      v4 = v7 + 67;
      goto LABEL_8;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[68];
      a3[1] = v8[69];
      a3[2] = v8[70];
      v4 = v8 + 71;
      goto LABEL_8;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[72];
      a3[1] = v9[73];
      a3[2] = v9[74];
      v4 = v9 + 75;
LABEL_8:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcClampToAlpha::GetProgram(HgcClampToAlpha *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000002ac\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = fmin(r0, r0.wwww);\n"
             "    output.color0 = fmax(float4(r0), float4(c0.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=351d0602:d7435980:23a180db:6ac0349e\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000298\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = fmin(r0, r0.wwww);\n"
             "    output.color0 = fmax(r0, c0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f6a4a7c1:62f1e626:6dd47e16:5f43802b\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000023d\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0 = min(r0, r0.wwww);\n"
           "    gl_FragColor = max(r0, c0.xxxx);\n"
           "}\n"
           "//MD5=5908ea60:fa3c4189:708ea689:5d32e2fd\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcClampToAlpha::InitProgramDescriptor(HgcClampToAlpha *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcClampToAlpha_hgc_visible", "//Metal1.0     \n//LEN=0000000171\n[[ visible ]] FragmentOut HgcClampToAlpha_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = fmin(r0, r0.wwww);\n"
    "    output.color0 = fmax(r0, c0.xxxx);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CCBCA8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcClampToAlpha");
}

void sub_1B2CCBCB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CCBDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CCBDF8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CCBDF0);
}

_QWORD *HgcClampToAlpha::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcClampToAlpha [hgc1]");
}

uint64_t HgcClampToAlpha::BindTexture(HgcClampToAlpha *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcClampToAlpha::Bind(HgcClampToAlpha *this, HGHandler *a2)
{
  (*(void (**)(HgcClampToAlpha *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcClampToAlpha::RenderTile(HgcClampToAlpha *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  uint64_t v16;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(float32x4_t *)*((_QWORD *)this + 51);
          v12 = vmaxq_f32(vminq_f32(*(float32x4_t *)(v6 + v10 - 16), (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v6 + v10 - 16), 3)), v11);
          v13 = vmaxq_f32(vminq_f32(*(float32x4_t *)(v6 + v10), (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v6 + v10), 3)), v11);
          v14 = vmaxq_f32(vminq_f32(*(float32x4_t *)(v6 + v10 + 16), (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v6 + v10 + 16), 3)), v11);
          v15 = (float32x4_t *)(v5 + v10);
          v15[-2] = vmaxq_f32(vminq_f32(*(float32x4_t *)(v6 + v10 - 32), (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v6 + v10 - 32), 3)), v11);
          v15[-1] = v12;
          *v15 = v13;
          v15[1] = v14;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v16) = -v9;
      }
      if ((int)v16 < v4)
      {
        v16 = v16;
        do
        {
          *(float32x4_t *)(v5 + 16 * v16) = vmaxq_f32(vminq_f32(*(float32x4_t *)(v6 + 16 * v16), (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v6 + 16 * v16), 3)), *(float32x4_t *)*((_QWORD *)this + 51));
          ++v16;
        }
        while (v16 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcClampToAlpha::GetDOD(HgcClampToAlpha *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcClampToAlpha::GetROI(HgcClampToAlpha *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcClampToAlpha::HgcClampToAlpha(HgcClampToAlpha *this)
{
  _QWORD *v2;
  _QWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65674D8;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[1] = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CCC084(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcClampToAlpha::~HgcClampToAlpha(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65674D8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40451B5BE8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcClampToAlpha::~HgcClampToAlpha(this);
  HGObject::operator delete(v1);
}

uint64_t HgcClampToAlpha::SetParameter(HgcClampToAlpha *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcClampToAlpha::GetParameter(HgcClampToAlpha *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcStripAlpha::GetProgram(HgcStripAlpha *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000282\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0.xyz = (float3) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    output.color0.w = float(c0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=39e23b55:3eef278e:900e5a12:8739e261\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0000:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000275\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0.xyz = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    output.color0.w = c0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=80457804:66cd910c:e0e98d99:0a1aa675\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0000:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000214\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
           "\n"
           "    gl_FragColor.xyz = texture2D(hg_Texture0, hg_TexCoord0.xy).xyz;\n"
           "    gl_FragColor.w = c0.w;\n"
           "}\n"
           "//MD5=cdf2251d:7c3763a2:fc98cb69:2ea05d33\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0000:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcStripAlpha::InitProgramDescriptor(HgcStripAlpha *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcStripAlpha_hgc_visible", "//Metal1.0     \n//LEN=000000014c\n[[ visible ]] FragmentOut HgcStripAlpha_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    FragmentOut output;\n"
    "\n"
    "    output.color0.xyz = color0.xyz;\n"
    "    output.color0.w = c0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CCC1D8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcStripAlpha");
}

void sub_1B2CCC1E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CCC2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CCC328()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CCC320);
}

_QWORD *HgcStripAlpha::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcStripAlpha [hgc1]");
}

uint64_t HgcStripAlpha::BindTexture(HgcStripAlpha *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcStripAlpha::Bind(HgcStripAlpha *this, HGHandler *a2)
{
  (*(void (**)(HgcStripAlpha *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcStripAlpha::RenderTile(HgcStripAlpha *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(_OWORD *)(v6 + v10 - 32);
          v12 = *(_OWORD *)(v6 + v10 - 16);
          v13 = *(_OWORD *)(v6 + v10);
          v14 = *(_OWORD *)(v6 + v10 + 16);
          HIDWORD(v11) = 1.0;
          HIDWORD(v12) = 1.0;
          HIDWORD(v13) = 1.0;
          HIDWORD(v14) = 1.0;
          v15 = (_OWORD *)(v5 + v10);
          *(v15 - 2) = v11;
          *(v15 - 1) = v12;
          *v15 = v13;
          v15[1] = v14;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v16) = -v9;
      }
      if ((int)v16 < v4)
      {
        v16 = v16;
        do
        {
          v17 = *(_OWORD *)(v6 + 16 * v16);
          HIDWORD(v17) = 1.0;
          *(_OWORD *)(v5 + 16 * v16++) = v17;
        }
        while (v16 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcStripAlpha::GetDOD(HgcStripAlpha *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcStripAlpha::GetROI(HgcStripAlpha *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcStripAlpha::HgcStripAlpha(HgcStripAlpha *this)
{
  _QWORD *v2;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6567740;
  *((_QWORD *)this + 51) = operator new();
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CCC578(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcStripAlpha::~HgcStripAlpha(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6567740;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0xC400A2AC0F1);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcStripAlpha::~HgcStripAlpha(this);
  HGObject::operator delete(v1);
}

uint64_t HgcStripAlpha::SetParameter(HgcStripAlpha *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcStripAlpha::GetParameter(HgcStripAlpha *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcRetimeAddBlend6::GetProgram(HgcRetimeAddBlend6 *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000006b9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< half > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]], \n"
             "    texture2d< half > hg_Texture4 [[ texture(4) ]], \n"
             "    sampler hg_Sampler4 [[ sampler(4) ]], \n"
             "    texture2d< half > hg_Texture5 [[ texture(5) ]], \n"
             "    sampler hg_Sampler5 [[ sampler(5) ]])\n"
             "{\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = (half4) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r3 = (half4) hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy);\n"
             "    r4 = (half4) hg_Texture4.sample(hg_Sampler4, frag._texCoord4.xy);\n"
             "    r5 = (half4) hg_Texture5.sample(hg_Sampler5, frag._texCoord5.xy);\n"
             "    output.color0 = float4(r0)*hg_Params[0];\n"
             "    output.color0 = float4(r1)*hg_Params[1] + output.color0;\n"
             "    output.color0 = float4(r2)*hg_Params[2] + output.color0;\n"
             "    output.color0 = float4(r3)*hg_Params[3] + output.color0;\n"
             "    output.color0 = float4(r4)*hg_Params[4] + output.color0;\n"
             "    output.color0 = float4(r5)*hg_Params[5] + output.color0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=0d1c621b:00258fbd:6ef4399d:d22b1819\n"
             "//SIG=00400000:0000003f:0000003f:0000003f:0000:0006:0006:0000:0000:0000:007e:0000:0006:06:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000660\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< float > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]], \n"
             "    texture2d< float > hg_Texture4 [[ texture(4) ]], \n"
             "    sampler hg_Sampler4 [[ sampler(4) ]], \n"
             "    texture2d< float > hg_Texture5 [[ texture(5) ]], \n"
             "    sampler hg_Sampler5 [[ sampler(5) ]])\n"
             "{\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r3 = hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy);\n"
             "    r4 = hg_Texture4.sample(hg_Sampler4, frag._texCoord4.xy);\n"
             "    r5 = hg_Texture5.sample(hg_Sampler5, frag._texCoord5.xy);\n"
             "    output.color0 = r0*hg_Params[0];\n"
             "    output.color0 = r1*hg_Params[1] + output.color0;\n"
             "    output.color0 = r2*hg_Params[2] + output.color0;\n"
             "    output.color0 = r3*hg_Params[3] + output.color0;\n"
             "    output.color0 = r4*hg_Params[4] + output.color0;\n"
             "    output.color0 = r5*hg_Params[5] + output.color0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=01133b2e:b7731226:41b1c4b4:fe07a463\n"
             "//SIG=00000000:0000003f:0000003f:00000000:0000:0006:0006:0000:0000:0000:007e:0000:0006:06:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000064c\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp sampler2D hg_Texture3;\n"
           "uniform defaultp sampler2D hg_Texture4;\n"
           "uniform defaultp sampler2D hg_Texture5;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "uniform defaultp vec4 hg_ProgramLocal3;\n"
           "uniform defaultp vec4 hg_ProgramLocal4;\n"
           "uniform defaultp vec4 hg_ProgramLocal5;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "varying highp vec4 hg_TexCoord4;\n"
           "varying highp vec4 hg_TexCoord5;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = texture2D(hg_Texture2, hg_TexCoord2.xy);\n"
           "    r3 = texture2D(hg_Texture3, hg_TexCoord3.xy);\n"
           "    r4 = texture2D(hg_Texture4, hg_TexCoord4.xy);\n"
           "    r5 = texture2D(hg_Texture5, hg_TexCoord5.xy);\n"
           "    gl_FragColor = r0*hg_ProgramLocal0;\n"
           "    gl_FragColor = r1*hg_ProgramLocal1 + gl_FragColor;\n"
           "    gl_FragColor = r2*hg_ProgramLocal2 + gl_FragColor;\n"
           "    gl_FragColor = r3*hg_ProgramLocal3 + gl_FragColor;\n"
           "    gl_FragColor = r4*hg_ProgramLocal4 + gl_FragColor;\n"
           "    gl_FragColor = r5*hg_ProgramLocal5 + gl_FragColor;\n"
           "}\n"
           "//MD5=d9f61efd:2bb62bb6:54f027de:b750e4df\n"
           "//SIG=00000000:0000003f:0000003f:00000000:0000:0006:0006:0000:0000:0000:0000:0000:0006:06:0:1:0\n";
  }
}

void HgcRetimeAddBlend6::InitProgramDescriptor(HgcRetimeAddBlend6 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcRetimeAddBlend6_hgc_visible", "//Metal1.0     \n//LEN=00000002d5\n[[ visible ]] FragmentOut HgcRetimeAddBlend6_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2,\n    float4 color3,\n    float4 color4,\n    float4 color5)\n{\n    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r2 = color2;\n"
    "    r3 = color3;\n"
    "    r4 = color4;\n"
    "    r5 = color5;\n"
    "    output.color0 = r0*hg_Params[0];\n"
    "    output.color0 = r1*hg_Params[1] + output.color0;\n"
    "    output.color0 = r2*hg_Params[2] + output.color0;\n"
    "    output.color0 = r3*hg_Params[3] + output.color0;\n"
    "    output.color0 = r4*hg_Params[4] + output.color0;\n"
    "    output.color0 = r5*hg_Params[5] + output.color0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CCC6C8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcRetimeAddBlend6");
}

void sub_1B2CCC6D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052790;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CCC918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CCC980()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CCC978);
}

_QWORD *HgcRetimeAddBlend6::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcRetimeAddBlend6 [hgc1]");
}

uint64_t HgcRetimeAddBlend6::BindTexture(HgcRetimeAddBlend6 *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  uint64_t result;
  int v7;

  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 0;
      goto LABEL_9;
    case 1:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 1;
      goto LABEL_9;
    case 2:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 2;
      goto LABEL_9;
    case 3:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 3, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 3;
      goto LABEL_9;
    case 4:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 4, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 4;
      goto LABEL_9;
    case 5:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 5, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 5;
LABEL_9:
      HGHandler::TexCoord(v4, v5, 0, 0, 0);
      v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      result = 0;
      if (!v7)
      {
        (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
        result = 0;
      }
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcRetimeAddBlend6::Bind(HgcRetimeAddBlend6 *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcRetimeAddBlend6 *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcRetimeAddBlend6::RenderTile(HgcRetimeAddBlend6 *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unsigned int v31;
  float32x4_t *v32;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 20);
    v7 = *((_QWORD *)a2 + 18);
    v8 = *((_QWORD *)a2 + 16);
    v9 = 16 * *((int *)a2 + 38);
    v10 = 16 * *((int *)a2 + 34);
    v11 = 16 * *((int *)a2 + 30);
    v12 = 16 * *((int *)a2 + 26);
    v13 = 16 * *((int *)a2 + 22);
    v14 = *((_QWORD *)a2 + 14);
    v15 = *((_QWORD *)a2 + 12);
    v16 = 16 * *((int *)a2 + 6);
    v17 = 16 * *((int *)a2 + 42);
    v18 = *((_QWORD *)a2 + 10);
    do
    {
      if (v4 < 2)
      {
        v31 = 0;
      }
      else
      {
        v19 = 0;
        v20 = 0;
        do
        {
          v21 = (float32x4_t *)*((_QWORD *)this + 51);
          v22 = v21[1];
          v23 = v21[2];
          v24 = v21[3];
          v25 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + v19), v24), vaddq_f32(vmulq_f32(*(float32x4_t *)(v14 + v19), v23), vaddq_f32(vmulq_f32(*(float32x4_t *)(v18 + v19), *v21), vmulq_f32(*(float32x4_t *)(v15 + v19), v22))));
          v26 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + v19 + 16), v24), vaddq_f32(vmulq_f32(*(float32x4_t *)(v14 + v19 + 16), v23), vaddq_f32(vmulq_f32(*(float32x4_t *)(v18 + v19 + 16), *v21), vmulq_f32(*(float32x4_t *)(v15 + v19 + 16), v22))));
          v27 = v21[4];
          v28 = v21[5];
          v29 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v6 + v19 + 16), v28), vaddq_f32(vmulq_f32(*(float32x4_t *)(v7 + v19 + 16), v27), v26));
          v30 = (float32x4_t *)(v5 + v19);
          *v30 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v6 + v19), v28), vaddq_f32(vmulq_f32(*(float32x4_t *)(v7 + v19), v27), v25));
          v30[1] = v29;
          v20 -= 2;
          v19 += 32;
        }
        while (v4 + v20 > 1);
        v31 = -v20;
      }
      if ((int)v31 < v4)
      {
        v32 = (float32x4_t *)*((_QWORD *)this + 51);
        *(float32x4_t *)(v5 + 16 * v31) = vaddq_f32(vmulq_f32(*(float32x4_t *)(v6 + 16 * v31), v32[5]), vaddq_f32(vmulq_f32(*(float32x4_t *)(v7 + 16 * v31), v32[4]), vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + 16 * v31), v32[3]), vaddq_f32(vmulq_f32(*(float32x4_t *)(v14 + 16 * v31), v32[2]), vaddq_f32(vmulq_f32(*(float32x4_t *)(v18 + 16 * v31), *v32), vmulq_f32(*(float32x4_t *)(v15 + 16 * v31), v32[1]))))));
      }
      v18 += v13;
      v15 += v12;
      v14 += v11;
      v8 += v10;
      v7 += v9;
      v6 += v17;
      v5 += v16;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcRetimeAddBlend6::GetDOD(HgcRetimeAddBlend6 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 6)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcRetimeAddBlend6::GetROI(HgcRetimeAddBlend6 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 6)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcRetimeAddBlend6::HgcRetimeAddBlend6(HgcRetimeAddBlend6 *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65679A8;
  v3 = (_OWORD *)operator new();
  v3[4] = 0u;
  v3[5] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CCCF14(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcRetimeAddBlend6::~HgcRetimeAddBlend6(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65679A8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40565EDBD2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcRetimeAddBlend6::~HgcRetimeAddBlend6(this);
  HGObject::operator delete(v1);
}

uint64_t HgcRetimeAddBlend6::SetParameter(HgcRetimeAddBlend6 *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcRetimeAddBlend6::GetParameter(HgcRetimeAddBlend6 *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcConvolvePass8tap::GetProgram(HgcConvolvePass8tap *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000554\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r3 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r4 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord4.xy);\n"
             "    r5 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord5.xy);\n"
             "    r6 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord6.xy);\n"
             "    r7 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord7.xy);\n"
             "    r0 = half4(hg_Params[8])*r0;\n"
             "    r0 = half4(hg_Params[9])*r1 + r0;\n"
             "    r0 = half4(hg_Params[10])*r2 + r0;\n"
             "    r0 = half4(hg_Params[11])*r3 + r0;\n"
             "    r0 = half4(hg_Params[12])*r4 + r0;\n"
             "    r0 = half4(hg_Params[13])*r5 + r0;\n"
             "    r0 = half4(hg_Params[14])*r6 + r0;\n"
             "    output.color0 = hg_Params[15]*float4(r7) + float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=8765b539:97ccd79e:9caee91b:e14d6e48\n"
             "//SIG=00400000:00000000:00000000:00000001:0000:0010:0008:0000:0000:0000:01fe:0000:0008:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000004d5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r3 = hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r4 = hg_Texture0.sample(hg_Sampler0, frag._texCoord4.xy);\n"
             "    r5 = hg_Texture0.sample(hg_Sampler0, frag._texCoord5.xy);\n"
             "    r6 = hg_Texture0.sample(hg_Sampler0, frag._texCoord6.xy);\n"
             "    r7 = hg_Texture0.sample(hg_Sampler0, frag._texCoord7.xy);\n"
             "    r0 = hg_Params[8]*r0;\n"
             "    r0 = hg_Params[9]*r1 + r0;\n"
             "    r0 = hg_Params[10]*r2 + r0;\n"
             "    r0 = hg_Params[11]*r3 + r0;\n"
             "    r0 = hg_Params[12]*r4 + r0;\n"
             "    r0 = hg_Params[13]*r5 + r0;\n"
             "    r0 = hg_Params[14]*r6 + r0;\n"
             "    output.color0 = hg_Params[15]*r7 + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=5c030f28:c308b641:a58af8f8:2afac759\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0010:0008:0000:0000:0000:01fe:0000:0008:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000007b0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "uniform defaultp vec4 hg_ProgramLocal3;\n"
           "uniform defaultp vec4 hg_ProgramLocal4;\n"
           "uniform defaultp vec4 hg_ProgramLocal5;\n"
           "uniform defaultp vec4 hg_ProgramLocal6;\n"
           "uniform defaultp vec4 hg_ProgramLocal7;\n"
           "uniform defaultp vec4 hg_ProgramLocal8;\n"
           "uniform defaultp vec4 hg_ProgramLocal9;\n"
           "uniform defaultp vec4 hg_ProgramLocal10;\n"
           "uniform defaultp vec4 hg_ProgramLocal11;\n"
           "uniform defaultp vec4 hg_ProgramLocal12;\n"
           "uniform defaultp vec4 hg_ProgramLocal13;\n"
           "uniform defaultp vec4 hg_ProgramLocal14;\n"
           "uniform defaultp vec4 hg_ProgramLocal15;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "varying highp vec4 hg_TexCoord4;\n"
           "varying highp vec4 hg_TexCoord5;\n"
           "varying highp vec4 hg_TexCoord6;\n"
           "varying highp vec4 hg_TexCoord7;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord1.xy);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord2.xy);\n"
           "    r3 = texture2D(hg_Texture0, hg_TexCoord3.xy);\n"
           "    r4 = texture2D(hg_Texture0, hg_TexCoord4.xy);\n"
           "    r5 = texture2D(hg_Texture0, hg_TexCoord5.xy);\n"
           "    r6 = texture2D(hg_Texture0, hg_TexCoord6.xy);\n"
           "    r7 = texture2D(hg_Texture0, hg_TexCoord7.xy);\n"
           "    r0 = hg_ProgramLocal8*r0;\n"
           "    r0 = hg_ProgramLocal9*r1 + r0;\n"
           "    r0 = hg_ProgramLocal10*r2 + r0;\n"
           "    r0 = hg_ProgramLocal11*r3 + r0;\n"
           "    r0 = hg_ProgramLocal12*r4 + r0;\n"
           "    r0 = hg_ProgramLocal13*r5 + r0;\n"
           "    r0 = hg_ProgramLocal14*r6 + r0;\n"
           "    gl_FragColor = hg_ProgramLocal15*r7 + r0;\n"
           "}\n"
           "//MD5=4a3878a3:975389dc:09d027a2:b42b0281\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0010:0008:0000:0000:0000:0000:0000:0008:01:0:1:0\n";
  }
}

void HgcConvolvePass8tap::InitProgramDescriptor(HgcConvolvePass8tap *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcConvolvePass8tap_hgc_visible", "//Metal1.0     \n//LEN=000000048b\n[[ visible ]] FragmentOut HgcConvolvePass8tap_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2,\n    float4 texCoord3,\n    float4 texCoord4,\n    float4 texCoord5,\n    float4 texCoord6,\n    float4 texCoord7)\n{\n    float4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, texCoord1.xy);\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, texCoord2.xy);\n"
    "    r3 = hg_Texture0.sample(hg_Sampler0, texCoord3.xy);\n"
    "    r4 = hg_Texture0.sample(hg_Sampler0, texCoord4.xy);\n"
    "    r5 = hg_Texture0.sample(hg_Sampler0, texCoord5.xy);\n"
    "    r6 = hg_Texture0.sample(hg_Sampler0, texCoord6.xy);\n"
    "    r7 = hg_Texture0.sample(hg_Sampler0, texCoord7.xy);\n"
    "    r0 = hg_Params[8]*r0;\n"
    "    r0 = hg_Params[9]*r1 + r0;\n"
    "    r0 = hg_Params[10]*r2 + r0;\n"
    "    r0 = hg_Params[11]*r3 + r0;\n"
    "    r0 = hg_Params[12]*r4 + r0;\n"
    "    r0 = hg_Params[13]*r5 + r0;\n"
    "    r0 = hg_Params[14]*r6 + r0;\n"
    "    output.color0 = hg_Params[15]*r7 + r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CCD11C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcConvolvePass8tap");
}

void sub_1B2CCD12C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30520C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CCD46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CCD4F4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CCD4ECLL);
}

_QWORD *HgcConvolvePass8tap::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcConvolvePass8tap [hgc1]");
}

uint64_t HgcConvolvePass8tap::BindTexture(float **this, HGHandler *a2, int a3)
{
  if (a3)
    return 0xFFFFFFFFLL;
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, *this[51], this[51][1], 0.0);
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, this[51][4], this[51][5], 0.0);
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, this[51][8], this[51][9], 0.0);
  HGHandler::TexCoord(a2, 3, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, this[51][12], this[51][13], 0.0);
  HGHandler::TexCoord(a2, 4, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, this[51][16], this[51][17], 0.0);
  HGHandler::TexCoord(a2, 5, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, this[51][20], this[51][21], 0.0);
  HGHandler::TexCoord(a2, 6, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, this[51][24], this[51][25], 0.0);
  HGHandler::TexCoord(a2, 7, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, this[51][28], this[51][29], 0.0);
  return 0;
}

uint64_t HgcConvolvePass8tap::Bind(HgcConvolvePass8tap *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, *((_QWORD *)this + 51) + 192, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 13, *((_QWORD *)this + 51) + 208, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 14, *((_QWORD *)this + 51) + 224, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 15, *((_QWORD *)this + 51) + 240, 1);
  (*(void (**)(HgcConvolvePass8tap *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcConvolvePass8tap::RenderTile(float32x4_t **this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  uint64_t v34;
  int32x4_t v35;
  float32x2_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  int32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  float32x4_t v87;
  int32x4_t v88;
  float32x4_t v89;
  int32x4_t v90;
  float32x4_t *v91;

  v4 = HGTile::Renderer(a2);
  v5 = ((uint64_t (*)(float32x4_t **, uint64_t))(*this)[19].i64[1])(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = this[51];
    v12 = vaddq_f32(v9, v11[7]);
    v13 = vaddq_f32(v9, v11[6]);
    v14 = vaddq_f32(v9, v11[5]);
    v15 = vaddq_f32(v9, v11[4]);
    v16 = vaddq_f32(v9, v11[3]);
    v17 = vaddq_f32(v9, v11[2]);
    v18 = vaddq_f32(v9, v11[1]);
    v19 = vaddq_f32(v9, *v11);
    v20 = *((_QWORD *)a2 + 2);
    v21 = 16 * *((int *)a2 + 6);
    v22.i64[0] = 0x3F0000003F000000;
    v22.i64[1] = 0x3F0000003F000000;
    do
    {
      if (v10 >= 1)
      {
        v23 = 0;
        v24 = v19;
        v25 = v18;
        v26 = v17;
        v27 = v16;
        v28 = v15;
        v29 = v14;
        v30 = v13;
        v31 = v12;
        do
        {
          v32 = *((int *)a2 + 22);
          v33 = vsubq_f32(v24, v9);
          v34 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v35 = vaddq_s32(vcvtq_s32_f32(v33), vcltzq_f32(v33));
            v36 = (float32x2_t)vsubq_f32(v33, vcvtq_f32_s32(v35)).u64[0];
            v37 = (float32x4_t *)(v34 + 16 * (v35.i32[0] + v35.i32[1] * (int)v32));
            v38 = vaddq_f32(*v37, vmulq_n_f32(vsubq_f32(v37[1], *v37), v36.f32[0]));
            v39 = vaddq_f32(v38, vmulq_lane_f32(vsubq_f32(vaddq_f32(v37[v32], vmulq_n_f32(vsubq_f32(v37[(int)v32 + 1], v37[v32]), v36.f32[0])), v38), v36, 1));
            v40 = vsubq_f32(v25, v9);
            v41 = vaddq_s32(vcvtq_s32_f32(v40), vcltzq_f32(v40));
            v40.i64[0] = vsubq_f32(v40, vcvtq_f32_s32(v41)).u64[0];
            v42 = (float32x4_t *)(v34 + 16 * (v41.i32[0] + v41.i32[1] * (int)v32));
            v43 = vaddq_f32(*v42, vmulq_n_f32(vsubq_f32(v42[1], *v42), v40.f32[0]));
            v44 = vaddq_f32(v43, vmulq_lane_f32(vsubq_f32(vaddq_f32(v42[v32], vmulq_n_f32(vsubq_f32(v42[(int)v32 + 1], v42[v32]), v40.f32[0])), v43), *(float32x2_t *)v40.f32, 1));
            v45 = vsubq_f32(v26, v9);
            v46 = vaddq_s32(vcvtq_s32_f32(v45), vcltzq_f32(v45));
            v45.i64[0] = vsubq_f32(v45, vcvtq_f32_s32(v46)).u64[0];
            v47 = (float32x4_t *)(v34 + 16 * (v46.i32[0] + v46.i32[1] * (int)v32));
            v48 = vaddq_f32(*v47, vmulq_n_f32(vsubq_f32(v47[1], *v47), v45.f32[0]));
            v49 = vaddq_f32(v48, vmulq_lane_f32(vsubq_f32(vaddq_f32(v47[v32], vmulq_n_f32(vsubq_f32(v47[(int)v32 + 1], v47[v32]), v45.f32[0])), v48), *(float32x2_t *)v45.f32, 1));
            v50 = vsubq_f32(v27, v9);
            v51 = vaddq_s32(vcvtq_s32_f32(v50), vcltzq_f32(v50));
            v50.i64[0] = vsubq_f32(v50, vcvtq_f32_s32(v51)).u64[0];
            v52 = (float32x4_t *)(v34 + 16 * (v51.i32[0] + v51.i32[1] * (int)v32));
            v53 = vaddq_f32(*v52, vmulq_n_f32(vsubq_f32(v52[1], *v52), v50.f32[0]));
            v54 = vaddq_f32(v53, vmulq_lane_f32(vsubq_f32(vaddq_f32(v52[v32], vmulq_n_f32(vsubq_f32(v52[(int)v32 + 1], v52[v32]), v50.f32[0])), v53), *(float32x2_t *)v50.f32, 1));
            v55 = vsubq_f32(v28, v9);
            v56 = vaddq_s32(vcvtq_s32_f32(v55), vcltzq_f32(v55));
            v55.i64[0] = vsubq_f32(v55, vcvtq_f32_s32(v56)).u64[0];
            v57 = (float32x4_t *)(v34 + 16 * (v56.i32[0] + v56.i32[1] * (int)v32));
            v58 = vaddq_f32(*v57, vmulq_n_f32(vsubq_f32(v57[1], *v57), v55.f32[0]));
            v59 = vaddq_f32(v58, vmulq_lane_f32(vsubq_f32(vaddq_f32(v57[v32], vmulq_n_f32(vsubq_f32(v57[(int)v32 + 1], v57[v32]), v55.f32[0])), v58), *(float32x2_t *)v55.f32, 1));
            v60 = vsubq_f32(v29, v9);
            v61 = vaddq_s32(vcvtq_s32_f32(v60), vcltzq_f32(v60));
            v60.i64[0] = vsubq_f32(v60, vcvtq_f32_s32(v61)).u64[0];
            v62 = (float32x4_t *)(v34 + 16 * (v61.i32[0] + v61.i32[1] * (int)v32));
            v63 = vaddq_f32(*v62, vmulq_n_f32(vsubq_f32(v62[1], *v62), v60.f32[0]));
            v64 = vaddq_f32(v63, vmulq_lane_f32(vsubq_f32(vaddq_f32(v62[v32], vmulq_n_f32(vsubq_f32(v62[(int)v32 + 1], v62[v32]), v60.f32[0])), v63), *(float32x2_t *)v60.f32, 1));
            v65 = vsubq_f32(v30, v9);
            v66 = vaddq_s32(vcvtq_s32_f32(v65), vcltzq_f32(v65));
            v65.i64[0] = vsubq_f32(v65, vcvtq_f32_s32(v66)).u64[0];
            v67 = (float32x4_t *)(v34 + 16 * (v66.i32[0] + v66.i32[1] * (int)v32));
            v68 = vaddq_f32(*v67, vmulq_n_f32(vsubq_f32(v67[1], *v67), v65.f32[0]));
            v69 = vaddq_f32(v68, vmulq_lane_f32(vsubq_f32(vaddq_f32(v67[v32], vmulq_n_f32(vsubq_f32(v67[(int)v32 + 1], v67[v32]), v65.f32[0])), v68), *(float32x2_t *)v65.f32, 1));
            v70 = vsubq_f32(v31, v9);
            v71 = vaddq_s32(vcvtq_s32_f32(v70), vcltzq_f32(v70));
            v70.i64[0] = vsubq_f32(v70, vcvtq_f32_s32(v71)).u64[0];
            v72 = (float32x4_t *)(v34 + 16 * (v71.i32[0] + v71.i32[1] * (int)v32));
            v73 = vaddq_f32(*v72, vmulq_n_f32(vsubq_f32(v72[1], *v72), v70.f32[0]));
            v74 = vaddq_f32(v73, vmulq_lane_f32(vsubq_f32(vaddq_f32(v72[v32], vmulq_n_f32(vsubq_f32(v72[(int)v32 + 1], v72[v32]), v70.f32[0])), v73), *(float32x2_t *)v70.f32, 1));
          }
          else
          {
            v75 = vaddq_f32(v33, v22);
            v76 = vcvtq_s32_f32(v75);
            v75.i64[0] = vaddq_s32(v76, vcgtq_f32(vcvtq_f32_s32(v76), v75)).u64[0];
            v39 = *(float32x4_t *)(v34 + 16 * (v75.i32[0] + v75.i32[1] * (int)v32));
            v77 = vaddq_f32(vsubq_f32(v25, v9), v22);
            v78 = vcvtq_s32_f32(v77);
            v77.i64[0] = vaddq_s32(v78, vcgtq_f32(vcvtq_f32_s32(v78), v77)).u64[0];
            v44 = *(float32x4_t *)(v34 + 16 * (v77.i32[0] + v77.i32[1] * (int)v32));
            v79 = vaddq_f32(vsubq_f32(v26, v9), v22);
            v80 = vcvtq_s32_f32(v79);
            v79.i64[0] = vaddq_s32(v80, vcgtq_f32(vcvtq_f32_s32(v80), v79)).u64[0];
            v49 = *(float32x4_t *)(v34 + 16 * (v79.i32[0] + v79.i32[1] * (int)v32));
            v81 = vaddq_f32(vsubq_f32(v27, v9), v22);
            v82 = vcvtq_s32_f32(v81);
            v81.i64[0] = vaddq_s32(v82, vcgtq_f32(vcvtq_f32_s32(v82), v81)).u64[0];
            v54 = *(float32x4_t *)(v34 + 16 * (v81.i32[0] + v81.i32[1] * (int)v32));
            v83 = vaddq_f32(vsubq_f32(v28, v9), v22);
            v84 = vcvtq_s32_f32(v83);
            v83.i64[0] = vaddq_s32(v84, vcgtq_f32(vcvtq_f32_s32(v84), v83)).u64[0];
            v59 = *(float32x4_t *)(v34 + 16 * (v83.i32[0] + v83.i32[1] * (int)v32));
            v85 = vaddq_f32(vsubq_f32(v29, v9), v22);
            v86 = vcvtq_s32_f32(v85);
            v85.i64[0] = vaddq_s32(v86, vcgtq_f32(vcvtq_f32_s32(v86), v85)).u64[0];
            v64 = *(float32x4_t *)(v34 + 16 * (v85.i32[0] + v85.i32[1] * (int)v32));
            v87 = vaddq_f32(vsubq_f32(v30, v9), v22);
            v88 = vcvtq_s32_f32(v87);
            v87.i64[0] = vaddq_s32(v88, vcgtq_f32(vcvtq_f32_s32(v88), v87)).u64[0];
            v69 = *(float32x4_t *)(v34 + 16 * (v87.i32[0] + v87.i32[1] * (int)v32));
            v89 = vaddq_f32(vsubq_f32(v31, v9), v22);
            v90 = vcvtq_s32_f32(v89);
            v89.i64[0] = vaddq_s32(v90, vcgtq_f32(vcvtq_f32_s32(v90), v89)).u64[0];
            v74 = *(float32x4_t *)(v34 + 16 * (v89.i32[0] + v89.i32[1] * (int)v32));
          }
          v91 = this[51];
          *(float32x4_t *)(v20 + v23) = vaddq_f32(vmulq_f32(v74, v91[15]), vaddq_f32(vmulq_f32(v69, v91[14]), vaddq_f32(vmulq_f32(v64, v91[13]), vaddq_f32(vmulq_f32(v59, v91[12]), vaddq_f32(vmulq_f32(v54, v91[11]), vaddq_f32(vmulq_f32(v49, v91[10]), vaddq_f32(vmulq_f32(v39, v91[8]), vmulq_f32(v44, v91[9]))))))));
          v24 = vaddq_f32(v24, (float32x4_t)xmmword_1B304F230);
          v25 = vaddq_f32(v25, (float32x4_t)xmmword_1B304F230);
          v26 = vaddq_f32(v26, (float32x4_t)xmmword_1B304F230);
          v27 = vaddq_f32(v27, (float32x4_t)xmmword_1B304F230);
          v28 = vaddq_f32(v28, (float32x4_t)xmmword_1B304F230);
          v29 = vaddq_f32(v29, (float32x4_t)xmmword_1B304F230);
          v30 = vaddq_f32(v30, (float32x4_t)xmmword_1B304F230);
          v31 = vaddq_f32(v31, (float32x4_t)xmmword_1B304F230);
          v23 += 16;
        }
        while (16 * v10 != v23);
      }
      v19 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F240);
      v18 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F240);
      v17 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F240);
      v16 = vaddq_f32(v16, (float32x4_t)xmmword_1B304F240);
      v15 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F240);
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F240);
      v20 += v21;
      v12 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F240);
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcConvolvePass8tap::GetDOD(float **this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  float v9;
  double v10;
  int v11;
  float v12;
  float v13;
  double v14;
  int v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  float v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  float v64;
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  float v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  double v87;
  float v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  float v100;
  uint64_t v101;
  float v102;
  float v103;
  float v104;
  uint64_t v105;
  uint64_t v106;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  if ((*((int (**)(float **, HGRenderer *))*this + 39))(this, a2) >= 1)
  {
    v8 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    LODWORD(v6) = HGRectGrow(v6, v5, v8);
  }
  v9 = HGRectFloat(v6);
  v11 = LODWORD(v10);
  v13 = v12;
  v15 = LODWORD(v14);
  v16 = HGRectTranslate(v9, v10, v12, v14, -*this[51]);
  v21 = HGRectIntegral(v17, v16, v18, v19, v20);
  v23 = HGRectUnion(0, 0, v21, v22);
  v25 = v24;
  LODWORD(v26) = v11;
  LODWORD(v27) = v15;
  v28 = HGRectTranslate(v9, v26, v13, v27, -this[51][4]);
  v33 = HGRectIntegral(v29, v28, v30, v31, v32);
  v35 = HGRectUnion(v23, v25, v33, v34);
  v37 = v36;
  LODWORD(v38) = v11;
  LODWORD(v39) = v15;
  v40 = HGRectTranslate(v9, v38, v13, v39, -this[51][8]);
  v45 = HGRectIntegral(v41, v40, v42, v43, v44);
  v47 = HGRectUnion(v35, v37, v45, v46);
  v49 = v48;
  LODWORD(v50) = v11;
  LODWORD(v51) = v15;
  v52 = HGRectTranslate(v9, v50, v13, v51, -this[51][12]);
  v57 = HGRectIntegral(v53, v52, v54, v55, v56);
  v59 = HGRectUnion(v47, v49, v57, v58);
  v61 = v60;
  LODWORD(v62) = v11;
  LODWORD(v63) = v15;
  v64 = HGRectTranslate(v9, v62, v13, v63, -this[51][16]);
  v69 = HGRectIntegral(v65, v64, v66, v67, v68);
  v71 = HGRectUnion(v59, v61, v69, v70);
  v73 = v72;
  LODWORD(v74) = v11;
  LODWORD(v75) = v15;
  v76 = HGRectTranslate(v9, v74, v13, v75, -this[51][20]);
  v81 = HGRectIntegral(v77, v76, v78, v79, v80);
  v83 = HGRectUnion(v71, v73, v81, v82);
  v85 = v84;
  LODWORD(v86) = v11;
  LODWORD(v87) = v15;
  v88 = HGRectTranslate(v9, v86, v13, v87, -this[51][24]);
  v93 = HGRectIntegral(v89, v88, v90, v91, v92);
  v95 = HGRectUnion(v83, v85, v93, v94);
  v97 = v96;
  LODWORD(v98) = v11;
  LODWORD(v99) = v15;
  v100 = HGRectTranslate(v9, v98, v13, v99, -this[51][28]);
  v105 = HGRectIntegral(v101, v100, v102, v103, v104);
  return HGRectUnion(v95, v97, v105, v106);
}

uint64_t HgcConvolvePass8tap::GetROI(float **this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  float v7;
  double v8;
  int v9;
  float v10;
  float v11;
  double v12;
  int v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  float v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  float v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  float v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  float v74;
  uint64_t v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  float v86;
  uint64_t v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  float v98;
  uint64_t v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v4 = 0;
  if (!a3)
  {
    v7 = HGRectFloat(a4.var0);
    v9 = LODWORD(v8);
    v11 = v10;
    v13 = LODWORD(v12);
    v14 = HGRectTranslate(v7, v8, v10, v12, *this[51]);
    v19 = HGRectIntegral(v15, v14, v16, v17, v18);
    v21 = HGRectUnion(0, 0, v19, v20);
    v23 = v22;
    LODWORD(v24) = v9;
    LODWORD(v25) = v13;
    v26 = HGRectTranslate(v7, v24, v11, v25, this[51][4]);
    v31 = HGRectIntegral(v27, v26, v28, v29, v30);
    v33 = HGRectUnion(v21, v23, v31, v32);
    v35 = v34;
    LODWORD(v36) = v9;
    LODWORD(v37) = v13;
    v38 = HGRectTranslate(v7, v36, v11, v37, this[51][8]);
    v43 = HGRectIntegral(v39, v38, v40, v41, v42);
    v45 = HGRectUnion(v33, v35, v43, v44);
    v47 = v46;
    LODWORD(v48) = v9;
    LODWORD(v49) = v13;
    v50 = HGRectTranslate(v7, v48, v11, v49, this[51][12]);
    v55 = HGRectIntegral(v51, v50, v52, v53, v54);
    v57 = HGRectUnion(v45, v47, v55, v56);
    v59 = v58;
    LODWORD(v60) = v9;
    LODWORD(v61) = v13;
    v62 = HGRectTranslate(v7, v60, v11, v61, this[51][16]);
    v67 = HGRectIntegral(v63, v62, v64, v65, v66);
    v69 = HGRectUnion(v57, v59, v67, v68);
    v71 = v70;
    LODWORD(v72) = v9;
    LODWORD(v73) = v13;
    v74 = HGRectTranslate(v7, v72, v11, v73, this[51][20]);
    v79 = HGRectIntegral(v75, v74, v76, v77, v78);
    v81 = HGRectUnion(v69, v71, v79, v80);
    v83 = v82;
    LODWORD(v84) = v9;
    LODWORD(v85) = v13;
    v86 = HGRectTranslate(v7, v84, v11, v85, this[51][24]);
    v91 = HGRectIntegral(v87, v86, v88, v89, v90);
    v93 = HGRectUnion(v81, v83, v91, v92);
    v95 = v94;
    LODWORD(v96) = v9;
    LODWORD(v97) = v13;
    v98 = HGRectTranslate(v7, v96, v11, v97, this[51][28]);
    v103 = HGRectIntegral(v99, v98, v100, v101, v102);
    v4 = HGRectUnion(v93, v95, v103, v104);
    v106 = v105;
    if ((*((int (**)(float **, HGRenderer *))*this + 39))(this, a2) >= 1)
    {
      v107 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      return HGRectGrow(v4, v106, v107);
    }
  }
  return v4;
}

void HgcConvolvePass8tap::HgcConvolvePass8tap(HgcConvolvePass8tap *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6567C10;
  v3 = (_OWORD *)operator new();
  v3[14] = 0u;
  v3[15] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcConvolvePass8tap *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2CCE66C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcConvolvePass8tap::~HgcConvolvePass8tap(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6567C10;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40104B78CFLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcConvolvePass8tap::~HgcConvolvePass8tap(this);
  HGObject::operator delete(v1);
}

uint64_t HgcConvolvePass8tap::SetParameter(HgcConvolvePass8tap *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 0xF)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcConvolvePass8tap::GetParameter(HgcConvolvePass8tap *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 0xF)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcSmearToRect::GetProgram(HgcSmearToRect *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000002b2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 s0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = fmin(frag._texCoord0.xy, hg_Params[0].zw);\n"
             "    s0.xy = fmax(s0.xy, hg_Params[0].xy);\n"
             "    s0.xy = s0.xy + hg_Params[1].xy;\n"
             "    s0.xy = s0.xy*hg_Params[1].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=8ddc6cfb:4c51e2d4:1403eabc:4a3636c0\n"
             "//SIG=00400000:00000000:00000000:00000001:0000:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002aa\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = fmin(frag._texCoord0.xy, hg_Params[0].zw);\n"
             "    r0.xy = fmax(r0.xy, hg_Params[0].xy);\n"
             "    r0.xy = r0.xy + hg_Params[1].xy;\n"
             "    r0.xy = r0.xy*hg_Params[1].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=82ea8f91:772b3f51:4d493828:f90a96ed\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002a1\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    highp vec4 r0;\n"
           "\n"
           "    r0.xy = min(hg_TexCoord0.xy, hg_ProgramLocal0.zw);\n"
           "    r0.xy = max(r0.xy, hg_ProgramLocal0.xy);\n"
           "    r0.xy = r0.xy + hg_ProgramLocal1.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal1.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=cbac0ee7:56d75b2c:e8e4fa16:e2cb9d44\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0002:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcSmearToRect::InitProgramDescriptor(HgcSmearToRect *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSmearToRect_hgc_visible", "//Metal1.0     \n//LEN=00000001eb\n[[ visible ]] FragmentOut HgcSmearToRect_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = fmin(texCoord0.xy, hg_Params[0].zw);\n"
    "    r0.xy = fmax(r0.xy, hg_Params[0].xy);\n"
    "    r0.xy = r0.xy + hg_Params[1].xy;\n"
    "    r0.xy = r0.xy*hg_Params[1].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CCE874()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSmearToRect");
}

void sub_1B2CCE884(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CCEA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CCEA54()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CCEA4CLL);
}

_QWORD *HgcSmearToRect::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSmearToRect [hgc1]");
}

uint64_t HgcSmearToRect::BindTexture(HgcSmearToRect *this, HGHandler *a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
    v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
  }
  v5.n128_f32[0] = (float)*((int *)a2 + 60);
  v6.n128_f32[0] = (float)*((int *)a2 + 61);
  (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 1, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcSmearToRect::Bind(HgcSmearToRect *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HgcSmearToRect *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcSmearToRect::RenderTile(int8x16_t **this, float32x4_t **a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  float32x4_t *v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t *v32;
  int32x4_t v33;
  float32x2_t v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t *v64;
  int32x4_t v65;
  float32x2_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;

  v4 = HGTile::Renderer((HGTile *)a2);
  v5 = ((uint64_t (*)(int8x16_t **, uint64_t))(*this)[19].i64[1])(this, v4);
  v6 = (int32x2_t)*a2;
  v7 = *((_DWORD *)a2 + 3) - ((unint64_t)*a2 >> 32);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = a2[2];
    v12 = v11 + 2;
    v13 = 16 * *((int *)a2 + 6);
    v14.i64[0] = 0x3F0000003F000000;
    v14.i64[1] = 0x3F0000003F000000;
    v15 = v9;
    do
    {
      if (v10 < 4)
      {
        LODWORD(v61) = 0;
        v18 = v15;
      }
      else
      {
        v16 = 0;
        v17 = v12;
        v18 = v15;
        do
        {
          v19 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v20 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          v21 = vaddq_f32(v20, (float32x4_t)xmmword_1B304F230);
          v22 = *this[51];
          v23 = (float32x4_t)vextq_s8(v22, v22, 8uLL);
          v24 = vminq_f32(v20, v23);
          v25 = vminq_f32(v21, v23);
          v26 = vmaxq_f32(vminq_f32(v18, v23), (float32x4_t)v22);
          v27 = vmaxq_f32(vminq_f32(v19, v23), (float32x4_t)v22);
          v28 = vmaxq_f32(v24, (float32x4_t)v22);
          v29 = vmaxq_f32(v25, (float32x4_t)v22);
          v30 = *((int *)a2 + 22);
          v31 = vsubq_f32(v26, v9);
          v32 = a2[10];
          if (v5)
          {
            v33 = vaddq_s32(vcvtq_s32_f32(v31), vcltzq_f32(v31));
            v34 = (float32x2_t)vsubq_f32(v31, vcvtq_f32_s32(v33)).u64[0];
            v35 = &v32[v33.i32[0] + v33.i32[1] * (int)v30];
            v36 = vaddq_f32(*v35, vmulq_n_f32(vsubq_f32(v35[1], *v35), v34.f32[0]));
            v37 = vaddq_f32(v36, vmulq_lane_f32(vsubq_f32(vaddq_f32(v35[v30], vmulq_n_f32(vsubq_f32(v35[(int)v30 + 1], v35[v30]), v34.f32[0])), v36), v34, 1));
            v38 = vsubq_f32(v27, v9);
            v39 = vaddq_s32(vcvtq_s32_f32(v38), vcltzq_f32(v38));
            v38.i64[0] = vsubq_f32(v38, vcvtq_f32_s32(v39)).u64[0];
            v40 = &v32[v39.i32[0] + v39.i32[1] * (int)v30];
            v41 = vaddq_f32(*v40, vmulq_n_f32(vsubq_f32(v40[1], *v40), v38.f32[0]));
            v42 = vaddq_f32(v41, vmulq_lane_f32(vsubq_f32(vaddq_f32(v40[v30], vmulq_n_f32(vsubq_f32(v40[(int)v30 + 1], v40[v30]), v38.f32[0])), v41), *(float32x2_t *)v38.f32, 1));
            v43 = vsubq_f32(v28, v9);
            v44 = vaddq_s32(vcvtq_s32_f32(v43), vcltzq_f32(v43));
            v43.i64[0] = vsubq_f32(v43, vcvtq_f32_s32(v44)).u64[0];
            v45 = &v32[v44.i32[0] + v44.i32[1] * (int)v30];
            v46 = vaddq_f32(*v45, vmulq_n_f32(vsubq_f32(v45[1], *v45), v43.f32[0]));
            v47 = vaddq_f32(v46, vmulq_lane_f32(vsubq_f32(vaddq_f32(v45[v30], vmulq_n_f32(vsubq_f32(v45[(int)v30 + 1], v45[v30]), v43.f32[0])), v46), *(float32x2_t *)v43.f32, 1));
            v48 = vsubq_f32(v29, v9);
            v49 = vaddq_s32(vcvtq_s32_f32(v48), vcltzq_f32(v48));
            v48.i64[0] = vsubq_f32(v48, vcvtq_f32_s32(v49)).u64[0];
            v50 = &v32[v49.i32[0] + v49.i32[1] * (int)v30];
            v51 = vaddq_f32(*v50, vmulq_n_f32(vsubq_f32(v50[1], *v50), v48.f32[0]));
            v52 = vaddq_f32(v51, vmulq_lane_f32(vsubq_f32(vaddq_f32(v50[v30], vmulq_n_f32(vsubq_f32(v50[(int)v30 + 1], v50[v30]), v48.f32[0])), v51), *(float32x2_t *)v48.f32, 1));
          }
          else
          {
            v53 = vaddq_f32(v31, v14);
            v54 = vcvtq_s32_f32(v53);
            v53.i64[0] = vaddq_s32(v54, vcgtq_f32(vcvtq_f32_s32(v54), v53)).u64[0];
            v37 = v32[v53.i32[0] + v53.i32[1] * (int)v30];
            v55 = vaddq_f32(vsubq_f32(v27, v9), v14);
            v56 = vcvtq_s32_f32(v55);
            v55.i64[0] = vaddq_s32(v56, vcgtq_f32(vcvtq_f32_s32(v56), v55)).u64[0];
            v42 = v32[v55.i32[0] + v55.i32[1] * (int)v30];
            v57 = vaddq_f32(vsubq_f32(v28, v9), v14);
            v58 = vcvtq_s32_f32(v57);
            v57.i64[0] = vaddq_s32(v58, vcgtq_f32(vcvtq_f32_s32(v58), v57)).u64[0];
            v47 = v32[v57.i32[0] + v57.i32[1] * (int)v30];
            v59 = vaddq_f32(vsubq_f32(v29, v9), v14);
            v60 = vcvtq_s32_f32(v59);
            v59.i64[0] = vaddq_s32(v60, vcgtq_f32(vcvtq_f32_s32(v60), v59)).u64[0];
            v52 = v32[v59.i32[0] + v59.i32[1] * (int)v30];
          }
          v17[-2] = v37;
          v17[-1] = v42;
          *v17 = v47;
          v17[1] = v52;
          v17 += 4;
          v18 = vaddq_f32(v21, (float32x4_t)xmmword_1B304F230);
          v16 -= 4;
        }
        while (v10 + v16 > 3);
        LODWORD(v61) = -v16;
      }
      if ((int)v61 < v10)
      {
        v61 = v61;
        do
        {
          v62 = *((int *)a2 + 22);
          v63 = vsubq_f32(vmaxq_f32(vminq_f32(v18, (float32x4_t)vextq_s8(*this[51], *this[51], 8uLL)), *(float32x4_t *)this[51]), v9);
          v64 = a2[10];
          if (v5)
          {
            v65 = vaddq_s32(vcvtq_s32_f32(v63), vcltzq_f32(v63));
            v66 = (float32x2_t)vsubq_f32(v63, vcvtq_f32_s32(v65)).u64[0];
            v67 = &v64[v65.i32[0] + v65.i32[1] * (int)v62];
            v68 = vaddq_f32(*v67, vmulq_n_f32(vsubq_f32(v67[1], *v67), v66.f32[0]));
            v69 = vaddq_f32(v68, vmulq_lane_f32(vsubq_f32(vaddq_f32(v67[v62], vmulq_n_f32(vsubq_f32(v67[(int)v62 + 1], v67[v62]), v66.f32[0])), v68), v66, 1));
          }
          else
          {
            v70 = vaddq_f32(v63, v14);
            v71 = vcvtq_s32_f32(v70);
            v70.i64[0] = vaddq_s32(v71, vcgtq_f32(vcvtq_f32_s32(v71), v70)).u64[0];
            v69 = v64[v70.i32[0] + v70.i32[1] * (int)v62];
          }
          v11[v61] = v69;
          v18 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          ++v61;
        }
        while (v61 < v10);
      }
      v15 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v12 = (float32x4_t *)((char *)v12 + v13);
      v11 = (float32x4_t *)((char *)v11 + v13);
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcSmearToRect::GetDOD(HgcSmearToRect *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcSmearToRect *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcSmearToRect::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcSmearToRect::HgcSmearToRect(HgcSmearToRect *this)
{
  _QWORD *v2;
  _QWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6567E78;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[1] = 0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcSmearToRect *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2CCF134(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSmearToRect::~HgcSmearToRect(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6567E78;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40451B5BE8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSmearToRect::~HgcSmearToRect(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSmearToRect::SetParameter(HgcSmearToRect *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcSmearToRect::GetParameter(HgcSmearToRect *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcSimpleBorder::GetProgram(HgcSimpleBorder *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004bf\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.z = dot(frag._texCoord1, hg_Params[5]);\n"
             "    s0.z = 1.00000f / s0.z;\n"
             "    s0.x = dot(frag._texCoord1, hg_Params[3]);\n"
             "    s0.y = dot(frag._texCoord1, hg_Params[4]);\n"
             "    s0.xy = s0.xz*s0.zy;\n"
             "    s0 = s0.xyxy - hg_Params[1];\n"
             "    s0.xy = -s0.xy;\n"
             "    s1 = s0 + float4(c0.xxxx);\n"
             "    s1.xy = fmin(s1.xy, s1.zw);\n"
             "    s0 = s0 - hg_Params[0];\n"
             "    s1.x = clamp(fmin(s1.x, s1.y), 0.00000f, 1.00000f);\n"
             "    s0 = s0 + float4(c0.xxxx);\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    s0.xy = fmin(s0.xy, s0.zw);\n"
             "    s0.x = clamp(fmin(s0.x, s0.y), 0.00000f, 1.00000f);\n"
             "    s0 = mix(hg_Params[2], float4(r0), s0.xxxx);\n"
             "    output.color0 = s0*s1.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=dd1f3d2a:b4ccf73d:99838ad2:b16e7208\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0006:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000498\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.z = dot(frag._texCoord1, hg_Params[5]);\n"
             "    r0.z = 1.00000f / r0.z;\n"
             "    r0.x = dot(frag._texCoord1, hg_Params[3]);\n"
             "    r0.y = dot(frag._texCoord1, hg_Params[4]);\n"
             "    r0.xy = r0.xz*r0.zy;\n"
             "    r0 = r0.xyxy - hg_Params[1];\n"
             "    r0.xy = -r0.xy;\n"
             "    r1 = r0 + c0.xxxx;\n"
             "    r1.xy = fmin(r1.xy, r1.zw);\n"
             "    r0 = r0 - hg_Params[0];\n"
             "    r1.x = clamp(fmin(r1.x, r1.y), 0.00000f, 1.00000f);\n"
             "    r0 = r0 + c0.xxxx;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xy = fmin(r0.xy, r0.zw);\n"
             "    r0.x = clamp(fmin(r0.x, r0.y), 0.00000f, 1.00000f);\n"
             "    r2 = mix(hg_Params[2], r2, r0.xxxx);\n"
             "    output.color0 = r2*r1.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=eaf374c3:9d3d91f5:dd3ad5d7:06edf1a2\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0006:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000053e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.z = dot(hg_TexCoord1, hg_ProgramLocal5);\n"
           "    r0.z = 1.00000 / r0.z;\n"
           "    r0.x = dot(hg_TexCoord1, hg_ProgramLocal3);\n"
           "    r0.y = dot(hg_TexCoord1, hg_ProgramLocal4);\n"
           "    r0.xy = r0.xz*r0.zy;\n"
           "    r0 = r0.xyxy - hg_ProgramLocal1;\n"
           "    r0.xy = -r0.xy;\n"
           "    r1 = r0 + c0.xxxx;\n"
           "    r1.xy = min(r1.xy, r1.zw);\n"
           "    r0 = r0 - hg_ProgramLocal0;\n"
           "    r1.x = clamp(min(r1.x, r1.y), 0.00000, 1.00000);\n"
           "    r0 = r0 + c0.xxxx;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xy = min(r0.xy, r0.zw);\n"
           "    r0.x = clamp(min(r0.x, r0.y), 0.00000, 1.00000);\n"
           "    r2 = mix(hg_ProgramLocal2, r2, r0.xxxx);\n"
           "    gl_FragColor = r2*r1.xxxx;\n"
           "}\n"
           "//MD5=8714e1a3:0379e8a0:fa930950:6b08f775\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0006:0003:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void HgcSimpleBorder::InitProgramDescriptor(HgcSimpleBorder *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSimpleBorder_hgc_visible", "//Metal1.0     \n//LEN=0000000375\n[[ visible ]] FragmentOut HgcSimpleBorder_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.z = dot(texCoord1, hg_Params[5]);\n"
    "    r0.z = 1.00000f / r0.z;\n"
    "    r0.x = dot(texCoord1, hg_Params[3]);\n"
    "    r0.y = dot(texCoord1, hg_Params[4]);\n"
    "    r0.xy = r0.xz*r0.zy;\n"
    "    r0 = r0.xyxy - hg_Params[1];\n"
    "    r0.xy = -r0.xy;\n"
    "    r1 = r0 + c0.xxxx;\n"
    "    r1.xy = fmin(r1.xy, r1.zw);\n"
    "    r0 = r0 - hg_Params[0];\n"
    "    r1.x = clamp(fmin(r1.x, r1.y), 0.00000f, 1.00000f);\n"
    "    r0 = r0 + c0.xxxx;\n"
    "    r2 = color0;\n"
    "    r0.xy = fmin(r0.xy, r0.zw);\n"
    "    r0.x = clamp(fmin(r0.x, r0.y), 0.00000f, 1.00000f);\n"
    "    r2 = mix(hg_Params[2], r2, r0.xxxx);\n"
    "    output.color0 = r2*r1.xxxx;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CCF318()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSimpleBorder");
}

void sub_1B2CCF328(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052790;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CCF468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CCF4B0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CCF4A8);
}

_QWORD *HgcSimpleBorder::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSimpleBorder [hgc1]");
}

uint64_t HgcSimpleBorder::BindTexture(HgcSimpleBorder *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcSimpleBorder::Bind(HgcSimpleBorder *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcSimpleBorder *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcSimpleBorder::RenderTile(HgcSimpleBorder *this, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  int32x2_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  __int128 v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int128 v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t *v86;
  uint64_t v87;
  uint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x16_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[2];
    v7 = a2[10];
    *(float32x2_t *)v8.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v8.i64[1] = 0x3F80000000000000;
    v9 = 16 * a2[3].i32[0];
    v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 3)
      {
        LODWORD(v87) = 0;
        v13 = v8;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = v8;
        do
        {
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v16 = *((_QWORD *)this + 51);
          v18 = *(float32x4_t *)(v16 + 64);
          v17 = *(float32x4_t *)(v16 + 80);
          v19 = vmulq_f32(v13, v17);
          v20 = vmulq_f32(v14, v17);
          v21 = vmulq_f32(v15, v17);
          v22 = vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL));
          v23 = vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL));
          v24 = vaddq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL));
          v25 = vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL));
          v26 = vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL));
          v27 = vaddq_f32(v24, (float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL));
          v28 = *(float32x4_t *)(v16 + 96);
          v29 = *(float32x4_t *)(v16 + 112);
          v30 = vminq_f32(vmaxq_f32(vrecpeq_f32(v25), v28), v29);
          v31 = vminq_f32(vmaxq_f32(vrecpeq_f32(v26), v28), v29);
          v32 = vminq_f32(vmaxq_f32(vrecpeq_f32(v27), v28), v29);
          v33 = vmaxq_f32(vmulq_f32(v32, vrecpsq_f32(v27, v32)), v28);
          v34 = vminq_f32(vmaxq_f32(vmulq_f32(v30, vrecpsq_f32(v25, v30)), v28), v29);
          v35 = vminq_f32(vmaxq_f32(vmulq_f32(v31, vrecpsq_f32(v26, v31)), v28), v29);
          v36 = vminq_f32(v33, v29);
          v37 = vrecpsq_f32(v25, v34);
          v38 = vrecpsq_f32(v27, v36);
          v40 = *(float32x4_t *)(v16 + 32);
          v39 = *(float32x4_t *)(v16 + 48);
          v41 = vmulq_f32(v13, v39);
          v42 = vmulq_f32(v14, v39);
          v43 = vmulq_f32(v15, v39);
          v44 = vmulq_f32(v34, v37);
          v45 = vaddq_f32(v41, (float32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 4uLL));
          v46 = vaddq_f32(v42, (float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 4uLL));
          v47 = vmulq_f32(v35, vrecpsq_f32(v26, v35));
          v48 = vaddq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL));
          v49 = vmulq_f32(v36, v38);
          v45.i64[0] = vaddq_f32(v45, (float32x4_t)vdupq_laneq_s64((int64x2_t)v45, 1)).u64[0];
          v43.i64[0] = vaddq_f32(v46, (float32x4_t)vdupq_laneq_s64((int64x2_t)v46, 1)).u64[0];
          v45.i64[1] = v44.i64[1];
          v38.i64[0] = vaddq_f32(v48, (float32x4_t)vdupq_laneq_s64((int64x2_t)v48, 1)).u64[0];
          v50 = vmulq_f32(v13, v18);
          v51 = vmulq_f32(v14, v18);
          v52 = vmulq_f32(v15, v18);
          v43.i64[1] = v47.i64[1];
          v53 = vaddq_f32(v50, (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL));
          v38.i64[1] = v49.i64[1];
          v54 = vaddq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL));
          v55 = vaddq_f32(v52, (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL));
          v56 = *(int8x16_t *)(v16 + 128);
          v57 = *(_OWORD *)(v16 + 144);
          v58 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32(v53, (float32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL)), (int8x16_t)v45);
          v59 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32(v54, (float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL)), (int8x16_t)v43);
          v60 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32(v55, (float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL)), (int8x16_t)v38);
          v61 = *(_OWORD *)(v16 + 160);
          v62 = *(float32x4_t *)(v16 + 176);
          *(float32x2_t *)v58.f32 = vmul_f32((float32x2_t)vqtbl1_s8((int8x16_t)v58, *(int8x8_t *)&v57), (float32x2_t)vqtbl1_s8((int8x16_t)v58, *(int8x8_t *)&v61));
          *(float32x2_t *)v59.f32 = vmul_f32((float32x2_t)vqtbl1_s8((int8x16_t)v59, *(int8x8_t *)&v57), (float32x2_t)vqtbl1_s8((int8x16_t)v59, *(int8x8_t *)&v61));
          *(float32x2_t *)v60.f32 = vmul_f32((float32x2_t)vqtbl1_s8((int8x16_t)v60, *(int8x8_t *)&v57), (float32x2_t)vqtbl1_s8((int8x16_t)v60, *(int8x8_t *)&v61));
          v58.i64[1] = v58.i64[0];
          v59.i64[1] = v59.i64[0];
          v60.i64[1] = v60.i64[0];
          v63 = *(float32x4_t *)(v16 + 16);
          v64 = vsubq_f32(v58, v63);
          v65 = (int8x16_t)vsubq_f32(v59, v63);
          v66 = (int8x16_t)vsubq_f32(v60, v63);
          *(float32x2_t *)v63.f32 = vneg_f32(*(float32x2_t *)v64.f32);
          *(float32x2_t *)v38.f32 = vneg_f32(*(float32x2_t *)v65.i8);
          v63.i64[1] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
          v38.i64[1] = vextq_s8(v65, v65, 8uLL).u64[0];
          *(float32x2_t *)v64.f32 = vneg_f32(*(float32x2_t *)v66.i8);
          v64.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
          v67 = vaddq_f32(v62, v63);
          v68 = vaddq_f32(v62, v38);
          v69 = vaddq_f32(v62, v64);
          v70 = vminq_f32(v67, (float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL));
          v71 = vminq_f32(v68, (float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL));
          v72 = vminq_f32(v69, (float32x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL));
          v73 = vminq_f32(v72, (float32x4_t)vrev64q_s32((int32x4_t)v72));
          v74 = *(float32x4_t *)(v16 + 192);
          v75 = vaddq_f32(v62, vsubq_f32(v63, *(float32x4_t *)v16));
          v76 = vaddq_f32(v62, vsubq_f32(v38, *(float32x4_t *)v16));
          v77 = vaddq_f32(v62, vsubq_f32(v64, *(float32x4_t *)v16));
          v78 = vmaxq_f32(v73, v28);
          v79 = vminq_f32(v75, (float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL));
          v80 = vminq_f32(v76, (float32x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL));
          v81 = vminq_f32(v77, (float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL));
          v82 = vmaxq_f32(vminq_f32(v81, (float32x4_t)vrev64q_s32((int32x4_t)v81)), v28);
          v83 = vmulq_n_f32(vaddq_f32(v40, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11), v40), vminq_f32(vmaxq_f32(vminq_f32(v79, (float32x4_t)vrev64q_s32((int32x4_t)v79)), v28), v74).f32[0])), vminq_f32(vmaxq_f32(vminq_f32(v70, (float32x4_t)vrev64q_s32((int32x4_t)v70)), v28), v74).f32[0]);
          v84 = vmulq_n_f32(vaddq_f32(v40, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11 + 16), v40), vminq_f32(vmaxq_f32(vminq_f32(v80, (float32x4_t)vrev64q_s32((int32x4_t)v80)), v28), v74).f32[0])), vminq_f32(vmaxq_f32(vminq_f32(v71, (float32x4_t)vrev64q_s32((int32x4_t)v71)), v28), v74).f32[0]);
          v85 = vmulq_n_f32(vaddq_f32(v40, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11 + 32), v40), vminq_f32(v82, v74).f32[0])), vminq_f32(v78, v74).f32[0]);
          v86 = (float32x4_t *)(*(_QWORD *)&v6 + v11);
          *v86 = v83;
          v86[1] = v84;
          v86[2] = v85;
          v13 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v12 -= 3;
          v11 += 48;
        }
        while (v5 + v12 > 2);
        LODWORD(v87) = -v12;
      }
      if ((int)v87 < v5)
      {
        v87 = v87;
        do
        {
          v88 = *((_QWORD *)this + 51);
          v89 = vmulq_f32(v13, *(float32x4_t *)(v88 + 80));
          v90 = vaddq_f32(v89, (float32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 4uLL));
          v91 = vaddq_f32(v90, (float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL));
          v92 = *(float32x4_t *)(v88 + 96);
          v93 = *(float32x4_t *)(v88 + 112);
          v94 = vminq_f32(vmaxq_f32(vrecpeq_f32(v91), v92), v93);
          v95 = vminq_f32(vmaxq_f32(vmulq_f32(v94, vrecpsq_f32(v91, v94)), v92), v93);
          v96 = vmulq_f32(v13, *(float32x4_t *)(v88 + 48));
          v97 = vaddq_f32(v96, (float32x4_t)vextq_s8((int8x16_t)v96, (int8x16_t)v96, 4uLL));
          v98 = vmulq_f32(v95, vrecpsq_f32(v91, v95));
          v95.i64[0] = vaddq_f32(v97, (float32x4_t)vdupq_laneq_s64((int64x2_t)v97, 1)).u64[0];
          v99 = vmulq_f32(v13, *(float32x4_t *)(v88 + 64));
          v95.i64[1] = v98.i64[1];
          v100 = vaddq_f32(v99, (float32x4_t)vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL));
          v101 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v88 + 128), (int8x16_t)vaddq_f32(v100, (float32x4_t)vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL)), (int8x16_t)v95);
          v102 = *(float32x4_t *)(v88 + 176);
          *(float32x2_t *)v101.f32 = vmul_f32((float32x2_t)vqtbl1_s8((int8x16_t)v101, *(int8x8_t *)(v88 + 144)), (float32x2_t)vqtbl1_s8((int8x16_t)v101, *(int8x8_t *)(v88 + 160)));
          v101.i64[1] = v101.i64[0];
          v103 = (int8x16_t)vsubq_f32(v101, *(float32x4_t *)(v88 + 16));
          *(float32x2_t *)v99.f32 = vneg_f32(*(float32x2_t *)v103.i8);
          v99.i64[1] = vextq_s8(v103, v103, 8uLL).u64[0];
          v104 = vaddq_f32(v102, v99);
          v105 = vminq_f32(v104, (float32x4_t)vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL));
          v106 = vaddq_f32(v102, vsubq_f32(v99, *(float32x4_t *)v88));
          v107 = vminq_f32(v106, (float32x4_t)vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL));
          *(float32x4_t *)(*(_QWORD *)&v6 + 16 * v87) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(v88 + 32), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + 16 * v87), *(float32x4_t *)(v88 + 32)), vminq_f32(vmaxq_f32(vminq_f32(v107, (float32x4_t)vrev64q_s32((int32x4_t)v107)), v92), *(float32x4_t *)(v88 + 192)).f32[0])), vminq_f32(vmaxq_f32(vminq_f32(v105, (float32x4_t)vrev64q_s32((int32x4_t)v105)), v92), *(float32x4_t *)(v88 + 192)).f32[0]);
          v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          ++v87;
        }
        while (v87 < v5);
      }
      v8 = vaddq_f32(v8, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v6 += v9;
      *(_QWORD *)&v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcSimpleBorder::GetDOD(HgcSimpleBorder *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcSimpleBorder::GetROI(HgcSimpleBorder *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcSimpleBorder::HgcSimpleBorder(HgcSimpleBorder *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65680E0;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = xmmword_1B3051D20;
  *(int32x4_t *)(v3 + 112) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 128) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 144) = xmmword_1B30510C0;
  *(_QWORD *)&v4 = 0x3F0000003F000000;
  *((_QWORD *)&v4 + 1) = 0x3F0000003F000000;
  *(_OWORD *)(v3 + 160) = xmmword_1B3553EB0;
  *(_OWORD *)(v3 + 176) = v4;
  *(_OWORD *)(v3 + 192) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CCFC08(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSimpleBorder::~HgcSimpleBorder(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65680E0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40104B78CFLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSimpleBorder::~HgcSimpleBorder(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSimpleBorder::SetParameter(HgcSimpleBorder *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  __n128 *v7;
  uint64_t v8;
  __n128 *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;

  switch((int)a2)
  {
    case 0:
      v7 = (__n128 *)*((_QWORD *)this + 51);
      if (v7->n128_f32[0] == a3.n128_f32[0]
        && v7->n128_f32[1] == a4
        && v7->n128_f32[2] == a3.n128_f32[0]
        && v7->n128_f32[3] == a4)
      {
        return 0;
      }
      v7->n128_u32[0] = a3.n128_u32[0];
      v7->n128_f32[1] = a4;
      v7->n128_u32[2] = a3.n128_u32[0];
      v7->n128_f32[3] = a4;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v7[13] = a3;
      goto LABEL_34;
    case 1:
      v9 = (__n128 *)*((_QWORD *)this + 51);
      if (v9[1].n128_f32[0] == a5
        && v9[1].n128_f32[1] == a6
        && v9[1].n128_f32[2] == a3.n128_f32[0]
        && v9[1].n128_f32[3] == a4)
      {
        return 0;
      }
      v9[1].n128_f32[0] = a5;
      v9[1].n128_f32[1] = a6;
      v9[1].n128_u32[2] = a3.n128_u32[0];
      v9[1].n128_f32[3] = a4;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v9[14] = a3;
      goto LABEL_34;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_34;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_34;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_34;
    case 5:
      v8 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((_QWORD *)this + 51) + 240) = a3;
      return v8;
    case 6:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
LABEL_34:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcSimpleBorder::GetParameter(HgcSimpleBorder *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[52];
      a3[1] = v3[53];
      a3[2] = v3[54];
      v4 = v3 + 55;
      goto LABEL_9;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[56];
      a3[1] = v5[57];
      a3[2] = v5[58];
      v4 = v5 + 59;
      goto LABEL_9;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_9;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_9;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_9;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[60];
      a3[1] = v9[61];
      a3[2] = v9[62];
      v4 = v9 + 63;
      goto LABEL_9;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[20];
      a3[1] = v10[21];
      a3[2] = v10[22];
      v4 = v10 + 23;
LABEL_9:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcContrastBezierLuma::GetProgram(HgcContrastBezierLuma *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000875\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.2989999950, 0.5870000124, 0.1140000001, 1023.000000);\n"
             "    const half4 c1 = half4(0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
             "    const half4 c2 = half4(0.5960000157, -0.2750000060, -0.3210000098, 0.000000000);\n"
             "    const half4 c3 = half4(0.2119999975, -0.5230000019, 0.3109999895, 0.000000000);\n"
             "    const half4 c4 = half4(1.000000000, -1.106999993, 1.703999996, 0.000000000);\n"
             "    const half4 c5 = half4(1.000000000, 0.9559999704, 0.6209999919, 0.000000000);\n"
             "    const half4 c6 = half4(1.000000000, -0.2720000148, -0.6470000148, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r2.z = dot(r1.xyz, c0.xyz);\n"
             "    r2.x = r2.z*c0.w + c1.x;\n"
             "    r2.x = fmin(r2.x, c0.w);\n"
             "    r2.x = fmax(r2.x, c1.y);\n"
             "    r2.y = c1.x;\n"
             "    r3.xy = r2.xy + half2(hg_Params[3].xy);\n"
             "    r3.xy = r3.xy*half2(hg_Params[3].zw);\n"
             "    r2.y = (half) hg_Texture1.sample(hg_Sampler1, float2(r3.xy)).y;\n"
             "    r2.w = r2.y - r2.z;\n"
             "    r2.x = half(r2.z >= c1.z);\n"
             "    r2.y = -r2.x + c1.z;\n"
             "    r2.x = half(r2.z >= c1.y);\n"
             "    r2.x = r2.x*r2.y;\n"
             "    r2.x = r2.x*r2.w + r2.z;\n"
             "    r2.y = dot(r1.xyz, c2.xyz);\n"
             "    r2.z = dot(r1.xyz, c3.xyz);\n"
             "    r3.z = dot(r2.xyz, c4.xyz);\n"
             "    r3.x = dot(r2.xyz, c5.xyz);\n"
             "    r3.y = dot(r2.xyz, c6.xyz);\n"
             "    r1.xyz = fmax(r3.xyz, c1.yyy);\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2.xyz = fmin(r1.xyz, c6.xxx);\n"
             "    r1.xyz = mix(r1.xyz, r2.xyz, half3(hg_Params[2].xyz));\n"
             "    r1.w = r0.w;\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    output.color0 = mix(float4(r0), float4(r1), hg_Params[0]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=91631463:8d4b558a:5888d915:3c713925\n"
             "//SIG=00400000:00000001:00000001:00000003:0007:0004:0004:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000845\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.2989999950, 0.5870000124, 0.1140000001, 1023.000000);\n"
             "    const float4 c1 = float4(0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
             "    const float4 c2 = float4(0.5960000157, -0.2750000060, -0.3210000098, 0.000000000);\n"
             "    const float4 c3 = float4(0.2119999975, -0.5230000019, 0.3109999895, 0.000000000);\n"
             "    const float4 c4 = float4(1.000000000, -1.106999993, 1.703999996, 0.000000000);\n"
             "    const float4 c5 = float4(1.000000000, 0.9559999704, 0.6209999919, 0.000000000);\n"
             "    const float4 c6 = float4(1.000000000, -0.2720000148, -0.6470000148, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r2.z = dot(r1.xyz, c0.xyz);\n"
             "    r2.x = r2.z*c0.w + c1.x;\n"
             "    r2.x = fmin(r2.x, c0.w);\n"
             "    r2.x = fmax(r2.x, c1.y);\n"
             "    r2.y = c1.x;\n"
             "    r3.xy = r2.xy + hg_Params[3].xy;\n"
             "    r3.xy = r3.xy*hg_Params[3].zw;\n"
             "    r2.y = hg_Texture1.sample(hg_Sampler1, r3.xy).y;\n"
             "    r2.w = r2.y - r2.z;\n"
             "    r2.x = float(r2.z >= c1.z);\n"
             "    r2.y = -r2.x + c1.z;\n"
             "    r2.x = float(r2.z >= c1.y);\n"
             "    r2.x = r2.x*r2.y;\n"
             "    r2.x = r2.x*r2.w + r2.z;\n"
             "    r2.y = dot(r1.xyz, c2.xyz);\n"
             "    r2.z = dot(r1.xyz, c3.xyz);\n"
             "    r3.z = dot(r2.xyz, c4.xyz);\n"
             "    r3.x = dot(r2.xyz, c5.xyz);\n"
             "    r3.y = dot(r2.xyz, c6.xyz);\n"
             "    r1.xyz = fmax(r3.xyz, c1.yyy);\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, hg_Params[1].xyz);\n"
             "    r2.xyz = fmin(r1.xyz, c6.xxx);\n"
             "    r1.xyz = mix(r1.xyz, r2.xyz, hg_Params[2].xyz);\n"
             "    r1.w = r0.w;\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    output.color0 = mix(r0, r1, hg_Params[0]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c0f1da10:2155b02a:4564d4bb:68c0f8ec\n"
             "//SIG=00000000:00000001:00000001:00000000:0007:0004:0004:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000086a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.2989999950, 0.5870000124, 0.1140000001, 1023.000000);\n"
           "    const mediump vec4 c1 = vec4(0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
           "    const mediump vec4 c2 = vec4(0.5960000157, -0.2750000060, -0.3210000098, 0.000000000);\n"
           "    const mediump vec4 c3 = vec4(0.2119999975, -0.5230000019, 0.3109999895, 0.000000000);\n"
           "    const mediump vec4 c4 = vec4(1.000000000, -1.106999993, 1.703999996, 0.000000000);\n"
           "    const mediump vec4 c5 = vec4(1.000000000, 0.9559999704, 0.6209999919, 0.000000000);\n"
           "    const mediump vec4 c6 = vec4(1.000000000, -0.2720000148, -0.6470000148, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r2.z = dot(r1.xyz, c0.xyz);\n"
           "    r2.x = r2.z*c0.w + c1.x;\n"
           "    r2.x = min(r2.x, c0.w);\n"
           "    r2.x = max(r2.x, c1.y);\n"
           "    r2.y = c1.x;\n"
           "    r3.xy = r2.xy + hg_ProgramLocal3.xy;\n"
           "    r3.xy = r3.xy*hg_ProgramLocal3.zw;\n"
           "    r2.y = texture2D(hg_Texture1, r3.xy).y;\n"
           "    r2.w = r2.y - r2.z;\n"
           "    r2.x = float(r2.z >= c1.z);\n"
           "    r2.y = -r2.x + c1.z;\n"
           "    r2.x = float(r2.z >= c1.y);\n"
           "    r2.x = r2.x*r2.y;\n"
           "    r2.x = r2.x*r2.w + r2.z;\n"
           "    r2.y = dot(r1.xyz, c2.xyz);\n"
           "    r2.z = dot(r1.xyz, c3.xyz);\n"
           "    r3.z = dot(r2.xyz, c4.xyz);\n"
           "    r3.x = dot(r2.xyz, c5.xyz);\n"
           "    r3.y = dot(r2.xyz, c6.xyz);\n"
           "    r1.xyz = max(r3.xyz, c1.yyy);\n"
           "    r1.xyz = mix(r3.xyz, r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2.xyz = min(r1.xyz, c6.xxx);\n"
           "    r1.xyz = mix(r1.xyz, r2.xyz, hg_ProgramLocal2.xyz);\n"
           "    r1.w = r0.w;\n"
           "    r1.xyz = r1.xyz*r0.www;\n"
           "    gl_FragColor = mix(r0, r1, hg_ProgramLocal0);\n"
           "}\n"
           "//MD5=00b3f046:5e42b894:482ba6e9:d3e65d60\n"
           "//SIG=00000000:00000001:00000001:00000000:0007:0004:0004:0000:0000:0000:0000:0000:0001:02:0:1:0\n";
  }
}

void HgcContrastBezierLuma::InitProgramDescriptor(HgcContrastBezierLuma *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcContrastBezierLuma_hgc_visible", "//Metal1.0     \n//LEN=0000000702\n[[ visible ]] FragmentOut HgcContrastBezierLuma_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1)\n{\n    const float4 c0 = float4(0.2989999950, 0.5870000124, 0.1140000001, 1023.000000);\n"
    "    const float4 c1 = float4(0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
    "    const float4 c2 = float4(0.5960000157, -0.2750000060, -0.3210000098, 0.000000000);\n"
    "    const float4 c3 = float4(0.2119999975, -0.5230000019, 0.3109999895, 0.000000000);\n"
    "    const float4 c4 = float4(1.000000000, -1.106999993, 1.703999996, 0.000000000);\n"
    "    const float4 c5 = float4(1.000000000, 0.9559999704, 0.6209999919, 0.000000000);\n"
    "    const float4 c6 = float4(1.000000000, -0.2720000148, -0.6470000148, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r2.z = dot(r1.xyz, c0.xyz);\n"
    "    r2.x = r2.z*c0.w + c1.x;\n"
    "    r2.x = fmin(r2.x, c0.w);\n"
    "    r2.x = fmax(r2.x, c1.y);\n"
    "    r2.y = c1.x;\n"
    "    r3.xy = r2.xy + hg_Params[3].xy;\n"
    "    r3.xy = r3.xy*hg_Params[3].zw;\n"
    "    r2.y = hg_Texture1.sample(hg_Sampler1, r3.xy).y;\n"
    "    r2.w = r2.y - r2.z;\n"
    "    r2.x = float(r2.z >= c1.z);\n"
    "    r2.y = -r2.x + c1.z;\n"
    "    r2.x = float(r2.z >= c1.y);\n"
    "    r2.x = r2.x*r2.y;\n"
    "    r2.x = r2.x*r2.w + r2.z;\n"
    "    r2.y = dot(r1.xyz, c2.xyz);\n"
    "    r2.z = dot(r1.xyz, c3.xyz);\n"
    "    r3.z = dot(r2.xyz, c4.xyz);\n"
    "    r3.x = dot(r2.xyz, c5.xyz);\n"
    "    r3.y = dot(r2.xyz, c6.xyz);\n"
    "    r1.xyz = fmax(r3.xyz, c1.yyy);\n"
    "    r1.xyz = mix(r3.xyz, r1.xyz, hg_Params[1].xyz);\n"
    "    r2.xyz = fmin(r1.xyz, c6.xxx);\n"
    "    r1.xyz = mix(r1.xyz, r2.xyz, hg_Params[2].xyz);\n"
    "    r1.w = r0.w;\n"
    "    r1.xyz = r1.xyz*r0.www;\n"
    "    output.color0 = mix(r0, r1, hg_Params[0]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CD0084()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcContrastBezierLuma");
}

void sub_1B2CD0094(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CD0214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CD0264()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CD025CLL);
}

_QWORD *HgcContrastBezierLuma::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcContrastBezierLuma [hgc1]");
}

uint64_t HgcContrastBezierLuma::BindTexture(HgcContrastBezierLuma *this, HGHandler *a2, int a3)
{
  int v4;
  uint64_t result;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  if (a3 == 1)
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    {
      v8.n128_u32[0] = 1.0;
      v9.n128_u32[0] = 1.0;
    }
    else
    {
      v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v6.n128_f32[0] = (float)*((int *)a2 + 60);
    v7.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 3, v6, v7, v8, v9);
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    result = 0;
    if (v4)
      return result;
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  }
  return 0;
}

uint64_t HgcContrastBezierLuma::Bind(HgcContrastBezierLuma *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HgcContrastBezierLuma *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcContrastBezierLuma::RenderTile(HgcContrastBezierLuma *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  int v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t v48;
  uint64_t v49;
  float32x4_t v50;
  uint64_t v51;
  float32x4_t v52;
  uint64_t v53;
  int32x4_t v54;
  float32x2_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  int32x4_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  float32x4_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int8x16_t v126;
  float32x4_t v127;
  int8x16_t v128;
  float32x4_t v129;
  int8x16_t v130;
  float32x4_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  int8x16_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t *v150;
  uint64_t v151;
  int8x16_t v152;
  uint64_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  uint64_t v163;
  float32x4_t v164;
  uint64_t v165;
  int32x4_t v166;
  float32x2_t v167;
  float32x4_t *v168;
  float32x4_t v169;
  float32x4_t v170;
  int32x4_t v171;
  int8x16_t v172;
  float32x4_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  float32x4_t v178;
  int8x16_t v179;
  float32x4_t v180;
  int8x16_t v181;
  float32x4_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  float32x4_t v186;
  float32x4_t v187;
  int8x16_t v188;
  float32x4_t v189;
  float32x4_t v190;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcContrastBezierLuma *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 10);
    v13 = 16 * *((int *)a2 + 6);
    v14 = 16 * *((int *)a2 + 22);
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    do
    {
      if (v10 < 3)
      {
        LODWORD(v151) = 0;
      }
      else
      {
        v16 = 0;
        v17 = 0;
        do
        {
          v18 = *(int8x16_t *)(v12 + v16);
          v19 = *(int8x16_t *)(v12 + v16 + 16);
          v20 = *(int8x16_t *)(v12 + v16 + 32);
          v21 = *((_QWORD *)this + 51);
          v22 = *(float32x4_t *)(v21 + 48);
          v23 = *(float32x4_t *)(v21 + 64);
          v24 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3), v22);
          v25 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3), v22);
          v26 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3), v22);
          v27 = vmulq_f32(vrecpeq_f32(v24), v23);
          v28 = vmulq_f32(vrecpeq_f32(v25), v23);
          v29 = vmulq_f32(vrecpeq_f32(v26), v23);
          v30 = vmulq_f32((float32x4_t)v18, vmulq_f32(v27, vrecpsq_f32(v27, v24)));
          v31 = vmulq_f32((float32x4_t)v19, vmulq_f32(v28, vrecpsq_f32(v28, v25)));
          v32 = vmulq_f32((float32x4_t)v20, vmulq_f32(v29, vrecpsq_f32(v29, v26)));
          v34 = *(float32x4_t *)(v21 + 80);
          v33 = *(int8x16_t *)(v21 + 96);
          v35 = (int8x16_t)vmulq_f32(v30, v34);
          v36 = (int8x16_t)vmulq_f32(v31, v34);
          v37 = (int8x16_t)vmulq_f32(v34, v32);
          v38 = (int8x16_t)vaddq_f32((float32x4_t)v35, vaddq_f32((float32x4_t)vextq_s8(v35, v35, 8uLL), (float32x4_t)vextq_s8(v35, v35, 0xCuLL)));
          v39 = (int8x16_t)vaddq_f32((float32x4_t)v36, vaddq_f32((float32x4_t)vextq_s8(v36, v36, 8uLL), (float32x4_t)vextq_s8(v36, v36, 0xCuLL)));
          v40 = (int8x16_t)vaddq_f32((float32x4_t)v37, vaddq_f32((float32x4_t)vextq_s8(v37, v37, 8uLL), (float32x4_t)vextq_s8(v37, v37, 0xCuLL)));
          v42 = *(float32x4_t *)(v21 + 112);
          v41 = *(float32x4_t *)(v21 + 128);
          v43.i64[0] = vaddq_f32((float32x4_t)v33, vmulq_f32(v42, (float32x4_t)vdupq_laneq_s64((int64x2_t)v38, 1))).u64[0];
          v44.i64[0] = vaddq_f32((float32x4_t)v33, vmulq_f32(v42, (float32x4_t)vdupq_laneq_s64((int64x2_t)v39, 1))).u64[0];
          v45.i64[0] = vaddq_f32((float32x4_t)v33, vmulq_f32(v42, (float32x4_t)vdupq_laneq_s64((int64x2_t)v40, 1))).u64[0];
          v46 = vextq_s8(v38, v38, 8uLL).u64[0];
          v43.i64[1] = v38.i64[1];
          v47 = vextq_s8(v39, v39, 8uLL).u64[0];
          v44.i64[1] = v39.i64[1];
          v45.i64[1] = v40.i64[1];
          v43.i64[0] = vminq_f32(v43, v42).u64[0];
          v44.i64[0] = vminq_f32(v44, v42).u64[0];
          v43.i64[1] = v38.i64[1];
          v45.i64[0] = vminq_f32(v45, v42).u64[0];
          v44.i64[1] = v39.i64[1];
          v45.i64[1] = v40.i64[1];
          v43.i32[0] = vmaxq_f32(v43, v41).u32[0];
          v48.i32[0] = vmaxq_f32(v44, v41).u32[0];
          v50.i32[0] = vmaxq_f32(v45, v41).u32[0];
          v43.i64[1] = v38.i64[1];
          v48.i64[1] = v39.i64[1];
          v50.i64[1] = v40.i64[1];
          v43.i32[1] = 0.5;
          v48.i32[1] = 0.5;
          v49 = vextq_s8(v40, v40, 8uLL).u64[0];
          v50.i32[1] = 0.5;
          v51 = *((int *)a2 + 26);
          v52 = vsubq_f32(v43, (float32x4_t)v9);
          v53 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v54 = vaddq_s32(vcvtq_s32_f32(v52), vcltzq_f32(v52));
            v55 = (float32x2_t)vsubq_f32(v52, vcvtq_f32_s32(v54)).u64[0];
            v56 = (float32x4_t *)(v53 + 16 * (v54.i32[0] + v54.i32[1] * (int)v51));
            v57 = vaddq_f32(*v56, vmulq_n_f32(vsubq_f32(v56[1], *v56), v55.f32[0]));
            v52.i64[0] = vaddq_f32(v57, vmulq_lane_f32(vsubq_f32(vaddq_f32(v56[v51], vmulq_n_f32(vsubq_f32(v56[(int)v51 + 1], v56[v51]), v55.f32[0])), v57), v55, 1)).u64[0];
            v61 = vsubq_f32(v48, (float32x4_t)v9);
            v58 = vaddq_s32(vcvtq_s32_f32(v61), vcltzq_f32(v61));
            v61.i64[0] = vsubq_f32(v61, vcvtq_f32_s32(v58)).u64[0];
            v59 = (float32x4_t *)(v53 + 16 * (v58.i32[0] + v58.i32[1] * (int)v51));
            v60 = vaddq_f32(*v59, vmulq_n_f32(vsubq_f32(v59[1], *v59), v61.f32[0]));
            v61.i64[0] = vaddq_f32(v60, vmulq_lane_f32(vsubq_f32(vaddq_f32(v59[v51], vmulq_n_f32(vsubq_f32(v59[(int)v51 + 1], v59[v51]), v61.f32[0])), v60), *(float32x2_t *)v61.f32, 1)).u64[0];
            v62 = vsubq_f32(v50, (float32x4_t)v9);
            v63 = vaddq_s32(vcvtq_s32_f32(v62), vcltzq_f32(v62));
            v62.i64[0] = vsubq_f32(v62, vcvtq_f32_s32(v63)).u64[0];
            v64 = (float32x4_t *)(v53 + 16 * (v63.i32[0] + v63.i32[1] * (int)v51));
            v65 = vaddq_f32(*v64, vmulq_n_f32(vsubq_f32(v64[1], *v64), v62.f32[0]));
            v66.i64[0] = vaddq_f32(v65, vmulq_lane_f32(vsubq_f32(vaddq_f32(v64[v51], vmulq_n_f32(vsubq_f32(v64[(int)v51 + 1], v64[v51]), v62.f32[0])), v65), *(float32x2_t *)v62.f32, 1)).u64[0];
          }
          else
          {
            v67 = vaddq_f32(v52, v15);
            v68 = vcvtq_s32_f32(v67);
            v67.i64[0] = vaddq_s32(v68, vcgtq_f32(vcvtq_f32_s32(v68), v67)).u64[0];
            v52 = *(float32x4_t *)(v53 + 16 * (v67.i32[0] + v67.i32[1] * (int)v51));
            v69 = vaddq_f32(vsubq_f32(v48, (float32x4_t)v9), v15);
            v70 = vcvtq_s32_f32(v69);
            v69.i64[0] = vaddq_s32(v70, vcgtq_f32(vcvtq_f32_s32(v70), v69)).u64[0];
            v61 = *(float32x4_t *)(v53 + 16 * (v69.i32[0] + v69.i32[1] * (int)v51));
            v71 = vaddq_f32(vsubq_f32(v50, (float32x4_t)v9), v15);
            v72 = vcvtq_s32_f32(v71);
            v71.i64[0] = vaddq_s32(v72, vcgtq_f32(vcvtq_f32_s32(v72), v71)).u64[0];
            v66 = *(int32x4_t *)(v53 + 16 * (v71.i32[0] + v71.i32[1] * (int)v51));
          }
          v73.i64[0] = v52.i64[0];
          v73.i64[1] = v46;
          v74.i64[0] = v61.i64[0];
          v74.i64[1] = v47;
          v75.i64[0] = v66.i64[0];
          v75.i64[1] = v49;
          v76.i64[0] = v46;
          v76.i64[1] = v52.i64[0];
          v77.i64[0] = v47;
          v77.i64[1] = v61.i64[0];
          v78.i64[0] = v49;
          v78.i64[1] = v66.i64[0];
          v52.i64[1] = v46;
          v61.i64[1] = v47;
          v66.i64[1] = v49;
          v79 = (int8x16_t)vsubq_f32(v77, (float32x4_t)vrev64q_s32((int32x4_t)v61));
          v81 = *(int8x16_t *)(v21 + 144);
          v80 = *(int8x16_t *)(v21 + 160);
          v82 = vbslq_s8(v81, v73, (int8x16_t)vsubq_f32(v76, (float32x4_t)vrev64q_s32((int32x4_t)v52)));
          v83 = vbslq_s8(v81, v74, v79);
          v84 = vbslq_s8(v81, v75, (int8x16_t)vsubq_f32(v78, (float32x4_t)vrev64q_s32(v66)));
          v85 = (int8x16_t)vcgeq_f32((float32x4_t)v82, (float32x4_t)v33);
          v86 = (int8x16_t)vcgeq_f32((float32x4_t)v83, (float32x4_t)v33);
          v87 = (int8x16_t)vcgeq_f32((float32x4_t)v84, (float32x4_t)v33);
          v88 = (float32x4_t)vextq_s8(v85, v85, 8uLL);
          v89 = (float32x4_t)vextq_s8(v33, v33, 8uLL);
          v90 = (float32x4_t)vextq_s8(v86, v86, 8uLL);
          *(int32x2_t *)v88.f32 = vrev64_s32((int32x2_t)vand_s8(*(int8x8_t *)v89.f32, *(int8x8_t *)v88.f32));
          *(int32x2_t *)v90.f32 = vrev64_s32((int32x2_t)vand_s8(*(int8x8_t *)v89.f32, *(int8x8_t *)v90.f32));
          *(int32x2_t *)v89.f32 = vrev64_s32((int32x2_t)vand_s8(*(int8x8_t *)v89.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)));
          v91 = (int8x16_t)vsubq_f32(v41, v88);
          v92 = (int8x16_t)vsubq_f32(v41, v90);
          v93 = (int8x16_t)vsubq_f32(v41, v89);
          v94 = (float32x4_t)vextq_s8(v82, v91, 8uLL);
          v91.i64[1] = v82.i64[1];
          v95 = (float32x4_t)vextq_s8(v83, v92, 8uLL);
          v92.i64[1] = v83.i64[1];
          v96 = (float32x4_t)vextq_s8(v84, v93, 8uLL);
          v93.i64[1] = v84.i64[1];
          v97 = (int8x16_t)vcgeq_f32(v94, v41);
          v98 = (int8x16_t)vcgeq_f32(v95, v41);
          v99 = (int8x16_t)vcgeq_f32(v96, v41);
          v100 = vandq_s8(v80, v97);
          v101 = vandq_s8(v80, v98);
          v102 = *(int8x16_t *)(v21 + 176);
          v103 = *(float32x4_t *)(v21 + 192);
          v104 = (float32x4_t)vbslq_s8(v102, v100, v91);
          v105 = (float32x4_t)vbslq_s8(v102, v101, v92);
          v106 = (float32x4_t)vbslq_s8(v102, vandq_s8(v80, v99), v93);
          v107 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v104, 1), vmulq_laneq_f32(vmulq_lane_f32(v104, *(float32x2_t *)v104.f32, 1), v104, 3));
          v108 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v105, 1), vmulq_laneq_f32(vmulq_lane_f32(v105, *(float32x2_t *)v105.f32, 1), v105, 3));
          v109 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v106, 1), vmulq_laneq_f32(vmulq_lane_f32(v106, *(float32x2_t *)v106.f32, 1), v106, 3));
          v110 = (int8x16_t)vmulq_f32(v30, v103);
          v111 = (int8x16_t)vmulq_f32(v31, v103);
          v112 = (int8x16_t)vmulq_f32(v32, v103);
          v110.i64[0] = vbslq_s8(v102, v107, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v110, v9, 4uLL), vaddq_f32((float32x4_t)v110, (float32x4_t)vrev64q_s32((int32x4_t)v110)))).u64[0];
          v107.i64[0] = vbslq_s8(v102, v108, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v111, v9, 4uLL), vaddq_f32((float32x4_t)v111, (float32x4_t)vrev64q_s32((int32x4_t)v111)))).u64[0];
          v108.i64[0] = vbslq_s8(v102, v109, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v112, v9, 4uLL), vaddq_f32((float32x4_t)v112, (float32x4_t)vrev64q_s32((int32x4_t)v112)))).u64[0];
          v113 = *(float32x4_t *)(v21 + 208);
          v114 = *(float32x4_t *)(v21 + 224);
          v115 = (int8x16_t)vmulq_f32(v30, v113);
          v116 = (int8x16_t)vmulq_f32(v31, v113);
          v117 = (int8x16_t)vmulq_f32(v32, v113);
          v110.i64[1] = vaddq_f32(*(float32x4_t *)&v115, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v115, 0), (float32x4_t)vextq_s8(v9, v115, 0xCuLL))).i64[1];
          v107.i64[1] = vaddq_f32(*(float32x4_t *)&v116, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v116, 0), (float32x4_t)vextq_s8(v9, v116, 0xCuLL))).i64[1];
          v108.i64[1] = vaddq_f32(*(float32x4_t *)&v117, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v117, 0), (float32x4_t)vextq_s8(v9, v117, 0xCuLL))).i64[1];
          v118 = (int8x16_t)vmulq_f32((float32x4_t)v80, (float32x4_t)v110);
          v119 = (int8x16_t)vmulq_f32((float32x4_t)v80, (float32x4_t)v107);
          v120 = (int8x16_t)vmulq_f32((float32x4_t)v80, (float32x4_t)v108);
          v121 = vmulq_f32(v114, (float32x4_t)v110);
          v122 = vmulq_f32(v114, (float32x4_t)v107);
          v123 = vmulq_f32(v114, (float32x4_t)v108);
          v124.i64[0] = vrev64q_s32((int32x4_t)v121).u64[0];
          v75.i64[0] = vrev64q_s32((int32x4_t)v122).u64[0];
          v76.i64[0] = vrev64q_s32((int32x4_t)v123).u64[0];
          v124.i64[1] = vextq_s8(v9, v118, 0xCuLL).i64[1];
          v125 = (float32x4_t)vzip2q_s64((int64x2_t)v121, (int64x2_t)v118);
          v121.i64[1] = v118.i64[0];
          v126 = (int8x16_t)vaddq_f32(v125, vaddq_f32(v121, v124));
          v75.i64[1] = vextq_s8(v9, v119, 0xCuLL).i64[1];
          v127 = (float32x4_t)vzip2q_s64((int64x2_t)v122, (int64x2_t)v119);
          v122.i64[1] = v119.i64[0];
          v128 = (int8x16_t)vaddq_f32(v127, vaddq_f32(v122, (float32x4_t)v75));
          v76.i64[1] = vextq_s8(v9, v120, 0xCuLL).i64[1];
          v129 = (float32x4_t)vzip2q_s64((int64x2_t)v123, (int64x2_t)v120);
          v123.i64[1] = v120.i64[0];
          v130 = (int8x16_t)vaddq_f32(v129, vaddq_f32(v123, v76));
          v131 = *(float32x4_t *)(v21 + 240);
          v132 = *(int8x16_t *)(v21 + 256);
          v133 = (int8x16_t)vmulq_f32(v131, (float32x4_t)v110);
          v134 = (int8x16_t)vmulq_f32(v131, (float32x4_t)v107);
          v135 = (int8x16_t)vmulq_f32(v131, (float32x4_t)v108);
          v136 = (float32x4_t)vbslq_s8(v132, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v133, v133, 4uLL), vaddq_f32((float32x4_t)v133, (float32x4_t)vrev64q_s32((int32x4_t)v133))), v126);
          v137 = (float32x4_t)vbslq_s8(v132, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v134, v134, 4uLL), vaddq_f32((float32x4_t)v134, (float32x4_t)vrev64q_s32((int32x4_t)v134))), v128);
          v138 = (float32x4_t)vbslq_s8(v132, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v135, v135, 4uLL), vaddq_f32((float32x4_t)v135, (float32x4_t)vrev64q_s32((int32x4_t)v135))), v130);
          v139 = *(float32x4_t *)(v21 + 272);
          v140 = *(float32x4_t *)(v21 + 288);
          v141 = *(float32x4_t *)(v21 + 16);
          v142 = vaddq_f32(vmulq_f32(v141, vsubq_f32(vmaxq_f32(v136, v139), v136)), v136);
          v143 = vaddq_f32(vmulq_f32(v141, vsubq_f32(vmaxq_f32(v137, v139), v137)), v137);
          v144 = vaddq_f32(vmulq_f32(v141, vsubq_f32(vmaxq_f32(v138, v139), v138)), v138);
          v145 = *(float32x4_t *)(v21 + 32);
          v146 = *(int8x16_t *)(v21 + 304);
          v147 = vaddq_f32((float32x4_t)v18, vmulq_f32(*(float32x4_t *)v21, vsubq_f32((float32x4_t)vbslq_s8(v146, v18, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v146, v18, (int8x16_t)vaddq_f32(v142, vmulq_f32(v145, vsubq_f32(vminq_f32(v142, v140), v142)))), (float32x4_t)v18, 3)), (float32x4_t)v18)));
          v148 = vaddq_f32((float32x4_t)v19, vmulq_f32(*(float32x4_t *)v21, vsubq_f32((float32x4_t)vbslq_s8(v146, v19, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v146, v19, (int8x16_t)vaddq_f32(v143, vmulq_f32(v145, vsubq_f32(vminq_f32(v143, v140), v143)))), (float32x4_t)v19, 3)), (float32x4_t)v19)));
          v149 = vaddq_f32((float32x4_t)v20, vmulq_f32(*(float32x4_t *)v21, vsubq_f32((float32x4_t)vbslq_s8(v146, v20, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v146, v20, (int8x16_t)vaddq_f32(v144, vmulq_f32(v145, vsubq_f32(vminq_f32(v144, v140), v144)))), (float32x4_t)v20, 3)), (float32x4_t)v20)));
          v150 = (float32x4_t *)(v11 + v16);
          *v150 = v147;
          v150[1] = v148;
          v150[2] = v149;
          v17 -= 3;
          v16 += 48;
        }
        while (v10 + v17 > 2);
        LODWORD(v151) = -v17;
      }
      if ((int)v151 < v10)
      {
        v151 = v151;
        do
        {
          v152 = *(int8x16_t *)(v12 + 16 * v151);
          v153 = *((_QWORD *)this + 51);
          v154 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v152, 3), *(float32x4_t *)(v153 + 48));
          v155 = vmulq_f32(vrecpeq_f32(v154), *(float32x4_t *)(v153 + 64));
          v156 = vmulq_f32((float32x4_t)v152, vmulq_f32(v155, vrecpsq_f32(v155, v154)));
          v157 = *(int8x16_t *)(v153 + 96);
          v158 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v153 + 80), v156);
          v159 = (int8x16_t)vaddq_f32((float32x4_t)v158, vaddq_f32((float32x4_t)vextq_s8(v158, v158, 8uLL), (float32x4_t)vextq_s8(v158, v158, 0xCuLL)));
          v161 = *(float32x4_t *)(v153 + 112);
          v160 = *(float32x4_t *)(v153 + 128);
          v162.i64[0] = vaddq_f32((float32x4_t)v157, vmulq_f32(v161, (float32x4_t)vdupq_laneq_s64((int64x2_t)v159, 1))).u64[0];
          v162.i64[1] = v159.i64[1];
          v162.i64[0] = vminq_f32(v162, v161).u64[0];
          v162.i64[1] = v159.i64[1];
          v162.i32[0] = vmaxq_f32(v162, v160).u32[0];
          v162.i64[1] = v159.i64[1];
          v162.i32[1] = 0.5;
          v163 = *((int *)a2 + 26);
          v164 = vsubq_f32(v162, (float32x4_t)v9);
          v165 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v166 = vaddq_s32(vcvtq_s32_f32(v164), vcltzq_f32(v164));
            v167 = (float32x2_t)vsubq_f32(v164, vcvtq_f32_s32(v166)).u64[0];
            v168 = (float32x4_t *)(v165 + 16 * (v166.i32[0] + v166.i32[1] * (int)v163));
            v169 = vaddq_f32(*v168, vmulq_n_f32(vsubq_f32(v168[1], *v168), v167.f32[0]));
            v164.i64[0] = vaddq_f32(v169, vmulq_lane_f32(vsubq_f32(vaddq_f32(v168[v163], vmulq_n_f32(vsubq_f32(v168[(int)v163 + 1], v168[v163]), v167.f32[0])), v169), v167, 1)).u64[0];
          }
          else
          {
            v170 = vaddq_f32(v164, v15);
            v171 = vcvtq_s32_f32(v170);
            v170.i64[0] = vaddq_s32(v171, vcgtq_f32(vcvtq_f32_s32(v171), v170)).u64[0];
            v164 = *(float32x4_t *)(v165 + 16 * (v170.i32[0] + v170.i32[1] * (int)v163));
          }
          v172.i64[0] = v164.i64[0];
          v172.i64[1] = vextq_s8(v159, v159, 8uLL).u64[0];
          v173.i64[0] = v172.i64[1];
          v173.i64[1] = v164.i64[0];
          v164.i64[1] = v172.i64[1];
          v174 = (int8x16_t)vsubq_f32(v173, (float32x4_t)vrev64q_s32((int32x4_t)v164));
          v175 = *(int8x16_t *)(v153 + 160);
          v176 = vbslq_s8(*(int8x16_t *)(v153 + 144), v172, v174);
          v177 = (int8x16_t)vcgeq_f32((float32x4_t)v176, (float32x4_t)v157);
          v178 = (float32x4_t)vextq_s8(v157, v157, 8uLL);
          *(int32x2_t *)v178.f32 = vrev64_s32((int32x2_t)vand_s8(*(int8x8_t *)v178.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v177, v177, 8uLL)));
          v179 = (int8x16_t)vsubq_f32(v160, v178);
          v180 = (float32x4_t)vextq_s8(v176, v179, 8uLL);
          v179.i64[1] = v176.i64[1];
          v181 = *(int8x16_t *)(v153 + 176);
          v182 = (float32x4_t)vbslq_s8(v181, vandq_s8(v175, (int8x16_t)vcgeq_f32(v180, v160)), v179);
          v183 = (int8x16_t)vmulq_f32(v156, *(float32x4_t *)(v153 + 192));
          v182.i64[0] = vbslq_s8(v181, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v182, 1), vmulq_laneq_f32(vmulq_lane_f32(v182, *(float32x2_t *)v182.f32, 1), v182, 3)), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v183, v9, 4uLL), vaddq_f32((float32x4_t)v183, (float32x4_t)vrev64q_s32((int32x4_t)v183)))).u64[0];
          v184 = (int8x16_t)vmulq_f32(v156, *(float32x4_t *)(v153 + 208));
          v182.i64[1] = vaddq_f32(*(float32x4_t *)&v184, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v184, 0), (float32x4_t)vextq_s8(v9, v184, 0xCuLL))).i64[1];
          v185 = (int8x16_t)vmulq_f32((float32x4_t)v175, v182);
          v186 = vmulq_f32(*(float32x4_t *)(v153 + 224), v182);
          v180.i64[0] = vrev64q_s32((int32x4_t)v186).u64[0];
          v180.i64[1] = vextq_s8(v9, v185, 0xCuLL).i64[1];
          v187 = (float32x4_t)vzip2q_s64((int64x2_t)v186, (int64x2_t)v185);
          v186.i64[1] = v185.i64[0];
          v188 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v153 + 240), v182);
          v189 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v153 + 256), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v188, v188, 4uLL), vaddq_f32((float32x4_t)v188, (float32x4_t)vrev64q_s32((int32x4_t)v188))), (int8x16_t)vaddq_f32(v187, vaddq_f32(v186, v180)));
          v190 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v153 + 16), vsubq_f32(vmaxq_f32(v189, *(float32x4_t *)(v153 + 272)), v189)), v189);
          *(float32x4_t *)(v11 + 16 * v151++) = vaddq_f32((float32x4_t)v152, vmulq_f32(*(float32x4_t *)v153, vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v153 + 304), v152, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v153 + 304), v152, (int8x16_t)vaddq_f32(v190, vmulq_f32(*(float32x4_t *)(v153 + 32), vsubq_f32(vminq_f32(v190, *(float32x4_t *)(v153 + 288)), v190)))), (float32x4_t)v152, 3)), (float32x4_t)v152)));
        }
        while (v151 < v10);
      }
      ++v8;
      v11 += v13;
      v12 += v14;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcContrastBezierLuma::GetDOD(HgcContrastBezierLuma *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 1)
  {
    if ((*(int (**)(HgcContrastBezierLuma *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v5, v4, v7);
    }
    v6 = &HGRectInfinite;
    return *(_QWORD *)v6;
  }
  if (a3)
  {
    v6 = &HGRectNull;
    return *(_QWORD *)v6;
  }
  return v5;
}

uint64_t HgcContrastBezierLuma::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, 1u);
    DOD = HGRenderer::GetDOD(a2, Input);
    v9 = v8;
    if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      return HGRectGrow(DOD, v9, v10);
    }
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)&a4.var0;
  }
  return DOD;
}

void HgcContrastBezierLuma::HgcContrastBezierLuma(HgcContrastBezierLuma *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6568348;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(int32x4_t *)(v3 + 48) = vdupq_n_s32(0x358637BDu);
  *(_OWORD *)(v3 + 64) = xmmword_1B3051BC0;
  *(_OWORD *)(v3 + 80) = xmmword_1B30522A0;
  *(_OWORD *)(v3 + 96) = xmmword_1B3558100;
  *(_OWORD *)(v3 + 112) = xmmword_1B3558150;
  *(_OWORD *)(v3 + 128) = xmmword_1B3558110;
  *(_OWORD *)(v3 + 144) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 160) = xmmword_1B3558160;
  *(_OWORD *)(v3 + 176) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 192) = xmmword_1B3558120;
  *(_OWORD *)(v3 + 208) = xmmword_1B3558130;
  *(_OWORD *)(v3 + 224) = xmmword_1B3558170;
  *(_OWORD *)(v3 + 240) = xmmword_1B3558140;
  *(_OWORD *)(v3 + 256) = xmmword_1B3050FF0;
  *(_QWORD *)(v3 + 272) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 288) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 304) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcContrastBezierLuma *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CD0FB4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcContrastBezierLuma::~HgcContrastBezierLuma(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6568348;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C409BD2D9E4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcContrastBezierLuma::~HgcContrastBezierLuma(this);
  HGObject::operator delete(v1);
}

uint64_t HgcContrastBezierLuma::SetParameter(HgcContrastBezierLuma *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;
  int32x4_t v10;
  uint64_t v11;
  int32x4_t v12;

  switch((_DWORD)a2)
  {
    case 2:
      v9 = *((_QWORD *)this + 51);
      if (*(float *)(v9 + 32) != a3.n128_f32[0]
        || *(float *)(v9 + 36) != a3.n128_f32[0]
        || *(float *)(v9 + 40) != a3.n128_f32[0]
        || *(float *)(v9 + 44) != 0.0)
      {
        v10 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
        v10.i32[2] = a3.n128_u32[0];
        a3.n128_f32[1] = a4;
        *(int32x4_t *)(v9 + 32) = v10;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        *(__n128 *)(v9 + 352) = a3;
        goto LABEL_19;
      }
      return 0;
    case 1:
      v11 = *((_QWORD *)this + 51);
      if (*(float *)(v11 + 16) != a3.n128_f32[0]
        || *(float *)(v11 + 20) != a3.n128_f32[0]
        || *(float *)(v11 + 24) != a3.n128_f32[0]
        || *(float *)(v11 + 28) != 0.0)
      {
        v12 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
        v12.i32[2] = a3.n128_u32[0];
        a3.n128_f32[1] = a4;
        *(int32x4_t *)(v11 + 16) = v12;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        *(__n128 *)(v11 + 336) = a3;
        goto LABEL_19;
      }
      return 0;
    case 0:
      v7 = *((_QWORD *)this + 51);
      if (*(float *)v7 != a3.n128_f32[0]
        || *(float *)(v7 + 4) != a3.n128_f32[0]
        || *(float *)(v7 + 8) != a3.n128_f32[0]
        || *(float *)(v7 + 12) != a3.n128_f32[0])
      {
        v8 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
        a3.n128_f32[1] = a4;
        *(int32x4_t *)v7 = v8;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        *(__n128 *)(v7 + 320) = a3;
LABEL_19:
        HGNode::ClearBits((HGNode *)this, a2, a7);
        return 1;
      }
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcContrastBezierLuma::GetParameter(HgcContrastBezierLuma *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  uint64_t result;

  switch(a2)
  {
    case 2:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[88];
      a3[1] = v5[89];
      a3[2] = v5[90];
      v4 = v5 + 91;
      goto LABEL_7;
    case 1:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[84];
      a3[1] = v6[85];
      a3[2] = v6[86];
      v4 = v6 + 87;
      goto LABEL_7;
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[80];
      a3[1] = v3[81];
      a3[2] = v3[82];
      v4 = v3 + 83;
LABEL_7:
      result = 0;
      a3[3] = *v4;
      return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcContrastBezierRGB::GetProgram(HgcContrastBezierRGB *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000008ca\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1023.000000, 0.5000000000, 0.000000000, 1.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r2.x = r1.z*c0.x + c0.y;\n"
             "    r2.x = fmin(r2.x, c0.x);\n"
             "    r2.x = fmax(r2.x, c0.z);\n"
             "    r2.y = c0.y;\n"
             "    r2.xy = r2.xy + half2(hg_Params[3].xy);\n"
             "    r2.xy = r2.xy*half2(hg_Params[3].zw);\n"
             "    r2.y = (half) hg_Texture1.sample(hg_Sampler1, float2(r2.xy)).y;\n"
             "    r2.x = half(r1.z >= c0.w);\n"
             "    r2.z = -r2.x + c0.w;\n"
             "    r2.x = half(r1.z >= c0.z);\n"
             "    r2.x = r2.x*r2.z;\n"
             "    r2.z = mix(r1.z, r2.y, r2.x);\n"
             "    r2.y = half(r1.x >= c0.w);\n"
             "    r2.w = -r2.y + c0.w;\n"
             "    r2.y = half(r1.x >= c0.z);\n"
             "    r2.w = r2.y*r2.w;\n"
             "    r2.x = r1.x*c0.x + c0.y;\n"
             "    r2.x = fmin(r2.x, c0.x);\n"
             "    r2.x = fmax(r2.x, c0.z);\n"
             "    r2.y = c0.y;\n"
             "    r3.xy = r2.xy + half2(hg_Params[3].xy);\n"
             "    r3.xy = r3.xy*half2(hg_Params[3].zw);\n"
             "    r2.y = (half) hg_Texture1.sample(hg_Sampler1, float2(r3.xy)).y;\n"
             "    r1.z = r2.y - r1.x;\n"
             "    r2.y = r1.y*c0.x + c0.y;\n"
             "    r2.x = r2.w*r1.z + r1.x;\n"
             "    r1.x = half(r1.y < c0.w);\n"
             "    r2.y = fmin(r2.y, c0.x);\n"
             "    r2.w = half(r1.y >= c0.z);\n"
             "    r2.w = r2.w*r1.x;\n"
             "    r1.z = fmax(r2.y, c0.z);\n"
             "    r1.w = c0.y;\n"
             "    r3.xy = r1.zw + half2(hg_Params[3].xy);\n"
             "    r3.xy = r3.xy*half2(hg_Params[3].zw);\n"
             "    r2.y = (half) hg_Texture1.sample(hg_Sampler1, float2(r3.xy)).y;\n"
             "    r2.y = mix(r1.y, r2.y, r2.w);\n"
             "    r3.xyz = fmax(r2.xyz, c0.zzz);\n"
             "    r2.xyz = mix(r2.xyz, r3.xyz, half3(hg_Params[1].xyz));\n"
             "    r1.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = mix(r2.xyz, r1.xyz, half3(hg_Params[2].xyz));\n"
             "    r2.w = r0.w;\n"
             "    r2.xyz = r2.xyz*r0.www;\n"
             "    output.color0 = mix(float4(r0), float4(r2), hg_Params[0]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=da45afb2:5fa4481c:eb49d25b:331db194\n"
             "//SIG=00400000:00000001:00000001:00000003:0001:0004:0004:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000858\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1023.000000, 0.5000000000, 0.000000000, 1.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r2.x = r1.z*c0.x + c0.y;\n"
             "    r2.x = fmin(r2.x, c0.x);\n"
             "    r2.x = fmax(r2.x, c0.z);\n"
             "    r2.y = c0.y;\n"
             "    r2.xy = r2.xy + hg_Params[3].xy;\n"
             "    r2.xy = r2.xy*hg_Params[3].zw;\n"
             "    r2.y = hg_Texture1.sample(hg_Sampler1, r2.xy).y;\n"
             "    r2.x = float(r1.z >= c0.w);\n"
             "    r2.z = -r2.x + c0.w;\n"
             "    r2.x = float(r1.z >= c0.z);\n"
             "    r2.x = r2.x*r2.z;\n"
             "    r2.z = mix(r1.z, r2.y, r2.x);\n"
             "    r2.y = float(r1.x >= c0.w);\n"
             "    r2.w = -r2.y + c0.w;\n"
             "    r2.y = float(r1.x >= c0.z);\n"
             "    r2.w = r2.y*r2.w;\n"
             "    r2.x = r1.x*c0.x + c0.y;\n"
             "    r2.x = fmin(r2.x, c0.x);\n"
             "    r2.x = fmax(r2.x, c0.z);\n"
             "    r2.y = c0.y;\n"
             "    r3.xy = r2.xy + hg_Params[3].xy;\n"
             "    r3.xy = r3.xy*hg_Params[3].zw;\n"
             "    r2.y = hg_Texture1.sample(hg_Sampler1, r3.xy).y;\n"
             "    r1.z = r2.y - r1.x;\n"
             "    r2.y = r1.y*c0.x + c0.y;\n"
             "    r2.x = r2.w*r1.z + r1.x;\n"
             "    r1.x = float(r1.y < c0.w);\n"
             "    r2.y = fmin(r2.y, c0.x);\n"
             "    r2.w = float(r1.y >= c0.z);\n"
             "    r2.w = r2.w*r1.x;\n"
             "    r1.z = fmax(r2.y, c0.z);\n"
             "    r1.w = c0.y;\n"
             "    r3.xy = r1.zw + hg_Params[3].xy;\n"
             "    r3.xy = r3.xy*hg_Params[3].zw;\n"
             "    r2.y = hg_Texture1.sample(hg_Sampler1, r3.xy).y;\n"
             "    r2.y = mix(r1.y, r2.y, r2.w);\n"
             "    r3.xyz = fmax(r2.xyz, c0.zzz);\n"
             "    r2.xyz = mix(r2.xyz, r3.xyz, hg_Params[1].xyz);\n"
             "    r1.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = mix(r2.xyz, r1.xyz, hg_Params[2].xyz);\n"
             "    r2.w = r0.w;\n"
             "    r2.xyz = r2.xyz*r0.www;\n"
             "    output.color0 = mix(r0, r2, hg_Params[0]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=d682f72a:a793c7a2:3747d05e:5dd2f5b4\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0004:0004:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000085f\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1023.000000, 0.5000000000, 0.000000000, 1.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r2.x = r1.z*c0.x + c0.y;\n"
           "    r2.x = min(r2.x, c0.x);\n"
           "    r2.x = max(r2.x, c0.z);\n"
           "    r2.y = c0.y;\n"
           "    r2.xy = r2.xy + hg_ProgramLocal3.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal3.zw;\n"
           "    r2.y = texture2D(hg_Texture1, r2.xy).y;\n"
           "    r2.x = float(r1.z >= c0.w);\n"
           "    r2.z = -r2.x + c0.w;\n"
           "    r2.x = float(r1.z >= c0.z);\n"
           "    r2.x = r2.x*r2.z;\n"
           "    r2.z = mix(r1.z, r2.y, r2.x);\n"
           "    r2.y = float(r1.x >= c0.w);\n"
           "    r2.w = -r2.y + c0.w;\n"
           "    r2.y = float(r1.x >= c0.z);\n"
           "    r2.w = r2.y*r2.w;\n"
           "    r2.x = r1.x*c0.x + c0.y;\n"
           "    r2.x = min(r2.x, c0.x);\n"
           "    r2.x = max(r2.x, c0.z);\n"
           "    r2.y = c0.y;\n"
           "    r3.xy = r2.xy + hg_ProgramLocal3.xy;\n"
           "    r3.xy = r3.xy*hg_ProgramLocal3.zw;\n"
           "    r2.y = texture2D(hg_Texture1, r3.xy).y;\n"
           "    r1.z = r2.y - r1.x;\n"
           "    r2.y = r1.y*c0.x + c0.y;\n"
           "    r2.x = r2.w*r1.z + r1.x;\n"
           "    r1.x = float(r1.y < c0.w);\n"
           "    r2.y = min(r2.y, c0.x);\n"
           "    r2.w = float(r1.y >= c0.z);\n"
           "    r2.w = r2.w*r1.x;\n"
           "    r1.z = max(r2.y, c0.z);\n"
           "    r1.w = c0.y;\n"
           "    r3.xy = r1.zw + hg_ProgramLocal3.xy;\n"
           "    r3.xy = r3.xy*hg_ProgramLocal3.zw;\n"
           "    r2.y = texture2D(hg_Texture1, r3.xy).y;\n"
           "    r2.y = mix(r1.y, r2.y, r2.w);\n"
           "    r3.xyz = max(r2.xyz, c0.zzz);\n"
           "    r2.xyz = mix(r2.xyz, r3.xyz, hg_ProgramLocal1.xyz);\n"
           "    r1.xyz = min(r2.xyz, c0.www);\n"
           "    r2.xyz = mix(r2.xyz, r1.xyz, hg_ProgramLocal2.xyz);\n"
           "    r2.w = r0.w;\n"
           "    r2.xyz = r2.xyz*r0.www;\n"
           "    gl_FragColor = mix(r0, r2, hg_ProgramLocal0);\n"
           "}\n"
           "//MD5=a2428740:5114198b:975d4f89:e90d2161\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0004:0004:0000:0000:0000:0000:0000:0001:02:0:1:0\n";
  }
}

void HgcContrastBezierRGB::InitProgramDescriptor(HgcContrastBezierRGB *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcContrastBezierRGB_hgc_visible", "//Metal1.0     \n//LEN=0000000714\n[[ visible ]] FragmentOut HgcContrastBezierRGB_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1)\n{\n    const float4 c0 = float4(1023.000000, 0.5000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r2.x = r1.z*c0.x + c0.y;\n"
    "    r2.x = fmin(r2.x, c0.x);\n"
    "    r2.x = fmax(r2.x, c0.z);\n"
    "    r2.y = c0.y;\n"
    "    r2.xy = r2.xy + hg_Params[3].xy;\n"
    "    r2.xy = r2.xy*hg_Params[3].zw;\n"
    "    r2.y = hg_Texture1.sample(hg_Sampler1, r2.xy).y;\n"
    "    r2.x = float(r1.z >= c0.w);\n"
    "    r2.z = -r2.x + c0.w;\n"
    "    r2.x = float(r1.z >= c0.z);\n"
    "    r2.x = r2.x*r2.z;\n"
    "    r2.z = mix(r1.z, r2.y, r2.x);\n"
    "    r2.y = float(r1.x >= c0.w);\n"
    "    r2.w = -r2.y + c0.w;\n"
    "    r2.y = float(r1.x >= c0.z);\n"
    "    r2.w = r2.y*r2.w;\n"
    "    r2.x = r1.x*c0.x + c0.y;\n"
    "    r2.x = fmin(r2.x, c0.x);\n"
    "    r2.x = fmax(r2.x, c0.z);\n"
    "    r2.y = c0.y;\n"
    "    r3.xy = r2.xy + hg_Params[3].xy;\n"
    "    r3.xy = r3.xy*hg_Params[3].zw;\n"
    "    r2.y = hg_Texture1.sample(hg_Sampler1, r3.xy).y;\n"
    "    r1.z = r2.y - r1.x;\n"
    "    r2.y = r1.y*c0.x + c0.y;\n"
    "    r2.x = r2.w*r1.z + r1.x;\n"
    "    r1.x = float(r1.y < c0.w);\n"
    "    r2.y = fmin(r2.y, c0.x);\n"
    "    r2.w = float(r1.y >= c0.z);\n"
    "    r2.w = r2.w*r1.x;\n"
    "    r1.z = fmax(r2.y, c0.z);\n"
    "    r1.w = c0.y;\n"
    "    r3.xy = r1.zw + hg_Params[3].xy;\n"
    "    r3.xy = r3.xy*hg_Params[3].zw;\n"
    "    r2.y = hg_Texture1.sample(hg_Sampler1, r3.xy).y;\n"
    "    r2.y = mix(r1.y, r2.y, r2.w);\n"
    "    r3.xyz = fmax(r2.xyz, c0.zzz);\n"
    "    r2.xyz = mix(r2.xyz, r3.xyz, hg_Params[1].xyz);\n"
    "    r1.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = mix(r2.xyz, r1.xyz, hg_Params[2].xyz);\n"
    "    r2.w = r0.w;\n"
    "    r2.xyz = r2.xyz*r0.www;\n"
    "    output.color0 = mix(r0, r2, hg_Params[0]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CD12C8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcContrastBezierRGB");
}

void sub_1B2CD12D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CD1458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CD14A8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CD14A0);
}

_QWORD *HgcContrastBezierRGB::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcContrastBezierRGB [hgc1]");
}

uint64_t HgcContrastBezierRGB::BindTexture(HgcContrastBezierRGB *this, HGHandler *a2, int a3)
{
  int v4;
  uint64_t result;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  if (a3 == 1)
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    {
      v8.n128_u32[0] = 1.0;
      v9.n128_u32[0] = 1.0;
    }
    else
    {
      v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v6.n128_f32[0] = (float)*((int *)a2 + 60);
    v7.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 3, v6, v7, v8, v9);
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    result = 0;
    if (v4)
      return result;
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  }
  return 0;
}

uint64_t HgcContrastBezierRGB::Bind(HgcContrastBezierRGB *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HgcContrastBezierRGB *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcContrastBezierRGB::RenderTile(HgcContrastBezierRGB *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  int v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  float32x4_t v44;
  uint64_t v45;
  int32x4_t v46;
  float32x2_t v47;
  float32x4_t *v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x4_t *v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  float32x4_t v95;
  int8x8_t v96;
  int8x8_t v97;
  int8x8_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int32x4_t v102;
  float32x2_t v103;
  float32x4_t *v104;
  float32x4_t v105;
  int32x4_t v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t v109;
  int32x4_t v110;
  float32x4_t *v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int32x4_t v115;
  float32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  int32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  float32x4_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int32x4_t v152;
  float32x2_t v153;
  float32x4_t *v154;
  float32x4_t v155;
  int8x16_t v156;
  float32x4_t v157;
  int32x4_t v158;
  float32x4_t *v159;
  float32x4_t v160;
  int8x16_t v161;
  float32x4_t v162;
  int32x4_t v163;
  float32x4_t *v164;
  float32x4_t v165;
  int8x16_t v166;
  float32x4_t v167;
  int32x4_t v168;
  float32x4_t v169;
  int32x4_t v170;
  float32x4_t v171;
  int32x4_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  float32x4_t v176;
  int8x16_t v177;
  float32x4_t v178;
  int8x16_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t *v200;
  uint64_t v201;
  int8x16_t v202;
  uint64_t v203;
  float32x4_t v204;
  float32x4_t v205;
  int8x16_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  int8x16_t v210;
  float32x4_t v211;
  uint64_t v212;
  float32x4_t v213;
  uint64_t v214;
  int32x4_t v215;
  float32x2_t v216;
  float32x4_t *v217;
  float32x4_t v218;
  int8x16_t v219;
  float32x4_t v220;
  int32x4_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  float32x4_t v227;
  int8x16_t v228;
  float32x4_t v229;
  float32x4_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  float32x4_t v234;
  float32x4_t v235;
  int32x4_t v236;
  float32x2_t v237;
  float32x4_t *v238;
  float32x4_t v239;
  float32x4_t v240;
  int32x4_t v241;
  int8x8_t v242;
  float32x4_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t v252;
  int8x16_t v253;
  float32x4_t v254;
  int32x4_t v255;
  float32x2_t v256;
  float32x4_t *v257;
  float32x4_t v258;
  int8x16_t v259;
  float32x4_t v260;
  int32x4_t v261;
  int8x16_t v262;
  int8x16_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  int8x16_t v267;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcContrastBezierRGB *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 10);
    v13 = 16 * *((int *)a2 + 6);
    v14 = 16 * *((int *)a2 + 22);
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    do
    {
      if (v10 < 3)
      {
        LODWORD(v201) = 0;
      }
      else
      {
        v16 = 0;
        v17 = 0;
        do
        {
          v18 = *(int8x16_t *)(v12 + v16);
          v19 = *(int8x16_t *)(v12 + v16 + 16);
          v20 = *(int8x16_t *)(v12 + v16 + 32);
          v21 = *((_QWORD *)this + 51);
          v22 = *(float32x4_t *)(v21 + 48);
          v23 = *(float32x4_t *)(v21 + 64);
          v24 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3), v22);
          v25 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3), v22);
          v26 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3), v22);
          v27 = vmulq_f32(vrecpeq_f32(v24), v23);
          v28 = vmulq_f32(vrecpeq_f32(v25), v23);
          v29 = vmulq_f32(vrecpeq_f32(v26), v23);
          v30 = vmulq_f32(v29, vrecpsq_f32(v29, v26));
          v31 = (int8x16_t)vmulq_f32((float32x4_t)v18, vmulq_f32(v27, vrecpsq_f32(v27, v24)));
          v32 = (int8x16_t)vmulq_f32((float32x4_t)v19, vmulq_f32(v28, vrecpsq_f32(v28, v25)));
          v33 = (int8x16_t)vmulq_f32((float32x4_t)v20, v30);
          v34 = (float32x4_t)vextq_s8(v31, v31, 8uLL);
          v35 = (float32x4_t)vextq_s8(v32, v32, 8uLL);
          v36 = (float32x4_t)vextq_s8(v33, v33, 8uLL);
          v38 = *(float32x4_t *)(v21 + 80);
          v37 = *(float32x4_t *)(v21 + 96);
          v39 = *(int8x16_t *)(v21 + 112);
          v40 = vmaxq_f32(vminq_f32(vaddq_f32(v38, vmulq_f32(v34, v37)), v37), (float32x4_t)v39);
          v41 = vmaxq_f32(vminq_f32(vaddq_f32(v38, vmulq_f32(v35, v37)), v37), (float32x4_t)v39);
          v40.i32[1] = 0.5;
          v41.i32[1] = 0.5;
          v42 = vmaxq_f32(vminq_f32(vaddq_f32(v38, vmulq_f32(v37, v36)), v37), (float32x4_t)v39);
          v42.i32[1] = 0.5;
          v43 = *((int *)a2 + 26);
          v44 = vsubq_f32(v40, (float32x4_t)v9);
          v45 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v46 = vaddq_s32(vcvtq_s32_f32(v44), vcltzq_f32(v44));
            v47 = (float32x2_t)vsubq_f32(v44, vcvtq_f32_s32(v46)).u64[0];
            v48 = (float32x4_t *)(v45 + 16 * (v46.i32[0] + v46.i32[1] * (int)v43));
            v49 = vaddq_f32(*v48, vmulq_n_f32(vsubq_f32(v48[1], *v48), v47.f32[0]));
            v50 = (int8x16_t)vaddq_f32(v49, vmulq_lane_f32(vsubq_f32(vaddq_f32(v48[v43], vmulq_n_f32(vsubq_f32(v48[(int)v43 + 1], v48[v43]), v47.f32[0])), v49), v47, 1));
            v51 = vsubq_f32(v41, (float32x4_t)v9);
            v52 = vaddq_s32(vcvtq_s32_f32(v51), vcltzq_f32(v51));
            v51.i64[0] = vsubq_f32(v51, vcvtq_f32_s32(v52)).u64[0];
            v53 = (float32x4_t *)(v45 + 16 * (v52.i32[0] + v52.i32[1] * (int)v43));
            v54 = vaddq_f32(*v53, vmulq_n_f32(vsubq_f32(v53[1], *v53), v51.f32[0]));
            v55 = (int8x16_t)vaddq_f32(v54, vmulq_lane_f32(vsubq_f32(vaddq_f32(v53[v43], vmulq_n_f32(vsubq_f32(v53[(int)v43 + 1], v53[v43]), v51.f32[0])), v54), *(float32x2_t *)v51.f32, 1));
            v56 = vsubq_f32(v42, (float32x4_t)v9);
            v57 = vaddq_s32(vcvtq_s32_f32(v56), vcltzq_f32(v56));
            v56.i64[0] = vsubq_f32(v56, vcvtq_f32_s32(v57)).u64[0];
            v58 = (float32x4_t *)(v45 + 16 * (v57.i32[0] + v57.i32[1] * (int)v43));
            v59 = vaddq_f32(*v58, vmulq_n_f32(vsubq_f32(v58[1], *v58), v56.f32[0]));
            v60 = (int8x16_t)vaddq_f32(v59, vmulq_lane_f32(vsubq_f32(vaddq_f32(v58[v43], vmulq_n_f32(vsubq_f32(v58[(int)v43 + 1], v58[v43]), v56.f32[0])), v59), *(float32x2_t *)v56.f32, 1));
          }
          else
          {
            v61 = vaddq_f32(v44, v15);
            v62 = vcvtq_s32_f32(v61);
            v61.i64[0] = vaddq_s32(v62, vcgtq_f32(vcvtq_f32_s32(v62), v61)).u64[0];
            v50 = *(int8x16_t *)(v45 + 16 * (v61.i32[0] + v61.i32[1] * (int)v43));
            v63 = vaddq_f32(vsubq_f32(v41, (float32x4_t)v9), v15);
            v64 = vcvtq_s32_f32(v63);
            v63.i64[0] = vaddq_s32(v64, vcgtq_f32(vcvtq_f32_s32(v64), v63)).u64[0];
            v55 = *(int8x16_t *)(v45 + 16 * (v63.i32[0] + v63.i32[1] * (int)v43));
            v65 = vaddq_f32(vsubq_f32(v42, (float32x4_t)v9), v15);
            v66 = vcvtq_s32_f32(v65);
            v65.i64[0] = vaddq_s32(v66, vcgtq_f32(vcvtq_f32_s32(v66), v65)).u64[0];
            v60 = *(int8x16_t *)(v45 + 16 * (v65.i32[0] + v65.i32[1] * (int)v43));
          }
          v67 = vandq_s8(v39, (int8x16_t)vcgeq_f32((float32x4_t)v31, (float32x4_t)v39));
          v68 = vandq_s8(v39, (int8x16_t)vcgeq_f32((float32x4_t)v32, (float32x4_t)v39));
          v69 = vandq_s8(v39, (int8x16_t)vcgeq_f32((float32x4_t)v33, (float32x4_t)v39));
          v70 = vextq_s8(v67, v67, 8uLL);
          v72 = *(int8x16_t *)(v21 + 128);
          v71 = *(int8x16_t *)(v21 + 144);
          v73 = vmvnq_s8(v72);
          v74.i64[0] = vbslq_s8(v72, v70, v50).u64[0];
          v75.i64[0] = vbslq_s8(v72, vextq_s8(v68, v68, 8uLL), v55).u64[0];
          v76.i64[0] = vbslq_s8(v72, vextq_s8(v69, v69, 8uLL), v60).u64[0];
          v74.i64[1] = vsubq_f32(*(float32x4_t *)&v39, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v74, 0)).i64[1];
          v75.i64[1] = vsubq_f32(*(float32x4_t *)&v39, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v75, 0)).i64[1];
          v76.i64[1] = vsubq_f32(*(float32x4_t *)&v39, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v76, 0)).i64[1];
          v77 = (float32x4_t)vbslq_s8(v72, vandq_s8(v71, (int8x16_t)vcgeq_f32(v34, (float32x4_t)v39)), v74);
          v78 = (float32x4_t)vbslq_s8(v72, vandq_s8(v71, (int8x16_t)vcgeq_f32(v35, (float32x4_t)v39)), v75);
          v79 = (float32x4_t)vbslq_s8(v72, vandq_s8(v71, (int8x16_t)vcgeq_f32(v36, (float32x4_t)v39)), v76);
          v80 = vbslq_s8(v72, (int8x16_t)vmulq_laneq_f32(v77, v77, 2), v74);
          v81 = vbslq_s8(v72, (int8x16_t)vmulq_laneq_f32(v78, v78, 2), v75);
          v82 = vbslq_s8(v72, (int8x16_t)vmulq_laneq_f32(v79, v79, 2), v76);
          v83 = (int8x16_t)vaddq_f32((float32x4_t)v31, vmulq_n_f32(vsubq_f32((float32x4_t)vextq_s8(v9, v80, 0xCuLL), (float32x4_t)v31), *(float *)v80.i32));
          v84 = vmulq_n_f32(vsubq_f32((float32x4_t)vextq_s8(v9, v82, 0xCuLL), (float32x4_t)v33), *(float *)v82.i32);
          v85 = (float32x4_t)vrev64q_s32((int32x4_t)v31);
          v86 = (float32x4_t)vrev64q_s32((int32x4_t)v32);
          v87 = (float32x4_t)vrev64q_s32((int32x4_t)v33);
          v88 = *(int8x16_t *)(v21 + 160);
          v89 = *(float32x4_t *)(v21 + 176);
          v90.i64[0] = vandq_s8(v71, (int8x16_t)vcgeq_f32(v85, (float32x4_t)v39)).u64[0];
          v90.i64[1] = vbslq_s8(v88, v83, (int8x16_t)vsubq_f32(*(float32x4_t *)&v71, (float32x4_t)vdupq_lane_s64((uint64_t)vandq_s8(v71, (int8x16_t)vcgeq_f32(v85, *(float32x4_t *)&v71)), 0))).i64[1];
          v91.i64[0] = vandq_s8(v71, (int8x16_t)vcgeq_f32(v86, (float32x4_t)v39)).u64[0];
          v91.i64[1] = vbslq_s8(v88, (int8x16_t)vaddq_f32(*(float32x4_t *)&v32, vmulq_n_f32(vsubq_f32((float32x4_t)vextq_s8(v9, v81, 0xCuLL), *(float32x4_t *)&v32), *(float *)&v81)), (int8x16_t)vsubq_f32(*(float32x4_t *)&v71, (float32x4_t)vdupq_lane_s64((uint64_t)vandq_s8(v71, (int8x16_t)vcgeq_f32(v86, *(float32x4_t *)&v71)), 0))).i64[1];
          v81.i64[0] = vandq_s8(v71, (int8x16_t)vcgeq_f32(v87, (float32x4_t)v39)).u64[0];
          v81.i64[1] = vbslq_s8(v88, (int8x16_t)vaddq_f32(*(float32x4_t *)&v33, v84), (int8x16_t)vsubq_f32(*(float32x4_t *)&v71, (float32x4_t)vdupq_lane_s64((uint64_t)vandq_s8(v71, (int8x16_t)vcgeq_f32(v87, *(float32x4_t *)&v71)), 0))).i64[1];
          v92 = vbslq_s8(v88, v90, (int8x16_t)vmulq_lane_f32((float32x4_t)v90, *(float32x2_t *)v90.i8, 1));
          v93 = vbslq_s8(v88, v91, (int8x16_t)vmulq_lane_f32((float32x4_t)v91, *(float32x2_t *)v91.i8, 1));
          v94 = vbslq_s8(v88, v81, (int8x16_t)vmulq_lane_f32((float32x4_t)v81, *(float32x2_t *)v81.i8, 1));
          v84.i64[0] = vaddq_f32(v38, vmulq_f32((float32x4_t)v31, v37)).u64[0];
          v87.i64[0] = vaddq_f32(v38, vmulq_f32((float32x4_t)v32, v37)).u64[0];
          v95.i64[0] = vaddq_f32(v38, vmulq_f32((float32x4_t)v33, v37)).u64[0];
          v84.i64[1] = v92.i64[1];
          v87.i64[1] = v93.i64[1];
          v96 = (int8x8_t)vextq_s8(v92, v92, 8uLL).u64[0];
          v95.i64[1] = v94.i64[1];
          v84.i64[0] = vminq_f32(v84, v37).u64[0];
          v87.i64[0] = vminq_f32(v87, v37).u64[0];
          v90.i64[0] = vminq_f32(v95, v37).u64[0];
          v84.i64[1] = v92.i64[1];
          v87.i64[1] = v93.i64[1];
          v90.i64[1] = v94.i64[1];
          v97 = (int8x8_t)vextq_s8(v93, v93, 8uLL).u64[0];
          v88.i32[0] = vmaxq_f32(v84, v89).u32[0];
          v99.i32[0] = vmaxq_f32(v87, v89).u32[0];
          v100.i32[0] = vmaxq_f32((float32x4_t)v90, v89).u32[0];
          v88.i64[1] = v92.i64[1];
          v99.i64[1] = v93.i64[1];
          v100.i64[1] = v94.i64[1];
          v88.i32[1] = 0.5;
          v98 = (int8x8_t)vextq_s8(v94, v94, 8uLL).u64[0];
          v99.i32[1] = 0.5;
          v100.i32[1] = 0.5;
          v101 = vsubq_f32((float32x4_t)v88, (float32x4_t)v9);
          if (v5)
          {
            v102 = vaddq_s32(vcvtq_s32_f32(v101), vcltzq_f32(v101));
            v103 = (float32x2_t)vsubq_f32(v101, vcvtq_f32_s32(v102)).u64[0];
            v104 = (float32x4_t *)(v45 + 16 * (v102.i32[0] + v102.i32[1] * (int)v43));
            v105 = vaddq_f32(*v104, vmulq_n_f32(vsubq_f32(v104[1], *v104), v103.f32[0]));
            v101.i64[0] = vaddq_f32(v105, vmulq_lane_f32(vsubq_f32(vaddq_f32(v104[v43], vmulq_n_f32(vsubq_f32(v104[(int)v43 + 1], v104[v43]), v103.f32[0])), v105), v103, 1)).u64[0];
            v109 = vsubq_f32(v99, (float32x4_t)v9);
            v106 = vaddq_s32(vcvtq_s32_f32(v109), vcltzq_f32(v109));
            v109.i64[0] = vsubq_f32(v109, vcvtq_f32_s32(v106)).u64[0];
            v107 = (float32x4_t *)(v45 + 16 * (v106.i32[0] + v106.i32[1] * (int)v43));
            v108 = vaddq_f32(*v107, vmulq_n_f32(vsubq_f32(v107[1], *v107), v109.f32[0]));
            v109.i64[0] = vaddq_f32(v108, vmulq_lane_f32(vsubq_f32(vaddq_f32(v107[v43], vmulq_n_f32(vsubq_f32(v107[(int)v43 + 1], v107[v43]), v109.f32[0])), v108), *(float32x2_t *)v109.f32, 1)).u64[0];
            v113 = vsubq_f32(v100, (float32x4_t)v9);
            v110 = vaddq_s32(vcvtq_s32_f32(v113), vcltzq_f32(v113));
            v113.i64[0] = vsubq_f32(v113, vcvtq_f32_s32(v110)).u64[0];
            v111 = (float32x4_t *)(v45 + 16 * (v110.i32[0] + v110.i32[1] * (int)v43));
            v112 = vaddq_f32(*v111, vmulq_n_f32(vsubq_f32(v111[1], *v111), v113.f32[0]));
            v113.i64[0] = vaddq_f32(v112, vmulq_lane_f32(vsubq_f32(vaddq_f32(v111[v43], vmulq_n_f32(vsubq_f32(v111[(int)v43 + 1], v111[v43]), v113.f32[0])), v112), *(float32x2_t *)v113.f32, 1)).u64[0];
          }
          else
          {
            v114 = vaddq_f32(v101, v15);
            v115 = vcvtq_s32_f32(v114);
            v114.i64[0] = vaddq_s32(v115, vcgtq_f32(vcvtq_f32_s32(v115), v114)).u64[0];
            v101 = *(float32x4_t *)(v45 + 16 * (v114.i32[0] + v114.i32[1] * (int)v43));
            v116 = vaddq_f32(vsubq_f32(v99, (float32x4_t)v9), v15);
            v117 = vcvtq_s32_f32(v116);
            v116.i64[0] = vaddq_s32(v117, vcgtq_f32(vcvtq_f32_s32(v117), v116)).u64[0];
            v109 = *(float32x4_t *)(v45 + 16 * (v116.i32[0] + v116.i32[1] * (int)v43));
            v118 = vaddq_f32(vsubq_f32(v100, (float32x4_t)v9), v15);
            v119 = vcvtq_s32_f32(v118);
            v118.i64[0] = vaddq_s32(v119, vcgtq_f32(vcvtq_f32_s32(v119), v118)).u64[0];
            v113 = *(float32x4_t *)(v45 + 16 * (v118.i32[0] + v118.i32[1] * (int)v43));
          }
          *(int8x8_t *)v120.f32 = vext_s8(*(int8x8_t *)v101.f32, v96, 4uLL);
          v120.i64[1] = v120.i64[0];
          *(int8x8_t *)v121.f32 = vext_s8(*(int8x8_t *)v109.f32, v97, 4uLL);
          v121.i64[1] = v121.i64[0];
          *(int8x8_t *)v122.f32 = vext_s8(*(int8x8_t *)v113.f32, v98, 4uLL);
          v122.i64[1] = v122.i64[0];
          v123 = (int8x16_t)vsubq_f32(v120, v34);
          v124 = (int8x16_t)vsubq_f32(v121, v35);
          v125 = (int8x16_t)vsubq_f32(v122, v36);
          v120.i64[0] = v31.i64[0];
          v120.i64[1] = v123.i64[1];
          v122.i64[0] = v32.i64[0];
          v122.i64[1] = v124.i64[1];
          v121.i64[0] = v33.i64[0];
          v121.i64[1] = v125.i64[1];
          *(float32x2_t *)v126.i8 = vadd_f32(*(float32x2_t *)v89.f32, vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v31.i8));
          v126.u64[1] = (unint64_t)v96;
          *(float32x2_t *)v127.i8 = vadd_f32(*(float32x2_t *)v89.f32, vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v32.i8));
          v127.u64[1] = (unint64_t)v97;
          *(float32x2_t *)v128.i8 = vadd_f32(*(float32x2_t *)v89.f32, vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v33.i8));
          v128.u64[1] = (unint64_t)v98;
          v129 = vorrq_s8(vandq_s8(v126, v73), vandq_s8(v72, (int8x16_t)vaddq_f32(v120, vmulq_laneq_f32((float32x4_t)vextq_s8(v123, v31, 8uLL), (float32x4_t)v92, 3))));
          v130 = vorrq_s8(vandq_s8(v127, v73), vandq_s8(v72, (int8x16_t)vaddq_f32(v122, vmulq_laneq_f32((float32x4_t)vextq_s8(v124, v32, 8uLL), (float32x4_t)v93, 3))));
          v131 = vorrq_s8(vandq_s8(v128, v73), vandq_s8(v72, (int8x16_t)vaddq_f32(v121, vmulq_laneq_f32((float32x4_t)vextq_s8(v125, v33, 8uLL), (float32x4_t)v94, 3))));
          v31.i64[1] = vdupq_laneq_s64((int64x2_t)v123, 1).u64[0];
          v32.i64[1] = vdupq_laneq_s64((int64x2_t)v124, 1).u64[0];
          v33.i64[1] = vdupq_laneq_s64((int64x2_t)v125, 1).u64[0];
          v132 = (int8x16_t)vcgtq_f32((float32x4_t)v71, (float32x4_t)vrev64q_s32((int32x4_t)v33));
          v133 = vandq_s8(v71, v72);
          v146 = vorrq_s8(vandq_s8(v133, (int8x16_t)vcgtq_f32((float32x4_t)v71, (float32x4_t)vrev64q_s32((int32x4_t)v31))), vandq_s8((int8x16_t)v120, v73));
          v147 = vorrq_s8(vandq_s8(v133, (int8x16_t)vcgtq_f32((float32x4_t)v71, (float32x4_t)vrev64q_s32((int32x4_t)v32))), vandq_s8((int8x16_t)v122, v73));
          v148 = vorrq_s8(vandq_s8(v133, v132), vandq_s8((int8x16_t)v121, v73));
          v135 = *(float32x4_t *)(v21 + 192);
          v134 = *(int8x16_t *)(v21 + 208);
          v136 = vbslq_s8(v134, (int8x16_t)vminq_f32((float32x4_t)v129, v135), v129);
          v137 = vbslq_s8(v134, (int8x16_t)vminq_f32((float32x4_t)v130, v135), v130);
          v138 = vbslq_s8(v134, (int8x16_t)vminq_f32((float32x4_t)v131, v135), v131);
          v139 = vandq_s8(v71, (int8x16_t)vcgeq_f32((float32x4_t)v146, (float32x4_t)v39));
          v140 = vandq_s8(v71, (int8x16_t)vcgeq_f32((float32x4_t)v147, (float32x4_t)v39));
          v141 = vandq_s8(v71, (int8x16_t)vcgeq_f32((float32x4_t)v148, (float32x4_t)v39));
          v142 = *(int8x16_t *)(v21 + 224);
          v143 = vbslq_s8(v142, (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v142, vextq_s8(v139, v139, 8uLL), v136), *(float *)v146.i32), v136);
          v144 = vbslq_s8(v142, (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v142, vextq_s8(v140, v140, 8uLL), v137), *(float *)v147.i32), v137);
          v145 = vbslq_s8(v142, (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v142, vextq_s8(v141, v141, 8uLL), v138), *(float *)v148.i32), v138);
          v146.i64[1] = __PAIR64__(0.5, vmaxq_f32((float32x4_t)vextq_s8(v143, v143, 0xCuLL), *(float32x4_t *)&v71).u32[2]);
          v147.i64[1] = __PAIR64__(0.5, vmaxq_f32((float32x4_t)vextq_s8(v144, v144, 0xCuLL), *(float32x4_t *)&v71).u32[2]);
          v148.i64[1] = __PAIR64__(0.5, vmaxq_f32((float32x4_t)vextq_s8(v145, v145, 0xCuLL), *(float32x4_t *)&v71).u32[2]);
          v149 = (float32x4_t)vextq_s8(v147, v147, 8uLL);
          v150 = (float32x4_t)vextq_s8(v148, v148, 8uLL);
          v151 = vsubq_f32((float32x4_t)vextq_s8(v146, v146, 8uLL), (float32x4_t)v9);
          if (v5)
          {
            v152 = vaddq_s32(vcvtq_s32_f32(v151), vcltzq_f32(v151));
            v153 = (float32x2_t)vsubq_f32(v151, vcvtq_f32_s32(v152)).u64[0];
            v154 = (float32x4_t *)(v45 + 16 * (v152.i32[0] + v152.i32[1] * (int)v43));
            v155 = vaddq_f32(*v154, vmulq_n_f32(vsubq_f32(v154[1], *v154), v153.f32[0]));
            v156 = (int8x16_t)vaddq_f32(v155, vmulq_lane_f32(vsubq_f32(vaddq_f32(v154[v43], vmulq_n_f32(vsubq_f32(v154[(int)v43 + 1], v154[v43]), v153.f32[0])), v155), v153, 1));
            v157 = vsubq_f32(v149, (float32x4_t)v9);
            v158 = vaddq_s32(vcvtq_s32_f32(v157), vcltzq_f32(v157));
            v157.i64[0] = vsubq_f32(v157, vcvtq_f32_s32(v158)).u64[0];
            v159 = (float32x4_t *)(v45 + 16 * (v158.i32[0] + v158.i32[1] * (int)v43));
            v160 = vaddq_f32(*v159, vmulq_n_f32(vsubq_f32(v159[1], *v159), v157.f32[0]));
            v161 = (int8x16_t)vaddq_f32(v160, vmulq_lane_f32(vsubq_f32(vaddq_f32(v159[v43], vmulq_n_f32(vsubq_f32(v159[(int)v43 + 1], v159[v43]), v157.f32[0])), v160), *(float32x2_t *)v157.f32, 1));
            v162 = vsubq_f32(v150, (float32x4_t)v9);
            v163 = vaddq_s32(vcvtq_s32_f32(v162), vcltzq_f32(v162));
            v162.i64[0] = vsubq_f32(v162, vcvtq_f32_s32(v163)).u64[0];
            v164 = (float32x4_t *)(v45 + 16 * (v163.i32[0] + v163.i32[1] * (int)v43));
            v165 = vaddq_f32(*v164, vmulq_n_f32(vsubq_f32(v164[1], *v164), v162.f32[0]));
            v166 = (int8x16_t)vaddq_f32(v165, vmulq_lane_f32(vsubq_f32(vaddq_f32(v164[v43], vmulq_n_f32(vsubq_f32(v164[(int)v43 + 1], v164[v43]), v162.f32[0])), v165), *(float32x2_t *)v162.f32, 1));
          }
          else
          {
            v167 = vaddq_f32(v151, v15);
            v168 = vcvtq_s32_f32(v167);
            v167.i64[0] = vaddq_s32(v168, vcgtq_f32(vcvtq_f32_s32(v168), v167)).u64[0];
            v156 = *(int8x16_t *)(v45 + 16 * (v167.i32[0] + v167.i32[1] * (int)v43));
            v169 = vaddq_f32(vsubq_f32(v149, (float32x4_t)v9), v15);
            v170 = vcvtq_s32_f32(v169);
            v169.i64[0] = vaddq_s32(v170, vcgtq_f32(vcvtq_f32_s32(v170), v169)).u64[0];
            v161 = *(int8x16_t *)(v45 + 16 * (v169.i32[0] + v169.i32[1] * (int)v43));
            v171 = vaddq_f32(vsubq_f32(v150, (float32x4_t)v9), v15);
            v172 = vcvtq_s32_f32(v171);
            v171.i64[0] = vaddq_s32(v172, vcgtq_f32(vcvtq_f32_s32(v172), v171)).u64[0];
            v166 = *(int8x16_t *)(v45 + 16 * (v171.i32[0] + v171.i32[1] * (int)v43));
          }
          v173 = vmvnq_s8(v134);
          v174 = vmvnq_s8(v142);
          v175 = vandq_s8(v143, v173);
          v176 = (float32x4_t)vorrq_s8(vandq_s8(v134, v156), v175);
          v177 = vandq_s8(v144, v173);
          v178 = (float32x4_t)vorrq_s8(vandq_s8(v134, v161), v177);
          v179 = vandq_s8(v145, v173);
          v180 = (float32x4_t)vorrq_s8(vandq_s8(v134, v166), v179);
          v181 = (float32x4_t)vorrq_s8(vandq_s8(v134, (int8x16_t)vaddq_f32((float32x4_t)v146, vmulq_laneq_f32(vsubq_f32(v176, (float32x4_t)v146), v176, 3))), v175);
          v182 = (float32x4_t)vorrq_s8(vandq_s8(v134, (int8x16_t)vaddq_f32((float32x4_t)v147, vmulq_laneq_f32(vsubq_f32(v178, (float32x4_t)v147), v178, 3))), v177);
          v183 = (float32x4_t)vorrq_s8(vandq_s8(v134, (int8x16_t)vaddq_f32((float32x4_t)v148, vmulq_laneq_f32(vsubq_f32(v180, (float32x4_t)v148), v180, 3))), v179);
          v184 = *(float32x4_t *)(v21 + 240);
          v185 = *(float32x4_t *)(v21 + 256);
          v186 = *(float32x4_t *)(v21 + 16);
          v187 = vaddq_f32(vmulq_f32(v186, vsubq_f32(vmaxq_f32(v181, v184), v181)), v181);
          v188 = vaddq_f32(vmulq_f32(v186, vsubq_f32(vmaxq_f32(v182, v184), v182)), v182);
          v189 = vaddq_f32(vmulq_f32(v186, vsubq_f32(vmaxq_f32(v183, v184), v183)), v183);
          v190 = vminq_f32(v188, v185);
          v191 = *(float32x4_t *)(v21 + 32);
          v192 = (int8x16_t)vaddq_f32(v187, vmulq_f32(v191, vsubq_f32(vminq_f32(v187, v185), v187)));
          v193 = (int8x16_t)vaddq_f32(v189, vmulq_f32(v191, vsubq_f32(vminq_f32(v189, v185), v189)));
          v194 = vandq_s8(v142, v18);
          v195 = vandq_s8(v142, v19);
          v196 = vandq_s8(v142, v20);
          v197 = vaddq_f32((float32x4_t)v18, vmulq_f32(*(float32x4_t *)v21, vsubq_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmulq_laneq_f32((float32x4_t)vorrq_s8(vandq_s8(v192, v174), v194), (float32x4_t)v18, 3), v174), v194), (float32x4_t)v18)));
          v198 = vaddq_f32((float32x4_t)v19, vmulq_f32(*(float32x4_t *)v21, vsubq_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmulq_laneq_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_f32(v188, vmulq_f32(v191, vsubq_f32(v190, v188))), v174), v195), (float32x4_t)v19, 3), v174),
                                      v195),
                       (float32x4_t)v19)));
          v199 = vaddq_f32((float32x4_t)v20, vmulq_f32(*(float32x4_t *)v21, vsubq_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmulq_laneq_f32((float32x4_t)vorrq_s8(vandq_s8(v193, v174), v196), (float32x4_t)v20, 3), v174), v196), (float32x4_t)v20)));
          v200 = (float32x4_t *)(v11 + v16);
          *v200 = v197;
          v200[1] = v198;
          v200[2] = v199;
          v17 -= 3;
          v16 += 48;
        }
        while (v10 + v17 > 2);
        LODWORD(v201) = -v17;
      }
      if ((int)v201 < v10)
      {
        v201 = v201;
        do
        {
          v202 = *(int8x16_t *)(v12 + 16 * v201);
          v203 = *((_QWORD *)this + 51);
          v204 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v202, 3), *(float32x4_t *)(v203 + 48));
          v205 = vmulq_f32(vrecpeq_f32(v204), *(float32x4_t *)(v203 + 64));
          v206 = (int8x16_t)vmulq_f32((float32x4_t)v202, vmulq_f32(v205, vrecpsq_f32(v205, v204)));
          v207 = (float32x4_t)vextq_s8(v206, v206, 8uLL);
          v209 = *(float32x4_t *)(v203 + 80);
          v208 = *(float32x4_t *)(v203 + 96);
          v210 = *(int8x16_t *)(v203 + 112);
          v211 = vmaxq_f32(vminq_f32(vaddq_f32(v209, vmulq_f32(v208, v207)), v208), (float32x4_t)v210);
          v211.i32[1] = 0.5;
          v212 = *((int *)a2 + 26);
          v213 = vsubq_f32(v211, (float32x4_t)v9);
          v214 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v215 = vaddq_s32(vcvtq_s32_f32(v213), vcltzq_f32(v213));
            v216 = (float32x2_t)vsubq_f32(v213, vcvtq_f32_s32(v215)).u64[0];
            v217 = (float32x4_t *)(v214 + 16 * (v215.i32[0] + v215.i32[1] * (int)v212));
            v218 = vaddq_f32(*v217, vmulq_n_f32(vsubq_f32(v217[1], *v217), v216.f32[0]));
            v219 = (int8x16_t)vaddq_f32(v218, vmulq_lane_f32(vsubq_f32(vaddq_f32(v217[v212], vmulq_n_f32(vsubq_f32(v217[(int)v212 + 1], v217[v212]), v216.f32[0])), v218), v216, 1));
          }
          else
          {
            v220 = vaddq_f32(v213, v15);
            v221 = vcvtq_s32_f32(v220);
            v220.i64[0] = vaddq_s32(v221, vcgtq_f32(vcvtq_f32_s32(v221), v220)).u64[0];
            v219 = *(int8x16_t *)(v214 + 16 * (v220.i32[0] + v220.i32[1] * (int)v212));
          }
          v222 = vandq_s8(v210, (int8x16_t)vcgeq_f32((float32x4_t)v206, (float32x4_t)v210));
          v223 = vextq_s8(v222, v222, 8uLL);
          v225 = *(int8x16_t *)(v203 + 128);
          v224 = *(int8x16_t *)(v203 + 144);
          v226.i64[0] = vbslq_s8(v225, v223, v219).u64[0];
          v226.i64[1] = vsubq_f32(*(float32x4_t *)&v210, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v226, 0)).i64[1];
          v227 = (float32x4_t)vbslq_s8(v225, vandq_s8(v224, (int8x16_t)vcgeq_f32(v207, (float32x4_t)v210)), v226);
          v228 = vbslq_s8(v225, (int8x16_t)vmulq_laneq_f32(v227, v227, 2), v226);
          v229 = (float32x4_t)vrev64q_s32((int32x4_t)v206);
          v231 = *(int8x16_t *)(v203 + 160);
          v230 = *(float32x4_t *)(v203 + 176);
          v232.i64[0] = vandq_s8(v224, (int8x16_t)vcgeq_f32(v229, (float32x4_t)v210)).u64[0];
          v232.i64[1] = vbslq_s8(v231, (int8x16_t)vaddq_f32(*(float32x4_t *)&v206, vmulq_n_f32(vsubq_f32((float32x4_t)vextq_s8(v9, v228, 0xCuLL), *(float32x4_t *)&v206), *(float *)&v228)), (int8x16_t)vsubq_f32(*(float32x4_t *)&v224, (float32x4_t)vdupq_lane_s64((uint64_t)vandq_s8(v224, (int8x16_t)vcgeq_f32(v229, *(float32x4_t *)&v224)), 0))).i64[1];
          v233 = vbslq_s8(v231, v232, (int8x16_t)vmulq_lane_f32((float32x4_t)v232, *(float32x2_t *)v232.i8, 1));
          v234.i64[0] = vaddq_f32(v209, vmulq_f32((float32x4_t)v206, v208)).u64[0];
          v234.i64[1] = v233.i64[1];
          v234.i64[0] = vminq_f32(v234, v208).u64[0];
          v234.i64[1] = v233.i64[1];
          v234.i32[0] = vmaxq_f32(v234, v230).u32[0];
          v234.i64[1] = v233.i64[1];
          v234.i32[1] = 0.5;
          v235 = vsubq_f32(v234, (float32x4_t)v9);
          if (v5)
          {
            v236 = vaddq_s32(vcvtq_s32_f32(v235), vcltzq_f32(v235));
            v237 = (float32x2_t)vsubq_f32(v235, vcvtq_f32_s32(v236)).u64[0];
            v238 = (float32x4_t *)(v214 + 16 * (v236.i32[0] + v236.i32[1] * (int)v212));
            v239 = vaddq_f32(*v238, vmulq_n_f32(vsubq_f32(v238[1], *v238), v237.f32[0]));
            v235.i64[0] = vaddq_f32(v239, vmulq_lane_f32(vsubq_f32(vaddq_f32(v238[v212], vmulq_n_f32(vsubq_f32(v238[(int)v212 + 1], v238[v212]), v237.f32[0])), v239), v237, 1)).u64[0];
          }
          else
          {
            v240 = vaddq_f32(v235, v15);
            v241 = vcvtq_s32_f32(v240);
            v240.i64[0] = vaddq_s32(v241, vcgtq_f32(vcvtq_f32_s32(v241), v240)).u64[0];
            v235 = *(float32x4_t *)(v214 + 16 * (v240.i32[0] + v240.i32[1] * (int)v212));
          }
          v242 = (int8x8_t)vextq_s8(v233, v233, 8uLL).u64[0];
          *(int8x8_t *)v243.f32 = vext_s8(*(int8x8_t *)v235.f32, v242, 4uLL);
          v243.i64[1] = v243.i64[0];
          v244 = (int8x16_t)vsubq_f32(v243, v207);
          v243.i64[0] = v206.i64[0];
          v243.i64[1] = v244.i64[1];
          *(float32x2_t *)v245.i8 = vadd_f32(*(float32x2_t *)v230.f32, vmul_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v206.i8));
          v245.u64[1] = (unint64_t)v242;
          v246 = vmvnq_s8(v225);
          v247 = vorrq_s8(vandq_s8(v245, v246), vandq_s8(v225, (int8x16_t)vaddq_f32(v243, vmulq_laneq_f32((float32x4_t)vextq_s8(v244, v206, 8uLL), (float32x4_t)v233, 3))));
          v206.i64[1] = vdupq_laneq_s64((int64x2_t)v244, 1).u64[0];
          v253 = vorrq_s8(vandq_s8(vandq_s8(v224, v225), (int8x16_t)vcgtq_f32((float32x4_t)v224, (float32x4_t)vrev64q_s32((int32x4_t)v206))), vandq_s8((int8x16_t)v243, v246));
          v248 = *(int8x16_t *)(v203 + 208);
          v249 = vbslq_s8(v248, (int8x16_t)vminq_f32((float32x4_t)v247, *(float32x4_t *)(v203 + 192)), v247);
          v250 = vandq_s8(v224, (int8x16_t)vcgeq_f32((float32x4_t)v253, (float32x4_t)v210));
          v251 = *(int8x16_t *)(v203 + 224);
          v252 = vbslq_s8(v251, (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v251, vextq_s8(v250, v250, 8uLL), v249), *(float *)v253.i32), v249);
          v253.i64[1] = __PAIR64__(0.5, vmaxq_f32((float32x4_t)vextq_s8(v252, v252, 0xCuLL), *(float32x4_t *)&v224).u32[2]);
          v254 = vsubq_f32((float32x4_t)vextq_s8(v253, v253, 8uLL), (float32x4_t)v9);
          if (v5)
          {
            v255 = vaddq_s32(vcvtq_s32_f32(v254), vcltzq_f32(v254));
            v256 = (float32x2_t)vsubq_f32(v254, vcvtq_f32_s32(v255)).u64[0];
            v257 = (float32x4_t *)(v214 + 16 * (v255.i32[0] + v255.i32[1] * (int)v212));
            v258 = vaddq_f32(*v257, vmulq_n_f32(vsubq_f32(v257[1], *v257), v256.f32[0]));
            v259 = (int8x16_t)vaddq_f32(v258, vmulq_lane_f32(vsubq_f32(vaddq_f32(v257[v212], vmulq_n_f32(vsubq_f32(v257[(int)v212 + 1], v257[v212]), v256.f32[0])), v258), v256, 1));
          }
          else
          {
            v260 = vaddq_f32(v254, v15);
            v261 = vcvtq_s32_f32(v260);
            v260.i64[0] = vaddq_s32(v261, vcgtq_f32(vcvtq_f32_s32(v261), v260)).u64[0];
            v259 = *(int8x16_t *)(v214 + 16 * (v260.i32[0] + v260.i32[1] * (int)v212));
          }
          v262 = vmvnq_s8(v251);
          v263 = vandq_s8(v252, vmvnq_s8(v248));
          v264 = (float32x4_t)vorrq_s8(vandq_s8(v248, v259), v263);
          v265 = (float32x4_t)vorrq_s8(vandq_s8(v248, (int8x16_t)vaddq_f32((float32x4_t)v253, vmulq_laneq_f32(vsubq_f32(v264, (float32x4_t)v253), v264, 3))), v263);
          v266 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v203 + 16), vsubq_f32(vmaxq_f32(v265, *(float32x4_t *)(v203 + 240)), v265)), v265);
          v267 = vandq_s8(v251, v202);
          *(float32x4_t *)(v11 + 16 * v201++) = vaddq_f32((float32x4_t)v202, vmulq_f32(*(float32x4_t *)v203, vsubq_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmulq_laneq_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_f32(v266, vmulq_f32(*(float32x4_t *)(v203 + 32), vsubq_f32(vminq_f32(v266, *(float32x4_t *)(v203 + 256)), v266))), v262), v267), (float32x4_t)v202, 3), v262), v267), (float32x4_t)v202)));
        }
        while (v201 < v10);
      }
      ++v8;
      v11 += v13;
      v12 += v14;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcContrastBezierRGB::GetDOD(HgcContrastBezierRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 1)
  {
    if ((*(int (**)(HgcContrastBezierRGB *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v5, v4, v7);
    }
    v6 = &HGRectInfinite;
    return *(_QWORD *)v6;
  }
  if (a3)
  {
    v6 = &HGRectNull;
    return *(_QWORD *)v6;
  }
  return v5;
}

uint64_t HgcContrastBezierRGB::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, 1u);
    DOD = HGRenderer::GetDOD(a2, Input);
    v9 = v8;
    if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      return HGRectGrow(DOD, v9, v10);
    }
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)&a4.var0;
  }
  return DOD;
}

void HgcContrastBezierRGB::HgcContrastBezierRGB(HgcContrastBezierRGB *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65685B0;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(int32x4_t *)(v3 + 48) = vdupq_n_s32(0x358637BDu);
  *(_OWORD *)(v3 + 64) = xmmword_1B3051BC0;
  *(_OWORD *)(v3 + 80) = xmmword_1B3051880;
  *(_OWORD *)(v3 + 96) = xmmword_1B35581A0;
  *(_OWORD *)(v3 + 112) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 128) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 144) = xmmword_1B3051310;
  *(_OWORD *)(v3 + 160) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 176) = xmmword_1B35581B0;
  *(_OWORD *)(v3 + 192) = xmmword_1B35581C0;
  *(_OWORD *)(v3 + 208) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 224) = xmmword_1B3050F70;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 256) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcContrastBezierRGB *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CD27A8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcContrastBezierRGB::~HgcContrastBezierRGB(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65685B0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B2834900);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcContrastBezierRGB::~HgcContrastBezierRGB(this);
  HGObject::operator delete(v1);
}

uint64_t HgcContrastBezierRGB::SetParameter(HgcContrastBezierRGB *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;
  int32x4_t v10;
  uint64_t v11;
  int32x4_t v12;

  switch((_DWORD)a2)
  {
    case 2:
      v9 = *((_QWORD *)this + 51);
      if (*(float *)(v9 + 32) != a3.n128_f32[0]
        || *(float *)(v9 + 36) != a3.n128_f32[0]
        || *(float *)(v9 + 40) != a3.n128_f32[0]
        || *(float *)(v9 + 44) != 0.0)
      {
        v10 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
        v10.i32[2] = a3.n128_u32[0];
        a3.n128_f32[1] = a4;
        *(int32x4_t *)(v9 + 32) = v10;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        *(__n128 *)(v9 + 304) = a3;
        goto LABEL_19;
      }
      return 0;
    case 1:
      v11 = *((_QWORD *)this + 51);
      if (*(float *)(v11 + 16) != a3.n128_f32[0]
        || *(float *)(v11 + 20) != a3.n128_f32[0]
        || *(float *)(v11 + 24) != a3.n128_f32[0]
        || *(float *)(v11 + 28) != 0.0)
      {
        v12 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
        v12.i32[2] = a3.n128_u32[0];
        a3.n128_f32[1] = a4;
        *(int32x4_t *)(v11 + 16) = v12;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        *(__n128 *)(v11 + 288) = a3;
        goto LABEL_19;
      }
      return 0;
    case 0:
      v7 = *((_QWORD *)this + 51);
      if (*(float *)v7 != a3.n128_f32[0]
        || *(float *)(v7 + 4) != a3.n128_f32[0]
        || *(float *)(v7 + 8) != a3.n128_f32[0]
        || *(float *)(v7 + 12) != a3.n128_f32[0])
      {
        v8 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
        a3.n128_f32[1] = a4;
        *(int32x4_t *)v7 = v8;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        *(__n128 *)(v7 + 272) = a3;
LABEL_19:
        HGNode::ClearBits((HGNode *)this, a2, a7);
        return 1;
      }
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcContrastBezierRGB::GetParameter(HgcContrastBezierRGB *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  uint64_t result;

  switch(a2)
  {
    case 2:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[76];
      a3[1] = v5[77];
      a3[2] = v5[78];
      v4 = v5 + 79;
      goto LABEL_7;
    case 1:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[72];
      a3[1] = v6[73];
      a3[2] = v6[74];
      v4 = v6 + 75;
      goto LABEL_7;
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[68];
      a3[1] = v3[69];
      a3[2] = v3[70];
      v4 = v3 + 71;
LABEL_7:
      result = 0;
      a3[3] = *v4;
      return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcContrastLuma::GetProgram(HgcContrastLuma *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000065e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.2989999950, 0.5870000124, 0.1140000001, 0.000000000);\n"
             "    const half4 c1 = half4(0.5960000157, -0.2750000060, -0.3210000098, 0.000000000);\n"
             "    const half4 c2 = half4(0.2119999975, -0.5230000019, 0.3109999895, 0.000000000);\n"
             "    const half4 c3 = half4(1.000000000, -1.106999993, 1.703999996, 0.000000000);\n"
             "    const half4 c4 = half4(1.000000000, 0.9559999704, 0.6209999919, 0.000000000);\n"
             "    const half4 c5 = half4(1.000000000, -0.2720000148, -0.6470000148, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r2.x = dot(r1.xyz, c0.xyz);\n"
             "    r2.y = dot(r1.xyz, c1.xyz);\n"
             "    r2.z = dot(r1.xyz, c2.xyz);\n"
             "    r2.x = mix(half(hg_Params[0].x), r2.x, half(hg_Params[1].x));\n"
             "    r1.z = dot(r2.xyz, c3.xyz);\n"
             "    r1.x = dot(r2.xyz, c4.xyz);\n"
             "    r1.y = dot(r2.xyz, c5.xyz);\n"
             "    r2.xyz = fmax(r1.xyz, c5.www);\n"
             "    r2.xyz = mix(r1.xyz, r2.xyz, half3(hg_Params[3].xyz));\n"
             "    r1.xyz = fmin(r2.xyz, c5.xxx);\n"
             "    r2.xyz = mix(r2.xyz, r1.xyz, half3(hg_Params[4].xyz));\n"
             "    r2.w = r0.w;\n"
             "    r2.xyz = r2.xyz*r0.www;\n"
             "    output.color0 = mix(float4(r0), float4(r2), hg_Params[2]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e7b7ef63:1f75403f:fcd380dc:4a8f4b11\n"
             "//SIG=00400000:00000001:00000001:00000001:0006:0005:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000063a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.2989999950, 0.5870000124, 0.1140000001, 0.000000000);\n"
             "    const float4 c1 = float4(0.5960000157, -0.2750000060, -0.3210000098, 0.000000000);\n"
             "    const float4 c2 = float4(0.2119999975, -0.5230000019, 0.3109999895, 0.000000000);\n"
             "    const float4 c3 = float4(1.000000000, -1.106999993, 1.703999996, 0.000000000);\n"
             "    const float4 c4 = float4(1.000000000, 0.9559999704, 0.6209999919, 0.000000000);\n"
             "    const float4 c5 = float4(1.000000000, -0.2720000148, -0.6470000148, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r2.x = dot(r1.xyz, c0.xyz);\n"
             "    r2.y = dot(r1.xyz, c1.xyz);\n"
             "    r2.z = dot(r1.xyz, c2.xyz);\n"
             "    r2.x = mix(hg_Params[0].x, r2.x, hg_Params[1].x);\n"
             "    r1.z = dot(r2.xyz, c3.xyz);\n"
             "    r1.x = dot(r2.xyz, c4.xyz);\n"
             "    r1.y = dot(r2.xyz, c5.xyz);\n"
             "    r2.xyz = fmax(r1.xyz, c5.www);\n"
             "    r2.xyz = mix(r1.xyz, r2.xyz, hg_Params[3].xyz);\n"
             "    r1.xyz = fmin(r2.xyz, c5.xxx);\n"
             "    r2.xyz = mix(r2.xyz, r1.xyz, hg_Params[4].xyz);\n"
             "    r2.w = r0.w;\n"
             "    r2.xyz = r2.xyz*r0.www;\n"
             "    output.color0 = mix(r0, r2, hg_Params[2]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6eafd8e8:89bd116a:656e9665:d1839915\n"
             "//SIG=00000000:00000001:00000001:00000000:0006:0005:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006c6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.2989999950, 0.5870000124, 0.1140000001, 0.000000000);\n"
           "    const mediump vec4 c1 = vec4(0.5960000157, -0.2750000060, -0.3210000098, 0.000000000);\n"
           "    const mediump vec4 c2 = vec4(0.2119999975, -0.5230000019, 0.3109999895, 0.000000000);\n"
           "    const mediump vec4 c3 = vec4(1.000000000, -1.106999993, 1.703999996, 0.000000000);\n"
           "    const mediump vec4 c4 = vec4(1.000000000, 0.9559999704, 0.6209999919, 0.000000000);\n"
           "    const mediump vec4 c5 = vec4(1.000000000, -0.2720000148, -0.6470000148, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r2.x = dot(r1.xyz, c0.xyz);\n"
           "    r2.y = dot(r1.xyz, c1.xyz);\n"
           "    r2.z = dot(r1.xyz, c2.xyz);\n"
           "    r2.x = mix(hg_ProgramLocal0.x, r2.x, hg_ProgramLocal1.x);\n"
           "    r1.z = dot(r2.xyz, c3.xyz);\n"
           "    r1.x = dot(r2.xyz, c4.xyz);\n"
           "    r1.y = dot(r2.xyz, c5.xyz);\n"
           "    r2.xyz = max(r1.xyz, c5.www);\n"
           "    r2.xyz = mix(r1.xyz, r2.xyz, hg_ProgramLocal3.xyz);\n"
           "    r1.xyz = min(r2.xyz, c5.xxx);\n"
           "    r2.xyz = mix(r2.xyz, r1.xyz, hg_ProgramLocal4.xyz);\n"
           "    r2.w = r0.w;\n"
           "    r2.xyz = r2.xyz*r0.www;\n"
           "    gl_FragColor = mix(r0, r2, hg_ProgramLocal2);\n"
           "}\n"
           "//MD5=a902954f:31d8ce2e:fdaac8d6:07d506fb\n"
           "//SIG=00000000:00000001:00000001:00000000:0006:0005:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcContrastLuma::InitProgramDescriptor(HgcContrastLuma *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcContrastLuma_hgc_visible", "//Metal1.0     \n//LEN=0000000513\n[[ visible ]] FragmentOut HgcContrastLuma_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.2989999950, 0.5870000124, 0.1140000001, 0.000000000);\n"
    "    const float4 c1 = float4(0.5960000157, -0.2750000060, -0.3210000098, 0.000000000);\n"
    "    const float4 c2 = float4(0.2119999975, -0.5230000019, 0.3109999895, 0.000000000);\n"
    "    const float4 c3 = float4(1.000000000, -1.106999993, 1.703999996, 0.000000000);\n"
    "    const float4 c4 = float4(1.000000000, 0.9559999704, 0.6209999919, 0.000000000);\n"
    "    const float4 c5 = float4(1.000000000, -0.2720000148, -0.6470000148, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r2.x = dot(r1.xyz, c0.xyz);\n"
    "    r2.y = dot(r1.xyz, c1.xyz);\n"
    "    r2.z = dot(r1.xyz, c2.xyz);\n"
    "    r2.x = mix(hg_Params[0].x, r2.x, hg_Params[1].x);\n"
    "    r1.z = dot(r2.xyz, c3.xyz);\n"
    "    r1.x = dot(r2.xyz, c4.xyz);\n"
    "    r1.y = dot(r2.xyz, c5.xyz);\n"
    "    r2.xyz = fmax(r1.xyz, c5.www);\n"
    "    r2.xyz = mix(r1.xyz, r2.xyz, hg_Params[3].xyz);\n"
    "    r1.xyz = fmin(r2.xyz, c5.xxx);\n"
    "    r2.xyz = mix(r2.xyz, r1.xyz, hg_Params[4].xyz);\n"
    "    r2.w = r0.w;\n"
    "    r2.xyz = r2.xyz*r0.www;\n"
    "    output.color0 = mix(r0, r2, hg_Params[2]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CD2ABC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcContrastLuma");
}

void sub_1B2CD2ACC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CD2BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CD2C0C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CD2C04);
}

_QWORD *HgcContrastLuma::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcContrastLuma [hgc1]");
}

uint64_t HgcContrastLuma::BindTexture(HgcContrastLuma *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcContrastLuma::Bind(HgcContrastLuma *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HgcContrastLuma *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcContrastLuma::RenderTile(HgcContrastLuma *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int64x2_t v48;
  float32x4_t v49;
  int64x2_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x4_t v81;
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int8x16_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int64x2_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 6);
    v8 = 16 * *((int *)a2 + 22);
    do
    {
      if (v4 < 3)
      {
        LODWORD(v80) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = *(float32x4_t *)(v6 + v9);
          v12 = *(float32x4_t *)(v6 + v9 + 16);
          v13 = *(float32x4_t *)(v6 + v9 + 32);
          v14 = *((_QWORD *)this + 51);
          v16 = *(float32x4_t *)(v14 + 64);
          v15 = *(float32x4_t *)(v14 + 80);
          v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), v15);
          v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
          v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
          v20 = *(float32x4_t *)(v14 + 96);
          v21 = *(float32x4_t *)(v14 + 112);
          v22 = vmulq_f32(vrecpeq_f32(v17), v20);
          v23 = vmulq_f32(vrecpeq_f32(v18), v20);
          v24 = vmulq_f32(vrecpeq_f32(v19), v20);
          v25 = vmulq_f32(v11, vmulq_f32(v22, vrecpsq_f32(v22, v17)));
          v26 = vmulq_f32(v12, vmulq_f32(v23, vrecpsq_f32(v23, v18)));
          v27 = vmulq_f32(v13, vmulq_f32(v24, vrecpsq_f32(v24, v19)));
          v28 = vmulq_f32(v25, v21);
          v29 = vmulq_f32(v26, v21);
          v30 = vmulq_f32(v21, v27);
          v31 = *(float32x4_t *)(v14 + 128);
          v32 = *(int8x16_t *)(v14 + 144);
          v33 = vmulq_f32(v25, v31);
          v34 = vmulq_f32(v26, v31);
          v35 = vmulq_f32(v27, v31);
          v36 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v11, 4uLL), vaddq_f32(v35, (float32x4_t)vrev64q_s32((int32x4_t)v35)));
          v38 = *(float32x4_t *)(v14 + 160);
          v37 = *(float32x4_t *)(v14 + 176);
          v39 = vmulq_f32(v25, v38);
          v40 = vmulq_f32(v26, v38);
          v41 = vmulq_f32(v27, v38);
          v28.i64[0] = vbslq_s8(v32, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v28, 1), vaddq_f32(v28, (float32x4_t)vrev64q_s32((int32x4_t)v28))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v11, 4uLL), vaddq_f32(v33, (float32x4_t)vrev64q_s32((int32x4_t)v33)))).u64[0];
          v29.i64[0] = vbslq_s8(v32, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v29, 1), vaddq_f32(v29, (float32x4_t)vrev64q_s32((int32x4_t)v29))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v11, 4uLL), vaddq_f32(v34, (float32x4_t)vrev64q_s32((int32x4_t)v34)))).u64[0];
          v30.i64[0] = vbslq_s8(v32, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v30, 1), vaddq_f32(v30, (float32x4_t)vrev64q_s32((int32x4_t)v30))), v36).u64[0];
          v28.i64[1] = vaddq_f32(v39, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v39, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v11, *(int8x16_t *)&v39, 0xCuLL))).i64[1];
          v29.i64[1] = vaddq_f32(v40, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v40, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v11, *(int8x16_t *)&v40, 0xCuLL))).i64[1];
          v30.i64[1] = vaddq_f32(v41, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v41, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v11, *(int8x16_t *)&v41, 0xCuLL))).i64[1];
          v42 = *(float32x4_t *)(v14 + 16);
          v43 = (int8x16_t)vaddq_f32(*(float32x4_t *)v14, vmulq_f32(v42, vsubq_f32(v29, *(float32x4_t *)v14)));
          v44 = (int8x16_t)vaddq_f32(*(float32x4_t *)v14, vmulq_f32(v42, vsubq_f32(v30, *(float32x4_t *)v14)));
          v45 = (float32x4_t)vbslq_s8(v32, (int8x16_t)vaddq_f32(*(float32x4_t *)v14, vmulq_f32(v42, vsubq_f32(v28, *(float32x4_t *)v14))), (int8x16_t)v28);
          v46 = (float32x4_t)vbslq_s8(v32, v43, (int8x16_t)v29);
          v47 = (float32x4_t)vbslq_s8(v32, v44, (int8x16_t)v30);
          v48 = (int64x2_t)vmulq_f32(v37, v45);
          v49 = vmulq_f32(v37, v46);
          v50 = (int64x2_t)vmulq_f32(v37, v47);
          v51 = *(float32x4_t *)(v14 + 192);
          v52 = *(float32x4_t *)(v14 + 208);
          v53 = vmulq_f32(v51, v45);
          v54 = vmulq_f32(v51, v46);
          v55 = vmulq_f32(v51, v47);
          v34.i64[0] = vrev64q_s32((int32x4_t)v53).u64[0];
          v56.i64[0] = vrev64q_s32((int32x4_t)v54).u64[0];
          v57 = (float32x4_t)vzip2q_s64((int64x2_t)v53, v48);
          v34.i64[1] = vextq_s8(*(int8x16_t *)&v11, *(int8x16_t *)&v48, 0xCuLL).i64[1];
          v53.i64[1] = v48.i64[0];
          v58 = (float32x4_t)vzip2q_s64((int64x2_t)v54, (int64x2_t)v49);
          v56.i64[1] = vextq_s8(*(int8x16_t *)&v11, *(int8x16_t *)&v49, 0xCuLL).i64[1];
          v54.i64[1] = v49.i64[0];
          v49.i64[0] = vrev64q_s32((int32x4_t)v55).u64[0];
          v49.i64[1] = vextq_s8(*(int8x16_t *)&v11, *(int8x16_t *)&v50, 0xCuLL).i64[1];
          v59 = (float32x4_t)vzip2q_s64((int64x2_t)v55, v50);
          v55.i64[1] = v50.i64[0];
          v60 = vmulq_f32(v52, v45);
          v61 = vmulq_f32(v52, v46);
          v62 = vmulq_f32(v52, v47);
          v63 = (int8x16_t)vaddq_f32(v59, vaddq_f32(v55, v49));
          v64 = *(int8x16_t *)(v14 + 224);
          v65 = *(float32x4_t *)(v14 + 240);
          v66 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 4uLL), vaddq_f32(v60, (float32x4_t)vrev64q_s32((int32x4_t)v60))), (int8x16_t)vaddq_f32(v57, vaddq_f32(v53, v34)));
          v67 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL), vaddq_f32(v61, (float32x4_t)vrev64q_s32((int32x4_t)v61))), (int8x16_t)vaddq_f32(v58, vaddq_f32(v54, v56)));
          v68 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 4uLL), vaddq_f32(v62, (float32x4_t)vrev64q_s32((int32x4_t)v62))), v63);
          v69 = vsubq_f32(vmaxq_f32(v66, v65), v66);
          v70 = vsubq_f32(vmaxq_f32(v67, v65), v67);
          v71 = vsubq_f32(vmaxq_f32(v68, v65), v68);
          v73 = *(float32x4_t *)(v14 + 32);
          v72 = *(float32x4_t *)(v14 + 48);
          v74 = vaddq_f32(vmulq_f32(v72, v69), v66);
          v75 = vaddq_f32(vmulq_f32(v72, v70), v67);
          v76 = vaddq_f32(vmulq_f32(v72, v71), v68);
          v77 = *(float32x4_t *)(v14 + 256);
          v78 = *(int8x16_t *)(v14 + 272);
          v79 = (float32x4_t *)(v5 + v9);
          *v79 = vaddq_f32(v11, vmulq_f32(v73, vsubq_f32((float32x4_t)vbslq_s8(v78, (int8x16_t)v11, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v78, (int8x16_t)v11, (int8x16_t)vaddq_f32(v74, vmulq_f32(v16, vsubq_f32(vminq_f32(v74, v77), v74)))), v11, 3)), v11)));
          v79[1] = vaddq_f32(v12, vmulq_f32(v73, vsubq_f32((float32x4_t)vbslq_s8(v78, (int8x16_t)v12, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v78, (int8x16_t)v12, (int8x16_t)vaddq_f32(v75, vmulq_f32(v16, vsubq_f32(vminq_f32(v75, v77), v75)))), v12, 3)), v12)));
          v79[2] = vaddq_f32(v13, vmulq_f32(v73, vsubq_f32((float32x4_t)vbslq_s8(v78, (int8x16_t)v13, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v78, (int8x16_t)v13, (int8x16_t)vaddq_f32(v76, vmulq_f32(v16, vsubq_f32(vminq_f32(v76, v77), v76)))), v13, 3)), v13)));
          v10 -= 3;
          v9 += 48;
        }
        while (v4 + v10 > 2);
        LODWORD(v80) = -v10;
      }
      if ((int)v80 < v4)
      {
        v80 = v80;
        do
        {
          v81 = *(float32x4_t *)(v6 + 16 * v80);
          v82 = *((_QWORD *)this + 51);
          v83 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 3), *(float32x4_t *)(v82 + 80));
          v84 = vmulq_f32(vrecpeq_f32(v83), *(float32x4_t *)(v82 + 96));
          v85 = vmulq_f32(v81, vmulq_f32(v84, vrecpsq_f32(v84, v83)));
          v86 = vmulq_f32(*(float32x4_t *)(v82 + 112), v85);
          v87 = *(int8x16_t *)(v82 + 144);
          v88 = vmulq_f32(v85, *(float32x4_t *)(v82 + 128));
          v86.i64[0] = vbslq_s8(v87, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v86, 1), vaddq_f32(v86, (float32x4_t)vrev64q_s32((int32x4_t)v86))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v88, (int8x16_t)v81, 4uLL), vaddq_f32(v88, (float32x4_t)vrev64q_s32((int32x4_t)v88)))).u64[0];
          v89 = vmulq_f32(v85, *(float32x4_t *)(v82 + 160));
          v86.i64[1] = vaddq_f32(v89, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v89, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v81, *(int8x16_t *)&v89, 0xCuLL))).i64[1];
          v90 = (float32x4_t)vbslq_s8(v87, (int8x16_t)vaddq_f32(*(float32x4_t *)v82, vmulq_f32(*(float32x4_t *)(v82 + 16), vsubq_f32(v86, *(float32x4_t *)v82))), (int8x16_t)v86);
          v91 = (int64x2_t)vmulq_f32(*(float32x4_t *)(v82 + 176), v90);
          v92 = vmulq_f32(*(float32x4_t *)(v82 + 192), v90);
          v93.i64[0] = vrev64q_s32((int32x4_t)v92).u64[0];
          v93.i64[1] = vextq_s8(*(int8x16_t *)&v81, *(int8x16_t *)&v91, 0xCuLL).i64[1];
          v94 = (float32x4_t)vzip2q_s64((int64x2_t)v92, v91);
          v92.i64[1] = v91.i64[0];
          v95 = vmulq_f32(*(float32x4_t *)(v82 + 208), v90);
          v96 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v82 + 224), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v95, (int8x16_t)v95, 4uLL), vaddq_f32(v95, (float32x4_t)vrev64q_s32((int32x4_t)v95))), (int8x16_t)vaddq_f32(v94, vaddq_f32(v92, v93)));
          v97 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v82 + 48), vsubq_f32(vmaxq_f32(v96, *(float32x4_t *)(v82 + 240)), v96)), v96);
          *(float32x4_t *)(v5 + 16 * v80++) = vaddq_f32(v81, vmulq_f32(*(float32x4_t *)(v82 + 32), vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v82 + 272), (int8x16_t)v81, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v82 + 272), (int8x16_t)v81, (int8x16_t)vaddq_f32(v97, vmulq_f32(*(float32x4_t *)(v82 + 64), vsubq_f32(vminq_f32(v97, *(float32x4_t *)(v82 + 256)), v97)))), v81, 3)), v81)));
        }
        while (v80 < v4);
      }
      ++v3;
      v5 += v7;
      v6 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcContrastLuma::GetDOD(HgcContrastLuma *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcContrastLuma::GetROI(HgcContrastLuma *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcContrastLuma::HgcContrastLuma(HgcContrastLuma *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6568818;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(int32x4_t *)(v3 + 80) = vdupq_n_s32(0x358637BDu);
  *(_OWORD *)(v3 + 96) = xmmword_1B3051BC0;
  *(_OWORD *)(v3 + 112) = xmmword_1B30522A0;
  *(_OWORD *)(v3 + 128) = xmmword_1B3558120;
  *(_OWORD *)(v3 + 144) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 160) = xmmword_1B3558130;
  *(_OWORD *)(v3 + 176) = xmmword_1B3558160;
  *(_OWORD *)(v3 + 192) = xmmword_1B3558170;
  *(_OWORD *)(v3 + 208) = xmmword_1B3558140;
  *(_OWORD *)(v3 + 224) = xmmword_1B3050FF0;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 256) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 272) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CD337C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcContrastLuma::~HgcContrastLuma(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6568818;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4055B0EC01);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcContrastLuma::~HgcContrastLuma(this);
  HGObject::operator delete(v1);
}

uint64_t HgcContrastLuma::SetParameter(HgcContrastLuma *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  __n128 *v10;
  int32x4_t v11;
  __n128 *v12;
  int32x4_t v13;
  __n128 *v14;
  int32x4_t v15;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_28;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_28;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == a3.n128_f32[0]
        && v10[2].n128_f32[1] == a3.n128_f32[0]
        && v10[2].n128_f32[2] == a3.n128_f32[0]
        && v10[2].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v11 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      v10[2] = (__n128)v11;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[18] = a3;
      goto LABEL_28;
    case 3:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[3].n128_f32[0] == a3.n128_f32[0]
        && v12[3].n128_f32[1] == a3.n128_f32[0]
        && v12[3].n128_f32[2] == a3.n128_f32[0]
        && v12[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v13.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v12[3] = (__n128)v13;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[19] = a3;
      goto LABEL_28;
    case 4:
      v14 = (__n128 *)*((_QWORD *)this + 51);
      if (v14[4].n128_f32[0] == a3.n128_f32[0]
        && v14[4].n128_f32[1] == a3.n128_f32[0]
        && v14[4].n128_f32[2] == a3.n128_f32[0]
        && v14[4].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v15 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v15.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v14[4] = (__n128)v15;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v14[20] = a3;
LABEL_28:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcContrastLuma::GetParameter(HgcContrastLuma *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_7;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_7;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[72];
      a3[1] = v6[73];
      a3[2] = v6[74];
      v4 = v6 + 75;
      goto LABEL_7;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[76];
      a3[1] = v7[77];
      a3[2] = v7[78];
      v4 = v7 + 79;
      goto LABEL_7;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[80];
      a3[1] = v8[81];
      a3[2] = v8[82];
      v4 = v8 + 83;
LABEL_7:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcContrastRGB::GetProgram(HgcContrastRGB *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000444\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(9.999999975e-07, 0.000000000, 1.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = fmax(r0.w, c0.x);\n"
             "    r1.x = 1.00000h / r1.x;\n"
             "    r1.xyz = r0.xyz*r1.xxx + -half3(hg_Params[0].xxx);\n"
             "    r1.xyz = r1.xyz*half3(hg_Params[1].xyz) + half3(hg_Params[0].xxx);\n"
             "    r2.xyz = fmax(r1.xyz, c0.yyy);\n"
             "    r1.xyz = mix(r1.xyz, r2.xyz, half3(hg_Params[3].xyz));\n"
             "    r2.xyz = fmin(r1.xyz, c0.zzz);\n"
             "    r1.xyz = mix(r1.xyz, r2.xyz, half3(hg_Params[4].xyz));\n"
             "    r1.w = r0.w;\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    output.color0 = mix(float4(r0), float4(r1), hg_Params[2]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=503c73b4:deb1fa29:855b3f17:aadc9a98\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0005:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000040d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(9.999999975e-07, 0.000000000, 1.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = fmax(r0.w, c0.x);\n"
             "    r1.x = 1.00000f / r1.x;\n"
             "    r1.xyz = r0.xyz*r1.xxx + -hg_Params[0].xxx;\n"
             "    r1.xyz = r1.xyz*hg_Params[1].xyz + hg_Params[0].xxx;\n"
             "    r2.xyz = fmax(r1.xyz, c0.yyy);\n"
             "    r1.xyz = mix(r1.xyz, r2.xyz, hg_Params[3].xyz);\n"
             "    r2.xyz = fmin(r1.xyz, c0.zzz);\n"
             "    r1.xyz = mix(r1.xyz, r2.xyz, hg_Params[4].xyz);\n"
             "    r1.w = r0.w;\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    output.color0 = mix(r0, r1, hg_Params[2]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e5ebd3e1:36111a4a:f2c8d442:47a74aaf\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0005:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000489\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(9.999999975e-07, 0.000000000, 1.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.x = max(r0.w, c0.x);\n"
           "    r1.x = 1.00000 / r1.x;\n"
           "    r1.xyz = r0.xyz*r1.xxx + -hg_ProgramLocal0.xxx;\n"
           "    r1.xyz = r1.xyz*hg_ProgramLocal1.xyz + hg_ProgramLocal0.xxx;\n"
           "    r2.xyz = max(r1.xyz, c0.yyy);\n"
           "    r1.xyz = mix(r1.xyz, r2.xyz, hg_ProgramLocal3.xyz);\n"
           "    r2.xyz = min(r1.xyz, c0.zzz);\n"
           "    r1.xyz = mix(r1.xyz, r2.xyz, hg_ProgramLocal4.xyz);\n"
           "    r1.w = r0.w;\n"
           "    r1.xyz = r1.xyz*r0.www;\n"
           "    gl_FragColor = mix(r0, r1, hg_ProgramLocal2);\n"
           "}\n"
           "//MD5=ec125030:8843647e:90165e3b:973fbe25\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0005:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcContrastRGB::InitProgramDescriptor(HgcContrastRGB *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcContrastRGB_hgc_visible", "//Metal1.0     \n//LEN=00000002e5\n[[ visible ]] FragmentOut HgcContrastRGB_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(9.999999975e-07, 0.000000000, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.x = fmax(r0.w, c0.x);\n"
    "    r1.x = 1.00000f / r1.x;\n"
    "    r1.xyz = r0.xyz*r1.xxx + -hg_Params[0].xxx;\n"
    "    r1.xyz = r1.xyz*hg_Params[1].xyz + hg_Params[0].xxx;\n"
    "    r2.xyz = fmax(r1.xyz, c0.yyy);\n"
    "    r1.xyz = mix(r1.xyz, r2.xyz, hg_Params[3].xyz);\n"
    "    r2.xyz = fmin(r1.xyz, c0.zzz);\n"
    "    r1.xyz = mix(r1.xyz, r2.xyz, hg_Params[4].xyz);\n"
    "    r1.w = r0.w;\n"
    "    r1.xyz = r1.xyz*r0.www;\n"
    "    output.color0 = mix(r0, r1, hg_Params[2]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2CD377C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcContrastRGB");
}

void sub_1B2CD378C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2CD388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2CD38CC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2CD38C4);
}

_QWORD *HgcContrastRGB::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcContrastRGB [hgc1]");
}

uint64_t HgcContrastRGB::BindTexture(HgcContrastRGB *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcContrastRGB::Bind(HgcContrastRGB *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HgcContrastRGB *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcContrastRGB::RenderTile(HgcContrastRGB *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t *v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v53) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v12 = *(float32x4_t *)(v6 + v10 - 32);
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v13 = *(float32x4_t *)(v6 + v10);
          v14 = *(float32x4_t *)(v6 + v10 + 16);
          v15 = *((_QWORD *)this + 51);
          v17 = *(float32x4_t *)(v15 + 64);
          v16 = *(float32x4_t *)(v15 + 80);
          v18 = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 0xCuLL), v16);
          v19 = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 0xCuLL), v16);
          v20 = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL), v16);
          v21 = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), v16);
          v22 = *(float32x4_t *)(v15 + 96);
          v23 = *(float32x4_t *)(v15 + 112);
          v24 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v18), v22), v23);
          v25 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v19), v22), v23);
          v26 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v20), v22), v23);
          v27 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v21), v22), v23);
          v28 = *(float32x4_t *)(v15 + 128);
          v29 = *(float32x4_t *)(v15 + 144);
          v30 = vminq_f32(v24, v28);
          v31 = vminq_f32(v25, v28);
          v32 = vminq_f32(v26, v28);
          v33 = vminq_f32(v27, v28);
          v18.i32[0] = vmulq_f32(v30, vrecpsq_f32(v18, v30)).u32[0];
          v19.i32[0] = vmulq_f32(v31, vrecpsq_f32(v19, v31)).u32[0];
          v34 = *(float32x4_t *)(v15 + 16);
          v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15, 0);
          v36 = vaddq_f32(v35, vmulq_f32(v34, vsubq_f32(vmulq_n_f32(v12, v18.f32[0]), v35)));
          v37 = vaddq_f32(v35, vmulq_f32(v34, vsubq_f32(vmulq_n_f32(v11, v19.f32[0]), v35)));
          v38 = vaddq_f32(v35, vmulq_f32(v34, vsubq_f32(vmulq_n_f32(v13, vmulq_f32(v32, vrecpsq_f32(v20, v32)).f32[0]), v35)));
          v39 = vaddq_f32(v35, vmulq_f32(v34, vsubq_f32(vmulq_n_f32(v14, vmulq_f32(v33, vrecpsq_f32(v21, v33)).f32[0]), v35)));
          v40 = vmaxq_f32(v39, v29);
          v41 = vsubq_f32(vmaxq_f32(v36, v29), v36);
          v42 = vsubq_f32(vmaxq_f32(v37, v29), v37);
          v43 = vsubq_f32(vmaxq_f32(v38, v29), v38);
          v45 = *(float32x4_t *)(v15 + 32);
          v44 = *(float32x4_t *)(v15 + 48);
          v46 = vaddq_f32(v36, vmulq_f32(v41, v44));
          v47 = vaddq_f32(v37, vmulq_f32(v42, v44));
          v48 = vaddq_f32(v38, vmulq_f32(v43, v44));
          v49 = vaddq_f32(v39, vmulq_f32(v44, vsubq_f32(v40, v39)));
          v50 = *(float32x4_t *)(v15 + 160);
          v51 = *(int8x16_t *)(v15 + 176);
          v52 = (float32x4_t *)(v5 + v10);
          v52[-2] = vaddq_f32(v12, vmulq_f32(v45, vsubq_f32((float32x4_t)vbslq_s8(v51, (int8x16_t)v12, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v51, (int8x16_t)v12, (int8x16_t)vaddq_f32(v46, vmulq_f32(vsubq_f32(vminq_f32(v46, v50), v46), v17))), v12, 3)), v12)));
          v52[-1] = vaddq_f32(v11, vmulq_f32(v45, vsubq_f32((float32x4_t)vbslq_s8(v51, (int8x16_t)v11, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v51, (int8x16_t)v11, (int8x16_t)vaddq_f32(v47, vmulq_f32(vsubq_f32(vminq_f32(v47, v50), v47), v17))), v11, 3)), v11)));
          *v52 = vaddq_f32(v13, vmulq_f32(v45, vsubq_f32((float32x4_t)vbslq_s8(v51, (int8x16_t)v13, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v51, (int8x16_t)v13, (int8x16_t)vaddq_f32(v48, vmulq_f32(vsubq_f32(vminq_f32(v48, v50), v48), v17))), v13, 3)), v13)));
          v52[1] = vaddq_f32(v14, vmulq_f32(v45, vsubq_f32((float32x4_t)vbslq_s8(v51, (int8x16_t)v14, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v51, (int8x16_t)v14, (int8x16_t)vaddq_f32(v49, vmulq_f32(v17, vsubq_f32(vminq_f32(v49, v50), v49)))), v14, 3)), v14)));
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v53) = -v9;
      }
      if ((int)v53 < v4)
      {
        v53 = v53;
        do
        {
          v54 = *(float32x4_t *)(v6 + 16 * v53);
          v55 = *((_QWORD *)this + 51);
          v56 = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 0xCuLL), *(float32x4_t *)(v55 + 80));
          v57 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v56), *(float32x4_t *)(v55 + 96)), *(float32x4_t *)(v55 + 112)), *(float32x4_t *)(v55 + 128));
          v56.i32[0] = vmulq_f32(v57, vrecpsq_f32(v56, v57)).u32[0];
          v58 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55, 0);
          v59 = vaddq_f32(v58, vmulq_f32(*(float32x4_t *)(v55 + 16), vsubq_f32(vmulq_n_f32(v54, v56.f32[0]), v58)));
          v60 = vaddq_f32(v59, vmulq_f32(*(float32x4_t *)(v55 + 48), vsubq_f32(vmaxq_f32(v59, *(float32x4_t *)(v55 + 144)), v59)));
          *(float32x4_t *)(v5 + 16 * v53++) = vaddq_f32(v54, vmulq_f32(*(float32x4_t *)(v55 + 32), vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v55 + 176), (int8x16_t)v54, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v55 + 176), (int8x16_t)v54, (int8x16_t)vaddq_f32(v60, vmulq_f32(*(float32x4_t *)(v55 + 64), vsubq_f32(vminq_f32(v60, *(float32x4_t *)(v55 + 160)), v60)))), v54, 3)), v54)));
        }
        while (v53 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcContrastRGB::GetDOD(HgcContrastRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcContrastRGB::GetROI(HgcContrastRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcContrastRGB::HgcContrastRGB(HgcContrastRGB *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6568A80;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = xmmword_1B3052380;
  *(_OWORD *)(v3 + 96) = xmmword_1B3051540;
  *(_OWORD *)(v3 + 112) = xmmword_1B3051200;
  *(int32x4_t *)(v3 + 128) = vdupq_n_s32(0x7F7FFFFFu);
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 160) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 176) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2CD3E5C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcContrastRGB::~HgcContrastRGB(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6568A80;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40104B78CFLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcContrastRGB::~HgcContrastRGB(this);
  HGObject::operator delete(v1);
}

uint64_t HgcContrastRGB::SetParameter(HgcContrastRGB *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  __n128 *v9;
  int32x4_t v10;
  __n128 *v11;
  int32x4_t v12;
  __n128 *v13;
  int32x4_t v14;
  __n128 *v15;
  int32x4_t v16;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_28;
    case 1:
      v9 = (__n128 *)*((_QWORD *)this + 51);
      if (v9[1].n128_f32[0] == a3.n128_f32[0]
        && v9[1].n128_f32[1] == a3.n128_f32[0]
        && v9[1].n128_f32[2] == a3.n128_f32[0]
        && v9[1].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v10.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v9[1] = (__n128)v10;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v9[12] = a3;
      goto LABEL_28;
    case 2:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[2].n128_f32[0] == a3.n128_f32[0]
        && v11[2].n128_f32[1] == a3.n128_f32[0]
        && v11[2].n128_f32[2] == a3.n128_f32[0]
        && v11[2].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v12 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      v11[2] = (__n128)v12;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[13] = a3;
      goto LABEL_28;
    case 3:
      v13 = (__n128 *)*((_QWORD *)this + 51);
      if (v13[3].n128_f32[0] == a3.n128_f32[0]
        && v13[3].n128_f32[1] == a3.n128_f32[0]
        && v13[3].n128_f32[2] == a3.n128_f32[0]
        && v13[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v14 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v14.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v13[3] = (__n128)v14;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[14] = a3;
      goto LABEL_28;
    case 4:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[4].n128_f32[0] == a3.n128_f32[0]
        && v15[4].n128_f32[1] == a3.n128_f32[0]
        && v15[4].n128_f32[2] == a3.n128_f32[0]
        && v15[4].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v16 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v16.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v15[4] = (__n128)v16;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[15] = a3;
LABEL_28:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcContrastRGB::GetParameter(HgcContrastRGB *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_7;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[48];
      a3[1] = v5[49];
      a3[2] = v5[50];
      v4 = v5 + 51;
      goto LABEL_7;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[52];
      a3[1] = v6[53];
      a3[2] = v6[54];
      v4 = v6 + 55;
      goto LABEL_7;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[56];
      a3[1] = v7[57];
      a3[2] = v7[58];
      v4 = v7 + 59;
      goto LABEL_7;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[60];
      a3[1] = v8[61];
      a3[2] = v8[62];
      v4 = v8 + 63;
LABEL_7:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t LiHelium::createTextureHandleNode@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  HGBitmapLoader *v7;

  result = FxSupport::createTextureHandleNode(a1, a2, a3, a4, &v7);
  *a5 = v7;
  return result;
}

HGBitmapLoader *LiHelium::createBitmapNode@<X0>(PCBitmap **a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  HGBitmapLoader *result;
  HGBitmapLoader *v5;

  result = FxSupport::createBitmapNode(a1, a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t LiHelium::createTransformNode@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, float *a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t result;
  HGTransform *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  HGXForm *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if (PCMatrix44Tmpl<double>::is2Didentity((double *)a1))
  {
    result = *a2;
    *a5 = *a2;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  else
  {
    v11 = (HGTransform *)HGObject::operator new(0x90uLL);
    HGTransform::HGTransform(v11);
    v12 = *(_OWORD *)(a1 + 80);
    v30 = *(_OWORD *)(a1 + 64);
    v31 = v12;
    v13 = *(_OWORD *)(a1 + 112);
    v32 = *(_OWORD *)(a1 + 96);
    v33 = v13;
    v14 = *(_OWORD *)(a1 + 16);
    v25 = *(float64x2_t *)a1;
    v26 = v14;
    v15 = *(_OWORD *)(a1 + 48);
    v27 = *(_OWORD *)(a1 + 32);
    v16 = v25.f64[1];
    v17 = v26;
    v18 = *((_QWORD *)&v30 + 1);
    *(_QWORD *)&v25.f64[1] = v27;
    *(_QWORD *)&v26 = v30;
    v19 = *((_QWORD *)&v31 + 1);
    *((_QWORD *)&v26 + 1) = v32;
    *(float64_t *)&v27 = v16;
    *(_QWORD *)&v30 = v17;
    *((_QWORD *)&v30 + 1) = v15;
    v28 = v18;
    v29 = *((_QWORD *)&v32 + 1);
    *((_QWORD *)&v31 + 1) = v33;
    *(_QWORD *)&v32 = *((_QWORD *)&v17 + 1);
    *((_QWORD *)&v32 + 1) = *((_QWORD *)&v15 + 1);
    *(_QWORD *)&v33 = v19;
    (*(void (**)(HGTransform *, float64x2_t *))(*(_QWORD *)v11 + 72))(v11, &v25);
    v20 = (HGXForm *)HGObject::operator new(0x210uLL);
    HGXForm::HGXForm(v20);
    (*(void (**)(HGXForm *, HGTransform *))(*(_QWORD *)v20 + 576))(v20, v11);
    if (a3
      && (fabs(*(double *)(a1 + 96)) >= 0.0000001
       || fabs(*(double *)(a1 + 104)) >= 0.0000001
       || (v23 = 0.0,
           v24 = 0.0,
           PCMatrix44Tmpl<double>::singularValues22((float64x2_t *)a1, &v24, &v23),
           v21 = *(double *)(a1 + 120),
           v24 / v21 <= 1.0)
       && fabs(v24 / v21 + -1.0) >= 0.0000001
       || (v22 = v23 / v21, v22 <= 1.0) && fabs(v22 + -1.0) >= 0.0000001))
    {
      (*(void (**)(HGXForm *, _QWORD, float))(*(_QWORD *)v20 + 592))(v20, 0, 1.0);
      (*(void (**)(HGXForm *, float))(*(_QWORD *)v20 + 632))(v20, 0.0);
      (*(void (**)(HGXForm *, float, float))(*(_QWORD *)v20 + 600))(v20, *a4, a4[1]);
    }
    else
    {
      (*(void (**)(HGXForm *, _QWORD, float))(*(_QWORD *)v20 + 592))(v20, 0, 0.0);
    }
    if (*a2)
      (*(void (**)(HGXForm *, _QWORD))(*(_QWORD *)v20 + 120))(v20, 0);
    *a5 = v20;
    return (*(uint64_t (**)(HGTransform *))(*(_QWORD *)v11 + 24))(v11);
  }
  return result;
}

void sub_1B2CD4474()
{
  JUMPOUT(0x1B2CD44ACLL);
}

double PCMatrix44Tmpl<double>::singularValues22(float64x2_t *a1, double *a2, double *a3)
{
  float64x2_t v5;
  float64x2_t v6;
  int64x2_t v7;
  float64x2_t v8;
  int64x2_t v9;
  int v10;
  double result;
  PCException *exception;
  PCString v13;
  double v14;
  double v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = 0x3FF0000000000000;
  v22 = 0x3FF0000000000000;
  v17 = 0;
  v18 = 0;
  v5 = *a1;
  v6 = a1[2];
  v7 = (int64x2_t)vaddq_f64(vmulq_f64(v5, v5), vmulq_f64(v6, v6));
  v20 = 0u;
  v21 = 0u;
  v23 = 0u;
  v24 = 0u;
  v8 = vmulq_laneq_f64(v6, v6, 1);
  v9 = (int64x2_t)vaddq_f64(vmulq_laneq_f64(v5, v5, 1), v8);
  v16 = (int8x16_t)vzip1q_s64(v7, v9);
  v19 = v9;
  v14 = 0.0;
  v15 = 0.0;
  v10 = PCMatrix44Tmpl<double>::eigen22((uint64_t)&v16, (PCMath *)&v15, &v14, *(double *)v9.i64, v16, v8.f64[0], (int8x16_t)0);
  *a2 = sqrt(v15);
  result = sqrt(v14);
  *a3 = result;
  if (v10 <= 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v13, "singularValues22: failed to find real eigenvalues");
    PCException::PCException(exception, &v13);
  }
  return result;
}

void sub_1B2CD45C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t LiHelium::bitmapToTexture@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  if (*a1)
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, *a1);
  else
    result = 0;
  *a3 = result;
  return result;
}

uint64_t LiHelium::convertMotionBlendMode(int a1)
{
  if ((a1 - 2) > 0x2E)
    return 9;
  else
    return *(unsigned int *)&asc_1B35582E8[4 * a1 - 8];
}

unsigned int LiHelium::getBlurExtent(LiHelium *this, float a2)
{
  return vcvtps_s32_f32((float)((float)(powf(a2 + 1.0, 0.72) * 4.0) + -3.0) * 3.0);
}

uint64_t LiHelium::createBlurNode@<X0>(float a1@<S0>, float a2@<S1>, HGBlur **a3@<X8>)
{
  HGBlur *v7;

  v7 = (HGBlur *)HGObject::operator new(0x220uLL);
  HGBlur::HGBlur(v7);
  *a3 = v7;
  return (*(uint64_t (**)(HGBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v7 + 96))(v7, 0, a1, a2, 0.0, 0.0);
}

void sub_1B2CD4708(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHelium::setUpGLRenderer(HGGPURenderer *a1, uint64_t a2)
{
  int v2;
  PCICCTransferFunctionLUT *MetalContext;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;

  v2 = a2;
  (*(void (**)(HGGPURenderer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, 19, a2);
  MetalContext = (PCICCTransferFunctionLUT *)HGGPURenderer::GetMetalContext(a1);
  result = PCICCTransferFunctionLUT::getLUTEnd(MetalContext);
  if ((float)((float)*(unint64_t *)(result + 40) * 0.00000095367) <= 300.0)
  {
    if (v2 >= 28)
      v6 = 400;
    else
      v6 = 512;
    if (v2 >= 25)
      v7 = v6;
    else
      v7 = 800;
    return (*(uint64_t (**)(HGGPURenderer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, 18, v7);
  }
  return result;
}

void LiHelium::createExternallyOwnedTexture(ProGL *this@<X3>, uint64_t a2@<X0>, int a3@<W1>, int a4@<W2>, _QWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  int v11;
  _QWORD v12[2];

  ProGL::findContext(this, v12);
  v11 = HGFormatUtils::toGLInternalFormat(*(_DWORD *)(*(_QWORD *)a2 + 16));
  ProGL::createExternallyOwnedTexture((ProGL::ContextHandle *)v12, *(_DWORD *)(*(_QWORD *)a2 + 168), *(_DWORD *)(*(_QWORD *)a2 + 160), v11, a3, a4, a5, a6);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v12);
}

void sub_1B2CD4860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *LiRenderQueueTextureOwner::create@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t v5;

  v5 = a2;
  if (a2)
  {
    result = std::allocate_shared[abi:ne180100]<LiRenderQueueTextureOwner,std::allocator<LiRenderQueueTextureOwner>,HGRef<HGGLTexture> const&,HGRenderQueue *&,void>(result, &v5, &v4);
    *(_OWORD *)a3 = v4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

void LiRenderQueueTextureOwner::~LiRenderQueueTextureOwner(LiRenderQueueTextureOwner *this)
{
  uint64_t v2;
  HGGLTexture *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E6568CE8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    v3 = (HGGLTexture *)*((_QWORD *)this + 1);
    if (v3)
      (*(void (**)(_QWORD))(*(_QWORD *)v3 + 24))(*((_QWORD *)this + 1));
  }
  else
  {
    v3 = 0;
  }
  *((_QWORD *)this + 1) = 0;
  HGRenderQueue::DeleteHGGLTexture(*((HGRenderQueue **)this + 2), v3);
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

{
  LiRenderQueueTextureOwner::~LiRenderQueueTextureOwner(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t *LiHelium::getDefaultGPU@<X0>(LiHelium *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = HGComputeDeviceManager::GetGPUComputeDeviceList(this);
  v4 = *(_QWORD *)(*result + 8);
  *a2 = *(_QWORD *)*result;
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<LiRenderQueueTextureOwner,std::allocator<LiRenderQueueTextureOwner>,HGRef<HGGLTexture> const&,HGRenderQueue *&,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<LiRenderQueueTextureOwner>::__shared_ptr_emplace[abi:ne180100]<HGRef<HGGLTexture> const&,HGRenderQueue *&,std::allocator<LiRenderQueueTextureOwner>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B2CD4A10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<LiRenderQueueTextureOwner>::__shared_ptr_emplace[abi:ne180100]<HGRef<HGGLTexture> const&,HGRenderQueue *&,std::allocator<LiRenderQueueTextureOwner>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E6568D30;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *a3;
  a1[3] = &off_1E6568CE8;
  v5 = *a2;
  a1[4] = *a2;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  a1[5] = v4;
  return a1;
}

void sub_1B2CD4A84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LiRenderQueueTextureOwner>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6568D30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LiRenderQueueTextureOwner>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6568D30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<LiRenderQueueTextureOwner>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void LiRenderingTechnology::LiRenderingTechnology(LiRenderingTechnology *this)
{
  unsigned __int8 v2;
  uint64_t *v3;
  const char *v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)this = 8208;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 256;
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 3) = 0x1400000014;
  *((_WORD *)this + 16) = 1;
  *((_BYTE *)this + 34) = 0;
  *(_QWORD *)((char *)this + 36) = 0x600000002;
  *((_WORD *)this + 22) = 1;
  v3 = &projectFileUTIs_projectFileUTIs;
  if ((v2 & 1) == 0)
  {
    v3 = &projectFileUTIs_projectFileUTIs;
    if (v7)
    {
      LiRenderingTechnology::LiRenderingTechnology(void)::bitdepth = (uint64_t)getenv("MOTION_BITDEPTH");
      v3 = &projectFileUTIs_projectFileUTIs;
    }
  }
  v4 = (const char *)v3[434];
  if (!v4)
    goto LABEL_9;
  v5 = atoi(v4);
  if (v5 == 8)
  {
    v6 = 0;
    goto LABEL_10;
  }
  if (v5 == 16)
  {
LABEL_9:
    v6 = 2;
    goto LABEL_10;
  }
  if (v5 != 32)
  {
    printf("MOTION_BITDEPTH - invalid bitdepth, must either be 8, 16, or 32");
    goto LABEL_9;
  }
  v6 = 3;
LABEL_10:
  *((_DWORD *)this + 3) = v6;
}

uint64_t LiRenderingTechnology::getLogFxPlugRenderTimeEnabled(LiRenderingTechnology *this)
{
  return (*((unsigned __int8 *)this + 2) >> 5) & 1;
}

uint64_t LiRenderingTechnology::getLogLithium(LiRenderingTechnology *this)
{
  return *(unsigned __int8 *)this >> 7;
}

uint64_t LiRenderingTechnology::getDefocusIntersections(LiRenderingTechnology *this)
{
  return *((unsigned __int8 *)this + 16);
}

uint64_t LiRenderingTechnology::getShowDepth(LiRenderingTechnology *this)
{
  return *((unsigned __int8 *)this + 1) >> 7;
}

uint64_t LiRenderingTechnology::getUseHalfHeightFields(LiRenderingTechnology *this)
{
  return *((_BYTE *)this + 2) & 1;
}

uint64_t LiRenderingTechnology::getRasterizeEdges(LiRenderingTechnology *this)
{
  return *((unsigned __int8 *)this + 20);
}

uint64_t LiRenderingTechnology::setRasterizeEdges(uint64_t this, char a2)
{
  *(_BYTE *)(this + 20) = a2;
  return this;
}

int *LiRenderingTechnology::setFlagAtIndex(int *this, char a2, int a3)
{
  int v3;

  v3 = *this & ~(1 << a2);
  if (a3)
    v3 = *this | (1 << a2);
  *this = v3;
  return this;
}

uint64_t LiRenderingTechnology::getSharpText(LiRenderingTechnology *this)
{
  return *((unsigned __int8 *)this + 32);
}

uint64_t LiRenderingTechnology::getDebugShaders(LiRenderingTechnology *this)
{
  return *((unsigned __int8 *)this + 33);
}

uint64_t LiRenderingTechnology::setDebugShaders(uint64_t this, char a2)
{
  *(_BYTE *)(this + 33) = a2;
  return this;
}

uint64_t LiRenderingTechnology::getPrintShaders(LiRenderingTechnology *this)
{
  return *((unsigned __int8 *)this + 34);
}

uint64_t LiRenderingTechnology::setPrintShaders(uint64_t this, char a2)
{
  *(_BYTE *)(this + 34) = a2;
  return this;
}

uint64_t LiRenderingTechnology::getEnableMetalRendering(LiRenderingTechnology *this)
{
  return *((unsigned __int8 *)this + 44);
}

uint64_t LiRenderingTechnology::setEnableMetalRendering(uint64_t this, char a2)
{
  *(_BYTE *)(this + 44) = a2;
  return this;
}

uint64_t LiRenderingTechnology::getEnableHgc2Shaders(LiRenderingTechnology *this)
{
  return *((unsigned __int8 *)this + 45);
}

uint64_t LiRenderingTechnology::setEnableHgc2Shaders(uint64_t this, char a2)
{
  *(_BYTE *)(this + 45) = a2;
  return this;
}

void LiAgent::LiAgent(LiAgent *this, const LiAgent *a2)
{
  uint64_t v4;
  CGColorSpace *v5;
  uint64_t v6;

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *(_OWORD *)((char *)this + 60) = *(_OWORD *)((char *)a2 + 60);
  *((_BYTE *)this + 76) = *((_BYTE *)a2 + 76);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  LiClipSet::LiClipSet((LiAgent *)((char *)this + 96), (const LiAgent *)((char *)a2 + 96));
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((_OWORD *)this + 12) = *((_OWORD *)a2 + 12);
  *((_OWORD *)this + 13) = *((_OWORD *)a2 + 13);
  v4 = *((_QWORD *)a2 + 28);
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = v4;
  *((_BYTE *)this + 248) = *((_BYTE *)a2 + 248);
  *((_QWORD *)this + 32) = 0;
  LiImagePolygon::LiImagePolygon((LiAgent *)((char *)this + 264));
  *((_BYTE *)this + 376) = 0;
  *(_QWORD *)((char *)this + 380) = 0x3F8000003F800000;
  v5 = (CGColorSpace *)*((_QWORD *)a2 + 50);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = v5;
  if (v5)
    PCCFRefTraits<CGColorSpace *>::retain(v5);
  v6 = *((_QWORD *)a2 + 51);
  *((_DWORD *)this + 104) = *((_DWORD *)a2 + 104);
  *((_QWORD *)this + 51) = v6;
  *((_BYTE *)this + 424) = *((_BYTE *)a2 + 424);
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  PCColorDescription::PCColorDescription((PCColorDescription *)this + 18);
  *((_BYTE *)this + 456) = 1;
}

void sub_1B2CD4DD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  LiClipSet *v2;
  LiImagePolygon *v3;
  uint64_t v5;

  LiImagePolygon::~LiImagePolygon(v3);
  v5 = *(_QWORD *)(v1 + 256);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  LiClipSet::~LiClipSet(v2);
  _Unwind_Resume(a1);
}

void LiAgent::LiAgent(LiAgent *this, const LiRenderParameters *a2, int a3)
{
  CGColorSpace *v5;
  uint64_t v6;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = a3;
  *(_QWORD *)((char *)this + 36) = 6;
  *((_BYTE *)this + 44) = 0;
  *((_QWORD *)this + 6) = a2;
  *((_BYTE *)this + 56) = 0;
  *(_OWORD *)((char *)this + 60) = xmmword_1B30503B0;
  *((_BYTE *)this + 76) = 0;
  *((_OWORD *)this + 5) = xmmword_1B30503B0;
  LiClipSet::LiClipSet((LiAgent *)((char *)this + 96));
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  LiImagePolygon::LiImagePolygon((LiAgent *)((char *)this + 264));
  *((_BYTE *)this + 376) = 0;
  *(_QWORD *)((char *)this + 380) = 0x3F8000003F800000;
  v5 = (CGColorSpace *)*((_QWORD *)a2 + 20);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = v5;
  if (v5)
    PCCFRefTraits<CGColorSpace *>::retain(v5);
  v6 = *((_QWORD *)a2 + 21);
  *((_DWORD *)this + 104) = *((_DWORD *)a2 + 44);
  *((_QWORD *)this + 51) = v6;
  *((_BYTE *)this + 424) = *((_BYTE *)a2 + 184);
  PCColorDescription::PCColorDescription((PCColorDescription *)this + 18);
  *((_BYTE *)this + 456) = 1;
  getIdentity();
  *((_QWORD *)this + 20) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 21) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 22) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 23) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 24) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 27) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 25) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 26) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 28) = &getIdentity(void)::s_identity;
  *((_QWORD *)this + 29) = 0;
}

void sub_1B2CD4F58(_Unwind_Exception *a1)
{
  uint64_t v1;
  LiClipSet *v2;
  LiImagePolygon *v3;
  uint64_t v5;

  LiImagePolygon::~LiImagePolygon(v3);
  v5 = *(_QWORD *)(v1 + 256);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  LiClipSet::~LiClipSet(v2);
  _Unwind_Resume(a1);
}

void getIdentity(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      qword_1ED4D9258 = 0x3FF0000000000000;
      qword_1ED4D9230 = 0x3FF0000000000000;
      qword_1ED4D9208 = 0x3FF0000000000000;
      getIdentity(void)::s_identity = 0x3FF0000000000000;
      unk_1ED4D91E8 = 0u;
      unk_1ED4D91F8 = 0u;
      xmmword_1ED4D9210 = 0u;
      unk_1ED4D9220 = 0u;
      unk_1ED4D9238 = 0u;
      unk_1ED4D9248 = 0u;
    }
  }
}

uint64_t LiAgent::LiAgent(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  CGColorSpace *v7;
  uint64_t v8;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 36) = 6;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_BYTE *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 60) = xmmword_1B30503B0;
  *(_BYTE *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_1B30503B0;
  LiClipSet::LiClipSet((LiClipSet *)(a1 + 96));
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  LiImagePolygon::LiImagePolygon((LiImagePolygon *)(a1 + 264));
  *(_BYTE *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 380) = 0x3F8000003F800000;
  v7 = *(CGColorSpace **)(a2 + 160);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = v7;
  if (v7)
    PCCFRefTraits<CGColorSpace *>::retain(v7);
  v8 = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 408) = v8;
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 184);
  PCColorDescription::PCColorDescription((PCColorDescription *)(a1 + 432));
  *(_BYTE *)(a1 + 456) = 1;
  *(_QWORD *)(a1 + 160) = a3;
  getIdentity();
  *(_QWORD *)(a1 + 168) = &getIdentity(void)::s_identity;
  getIdentity();
  *(_QWORD *)(a1 + 176) = &getIdentity(void)::s_identity;
  getIdentity();
  *(_QWORD *)(a1 + 184) = &getIdentity(void)::s_identity;
  getIdentity();
  *(_QWORD *)(a1 + 192) = &getIdentity(void)::s_identity;
  getIdentity();
  *(_QWORD *)(a1 + 216) = &getIdentity(void)::s_identity;
  getIdentity();
  *(_QWORD *)(a1 + 200) = &getIdentity(void)::s_identity;
  getIdentity();
  *(_QWORD *)(a1 + 208) = &getIdentity(void)::s_identity;
  getIdentity();
  *(_QWORD *)(a1 + 224) = &getIdentity(void)::s_identity;
  return a1;
}

void sub_1B2CD514C(_Unwind_Exception *a1)
{
  uint64_t v1;
  LiClipSet *v2;
  LiImagePolygon *v3;
  uint64_t v5;

  LiImagePolygon::~LiImagePolygon(v3);
  v5 = *(_QWORD *)(v1 + 256);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  LiClipSet::~LiClipSet(v2);
  _Unwind_Resume(a1);
}

void LiAgent::LiAgent(LiAgent *this, LiImageSource *a2, const LiRenderParameters *a3)
{
  CGColorSpace *v6;
  uint64_t v7;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 9) = (*(uint64_t (**)(LiImageSource *, const LiRenderParameters *))(*(_QWORD *)a2 + 56))(a2, a3);
  *((_DWORD *)this + 10) = (*(uint64_t (**)(LiImageSource *))(*(_QWORD *)a2 + 80))(a2);
  *((_BYTE *)this + 44) = 0;
  *((_QWORD *)this + 6) = a3;
  *((_BYTE *)this + 56) = 0;
  *(_OWORD *)((char *)this + 60) = xmmword_1B30503B0;
  *((_BYTE *)this + 76) = 0;
  *((_OWORD *)this + 5) = xmmword_1B30503B0;
  LiClipSet::LiClipSet((LiAgent *)((char *)this + 96));
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = 0;
  LiImagePolygon::LiImagePolygon((LiAgent *)((char *)this + 264));
  *((_BYTE *)this + 376) = 0;
  *(_QWORD *)((char *)this + 380) = 0x3F8000003F800000;
  v6 = (CGColorSpace *)*((_QWORD *)a3 + 20);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = v6;
  if (v6)
    PCCFRefTraits<CGColorSpace *>::retain(v6);
  v7 = *((_QWORD *)a3 + 21);
  *((_DWORD *)this + 104) = *((_DWORD *)a3 + 44);
  *((_QWORD *)this + 51) = v7;
  *((_BYTE *)this + 424) = *((_BYTE *)a3 + 184);
  PCColorDescription::PCColorDescription((PCColorDescription *)this + 18);
  *((_BYTE *)this + 456) = 1;
  getIdentity();
  *((_QWORD *)this + 20) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 21) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 22) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 23) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 24) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 27) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 25) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 26) = &getIdentity(void)::s_identity;
  getIdentity();
  *((_QWORD *)this + 28) = &getIdentity(void)::s_identity;
}

void sub_1B2CD52F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  LiClipSet *v2;
  LiImagePolygon *v3;
  uint64_t v5;

  LiImagePolygon::~LiImagePolygon(v3);
  v5 = *(_QWORD *)(v1 + 256);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  LiClipSet::~LiClipSet(v2);
  _Unwind_Resume(a1);
}

void LiAgent::LiAgent(LiAgent *this, LiImageSource *a2, LiAgent *a3)
{
  CGColorSpace *v6;
  uint64_t v7;
  BOOL v8;

  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 9) = (*(uint64_t (**)(LiImageSource *, _QWORD))(*(_QWORD *)a2 + 56))(a2, *((_QWORD *)a3 + 6));
  *((_DWORD *)this + 10) = (*(uint64_t (**)(LiImageSource *))(*(_QWORD *)a2 + 80))(a2);
  *((_QWORD *)this + 6) = *((_QWORD *)a3 + 6);
  *((_BYTE *)this + 56) = 0;
  *(_OWORD *)((char *)this + 60) = xmmword_1B30503B0;
  *((_BYTE *)this + 76) = 0;
  *((_OWORD *)this + 5) = *((_OWORD *)a3 + 5);
  LiClipSet::LiClipSet((LiAgent *)((char *)this + 96), (LiAgent *)((char *)a3 + 96));
  *((_OWORD *)this + 9) = *((_OWORD *)a3 + 9);
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = *((_BYTE *)a3 + 248);
  *((_QWORD *)this + 32) = 0;
  LiImagePolygon::LiImagePolygon((LiAgent *)((char *)this + 264));
  *((_BYTE *)this + 376) = 0;
  *(_QWORD *)((char *)this + 380) = 0x3F8000003F800000;
  v6 = (CGColorSpace *)*((_QWORD *)a3 + 50);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = v6;
  if (v6)
    PCCFRefTraits<CGColorSpace *>::retain(v6);
  v7 = *((_QWORD *)a3 + 51);
  *((_DWORD *)this + 104) = *((_DWORD *)a3 + 104);
  *((_QWORD *)this + 51) = v7;
  *((_BYTE *)this + 424) = *((_BYTE *)a3 + 424);
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  PCColorDescription::PCColorDescription((PCColorDescription *)this + 18);
  *((_BYTE *)this + 456) = 1;
  *((_OWORD *)this + 10) = *((_OWORD *)a3 + 10);
  *((_OWORD *)this + 11) = *((_OWORD *)a3 + 11);
  *((_QWORD *)this + 27) = *((_QWORD *)a3 + 27);
  *((_OWORD *)this + 12) = *((_OWORD *)a3 + 12);
  *((_QWORD *)this + 26) = *((_QWORD *)a3 + 26);
  *((_QWORD *)this + 28) = *((_QWORD *)a3 + 28);
  if ((*(unsigned int (**)(LiImageSource *))(*(_QWORD *)a2 + 96))(a2))
    v8 = *((_BYTE *)a3 + 44) != 0;
  else
    v8 = 0;
  *((_BYTE *)this + 44) = v8;
}

void sub_1B2CD54B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  LiClipSet *v2;
  LiImagePolygon *v3;
  uint64_t v5;

  LiImagePolygon::~LiImagePolygon(v3);
  v5 = *(_QWORD *)(v1 + 256);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  LiClipSet::~LiClipSet(v2);
  _Unwind_Resume(a1);
}

void LiAgent::~LiAgent(LiAgent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 29);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AE2C30F4);
  *((_QWORD *)this + 29) = 0;
  v3 = *((_QWORD *)this + 49);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 49) = 0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 54);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 50);
  LiImagePolygon::~LiImagePolygon((LiAgent *)((char *)this + 264));
  v4 = *((_QWORD *)this + 32);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  LiClipSet::~LiClipSet((LiAgent *)((char *)this + 96));
}

__n128 LiAgent::loadTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t j;
  __n128 result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 232);
  if (v3)
  {
    if (v3 != a2)
    {
      for (i = 0; i != 4; ++i)
      {
        for (j = 0; j != 32; j += 8)
        {
          result.n128_u64[0] = *(_QWORD *)(v2 + j);
          *(_QWORD *)(v3 + j) = result.n128_u64[0];
        }
        v3 += 32;
        v2 += 32;
      }
    }
  }
  else
  {
    v8 = operator new();
    v9 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(v8 + 64) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(v8 + 80) = v9;
    v10 = *(_OWORD *)(v2 + 112);
    *(_OWORD *)(v8 + 96) = *(_OWORD *)(v2 + 96);
    *(_OWORD *)(v8 + 112) = v10;
    v11 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v2;
    *(_OWORD *)(v8 + 16) = v11;
    result = *(__n128 *)(v2 + 32);
    v12 = *(_OWORD *)(v2 + 48);
    *(__n128 *)(v8 + 32) = result;
    *(_OWORD *)(v8 + 48) = v12;
    *(_QWORD *)(a1 + 232) = v8;
  }
  return result;
}

uint64_t LiAgent::clearTransform(LiAgent *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 29);
  if (result)
    result = MEMORY[0x1B5E29170](result, 0x1000C40AE2C30F4);
  *((_QWORD *)this + 29) = 0;
  return result;
}

void LiAgent::setImageSpace(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _OWORD *v18;
  __int128 v19;
  uint64_t j;
  _OWORD *v21;
  __int128 v22;
  uint64_t k;
  _OWORD *v24;
  __int128 v25;
  uint64_t m;
  _OWORD *v27;
  __int128 v28;
  uint64_t n;
  _OWORD *v30;
  __int128 v31;
  uint64_t ii;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t jj;
  _OWORD *v45;
  __int128 v46;
  uint64_t kk;
  _OWORD *v48;
  __int128 v49;
  uint64_t mm;
  _OWORD *v51;
  __int128 v52;
  _BYTE v53[128];
  _QWORD v54[6];
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  if ((a2 & 0xFFFFFFFE) == 2)
  {
    if (!PCMatrix44Tmpl<double>::is2Didentity(*(double **)(a1 + 168))
      || a2 != 2 && !PCMatrix44Tmpl<double>::is2Didentity(*(double **)(a1 + 224)))
    {
      v4 = operator new();
      v5 = v4;
      *(_QWORD *)v4 = &unk_1E6568D80;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0x3FF0000000000000;
      v6 = v4 + 16;
      *(_QWORD *)(v4 + 96) = 0x3FF0000000000000;
      *(_QWORD *)(v4 + 56) = 0x3FF0000000000000;
      *(_OWORD *)(v4 + 24) = 0u;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      v7 = v4 + 144;
      *(_QWORD *)(v4 + 224) = 0x3FF0000000000000;
      *(_QWORD *)(v4 + 184) = 0x3FF0000000000000;
      __asm { FMOV            V1.2D, #1.0 }
      *(_OWORD *)(v4 + 136) = _Q1;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 192) = 0u;
      *(_OWORD *)(v4 + 208) = 0u;
      *(_OWORD *)(v4 + 248) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      v13 = (__int128 *)(v4 + 272);
      *(_QWORD *)(v4 + 352) = 0x3FF0000000000000;
      *(_QWORD *)(v4 + 312) = 0x3FF0000000000000;
      *(_OWORD *)(v4 + 264) = _Q1;
      *(_OWORD *)(v4 + 296) = 0u;
      *(_OWORD *)(v4 + 280) = 0u;
      *(_OWORD *)(v4 + 320) = 0u;
      *(_OWORD *)(v4 + 336) = 0u;
      *(_OWORD *)(v4 + 376) = 0u;
      *(_OWORD *)(v4 + 360) = 0u;
      v14 = v4 + 400;
      *(_QWORD *)(v4 + 520) = 0x3FF0000000000000;
      *(_QWORD *)(v4 + 480) = 0x3FF0000000000000;
      *(_QWORD *)(v4 + 440) = 0x3FF0000000000000;
      *(_OWORD *)(v4 + 392) = _Q1;
      *(_OWORD *)(v4 + 408) = 0u;
      *(_OWORD *)(v4 + 424) = 0u;
      *(_OWORD *)(v4 + 448) = 0u;
      *(_OWORD *)(v4 + 464) = 0u;
      *(_OWORD *)(v4 + 504) = 0u;
      v15 = v4;
      *(_OWORD *)(v4 + 488) = 0u;
      do
      {
        v16 = v15;
        v15 = *(_QWORD *)(v15 + 8);
      }
      while (v15);
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(a1 + 392);
      *(_QWORD *)(a1 + 392) = v4;
      PCMatrix44Tmpl<double>::operator*(*(_QWORD *)(a1 + 160), *(__int128 **)(a1 + 168), (uint64_t)v54);
      for (i = 0; i != 16; i += 4)
      {
        v18 = (_OWORD *)(v5 + 16 + i * 8);
        v19 = *(_OWORD *)&v54[i + 2];
        *v18 = *(_OWORD *)&v54[i];
        v18[1] = v19;
      }
      PCMatrix44Tmpl<double>::operator*(*(_QWORD *)(a1 + 208), *(__int128 **)(a1 + 192), (uint64_t)v54);
      for (j = 0; j != 16; j += 4)
      {
        v21 = (_OWORD *)(v5 + 272 + j * 8);
        v22 = *(_OWORD *)&v54[j + 2];
        *v21 = *(_OWORD *)&v54[j];
        v21[1] = v22;
      }
      PCMatrix44Tmpl<double>::operator*(*(_QWORD *)(a1 + 184), *(__int128 **)(a1 + 168), (uint64_t)v54);
      for (k = 0; k != 16; k += 4)
      {
        v24 = (_OWORD *)(v5 + 400 + k * 8);
        v25 = *(_OWORD *)&v54[k + 2];
        *v24 = *(_OWORD *)&v54[k];
        v24[1] = v25;
      }
      if (a2 == 3)
      {
        v60 = 0x3FF0000000000000;
        v57 = 0x3FF0000000000000;
        v54[5] = 0x3FF0000000000000;
        v54[0] = 0x3FF0000000000000;
        memset(&v54[1], 0, 32);
        v55 = 0u;
        v56 = 0u;
        v58 = 0u;
        v59 = 0u;
        PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)v54, *(double **)(a1 + 224), 0.0);
        PCMatrix44Tmpl<double>::operator*(v6, (__int128 *)v54, (uint64_t)v53);
        for (m = 0; m != 128; m += 32)
        {
          v27 = (_OWORD *)(v5 + 16 + m);
          v28 = *(_OWORD *)&v53[m + 16];
          *v27 = *(_OWORD *)&v53[m];
          v27[1] = v28;
        }
        PCMatrix44Tmpl<double>::operator*(*(_QWORD *)(a1 + 224), v13, (uint64_t)v53);
        for (n = 0; n != 128; n += 32)
        {
          v30 = (_OWORD *)(v5 + 272 + n);
          v31 = *(_OWORD *)&v53[n + 16];
          *v30 = *(_OWORD *)&v53[n];
          v30[1] = v31;
        }
        PCMatrix44Tmpl<double>::operator*(v14, (__int128 *)v54, (uint64_t)v53);
        for (ii = 0; ii != 128; ii += 32)
        {
          v33 = (_OWORD *)(v5 + 400 + ii);
          v34 = *(_OWORD *)&v53[ii + 16];
          *v33 = *(_OWORD *)&v53[ii];
          v33[1] = v34;
        }
      }
      *(_QWORD *)(a1 + 160) = v6;
      *(_QWORD *)(a1 + 168) = v7;
      *(_QWORD *)(a1 + 176) = v13;
      *(_QWORD *)(a1 + 184) = v14;
    }
  }
  else if (a2)
  {
    if (a2 == 1 && !PCMatrix44Tmpl<double>::isIdentity(*(double **)(a1 + 176)))
    {
      v35 = operator new();
      v36 = v35;
      *(_QWORD *)v35 = &unk_1E6568D80;
      *(_QWORD *)(v35 + 8) = 0;
      *(_QWORD *)(v35 + 16) = 0x3FF0000000000000;
      v37 = v35 + 16;
      *(_QWORD *)(v35 + 96) = 0x3FF0000000000000;
      *(_QWORD *)(v35 + 56) = 0x3FF0000000000000;
      *(_OWORD *)(v35 + 24) = 0u;
      *(_OWORD *)(v35 + 40) = 0u;
      *(_OWORD *)(v35 + 64) = 0u;
      *(_OWORD *)(v35 + 80) = 0u;
      *(_OWORD *)(v35 + 104) = 0u;
      *(_OWORD *)(v35 + 120) = 0u;
      v38 = v35 + 144;
      *(_QWORD *)(v35 + 224) = 0x3FF0000000000000;
      *(_QWORD *)(v35 + 184) = 0x3FF0000000000000;
      __asm { FMOV            V1.2D, #1.0 }
      *(_OWORD *)(v35 + 136) = _Q1;
      *(_OWORD *)(v35 + 152) = 0u;
      *(_OWORD *)(v35 + 168) = 0u;
      *(_OWORD *)(v35 + 192) = 0u;
      *(_OWORD *)(v35 + 208) = 0u;
      *(_OWORD *)(v35 + 248) = 0u;
      *(_OWORD *)(v35 + 232) = 0u;
      v40 = v35 + 272;
      *(_QWORD *)(v35 + 352) = 0x3FF0000000000000;
      *(_QWORD *)(v35 + 312) = 0x3FF0000000000000;
      *(_OWORD *)(v35 + 264) = _Q1;
      *(_OWORD *)(v35 + 296) = 0u;
      *(_OWORD *)(v35 + 280) = 0u;
      *(_OWORD *)(v35 + 320) = 0u;
      *(_OWORD *)(v35 + 336) = 0u;
      *(_OWORD *)(v35 + 376) = 0u;
      *(_OWORD *)(v35 + 360) = 0u;
      v41 = v35 + 400;
      *(_QWORD *)(v35 + 520) = 0x3FF0000000000000;
      *(_QWORD *)(v35 + 480) = 0x3FF0000000000000;
      *(_QWORD *)(v35 + 440) = 0x3FF0000000000000;
      *(_OWORD *)(v35 + 392) = _Q1;
      *(_OWORD *)(v35 + 408) = 0u;
      *(_OWORD *)(v35 + 424) = 0u;
      *(_OWORD *)(v35 + 448) = 0u;
      *(_OWORD *)(v35 + 464) = 0u;
      *(_OWORD *)(v35 + 504) = 0u;
      v42 = v35;
      *(_OWORD *)(v35 + 488) = 0u;
      do
      {
        v43 = v42;
        v42 = *(_QWORD *)(v42 + 8);
      }
      while (v42);
      *(_QWORD *)(v43 + 8) = *(_QWORD *)(a1 + 392);
      *(_QWORD *)(a1 + 392) = v35;
      PCMatrix44Tmpl<double>::operator*(*(_QWORD *)(a1 + 160), *(__int128 **)(a1 + 176), (uint64_t)v54);
      for (jj = 0; jj != 16; jj += 4)
      {
        v45 = (_OWORD *)(v36 + 16 + jj * 8);
        v46 = *(_OWORD *)&v54[jj + 2];
        *v45 = *(_OWORD *)&v54[jj];
        v45[1] = v46;
      }
      LiAgent::getFilmToObjectTransform((LiAgent *)a1, (uint64_t)v54);
      for (kk = 0; kk != 16; kk += 4)
      {
        v48 = (_OWORD *)(v36 + 144 + kk * 8);
        v49 = *(_OWORD *)&v54[kk + 2];
        *v48 = *(_OWORD *)&v54[kk];
        v48[1] = v49;
      }
      PCMatrix44Tmpl<double>::operator*(*(_QWORD *)(a1 + 184), *(__int128 **)(a1 + 168), (uint64_t)v54);
      for (mm = 0; mm != 16; mm += 4)
      {
        v51 = (_OWORD *)(v36 + 400 + mm * 8);
        v52 = *(_OWORD *)&v54[mm + 2];
        *v51 = *(_OWORD *)&v54[mm];
        v51[1] = v52;
      }
      *(_QWORD *)(a1 + 160) = v37;
      *(_QWORD *)(a1 + 168) = v38;
      *(_QWORD *)(a1 + 176) = v40;
      *(_QWORD *)(a1 + 184) = v41;
    }
  }
  else
  {
    getIdentity();
    *(_QWORD *)(a1 + 160) = &getIdentity(void)::s_identity;
    getIdentity();
    *(_QWORD *)(a1 + 168) = &getIdentity(void)::s_identity;
    getIdentity();
    *(_QWORD *)(a1 + 176) = &getIdentity(void)::s_identity;
    getIdentity();
    *(_QWORD *)(a1 + 184) = &getIdentity(void)::s_identity;
    getIdentity();
    *(_QWORD *)(a1 + 192) = &getIdentity(void)::s_identity;
    getIdentity();
    *(_QWORD *)(a1 + 216) = &getIdentity(void)::s_identity;
    getIdentity();
    *(_QWORD *)(a1 + 200) = &getIdentity(void)::s_identity;
    getIdentity();
    *(_QWORD *)(a1 + 208) = &getIdentity(void)::s_identity;
    getIdentity();
    *(_QWORD *)(a1 + 224) = &getIdentity(void)::s_identity;
  }
}

uint64_t LiAgent::getObjectToFilmTransform@<X0>(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  return PCMatrix44Tmpl<double>::operator*(*((_QWORD *)this + 26), *((__int128 **)this + 24), a2);
}

uint64_t LiAgent::getFilmToObjectTransform@<X0>(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = 0x3FF0000000000000;
  v11 = 0x3FF0000000000000;
  v8 = 0x3FF0000000000000;
  v5 = 0x3FF0000000000000;
  v6 = 0u;
  v7 = 0u;
  v9 = 0u;
  v10 = 0u;
  v12 = 0u;
  v13 = 0u;
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v5, *((double **)this + 22), 0.0);
  return PCMatrix44Tmpl<double>::operator*((uint64_t)&v5, *((__int128 **)this + 21), a2);
}

uint64_t LiAgent::setPixelTransform(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  _OWORD *v13;
  __int128 v14;

  v3 = result;
  v4 = 0;
  v5 = 0;
  v6 = *(_QWORD *)(result + 160);
  v7 = a2;
  while (2)
  {
    for (i = 0; i != 32; i += 8)
    {
      if (vabdd_f64(*(double *)(v7 + i), *(double *)(v6 + i)) >= 0.0000001)
      {
        if (!v5)
        {
          result = operator new();
          *(_QWORD *)(result + 16) = 0x3FF0000000000000;
          v9 = result + 16;
          *(_QWORD *)result = &unk_1E6568DE8;
          *(_QWORD *)(result + 8) = 0;
          *(_QWORD *)(result + 136) = 0x3FF0000000000000;
          *(_QWORD *)(result + 96) = 0x3FF0000000000000;
          *(_QWORD *)(result + 56) = 0x3FF0000000000000;
          *(_OWORD *)(result + 24) = 0u;
          *(_OWORD *)(result + 40) = 0u;
          *(_OWORD *)(result + 64) = 0u;
          *(_OWORD *)(result + 80) = 0u;
          *(_OWORD *)(result + 104) = 0u;
          *(_OWORD *)(result + 120) = 0u;
          v10 = result;
          do
          {
            v11 = v10;
            v10 = *(_QWORD *)(v10 + 8);
          }
          while (v10);
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(v3 + 392);
          *(_QWORD *)(v3 + 392) = result;
          if (v9 != a2)
          {
            for (j = 0; j != 128; j += 32)
            {
              v13 = (_OWORD *)(result + 16 + j);
              v14 = *(_OWORD *)(a2 + j + 16);
              *v13 = *(_OWORD *)(a2 + j);
              v13[1] = v14;
            }
          }
          *(_QWORD *)(v3 + 160) = v9;
        }
        return result;
      }
    }
    v5 = v4 > 2;
    v6 += 32;
    v7 += 32;
    if (++v4 != 4)
      continue;
    break;
  }
  return result;
}

int32x2_t LiAgent::computeROI(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  int64x2_t v6;
  float64x2_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int32x2_t result;
  float64x2_t v11;
  int8x16_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[128];
  double v27[16];

  PCMatrix44Tmpl<double>::operator*(*(_QWORD *)(a3 + 160), a2, (uint64_t)v26);
  v25 = 0x3FF0000000000000;
  v22 = 0x3FF0000000000000;
  v19 = 0x3FF0000000000000;
  v16 = 0x3FF0000000000000;
  v17 = 0u;
  v18 = 0u;
  v20 = 0u;
  v21 = 0u;
  v23 = 0u;
  v24 = 0u;
  LiAgent::getInversePixelTransform(a1, (uint64_t)&v16, 0.0);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v26, (__int128 *)&v16, (uint64_t)v27);
  v5 = *(_QWORD *)(a1 + 60);
  v6.i64[0] = (int)v5;
  v6.i64[1] = SHIDWORD(v5);
  v7 = vcvtq_f64_s64(v6);
  v8 = *(_QWORD *)(a1 + 68);
  v6.i64[0] = (int)v8;
  v6.i64[1] = SHIDWORD(v8);
  *(float64x2_t *)v26 = v7;
  *(float64x2_t *)&v26[16] = vcvtq_f64_s64(v6);
  v9 = PCMatrix44Tmpl<double>::transformRect<double>(v27, (double *)v26, (uint64_t)v26);
  *(_BYTE *)(a3 + 76) = v9;
  if (v9)
  {
    v11.f64[0] = *(float64_t *)v26;
    v12 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v26[8], (float64x2_t)xmmword_1B35583D0);
    v13 = (float64x2_t)vextq_s8(v12, v12, 8uLL);
    v11.f64[1] = *(float64_t *)&v26[24];
    v14 = vaddq_f64(v11, (float64x2_t)xmmword_1B35583D0);
    v15 = vaddq_f64(v13, v14);
    v13.f64[0] = v14.f64[0];
    result = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v13, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    *(int32x2_t *)(a3 + 80) = result;
    *(int32x2_t *)(a3 + 88) = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v15))), result);
  }
  return result;
}

void sub_1B2CD5E58(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B2CD5E44);
  }
  _Unwind_Resume(a1);
}

BOOL LiAgent::getInversePixelTransform@<W0>(LiAgent *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  return LiAgent::getInversePixelTransform((uint64_t)this, a3, a2);
}

HGNode *LiAgent::getHelium@<X0>(LiAgent *this@<X0>, LiImageSource *a2@<X1>, HGNode **a3@<X8>)
{
  uint64_t v6;
  BOOL isPremultiplied;
  CGColorSpace *v8;
  CGColorSpace *obj;
  HGNode **v10;
  uint64_t v11;
  int v12;
  double *v13;
  double *v14;
  uint64_t v15;
  double *v16;
  uint64_t i;
  int v18;
  double *v19;
  uint64_t v20;
  double *v21;
  uint64_t i10;
  double *v23;
  uint64_t i11;
  double *v25;
  __int128 v26;
  double *v27;
  uint64_t v28;
  double *v29;
  uint64_t i12;
  HGNode *result;
  double *v32;
  uint64_t v33;
  double *v34;
  uint64_t j;
  double *v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t k;
  uint64_t v41;
  double *v42;
  uint64_t m;
  double *v44;
  uint64_t v45;
  double *v46;
  uint64_t n;
  uint64_t ii;
  double *v49;
  __int128 v50;
  double *v51;
  uint64_t v52;
  double *v53;
  uint64_t jj;
  double *v55;
  uint64_t v56;
  double *v57;
  uint64_t kk;
  double *v59;
  double *v60;
  uint64_t mm;
  uint64_t nn;
  BOOL v63;
  uint64_t i1;
  double *v65;
  __int128 v66;
  double *v67;
  uint64_t v68;
  double *v69;
  uint64_t i2;
  __n128 v71;
  double *v72;
  uint64_t v73;
  double *v74;
  uint64_t i3;
  uint64_t v76;
  double *v77;
  uint64_t i4;
  unint64_t v79;
  BOOL v80;
  double *v81;
  uint64_t i5;
  uint64_t v83;
  HGNode *v84;
  CGColorSpace *v85;
  double *v86;
  uint64_t v87;
  double *v88;
  uint64_t i6;
  uint64_t v90;
  double *v91;
  uint64_t i9;
  _QWORD *v93;
  uint64_t v94;
  CGColorSpace *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  PCArray_base *v103;
  double *v104;
  uint64_t v105;
  double *v106;
  uint64_t i7;
  HGRenderer *HeliumRenderer;
  uint64_t v109;
  int v110;
  int32x2_t v111;
  HGNode *v112;
  char *v113;
  HGNode *v114;
  uint64_t v115;
  int32x2_t v116;
  int32x2_t v117;
  int32x2_t v118;
  int32x2_t v119;
  int64x2_t v120;
  uint64_t v121;
  double *v122;
  uint64_t i8;
  uint64_t v124;
  int64x2_t v125;
  float64x2_t v126;
  int32x2_t v127;
  float64x2_t v128;
  int32x2_t v129;
  CGColorSpace *CGColorSpace;
  CGColorSpace *v131;
  CGColorSpace *v132;
  CGColorSpace **ActualColorDescription;
  CGColorSpace *v134;
  CGColorSpace *v135;
  HGNode *v136;
  HGNode *v137;
  void *v138;
  CGColorSpace *v139;
  const void *v140;
  double v146;
  uint64_t v147;
  int64x2_t v148;
  float64x2_t v149;
  uint64_t v150;
  uint64_t v151;
  int64x2_t v152;
  float64x2_t v153;
  uint64_t v154;
  const FxColorDescription *v155;
  CGColorSpace *v156;
  void *v157;
  CGColorSpace *v158;
  HGCrop *v159;
  HGNode *v160;
  HGNode *v161;
  CGColorSpace *v162;
  int v163;
  uint64_t **v164;
  int v165;
  int32x2_t v166;
  _QWORD *v167;
  _DWORD v168[4];
  float64x2_t v169;
  float64x2_t v170;
  FxColorDescription v171;
  HGRect v172;
  FxColorDescription v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  HGNode *v177;

  v6 = *((_QWORD *)this + 32);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 42) = *((_QWORD *)this + 41);
  memset(&v173, 0, sizeof(v173));
  PCColorDescription::PCColorDescription(&v173._pcColorDesc);
  isPremultiplied = 1;
  v173._isPremultiplied = 1;
  v8 = (CGColorSpace *)*((_QWORD *)this + 54);
  obj = v173._pcColorDesc._colorSpaceRef._obj;
  if (v8 && v8 != v173._pcColorDesc._colorSpaceRef._obj)
  {
    PCCFRefTraits<CGColorSpace *>::release(v8);
    obj = v173._pcColorDesc._colorSpaceRef._obj;
    isPremultiplied = v173._isPremultiplied;
  }
  v10 = (HGNode **)((char *)this + 256);
  *((_QWORD *)this + 54) = obj;
  v173._pcColorDesc._colorSpaceRef._obj = 0;
  *((_DWORD *)this + 110) = v173._pcColorDesc._dynamicRange;
  *(PCToneMapMethod *)((char *)this + 444) = v173._pcColorDesc._toneMapMethod;
  *((_BYTE *)this + 456) = isPremultiplied;
  PCCFRef<CGColorSpace *>::~PCCFRef(&v173._pcColorDesc._colorSpaceRef._obj);
  if (a2)
  {
    v167 = a3;
    *((_QWORD *)this + 2) = a2;
    v11 = operator new();
    LiAgent::LiAgent((LiAgent *)v11, a2, this);
    v177 = (HGNode *)v11;
    v12 = *((unsigned __int8 *)this + 44);
    v13 = (double *)operator new();
    bzero(v13, 0x780uLL);
    LiAgent_getHelium_Matrixes::LiAgent_getHelium_Matrixes((LiAgent_getHelium_Matrixes *)v13);
    *(_QWORD *)(v11 + 240) = v13 + 80;
    v14 = (double *)*((_QWORD *)this + 29);
    if (v14)
    {
      if (v14 != v13 + 80)
      {
        v15 = 0;
        v16 = v13 + 80;
        do
        {
          for (i = 0; i != 4; ++i)
            v16[i] = v14[i];
          ++v15;
          v16 += 4;
          v14 += 4;
        }
        while (v15 != 4);
      }
      PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)(v13 + 64), v13 + 80, 0.0);
    }
    v165 = v12;
    v18 = *(_DWORD *)(v11 + 40);
    if (v18 == 3)
    {
      v23 = v13 + 192;
      PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)(v13 + 192), *((double **)this + 28), 0.0);
      v32 = (double *)*((_QWORD *)this + 20);
      if (v32 != v13)
      {
        v33 = 0;
        v34 = v13;
        do
        {
          for (j = 0; j != 4; ++j)
            v34[j] = v32[j];
          ++v33;
          v34 += 4;
          v32 += 4;
        }
        while (v33 != 4);
      }
      PCMatrix44Tmpl<double>::rightMult((uint64_t)v13, v13 + 80);
      PCMatrix44Tmpl<double>::operator*(*((_QWORD *)this + 21), *((__int128 **)this + 28), (uint64_t)&v173);
      PCMatrix44Tmpl<double>::rightMult((uint64_t)v13, (double *)&v173);
      v36 = (double *)*((_QWORD *)this + 28);
      v37 = v13 + 16;
      if (v36 != v13 + 16)
      {
        v38 = 0;
        v39 = *((_QWORD *)this + 28);
        do
        {
          for (k = 0; k != 4; ++k)
            v37[k] = *(double *)(v39 + k * 8);
          ++v38;
          v37 += 4;
          v39 += 32;
        }
        while (v38 != 4);
      }
      if (v36 != v13 + 32)
      {
        v41 = 0;
        v42 = v13 + 32;
        do
        {
          for (m = 0; m != 4; ++m)
            v42[m] = v36[m];
          ++v41;
          v42 += 4;
          v36 += 4;
        }
        while (v41 != 4);
      }
      LiAgent::getObjectToFilmTransform((uint64_t)this, (uint64_t)(v13 + 208));
      PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 32), v13 + 208);
      LiAgent::getFilmToWorldTransform((uint64_t)this, (uint64_t)(v13 + 48));
      PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 48), v13 + 192);
      v44 = (double *)*((_QWORD *)this + 28);
      if (v44 != v13 + 208)
      {
        v45 = 0;
        v46 = v13 + 208;
        do
        {
          for (n = 0; n != 4; ++n)
            v46[n] = v44[n];
          ++v45;
          v46 += 4;
          v44 += 4;
        }
        while (v45 != 4);
      }
      LiAgent::getImageToFilmTransform((uint64_t)this, (uint64_t)(v13 + 224));
      PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 208), v13 + 224);
      PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 208), v13 + 64);
      for (ii = 0; ii != 16; ii += 4)
      {
        v49 = &v13[ii];
        v50 = *(_OWORD *)&v13[ii + 210];
        *((_OWORD *)v49 + 32) = *(_OWORD *)&v13[ii + 208];
        *((_OWORD *)v49 + 33) = v50;
      }
      v51 = (double *)*((_QWORD *)this + 21);
      if (v51 != v13 + 208)
      {
        v52 = 0;
        v53 = v13 + 208;
        do
        {
          for (jj = 0; jj != 4; ++jj)
            v53[jj] = v51[jj];
          ++v52;
          v53 += 4;
          v51 += 4;
        }
        while (v52 != 4);
      }
      PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 80), v13 + 208);
    }
    else
    {
      if (v18 != 2)
      {
LABEL_60:
        if (v18 == 1)
        {
          v55 = (double *)*((_QWORD *)this + 20);
          if (v55 != v13)
          {
            v56 = 0;
            v57 = v13;
            do
            {
              for (kk = 0; kk != 4; ++kk)
                v57[kk] = v55[kk];
              ++v56;
              v57 += 4;
              v55 += 4;
            }
            while (v56 != 4);
          }
          PCMatrix44Tmpl<double>::rightMult((uint64_t)v13, v13 + 80);
          PCMatrix44Tmpl<double>::rightMult((uint64_t)v13, *((double **)this + 22));
          PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)(v13 + 16), *((double **)this + 22), 0.0);
          PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 16), *((double **)this + 21));
          v59 = v13 + 48;
          v60 = (double *)*((_QWORD *)this + 24);
          if (v60 != v13 + 48)
          {
            for (mm = 0; mm != 4; ++mm)
            {
              for (nn = 0; nn != 4; ++nn)
                v59[nn] = v60[nn];
              v59 += 4;
              v60 += 4;
            }
          }
          v63 = PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)(v13 + 208), *((double **)this + 22), 0.00000001);
          PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 208), v13 + 64);
          for (i1 = 0; i1 != 16; i1 += 4)
          {
            v65 = &v13[i1];
            v66 = *(_OWORD *)&v13[i1 + 210];
            *((_OWORD *)v65 + 32) = *(_OWORD *)&v13[i1 + 208];
            *((_OWORD *)v65 + 33) = v66;
          }
          v67 = (double *)*((_QWORD *)this + 22);
          if (v67 != v13 + 208)
          {
            v68 = 0;
            v69 = v13 + 208;
            do
            {
              for (i2 = 0; i2 != 4; ++i2)
                v69[i2] = v67[i2];
              ++v68;
              v69 += 4;
              v67 += 4;
            }
            while (v68 != 4);
          }
          v71.n128_f64[0] = PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 80), v13 + 208);
          if (!v63)
          {
            v95 = (CGColorSpace *)*v10;
            *v167 = *v10;
            if (v95)
              (*(void (**)(CGColorSpace *, double))(*(_QWORD *)v95 + 16))(v95, v71.n128_f64[0]);
            goto LABEL_236;
          }
        }
        if (v18)
        {
          *(_QWORD *)(v11 + 168) = v13 + 16;
          *(_QWORD *)(v11 + 176) = v13 + 32;
          *(_QWORD *)(v11 + 184) = v13 + 48;
        }
        else
        {
          v72 = (double *)*((_QWORD *)this + 20);
          if (v72 != v13)
          {
            v73 = 0;
            v74 = v13;
            do
            {
              for (i3 = 0; i3 != 4; ++i3)
                v74[i3] = v72[i3];
              ++v73;
              v74 += 4;
              v72 += 4;
            }
            while (v73 != 4);
          }
          PCMatrix44Tmpl<double>::rightMult((uint64_t)v13, v13 + 80);
        }
        *(_QWORD *)(v11 + 160) = v13;
        if (*((_BYTE *)this + 56))
          LiAgent::computeROI((uint64_t)this, (__int128 *)v13 + 32, v11);
        v76 = 0;
        v77 = v13;
        do
        {
          for (i4 = 0; i4 != 4; i4 += 2)
            *(_OWORD *)&v77[i4 + 96] = *(_OWORD *)&v77[i4];
          ++v76;
          v77 += 4;
        }
        while (v76 != 4);
        v164 = (uint64_t **)((char *)this + 264);
        (*(void (**)(LiImageSource *, uint64_t, double *, _QWORD))(*(_QWORD *)a2 + 64))(a2, v11, v13, *((_QWORD *)this + 6));
        if (*((_BYTE *)this + 56))
        {
          v79 = 0;
          v80 = 0;
          v81 = v13;
          while (2)
          {
            for (i5 = 0; i5 != 4; ++i5)
            {
              if (vabdd_f64(v81[i5 + 96], v81[i5]) >= 0.0000001)
              {
                if (!v80)
                  LiAgent::computeROI((uint64_t)this, (__int128 *)v13 + 32, v11);
                goto LABEL_102;
              }
            }
            v80 = v79 > 2;
            v81 += 4;
            if (++v79 != 4)
              continue;
            break;
          }
        }
LABEL_102:
        if (v18 == 1 && (v83 = *((_QWORD *)this + 18)) != 0)
        {
          LiClipSet::operator=(v11 + 96, v83);
        }
        else if (*(_DWORD *)(v11 + 108) && !PCMatrix44Tmpl<double>::is2Didentity(v13 + 64))
        {
          transform((PCArray_base *)(v13 + 80), v11 + 96);
        }
        LiImageSource::getHeliumPublic((uint64_t *)&v173, a2, (LiAgent *)v11);
        v84 = *v10;
        v85 = v173._pcColorDesc._colorSpaceRef._obj;
        if (*v10 == (HGNode *)v173._pcColorDesc._colorSpaceRef._obj)
        {
          if (!v84 || ((*(void (**)(HGNode *))(*(_QWORD *)v84 + 24))(v84), !*v10))
          {
LABEL_235:
            *v167 = 0;
LABEL_236:
            MEMORY[0x1B5E29170](v13, 0x1000C4061254B48, v71);
            *((_BYTE *)this + 44) = 0;
            result = v177;
            if (v177)
            {
              LiAgent::~LiAgent((LiAgent *)v177);
              return (HGNode *)MEMORY[0x1B5E29170]();
            }
            return result;
          }
        }
        else
        {
          if (v84)
          {
            (*(void (**)(HGNode *))(*(_QWORD *)v84 + 24))(v84);
            v85 = v173._pcColorDesc._colorSpaceRef._obj;
          }
          *v10 = (HGNode *)v85;
          if (!v85)
            goto LABEL_235;
        }
        v86 = *(double **)(v11 + 160);
        if (v86 != v13 + 112)
        {
          v87 = 0;
          v88 = v13 + 112;
          do
          {
            for (i6 = 0; i6 != 4; ++i6)
              v88[i6] = v86[i6];
            ++v87;
            v88 += 4;
            v86 += 4;
          }
          while (v87 != 4);
        }
        PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 112), v13 + 64);
        if (!v165 || (PCMath::equivalent2D(*((_QWORD *)this + 20), (uint64_t)(v13 + 112)) & 1) != 0)
        {
LABEL_134:
          if ((PCMath::equivalent2D(*((_QWORD *)this + 20), (uint64_t)(v13 + 112)) & 1) == 0)
          {
            v103 = (PCArray_base *)(v13 + 144);
            if (!PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)(v13 + 144), v13 + 112, 0.0))
            {
              if (*v10)
                (*(void (**)(HGNode *))(*(_QWORD *)*v10 + 24))(*v10);
              *v10 = 0;
              goto LABEL_197;
            }
            v104 = (double *)*((_QWORD *)this + 20);
            if (v104 != v13 + 160)
            {
              v105 = 0;
              v106 = v13 + 160;
              do
              {
                for (i7 = 0; i7 != 4; ++i7)
                  v106[i7] = v104[i7];
                ++v105;
                v106 += 4;
                v104 += 4;
              }
              while (v105 != 4);
            }
            PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 160), v13 + 144);
            HeliumRenderer = (HGRenderer *)LiRenderParameters::getHeliumRenderer(*((LiRenderParameters **)this + 6));
            *(_QWORD *)&v172.var0 = 0;
            *(_QWORD *)&v172.var2 = 0;
            *(_QWORD *)&v172.var0 = HGRenderer::GetDOD(HeliumRenderer, *v10);
            *(_QWORD *)&v172.var2 = v109;
            transform(v13 + 160, v164);
            if (*(_BYTE *)(*((_QWORD *)this + 6) + 135)
              && ((*(uint64_t (**)(LiImageSource *))(*(_QWORD *)a2 + 32))(a2) & 1) == 0)
            {
              if (HGRectIsNull(*(uint64_t *)&v172.var0, *(uint64_t *)&v172.var2))
              {
                v110 = 0;
                v163 = 0;
                v166 = (int32x2_t)-1;
              }
              else
              {
                v111 = vmax_s32(*(int32x2_t *)&v172.var0, vdup_n_s32(0xC0000001));
                v166 = vsub_s32(vmin_s32(*(int32x2_t *)&v172.var2, vdup_n_s32(0x3FFFFFFEu)), v111);
                v163 = v111.i32[1];
                v110 = v111.i32[0];
              }
              v112 = (HGNode *)HGObject::operator new(0x1D0uLL);
              HGTextureWrap::HGTextureWrap((HGTextureWrap *)v112);
              (*(void (**)(HGNode *, _QWORD, HGNode *))(*(_QWORD *)v112 + 120))(v112, 0, *v10);
              HGTextureWrap::SetTextureWrapMode((uint64_t)v112, (const char *)1, v113);
              v114 = *v10;
              if (*v10 != v112)
              {
                if (v114)
                  (*(void (**)(HGNode *))(*(_QWORD *)v114 + 24))(v114);
                *v10 = v112;
                (*(void (**)(HGNode *))(*(_QWORD *)v112 + 16))(v112);
              }
              v173._pcColorDesc._colorSpaceRef._obj = (CGColorSpace *)HGRectMake4i(vcvtmd_s64_f64((double)v110 + -20.0 + 0.0000001), vcvtmd_s64_f64((double)v163 + -20.0 + 0.0000001), vcvtpd_s64_f64((double)v110+ -20.0+ (double)v166.i32[0]+ 40.0), vcvtpd_s64_f64((double)v163+ -20.0+ (double)v166.i32[1]+ 40.0));
              *(_QWORD *)&v173._pcColorDesc._dynamicRange = v115;
              HGTextureWrap::SetCropRect((HGTextureWrap *)v112, (const HGRect *)&v173);
              *((_BYTE *)v112 + 452) = 1;
              LiImagePolygon::LiImagePolygon((LiImagePolygon *)&v173);
              if (HGRectIsNull(*(uint64_t *)&v172.var0, *(uint64_t *)&v172.var2))
              {
                v116 = 0;
                v117 = (int32x2_t)-1;
              }
              else
              {
                v116 = vmax_s32(*(int32x2_t *)&v172.var0, vdup_n_s32(0xC0000001));
                v117 = vsub_s32(vmin_s32(*(int32x2_t *)&v172.var2, vdup_n_s32(0x3FFFFFFEu)), v116);
              }
              v118 = vmax_s32(v116, (int32x2_t)0xF0000000FLL);
              v119 = vsub_s32(vmin_s32(vadd_s32(v117, v116), (int32x2_t)0x10000000100000), v118);
              *(double *)&v171._pcColorDesc._colorSpaceRef._obj = (double)v118.i32[0];
              *(double *)&v171._pcColorDesc._dynamicRange = (double)v118.i32[1];
              v120.i64[0] = v119.i32[0];
              v120.i64[1] = v119.i32[1];
              *(float64x2_t *)&v171._pcColorDesc._toneMapMethod._gain = vcvtq_f64_s64(v120);
              LiImagePolygon::set((uint64_t)&v173, (double *)&v171, 0);
              if (((*((_QWORD *)this + 42) - *((_QWORD *)this + 41)) & 0x1FFFFFFFE0) != 0)
              {
                v121 = 0;
                v122 = v13;
                do
                {
                  for (i8 = 0; i8 != 4; i8 += 2)
                    *(_OWORD *)&v122[i8 + 176] = *(_OWORD *)&v122[i8 + 112];
                  ++v121;
                  v122 += 4;
                }
                while (v121 != 4);
                LiAgent::getInversePixelTransform((uint64_t)this, (uint64_t)(v13 + 208), 0.0);
                PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 176), v13 + 208);
                LiImagePolygon::clip(v164, (uint64_t)&v173, v13 + 176);
              }
              else
              {
                LiClipSet::LiClipSet((LiClipSet *)&v171);
                if (v18 == 1 && !*((_DWORD *)this + 27) && (v124 = *((_QWORD *)this + 18)) != 0)
                {
                  LiClipSet::operator=((uint64_t)&v171, v124);
                  v103 = (PCArray_base *)(v13 + 208);
                  LiAgent::getInversePixelTransform(v11, (uint64_t)(v13 + 208), 0.0);
                }
                else
                {
                  LiClipSet::operator=((uint64_t)&v171, (uint64_t)this + 96);
                }
                transform(v103, (uint64_t)&v171);
                LiImagePolygon::clip((uint64_t **)&v173, (const LiClipSet *)&v171);
                if (((v176 - v175) & 0x1FFFFFFFE0) == 0)
                {
                  if (*v10)
                    (*(void (**)(HGNode *))(*(_QWORD *)*v10 + 24))(*v10);
                  *v10 = 0;
                  *v167 = 0;
                  LiClipSet::~LiClipSet((LiClipSet *)&v171);
                  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&v173);
                  (*(void (**)(HGNode *))(*(_QWORD *)v112 + 24))(v112);
                  goto LABEL_236;
                }
                if (transform(v13 + 160, (uint64_t **)&v173))
                {
                  LiImagePolygon::operator=((uint64_t)v164, (uint64_t)&v173);
                }
                else if (*((_BYTE *)this + 56)
                       && PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)(v13 + 176), v13 + 160, 0.0))
                {
                  Effect_toPCRecti(&v172, (uint64_t)v168);
                  v125.i64[0] = v168[0];
                  v125.i64[1] = v168[1];
                  v126 = vcvtq_f64_s64(v125);
                  v125.i64[0] = v168[2];
                  v125.i64[1] = v168[3];
                  v169 = v126;
                  v170 = vcvtq_f64_s64(v125);
                  LiImagePolygon::set((uint64_t)&v173, v169.f64, 0);
                  v127 = vadd_s32(*(int32x2_t *)((char *)this + 60), (int32x2_t)0x100000001);
                  v125.i64[0] = v127.i32[0];
                  v125.i64[1] = v127.i32[1];
                  v128 = vcvtq_f64_s64(v125);
                  v129 = vadd_s32(*(int32x2_t *)((char *)this + 68), (int32x2_t)0x400000004);
                  v125.i64[0] = v129.i32[0];
                  v125.i64[1] = v129.i32[1];
                  v169 = v128;
                  v170 = vcvtq_f64_s64(v125);
                  LiImagePolygon::set((uint64_t)v164, v169.f64, 1);
                  LiImagePolygon::clip(v164, (uint64_t)&v173, v13 + 176);
                }
                LiClipSet::~LiClipSet((LiClipSet *)&v171);
              }
              LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&v173);
              (*(void (**)(HGNode *))(*(_QWORD *)v112 + 24))(v112);
            }
            if (FxColorDescription::getCGColorSpace((FxColorDescription *)(v11 + 400)))
            {
              CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)this + 6) + 160));
              if (*(_BYTE *)(*((_QWORD *)this + 6) + 132)
                || (v131 = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(v11 + 400)),
                    PCColorSpaceHandle::isSameColorSpace(v131, CGColorSpace, v132)))
              {
                ActualColorDescription = LiAgent::getActualColorDescription((LiAgent *)v11);
                v134 = *ActualColorDescription;
                v173._pcColorDesc._colorSpaceRef._obj = v134;
                if (v134)
                  PCCFRefTraits<CGColorSpace *>::retain(v134);
                v135 = ActualColorDescription[1];
                v173._pcColorDesc._toneMapMethod._gain = *((float *)ActualColorDescription + 4);
                *(_QWORD *)&v173._pcColorDesc._dynamicRange = v135;
                v173._isPremultiplied = *((_BYTE *)ActualColorDescription + 24);
                FxColorDescription::FxColorDescription(&v171, &v173, CGColorSpace);
                FxApplyColorConform((uint64_t *)this + 32, &v173, &v171, (uint64_t *)&v169);
                v136 = *v10;
                v137 = *(HGNode **)&v169.f64[0];
                if (*v10 == *(HGNode **)&v169.f64[0])
                {
                  if (v136)
                    (*(void (**)(HGNode *))(*(_QWORD *)v136 + 24))(v136);
                }
                else
                {
                  if (v136)
                  {
                    (*(void (**)(HGNode *))(*(_QWORD *)v136 + 24))(v136);
                    v137 = *(HGNode **)&v169.f64[0];
                  }
                  *v10 = v137;
                }
                PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)(v11 + 432), &v171._pcColorDesc._colorSpaceRef._obj);
                *(_QWORD *)(v11 + 440) = *(_QWORD *)&v171._pcColorDesc._dynamicRange;
                *(float *)(v11 + 448) = v171._pcColorDesc._toneMapMethod._gain;
                *(_BYTE *)(v11 + 456) = v171._isPremultiplied;
                PCCFRef<CGColorSpace *>::~PCCFRef(&v171._pcColorDesc._colorSpaceRef._obj);
                PCCFRef<CGColorSpace *>::~PCCFRef(&v173._pcColorDesc._colorSpaceRef._obj);
              }
            }
            LiAgent::makeHeliumXForm((uint64_t)this, (uint64_t)(v13 + 160), (uint64_t *)this + 32, &v173);
            v138 = *v10;
            v139 = v173._pcColorDesc._colorSpaceRef._obj;
            if (*v10 != (HGNode *)v173._pcColorDesc._colorSpaceRef._obj)
            {
              if (v138)
              {
                (*(void (**)(void *))(*(_QWORD *)v138 + 24))(v138);
                v139 = v173._pcColorDesc._colorSpaceRef._obj;
              }
              *v10 = (HGNode *)v139;
              if (!v139)
                goto LABEL_197;
              (*(void (**)(CGColorSpace *))(*(_QWORD *)v139 + 16))(v139);
              v138 = v173._pcColorDesc._colorSpaceRef._obj;
            }
            if (v138)
              (*(void (**)(void *))(*(_QWORD *)v138 + 24))(v138);
          }
LABEL_197:
          switch(*((_DWORD *)this + 8))
          {
            case 0:
              if (!*v10 || ((*((_QWORD *)this + 42) - *((_QWORD *)this + 41)) & 0x1FFFFFFFE0) == 0)
                goto LABEL_224;
              v140 = (const void *)LiRenderParameters::getHeliumRenderer(*((LiRenderParameters **)this + 6));
              if (!*((_BYTE *)this + 56))
                goto LABEL_207;
              v173._pcColorDesc._colorSpaceRef._obj = 0;
              *(_QWORD *)&v173._pcColorDesc._dynamicRange = 0;
              __asm { FMOV            V0.2D, #-1.0 }
              *(_OWORD *)&v173._pcColorDesc._toneMapMethod._gain = _Q0;
              v174 = 0;
              LiPolygon::getBoundary((uint64_t)v164, (uint64_t)&v173);
              v146 = *(double *)&v173._pcColorDesc._toneMapMethod._gain;
              if (*(double *)&v173._pcColorDesc._toneMapMethod._gain < *(double *)&v173._isPremultiplied)
                v146 = *(double *)&v173._isPremultiplied;
              if (v146 > 100000.0)
              {
                v147 = *(_QWORD *)((char *)this + 60);
                v148.i64[0] = (int)v147;
                v148.i64[1] = SHIDWORD(v147);
                v149 = vcvtq_f64_s64(v148);
                v150 = *(_QWORD *)((char *)this + 68);
                v148.i64[0] = (int)v150;
                v148.i64[1] = SHIDWORD(v150);
                *(float64x2_t *)&v171._pcColorDesc._colorSpaceRef._obj = v149;
                *(float64x2_t *)&v171._pcColorDesc._toneMapMethod._gain = vcvtq_f64_s64(v148);
                LiImagePolygon::clip(v164, (double *)&v171, 0);
                if (((*((_QWORD *)this + 42) - *((_QWORD *)this + 41)) & 0x1FFFFFFFE0) == 0)
                {
                  if (*v10)
                    (*(void (**)(HGNode *))(*(_QWORD *)*v10 + 24))(*v10);
                  *v10 = 0;
                  goto LABEL_235;
                }
              }
              if (*((_BYTE *)this + 56))
              {
                v151 = *(_QWORD *)((char *)this + 60);
                v152.i64[0] = (int)v151;
                v152.i64[1] = SHIDWORD(v151);
                v153 = vcvtq_f64_s64(v152);
                v154 = *(_QWORD *)((char *)this + 68);
                v152.i64[0] = (int)v154;
                v152.i64[1] = SHIDWORD(v154);
                *(float64x2_t *)&v173._pcColorDesc._colorSpaceRef._obj = v153;
                *(float64x2_t *)&v173._pcColorDesc._toneMapMethod._gain = vcvtq_f64_s64(v152);
                if (LiPolygon::contains(v164, (float64x2_t *)&v173))
                  goto LABEL_224;
              }
LABEL_207:
              v155 = (const FxColorDescription *)LiAgent::getActualColorDescription((LiAgent *)v11);
              v156 = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*(_QWORD *)(v11 + 48)
                                                                                              + 160));
              FxColorDescription::FxColorDescription(&v173, v155, v156);
              cropToPolygon(v140, (_QWORD *)this + 32, (LiImagePolygon *)v164, &v173, 1, 0, (uint64_t *)&v171);
              v157 = *v10;
              v158 = v171._pcColorDesc._colorSpaceRef._obj;
              if (*v10 == (HGNode *)v171._pcColorDesc._colorSpaceRef._obj)
                goto LABEL_212;
              if (v157)
              {
                (*(void (**)(void *))(*(_QWORD *)v157 + 24))(v157);
                v158 = v171._pcColorDesc._colorSpaceRef._obj;
              }
              *v10 = (HGNode *)v158;
              if (v158)
              {
                (*(void (**)(CGColorSpace *))(*(_QWORD *)v158 + 16))(v158);
                v157 = v171._pcColorDesc._colorSpaceRef._obj;
LABEL_212:
                if (v157)
                  (*(void (**)(void *))(*(_QWORD *)v157 + 24))(v157);
              }
              PCCFRef<CGColorSpace *>::~PCCFRef(&v173._pcColorDesc._colorSpaceRef._obj);
LABEL_224:
              PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)this + 54, (CGColorSpace **)(v11 + 432));
              *((_QWORD *)this + 55) = *(_QWORD *)(v11 + 440);
              *((_DWORD *)this + 112) = *(_DWORD *)(v11 + 448);
              *((_BYTE *)this + 456) = *(_BYTE *)(v11 + 456);
              LiAgent::conformToRequestedColorSpace((uint64_t)this, (uint64_t *)this + 32, (uint64_t *)&v173);
              v161 = *v10;
              v162 = v173._pcColorDesc._colorSpaceRef._obj;
              if (*v10 == (HGNode *)v173._pcColorDesc._colorSpaceRef._obj)
              {
                if (!v161)
                  goto LABEL_235;
                (*(void (**)(HGNode *))(*(_QWORD *)v161 + 24))(*v10);
                v162 = (CGColorSpace *)*v10;
              }
              else
              {
                if (v161)
                {
                  (*(void (**)(HGNode *))(*(_QWORD *)v161 + 24))(*v10);
                  v162 = v173._pcColorDesc._colorSpaceRef._obj;
                }
                *v10 = (HGNode *)v162;
              }
              *v167 = v162;
              if (v162)
                (*(void (**)(CGColorSpace *))(*(_QWORD *)v162 + 16))(v162);
              break;
            case 1:
              goto LABEL_224;
            case 2:
              LiImagePolygon::operator=(*(_QWORD *)this + 264, (uint64_t)v164);
              goto LABEL_224;
            case 3:
              if (*v10 && ((*((_QWORD *)this + 42) - *((_QWORD *)this + 41)) & 0x1FFFFFFFE0) != 0)
              {
                LiImagePolygon::getDOD((LiImagePolygon *)v164, 0.0, (int32x2_t *)&v173);
                v159 = (HGCrop *)HGObject::operator new(0x1A0uLL);
                HGCrop::HGCrop(v159);
                (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v159 + 96))(v159, 0, (float)SLODWORD(v173._pcColorDesc._colorSpaceRef._obj), (float)SHIDWORD(v173._pcColorDesc._colorSpaceRef._obj), (float)(v173._pcColorDesc._dynamicRange + LODWORD(v173._pcColorDesc._colorSpaceRef._obj)), (float)(v173._pcColorDesc._toneMapMethod._type + HIDWORD(v173._pcColorDesc._colorSpaceRef._obj)));
                (*(void (**)(HGCrop *, _QWORD, HGNode *))(*(_QWORD *)v159 + 120))(v159, 0, *v10);
                v160 = *v10;
                if (*v10 != (HGNode *)v159)
                {
                  if (v160)
                    (*(void (**)(HGNode *))(*(_QWORD *)v160 + 24))(v160);
                  *v10 = (HGNode *)v159;
                  (*(void (**)(HGCrop *))(*(_QWORD *)v159 + 16))(v159);
                }
                (*(void (**)(HGCrop *))(*(_QWORD *)v159 + 24))(v159);
              }
              goto LABEL_224;
            default:
              PCPrint("File %s, line %d should not have been reached:\n\t", v96, v97, v98, v99, v100, v101, v102, (char)"/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiAgent.cpp");
              pcAbortImpl();
          }
          goto LABEL_236;
        }
        v90 = 0;
        v91 = v13;
        do
        {
          for (i9 = 0; i9 != 4; i9 += 2)
            *(_OWORD *)&v91[i9 + 128] = *(_OWORD *)&v91[i9 + 112];
          ++v90;
          v91 += 4;
        }
        while (v90 != 4);
        v93 = (_QWORD *)*((_QWORD *)this + 3);
        if (v93)
        {
          v94 = 8;
        }
        else
        {
          v93 = (_QWORD *)*((_QWORD *)this + 1);
          if (!v93)
          {
LABEL_133:
            LiAgent::setPixelTransform((uint64_t)this, (uint64_t)(v13 + 128));
            goto LABEL_134;
          }
          v94 = 9;
        }
        (*(void (**)(void))(*v93 + 8 * v94))();
        goto LABEL_133;
      }
      v19 = (double *)*((_QWORD *)this + 20);
      if (v19 != v13)
      {
        v20 = 0;
        v21 = v13;
        do
        {
          for (i10 = 0; i10 != 4; ++i10)
            v21[i10] = v19[i10];
          ++v20;
          v21 += 4;
          v19 += 4;
        }
        while (v20 != 4);
      }
      PCMatrix44Tmpl<double>::rightMult((uint64_t)v13, v13 + 80);
      PCMatrix44Tmpl<double>::rightMult((uint64_t)v13, *((double **)this + 21));
      LiAgent::getObjectToFilmTransform((uint64_t)this, (uint64_t)(v13 + 32));
      LiAgent::getFilmToWorldTransform((uint64_t)this, (uint64_t)(v13 + 48));
      v23 = v13 + 208;
      LiAgent::getImageToFilmTransform((uint64_t)this, (uint64_t)(v13 + 208));
      PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 208), v13 + 64);
      for (i11 = 0; i11 != 16; i11 += 4)
      {
        v25 = &v13[i11];
        v26 = *(_OWORD *)&v13[i11 + 210];
        *((_OWORD *)v25 + 32) = *(_OWORD *)&v13[i11 + 208];
        *((_OWORD *)v25 + 33) = v26;
      }
      v27 = (double *)*((_QWORD *)this + 21);
      if (v27 != v23)
      {
        v28 = 0;
        v29 = v13 + 208;
        do
        {
          for (i12 = 0; i12 != 4; ++i12)
            v29[i12] = v27[i12];
          ++v28;
          v29 += 4;
          v27 += 4;
        }
        while (v28 != 4);
      }
    }
    PCMatrix44Tmpl<double>::rightMult((uint64_t)(v13 + 80), v23);
    goto LABEL_60;
  }
  result = *v10;
  *a3 = *v10;
  if (result)
    return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_1B2CD717C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  LiClipSet::~LiClipSet((LiClipSet *)&a25);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&a33);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  MEMORY[0x1B5E29170](v34, 0x1000C4061254B48);
  *(_BYTE *)(v33 + 44) = 0;
  std::unique_ptr<LiAgent>::reset[abi:ne180100]((LiAgent **)(v36 - 96), 0);
  _Unwind_Resume(a1);
}

double LiAgent::getObjectToFilmTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 208);
  if (v2 != a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)(v4 + i) = *(_QWORD *)(v2 + i);
      ++v3;
      v4 += 32;
      v2 += 32;
    }
    while (v3 != 4);
  }
  return PCMatrix44Tmpl<double>::rightMult(a2, *(double **)(a1 + 192));
}

double LiAgent::getFilmToWorldTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 184);
  if (v2 != a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)(v4 + i) = *(_QWORD *)(v2 + i);
      ++v3;
      v4 += 32;
      v2 += 32;
    }
    while (v3 != 4);
  }
  return PCMatrix44Tmpl<double>::rightMult(a2, *(double **)(a1 + 168));
}

BOOL LiAgent::getImageToFilmTransform(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  PCException *exception;
  PCString v4;

  result = PCMatrix44Tmpl<double>::planarInverseZ(a2, *(double **)(a1 + 168), 0.0);
  if (!result)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v4, "getImageToFilmTransform: failed to invert");
    PCException::PCException(exception, &v4);
    *(_QWORD *)exception = &unk_1E6512988;
  }
  return result;
}

void sub_1B2CD7534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t PCMath::equivalent2D(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  BOOL v23;
  _BYTE v24[144];
  uint64_t v25;

  v2 = 0;
  v3 = 0;
  v25 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v4 = 0;
  while (vabdd_f64(*(double *)(a1 + 32 * dword_1B3558458[v2] + 8 * dword_1B3558458[v4]), *(double *)(a2 + 32 * dword_1B3558458[v2] + 8 * dword_1B3558458[v4])) < 0.0000001)
  {
    if (++v4 == 3)
    {
      v3 = v2++ > 1;
      if (v2 != 3)
        goto LABEL_2;
      return 1;
    }
  }
  if (v3)
    return 1;
  v6 = 0;
  LODWORD(v7) = 0;
  do
  {
    v8 = 0;
    v9 = dword_1B3558458[v6];
    v7 = (int)v7;
    do
    {
      v10 = dword_1B3558458[v8];
      *(_QWORD *)&v24[8 * v7 + 72] = *(_QWORD *)(a1 + 32 * v9 + 8 * v10);
      *(_QWORD *)&v24[8 * v7++] = *(_QWORD *)(a2 + 32 * v9 + 8 * v10);
      ++v8;
    }
    while (v8 != 3);
    ++v6;
  }
  while (v6 != 3);
  v11 = 0;
  v12 = 0.0;
  do
  {
    v12 = v12 + *(double *)&v24[v11 + 72] * *(double *)&v24[v11 + 72];
    v11 += 8;
  }
  while (v11 != 72);
  v13 = 0;
  v14 = 0.0;
  do
  {
    v14 = v14 + *(double *)&v24[v13] * *(double *)&v24[v13];
    v13 += 8;
  }
  while (v13 != 72);
  v15 = sqrt(v12);
  v16 = sqrt(v14);
  v17 = v15 < 0.0000001 && v15 > -0.0000001;
  v18 = v16 > -0.0000001;
  if (v16 >= 0.0000001)
    v18 = 0;
  result = v17 & v18;
  if (!v17 && !v18)
  {
    v19 = 0;
    v20 = 0.0;
    do
    {
      v20 = v20 + *(double *)&v24[v19 + 72] * *(double *)&v24[v19];
      v19 += 8;
    }
    while (v19 != 72);
    v21 = 0;
    if (v20 < 0.0)
      v16 = -v16;
    do
    {
      v22 = vabdd_f64(*(double *)&v24[v21 + 72] / v15, *(double *)&v24[v21] / v16);
      result = v22 < 0.0000001;
      if (v22 >= 0.0000001)
        break;
      v23 = v21 == 64;
      v21 += 8;
    }
    while (!v23);
  }
  return result;
}

uint64_t LiAgent::getHeliumRenderer(LiRenderParameters **this)
{
  return LiRenderParameters::getHeliumRenderer(this[6]);
}

uint64_t LiAgent::rasterizeEdges(LiAgent *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 6) + 135);
}

BOOL LiAgent::getInversePixelTransform(uint64_t a1, uint64_t a2, double a3)
{
  _BOOL8 result;
  PCException *exception;
  PCString v5;

  result = PCMatrix44Tmpl<double>::planarInverseZ(a2, *(double **)(a1 + 160), a3);
  if (!result)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v5, "LiAgent::getInversePixelTransform");
    PCException::PCException(exception, &v5);
    *(_QWORD *)exception = &unk_1E6512988;
  }
  return result;
}

void sub_1B2CD7808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t LiAgent::getRequestedColorSpace(LiAgent *this)
{
  return FxColorDescription::getCGColorSpace((FxColorDescription *)((char *)this + 400));
}

CGColorSpace **LiAgent::getActualColorDescription(LiAgent *this)
{
  CGColorSpace **v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (CGColorSpace **)((char *)this + 432);
  if (!FxColorDescription::getCGColorSpace((FxColorDescription *)((char *)this + 432)))
  {
    v3 = *((_QWORD *)this + 6);
    PCCFRef<CGColorSpace *>::operator=(v2, (CGColorSpace **)(v3 + 160));
    v4 = *(_QWORD *)(v3 + 168);
    *((_DWORD *)this + 112) = *(_DWORD *)(v3 + 176);
    *((_QWORD *)this + 55) = v4;
    *((_BYTE *)this + 456) = *(_BYTE *)(v3 + 184);
  }
  return v2;
}

CGColorSpace **LiAgent::setActualColorDescription(CGColorSpace **this, const FxColorDescription *a2)
{
  CGColorSpace **result;
  CGColorSpace *v5;

  result = PCCFRef<CGColorSpace *>::operator=(this + 54, &a2->_pcColorDesc._colorSpaceRef._obj);
  v5 = *(CGColorSpace **)&a2->_pcColorDesc._dynamicRange;
  *((_DWORD *)this + 112) = LODWORD(a2->_pcColorDesc._toneMapMethod._gain);
  this[55] = v5;
  *((_BYTE *)this + 456) = a2->_isPremultiplied;
  return result;
}

uint64_t LiAgent::makeHeliumXForm@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double v8;
  uint64_t v9;
  _OWORD *v10;
  double v11;
  uint64_t i;
  _OWORD v14[8];

  v4 = *(_OWORD *)(a2 + 80);
  v14[4] = *(_OWORD *)(a2 + 64);
  v14[5] = v4;
  v5 = *(_OWORD *)(a2 + 112);
  v14[6] = *(_OWORD *)(a2 + 96);
  v14[7] = v5;
  v6 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v14[2] = *(_OWORD *)(a2 + 32);
  v14[3] = v7;
  v8 = sqrt(*(double *)(a2 + 96) * *(double *)(a2 + 96)+ *(double *)(a2 + 104) * *(double *)(a2 + 104)+ *(double *)(a2 + 112) * *(double *)(a2 + 112)+ *(double *)(a2 + 120) * *(double *)(a2 + 120));
  if (v8 <= -0.0000001 || v8 >= 0.0000001)
  {
    v9 = 0;
    v10 = v14;
    v11 = 1.0 / v8;
    do
    {
      for (i = 0; i != 2; ++i)
        v10[i] = vmulq_n_f64((float64x2_t)v10[i], v11);
      ++v9;
      v10 += 2;
    }
    while (v9 != 4);
  }
  return LiAgent::makeHeliumXForm(a1, (uint64_t)v14, a3, a4);
}

uint64_t LiAgent::outCrop(LiAgent *this, const LiImagePolygon *a2)
{
  return LiImagePolygon::operator=(*(_QWORD *)this + 264, (uint64_t)a2);
}

CGColorSpace **LiAgent::conformToRequestedColorSpace@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  CGColorSpace **ActualColorDescription;
  CGColorSpace *v7;
  CGColorSpace *v8;
  CGColorSpace *v9;
  uint64_t v10;
  FxColorDescription v12;
  FxColorDescription v13;

  ActualColorDescription = LiAgent::getActualColorDescription((LiAgent *)a1);
  v7 = *ActualColorDescription;
  v13._pcColorDesc._colorSpaceRef._obj = v7;
  if (v7)
    PCCFRefTraits<CGColorSpace *>::retain(v7);
  v8 = ActualColorDescription[1];
  v13._pcColorDesc._toneMapMethod._gain = *((float *)ActualColorDescription + 4);
  *(_QWORD *)&v13._pcColorDesc._dynamicRange = v8;
  v13._isPremultiplied = *((_BYTE *)ActualColorDescription + 24);
  v9 = *(CGColorSpace **)(a1 + 400);
  v12._pcColorDesc._colorSpaceRef._obj = v9;
  if (v9)
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  *(_QWORD *)&v12._pcColorDesc._dynamicRange = *(_QWORD *)(a1 + 408);
  v12._pcColorDesc._toneMapMethod._gain = *(float *)(a1 + 416);
  v12._isPremultiplied = *(_BYTE *)(a1 + 424);
  if (FxColorDescription::getCGColorSpace(&v12) && FxColorDescription::getCGColorSpace(&v13))
  {
    FxApplyColorConform(a2, &v13, &v12, a3);
    PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)(a1 + 432), &v12._pcColorDesc._colorSpaceRef._obj);
    *(_QWORD *)(a1 + 440) = *(_QWORD *)&v12._pcColorDesc._dynamicRange;
    *(float *)(a1 + 448) = v12._pcColorDesc._toneMapMethod._gain;
    *(_BYTE *)(a1 + 456) = v12._isPremultiplied;
  }
  else
  {
    v10 = *a2;
    *a3 = *a2;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v12._pcColorDesc._colorSpaceRef._obj);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v13._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B2CD7AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9, uint64_t a10, uint64_t a11, uint64_t a12, CGColorSpace *a13)
{
  _QWORD *v13;

  if (*v13)
    (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 24))(*v13);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a13);
  _Unwind_Resume(a1);
}

void LiAgent::getHeliumInColorSpace(LiAgent *this@<X0>, LiImageSource *a2@<X1>, CGColorSpace *a3@<X2>, HGNode **a4@<X8>)
{
  CGColorSpace *v7[5];

  LiAgentRequestedColorSpaceSentry::LiAgentRequestedColorSpaceSentry((LiAgentRequestedColorSpaceSentry *)v7, this, a3);
  LiAgent::getHelium(this, a2, a4);
  LiAgentRequestedColorSpaceSentry::~LiAgentRequestedColorSpaceSentry(v7);
}

void sub_1B2CD7B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  LiAgentRequestedColorSpaceSentry::~LiAgentRequestedColorSpaceSentry((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void LiAgent::getHeliumInColorDescription(LiAgent *this@<X0>, LiImageSource *a2@<X1>, const FxColorDescription *a3@<X2>, HGNode **a4@<X8>)
{
  CGColorSpace *v7[5];

  LiAgentRequestedColorSpaceSentry::LiAgentRequestedColorSpaceSentry((LiAgentRequestedColorSpaceSentry *)v7, this, a3);
  LiAgent::getHelium(this, a2, a4);
  LiAgentRequestedColorSpaceSentry::~LiAgentRequestedColorSpaceSentry(v7);
}

void sub_1B2CD7BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  LiAgentRequestedColorSpaceSentry::~LiAgentRequestedColorSpaceSentry((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t LiAgent::getCrop(LiAgent *this)
{
  return (uint64_t)this + 264;
}

uint64_t LiAgent::getDOD@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  HGRenderer *HeliumRenderer;
  unint64_t DOD;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;

  *(_OWORD *)a2 = xmmword_1B30503B0;
  *(_BYTE *)(a2 + 16) = 0;
  if (*(_QWORD *)(this + 256))
  {
    v3 = this;
    HeliumRenderer = (HGRenderer *)LiRenderParameters::getHeliumRenderer(*(LiRenderParameters **)(this + 48));
    DOD = HGRenderer::GetDOD(HeliumRenderer, *(HGNode **)(v3 + 256));
    v7 = v6;
    this = HGRectIsInfinite(DOD, v6);
    if ((_DWORD)this)
    {
      *(_BYTE *)(a2 + 16) = 1;
    }
    else
    {
      this = HGRectIsNull(DOD, v7);
      if ((_DWORD)this)
      {
        LODWORD(v8) = 0;
        v9 = 0;
        v10 = -1;
        v11 = -1;
      }
      else
      {
        v8 = HIDWORD(DOD);
        if ((int)DOD <= -1073741823)
          v9 = -1073741823;
        else
          v9 = DOD;
        if (SHIDWORD(DOD) <= -1073741823)
          LODWORD(v8) = -1073741823;
        if ((int)v7 >= 1073741822)
          v12 = 1073741822;
        else
          v12 = v7;
        v13 = HIDWORD(v7);
        if (SHIDWORD(v7) >= 1073741822)
          LODWORD(v13) = 1073741822;
        v10 = v12 - v9;
        v11 = v13 - v8;
      }
      *(_DWORD *)a2 = v9;
      *(_DWORD *)(a2 + 4) = v8;
      *(_DWORD *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 12) = v11;
    }
  }
  return this;
}

void LiAgent::getExtent(LiAgent *this@<X0>, LiPolygon *a2@<X8>)
{
  int64x2_t v4;
  float64x2_t v5;
  double v6;
  double v7;
  _DWORD v8[2];
  int v9;
  int v10;
  char v11;

  LiPolygon::LiPolygon(a2);
  if (((*((_QWORD *)this + 42) - *((_QWORD *)this + 41)) & 0x1FFFFFFFE0) != 0)
  {
    LiPolygon::operator=((uint64_t)a2, (uint64_t)this + 264);
  }
  else if (*((_QWORD *)this + 32))
  {
    LiAgent::getDOD((uint64_t)this, (uint64_t)v8);
    if (v11)
    {
      LiPolygon::setAll((uint64_t **)a2);
    }
    else if ((v9 & 0x80000000) == 0 && (v10 & 0x80000000) == 0)
    {
      v4.i64[0] = v8[0];
      v4.i64[1] = v8[1];
      v5 = vcvtq_f64_s64(v4);
      v6 = (double)v9;
      v7 = (double)v10;
      LiPolygon::set((uint64_t)a2, v5.f64);
    }
  }
}

void sub_1B2CD7D74(_Unwind_Exception *a1)
{
  LiPolygon *v1;

  LiPolygon::~LiPolygon(v1);
  _Unwind_Resume(a1);
}

void LiAgent::getBoundary(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  LiImageSource *v2;
  int v10;
  PCString *v11;
  uint64_t v12;
  PCString *v13;
  uint64_t i;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t m;
  _OWORD *v23;
  __int128 v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t k;
  _OWORD *v33;
  __int128 v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t j;
  _OWORD *v43;
  __int128 v44;
  int64x2_t v45;
  float64x2_t v46;
  PCException *exception;
  PCException *v48;
  PCException *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60[8];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[8];
  PCString v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  PCString v80;
  int v81;

  v2 = (LiImageSource *)*((_QWORD *)this + 2);
  if (!v2)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v80, "can't call getBoundary before getHelium");
    PCException::PCException(exception, &v80);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 16) = _Q0;
  LiAgent::LiAgent((LiAgent *)&v80, v2, this);
  if (!(*(unsigned int (**)(_QWORD, LiAgent *, uint64_t))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), this, a2))goto LABEL_25;
  v10 = v81;
  v11 = (PCString *)*((_QWORD *)this + 29);
  if (v11 || v81 && v81 != *((_DWORD *)this + 10))
  {
    v79 = 0x3FF0000000000000;
    v76 = 0x3FF0000000000000;
    v73 = 0x3FF0000000000000;
    v70.var0 = (__CFString *)0x3FF0000000000000;
    v71 = 0u;
    v72 = 0u;
    v74 = 0u;
    v75 = 0u;
    v77 = 0u;
    v78 = 0u;
    if (v11 && v11 != &v70)
    {
      v12 = 0;
      v13 = &v70;
      do
      {
        for (i = 0; i != 4; ++i)
          v13[i] = v11[i];
        ++v12;
        v13 += 4;
        v11 += 4;
      }
      while (v12 != 4);
    }
    switch(v10)
    {
      case 1:
        v35 = (__int128 *)*((_QWORD *)this + 22);
        v36 = v35[3];
        v38 = *v35;
        v37 = v35[1];
        v63 = v35[2];
        v64 = v36;
        v61 = v38;
        v62 = v37;
        v39 = v35[7];
        v41 = v35[4];
        v40 = v35[5];
        v67 = v35[6];
        v68 = v39;
        v65 = v41;
        v66 = v40;
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v70, &v61, (uint64_t)v69);
        for (j = 0; j != 8; j += 2)
        {
          v43 = (_OWORD *)((char *)&v70 + j * 16);
          v44 = v69[j + 1];
          *v43 = v69[j];
          v43[1] = v44;
        }
        break;
      case 3:
        v25 = (__int128 *)*((_QWORD *)this + 21);
        v26 = v25[3];
        v28 = *v25;
        v27 = v25[1];
        v60[2] = v25[2];
        v60[3] = v26;
        v60[0] = v28;
        v60[1] = v27;
        v29 = v25[7];
        v31 = v25[4];
        v30 = v25[5];
        v60[6] = v25[6];
        v60[7] = v29;
        v60[4] = v31;
        v60[5] = v30;
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v70, v60, (uint64_t)&v61);
        v59 = 0x3FF0000000000000;
        v56 = 0x3FF0000000000000;
        v53 = 0x3FF0000000000000;
        v50 = 0x3FF0000000000000;
        v51 = 0u;
        v52 = 0u;
        v54 = 0u;
        v55 = 0u;
        v57 = 0u;
        v58 = 0u;
        PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v50, *((double **)this + 28), 0.0);
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v61, (__int128 *)&v50, (uint64_t)v69);
        for (k = 0; k != 8; k += 2)
        {
          v33 = (_OWORD *)((char *)&v70 + k * 16);
          v34 = v69[k + 1];
          *v33 = v69[k];
          v33[1] = v34;
        }
        break;
      case 2:
        v15 = (__int128 *)*((_QWORD *)this + 21);
        v16 = v15[3];
        v18 = *v15;
        v17 = v15[1];
        v63 = v15[2];
        v64 = v16;
        v61 = v18;
        v62 = v17;
        v19 = v15[7];
        v21 = v15[4];
        v20 = v15[5];
        v67 = v15[6];
        v68 = v19;
        v65 = v21;
        v66 = v20;
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v70, &v61, (uint64_t)v69);
        for (m = 0; m != 8; m += 2)
        {
          v23 = (_OWORD *)((char *)&v70 + m * 16);
          v24 = v69[m + 1];
          *v23 = v69[m];
          v23[1] = v24;
        }
        break;
    }
    if (!PCMatrix44Tmpl<double>::transformRect<double>((double *)&v70, (double *)a2, a2))
    {
LABEL_25:
      LiAgent::getDOD((uint64_t)this, (uint64_t)&v61);
      if ((_BYTE)v62)
      {
        v48 = (PCException *)__cxa_allocate_exception(0x40uLL);
        PCString::PCString(&v70, "getBoundary failed: infinite DOD");
        PCException::PCException(v48, &v70);
      }
      v79 = 0x3FF0000000000000;
      v76 = 0x3FF0000000000000;
      v73 = 0x3FF0000000000000;
      v70.var0 = (__CFString *)0x3FF0000000000000;
      v71 = 0u;
      v72 = 0u;
      v74 = 0u;
      v75 = 0u;
      v77 = 0u;
      v78 = 0u;
      LiAgent::getInversePixelTransform((uint64_t)this, (uint64_t)&v70, 0.0);
      v45.i64[0] = (int)v61;
      v45.i64[1] = SDWORD1(v61);
      v46 = vcvtq_f64_s64(v45);
      v45.i64[0] = SDWORD2(v61);
      v45.i64[1] = SHIDWORD(v61);
      v69[0] = v46;
      v69[1] = vcvtq_f64_s64(v45);
      if (!PCMatrix44Tmpl<double>::transformRect<double>((double *)&v70, (double *)v69, a2))
      {
        v49 = (PCException *)__cxa_allocate_exception(0x40uLL);
        PCString::PCString(&v70, "getBoundary failed");
        PCException::PCException(v49, &v70);
      }
    }
  }
  LiAgent::~LiAgent((LiAgent *)&v80);
}

void sub_1B2CD8188(_Unwind_Exception *a1)
{
  LiAgent::~LiAgent((LiAgent *)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_1B2CD822C()
{
  JUMPOUT(0x1B2CD8224);
}

__n128 LiAgent::getFilmToImageTransform@<Q0>(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = *((_QWORD *)this + 21);
  v3 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  v4 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(v2 + 32);
  v7 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

__n128 LiAgent::getObjectToImageTransform@<Q0>(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = *((_QWORD *)this + 22);
  v3 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  v4 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(v2 + 32);
  v7 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

uint64_t LiAgent::haveROI(LiAgent *this)
{
  return *((unsigned __int8 *)this + 76);
}

__n128 LiAgent::getROI@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[5];
  *a2 = result;
  return result;
}

__n128 LiAgent::setInputROI(uint64_t a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)(a1 + 60) = *a2;
  *(_BYTE *)(a1 + 56) = 1;
  return result;
}

__n128 LiAgent::passROI(LiAgent *this)
{
  uint64_t v1;
  __n128 result;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *((_BYTE *)this + 56) = *(_BYTE *)(v1 + 56);
    result = *(__n128 *)(v1 + 60);
    *(__n128 *)((char *)this + 60) = result;
  }
  return result;
}

__n128 LiAgent::setClientROI(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[5] = *a2;
  a1[4].n128_u8[12] = 1;
  return result;
}

double LiAgent::getClientPixelTransform@<D0>(double **this@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  double *v7;

  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  if (*this)
  {
    v3 = *((_QWORD *)*this + 20);
    if (v3 != a2)
    {
      v4 = 0;
      v5 = a2;
      do
      {
        for (i = 0; i != 32; i += 8)
        {
          result = *(double *)(v3 + i);
          *(double *)(v5 + i) = result;
        }
        ++v4;
        v5 += 32;
        v3 += 32;
      }
      while (v4 != 4);
    }
    v7 = this[30];
    if (v7)
      return PCMatrix44Tmpl<double>::rightMult(a2, v7);
  }
  return result;
}

double LiAgent::getInverseClientPixelTransform@<D0>(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t i;
  _OWORD *v7;
  __int128 v8;
  double *v9;
  PCException *exception;
  PCString v12;
  double v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  v4 = 0uLL;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  v5 = *(_QWORD *)this;
  if (v5)
  {
    v22 = 0x3FF0000000000000;
    v19 = 0x3FF0000000000000;
    v16 = 0x3FF0000000000000;
    v13 = 1.0;
    v14 = 0uLL;
    v15 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    LiAgent::getInversePixelTransform(v5, (uint64_t)&v13, 0.0);
    if (&v13 != (double *)a2)
    {
      for (i = 0; i != 128; i += 32)
      {
        v7 = (_OWORD *)(a2 + i);
        v4 = *(_OWORD *)((char *)&v13 + i);
        v8 = *(__int128 *)((char *)&v14 + i + 8);
        *v7 = v4;
        v7[1] = v8;
      }
    }
    v9 = (double *)*((_QWORD *)this + 30);
    if (v9)
    {
      v22 = 0x3FF0000000000000;
      v19 = 0x3FF0000000000000;
      v16 = 0x3FF0000000000000;
      v13 = 1.0;
      v14 = 0u;
      v15 = 0u;
      v17 = 0u;
      v18 = 0u;
      v20 = 0u;
      v21 = 0u;
      if (!PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v13, v9, 0.0))
      {
        exception = (PCException *)__cxa_allocate_exception(0x40uLL);
        PCString::PCString(&v12, "getInverseClientPixelTransform: failed to invert");
        PCException::PCException(exception, &v12);
        *(_QWORD *)exception = &unk_1E6512988;
      }
      *(double *)&v4 = PCMatrix44Tmpl<double>::leftMult(a2, &v13);
    }
  }
  return *(double *)&v4;
}

