void **std::deque<HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>>::erase(int64x2_t *a1, _QWORD *a2, char *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const void **v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  const void **v26;
  char *v27;
  unint64_t v28;
  int64x2_t v29;
  unint64_t v30;
  void **v31;
  void **result;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const void **v38;
  _BYTE *v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  const void **v43[4];

  v6 = a1[2].u64[0];
  v7 = a1->i64[1];
  v8 = a1[1].i64[0];
  v9 = (const void **)(v7 + 8 * (v6 / 0x24));
  if (v8 != v7)
  {
    v10 = (char *)*v9 + 112 * (v6 % 0x24);
    if (a3 != v10)
      goto LABEL_3;
LABEL_9:
    v13 = 0;
    v12 = *v9;
    goto LABEL_10;
  }
  v10 = 0;
  if (!a3)
    goto LABEL_9;
LABEL_3:
  v11 = 36 * ((const void **)a2 - v9) + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a3[-*a2] >> 4);
  v12 = *v9;
  v13 = v11 - 0x6DB6DB6DB6DB6DB7 * ((v10 - (_BYTE *)*v9) >> 4);
  if (!v13)
  {
LABEL_10:
    v22 = 1;
    v14 = (const void **)(v7 + 8 * (v6 / 0x24));
    v15 = (const void **)v10;
    goto LABEL_13;
  }
  if (v11 < 1)
  {
    v14 = &v9[-((35 - v11) / 0x24uLL)];
    v12 = *v14;
    v15 = (const void **)((char *)*v14 + 112 * (36 * ((35 - v11) / 0x24uLL) - (35 - v11)) + 3920);
    v16 = a1[2].i64[1];
    if (v13 > (unint64_t)(v16 - 1) >> 1)
      goto LABEL_6;
  }
  else
  {
    v14 = &v9[v11 / 0x24uLL];
    v12 = *v14;
    v15 = (const void **)((char *)*v14 + 112 * (v11 % 0x24uLL));
    v16 = a1[2].i64[1];
    if (v13 > (unint64_t)(v16 - 1) >> 1)
    {
LABEL_6:
      v17 = (char *)v15 - v12;
      v18 = 0x6DB6DB6DB6DB6DB7 * (((char *)v15 - v12) >> 4);
      if (v17 < -111)
      {
        v35 = 34 - v18;
        v20 = &v14[-(v35 / 0x24)];
        v21 = (char *)*v20 + 112 * (36 * (v35 / 0x24) - v35) + 3920;
      }
      else
      {
        v19 = v18 + 1;
        v20 = &v14[v19 / 0x24];
        v21 = (char *)*v20 + 112 * (v19 % 0x24);
      }
      v36 = v16 + v6;
      v37 = (v16 + v6) / 0x24;
      v38 = (const void **)(v7 + 8 * v37);
      if (v8 == v7)
        v39 = 0;
      else
        v39 = (char *)*v38 + 112 * (v36 - 36 * v37);
      v43[0] = v14;
      v43[1] = v15;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,HGMetalTextureWrapperInfinipool::Descriptor*,HGMetalTextureWrapperInfinipool::Descriptor&,HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>*,long,36l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>*,HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>*>>(v20, v21, v38, v39, (uint64_t)v43);
      v31 = (void **)a1->i64[1];
      v40 = (void **)a1[1].i64[0];
      v41 = 36 * (v40 - v31) - 1;
      v30 = a1[2].u64[0];
      v42 = a1[2].i64[1];
      a1[2].i64[1] = v42 - 1;
      if (v40 == v31)
        v41 = 0;
      if (v41 - (v42 + v30) + 1 >= 0x48)
      {
        operator delete(*(v40 - 1));
        v22 = 0;
        v31 = (void **)a1->i64[1];
        a1[1].i64[0] -= 8;
        v30 = a1[2].u64[0];
      }
      else
      {
        v22 = 0;
      }
      goto LABEL_18;
    }
  }
  v22 = 0;
LABEL_13:
  v23 = (char *)v15 - v12;
  v24 = 0x6DB6DB6DB6DB6DB7 * (((char *)v15 - v12) >> 4);
  if (v23 < -111)
  {
    v28 = 34 - v24;
    v26 = &v14[-(v28 / 0x24)];
    v27 = (char *)*v26 + 112 * (36 * (v28 / 0x24) - v28) + 3920;
  }
  else
  {
    v25 = v24 + 1;
    v26 = &v14[v25 / 0x24];
    v27 = (char *)*v26 + 112 * (v25 % 0x24);
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,HGMetalTextureWrapperInfinipool::Descriptor*,HGMetalTextureWrapperInfinipool::Descriptor&,HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>*,long,36l>,HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>*,0>(v9, v10, v14, (char *)v15, v26, v27, v43);
  v29 = vaddq_s64(a1[2], (int64x2_t)xmmword_1B304F0B0);
  a1[2] = v29;
  v30 = v29.i64[0];
  v31 = (void **)a1->i64[1];
  if (v29.i64[0] >= 0x48uLL)
  {
    operator delete(*v31);
    v31 = (void **)(a1->i64[1] + 8);
    a1->i64[1] = (uint64_t)v31;
    v30 = a1[2].i64[0] - 36;
    a1[2].i64[0] = v30;
  }
LABEL_18:
  result = &v31[v30 / 0x24];
  if ((void **)a1[1].i64[0] == v31)
  {
    v33 = 0;
    if ((v22 & 1) != 0)
      return result;
  }
  else
  {
    v33 = (unint64_t)*result + 112 * (v30 % 0x24);
    if ((v22 & 1) != 0)
      return result;
  }
  v34 = v13 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v33 - (_QWORD)*result) >> 4);
  if (v34 < 1)
    result -= (35 - v34) / 0x24uLL;
  else
    result += v34 / 0x24uLL;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,HGMetalTextureWrapperInfinipool::Descriptor*,HGMetalTextureWrapperInfinipool::Descriptor&,HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>*,long,36l>,HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>*,0>@<X0>(const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  const void **v8;
  const void **v9;
  const void **v10;
  const void ***v12;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *result;
  uint64_t v19;
  char *v20;
  const void **v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v8 = a5;
  v9 = (const void **)a4;
  v10 = a3;
  v12 = a7;
  if (a1 == a3)
  {
    if (a2 != a4)
    {
      v34 = (uint64_t)*a5;
      v35 = a4;
      while (1)
      {
        v36 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a6[-v34] >> 4);
        if (0x6DB6DB6DB6DB6DB7 * ((v35 - a2) >> 4) < v36)
          v36 = 0x6DB6DB6DB6DB6DB7 * ((v35 - a2) >> 4);
        v35 -= 112 * v36;
        a6 -= 112 * v36;
        if (v36)
          result = memmove(a6, v35, 112 * v36 - 7);
        if (v35 == a2)
          break;
        v37 = (uint64_t)*--v8;
        v34 = v37;
        a6 = (char *)(v37 + 4032);
      }
      if ((char *)*v8 + 4032 == a6)
      {
        v38 = (char *)v8[1];
        ++v8;
        a6 = v38;
      }
      v10 = a3;
    }
  }
  else
  {
    v14 = *a3;
    if (*a3 != a4)
    {
      v15 = (uint64_t)*a5;
      v16 = a4;
      while (1)
      {
        v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a6[-v15] >> 4);
        if (0x6DB6DB6DB6DB6DB7 * ((v16 - v14) >> 4) < v17)
          v17 = 0x6DB6DB6DB6DB6DB7 * ((v16 - v14) >> 4);
        v16 -= 112 * v17;
        a6 -= 112 * v17;
        if (v17)
          result = memmove(a6, v16, 112 * v17 - 7);
        if (v16 == v14)
          break;
        v19 = (uint64_t)*--v8;
        v15 = v19;
        a6 = (char *)(v19 + 4032);
      }
      if ((char *)*v8 + 4032 == a6)
      {
        v20 = (char *)v8[1];
        ++v8;
        a6 = v20;
      }
      v10 = a3;
    }
    v21 = v10 - 1;
    if (v10 - 1 != a1)
    {
      v22 = (char *)*v8;
      do
      {
        while (1)
        {
          v23 = *v21;
          v24 = (char *)*v21 + 4032;
          while (1)
          {
            v25 = 0x6DB6DB6DB6DB6DB7 * ((a6 - v22) >> 4);
            if (0x6DB6DB6DB6DB6DB7 * ((v24 - v23) >> 4) < v25)
              v25 = 0x6DB6DB6DB6DB6DB7 * ((v24 - v23) >> 4);
            v24 -= 112 * v25;
            a6 -= 112 * v25;
            if (v25)
              result = memmove(a6, v24, 112 * v25 - 7);
            if (v24 == v23)
              break;
            v26 = (char *)*--v8;
            v22 = v26;
            a6 = v26 + 4032;
          }
          v22 = (char *)*v8;
          if ((char *)*v8 + 4032 == a6)
            break;
          if (--v21 == a1)
            goto LABEL_25;
        }
        v27 = (char *)v8[1];
        ++v8;
        v22 = v27;
        a6 = v27;
        --v21;
      }
      while (v21 != a1);
LABEL_25:
      v10 = a3;
    }
    v28 = (char *)*a1 + 4032;
    v9 = (const void **)a4;
    if (v28 != a2)
    {
      v29 = (uint64_t)*v8;
      while (1)
      {
        v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a6[-v29] >> 4);
        if (0x6DB6DB6DB6DB6DB7 * ((v28 - a2) >> 4) < v30)
          v30 = 0x6DB6DB6DB6DB6DB7 * ((v28 - a2) >> 4);
        v28 -= 112 * v30;
        a6 -= 112 * v30;
        if (v30)
          result = memmove(a6, v28, 112 * v30 - 7);
        if (v28 == a2)
          break;
        v31 = (uint64_t)*--v8;
        v29 = v31;
        a6 = (char *)(v31 + 4032);
      }
      if ((char *)*v8 + 4032 == a6)
      {
        v32 = (char *)v8[1];
        ++v8;
        a6 = v32;
      }
    }
    v12 = a7;
  }
  *v12 = v10;
  v12[1] = v9;
  v12[2] = v8;
  v12[3] = (const void **)a6;
  return result;
}

const void **std::__for_each_segment[abi:ne180100]<std::__deque_iterator<HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,HGMetalTextureWrapperInfinipool::Descriptor*,HGMetalTextureWrapperInfinipool::Descriptor&,HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>*,long,36l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>*,HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>*>>(const void **result, _BYTE *__src, const void **a3, _BYTE *a4, uint64_t a5)
{
  _BYTE *v6;
  char *v7;
  void **v8;
  const void **v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void **v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v38;

  v6 = __src;
  v8 = *(void ***)a5;
  v7 = *(char **)(a5 + 8);
  if (result == a3)
  {
    if (__src == a4)
      goto LABEL_48;
    v32 = (char *)*v8++;
    v31 = v32;
    while (1)
    {
      v33 = 0x6DB6DB6DB6DB6DB7 * ((v31 - v7 + 4032) >> 4);
      if (0x6DB6DB6DB6DB6DB7 * ((a4 - v6) >> 4) >= v33)
        v34 = v33;
      else
        v34 = 0x6DB6DB6DB6DB6DB7 * ((a4 - v6) >> 4);
      if (v34)
        result = (const void **)memmove(v7, v6, 112 * v34 - 7);
      v6 += 112 * v34;
      if (v6 == a4)
        break;
      v35 = (char *)*v8++;
      v31 = v35;
      v7 = v35;
    }
    v7 += 112 * v34;
    v30 = v8 - 1;
    if ((char *)*(v8 - 1) + 4032 != v7)
      goto LABEL_36;
    goto LABEL_47;
  }
  v9 = result;
  v10 = (char *)*result + 4032;
  if (v10 != __src)
  {
    v12 = (char *)*v8++;
    v11 = v12;
    while (1)
    {
      v13 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v7 + 4032) >> 4);
      if (0x6DB6DB6DB6DB6DB7 * ((v10 - v6) >> 4) >= v13)
        v14 = v13;
      else
        v14 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v6) >> 4);
      if (v14)
        result = (const void **)memmove(v7, v6, 112 * v14 - 7);
      v6 += 112 * v14;
      if (v6 == v10)
        break;
      v15 = (char *)*v8++;
      v11 = v15;
      v7 = v15;
    }
    v7 += 112 * v14;
    if ((char *)*(v8 - 1) + 4032 == v7)
    {
      v7 = (char *)*v8;
      *(_QWORD *)a5 = v8;
      *(_QWORD *)(a5 + 8) = v7;
      v16 = v9 + 1;
      if (v9 + 1 != a3)
        goto LABEL_16;
      goto LABEL_26;
    }
    --v8;
  }
  *(_QWORD *)a5 = v8;
  *(_QWORD *)(a5 + 8) = v7;
  v16 = v9 + 1;
  if (v9 + 1 != a3)
  {
    do
    {
LABEL_16:
      while (1)
      {
        v17 = 0;
        v38 = v16;
        v18 = *v16;
        v20 = (char *)*v8++;
        v19 = v20;
        while (1)
        {
          v21 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v7 + 4032) >> 4);
          if (0x6DB6DB6DB6DB6DB7 * ((4032 - 112 * v17) >> 4) >= v21)
            v22 = v21;
          else
            v22 = 0x6DB6DB6DB6DB6DB7 * ((4032 - 112 * v17) >> 4);
          if (v22)
            result = (const void **)memmove(v7, (const void *)(v18 + 112 * v17), 112 * v22 - 7);
          v17 += v22;
          if (v17 == 36)
            break;
          v23 = (char *)*v8++;
          v19 = v23;
          v7 = v23;
        }
        v7 += 112 * v22;
        if ((char *)*(v8 - 1) + 4032 != v7)
          break;
        v7 = (char *)*v8;
        *(_QWORD *)a5 = v8;
        *(_QWORD *)(a5 + 8) = v7;
        v16 = v38 + 1;
        if (v38 + 1 == a3)
          goto LABEL_26;
      }
      *(_QWORD *)a5 = --v8;
      *(_QWORD *)(a5 + 8) = v7;
      v16 = v38 + 1;
    }
    while (v38 + 1 != a3);
  }
LABEL_26:
  v24 = *a3;
  if (*a3 != a4)
  {
    v26 = (char *)*v8++;
    v25 = v26;
    while (1)
    {
      v27 = 0x6DB6DB6DB6DB6DB7 * ((v25 - v7 + 4032) >> 4);
      v28 = 0x6DB6DB6DB6DB6DB7 * ((a4 - v24) >> 4) >= v27 ? v27 : 0x6DB6DB6DB6DB6DB7 * ((a4 - v24) >> 4);
      if (v28)
        result = (const void **)memmove(v7, v24, 112 * v28 - 7);
      v24 += 112 * v28;
      if (v24 == a4)
        break;
      v29 = (char *)*v8++;
      v25 = v29;
      v7 = v29;
    }
    v7 += 112 * v28;
    v30 = v8 - 1;
    if ((char *)*(v8 - 1) + 4032 != v7)
    {
LABEL_36:
      v8 = v30;
      goto LABEL_48;
    }
LABEL_47:
    v7 = (char *)*v8;
  }
LABEL_48:
  *(_QWORD *)a5 = v8;
  *(_QWORD *)(a5 + 8) = v7;
  return result;
}

_QWORD *std::__function::__func<HGPool::MatchDescription<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6526768;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<HGPool::MatchDescription<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6526768;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E29170);
}

char *std::__function::__func<HGPool::MatchDescription<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)operator new(0x70uLL);
  *(_QWORD *)v2 = &off_1E6526768;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      *((_QWORD *)v2 + 4) = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  *((_QWORD *)v2 + 4) = v4;
LABEL_6:
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  return v2;
}

void sub_1B2A8C088(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<HGPool::MatchDescription<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a2 = &off_1E6526768;
  v4 = a2 + 8;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      *(_QWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  v7 = *(_OWORD *)(a1 + 72);
  v8 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v8;
  *(_OWORD *)(a2 + 72) = v7;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t std::__function::__func<HGPool::MatchDescription<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<HGPool::MatchDescription<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

BOOL std::__function::__func<HGPool::MatchDescription<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  return a1[5] == a2[2] && a1[6] == a2[3] && a1[8] == a2[5] && a1[11] == a2[8] && a1[12] == a2[9] && a1[13] == a2[10];
}

uint64_t std::__function::__func<HGPool::MatchDescription<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N6HGPool16MatchDescriptionIPU21objcproto10MTLTexture11objc_objectN31HGMetalTextureWrapperInfinipool10DescriptorEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N6HGPool16MatchDescriptionIPU21objcproto10MTLTexture11objc_objectN31HGMetalTextureWrappe"
                                "rInfinipool10DescriptorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N6HGPool16MatchDescriptionIPU21objcproto10MTLTexture11objc_objectN31HGMetalTextureWrapperInfinipool10DescriptorEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N6HGPool16MatchDescriptionIPU21objcproto10MTLTexture11objc_objectN31HGMetalTextureWrapperInfinipool10DescriptorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<HGPool::MatchDescription<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::target_type()
{
}

void HGPool::EntryEventHandler<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>::reused(_QWORD *a1)
{
  const char *v2;
  char *v3;
  unsigned __int8 v4;
  void *p_p;
  void *__p;
  char v7;

  HGPool::DescriptorString<HGMetalTextureWrapperInfinipool::Descriptor>::str((uint64_t)(a1 + 2));
  v4 = atomic_load(HGLogger::_enabled);
  if ((v4 & 1) != 0)
  {
    if (v7 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    HGLogger::log((HGLogger *)"hgpool", (const char *)1, (HGLogger *)"hgpool entry reused : %p (%s)\n", v2, v3, *a1, p_p);
  }
  if (v7 < 0)
    operator delete(__p);
}

void sub_1B2A8C344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HGPool::EntryEventHandler<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>::allocated(_QWORD *a1)
{
  const char *v2;
  char *v3;
  unsigned __int8 v4;
  void *p_p;
  void *__p;
  char v7;

  HGPool::DescriptorString<HGMetalTextureWrapperInfinipool::Descriptor>::str((uint64_t)(a1 + 2));
  v4 = atomic_load(HGLogger::_enabled);
  if ((v4 & 1) != 0)
  {
    if (v7 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    HGLogger::log((HGLogger *)"hgpool", (const char *)1, (HGLogger *)"hgpool entry allocated : %p (%s)\n", v2, v3, *a1, p_p);
  }
  if (v7 < 0)
    operator delete(__p);
}

void sub_1B2A8C400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::deque<HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x24;
  v4 = v2 - 36;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFC0uLL);
      std::__split_buffer<HGNode **>::push_back((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFC0uLL);
    std::__split_buffer<HGNode **>::push_front((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_1B2A8C978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1B2A8C994(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8C9A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8C9C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *HGPool::List<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor,true>::retrieveObject@<X0>(int64x2_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v19 = 0;
  v20 = v5;
  v14 = 0;
  v15 = v5;
  v6 = operator new(0x30uLL);
  *v6 = &off_1E6526870;
  v6[4] = 0;
  v6[5] = v5;
  v17 = v6;
  HGPool::List<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor,true>::_retrieve(a1, v16, a3);
  v7 = v17;
  if (v17 == v16)
  {
    v8 = 4;
    v7 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  result = v19;
  if (v19 == v18)
  {
    v12 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_1B2A8CB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v24 = a18;
  if (a18 == v22)
  {
    v25 = 4;
    v24 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  v26 = a13;
  if (a13 == &a10)
  {
    v27 = 4;
    v26 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_11:
  v28 = a22;
  if (a22 == &a19)
  {
    v29 = 4;
    v28 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_16;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

_QWORD *HGPool::List<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor,false>::retrieveObject@<X0>(int64x2_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v19 = 0;
  v20 = v5;
  v14 = 0;
  v15 = v5;
  v6 = operator new(0x30uLL);
  *v6 = &off_1E6526870;
  v6[4] = 0;
  v6[5] = v5;
  v17 = v6;
  HGPool::List<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor,false>::_retrieve(a1, v16, a3);
  v7 = v17;
  if (v17 == v16)
  {
    v8 = 4;
    v7 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  result = v19;
  if (v19 == v18)
  {
    v12 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_1B2A8CCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v24 = a18;
  if (a18 == v22)
  {
    v25 = 4;
    v24 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  v26 = a13;
  if (a13 == &a10)
  {
    v27 = 4;
    v26 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_11:
  v28 = a22;
  if (a22 == &a19)
  {
    v29 = 4;
    v28 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_16;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void **HGPool::List<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor,true>::_retrieve@<X0>(int64x2_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _BYTE v33[24];
  void **v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_BYTE *)(a3 + 104) = 1;
  v5 = a1[4].u64[0];
  v6 = v5 + a1[4].i64[1];
  v7 = v6 / 0x24;
  v8 = a1[2].i64[1];
  if (a1[3].i64[0] != v8)
  {
    v9 = *(_QWORD *)(v8 + 8 * v7) + 112 * (v6 % 0x24);
    v10 = *(_QWORD *)(v8 + 8 * (v5 / 0x24)) + 112 * (v5 % 0x24);
    v11 = (_QWORD *)a2[3];
    if (v11)
      goto LABEL_3;
LABEL_6:
    v34 = 0;
    goto LABEL_8;
  }
  v9 = 0;
  v10 = 0;
  v11 = (_QWORD *)a2[3];
  if (!v11)
    goto LABEL_6;
LABEL_3:
  if (v11 == a2)
  {
    v34 = (void **)v33;
    (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v33);
  }
  else
  {
    v34 = (void **)(*(uint64_t (**)(_QWORD *))(*v11 + 16))(v11);
  }
LABEL_8:
  v12 = (uint64_t *)(v8 + 8 * v7);
  if (v9 != v10)
  {
    v13 = *v12;
    while (1)
    {
      v14 = v9;
      if (v9 == v13)
        v14 = *(v12 - 1) + 4032;
      if (!v34)
        std::__throw_bad_function_call[abi:ne180100]();
      if (((*((uint64_t (**)(void **, uint64_t))*v34 + 6))(v34, v14 - 112) & 1) != 0)
        break;
      v13 = *v12;
      if (v9 == *v12)
      {
        v15 = *--v12;
        v13 = v15;
        v9 = v15 + 4032;
      }
      v9 -= 112;
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  result = v34;
  if (v34 == (void **)v33)
  {
    v17 = 4;
    result = (void **)v33;
  }
  else
  {
    if (!v34)
      goto LABEL_23;
    v17 = 5;
  }
  result = (void **)(*((uint64_t (**)(void))*result + v17))();
LABEL_23:
  v18 = a1[2].i64[1];
  if (a1[3].i64[0] == v18)
  {
    if (!v9)
      return result;
  }
  else if (v9 == *(_QWORD *)(v18 + 8 * (a1[4].i64[0] / 0x24uLL)) + 112 * (a1[4].i64[0] % 0x24uLL))
  {
    return result;
  }
  v19 = v9 - *v12;
  v20 = 0x6DB6DB6DB6DB6DB7 * (v19 >> 4);
  if (v19 < 113)
  {
    v24 = 36 - v20;
    v22 = &v12[-(v24 / 0x24)];
    v23 = *v22 + 112 * (36 * (v24 / 0x24) - v24) + 3920;
  }
  else
  {
    v21 = v20 - 1;
    v22 = &v12[v21 / 0x24];
    v23 = *v22 + 112 * (v21 % 0x24);
  }
  v25 = *(_OWORD *)(v23 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v23 + 64);
  *(_OWORD *)(a3 + 80) = v25;
  *(_OWORD *)(a3 + 89) = *(_OWORD *)(v23 + 89);
  v26 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v23;
  *(_OWORD *)(a3 + 16) = v26;
  v27 = *(_OWORD *)(v23 + 48);
  v28 = (unint64_t *)&a1[5];
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v23 + 32);
  *(_OWORD *)(a3 + 48) = v27;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  v30 = *(_QWORD *)(a3 + 24);
  v31 = &a1[5].u64[1];
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - v30, v31));
  return std::deque<HGPool::Entry<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>>::erase(a1 + 2, v22, (char *)v23);
}

void sub_1B2A8D084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<HGPool::MatchObject<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6526870;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<HGPool::MatchObject<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6526870;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E29170);
}

_QWORD *std::__function::__func<HGPool::MatchObject<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new(0x30uLL);
  *v2 = &off_1E6526870;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v5 = *(_QWORD *)(a1 + 40);
    v2[4] = v4;
    v2[5] = v5;
    return v2;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v2[5] = *(_QWORD *)(a1 + 40);
  return v2;
}

void sub_1B2A8D230(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HGPool::MatchObject<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = &off_1E6526870;
  v4 = a2 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      a2[4] = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
    a2[5] = *(_QWORD *)(a1 + 40);
  }
  else
  {
    a2[4] = 0;
    a2[5] = *(_QWORD *)(a1 + 40);
  }
  return result;
}

uint64_t std::__function::__func<HGPool::MatchObject<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<HGPool::MatchObject<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

BOOL std::__function::__func<HGPool::MatchObject<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *a2 == *(_QWORD *)(a1 + 40);
}

uint64_t std::__function::__func<HGPool::MatchObject<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N6HGPool11MatchObjectIPU21objcproto10MTLTexture11objc_objectN31HGMetalTextureWrapperInfinipool10DescriptorEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N6HGPool11MatchObjectIPU21objcproto10MTLTexture11objc_objectN31HGMetalTextureWrapperInfi"
                                "nipool10DescriptorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N6HGPool11MatchObjectIPU21objcproto10MTLTexture11objc_objectN31HGMetalTextureWrapperInfinipool10DescriptorEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N6HGPool11MatchObjectIPU21objcproto10MTLTexture11objc_objectN31HGMetalTextureWrapperInfinipool10DescriptorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<HGPool::MatchObject<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>,std::allocator<HGMetalTextureWrapperInfinipool::Descriptor>,BOOL ()(HGPool::Entry<objc_object  {objcproto10MTLTexture},HGMetalTextureWrapperInfinipool> const&)>::target_type()
{
}

void HGPool::EntryEventHandler<objc_object  {objcproto10MTLTexture}*,HGMetalTextureWrapperInfinipool::Descriptor>::recycled(_QWORD *a1)
{
  const char *v2;
  char *v3;
  unsigned __int8 v4;
  void *p_p;
  void *__p;
  char v7;

  HGPool::DescriptorString<HGMetalTextureWrapperInfinipool::Descriptor>::str((uint64_t)(a1 + 2));
  v4 = atomic_load(HGLogger::_enabled);
  if ((v4 & 1) != 0)
  {
    if (v7 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    HGLogger::log((HGLogger *)"hgpool", (const char *)1, (HGLogger *)"hgpool entry recycled : %p (%s)\n", v2, v3, *a1, p_p);
  }
  if (v7 < 0)
    operator delete(__p);
}

void sub_1B2A8D494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HGBlur::HGBlur(HGBlur *this)
{
  uint64_t v2;
  HGObject *v3;
  _QWORD *v4;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v2 = off_1E65268F8;
  *(_QWORD *)(v2 + 512) = 0x300000001;
  *(_DWORD *)(v2 + 520) = 1;
  v3 = (HGObject *)HGObject::operator new(0x20uLL);
  HGObject::HGObject(v3);
  *(_QWORD *)v3 = off_1E6526E18;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = 0;
  *((_QWORD *)this + 66) = v3;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = this;
  *((_QWORD *)this + 53) = 0x100000000;
  v4 = (_QWORD *)HGMalloc(512);
  *((_QWORD *)this + 56) = v4;
  *v4 = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 8) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 16) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 24) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 32) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 40) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 48) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 56) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 64) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 72) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 80) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 88) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 96) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 104) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 112) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 120) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 128) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 136) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 144) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 152) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 160) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 168) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 176) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 184) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 192) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 200) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 208) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 216) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 224) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 232) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 240) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 248) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 256) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 264) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 272) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 280) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 288) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 296) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 304) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 312) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 320) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 328) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 336) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 344) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 352) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 360) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 368) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 376) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 384) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 392) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 400) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 408) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 416) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 424) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 432) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 440) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 448) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 456) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 464) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 472) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 480) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 488) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 496) = 0;
  *(_QWORD *)(*((_QWORD *)this + 56) + 504) = 0;
  *((_DWORD *)this + 125) = 1;
  *((_BYTE *)this + 488) = 0;
  *((_QWORD *)this + 63) = 3;
  *(_QWORD *)((char *)this + 492) = 0x3F8000003F800000;
}

void sub_1B2A8D758(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 528);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HGBlur::~HGBlur(HGBlur *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 0;
  *(_QWORD *)this = off_1E65268F8;
  do
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 56) + v2);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    v2 += 8;
  }
  while (v2 != 512);
  HGFree(*((_QWORD *)this + 56));
  v4 = *((_QWORD *)this + 66);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  HGNode::~HGNode((HGNode *)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = 0;
  *(_QWORD *)this = off_1E65268F8;
  do
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 56) + v2);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    v2 += 8;
  }
  while (v2 != 512);
  HGFree(*((_QWORD *)this + 56));
  v4 = *((_QWORD *)this + 66);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  HGNode::~HGNode((HGNode *)this);
  HGObject::operator delete(v5);
}

uint64_t HGBlur::SetParameter(HGBlur *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  int v7;
  int v8;
  int v10;
  int v11;
  int v12;

  if ((_DWORD)a2 == 2)
  {
    v10 = a3 != 0.0;
    v11 = (int)a4;
    v12 = (int)a5;
    if ((int)a4)
    {
      if (v12)
        goto LABEL_13;
    }
    else
    {
      v11 = *((_DWORD *)this + 128);
      if (v12)
      {
LABEL_13:
        if (*((unsigned __int8 *)this + 488) != v10)
          goto LABEL_21;
LABEL_18:
        if (*((_DWORD *)this + 125) == v11 && *((_DWORD *)this + 126) == v12)
          return 0;
LABEL_21:
        *((_BYTE *)this + 488) = v10;
        *((_DWORD *)this + 125) = v11;
        *((_DWORD *)this + 126) = v12;
        goto LABEL_22;
      }
    }
    v12 = *((_DWORD *)this + 129);
    if (*((unsigned __int8 *)this + 488) != v10)
      goto LABEL_21;
    goto LABEL_18;
  }
  if ((_DWORD)a2 == 1)
  {
    v7 = *((_DWORD *)this + 130);
    v8 = (int)a4;
    if (a3 == 0.0)
      v8 = 0;
    *((_DWORD *)this + 130) = v8;
    if (v7 == v8)
      return 0;
    goto LABEL_22;
  }
  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  if (*((float *)this + 104) == a3 && *((float *)this + 105) == a4)
    return 0;
  *((float *)this + 104) = a3;
  *((float *)this + 105) = a4;
LABEL_22:
  *((_DWORD *)this + 107) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HGBlur::ComputeDecimation(uint64_t this, int a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  unsigned int v6;
  float v7;
  float v8;
  unsigned int v9;
  float v11;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  unsigned int v18;
  float v19;
  unsigned int v20;
  float v22;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;

  v2 = 41.0;
  if (*(_DWORD *)(this + 424))
    v2 = 25.0;
  v3 = *(float *)(this + 416) * *(float *)(this + 416);
  v4 = fmaxf(v2 + -5.0, 0.0);
  if (a2)
    v5 = v4;
  else
    v5 = v2;
  if (v3 <= v5)
  {
    v9 = 0;
    v7 = 1.0;
  }
  else
  {
    v6 = 0;
    v7 = 1.0;
    if ((a2 & 1) != 0)
    {
      v8 = v4;
      do
      {
        v9 = v6 + 1;
        v3 = v3 - v8;
        v7 = v7 * 4.0;
        v8 = fmaxf((float)(v2 * v7) + -5.0, 0.0);
      }
      while (v3 > v8 && v6++ < 0xE);
    }
    else
    {
      v11 = v2;
      do
      {
        v9 = v6 + 1;
        v3 = v3 - v11;
        v7 = v7 * 4.0;
        v11 = v2 * v7;
      }
      while (v3 > (float)(v2 * v7) && v6++ < 0xE);
    }
  }
  v13 = v3 / v7;
  if ((float)(v3 / v7) < 25.0)
    v14 = 0.0;
  else
    v14 = v7 * 25.0;
  v15 = v3 - v14;
  v16 = v15;
  if (v15 > 0.0)
  {
    v16 = sqrtf(v15 / v7);
    if (v16 > 5.0)
      v16 = 5.0;
  }
  *(float *)(this + 468) = v16;
  *(_DWORD *)(this + 456) = v9;
  *(_DWORD *)(this + 460) = v13 >= 25.0;
  *(_DWORD *)(this + 464) = v15 > 0.0;
  v17 = *(float *)(this + 420) * *(float *)(this + 420);
  if (v17 <= v5)
  {
    v20 = 0;
    v19 = 1.0;
  }
  else
  {
    v18 = 0;
    v19 = 1.0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v20 = v18 + 1;
        v17 = v17 - v4;
        v19 = v19 * 4.0;
        v4 = fmaxf((float)(v2 * v19) + -5.0, 0.0);
      }
      while (v17 > v4 && v18++ < 0xE);
    }
    else
    {
      v22 = v2;
      do
      {
        v20 = v18 + 1;
        v17 = v17 - v22;
        v19 = v19 * 4.0;
        v22 = v2 * v19;
      }
      while (v17 > (float)(v2 * v19) && v18++ < 0xE);
    }
  }
  v24 = v17 / v19;
  v25 = v19 * 25.0;
  if ((float)(v17 / v19) < 25.0)
    v25 = 0.0;
  v26 = v17 - v25;
  v27 = v26;
  if (v26 > 0.0)
  {
    v28 = sqrtf(v26 / v19);
    v27 = 5.0;
    if (v28 <= 5.0)
      v27 = v28;
  }
  *(float *)(this + 484) = v27;
  *(_DWORD *)(this + 472) = v20;
  *(_DWORD *)(this + 476) = v24 >= 25.0;
  *(_DWORD *)(this + 480) = v26 > 0.0;
  return this;
}

float HGBlur::GetDecimation(HGBlur *this, float a2)
{
  float result;
  int v3;
  float v4;
  float v5;

  result = a2 * a2;
  v3 = 0;
  if (result >= 25.0)
  {
    v4 = 1.0;
    v5 = 25.0;
    do
    {
      ++v3;
      result = result - v5;
      v4 = v4 * 4.0;
      v5 = v4 * 25.0;
    }
    while (result >= (float)(v4 * 25.0));
  }
  return result;
}

HGNode *HGBlur::fastDecimateDown(HGBlur *this, HGNode *a2)
{
  const float *v4;
  const float *v5;
  int32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  __int32 v11;
  int v12;
  int v13;
  HGNode *v14;
  uint64_t v15;
  HGNode *v16;
  double v17;
  double v18;
  HGXForm *v19;
  uint64_t v20;
  HGXForm *v21;
  int32x2_t v22;
  int v23;
  int32x2_t v24;
  int32x2_t v25;
  double v26;
  double v27;
  HGXForm *v28;
  uint64_t v29;
  HGXForm *v30;
  int32x2_t v32;
  _BYTE v33[144];

  if (a2)
    (*(void (**)(HGNode *))(*(_QWORD *)a2 + 16))(a2);
  v4 = (const float *)((char *)this + 500);
  v5 = (const float *)((char *)this + 504);
  v6.i32[0] = *((_DWORD *)this + 118);
  v6.i32[1] = *((_DWORD *)this + 114);
  v7 = (int32x2_t)vld1_dup_f32(v5);
  v8 = vmin_s32(v6, v7);
  v9 = (int32x2_t)vld1_dup_f32(v4);
  v10 = vmax_s32(v9, v8);
  v11 = v10.i32[1];
  v12 = v10.i32[0];
  if (v10.i32[1] <= v10.i32[0])
    v13 = v10.i32[0];
  else
    v13 = v10.i32[1];
  *((_DWORD *)this + 127) = v13;
  v14 = a2;
  if (v13 >= 1)
  {
    v32 = v10;
    *((float *)this + 123) = exp2f(-(float)v10.i32[1]);
    *((float *)this + 124) = exp2f(-(float)v12);
    v15 = *((_QWORD *)this + 66);
    v16 = *(HGNode **)(v15 + 16);
    if (v16 != a2)
    {
      if (v16)
        (*(void (**)(HGNode *))(*(_QWORD *)v16 + 24))(v16);
      *(_QWORD *)(v15 + 16) = a2;
      if (a2)
        (*(void (**)(HGNode *))(*(_QWORD *)a2 + 16))(a2);
    }
    HGTransform::HGTransform((HGTransform *)v33);
    v17 = 0.5;
    if (v11)
      v18 = 0.5;
    else
      v18 = 1.0;
    if (!v12)
      v17 = 1.0;
    HGTransform::Scale((HGTransform *)v33, v18, v17, 1.0);
    v19 = (HGXForm *)HGObject::operator new(0x210uLL);
    HGXForm::HGXForm(v19);
    (*(void (**)(HGXForm *, _QWORD, _QWORD))(*(_QWORD *)v19 + 120))(v19, 0, *(_QWORD *)(*((_QWORD *)this + 66) + 16));
    (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v19 + 576))(v19, v33);
    (*(void (**)(HGXForm *, _QWORD, float))(*(_QWORD *)v19 + 592))(v19, 0, 0.0);
    (*(void (**)(HGXForm *, uint64_t, float, float, float, float))(*(_QWORD *)v19 + 96))(v19, 1, 27.0, 0.0, 0.0, 0.0);
    (*(void (**)(HGXForm *))(*(_QWORD *)v19 + 16))(v19);
    v20 = *((_QWORD *)this + 66);
    v21 = *(HGXForm **)(v20 + 16);
    if (v21 == v19)
    {
      (*(void (**)(HGXForm *))(*(_QWORD *)v19 + 24))(v19);
    }
    else
    {
      if (v21)
        (*(void (**)(HGXForm *))(*(_QWORD *)v21 + 24))(v21);
      *(_QWORD *)(v20 + 16) = v19;
    }
    (*(void (**)(HGXForm *))(*(_QWORD *)v19 + 24))(v19);
    HGTransform::~HGTransform((HGTransform *)v33);
    if (*((int *)this + 127) >= 2)
    {
      v22 = vmax_s32(v32, (int32x2_t)0x100000001);
      v23 = 1;
      do
      {
        HGTransform::HGTransform((HGTransform *)v33);
        v24 = vadd_s32(v22, (int32x2_t)-1);
        v25 = vceqz_s32(v24);
        if ((v25.i8[4] & 1) != 0)
          v26 = 1.0;
        else
          v26 = 0.5;
        if ((v25.i8[0] & 1) != 0)
          v27 = 1.0;
        else
          v27 = 0.5;
        HGTransform::Scale((HGTransform *)v33, v26, v27, 1.0);
        v28 = (HGXForm *)HGObject::operator new(0x210uLL);
        HGXForm::HGXForm(v28);
        (*(void (**)(HGXForm *, _QWORD, _QWORD))(*(_QWORD *)v28 + 120))(v28, 0, *(_QWORD *)(*((_QWORD *)this + 66) + 16));
        (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v28 + 576))(v28, v33);
        (*(void (**)(HGXForm *, _QWORD, float))(*(_QWORD *)v28 + 592))(v28, 0, 0.0);
        (*(void (**)(HGXForm *, uint64_t, float, float, float, float))(*(_QWORD *)v28 + 96))(v28, 1, 27.0, 0.0, 0.0, 0.0);
        (*(void (**)(HGXForm *, _QWORD, uint64_t))(*(_QWORD *)v28 + 136))(v28, 0, 32);
        (*(void (**)(HGXForm *))(*(_QWORD *)v28 + 16))(v28);
        v29 = *((_QWORD *)this + 66);
        v30 = *(HGXForm **)(v29 + 16);
        if (v30 == v28)
        {
          (*(void (**)(HGXForm *))(*(_QWORD *)v28 + 24))(v28);
        }
        else
        {
          if (v30)
            (*(void (**)(HGXForm *))(*(_QWORD *)v30 + 24))(v30);
          *(_QWORD *)(v29 + 16) = v28;
        }
        (*(void (**)(HGXForm *))(*(_QWORD *)v28 + 24))(v28);
        v22 = vmax_s32(v24, (int32x2_t)0x100000001);
        HGTransform::~HGTransform((HGTransform *)v33);
        ++v23;
      }
      while (v23 < *((_DWORD *)this + 127));
    }
    *((float32x2_t *)this + 52) = vmul_f32(*(float32x2_t *)((char *)this + 416), *(float32x2_t *)((char *)this + 492));
    v14 = *(HGNode **)(*((_QWORD *)this + 66) + 16);
  }
  if (a2)
    (*(void (**)(HGNode *))(*(_QWORD *)a2 + 24))(a2);
  return v14;
}

void sub_1B2A8DFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  HGTransform::~HGTransform((HGTransform *)va);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(a1);
}

HGNode *HGBlur::fastDecimateUp(HGBlur *this, HGNode *a2)
{
  HGXForm *v5;
  uint64_t v6;
  HGXForm *v7;
  uint64_t v8;
  _BYTE v9[144];

  if (*((float *)this + 123) == 1.0 && *((float *)this + 124) == 1.0)
    return a2;
  if (a2)
    (*(void (**)(HGNode *))(*(_QWORD *)a2 + 16))(a2);
  HGTransform::HGTransform((HGTransform *)v9);
  v5 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v5);
  HGTransform::Scale((HGTransform *)v9, 1.0 / *((float *)this + 123), 1.0 / *((float *)this + 124), 1.0);
  (*(void (**)(HGXForm *, _QWORD, HGNode *))(*(_QWORD *)v5 + 120))(v5, 0, a2);
  (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v5 + 576))(v5, v9);
  (*(void (**)(HGXForm *))(*(_QWORD *)v5 + 16))(v5);
  v6 = *((_QWORD *)this + 66);
  v7 = *(HGXForm **)(v6 + 24);
  if (v7 == v5)
  {
    (*(void (**)(HGXForm *))(*(_QWORD *)v5 + 24))(v5);
  }
  else
  {
    if (v7)
      (*(void (**)(HGXForm *))(*(_QWORD *)v7 + 24))(v7);
    *(_QWORD *)(v6 + 24) = v5;
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 66) + 24);
  (*(void (**)(HGXForm *))(*(_QWORD *)v5 + 24))(v5);
  HGTransform::~HGTransform((HGTransform *)v9);
  if (a2)
    (*(void (**)(HGNode *))(*(_QWORD *)a2 + 24))(a2);
  return (HGNode *)v8;
}

void sub_1B2A8E1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  HGTransform::~HGTransform((HGTransform *)&a9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  _Unwind_Resume(a1);
}

void *HGBlur::CreateDownShaderHorz(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  int v6;
  void *v7;

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 43) == 1
    || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    v5 = HGObject::operator new(0x1C0uLL);
    HGG9X<HgcBlur_cs9s_rect>::HGG9X((uint64_t)v5, a3);
  }
  else
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 21);
    v7 = HGObject::operator new(0x1C0uLL);
    v5 = v7;
    if (v6)
      HGG9X<HgcBlur_cs9s>::HGG9X((uint64_t)v7, a3);
    else
      HGG9X<HgcBlur_cs9s_es_noborder>::HGG9X((uint64_t)v7, a3);
  }
  return v5;
}

void sub_1B2A8E334(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8E348(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8E35C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8E370(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

float *HGBlur::CreateDownShaderVert(uint64_t a1, uint64_t a2, int a3)
{
  float *v5;
  double v6;
  int v7;
  int v8;
  int v9;
  int v10;
  float *v11;
  double v12;
  int v13;
  int v14;
  int v15;

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 43) == 1
    || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    v5 = (float *)HGObject::operator new(0x1C0uLL);
    HGG9X<HgcBlur_cs9s_rect>::HGG9X((uint64_t)v5, a3);
    *(_QWORD *)v5 = off_1E6527600;
    LODWORD(v6) = -4.0;
    v5[106] = HGRectfMake4f(0.0, v6, 0.0);
    *((_DWORD *)v5 + 107) = v7;
    *((_DWORD *)v5 + 108) = v8;
    *((_DWORD *)v5 + 109) = v9;
    (*(void (**)(float *, uint64_t, float, float, float, float))(*(_QWORD *)v5 + 96))(v5, 6, 0.0, -4.125, 0.0, 0.0);
    (*(void (**)(float *, uint64_t, float, float, float, float))(*(_QWORD *)v5 + 96))(v5, 7, 0.0, 1.0, 0.0, 0.0);
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 21);
    v11 = (float *)HGObject::operator new(0x1C0uLL);
    v5 = v11;
    if (v10)
    {
      HGG9X<HgcBlur_cs9s>::HGG9X((uint64_t)v11, a3);
      *(_QWORD *)v5 = off_1E6527AE0;
    }
    else
    {
      HGG9X<HgcBlur_cs9s_es_noborder>::HGG9X((uint64_t)v11, a3);
      *(_QWORD *)v5 = off_1E6527870;
    }
    LODWORD(v12) = -4.0;
    v5[106] = HGRectfMake4f(0.0, v12, 0.0);
    *((_DWORD *)v5 + 107) = v13;
    *((_DWORD *)v5 + 108) = v14;
    *((_DWORD *)v5 + 109) = v15;
    (*(void (**)(float *, uint64_t, float, float, float, float))(*(_QWORD *)v5 + 96))(v5, 6, 0.0, -4.125, 0.0, 0.0);
    (*(void (**)(float *, uint64_t, float, float, float, float))(*(_QWORD *)v5 + 96))(v5, 7, 0.0, 1.0, 0.0, 0.0);
  }
  return v5;
}

void sub_1B2A8E648(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HgcBlur_cs9s_es_noborder::~HgcBlur_cs9s_es_noborder(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2A8E694(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8E6AC(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HgcBlur_cs9s_rect::~HgcBlur_cs9s_rect(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

HGNode *HGBlur::CreateDownShaderDoubleHorz(uint64_t a1, uint64_t a2, int a3)
{
  HGNode *v5;
  char *v6;
  int v7;
  HGNode *v8;
  char *v9;

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 43) == 1
    || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    v5 = (HGNode *)HGObject::operator new(0x1C0uLL);
    HGG9X<HgcBlur_cs9s_rect>::HGG9X((uint64_t)v5, a3);
    *(_QWORD *)v5 = off_1E6527D50;
    *((_DWORD *)v5 + 104) = 0x40000000;
    HGNode::SetParameter(v5, 5, 1.0, 0.0, 0.0, 0.0, v6);
  }
  else
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 21);
    v8 = (HGNode *)HGObject::operator new(0x1C0uLL);
    v5 = v8;
    if (v7)
    {
      HGG9X<HgcBlur_cs9s>::HGG9X((uint64_t)v8, a3);
      *(_QWORD *)v5 = off_1E6528230;
    }
    else
    {
      HGG9X<HgcBlur_cs9s_es_noborder>::HGG9X((uint64_t)v8, a3);
      *(_QWORD *)v5 = off_1E6527FC0;
    }
    *((_DWORD *)v5 + 104) = 0x40000000;
    HGNode::SetParameter(v5, 5, 1.0, 0.0, 0.0, 0.0, v9);
  }
  return v5;
}

void sub_1B2A8E858(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HgcBlur_cs9s_es_noborder::~HgcBlur_cs9s_es_noborder(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2A8E870(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8E884(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HgcBlur_cs9s::~HgcBlur_cs9s(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2A8E89C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8E8B0(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HgcBlur_cs9s_rect::~HgcBlur_cs9s_rect(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2A8E8E0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

HGNode *HGBlur::CreateDownShaderDoubleVert(uint64_t a1, uint64_t a2, int a3)
{
  HGNode *v5;
  int v6;
  HGNode *v7;

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 43) == 1
    || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    v5 = (HGNode *)HGObject::operator new(0x1C0uLL);
    HGG9D2Y<HgcBlur_cs9s_rect>::HGG9D2Y(v5, a3);
  }
  else
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 21);
    v7 = (HGNode *)HGObject::operator new(0x1C0uLL);
    v5 = v7;
    if (v6)
      HGG9D2Y<HgcBlur_cs9s>::HGG9D2Y(v7, a3);
    else
      HGG9D2Y<HgcBlur_cs9s_es_noborder>::HGG9D2Y(v7, a3);
  }
  return v5;
}

void sub_1B2A8E9C8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8E9DC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8E9F0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8EA04(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void *HGBlur::CreateUpShaderHorz(HGBlur *this, HGRenderer *a2)
{
  void *v3;
  int v4;
  void *v5;

  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 43) == 1
    || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    v3 = HGObject::operator new(0x1C0uLL);
    HGG4U2X<HgcBlur_g4u2_rect>::HGG4U2X((uint64_t)v3);
  }
  else
  {
    v4 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 21);
    v5 = HGObject::operator new(0x1C0uLL);
    v3 = v5;
    if (v4)
      HGG4U2X<HgcBlur_g4u2>::HGG4U2X((uint64_t)v5);
    else
      HGG4U2X<HgcBlur_g4u2_noborder>::HGG4U2X((uint64_t)v5);
  }
  return v3;
}

void sub_1B2A8EAD0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8EAE4(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8EAF8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8EB0C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void *HGBlur::CreateUpShaderVet(HGBlur *this, HGRenderer *a2)
{
  void *v3;
  int v4;
  void *v5;

  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 43) == 1
    || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    v3 = HGObject::operator new(0x1C0uLL);
    HGG4U2Y<HgcBlur_g4u2_rect>::HGG4U2Y((uint64_t)v3);
  }
  else
  {
    v4 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 21);
    v5 = HGObject::operator new(0x1C0uLL);
    v3 = v5;
    if (v4)
      HGG4U2Y<HgcBlur_g4u2>::HGG4U2Y((uint64_t)v5);
    else
      HGG4U2Y<HgcBlur_g4u2_noborder>::HGG4U2Y((uint64_t)v5);
  }
  return v3;
}

void sub_1B2A8EBD8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8EBEC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8EC00(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8EC14(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL HGG9B<HgcBlur_cs9s>::SetRadius(uint64_t a1, double a2)
{
  unsigned __int8 v4;
  double v5;
  unsigned __int8 v6;
  double v7;
  unsigned __int8 v8;
  double v9;
  unsigned __int8 v10;
  double v11;
  unsigned __int8 v12;
  long double v13;
  long double v14;
  long double v15;
  double v16;
  long double v17;
  long double v18;
  float v19;
  float v20;
  float v21;
  float v22;

  v4 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v5 = *(double *)&_MergedGlobals_12;
  v6 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v7 = *(double *)&_MergedGlobals_12;
  v8 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v9 = *(double *)&_MergedGlobals_12;
  v10 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v11 = *(double *)&_MergedGlobals_12;
  v12 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v13 = exp(9.0 / a2 * (9.0 / a2 * v11));
  v14 = exp(6.0 / a2 * (6.0 / a2 * v9));
  v15 = exp(3.0 / a2 * (3.0 / a2 * v7));
  v16 = exp(0.0 / a2 * (0.0 / a2 * v5));
  v17 = exp(12.0 / a2 * (12.0 / a2 * *(double *)&_MergedGlobals_12));
  v18 = v16 + v15 + v14 + v13 + v17 + v15 + v14 + v13 + v17;
  v19 = v15 / v18;
  v20 = v14 / v18;
  v21 = v13 / v18;
  *(float *)&v17 = v17 / v18;
  v22 = (float)(v19 + 256.0) + -256.0;
  *(float *)&v13 = (float)(v20 + 256.0) + -256.0;
  *(float *)&v14 = (float)(v21 + 256.0) + -256.0;
  *(float *)&v15 = (float)(*(float *)&v17 + 256.0) + -256.0;
  (*(void (**)(uint64_t, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, 1.0- (float)((float)(*(float *)&v15 + (float)(*(float *)&v14 + (float)(v22 + *(float *)&v13)))+ (float)(*(float *)&v15 + (float)(*(float *)&v14 + (float)(v22 + *(float *)&v13)))), 1.0- (float)((float)(*(float *)&v15 + (float)(*(float *)&v14 + (float)(v22 + *(float *)&v13)))+ (float)(*(float *)&v15 + (float)(*(float *)&v14 + (float)(v22 + *(float *)&v13)))), 1.0- (float)((float)(*(float *)&v15 + (float)(*(float *)&v14 + (float)(v22 + *(float *)&v13)))+ (float)(*(float *)&v15 + (float)(*(float *)&v14 + (float)(v22 + *(float *)&v13)))), 1.0- (float)((float)(*(float *)&v15 + (float)(*(float *)&v14 + (float)(v22 + *(float *)&v13)))+ (float)(*(float *)&v15 + (float)(*(float *)&v14 + (float)(v22 + *(float *)&v13)))));
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, v22, v22, v22, v22);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, *(float *)&v13, *(float *)&v13, *(float *)&v13, *(float *)&v13);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, *(float *)&v14, *(float *)&v14, *(float *)&v14, *(float *)&v14);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, *(float *)&v15, *(float *)&v15, *(float *)&v15, *(float *)&v15);
  return v22 > 0.0;
}

HGNode *HGBlur::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  int v5;
  uint64_t DeviceInfo;
  int v7;
  uint64_t MetalContext;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  Input = HGRenderer::GetInput(a2, this, 0);
  if (!*((_DWORD *)this + 107))
    goto LABEL_72;
  *((_DWORD *)this + 107) = 0;
  if (*((float *)this + 104) > 0.0 || *((float *)this + 105) > 0.0)
  {
    if (*((_BYTE *)this + 488))
    {
      HGBlur::ComputeDecimation((uint64_t)this, 1);
      Input = HGBlur::fastDecimateDown((HGBlur *)this, Input);
    }
    HGBlur::ComputeDecimation((uint64_t)this, 0);
    *((_QWORD *)this + 54) = 0;
    *((_QWORD *)this + 55) = Input;
    v5 = *((_DWORD *)this + 130);
    DeviceInfo = (*(uint64_t (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2);
    v7 = 0;
    if ((DeviceInfo & 1) == 0 && !HGBlur::m_ForceOneForOneTapMethod)
    {
      v7 = v5;
      if (v5 == 1)
      {
        DeviceInfo = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 43);
        if ((_DWORD)DeviceInfo == 1)
        {
          MetalContext = HGGPURenderer::GetMetalContext(a2);
          DeviceInfo = HGMetalDeviceInfo::getDeviceInfo(*(_QWORD *)(*(_QWORD *)(MetalContext + 16) + 16));
          if (*(_BYTE *)(DeviceInfo + 57))
          {
            v7 = 1;
            if (*((int *)this + 114) < 1)
              goto LABEL_23;
            goto LABEL_15;
          }
          v7 = HGBlur::m_ForceQuadShuffleTapMethod;
          if (*((int *)this + 114) < 1)
          {
LABEL_23:
            LODWORD(v11) = *((_DWORD *)this + 118);
            if ((int)v11 < 1)
              goto LABEL_35;
            v12 = 16;
            while (1)
            {
              v14 = *(_DWORD **)(*((_QWORD *)this + 56) + 8 * v12);
              if (v14)
              {
                v14[4] &= ~2u;
                if (!*((_QWORD *)this + 54))
                  goto LABEL_30;
              }
              else
              {
                *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v12) = HGBlur::CreateDownShaderDoubleVert(DeviceInfo, (uint64_t)a2, v7);
                v14 = *(_DWORD **)(*((_QWORD *)this + 56) + 8 * v12);
                v14[4] &= ~2u;
                if (!*((_QWORD *)this + 54))
LABEL_30:
                  *((_QWORD *)this + 54) = v14;
              }
              DeviceInfo = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)v14 + 120))(v14, 0, *((_QWORD *)this + 55));
              *((_QWORD *)this + 55) = v14;
              v11 = *((int *)this + 118);
              v13 = v12 - 15;
              ++v12;
              if (v13 >= v11)
              {
                if ((int)v11 >= 1)
                {
                  v15 = v11 + 15;
                  if (v11 > 3)
                    v15 = 19;
                  v16 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v15);
                  *(_DWORD *)(v16 + 16) |= 2u;
                }
LABEL_35:
                v17 = *((_DWORD *)this + 114);
                v18 = v17 - 1;
                if (v17 >= 1 && (!(_DWORD)v11 || (int)v11 >= 2))
                {
                  if (v17 > 3)
                    v18 = 3;
                  v19 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v18);
                  *(_DWORD *)(v19 + 16) |= 2u;
                }
                if (*((_DWORD *)this + 115))
                {
                  v20 = *(_QWORD *)(*((_QWORD *)this + 56) + 120);
                  if (v20
                    || (DeviceInfo = (uint64_t)HGBlur::CreateDownShaderHorz(DeviceInfo, (uint64_t)a2, v7),
                        *(_QWORD *)(*((_QWORD *)this + 56) + 120) = DeviceInfo,
                        (v20 = *(_QWORD *)(*((_QWORD *)this + 56) + 120)) != 0))
                  {
                    if (!*((_QWORD *)this + 54))
                      *((_QWORD *)this + 54) = v20;
                    DeviceInfo = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 120))(v20, 0, *((_QWORD *)this + 55));
                    *((_QWORD *)this + 55) = v20;
                  }
                }
                if (*((_DWORD *)this + 119))
                {
                  v21 = *(_QWORD *)(*((_QWORD *)this + 56) + 248);
                  if (v21
                    || (DeviceInfo = (uint64_t)HGBlur::CreateDownShaderVert(DeviceInfo, (uint64_t)a2, v7),
                        *(_QWORD *)(*((_QWORD *)this + 56) + 248) = DeviceInfo,
                        (v21 = *(_QWORD *)(*((_QWORD *)this + 56) + 248)) != 0))
                  {
                    if (!*((_QWORD *)this + 54))
                      *((_QWORD *)this + 54) = v21;
                    DeviceInfo = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 120))(v21, 0, *((_QWORD *)this + 55));
                    *((_QWORD *)this + 55) = v21;
                  }
                }
                if (*((_DWORD *)this + 116))
                {
                  v22 = *(_QWORD *)(*((_QWORD *)this + 56) + 376);
                  if (!v22)
                  {
                    *(_QWORD *)(*((_QWORD *)this + 56) + 376) = HGBlur::CreateDownShaderHorz(0, (uint64_t)a2, v7);
                    v22 = *(_QWORD *)(*((_QWORD *)this + 56) + 376);
                  }
                  DeviceInfo = HGG9B<HgcBlur_cs9s>::SetRadius(v22, *((float *)this + 117));
                  if ((_DWORD)DeviceInfo)
                  {
                    v23 = *(_QWORD *)(*((_QWORD *)this + 56) + 376);
                    if (v23)
                    {
                      if (!*((_QWORD *)this + 54))
                        *((_QWORD *)this + 54) = v23;
                      DeviceInfo = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 120))(v23, 0, *((_QWORD *)this + 55));
                      *((_QWORD *)this + 55) = v23;
                    }
                  }
                }
                if (*((_DWORD *)this + 120))
                {
                  v24 = *(_QWORD *)(*((_QWORD *)this + 56) + 504);
                  if (!v24)
                  {
                    *(_QWORD *)(*((_QWORD *)this + 56) + 504) = HGBlur::CreateDownShaderVert(0, (uint64_t)a2, v7);
                    v24 = *(_QWORD *)(*((_QWORD *)this + 56) + 504);
                  }
                  DeviceInfo = HGG9B<HgcBlur_cs9s>::SetRadius(v24, *((float *)this + 121));
                  if ((_DWORD)DeviceInfo)
                  {
                    v25 = *(_QWORD *)(*((_QWORD *)this + 56) + 504);
                    if (v25)
                    {
                      if (!*((_QWORD *)this + 54))
                        *((_QWORD *)this + 54) = v25;
                      DeviceInfo = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 120))(v25, 0, *((_QWORD *)this + 55));
                      *((_QWORD *)this + 55) = v25;
                    }
                  }
                }
                if (!*((_DWORD *)this + 106))
                {
                  if (*((int *)this + 114) >= 1)
                  {
                    v28 = 32;
                    do
                    {
                      v30 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v28);
                      if (v30
                        || (DeviceInfo = (uint64_t)HGBlur::CreateUpShaderHorz((HGBlur *)DeviceInfo, a2),
                            *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v28) = DeviceInfo,
                            (v30 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v28)) != 0))
                      {
                        if (!*((_QWORD *)this + 54))
                          *((_QWORD *)this + 54) = v30;
                        DeviceInfo = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v30 + 120))(v30, 0, *((_QWORD *)this + 55));
                        *((_QWORD *)this + 55) = v30;
                      }
                      v29 = v28 - 31;
                      ++v28;
                    }
                    while (v29 < *((int *)this + 114));
                  }
                  if (*((int *)this + 118) >= 1)
                  {
                    v31 = 48;
                    do
                    {
                      v33 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v31);
                      if (v33
                        || (DeviceInfo = (uint64_t)HGBlur::CreateUpShaderVet((HGBlur *)DeviceInfo, a2),
                            *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v31) = DeviceInfo,
                            (v33 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v31)) != 0))
                      {
                        if (!*((_QWORD *)this + 54))
                          *((_QWORD *)this + 54) = v33;
                        DeviceInfo = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v33 + 120))(v33, 0, *((_QWORD *)this + 55));
                        *((_QWORD *)this + 55) = v33;
                      }
                      v32 = v31 - 47;
                      ++v31;
                    }
                    while (v32 < *((int *)this + 118));
                  }
                }
                if (*((_BYTE *)this + 488))
                  *((_QWORD *)this + 55) = HGBlur::fastDecimateUp((HGBlur *)this, *((HGNode **)this + 55));
LABEL_72:
                v26 = *((_QWORD *)this + 54);
                if (v26)
                  (*(void (**)(uint64_t, _QWORD, HGNode *))(*(_QWORD *)v26 + 120))(v26, 0, Input);
                return (HGNode *)*((_QWORD *)this + 55);
              }
            }
          }
LABEL_15:
          v9 = 0;
          while (1)
          {
            v10 = *(_DWORD **)(*((_QWORD *)this + 56) + 8 * v9);
            if (v10)
            {
              v10[4] &= ~2u;
              if (!*((_QWORD *)this + 54))
                goto LABEL_21;
            }
            else
            {
              *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v9) = HGBlur::CreateDownShaderDoubleHorz(DeviceInfo, (uint64_t)a2, v7);
              v10 = *(_DWORD **)(*((_QWORD *)this + 56) + 8 * v9);
              v10[4] &= ~2u;
              if (!*((_QWORD *)this + 54))
LABEL_21:
                *((_QWORD *)this + 54) = v10;
            }
            DeviceInfo = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)v10 + 120))(v10, 0, *((_QWORD *)this + 55));
            *((_QWORD *)this + 55) = v10;
            if (++v9 >= *((int *)this + 114))
              goto LABEL_23;
          }
        }
        v7 = 0;
      }
    }
    if (*((int *)this + 114) < 1)
      goto LABEL_23;
    goto LABEL_15;
  }
  return Input;
}

void HGBS::HGBlurShared::~HGBlurShared(HGBS::HGBlurShared *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E6526B48;
  v2 = *((_QWORD *)this + 67);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = 0;
  *(_QWORD *)this = off_1E65268F8;
  do
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 56) + v3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v3 += 8;
  }
  while (v3 != 512);
  HGFree(*((_QWORD *)this + 56));
  v5 = *((_QWORD *)this + 66);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  HGNode::~HGNode((HGNode *)this);
}

{
  void *v1;

  HGBS::HGBlurShared::~HGBlurShared(this);
  HGObject::operator delete(v1);
}

HGNode *HGBS::HGBlurShared::GetOutput(HGNode *this, HGRenderer *a2)
{
  uint64_t v4;
  HGNode *Input;
  uint64_t v6;
  HGNode *v7;
  uint64_t v8;
  HGNode *v9;
  HGNode *v10;
  int v12;
  uint64_t DeviceInfo;
  int v14;
  uint64_t MetalContext;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *((_QWORD *)this + 67);
  if (!v4)
    return HGBlur::GetOutput(this, a2);
  HGRenderer::GetOutput(a2, (HGNode *)v4);
  Input = HGRenderer::GetInput(a2, this, 0);
  if (!*((_DWORD *)this + 107))
    goto LABEL_77;
  *((_DWORD *)this + 107) = 0;
  if (*((float *)this + 104) > 0.0 || *((float *)this + 105) > 0.0)
  {
    HGBlur::ComputeDecimation((uint64_t)this, 0);
    *((_QWORD *)this + 54) = 0;
    *((_QWORD *)this + 55) = Input;
    if (*((int *)this + 114) >= 1)
    {
      v6 = 0;
      v7 = Input;
      while (1)
      {
        if (v6 >= *((int *)this + 118))
          goto LABEL_24;
        v8 = *(_QWORD *)(v4 + 448);
        v9 = *(HGNode **)(v8 + 8 * v6);
        if (v9)
          *((_DWORD *)v9 + 4) &= ~2u;
        v10 = *(HGNode **)(v8 + 8 * v6 + 128);
        if (v10)
          *((_DWORD *)v10 + 4) &= ~2u;
        if (v9)
        {
          if (!*((_QWORD *)this + 54))
            *((_QWORD *)this + 54) = v9;
          (*(void (**)(HGNode *, _QWORD, HGNode *))(*(_QWORD *)v9 + 120))(v9, 0, v7);
          *((_QWORD *)this + 55) = v9;
          v10 = *(HGNode **)(*(_QWORD *)(v4 + 448) + 8 * v6 + 128);
          if (v10)
            goto LABEL_17;
LABEL_20:
          ++v6;
          v7 = v9;
          if (v6 >= *((int *)this + 114))
            goto LABEL_24;
        }
        else
        {
          v9 = v7;
          if (!v10)
            goto LABEL_20;
LABEL_17:
          if (!*((_QWORD *)this + 54))
            *((_QWORD *)this + 54) = v10;
          (*(void (**)(HGNode *, _QWORD, HGNode *))(*(_QWORD *)v10 + 120))(v10, 0, v9);
          *((_QWORD *)this + 55) = v10;
          ++v6;
          v7 = v10;
          if (v6 >= *((int *)this + 114))
            goto LABEL_24;
        }
      }
    }
    LODWORD(v6) = 0;
LABEL_24:
    v12 = *((_DWORD *)this + 130);
    DeviceInfo = (*(uint64_t (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2);
    v14 = 0;
    if ((DeviceInfo & 1) == 0 && !HGBlur::m_ForceOneForOneTapMethod)
    {
      v14 = v12;
      if (v12 == 1)
      {
        DeviceInfo = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 43);
        if ((_DWORD)DeviceInfo == 1)
        {
          MetalContext = HGGPURenderer::GetMetalContext(a2);
          DeviceInfo = HGMetalDeviceInfo::getDeviceInfo(*(_QWORD *)(*(_QWORD *)(MetalContext + 16) + 16));
          if (*(_BYTE *)(DeviceInfo + 57))
          {
            v14 = 1;
            if ((int)v6 >= *((_DWORD *)this + 114))
              goto LABEL_40;
          }
          else
          {
            v14 = HGBlur::m_ForceQuadShuffleTapMethod;
            if ((int)v6 >= *((_DWORD *)this + 114))
              goto LABEL_40;
          }
LABEL_33:
          v6 = v6;
          while (1)
          {
            v16 = *(_DWORD **)(*((_QWORD *)this + 56) + 8 * v6);
            if (v16)
            {
              v16[4] &= ~2u;
              if (!*((_QWORD *)this + 54))
                goto LABEL_39;
            }
            else
            {
              *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v6) = HGBlur::CreateDownShaderDoubleHorz(DeviceInfo, (uint64_t)a2, v14);
              v16 = *(_DWORD **)(*((_QWORD *)this + 56) + 8 * v6);
              v16[4] &= ~2u;
              if (!*((_QWORD *)this + 54))
LABEL_39:
                *((_QWORD *)this + 54) = v16;
            }
            DeviceInfo = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)v16 + 120))(v16, 0, *((_QWORD *)this + 55));
            *((_QWORD *)this + 55) = v16;
            if (*((_DWORD *)this + 114) <= (int)++v6)
              goto LABEL_40;
          }
        }
        v14 = 0;
      }
    }
    if ((int)v6 >= *((_DWORD *)this + 114))
    {
LABEL_40:
      if ((int)v6 < *((_DWORD *)this + 118))
      {
        v17 = 8 * v6 + 128;
        do
        {
          v18 = *(_DWORD **)(*((_QWORD *)this + 56) + v17);
          if (v18)
          {
            v18[4] &= ~2u;
            if (!*((_QWORD *)this + 54))
              goto LABEL_47;
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)this + 56) + v17) = HGBlur::CreateDownShaderDoubleVert(DeviceInfo, (uint64_t)a2, v14);
            v18 = *(_DWORD **)(*((_QWORD *)this + 56) + v17);
            v18[4] &= ~2u;
            if (!*((_QWORD *)this + 54))
LABEL_47:
              *((_QWORD *)this + 54) = v18;
          }
          DeviceInfo = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)v18 + 120))(v18, 0, *((_QWORD *)this + 55));
          *((_QWORD *)this + 55) = v18;
          v17 += 8;
          LODWORD(v6) = v6 + 1;
        }
        while (*((_DWORD *)this + 118) > (int)v6);
      }
      if (*((_DWORD *)this + 115))
      {
        v19 = *(_QWORD *)(*((_QWORD *)this + 56) + 120);
        if (v19
          || (DeviceInfo = (uint64_t)HGBlur::CreateDownShaderHorz(DeviceInfo, (uint64_t)a2, v14),
              *(_QWORD *)(*((_QWORD *)this + 56) + 120) = DeviceInfo,
              (v19 = *(_QWORD *)(*((_QWORD *)this + 56) + 120)) != 0))
        {
          if (!*((_QWORD *)this + 54))
            *((_QWORD *)this + 54) = v19;
          DeviceInfo = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 120))(v19, 0, *((_QWORD *)this + 55));
          *((_QWORD *)this + 55) = v19;
        }
      }
      if (*((_DWORD *)this + 119))
      {
        v20 = *(_QWORD *)(*((_QWORD *)this + 56) + 248);
        if (v20
          || (DeviceInfo = (uint64_t)HGBlur::CreateDownShaderVert(DeviceInfo, (uint64_t)a2, v14),
              *(_QWORD *)(*((_QWORD *)this + 56) + 248) = DeviceInfo,
              (v20 = *(_QWORD *)(*((_QWORD *)this + 56) + 248)) != 0))
        {
          if (!*((_QWORD *)this + 54))
            *((_QWORD *)this + 54) = v20;
          DeviceInfo = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 120))(v20, 0, *((_QWORD *)this + 55));
          *((_QWORD *)this + 55) = v20;
        }
      }
      if (*((_DWORD *)this + 116))
      {
        v21 = *(_QWORD *)(*((_QWORD *)this + 56) + 376);
        if (!v21)
        {
          *(_QWORD *)(*((_QWORD *)this + 56) + 376) = HGBlur::CreateDownShaderHorz(0, (uint64_t)a2, v14);
          v21 = *(_QWORD *)(*((_QWORD *)this + 56) + 376);
        }
        DeviceInfo = HGG9B<HgcBlur_cs9s>::SetRadius(v21, *((float *)this + 117));
        if ((_DWORD)DeviceInfo)
        {
          v22 = *(_QWORD *)(*((_QWORD *)this + 56) + 376);
          if (v22)
          {
            if (!*((_QWORD *)this + 54))
              *((_QWORD *)this + 54) = v22;
            DeviceInfo = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 120))(v22, 0, *((_QWORD *)this + 55));
            *((_QWORD *)this + 55) = v22;
          }
        }
      }
      if (*((_DWORD *)this + 120))
      {
        v23 = *(_QWORD *)(*((_QWORD *)this + 56) + 504);
        if (!v23)
        {
          *(_QWORD *)(*((_QWORD *)this + 56) + 504) = HGBlur::CreateDownShaderVert(0, (uint64_t)a2, v14);
          v23 = *(_QWORD *)(*((_QWORD *)this + 56) + 504);
        }
        DeviceInfo = HGG9B<HgcBlur_cs9s>::SetRadius(v23, *((float *)this + 121));
        if ((_DWORD)DeviceInfo)
        {
          v24 = *(_QWORD *)(*((_QWORD *)this + 56) + 504);
          if (v24)
          {
            if (!*((_QWORD *)this + 54))
              *((_QWORD *)this + 54) = v24;
            DeviceInfo = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 120))(v24, 0, *((_QWORD *)this + 55));
            *((_QWORD *)this + 55) = v24;
          }
        }
      }
      if (!*((_DWORD *)this + 106))
      {
        if (*((int *)this + 114) >= 1)
        {
          v26 = 32;
          do
          {
            v28 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v26);
            if (v28
              || (DeviceInfo = (uint64_t)HGBlur::CreateUpShaderHorz((HGBlur *)DeviceInfo, a2),
                  *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v26) = DeviceInfo,
                  (v28 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v26)) != 0))
            {
              if (!*((_QWORD *)this + 54))
                *((_QWORD *)this + 54) = v28;
              DeviceInfo = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v28 + 120))(v28, 0, *((_QWORD *)this + 55));
              *((_QWORD *)this + 55) = v28;
            }
            v27 = v26 - 31;
            ++v26;
          }
          while (v27 < *((int *)this + 114));
        }
        if (*((int *)this + 118) >= 1)
        {
          v29 = 48;
          do
          {
            v31 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v29);
            if (v31
              || (DeviceInfo = (uint64_t)HGBlur::CreateUpShaderVet((HGBlur *)DeviceInfo, a2),
                  *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v29) = DeviceInfo,
                  (v31 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v29)) != 0))
            {
              if (!*((_QWORD *)this + 54))
                *((_QWORD *)this + 54) = v31;
              DeviceInfo = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v31 + 120))(v31, 0, *((_QWORD *)this + 55));
              *((_QWORD *)this + 55) = v31;
            }
            v30 = v29 - 47;
            ++v29;
          }
          while (v30 < *((int *)this + 118));
        }
      }
LABEL_77:
      v25 = *((_QWORD *)this + 54);
      if (v25)
        (*(void (**)(uint64_t, _QWORD, HGNode *))(*(_QWORD *)v25 + 120))(v25, 0, Input);
      return (HGNode *)*((_QWORD *)this + 55);
    }
    goto LABEL_33;
  }
  return Input;
}

HGColorMatrix *HGBS::createColorMaskNode(HGBS *this, float a2, float a3, float a4)
{
  HGColorMatrix *v7;

  v7 = (HGColorMatrix *)HGObject::operator new(0x1F0uLL);
  HGColorMatrix::HGColorMatrix(v7);
  (*(void (**)(HGColorMatrix *, _QWORD, float, float, float, float))(*(_QWORD *)v7 + 96))(v7, 0, a2, 0.0, 0.0, 1.0);
  (*(void (**)(HGColorMatrix *, uint64_t, float, float, float, float))(*(_QWORD *)v7 + 96))(v7, 1, 0.0, a3, 0.0, 1.0);
  (*(void (**)(HGColorMatrix *, uint64_t, float, float, float, float))(*(_QWORD *)v7 + 96))(v7, 2, 0.0, 0.0, a4, 1.0);
  (*(void (**)(HGColorMatrix *, uint64_t, float, float, float, float))(*(_QWORD *)v7 + 96))(v7, 3, 0.0, 0.0, 0.0, 1.0);
  return v7;
}

void sub_1B2A8FD10(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HGBlurGroup::HGBlurGroup(HGBlurGroup *this, HGNode *a2, char a3)
{
  _QWORD *v6;
  _QWORD *v7;

  HGObject::HGObject(this);
  *v6 = off_1E6526D98;
  if (a2)
    (*(void (**)(HGNode *))(*(_QWORD *)a2 + 16))(a2);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 2) = a2;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_BYTE *)this + 104) = 1;
  *((_BYTE *)this + 105) = a3;
  *((_BYTE *)this + 106) = 0;
  v7 = operator new(8uLL);
  *v7 = 0;
  *((_QWORD *)this + 5) = v7 + 1;
  *((_QWORD *)this + 6) = v7 + 1;
  *((_QWORD *)this + 4) = v7;
}

void sub_1B2A8FDB8(_Unwind_Exception *a1)
{
  HGObject *v1;

  HGObject::~HGObject(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A8FDCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  uint64_t v5;

  std::vector<HGRef<HGNode>>::~vector[abi:ne180100]((void **)(v1 + 80));
  std::vector<HGRef<HGNode>>::~vector[abi:ne180100]((void **)(v1 + 56));
  v4 = *(void **)(v1 + 32);
  if (v4)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2);
  v5 = *(_QWORD *)(v1 + 16);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  HGObject::~HGObject((HGObject *)v1);
  _Unwind_Resume(a1);
}

void **std::vector<HGRef<HGNode>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void HGBlurGroup::~HGBlurGroup(HGBlurGroup *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E6526D98;
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    v3 = *((_QWORD *)this + 11);
    v4 = (void *)*((_QWORD *)this + 10);
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 8);
        v3 -= 8;
        v5 = v6;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    v8 = *((_QWORD *)this + 8);
    v9 = (void *)*((_QWORD *)this + 7);
    if (v8 != v7)
    {
      do
      {
        v11 = *(_QWORD *)(v8 - 8);
        v8 -= 8;
        v10 = v11;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v7;
    operator delete(v9);
  }
  v12 = (void *)*((_QWORD *)this + 4);
  if (v12)
  {
    *((_QWORD *)this + 5) = v12;
    operator delete(v12);
  }
  v13 = *((_QWORD *)this + 3);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  v14 = *((_QWORD *)this + 2);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  HGObject::~HGObject(this);
}

{
  void *v1;

  HGBlurGroup::~HGBlurGroup(this);
  HGObject::operator delete(v1);
}

void HGBlurGroup::setBlurValues(HGBlurGroup *this, const float *a2, const float *a3, uint64_t a4)
{
  uint64_t v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  unint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  float *v21;
  unint64_t v22;
  float *v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  float *v29;
  uint64_t v30;
  __int128 v31;
  float **v32;

  if (a4)
  {
    v8 = 0;
    v9 = (float *)*((_QWORD *)this + 4);
    v32 = (float **)((char *)this + 32);
    *((_QWORD *)this + 5) = v9;
    while (1)
    {
      v11 = a2[v8];
      v12 = a3[v8];
      v13 = *((_QWORD *)this + 6);
      if ((unint64_t)v9 < v13)
      {
        *v9 = v11;
        v9[1] = v12;
        v10 = v9 + 2;
      }
      else
      {
        v14 = *v32;
        v15 = (char *)v9 - (char *)*v32;
        v16 = v15 >> 3;
        v17 = (v15 >> 3) + 1;
        if (v17 >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v18 = v13 - (_QWORD)v14;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * v19);
          v21 = (float *)&v20[8 * v16];
          *v21 = v11;
          v21[1] = v12;
          if (v9 != v14)
          {
LABEL_15:
            v22 = (char *)(v9 - 2) - (char *)v14;
            if (v22 < 0x168
              || &v20[v15 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v20[v15 - 8]
              || (float *)((char *)v9 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8) > v9 - 2
              || (unint64_t)((char *)v9 - v20 - v15) < 0x20)
            {
              v23 = v9;
              v24 = v21;
              goto LABEL_20;
            }
            v26 = (v22 >> 3) + 1;
            v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
            v23 = &v9[v27 / 0xFFFFFFFFFFFFFFFCLL];
            v24 = &v21[v27 / 0xFFFFFFFFFFFFFFFCLL];
            v28 = &v20[8 * v16 - 16];
            v29 = v9 - 4;
            v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v31 = *(_OWORD *)v29;
              *(v28 - 1) = *((_OWORD *)v29 - 1);
              *v28 = v31;
              v28 -= 2;
              v29 -= 8;
              v30 -= 4;
            }
            while (v30);
            if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_20:
                v25 = *((_QWORD *)v23 - 1);
                v23 -= 2;
                *((_QWORD *)v24 - 1) = v25;
                v24 -= 2;
              }
              while (v23 != v14);
            }
            v9 = *v32;
            v10 = v21 + 2;
            *((_QWORD *)this + 4) = v24;
            *((_QWORD *)this + 5) = v21 + 2;
            *((_QWORD *)this + 6) = &v20[8 * v19];
            if (!v9)
              goto LABEL_4;
LABEL_25:
            operator delete(v9);
            goto LABEL_4;
          }
        }
        else
        {
          v20 = 0;
          v21 = (float *)(8 * v16);
          *v21 = v11;
          v21[1] = v12;
          if (v9 != v14)
            goto LABEL_15;
        }
        v10 = v21 + 2;
        *((_QWORD *)this + 4) = v21;
        *((_QWORD *)this + 5) = v21 + 2;
        *((_QWORD *)this + 6) = &v20[8 * v19];
        if (v9)
          goto LABEL_25;
      }
LABEL_4:
      *((_QWORD *)this + 5) = v10;
      ++v8;
      v9 = v10;
      if (v8 == a4)
      {
        *((_BYTE *)this + 104) = 1;
        return;
      }
    }
  }
}

uint64_t HGBlurGroup::level(HGBlurGroup *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  HGBlur *v15;
  HGBlur *v16;
  float *v17;
  float *k;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  HGBlur *v23;
  uint64_t v24;
  char *v25;
  void (**v26)(HGBS::HGBlurShared *__hidden);
  HGBS *v27;
  HGColorMatrix **v28;
  _QWORD *v29;
  int v30;
  float v31;
  float v32;
  float v33;
  HGColorMatrix **v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v41;
  void **v42;
  HGColorMatrix *ColorMaskNode;

  if (*((_BYTE *)this + 104))
  {
    v4 = *((_QWORD *)this + 7);
    v42 = (void **)((char *)this + 56);
    for (i = *((_QWORD *)this + 8); i != v4; i -= 8)
    {
      v7 = *(_QWORD *)(i - 8);
      v6 = v7;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    }
    v8 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 8) = v4;
    for (j = *((_QWORD *)this + 11); j != v8; j -= 8)
    {
      v11 = *(_QWORD *)(j - 8);
      v10 = v11;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    }
    *((_QWORD *)this + 11) = v8;
    v12 = *((_QWORD *)this + 5);
    v13 = *(float *)(v12 - 8);
    v14 = *(float *)(v12 - 4);
    v15 = (HGBlur *)HGObject::operator new(0x220uLL);
    HGBlur::HGBlur(v15);
    v16 = (HGBlur *)*((_QWORD *)this + 3);
    v41 = a2;
    if (v16 == v15)
    {
      (*(void (**)(HGBlur *))(*(_QWORD *)v15 + 24))(v15);
      v15 = (HGBlur *)*((_QWORD *)this + 3);
    }
    else
    {
      if (v16)
        (*(void (**)(HGBlur *))(*(_QWORD *)v16 + 24))(v16);
      *((_QWORD *)this + 3) = v15;
    }
    (*(void (**)(HGBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v15 + 96))(v15, 0, v13, v14, 0.0, 0.0);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3), 0, *((_QWORD *)this + 2));
    v17 = (float *)*((_QWORD *)this + 4);
    for (k = (float *)*((_QWORD *)this + 5); v17 != k; v17 += 2)
    {
      v19 = *((_QWORD *)this + 7);
      v20 = *((_QWORD *)this + 8);
      v21 = *v17;
      v22 = v17[1];
      v23 = (HGBlur *)HGObject::operator new(0x220uLL);
      HGBlur::HGBlur(v23);
      *(_QWORD *)v23 = off_1E6526B48;
      *((_QWORD *)v23 + 67) = 0;
      if (*((float *)v23 + 104) == v21 && *((float *)v23 + 105) == v22)
      {
        v26 = off_1E6526B48;
      }
      else
      {
        *((float *)v23 + 104) = v21;
        *((float *)v23 + 105) = v22;
        *((_DWORD *)v23 + 107) = 1;
        HGNode::ClearBits((HGNode *)v23, v24, v25);
        v26 = *(void (***)(HGBS::HGBlurShared *__hidden))v23;
      }
      ((void (*)(HGBlur *, _QWORD, _QWORD))v26[15])(v23, 0, *((_QWORD *)this + 2));
      if (!*((_BYTE *)this + 106))
      {
        v37 = *((_QWORD *)v23 + 67);
        v38 = *((_QWORD *)this + 3);
        if (v37 != v38)
        {
          if (v37)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v37 + 24))(*((_QWORD *)v23 + 67));
            v38 = *((_QWORD *)this + 3);
          }
          *((_QWORD *)v23 + 67) = v38;
          if (v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
        }
      }
      ColorMaskNode = v23;
      v27 = (HGBS *)(*(uint64_t (**)(HGBlur *))(*(_QWORD *)v23 + 16))(v23);
      v28 = (HGColorMatrix **)*((_QWORD *)this + 8);
      if ((unint64_t)v28 >= *((_QWORD *)this + 9))
      {
        v29 = std::vector<HGRef<HGNode>>::__push_back_slow_path<HGRef<HGNode>>(v42, &ColorMaskNode);
        v27 = ColorMaskNode;
        *((_QWORD *)this + 8) = v29;
        if (v27)
          v27 = (HGBS *)(*(uint64_t (**)(HGBS *))(*(_QWORD *)v27 + 24))(v27);
      }
      else
      {
        *v28 = ColorMaskNode;
        *((_QWORD *)this + 8) = v28 + 1;
      }
      v30 = (int)(((unint64_t)(v20 - v19) >> 3) - 1) % 3;
      v31 = 0.4;
      if (v30)
        v32 = 0.4;
      else
        v32 = 1.0;
      if (v30 == 1)
        v33 = 1.0;
      else
        v33 = 0.4;
      if (v30 == 2)
        v31 = 1.0;
      ColorMaskNode = HGBS::createColorMaskNode(v27, v32, v33, v31);
      (*(void (**)(HGColorMatrix *, _QWORD, HGBlur *))(*(_QWORD *)ColorMaskNode + 120))(ColorMaskNode, 0, v23);
      v34 = (HGColorMatrix **)*((_QWORD *)this + 11);
      if ((unint64_t)v34 >= *((_QWORD *)this + 12))
      {
        v36 = std::vector<HGRef<HGNode>>::__push_back_slow_path<HGRef<HGNode> const&>((char **)this + 10, (uint64_t *)&ColorMaskNode);
      }
      else
      {
        v35 = (uint64_t)ColorMaskNode;
        *v34 = ColorMaskNode;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        v36 = (char *)(v34 + 1);
        *((_QWORD *)this + 11) = v34 + 1;
      }
      *((_QWORD *)this + 11) = v36;
      if (ColorMaskNode)
        (*(void (**)(HGColorMatrix *))(*(_QWORD *)ColorMaskNode + 24))(ColorMaskNode);
      (*(void (**)(HGBlur *))(*(_QWORD *)v23 + 24))(v23);
    }
    *((_BYTE *)this + 104) = 0;
    a2 = v41;
  }
  v39 = 80;
  if (!*((_BYTE *)this + 105))
    v39 = 56;
  return *(_QWORD *)(*(_QWORD *)((char *)this + v39) + 8 * a2);
}

void sub_1B2A9056C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  _Unwind_Resume(exception_object);
}

void HGDecimationImplementation::~HGDecimationImplementation(HGDecimationImplementation *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E6526E18;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGObject::~HGObject(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E6526E18;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGObject::~HGObject(this);
  HGObject::operator delete(v4);
}

uint64_t HGG9X<HgcBlur_cs9s_rect>::HGG9X(uint64_t a1, int a2)
{
  uint64_t v4;
  double v10;
  int v11;
  int v12;
  int v13;

  HgcBlur_cs9s_rect::HgcBlur_cs9s_rect((HgcBlur_cs9s_rect *)a1);
  *(_DWORD *)(v4 + 440) = a2;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v4 + 416) = _D0;
  *(_QWORD *)v4 = off_1E6526E68;
  *(_DWORD *)(v4 + 16) |= 1u;
  LODWORD(v10) = 0;
  *(float *)(a1 + 424) = HGRectfMake4f(-4.0, v10, 4.0);
  *(_DWORD *)(a1 + 428) = v11;
  *(_DWORD *)(a1 + 432) = v12;
  *(_DWORD *)(a1 + 436) = v13;
  HGG9B<HgcBlur_cs9s>::SetRadius(a1, 5.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, -4.125, 0.0, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, 1.0, 0.0, 0.0, 0.0);
  return a1;
}

void sub_1B2A907E4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s_rect::~HgcBlur_cs9s_rect(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A907F8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s_rect::~HgcBlur_cs9s_rect(v1);
  _Unwind_Resume(a1);
}

void HGG9X<HgcBlur_cs9s_rect>::~HGG9X(HGNode *a1)
{
  void *v1;

  HgcBlur_cs9s_rect::~HgcBlur_cs9s_rect(a1);
  HGObject::operator delete(v1);
}

const char *HGG9X<HgcBlur_cs9s_rect>::label_A()
{
  return "HGG9X";
}

uint64_t HGG9X<HgcBlur_cs9s_rect>::RenderTile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float32x4_t *v5;
  int v6;
  int v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  int v40;
  int v41;
  int v43;
  float32x4_t v44;
  float32x4_t v45;
  int v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t *v57;
  int v58;
  float32x4_t v59;
  float32x4_t v61;
  float32x4_t v62;
  int v63;
  int v64;
  float32x4_t v65;
  int v66;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  unsigned int v74;
  float32x4_t v75;
  unsigned int v76;
  float32x4_t v77;
  float32x4_t *v78;
  uint64_t v79;
  float32x4_t *v80;
  float32x4_t v81;
  int v82;
  int v83;
  int v84;
  float32x4_t *v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  uint64_t v89;
  unsigned int v90;
  float32x4_t v91;
  float32x4_t v92;
  unsigned int v93;
  float32x4_t *v94;
  uint64_t v95;
  float32x4_t *v96;
  float32x4_t v97;
  float32x4_t v98;

  v4 = HGGetTBC();
  v5 = *(float32x4_t **)(a1 + 48);
  if (v5[4].f32[0] == 0.0)
  {
    if (v5[3].f32[0] != 0.0)
    {
      v40 = *(_DWORD *)(a2 + 8);
      v41 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
      if (v41 >= 1 && v40 != *(_DWORD *)a2)
      {
        v43 = 0;
        v44 = *v5;
        v45 = v5[1];
        v46 = *(_DWORD *)a2 - v40;
        v47 = v5[2];
        v48 = v5[3];
        do
        {
          v49 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v43);
          v50 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v43);
          v52 = v50[-3];
          v51 = v50[-2];
          v53 = v50[-1];
          v54 = *v50;
          v55 = v50[1];
          v56 = v50[2];
          v57 = v50 + 3;
          v58 = v46;
          do
          {
            v59 = *v57++;
            *v49++ = vaddq_f32(vaddq_f32(vmulq_f32(v47, vaddq_f32(v56, v51)), vaddq_f32(vmulq_f32(v44, v54), vmulq_f32(v45, vaddq_f32(v55, v53)))), vmulq_f32(v48, vaddq_f32(v52, v59)));
            v52 = v51;
            v51 = v53;
            v53 = v54;
            v54 = v55;
            v55 = v56;
            v56 = v59;
          }
          while (!__CFADD__(v58++, 1));
          ++v43;
        }
        while (v43 != v41);
      }
      goto LABEL_50;
    }
    v61 = *v5;
    v62 = v5[1];
    if (v5[2].f32[0] != 0.0)
    {
      v63 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
      if (v63 < 1)
        goto LABEL_50;
      v64 = 0;
      v65 = v5[2];
      v66 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
      while (1)
      {
        v67 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v64);
        v68 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v64);
        v70 = v68[-2];
        v69 = v68[-1];
        v71 = *v68;
        v72 = v68[1];
        if (v66 >= 2)
          break;
        v79 = (uint64_t)&v68[4];
        v74 = v66;
        if (v66)
          goto LABEL_35;
LABEL_28:
        if (++v64 == v63)
          goto LABEL_50;
      }
      v73 = 0;
      v74 = v66;
      do
      {
        v75 = v72;
        v76 = v74;
        v77 = v71;
        v78 = &v67[v73];
        v71 = v68[v73 + 2];
        v72 = v68[v73 + 3];
        v74 -= 2;
        *v78 = vaddq_f32(vaddq_f32(vmulq_f32(v61, v77), vmulq_f32(v62, vaddq_f32(v75, v69))), vmulq_f32(v65, vaddq_f32(v70, v71)));
        v78[1] = vaddq_f32(vmulq_f32(v65, vaddq_f32(v69, v72)), vaddq_f32(vmulq_f32(v61, v75), vmulq_f32(v62, vaddq_f32(v77, v71))));
        v73 += 2;
        v70 = v77;
        v69 = v75;
      }
      while (v76 > 3);
      v67 = (float32x4_t *)((char *)v67 + v73 * 16);
      v79 = (uint64_t)&v68[v73 + 4];
      v69 = v75;
      v70 = v77;
      if (!v74)
        goto LABEL_28;
LABEL_35:
      v80 = (float32x4_t *)(v79 - 32);
      do
      {
        v81 = *v80++;
        *v67++ = vaddq_f32(vaddq_f32(vmulq_f32(v61, v71), vmulq_f32(v62, vaddq_f32(v72, v69))), vmulq_f32(v65, vaddq_f32(v70, v81)));
        v70 = v69;
        v69 = v71;
        v71 = v72;
        v72 = v81;
        --v74;
      }
      while (v74);
      goto LABEL_28;
    }
    v82 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
    if (v82 < 1)
      goto LABEL_50;
    v83 = 0;
    v84 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    while (1)
    {
      v85 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v83);
      v86 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v83);
      v88 = v86[-1];
      v87 = *v86;
      if (v84 >= 2)
        break;
      v95 = (uint64_t)&v86[3];
      v90 = v84;
      if (v84)
        goto LABEL_47;
LABEL_40:
      if (++v83 == v82)
        goto LABEL_50;
    }
    v89 = 0;
    v90 = v84;
    do
    {
      v91 = v88;
      v92 = v87;
      v93 = v90;
      v94 = &v85[v89];
      v88 = v86[v89 + 1];
      v87 = v86[v89 + 2];
      *v94 = vaddq_f32(vmulq_f32(v61, v92), vmulq_f32(v62, vaddq_f32(v91, v88)));
      v94[1] = vaddq_f32(vmulq_f32(v61, v88), vmulq_f32(v62, vaddq_f32(v92, v87)));
      v90 = v93 - 2;
      v89 += 2;
    }
    while (v93 > 3);
    v95 = (uint64_t)&v86[v89 + 3];
    v85 = (float32x4_t *)((char *)v85 + v89 * 16);
    if (v93 == 2)
      goto LABEL_40;
LABEL_47:
    v96 = (float32x4_t *)(v95 - 32);
    do
    {
      v97 = v87;
      v98 = *v96++;
      v87 = v98;
      *v85++ = vaddq_f32(vmulq_f32(v61, v97), vmulq_f32(v62, vaddq_f32(v88, v98)));
      v88 = v97;
      --v90;
    }
    while (v90);
    goto LABEL_40;
  }
  v6 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = *v5;
    v9 = v5[1];
    v10 = v5[2];
    v11 = v5[3];
    v12 = v5[4];
    v13 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    while (1)
    {
      v14 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v7);
      v15 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v7);
      v17 = v15[-4];
      v16 = v15[-3];
      v18 = v15[-2];
      v19 = v15[-1];
      v20 = *v15;
      v21 = v15[1];
      v22 = v15[2];
      v23 = v15[3];
      if (v13 >= 2)
        break;
      v37 = (uint64_t)&v15[6];
      v25 = v13;
      if (v13)
        goto LABEL_11;
LABEL_4:
      if (++v7 == v6)
        goto LABEL_50;
    }
    v24 = 0;
    v25 = v13;
    do
    {
      v26 = v25;
      v27 = v23;
      v28 = v22;
      v29 = v21;
      v30 = v20;
      v31 = v19;
      v32 = v18;
      v33 = &v14[v24];
      v22 = v15[v24 + 4];
      v23 = v15[v24 + 5];
      v34 = vaddq_f32(vaddq_f32(vmulq_f32(v10, vaddq_f32(v27, v19)), vaddq_f32(vmulq_f32(v8, v21), vmulq_f32(v9, vaddq_f32(v28, v20)))), vmulq_f32(v11, vaddq_f32(v18, v22)));
      v35 = vaddq_f32(vaddq_f32(vmulq_f32(v11, vaddq_f32(v27, v16)), vaddq_f32(vmulq_f32(v10, vaddq_f32(v28, v18)), vaddq_f32(vmulq_f32(v8, v20), vmulq_f32(v9, vaddq_f32(v21, v31))))), vmulq_f32(v12, vaddq_f32(v17, v22)));
      v25 -= 2;
      v36 = vaddq_f32(vmulq_f32(v12, vaddq_f32(v16, v23)), v34);
      v24 += 2;
      v17 = v18;
      v16 = v31;
      v18 = v30;
      *v33 = v35;
      v33[1] = v36;
      v19 = v21;
      v20 = v28;
      v21 = v27;
    }
    while (v26 > 3);
    v14 = (float32x4_t *)((char *)v14 + v24 * 16);
    v37 = (uint64_t)&v15[v24 + 6];
    v21 = v27;
    v20 = v28;
    v19 = v29;
    v18 = v30;
    v16 = v31;
    v17 = v32;
    if (!v25)
      goto LABEL_4;
LABEL_11:
    v38 = (float32x4_t *)(v37 - 32);
    do
    {
      v39 = *v38++;
      *v14++ = vaddq_f32(vaddq_f32(vmulq_f32(v11, vaddq_f32(v23, v16)), vaddq_f32(vmulq_f32(v10, vaddq_f32(v22, v18)), vaddq_f32(vmulq_f32(v8, v20), vmulq_f32(v9, vaddq_f32(v21, v19))))), vmulq_f32(v12, vaddq_f32(v17, v39)));
      v17 = v16;
      v16 = v18;
      v18 = v19;
      v19 = v20;
      v20 = v21;
      v21 = v22;
      v22 = v23;
      v23 = v39;
      --v25;
    }
    while (v25);
    goto LABEL_4;
  }
LABEL_50:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 336) + 416) + 80) += HGGetTBC() - v4;
  return 0;
}

const char *HGG9B<HgcBlur_cs9s_rect>::GetProgram(uint64_t a1, HGRenderer *a2)
{
  float v4;
  float v5;
  BOOL v6;

  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 43) != 1)
    return HgcBlur_cs9s_rect::GetProgram((HgcBlur_cs9s_rect *)a1, a2);
  v4 = *(float *)(a1 + 436) - *(float *)(a1 + 428);
  if ((float)(*(float *)(a1 + 432) - *(float *)(a1 + 424)) <= 0.0)
  {
    if (v4 <= 0.0)
      return HgcBlur_cs9s_rect::GetProgram((HgcBlur_cs9s_rect *)a1, a2);
    goto LABEL_7;
  }
  v5 = *(float *)(a1 + 416);
  v6 = v5 == 1.0;
  if (v5 != 1.0 && v4 > 0.0)
LABEL_7:
    v6 = *(float *)(a1 + 420) == 1.0;
  if (*(_DWORD *)(a1 + 440) == 1 && v6)
    return "//Metal1.0     \n"
           "//LEN=0000000e18\n"
           "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]],\n"
           "                                  const constant float4* hg_Params [[ buffer(0) ]],\n"
           "                                  texture2d< half > hg_Texture0 [[ texture(0) ]],\n"
           "                                  sampler hg_Sampler0 [[ sampler(0) ]])\n"
           "{\n"
           "    // Cast params to consts to workaround backend compiler issue\n"
           "    const float4 gaussianWeight0    (hg_Params[0]);\n"
           "    const float4 gaussianWeight1    (hg_Params[1]);\n"
           "    const float4 gaussianWeight2    (hg_Params[2]);\n"
           "    const float4 gaussianWeight3    (hg_Params[3]);\n"
           "    const float4 gaussianWeight4    (hg_Params[4]);\n"
           "    const float2 uvSet1Weight       (hg_Params[5].xy);\n"
           "    const float2 uvOffset           (hg_Params[6].xy);\n"
           "    const float2 blurDirection      (hg_Params[7].xy);\n"
           "    \n"
           "    const ushort2 screenPosition = ushort2(frag._position.xy);\n"
           "    const ushort isInRightColumn = screenPosition.x & 1;\n"
           "    const ushort isInLowerRow    = screenPosition.y & 1;\n"
           "    \n"
           "    const float2 uvCenter =  frag._texCoord0.xy + frag._texCoord1.xy * uvSet1Weight;\n"
           "    \n"
           "    const float2 L4coord = uvCenter + uvOffset;\n"
           "    const float2 L2coord = L4coord  + blurDirection * 2.0;\n"
           "    const float2 CCoord  = L2coord  + blurDirection * 2.0;\n"
           "    const float2 R2Coord = CCoord   + blurDirection * 2.0;\n"
           "    const float2 R4Coord = R2Coord  + blurDirection * 2.0;\n"
           "    const half4 tapL4 = hg_Texture0.sample(hg_Sampler0, L4coord);\n"
           "    const half4 tapL2 = hg_Texture0.sample(hg_Sampler0, L2coord);\n"
           "    const half4 tapC  = hg_Texture0.sample(hg_Sampler0, CCoord);\n"
           "    const half4 tapR2 = hg_Texture0.sample(hg_Sampler0, R2Coord);\n"
           "    const half4 tapR4 = hg_Texture0.sample(hg_Sampler0, R4Coord);\n"
           "    \n"
           "    // My lane               Vertical Blur Lanes   Horizontal Blur Lanes\n"
           "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
           "    // | Lane 0 | Lane 1 |   | Lane 2 | Lane 3 |   | Lane 1 | Lane 0 |\n"
           "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
           "    // | Lane 2 | Lane 3 |   | Lane 1 | Lane 0 |   | Lane 3 | Lane 2 |\n"
           "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
           "    \n"
           "    const ushort isOddPixel = (uvOffset.x == 0) ? isInLowerRow : isInRightColumn;\n"
           "    const ushort otherLane  = ((uvOffset.x == 0) ?\n"
           "                               (isInRightColumn + (1 - isInLowerRow) * 2) :\n"
           "                               (1 - isInRightColumn + isInLowerRow * 2));\n"
           "    float4 accum(0);\n"
           "    \n"
           "    accum += float4(tapL4) * gaussianWeight4;\n"
           "    float4 otherValueL4 = float4(quad_shuffle(tapL4, otherLane));\n"
           "    accum += otherValueL4 * (isOddPixel ?               0 : gaussianWeight3);\n"
           "    \n"
           "    accum += float4(tapL2) * gaussianWeight2;\n"
           "    float4 otherValueL2 = float4(quad_shuffle(tapL2, otherLane));\n"
           "    accum += otherValueL2 * (isOddPixel ? gaussianWeight3 : gaussianWeight1);\n"
           "    \n"
           "    accum += float4(tapC)  * gaussianWeight0;\n"
           "    float4 otherValueC = float4(quad_shuffle(tapC, otherLane));\n"
           "    accum += otherValueC * gaussianWeight1;\n"
           "    \n"
           "    accum += float4(tapR2) * gaussianWeight2;\n"
           "    float4 otherValueR2 = float4(quad_shuffle(tapR2, otherLane));\n"
           "    accum += otherValueR2 * (isOddPixel ? gaussianWeight1 : gaussianWeight3);\n"
           "    \n"
           "    accum += float4(tapR4) * gaussianWeight4;\n"
           "    float4 otherValueR4 = float4(quad_shuffle(tapR4, otherLane));\n"
           "    accum += otherValueR4 * (isOddPixel ? gaussianWeight3 :               0);\n"
           "    \n"
           "    FragmentOut out;\n"
           "    out.color0 = accum;\n"
           "    return out;\n"
           "}\n"
           "//MD5=c152bbe4:3e592d82:afebeded:d45efc4f\n"
           "//SIG=00000000:00000000:00000000:00000001:000f:0008:0000:0000:0000:0000:0007:0000:0002:01:0:1:0\n";
  return HgcBlur_cs9s_rect::GetProgram((HgcBlur_cs9s_rect *)a1, a2);
}

uint64_t HGG9X<HgcBlur_cs9s_rect>::Bind(HGNode *a1, HGHandler *a2)
{
  uint64_t v3;

  v3 = HGNode::Bind(a1, a2);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  return v3;
}

uint64_t HGG9X<HgcBlur_cs9s_rect>::BindTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  BOOL v8;
  unsigned int v10;
  unsigned int v11;

  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 43) == 1)
  {
    HGHandler::TexCoord((HGHandler *)a2, a3, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v6 = *(float *)(a1 + 436) - *(float *)(a1 + 428);
    if ((float)(*(float *)(a1 + 432) - *(float *)(a1 + 424)) > 0.0)
    {
      v7 = *(float *)(a1 + 416);
      v8 = v7 == 1.0;
      if (v7 == 1.0 || v6 <= 0.0)
      {
LABEL_10:
        if (*(_DWORD *)(a1 + 440) == 1 && v8)
          return 0;
        goto LABEL_13;
      }
LABEL_9:
      v8 = *(float *)(a1 + 420) == 1.0;
      goto LABEL_10;
    }
    if (v6 > 0.0)
      goto LABEL_9;
LABEL_13:
    (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 8, 0.0, 0.0, 1.0, 1.0);
    return 0;
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    HGHandler::TexCoord((HGHandler *)a2, a3, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    goto LABEL_13;
  }
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 8, (float)*(int *)(a2 + 240), (float)*(int *)(a2 + 244), 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220)), 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224)));
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 21))
    return 0;
  v10 = *(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220);
  v11 = *(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 9, (float)(v10 + 1) * 0.5, (float)(v11 + 1) * 0.5, (float)v10, (float)v11);
  return 0;
}

uint64_t HGG9B<HgcBlur_cs9s_rect>::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27)
    return 27;
  else
    return a2;
}

void HGG9B<HgcBlur_cs9s_rect>::InitProgramDescriptor(uint64_t a1, HGProgramDescriptor *a2)
{
  float v3;
  float v4;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  const char *v21;
  std::string v22;
  void *__p[2];
  unsigned __int8 v24;
  void *v25[2];
  unsigned __int8 v26;
  void *v27[2];
  unsigned __int8 v28;
  std::string v29;
  std::string v30;
  std::string v31;
  __int128 v32;
  int64_t v33;

  v3 = *(float *)(a1 + 436) - *(float *)(a1 + 428);
  if ((float)(*(float *)(a1 + 432) - *(float *)(a1 + 424)) <= 0.0)
  {
    if (v3 <= 0.0)
      goto LABEL_15;
  }
  else
  {
    v4 = *(float *)(a1 + 416);
    if (v4 == 1.0 || v3 <= 0.0)
    {
      if (*(_DWORD *)(a1 + 440) == 1 && v4 == 1.0)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (*(_DWORD *)(a1 + 440) == 1 && *(float *)(a1 + 420) == 1.0)
  {
LABEL_16:
    HGMetalUtils::stringForMetalHeader((uint64_t)&v29);
    HGMetalUtils::stringForMetalVertexOutputStruct((HGMetalUtils *)2, 0, (uint64_t)v27);
    if ((v28 & 0x80u) == 0)
      v7 = v27;
    else
      v7 = (void **)v27[0];
    if ((v28 & 0x80u) == 0)
      v8 = v28;
    else
      v8 = (std::string::size_type)v27[1];
    v9 = std::string::append(&v29, (const std::string::value_type *)v7, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    HGMetalUtils::stringForMetalVertexShader((HGMetalUtils *)"vertexFunc", (const char *)2, 0, (uint64_t)v25);
    if ((v26 & 0x80u) == 0)
      v11 = v25;
    else
      v11 = (void **)v25[0];
    if ((v26 & 0x80u) == 0)
      v12 = v26;
    else
      v12 = (std::string::size_type)v25[1];
    v13 = std::string::append(&v30, (const std::string::value_type *)v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    HGMetalUtils::stringForMetalFragmentOutputStruct((HGMetalUtils *)1, 0, (uint64_t)__p);
    if ((v24 & 0x80u) == 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v16 = v24;
    else
      v16 = (std::string::size_type)__p[1];
    v17 = std::string::append(&v31, (const std::string::value_type *)v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v22, "//Metal1.0     \n//LEN=0000000e18\nfragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]],\n                                  const constant float4* hg_Params [[ buffer(0) ]],\n                                  texture2d< half > hg_Texture0 [[ texture(0) ]],\n                                  sampler hg_Sampler0 [[ sampler(0) ]])\n{\n    // Cast params to consts to workaround backend compiler issue\n    const float4 gaussianWeight0    (hg_Params[0]);\n"
            "    const float4 gaussianWeight1    (hg_Params[1]);\n"
            "    const float4 gaussianWeight2    (hg_Params[2]);\n"
            "    const float4 gaussianWeight3    (hg_Params[3]);\n"
            "    const float4 gaussianWeight4    (hg_Params[4]);\n"
            "    const float2 uvSet1Weight       (hg_Params[5].xy);\n"
            "    const float2 uvOffset           (hg_Params[6].xy);\n"
            "    const float2 blurDirection      (hg_Params[7].xy);\n"
            "    \n"
            "    const ushort2 screenPosition = ushort2(frag._position.xy);\n"
            "    const ushort isInRightColumn = screenPosition.x & 1;\n"
            "    const ushort isInLowerRow    = screenPosition.y & 1;\n"
            "    \n"
            "    const float2 uvCenter =  frag._texCoord0.xy + frag._texCoord1.xy * uvSet1Weight;\n"
            "    \n"
            "    const float2 L4coord = uvCenter + uvOffset;\n"
            "    const float2 L2coord = L4coord  + blurDirection * 2.0;\n"
            "    const float2 CCoord  = L2coord  + blurDirection * 2.0;\n"
            "    const float2 R2Coord = CCoord   + blurDirection * 2.0;\n"
            "    const float2 R4Coord = R2Coord  + blurDirection * 2.0;\n"
            "    const half4 tapL4 = hg_Texture0.sample(hg_Sampler0, L4coord);\n"
            "    const half4 tapL2 = hg_Texture0.sample(hg_Sampler0, L2coord);\n"
            "    const half4 tapC  = hg_Texture0.sample(hg_Sampler0, CCoord);\n"
            "    const half4 tapR2 = hg_Texture0.sample(hg_Sampler0, R2Coord);\n"
            "    const half4 tapR4 = hg_Texture0.sample(hg_Sampler0, R4Coord);\n"
            "    \n"
            "    // My lane               Vertical Blur Lanes   Horizontal Blur Lanes\n"
            "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
            "    // | Lane 0 | Lane 1 |   | Lane 2 | Lane 3 |   | Lane 1 | Lane 0 |\n"
            "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
            "    // | Lane 2 | Lane 3 |   | Lane 1 | Lane 0 |   | Lane 3 | Lane 2 |\n"
            "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
            "    \n"
            "    const ushort isOddPixel = (uvOffset.x == 0) ? isInLowerRow : isInRightColumn;\n"
            "    const ushort otherLane  = ((uvOffset.x == 0) ?\n"
            "                               (isInRightColumn + (1 - isInLowerRow) * 2) :\n"
            "                               (1 - isInRightColumn + isInLowerRow * 2));\n"
            "    float4 accum(0);\n"
            "    \n"
            "    accum += float4(tapL4) * gaussianWeight4;\n"
            "    float4 otherValueL4 = float4(quad_shuffle(tapL4, otherLane));\n"
            "    accum += otherValueL4 * (isOddPixel ?               0 : gaussianWeight3);\n"
            "    \n"
            "    accum += float4(tapL2) * gaussianWeight2;\n"
            "    float4 otherValueL2 = float4(quad_shuffle(tapL2, otherLane));\n"
            "    accum += otherValueL2 * (isOddPixel ? gaussianWeight3 : gaussianWeight1);\n"
            "    \n"
            "    accum += float4(tapC)  * gaussianWeight0;\n"
            "    float4 otherValueC = float4(quad_shuffle(tapC, otherLane));\n"
            "    accum += otherValueC * gaussianWeight1;\n"
            "    \n"
            "    accum += float4(tapR2) * gaussianWeight2;\n"
            "    float4 otherValueR2 = float4(quad_shuffle(tapR2, otherLane));\n"
            "    accum += otherValueR2 * (isOddPixel ? gaussianWeight1 : gaussianWeight3);\n"
            "    \n"
            "    accum += float4(tapR4) * gaussianWeight4;\n"
            "    float4 otherValueR4 = float4(quad_shuffle(tapR4, otherLane));\n"
            "    accum += otherValueR4 * (isOddPixel ? gaussianWeight3 :               0);\n"
            "    \n"
            "    FragmentOut out;\n"
            "    out.color0 = accum;\n"
            "    return out;\n"
            "}\n"
            "//MD5=c152bbe4:3e592d82:afebeded:d45efc4f\n"
            "//SIG=00000000:00000000:00000000:00000001:000f:0008:0000:0000:0000:0000:0007:0000:0002:01:0:1:0\n");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v33 = v19->__r_.__value_.__r.__words[2];
    v32 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v22.__r_.__value_.__l.__data_);
      if (((char)v24 & 0x80000000) == 0)
      {
LABEL_36:
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_37;
        goto LABEL_47;
      }
    }
    else if (((char)v24 & 0x80000000) == 0)
    {
      goto LABEL_36;
    }
    operator delete(__p[0]);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_37:
      if (((char)v26 & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_48;
    }
LABEL_47:
    operator delete(v31.__r_.__value_.__l.__data_);
    if (((char)v26 & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v25[0]);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      if (((char)v28 & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_50;
    }
LABEL_49:
    operator delete(v30.__r_.__value_.__l.__data_);
    if (((char)v28 & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
LABEL_51:
      operator delete(v29.__r_.__value_.__l.__data_);
LABEL_41:
      if (v33 >= 0)
        v21 = (const char *)&v32;
      else
        v21 = (const char *)v32;
      HGProgramDescriptor::SetShaderProgram(a2, v21);
    }
LABEL_50:
    operator delete(v27[0]);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_51;
  }
LABEL_15:
  HgcBlur_cs9s_rect::InitProgramDescriptor((HgcBlur_cs9s_rect *)a1, a2);
}

void sub_1B2A91868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a20 < 0)
    operator delete(__p);
  std::vector<HGBinding>::~vector[abi:ne180100]((void **)(v46 - 96));
  if (*(char *)(v46 - 41) < 0)
    operator delete(*(void **)(v46 - 64));
  _Unwind_Resume(a1);
}

uint64_t HGG9B<HgcBlur_cs9s_rect>::GetDOD(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return HGRectIntegral(HIDWORD(a4), (float)((float)(a1[106] + (float)(int)a4) / a1[104]) + 0.5, (float)((float)(a1[107] + (float)SHIDWORD(a4)) / a1[105]) + 0.5, (float)((float)((float)((float)(int)a5 + -1.0) + a1[108]) / a1[104]) + 0.5, (float)((float)((float)((float)SHIDWORD(a5) + -1.0) + a1[109]) / a1[105]) + 0.5);
}

uint64_t HGG9B<HgcBlur_cs9s_rect>::GetROI(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return HGRectIntegral(HIDWORD(a4), a1[106] + (float)((float)(a1[104] * (float)(int)a4) + 0.5), a1[107] + (float)((float)(a1[105] * (float)SHIDWORD(a4)) + 0.5), (float)((float)((float)((float)(int)a5 + -1.0) * a1[104]) + 0.5) + a1[108], (float)((float)((float)((float)SHIDWORD(a5) + -1.0) * a1[105]) + 0.5) + a1[109]);
}

uint64_t HGG9X<HgcBlur_cs9s_rect>::GetFilterMode()
{
  return 0;
}

uint64_t HGG9X<HgcBlur_cs9s_es_noborder>::HGG9X(uint64_t a1, int a2)
{
  uint64_t v4;
  double v10;
  int v11;
  int v12;
  int v13;

  HgcBlur_cs9s_es_noborder::HgcBlur_cs9s_es_noborder((HgcBlur_cs9s_es_noborder *)a1);
  *(_DWORD *)(v4 + 440) = a2;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v4 + 416) = _D0;
  *(_QWORD *)v4 = off_1E65270F0;
  *(_DWORD *)(v4 + 16) |= 1u;
  LODWORD(v10) = 0;
  *(float *)(a1 + 424) = HGRectfMake4f(-4.0, v10, 4.0);
  *(_DWORD *)(a1 + 428) = v11;
  *(_DWORD *)(a1 + 432) = v12;
  *(_DWORD *)(a1 + 436) = v13;
  HGG9B<HgcBlur_cs9s>::SetRadius(a1, 5.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, -4.125, 0.0, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, 1.0, 0.0, 0.0, 0.0);
  return a1;
}

void sub_1B2A91BC8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s_es_noborder::~HgcBlur_cs9s_es_noborder(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A91BDC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s_es_noborder::~HgcBlur_cs9s_es_noborder(v1);
  _Unwind_Resume(a1);
}

void HGG9X<HgcBlur_cs9s_es_noborder>::~HGG9X(HGNode *a1)
{
  void *v1;

  HgcBlur_cs9s_es_noborder::~HgcBlur_cs9s_es_noborder(a1);
  HGObject::operator delete(v1);
}

const char *HGG9X<HgcBlur_cs9s_es_noborder>::label_A()
{
  return "HGG9X";
}

uint64_t HGG9X<HgcBlur_cs9s_es_noborder>::RenderTile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float32x4_t *v5;
  int v6;
  int v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  int v40;
  int v41;
  int v43;
  float32x4_t v44;
  float32x4_t v45;
  int v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t *v57;
  int v58;
  float32x4_t v59;
  float32x4_t v61;
  float32x4_t v62;
  int v63;
  int v64;
  float32x4_t v65;
  int v66;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  unsigned int v74;
  float32x4_t v75;
  unsigned int v76;
  float32x4_t v77;
  float32x4_t *v78;
  uint64_t v79;
  float32x4_t *v80;
  float32x4_t v81;
  int v82;
  int v83;
  int v84;
  float32x4_t *v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  uint64_t v89;
  unsigned int v90;
  float32x4_t v91;
  float32x4_t v92;
  unsigned int v93;
  float32x4_t *v94;
  uint64_t v95;
  float32x4_t *v96;
  float32x4_t v97;
  float32x4_t v98;

  v4 = HGGetTBC();
  v5 = *(float32x4_t **)(a1 + 48);
  if (v5[4].f32[0] == 0.0)
  {
    if (v5[3].f32[0] != 0.0)
    {
      v40 = *(_DWORD *)(a2 + 8);
      v41 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
      if (v41 >= 1 && v40 != *(_DWORD *)a2)
      {
        v43 = 0;
        v44 = *v5;
        v45 = v5[1];
        v46 = *(_DWORD *)a2 - v40;
        v47 = v5[2];
        v48 = v5[3];
        do
        {
          v49 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v43);
          v50 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v43);
          v52 = v50[-3];
          v51 = v50[-2];
          v53 = v50[-1];
          v54 = *v50;
          v55 = v50[1];
          v56 = v50[2];
          v57 = v50 + 3;
          v58 = v46;
          do
          {
            v59 = *v57++;
            *v49++ = vaddq_f32(vaddq_f32(vmulq_f32(v47, vaddq_f32(v56, v51)), vaddq_f32(vmulq_f32(v44, v54), vmulq_f32(v45, vaddq_f32(v55, v53)))), vmulq_f32(v48, vaddq_f32(v52, v59)));
            v52 = v51;
            v51 = v53;
            v53 = v54;
            v54 = v55;
            v55 = v56;
            v56 = v59;
          }
          while (!__CFADD__(v58++, 1));
          ++v43;
        }
        while (v43 != v41);
      }
      goto LABEL_50;
    }
    v61 = *v5;
    v62 = v5[1];
    if (v5[2].f32[0] != 0.0)
    {
      v63 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
      if (v63 < 1)
        goto LABEL_50;
      v64 = 0;
      v65 = v5[2];
      v66 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
      while (1)
      {
        v67 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v64);
        v68 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v64);
        v70 = v68[-2];
        v69 = v68[-1];
        v71 = *v68;
        v72 = v68[1];
        if (v66 >= 2)
          break;
        v79 = (uint64_t)&v68[4];
        v74 = v66;
        if (v66)
          goto LABEL_35;
LABEL_28:
        if (++v64 == v63)
          goto LABEL_50;
      }
      v73 = 0;
      v74 = v66;
      do
      {
        v75 = v72;
        v76 = v74;
        v77 = v71;
        v78 = &v67[v73];
        v71 = v68[v73 + 2];
        v72 = v68[v73 + 3];
        v74 -= 2;
        *v78 = vaddq_f32(vaddq_f32(vmulq_f32(v61, v77), vmulq_f32(v62, vaddq_f32(v75, v69))), vmulq_f32(v65, vaddq_f32(v70, v71)));
        v78[1] = vaddq_f32(vmulq_f32(v65, vaddq_f32(v69, v72)), vaddq_f32(vmulq_f32(v61, v75), vmulq_f32(v62, vaddq_f32(v77, v71))));
        v73 += 2;
        v70 = v77;
        v69 = v75;
      }
      while (v76 > 3);
      v67 = (float32x4_t *)((char *)v67 + v73 * 16);
      v79 = (uint64_t)&v68[v73 + 4];
      v69 = v75;
      v70 = v77;
      if (!v74)
        goto LABEL_28;
LABEL_35:
      v80 = (float32x4_t *)(v79 - 32);
      do
      {
        v81 = *v80++;
        *v67++ = vaddq_f32(vaddq_f32(vmulq_f32(v61, v71), vmulq_f32(v62, vaddq_f32(v72, v69))), vmulq_f32(v65, vaddq_f32(v70, v81)));
        v70 = v69;
        v69 = v71;
        v71 = v72;
        v72 = v81;
        --v74;
      }
      while (v74);
      goto LABEL_28;
    }
    v82 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
    if (v82 < 1)
      goto LABEL_50;
    v83 = 0;
    v84 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    while (1)
    {
      v85 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v83);
      v86 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v83);
      v88 = v86[-1];
      v87 = *v86;
      if (v84 >= 2)
        break;
      v95 = (uint64_t)&v86[3];
      v90 = v84;
      if (v84)
        goto LABEL_47;
LABEL_40:
      if (++v83 == v82)
        goto LABEL_50;
    }
    v89 = 0;
    v90 = v84;
    do
    {
      v91 = v88;
      v92 = v87;
      v93 = v90;
      v94 = &v85[v89];
      v88 = v86[v89 + 1];
      v87 = v86[v89 + 2];
      *v94 = vaddq_f32(vmulq_f32(v61, v92), vmulq_f32(v62, vaddq_f32(v91, v88)));
      v94[1] = vaddq_f32(vmulq_f32(v61, v88), vmulq_f32(v62, vaddq_f32(v92, v87)));
      v90 = v93 - 2;
      v89 += 2;
    }
    while (v93 > 3);
    v95 = (uint64_t)&v86[v89 + 3];
    v85 = (float32x4_t *)((char *)v85 + v89 * 16);
    if (v93 == 2)
      goto LABEL_40;
LABEL_47:
    v96 = (float32x4_t *)(v95 - 32);
    do
    {
      v97 = v87;
      v98 = *v96++;
      v87 = v98;
      *v85++ = vaddq_f32(vmulq_f32(v61, v97), vmulq_f32(v62, vaddq_f32(v88, v98)));
      v88 = v97;
      --v90;
    }
    while (v90);
    goto LABEL_40;
  }
  v6 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = *v5;
    v9 = v5[1];
    v10 = v5[2];
    v11 = v5[3];
    v12 = v5[4];
    v13 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    while (1)
    {
      v14 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v7);
      v15 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v7);
      v17 = v15[-4];
      v16 = v15[-3];
      v18 = v15[-2];
      v19 = v15[-1];
      v20 = *v15;
      v21 = v15[1];
      v22 = v15[2];
      v23 = v15[3];
      if (v13 >= 2)
        break;
      v37 = (uint64_t)&v15[6];
      v25 = v13;
      if (v13)
        goto LABEL_11;
LABEL_4:
      if (++v7 == v6)
        goto LABEL_50;
    }
    v24 = 0;
    v25 = v13;
    do
    {
      v26 = v25;
      v27 = v23;
      v28 = v22;
      v29 = v21;
      v30 = v20;
      v31 = v19;
      v32 = v18;
      v33 = &v14[v24];
      v22 = v15[v24 + 4];
      v23 = v15[v24 + 5];
      v34 = vaddq_f32(vaddq_f32(vmulq_f32(v10, vaddq_f32(v27, v19)), vaddq_f32(vmulq_f32(v8, v21), vmulq_f32(v9, vaddq_f32(v28, v20)))), vmulq_f32(v11, vaddq_f32(v18, v22)));
      v35 = vaddq_f32(vaddq_f32(vmulq_f32(v11, vaddq_f32(v27, v16)), vaddq_f32(vmulq_f32(v10, vaddq_f32(v28, v18)), vaddq_f32(vmulq_f32(v8, v20), vmulq_f32(v9, vaddq_f32(v21, v31))))), vmulq_f32(v12, vaddq_f32(v17, v22)));
      v25 -= 2;
      v36 = vaddq_f32(vmulq_f32(v12, vaddq_f32(v16, v23)), v34);
      v24 += 2;
      v17 = v18;
      v16 = v31;
      v18 = v30;
      *v33 = v35;
      v33[1] = v36;
      v19 = v21;
      v20 = v28;
      v21 = v27;
    }
    while (v26 > 3);
    v14 = (float32x4_t *)((char *)v14 + v24 * 16);
    v37 = (uint64_t)&v15[v24 + 6];
    v21 = v27;
    v20 = v28;
    v19 = v29;
    v18 = v30;
    v16 = v31;
    v17 = v32;
    if (!v25)
      goto LABEL_4;
LABEL_11:
    v38 = (float32x4_t *)(v37 - 32);
    do
    {
      v39 = *v38++;
      *v14++ = vaddq_f32(vaddq_f32(vmulq_f32(v11, vaddq_f32(v23, v16)), vaddq_f32(vmulq_f32(v10, vaddq_f32(v22, v18)), vaddq_f32(vmulq_f32(v8, v20), vmulq_f32(v9, vaddq_f32(v21, v19))))), vmulq_f32(v12, vaddq_f32(v17, v39)));
      v17 = v16;
      v16 = v18;
      v18 = v19;
      v19 = v20;
      v20 = v21;
      v21 = v22;
      v22 = v23;
      v23 = v39;
      --v25;
    }
    while (v25);
    goto LABEL_4;
  }
LABEL_50:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 336) + 416) + 80) += HGGetTBC() - v4;
  return 0;
}

const char *HGG9B<HgcBlur_cs9s_es_noborder>::GetProgram(uint64_t a1, HGRenderer *a2)
{
  float v4;
  float v5;
  BOOL v6;

  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 43) != 1)
    return HgcBlur_cs9s_es_noborder::GetProgram((HgcBlur_cs9s_es_noborder *)a1, a2);
  v4 = *(float *)(a1 + 436) - *(float *)(a1 + 428);
  if ((float)(*(float *)(a1 + 432) - *(float *)(a1 + 424)) <= 0.0)
  {
    if (v4 <= 0.0)
      return HgcBlur_cs9s_es_noborder::GetProgram((HgcBlur_cs9s_es_noborder *)a1, a2);
    goto LABEL_7;
  }
  v5 = *(float *)(a1 + 416);
  v6 = v5 == 1.0;
  if (v5 != 1.0 && v4 > 0.0)
LABEL_7:
    v6 = *(float *)(a1 + 420) == 1.0;
  if (*(_DWORD *)(a1 + 440) == 1 && v6)
    return "//Metal1.0     \n"
           "//LEN=0000000e18\n"
           "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]],\n"
           "                                  const constant float4* hg_Params [[ buffer(0) ]],\n"
           "                                  texture2d< half > hg_Texture0 [[ texture(0) ]],\n"
           "                                  sampler hg_Sampler0 [[ sampler(0) ]])\n"
           "{\n"
           "    // Cast params to consts to workaround backend compiler issue\n"
           "    const float4 gaussianWeight0    (hg_Params[0]);\n"
           "    const float4 gaussianWeight1    (hg_Params[1]);\n"
           "    const float4 gaussianWeight2    (hg_Params[2]);\n"
           "    const float4 gaussianWeight3    (hg_Params[3]);\n"
           "    const float4 gaussianWeight4    (hg_Params[4]);\n"
           "    const float2 uvSet1Weight       (hg_Params[5].xy);\n"
           "    const float2 uvOffset           (hg_Params[6].xy);\n"
           "    const float2 blurDirection      (hg_Params[7].xy);\n"
           "    \n"
           "    const ushort2 screenPosition = ushort2(frag._position.xy);\n"
           "    const ushort isInRightColumn = screenPosition.x & 1;\n"
           "    const ushort isInLowerRow    = screenPosition.y & 1;\n"
           "    \n"
           "    const float2 uvCenter =  frag._texCoord0.xy + frag._texCoord1.xy * uvSet1Weight;\n"
           "    \n"
           "    const float2 L4coord = uvCenter + uvOffset;\n"
           "    const float2 L2coord = L4coord  + blurDirection * 2.0;\n"
           "    const float2 CCoord  = L2coord  + blurDirection * 2.0;\n"
           "    const float2 R2Coord = CCoord   + blurDirection * 2.0;\n"
           "    const float2 R4Coord = R2Coord  + blurDirection * 2.0;\n"
           "    const half4 tapL4 = hg_Texture0.sample(hg_Sampler0, L4coord);\n"
           "    const half4 tapL2 = hg_Texture0.sample(hg_Sampler0, L2coord);\n"
           "    const half4 tapC  = hg_Texture0.sample(hg_Sampler0, CCoord);\n"
           "    const half4 tapR2 = hg_Texture0.sample(hg_Sampler0, R2Coord);\n"
           "    const half4 tapR4 = hg_Texture0.sample(hg_Sampler0, R4Coord);\n"
           "    \n"
           "    // My lane               Vertical Blur Lanes   Horizontal Blur Lanes\n"
           "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
           "    // | Lane 0 | Lane 1 |   | Lane 2 | Lane 3 |   | Lane 1 | Lane 0 |\n"
           "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
           "    // | Lane 2 | Lane 3 |   | Lane 1 | Lane 0 |   | Lane 3 | Lane 2 |\n"
           "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
           "    \n"
           "    const ushort isOddPixel = (uvOffset.x == 0) ? isInLowerRow : isInRightColumn;\n"
           "    const ushort otherLane  = ((uvOffset.x == 0) ?\n"
           "                               (isInRightColumn + (1 - isInLowerRow) * 2) :\n"
           "                               (1 - isInRightColumn + isInLowerRow * 2));\n"
           "    float4 accum(0);\n"
           "    \n"
           "    accum += float4(tapL4) * gaussianWeight4;\n"
           "    float4 otherValueL4 = float4(quad_shuffle(tapL4, otherLane));\n"
           "    accum += otherValueL4 * (isOddPixel ?               0 : gaussianWeight3);\n"
           "    \n"
           "    accum += float4(tapL2) * gaussianWeight2;\n"
           "    float4 otherValueL2 = float4(quad_shuffle(tapL2, otherLane));\n"
           "    accum += otherValueL2 * (isOddPixel ? gaussianWeight3 : gaussianWeight1);\n"
           "    \n"
           "    accum += float4(tapC)  * gaussianWeight0;\n"
           "    float4 otherValueC = float4(quad_shuffle(tapC, otherLane));\n"
           "    accum += otherValueC * gaussianWeight1;\n"
           "    \n"
           "    accum += float4(tapR2) * gaussianWeight2;\n"
           "    float4 otherValueR2 = float4(quad_shuffle(tapR2, otherLane));\n"
           "    accum += otherValueR2 * (isOddPixel ? gaussianWeight1 : gaussianWeight3);\n"
           "    \n"
           "    accum += float4(tapR4) * gaussianWeight4;\n"
           "    float4 otherValueR4 = float4(quad_shuffle(tapR4, otherLane));\n"
           "    accum += otherValueR4 * (isOddPixel ? gaussianWeight3 :               0);\n"
           "    \n"
           "    FragmentOut out;\n"
           "    out.color0 = accum;\n"
           "    return out;\n"
           "}\n"
           "//MD5=c152bbe4:3e592d82:afebeded:d45efc4f\n"
           "//SIG=00000000:00000000:00000000:00000001:000f:0008:0000:0000:0000:0000:0007:0000:0002:01:0:1:0\n";
  return HgcBlur_cs9s_es_noborder::GetProgram((HgcBlur_cs9s_es_noborder *)a1, a2);
}

uint64_t HGG9X<HgcBlur_cs9s_es_noborder>::Bind(HGNode *a1, HGHandler *a2)
{
  uint64_t v3;

  v3 = HGNode::Bind(a1, a2);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  return v3;
}

uint64_t HGG9X<HgcBlur_cs9s_es_noborder>::BindTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  BOOL v8;
  unsigned int v10;
  unsigned int v11;

  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 43) == 1)
  {
    HGHandler::TexCoord((HGHandler *)a2, a3, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v6 = *(float *)(a1 + 436) - *(float *)(a1 + 428);
    if ((float)(*(float *)(a1 + 432) - *(float *)(a1 + 424)) > 0.0)
    {
      v7 = *(float *)(a1 + 416);
      v8 = v7 == 1.0;
      if (v7 == 1.0 || v6 <= 0.0)
      {
LABEL_10:
        if (*(_DWORD *)(a1 + 440) == 1 && v8)
          return 0;
        goto LABEL_13;
      }
LABEL_9:
      v8 = *(float *)(a1 + 420) == 1.0;
      goto LABEL_10;
    }
    if (v6 > 0.0)
      goto LABEL_9;
LABEL_13:
    (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 8, 0.0, 0.0, 1.0, 1.0);
    return 0;
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    HGHandler::TexCoord((HGHandler *)a2, a3, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    goto LABEL_13;
  }
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 8, (float)*(int *)(a2 + 240), (float)*(int *)(a2 + 244), 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220)), 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224)));
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 21))
    return 0;
  v10 = *(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220);
  v11 = *(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 9, (float)(v10 + 1) * 0.5, (float)(v11 + 1) * 0.5, (float)v10, (float)v11);
  return 0;
}

uint64_t HGG9B<HgcBlur_cs9s_es_noborder>::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27)
    return 27;
  else
    return a2;
}

void HGG9B<HgcBlur_cs9s_es_noborder>::InitProgramDescriptor(uint64_t a1, HGProgramDescriptor *a2)
{
  float v3;
  float v4;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  const char *v21;
  std::string v22;
  void *__p[2];
  unsigned __int8 v24;
  void *v25[2];
  unsigned __int8 v26;
  void *v27[2];
  unsigned __int8 v28;
  std::string v29;
  std::string v30;
  std::string v31;
  __int128 v32;
  int64_t v33;

  v3 = *(float *)(a1 + 436) - *(float *)(a1 + 428);
  if ((float)(*(float *)(a1 + 432) - *(float *)(a1 + 424)) <= 0.0)
  {
    if (v3 <= 0.0)
      goto LABEL_15;
  }
  else
  {
    v4 = *(float *)(a1 + 416);
    if (v4 == 1.0 || v3 <= 0.0)
    {
      if (*(_DWORD *)(a1 + 440) == 1 && v4 == 1.0)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (*(_DWORD *)(a1 + 440) == 1 && *(float *)(a1 + 420) == 1.0)
  {
LABEL_16:
    HGMetalUtils::stringForMetalHeader((uint64_t)&v29);
    HGMetalUtils::stringForMetalVertexOutputStruct((HGMetalUtils *)2, 0, (uint64_t)v27);
    if ((v28 & 0x80u) == 0)
      v7 = v27;
    else
      v7 = (void **)v27[0];
    if ((v28 & 0x80u) == 0)
      v8 = v28;
    else
      v8 = (std::string::size_type)v27[1];
    v9 = std::string::append(&v29, (const std::string::value_type *)v7, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    HGMetalUtils::stringForMetalVertexShader((HGMetalUtils *)"vertexFunc", (const char *)2, 0, (uint64_t)v25);
    if ((v26 & 0x80u) == 0)
      v11 = v25;
    else
      v11 = (void **)v25[0];
    if ((v26 & 0x80u) == 0)
      v12 = v26;
    else
      v12 = (std::string::size_type)v25[1];
    v13 = std::string::append(&v30, (const std::string::value_type *)v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    HGMetalUtils::stringForMetalFragmentOutputStruct((HGMetalUtils *)1, 0, (uint64_t)__p);
    if ((v24 & 0x80u) == 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v16 = v24;
    else
      v16 = (std::string::size_type)__p[1];
    v17 = std::string::append(&v31, (const std::string::value_type *)v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v22, "//Metal1.0     \n//LEN=0000000e18\nfragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]],\n                                  const constant float4* hg_Params [[ buffer(0) ]],\n                                  texture2d< half > hg_Texture0 [[ texture(0) ]],\n                                  sampler hg_Sampler0 [[ sampler(0) ]])\n{\n    // Cast params to consts to workaround backend compiler issue\n    const float4 gaussianWeight0    (hg_Params[0]);\n"
            "    const float4 gaussianWeight1    (hg_Params[1]);\n"
            "    const float4 gaussianWeight2    (hg_Params[2]);\n"
            "    const float4 gaussianWeight3    (hg_Params[3]);\n"
            "    const float4 gaussianWeight4    (hg_Params[4]);\n"
            "    const float2 uvSet1Weight       (hg_Params[5].xy);\n"
            "    const float2 uvOffset           (hg_Params[6].xy);\n"
            "    const float2 blurDirection      (hg_Params[7].xy);\n"
            "    \n"
            "    const ushort2 screenPosition = ushort2(frag._position.xy);\n"
            "    const ushort isInRightColumn = screenPosition.x & 1;\n"
            "    const ushort isInLowerRow    = screenPosition.y & 1;\n"
            "    \n"
            "    const float2 uvCenter =  frag._texCoord0.xy + frag._texCoord1.xy * uvSet1Weight;\n"
            "    \n"
            "    const float2 L4coord = uvCenter + uvOffset;\n"
            "    const float2 L2coord = L4coord  + blurDirection * 2.0;\n"
            "    const float2 CCoord  = L2coord  + blurDirection * 2.0;\n"
            "    const float2 R2Coord = CCoord   + blurDirection * 2.0;\n"
            "    const float2 R4Coord = R2Coord  + blurDirection * 2.0;\n"
            "    const half4 tapL4 = hg_Texture0.sample(hg_Sampler0, L4coord);\n"
            "    const half4 tapL2 = hg_Texture0.sample(hg_Sampler0, L2coord);\n"
            "    const half4 tapC  = hg_Texture0.sample(hg_Sampler0, CCoord);\n"
            "    const half4 tapR2 = hg_Texture0.sample(hg_Sampler0, R2Coord);\n"
            "    const half4 tapR4 = hg_Texture0.sample(hg_Sampler0, R4Coord);\n"
            "    \n"
            "    // My lane               Vertical Blur Lanes   Horizontal Blur Lanes\n"
            "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
            "    // | Lane 0 | Lane 1 |   | Lane 2 | Lane 3 |   | Lane 1 | Lane 0 |\n"
            "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
            "    // | Lane 2 | Lane 3 |   | Lane 1 | Lane 0 |   | Lane 3 | Lane 2 |\n"
            "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
            "    \n"
            "    const ushort isOddPixel = (uvOffset.x == 0) ? isInLowerRow : isInRightColumn;\n"
            "    const ushort otherLane  = ((uvOffset.x == 0) ?\n"
            "                               (isInRightColumn + (1 - isInLowerRow) * 2) :\n"
            "                               (1 - isInRightColumn + isInLowerRow * 2));\n"
            "    float4 accum(0);\n"
            "    \n"
            "    accum += float4(tapL4) * gaussianWeight4;\n"
            "    float4 otherValueL4 = float4(quad_shuffle(tapL4, otherLane));\n"
            "    accum += otherValueL4 * (isOddPixel ?               0 : gaussianWeight3);\n"
            "    \n"
            "    accum += float4(tapL2) * gaussianWeight2;\n"
            "    float4 otherValueL2 = float4(quad_shuffle(tapL2, otherLane));\n"
            "    accum += otherValueL2 * (isOddPixel ? gaussianWeight3 : gaussianWeight1);\n"
            "    \n"
            "    accum += float4(tapC)  * gaussianWeight0;\n"
            "    float4 otherValueC = float4(quad_shuffle(tapC, otherLane));\n"
            "    accum += otherValueC * gaussianWeight1;\n"
            "    \n"
            "    accum += float4(tapR2) * gaussianWeight2;\n"
            "    float4 otherValueR2 = float4(quad_shuffle(tapR2, otherLane));\n"
            "    accum += otherValueR2 * (isOddPixel ? gaussianWeight1 : gaussianWeight3);\n"
            "    \n"
            "    accum += float4(tapR4) * gaussianWeight4;\n"
            "    float4 otherValueR4 = float4(quad_shuffle(tapR4, otherLane));\n"
            "    accum += otherValueR4 * (isOddPixel ? gaussianWeight3 :               0);\n"
            "    \n"
            "    FragmentOut out;\n"
            "    out.color0 = accum;\n"
            "    return out;\n"
            "}\n"
            "//MD5=c152bbe4:3e592d82:afebeded:d45efc4f\n"
            "//SIG=00000000:00000000:00000000:00000001:000f:0008:0000:0000:0000:0000:0007:0000:0002:01:0:1:0\n");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v33 = v19->__r_.__value_.__r.__words[2];
    v32 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v22.__r_.__value_.__l.__data_);
      if (((char)v24 & 0x80000000) == 0)
      {
LABEL_36:
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_37;
        goto LABEL_47;
      }
    }
    else if (((char)v24 & 0x80000000) == 0)
    {
      goto LABEL_36;
    }
    operator delete(__p[0]);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_37:
      if (((char)v26 & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_48;
    }
LABEL_47:
    operator delete(v31.__r_.__value_.__l.__data_);
    if (((char)v26 & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v25[0]);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      if (((char)v28 & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_50;
    }
LABEL_49:
    operator delete(v30.__r_.__value_.__l.__data_);
    if (((char)v28 & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
LABEL_51:
      operator delete(v29.__r_.__value_.__l.__data_);
LABEL_41:
      if (v33 >= 0)
        v21 = (const char *)&v32;
      else
        v21 = (const char *)v32;
      HGProgramDescriptor::SetShaderProgram(a2, v21);
    }
LABEL_50:
    operator delete(v27[0]);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_51;
  }
LABEL_15:
  HgcBlur_cs9s_es_noborder::InitProgramDescriptor((HgcBlur_cs9s_es_noborder *)a1, a2);
}

void sub_1B2A92C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a20 < 0)
    operator delete(__p);
  std::vector<HGBinding>::~vector[abi:ne180100]((void **)(v46 - 96));
  if (*(char *)(v46 - 41) < 0)
    operator delete(*(void **)(v46 - 64));
  _Unwind_Resume(a1);
}

uint64_t HGG9B<HgcBlur_cs9s_es_noborder>::GetDOD(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return HGRectIntegral(HIDWORD(a4), (float)((float)(a1[106] + (float)(int)a4) / a1[104]) + 0.5, (float)((float)(a1[107] + (float)SHIDWORD(a4)) / a1[105]) + 0.5, (float)((float)((float)((float)(int)a5 + -1.0) + a1[108]) / a1[104]) + 0.5, (float)((float)((float)((float)SHIDWORD(a5) + -1.0) + a1[109]) / a1[105]) + 0.5);
}

uint64_t HGG9B<HgcBlur_cs9s_es_noborder>::GetROI(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return HGRectIntegral(HIDWORD(a4), a1[106] + (float)((float)(a1[104] * (float)(int)a4) + 0.5), a1[107] + (float)((float)(a1[105] * (float)SHIDWORD(a4)) + 0.5), (float)((float)((float)((float)(int)a5 + -1.0) * a1[104]) + 0.5) + a1[108], (float)((float)((float)((float)SHIDWORD(a5) + -1.0) * a1[105]) + 0.5) + a1[109]);
}

uint64_t HGG9X<HgcBlur_cs9s_es_noborder>::GetFilterMode()
{
  return 0;
}

uint64_t HGG9X<HgcBlur_cs9s>::HGG9X(uint64_t a1, int a2)
{
  uint64_t v4;
  double v10;
  int v11;
  int v12;
  int v13;

  HgcBlur_cs9s::HgcBlur_cs9s((HgcBlur_cs9s *)a1);
  *(_DWORD *)(v4 + 440) = a2;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v4 + 416) = _D0;
  *(_QWORD *)v4 = off_1E6527378;
  *(_DWORD *)(v4 + 16) |= 1u;
  LODWORD(v10) = 0;
  *(float *)(a1 + 424) = HGRectfMake4f(-4.0, v10, 4.0);
  *(_DWORD *)(a1 + 428) = v11;
  *(_DWORD *)(a1 + 432) = v12;
  *(_DWORD *)(a1 + 436) = v13;
  HGG9B<HgcBlur_cs9s>::SetRadius(a1, 5.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, -4.125, 0.0, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, 1.0, 0.0, 0.0, 0.0);
  return a1;
}

void sub_1B2A92FAC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s::~HgcBlur_cs9s(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A92FC0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s::~HgcBlur_cs9s(v1);
  _Unwind_Resume(a1);
}

void HGG9X<HgcBlur_cs9s>::~HGG9X(HGNode *a1)
{
  void *v1;

  HgcBlur_cs9s::~HgcBlur_cs9s(a1);
  HGObject::operator delete(v1);
}

const char *HGG9X<HgcBlur_cs9s>::label_A()
{
  return "HGG9X";
}

uint64_t HGG9X<HgcBlur_cs9s>::RenderTile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float32x4_t *v5;
  int v6;
  int v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  int v40;
  int v41;
  int v43;
  float32x4_t v44;
  float32x4_t v45;
  int v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t *v57;
  int v58;
  float32x4_t v59;
  float32x4_t v61;
  float32x4_t v62;
  int v63;
  int v64;
  float32x4_t v65;
  int v66;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  unsigned int v74;
  float32x4_t v75;
  unsigned int v76;
  float32x4_t v77;
  float32x4_t *v78;
  uint64_t v79;
  float32x4_t *v80;
  float32x4_t v81;
  int v82;
  int v83;
  int v84;
  float32x4_t *v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  uint64_t v89;
  unsigned int v90;
  float32x4_t v91;
  float32x4_t v92;
  unsigned int v93;
  float32x4_t *v94;
  uint64_t v95;
  float32x4_t *v96;
  float32x4_t v97;
  float32x4_t v98;

  v4 = HGGetTBC();
  v5 = *(float32x4_t **)(a1 + 48);
  if (v5[4].f32[0] == 0.0)
  {
    if (v5[3].f32[0] != 0.0)
    {
      v40 = *(_DWORD *)(a2 + 8);
      v41 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
      if (v41 >= 1 && v40 != *(_DWORD *)a2)
      {
        v43 = 0;
        v44 = *v5;
        v45 = v5[1];
        v46 = *(_DWORD *)a2 - v40;
        v47 = v5[2];
        v48 = v5[3];
        do
        {
          v49 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v43);
          v50 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v43);
          v52 = v50[-3];
          v51 = v50[-2];
          v53 = v50[-1];
          v54 = *v50;
          v55 = v50[1];
          v56 = v50[2];
          v57 = v50 + 3;
          v58 = v46;
          do
          {
            v59 = *v57++;
            *v49++ = vaddq_f32(vaddq_f32(vmulq_f32(v47, vaddq_f32(v56, v51)), vaddq_f32(vmulq_f32(v44, v54), vmulq_f32(v45, vaddq_f32(v55, v53)))), vmulq_f32(v48, vaddq_f32(v52, v59)));
            v52 = v51;
            v51 = v53;
            v53 = v54;
            v54 = v55;
            v55 = v56;
            v56 = v59;
          }
          while (!__CFADD__(v58++, 1));
          ++v43;
        }
        while (v43 != v41);
      }
      goto LABEL_50;
    }
    v61 = *v5;
    v62 = v5[1];
    if (v5[2].f32[0] != 0.0)
    {
      v63 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
      if (v63 < 1)
        goto LABEL_50;
      v64 = 0;
      v65 = v5[2];
      v66 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
      while (1)
      {
        v67 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v64);
        v68 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v64);
        v70 = v68[-2];
        v69 = v68[-1];
        v71 = *v68;
        v72 = v68[1];
        if (v66 >= 2)
          break;
        v79 = (uint64_t)&v68[4];
        v74 = v66;
        if (v66)
          goto LABEL_35;
LABEL_28:
        if (++v64 == v63)
          goto LABEL_50;
      }
      v73 = 0;
      v74 = v66;
      do
      {
        v75 = v72;
        v76 = v74;
        v77 = v71;
        v78 = &v67[v73];
        v71 = v68[v73 + 2];
        v72 = v68[v73 + 3];
        v74 -= 2;
        *v78 = vaddq_f32(vaddq_f32(vmulq_f32(v61, v77), vmulq_f32(v62, vaddq_f32(v75, v69))), vmulq_f32(v65, vaddq_f32(v70, v71)));
        v78[1] = vaddq_f32(vmulq_f32(v65, vaddq_f32(v69, v72)), vaddq_f32(vmulq_f32(v61, v75), vmulq_f32(v62, vaddq_f32(v77, v71))));
        v73 += 2;
        v70 = v77;
        v69 = v75;
      }
      while (v76 > 3);
      v67 = (float32x4_t *)((char *)v67 + v73 * 16);
      v79 = (uint64_t)&v68[v73 + 4];
      v69 = v75;
      v70 = v77;
      if (!v74)
        goto LABEL_28;
LABEL_35:
      v80 = (float32x4_t *)(v79 - 32);
      do
      {
        v81 = *v80++;
        *v67++ = vaddq_f32(vaddq_f32(vmulq_f32(v61, v71), vmulq_f32(v62, vaddq_f32(v72, v69))), vmulq_f32(v65, vaddq_f32(v70, v81)));
        v70 = v69;
        v69 = v71;
        v71 = v72;
        v72 = v81;
        --v74;
      }
      while (v74);
      goto LABEL_28;
    }
    v82 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
    if (v82 < 1)
      goto LABEL_50;
    v83 = 0;
    v84 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    while (1)
    {
      v85 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v83);
      v86 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v83);
      v88 = v86[-1];
      v87 = *v86;
      if (v84 >= 2)
        break;
      v95 = (uint64_t)&v86[3];
      v90 = v84;
      if (v84)
        goto LABEL_47;
LABEL_40:
      if (++v83 == v82)
        goto LABEL_50;
    }
    v89 = 0;
    v90 = v84;
    do
    {
      v91 = v88;
      v92 = v87;
      v93 = v90;
      v94 = &v85[v89];
      v88 = v86[v89 + 1];
      v87 = v86[v89 + 2];
      *v94 = vaddq_f32(vmulq_f32(v61, v92), vmulq_f32(v62, vaddq_f32(v91, v88)));
      v94[1] = vaddq_f32(vmulq_f32(v61, v88), vmulq_f32(v62, vaddq_f32(v92, v87)));
      v90 = v93 - 2;
      v89 += 2;
    }
    while (v93 > 3);
    v95 = (uint64_t)&v86[v89 + 3];
    v85 = (float32x4_t *)((char *)v85 + v89 * 16);
    if (v93 == 2)
      goto LABEL_40;
LABEL_47:
    v96 = (float32x4_t *)(v95 - 32);
    do
    {
      v97 = v87;
      v98 = *v96++;
      v87 = v98;
      *v85++ = vaddq_f32(vmulq_f32(v61, v97), vmulq_f32(v62, vaddq_f32(v88, v98)));
      v88 = v97;
      --v90;
    }
    while (v90);
    goto LABEL_40;
  }
  v6 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = *v5;
    v9 = v5[1];
    v10 = v5[2];
    v11 = v5[3];
    v12 = v5[4];
    v13 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    while (1)
    {
      v14 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v7);
      v15 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v7);
      v17 = v15[-4];
      v16 = v15[-3];
      v18 = v15[-2];
      v19 = v15[-1];
      v20 = *v15;
      v21 = v15[1];
      v22 = v15[2];
      v23 = v15[3];
      if (v13 >= 2)
        break;
      v37 = (uint64_t)&v15[6];
      v25 = v13;
      if (v13)
        goto LABEL_11;
LABEL_4:
      if (++v7 == v6)
        goto LABEL_50;
    }
    v24 = 0;
    v25 = v13;
    do
    {
      v26 = v25;
      v27 = v23;
      v28 = v22;
      v29 = v21;
      v30 = v20;
      v31 = v19;
      v32 = v18;
      v33 = &v14[v24];
      v22 = v15[v24 + 4];
      v23 = v15[v24 + 5];
      v34 = vaddq_f32(vaddq_f32(vmulq_f32(v10, vaddq_f32(v27, v19)), vaddq_f32(vmulq_f32(v8, v21), vmulq_f32(v9, vaddq_f32(v28, v20)))), vmulq_f32(v11, vaddq_f32(v18, v22)));
      v35 = vaddq_f32(vaddq_f32(vmulq_f32(v11, vaddq_f32(v27, v16)), vaddq_f32(vmulq_f32(v10, vaddq_f32(v28, v18)), vaddq_f32(vmulq_f32(v8, v20), vmulq_f32(v9, vaddq_f32(v21, v31))))), vmulq_f32(v12, vaddq_f32(v17, v22)));
      v25 -= 2;
      v36 = vaddq_f32(vmulq_f32(v12, vaddq_f32(v16, v23)), v34);
      v24 += 2;
      v17 = v18;
      v16 = v31;
      v18 = v30;
      *v33 = v35;
      v33[1] = v36;
      v19 = v21;
      v20 = v28;
      v21 = v27;
    }
    while (v26 > 3);
    v14 = (float32x4_t *)((char *)v14 + v24 * 16);
    v37 = (uint64_t)&v15[v24 + 6];
    v21 = v27;
    v20 = v28;
    v19 = v29;
    v18 = v30;
    v16 = v31;
    v17 = v32;
    if (!v25)
      goto LABEL_4;
LABEL_11:
    v38 = (float32x4_t *)(v37 - 32);
    do
    {
      v39 = *v38++;
      *v14++ = vaddq_f32(vaddq_f32(vmulq_f32(v11, vaddq_f32(v23, v16)), vaddq_f32(vmulq_f32(v10, vaddq_f32(v22, v18)), vaddq_f32(vmulq_f32(v8, v20), vmulq_f32(v9, vaddq_f32(v21, v19))))), vmulq_f32(v12, vaddq_f32(v17, v39)));
      v17 = v16;
      v16 = v18;
      v18 = v19;
      v19 = v20;
      v20 = v21;
      v21 = v22;
      v22 = v23;
      v23 = v39;
      --v25;
    }
    while (v25);
    goto LABEL_4;
  }
LABEL_50:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 336) + 416) + 80) += HGGetTBC() - v4;
  return 0;
}

const char *HGG9B<HgcBlur_cs9s>::GetProgram(uint64_t a1, HGRenderer *a2)
{
  float v4;
  float v5;
  BOOL v6;

  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 43) != 1)
    return HgcBlur_cs9s::GetProgram((HgcBlur_cs9s *)a1, a2);
  v4 = *(float *)(a1 + 436) - *(float *)(a1 + 428);
  if ((float)(*(float *)(a1 + 432) - *(float *)(a1 + 424)) <= 0.0)
  {
    if (v4 <= 0.0)
      return HgcBlur_cs9s::GetProgram((HgcBlur_cs9s *)a1, a2);
    goto LABEL_7;
  }
  v5 = *(float *)(a1 + 416);
  v6 = v5 == 1.0;
  if (v5 != 1.0 && v4 > 0.0)
LABEL_7:
    v6 = *(float *)(a1 + 420) == 1.0;
  if (*(_DWORD *)(a1 + 440) == 1 && v6)
    return "//Metal1.0     \n"
           "//LEN=0000000e18\n"
           "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]],\n"
           "                                  const constant float4* hg_Params [[ buffer(0) ]],\n"
           "                                  texture2d< half > hg_Texture0 [[ texture(0) ]],\n"
           "                                  sampler hg_Sampler0 [[ sampler(0) ]])\n"
           "{\n"
           "    // Cast params to consts to workaround backend compiler issue\n"
           "    const float4 gaussianWeight0    (hg_Params[0]);\n"
           "    const float4 gaussianWeight1    (hg_Params[1]);\n"
           "    const float4 gaussianWeight2    (hg_Params[2]);\n"
           "    const float4 gaussianWeight3    (hg_Params[3]);\n"
           "    const float4 gaussianWeight4    (hg_Params[4]);\n"
           "    const float2 uvSet1Weight       (hg_Params[5].xy);\n"
           "    const float2 uvOffset           (hg_Params[6].xy);\n"
           "    const float2 blurDirection      (hg_Params[7].xy);\n"
           "    \n"
           "    const ushort2 screenPosition = ushort2(frag._position.xy);\n"
           "    const ushort isInRightColumn = screenPosition.x & 1;\n"
           "    const ushort isInLowerRow    = screenPosition.y & 1;\n"
           "    \n"
           "    const float2 uvCenter =  frag._texCoord0.xy + frag._texCoord1.xy * uvSet1Weight;\n"
           "    \n"
           "    const float2 L4coord = uvCenter + uvOffset;\n"
           "    const float2 L2coord = L4coord  + blurDirection * 2.0;\n"
           "    const float2 CCoord  = L2coord  + blurDirection * 2.0;\n"
           "    const float2 R2Coord = CCoord   + blurDirection * 2.0;\n"
           "    const float2 R4Coord = R2Coord  + blurDirection * 2.0;\n"
           "    const half4 tapL4 = hg_Texture0.sample(hg_Sampler0, L4coord);\n"
           "    const half4 tapL2 = hg_Texture0.sample(hg_Sampler0, L2coord);\n"
           "    const half4 tapC  = hg_Texture0.sample(hg_Sampler0, CCoord);\n"
           "    const half4 tapR2 = hg_Texture0.sample(hg_Sampler0, R2Coord);\n"
           "    const half4 tapR4 = hg_Texture0.sample(hg_Sampler0, R4Coord);\n"
           "    \n"
           "    // My lane               Vertical Blur Lanes   Horizontal Blur Lanes\n"
           "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
           "    // | Lane 0 | Lane 1 |   | Lane 2 | Lane 3 |   | Lane 1 | Lane 0 |\n"
           "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
           "    // | Lane 2 | Lane 3 |   | Lane 1 | Lane 0 |   | Lane 3 | Lane 2 |\n"
           "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
           "    \n"
           "    const ushort isOddPixel = (uvOffset.x == 0) ? isInLowerRow : isInRightColumn;\n"
           "    const ushort otherLane  = ((uvOffset.x == 0) ?\n"
           "                               (isInRightColumn + (1 - isInLowerRow) * 2) :\n"
           "                               (1 - isInRightColumn + isInLowerRow * 2));\n"
           "    float4 accum(0);\n"
           "    \n"
           "    accum += float4(tapL4) * gaussianWeight4;\n"
           "    float4 otherValueL4 = float4(quad_shuffle(tapL4, otherLane));\n"
           "    accum += otherValueL4 * (isOddPixel ?               0 : gaussianWeight3);\n"
           "    \n"
           "    accum += float4(tapL2) * gaussianWeight2;\n"
           "    float4 otherValueL2 = float4(quad_shuffle(tapL2, otherLane));\n"
           "    accum += otherValueL2 * (isOddPixel ? gaussianWeight3 : gaussianWeight1);\n"
           "    \n"
           "    accum += float4(tapC)  * gaussianWeight0;\n"
           "    float4 otherValueC = float4(quad_shuffle(tapC, otherLane));\n"
           "    accum += otherValueC * gaussianWeight1;\n"
           "    \n"
           "    accum += float4(tapR2) * gaussianWeight2;\n"
           "    float4 otherValueR2 = float4(quad_shuffle(tapR2, otherLane));\n"
           "    accum += otherValueR2 * (isOddPixel ? gaussianWeight1 : gaussianWeight3);\n"
           "    \n"
           "    accum += float4(tapR4) * gaussianWeight4;\n"
           "    float4 otherValueR4 = float4(quad_shuffle(tapR4, otherLane));\n"
           "    accum += otherValueR4 * (isOddPixel ? gaussianWeight3 :               0);\n"
           "    \n"
           "    FragmentOut out;\n"
           "    out.color0 = accum;\n"
           "    return out;\n"
           "}\n"
           "//MD5=c152bbe4:3e592d82:afebeded:d45efc4f\n"
           "//SIG=00000000:00000000:00000000:00000001:000f:0008:0000:0000:0000:0000:0007:0000:0002:01:0:1:0\n";
  return HgcBlur_cs9s::GetProgram((HgcBlur_cs9s *)a1, a2);
}

uint64_t HGG9X<HgcBlur_cs9s>::Bind(HGNode *a1, HGHandler *a2)
{
  uint64_t v3;

  v3 = HGNode::Bind(a1, a2);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  return v3;
}

uint64_t HGG9X<HgcBlur_cs9s>::BindTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  BOOL v8;
  unsigned int v10;
  unsigned int v11;

  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 43) == 1)
  {
    HGHandler::TexCoord((HGHandler *)a2, a3, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v6 = *(float *)(a1 + 436) - *(float *)(a1 + 428);
    if ((float)(*(float *)(a1 + 432) - *(float *)(a1 + 424)) > 0.0)
    {
      v7 = *(float *)(a1 + 416);
      v8 = v7 == 1.0;
      if (v7 == 1.0 || v6 <= 0.0)
      {
LABEL_10:
        if (*(_DWORD *)(a1 + 440) == 1 && v8)
          return 0;
        goto LABEL_13;
      }
LABEL_9:
      v8 = *(float *)(a1 + 420) == 1.0;
      goto LABEL_10;
    }
    if (v6 > 0.0)
      goto LABEL_9;
LABEL_13:
    (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 8, 0.0, 0.0, 1.0, 1.0);
    return 0;
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    HGHandler::TexCoord((HGHandler *)a2, a3, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    goto LABEL_13;
  }
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 8, (float)*(int *)(a2 + 240), (float)*(int *)(a2 + 244), 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220)), 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224)));
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 21))
    return 0;
  v10 = *(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220);
  v11 = *(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 9, (float)(v10 + 1) * 0.5, (float)(v11 + 1) * 0.5, (float)v10, (float)v11);
  return 0;
}

uint64_t HGG9B<HgcBlur_cs9s>::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27)
    return 27;
  else
    return a2;
}

void HGG9B<HgcBlur_cs9s>::InitProgramDescriptor(uint64_t a1, HGProgramDescriptor *a2)
{
  float v3;
  float v4;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  const char *v21;
  std::string v22;
  void *__p[2];
  unsigned __int8 v24;
  void *v25[2];
  unsigned __int8 v26;
  void *v27[2];
  unsigned __int8 v28;
  std::string v29;
  std::string v30;
  std::string v31;
  __int128 v32;
  int64_t v33;

  v3 = *(float *)(a1 + 436) - *(float *)(a1 + 428);
  if ((float)(*(float *)(a1 + 432) - *(float *)(a1 + 424)) <= 0.0)
  {
    if (v3 <= 0.0)
      goto LABEL_15;
  }
  else
  {
    v4 = *(float *)(a1 + 416);
    if (v4 == 1.0 || v3 <= 0.0)
    {
      if (*(_DWORD *)(a1 + 440) == 1 && v4 == 1.0)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (*(_DWORD *)(a1 + 440) == 1 && *(float *)(a1 + 420) == 1.0)
  {
LABEL_16:
    HGMetalUtils::stringForMetalHeader((uint64_t)&v29);
    HGMetalUtils::stringForMetalVertexOutputStruct((HGMetalUtils *)2, 0, (uint64_t)v27);
    if ((v28 & 0x80u) == 0)
      v7 = v27;
    else
      v7 = (void **)v27[0];
    if ((v28 & 0x80u) == 0)
      v8 = v28;
    else
      v8 = (std::string::size_type)v27[1];
    v9 = std::string::append(&v29, (const std::string::value_type *)v7, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    HGMetalUtils::stringForMetalVertexShader((HGMetalUtils *)"vertexFunc", (const char *)2, 0, (uint64_t)v25);
    if ((v26 & 0x80u) == 0)
      v11 = v25;
    else
      v11 = (void **)v25[0];
    if ((v26 & 0x80u) == 0)
      v12 = v26;
    else
      v12 = (std::string::size_type)v25[1];
    v13 = std::string::append(&v30, (const std::string::value_type *)v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    HGMetalUtils::stringForMetalFragmentOutputStruct((HGMetalUtils *)1, 0, (uint64_t)__p);
    if ((v24 & 0x80u) == 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v16 = v24;
    else
      v16 = (std::string::size_type)__p[1];
    v17 = std::string::append(&v31, (const std::string::value_type *)v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v22, "//Metal1.0     \n//LEN=0000000e18\nfragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]],\n                                  const constant float4* hg_Params [[ buffer(0) ]],\n                                  texture2d< half > hg_Texture0 [[ texture(0) ]],\n                                  sampler hg_Sampler0 [[ sampler(0) ]])\n{\n    // Cast params to consts to workaround backend compiler issue\n    const float4 gaussianWeight0    (hg_Params[0]);\n"
            "    const float4 gaussianWeight1    (hg_Params[1]);\n"
            "    const float4 gaussianWeight2    (hg_Params[2]);\n"
            "    const float4 gaussianWeight3    (hg_Params[3]);\n"
            "    const float4 gaussianWeight4    (hg_Params[4]);\n"
            "    const float2 uvSet1Weight       (hg_Params[5].xy);\n"
            "    const float2 uvOffset           (hg_Params[6].xy);\n"
            "    const float2 blurDirection      (hg_Params[7].xy);\n"
            "    \n"
            "    const ushort2 screenPosition = ushort2(frag._position.xy);\n"
            "    const ushort isInRightColumn = screenPosition.x & 1;\n"
            "    const ushort isInLowerRow    = screenPosition.y & 1;\n"
            "    \n"
            "    const float2 uvCenter =  frag._texCoord0.xy + frag._texCoord1.xy * uvSet1Weight;\n"
            "    \n"
            "    const float2 L4coord = uvCenter + uvOffset;\n"
            "    const float2 L2coord = L4coord  + blurDirection * 2.0;\n"
            "    const float2 CCoord  = L2coord  + blurDirection * 2.0;\n"
            "    const float2 R2Coord = CCoord   + blurDirection * 2.0;\n"
            "    const float2 R4Coord = R2Coord  + blurDirection * 2.0;\n"
            "    const half4 tapL4 = hg_Texture0.sample(hg_Sampler0, L4coord);\n"
            "    const half4 tapL2 = hg_Texture0.sample(hg_Sampler0, L2coord);\n"
            "    const half4 tapC  = hg_Texture0.sample(hg_Sampler0, CCoord);\n"
            "    const half4 tapR2 = hg_Texture0.sample(hg_Sampler0, R2Coord);\n"
            "    const half4 tapR4 = hg_Texture0.sample(hg_Sampler0, R4Coord);\n"
            "    \n"
            "    // My lane               Vertical Blur Lanes   Horizontal Blur Lanes\n"
            "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
            "    // | Lane 0 | Lane 1 |   | Lane 2 | Lane 3 |   | Lane 1 | Lane 0 |\n"
            "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
            "    // | Lane 2 | Lane 3 |   | Lane 1 | Lane 0 |   | Lane 3 | Lane 2 |\n"
            "    // +--------+--------+   +--------+--------+   +--------+--------+\n"
            "    \n"
            "    const ushort isOddPixel = (uvOffset.x == 0) ? isInLowerRow : isInRightColumn;\n"
            "    const ushort otherLane  = ((uvOffset.x == 0) ?\n"
            "                               (isInRightColumn + (1 - isInLowerRow) * 2) :\n"
            "                               (1 - isInRightColumn + isInLowerRow * 2));\n"
            "    float4 accum(0);\n"
            "    \n"
            "    accum += float4(tapL4) * gaussianWeight4;\n"
            "    float4 otherValueL4 = float4(quad_shuffle(tapL4, otherLane));\n"
            "    accum += otherValueL4 * (isOddPixel ?               0 : gaussianWeight3);\n"
            "    \n"
            "    accum += float4(tapL2) * gaussianWeight2;\n"
            "    float4 otherValueL2 = float4(quad_shuffle(tapL2, otherLane));\n"
            "    accum += otherValueL2 * (isOddPixel ? gaussianWeight3 : gaussianWeight1);\n"
            "    \n"
            "    accum += float4(tapC)  * gaussianWeight0;\n"
            "    float4 otherValueC = float4(quad_shuffle(tapC, otherLane));\n"
            "    accum += otherValueC * gaussianWeight1;\n"
            "    \n"
            "    accum += float4(tapR2) * gaussianWeight2;\n"
            "    float4 otherValueR2 = float4(quad_shuffle(tapR2, otherLane));\n"
            "    accum += otherValueR2 * (isOddPixel ? gaussianWeight1 : gaussianWeight3);\n"
            "    \n"
            "    accum += float4(tapR4) * gaussianWeight4;\n"
            "    float4 otherValueR4 = float4(quad_shuffle(tapR4, otherLane));\n"
            "    accum += otherValueR4 * (isOddPixel ? gaussianWeight3 :               0);\n"
            "    \n"
            "    FragmentOut out;\n"
            "    out.color0 = accum;\n"
            "    return out;\n"
            "}\n"
            "//MD5=c152bbe4:3e592d82:afebeded:d45efc4f\n"
            "//SIG=00000000:00000000:00000000:00000001:000f:0008:0000:0000:0000:0000:0007:0000:0002:01:0:1:0\n");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v33 = v19->__r_.__value_.__r.__words[2];
    v32 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v22.__r_.__value_.__l.__data_);
      if (((char)v24 & 0x80000000) == 0)
      {
LABEL_36:
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_37;
        goto LABEL_47;
      }
    }
    else if (((char)v24 & 0x80000000) == 0)
    {
      goto LABEL_36;
    }
    operator delete(__p[0]);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_37:
      if (((char)v26 & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_48;
    }
LABEL_47:
    operator delete(v31.__r_.__value_.__l.__data_);
    if (((char)v26 & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v25[0]);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      if (((char)v28 & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_50;
    }
LABEL_49:
    operator delete(v30.__r_.__value_.__l.__data_);
    if (((char)v28 & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
LABEL_51:
      operator delete(v29.__r_.__value_.__l.__data_);
LABEL_41:
      if (v33 >= 0)
        v21 = (const char *)&v32;
      else
        v21 = (const char *)v32;
      HGProgramDescriptor::SetShaderProgram(a2, v21);
    }
LABEL_50:
    operator delete(v27[0]);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_51;
  }
LABEL_15:
  HgcBlur_cs9s::InitProgramDescriptor((HgcBlur_cs9s *)a1, a2);
}

void sub_1B2A94030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a20 < 0)
    operator delete(__p);
  std::vector<HGBinding>::~vector[abi:ne180100]((void **)(v46 - 96));
  if (*(char *)(v46 - 41) < 0)
    operator delete(*(void **)(v46 - 64));
  _Unwind_Resume(a1);
}

uint64_t HGG9B<HgcBlur_cs9s>::GetDOD(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return HGRectIntegral(HIDWORD(a4), (float)((float)(a1[106] + (float)(int)a4) / a1[104]) + 0.5, (float)((float)(a1[107] + (float)SHIDWORD(a4)) / a1[105]) + 0.5, (float)((float)((float)((float)(int)a5 + -1.0) + a1[108]) / a1[104]) + 0.5, (float)((float)((float)((float)SHIDWORD(a5) + -1.0) + a1[109]) / a1[105]) + 0.5);
}

uint64_t HGG9B<HgcBlur_cs9s>::GetROI(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return HGRectIntegral(HIDWORD(a4), a1[106] + (float)((float)(a1[104] * (float)(int)a4) + 0.5), a1[107] + (float)((float)(a1[105] * (float)SHIDWORD(a4)) + 0.5), (float)((float)((float)((float)(int)a5 + -1.0) * a1[104]) + 0.5) + a1[108], (float)((float)((float)((float)SHIDWORD(a5) + -1.0) * a1[105]) + 0.5) + a1[109]);
}

uint64_t HGG9X<HgcBlur_cs9s>::GetFilterMode()
{
  return 0;
}

void HGG9Y<HgcBlur_cs9s_rect>::~HGG9Y(HGNode *a1)
{
  void *v1;

  HgcBlur_cs9s_rect::~HgcBlur_cs9s_rect(a1);
  HGObject::operator delete(v1);
}

const char *HGG9Y<HgcBlur_cs9s_rect>::label_A()
{
  return "HGG9Y";
}

uint64_t HGG9Y<HgcBlur_cs9s_rect>::RenderTile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float32x4_t *v5;
  int8x16_t v6;
  uint64_t v7;
  int v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  int v20;
  float32x4_t *v21;
  uint64_t v22;
  int v23;
  float32x4_t *v24;
  float32x4_t *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t *v53;
  unsigned int v54;
  unsigned int v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;

  v4 = HGGetTBC();
  v5 = *(float32x4_t **)(a1 + 48);
  v6 = (int8x16_t)vceqzq_f32(v5[2]);
  *(int32x2_t *)v6.i8 = vpmax_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  if (vpmax_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v6.i8).u32[0])
  {
    v7 = 0xFFFFFFFFLL;
    v8 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
    if (v8 < 1)
      goto LABEL_34;
    goto LABEL_10;
  }
  v9 = (int8x16_t)vceqzq_f32(v5[3]);
  *(int32x2_t *)v9.i8 = vpmax_s32(*(int32x2_t *)v9.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
  if (vpmax_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v9.i8).u32[0])
  {
    v7 = 4294967294;
    v8 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
    if (v8 < 1)
      goto LABEL_34;
    goto LABEL_10;
  }
  v10 = (int8x16_t)vceqzq_f32(v5[4]);
  *(int32x2_t *)v10.i8 = vpmax_s32(*(int32x2_t *)v10.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
  v7 = 4294967292;
  if (vpmax_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v10.i8).u32[0])
    v7 = 4294967293;
  v8 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v8 >= 1)
  {
LABEL_10:
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v13 = -(int)v7;
    v14 = v7;
    do
    {
      v15 = v13;
      v16 = v14;
      v17 = v7;
      do
      {
        v18 = *(float32x4_t *)(*(_QWORD *)(a1 + 48) + ((-16 * v17) & 0xFFFFFFFF0));
        v19 = *(_QWORD *)(a2 + 16);
        v20 = *(_DWORD *)(a2 + 24);
        v21 = (float32x4_t *)(v19 + 16 * v20 * v11);
        v22 = *(_QWORD *)(a2 + 80);
        v23 = *(_DWORD *)(a2 + 88);
        v24 = (float32x4_t *)(v22 + 16 * v23 * (v11 + (int)v17));
        v25 = (float32x4_t *)(v22 + 16 * v23 * (v11 - (int)v17));
        v26 = v12;
        if (v17 == v7)
        {
          if (v12 >= 4)
          {
            v27 = 0;
            v28 = v19 + 16 * v11 * v20;
            v29 = v22 + 16 * v23 * v16;
            v30 = v22 + 16 * v23 * v15;
            v26 = v12;
            do
            {
              v31 = v26;
              v32 = (float32x4_t *)(v28 + v27);
              v33 = vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v29 + v27 + 16), *(float32x4_t *)(v30 + v27 + 16)));
              v34 = vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v29 + v27 + 32), *(float32x4_t *)(v30 + v27 + 32)));
              v35 = vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v29 + v27 + 48), *(float32x4_t *)(v30 + v27 + 48)));
              *v32 = vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v29 + v27), *(float32x4_t *)(v30 + v27)));
              v32[1] = v33;
              v32[2] = v34;
              v32[3] = v35;
              v26 = v31 - 4;
              v27 += 64;
            }
            while (v31 > 7);
            v21 = (float32x4_t *)(v28 + v27);
            v24 = (float32x4_t *)(v29 + v27);
            v25 = (float32x4_t *)(v30 + v27);
          }
          for (; v26; --v26)
          {
            v36 = *v24++;
            v37 = v36;
            v38 = *v25++;
            *v21++ = vmulq_f32(v18, vaddq_f32(v37, v38));
          }
        }
        else
        {
          if (v12 >= 4)
          {
            v39 = 0;
            v40 = v19 + 16 * v11 * v20;
            v41 = v22 + 16 * v23 * v16;
            v42 = v22 + 16 * v23 * v15;
            v26 = v12;
            do
            {
              v43 = v26;
              v44 = (float32x4_t *)(v40 + v39);
              v45 = vaddq_f32(vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v41 + v39 + 16), *(float32x4_t *)(v42 + v39 + 16))), *(float32x4_t *)(v40 + v39 + 16));
              v46 = vaddq_f32(vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v41 + v39 + 32), *(float32x4_t *)(v42 + v39 + 32))), *(float32x4_t *)(v40 + v39 + 32));
              v47 = vaddq_f32(vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v41 + v39 + 48), *(float32x4_t *)(v42 + v39 + 48))), *(float32x4_t *)(v40 + v39 + 48));
              *v44 = vaddq_f32(vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v41 + v39), *(float32x4_t *)(v42 + v39))), *(float32x4_t *)(v40 + v39));
              v44[1] = v45;
              v44[2] = v46;
              v44[3] = v47;
              v26 = v43 - 4;
              v39 += 64;
            }
            while (v43 > 7);
            v21 = (float32x4_t *)(v40 + v39);
            v24 = (float32x4_t *)(v41 + v39);
            v25 = (float32x4_t *)(v42 + v39);
          }
          for (; v26; --v26)
          {
            v48 = *v24++;
            v49 = v48;
            v50 = *v25++;
            *v21 = vaddq_f32(*v21, vmulq_f32(v18, vaddq_f32(v49, v50)));
            ++v21;
          }
        }
        ++v16;
        --v15;
        ++v17;
      }
      while ((_DWORD)v17);
      v51 = *(float32x4_t *)*(_QWORD *)(a1 + 48);
      v52 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v11);
      v53 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v11);
      v54 = v12;
      if (v12 >= 4)
      {
        do
        {
          v55 = v54;
          v56 = vaddq_f32(vmulq_f32(v51, v53[1]), v52[1]);
          v57 = vaddq_f32(vmulq_f32(v51, v53[2]), v52[2]);
          v58 = vaddq_f32(vmulq_f32(v51, v53[3]), v52[3]);
          *v52 = vaddq_f32(vmulq_f32(v51, *v53), *v52);
          v52[1] = v56;
          v52[2] = v57;
          v52[3] = v58;
          v53 += 4;
          v52 += 4;
          v54 -= 4;
        }
        while (v55 > 7);
      }
      for (; v54; --v54)
      {
        v59 = *v53++;
        *v52 = vaddq_f32(vmulq_f32(v51, v59), *v52);
        ++v52;
      }
      ++v11;
      ++v14;
      ++v13;
    }
    while (v11 != v8);
  }
LABEL_34:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 336) + 416) + 80) += HGGetTBC() - v4;
  return 0;
}

uint64_t HGG9Y<HgcBlur_cs9s_rect>::GetFilterMode()
{
  return 0;
}

void HGG9Y<HgcBlur_cs9s_es_noborder>::~HGG9Y(HGNode *a1)
{
  void *v1;

  HgcBlur_cs9s_es_noborder::~HgcBlur_cs9s_es_noborder(a1);
  HGObject::operator delete(v1);
}

const char *HGG9Y<HgcBlur_cs9s_es_noborder>::label_A()
{
  return "HGG9Y";
}

uint64_t HGG9Y<HgcBlur_cs9s_es_noborder>::RenderTile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float32x4_t *v5;
  int8x16_t v6;
  uint64_t v7;
  int v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  int v20;
  float32x4_t *v21;
  uint64_t v22;
  int v23;
  float32x4_t *v24;
  float32x4_t *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t *v53;
  unsigned int v54;
  unsigned int v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;

  v4 = HGGetTBC();
  v5 = *(float32x4_t **)(a1 + 48);
  v6 = (int8x16_t)vceqzq_f32(v5[2]);
  *(int32x2_t *)v6.i8 = vpmax_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  if (vpmax_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v6.i8).u32[0])
  {
    v7 = 0xFFFFFFFFLL;
    v8 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
    if (v8 < 1)
      goto LABEL_34;
    goto LABEL_10;
  }
  v9 = (int8x16_t)vceqzq_f32(v5[3]);
  *(int32x2_t *)v9.i8 = vpmax_s32(*(int32x2_t *)v9.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
  if (vpmax_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v9.i8).u32[0])
  {
    v7 = 4294967294;
    v8 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
    if (v8 < 1)
      goto LABEL_34;
    goto LABEL_10;
  }
  v10 = (int8x16_t)vceqzq_f32(v5[4]);
  *(int32x2_t *)v10.i8 = vpmax_s32(*(int32x2_t *)v10.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
  v7 = 4294967292;
  if (vpmax_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v10.i8).u32[0])
    v7 = 4294967293;
  v8 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v8 >= 1)
  {
LABEL_10:
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v13 = -(int)v7;
    v14 = v7;
    do
    {
      v15 = v13;
      v16 = v14;
      v17 = v7;
      do
      {
        v18 = *(float32x4_t *)(*(_QWORD *)(a1 + 48) + ((-16 * v17) & 0xFFFFFFFF0));
        v19 = *(_QWORD *)(a2 + 16);
        v20 = *(_DWORD *)(a2 + 24);
        v21 = (float32x4_t *)(v19 + 16 * v20 * v11);
        v22 = *(_QWORD *)(a2 + 80);
        v23 = *(_DWORD *)(a2 + 88);
        v24 = (float32x4_t *)(v22 + 16 * v23 * (v11 + (int)v17));
        v25 = (float32x4_t *)(v22 + 16 * v23 * (v11 - (int)v17));
        v26 = v12;
        if (v17 == v7)
        {
          if (v12 >= 4)
          {
            v27 = 0;
            v28 = v19 + 16 * v11 * v20;
            v29 = v22 + 16 * v23 * v16;
            v30 = v22 + 16 * v23 * v15;
            v26 = v12;
            do
            {
              v31 = v26;
              v32 = (float32x4_t *)(v28 + v27);
              v33 = vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v29 + v27 + 16), *(float32x4_t *)(v30 + v27 + 16)));
              v34 = vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v29 + v27 + 32), *(float32x4_t *)(v30 + v27 + 32)));
              v35 = vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v29 + v27 + 48), *(float32x4_t *)(v30 + v27 + 48)));
              *v32 = vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v29 + v27), *(float32x4_t *)(v30 + v27)));
              v32[1] = v33;
              v32[2] = v34;
              v32[3] = v35;
              v26 = v31 - 4;
              v27 += 64;
            }
            while (v31 > 7);
            v21 = (float32x4_t *)(v28 + v27);
            v24 = (float32x4_t *)(v29 + v27);
            v25 = (float32x4_t *)(v30 + v27);
          }
          for (; v26; --v26)
          {
            v36 = *v24++;
            v37 = v36;
            v38 = *v25++;
            *v21++ = vmulq_f32(v18, vaddq_f32(v37, v38));
          }
        }
        else
        {
          if (v12 >= 4)
          {
            v39 = 0;
            v40 = v19 + 16 * v11 * v20;
            v41 = v22 + 16 * v23 * v16;
            v42 = v22 + 16 * v23 * v15;
            v26 = v12;
            do
            {
              v43 = v26;
              v44 = (float32x4_t *)(v40 + v39);
              v45 = vaddq_f32(vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v41 + v39 + 16), *(float32x4_t *)(v42 + v39 + 16))), *(float32x4_t *)(v40 + v39 + 16));
              v46 = vaddq_f32(vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v41 + v39 + 32), *(float32x4_t *)(v42 + v39 + 32))), *(float32x4_t *)(v40 + v39 + 32));
              v47 = vaddq_f32(vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v41 + v39 + 48), *(float32x4_t *)(v42 + v39 + 48))), *(float32x4_t *)(v40 + v39 + 48));
              *v44 = vaddq_f32(vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v41 + v39), *(float32x4_t *)(v42 + v39))), *(float32x4_t *)(v40 + v39));
              v44[1] = v45;
              v44[2] = v46;
              v44[3] = v47;
              v26 = v43 - 4;
              v39 += 64;
            }
            while (v43 > 7);
            v21 = (float32x4_t *)(v40 + v39);
            v24 = (float32x4_t *)(v41 + v39);
            v25 = (float32x4_t *)(v42 + v39);
          }
          for (; v26; --v26)
          {
            v48 = *v24++;
            v49 = v48;
            v50 = *v25++;
            *v21 = vaddq_f32(*v21, vmulq_f32(v18, vaddq_f32(v49, v50)));
            ++v21;
          }
        }
        ++v16;
        --v15;
        ++v17;
      }
      while ((_DWORD)v17);
      v51 = *(float32x4_t *)*(_QWORD *)(a1 + 48);
      v52 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v11);
      v53 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v11);
      v54 = v12;
      if (v12 >= 4)
      {
        do
        {
          v55 = v54;
          v56 = vaddq_f32(vmulq_f32(v51, v53[1]), v52[1]);
          v57 = vaddq_f32(vmulq_f32(v51, v53[2]), v52[2]);
          v58 = vaddq_f32(vmulq_f32(v51, v53[3]), v52[3]);
          *v52 = vaddq_f32(vmulq_f32(v51, *v53), *v52);
          v52[1] = v56;
          v52[2] = v57;
          v52[3] = v58;
          v53 += 4;
          v52 += 4;
          v54 -= 4;
        }
        while (v55 > 7);
      }
      for (; v54; --v54)
      {
        v59 = *v53++;
        *v52 = vaddq_f32(vmulq_f32(v51, v59), *v52);
        ++v52;
      }
      ++v11;
      ++v14;
      ++v13;
    }
    while (v11 != v8);
  }
LABEL_34:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 336) + 416) + 80) += HGGetTBC() - v4;
  return 0;
}

uint64_t HGG9Y<HgcBlur_cs9s_es_noborder>::GetFilterMode()
{
  return 0;
}

void HGG9Y<HgcBlur_cs9s>::~HGG9Y(HGNode *a1)
{
  void *v1;

  HgcBlur_cs9s::~HgcBlur_cs9s(a1);
  HGObject::operator delete(v1);
}

const char *HGG9Y<HgcBlur_cs9s>::label_A()
{
  return "HGG9Y";
}

uint64_t HGG9Y<HgcBlur_cs9s>::RenderTile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float32x4_t *v5;
  int8x16_t v6;
  uint64_t v7;
  int v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  int v20;
  float32x4_t *v21;
  uint64_t v22;
  int v23;
  float32x4_t *v24;
  float32x4_t *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t *v53;
  unsigned int v54;
  unsigned int v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;

  v4 = HGGetTBC();
  v5 = *(float32x4_t **)(a1 + 48);
  v6 = (int8x16_t)vceqzq_f32(v5[2]);
  *(int32x2_t *)v6.i8 = vpmax_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  if (vpmax_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v6.i8).u32[0])
  {
    v7 = 0xFFFFFFFFLL;
    v8 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
    if (v8 < 1)
      goto LABEL_34;
    goto LABEL_10;
  }
  v9 = (int8x16_t)vceqzq_f32(v5[3]);
  *(int32x2_t *)v9.i8 = vpmax_s32(*(int32x2_t *)v9.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
  if (vpmax_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v9.i8).u32[0])
  {
    v7 = 4294967294;
    v8 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
    if (v8 < 1)
      goto LABEL_34;
    goto LABEL_10;
  }
  v10 = (int8x16_t)vceqzq_f32(v5[4]);
  *(int32x2_t *)v10.i8 = vpmax_s32(*(int32x2_t *)v10.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
  v7 = 4294967292;
  if (vpmax_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v10.i8).u32[0])
    v7 = 4294967293;
  v8 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v8 >= 1)
  {
LABEL_10:
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v13 = -(int)v7;
    v14 = v7;
    do
    {
      v15 = v13;
      v16 = v14;
      v17 = v7;
      do
      {
        v18 = *(float32x4_t *)(*(_QWORD *)(a1 + 48) + ((-16 * v17) & 0xFFFFFFFF0));
        v19 = *(_QWORD *)(a2 + 16);
        v20 = *(_DWORD *)(a2 + 24);
        v21 = (float32x4_t *)(v19 + 16 * v20 * v11);
        v22 = *(_QWORD *)(a2 + 80);
        v23 = *(_DWORD *)(a2 + 88);
        v24 = (float32x4_t *)(v22 + 16 * v23 * (v11 + (int)v17));
        v25 = (float32x4_t *)(v22 + 16 * v23 * (v11 - (int)v17));
        v26 = v12;
        if (v17 == v7)
        {
          if (v12 >= 4)
          {
            v27 = 0;
            v28 = v19 + 16 * v11 * v20;
            v29 = v22 + 16 * v23 * v16;
            v30 = v22 + 16 * v23 * v15;
            v26 = v12;
            do
            {
              v31 = v26;
              v32 = (float32x4_t *)(v28 + v27);
              v33 = vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v29 + v27 + 16), *(float32x4_t *)(v30 + v27 + 16)));
              v34 = vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v29 + v27 + 32), *(float32x4_t *)(v30 + v27 + 32)));
              v35 = vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v29 + v27 + 48), *(float32x4_t *)(v30 + v27 + 48)));
              *v32 = vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v29 + v27), *(float32x4_t *)(v30 + v27)));
              v32[1] = v33;
              v32[2] = v34;
              v32[3] = v35;
              v26 = v31 - 4;
              v27 += 64;
            }
            while (v31 > 7);
            v21 = (float32x4_t *)(v28 + v27);
            v24 = (float32x4_t *)(v29 + v27);
            v25 = (float32x4_t *)(v30 + v27);
          }
          for (; v26; --v26)
          {
            v36 = *v24++;
            v37 = v36;
            v38 = *v25++;
            *v21++ = vmulq_f32(v18, vaddq_f32(v37, v38));
          }
        }
        else
        {
          if (v12 >= 4)
          {
            v39 = 0;
            v40 = v19 + 16 * v11 * v20;
            v41 = v22 + 16 * v23 * v16;
            v42 = v22 + 16 * v23 * v15;
            v26 = v12;
            do
            {
              v43 = v26;
              v44 = (float32x4_t *)(v40 + v39);
              v45 = vaddq_f32(vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v41 + v39 + 16), *(float32x4_t *)(v42 + v39 + 16))), *(float32x4_t *)(v40 + v39 + 16));
              v46 = vaddq_f32(vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v41 + v39 + 32), *(float32x4_t *)(v42 + v39 + 32))), *(float32x4_t *)(v40 + v39 + 32));
              v47 = vaddq_f32(vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v41 + v39 + 48), *(float32x4_t *)(v42 + v39 + 48))), *(float32x4_t *)(v40 + v39 + 48));
              *v44 = vaddq_f32(vmulq_f32(v18, vaddq_f32(*(float32x4_t *)(v41 + v39), *(float32x4_t *)(v42 + v39))), *(float32x4_t *)(v40 + v39));
              v44[1] = v45;
              v44[2] = v46;
              v44[3] = v47;
              v26 = v43 - 4;
              v39 += 64;
            }
            while (v43 > 7);
            v21 = (float32x4_t *)(v40 + v39);
            v24 = (float32x4_t *)(v41 + v39);
            v25 = (float32x4_t *)(v42 + v39);
          }
          for (; v26; --v26)
          {
            v48 = *v24++;
            v49 = v48;
            v50 = *v25++;
            *v21 = vaddq_f32(*v21, vmulq_f32(v18, vaddq_f32(v49, v50)));
            ++v21;
          }
        }
        ++v16;
        --v15;
        ++v17;
      }
      while ((_DWORD)v17);
      v51 = *(float32x4_t *)*(_QWORD *)(a1 + 48);
      v52 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v11);
      v53 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v11);
      v54 = v12;
      if (v12 >= 4)
      {
        do
        {
          v55 = v54;
          v56 = vaddq_f32(vmulq_f32(v51, v53[1]), v52[1]);
          v57 = vaddq_f32(vmulq_f32(v51, v53[2]), v52[2]);
          v58 = vaddq_f32(vmulq_f32(v51, v53[3]), v52[3]);
          *v52 = vaddq_f32(vmulq_f32(v51, *v53), *v52);
          v52[1] = v56;
          v52[2] = v57;
          v52[3] = v58;
          v53 += 4;
          v52 += 4;
          v54 -= 4;
        }
        while (v55 > 7);
      }
      for (; v54; --v54)
      {
        v59 = *v53++;
        *v52 = vaddq_f32(vmulq_f32(v51, v59), *v52);
        ++v52;
      }
      ++v11;
      ++v14;
      ++v13;
    }
    while (v11 != v8);
  }
LABEL_34:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 336) + 416) + 80) += HGGetTBC() - v4;
  return 0;
}

uint64_t HGG9Y<HgcBlur_cs9s>::GetFilterMode()
{
  return 0;
}

void HGG9D2X<HgcBlur_cs9s_rect>::~HGG9D2X(HGNode *a1)
{
  void *v1;

  HgcBlur_cs9s_rect::~HgcBlur_cs9s_rect(a1);
  HGObject::operator delete(v1);
}

const char *HGG9D2X<HgcBlur_cs9s_rect>::label_A()
{
  return "HGG9D2X";
}

uint64_t HGG9D2X<HgcBlur_cs9s_rect>::RenderTile(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  int v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t *v22;
  int v23;
  float32x4_t v24;
  float32x4_t v25;

  v2 = a2[2];
  v3 = a2[3] - a2[1];
  if (v3 >= 1 && v2 != *a2)
  {
    v5 = 0;
    v6 = *(float32x4_t **)(a1 + 48);
    v7 = *v6;
    v8 = v6[1];
    v9 = v6[2];
    v10 = v6[3];
    v11 = v6[4];
    v12 = *a2 - v2;
    do
    {
      v13 = (float32x4_t *)(*((_QWORD *)a2 + 2) + 16 * a2[6] * v5);
      v14 = (float32x4_t *)(*((_QWORD *)a2 + 10) + 16 * *a2 + 16 * a2[22] * v5);
      v15 = v14[-4];
      v16 = v14[-3];
      v17 = v14[-2];
      v18 = v14[-1];
      v19 = *v14;
      v20 = v14[1];
      v21 = v14[2];
      v22 = v14 + 4;
      v23 = v12;
      do
      {
        v24 = v21;
        v25 = v22[-1];
        v21 = *v22;
        *v13++ = vaddq_f32(vmulq_f32(v11, vaddq_f32(v15, *v22)), vaddq_f32(vaddq_f32(vmulq_f32(v9, vaddq_f32(v24, v17)), vaddq_f32(vmulq_f32(v7, v19), vmulq_f32(v8, vaddq_f32(v20, v18)))), vmulq_f32(v10, vaddq_f32(v16, v25))));
        v22 += 2;
        v15 = v17;
        v16 = v18;
        v17 = v19;
        v18 = v20;
        v19 = v24;
        v20 = v25;
      }
      while (!__CFADD__(v23++, 1));
      ++v5;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t HGG9D2X<HgcBlur_cs9s_rect>::GetFilterMode()
{
  return 0;
}

void HGG9D2X<HgcBlur_cs9s_es_noborder>::~HGG9D2X(HGNode *a1)
{
  void *v1;

  HgcBlur_cs9s_es_noborder::~HgcBlur_cs9s_es_noborder(a1);
  HGObject::operator delete(v1);
}

const char *HGG9D2X<HgcBlur_cs9s_es_noborder>::label_A()
{
  return "HGG9D2X";
}

uint64_t HGG9D2X<HgcBlur_cs9s_es_noborder>::RenderTile(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  int v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t *v22;
  int v23;
  float32x4_t v24;
  float32x4_t v25;

  v2 = a2[2];
  v3 = a2[3] - a2[1];
  if (v3 >= 1 && v2 != *a2)
  {
    v5 = 0;
    v6 = *(float32x4_t **)(a1 + 48);
    v7 = *v6;
    v8 = v6[1];
    v9 = v6[2];
    v10 = v6[3];
    v11 = v6[4];
    v12 = *a2 - v2;
    do
    {
      v13 = (float32x4_t *)(*((_QWORD *)a2 + 2) + 16 * a2[6] * v5);
      v14 = (float32x4_t *)(*((_QWORD *)a2 + 10) + 16 * *a2 + 16 * a2[22] * v5);
      v15 = v14[-4];
      v16 = v14[-3];
      v17 = v14[-2];
      v18 = v14[-1];
      v19 = *v14;
      v20 = v14[1];
      v21 = v14[2];
      v22 = v14 + 4;
      v23 = v12;
      do
      {
        v24 = v21;
        v25 = v22[-1];
        v21 = *v22;
        *v13++ = vaddq_f32(vmulq_f32(v11, vaddq_f32(v15, *v22)), vaddq_f32(vaddq_f32(vmulq_f32(v9, vaddq_f32(v24, v17)), vaddq_f32(vmulq_f32(v7, v19), vmulq_f32(v8, vaddq_f32(v20, v18)))), vmulq_f32(v10, vaddq_f32(v16, v25))));
        v22 += 2;
        v15 = v17;
        v16 = v18;
        v17 = v19;
        v18 = v20;
        v19 = v24;
        v20 = v25;
      }
      while (!__CFADD__(v23++, 1));
      ++v5;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t HGG9D2X<HgcBlur_cs9s_es_noborder>::GetFilterMode()
{
  return 0;
}

void HGG9D2X<HgcBlur_cs9s>::~HGG9D2X(HGNode *a1)
{
  void *v1;

  HgcBlur_cs9s::~HgcBlur_cs9s(a1);
  HGObject::operator delete(v1);
}

const char *HGG9D2X<HgcBlur_cs9s>::label_A()
{
  return "HGG9D2X";
}

uint64_t HGG9D2X<HgcBlur_cs9s>::RenderTile(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  int v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t *v22;
  int v23;
  float32x4_t v24;
  float32x4_t v25;

  v2 = a2[2];
  v3 = a2[3] - a2[1];
  if (v3 >= 1 && v2 != *a2)
  {
    v5 = 0;
    v6 = *(float32x4_t **)(a1 + 48);
    v7 = *v6;
    v8 = v6[1];
    v9 = v6[2];
    v10 = v6[3];
    v11 = v6[4];
    v12 = *a2 - v2;
    do
    {
      v13 = (float32x4_t *)(*((_QWORD *)a2 + 2) + 16 * a2[6] * v5);
      v14 = (float32x4_t *)(*((_QWORD *)a2 + 10) + 16 * *a2 + 16 * a2[22] * v5);
      v15 = v14[-4];
      v16 = v14[-3];
      v17 = v14[-2];
      v18 = v14[-1];
      v19 = *v14;
      v20 = v14[1];
      v21 = v14[2];
      v22 = v14 + 4;
      v23 = v12;
      do
      {
        v24 = v21;
        v25 = v22[-1];
        v21 = *v22;
        *v13++ = vaddq_f32(vmulq_f32(v11, vaddq_f32(v15, *v22)), vaddq_f32(vaddq_f32(vmulq_f32(v9, vaddq_f32(v24, v17)), vaddq_f32(vmulq_f32(v7, v19), vmulq_f32(v8, vaddq_f32(v20, v18)))), vmulq_f32(v10, vaddq_f32(v16, v25))));
        v22 += 2;
        v15 = v17;
        v16 = v18;
        v17 = v19;
        v18 = v20;
        v19 = v24;
        v20 = v25;
      }
      while (!__CFADD__(v23++, 1));
      ++v5;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t HGG9D2X<HgcBlur_cs9s>::GetFilterMode()
{
  return 0;
}

HGNode *HGG9D2Y<HgcBlur_cs9s_rect>::HGG9D2Y(HGNode *a1, int a2)
{
  double v3;
  int v4;
  int v5;
  int v6;
  char *v7;

  *(_QWORD *)HGG9X<HgcBlur_cs9s_rect>::HGG9X((uint64_t)a1, a2) = off_1E6527600;
  LODWORD(v3) = -4.0;
  *((float *)a1 + 106) = HGRectfMake4f(0.0, v3, 0.0);
  *((_DWORD *)a1 + 107) = v4;
  *((_DWORD *)a1 + 108) = v5;
  *((_DWORD *)a1 + 109) = v6;
  (*(void (**)(HGNode *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, 0.0, -4.125, 0.0, 0.0);
  (*(void (**)(HGNode *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, 0.0, 1.0, 0.0, 0.0);
  *(_QWORD *)a1 = off_1E65284A0;
  *((_DWORD *)a1 + 105) = 0x40000000;
  HGNode::SetParameter(a1, 5, 0.0, 1.0, 0.0, 0.0, v7);
  return a1;
}

void sub_1B2A95298(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s_rect::~HgcBlur_cs9s_rect(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A952AC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s_rect::~HgcBlur_cs9s_rect(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A952C0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s_rect::~HgcBlur_cs9s_rect(v1);
  _Unwind_Resume(a1);
}

void HGG9D2Y<HgcBlur_cs9s_rect>::~HGG9D2Y(HGNode *a1)
{
  void *v1;

  HgcBlur_cs9s_rect::~HgcBlur_cs9s_rect(a1);
  HGObject::operator delete(v1);
}

const char *HGG9D2Y<HgcBlur_cs9s_rect>::label_A()
{
  return "HGG9D2Y";
}

uint64_t HGG9D2Y<HgcBlur_cs9s_rect>::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = *(float32x4_t **)(a1 + 48);
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      v11 = *(int *)(a2 + 88);
      v12 = 16 * v11;
      v13 = 32 * v11;
      v14 = 48 * v11;
      v15 = v11 << 6;
      v16 = v6[4];
      do
      {
        v17 = 0;
        v18 = *(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v5;
        v19 = *(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * (*(_DWORD *)(a2 + 4) + v4);
        do
        {
          *(float32x4_t *)(v18 + 16 * v17) = vaddq_f32(vmulq_f32(v16, vaddq_f32(*(float32x4_t *)(v19 - v15 + 16 * v17), *(float32x4_t *)(v19 + v15 + 16 * v17))), vaddq_f32(vmulq_f32(v10, vaddq_f32(*(float32x4_t *)(v19 - v14 + 16 * v17), *(float32x4_t *)(v19 + v14 + 16 * v17))), vaddq_f32(vmulq_f32(v9, vaddq_f32(*(float32x4_t *)(v19 - v13 + 16 * v17), *(float32x4_t *)(v19 + v13 + 16 * v17))), vaddq_f32(vmulq_f32(v7, *(float32x4_t *)(v19 + 16 * v17)),
                                                     vmulq_f32(v8, vaddq_f32(*(float32x4_t *)(v19 - v12 + 16 * v17), *(float32x4_t *)(v19 + v12 + 16 * v17)))))));
          ++v17;
        }
        while (v3 != (_DWORD)v17);
        ++v5;
        v4 += 2;
      }
      while (v5 != v2);
    }
  }
  return 0;
}

uint64_t HGG9D2Y<HgcBlur_cs9s_rect>::GetFilterMode()
{
  return 0;
}

HGNode *HGG9D2Y<HgcBlur_cs9s_es_noborder>::HGG9D2Y(HGNode *a1, int a2)
{
  double v3;
  int v4;
  int v5;
  int v6;
  char *v7;

  *(_QWORD *)HGG9X<HgcBlur_cs9s_es_noborder>::HGG9X((uint64_t)a1, a2) = off_1E6527870;
  LODWORD(v3) = -4.0;
  *((float *)a1 + 106) = HGRectfMake4f(0.0, v3, 0.0);
  *((_DWORD *)a1 + 107) = v4;
  *((_DWORD *)a1 + 108) = v5;
  *((_DWORD *)a1 + 109) = v6;
  (*(void (**)(HGNode *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, 0.0, -4.125, 0.0, 0.0);
  (*(void (**)(HGNode *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, 0.0, 1.0, 0.0, 0.0);
  *(_QWORD *)a1 = off_1E6528710;
  *((_DWORD *)a1 + 105) = 0x40000000;
  HGNode::SetParameter(a1, 5, 0.0, 1.0, 0.0, 0.0, v7);
  return a1;
}

void sub_1B2A95524(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s_es_noborder::~HgcBlur_cs9s_es_noborder(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A95538(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s_es_noborder::~HgcBlur_cs9s_es_noborder(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A9554C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s_es_noborder::~HgcBlur_cs9s_es_noborder(v1);
  _Unwind_Resume(a1);
}

void HGG9D2Y<HgcBlur_cs9s_es_noborder>::~HGG9D2Y(HGNode *a1)
{
  void *v1;

  HgcBlur_cs9s_es_noborder::~HgcBlur_cs9s_es_noborder(a1);
  HGObject::operator delete(v1);
}

const char *HGG9D2Y<HgcBlur_cs9s_es_noborder>::label_A()
{
  return "HGG9D2Y";
}

uint64_t HGG9D2Y<HgcBlur_cs9s_es_noborder>::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = *(float32x4_t **)(a1 + 48);
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      v11 = *(int *)(a2 + 88);
      v12 = 16 * v11;
      v13 = 32 * v11;
      v14 = 48 * v11;
      v15 = v11 << 6;
      v16 = v6[4];
      do
      {
        v17 = 0;
        v18 = *(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v5;
        v19 = *(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * (*(_DWORD *)(a2 + 4) + v4);
        do
        {
          *(float32x4_t *)(v18 + 16 * v17) = vaddq_f32(vmulq_f32(v16, vaddq_f32(*(float32x4_t *)(v19 - v15 + 16 * v17), *(float32x4_t *)(v19 + v15 + 16 * v17))), vaddq_f32(vmulq_f32(v10, vaddq_f32(*(float32x4_t *)(v19 - v14 + 16 * v17), *(float32x4_t *)(v19 + v14 + 16 * v17))), vaddq_f32(vmulq_f32(v9, vaddq_f32(*(float32x4_t *)(v19 - v13 + 16 * v17), *(float32x4_t *)(v19 + v13 + 16 * v17))), vaddq_f32(vmulq_f32(v7, *(float32x4_t *)(v19 + 16 * v17)),
                                                     vmulq_f32(v8, vaddq_f32(*(float32x4_t *)(v19 - v12 + 16 * v17), *(float32x4_t *)(v19 + v12 + 16 * v17)))))));
          ++v17;
        }
        while (v3 != (_DWORD)v17);
        ++v5;
        v4 += 2;
      }
      while (v5 != v2);
    }
  }
  return 0;
}

uint64_t HGG9D2Y<HgcBlur_cs9s_es_noborder>::GetFilterMode()
{
  return 0;
}

HGNode *HGG9D2Y<HgcBlur_cs9s>::HGG9D2Y(HGNode *a1, int a2)
{
  double v3;
  int v4;
  int v5;
  int v6;
  char *v7;

  *(_QWORD *)HGG9X<HgcBlur_cs9s>::HGG9X((uint64_t)a1, a2) = off_1E6527AE0;
  LODWORD(v3) = -4.0;
  *((float *)a1 + 106) = HGRectfMake4f(0.0, v3, 0.0);
  *((_DWORD *)a1 + 107) = v4;
  *((_DWORD *)a1 + 108) = v5;
  *((_DWORD *)a1 + 109) = v6;
  (*(void (**)(HGNode *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, 0.0, -4.125, 0.0, 0.0);
  (*(void (**)(HGNode *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, 0.0, 1.0, 0.0, 0.0);
  *(_QWORD *)a1 = off_1E6528980;
  *((_DWORD *)a1 + 105) = 0x40000000;
  HGNode::SetParameter(a1, 5, 0.0, 1.0, 0.0, 0.0, v7);
  return a1;
}

void sub_1B2A957B0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s::~HgcBlur_cs9s(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A957C4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s::~HgcBlur_cs9s(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A957D8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_cs9s::~HgcBlur_cs9s(v1);
  _Unwind_Resume(a1);
}

void HGG9D2Y<HgcBlur_cs9s>::~HGG9D2Y(HGNode *a1)
{
  void *v1;

  HgcBlur_cs9s::~HgcBlur_cs9s(a1);
  HGObject::operator delete(v1);
}

const char *HGG9D2Y<HgcBlur_cs9s>::label_A()
{
  return "HGG9D2Y";
}

uint64_t HGG9D2Y<HgcBlur_cs9s>::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = *(float32x4_t **)(a1 + 48);
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      v11 = *(int *)(a2 + 88);
      v12 = 16 * v11;
      v13 = 32 * v11;
      v14 = 48 * v11;
      v15 = v11 << 6;
      v16 = v6[4];
      do
      {
        v17 = 0;
        v18 = *(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v5;
        v19 = *(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * (*(_DWORD *)(a2 + 4) + v4);
        do
        {
          *(float32x4_t *)(v18 + 16 * v17) = vaddq_f32(vmulq_f32(v16, vaddq_f32(*(float32x4_t *)(v19 - v15 + 16 * v17), *(float32x4_t *)(v19 + v15 + 16 * v17))), vaddq_f32(vmulq_f32(v10, vaddq_f32(*(float32x4_t *)(v19 - v14 + 16 * v17), *(float32x4_t *)(v19 + v14 + 16 * v17))), vaddq_f32(vmulq_f32(v9, vaddq_f32(*(float32x4_t *)(v19 - v13 + 16 * v17), *(float32x4_t *)(v19 + v13 + 16 * v17))), vaddq_f32(vmulq_f32(v7, *(float32x4_t *)(v19 + 16 * v17)),
                                                     vmulq_f32(v8, vaddq_f32(*(float32x4_t *)(v19 - v12 + 16 * v17), *(float32x4_t *)(v19 + v12 + 16 * v17)))))));
          ++v17;
        }
        while (v3 != (_DWORD)v17);
        ++v5;
        v4 += 2;
      }
      while (v5 != v2);
    }
  }
  return 0;
}

uint64_t HGG9D2Y<HgcBlur_cs9s>::GetFilterMode()
{
  return 0;
}

uint64_t HGG4U2X<HgcBlur_g4u2_rect>::HGG4U2X(uint64_t a1)
{
  _QWORD *v2;
  double v3;
  int v4;
  int v5;
  int v6;
  unsigned __int8 v7;
  double v8;
  unsigned __int8 v9;
  double v10;
  unsigned __int8 v11;
  double v12;
  double v13;
  unsigned __int8 v14;
  double v15;
  float v16;
  float v17;
  float v18;
  float v19;

  HgcBlur_g4u2_rect::HgcBlur_g4u2_rect((HgcBlur_g4u2_rect *)a1);
  *v2 = off_1E6528BF0;
  LODWORD(v3) = 0;
  *(float *)(a1 + 424) = HGRectfMake4f(-2.0, v3, 2.0);
  *(_DWORD *)(a1 + 428) = v4;
  *(_DWORD *)(a1 + 432) = v5;
  *(_DWORD *)(a1 + 436) = v6;
  *(_QWORD *)(a1 + 416) = 0x3F8000003F000000;
  v7 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v8 = exp(*(double *)&_MergedGlobals_12 * 0.0 * 0.0);
  v9 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v10 = exp(*(double *)&_MergedGlobals_12 * 1.5 * 1.5);
  v11 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v12 = v8 * 0.5;
  v13 = exp(*(double *)&_MergedGlobals_12 * 0.75 * 0.75);
  v14 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v15 = exp(*(double *)&_MergedGlobals_12 * 2.25 * 2.25);
  v16 = v10 / (v12 + v10 + v12 + v10);
  v17 = (float)(v16 + 512.0) + -512.0;
  (*(void (**)(uint64_t, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, 0.5 - v17, 0.5 - v17, 0.5 - v17, 0.5 - v17);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, v17, v17, v17, v17);
  v18 = v15 / (v13 + v15 + v13 + v15);
  v19 = (float)(v18 + 512.0) + -512.0;
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, 0.5 - v19, 0.5 - v19, 0.5 - v19, 0.5 - v19);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, v19, v19, v19, v19);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, -0.5, 0.0, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, 0.5, 0.0, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, 1.0, 0.0, 0.0, 0.0);
  return a1;
}

void sub_1B2A95C5C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_g4u2_rect::~HgcBlur_g4u2_rect(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A95C70(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_g4u2_rect::~HgcBlur_g4u2_rect(v1);
  _Unwind_Resume(a1);
}

void HGG4U2X<HgcBlur_g4u2_rect>::~HGG4U2X(HGNode *a1)
{
  void *v1;

  HgcBlur_g4u2_rect::~HgcBlur_g4u2_rect(a1);
  HGObject::operator delete(v1);
}

const char *HGG4U2X<HgcBlur_g4u2_rect>::label_A()
{
  return "HGG4U2X";
}

uint64_t HGG4U2X<HgcBlur_g4u2_rect>::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  unsigned int v19;
  float32x4_t v20;
  float32x4_t *v21;
  unsigned int v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(float32x4_t **)(a1 + 48);
    v6 = v5[1];
    v7 = vaddq_f32(*v5, *v5);
    v8 = v5[2];
    v9 = v5[3];
    v10 = *(_DWORD *)a2 & 1;
    v11 = -(uint64_t)(int)vcvtms_s32_f32((float)*(int *)a2 * 0.5);
    do
    {
      v12 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v3);
      v13 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v3 + 16 * v11 - 16 * v10);
      v15 = v13[-1];
      v14 = *v13;
      v16 = v13[1];
      if ((_DWORD)v10)
      {
        v17 = v13[2];
        *v12++ = vaddq_f32(vmulq_f32(v8, vaddq_f32(v14, v16)), vmulq_f32(v9, vaddq_f32(v15, v17)));
        v18 = v4 - 1;
        ++v13;
        v15 = v14;
        if (v4 - 1 < 4)
          goto LABEL_7;
      }
      else
      {
        v18 = v4;
        v17 = v13[1];
        v16 = *v13;
        v14 = v13[-1];
        if (v4 < 4)
          goto LABEL_7;
      }
      do
      {
        v19 = v18;
        v14 = v17;
        v20 = v16;
        v16 = v13[2];
        v17 = v13[3];
        v13 += 2;
        *v12 = vaddq_f32(vmulq_f32(v7, v20), vmulq_f32(v6, vaddq_f32(v14, v15)));
        v12[1] = vaddq_f32(vmulq_f32(v8, vaddq_f32(v14, v20)), vmulq_f32(v9, vaddq_f32(v15, v16)));
        v12[2] = vaddq_f32(vmulq_f32(v7, v14), vmulq_f32(v6, vaddq_f32(v20, v16)));
        v12[3] = vaddq_f32(vmulq_f32(v8, vaddq_f32(v14, v16)), vmulq_f32(v9, vaddq_f32(v20, v17)));
        v12 += 4;
        v18 -= 4;
        v15 = v14;
      }
      while (v19 > 7);
LABEL_7:
      if (v18 >= 2)
      {
        v21 = v13 + 2;
        do
        {
          v22 = v18;
          v23 = v17;
          v24 = v16;
          v25 = *v21++;
          v17 = v25;
          *v12 = vaddq_f32(vmulq_f32(v7, v16), vmulq_f32(v6, vaddq_f32(v23, v14)));
          v12[1] = vaddq_f32(vmulq_f32(v8, vaddq_f32(v23, v16)), vmulq_f32(v9, vaddq_f32(v14, v25)));
          v12 += 2;
          v18 -= 2;
          v14 = v16;
          v16 = v23;
        }
        while (v22 > 3);
        if (!v18)
          goto LABEL_3;
LABEL_13:
        *v12 = vaddq_f32(vmulq_f32(v7, v23), vmulq_f32(v6, vaddq_f32(v17, v24)));
        goto LABEL_3;
      }
      v23 = v16;
      v24 = v14;
      if (v18)
        goto LABEL_13;
LABEL_3:
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HGG4U2X<HgcBlur_g4u2_rect>::Bind(HGNode *a1, HGHandler *a2)
{
  uint64_t v3;

  v3 = HGNode::Bind(a1, a2);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  return v3;
}

uint64_t HGG4U2X<HgcBlur_g4u2_rect>::BindTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  unsigned int v14;
  unsigned int v15;

  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 43) == 1)
  {
    HGHandler::TexCoord((HGHandler *)a2, a3, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
LABEL_5:
    v5.n128_u32[0] = 0;
    v6.n128_u32[0] = 0;
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 7, v5, v6, v7, v8);
    return 0;
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    HGHandler::TexCoord((HGHandler *)a2, a3, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    goto LABEL_5;
  }
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 7, (float)*(int *)(a2 + 240), (float)*(int *)(a2 + 244), 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220)), 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224)));
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 21))
  {
    v14 = *(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220);
    v10.n128_f32[0] = (float)(v14 + 1) * 0.5;
    v15 = *(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224);
    v11.n128_f32[0] = (float)(v15 + 1) * 0.5;
    v12.n128_f32[0] = (float)v14;
    v13.n128_f32[0] = (float)v15;
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 8, v10, v11, v12, v13);
  }
  return 0;
}

uint64_t HGG4U2X<HgcBlur_g4u2_rect>::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27)
    return 27;
  else
    return a2;
}

uint64_t HGG4U2X<HgcBlur_g4u2_rect>::GetDOD(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return HGRectIntegral(HIDWORD(a4), (float)((float)(a1[106] + (float)(int)a4) / a1[104]) + 0.5, (float)((float)(a1[107] + (float)SHIDWORD(a4)) / a1[105]) + 0.5, (float)((float)((float)((float)(int)a5 + -1.0) + a1[108]) / a1[104]) + 0.5, (float)((float)((float)((float)SHIDWORD(a5) + -1.0) + a1[109]) / a1[105]) + 0.5);
}

uint64_t HGG4U2X<HgcBlur_g4u2_rect>::GetROI(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return HGRectIntegral(HIDWORD(a4), a1[106] + (float)((float)(a1[104] * (float)(int)a4) + 0.5), a1[107] + (float)((float)(a1[105] * (float)SHIDWORD(a4)) + 0.5), (float)((float)((float)((float)(int)a5 + -1.0) * a1[104]) + 0.5) + a1[108], (float)((float)((float)((float)SHIDWORD(a5) + -1.0) * a1[105]) + 0.5) + a1[109]);
}

uint64_t HGG4U2X<HgcBlur_g4u2_rect>::GetFilterMode()
{
  return 0;
}

uint64_t HGG4U2X<HgcBlur_g4u2_noborder>::HGG4U2X(uint64_t a1)
{
  _QWORD *v2;
  double v3;
  int v4;
  int v5;
  int v6;
  unsigned __int8 v7;
  double v8;
  unsigned __int8 v9;
  double v10;
  unsigned __int8 v11;
  double v12;
  double v13;
  unsigned __int8 v14;
  double v15;
  float v16;
  float v17;
  float v18;
  float v19;

  HgcBlur_g4u2_noborder::HgcBlur_g4u2_noborder((HgcBlur_g4u2_noborder *)a1);
  *v2 = off_1E6528E60;
  LODWORD(v3) = 0;
  *(float *)(a1 + 424) = HGRectfMake4f(-2.0, v3, 2.0);
  *(_DWORD *)(a1 + 428) = v4;
  *(_DWORD *)(a1 + 432) = v5;
  *(_DWORD *)(a1 + 436) = v6;
  *(_QWORD *)(a1 + 416) = 0x3F8000003F000000;
  v7 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v8 = exp(*(double *)&_MergedGlobals_12 * 0.0 * 0.0);
  v9 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v10 = exp(*(double *)&_MergedGlobals_12 * 1.5 * 1.5);
  v11 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v12 = v8 * 0.5;
  v13 = exp(*(double *)&_MergedGlobals_12 * 0.75 * 0.75);
  v14 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v15 = exp(*(double *)&_MergedGlobals_12 * 2.25 * 2.25);
  v16 = v10 / (v12 + v10 + v12 + v10);
  v17 = (float)(v16 + 512.0) + -512.0;
  (*(void (**)(uint64_t, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, 0.5 - v17, 0.5 - v17, 0.5 - v17, 0.5 - v17);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, v17, v17, v17, v17);
  v18 = v15 / (v13 + v15 + v13 + v15);
  v19 = (float)(v18 + 512.0) + -512.0;
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, 0.5 - v19, 0.5 - v19, 0.5 - v19, 0.5 - v19);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, v19, v19, v19, v19);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, -0.5, 0.0, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, 0.5, 0.0, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, 1.0, 0.0, 0.0, 0.0);
  return a1;
}

void sub_1B2A964AC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_g4u2_noborder::~HgcBlur_g4u2_noborder(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A964C0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_g4u2_noborder::~HgcBlur_g4u2_noborder(v1);
  _Unwind_Resume(a1);
}

void HGG4U2X<HgcBlur_g4u2_noborder>::~HGG4U2X(HGNode *a1)
{
  void *v1;

  HgcBlur_g4u2_noborder::~HgcBlur_g4u2_noborder(a1);
  HGObject::operator delete(v1);
}

const char *HGG4U2X<HgcBlur_g4u2_noborder>::label_A()
{
  return "HGG4U2X";
}

uint64_t HGG4U2X<HgcBlur_g4u2_noborder>::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  unsigned int v19;
  float32x4_t v20;
  float32x4_t *v21;
  unsigned int v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(float32x4_t **)(a1 + 48);
    v6 = v5[1];
    v7 = vaddq_f32(*v5, *v5);
    v8 = v5[2];
    v9 = v5[3];
    v10 = *(_DWORD *)a2 & 1;
    v11 = -(uint64_t)(int)vcvtms_s32_f32((float)*(int *)a2 * 0.5);
    do
    {
      v12 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v3);
      v13 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v3 + 16 * v11 - 16 * v10);
      v15 = v13[-1];
      v14 = *v13;
      v16 = v13[1];
      if ((_DWORD)v10)
      {
        v17 = v13[2];
        *v12++ = vaddq_f32(vmulq_f32(v8, vaddq_f32(v14, v16)), vmulq_f32(v9, vaddq_f32(v15, v17)));
        v18 = v4 - 1;
        ++v13;
        v15 = v14;
        if (v4 - 1 < 4)
          goto LABEL_7;
      }
      else
      {
        v18 = v4;
        v17 = v13[1];
        v16 = *v13;
        v14 = v13[-1];
        if (v4 < 4)
          goto LABEL_7;
      }
      do
      {
        v19 = v18;
        v14 = v17;
        v20 = v16;
        v16 = v13[2];
        v17 = v13[3];
        v13 += 2;
        *v12 = vaddq_f32(vmulq_f32(v7, v20), vmulq_f32(v6, vaddq_f32(v14, v15)));
        v12[1] = vaddq_f32(vmulq_f32(v8, vaddq_f32(v14, v20)), vmulq_f32(v9, vaddq_f32(v15, v16)));
        v12[2] = vaddq_f32(vmulq_f32(v7, v14), vmulq_f32(v6, vaddq_f32(v20, v16)));
        v12[3] = vaddq_f32(vmulq_f32(v8, vaddq_f32(v14, v16)), vmulq_f32(v9, vaddq_f32(v20, v17)));
        v12 += 4;
        v18 -= 4;
        v15 = v14;
      }
      while (v19 > 7);
LABEL_7:
      if (v18 >= 2)
      {
        v21 = v13 + 2;
        do
        {
          v22 = v18;
          v23 = v17;
          v24 = v16;
          v25 = *v21++;
          v17 = v25;
          *v12 = vaddq_f32(vmulq_f32(v7, v16), vmulq_f32(v6, vaddq_f32(v23, v14)));
          v12[1] = vaddq_f32(vmulq_f32(v8, vaddq_f32(v23, v16)), vmulq_f32(v9, vaddq_f32(v14, v25)));
          v12 += 2;
          v18 -= 2;
          v14 = v16;
          v16 = v23;
        }
        while (v22 > 3);
        if (!v18)
          goto LABEL_3;
LABEL_13:
        *v12 = vaddq_f32(vmulq_f32(v7, v23), vmulq_f32(v6, vaddq_f32(v17, v24)));
        goto LABEL_3;
      }
      v23 = v16;
      v24 = v14;
      if (v18)
        goto LABEL_13;
LABEL_3:
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HGG4U2X<HgcBlur_g4u2_noborder>::Bind(HGNode *a1, HGHandler *a2)
{
  uint64_t v3;

  v3 = HGNode::Bind(a1, a2);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  return v3;
}

uint64_t HGG4U2X<HgcBlur_g4u2_noborder>::BindTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  unsigned int v14;
  unsigned int v15;

  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 43) == 1)
  {
    HGHandler::TexCoord((HGHandler *)a2, a3, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
LABEL_5:
    v5.n128_u32[0] = 0;
    v6.n128_u32[0] = 0;
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 7, v5, v6, v7, v8);
    return 0;
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    HGHandler::TexCoord((HGHandler *)a2, a3, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    goto LABEL_5;
  }
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 7, (float)*(int *)(a2 + 240), (float)*(int *)(a2 + 244), 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220)), 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224)));
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 21))
  {
    v14 = *(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220);
    v10.n128_f32[0] = (float)(v14 + 1) * 0.5;
    v15 = *(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224);
    v11.n128_f32[0] = (float)(v15 + 1) * 0.5;
    v12.n128_f32[0] = (float)v14;
    v13.n128_f32[0] = (float)v15;
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 8, v10, v11, v12, v13);
  }
  return 0;
}

uint64_t HGG4U2X<HgcBlur_g4u2_noborder>::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27)
    return 27;
  else
    return a2;
}

uint64_t HGG4U2X<HgcBlur_g4u2_noborder>::GetDOD(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return HGRectIntegral(HIDWORD(a4), (float)((float)(a1[106] + (float)(int)a4) / a1[104]) + 0.5, (float)((float)(a1[107] + (float)SHIDWORD(a4)) / a1[105]) + 0.5, (float)((float)((float)((float)(int)a5 + -1.0) + a1[108]) / a1[104]) + 0.5, (float)((float)((float)((float)SHIDWORD(a5) + -1.0) + a1[109]) / a1[105]) + 0.5);
}

uint64_t HGG4U2X<HgcBlur_g4u2_noborder>::GetROI(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return HGRectIntegral(HIDWORD(a4), a1[106] + (float)((float)(a1[104] * (float)(int)a4) + 0.5), a1[107] + (float)((float)(a1[105] * (float)SHIDWORD(a4)) + 0.5), (float)((float)((float)((float)(int)a5 + -1.0) * a1[104]) + 0.5) + a1[108], (float)((float)((float)((float)SHIDWORD(a5) + -1.0) * a1[105]) + 0.5) + a1[109]);
}

uint64_t HGG4U2X<HgcBlur_g4u2_noborder>::GetFilterMode()
{
  return 0;
}

uint64_t HGG4U2X<HgcBlur_g4u2>::HGG4U2X(uint64_t a1)
{
  _QWORD *v2;
  double v3;
  int v4;
  int v5;
  int v6;
  unsigned __int8 v7;
  double v8;
  unsigned __int8 v9;
  double v10;
  unsigned __int8 v11;
  double v12;
  double v13;
  unsigned __int8 v14;
  double v15;
  float v16;
  float v17;
  float v18;
  float v19;

  HgcBlur_g4u2::HgcBlur_g4u2((HgcBlur_g4u2 *)a1);
  *v2 = off_1E65290D0;
  LODWORD(v3) = 0;
  *(float *)(a1 + 424) = HGRectfMake4f(-2.0, v3, 2.0);
  *(_DWORD *)(a1 + 428) = v4;
  *(_DWORD *)(a1 + 432) = v5;
  *(_DWORD *)(a1 + 436) = v6;
  *(_QWORD *)(a1 + 416) = 0x3F8000003F000000;
  v7 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v8 = exp(*(double *)&_MergedGlobals_12 * 0.0 * 0.0);
  v9 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v10 = exp(*(double *)&_MergedGlobals_12 * 1.5 * 1.5);
  v11 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v12 = v8 * 0.5;
  v13 = exp(*(double *)&_MergedGlobals_12 * 0.75 * 0.75);
  v14 = atomic_load((unsigned __int8 *)&qword_1ED4DAA80);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA80))
  {
    _MergedGlobals_12 = 0xBFE0000000000000;
    __cxa_guard_release(&qword_1ED4DAA80);
  }
  v15 = exp(*(double *)&_MergedGlobals_12 * 2.25 * 2.25);
  v16 = v10 / (v12 + v10 + v12 + v10);
  v17 = (float)(v16 + 512.0) + -512.0;
  (*(void (**)(uint64_t, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, 0.5 - v17, 0.5 - v17, 0.5 - v17, 0.5 - v17);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, v17, v17, v17, v17);
  v18 = v15 / (v13 + v15 + v13 + v15);
  v19 = (float)(v18 + 512.0) + -512.0;
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, 0.5 - v19, 0.5 - v19, 0.5 - v19, 0.5 - v19);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, v19, v19, v19, v19);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, -0.5, 0.0, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, 0.5, 0.0, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, 1.0, 0.0, 0.0, 0.0);
  return a1;
}

void sub_1B2A96CFC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_g4u2::~HgcBlur_g4u2(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A96D10(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_g4u2::~HgcBlur_g4u2(v1);
  _Unwind_Resume(a1);
}

void HGG4U2X<HgcBlur_g4u2>::~HGG4U2X(HGNode *a1)
{
  void *v1;

  HgcBlur_g4u2::~HgcBlur_g4u2(a1);
  HGObject::operator delete(v1);
}

const char *HGG4U2X<HgcBlur_g4u2>::label_A()
{
  return "HGG4U2X";
}

uint64_t HGG4U2X<HgcBlur_g4u2>::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  unsigned int v19;
  float32x4_t v20;
  float32x4_t *v21;
  unsigned int v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(float32x4_t **)(a1 + 48);
    v6 = v5[1];
    v7 = vaddq_f32(*v5, *v5);
    v8 = v5[2];
    v9 = v5[3];
    v10 = *(_DWORD *)a2 & 1;
    v11 = -(uint64_t)(int)vcvtms_s32_f32((float)*(int *)a2 * 0.5);
    do
    {
      v12 = (float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * *(_DWORD *)(a2 + 24) * v3);
      v13 = (float32x4_t *)(*(_QWORD *)(a2 + 80) + 16 * *(_DWORD *)(a2 + 88) * v3 + 16 * v11 - 16 * v10);
      v15 = v13[-1];
      v14 = *v13;
      v16 = v13[1];
      if ((_DWORD)v10)
      {
        v17 = v13[2];
        *v12++ = vaddq_f32(vmulq_f32(v8, vaddq_f32(v14, v16)), vmulq_f32(v9, vaddq_f32(v15, v17)));
        v18 = v4 - 1;
        ++v13;
        v15 = v14;
        if (v4 - 1 < 4)
          goto LABEL_7;
      }
      else
      {
        v18 = v4;
        v17 = v13[1];
        v16 = *v13;
        v14 = v13[-1];
        if (v4 < 4)
          goto LABEL_7;
      }
      do
      {
        v19 = v18;
        v14 = v17;
        v20 = v16;
        v16 = v13[2];
        v17 = v13[3];
        v13 += 2;
        *v12 = vaddq_f32(vmulq_f32(v7, v20), vmulq_f32(v6, vaddq_f32(v14, v15)));
        v12[1] = vaddq_f32(vmulq_f32(v8, vaddq_f32(v14, v20)), vmulq_f32(v9, vaddq_f32(v15, v16)));
        v12[2] = vaddq_f32(vmulq_f32(v7, v14), vmulq_f32(v6, vaddq_f32(v20, v16)));
        v12[3] = vaddq_f32(vmulq_f32(v8, vaddq_f32(v14, v16)), vmulq_f32(v9, vaddq_f32(v20, v17)));
        v12 += 4;
        v18 -= 4;
        v15 = v14;
      }
      while (v19 > 7);
LABEL_7:
      if (v18 >= 2)
      {
        v21 = v13 + 2;
        do
        {
          v22 = v18;
          v23 = v17;
          v24 = v16;
          v25 = *v21++;
          v17 = v25;
          *v12 = vaddq_f32(vmulq_f32(v7, v16), vmulq_f32(v6, vaddq_f32(v23, v14)));
          v12[1] = vaddq_f32(vmulq_f32(v8, vaddq_f32(v23, v16)), vmulq_f32(v9, vaddq_f32(v14, v25)));
          v12 += 2;
          v18 -= 2;
          v14 = v16;
          v16 = v23;
        }
        while (v22 > 3);
        if (!v18)
          goto LABEL_3;
LABEL_13:
        *v12 = vaddq_f32(vmulq_f32(v7, v23), vmulq_f32(v6, vaddq_f32(v17, v24)));
        goto LABEL_3;
      }
      v23 = v16;
      v24 = v14;
      if (v18)
        goto LABEL_13;
LABEL_3:
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HGG4U2X<HgcBlur_g4u2>::Bind(HGNode *a1, HGHandler *a2)
{
  uint64_t v3;

  v3 = HGNode::Bind(a1, a2);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  return v3;
}

uint64_t HGG4U2X<HgcBlur_g4u2>::BindTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  unsigned int v14;
  unsigned int v15;

  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 43) == 1)
  {
    HGHandler::TexCoord((HGHandler *)a2, a3, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
LABEL_5:
    v5.n128_u32[0] = 0;
    v6.n128_u32[0] = 0;
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 7, v5, v6, v7, v8);
    return 0;
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    HGHandler::TexCoord((HGHandler *)a2, a3, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    goto LABEL_5;
  }
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 7, (float)*(int *)(a2 + 240), (float)*(int *)(a2 + 244), 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220)), 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224)));
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 21))
  {
    v14 = *(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220);
    v10.n128_f32[0] = (float)(v14 + 1) * 0.5;
    v15 = *(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224);
    v11.n128_f32[0] = (float)(v15 + 1) * 0.5;
    v12.n128_f32[0] = (float)v14;
    v13.n128_f32[0] = (float)v15;
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 8, v10, v11, v12, v13);
  }
  return 0;
}

uint64_t HGG4U2X<HgcBlur_g4u2>::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27)
    return 27;
  else
    return a2;
}

uint64_t HGG4U2X<HgcBlur_g4u2>::GetDOD(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return HGRectIntegral(HIDWORD(a4), (float)((float)(a1[106] + (float)(int)a4) / a1[104]) + 0.5, (float)((float)(a1[107] + (float)SHIDWORD(a4)) / a1[105]) + 0.5, (float)((float)((float)((float)(int)a5 + -1.0) + a1[108]) / a1[104]) + 0.5, (float)((float)((float)((float)SHIDWORD(a5) + -1.0) + a1[109]) / a1[105]) + 0.5);
}

uint64_t HGG4U2X<HgcBlur_g4u2>::GetROI(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return HGRectIntegral(HIDWORD(a4), a1[106] + (float)((float)(a1[104] * (float)(int)a4) + 0.5), a1[107] + (float)((float)(a1[105] * (float)SHIDWORD(a4)) + 0.5), (float)((float)((float)((float)(int)a5 + -1.0) * a1[104]) + 0.5) + a1[108], (float)((float)((float)((float)SHIDWORD(a5) + -1.0) * a1[105]) + 0.5) + a1[109]);
}

uint64_t HGG4U2X<HgcBlur_g4u2>::GetFilterMode()
{
  return 0;
}

uint64_t HGG4U2Y<HgcBlur_g4u2_rect>::HGG4U2Y(uint64_t a1)
{
  uint64_t v2;
  double v3;
  int v4;
  int v5;
  int v6;

  v2 = HGG4U2X<HgcBlur_g4u2_rect>::HGG4U2X(a1);
  *(_QWORD *)v2 = off_1E6529340;
  *(_DWORD *)(v2 + 16) |= 1u;
  LODWORD(v3) = -2.0;
  *(float *)(a1 + 424) = HGRectfMake4f(0.0, v3, 0.0);
  *(_DWORD *)(a1 + 428) = v4;
  *(_DWORD *)(a1 + 432) = v5;
  *(_DWORD *)(a1 + 436) = v6;
  *(_QWORD *)(a1 + 416) = 0x3F0000003F800000;
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, 0.0, -0.5, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, 0.0, 0.5, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, 0.0, 1.0, 0.0, 0.0);
  return a1;
}

void sub_1B2A97334(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_g4u2_rect::~HgcBlur_g4u2_rect(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A97348(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_g4u2_rect::~HgcBlur_g4u2_rect(v1);
  _Unwind_Resume(a1);
}

void HGG4U2Y<HgcBlur_g4u2_rect>::~HGG4U2Y(HGNode *a1)
{
  void *v1;

  HgcBlur_g4u2_rect::~HgcBlur_g4u2_rect(a1);
  HGObject::operator delete(v1);
}

const char *HGG4U2Y<HgcBlur_g4u2_rect>::label_A()
{
  return "HGG4U2Y";
}

uint64_t HGG4U2Y<HgcBlur_g4u2_rect>::RenderTile(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float32x4_t *v18;
  float32x4_t *v19;
  BOOL v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int v32;
  BOOL v33;
  int v34;

  v2 = a2[2];
  v3 = *a2;
  v4 = a2[1];
  v5 = v2 - *a2;
  v6 = a2[3] - v4;
  v7 = *(float32x4_t **)(a1 + 48);
  v9 = *v7;
  v8 = v7[1];
  v10 = v7[2];
  v11 = v7[3];
  v12 = a2[22];
  v13 = (float32x4_t *)(*((_QWORD *)a2 + 10) - 16 * (int)(v12 * ((v4 & 1) + vcvtms_s32_f32((float)v4 * 0.5))));
  v14 = (float32x4_t *)*((_QWORD *)a2 + 2);
  v15 = v12;
  v16 = 2 * v12;
  if ((v4 & 1) != 0)
  {
    if (v5)
    {
      v17 = v3 - v2;
      v18 = (float32x4_t *)*((_QWORD *)a2 + 2);
      v19 = v13;
      do
      {
        *v18++ = vaddq_f32(vmulq_f32(v10, vaddq_f32(*v19, v19[v12])), vmulq_f32(v11, vaddq_f32(v19[-v12], v19[2 * v12])));
        ++v19;
        v20 = __CFADD__(v17++, 1);
      }
      while (!v20);
      LODWORD(v12) = a2[22];
    }
    v14 += a2[6];
    v13 += (int)v12;
    --v6;
  }
  v21 = vaddq_f32(v9, v9);
  if (v6 < 2)
  {
    if (v6 != 1)
      return 0;
    goto LABEL_19;
  }
  if (v5)
  {
    LODWORD(v22) = a2[6];
    do
    {
      v23 = (int)v22;
      v24 = v3 - v2;
      v25 = v14;
      v26 = v13;
      do
      {
        v27 = *(float32x4_t *)((char *)v26 - (int)(v15 * 16));
        v28 = v26[v15];
        v29 = vaddq_f32(v27, v26[v16]);
        v30 = vaddq_f32(vmulq_f32(v21, *v26), vmulq_f32(v8, vaddq_f32(v27, v28)));
        v31 = vaddq_f32(vmulq_f32(v10, vaddq_f32(*v26, v28)), vmulq_f32(v11, v29));
        *v25 = v30;
        v25[v23] = v31;
        ++v26;
        ++v25;
        v20 = __CFADD__(v24++, 1);
      }
      while (!v20);
      v22 = a2[6];
      v14 += 2 * v22;
      v13 += a2[22];
      v32 = v6 - 2;
      v33 = v6 <= 3;
      v6 -= 2;
    }
    while (!v33);
    if (v32 == 1)
    {
LABEL_19:
      if (v5)
      {
        v34 = v3 - v2;
        do
        {
          *v14++ = vaddq_f32(vmulq_f32(v21, *v13), vmulq_f32(v8, vaddq_f32(*(float32x4_t *)((char *)v13 - (int)(v15 * 16)), v13[v15])));
          ++v13;
          v20 = __CFADD__(v34++, 1);
        }
        while (!v20);
      }
    }
  }
  return 0;
}

uint64_t HGG4U2Y<HgcBlur_g4u2_rect>::GetFilterMode()
{
  return 0;
}

uint64_t HGG4U2Y<HgcBlur_g4u2_noborder>::HGG4U2Y(uint64_t a1)
{
  uint64_t v2;
  double v3;
  int v4;
  int v5;
  int v6;

  v2 = HGG4U2X<HgcBlur_g4u2_noborder>::HGG4U2X(a1);
  *(_QWORD *)v2 = off_1E65295B0;
  *(_DWORD *)(v2 + 16) |= 1u;
  LODWORD(v3) = -2.0;
  *(float *)(a1 + 424) = HGRectfMake4f(0.0, v3, 0.0);
  *(_DWORD *)(a1 + 428) = v4;
  *(_DWORD *)(a1 + 432) = v5;
  *(_DWORD *)(a1 + 436) = v6;
  *(_QWORD *)(a1 + 416) = 0x3F0000003F800000;
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, 0.0, -0.5, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, 0.0, 0.5, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, 0.0, 1.0, 0.0, 0.0);
  return a1;
}

void sub_1B2A9760C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_g4u2_noborder::~HgcBlur_g4u2_noborder(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A97620(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_g4u2_noborder::~HgcBlur_g4u2_noborder(v1);
  _Unwind_Resume(a1);
}

void HGG4U2Y<HgcBlur_g4u2_noborder>::~HGG4U2Y(HGNode *a1)
{
  void *v1;

  HgcBlur_g4u2_noborder::~HgcBlur_g4u2_noborder(a1);
  HGObject::operator delete(v1);
}

const char *HGG4U2Y<HgcBlur_g4u2_noborder>::label_A()
{
  return "HGG4U2Y";
}

uint64_t HGG4U2Y<HgcBlur_g4u2_noborder>::RenderTile(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float32x4_t *v18;
  float32x4_t *v19;
  BOOL v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int v32;
  BOOL v33;
  int v34;

  v2 = a2[2];
  v3 = *a2;
  v4 = a2[1];
  v5 = v2 - *a2;
  v6 = a2[3] - v4;
  v7 = *(float32x4_t **)(a1 + 48);
  v9 = *v7;
  v8 = v7[1];
  v10 = v7[2];
  v11 = v7[3];
  v12 = a2[22];
  v13 = (float32x4_t *)(*((_QWORD *)a2 + 10) - 16 * (int)(v12 * ((v4 & 1) + vcvtms_s32_f32((float)v4 * 0.5))));
  v14 = (float32x4_t *)*((_QWORD *)a2 + 2);
  v15 = v12;
  v16 = 2 * v12;
  if ((v4 & 1) != 0)
  {
    if (v5)
    {
      v17 = v3 - v2;
      v18 = (float32x4_t *)*((_QWORD *)a2 + 2);
      v19 = v13;
      do
      {
        *v18++ = vaddq_f32(vmulq_f32(v10, vaddq_f32(*v19, v19[v12])), vmulq_f32(v11, vaddq_f32(v19[-v12], v19[2 * v12])));
        ++v19;
        v20 = __CFADD__(v17++, 1);
      }
      while (!v20);
      LODWORD(v12) = a2[22];
    }
    v14 += a2[6];
    v13 += (int)v12;
    --v6;
  }
  v21 = vaddq_f32(v9, v9);
  if (v6 < 2)
  {
    if (v6 != 1)
      return 0;
    goto LABEL_19;
  }
  if (v5)
  {
    LODWORD(v22) = a2[6];
    do
    {
      v23 = (int)v22;
      v24 = v3 - v2;
      v25 = v14;
      v26 = v13;
      do
      {
        v27 = *(float32x4_t *)((char *)v26 - (int)(v15 * 16));
        v28 = v26[v15];
        v29 = vaddq_f32(v27, v26[v16]);
        v30 = vaddq_f32(vmulq_f32(v21, *v26), vmulq_f32(v8, vaddq_f32(v27, v28)));
        v31 = vaddq_f32(vmulq_f32(v10, vaddq_f32(*v26, v28)), vmulq_f32(v11, v29));
        *v25 = v30;
        v25[v23] = v31;
        ++v26;
        ++v25;
        v20 = __CFADD__(v24++, 1);
      }
      while (!v20);
      v22 = a2[6];
      v14 += 2 * v22;
      v13 += a2[22];
      v32 = v6 - 2;
      v33 = v6 <= 3;
      v6 -= 2;
    }
    while (!v33);
    if (v32 == 1)
    {
LABEL_19:
      if (v5)
      {
        v34 = v3 - v2;
        do
        {
          *v14++ = vaddq_f32(vmulq_f32(v21, *v13), vmulq_f32(v8, vaddq_f32(*(float32x4_t *)((char *)v13 - (int)(v15 * 16)), v13[v15])));
          ++v13;
          v20 = __CFADD__(v34++, 1);
        }
        while (!v20);
      }
    }
  }
  return 0;
}

uint64_t HGG4U2Y<HgcBlur_g4u2_noborder>::GetFilterMode()
{
  return 0;
}

uint64_t HGG4U2Y<HgcBlur_g4u2>::HGG4U2Y(uint64_t a1)
{
  uint64_t v2;
  double v3;
  int v4;
  int v5;
  int v6;

  v2 = HGG4U2X<HgcBlur_g4u2>::HGG4U2X(a1);
  *(_QWORD *)v2 = off_1E6529820;
  *(_DWORD *)(v2 + 16) |= 1u;
  LODWORD(v3) = -2.0;
  *(float *)(a1 + 424) = HGRectfMake4f(0.0, v3, 0.0);
  *(_DWORD *)(a1 + 428) = v4;
  *(_DWORD *)(a1 + 432) = v5;
  *(_DWORD *)(a1 + 436) = v6;
  *(_QWORD *)(a1 + 416) = 0x3F0000003F800000;
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, 0.0, -0.5, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, 0.0, 0.5, 0.0, 0.0);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, 0.0, 1.0, 0.0, 0.0);
  return a1;
}

void sub_1B2A978E4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_g4u2::~HgcBlur_g4u2(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A978F8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcBlur_g4u2::~HgcBlur_g4u2(v1);
  _Unwind_Resume(a1);
}

void HGG4U2Y<HgcBlur_g4u2>::~HGG4U2Y(HGNode *a1)
{
  void *v1;

  HgcBlur_g4u2::~HgcBlur_g4u2(a1);
  HGObject::operator delete(v1);
}

const char *HGG4U2Y<HgcBlur_g4u2>::label_A()
{
  return "HGG4U2Y";
}

uint64_t HGG4U2Y<HgcBlur_g4u2>::RenderTile(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float32x4_t *v18;
  float32x4_t *v19;
  BOOL v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int v32;
  BOOL v33;
  int v34;

  v2 = a2[2];
  v3 = *a2;
  v4 = a2[1];
  v5 = v2 - *a2;
  v6 = a2[3] - v4;
  v7 = *(float32x4_t **)(a1 + 48);
  v9 = *v7;
  v8 = v7[1];
  v10 = v7[2];
  v11 = v7[3];
  v12 = a2[22];
  v13 = (float32x4_t *)(*((_QWORD *)a2 + 10) - 16 * (int)(v12 * ((v4 & 1) + vcvtms_s32_f32((float)v4 * 0.5))));
  v14 = (float32x4_t *)*((_QWORD *)a2 + 2);
  v15 = v12;
  v16 = 2 * v12;
  if ((v4 & 1) != 0)
  {
    if (v5)
    {
      v17 = v3 - v2;
      v18 = (float32x4_t *)*((_QWORD *)a2 + 2);
      v19 = v13;
      do
      {
        *v18++ = vaddq_f32(vmulq_f32(v10, vaddq_f32(*v19, v19[v12])), vmulq_f32(v11, vaddq_f32(v19[-v12], v19[2 * v12])));
        ++v19;
        v20 = __CFADD__(v17++, 1);
      }
      while (!v20);
      LODWORD(v12) = a2[22];
    }
    v14 += a2[6];
    v13 += (int)v12;
    --v6;
  }
  v21 = vaddq_f32(v9, v9);
  if (v6 < 2)
  {
    if (v6 != 1)
      return 0;
    goto LABEL_19;
  }
  if (v5)
  {
    LODWORD(v22) = a2[6];
    do
    {
      v23 = (int)v22;
      v24 = v3 - v2;
      v25 = v14;
      v26 = v13;
      do
      {
        v27 = *(float32x4_t *)((char *)v26 - (int)(v15 * 16));
        v28 = v26[v15];
        v29 = vaddq_f32(v27, v26[v16]);
        v30 = vaddq_f32(vmulq_f32(v21, *v26), vmulq_f32(v8, vaddq_f32(v27, v28)));
        v31 = vaddq_f32(vmulq_f32(v10, vaddq_f32(*v26, v28)), vmulq_f32(v11, v29));
        *v25 = v30;
        v25[v23] = v31;
        ++v26;
        ++v25;
        v20 = __CFADD__(v24++, 1);
      }
      while (!v20);
      v22 = a2[6];
      v14 += 2 * v22;
      v13 += a2[22];
      v32 = v6 - 2;
      v33 = v6 <= 3;
      v6 -= 2;
    }
    while (!v33);
    if (v32 == 1)
    {
LABEL_19:
      if (v5)
      {
        v34 = v3 - v2;
        do
        {
          *v14++ = vaddq_f32(vmulq_f32(v21, *v13), vmulq_f32(v8, vaddq_f32(*(float32x4_t *)((char *)v13 - (int)(v15 * 16)), v13[v15])));
          ++v13;
          v20 = __CFADD__(v34++, 1);
        }
        while (!v20);
      }
    }
  }
  return 0;
}

uint64_t HGG4U2Y<HgcBlur_g4u2>::GetFilterMode()
{
  return 0;
}

_QWORD *std::vector<HGRef<HGNode>>::__push_back_slow_path<HGRef<HGNode>>(void **a1, _QWORD *a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - (_BYTE *)*a1) >> 3;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v8 = (_BYTE *)a1[2] - v4;
  if (v8 >> 2 > v6)
    v6 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(8 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[8 * v5];
  *(_QWORD *)v11 = *a2;
  v12 = v11 + 8;
  v13 = &v10[8 * v9];
  *a2 = 0;
  v21 = v13;
  if (v3 != v4)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)&v3[v14 - 8];
      *(_QWORD *)&v11[v14 - 8] = v15;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v14 -= 8;
    }
    while (&v3[v14] != v4);
    v12 = v11 + 8;
    v13 = v21;
    v11 += v14;
  }
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v13;
  while (v17 != v16)
  {
    v19 = *((_QWORD *)v17 - 1);
    v17 -= 8;
    v18 = v19;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  }
  if (v16)
    operator delete(v16);
  return v12;
}

uint64_t std::__split_buffer<HGRef<HGNode>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 8);
    v2 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<HGRef<HGNode>>::__push_back_slow_path<HGRef<HGNode> const&>(char **a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v8 = a1[2] - v3;
  if (v8 >> 2 > v6)
    v6 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(8 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[8 * v5];
  v12 = &v10[8 * v9];
  v13 = *a2;
  *(_QWORD *)v11 = *a2;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    v3 = *a1;
    v4 = a1[1];
  }
  v14 = v11 + 8;
  v21 = v11 + 8;
  if (v4 == v3)
  {
    v17 = v3;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)&v4[v15 - 8];
      *(_QWORD *)&v11[v15 - 8] = v16;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      v15 -= 8;
    }
    while (&v4[v15] != v3);
    v17 = *a1;
    v3 = a1[1];
    v11 += v15;
    v14 = v21;
  }
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v3 == v17)
  {
    if (v3)
LABEL_22:
      operator delete(v3);
  }
  else
  {
    do
    {
      v20 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      v19 = v20;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    }
    while (v3 != v17);
    v3 = v17;
    if (v17)
      goto LABEL_22;
  }
  return v14;
}

void sub_1B2A97E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<HGRef<HGNode>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2A97E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  for (; v2; v2 += 8)
  {
    v5 = *(_QWORD *)(v3 + v2);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  std::__split_buffer<HGRef<HGNode>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void HGBitmapUtils::createBitmap(HGBitmapUtils *this@<X0>, HGBitmap **a2@<X8>)
{
  unsigned int Width;
  unsigned int Height;
  size_t BitsPerComponent;
  size_t BitsPerPixel;
  size_t BytesPerRow;
  size_t v10;
  __int16 BitmapInfo;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unsigned int *v16;
  uint64_t v17;
  CGDataProvider *DataProvider;
  const __CFData *v19;
  const UInt8 *BytePtr;
  HGBitmap *v21;
  HGCFDataRefHolder *v22;

  *a2 = 0;
  if (!this)
    return;
  Width = CGImageGetWidth(this);
  Height = CGImageGetHeight(this);
  BitsPerComponent = CGImageGetBitsPerComponent(this);
  BitsPerPixel = CGImageGetBitsPerPixel(this);
  BytesPerRow = CGImageGetBytesPerRow(this);
  v10 = BitsPerPixel / BitsPerComponent;
  BitmapInfo = CGImageGetBitmapInfo(this);
  v12 = HGRectMake4i(0, 0, Width, Height);
  v14 = v13;
  if (BitsPerComponent != 8)
  {
    if ((BitmapInfo & 0x100) == 0 && BitsPerComponent == 16)
    {
      if (v10 - 1 >= 3)
        v17 = 25;
      else
        v17 = (8 * ((_DWORD)v10 - 1)) | 3u;
      goto LABEL_20;
    }
    if ((BitmapInfo & 0x100) != 0 && BitsPerComponent == 16)
    {
      v15 = v10 - 1;
      if (v10 - 1 >= 3)
      {
        v17 = 27;
        goto LABEL_20;
      }
      v16 = (unsigned int *)&unk_1B35239D4;
    }
    else
    {
      if ((BitmapInfo & 0x100) == 0 || BitsPerComponent != 32)
        return;
      v15 = v10 - 1;
      if (v10 - 1 >= 3)
      {
        v17 = 28;
        goto LABEL_20;
      }
      v16 = (unsigned int *)&unk_1B35239E0;
    }
    goto LABEL_19;
  }
  v15 = v10 - 1;
  if (v10 - 1 < 3)
  {
    v16 = (unsigned int *)&unk_1B35239C8;
LABEL_19:
    v17 = v16[v15];
    goto LABEL_20;
  }
  v17 = 24;
LABEL_20:
  DataProvider = CGImageGetDataProvider(this);
  v19 = CGDataProviderCopyData(DataProvider);
  BytePtr = CFDataGetBytePtr(v19);
  v21 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v21, v12, v14, v17, BytePtr, BytesPerRow);
  if (v21)
    *a2 = v21;
  v22 = (HGCFDataRefHolder *)HGObject::operator new(0x18uLL);
  HGCFDataRefHolder::HGCFDataRefHolder(v22, v19);
  HGBitmap::SetStorage(v21, v22);
  CFRelease(v19);
  if (v22)
    (*(void (**)(HGCFDataRefHolder *))(*(_QWORD *)v22 + 24))(v22);
}

void sub_1B2A98080(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  HGObject::operator delete(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void HGBitmapUtils::createBitmapLoader(HGBitmapUtils *this@<X0>, HGBitmapLoader **a2@<X8>)
{
  HGBitmap *v4;
  HGBitmapLoader *v5;
  HGBitmapLoader *v6;
  HGBitmap *v7;

  if (this)
  {
    HGBitmapUtils::createBitmap(this, &v7);
    v4 = v7;
    if (v7)
    {
      v5 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
      HGBitmapLoader::HGBitmapLoader(v5, v4);
      *a2 = v5;
      (*(void (**)(HGBitmap *))(*(_QWORD *)v4 + 24))(v4);
      return;
    }
    v6 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
    HGBitmapLoader::HGBitmapLoader(v6);
  }
  else
  {
    v6 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
    HGBitmapLoader::HGBitmapLoader(v6);
  }
  *a2 = v6;
}

void sub_1B2A9818C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A981A4(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A981BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  HGObject::operator delete(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

BOOL HGBitmapUtils::isPadded(HGBitmapUtils *this, HGBitmap *a2)
{
  int v3;
  uint64_t TextureRect;
  uint64_t v5;
  HGMetalTexture *MetalStorage;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 3);
  if ((v3 & 0x20) != 0)
  {
    MetalStorage = (HGMetalTexture *)HGMetalTexture::getMetalStorage((HGBitmap *)this, a2);
    if (MetalStorage)
    {
      TextureRect = HGMetalTexture::GetTextureRect(MetalStorage);
      goto LABEL_8;
    }
LABEL_9:
    v7 = *(_QWORD *)((char *)this + 20);
    v8 = *(_QWORD *)((char *)this + 28);
    goto LABEL_10;
  }
  if ((v3 & 0x10) == 0)
    goto LABEL_9;
  if ((v3 & 0x100) != 0)
  {
    v7 = *((_QWORD *)this + 17);
    v8 = *((_QWORD *)this + 18);
    goto LABEL_10;
  }
  if ((v3 & 0x200) == 0)
    goto LABEL_9;
  TextureRect = HGGLTexture::GetTextureRect((HGGLTexture *)this);
LABEL_8:
  v7 = TextureRect;
  v8 = v5;
LABEL_10:
  v9 = HGFormatUtils::collapseRectForFormat((uint64_t *)((char *)this + 20), *((_DWORD *)this + 4));
  return !HGRectIsEqual(v9, v10, v7, v8);
}

uint64_t *__HGStats_private::operator<<(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  (*(void (**)(_QWORD))(*(_QWORD *)a2[1] + 24))(a2[1]);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24) + 24) = 7;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24) + 16) = 2;
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" ms (", 5);
  v7 = *v6;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 24) = 4;
  *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 16) = 1;
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"%)", 2);
  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2))
  {
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
    v10 = a2[3];
    *(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 24) = 10;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" pixels", 7);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
    v13 = a2[4];
    *(_QWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 24) = 10;
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" bytes", 6);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"  (", 3);
    v16 = a2[5];
    *(_QWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 24) = 4;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" tiles", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)")", 1);
  }
  return a1;
}

void __HGStats_private::StatsTimer::~StatsTimer(__HGStats_private::StatsTimer *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t __HGStats_private::StatsTimer::destroy(__HGStats_private::StatsTimer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    result = MEMORY[0x1B5E29170](result, 0x1000C40451B5BE8);
  *((_QWORD *)this + 1) = 0;
  return result;
}

double __HGStats_private::StatsTimer::time(__HGStats_private::StatsTimer *this)
{
  HGProfiler *v1;

  v1 = (HGProfiler *)*((_QWORD *)this + 1);
  if (v1)
    return HGProfiler::getTime(v1);
  else
    return 0.0;
}

void __HGStats_private::StatsProfile::~StatsProfile(__HGStats_private::StatsProfile *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t __HGStats_private::probe(__HGStats_private *this, __HGStats_private::StatsProfile *a2, double a3)
{
  uint64_t v4;

  v4 = a2;
  (*(void (**)(__HGStats_private *))(*(_QWORD *)this + 24))(this);
  (*(void (**)(__HGStats_private *))(*(_QWORD *)this + 24))(this);
  (*(void (**)(__HGStats_private *))(*(_QWORD *)this + 32))(this);
  (*(void (**)(__HGStats_private *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(__HGStats_private *))(*(_QWORD *)this + 48))(this);
  return v4;
}

uint64_t __HGStats_private::probe<HGNode>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  return a1;
}

uint64_t __HGStats_private::probe<std::type_info const>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  return 0;
}

uint64_t __HGStats_private::probe<HGNode>(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1;
  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1);
  return v1;
}

uint64_t __HGStats_private::probe<std::type_info const>()
{
  return 0;
}

HGProfiler *HGStats::UnitStatsImpl::getProfiler(HGStats::UnitStatsImpl *this, HGNode *a2)
{
  char *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  HGProfiler *v12;

  v5 = (uint64_t **)((char *)this + 32);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = *((_QWORD *)v4 + 4);
        if (v7 <= (unint64_t)a2)
          break;
        v4 = (char *)*v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= (unint64_t)a2)
        break;
      v4 = (char *)v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)((char *)this + 32);
LABEL_8:
    v8 = (char *)v6;
    v6 = (uint64_t **)operator new(0x50uLL);
    v6[4] = (uint64_t *)a2;
    v6[5] = (uint64_t *)&off_1E6529A90;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = (uint64_t *)v8;
    *v5 = (uint64_t *)v6;
    v9 = **((_QWORD **)this + 3);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *((_QWORD *)this + 3) = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 4), v10);
    ++*((_QWORD *)this + 5);
  }
  if (v6[6])
    return (HGProfiler *)v6[6];
  v12 = (HGProfiler *)operator new();
  HGProfiler::HGProfiler(v12);
  v6[6] = (uint64_t *)v12;
  return v12;
}

void sub_1B2A98934(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

void HGStats::UnitStatsImpl::start(HGStats::UnitStatsImpl *this, HGProfiler *a2)
{
  uint64_t v4;
  char **v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  if (*((_BYTE *)this + 120))
  {
    v4 = *((_QWORD *)this + 13);
    v5 = (char **)((char *)this + 96);
    if (*((_QWORD *)this + 12) != v4)
      HGProfiler::stop(*(HGProfiler **)(v4 - 8));
    HGProfiler::start(a2);
    v7 = (char *)*((_QWORD *)this + 13);
    v6 = *((_QWORD *)this + 14);
    if ((unint64_t)v7 < v6)
    {
      *(_QWORD *)v7 = a2;
      v8 = (uint64_t)(v7 + 8);
LABEL_26:
      *((_QWORD *)this + 13) = v8;
      return;
    }
    v9 = *v5;
    v10 = v7 - *v5;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = operator new(8 * v14);
      v16 = &v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = a2;
      v8 = (uint64_t)(v16 + 1);
      v18 = (char *)(v7 - v9);
      if (v7 == v9)
        goto LABEL_24;
    }
    else
    {
      v15 = 0;
      v16 = (_QWORD *)(8 * v11);
      v17 = 0;
      *(_QWORD *)(8 * v11) = a2;
      v8 = 8 * v11 + 8;
      v18 = (char *)(v7 - v9);
      if (v7 == v9)
      {
LABEL_24:
        *((_QWORD *)this + 12) = v16;
        *((_QWORD *)this + 13) = v8;
        *((_QWORD *)this + 14) = v17;
        if (v7)
          operator delete(v7);
        goto LABEL_26;
      }
    }
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_32;
    if ((unint64_t)(v7 - &v15[v10]) < 0x20)
      goto LABEL_32;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v7[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v23 = &v15[8 * v11 - 16];
    v24 = v7 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v7 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_32:
      do
      {
        v27 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v16 = v27;
      }
      while (v7 != v9);
    }
    v7 = *v5;
    goto LABEL_24;
  }
}

void HGStats::CoreStats<HGNode,__HGStats_private::StatsTimer>::clear(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  void (**v9)(char *);
  BOOL v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  void (**v15)(char *);
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v2 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  if (*(char **)a1 == v3)
  {
    v6 = *(char **)a1;
  }
  else
  {
    v4 = *(char **)a1;
    do
    {
      v5 = *(_QWORD *)v4;
      v4 += 40;
      (*(void (**)(char *))(v5 + 16))(v2);
      v2 = v4;
    }
    while (v4 != v3);
    v2 = *(char **)a1;
    v6 = *(char **)(a1 + 8);
    if (v6 == *(char **)a1)
    {
      v2 = *(char **)(a1 + 8);
    }
    else
    {
      v7 = v6 - 40;
      v8 = v6 - 40;
      do
      {
        v9 = *(void (***)(char *))v8;
        v8 -= 40;
        (*v9)(v7);
        v10 = v7 == v2;
        v7 = v8;
      }
      while (!v10);
      v6 = *(char **)a1;
    }
  }
  *(_QWORD *)(a1 + 8) = v2;
  v11 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v6) >> 3);
  if (v11 > 4)
  {
    if (v2 - v6 != 200)
    {
      v12 = v6 + 200;
      if (v2 != v6 + 200)
      {
        v13 = v2 - 40;
        v14 = v13;
        do
        {
          v15 = *(void (***)(char *))v14;
          v14 -= 40;
          (*v15)(v13);
          v10 = v13 == v12;
          v13 = v14;
        }
        while (!v10);
      }
      *(_QWORD *)(a1 + 8) = v12;
    }
  }
  else
  {
    std::vector<__HGStats_private::StatsTimer>::__append((void **)a1, 5 - v11);
  }
  v16 = *(_QWORD **)(a1 + 24);
  v17 = (_QWORD *)(a1 + 32);
  if (v16 != (_QWORD *)(a1 + 32))
  {
    do
    {
      v20 = v16[6];
      if (v20)
        MEMORY[0x1B5E29170](v20, 0x1000C40451B5BE8);
      v16[6] = 0;
      v21 = (_QWORD *)v16[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v16[2];
          v10 = *v22 == (_QWORD)v16;
          v16 = v22;
        }
        while (!v10);
      }
      v16 = v22;
    }
    while (v22 != v17);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v17;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 56) = 0;
  v19 = *(_QWORD **)(a1 + 80);
  v18 = (_QWORD *)(a1 + 80);
  *(v18 - 2) = 0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v18 - 1), v19);
  *(v18 - 1) = v18;
  *v18 = 0;
  v18[1] = 0;
}

uint64_t *HGStats::UnitStatsImpl::dump(uint64_t *result, _QWORD *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  __int128 v16;
  double Time;
  void (**v18)(__HGStats_private::StatsTimer *__hidden);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  _QWORD *v31;
  size_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  size_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  size_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t *v45;
  _QWORD *v46;
  size_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  _QWORD *v51;
  size_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  __int128 v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  _QWORD v72[6];
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[5];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD v83[19];

  if ((a3 & 0xFE) != 0)
  {
    v83[3] = v8;
    v83[4] = v7;
    v83[5] = v6;
    v83[6] = v5;
    v83[17] = v3;
    v83[18] = v4;
    v9 = (uint64_t *)result[3];
    v69 = result;
    v10 = result + 4;
    v11 = 0.0;
    if (v9 == result + 4)
    {
      v14 = 0;
      v13 = 0;
      v12 = 0;
      v15 = 0.0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      do
      {
        *(_QWORD *)&v80 = v9[4];
        *((_QWORD *)&v80 + 1) = &off_1E6529A90;
        v16 = *((_OWORD *)v9 + 4);
        v81 = *((_OWORD *)v9 + 3);
        v82 = v16;
        if ((_QWORD)v81)
        {
          Time = HGProfiler::getTime((HGProfiler *)v81);
          v18 = (void (**)(__HGStats_private::StatsTimer *__hidden))*((_QWORD *)&v80 + 1);
        }
        else
        {
          v18 = &off_1E6529A90;
          Time = 0.0;
        }
        v19 = ((uint64_t (*)(char *))v18[4])((char *)&v80 + 8);
        v20 = (*(uint64_t (**)(char *))(*((_QWORD *)&v80 + 1) + 40))((char *)&v80 + 8);
        v21 = (*(uint64_t (**)(char *))(*((_QWORD *)&v80 + 1) + 48))((char *)&v80 + 8);
        v22 = (uint64_t *)v9[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (uint64_t *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (uint64_t *)v9[2];
            v24 = *v23 == (_QWORD)v9;
            v9 = v23;
          }
          while (!v24);
        }
        v14 += v19;
        v15 = v15 + Time;
        v13 += v20;
        v12 += v21;
        v9 = v23;
      }
      while (v23 != v10);
    }
    v79[0] = &off_1E6529AD8;
    *(double *)&v79[1] = v15;
    v79[2] = v14;
    v79[3] = v13;
    v79[4] = v12;
    v26 = (_QWORD *)*v69;
    v25 = (_QWORD *)v69[1];
    if ((_QWORD *)*v69 != v25)
    {
      v11 = 0.0;
      v27 = (_QWORD *)*v69;
      do
      {
        v11 = v11 + (*(double (**)(_QWORD *))(*v26 + 24))(v26);
        (*(void (**)(_QWORD *))(*v26 + 32))(v26);
        (*(void (**)(_QWORD *))(*v26 + 40))(v26);
        v28 = *v27;
        v27 += 5;
        (*(void (**)(_QWORD *))(v28 + 48))(v26);
        v26 = v27;
      }
      while (v27 != v25);
    }
    v29 = a2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/----- exec unit stats:\n", 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|\n", 2);
    v30 = a3;
    if ((a3 & 2) != 0)
    {
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
      *(_QWORD *)((char *)v31 + *(_QWORD *)(*v31 - 24) + 24) = 16;
      v32 = strlen(__HGStats_private::opNames[0]);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)__HGStats_private::opNames[0], v32);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" : ", 3);
      v73 = *v69;
      v74 = v73;
      v75 = v11 + v15;
      v76 = v73;
      v77 = v73;
      v78 = v73;
      v35 = __HGStats_private::operator<<(v34, &v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\n", 1);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
      *(_QWORD *)((char *)v36 + *(_QWORD *)(*v36 - 24) + 24) = 16;
      v37 = strlen(off_1EF06ED98[0]);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)off_1EF06ED98[0], v37);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" : ", 3);
      v73 = *v69 + 40;
      v74 = v73;
      v75 = v11 + v15;
      v76 = v73;
      v77 = v73;
      v78 = v73;
      v40 = __HGStats_private::operator<<(v39, &v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
      *(_QWORD *)((char *)v41 + *(_QWORD *)(*v41 - 24) + 24) = 16;
      v42 = strlen(off_1EF06EDA0[0]);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)off_1EF06EDA0[0], v42);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" : ", 3);
      v73 = *v69 + 80;
      v74 = v73;
      v75 = v11 + v15;
      v76 = v73;
      v77 = v73;
      v78 = v73;
      v45 = __HGStats_private::operator<<(v44, &v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"\n", 1);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
      *(_QWORD *)((char *)v46 + *(_QWORD *)(*v46 - 24) + 24) = 16;
      v47 = strlen(off_1EF06EDA8[0]);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)off_1EF06EDA8[0], v47);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" : ", 3);
      v73 = *v69 + 120;
      v74 = v73;
      v75 = v11 + v15;
      v76 = v73;
      v77 = v73;
      v78 = v73;
      v50 = __HGStats_private::operator<<(v49, &v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n", 1);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
      *(_QWORD *)((char *)v51 + *(_QWORD *)(*v51 - 24) + 24) = 16;
      v52 = strlen(off_1EF06EDB0);
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)off_1EF06EDB0, v52);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" : ", 3);
      v73 = *v69 + 160;
      v74 = v73;
      v75 = v11 + v15;
      v76 = v73;
      v77 = v73;
      v78 = v73;
      v55 = __HGStats_private::operator<<(v54, &v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"\n", 1);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
      *(_QWORD *)((char *)v56 + *(_QWORD *)(*v56 - 24) + 24) = 16;
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"process", 7);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" : ", 3);
      v72[0] = v79;
      v72[1] = v79;
      *(double *)&v72[2] = v11 + v15;
      v72[3] = v79;
      v72[4] = v79;
      v72[5] = v79;
      v59 = __HGStats_private::operator<<(v58, v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"\n", 1);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
      *(_QWORD *)((char *)v60 + *(_QWORD *)(*v60 - 24) + 24) = 16;
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"total time", 10);
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" : ", 3);
      v63 = *v62;
      *(_DWORD *)((char *)v62 + *(_QWORD *)(*v62 - 24) + 8) = *(_DWORD *)((_BYTE *)v62 + *(_QWORD *)(*v62 - 24) + 8) & 0xFFFFFEFB | 4;
      *(uint64_t *)((char *)v62 + *(_QWORD *)(v63 - 24) + 24) = 7;
      v30 = a3;
      *(uint64_t *)((char *)v62 + *(_QWORD *)(v63 - 24) + 16) = 2;
      v64 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" ms\n", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|\n", 2);
      if ((a3 & 8) == 0)
      {
LABEL_20:
        if ((v30 & 0x20) == 0)
          return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\\----------------- \n\n", 21);
        goto LABEL_24;
      }
    }
    else if ((a3 & 8) == 0)
    {
      goto LABEL_20;
    }
    HGStats::CoreStats<HGNode,__HGStats_private::StatsTimer>::printNodeStats((uint64_t)v69, a2, (uint64_t)v79);
    if ((v30 & 0x20) == 0)
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\\----------------- \n\n", 21);
LABEL_24:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"| -- node in-N-out ROI ratios (per input):\n", 43);
    v65 = (uint64_t *)v69[6];
    v83[0] = a2;
    v83[1] = 0;
    if (v65 != v69 + 7)
    {
      do
      {
        v66 = *((_OWORD *)v65 + 3);
        v80 = *((_OWORD *)v65 + 2);
        v81 = v66;
        __HGStats_private::InOutRoiStatsPrinter<HGNode>::operator()(v83, (uint64_t *)&v80);
        v67 = (uint64_t *)v65[1];
        if (v67)
        {
          do
          {
            v68 = v67;
            v67 = (uint64_t *)*v67;
          }
          while (v67);
        }
        else
        {
          do
          {
            v68 = (uint64_t *)v65[2];
            v24 = *v68 == (_QWORD)v65;
            v65 = v68;
          }
          while (!v24);
        }
        v65 = v68;
      }
      while (v68 != v69 + 7);
    }
    v29 = a2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|\n", 2);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\\----------------- \n\n", 21);
  }
  return result;
}

double __HGStats_private::StatsProfile::time(__HGStats_private::StatsProfile *this)
{
  return *((double *)this + 1);
}

_QWORD *HGStats::CoreStats<HGNode,__HGStats_private::StatsTimer>::printNodeStats(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v18;
  void (**v19)(__HGStats_private::StatsTimer *__hidden);
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"| -- per node process times:\n", 29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"| read:\n", 8);
  v7 = *(_QWORD **)(a1 + 24);
  v8 = (_QWORD *)(a1 + 32);
  v22 = a2;
  v23 = a3;
  if (v7 != (_QWORD *)(a1 + 32))
  {
    do
    {
      v18 = (_QWORD *)v7[4];
      v19 = &off_1E6529A90;
      v9 = *((_OWORD *)v7 + 4);
      v20 = *((_OWORD *)v7 + 3);
      v21 = v9;
      __HGStats_private::NodeStatsPrinter<HGNode,__HGStats_private::StatsTimer,(__HGStats_private::NodeStatsType)1>::operator()(&v22, &v18);
      v10 = (_QWORD *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != v8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"| render:\n", 10);
  v13 = *(_QWORD **)(a1 + 24);
  v22 = a2;
  v23 = a3;
  if (v13 != v8)
  {
    do
    {
      v18 = (_QWORD *)v13[4];
      v19 = &off_1E6529A90;
      v14 = *((_OWORD *)v13 + 4);
      v20 = *((_OWORD *)v13 + 3);
      v21 = v14;
      __HGStats_private::NodeStatsPrinter<HGNode,__HGStats_private::StatsTimer,(__HGStats_private::NodeStatsType)0>::operator()(&v22, &v18);
      v15 = (_QWORD *)v13[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v13[2];
          v12 = *v16 == (_QWORD)v13;
          v13 = v16;
        }
        while (!v12);
      }
      v13 = v16;
    }
    while (v16 != v8);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|\n", 2);
}

HGStats::GraphStatsImpl *HGStats::GraphStatsImpl::GraphStatsImpl(HGStats::GraphStatsImpl *this)
{
  HGProfiler *v2;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<__HGStats_private::StatsProfile>::__append((void **)this + 1, 5uLL);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  v2 = (HGProfiler *)operator new();
  HGProfiler::HGProfiler(v2);
  *(_QWORD *)this = v2;
  return this;
}

void sub_1B2A99550(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1B5E29170](v3, 0x1000C40451B5BE8);
  HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::~CoreStats(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A99580(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::~CoreStats(v1);
  _Unwind_Resume(a1);
}

void sub_1B2A99594(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*v1)
    HGStats::GraphStatsImpl::GraphStatsImpl(v2, *v1);
  _Unwind_Resume(exception_object);
}

char **HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::~CoreStats(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 80);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 72, *(_QWORD **)(a1 + 80));
  *(_QWORD *)(a1 + 72) = v2;
  *(_QWORD *)(a1 + 88) = 0;
  *v2 = 0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return __HGStats_private::OpStats<__HGStats_private::StatsProfile>::~OpStats((char **)a1);
}

void HGStats::GraphStatsImpl::merge(HGStats::GraphStatsImpl *this, const HGStats::UnitStatsImpl *a2)
{
  const HGStats::UnitStatsImpl *v4;
  __int128 v5;
  const HGStats::UnitStatsImpl *v6;
  const HGStats::UnitStatsImpl *v7;
  BOOL v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  int64x2_t v14;
  __int128 v15;
  __int128 v16;
  char *v17;

  __HGStats_private::OpStats<__HGStats_private::StatsProfile>::merge<__HGStats_private::StatsTimer>((uint64_t *)this + 1, a2);
  v4 = (const HGStats::UnitStatsImpl *)*((_QWORD *)a2 + 3);
  v17 = (char *)this + 32;
  if (v4 != (const HGStats::UnitStatsImpl *)((char *)a2 + 32))
  {
    do
    {
      v14.i64[0] = *((_QWORD *)v4 + 4);
      v14.i64[1] = (uint64_t)&off_1E6529A90;
      v5 = *((_OWORD *)v4 + 4);
      v15 = *((_OWORD *)v4 + 3);
      v16 = v5;
      __HGStats_private::MergeNodeStats<HGNode,__HGStats_private::StatsTimer,HGNode,__HGStats_private::StatsProfile>::operator()(&v17, &v14);
      v6 = (const HGStats::UnitStatsImpl *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(const HGStats::UnitStatsImpl **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const HGStats::UnitStatsImpl *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != (const HGStats::UnitStatsImpl *)((char *)a2 + 32));
  }
  v9 = (char *)*((_QWORD *)a2 + 6);
  v10 = (char *)a2 + 56;
  v17 = (char *)this + 56;
  if (v9 != v10)
  {
    do
    {
      v11 = *((_OWORD *)v9 + 3);
      v14 = *((int64x2_t *)v9 + 2);
      v15 = v11;
      __HGStats_private::MergeRoiStats<HGNode,HGNode>::operator()(&v17, &v14);
      v12 = (char *)*((_QWORD *)v9 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (char *)*((_QWORD *)v9 + 2);
          v8 = *(_QWORD *)v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v8);
      }
      v9 = v13;
    }
    while (v13 != v10);
  }
}

uint64_t __HGStats_private::OpStats<__HGStats_private::StatsProfile>::merge<__HGStats_private::StatsTimer>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v4 = *a2;
  v5 = *a1;
  *(double *)(v5 + 8) = (*(double (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2) + *(double *)(v5 + 8);
  *(_QWORD *)(v5 + 16) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  *(_QWORD *)(v5 + 24) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  *(_QWORD *)(v5 + 32) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v6 = *a1;
  v7 = *a2 + 40;
  *(double *)(v6 + 48) = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) + *(double *)(v6 + 48);
  *(_QWORD *)(v6 + 56) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  *(_QWORD *)(v6 + 64) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  *(_QWORD *)(v6 + 72) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  v8 = *a1;
  v9 = *a2 + 80;
  *(double *)(v8 + 88) = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) + *(double *)(v8 + 88);
  *(_QWORD *)(v8 + 96) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  *(_QWORD *)(v8 + 104) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  *(_QWORD *)(v8 + 112) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  v10 = *a1;
  v11 = *a2 + 120;
  *(double *)(v10 + 128) = (*(double (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11) + *(double *)(v10 + 128);
  *(_QWORD *)(v10 + 136) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  *(_QWORD *)(v10 + 144) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  *(_QWORD *)(v10 + 152) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
  v12 = (_QWORD *)*a2;
  v13 = *a1;
  v14 = v12[20];
  v12 += 20;
  *(double *)(v13 + 168) = (*(double (**)(_QWORD *))(v14 + 24))(v12) + *(double *)(v13 + 168);
  *(_QWORD *)(v13 + 176) += (*(uint64_t (**)(_QWORD *))(*v12 + 32))(v12);
  *(_QWORD *)(v13 + 184) += (*(uint64_t (**)(_QWORD *))(*v12 + 40))(v12);
  result = (*(uint64_t (**)(_QWORD *))(*v12 + 48))(v12);
  *(_QWORD *)(v13 + 192) += result;
  return result;
}

void HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::clear(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  void (**v9)(char *);
  BOOL v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  void (**v15)(char *);
  _QWORD *v16;
  _QWORD *v17;

  v2 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  if (*(char **)a1 == v3)
  {
    v6 = *(char **)a1;
  }
  else
  {
    v4 = *(char **)a1;
    do
    {
      v5 = *(_QWORD *)v4;
      v4 += 40;
      (*(void (**)(char *))(v5 + 16))(v2);
      v2 = v4;
    }
    while (v4 != v3);
    v2 = *(char **)a1;
    v6 = *(char **)(a1 + 8);
    if (v6 == *(char **)a1)
    {
      v2 = *(char **)(a1 + 8);
    }
    else
    {
      v7 = v6 - 40;
      v8 = v6 - 40;
      do
      {
        v9 = *(void (***)(char *))v8;
        v8 -= 40;
        (*v9)(v7);
        v10 = v7 == v2;
        v7 = v8;
      }
      while (!v10);
      v6 = *(char **)a1;
    }
  }
  *(_QWORD *)(a1 + 8) = v2;
  v11 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v6) >> 3);
  if (v11 > 4)
  {
    if (v2 - v6 != 200)
    {
      v12 = v6 + 200;
      if (v2 != v6 + 200)
      {
        v13 = v2 - 40;
        v14 = v13;
        do
        {
          v15 = *(void (***)(char *))v14;
          v14 -= 40;
          (*v15)(v13);
          v10 = v13 == v12;
          v13 = v14;
        }
        while (!v10);
      }
      *(_QWORD *)(a1 + 8) = v12;
    }
  }
  else
  {
    std::vector<__HGStats_private::StatsProfile>::__append((void **)a1, 5 - v11);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 56) = 0;
  v17 = *(_QWORD **)(a1 + 80);
  v16 = (_QWORD *)(a1 + 80);
  *(v16 - 2) = 0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v16 - 1), v17);
  *(v16 - 1) = v16;
  *v16 = 0;
  v16[1] = 0;
}

void HGStats::GraphStatsImpl::dump(uint64_t a1, _QWORD *a2, __int16 a3)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  double v17;
  _QWORD *v18;
  __int16 v19;
  uint64_t v20;
  double v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  __int16 v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  void (**v44)(__HGStats_private::StatsProfile *__hidden);
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];
  void (**v48)(__HGStats_private::StatsProfile *__hidden);
  __int128 v49;
  __int128 v50;
  void (**v51)(__HGStats_private::StatsProfile *__hidden);
  __int128 v52;
  __int128 v53;
  _QWORD v54[2];
  __int128 v55;
  __int128 v56;
  void (**v57)(__HGStats_private::StatsProfile *__hidden);
  __int128 v58;
  __int128 v59;
  void (**v60)(__HGStats_private::StatsProfile *__hidden);
  __int128 v61;
  __int128 v62;

  HGProfiler::getTime(*(HGProfiler **)a1);
  if ((a3 & 0x100) != 0)
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"+ Helium Graph Render Time : ", 29);
    v7 = *v6;
    *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 24) = 7;
    *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 16) = 2;
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ms\n", 4);
  }
  if ((a3 & 0xFE00) != 0)
  {
    v35 = a3;
    v36 = a2;
    v9 = *(_QWORD **)(a1 + 32);
    v34 = (_QWORD *)a1;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    if (v9 != (_QWORD *)(a1 + 40))
    {
      do
      {
        *(_QWORD *)&v47[0] = &off_1E6529B60;
        *((_QWORD *)&v47[0] + 1) = &off_1E6529AD8;
        v47[1] = v41;
        v47[2] = v42;
        v49 = v39;
        v50 = v40;
        v48 = &off_1E6529AD8;
        v51 = &off_1E6529AD8;
        v52 = v37;
        v53 = v38;
        v43 = (_QWORD *)v9[4];
        v44 = &off_1E6529AD8;
        v10 = *((_OWORD *)v9 + 4);
        v45 = *((_OWORD *)v9 + 3);
        v46 = v10;
        __HGStats_private::ReadRenderAccumulator<HGNode,__HGStats_private::StatsProfile>::operator()((uint64_t)v47, &v43, (uint64_t)v54);
        v41 = v55;
        v42 = v56;
        v39 = v58;
        v40 = v59;
        v37 = v61;
        v38 = v62;
        v11 = (_QWORD *)v9[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v9[2];
            v13 = *v12 == (_QWORD)v9;
            v9 = v12;
          }
          while (!v13);
        }
        v9 = v12;
      }
      while (v12 != (_QWORD *)(a1 + 40));
    }
    v14 = (uint64_t *)(a1 + 8);
    v54[0] = &off_1E6529B60;
    v54[1] = &off_1E6529AD8;
    v55 = v41;
    v56 = v42;
    v58 = v39;
    v59 = v40;
    v57 = &off_1E6529AD8;
    v60 = &off_1E6529AD8;
    v61 = v37;
    v62 = v38;
    v16 = *(_QWORD **)(a1 + 8);
    v15 = *(_QWORD **)(a1 + 16);
    v17 = 0.0;
    if (v16 == v15)
    {
      v19 = a3;
    }
    else
    {
      v18 = *(_QWORD **)(a1 + 8);
      v19 = v35;
      do
      {
        v17 = v17 + (*(double (**)(_QWORD *))(*v16 + 24))(v16);
        (*(void (**)(_QWORD *))(*v16 + 32))(v16);
        (*(void (**)(_QWORD *))(*v16 + 40))(v16);
        v20 = *v18;
        v18 += 5;
        (*(void (**)(_QWORD *))(v20 + 48))(v16);
        v16 = v18;
      }
      while (v18 != v15);
    }
    v21 = *(double *)&v61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"/----- Graph Render Stats:\n", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"|\n", 2);
    if ((v19 & 0x200) != 0)
    {
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"|", 1);
      *(_QWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 24) = 16;
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"wall time", 9);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" : ", 3);
      v25 = *v24;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 8) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(*v24 - 24) + 8) & 0xFFFFFEFB | 4;
      *(uint64_t *)((char *)v24 + *(_QWORD *)(v25 - 24) + 24) = 7;
      *(uint64_t *)((char *)v24 + *(_QWORD *)(v25 - 24) + 16) = 2;
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ms\n", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"|\n", 2);
      HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::printOpStats(v14, v36, (uint64_t)v54, v17 + v21);
      if ((v19 & 0x800) == 0)
      {
LABEL_20:
        if ((v19 & 0x1000) == 0)
          goto LABEL_21;
        goto LABEL_28;
      }
    }
    else if ((v19 & 0x800) == 0)
    {
      goto LABEL_20;
    }
    HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::printNodeStats((uint64_t)v14, v36, (uint64_t)v54);
    if ((v19 & 0x1000) == 0)
    {
LABEL_21:
      if ((v19 & 0x2000) == 0)
        goto LABEL_22;
      goto LABEL_38;
    }
LABEL_28:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"| -- node ROI pixels (defined & used pixels per node):\n", 55);
    v27 = *(_QWORD **)(a1 + 80);
    v43 = v36;
    if (v27 != v34 + 11)
    {
      do
      {
        *(_QWORD *)&v47[0] = v27[4];
        *(_OWORD *)((char *)v47 + 8) = *(_OWORD *)(v27 + 5);
        __HGStats_private::NodePixelsPrinter<HGNode>::operator()(&v43, (uint64_t *)v47);
        v28 = (_QWORD *)v27[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v27[2];
            v13 = *v29 == (_QWORD)v27;
            v27 = v29;
          }
          while (!v13);
        }
        v27 = v29;
      }
      while (v29 != v34 + 11);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"|\n", 2);
    if ((v19 & 0x2000) == 0)
    {
LABEL_22:
      if ((v19 & 0x400) == 0)
      {
LABEL_24:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\\----------------- \n\n", 21);
        return;
      }
LABEL_23:
      HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::printCondensed((uint64_t)v14, v36, (uint64_t)v54);
      goto LABEL_24;
    }
LABEL_38:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"| -- node in-N-out ROI ratios (per input):\n", 43);
    v30 = (_QWORD *)v34[7];
    v43 = v36;
    v44 = 0;
    if (v30 != v34 + 8)
    {
      do
      {
        v31 = *((_OWORD *)v30 + 3);
        v47[0] = *((_OWORD *)v30 + 2);
        v47[1] = v31;
        __HGStats_private::InOutRoiStatsPrinter<HGNode>::operator()(&v43, (uint64_t *)v47);
        v32 = (_QWORD *)v30[1];
        if (v32)
        {
          do
          {
            v33 = v32;
            v32 = (_QWORD *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = (_QWORD *)v30[2];
            v13 = *v33 == (_QWORD)v30;
            v30 = v33;
          }
          while (!v13);
        }
        v30 = v33;
      }
      while (v33 != v34 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"|\n", 2);
    if ((v19 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
}

double __HGStats_private::RRStatsProfile::time(__HGStats_private::RRStatsProfile *this)
{
  return *((double *)this + 12);
}

_QWORD *HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::printOpStats(uint64_t *a1, _QWORD *a2, uint64_t a3, double a4)
{
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  size_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  size_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 16;
  v9 = strlen(__HGStats_private::opNames[0]);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__HGStats_private::opNames[0], v9);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" : ", 3);
  v52 = *a1;
  v53 = v52;
  v54 = a4;
  v55 = v52;
  v56 = v52;
  v57 = v52;
  v12 = __HGStats_private::operator<<(v11, &v52);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 24) = 16;
  v14 = strlen(off_1EF06ED98[0]);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)off_1EF06ED98[0], v14);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" : ", 3);
  v52 = *a1 + 40;
  v53 = v52;
  v54 = a4;
  v55 = v52;
  v56 = v52;
  v57 = v52;
  v17 = __HGStats_private::operator<<(v16, &v52);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 24) = 16;
  v19 = strlen(off_1EF06EDA0[0]);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)off_1EF06EDA0[0], v19);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" : ", 3);
  v52 = *a1 + 80;
  v53 = v52;
  v54 = a4;
  v55 = v52;
  v56 = v52;
  v57 = v52;
  v22 = __HGStats_private::operator<<(v21, &v52);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\n", 1);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
  *(_QWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 24) = 16;
  v24 = strlen(off_1EF06EDA8[0]);
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)off_1EF06EDA8[0], v24);
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" : ", 3);
  v52 = *a1 + 120;
  v53 = v52;
  v54 = a4;
  v55 = v52;
  v56 = v52;
  v57 = v52;
  v27 = __HGStats_private::operator<<(v26, &v52);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n", 1);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
  *(_QWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 24) = 16;
  v29 = strlen(off_1EF06EDB0);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)off_1EF06EDB0, v29);
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" : ", 3);
  v52 = *a1 + 160;
  v53 = v52;
  v54 = a4;
  v55 = v52;
  v56 = v52;
  v57 = v52;
  v32 = __HGStats_private::operator<<(v31, &v52);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n", 1);
  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
  *(_QWORD *)((char *)v33 + *(_QWORD *)(*v33 - 24) + 24) = 16;
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"process", 7);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" : ", 3);
  v51[0] = a3 + 88;
  v51[1] = a3 + 88;
  *(double *)&v51[2] = a4;
  v51[3] = a3 + 88;
  v51[4] = a3 + 88;
  v51[5] = a3 + 88;
  v36 = __HGStats_private::operator<<(v35, v51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
  v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|      total time : ", 20);
  v38 = *v37;
  *(_DWORD *)((char *)v37 + *(_QWORD *)(*v37 - 24) + 8) = *(_DWORD *)((_BYTE *)v37 + *(_QWORD *)(*v37 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v37 + *(_QWORD *)(v38 - 24) + 24) = 7;
  *(uint64_t *)((char *)v37 + *(_QWORD *)(v38 - 24) + 16) = 2;
  v39 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" ms\n", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"| -- process time breakdown:\n", 29);
  v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
  *(_QWORD *)((char *)v40 + *(_QWORD *)(*v40 - 24) + 24) = 16;
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"read", 4);
  v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" : ", 3);
  v50[0] = a3 + 48;
  v50[1] = a3 + 48;
  *(double *)&v50[2] = a4;
  v50[3] = a3 + 48;
  v50[4] = a3 + 48;
  v50[5] = a3 + 48;
  v43 = __HGStats_private::operator<<(v42, v50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\n", 1);
  v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|", 1);
  *(_QWORD *)((char *)v44 + *(_QWORD *)(*v44 - 24) + 24) = 16;
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"render", 6);
  v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" : ", 3);
  v49[0] = a3 + 8;
  v49[1] = a3 + 8;
  *(double *)&v49[2] = a4;
  v49[3] = a3 + 8;
  v49[4] = a3 + 8;
  v49[5] = a3 + 8;
  v47 = __HGStats_private::operator<<(v46, v49);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"\n", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|\n", 2);
}

_QWORD *HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::printNodeStats(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v18;
  void (**v19)(__HGStats_private::StatsProfile *__hidden);
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"| -- per node process times:\n", 29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"| read:\n", 8);
  v7 = *(_QWORD **)(a1 + 24);
  v8 = (_QWORD *)(a1 + 32);
  v22 = a2;
  v23 = a3;
  if (v7 != (_QWORD *)(a1 + 32))
  {
    do
    {
      v18 = (_QWORD *)v7[4];
      v19 = &off_1E6529AD8;
      v9 = *((_OWORD *)v7 + 4);
      v20 = *((_OWORD *)v7 + 3);
      v21 = v9;
      __HGStats_private::NodeStatsPrinter<HGNode,__HGStats_private::StatsTimer,(__HGStats_private::NodeStatsType)1>::operator()(&v22, &v18);
      v10 = (_QWORD *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != v8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"| render:\n", 10);
  v13 = *(_QWORD **)(a1 + 24);
  v22 = a2;
  v23 = a3;
  if (v13 != v8)
  {
    do
    {
      v18 = (_QWORD *)v13[4];
      v19 = &off_1E6529AD8;
      v14 = *((_OWORD *)v13 + 4);
      v20 = *((_OWORD *)v13 + 3);
      v21 = v14;
      __HGStats_private::NodeStatsPrinter<HGNode,__HGStats_private::StatsTimer,(__HGStats_private::NodeStatsType)0>::operator()(&v22, &v18);
      v15 = (_QWORD *)v13[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v13[2];
          v12 = *v16 == (_QWORD)v13;
          v13 = v16;
        }
        while (!v12);
      }
      v13 = v16;
    }
    while (v16 != v8);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|\n", 2);
}

_QWORD *HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::printCondensed(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (**v24)(__HGStats_private::StatsProfile *__hidden);
  __int128 v25;
  __int128 v26;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"| -- per node stats breakdown:\n", 31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"| read:\n", 8);
  v6 = a1 + 72;
  v7 = *(_QWORD **)(a1 + 24);
  v8 = a1 + 48;
  v9 = (_QWORD *)(a1 + 32);
  v19 = a2;
  v20 = a3;
  v21 = a1 + 72;
  v22 = a1 + 48;
  if (v7 != (_QWORD *)(a1 + 32))
  {
    do
    {
      v23 = v7[4];
      v24 = &off_1E6529AD8;
      v10 = *((_OWORD *)v7 + 4);
      v25 = *((_OWORD *)v7 + 3);
      v26 = v10;
      __HGStats_private::NodeStatsVerbosePrinter<HGNode,__HGStats_private::StatsProfile,(__HGStats_private::NodeStatsType)1>::operator()(&v19, &v23);
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v13 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v13);
      }
      v7 = v12;
    }
    while (v12 != v9);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"| render:\n", 10);
  v14 = *(_QWORD **)(a1 + 24);
  v19 = a2;
  v20 = a3;
  v21 = v6;
  v22 = v8;
  if (v14 != v9)
  {
    do
    {
      v23 = v14[4];
      v24 = &off_1E6529AD8;
      v15 = *((_OWORD *)v14 + 4);
      v25 = *((_OWORD *)v14 + 3);
      v26 = v15;
      __HGStats_private::NodeStatsVerbosePrinter<HGNode,__HGStats_private::StatsProfile,(__HGStats_private::NodeStatsType)0>::operator()(&v19, &v23);
      v16 = (_QWORD *)v14[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v14[2];
          v13 = *v17 == (_QWORD)v14;
          v14 = v17;
        }
        while (!v13);
      }
      v14 = v17;
    }
    while (v17 != v9);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|\n", 2);
}

uint64_t HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::probes(uint64_t a1)
{
  _QWORD *v1;
  __int128 v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void (**v31)(__HGStats_private::StatsProfile *__hidden);
  double v32;
  __int128 v33;
  __int128 v34;
  void (**v35)(__HGStats_private::StatsProfile *__hidden);
  void (**v36)(__HGStats_private::StatsProfile *__hidden);
  __int128 v37;
  __int128 v38;
  void (**v39)(__HGStats_private::StatsProfile *__hidden);
  __int128 v40;
  __int128 v41;
  void (**v42)(__HGStats_private::StatsProfile *__hidden);
  __int128 v43;
  __int128 v44;
  _QWORD v45[2];
  __int128 v46;
  __int128 v47;
  void (**v48)(__HGStats_private::StatsProfile *__hidden);
  __int128 v49;
  __int128 v50;
  void (**v51)(__HGStats_private::StatsProfile *__hidden);
  __int128 v52;
  __int128 v53;

  v1 = *(_QWORD **)(a1 + 24);
  v25 = 0u;
  v26 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v24 = (_QWORD *)(a1 + 32);
  if (v1 != (_QWORD *)(a1 + 32))
  {
    do
    {
      v35 = &off_1E6529B60;
      v36 = &off_1E6529AD8;
      v37 = v25;
      v38 = v26;
      v40 = v29;
      v41 = v30;
      v39 = &off_1E6529AD8;
      v42 = &off_1E6529AD8;
      v43 = v27;
      v44 = v28;
      v31 = (void (**)(__HGStats_private::StatsProfile *__hidden))v1[4];
      v32 = COERCE_DOUBLE(&off_1E6529AD8);
      v2 = *((_OWORD *)v1 + 4);
      v33 = *((_OWORD *)v1 + 3);
      v34 = v2;
      __HGStats_private::ReadRenderAccumulator<HGNode,__HGStats_private::StatsProfile>::operator()((uint64_t)&v35, &v31, (uint64_t)v45);
      v25 = v46;
      v26 = v47;
      v29 = v49;
      v30 = v50;
      v27 = v52;
      v28 = v53;
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v24);
  }
  v45[0] = &off_1E6529B60;
  v45[1] = &off_1E6529AD8;
  v46 = v25;
  v47 = v26;
  v49 = v29;
  v50 = v30;
  v48 = &off_1E6529AD8;
  v51 = &off_1E6529AD8;
  v52 = v27;
  v53 = v28;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v6)
  {
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v11 = 0.0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0.0;
    v12 = *(_QWORD **)a1;
    do
    {
      v11 = v11 + (*(double (**)(_QWORD *))(*v7 + 24))(v7);
      v10 += (*(uint64_t (**)(_QWORD *))(*v7 + 32))(v7);
      v9 += (*(uint64_t (**)(_QWORD *))(*v7 + 40))(v7);
      v13 = *v12;
      v12 += 5;
      v8 += (*(uint64_t (**)(_QWORD *))(v13 + 48))(v7);
      v7 = v12;
    }
    while (v12 != v6);
    v7 = *(_QWORD **)a1;
  }
  v35 = &off_1E6529AD8;
  v36 = *(void (***)(__HGStats_private::StatsProfile *__hidden))&v11;
  *(_QWORD *)&v37 = v10;
  *((_QWORD *)&v37 + 1) = v9;
  *(_QWORD *)&v38 = v8;
  v14 = v49;
  v15 = v50;
  v17 = v7[5];
  v16 = v7 + 5;
  v18 = *(double *)&v14 + (*(double (**)(_QWORD *))(v17 + 24))(v16);
  v19 = (*(uint64_t (**)(_QWORD *))(*v16 + 32))(v16) + *((_QWORD *)&v14 + 1);
  v20 = (*(uint64_t (**)(_QWORD *))(*v16 + 40))(v16) + v15;
  v21 = (*(uint64_t (**)(_QWORD *))(*v16 + 48))(v16);
  v31 = &off_1E6529AD8;
  v32 = v18;
  *(_QWORD *)&v33 = v19;
  *((_QWORD *)&v33 + 1) = v20;
  *(_QWORD *)&v34 = v21 + *((_QWORD *)&v15 + 1);
  ((double (*)(__HGStats_private::StatsProfile *))v35[3])((__HGStats_private::StatsProfile *)&v35);
  ((uint64_t (*)(__HGStats_private::StatsProfile *))v35[4])((__HGStats_private::StatsProfile *)&v35);
  ((uint64_t (*)(__HGStats_private::StatsProfile *))v35[5])((__HGStats_private::StatsProfile *)&v35);
  v35[6]((__HGStats_private::StatsProfile *)&v35);
  return 0;
}

void HGStats::RendererStatsImpl::merge(HGStats::RendererStatsImpl *this, HGProfiler **a2)
{
  const HGStats::GraphStatsImpl *v4;
  int64x2_t v5;
  const HGStats::GraphStatsImpl *v6;
  const HGStats::GraphStatsImpl *v7;
  BOOL v8;
  const HGStats::GraphStatsImpl *v9;
  int64x2_t v10;
  const HGStats::GraphStatsImpl *v11;
  const HGStats::GraphStatsImpl *v12;
  HGProfiler *v13;
  char *v14;
  HGProfiler *v15;
  HGProfiler *v16;
  int64x2_t v17[3];
  char *v18;

  ++*(_QWORD *)this;
  *((double *)this + 1) = HGProfiler::getTime(*a2) + *((double *)this + 1);
  __HGStats_private::OpStats<__HGStats_private::StatsProfile>::merge<__HGStats_private::StatsTimer>((uint64_t *)this + 2, a2 + 1);
  v4 = a2[4];
  v18 = (char *)this + 40;
  if (v4 != (const HGStats::GraphStatsImpl *)(a2 + 5))
  {
    do
    {
      v17[0].i64[0] = *((_QWORD *)v4 + 4);
      v17[0].i64[1] = (uint64_t)&off_1E6529AD8;
      v5 = *((int64x2_t *)v4 + 4);
      v17[1] = *((int64x2_t *)v4 + 3);
      v17[2] = v5;
      __HGStats_private::MergeNodeStats<HGNode,__HGStats_private::StatsProfile,std::type_info const,__HGStats_private::StatsProfile>::operator()(&v18, v17);
      v6 = (const HGStats::GraphStatsImpl *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(const HGStats::GraphStatsImpl **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const HGStats::GraphStatsImpl *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != (const HGStats::GraphStatsImpl *)(a2 + 5));
  }
  v9 = a2[7];
  v18 = (char *)this + 64;
  if (v9 != (const HGStats::GraphStatsImpl *)(a2 + 8))
  {
    do
    {
      v10 = *((int64x2_t *)v9 + 3);
      v17[0] = *((int64x2_t *)v9 + 2);
      v17[1] = v10;
      __HGStats_private::MergeRoiStats<HGNode,std::type_info const>::operator()(&v18, v17);
      v11 = (const HGStats::GraphStatsImpl *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(const HGStats::GraphStatsImpl **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const HGStats::GraphStatsImpl *)*((_QWORD *)v9 + 2);
          v8 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v8);
      }
      v9 = v12;
    }
    while (v12 != (const HGStats::GraphStatsImpl *)(a2 + 8));
  }
  v13 = a2[10];
  v14 = (char *)(a2 + 11);
  v18 = (char *)this + 88;
  if (v13 != (HGProfiler *)v14)
  {
    do
    {
      v17[0].i64[0] = *((_QWORD *)v13 + 4);
      *(int64x2_t *)((char *)v17 + 8) = *(int64x2_t *)((char *)v13 + 40);
      __HGStats_private::MergeNodePixels<HGNode,std::type_info const>::operator()(&v18, (uint64_t)v17);
      v15 = (HGProfiler *)*((_QWORD *)v13 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(HGProfiler **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (HGProfiler *)*((_QWORD *)v13 + 2);
          v8 = *(_QWORD *)v16 == (_QWORD)v13;
          v13 = v16;
        }
        while (!v8);
      }
      v13 = v16;
    }
    while (v16 != (HGProfiler *)v14);
  }
}

_QWORD *HGStats::RendererStatsImpl::dump(_QWORD *result, _QWORD *a2, int a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  double v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  double v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  void (**v49)(__HGStats_private::StatsProfile *__hidden);
  __int128 v50;
  __int128 v51;
  _OWORD v52[3];
  void (**v53)(__HGStats_private::StatsProfile *__hidden);
  __int128 v54;
  __int128 v55;
  void (**v56)(__HGStats_private::StatsProfile *__hidden);
  __int128 v57;
  __int128 v58;
  _QWORD v59[2];
  __int128 v60;
  __int128 v61;
  void (**v62)(__HGStats_private::StatsProfile *__hidden);
  __int128 v63;
  __int128 v64;
  void (**v65)(__HGStats_private::StatsProfile *__hidden);
  __int128 v66;
  __int128 v67;

  v5 = result;
  if ((a3 & 0x10000) != 0)
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"+ Total Renderer Stats (avg time) : ", 36);
    v7 = *v6;
    *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 24) = 7;
    *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 16) = 2;
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ms (", 5);
    v9 = (_QWORD *)std::ostream::operator<<();
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)")\n", 2);
  }
  if ((a3 & 0xFE0000) != 0)
  {
    v39 = a3;
    v10 = (_QWORD *)v5[5];
    v38 = v5;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = a2;
    v41 = v5 + 6;
    if (v10 != v5 + 6)
    {
      do
      {
        *(_QWORD *)&v52[0] = &off_1E6529B60;
        *((_QWORD *)&v52[0] + 1) = &off_1E6529AD8;
        v52[1] = v46;
        v52[2] = v47;
        v54 = v44;
        v55 = v45;
        v53 = &off_1E6529AD8;
        v56 = &off_1E6529AD8;
        v57 = v42;
        v58 = v43;
        v48 = (_QWORD *)v10[4];
        v49 = &off_1E6529AD8;
        v11 = *((_OWORD *)v10 + 4);
        v50 = *((_OWORD *)v10 + 3);
        v51 = v11;
        __HGStats_private::ReadRenderAccumulator<std::type_info const,__HGStats_private::StatsProfile>::operator()((uint64_t)v52, &v48, (uint64_t)v59);
        v46 = v60;
        v47 = v61;
        v44 = v63;
        v45 = v64;
        v42 = v66;
        v43 = v67;
        v12 = (_QWORD *)v10[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v10[2];
            v14 = *v13 == (_QWORD)v10;
            v10 = v13;
          }
          while (!v14);
        }
        v10 = v13;
      }
      while (v13 != v41);
    }
    v15 = v5 + 2;
    v59[0] = &off_1E6529B60;
    v59[1] = &off_1E6529AD8;
    v60 = v46;
    v61 = v47;
    v63 = v44;
    v64 = v45;
    v62 = &off_1E6529AD8;
    v65 = &off_1E6529AD8;
    v66 = v42;
    v67 = v43;
    v17 = (_QWORD *)v5[2];
    v16 = (_QWORD *)v5[3];
    v18 = 0.0;
    if (v17 == v16)
    {
      v20 = v40;
      v21 = a3;
    }
    else
    {
      v19 = (_QWORD *)*v15;
      v20 = v40;
      v21 = v39;
      do
      {
        v18 = v18 + (*(double (**)(_QWORD *))(*v17 + 24))(v17);
        (*(void (**)(_QWORD *))(*v17 + 32))(v17);
        (*(void (**)(_QWORD *))(*v17 + 40))(v17);
        v22 = *v19;
        v19 += 5;
        (*(void (**)(_QWORD *))(v22 + 48))(v17);
        v17 = v19;
      }
      while (v19 != v16);
    }
    v23 = *(double *)&v66;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"/----- Total Renderer Stats:\n", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"|\n", 2);
    if ((v21 & 0x20000) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"| # of renders : ", 17);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
      v25 = *v20;
      *(_DWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v20 + *(_QWORD *)(*v20 - 24) + 8) & 0xFFFFFEFB | 4;
      *(_QWORD *)((char *)v20 + *(_QWORD *)(v25 - 24) + 24) = 7;
      *(_QWORD *)((char *)v20 + *(_QWORD *)(v25 - 24) + 16) = 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"|  wall time : ", 15);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ms -> ", 7);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ms/render\n", 11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"| total time : ", 15);
      v28 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ms -> ", 7);
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" ms/render\n", 11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"|\n", 2);
      HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::printOpStats(v15, v20, (uint64_t)v59, v18 + v23);
      if ((v21 & 0x80000) == 0)
      {
LABEL_20:
        if ((v21 & 0x100000) == 0)
          goto LABEL_21;
        goto LABEL_28;
      }
    }
    else if ((v21 & 0x80000) == 0)
    {
      goto LABEL_20;
    }
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"| -- per node process times:\n", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"| read:\n", 8);
    std::for_each[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<std::type_info const*,__HGStats_private::StatsProfile>,std::__tree_node<std::__value_type<std::type_info const*,__HGStats_private::StatsProfile>,void *> *,long>>,__HGStats_private::NodeStatsPrinter<std::type_info const,__HGStats_private::StatsProfile,(__HGStats_private::NodeStatsType)1>>((_QWORD *)v5[5], v41, v20, (uint64_t)v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"| render:\n", 10);
    std::for_each[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<std::type_info const*,__HGStats_private::StatsProfile>,std::__tree_node<std::__value_type<std::type_info const*,__HGStats_private::StatsProfile>,void *> *,long>>,__HGStats_private::NodeStatsPrinter<std::type_info const,__HGStats_private::StatsProfile,(__HGStats_private::NodeStatsType)0>>((_QWORD *)v5[5], v41, v20, (uint64_t)v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"|\n", 2);
    if ((v21 & 0x100000) == 0)
    {
LABEL_21:
      if ((v21 & 0x200000) == 0)
        goto LABEL_22;
      goto LABEL_38;
    }
LABEL_28:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"| -- node ROI pixels (defined & used pixels per node):\n", 55);
    v31 = (_QWORD *)v5[11];
    v48 = v20;
    if (v31 != v38 + 12)
    {
      do
      {
        *(_QWORD *)&v52[0] = v31[4];
        *(_OWORD *)((char *)v52 + 8) = *(_OWORD *)(v31 + 5);
        __HGStats_private::NodePixelsPrinter<std::type_info const>::operator()(&v48, (uint64_t *)v52);
        v32 = (_QWORD *)v31[1];
        if (v32)
        {
          do
          {
            v33 = v32;
            v32 = (_QWORD *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = (_QWORD *)v31[2];
            v14 = *v33 == (_QWORD)v31;
            v31 = v33;
          }
          while (!v14);
        }
        v31 = v33;
      }
      while (v33 != v38 + 12);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"|\n", 2);
    if ((v21 & 0x200000) == 0)
    {
LABEL_22:
      if ((v21 & 0x40000) == 0)
        return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\\----------------- \n\n", 21);
LABEL_23:
      HGStats::CoreStats<std::type_info const,__HGStats_private::StatsProfile>::printCondensed((uint64_t)v15, v20, (uint64_t)v59);
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\\----------------- \n\n", 21);
    }
LABEL_38:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"| -- node in-N-out ROI ratios (per input):\n", 43);
    v34 = (_QWORD *)v38[8];
    v48 = v20;
    v49 = 0;
    if (v34 != v38 + 9)
    {
      do
      {
        v35 = *((_OWORD *)v34 + 3);
        v52[0] = *((_OWORD *)v34 + 2);
        v52[1] = v35;
        __HGStats_private::InOutRoiStatsPrinter<std::type_info const>::operator()(&v48, (uint64_t *)v52);
        v36 = (_QWORD *)v34[1];
        if (v36)
        {
          do
          {
            v37 = v36;
            v36 = (_QWORD *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (_QWORD *)v34[2];
            v14 = *v37 == (_QWORD)v34;
            v34 = v37;
          }
          while (!v14);
        }
        v34 = v37;
      }
      while (v37 != v38 + 9);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"|\n", 2);
    if ((v21 & 0x40000) == 0)
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\\----------------- \n\n", 21);
    goto LABEL_23;
  }
  return result;
}

_QWORD *HGStats::CoreStats<std::type_info const,__HGStats_private::StatsProfile>::printCondensed(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (**v24)(__HGStats_private::StatsProfile *__hidden);
  __int128 v25;
  __int128 v26;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"| -- per node stats breakdown:\n", 31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"| read:\n", 8);
  v6 = a1 + 72;
  v7 = *(_QWORD **)(a1 + 24);
  v8 = a1 + 48;
  v9 = (_QWORD *)(a1 + 32);
  v19 = a2;
  v20 = a3;
  v21 = a1 + 72;
  v22 = a1 + 48;
  if (v7 != (_QWORD *)(a1 + 32))
  {
    do
    {
      v23 = v7[4];
      v24 = &off_1E6529AD8;
      v10 = *((_OWORD *)v7 + 4);
      v25 = *((_OWORD *)v7 + 3);
      v26 = v10;
      __HGStats_private::NodeStatsVerbosePrinter<std::type_info const,__HGStats_private::StatsProfile,(__HGStats_private::NodeStatsType)1>::operator()(&v19, &v23);
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v13 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v13);
      }
      v7 = v12;
    }
    while (v12 != v9);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"| render:\n", 10);
  v14 = *(_QWORD **)(a1 + 24);
  v19 = a2;
  v20 = a3;
  v21 = v6;
  v22 = v8;
  if (v14 != v9)
  {
    do
    {
      v23 = v14[4];
      v24 = &off_1E6529AD8;
      v15 = *((_OWORD *)v14 + 4);
      v25 = *((_OWORD *)v14 + 3);
      v26 = v15;
      __HGStats_private::NodeStatsVerbosePrinter<std::type_info const,__HGStats_private::StatsProfile,(__HGStats_private::NodeStatsType)0>::operator()(&v19, &v23);
      v16 = (_QWORD *)v14[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v14[2];
          v13 = *v17 == (_QWORD)v14;
          v14 = v17;
        }
        while (!v13);
      }
      v14 = v17;
    }
    while (v17 != v9);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|\n", 2);
}

uint64_t HGStats::CoreStats<std::type_info const,__HGStats_private::StatsProfile>::probes(uint64_t a1)
{
  _QWORD *v1;
  __int128 v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void (**v31)(__HGStats_private::StatsProfile *__hidden);
  double v32;
  __int128 v33;
  __int128 v34;
  void (**v35)(__HGStats_private::StatsProfile *__hidden);
  void (**v36)(__HGStats_private::StatsProfile *__hidden);
  __int128 v37;
  __int128 v38;
  void (**v39)(__HGStats_private::StatsProfile *__hidden);
  __int128 v40;
  __int128 v41;
  void (**v42)(__HGStats_private::StatsProfile *__hidden);
  __int128 v43;
  __int128 v44;
  _QWORD v45[2];
  __int128 v46;
  __int128 v47;
  void (**v48)(__HGStats_private::StatsProfile *__hidden);
  __int128 v49;
  __int128 v50;
  void (**v51)(__HGStats_private::StatsProfile *__hidden);
  __int128 v52;
  __int128 v53;

  v1 = *(_QWORD **)(a1 + 24);
  v25 = 0u;
  v26 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v24 = (_QWORD *)(a1 + 32);
  if (v1 != (_QWORD *)(a1 + 32))
  {
    do
    {
      v35 = &off_1E6529B60;
      v36 = &off_1E6529AD8;
      v37 = v25;
      v38 = v26;
      v40 = v29;
      v41 = v30;
      v39 = &off_1E6529AD8;
      v42 = &off_1E6529AD8;
      v43 = v27;
      v44 = v28;
      v31 = (void (**)(__HGStats_private::StatsProfile *__hidden))v1[4];
      v32 = COERCE_DOUBLE(&off_1E6529AD8);
      v2 = *((_OWORD *)v1 + 4);
      v33 = *((_OWORD *)v1 + 3);
      v34 = v2;
      __HGStats_private::ReadRenderAccumulator<std::type_info const,__HGStats_private::StatsProfile>::operator()((uint64_t)&v35, &v31, (uint64_t)v45);
      v25 = v46;
      v26 = v47;
      v29 = v49;
      v30 = v50;
      v27 = v52;
      v28 = v53;
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v24);
  }
  v45[0] = &off_1E6529B60;
  v45[1] = &off_1E6529AD8;
  v46 = v25;
  v47 = v26;
  v49 = v29;
  v50 = v30;
  v48 = &off_1E6529AD8;
  v51 = &off_1E6529AD8;
  v52 = v27;
  v53 = v28;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v6)
  {
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v11 = 0.0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0.0;
    v12 = *(_QWORD **)a1;
    do
    {
      v11 = v11 + (*(double (**)(_QWORD *))(*v7 + 24))(v7);
      v10 += (*(uint64_t (**)(_QWORD *))(*v7 + 32))(v7);
      v9 += (*(uint64_t (**)(_QWORD *))(*v7 + 40))(v7);
      v13 = *v12;
      v12 += 5;
      v8 += (*(uint64_t (**)(_QWORD *))(v13 + 48))(v7);
      v7 = v12;
    }
    while (v12 != v6);
    v7 = *(_QWORD **)a1;
  }
  v35 = &off_1E6529AD8;
  v36 = *(void (***)(__HGStats_private::StatsProfile *__hidden))&v11;
  *(_QWORD *)&v37 = v10;
  *((_QWORD *)&v37 + 1) = v9;
  *(_QWORD *)&v38 = v8;
  v14 = v49;
  v15 = v50;
  v17 = v7[5];
  v16 = v7 + 5;
  v18 = *(double *)&v14 + (*(double (**)(_QWORD *))(v17 + 24))(v16);
  v19 = (*(uint64_t (**)(_QWORD *))(*v16 + 32))(v16) + *((_QWORD *)&v14 + 1);
  v20 = (*(uint64_t (**)(_QWORD *))(*v16 + 40))(v16) + v15;
  v21 = (*(uint64_t (**)(_QWORD *))(*v16 + 48))(v16);
  v31 = &off_1E6529AD8;
  v32 = v18;
  *(_QWORD *)&v33 = v19;
  *((_QWORD *)&v33 + 1) = v20;
  *(_QWORD *)&v34 = v21 + *((_QWORD *)&v15 + 1);
  ((double (*)(__HGStats_private::StatsProfile *))v35[3])((__HGStats_private::StatsProfile *)&v35);
  ((uint64_t (*)(__HGStats_private::StatsProfile *))v35[4])((__HGStats_private::StatsProfile *)&v35);
  ((uint64_t (*)(__HGStats_private::StatsProfile *))v35[5])((__HGStats_private::StatsProfile *)&v35);
  v35[6]((__HGStats_private::StatsProfile *)&v35);
  return 0;
}

HGStats::ProfilerScopeGuard *HGStats::ProfilerScopeGuard::ProfilerScopeGuard(HGStats::ProfilerScopeGuard *this, HGStats::UnitStatsImpl **a2, HGNode *a3, uint64_t a4)
{
  HGStats::UnitStatsImpl *v5;
  HGProfiler *Profiler;
  uint64_t v9;
  unint64_t *v10;
  uint64_t **v11;
  int64x2_t *v12;
  unint64_t v13;
  int64x2_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int64x2_t v17;

  v5 = *a2;
  if (*((_BYTE *)*a2 + 120))
  {
    *(_QWORD *)this = v5;
    Profiler = HGStats::UnitStatsImpl::getProfiler(v5, a3);
    *((_QWORD *)this + 1) = Profiler;
    v9 = *(_QWORD *)this;
    if (*(_BYTE *)(*(_QWORD *)this + 120))
    {
      v11 = (uint64_t **)(v9 + 32);
      v10 = *(unint64_t **)(v9 + 32);
      if (v10)
      {
        while (1)
        {
          while (1)
          {
            v12 = (int64x2_t *)v10;
            v13 = v10[4];
            if (v13 <= (unint64_t)a3)
              break;
            v10 = (unint64_t *)v12->i64[0];
            v11 = (uint64_t **)v12;
            if (!v12->i64[0])
              goto LABEL_10;
          }
          if (v13 >= (unint64_t)a3)
            break;
          v10 = (unint64_t *)v12->i64[1];
          if (!v10)
          {
            v11 = (uint64_t **)&v12->i64[1];
            goto LABEL_10;
          }
        }
      }
      else
      {
        v12 = (int64x2_t *)(v9 + 32);
LABEL_10:
        v14 = v12;
        v12 = (int64x2_t *)operator new(0x50uLL);
        v12[2].i64[0] = (uint64_t)a3;
        v12[2].i64[1] = (uint64_t)&off_1E6529A90;
        v12[3] = 0u;
        v12[4] = 0u;
        v12->i64[0] = 0;
        v12->i64[1] = 0;
        v12[1].i64[0] = (uint64_t)v14;
        *v11 = (uint64_t *)v12;
        v15 = **(_QWORD **)(v9 + 24);
        v16 = (uint64_t *)v12;
        if (v15)
        {
          *(_QWORD *)(v9 + 24) = v15;
          v16 = *v11;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v9 + 32), v16);
        ++*(_QWORD *)(v9 + 40);
        v9 = *(_QWORD *)this;
        Profiler = (HGProfiler *)*((_QWORD *)this + 1);
      }
      v12[3].i64[1] += a4;
      v17 = vdupq_n_s64(1uLL);
      v17.i64[0] = 16 * a4;
      v12[4] = vaddq_s64(v12[4], v17);
    }
    HGStats::UnitStatsImpl::start((HGStats::UnitStatsImpl *)v9, Profiler);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

HGStats::UnitStatsImpl **HGStats::ProfilerScopeGuard::ProfilerScopeGuard(HGStats::UnitStatsImpl **a1, HGStats::UnitStatsImpl **a2, unsigned int a3)
{
  HGStats::UnitStatsImpl *v4;
  uint64_t v5;
  HGProfiler *v6;
  HGProfiler **v7;
  HGProfiler *v8;

  v4 = *a2;
  if (*((_BYTE *)*a2 + 120))
  {
    *a1 = v4;
    v5 = *(_QWORD *)v4 + 40 * a3;
    v8 = *(HGProfiler **)(v5 + 8);
    v7 = (HGProfiler **)(v5 + 8);
    v6 = v8;
    if (!v8)
    {
      v6 = (HGProfiler *)operator new();
      HGProfiler::HGProfiler(v6);
      *v7 = v6;
      v4 = *a1;
    }
    a1[1] = v6;
    HGStats::UnitStatsImpl::start(v4, v6);
    return a1;
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1B2A9C8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

HGStats::UnitStatsImpl **HGStats::ProfilerScopeGuard::ProfilerScopeGuard(HGStats::UnitStatsImpl **a1, HGStats::UnitStatsImpl **a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  HGStats::UnitStatsImpl *v6;
  uint64_t v10;
  HGProfiler *v11;
  HGProfiler **v12;
  HGProfiler *v13;
  int v15;
  uint64_t v16;
  int64x2_t v17;

  v6 = *a2;
  if (!*((_BYTE *)*a2 + 120))
  {
    *a1 = 0;
    return a1;
  }
  *a1 = v6;
  v10 = *(_QWORD *)v6 + 40 * a3;
  v13 = *(HGProfiler **)(v10 + 8);
  v12 = (HGProfiler **)(v10 + 8);
  v11 = v13;
  if (v13)
  {
    a1[1] = v11;
LABEL_6:
    v16 = *(_QWORD *)v6 + 40 * a3;
    *(_QWORD *)(v16 + 16) += a4;
    v17 = vdupq_n_s64(1uLL);
    v17.i64[0] = a5;
    *(int64x2_t *)(v16 + 24) = vaddq_s64(*(int64x2_t *)(v16 + 24), v17);
    goto LABEL_7;
  }
  v11 = (HGProfiler *)operator new();
  HGProfiler::HGProfiler(v11);
  *v12 = v11;
  v6 = *a1;
  v15 = *((unsigned __int8 *)*a1 + 120);
  a1[1] = v11;
  if (v15)
    goto LABEL_6;
LABEL_7:
  HGStats::UnitStatsImpl::start(v6, v11);
  return a1;
}

void sub_1B2A9C9B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

void HGStats::ProfilerScopeGuard::~ProfilerScopeGuard(HGStats::ProfilerScopeGuard *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this && *(_BYTE *)(v1 + 120))
  {
    HGProfiler::stop(*(HGProfiler **)(*(_QWORD *)(v1 + 104) - 8));
    v3 = *(_QWORD *)(v1 + 96);
    v2 = *(_QWORD *)(v1 + 104);
    *(_QWORD *)(v1 + 104) = v2 - 8;
    if (v3 != v2 - 8)
      HGProfiler::start(*(HGProfiler **)(v2 - 16));
  }
}

HGStats::UnitStats *HGStats::UnitStats::UnitStats(HGStats::UnitStats *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = 0;
  std::vector<__HGStats_private::StatsTimer>::__append((void **)v2, 5uLL);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 24) = v2 + 32;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = v2 + 56;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = v2 + 80;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)this = v2;
  return this;
}

void sub_1B2A9CAB8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  if (*v1)
    HGStats::UnitStats::UnitStats((uint64_t)v1, *v1);
  MEMORY[0x1B5E29170](v1, 0x10A0C40A0517958);
  _Unwind_Resume(a1);
}

void HGStats::UnitStats::~UnitStats(HGStats::UnitStats *this)
{
  uint64_t v1;
  void *v2;
  char **v3;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = *(void **)(v1 + 96);
    if (v2)
    {
      *(_QWORD *)(v1 + 104) = v2;
      operator delete(v2);
    }
    v3 = HGStats::CoreStats<HGNode,__HGStats_private::StatsTimer>::~CoreStats(v1);
    MEMORY[0x1B5E29170](v3, 0x10A0C40A0517958);
  }
}

uint64_t HGStats::UnitStats::enable(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 120) = a2;
  return this;
}

void HGStats::UnitStats::start(HGStats::UnitStatsImpl **a1, unsigned int a2)
{
  HGStats::UnitStatsImpl *v3;
  uint64_t v4;
  HGProfiler *v5;
  HGProfiler **v6;
  HGProfiler *v7;

  v3 = *a1;
  v4 = *(_QWORD *)v3 + 40 * a2;
  v7 = *(HGProfiler **)(v4 + 8);
  v6 = (HGProfiler **)(v4 + 8);
  v5 = v7;
  if (!v7)
  {
    v5 = (HGProfiler *)operator new();
    HGProfiler::HGProfiler(v5);
    *v6 = v5;
    v3 = *a1;
  }
  HGStats::UnitStatsImpl::start(v3, v5);
}

void sub_1B2A9CBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

void HGStats::UnitStats::stop(uint64_t a1, unsigned int a2)
{
  _QWORD *v2;
  uint64_t v3;
  HGProfiler **v4;
  uint64_t v5;
  HGProfiler *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)a1;
  v3 = **(_QWORD **)a1 + 40 * a2;
  v5 = *(_QWORD *)(v3 + 8);
  v4 = (HGProfiler **)(v3 + 8);
  if (v5)
  {
    if (!*((_BYTE *)v2 + 120))
      return;
  }
  else
  {
    v7 = (HGProfiler *)operator new();
    HGProfiler::HGProfiler(v7);
    *v4 = v7;
    v2 = *(_QWORD **)a1;
    if (!*(_BYTE *)(*(_QWORD *)a1 + 120))
      return;
  }
  HGProfiler::stop(*(HGProfiler **)(v2[13] - 8));
  v9 = v2[12];
  v8 = v2[13];
  v2[13] = v8 - 8;
  if (v9 != v8 - 8)
    HGProfiler::start(*(HGProfiler **)(v8 - 16));
}

void sub_1B2A9CC98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

uint64_t *HGStats::UnitStats::readTile(uint64_t *this, HGNode *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t *v8;
  uint64_t **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;

  v4 = *this;
  if (*(_BYTE *)(*this + 120))
  {
    v9 = (uint64_t **)(v4 + 32);
    v8 = *(unint64_t **)(v4 + 32);
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          v10 = v8;
          v11 = v8[4];
          if (v11 <= (unint64_t)a2)
            break;
          v8 = (unint64_t *)*v10;
          v9 = (uint64_t **)v10;
          if (!*v10)
            goto LABEL_9;
        }
        if (v11 >= (unint64_t)a2)
          break;
        v8 = (unint64_t *)v10[1];
        if (!v8)
        {
          v9 = (uint64_t **)(v10 + 1);
          goto LABEL_9;
        }
      }
    }
    else
    {
      v10 = (_QWORD *)(v4 + 32);
LABEL_9:
      v12 = v10;
      v10 = operator new(0x50uLL);
      v10[4] = a2;
      v10[5] = &off_1E6529A90;
      *((_OWORD *)v10 + 3) = 0u;
      *((_OWORD *)v10 + 4) = 0u;
      *v10 = 0;
      v10[1] = 0;
      v10[2] = v12;
      *v9 = v10;
      v13 = **(_QWORD **)(v4 + 24);
      v14 = v10;
      if (v13)
      {
        *(_QWORD *)(v4 + 24) = v13;
        v14 = *v9;
      }
      this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 32), v14);
      ++*(_QWORD *)(v4 + 40);
    }
    v10[8] += a4 - 16 * a3;
  }
  return this;
}

uint64_t *HGStats::UnitStats::in_n_out(uint64_t *this, HGNode *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  HGNode **v10;
  uint64_t **v11;
  char *v12;
  HGNode *v13;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v5 = *this;
  if (*(_BYTE *)(*this + 120))
  {
    v11 = (uint64_t **)(v5 + 56);
    v10 = *(HGNode ***)(v5 + 56);
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          v12 = (char *)v10;
          v13 = v10[4];
          v14 = *((_DWORD *)v12 + 10);
          v15 = v14 > a3;
          if (v13 != a2)
            v15 = v13 > a2;
          if (!v15)
            break;
          v10 = *(HGNode ***)v12;
          v11 = (uint64_t **)v12;
          if (!*(_QWORD *)v12)
            goto LABEL_13;
        }
        v16 = v14 < a3;
        v17 = v13 == a2;
        v18 = v13 < a2;
        if (v17)
          v18 = v16;
        if (!v18)
          break;
        v10 = (HGNode **)*((_QWORD *)v12 + 1);
        if (!v10)
        {
          v11 = (uint64_t **)(v12 + 8);
          goto LABEL_13;
        }
      }
    }
    else
    {
      v12 = (char *)(v5 + 56);
LABEL_13:
      v19 = v12;
      v12 = (char *)operator new(0x40uLL);
      *((_QWORD *)v12 + 4) = a2;
      *((_DWORD *)v12 + 10) = a3;
      *((_QWORD *)v12 + 6) = 0;
      *((_QWORD *)v12 + 7) = 0;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v19;
      *v11 = (uint64_t *)v12;
      v20 = **(_QWORD **)(v5 + 48);
      v21 = (uint64_t *)v12;
      if (v20)
      {
        *(_QWORD *)(v5 + 48) = v20;
        v21 = *v11;
      }
      this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 56), v21);
      ++*(_QWORD *)(v5 + 64);
    }
    v22 = *((_QWORD *)v12 + 7) + a5;
    *((_QWORD *)v12 + 6) += a4;
    *((_QWORD *)v12 + 7) = v22;
  }
  return this;
}

void HGStats::UnitStats::clear(HGStats::UnitStats *this)
{
  HGStats::CoreStats<HGNode,__HGStats_private::StatsTimer>::clear(*(_QWORD *)this);
}

uint64_t *HGStats::UnitStats::dump(uint64_t **a1, _QWORD *a2, char a3)
{
  return HGStats::UnitStatsImpl::dump(*a1, a2, a3);
}

HGStats::GraphStats *HGStats::GraphStats::GraphStats(HGStats::GraphStats *this)
{
  HGStats::GraphStatsImpl *v2;

  v2 = (HGStats::GraphStatsImpl *)operator new();
  HGStats::GraphStatsImpl::GraphStatsImpl(v2);
  *(_QWORD *)this = v2;
  return this;
}

void sub_1B2A9CF24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1020C409ABEAE11);
  _Unwind_Resume(a1);
}

void HGStats::GraphStats::~GraphStats(HGStats::GraphStats *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if (*(_QWORD *)v1)
      MEMORY[0x1B5E29170](*(_QWORD *)v1, 0x1000C40451B5BE8);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1 + 80, *(_QWORD **)(v1 + 88));
    *(_QWORD *)(v1 + 80) = v1 + 88;
    *(_QWORD *)(v1 + 96) = 0;
    *(_QWORD *)(v1 + 88) = 0;
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1 + 56, *(_QWORD **)(v1 + 64));
    *(_QWORD *)(v1 + 56) = v1 + 64;
    *(_QWORD *)(v1 + 72) = 0;
    *(_QWORD *)(v1 + 64) = 0;
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1 + 32, *(_QWORD **)(v1 + 40));
    *(_QWORD *)(v1 + 32) = v1 + 40;
    *(_QWORD *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 40) = 0;
    __HGStats_private::OpStats<__HGStats_private::StatsProfile>::~OpStats((char **)(v1 + 8));
    MEMORY[0x1B5E29170](v1, 0x1020C409ABEAE11);
  }
}

uint64_t HGStats::GraphStats::start(HGProfiler ***this)
{
  return HGProfiler::start(**this);
}

uint64_t HGStats::GraphStats::stop(HGProfiler ***this)
{
  return HGProfiler::stop(**this);
}

uint64_t *HGStats::GraphStats::roiPixels(uint64_t *this, HGNode *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v5 = *this;
  v7 = (uint64_t **)(*this + 88);
  v6 = *v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = v6[4];
        if (v9 <= (unint64_t)a2)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= (unint64_t)a2)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(*this + 88);
LABEL_8:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x38uLL);
    v8[5] = 0;
    v8[6] = 0;
    v8[4] = (uint64_t *)a2;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)(v5 + 80);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)(v5 + 80) = v11;
      v12 = *v7;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 88), v12);
    ++*(_QWORD *)(v5 + 96);
  }
  v8[5] = a3;
  v8[6] = (uint64_t *)1;
  return this;
}

void HGStats::GraphStats::merge(HGStats::GraphStatsImpl **this, const HGStats::UnitStatsImpl **a2)
{
  HGStats::GraphStatsImpl::merge(*this, *a2);
}

void HGStats::GraphStats::clear(uint64_t **this)
{
  uint64_t v1;

  v1 = (uint64_t)(*this + 1);
  HGProfiler::init(**this);
  HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::clear(v1);
}

void HGStats::GraphStats::dump(uint64_t *a1, _QWORD *a2, __int16 a3)
{
  HGStats::GraphStatsImpl::dump(*a1, a2, a3);
}

uint64_t HGStats::GraphStats::probes(HGStats::GraphStats *this)
{
  return HGStats::CoreStats<HGNode,__HGStats_private::StatsProfile>::probes(*(_QWORD *)this + 8);
}

uint64_t HGStats::GraphStats::getNodeTime(HGStats::GraphStats *this, HGNode *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = *(_QWORD *)this;
  v5 = (uint64_t **)(*(_QWORD *)this + 40);
  v4 = *v5;
  if (*v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if (v7 <= (unint64_t)a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= (unint64_t)a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(*(_QWORD *)this + 40);
LABEL_8:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x50uLL);
    v6[4] = (uint64_t *)a2;
    v6[5] = (uint64_t *)&off_1E6529AD8;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(v3 + 32);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(v3 + 32) = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 40), v10);
    ++*(_QWORD *)(v3 + 48);
  }
  return ((uint64_t (*)(uint64_t **))v6[5][3])(v6 + 5);
}

double HGStats::GraphStats::time(HGProfiler ***this)
{
  return HGProfiler::getTime(**this);
}

HGStats::RendererStats *HGStats::RendererStats::RendererStats(HGStats::RendererStats *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  std::vector<__HGStats_private::StatsProfile>::__append((void **)(v2 + 16), 5uLL);
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 40) = v2 + 48;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = v2 + 72;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = v2 + 96;
  *(_QWORD *)this = v2;
  return this;
}

void sub_1B2A9D2B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  if (*v2)
    HGStats::RendererStats::RendererStats(v1, *v2);
  MEMORY[0x1B5E29170](v1, 0x1020C405955F7A7);
  _Unwind_Resume(a1);
}

void HGStats::RendererStats::~RendererStats(HGStats::RendererStats *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1 + 88, *(_QWORD **)(v1 + 96));
    *(_QWORD *)(v1 + 88) = v1 + 96;
    *(_QWORD *)(v1 + 104) = 0;
    *(_QWORD *)(v1 + 96) = 0;
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1 + 64, *(_QWORD **)(v1 + 72));
    *(_QWORD *)(v1 + 64) = v1 + 72;
    *(_QWORD *)(v1 + 80) = 0;
    *(_QWORD *)(v1 + 72) = 0;
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1 + 40, *(_QWORD **)(v1 + 48));
    *(_QWORD *)(v1 + 40) = v1 + 48;
    *(_QWORD *)(v1 + 56) = 0;
    *(_QWORD *)(v1 + 48) = 0;
    __HGStats_private::OpStats<__HGStats_private::StatsProfile>::~OpStats((char **)(v1 + 16));
    MEMORY[0x1B5E29170](v1, 0x1020C405955F7A7);
  }
}

void HGStats::RendererStats::merge(HGStats::RendererStatsImpl **this, HGProfiler ***a2)
{
  HGStats::RendererStatsImpl::merge(*this, *a2);
}

_QWORD *HGStats::RendererStats::dump(_QWORD **a1, _QWORD *a2, int a3)
{
  return HGStats::RendererStatsImpl::dump(*a1, a2, a3);
}

uint64_t HGStats::RendererStats::probes(HGStats::RendererStats *this)
{
  return HGStats::CoreStats<std::type_info const,__HGStats_private::StatsProfile>::probes(*(_QWORD *)this + 16);
}

double HGStats::RendererStats::time(HGStats::RendererStats *this)
{
  return *(double *)(*(_QWORD *)this + 8);
}

uint64_t HGStats::RendererStats::count(HGStats::RendererStats *this)
{
  return **(_QWORD **)this;
}

uint64_t __HGStats_private::StatsProfile::pixels(__HGStats_private::StatsProfile *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t __HGStats_private::StatsProfile::bytes(__HGStats_private::StatsProfile *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t __HGStats_private::StatsProfile::tiles(__HGStats_private::StatsProfile *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t __HGStats_private::StatsTimer::pixels(__HGStats_private::StatsTimer *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t __HGStats_private::StatsTimer::bytes(__HGStats_private::StatsTimer *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t __HGStats_private::StatsTimer::tiles(__HGStats_private::StatsTimer *this)
{
  return *((_QWORD *)this + 4);
}

void std::vector<__HGStats_private::StatsTimer>::__append(void **a1, unint64_t a2)
{
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  void (***v21)(char *);
  void (**v22)(char *);
  BOOL v23;

  v4 = (char *)a1[1];
  v5 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[40 * a2];
      do
      {
        *(_QWORD *)v4 = &off_1E6529A90;
        *(_OWORD *)(v4 + 8) = 0uLL;
        *(_OWORD *)(v4 + 24) = 0uLL;
        v4 += 40;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
    return;
  }
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
  v7 = v6 + a2;
  if (v6 + a2 > 0x666666666666666)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(40 * v9);
  }
  else
  {
    v10 = 0;
  }
  v12 = &v10[40 * v6];
  v13 = &v10[40 * v9];
  v14 = &v12[40 * a2];
  v15 = v12;
  do
  {
    *(_QWORD *)v15 = &off_1E6529A90;
    *(_OWORD *)(v15 + 8) = 0uLL;
    *(_OWORD *)(v15 + 24) = 0uLL;
    v15 += 40;
  }
  while (v15 != v14);
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    do
    {
      *((_QWORD *)v12 - 5) = &off_1E6529A90;
      v12 -= 40;
      v18 = *((_OWORD *)v17 - 2);
      *(_OWORD *)(v12 + 24) = *((_OWORD *)v17 - 1);
      *(_OWORD *)(v12 + 8) = v18;
      v17 -= 40;
    }
    while (v17 != v16);
    v17 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (v19 == v17)
    {
      v17 = v19;
      if (v19)
        goto LABEL_28;
      return;
    }
    v20 = v19 - 40;
    v21 = (void (***)(char *))(v19 - 40);
    do
    {
      v22 = *v21;
      v21 -= 5;
      (*v22)(v20);
      v23 = v20 == v17;
      v20 = (char *)v21;
    }
    while (!v23);
  }
  if (v17)
LABEL_28:
    operator delete(v17);
}

char **__HGStats_private::OpStats<__HGStats_private::StatsTimer>::~OpStats(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  void (***v6)(char *);
  void (**v7)(char *);
  BOOL v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void (**v13)(char *);
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  void (**v19)(char *);

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    v4 = *a1;
  }
  else
  {
    do
    {
      (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
      v2 += 40;
    }
    while (v2 != v3);
    v2 = *a1;
    v4 = a1[1];
    if (v4 == *a1)
    {
      v2 = a1[1];
    }
    else
    {
      v5 = v4 - 40;
      v6 = (void (***)(char *))(v4 - 40);
      do
      {
        v7 = *v6;
        v6 -= 5;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = (char *)v6;
      }
      while (!v8);
      v4 = *a1;
    }
  }
  a1[1] = v2;
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v4) >> 3);
  if (v9 > 4)
  {
    if (v2 - v4 != 200)
    {
      v10 = v4 + 200;
      if (v2 != v4 + 200)
      {
        v11 = v2 - 40;
        v12 = v11;
        do
        {
          v13 = *(void (***)(char *))v12;
          v12 -= 40;
          (*v13)(v11);
          v8 = v11 == v10;
          v11 = v12;
        }
        while (!v8);
      }
      a1[1] = v10;
    }
  }
  else
  {
    std::vector<__HGStats_private::StatsTimer>::__append((void **)a1, 5 - v9);
  }
  v14 = *a1;
  if (*a1)
  {
    v15 = a1[1];
    v16 = *a1;
    if (v15 != v14)
    {
      v17 = v15 - 40;
      v18 = v15 - 40;
      do
      {
        v19 = *(void (***)(char *))v18;
        v18 -= 40;
        (*v19)(v17);
        v8 = v17 == v14;
        v17 = v18;
      }
      while (!v8);
      v16 = *a1;
    }
    a1[1] = v14;
    operator delete(v16);
  }
  return a1;
}

char **HGStats::CoreStats<HGNode,__HGStats_private::StatsTimer>::~CoreStats(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v2 = (_QWORD *)(a1 + 80);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 72, *(_QWORD **)(a1 + 80));
  *(_QWORD *)(a1 + 72) = v2;
  *(_QWORD *)(a1 + 88) = 0;
  *v2 = 0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 56) = 0;
  v3 = *(_QWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 64) = 0;
  v4 = (_QWORD *)(a1 + 32);
  if (v3 != (_QWORD *)(a1 + 32))
  {
    do
    {
      v6 = v3[6];
      if (v6)
        MEMORY[0x1B5E29170](v6, 0x1000C40451B5BE8);
      v3[6] = 0;
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v9 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v9);
      }
      v3 = v8;
    }
    while (v8 != v4);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  return __HGStats_private::OpStats<__HGStats_private::StatsTimer>::~OpStats((char **)a1);
}

_QWORD *__HGStats_private::NodeStatsPrinter<HGNode,__HGStats_private::StatsTimer,(__HGStats_private::NodeStatsType)1>::operator()(_QWORD *result, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v4;
  char *v5;

  v2 = *a2;
  if (!*a2)
    __cxa_bad_typeid();
  v4 = result;
  v5 = *(char **)(*(_QWORD *)(*v2 - 8) + 8);
  if (v5 == "14HGBitmapLoader")
    return __HGStats_private::printNodeStats<HGNode,__HGStats_private::StatsTimer const>((_QWORD *)*v4, (uint64_t)v2, (uint64_t)(a2 + 1), v4[1]);
  if ((((unint64_t)"14HGBitmapLoader" & (unint64_t)v5 & 0x8000000000000000) != 0) != __OFSUB__(v5, "14HGBitmapLoader"))
  {
    result = (_QWORD *)strcmp((const char *)((unint64_t)v5 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"14HGBitmapLoader" & 0x7FFFFFFFFFFFFFFFLL));
    if (!(_DWORD)result)
      return __HGStats_private::printNodeStats<HGNode,__HGStats_private::StatsTimer const>((_QWORD *)*v4, (uint64_t)v2, (uint64_t)(a2 + 1), v4[1]);
  }
  if (v5 == "12HGColorGamma")
    return __HGStats_private::printNodeStats<HGNode,__HGStats_private::StatsTimer const>((_QWORD *)*v4, (uint64_t)v2, (uint64_t)(a2 + 1), v4[1]);
  if ((((unint64_t)"12HGColorGamma" & (unint64_t)v5 & 0x8000000000000000) != 0) != __OFSUB__(v5, "12HGColorGamma"))
  {
    result = (_QWORD *)strcmp((const char *)((unint64_t)v5 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"12HGColorGamma" & 0x7FFFFFFFFFFFFFFFLL));
    if (!(_DWORD)result)
      return __HGStats_private::printNodeStats<HGNode,__HGStats_private::StatsTimer const>((_QWORD *)*v4, (uint64_t)v2, (uint64_t)(a2 + 1), v4[1]);
  }
  return result;
}

_QWORD *__HGStats_private::printNodeStats<HGNode,__HGStats_private::StatsTimer const>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  size_t v29;

  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if (result)
  {
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"|    ", 5);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
    v11 = *v9;
    *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v9 + *(_QWORD *)(v11 - 24) + 24) = 7;
    *(uint64_t *)((char *)v9 + *(_QWORD *)(v11 - 24) + 16) = 2;
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ms (", 5);
    v14 = *v13;
    *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v13 + *(_QWORD *)(v14 - 24) + 24) = 4;
    *(uint64_t *)((char *)v13 + *(_QWORD *)(v14 - 24) + 16) = 1;
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"%)", 2);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 24) = 10;
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" pixels (", 9);
    v19 = *v18;
    *(_DWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v18 + *(_QWORD *)(*v18 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v18 + *(_QWORD *)(v19 - 24) + 24) = 4;
    *(uint64_t *)((char *)v18 + *(_QWORD *)(v19 - 24) + 16) = 1;
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"%)", 2);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    v22 = *v21;
    *(_DWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 8) = *(_DWORD *)((_BYTE *)v21 + *(_QWORD *)(*v21 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v21 + *(_QWORD *)(v22 - 24) + 24) = 7;
    *(uint64_t *)((char *)v21 + *(_QWORD *)(v22 - 24) + 16) = 2;
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" ms / MP", 8);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" (", 2);
    *(_QWORD *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 24) = 4;
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" tiles", 6);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)")", 1);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" (", 2);
    v28 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    v29 = strlen(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)")\n", 2);
  }
  return result;
}

_QWORD *__HGStats_private::NodeStatsPrinter<HGNode,__HGStats_private::StatsTimer,(__HGStats_private::NodeStatsType)0>::operator()(_QWORD *result, _QWORD **a2)
{
  _QWORD *v2;
  char *v3;
  _QWORD *v5;

  v2 = *a2;
  if (!*a2)
    __cxa_bad_typeid();
  v3 = *(char **)(*(_QWORD *)(*v2 - 8) + 8);
  if (v3 != "14HGBitmapLoader")
  {
    v5 = result;
    if ((((unint64_t)"14HGBitmapLoader" & (unint64_t)v3 & 0x8000000000000000) != 0) == __OFSUB__(v3, "14HGBitmapLoader")
      || (result = (_QWORD *)strcmp((const char *)((unint64_t)v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"14HGBitmapLoader" & 0x7FFFFFFFFFFFFFFFLL)), (_DWORD)result))
    {
      if (v3 != "12HGColorGamma")
      {
        if ((((unint64_t)"12HGColorGamma" & (unint64_t)v3 & 0x8000000000000000) != 0) == __OFSUB__(v3, "12HGColorGamma"))
          return __HGStats_private::printNodeStats<HGNode,__HGStats_private::StatsTimer const>((_QWORD *)*v5, (uint64_t)v2, (uint64_t)(a2 + 1), v5[1]);
        result = (_QWORD *)strcmp((const char *)((unint64_t)v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"12HGColorGamma" & 0x7FFFFFFFFFFFFFFFLL));
        if ((_DWORD)result)
          return __HGStats_private::printNodeStats<HGNode,__HGStats_private::StatsTimer const>((_QWORD *)*v5, (uint64_t)v2, (uint64_t)(a2 + 1), v5[1]);
      }
    }
  }
  return result;
}

_QWORD *__HGStats_private::InOutRoiStatsPrinter<HGNode>::operator()(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  const char *v24;
  size_t v25;

  v2 = result[1];
  v3 = *a2;
  if (v2)
    v4 = v2 == v3;
  else
    v4 = 1;
  if (v4)
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)*result, (uint64_t)"|    ", 5);
    v6 = v5;
    if (v2)
    {
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"         ", 9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"in #", 4);
      v8 = (_QWORD *)std::ostream::operator<<();
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ROI ratio : ", 13);
      v10 = *v9;
      *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFEFB | 4;
      *(uint64_t *)((char *)v9 + *(_QWORD *)(v10 - 24) + 24) = 4;
      *(uint64_t *)((char *)v9 + *(_QWORD *)(v10 - 24) + 16) = 2;
      std::ostream::operator<<();
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
      *(_QWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 24) = 10;
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")", 1);
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
    }
    else
    {
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"in #", 4);
      v15 = (_QWORD *)std::ostream::operator<<();
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" :  ", 4);
      v17 = *v16;
      *(_DWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 8) & 0xFFFFFEFB | 4;
      *(uint64_t *)((char *)v16 + *(_QWORD *)(v17 - 24) + 24) = 4;
      *(uint64_t *)((char *)v16 + *(_QWORD *)(v17 - 24) + 16) = 2;
      std::ostream::operator<<();
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"  ", 2);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"(input: ", 8);
      *(_QWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 24) = 10;
      v20 = (_QWORD *)std::ostream::operator<<();
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ouput: ", 9);
      *(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 24) = 10;
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"  (", 3);
      v24 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
      v25 = strlen(v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)")\n", 2);
    }
  }
  return result;
}

void std::vector<__HGStats_private::StatsProfile>::__append(void **a1, unint64_t a2)
{
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  void (***v21)(char *);
  void (**v22)(char *);
  BOOL v23;

  v4 = (char *)a1[1];
  v5 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[40 * a2];
      do
      {
        *(_QWORD *)v4 = &off_1E6529AD8;
        *(_OWORD *)(v4 + 8) = 0uLL;
        *(_OWORD *)(v4 + 24) = 0uLL;
        v4 += 40;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
    return;
  }
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
  v7 = v6 + a2;
  if (v6 + a2 > 0x666666666666666)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(40 * v9);
  }
  else
  {
    v10 = 0;
  }
  v12 = &v10[40 * v6];
  v13 = &v10[40 * v9];
  v14 = &v12[40 * a2];
  v15 = v12;
  do
  {
    *(_QWORD *)v15 = &off_1E6529AD8;
    *(_OWORD *)(v15 + 8) = 0uLL;
    *(_OWORD *)(v15 + 24) = 0uLL;
    v15 += 40;
  }
  while (v15 != v14);
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    do
    {
      *((_QWORD *)v12 - 5) = &off_1E6529AD8;
      v12 -= 40;
      v18 = *((_OWORD *)v17 - 2);
      *(_OWORD *)(v12 + 24) = *((_OWORD *)v17 - 1);
      *(_OWORD *)(v12 + 8) = v18;
      v17 -= 40;
    }
    while (v17 != v16);
    v17 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (v19 == v17)
    {
      v17 = v19;
      if (v19)
        goto LABEL_28;
      return;
    }
    v20 = v19 - 40;
    v21 = (void (***)(char *))(v19 - 40);
    do
    {
      v22 = *v21;
      v21 -= 5;
      (*v22)(v20);
      v23 = v20 == v17;
      v20 = (char *)v21;
    }
    while (!v23);
  }
  if (v17)
LABEL_28:
    operator delete(v17);
}

char **__HGStats_private::OpStats<__HGStats_private::StatsProfile>::~OpStats(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  void (***v6)(char *);
  void (**v7)(char *);
  BOOL v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void (**v13)(char *);
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  void (**v19)(char *);

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    v4 = *a1;
  }
  else
  {
    do
    {
      (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
      v2 += 40;
    }
    while (v2 != v3);
    v2 = *a1;
    v4 = a1[1];
    if (v4 == *a1)
    {
      v2 = a1[1];
    }
    else
    {
      v5 = v4 - 40;
      v6 = (void (***)(char *))(v4 - 40);
      do
      {
        v7 = *v6;
        v6 -= 5;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = (char *)v6;
      }
      while (!v8);
      v4 = *a1;
    }
  }
  a1[1] = v2;
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v4) >> 3);
  if (v9 > 4)
  {
    if (v2 - v4 != 200)
    {
      v10 = v4 + 200;
      if (v2 != v4 + 200)
      {
        v11 = v2 - 40;
        v12 = v11;
        do
        {
          v13 = *(void (***)(char *))v12;
          v12 -= 40;
          (*v13)(v11);
          v8 = v11 == v10;
          v11 = v12;
        }
        while (!v8);
      }
      a1[1] = v10;
    }
  }
  else
  {
    std::vector<__HGStats_private::StatsProfile>::__append((void **)a1, 5 - v9);
  }
  v14 = *a1;
  if (*a1)
  {
    v15 = a1[1];
    v16 = *a1;
    if (v15 != v14)
    {
      v17 = v15 - 40;
      v18 = v15 - 40;
      do
      {
        v19 = *(void (***)(char *))v18;
        v18 -= 40;
        (*v19)(v17);
        v8 = v17 == v14;
        v17 = v18;
      }
      while (!v8);
      v16 = *a1;
    }
    a1[1] = v14;
    operator delete(v16);
  }
  return a1;
}

uint64_t __HGStats_private::MergeNodeStats<HGNode,__HGStats_private::StatsTimer,HGNode,__HGStats_private::StatsProfile>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  v3 = (uint64_t **)*a1;
  v4 = (uint64_t *)*a2;
  v6 = (uint64_t **)(*a1 + 8);
  v5 = *v6;
  if (*v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if ((unint64_t)v4 >= v8)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      if (v8 >= (unint64_t)v4)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(*a1 + 8);
LABEL_8:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x50uLL);
    v7[4] = v4;
    v7[5] = (uint64_t *)&off_1E6529AD8;
    *((_OWORD *)v7 + 3) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**v3;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *v3 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v3[1], v11);
    v3[2] = (uint64_t *)((char *)v3[2] + 1);
  }
  v13 = a2[1];
  v12 = a2 + 1;
  *((double *)v7 + 6) = (*(double (**)(_QWORD *))(v13 + 24))(v12) + *((double *)v7 + 6);
  v7[7] = (uint64_t *)((char *)v7[7] + (*(uint64_t (**)(_QWORD *))(*v12 + 32))(v12));
  v7[8] = (uint64_t *)((char *)v7[8] + (*(uint64_t (**)(_QWORD *))(*v12 + 40))(v12));
  result = (*(uint64_t (**)(_QWORD *))(*v12 + 48))(v12);
  v7[9] = (uint64_t *)((char *)v7[9] + result);
  return result;
}

int64x2_t __HGStats_private::MergeRoiStats<HGNode,HGNode>::operator()(_QWORD *a1, int64x2_t *a2)
{
  uint64_t **v3;
  unint64_t v4;
  uint64_t v5;
  int64x2_t *v6;
  uint64_t **v7;
  int64x2_t *v8;
  unint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  _BOOL4 v14;
  int64x2_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  int64x2_t result;

  v3 = (uint64_t **)*a1;
  v4 = a2->i64[0];
  v5 = a2->u32[2];
  v7 = (uint64_t **)(*a1 + 8);
  v6 = (int64x2_t *)*v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = v6[2].u64[0];
        v10 = v8[2].u32[2];
        v11 = v10 > v5;
        if (v9 != v4)
          v11 = v9 > v4;
        if (!v11)
          break;
        v6 = (int64x2_t *)v8->i64[0];
        v7 = (uint64_t **)v8;
        if (!v8->i64[0])
          goto LABEL_12;
      }
      v12 = v10 < v5;
      v13 = v9 == v4;
      v14 = v9 < v4;
      if (v13)
        v14 = v12;
      if (!v14)
        break;
      v6 = (int64x2_t *)v8->i64[1];
      if (!v6)
      {
        v7 = (uint64_t **)&v8->i64[1];
        goto LABEL_12;
      }
    }
  }
  else
  {
    v8 = (int64x2_t *)(*a1 + 8);
LABEL_12:
    v15 = v8;
    v8 = (int64x2_t *)operator new(0x40uLL);
    v8[2].i64[0] = v4;
    v8[2].i64[1] = v5;
    v8[3].i64[0] = 0;
    v8[3].i64[1] = 0;
    v8->i64[0] = 0;
    v8->i64[1] = 0;
    v8[1].i64[0] = (uint64_t)v15;
    *v7 = (uint64_t *)v8;
    v16 = (uint64_t *)**v3;
    v17 = (uint64_t *)v8;
    if (v16)
    {
      *v3 = v16;
      v17 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v3[1], v17);
    v3[2] = (uint64_t *)((char *)v3[2] + 1);
  }
  result = vaddq_s64(v8[3], a2[1]);
  v8[3] = result;
  return result;
}

__n128 __HGStats_private::ReadRenderAccumulator<HGNode,__HGStats_private::StatsProfile>::operator()@<Q0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  if (!*a2)
    __cxa_bad_typeid();
  v6 = *(char **)(*(_QWORD *)(*(_QWORD *)*a2 - 8) + 8);
  if (v6 == "14HGBitmapLoader"
    || (((unint64_t)"14HGBitmapLoader" & (unint64_t)v6 & 0x8000000000000000) != 0) != __OFSUB__(v6, "14HGBitmapLoader")
    && !strcmp((const char *)((unint64_t)v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"14HGBitmapLoader" & 0x7FFFFFFFFFFFFFFFLL))|| v6 == "12HGColorGamma"|| (((unint64_t)"12HGColorGamma" & (unint64_t)v6 & 0x8000000000000000) != 0) != __OFSUB__(v6, "12HGColorGamma")&& !strcmp((const char *)((unint64_t)v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"12HGColorGamma" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    *(double *)(a1 + 56) = (*(double (**)(_QWORD *))(a2[1] + 24))(a2 + 1) + *(double *)(a1 + 56);
    *(_QWORD *)(a1 + 64) += (*(uint64_t (**)(_QWORD *))(a2[1] + 32))(a2 + 1);
    *(_QWORD *)(a1 + 72) += (*(uint64_t (**)(_QWORD *))(a2[1] + 40))(a2 + 1);
    v7 = (*(uint64_t (**)(_QWORD *))(a2[1] + 48))(a2 + 1);
    v8 = (_QWORD *)(a1 + 80);
  }
  else
  {
    *(double *)(a1 + 16) = (*(double (**)(_QWORD *))(a2[1] + 24))(a2 + 1) + *(double *)(a1 + 16);
    *(_QWORD *)(a1 + 24) += (*(uint64_t (**)(_QWORD *))(a2[1] + 32))(a2 + 1);
    *(_QWORD *)(a1 + 32) += (*(uint64_t (**)(_QWORD *))(a2[1] + 40))(a2 + 1);
    v7 = (*(uint64_t (**)(_QWORD *))(a2[1] + 48))(a2 + 1);
    v8 = (_QWORD *)(a1 + 40);
  }
  *v8 += v7;
  v10 = a2[1];
  v9 = a2 + 1;
  *(double *)(a1 + 96) = (*(double (**)(_QWORD *))(v10 + 24))(v9) + *(double *)(a1 + 96);
  *(_QWORD *)(a1 + 104) += (*(uint64_t (**)(_QWORD *))(*v9 + 32))(v9);
  *(_QWORD *)(a1 + 112) += (*(uint64_t (**)(_QWORD *))(*v9 + 40))(v9);
  *(_QWORD *)(a1 + 120) += (*(uint64_t (**)(_QWORD *))(*v9 + 48))(v9);
  *(_QWORD *)a3 = &off_1E6529B60;
  *(_QWORD *)(a3 + 8) = &off_1E6529AD8;
  v11 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 32) = v11;
  *(_QWORD *)(a3 + 48) = &off_1E6529AD8;
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a3 + 72) = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a3 + 88) = &off_1E6529AD8;
  result = *(__n128 *)(a1 + 96);
  v13 = *(_OWORD *)(a1 + 112);
  *(__n128 *)(a3 + 96) = result;
  *(_OWORD *)(a3 + 112) = v13;
  return result;
}

void __HGStats_private::RRStatsProfile::~RRStatsProfile(__HGStats_private::RRStatsProfile *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t __HGStats_private::RRStatsProfile::pixels(__HGStats_private::RRStatsProfile *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t __HGStats_private::RRStatsProfile::bytes(__HGStats_private::RRStatsProfile *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t __HGStats_private::RRStatsProfile::tiles(__HGStats_private::RRStatsProfile *this)
{
  return *((_QWORD *)this + 15);
}

_QWORD *__HGStats_private::NodePixelsPrinter<HGNode>::operator()(_QWORD **a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;

  v2 = *a2;
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"|    ", 5);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": ", 2);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ROI: ", 5);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 24) = 10;
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" pixels", 7);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 4;
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" nodes", 6);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (", 2);
  v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v13 = strlen(v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)")\n", 2);
}

_QWORD *__HGStats_private::NodeStatsVerbosePrinter<HGNode,__HGStats_private::StatsProfile,(__HGStats_private::NodeStatsType)1>::operator()(_QWORD *result, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _OWORD v16[2];
  _QWORD v17[2];

  v2 = (_QWORD *)*a2;
  if (!*a2)
    __cxa_bad_typeid();
  v4 = result;
  v5 = *(char **)(*(_QWORD *)(*v2 - 8) + 8);
  if (v5 == "14HGBitmapLoader"
    || (((unint64_t)"14HGBitmapLoader" & (unint64_t)v5 & 0x8000000000000000) != 0) != __OFSUB__(v5, "14HGBitmapLoader")
    && (result = (_QWORD *)strcmp((const char *)((unint64_t)v5 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"14HGBitmapLoader" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result)|| v5 == "12HGColorGamma"|| (((unint64_t)"12HGColorGamma" & (unint64_t)v5 & 0x8000000000000000) != 0) != __OFSUB__(v5, "12HGColorGamma")&& (result = (_QWORD *)strcmp((const char *)((unint64_t)v5 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"12HGColorGamma" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    if (a2[3])
    {
      __HGStats_private::printNodeStats<HGNode,__HGStats_private::StatsTimer const>((_QWORD *)*v4, (uint64_t)v2, (uint64_t)(a2 + 1), v4[1]);
      result = __HGStats_private::NodePixels<HGNode>::outputComputeRatio((uint64_t **)v4[2], (_QWORD *)*v4, *a2);
      v6 = (_QWORD *)v4[3];
      v7 = (_QWORD *)*v4;
      v8 = *a2;
      v11 = (_QWORD *)*v6;
      v10 = v6 + 1;
      v9 = v11;
      v17[0] = v7;
      v17[1] = v8;
      if (v11 != v10)
      {
        do
        {
          v12 = *((_OWORD *)v9 + 3);
          v16[0] = *((_OWORD *)v9 + 2);
          v16[1] = v12;
          result = __HGStats_private::InOutRoiStatsPrinter<HGNode>::operator()(v17, (uint64_t *)v16);
          v13 = (_QWORD *)v9[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v9[2];
              v15 = *v14 == (_QWORD)v9;
              v9 = v14;
            }
            while (!v15);
          }
          v9 = v14;
        }
        while (v14 != v10);
      }
    }
  }
  return result;
}

_QWORD *__HGStats_private::NodePixels<HGNode>::outputComputeRatio(uint64_t **a1, _QWORD *a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = v6[4];
        if (v9 <= a3)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_8:
    v10 = v8;
    v11 = (uint64_t *)operator new(0x38uLL);
    v11[5] = 0;
    v11[6] = 0;
    v11[4] = a3;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v10;
    *v7 = v11;
    v12 = (uint64_t *)**a1;
    v13 = v11;
    if (v12)
    {
      *a1 = v12;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"|               out ROI ratio : ", 32);
  v15 = *v14;
  *(_DWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v14 + *(_QWORD *)(v15 - 24) + 24) = 4;
  *(uint64_t *)((char *)v14 + *(_QWORD *)(v15 - 24) + 16) = 2;
  v16 = (_QWORD *)std::ostream::operator<<();
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" (", 2);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 24) = 10;
  v18 = (_QWORD *)std::ostream::operator<<();
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" (", 2);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 24) = 4;
  v21 = (_QWORD *)std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" nodes)\n", 8);
}

_QWORD *__HGStats_private::NodeStatsVerbosePrinter<HGNode,__HGStats_private::StatsProfile,(__HGStats_private::NodeStatsType)0>::operator()(_QWORD *result, unint64_t *a2)
{
  _QWORD *v2;
  char *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _OWORD v16[2];
  _QWORD v17[2];

  v2 = (_QWORD *)*a2;
  if (!*a2)
    __cxa_bad_typeid();
  v3 = *(char **)(*(_QWORD *)(*v2 - 8) + 8);
  if (v3 != "14HGBitmapLoader")
  {
    v5 = result;
    if ((((unint64_t)"14HGBitmapLoader" & (unint64_t)v3 & 0x8000000000000000) != 0) == __OFSUB__(v3, "14HGBitmapLoader")
      || (result = (_QWORD *)strcmp((const char *)((unint64_t)v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"14HGBitmapLoader" & 0x7FFFFFFFFFFFFFFFLL)), (_DWORD)result))
    {
      if (v3 != "12HGColorGamma")
      {
        if ((((unint64_t)"12HGColorGamma" & (unint64_t)v3 & 0x8000000000000000) != 0) == __OFSUB__(v3, "12HGColorGamma")
          || (result = (_QWORD *)strcmp((const char *)((unint64_t)v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"12HGColorGamma" & 0x7FFFFFFFFFFFFFFFLL)), (_DWORD)result))
        {
          if (a2[3])
          {
            __HGStats_private::printNodeStats<HGNode,__HGStats_private::StatsTimer const>((_QWORD *)*v5, (uint64_t)v2, (uint64_t)(a2 + 1), v5[1]);
            result = __HGStats_private::NodePixels<HGNode>::outputComputeRatio((uint64_t **)v5[2], (_QWORD *)*v5, *a2);
            v6 = (_QWORD *)v5[3];
            v7 = (_QWORD *)*v5;
            v8 = *a2;
            v11 = (_QWORD *)*v6;
            v10 = v6 + 1;
            v9 = v11;
            v17[0] = v7;
            v17[1] = v8;
            if (v11 != v10)
            {
              do
              {
                v12 = *((_OWORD *)v9 + 3);
                v16[0] = *((_OWORD *)v9 + 2);
                v16[1] = v12;
                result = __HGStats_private::InOutRoiStatsPrinter<HGNode>::operator()(v17, (uint64_t *)v16);
                v13 = (_QWORD *)v9[1];
                if (v13)
                {
                  do
                  {
                    v14 = v13;
                    v13 = (_QWORD *)*v13;
                  }
                  while (v13);
                }
                else
                {
                  do
                  {
                    v14 = (_QWORD *)v9[2];
                    v15 = *v14 == (_QWORD)v9;
                    v9 = v14;
                  }
                  while (!v15);
                }
                v9 = v14;
              }
              while (v14 != v10);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t __HGStats_private::MergeNodeStats<HGNode,__HGStats_private::StatsProfile,std::type_info const,__HGStats_private::StatsProfile>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  if (!*a2)
    __cxa_bad_typeid();
  v3 = (uint64_t **)*a1;
  v4 = *(uint64_t **)(*(_QWORD *)*a2 - 8);
  v6 = (uint64_t **)(*a1 + 8);
  v5 = *v6;
  if (*v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if ((unint64_t)v4 >= v8)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= (unint64_t)v4)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(*a1 + 8);
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x50uLL);
    v7[4] = v4;
    v7[5] = (uint64_t *)&off_1E6529AD8;
    *((_OWORD *)v7 + 3) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**v3;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *v3 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v3[1], v11);
    v3[2] = (uint64_t *)((char *)v3[2] + 1);
  }
  v13 = a2[1];
  v12 = a2 + 1;
  *((double *)v7 + 6) = (*(double (**)(_QWORD *))(v13 + 24))(v12) + *((double *)v7 + 6);
  v7[7] = (uint64_t *)((char *)v7[7] + (*(uint64_t (**)(_QWORD *))(*v12 + 32))(v12));
  v7[8] = (uint64_t *)((char *)v7[8] + (*(uint64_t (**)(_QWORD *))(*v12 + 40))(v12));
  result = (*(uint64_t (**)(_QWORD *))(*v12 + 48))(v12);
  v7[9] = (uint64_t *)((char *)v7[9] + result);
  return result;
}

int64x2_t __HGStats_private::MergeRoiStats<HGNode,std::type_info const>::operator()(_QWORD *a1, int64x2_t *a2)
{
  uint64_t **v3;
  uint64_t v4;
  unint64_t v5;
  int64x2_t *v6;
  uint64_t **v7;
  int64x2_t *v8;
  unint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  int64x2_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  int64x2_t result;

  if (!a2->i64[0])
    __cxa_bad_typeid();
  v3 = (uint64_t **)*a1;
  v4 = a2->u32[2];
  v5 = *(_QWORD *)(*(_QWORD *)a2->i64[0] - 8);
  v7 = (uint64_t **)(*a1 + 8);
  v6 = (int64x2_t *)*v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = v6[2].u64[0];
        v10 = v8[2].u32[2];
        v11 = v10 > v4;
        if (v5 != v9)
          v11 = v5 < v9;
        if (!v11)
          break;
        v6 = (int64x2_t *)v8->i64[0];
        v7 = (uint64_t **)v8;
        if (!v8->i64[0])
          goto LABEL_14;
      }
      v12 = v10 < v4;
      v13 = v5 == v9 ? v12 : v9 < v5;
      if (v13 != 1)
        break;
      v6 = (int64x2_t *)v8->i64[1];
      if (!v6)
      {
        v7 = (uint64_t **)&v8->i64[1];
        goto LABEL_14;
      }
    }
  }
  else
  {
    v8 = (int64x2_t *)(*a1 + 8);
LABEL_14:
    v14 = v8;
    v8 = (int64x2_t *)operator new(0x40uLL);
    v8[2].i64[0] = v5;
    v8[2].i64[1] = v4;
    v8[3].i64[0] = 0;
    v8[3].i64[1] = 0;
    v8->i64[0] = 0;
    v8->i64[1] = 0;
    v8[1].i64[0] = (uint64_t)v14;
    *v7 = (uint64_t *)v8;
    v15 = (uint64_t *)**v3;
    v16 = (uint64_t *)v8;
    if (v15)
    {
      *v3 = v15;
      v16 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v3[1], v16);
    v3[2] = (uint64_t *)((char *)v3[2] + 1);
  }
  result = vaddq_s64(v8[3], a2[1]);
  v8[3] = result;
  return result;
}

int64x2_t __HGStats_private::MergeNodePixels<HGNode,std::type_info const>::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t **v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  int64x2_t result;

  if (!*(_QWORD *)a2)
    __cxa_bad_typeid();
  v3 = (uint64_t **)*a1;
  v4 = *(_QWORD *)(**(_QWORD **)a2 - 8);
  v6 = (uint64_t **)(*a1 + 8);
  v5 = *v6;
  if (*v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = (char *)v5;
        v8 = v5[4];
        if (v4 >= v8)
          break;
        v5 = *(uint64_t **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= v4)
        break;
      v5 = (uint64_t *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(*a1 + 8);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x38uLL);
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 4) = v4;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**v3;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *v3 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v3[1], v11);
    v3[2] = (uint64_t *)((char *)v3[2] + 1);
  }
  result = vaddq_s64(*(int64x2_t *)(v7 + 40), *(int64x2_t *)(a2 + 8));
  *(int64x2_t *)(v7 + 40) = result;
  return result;
}

__n128 __HGStats_private::ReadRenderAccumulator<std::type_info const,__HGStats_private::StatsProfile>::operator()@<Q0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  v6 = *(char **)(*a2 + 8);
  if ("14HGBitmapLoader" == v6
    || (((unint64_t)"14HGBitmapLoader" & (unint64_t)v6 & 0x8000000000000000) != 0) != __OFSUB__("14HGBitmapLoader", v6)
    && !strcmp((const char *)((unint64_t)v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"14HGBitmapLoader" & 0x7FFFFFFFFFFFFFFFLL))|| "12HGColorGamma" == v6|| (((unint64_t)"12HGColorGamma" & (unint64_t)v6 & 0x8000000000000000) != 0) != __OFSUB__("12HGColorGamma", v6)&& !strcmp((const char *)((unint64_t)v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"12HGColorGamma" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    *(double *)(a1 + 56) = (*(double (**)(_QWORD *))(a2[1] + 24))(a2 + 1) + *(double *)(a1 + 56);
    *(_QWORD *)(a1 + 64) += (*(uint64_t (**)(_QWORD *))(a2[1] + 32))(a2 + 1);
    *(_QWORD *)(a1 + 72) += (*(uint64_t (**)(_QWORD *))(a2[1] + 40))(a2 + 1);
    v7 = (*(uint64_t (**)(_QWORD *))(a2[1] + 48))(a2 + 1);
    v8 = (_QWORD *)(a1 + 80);
  }
  else
  {
    *(double *)(a1 + 16) = (*(double (**)(_QWORD *))(a2[1] + 24))(a2 + 1) + *(double *)(a1 + 16);
    *(_QWORD *)(a1 + 24) += (*(uint64_t (**)(_QWORD *))(a2[1] + 32))(a2 + 1);
    *(_QWORD *)(a1 + 32) += (*(uint64_t (**)(_QWORD *))(a2[1] + 40))(a2 + 1);
    v7 = (*(uint64_t (**)(_QWORD *))(a2[1] + 48))(a2 + 1);
    v8 = (_QWORD *)(a1 + 40);
  }
  *v8 += v7;
  v10 = a2[1];
  v9 = a2 + 1;
  *(double *)(a1 + 96) = (*(double (**)(_QWORD *))(v10 + 24))(v9) + *(double *)(a1 + 96);
  *(_QWORD *)(a1 + 104) += (*(uint64_t (**)(_QWORD *))(*v9 + 32))(v9);
  *(_QWORD *)(a1 + 112) += (*(uint64_t (**)(_QWORD *))(*v9 + 40))(v9);
  *(_QWORD *)(a1 + 120) += (*(uint64_t (**)(_QWORD *))(*v9 + 48))(v9);
  *(_QWORD *)a3 = &off_1E6529B60;
  *(_QWORD *)(a3 + 8) = &off_1E6529AD8;
  v11 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 32) = v11;
  *(_QWORD *)(a3 + 48) = &off_1E6529AD8;
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a3 + 72) = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a3 + 88) = &off_1E6529AD8;
  result = *(__n128 *)(a1 + 96);
  v13 = *(_OWORD *)(a1 + 112);
  *(__n128 *)(a3 + 96) = result;
  *(_OWORD *)(a3 + 112) = v13;
  return result;
}

_QWORD *std::for_each[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<std::type_info const*,__HGStats_private::StatsProfile>,std::__tree_node<std::__value_type<std::type_info const*,__HGStats_private::StatsProfile>,void *> *,long>>,__HGStats_private::NodeStatsPrinter<std::type_info const,__HGStats_private::StatsProfile,(__HGStats_private::NodeStatsType)1>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void (**v15)(__HGStats_private::StatsProfile *__hidden);
  __int128 v16;
  __int128 v17;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      v8 = v7[4];
      v15 = &off_1E6529AD8;
      v9 = *((_OWORD *)v7 + 4);
      v16 = *((_OWORD *)v7 + 3);
      v17 = v9;
      v10 = *(char **)(v8 + 8);
      if ("14HGBitmapLoader" == v10
        || (((unint64_t)"14HGBitmapLoader" & (unint64_t)v10 & 0x8000000000000000) != 0) != __OFSUB__("14HGBitmapLoader", v10)
        && !strcmp((const char *)((unint64_t)v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"14HGBitmapLoader" & 0x7FFFFFFFFFFFFFFFLL))|| "12HGColorGamma" == v10|| (((unint64_t)"12HGColorGamma" & (unint64_t)v10 & 0x8000000000000000) != 0) != __OFSUB__("12HGColorGamma", v10)&& !strcmp((const char *)((unint64_t)v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"12HGColorGamma" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        __HGStats_private::printNodeStats<std::type_info,__HGStats_private::StatsProfile const>(a3, v8, (uint64_t)&v15, a4);
      }
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v13 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v13);
      }
      v7 = v12;
    }
    while (v12 != a2);
  }
  return a3;
}

_QWORD *__HGStats_private::printNodeStats<std::type_info,__HGStats_private::StatsProfile const>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  const char *v27;
  size_t v28;

  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if (result)
  {
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"|    ", 5);
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
    v10 = *v9;
    *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v9 + *(_QWORD *)(v10 - 24) + 24) = 7;
    *(uint64_t *)((char *)v9 + *(_QWORD *)(v10 - 24) + 16) = 2;
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ms (", 5);
    v13 = *v12;
    *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v12 + *(_QWORD *)(v13 - 24) + 24) = 4;
    *(uint64_t *)((char *)v12 + *(_QWORD *)(v13 - 24) + 16) = 1;
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"%)", 2);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    *(_QWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 24) = 10;
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" pixels (", 9);
    v18 = *v17;
    *(_DWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v17 + *(_QWORD *)(v18 - 24) + 24) = 4;
    *(uint64_t *)((char *)v17 + *(_QWORD *)(v18 - 24) + 16) = 1;
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"%)", 2);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    v21 = *v20;
    *(_DWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v20 + *(_QWORD *)(*v20 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v20 + *(_QWORD *)(v21 - 24) + 24) = 7;
    *(uint64_t *)((char *)v20 + *(_QWORD *)(v21 - 24) + 16) = 2;
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" ms / MP", 8);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" (", 2);
    *(_QWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 24) = 4;
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" tiles", 6);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)")", 1);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" (", 2);
    v27 = (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v28 = strlen(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")\n", 2);
  }
  return result;
}

_QWORD *std::for_each[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<std::type_info const*,__HGStats_private::StatsProfile>,std::__tree_node<std::__value_type<std::type_info const*,__HGStats_private::StatsProfile>,void *> *,long>>,__HGStats_private::NodeStatsPrinter<std::type_info const,__HGStats_private::StatsProfile,(__HGStats_private::NodeStatsType)0>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void (**v15)(__HGStats_private::StatsProfile *__hidden);
  __int128 v16;
  __int128 v17;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      v8 = v7[4];
      v15 = &off_1E6529AD8;
      v9 = *((_OWORD *)v7 + 4);
      v16 = *((_OWORD *)v7 + 3);
      v17 = v9;
      v10 = *(char **)(v8 + 8);
      if ("14HGBitmapLoader" != v10
        && ((((unint64_t)"14HGBitmapLoader" & (unint64_t)v10 & 0x8000000000000000) != 0) == __OFSUB__("14HGBitmapLoader", v10)
         || strcmp((const char *)((unint64_t)v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"14HGBitmapLoader" & 0x7FFFFFFFFFFFFFFFLL)))&& "12HGColorGamma" != v10&& ((((unint64_t)"12HGColorGamma" & (unint64_t)v10 & 0x8000000000000000) != 0) == __OFSUB__("12HGColorGamma", v10)|| strcmp((const char *)((unint64_t)v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"12HGColorGamma" & 0x7FFFFFFFFFFFFFFFLL))))
      {
        __HGStats_private::printNodeStats<std::type_info,__HGStats_private::StatsProfile const>(a3, v8, (uint64_t)&v15, a4);
      }
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v13 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v13);
      }
      v7 = v12;
    }
    while (v12 != a2);
  }
  return a3;
}

_QWORD *__HGStats_private::NodePixelsPrinter<std::type_info const>::operator()(_QWORD **a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;

  v2 = *a2;
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"|    ", 5);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ROI: ", 5);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 10;
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" pixels", 7);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 24) = 4;
  v8 = (_QWORD *)std::ostream::operator<<();
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" nodes", 6);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (", 2);
  v11 = (const char *)(*(_QWORD *)(v2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  v12 = strlen(v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")\n", 2);
}

_QWORD *__HGStats_private::InOutRoiStatsPrinter<std::type_info const>::operator()(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;

  v2 = result[1];
  v3 = *a2;
  if (v2)
    v4 = v2 == v3;
  else
    v4 = 1;
  if (v4)
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)*result, (uint64_t)"|    ", 5);
    if (v2)
    {
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"         ", 9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"in #", 4);
      v7 = (_QWORD *)std::ostream::operator<<();
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ROI ratio : ", 13);
      v9 = *v8;
      *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 8) & 0xFFFFFEFB | 4;
      *(uint64_t *)((char *)v8 + *(_QWORD *)(v9 - 24) + 24) = 4;
      *(uint64_t *)((char *)v8 + *(_QWORD *)(v9 - 24) + 16) = 2;
      std::ostream::operator<<();
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      *(_QWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 24) = 10;
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"in #", 4);
      v13 = (_QWORD *)std::ostream::operator<<();
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" :  ", 4);
      v15 = *v14;
      *(_DWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 8) & 0xFFFFFEFB | 4;
      *(uint64_t *)((char *)v14 + *(_QWORD *)(v15 - 24) + 24) = 4;
      *(uint64_t *)((char *)v14 + *(_QWORD *)(v15 - 24) + 16) = 2;
      std::ostream::operator<<();
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"  ", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(input: ", 8);
      *(_QWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 24) = 10;
      v18 = (_QWORD *)std::ostream::operator<<();
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ouput: ", 9);
      *(_QWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 24) = 10;
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"  (", 3);
      v22 = strlen((const char *)(*(_QWORD *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, *(_QWORD *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL, v22);
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)")\n", 2);
    }
  }
  return result;
}

_QWORD *__HGStats_private::NodeStatsVerbosePrinter<std::type_info const,__HGStats_private::StatsProfile,(__HGStats_private::NodeStatsType)1>::operator()(_QWORD *result, unint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _OWORD v16[2];
  _QWORD v17[2];

  v3 = result;
  v4 = *a2;
  v5 = *(char **)(*a2 + 8);
  if ("14HGBitmapLoader" == v5
    || (((unint64_t)"14HGBitmapLoader" & (unint64_t)v5 & 0x8000000000000000) != 0) != __OFSUB__("14HGBitmapLoader", v5)
    && (result = (_QWORD *)strcmp((const char *)((unint64_t)v5 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"14HGBitmapLoader" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result)|| "12HGColorGamma" == v5|| (((unint64_t)"12HGColorGamma" & (unint64_t)v5 & 0x8000000000000000) != 0) != __OFSUB__("12HGColorGamma", v5)&& (result = (_QWORD *)strcmp((const char *)((unint64_t)v5 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"12HGColorGamma" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    if (a2[3])
    {
      __HGStats_private::printNodeStats<std::type_info,__HGStats_private::StatsProfile const>((_QWORD *)*v3, v4, (uint64_t)(a2 + 1), v3[1]);
      result = __HGStats_private::NodePixels<HGNode>::outputComputeRatio((uint64_t **)v3[2], (_QWORD *)*v3, *a2);
      v6 = (_QWORD *)v3[3];
      v7 = (_QWORD *)*v3;
      v8 = *a2;
      v11 = (_QWORD *)*v6;
      v10 = v6 + 1;
      v9 = v11;
      v17[0] = v7;
      v17[1] = v8;
      if (v11 != v10)
      {
        do
        {
          v12 = *((_OWORD *)v9 + 3);
          v16[0] = *((_OWORD *)v9 + 2);
          v16[1] = v12;
          result = __HGStats_private::InOutRoiStatsPrinter<std::type_info const>::operator()(v17, (uint64_t *)v16);
          v13 = (_QWORD *)v9[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v9[2];
              v15 = *v14 == (_QWORD)v9;
              v9 = v14;
            }
            while (!v15);
          }
          v9 = v14;
        }
        while (v14 != v10);
      }
    }
  }
  return result;
}

_QWORD *__HGStats_private::NodeStatsVerbosePrinter<std::type_info const,__HGStats_private::StatsProfile,(__HGStats_private::NodeStatsType)0>::operator()(_QWORD *result, unint64_t *a2)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _OWORD v16[2];
  _QWORD v17[2];

  v2 = *a2;
  v3 = *(char **)(*a2 + 8);
  if ("14HGBitmapLoader" != v3)
  {
    v5 = result;
    if ((((unint64_t)"14HGBitmapLoader" & (unint64_t)v3 & 0x8000000000000000) != 0) == __OFSUB__("14HGBitmapLoader", v3)
      || (result = (_QWORD *)strcmp((const char *)((unint64_t)v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"14HGBitmapLoader" & 0x7FFFFFFFFFFFFFFFLL)), (_DWORD)result))
    {
      if ("12HGColorGamma" != v3)
      {
        if ((((unint64_t)"12HGColorGamma" & (unint64_t)v3 & 0x8000000000000000) != 0) == __OFSUB__("12HGColorGamma", v3)
          || (result = (_QWORD *)strcmp((const char *)((unint64_t)v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"12HGColorGamma" & 0x7FFFFFFFFFFFFFFFLL)), (_DWORD)result))
        {
          if (a2[3])
          {
            __HGStats_private::printNodeStats<std::type_info,__HGStats_private::StatsProfile const>((_QWORD *)*v5, v2, (uint64_t)(a2 + 1), v5[1]);
            result = __HGStats_private::NodePixels<HGNode>::outputComputeRatio((uint64_t **)v5[2], (_QWORD *)*v5, *a2);
            v6 = (_QWORD *)v5[3];
            v7 = (_QWORD *)*v5;
            v8 = *a2;
            v11 = (_QWORD *)*v6;
            v10 = v6 + 1;
            v9 = v11;
            v17[0] = v7;
            v17[1] = v8;
            if (v11 != v10)
            {
              do
              {
                v12 = *((_OWORD *)v9 + 3);
                v16[0] = *((_OWORD *)v9 + 2);
                v16[1] = v12;
                result = __HGStats_private::InOutRoiStatsPrinter<std::type_info const>::operator()(v17, (uint64_t *)v16);
                v13 = (_QWORD *)v9[1];
                if (v13)
                {
                  do
                  {
                    v14 = v13;
                    v13 = (_QWORD *)*v13;
                  }
                  while (v13);
                }
                else
                {
                  do
                  {
                    v14 = (_QWORD *)v9[2];
                    v15 = *v14 == (_QWORD)v9;
                    v9 = v14;
                  }
                  while (!v15);
                }
                v9 = v14;
              }
              while (v14 != v10);
            }
          }
        }
      }
    }
  }
  return result;
}

void OUTLINED_FUNCTION_0_3(void *__p)
{
  operator delete(__p);
}

void OUTLINED_FUNCTION_1_1(void *__p)
{
  operator delete(__p);
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  uint64_t v0;
  uint64_t (***v1)(uint64_t);

  return (**v1)(v0);
}

uint64_t OUTLINED_FUNCTION_3_0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_4_0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  uint64_t v0;
  uint64_t (***v1)(uint64_t);

  return (**v1)(v0);
}

void HGStats::GraphStatsImpl::GraphStatsImpl(uint64_t a1, void *a2)
{
  void **v2;
  void *v3;
  void *v4;
  void *v7;
  void *v8;
  BOOL v9;

  v7 = *(void **)(a1 + 16);
  v8 = a2;
  if (v7 != a2)
  {
    OUTLINED_FUNCTION_6_0();
    do
    {
      OUTLINED_FUNCTION_2_0();
      v9 = v3 == a2;
      v3 = v4;
    }
    while (!v9);
    v8 = *v2;
  }
  *(_QWORD *)(a1 + 16) = a2;
  OUTLINED_FUNCTION_0_3(v8);
}

void HGStats::UnitStats::UnitStats(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  BOOL v7;

  v6 = (void *)OUTLINED_FUNCTION_3_0(a1, a2);
  if (!v7)
  {
    OUTLINED_FUNCTION_7_0();
    do
    {
      OUTLINED_FUNCTION_5_0();
      v7 = v4 == v2;
      v4 = v5;
    }
    while (!v7);
    v6 = *(void **)v3;
  }
  *(_QWORD *)(v3 + 8) = v2;
  OUTLINED_FUNCTION_1_1(v6);
}

void HGStats::RendererStats::RendererStats(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  BOOL v8;

  v7 = (void *)OUTLINED_FUNCTION_4_0(a1, a2);
  if (!v8)
  {
    OUTLINED_FUNCTION_6_0();
    do
    {
      OUTLINED_FUNCTION_2_0();
      v8 = v5 == v2;
      v5 = v6;
    }
    while (!v8);
    v7 = *v4;
  }
  *(_QWORD *)(v3 + 24) = v2;
  OUTLINED_FUNCTION_0_3(v7);
}

void HGTexture::HGTexture(HGTexture *this, HGRect a2, HGBitmap *a3)
{
  _QWORD *v3;

  HGBitmap::HGBitmap((HGBitmap *)this, a2, a3);
  *v3 = off_1E6529BC0;
}

_QWORD *HGTexture::HGTexture(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  _QWORD *result;

  result = (_QWORD *)HGBitmap::HGBitmap(a1, a2, a3, a4, a5);
  *result = off_1E6529BC0;
  return result;
}

void HGTexture::~HGTexture(HGBitmap *this, void *a2)
{
  void *v2;

  HGBitmap::~HGBitmap(this, a2);
  HGObject::operator delete(v2);
}

BOOL TextureDeleteQueue::DeleteRequest::test(TextureDeleteQueue::DeleteRequest *this)
{
  double v2;
  const char *v3;
  char *v4;
  unsigned __int8 v5;
  const char *v6;
  char *v7;
  int v8;

  v2 = (double)(HGGetTBC() - *((_QWORD *)this + 15)) * 1000000000.0;
  if ((unint64_t)(v2 / (double)HGGetTBCFrequency()) < 0xF4241)
    return 0;
  v5 = atomic_load(HGLogger::_enabled);
  if ((v5 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"DeleteRequest::test(%d)\n", v3, v4, *((unsigned int *)this + 18));
  v8 = glClientWaitSyncAPPLE();
  if (v8 == 37149)
    HGLogger::warning((HGLogger *)"gl sync error -- WAIT_FAILED_APPLE", v6, v7);
  return v8 == 37146;
}

void TextureDeleteQueue::DeleteRequest::execute(TextureDeleteQueue::DeleteRequest *this)
{
  int v2;
  const char *v3;
  char *v4;
  const char *v5;
  char *v6;
  char *v7;
  int v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unsigned __int8 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned int v32;

  v2 = glClientWaitSyncAPPLE();
  glDeleteSyncAPPLE();
  if (v2 == 37147)
  {
    v7 = "gl sync error -- TIMEOUT_EXPIRED_APPLE";
  }
  else
  {
    if (v2 != 37149)
      goto LABEL_6;
    v7 = "gl sync error -- WAIT_FAILED_APPLE";
  }
  HGLogger::warning((HGLogger *)v7, v3, v4);
LABEL_6:
  if (*((_BYTE *)this + 112))
  {
    v8 = *((unsigned __int8 *)this + 113);
    v9 = atomic_load(HGLogger::_enabled);
    if (v8)
    {
      if ((v9 & 1) != 0)
        HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"DeleteRequest::execute() -- adding texture %d to free texture pool\n", v5, v6, *((unsigned int *)this + 18));
      v10 = *(_QWORD *)(*(_QWORD *)this + 16);
      {
        if (v12)
        {
          do
          {
            v14 = v12[4];
            v15 = v14 >= v10;
            if (v14 >= v10)
              v16 = v12;
            else
              v16 = v12 + 1;
            if (v15)
              v13 = (uint64_t)v12;
            v12 = (_QWORD *)*v16;
          }
          while (*v16);
          if (v13 != v11 && *(_QWORD *)(v13 + 32) <= v10)
          {
LABEL_30:
            v19 = *(_QWORD *)(v13 + 40);
            pthread_mutex_lock((pthread_mutex_t *)(v19 + 16));
            *((_DWORD *)this + 22) = 1;
            v20 = HGGetTBC();
            v21 = *(_QWORD *)(v19 + 96);
            v22 = *(_QWORD *)(v19 + 88);
            v23 = 42 * ((v21 - v22) >> 3) - 1;
            *((_QWORD *)this + 12) = v20;
            if (v21 == v22)
              v23 = 0;
            v24 = *(_QWORD *)(v19 + 120) + *(_QWORD *)(v19 + 112);
            if (v23 == v24)
            {
              std::deque<HGTextureManager::TextureEntry>::__add_back_capacity(v19 + 80);
              v22 = *(_QWORD *)(v19 + 88);
              v24 = *(_QWORD *)(v19 + 120) + *(_QWORD *)(v19 + 112);
            }
            v25 = (_OWORD *)(*(_QWORD *)(v22 + 8 * (v24 / 0x2A)) + 96 * (v24 % 0x2A));
            v26 = *(_OWORD *)((char *)this + 24);
            *v25 = *(_OWORD *)((char *)this + 8);
            v25[1] = v26;
            v27 = *(_OWORD *)((char *)this + 40);
            v28 = *(_OWORD *)((char *)this + 56);
            v29 = *(_OWORD *)((char *)this + 88);
            v25[4] = *(_OWORD *)((char *)this + 72);
            v25[5] = v29;
            v25[2] = v27;
            v25[3] = v28;
            ++*(_QWORD *)(v19 + 120);
            if (*((_BYTE *)this + 64) == 2)
            {
              v30 = *((int *)this + 21);
              v31 = (_QWORD *)(v19 + 152);
            }
            else
            {
              v30 = *((int *)this + 21);
              if (*((_BYTE *)this + 77))
              {
                *(int64x2_t *)(v19 + 128) = vaddq_s64(*(int64x2_t *)(v19 + 128), vdupq_n_s64(v30));
                if (*((char *)this + 76) < 0)
                {
LABEL_41:
                  pthread_mutex_unlock((pthread_mutex_t *)(v19 + 16));
                  goto LABEL_42;
                }
                v31 = (_QWORD *)(v19 + 144);
              }
              else
              {
                v31 = (_QWORD *)(v19 + 160);
              }
            }
            *v31 += v30;
            goto LABEL_41;
          }
        }
      }
      else
      {
        v18 = (_QWORD *)operator new();
        v18[1] = 0;
        v11 = (uint64_t)(v18 + 1);
        v18[2] = 0;
        *v18 = v18 + 1;
      }
      v13 = v11;
      goto LABEL_30;
    }
    if ((v9 & 1) != 0)
      HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"DeleteRequest::execute() -- deleting texture %d\n", v5, v6, *((unsigned int *)this + 18));
    v32 = *((_DWORD *)this + 18);
    HGTextureManager::deleteTexture(*(HGGLContext ***)this, &v32);
  }
  else
  {
    v17 = atomic_load(HGLogger::_enabled);
    if ((v17 & 1) != 0)
      HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"DeleteRequest::execute() -- finished unowned texture %d\n", v5, v6, *((unsigned int *)this + 18));
  }
LABEL_42:
  HGTextureManager::_dumpTextures(*(HGTextureManager **)this, *(char **)(*(_QWORD *)this + 16));
  if (*((_QWORD *)this + 13))
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(*(_QWORD *)this + 112));
    HGTextureManager::PostTextureDeleteEventList::addEvent(*(HGTextureManager::PostTextureDeleteEventList **)(*(_QWORD *)this + 112), *((void **)this + 13));
    pthread_mutex_unlock(*(pthread_mutex_t **)(*(_QWORD *)this + 112));
  }
}

void sub_1B2AA0494(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void HGTextureManager::deleteTexture(HGGLContext **this, const unsigned int *a2)
{
  pthread_mutex_t *v4;
  PCSharedCount v5;
  _BYTE v6[16];

  v4 = (pthread_mutex_t *)(this + 6);
  pthread_mutex_lock((pthread_mutex_t *)(this + 6));
  HGGLContext::context((uint64_t *)&v5, this[5]);
  HGGLSetCurrentContextGuard::HGGLSetCurrentContextGuard((HGGLContextPtr *)v6, &v5.var0);
  PCSharedCount::PCSharedCount(&v5);
  glDeleteTextures(1, a2);
  pthread_mutex_unlock(v4);
  HGGLSetCurrentContextGuard::~HGGLSetCurrentContextGuard((HGGLSetCurrentContextGuard *)v6);
}

void sub_1B2AA0524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void sub_1B2AA0538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGGLSetCurrentContextGuard::~HGGLSetCurrentContextGuard((HGGLSetCurrentContextGuard *)va);
  _Unwind_Resume(a1);
}

void HGTextureManager::PostTextureDeleteEventList::addEvent(HGTextureManager::PostTextureDeleteEventList *this, void *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)*((_QWORD *)this + 9);
  v4 = *((_QWORD *)this + 10);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = (void **)((char *)this + 64);
  v9 = (char *)*((_QWORD *)this + 8);
  v10 = (v5 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v12 = v4 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v7 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = (char *)(v5 - v9);
  if (v5 != v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v5 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v9);
    }
    v6 = (char *)*v8;
  }
LABEL_21:
  *((_QWORD *)this + 8) = v15;
  *((_QWORD *)this + 9) = v7;
  *((_QWORD *)this + 10) = v16;
  if (v6)
    operator delete(v6);
LABEL_23:
  *((_QWORD *)this + 9) = v7;
}

void TextureDeleteQueue::TextureDeleteQueue(TextureDeleteQueue *this)
{
  uint64_t v2;
  pthread_mutex_t *v3;
  const char *v4;
  char *v5;
  const char *v6;
  char *v7;
  unsigned __int8 v8;

  HGObject::HGObject(this);
  *(_QWORD *)v2 = off_1E6529C40;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_DWORD *)(v2 + 400) = 1;
  *(_WORD *)(v2 + 404) = 257;
  v3 = (pthread_mutex_t *)(v2 + 128);
  *(_BYTE *)(v2 + 406) = 1;
  pthread_mutex_init((pthread_mutex_t *)(v2 + 128), 0);
  pthread_cond_init((pthread_cond_t *)this + 4, 0);
  pthread_cond_init((pthread_cond_t *)this + 5, 0);
  pthread_cond_init((pthread_cond_t *)this + 6, 0);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 336), 0);
  *((_BYTE *)this + 405) = 0;
  if (pthread_create((pthread_t *)this + 9, 0, (void *(__cdecl *)(void *))textureFinishThread, this))
  {
    HGLogger::warning((HGLogger *)"ERROR - couldn't create texture finish thread\n", v4, v5);
  }
  else
  {
    v8 = atomic_load(HGLogger::_enabled);
    if ((v8 & 1) != 0)
      HGLogger::log((HGLogger *)"init", (const char *)1, (HGLogger *)"texture finish thread created succesfully\n", v6, v7);
  }
  pthread_mutex_lock(v3);
  while (!*((_BYTE *)this + 405))
    pthread_cond_wait((pthread_cond_t *)this + 5, v3);
  pthread_mutex_unlock(v3);
}

void sub_1B2AA07F8(_Unwind_Exception *a1)
{
  HGObject *v1;

  std::deque<TextureDeleteQueue::DeleteRequest>::~deque[abi:ne180100]((uint64_t)v1 + 80);
  HGObject::~HGObject(v1);
  _Unwind_Resume(a1);
}

uint64_t textureFinishThread(int64x2_t *a1)
{
  pthread_setname_np("com.apple.helium-texture-finish");
  TextureDeleteQueue::threadLoop(a1);
  return 0;
}

void TextureDeleteQueue::~TextureDeleteQueue(TextureDeleteQueue *this)
{
  *(_QWORD *)this = off_1E6529C40;
  TextureDeleteQueue::finishQueue(this);
  pthread_mutex_lock((pthread_mutex_t *)this + 2);
  *((_BYTE *)this + 406) = 0;
  pthread_cond_signal((pthread_cond_t *)this + 4);
  pthread_mutex_unlock((pthread_mutex_t *)this + 2);
  pthread_join(*((pthread_t *)this + 9), 0);
  pthread_mutex_destroy((pthread_mutex_t *)this + 2);
  pthread_cond_destroy((pthread_cond_t *)this + 4);
  pthread_cond_destroy((pthread_cond_t *)this + 5);
  pthread_cond_destroy((pthread_cond_t *)this + 6);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 336));
  std::deque<TextureDeleteQueue::DeleteRequest>::~deque[abi:ne180100]((uint64_t)this + 80);
  HGObject::~HGObject(this);
}

{
  void *v1;

  TextureDeleteQueue::~TextureDeleteQueue(this);
  HGObject::operator delete(v1);
}

void TextureDeleteQueue::finishQueue(TextureDeleteQueue *this)
{
  _BYTE v2[16];
  _BYTE v3[136];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v2, "texManager", 2, "TextureDeleteQueue::finishQueue()");
  if (*((_BYTE *)this + 404))
  {
    pthread_mutex_lock((pthread_mutex_t *)this + 2);
    while (*((_QWORD *)this + 15))
    {
      TextureDeleteQueue::_popFrontRequest(this, (uint64_t)v3);
      pthread_mutex_unlock((pthread_mutex_t *)this + 2);
      TextureDeleteQueue::DeleteRequest::execute((TextureDeleteQueue::DeleteRequest *)v3);
      pthread_mutex_lock((pthread_mutex_t *)this + 2);
    }
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)this + 2);
    *((_BYTE *)this + 404) = 1;
    while (!*((_BYTE *)this + 405))
      pthread_cond_wait((pthread_cond_t *)this + 5, (pthread_mutex_t *)this + 2);
    while (*((_QWORD *)this + 15))
    {
      TextureDeleteQueue::_popFrontRequest(this, (uint64_t)v3);
      TextureDeleteQueue::DeleteRequest::execute((TextureDeleteQueue::DeleteRequest *)v3);
    }
    *((_BYTE *)this + 404) = 0;
    pthread_cond_signal((pthread_cond_t *)this + 4);
  }
  pthread_mutex_unlock((pthread_mutex_t *)this + 2);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v2);
}

void sub_1B2AA09E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA09F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA0A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA0A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void TextureDeleteQueue::threadLoop(int64x2_t *this)
{
  char v2;
  pthread_mutex_t *v3;
  pthread_cond_t *v4;
  pthread_cond_t *v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *i64;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64x2_t *v20;
  int64x2_t *v21;
  __int8 *v22;
  pthread_cond_t *v23;
  _OWORD v24[4];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  timeval v30;
  timespec v31;

  if (this[25].i8[6])
  {
    v2 = 0;
    v3 = (pthread_mutex_t *)&this[8];
    v4 = (pthread_cond_t *)&this[15];
    v5 = (pthread_cond_t *)&this[12];
    v20 = this + 3;
    v21 = this + 2;
    v22 = &this[2].i8[8];
    v23 = (pthread_cond_t *)&this[18];
    while ((v2 & 1) != 0)
    {
      gettimeofday(&v30, 0);
      v31.tv_sec = v30.tv_sec;
      v31.tv_nsec = 1000 * v30.tv_usec + 40000000;
      if (v31.tv_nsec >= 0x3B9ACA00uLL)
      {
        v31.tv_sec = v30.tv_sec + 1;
        v31.tv_nsec = 1000 * v30.tv_usec - 960000000;
      }
      pthread_mutex_lock(v3);
      if (!this[25].i8[6])
        goto LABEL_12;
      if ((v2 & 1) != 0)
      {
        this[25].i8[5] = 1;
        pthread_cond_signal(v4);
        pthread_cond_timedwait(v5, v3, &v31);
        if (!this[25].i8[6])
          goto LABEL_12;
      }
LABEL_14:
      while (this[25].i8[4] || !this[7].i64[1])
      {
        this[25].i8[5] = 1;
        pthread_cond_signal(v4);
        pthread_cond_wait(v5, v3);
        if (!this[25].i8[6])
          goto LABEL_12;
      }
      this[25].i8[5] = 0;
LABEL_17:
      if (TextureDeleteQueue::DeleteRequest::test((TextureDeleteQueue::DeleteRequest *)(*(_QWORD *)(this[5].i64[1] + 8 * (this[7].i64[0] / 0x1EuLL))
                                                                                       + 136
                                                                                       * (this[7].i64[0] % 0x1EuLL))))
      {
        v7 = (void **)this[5].i64[1];
        v8 = this[7].u64[0];
        v9 = (unint64_t)v7[v8 / 0x1E] + 136 * (v8 % 0x1E);
        v10 = *(_OWORD *)(v9 + 112);
        v27 = *(_OWORD *)(v9 + 96);
        v28 = v10;
        v29 = *(_QWORD *)(v9 + 128);
        v11 = *(_OWORD *)(v9 + 48);
        v24[2] = *(_OWORD *)(v9 + 32);
        v24[3] = v11;
        v12 = *(_OWORD *)(v9 + 80);
        v25 = *(_OWORD *)(v9 + 64);
        v26 = v12;
        v13 = *(_OWORD *)(v9 + 16);
        v24[0] = *(_OWORD *)v9;
        v24[1] = v13;
        if (v25 == 2)
        {
          v14 = SDWORD1(v26);
          i64 = v22;
          goto LABEL_29;
        }
        v14 = SDWORD1(v26);
        if (!BYTE13(v25))
        {
          i64 = v20->i64;
LABEL_29:
          *i64 -= v14;
          v18 = this[7].i64[1] - 1;
          v19 = v8 + 1;
          this[7].i64[0] = v19;
          this[7].i64[1] = v18;
          if (v19 < 0x3C)
            goto LABEL_26;
LABEL_25:
          operator delete(*v7);
          this[5].i64[1] += 8;
          this[7].i64[0] -= 30;
          goto LABEL_26;
        }
        this[1] = vsubq_s64(this[1], vdupq_n_s64(SDWORD1(v26)));
        i64 = v21->i64;
        if ((SBYTE12(v25) & 0x80000000) == 0)
          goto LABEL_29;
        v16 = this[7].i64[1] - 1;
        v17 = v8 + 1;
        this[7].i64[0] = v17;
        this[7].i64[1] = v16;
        if (v17 >= 0x3C)
          goto LABEL_25;
LABEL_26:
        pthread_cond_broadcast(v23);
        pthread_mutex_unlock(v3);
        TextureDeleteQueue::DeleteRequest::execute((TextureDeleteQueue::DeleteRequest *)v24);
        v2 = 0;
        if (!this[25].i8[6])
          return;
      }
      else
      {
LABEL_3:
        pthread_mutex_unlock(v3);
        v2 = 1;
        if (!this[25].i8[6])
          return;
      }
    }
    pthread_mutex_lock(v3);
    if (this[25].i8[6])
      goto LABEL_14;
LABEL_12:
    v6 = this[7].i64[1];
    this[25].i8[5] = 0;
    if (!v6)
      goto LABEL_3;
    goto LABEL_17;
  }
}

uint64_t TextureDeleteQueue::enqueueDelete(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, char *a5, char a6, char a7)
{
  int v9;
  unsigned __int8 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  _BYTE v31[112];
  __int128 v32;
  uint64_t v33;

  v9 = (int)a5;
  v14 = atomic_load(HGLogger::_enabled);
  if ((v14 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"TextureDeleteQueue::enqueueDelete(%d)\n", a4, a5, *(unsigned int *)(a3 + 64));
  v15 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v31[40] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v31[56] = v15;
  v16 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)&v31[72] = *(_OWORD *)(a3 + 64);
  *(_OWORD *)&v31[88] = v16;
  v17 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v31[8] = *(_OWORD *)a3;
  *(_OWORD *)&v31[24] = v17;
  *(_QWORD *)v31 = a2;
  *(_QWORD *)&v31[104] = a4;
  LOBYTE(v32) = a6;
  BYTE1(v32) = a7;
  *((_QWORD *)&v32 + 1) = HGGetTBC();
  v33 = glFenceSyncAPPLE();
  glFlush();
  if (!v9)
  {
    TextureDeleteQueue::DeleteRequest::execute((TextureDeleteQueue::DeleteRequest *)v31);
    return *(unsigned int *)(a3 + 64);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 88);
  v20 = 30 * ((v18 - v19) >> 3) - 1;
  if (v18 == v19)
    v20 = 0;
  v21 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112);
  if (v20 == v21)
  {
    std::deque<TextureDeleteQueue::DeleteRequest>::__add_back_capacity(a1 + 80);
    v19 = *(_QWORD *)(a1 + 88);
    v21 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112);
  }
  v22 = *(_QWORD *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
  v23 = *(_OWORD *)&v31[48];
  *(_OWORD *)(v22 + 32) = *(_OWORD *)&v31[32];
  *(_OWORD *)(v22 + 48) = v23;
  v24 = v32;
  v25 = *(_OWORD *)&v31[80];
  *(_OWORD *)(v22 + 96) = *(_OWORD *)&v31[96];
  *(_OWORD *)(v22 + 112) = v24;
  v26 = *(_OWORD *)&v31[64];
  *(_QWORD *)(v22 + 128) = v33;
  *(_OWORD *)(v22 + 64) = v26;
  *(_OWORD *)(v22 + 80) = v25;
  v27 = *(_OWORD *)&v31[16];
  *(_OWORD *)v22 = *(_OWORD *)v31;
  *(_OWORD *)(v22 + 16) = v27;
  ++*(_QWORD *)(a1 + 120);
  if (v31[64] == 2)
  {
    v28 = *(int *)&v31[84];
    v29 = (_QWORD *)(a1 + 40);
LABEL_15:
    *v29 += v28;
    goto LABEL_16;
  }
  v28 = *(int *)&v31[84];
  if (!v31[77])
  {
    v29 = (_QWORD *)(a1 + 48);
    goto LABEL_15;
  }
  *(int64x2_t *)(a1 + 16) = vaddq_s64(*(int64x2_t *)(a1 + 16), vdupq_n_s64(*(int *)&v31[84]));
  if ((v31[76] & 0x80000000) == 0)
  {
    v29 = (_QWORD *)(a1 + 32);
    goto LABEL_15;
  }
LABEL_16:
  if (!*(_BYTE *)(a1 + 404))
    pthread_cond_signal((pthread_cond_t *)(a1 + 192));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 128));
  return *(unsigned int *)(a3 + 64);
}

uint64_t TextureDeleteQueue::_popFrontRequest@<X0>(TextureDeleteQueue *this@<X0>, uint64_t a2@<X8>)
{
  void **v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;

  v3 = (void **)*((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 14);
  v5 = (unint64_t)v3[v4 / 0x1E] + 136 * (v4 % 0x1E);
  v6 = *(_OWORD *)(v5 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v5 + 96);
  *(_OWORD *)(a2 + 112) = v6;
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(v5 + 128);
  v7 = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(a2 + 48) = v7;
  v8 = *(_OWORD *)(v5 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 80) = v8;
  v9 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v5;
  *(_OWORD *)(a2 + 16) = v9;
  if (*(_BYTE *)(a2 + 64) == 2)
  {
    v10 = *(int *)(a2 + 84);
    v11 = (char *)this + 40;
  }
  else
  {
    v10 = *(int *)(a2 + 84);
    if (*(_BYTE *)(a2 + 77))
    {
      *((int64x2_t *)this + 1) = vsubq_s64(*((int64x2_t *)this + 1), vdupq_n_s64(v10));
      if (*(char *)(a2 + 76) < 0)
        goto LABEL_8;
      v11 = (char *)this + 32;
    }
    else
    {
      v11 = (char *)this + 48;
    }
  }
  *(_QWORD *)v11 -= v10;
LABEL_8:
  v12 = *((_QWORD *)this + 15) - 1;
  v13 = v4 + 1;
  *((_QWORD *)this + 14) = v13;
  *((_QWORD *)this + 15) = v12;
  if (v13 >= 0x3C)
  {
    operator delete(*v3);
    *((_QWORD *)this + 11) += 8;
    *((_QWORD *)this + 14) -= 30;
  }
  pthread_cond_broadcast((pthread_cond_t *)this + 6);
  return *((unsigned int *)this + 30);
}

uint64_t TextureDeleteQueue::executeFinishedRequests(pthread_mutex_t *this, int a2)
{
  uint64_t v4;
  _BYTE v6[136];

  if (!a2)
  {
    if (!*(_QWORD *)&this[1].__opaque[48])
      return 0;
    v4 = 0;
    do
    {
      if (!TextureDeleteQueue::DeleteRequest::test((TextureDeleteQueue::DeleteRequest *)(*(_QWORD *)(*(_QWORD *)&this[1].__opaque[16] + 8 * (*(_QWORD *)&this[1].__opaque[40] / 0x1EuLL))
                                                                                        + 136
                                                                                        * (*(_QWORD *)&this[1].__opaque[40]
                                                                                         % 0x1EuLL))))
        break;
      TextureDeleteQueue::_popFrontRequest((TextureDeleteQueue *)this, (uint64_t)v6);
      TextureDeleteQueue::DeleteRequest::execute((TextureDeleteQueue::DeleteRequest *)v6);
      v4 = (v4 + 1);
    }
    while (*(_QWORD *)&this[1].__opaque[48]);
    goto LABEL_11;
  }
  pthread_mutex_lock(this + 2);
  if (*(_QWORD *)&this[1].__opaque[48])
  {
    v4 = 0;
    do
    {
      if (!TextureDeleteQueue::DeleteRequest::test((TextureDeleteQueue::DeleteRequest *)(*(_QWORD *)(*(_QWORD *)&this[1].__opaque[16] + 8 * (*(_QWORD *)&this[1].__opaque[40] / 0x1EuLL))
                                                                                        + 136
                                                                                        * (*(_QWORD *)&this[1].__opaque[40]
                                                                                         % 0x1EuLL))))
        break;
      TextureDeleteQueue::_popFrontRequest((TextureDeleteQueue *)this, (uint64_t)v6);
      pthread_mutex_unlock(this + 2);
      TextureDeleteQueue::DeleteRequest::execute((TextureDeleteQueue::DeleteRequest *)v6);
      v4 = (v4 + 1);
      pthread_mutex_lock(this + 2);
    }
    while (*(_QWORD *)&this[1].__opaque[48]);
LABEL_11:
    if (!a2)
      return v4;
    goto LABEL_14;
  }
  v4 = 0;
LABEL_14:
  pthread_mutex_unlock(this + 2);
  return v4;
}

void HGTexturePoolHandleImpl::HGTexturePoolHandleImpl(HGTexturePoolHandleImpl *this, HGTextureManager *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  HGObject::HGObject(this);
  *v4 = off_1E6529C78;
  v4[2] = a2;
  v5 = *((_QWORD *)a2 + 2);
  {
    v12 = (_QWORD *)operator new();
    v12[1] = 0;
    v6 = (uint64_t)(v12 + 1);
    v12[2] = 0;
    *v12 = v12 + 1;
LABEL_15:
    v8 = v6;
    goto LABEL_16;
  }
  if (!v7)
    goto LABEL_15;
  do
  {
    v9 = v7[4];
    v10 = v9 >= v5;
    if (v9 >= v5)
      v11 = v7;
    else
      v11 = v7 + 1;
    if (v10)
      v8 = (uint64_t)v7;
    v7 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 == v6 || *(_QWORD *)(v8 + 32) > v5)
    goto LABEL_15;
LABEL_16:
  v13 = *(_QWORD *)(v8 + 40);
  *((_QWORD *)this + 3) = v13;
  pthread_mutex_lock((pthread_mutex_t *)(v13 + 16));
}

void sub_1B2AA1260(_Unwind_Exception *a1)
{
  HGObject *v1;

  HGObject::~HGObject(v1);
  _Unwind_Resume(a1);
}

void HGTexturePoolHandleImpl::~HGTexturePoolHandleImpl(HGTexturePoolHandleImpl *this)
{
  *(_QWORD *)this = off_1E6529C78;
  pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)this + 3) + 16));
  HGObject::~HGObject(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E6529C78;
  pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)this + 3) + 16));
  HGObject::~HGObject(this);
  HGObject::operator delete(v2);
}

BOOL HGTexturePoolHandleImpl::empty(HGTexturePoolHandleImpl *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 120) == 0;
}

uint64_t HGTexturePoolHandleImpl::size(HGTexturePoolHandleImpl *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 120);
}

unint64_t HGTexturePoolHandleImpl::begin(HGTexturePoolHandleImpl *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 88) + 8 * (*(_QWORD *)(*((_QWORD *)this + 3) + 112) / 0x2AuLL);
}

unint64_t HGTexturePoolHandleImpl::end(HGTexturePoolHandleImpl *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 88)
       + 8 * ((*(_QWORD *)(*((_QWORD *)this + 3) + 112) + *(_QWORD *)(*((_QWORD *)this + 3) + 120)) / 0x2AuLL);
}

void **HGTexturePoolHandleImpl::remove(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return HGTextureManager::releaseFromPool(*(_QWORD *)(a1 + 16), (uint64_t)v4);
}

void **HGTextureManager::releaseFromPool(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  int64x2_t *v12;
  uint64_t GLState;
  uint64_t v14;
  unint64_t v15;
  int64x2_t *v16;
  void **v17;
  PCSharedCount v19;
  PCSharedCount v20[3];

  v4 = *(_QWORD *)(a1 + 16);
  {
    v11 = (_QWORD *)operator new();
    v11[1] = 0;
    v5 = (uint64_t)(v11 + 1);
    v11[2] = 0;
    *v11 = v11 + 1;
LABEL_15:
    v7 = v5;
    goto LABEL_16;
  }
  if (!v6)
    goto LABEL_15;
  do
  {
    v8 = v6[4];
    v9 = v8 >= v4;
    if (v8 >= v4)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (uint64_t)v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v5 || *(_QWORD *)(v7 + 32) > v4)
    goto LABEL_15;
LABEL_16:
  v12 = *(int64x2_t **)(v7 + 40);
  GLState = HGGPURenderer::GetGLState(*(HGGPURenderer **)(a1 + 8));
  HGGPURenderer::GetCurrentContext(*(HGGPURenderer **)(a1 + 8), (uint64_t *)&v19);
  HGGLState::SetCurrentContextGuard::SetCurrentContextGuard(v20, GLState, &v19);
  PCSharedCount::PCSharedCount(&v19);
  glDeleteTextures(1, (const GLuint *)(*(_QWORD *)(a2 + 8) + 64));
  v14 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(v14 + 56) == 2)
  {
    v15 = *(int *)(v14 + 76);
    v16 = (int64x2_t *)((char *)v12 + 152);
LABEL_22:
    v16->i64[0] -= v15;
    goto LABEL_23;
  }
  v15 = *(int *)(v14 + 76);
  if (!*(_BYTE *)(v14 + 69))
  {
    v16 = v12 + 10;
    goto LABEL_22;
  }
  v12[8] = vsubq_s64(v12[8], vdupq_n_s64(v15));
  if ((*(char *)(v14 + 68) & 0x80000000) == 0)
  {
    v16 = v12 + 9;
    goto LABEL_22;
  }
LABEL_23:
  v17 = std::deque<HGTextureManager::TextureEntry>::erase(v12 + 5, *(_QWORD **)a2, (char *)v14);
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard(v20);
  return v17;
}

void sub_1B2AA1580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCSharedCount a9)
{
  PCSharedCount::PCSharedCount(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AA1594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void HGTexturePoolHandleImpl::clear(HGTextureManager **this)
{
  HGTextureManager::emptyTexturePool_NoLock(this[2]);
}

void HGTextureManager::emptyTexturePool_NoLock(HGTextureManager *this)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  int64x2_t *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int64x2_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t GLState;
  PCSharedCount v27;
  PCSharedCount v28[3];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  _BYTE v34[24];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v34, "texManager", 2, "emptyTexturePool()");
  v2 = *((_QWORD *)this + 2);
  {
    v9 = (_QWORD *)operator new();
    v9[1] = 0;
    v3 = (uint64_t)(v9 + 1);
    v9[2] = 0;
    *v9 = v9 + 1;
LABEL_15:
    v5 = v3;
    goto LABEL_16;
  }
  if (!v4)
    goto LABEL_15;
  do
  {
    v6 = v4[4];
    v7 = v6 >= v2;
    if (v6 >= v2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = (uint64_t)v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v3 || *(_QWORD *)(v5 + 32) > v2)
    goto LABEL_15;
LABEL_16:
  v10 = *(int64x2_t **)(v5 + 40);
  for (i = v10[7].i64[1]; i; i = v10[7].i64[1])
  {
    v12 = v10[7].i64[0];
    v13 = v10[5].i64[1];
    v14 = (__int128 *)(*(_QWORD *)(v13 + 8 * ((i - 1 + v12) / 0x2AuLL)) + 96 * ((i - 1 + v12) % 0x2AuLL));
    v15 = v14[4];
    v16 = v14[5];
    v17 = v14[2];
    v32 = v14[3];
    v18 = v14[1];
    v29 = *v14;
    v30 = v18;
    v33[0] = v15;
    v33[1] = v16;
    v31 = v17;
    if (BYTE8(v32) == 2)
    {
      v19 = SHIDWORD(v33[0]);
      v20 = (int64x2_t *)((char *)v10 + 152);
    }
    else
    {
      v19 = SHIDWORD(v33[0]);
      if (BYTE5(v33[0]))
      {
        v10[8] = vsubq_s64(v10[8], vdupq_n_s64(SHIDWORD(v33[0])));
        v20 = v10 + 9;
        if (SBYTE4(v33[0]) < 0)
          goto LABEL_24;
      }
      else
      {
        v20 = v10 + 10;
      }
    }
    v20->i64[0] -= v19;
LABEL_24:
    v21 = v10[6].i64[0];
    v23 = v21 - v13;
    v22 = v23 == 0;
    v24 = 42 * (v23 >> 3) - 1;
    v10[7].i64[1] = i - 1;
    if (v22)
      v25 = 0;
    else
      v25 = v24;
    if ((unint64_t)(v25 - (i + v12) + 1) >= 0x54)
    {
      operator delete(*(void **)(v21 - 8));
      v10[6].i64[0] -= 8;
    }
    GLState = HGGPURenderer::GetGLState(*((HGGPURenderer **)this + 1));
    HGGPURenderer::GetCurrentContext(*((HGGPURenderer **)this + 1), (uint64_t *)&v27);
    HGGLState::SetCurrentContextGuard::SetCurrentContextGuard(v28, GLState, &v27);
    PCSharedCount::PCSharedCount(&v27);
    glDeleteTextures(1, (const GLuint *)v33);
    HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard(v28);
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v34);
}

void sub_1B2AA182C(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1B2AA1840(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1B2AA1854(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1B2AA1868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard((PCSharedCount *)va);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v4 - 104));
  _Unwind_Resume(a1);
}

void sub_1B2AA1884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCSharedCount a11)
{
  uint64_t v11;

  PCSharedCount::PCSharedCount(&a11);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v11 - 104));
  _Unwind_Resume(a1);
}

void sub_1B2AA18A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1B2AA18B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 104));
  _Unwind_Resume(a1);
}

void HGTextureManagerHandleImpl::~HGTextureManagerHandleImpl(HGTextureManagerHandleImpl *this)
{
  void *v1;

  HGObject::~HGObject(this);
  HGObject::operator delete(v1);
}

void HGTextureManagerHandleImpl::lockFreePool(HGTextureManager **this@<X0>, HGTexturePoolHandleImpl **a2@<X8>)
{
  HGTexturePoolHandleImpl *v4;

  v4 = (HGTexturePoolHandleImpl *)HGObject::operator new(0x20uLL);
  HGTexturePoolHandleImpl::HGTexturePoolHandleImpl(v4, this[2]);
  *a2 = v4;
}

void sub_1B2AA1920(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t HGTextureManagerHandleImpl::getNumTextures(uint64_t a1, int a2, uint64_t a3)
{
  return HGTextureManager::getNumTextures(*(unint64_t **)(a1 + 16), a2, a3);
}

uint64_t HGTextureManager::getNumTextures(unint64_t *a1, int a2, uint64_t a3)
{
  int v3;
  HGTextureManager *v6;
  HGTextureManager *NumTextures;
  int v8;
  int v9;
  int QueuedTotalTextureCount;
  HGTextureManager *v11;
  HGTextureManager *FreeTotalTextureCount;
  HGTextureManager *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a3;
  switch(a2)
  {
    case 0:
      if ((_DWORD)a3 == 2)
      {
        {
          {
LABEL_27:
            v16 = v14 - v15 - 8;
            if (v16 >= 8)
            {
              v24 = 0;
              v25 = 0;
              v26 = (v16 >> 3) + 1;
              v18 = &v15[8 * (v26 & 0x3FFFFFFFFFFFFFFELL)];
              v27 = v15 + 8;
              v28 = v26 & 0x3FFFFFFFFFFFFFFELL;
              do
              {
                v24 += *(_QWORD *)(*(_QWORD *)(*(v27 - 1) + 32) + 120);
                v25 += *(_QWORD *)(*(_QWORD *)(*v27 + 32) + 120);
                v27 += 2;
                v28 -= 2;
              }
              while (v28);
              v17 = v25 + v24;
              if (v26 == (v26 & 0x3FFFFFFFFFFFFFFELL))
                goto LABEL_44;
            }
            else
            {
              v17 = 0;
              v18 = v15;
            }
            do
            {
              v29 = *(_QWORD *)v18;
              v18 += 8;
              v17 += *(_QWORD *)(*(_QWORD *)(v29 + 32) + 120);
            }
            while (v18 != v14);
LABEL_44:
            return v17;
          }
        }
        else
        {
          v22 = (_QWORD *)operator new();
          v15 = 0;
          v22[1] = 0;
          v22[2] = 0;
          *v22 = 0;
          v14 = (char *)v22[1];
          if (v14)
            goto LABEL_27;
        }
        v17 = 0;
        goto LABEL_44;
      }
      if ((_DWORD)a3 == 1)
      {
        v19 = a1[2];
        {
            goto LABEL_31;
        }
        else
        {
          v23 = (_QWORD *)operator new();
          v20 = 0;
          v23[1] = 0;
          v23[2] = 0;
          *v23 = 0;
          v21 = v23[1];
          if (v21)
          {
LABEL_31:
            v17 = 0;
            do
            {
              if (*(_QWORD *)(*(_QWORD *)v20 + 16) == v19)
                v17 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v20 + 32) + 120);
              v20 += 8;
            }
            while (v20 != v21);
            goto LABEL_44;
          }
        }
        v17 = 0;
        goto LABEL_44;
      }
      if ((_DWORD)a3)
        return 0;
      return *(unsigned int *)(a1[4] + 120);
    case 1:
      if ((_DWORD)a3 == 2)
        return HGTextureManager::_getFreeTotalTextureCount((HGTextureManager *)a1);
      if ((_DWORD)a3 != 1)
        return 0;
      return HGTextureManager::_getFreeTotalTextureCount((HGTextureManager *)a1, a1[2]);
    case 2:
      if ((_DWORD)a3 == 2)
        return HGTextureManager::_getQueuedTotalTextureCount((HGTextureManager *)a1);
      if ((_DWORD)a3 != 1)
        return 0;
      return HGTextureManager::_getQueuedTotalTextureCount((HGTextureManager *)a1, a1[2]);
    case 3:
      if ((_DWORD)a3 == 2)
      {
        FreeTotalTextureCount = (HGTextureManager *)HGTextureManager::_getFreeTotalTextureCount((HGTextureManager *)a1);
        return HGTextureManager::_getQueuedTotalTextureCount(FreeTotalTextureCount)
             + FreeTotalTextureCount;
      }
      else if ((_DWORD)a3 == 1)
      {
        v6 = (HGTextureManager *)HGTextureManager::_getFreeTotalTextureCount((HGTextureManager *)a1, a1[2]);
        return HGTextureManager::_getQueuedTotalTextureCount(v6, a1[2]) + v6;
      }
      else
      {
        return 0;
      }
    case 4:
      NumTextures = (HGTextureManager *)HGTextureManager::getNumTextures(a1, 0, a3);
      v8 = (int)NumTextures;
      if (v3 == 2)
      {
        v13 = (HGTextureManager *)HGTextureManager::_getFreeTotalTextureCount(NumTextures);
        v9 = (int)v13;
        QueuedTotalTextureCount = HGTextureManager::_getQueuedTotalTextureCount(v13);
      }
      else
      {
        v9 = 0;
        QueuedTotalTextureCount = 0;
        if (v3 == 1)
        {
          v11 = (HGTextureManager *)HGTextureManager::_getFreeTotalTextureCount(0, a1[2]);
          v9 = (int)v11;
          QueuedTotalTextureCount = HGTextureManager::_getQueuedTotalTextureCount(v11, a1[2]);
        }
      }
      return (v9 + QueuedTotalTextureCount + v8);
    default:
      return 0;
  }
}

uint64_t HGTextureManagerHandleImpl::getNumBytes(uint64_t a1, int a2, uint64_t a3)
{
  return HGTextureManager::getNumBytes(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t HGTextureManager::getNumBytes(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  uint64_t NumBytes;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = a3;
  switch(a2)
  {
    case 0:
      if ((_DWORD)a3 != 2)
      {
        if ((_DWORD)a3 != 1)
        {
          if ((_DWORD)a3)
            return 0;
          return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
        }
        v12 = *(_QWORD *)(a1 + 16);
        {
            goto LABEL_43;
LABEL_39:
          v17 = 0;
          do
          {
            if (*(_QWORD *)(*(_QWORD *)v13 + 16) == v12)
              v17 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 32) + 136);
            v13 += 8;
          }
          while (v13 != v14);
          goto LABEL_48;
        }
        v19 = (_QWORD *)operator new();
        v13 = 0;
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v14 = v19[1];
        if (v14)
          goto LABEL_39;
LABEL_43:
        v17 = 0;
        goto LABEL_48;
      }
      {
          goto LABEL_43;
      }
      else
      {
        v15 = (_QWORD *)operator new();
        v11 = 0;
        v15[1] = 0;
        v15[2] = 0;
        *v15 = 0;
        v10 = (char *)v15[1];
        if (!v10)
          goto LABEL_43;
      }
      v16 = v10 - v11 - 8;
      if (v16 >= 8)
      {
        v20 = 0;
        v21 = 0;
        v22 = (v16 >> 3) + 1;
        v18 = &v11[8 * (v22 & 0x3FFFFFFFFFFFFFFELL)];
        v23 = v11 + 8;
        v24 = v22 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          v20 += *(_QWORD *)(*(_QWORD *)(*(v23 - 1) + 32) + 136);
          v21 += *(_QWORD *)(*(_QWORD *)(*v23 + 32) + 136);
          v23 += 2;
          v24 -= 2;
        }
        while (v24);
        v17 = v21 + v20;
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_48;
      }
      else
      {
        v17 = 0;
        v18 = v11;
      }
      do
      {
        v25 = *(_QWORD *)v18;
        v18 += 8;
        v17 += *(_QWORD *)(*(_QWORD *)(v25 + 32) + 136);
      }
      while (v18 != v10);
LABEL_48:
      return v17;
    case 1:
      if ((_DWORD)a3 == 2)
      {
        HGTextureManager::_getFreeTotalTextureUsage(&v26);
      }
      else
      {
        if ((_DWORD)a3 != 1)
          return 0;
        HGTextureManager::_getFreeTotalTextureUsage(*(_QWORD *)(a1 + 16), &v26);
      }
      return v27;
    case 2:
      if ((_DWORD)a3 == 2)
      {
        HGTextureManager::_getQueuedTotalTextureUsage(&v26);
      }
      else
      {
        if ((_DWORD)a3 != 1)
          return 0;
        HGTextureManager::_getQueuedTotalTextureUsage(*(_QWORD *)(a1 + 16), &v26);
      }
      return v27;
    case 3:
      if ((_DWORD)a3 == 2)
      {
        HGTextureManager::_getFreeTotalTextureUsage(&v26);
        NumBytes = v27;
        HGTextureManager::_getQueuedTotalTextureUsage(&v26);
        v7 = v27;
      }
      else if ((_DWORD)a3 == 1)
      {
        HGTextureManager::_getFreeTotalTextureUsage(*(_QWORD *)(a1 + 16), &v26);
        NumBytes = v27;
        HGTextureManager::_getQueuedTotalTextureUsage(*(_QWORD *)(a1 + 16), &v26);
        v7 = v27;
      }
      else
      {
        NumBytes = 0;
        v7 = 0;
      }
      return v7 + NumBytes;
    case 4:
      NumBytes = HGTextureManager::getNumBytes(a1, 0, a3);
      if (v3 == 2)
      {
        HGTextureManager::_getFreeTotalTextureUsage(&v26);
        v8 = v27;
        HGTextureManager::_getQueuedTotalTextureUsage(&v26);
        goto LABEL_25;
      }
      if (v3 == 1)
      {
        HGTextureManager::_getFreeTotalTextureUsage(*(_QWORD *)(a1 + 16), &v26);
        v8 = v27;
        HGTextureManager::_getQueuedTotalTextureUsage(*(_QWORD *)(a1 + 16), &v26);
LABEL_25:
        v9 = v27;
        goto LABEL_27;
      }
      v8 = 0;
      v9 = 0;
LABEL_27:
      v7 = v8 + v9;
      return v7 + NumBytes;
    default:
      return 0;
  }
}

uint64_t HGTextureManagerHandleImpl::getTotalTextureMemory(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 144);
}

void NoPaddingPolicy::~NoPaddingPolicy(NoPaddingPolicy *this)
{
  void *v1;

  HGObject::~HGObject(this);
  HGObject::operator delete(v1);
}

uint64_t NoPaddingPolicy::adjustRect(NoPaddingPolicy *this, HGRect a2)
{
  return *(_QWORD *)&a2.var0;
}

void NoPoolingPolicy::~NoPoolingPolicy(NoPoolingPolicy *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6529D38;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGObject::~HGObject(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E6529D38;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGObject::~HGObject(this);
  HGObject::operator delete(v3);
}

uint64_t NoPoolingPolicy::preAllocateTexture(NoPoolingPolicy *this)
{
  uint64_t result;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 2) + 40))(&v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  result = v2;
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return result;
}

void sub_1B2AA2190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

BOOL NoPoolingPolicy::waitForQueuedForDeletionTextures(NoPoolingPolicy *this)
{
  return (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2), 2, 1) > 2;
}

void POTPaddingPolicy::POTPaddingPolicy(POTPaddingPolicy *this)
{
  _QWORD *v1;

  HGObject::HGObject(this);
  *v1 = off_1E6529E18;
}

void POTPaddingPolicy::~POTPaddingPolicy(POTPaddingPolicy *this)
{
  void *v1;

  HGObject::~HGObject(this);
  HGObject::operator delete(v1);
}

uint64_t POTPaddingPolicy::adjustRect(POTPaddingPolicy *this, HGRect a2)
{
  uint64_t v2;
  int var1;
  int var3;

  v2 = *(_QWORD *)&a2.var0;
  var1 = a2.var1;
  var3 = a2.var3;
  log2f((float)(a2.var2 - a2.var0));
  log2f((float)(var3 - var1));
  return v2;
}

void BorderPaddingPolicy::BorderPaddingPolicy(BorderPaddingPolicy *this, int a2)
{
  uint64_t v3;

  HGObject::HGObject(this);
  *(_QWORD *)v3 = off_1E6529E58;
  *(_DWORD *)(v3 + 12) = a2;
}

void BorderPaddingPolicy::~BorderPaddingPolicy(BorderPaddingPolicy *this)
{
  void *v1;

  HGObject::~HGObject(this);
  HGObject::operator delete(v1);
}

unint64_t BorderPaddingPolicy::adjustRect(BorderPaddingPolicy *this, HGRect a2)
{
  return (a2.var0 - *((_DWORD *)this + 3)) | ((unint64_t)(a2.var1
                                                                                           - *((_DWORD *)this + 3)) << 32);
}

void ClusteredPaddingPolicy::ClusteredPaddingPolicy(ClusteredPaddingPolicy *this)
{
  uint64_t v1;

  HGObject::HGObject(this);
  *(_QWORD *)v1 = off_1E6529E98;
  *(_QWORD *)(v1 + 16) = v1 + 16;
  *(_QWORD *)(v1 + 24) = v1 + 16;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0x100000002;
  *(_DWORD *)(v1 + 48) = 4;
  if (HG_RENDERER_ENV::TEX_PADDING_REMEMBRANCE != -1)
    *(_DWORD *)(v1 + 40) = HG_RENDERER_ENV::TEX_PADDING_REMEMBRANCE;
  if (HG_RENDERER_ENV::TEX_PADDING_CUSHIONING != -1)
    *(_DWORD *)(v1 + 44) = HG_RENDERER_ENV::TEX_PADDING_CUSHIONING;
  if (HG_RENDERER_ENV::TEX_PADDING_CLUMPING != -1)
    *(_DWORD *)(v1 + 48) = HG_RENDERER_ENV::TEX_PADDING_CLUMPING;
}

void ClusteredPaddingPolicy::~ClusteredPaddingPolicy(ClusteredPaddingPolicy *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  *(_QWORD *)this = off_1E6529E98;
  if (*((_QWORD *)this + 4))
  {
    v2 = (char *)this + 16;
    v4 = *((_QWORD *)this + 2);
    v3 = (char *)*((_QWORD *)this + 3);
    v5 = *(_QWORD *)v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *((_QWORD *)this + 4) = 0;
    if (v3 != (char *)this + 16)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  HGObject::~HGObject(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;

  *(_QWORD *)this = off_1E6529E98;
  if (*((_QWORD *)this + 4))
  {
    v2 = (char *)this + 16;
    v4 = *((_QWORD *)this + 2);
    v3 = (char *)*((_QWORD *)this + 3);
    v5 = *(_QWORD *)v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *((_QWORD *)this + 4) = 0;
    if (v3 != (char *)this + 16)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  HGObject::~HGObject(this);
  HGObject::operator delete(v7);
}

uint64_t ClusteredPaddingPolicy::adjustRect(ClusteredPaddingPolicy *this, HGRect a2)
{
  uint64_t v2;
  int var3;
  unsigned int v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;

  v2 = *(_QWORD *)&a2.var0;
  var3 = a2.var3;
  v5 = *((_DWORD *)this + 11);
  if (v5 >= 2)
  {
    a2.var2 = v5 + v5 * ((~a2.var0 + a2.var2) / v5) + a2.var0;
    var3 = v5 + v5 * ((~a2.var1 + a2.var3) / v5) + a2.var1;
  }
  v6 = *((unsigned int *)this + 12);
  if (v6 >= 2)
  {
    v7 = (char *)this + 16;
    v8 = (a2.var2 - a2.var0);
    v9 = (var3 - a2.var1);
    v10 = (uint64_t *)*((_QWORD *)this + 3);
    if (v10 == (uint64_t *)((char *)this + 16))
      goto LABEL_24;
    v11 = (uint64_t *)*((_QWORD *)this + 3);
    while (1)
    {
      v12 = v11[2];
      v13 = v11[3];
      v14 = v8 - v12;
      if (v12 >= v8)
        v14 = v12 - v8;
      v15 = v9 - v13;
      if (v13 >= v9)
        v15 = v13 - v9;
      if (v14 < v6 && v15 < v6)
        break;
      v11 = (uint64_t *)v11[1];
      if (v11 == (uint64_t *)v7)
        goto LABEL_24;
    }
    if (v12 > v8)
      v8 = v11[2];
    if (v13 > v9)
      v9 = v11[3];
    if (v11 == (uint64_t *)v7)
    {
LABEL_24:
      v21 = operator new(0x20uLL);
      v21[2] = v8;
      v21[3] = v9;
      *v21 = v7;
      v21[1] = v10;
      *v10 = (uint64_t)v21;
      v22 = *((_QWORD *)this + 4) + 1;
      *((_QWORD *)this + 3) = v21;
      *((_QWORD *)this + 4) = v22;
      v23 = *((unsigned int *)this + 10);
      if (v22 > v23)
        std::list<ClusteredPaddingPolicy::Size>::resize((_QWORD *)this + 2, v23);
    }
    else if (v11 == v10)
    {
      v10[2] = v8;
      v10[3] = v9;
    }
    else
    {
      v17 = *v11;
      *(_QWORD *)(v17 + 8) = v11[1];
      *(_QWORD *)v11[1] = v17;
      --*((_QWORD *)this + 4);
      operator delete(v11);
      v18 = operator new(0x20uLL);
      v18[2] = v8;
      v18[3] = v9;
      v19 = (_QWORD *)*((_QWORD *)this + 3);
      v20 = *((_QWORD *)this + 4);
      *v18 = v7;
      v18[1] = v19;
      *v19 = v18;
      *((_QWORD *)this + 3) = v18;
      *((_QWORD *)this + 4) = v20 + 1;
    }
  }
  return v2;
}

_QWORD *std::list<ClusteredPaddingPolicy::Size>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v3 = result;
  v4 = result[2];
  v5 = v4 - a2;
  if (v4 > a2)
  {
    if (a2 <= v4 >> 1)
    {
      result = (_QWORD *)result[1];
      if ((a2 & 0x8000000000000000) != 0)
      {
        result = (_QWORD *)*result;
        if (result == v3)
          return result;
LABEL_20:
        v13 = *v3;
        v14 = *result;
        *(_QWORD *)(v14 + 8) = *(_QWORD *)(*v3 + 8);
        **(_QWORD **)(v13 + 8) = v14;
        do
        {
          v15 = (_QWORD *)result[1];
          --v3[2];
          operator delete(result);
          result = v15;
        }
        while (v15 != v3);
        return result;
      }
      if (a2)
      {
        v11 = a2 + 1;
        do
        {
          result = (_QWORD *)result[1];
          --v11;
        }
        while (v11 > 1);
      }
    }
    else if (v5 < 1)
    {
      v12 = a2 - v4 + 1;
      do
      {
        result = (_QWORD *)result[1];
        --v12;
      }
      while (v12 > 1);
    }
    else
    {
      do
      {
        result = (_QWORD *)*result;
        --v5;
      }
      while (v5);
    }
    if (result == v3)
      return result;
    goto LABEL_20;
  }
  if (v4 < a2)
  {
    result = operator new(0x20uLL);
    v6 = result;
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    if (~v4 + a2)
    {
      v7 = a2 - v4;
      v8 = v5 + 1;
      v9 = result;
      do
      {
        result = operator new(0x20uLL);
        *result = v9;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        v9[1] = result;
        v9 = result;
      }
      while (!__CFADD__(v8++, 1));
    }
    else
    {
      v7 = 1;
    }
    result[1] = v3;
    v16 = *v3;
    *v6 = *v3;
    *(_QWORD *)(v16 + 8) = v6;
    *v3 = result;
    v3[2] = v7 + v4;
  }
  return result;
}

void sub_1B2AA2780(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B2AA27A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void SimplePoolingPolicy::~SimplePoolingPolicy(SimplePoolingPolicy *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6529D38;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGObject::~HGObject(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E6529D38;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGObject::~HGObject(this);
  HGObject::operator delete(v3);
}

uint64_t SimplePoolingPolicy::preAllocateTexture(SimplePoolingPolicy *this)
{
  uint64_t v2;
  const char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t result;
  uint64_t v9;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 2) + 40))(&v9);
  while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) & 1) == 0
       && (unint64_t)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), 3, 1) > *((_QWORD *)this + 3))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
    v6 = v2;
    v7 = atomic_load(HGLogger::_enabled);
    if ((v7 & 1) != 0)
      HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"pool too large! deleting old texture %d\n", v3, v4, *(unsigned int *)(v2 + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 72))(v9, v5, v6);
  }
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  return result;
}

void sub_1B2AA2948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

BOOL SimplePoolingPolicy::waitForQueuedForDeletionTextures(SimplePoolingPolicy *this)
{
  return (float)(*((float *)this + 8) * (float)*((unint64_t *)this + 3)) < (float)(unint64_t)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), 2, 1);
}

void MultiGPUPoolingPolicy::MultiGPUPoolingPolicy(MultiGPUPoolingPolicy *this)
{
  uint64_t v1;
  float v2;

  HGObject::HGObject(this);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = off_1E6529F28;
  *(_OWORD *)(v1 + 24) = xmmword_1B3523BF0;
  *(_QWORD *)(v1 + 40) = 1056964608;
  if (HG_RENDERER_ENV::MAX_TEXTURE_AGE_MS != -1)
  {
    if (HG_RENDERER_ENV::MAX_TEXTURE_AGE_MS)
      v2 = (float)HG_RENDERER_ENV::MAX_TEXTURE_AGE_MS;
    else
      v2 = 3.4028e38;
    *(float *)(v1 + 24) = v2;
  }
  if (HG_RENDERER_ENV::MAX_TEXTURE_POOL_SIZE_PERCENT != -1)
    *(float *)(v1 + 28) = (float)HG_RENDERER_ENV::MAX_TEXTURE_POOL_SIZE_PERCENT * 0.01;
  if (HG_RENDERER_ENV::MAX_TEXTURE_QUEUE_SIZE_PERCENT != -1)
    *(float *)(v1 + 32) = (float)HG_RENDERER_ENV::MAX_TEXTURE_QUEUE_SIZE_PERCENT * 0.01;
  if (HG_RENDERER_ENV::MAX_TEXTURE_UNUSED_SIZE_PERCENT != -1)
    *(float *)(v1 + 36) = (float)HG_RENDERER_ENV::MAX_TEXTURE_UNUSED_SIZE_PERCENT * 0.01;
  if (HG_RENDERER_ENV::MAX_TEXTURE_TOTAL_SIZE_PERCENT != -1)
    *(float *)(v1 + 40) = (float)HG_RENDERER_ENV::MAX_TEXTURE_TOTAL_SIZE_PERCENT * 0.01;
  if (HG_RENDERER_ENV::TEXTURE_POOL_STRATEGY != -1)
    *(_DWORD *)(v1 + 44) = HG_RENDERER_ENV::TEXTURE_POOL_STRATEGY;
}

void MultiGPUPoolingPolicy::~MultiGPUPoolingPolicy(MultiGPUPoolingPolicy *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6529D38;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGObject::~HGObject(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E6529D38;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGObject::~HGObject(this);
  HGObject::operator delete(v3);
}

uint64_t MultiGPUPoolingPolicy::setMaxPoolSizeRatio(uint64_t this, float a2)
{
  if (HG_RENDERER_ENV::MAX_TEXTURE_POOL_SIZE_PERCENT == -1)
    *(float *)(this + 28) = a2;
  return this;
}

uint64_t MultiGPUPoolingPolicy::setMaxQueueSizeRatio(uint64_t this, float a2)
{
  if (HG_RENDERER_ENV::MAX_TEXTURE_QUEUE_SIZE_PERCENT == -1)
    *(float *)(this + 32) = a2;
  return this;
}

uint64_t MultiGPUPoolingPolicy::setMaxUnusedSizeRatio(uint64_t this, float a2)
{
  if (HG_RENDERER_ENV::MAX_TEXTURE_UNUSED_SIZE_PERCENT == -1)
    *(float *)(this + 36) = a2;
  return this;
}

uint64_t MultiGPUPoolingPolicy::setMaxTotalSizeRatio(uint64_t this, float a2)
{
  if (HG_RENDERER_ENV::MAX_TEXTURE_TOTAL_SIZE_PERCENT == -1)
    *(float *)(this + 40) = a2;
  return this;
}

void MultiGPUPoolingPolicy::preAllocateTexture(MultiGPUPoolingPolicy *this)
{
  _QWORD *v2;
  uint64_t v3;
  const char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  unint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v33, "poolPerf", 1, "preAllocateTexture()");
  v2 = (*(_QWORD *(**)(uint64_t *__return_ptr))(**((_QWORD **)this + 2) + 40))(&v32);
  v6 = *((_DWORD *)this + 11);
  if ((v6 - 3) <= 1)
  {
    v7 = v32;
    v31 = v32;
    if (v32)
    {
      v2 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      v6 = *((_DWORD *)this + 11);
    }
    v2 = (_QWORD *)MultiGPUPoolingPolicy::_removeAllIf((uint64_t)v2, &v31, v6 == 3, v6 == 4);
    if (v7)
      v2 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  }
  v8 = v32;
  v30 = v32;
  if (v32)
    v2 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
  MultiGPUPoolingPolicy::_removeOldestByAge(*((float *)this + 6), (uint64_t)v2, &v30, v3, v4, v5);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  if ((*((_DWORD *)this + 11) - 1) <= 1)
  {
    do
    {
      v18 = v32;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18) & 1) != 0)
      {
        v19 = 0;
      }
      else
      {
        v20 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2), 1);
        v21 = *((float *)this + 7);
        v23 = *((float *)this + 9);
        v22 = *((float *)this + 10);
        v24 = (float)v20;
        v19 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), 1, 1) > (unint64_t)(float)(v21 * (float)v20)|| (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), 3, 1) > (unint64_t)(float)(v23 * v24)|| (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), 4, 1) > (unint64_t)(float)(v22 * v24);
      }
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      if (!v19)
        break;
      v26 = v32;
      v29 = v32;
      if (v32)
        v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      v27 = MultiGPUPoolingPolicy::_removeOldestIf(v25, &v29, *((_DWORD *)this + 11) == 1, *((_DWORD *)this + 11) == 2);
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
    }
    while (v27);
  }
  while (1)
  {
    v9 = v32;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) & 1) != 0)
    {
      v10 = 0;
    }
    else
    {
      v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2), 1);
      v12 = *((float *)this + 7);
      v14 = *((float *)this + 9);
      v13 = *((float *)this + 10);
      v15 = (float)v11;
      v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), 1, 1) > (unint64_t)(float)(v12 * (float)v11)|| (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), 3, 1) > (unint64_t)(float)(v14 * v15)|| (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), 4, 1) > (unint64_t)(float)(v13 * v15);
    }
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v17 = v32;
    if (!v10)
      break;
    v28 = v32;
    if (v32)
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    MultiGPUPoolingPolicy::_removeOldestIf(v16, &v28, 1, 1);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  }
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v33);
}

void sub_1B2AA2FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  if (a7)
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 24))(a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

uint64_t MultiGPUPoolingPolicy::_removeAllIf(uint64_t a1, _QWORD *a2, int a3, char a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  const char *v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  _BYTE v34[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v34, "poolPerf", 1, "_removeAllIf()");
  v8 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
  v9 = v7;
  if (a3)
  {
    if ((a4 & 1) != 0)
    {
      for (i = 0; ; i = (i + 1))
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
        if (v9 == v13)
          break;
        v14 = atomic_load(HGLogger::_enabled);
        if ((v14 & 1) != 0)
          HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"deleting texture %d (all)\n", v11, v12, *(unsigned int *)(v9 + 64));
        v8 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 72))(*a2, v8, v9);
        v9 = v15;
      }
    }
    else
    {
      i = 0;
      v26 = v7;
      while (1)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
        if (v26 == v29)
          break;
        if (*(_BYTE *)(v26 + 57))
        {
          v31 = atomic_load(HGLogger::_enabled);
          if ((v31 & 1) != 0)
            HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"deleting texture %d (all)\n", v27, v28, *(unsigned int *)(v26 + 64));
          v8 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 72))(*a2, v8, v9);
          v9 = v32;
          i = (i + 1);
          v26 = v32;
        }
        else
        {
          v9 += 96;
          v26 += 96;
          if (*v8 + 4032 == v9)
          {
            v30 = v8[1];
            ++v8;
            v9 = v30;
            v26 = v30;
          }
        }
      }
    }
  }
  else if ((a4 & 1) != 0)
  {
    i = 0;
LABEL_10:
    v16 = v9;
    while (1)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
      if (v16 == v19)
        break;
      if (!*(_BYTE *)(v16 + 57))
      {
        v21 = atomic_load(HGLogger::_enabled);
        if ((v21 & 1) != 0)
          HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"deleting texture %d (all)\n", v17, v18, *(unsigned int *)(v16 + 64));
        v8 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 72))(*a2, v8, v9);
        v9 = v22;
        i = (i + 1);
        goto LABEL_10;
      }
      v9 += 96;
      v16 += 96;
      if (*v8 + 4032 == v9)
      {
        v20 = v8[1];
        ++v8;
        v9 = v20;
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_18:
    v23 = v9 - 4032;
    while (1)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
      if (v9 == v24)
        break;
      v9 += 96;
      v23 += 96;
      if (*v8 == v23)
      {
        v25 = v8[1];
        ++v8;
        v9 = v25;
        goto LABEL_18;
      }
    }
    i = 0;
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v34);
  return i;
}

void sub_1B2AA335C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA3370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA3384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA3398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA33AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA33C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA33D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA33E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA33FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA3410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA3424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

uint64_t MultiGPUPoolingPolicy::_removeOldestByAge(float a1, uint64_t a2, _QWORD *a3, uint64_t a4, const char *a5, char *a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  const char *v14;
  char *v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  _BYTE v21[16];

  if (a1 >= 3.4028e38)
  {
    v19 = atomic_load(HGLogger::_enabled);
    if ((v19 & 1) != 0)
      HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"no limits. return.\n", a5, a6);
    return 0;
  }
  else
  {
    HGTraceGuard::HGTraceGuard((HGTraceGuard *)v21, "poolPerf", 1, "_removeOldestByAge()");
    v8 = HGGetTBC();
    v9 = HGGetTBCFrequency();
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 56))(*a3);
    v12 = v11;
    for (i = 0; ; i = (i + 1))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
      if (v12 == v16
        || *(_QWORD *)(v12 + 88) >= (unint64_t)(float)((float)v8 + (float)((float)((float)v9 * a1) / -1000.0)))
      {
        break;
      }
      v17 = atomic_load(HGLogger::_enabled);
      if ((v17 & 1) != 0)
        HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"deleting texture %d (for age)\n", v14, v15, *(unsigned int *)(v12 + 64));
      v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 72))(*a3, v10, v12);
      v12 = v18;
    }
    HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v21);
  }
  return i;
}

void sub_1B2AA35B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA35CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA35E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA35F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA3608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

uint64_t MultiGPUPoolingPolicy::_removeOldestIf(uint64_t a1, _QWORD *a2, int a3, char a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v25, "poolPerf", 1, "_removeOldestIf()");
  v7 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
  v9 = v8;
  if (!a3)
  {
    if ((a4 & 1) != 0)
    {
LABEL_8:
      v15 = v9 - 4032;
      while (1)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
        if (v9 == v16)
          break;
        if (!*(_BYTE *)(v9 + 57))
          goto LABEL_4;
        v9 += 96;
        v15 += 96;
        if (*v7 == v15)
        {
          v17 = v7[1];
          ++v7;
          v9 = v17;
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_13:
      v18 = v9 - 4032;
      while (1)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
        if (v9 == v19)
          break;
        v9 += 96;
        v18 += 96;
        if (*v7 == v18)
        {
          v20 = v7[1];
          ++v7;
          v9 = v20;
          goto LABEL_13;
        }
      }
    }
    goto LABEL_22;
  }
  if ((a4 & 1) == 0)
  {
LABEL_17:
    v21 = v9 - 4032;
    while (1)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
      if (v9 == v22)
        goto LABEL_22;
      if (*(_BYTE *)(v9 + 57))
        goto LABEL_4;
      v9 += 96;
      v21 += 96;
      if (*v7 == v21)
      {
        v23 = v7[1];
        ++v7;
        v9 = v23;
        goto LABEL_17;
      }
    }
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
  if (v9 == v12)
  {
LABEL_22:
    v14 = 0;
    goto LABEL_23;
  }
LABEL_4:
  v13 = atomic_load(HGLogger::_enabled);
  if ((v13 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"deleting texture %d (for reason)\n", v10, v11, *(unsigned int *)(v9 + 64));
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 72))(*a2, v7, v9);
  v14 = 1;
LABEL_23:
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v25);
  return v14;
}

void sub_1B2AA37C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA37DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA37F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA3804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA3818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

uint64_t MultiGPUPoolingPolicy::renderEnd(MultiGPUPoolingPolicy *this)
{
  _QWORD *v2;
  uint64_t v3;
  const char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (*(_QWORD *(**)(uint64_t *__return_ptr))(**((_QWORD **)this + 2) + 40))(&v13);
  v6 = v13;
  v12 = v13;
  if (v13)
    v2 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  v7 = MultiGPUPoolingPolicy::_removeOldestByAge(*((float *)this + 6), (uint64_t)v2, &v12, v3, v4, v5);
  if (v6)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v8 = *((_DWORD *)this + 11);
  if ((v8 - 3) <= 1)
  {
    v9 = v13;
    v11 = v13;
    if (v13)
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      v8 = *((_DWORD *)this + 11);
    }
    MultiGPUPoolingPolicy::_removeAllIf(v7, &v11, v8 == 3, v8 == 4);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  }
  result = v13;
  if (v13)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return result;
}

void sub_1B2AA3914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(exception_object);
}

BOOL MultiGPUPoolingPolicy::waitForQueuedForDeletionTextures(MultiGPUPoolingPolicy *this)
{
  unint64_t v2;

  v2 = (unint64_t)(float)(*((float *)this + 8)
                               * (float)(unint64_t)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2), 1));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), 2, 1) > v2;
}

double HGTextureManager::TextureInfo::TextureInfo(HGTextureManager::TextureInfo *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  double result;

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((_DWORD *)this + 2) = a4;
  *((_DWORD *)this + 3) = a5;
  *((_DWORD *)this + 4) = a6;
  *((_DWORD *)this + 5) = a7;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_WORD *)this + 28) = 0;
  return result;
}

void HGTextureManager::TextureEntry::log(HGTextureManager::TextureEntry *this, const char *a2, char *a3)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  const char *v7;
  int v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  char *v13;
  const char *v14;
  double v15;
  const char *v16;
  const char *v17;
  int v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  unint64_t v25;
  const char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;

  v3 = atomic_load(HGLogger::_enabled);
  if ((v3 & 1) != 0)
  {
    v4 = atomic_load(HGLogger::_enabled);
    if ((v4 & 1) != 0)
    {
      v7 = "?";
      if (*(_DWORD *)this == 3553)
        v7 = "2";
      v34 = v7;
      v8 = *((_DWORD *)this + 20);
      v9 = "Q";
      if (v8 == 1)
        v9 = "F";
      if (v8)
        v10 = v9;
      else
        v10 = "U";
      v31 = v10;
      v32 = *((unsigned int *)this + 1);
      v33 = *((unsigned int *)this + 16);
      v29 = *((unsigned int *)this + 2);
      v30 = *((char *)this + 68);
      v11 = HGFormatUtils::GLPixelFormatToString((HGFormatUtils *)*((unsigned int *)this + 4), a2, a3);
      v14 = HGFormatUtils::GLPixelTypeToString((HGFormatUtils *)*((unsigned int *)this + 5), v12, v13);
      v15 = (float)((float)*((int *)this + 19) * 0.00000095367);
      if (*((_BYTE *)this + 69))
        v16 = "Y";
      else
        v16 = "N";
      if (*((_BYTE *)this + 57))
        v17 = "Y";
      else
        v17 = "N";
      v18 = *((unsigned __int8 *)this + 56);
      v19 = "P";
      if (v18 == 2)
        v19 = "S";
      if (v18 == 1)
        v20 = "C";
      else
        v20 = v19;
      v28 = *(_OWORD *)((char *)this + 24);
      v21 = *((_QWORD *)this + 5);
      v22 = *((_QWORD *)this + 6);
      v23 = *((unsigned int *)this + 18);
      v24 = (float)(HGGetTBC() - *((_QWORD *)this + 11)) * 1000.0;
      v25 = HGGetTBCFrequency();
      HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"id %3d [%s] (%s) unit %2d : %4d x %4d x (%20s, %20s), (%4.1f mb), owned: %s, used: %2d, cs: %s, hint: %s, ptr: %p, %zu, range: %p, %zu, age: %6.1f ms\n", v26, v27, v33, v34, v31, v30, v32, v29, v11, v14, *(_QWORD *)&v15, v16, v23, v17, v20,
        v28,
        v21,
        v22,
        (float)(v24 / (float)v25));
    }
  }
}

void HGTextureManager::TextureUsage::logSummary(HGTextureManager::TextureUsage *this, char *a2, int a3, const char *a4, char *a5)
{
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;

  v7 = atomic_load(HGLogger::_enabled);
  if (!a3)
  {
    if ((v7 & 1) != 0)
      HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"total : %4.1f mb  |  used : %4.1f mb  |  active : %4.1f mb  |  shared : %4.1f mb  |  unowned : %4.1f mb  |  free : %4.1f mb  |  queued : %4.1f mb\n", a4, a5, (float)((float)*(unint64_t *)this * 0.00000095367), (float)((float)*((unint64_t *)this + 1) * 0.00000095367), (float)((float)*((unint64_t *)this + 2) * 0.00000095367), (float)((float)*((unint64_t *)this + 3) * 0.00000095367), (float)((float)*((unint64_t *)this + 4) * 0.00000095367), (float)((float)*((unint64_t *)this + 5) * 0.00000095367), (float)((float)*((unint64_t *)this + 6) * 0.00000095367));
    return;
  }
  if ((v7 & 1) != 0)
  {
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"\n", a4, a5);
    v16 = atomic_load(HGLogger::_enabled);
    if ((v16 & 1) == 0)
    {
LABEL_4:
      v9 = atomic_load(HGLogger::_enabled);
      if ((v9 & 1) == 0)
        goto LABEL_5;
      goto LABEL_16;
    }
  }
  else
  {
    v8 = atomic_load(HGLogger::_enabled);
    if ((v8 & 1) == 0)
      goto LABEL_4;
  }
  HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"  total   : %3.1f mb\n", a4, a5, (float)((float)*(unint64_t *)this * 0.00000095367));
  v17 = atomic_load(HGLogger::_enabled);
  if ((v17 & 1) == 0)
  {
LABEL_5:
    v10 = atomic_load(HGLogger::_enabled);
    if ((v10 & 1) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"  used    : %3.1f mb\n", a4, a5, (float)((float)*((unint64_t *)this + 1) * 0.00000095367));
  v18 = atomic_load(HGLogger::_enabled);
  if ((v18 & 1) == 0)
  {
LABEL_6:
    v11 = atomic_load(HGLogger::_enabled);
    if ((v11 & 1) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"  active  : %3.1f mb\n", a4, a5, (float)((float)*((unint64_t *)this + 2) * 0.00000095367));
  v19 = atomic_load(HGLogger::_enabled);
  if ((v19 & 1) == 0)
  {
LABEL_7:
    v12 = atomic_load(HGLogger::_enabled);
    if ((v12 & 1) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"  shared  : %3.1f mb\n", a4, a5, (float)((float)*((unint64_t *)this + 3) * 0.00000095367));
  v20 = atomic_load(HGLogger::_enabled);
  if ((v20 & 1) == 0)
  {
LABEL_8:
    v13 = atomic_load(HGLogger::_enabled);
    if ((v13 & 1) == 0)
      goto LABEL_9;
LABEL_20:
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"  free    : %3.1f mb\n", a4, a5, (float)((float)*((unint64_t *)this + 5) * 0.00000095367));
    v22 = atomic_load(HGLogger::_enabled);
    if ((v22 & 1) == 0)
    {
LABEL_10:
      v15 = atomic_load(HGLogger::_enabled);
      if ((v15 & 1) == 0)
        return;
LABEL_22:
      HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"\n", a4, a5);
      return;
    }
    goto LABEL_21;
  }
LABEL_19:
  HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"  unowned : %3.1f mb\n", a4, a5, (float)((float)*((unint64_t *)this + 4) * 0.00000095367));
  v21 = atomic_load(HGLogger::_enabled);
  if ((v21 & 1) != 0)
    goto LABEL_20;
LABEL_9:
  v14 = atomic_load(HGLogger::_enabled);
  if ((v14 & 1) == 0)
    goto LABEL_10;
LABEL_21:
  HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"  queued  : %3.1f mb\n", a4, a5, (float)((float)*((unint64_t *)this + 6) * 0.00000095367));
  v23 = atomic_load(HGLogger::_enabled);
  if ((v23 & 1) != 0)
    goto LABEL_22;
}

void HGTextureManager::TexturePool::~TexturePool(HGTextureManager::TexturePool *this)
{
  *(_QWORD *)this = off_1E6529F78;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  std::deque<HGTextureManager::TextureEntry>::~deque[abi:ne180100]((uint64_t)this + 80);
  HGObject::~HGObject(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E6529F78;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  std::deque<HGTextureManager::TextureEntry>::~deque[abi:ne180100]((uint64_t)this + 80);
  HGObject::~HGObject(this);
  HGObject::operator delete(v2);
}

BOOL HGTextureManager::PostTextureDeleteEventList::hasEvent(HGTextureManager::PostTextureDeleteEventList *this)
{
  return *((_QWORD *)this + 8) != *((_QWORD *)this + 9);
}

uint64_t HGTextureManager::PostTextureDeleteEventList::popEvent(HGTextureManager::PostTextureDeleteEventList *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 9);
  v2 = *(_QWORD *)(v1 - 8);
  *((_QWORD *)this + 9) = v1 - 8;
  return v2;
}

void RenderbufferCache::~RenderbufferCache(RenderbufferCache *this)
{
  void *v2;

  v2 = *(void **)this;
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t RenderbufferCache::createRenderbuffer(RenderbufferCache *this, unsigned int a2, uint64_t a3)
{
  const char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  unsigned __int8 v26;
  _BYTE v28[20];
  GLuint renderbuffers;

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v28, "renderbuffer", 1, "createRenderbuffer()");
  v7 = *(_QWORD *)this;
  v8 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v8)
  {
    while (*(_DWORD *)v7
         || *(_DWORD *)(v7 + 4) != (_DWORD)a3
         || *(_DWORD *)(v7 + 8)
         || *(_DWORD *)(v7 + 12)
         || *(_BYTE *)(v7 + 20))
    {
      v7 += 24;
      if (v7 == v8)
        goto LABEL_12;
    }
  }
  if (v7 == v8)
  {
LABEL_12:
    renderbuffers = 0;
    glGenRenderbuffers(1, &renderbuffers);
    v13 = a3 << 32;
    v14 = renderbuffers;
    v16 = (uint64_t *)*((_QWORD *)this + 1);
    v15 = *((_QWORD *)this + 2);
    if ((unint64_t)v16 >= v15)
    {
      v18 = *(uint64_t **)this;
      v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - *(_QWORD *)this) >> 3);
      v20 = v19 + 1;
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v18) >> 3);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v23 = (char *)operator new(24 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[24 * v19];
      *(_QWORD *)v24 = v13;
      *((_QWORD *)v24 + 1) = 0;
      *((_DWORD *)v24 + 4) = v14;
      v24[20] = 1;
      v17 = v24 + 24;
      if (v16 != v18)
      {
        do
        {
          v25 = *(_OWORD *)(v16 - 3);
          *(_QWORD *)(v24 - 11) = *(uint64_t *)((char *)v16 - 11);
          *(_OWORD *)(v24 - 24) = v25;
          v24 -= 24;
          v16 -= 3;
        }
        while (v16 != v18);
        v16 = *(uint64_t **)this;
      }
      *(_QWORD *)this = v24;
      *((_QWORD *)this + 1) = v17;
      *((_QWORD *)this + 2) = &v23[24 * v22];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v16 = v13;
      v16[1] = 0;
      *((_DWORD *)v16 + 4) = v14;
      *((_BYTE *)v16 + 20) = 1;
      v17 = v16 + 3;
    }
    *((_QWORD *)this + 1) = v17;
    v26 = atomic_load(HGLogger::_enabled);
    if ((v26 & 1) != 0)
      HGLogger::log((HGLogger *)"renderbuffer", (const char *)1, (HGLogger *)"allocating new renderbuffer (%d)\n", v11, v12, v14);
    v9 = v14;
  }
  else
  {
    v9 = *(unsigned int *)(v7 + 16);
    *(_BYTE *)(v7 + 20) = 1;
    v10 = atomic_load(HGLogger::_enabled);
    if ((v10 & 1) != 0)
      HGLogger::log((HGLogger *)"renderbuffer", (const char *)1, (HGLogger *)"found unused renderbuffer (%d)\n", v5, v6, v9);
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v28);
  return v9;
}

void sub_1B2AA4238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA424C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void HGTextureManager::HGTextureManager(HGTextureManager *this, HGGPURenderer *a2)
{
  void **v3;
  HGObject **v4;
  char *v5;
  void *v6;
  HGObject *v7;
  void (**v8)(NoPaddingPolicy *__hidden);
  HGObject *v9;
  HGObject *v10;
  uint64_t v11;
  HGObject *v12;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  v3 = (void **)((char *)this + 32);
  *((_QWORD *)this + 19) = 0;
  v4 = (HGObject **)((char *)this + 152);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 3;
  *((_BYTE *)this + 172) = 1;
  v5 = (char *)HGObject::operator new(0xB8uLL);
  HGObject::HGObject((HGObject *)v5);
  *(_QWORD *)v5 = off_1E6529F78;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  *((_QWORD *)v5 + 22) = 0;
  pthread_mutex_init((pthread_mutex_t *)(v5 + 16), 0);
  v6 = *v3;
  if (*v3 == v5)
  {
    (*(void (**)(char *))(*(_QWORD *)v5 + 24))(v5);
  }
  else
  {
    if (v6)
      (*(void (**)(void *))(*(_QWORD *)v6 + 24))(v6);
    *v3 = v5;
  }
  v7 = (HGObject *)HGObject::operator new(0x10uLL);
  HGObject::HGObject(v7);
  v8 = off_1E6529D88;
  *(_QWORD *)v7 = off_1E6529D88;
  if (HG_RENDERER_ENV::FORCE_CLUSTERED_TEXTURE_PADDING != 1)
  {
    v9 = *v4;
    if (*v4 != v7)
    {
      if (v9)
      {
        (*(void (**)(HGObject *))(*(_QWORD *)v9 + 24))(v9);
        v8 = *(void (***)(NoPaddingPolicy *__hidden))v7;
      }
      *v4 = v7;
      v8[2](v7);
      v8 = *(void (***)(NoPaddingPolicy *__hidden))v7;
    }
  }
  v8[3](v7);
  v10 = (HGObject *)HGObject::operator new(0x18uLL);
  HGObject::HGObject(v10);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = off_1E6529DC8;
  v12 = v10;
  HGTextureManager::setTexturePoolingPolicy((uint64_t)this, &v12);
  (*(void (**)(HGObject *))(*(_QWORD *)v10 + 24))(v10);
  v11 = operator new();
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 80) = 0;
  pthread_mutex_init((pthread_mutex_t *)v11, 0);
  *((_QWORD *)this + 14) = v11;
  HGTextureManager::_initTexManagerList(this);
  HGTextureManager::_initShareGroup(this);
  HGTextureManager::_initTexturePool(this);
  HGTextureManager::_initDeleteQueue(this);
  HGTextureManager::_initMaxUsageStats(this);
}

void sub_1B2AA4454(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v6 = *(_QWORD *)(v1 + 160);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (*v4)
    (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
  v7 = *(_QWORD *)(v1 + 40);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  if (*v3)
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  _Unwind_Resume(a1);
}

_QWORD *HGTextureManager::setTexturePaddingPolicy(_QWORD *result, _QWORD **a2)
{
  _QWORD *v3;
  _QWORD *v4;

  if (HG_RENDERER_ENV::FORCE_CLUSTERED_TEXTURE_PADDING != 1)
  {
    v3 = result;
    v4 = (_QWORD *)result[19];
    result = *a2;
    if (v4 != *a2)
    {
      if (v4)
      {
        (*(void (**)(_QWORD *))(*v4 + 24))(v4);
        result = *a2;
      }
      v3[19] = result;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    }
  }
  return result;
}

uint64_t HGTextureManager::setTexturePoolingPolicy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  HGObject *v6;
  void (**v7)(HGTextureManagerHandleImpl *__hidden);
  HGObject *v8;

  if (HG_RENDERER_ENV::FORCE_LEGACY_TEXTURE_POOLING != 1)
  {
    v3 = result;
    v4 = *(_QWORD **)(result + 160);
    v5 = (_QWORD *)*a2;
    if (v4 != (_QWORD *)*a2)
    {
      if (v4)
      {
        (*(void (**)(_QWORD *))(*v4 + 24))(v4);
        v5 = (_QWORD *)*a2;
      }
      *(_QWORD *)(v3 + 160) = v5;
      if (v5)
      {
        (*(void (**)(_QWORD *))(*v5 + 16))(v5);
        v4 = *(_QWORD **)(v3 + 160);
      }
      else
      {
        v4 = 0;
      }
    }
    v6 = (HGObject *)HGObject::operator new(0x18uLL);
    HGObject::HGObject(v6);
    v7 = off_1E6529CE0;
    *(_QWORD *)v6 = off_1E6529CE0;
    *((_QWORD *)v6 + 2) = v3;
    v8 = (HGObject *)v4[2];
    if (v8 != v6)
    {
      if (v8)
      {
        (*(void (**)(HGObject *))(*(_QWORD *)v8 + 24))(v8);
        v7 = *(void (***)(HGTextureManagerHandleImpl *__hidden))v6;
      }
      v4[2] = v6;
      v7[2](v6);
      v7 = *(void (***)(HGTextureManagerHandleImpl *__hidden))v6;
    }
    return ((uint64_t (*)(HGObject *))v7[3])(v6);
  }
  return result;
}

void sub_1B2AA46F0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AA4704(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HGTextureManager::_initTexManagerList(HGTextureManager *this)
{
  char **v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  {
    if ((unint64_t)v4 < v3)
    {
LABEL_3:
      *(_QWORD *)v4 = this;
      v5 = (uint64_t)(v4 + 8);
      goto LABEL_25;
    }
  }
  else
  {
    v2 = (char **)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v4 = v2[1];
    v3 = (unint64_t)v2[2];
    if ((unint64_t)v4 < v3)
      goto LABEL_3;
  }
  v6 = *v2;
  v7 = v4 - *v2;
  v8 = v7 >> 3;
  v9 = (v7 >> 3) + 1;
  if (v9 >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v10 = v3 - (_QWORD)v6;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = operator new(8 * v11);
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = this;
    v5 = (uint64_t)(v13 + 8);
    v15 = (char *)(v4 - v6);
    if (v4 == v6)
      goto LABEL_23;
    goto LABEL_16;
  }
  v12 = 0;
  v13 = (char *)(8 * v8);
  v14 = 0;
  *(_QWORD *)(8 * v8) = this;
  v5 = 8 * v8 + 8;
  v15 = (char *)(v4 - v6);
  if (v4 != v6)
  {
LABEL_16:
    v16 = (unint64_t)(v15 - 8);
    if (v16 < 0x58)
      goto LABEL_30;
    if ((unint64_t)(v4 - v12 - v7) < 0x20)
      goto LABEL_30;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v4[-v18];
    v13 -= v18;
    v20 = &v12[8 * v8 - 16];
    v21 = v4 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v4 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v24 = *((_QWORD *)v4 - 1);
        v4 -= 8;
        *((_QWORD *)v13 - 1) = v24;
        v13 -= 8;
      }
      while (v4 != v6);
    }
    v4 = *v2;
  }
LABEL_23:
  *v2 = v13;
  v2[1] = (char *)v5;
  v2[2] = v14;
  if (v4)
    operator delete(v4);
LABEL_25:
  v2[1] = (char *)v5;
}

uint64_t HGTextureManager::_initShareGroup(HGTextureManager *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  {
    v2 = (_QWORD *)operator new();
    v3 = 0;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v4 = (_QWORD *)v2[1];
    if (v4)
      goto LABEL_3;
LABEL_10:
    if (v3 != v4)
    goto LABEL_11;
  }
    goto LABEL_10;
LABEL_3:
  v5 = v3;
  while (*v5 != *((_QWORD *)this + 2))
  {
    if (++v5 == v4)
    {
      v5 = v4;
      break;
    }
  }
  if (v5 == v4)
  {
LABEL_11:
    v6 = v2[2];
    if ((unint64_t)v4 >= v6)
    {
      v8 = (char *)v4 - (char *)v3;
      v9 = v4 - v3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v11 = v6 - (_QWORD)v3;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v13 = operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *v14 = *((_QWORD *)this + 2);
      v7 = v14 + 1;
      if (v3 != v4)
      {
        if ((unint64_t)(v8 - 8) < 0x58)
          goto LABEL_39;
        if ((unint64_t)((char *)v3 - v13) < 0x20)
          goto LABEL_39;
        v15 = ((unint64_t)(v8 - 8) >> 3) + 1;
        v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
        v17 = &v4[v16 / 0xFFFFFFFFFFFFFFF8];
        v14 = (_QWORD *)((char *)v14 - v16);
        v18 = &v13[8 * v9 - 16];
        v19 = (__int128 *)(v4 - 2);
        v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *v19;
          *(v18 - 1) = *(v19 - 1);
          *v18 = v21;
          v18 -= 2;
          v19 -= 2;
          v20 -= 4;
        }
        while (v20);
        v4 = v17;
        if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_39:
          do
          {
            v22 = *--v4;
            *--v14 = v22;
          }
          while (v4 != v3);
        }
        v3 = (_QWORD *)*v2;
      }
      *v2 = v14;
      v2[1] = v7;
      v2[2] = &v13[8 * v12];
      if (v3)
        operator delete(v3);
    }
    else
    {
      *v4 = *((_QWORD *)this + 2);
      v7 = v4 + 1;
    }
    v2[1] = v7;
  }
}

uint64_t HGTextureManager::_initTexturePool(HGTextureManager *this)
{
  _QWORD *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  unint64_t v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;

  {
    v9 = (_QWORD *)operator new();
    v9[2] = 0;
    v9[1] = 0;
    *v9 = v9 + 1;
    v3 = (unint64_t *)((char *)this + 16);
    goto LABEL_15;
  }
  v3 = (unint64_t *)((char *)this + 16);
  if (!v2)
    goto LABEL_15;
  v4 = *v3;
  do
  {
    v6 = v2[4];
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = v2;
    else
      v8 = v2 + 1;
    if (v7)
      v5 = (uint64_t)v2;
    v2 = (_QWORD *)*v8;
  }
  while (*v8);
  {
LABEL_15:
    v10 = (char *)HGObject::operator new(0xB8uLL);
    HGObject::HGObject((HGObject *)v10);
    *(_QWORD *)v10 = off_1E6529F78;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 6) = 0u;
    *((_OWORD *)v10 + 7) = 0u;
    *((_OWORD *)v10 + 8) = 0u;
    *((_OWORD *)v10 + 9) = 0u;
    *((_OWORD *)v10 + 10) = 0u;
    *((_QWORD *)v10 + 22) = 0;
    pthread_mutex_init((pthread_mutex_t *)(v10 + 16), 0);
    {
      v14 = *v3;
      if (v12)
      {
        while (1)
        {
          while (1)
          {
            v15 = (uint64_t **)v12;
            v16 = v12[4];
            if (v14 >= v16)
              break;
            v12 = *v15;
            if (!*v15)
            {
              v17 = v15;
              goto LABEL_25;
            }
          }
          if (v16 >= v14)
            break;
          v12 = v15[1];
          if (!v12)
          {
            v17 = v15 + 1;
            goto LABEL_25;
          }
        }
        v18 = (uint64_t *)v15;
        v21 = v15[5];
        if (v21 == (uint64_t *)v10)
          goto LABEL_31;
LABEL_28:
        if (v21)
          (*(void (**)(uint64_t *))(*v21 + 24))(v21);
        v18[5] = (uint64_t)v10;
        (*(void (**)(char *))(*(_QWORD *)v10 + 16))(v10);
LABEL_31:
        (*(void (**)(char *))(*(_QWORD *)v10 + 24))(v10);
      }
    }
    else
    {
      v11 = operator new();
      *(_QWORD *)(v11 + 8) = 0;
      v13 = (uint64_t **)(v11 + 8);
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)v11 = v11 + 8;
      v14 = *v3;
    }
    v17 = v13;
    v15 = v13;
LABEL_25:
    v18 = (uint64_t *)operator new(0x30uLL);
    v18[4] = v14;
    v18[5] = 0;
    *v18 = 0;
    v18[1] = 0;
    v18[2] = (uint64_t)v15;
    *v17 = v18;
    v19 = **(_QWORD **)v11;
    v20 = v18;
    if (v19)
    {
      *(_QWORD *)v11 = v19;
      v20 = *v17;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v13, v20);
    ++*(_QWORD *)(v11 + 16);
    v21 = (uint64_t *)v18[5];
    if (v21 == (uint64_t *)v10)
      goto LABEL_31;
    goto LABEL_28;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 40) + 16))(*(_QWORD *)(v5 + 40));
}

void sub_1B2AA4D34(_Unwind_Exception *a1)
{
  HGObject *v1;
  uint64_t v2;

  std::deque<HGTextureManager::TextureEntry>::~deque[abi:ne180100](v2);
  HGObject::~HGObject(v1);
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AA4D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HGTextureManager::_initDeleteQueue(HGTextureManager *this)
{
  _QWORD *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  TextureDeleteQueue *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  unint64_t v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  TextureDeleteQueue *v21;

  pthread_mutex_lock(&_MergedGlobals);
  if (qword_1EF0759D0)
  {
    v2 = *(_QWORD **)(qword_1EF0759D0 + 8);
    v3 = (unint64_t *)((char *)this + 16);
    if (v2)
    {
      v4 = *v3;
      v5 = qword_1EF0759D0 + 8;
      do
      {
        v6 = v2[4];
        v7 = v6 >= v4;
        if (v6 >= v4)
          v8 = v2;
        else
          v8 = v2 + 1;
        if (v7)
          v5 = (uint64_t)v2;
        v2 = (_QWORD *)*v8;
      }
      while (*v8);
      if (v5 != qword_1EF0759D0 + 8 && v4 >= *(_QWORD *)(v5 + 32))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 40) + 16))(*(_QWORD *)(v5 + 40));
        return pthread_mutex_unlock(&_MergedGlobals);
      }
    }
  }
  else
  {
    v9 = (_QWORD *)operator new();
    v9[2] = 0;
    v9[1] = 0;
    *v9 = v9 + 1;
    qword_1EF0759D0 = (uint64_t)v9;
    v3 = (unint64_t *)((char *)this + 16);
  }
  v10 = (TextureDeleteQueue *)HGObject::operator new(0x198uLL);
  TextureDeleteQueue::TextureDeleteQueue(v10);
  v11 = qword_1EF0759D0;
  if (!qword_1EF0759D0)
  {
    v11 = operator new();
    *(_QWORD *)(v11 + 8) = 0;
    v13 = (uint64_t **)(v11 + 8);
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)v11 = v11 + 8;
    qword_1EF0759D0 = v11;
    v14 = *v3;
LABEL_24:
    v17 = v13;
    v15 = v13;
LABEL_25:
    v18 = (uint64_t *)operator new(0x30uLL);
    v18[4] = v14;
    v18[5] = 0;
    *v18 = 0;
    v18[1] = 0;
    v18[2] = (uint64_t)v15;
    *v17 = v18;
    v19 = **(_QWORD **)v11;
    v20 = v18;
    if (v19)
    {
      *(_QWORD *)v11 = v19;
      v20 = *v17;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v13, v20);
    ++*(_QWORD *)(v11 + 16);
    v21 = (TextureDeleteQueue *)v18[5];
    if (v21 != v10)
      goto LABEL_28;
LABEL_34:
    if (!v10)
      return pthread_mutex_unlock(&_MergedGlobals);
LABEL_35:
    (*(void (**)(TextureDeleteQueue *))(*(_QWORD *)v10 + 24))(v10);
    return pthread_mutex_unlock(&_MergedGlobals);
  }
  v13 = (uint64_t **)(qword_1EF0759D0 + 8);
  v12 = *(uint64_t **)(qword_1EF0759D0 + 8);
  v14 = *v3;
  if (!v12)
    goto LABEL_24;
  while (1)
  {
    while (1)
    {
      v15 = (uint64_t **)v12;
      v16 = v12[4];
      if (v14 >= v16)
        break;
      v12 = *v15;
      if (!*v15)
      {
        v17 = v15;
        goto LABEL_25;
      }
    }
    if (v16 >= v14)
      break;
    v12 = v15[1];
    if (!v12)
    {
      v17 = v15 + 1;
      goto LABEL_25;
    }
  }
  v18 = (uint64_t *)v15;
  v21 = (TextureDeleteQueue *)v15[5];
  if (v21 == v10)
    goto LABEL_34;
LABEL_28:
  if (v21)
    (*(void (**)(TextureDeleteQueue *))(*(_QWORD *)v21 + 24))(v21);
  v18[5] = (uint64_t)v10;
  if (v10)
  {
    (*(void (**)(TextureDeleteQueue *))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_35;
  }
  return pthread_mutex_unlock(&_MergedGlobals);
}

void sub_1B2AA4FA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HGTextureManager::_initMaxUsageStats(HGTextureManager *this)
{
  _QWORD *v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;

  pthread_mutex_lock(&stru_1ED4D8EB8);
  if (qword_1EF0759D8)
  {
    v2 = *(_QWORD **)(qword_1EF0759D8 + 8);
    v3 = (uint64_t **)((char *)this + 16);
    if (v2)
    {
      v4 = *v3;
      v5 = qword_1EF0759D8 + 8;
      do
      {
        v6 = v2[4];
        v7 = v6 >= (unint64_t)v4;
        if (v6 >= (unint64_t)v4)
          v8 = v2;
        else
          v8 = v2 + 1;
        if (v7)
          v5 = (uint64_t)v2;
        v2 = (_QWORD *)*v8;
      }
      while (*v8);
      if (v5 != qword_1EF0759D8 + 8 && (unint64_t)v4 >= *(_QWORD *)(v5 + 32))
        return pthread_mutex_unlock(&stru_1ED4D8EB8);
    }
  }
  else
  {
    v9 = (_QWORD *)operator new();
    v9[2] = 0;
    v9[1] = 0;
    *v9 = v9 + 1;
    qword_1EF0759D8 = (uint64_t)v9;
    v3 = (uint64_t **)((char *)this + 16);
  }
  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_QWORD *)(v10 + 48) = 0;
  v11 = qword_1EF0759D8;
  if (qword_1EF0759D8)
  {
    v13 = (uint64_t **)(qword_1EF0759D8 + 8);
    v12 = *(uint64_t **)(qword_1EF0759D8 + 8);
    v14 = *v3;
    if (v12)
    {
      do
      {
        while (1)
        {
          v15 = (uint64_t **)v12;
          v16 = v12[4];
          if ((unint64_t)v14 < v16)
            break;
          if (v16 >= (unint64_t)v14)
            goto LABEL_28;
          v12 = v15[1];
          if (!v12)
          {
            v17 = v15 + 1;
            goto LABEL_25;
          }
        }
        v12 = *v15;
      }
      while (*v15);
      v17 = v15;
      goto LABEL_25;
    }
  }
  else
  {
    v11 = operator new();
    *(_QWORD *)(v11 + 8) = 0;
    v13 = (uint64_t **)(v11 + 8);
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)v11 = v11 + 8;
    qword_1EF0759D8 = v11;
    v14 = *v3;
  }
  v17 = v13;
  v15 = v13;
LABEL_25:
  v18 = (uint64_t *)v15;
  v15 = (uint64_t **)operator new(0x30uLL);
  v15[4] = v14;
  v15[5] = 0;
  *v15 = 0;
  v15[1] = 0;
  v15[2] = v18;
  *v17 = (uint64_t *)v15;
  v19 = **(_QWORD **)v11;
  v20 = (uint64_t *)v15;
  if (v19)
  {
    *(_QWORD *)v11 = v19;
    v20 = *v17;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v13, v20);
  ++*(_QWORD *)(v11 + 16);
LABEL_28:
  v15[5] = (uint64_t *)v10;
  return pthread_mutex_unlock(&stru_1ED4D8EB8);
}

void HGTextureManager::HGTextureManager(HGTextureManager *this, HGGPURenderer *a2, void *a3)
{
  void **v4;
  HGObject **v5;
  char *v6;
  void *v7;
  HGObject *v8;
  void (**v9)(NoPaddingPolicy *__hidden);
  HGObject *v10;
  HGObject *v11;
  uint64_t v12;
  HGObject *v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  v4 = (void **)((char *)this + 32);
  *((_QWORD *)this + 19) = 0;
  v5 = (HGObject **)((char *)this + 152);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 3;
  *((_BYTE *)this + 172) = 1;
  v6 = (char *)HGObject::operator new(0xB8uLL);
  HGObject::HGObject((HGObject *)v6);
  *(_QWORD *)v6 = off_1E6529F78;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_QWORD *)v6 + 22) = 0;
  pthread_mutex_init((pthread_mutex_t *)(v6 + 16), 0);
  v7 = *v4;
  if (*v4 == v6)
  {
    (*(void (**)(char *))(*(_QWORD *)v6 + 24))(v6);
  }
  else
  {
    if (v7)
      (*(void (**)(void *))(*(_QWORD *)v7 + 24))(v7);
    *v4 = v6;
  }
  v8 = (HGObject *)HGObject::operator new(0x10uLL);
  HGObject::HGObject(v8);
  v9 = off_1E6529D88;
  *(_QWORD *)v8 = off_1E6529D88;
  if (HG_RENDERER_ENV::FORCE_CLUSTERED_TEXTURE_PADDING != 1)
  {
    v10 = *v5;
    if (*v5 != v8)
    {
      if (v10)
      {
        (*(void (**)(HGObject *))(*(_QWORD *)v10 + 24))(v10);
        v9 = *(void (***)(NoPaddingPolicy *__hidden))v8;
      }
      *v5 = v8;
      v9[2](v8);
      v9 = *(void (***)(NoPaddingPolicy *__hidden))v8;
    }
  }
  v9[3](v8);
  v11 = (HGObject *)HGObject::operator new(0x18uLL);
  HGObject::HGObject(v11);
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = off_1E6529DC8;
  v13 = v11;
  HGTextureManager::setTexturePoolingPolicy((uint64_t)this, &v13);
  (*(void (**)(HGObject *))(*(_QWORD *)v11 + 24))(v11);
  v12 = operator new();
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  pthread_mutex_init((pthread_mutex_t *)v12, 0);
  *((_QWORD *)this + 14) = v12;
  HGTextureManager::_initTexManagerList(this);
  HGTextureManager::_initShareGroup(this);
  HGTextureManager::_initTexturePool(this);
  HGTextureManager::_initDeleteQueue(this);
  HGTextureManager::_initMaxUsageStats(this);
}

void sub_1B2AA53B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v6 = *(_QWORD *)(v1 + 160);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (*v4)
    (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
  v7 = *(_QWORD *)(v1 + 40);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  if (*v3)
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  _Unwind_Resume(a1);
}

void HGTextureManager::~HGTextureManager(HGTextureManager *this)
{
  const char *v2;
  char *v3;
  _QWORD *v4;
  HGTextureManager **v5;
  HGTextureManager **v6;
  int64_t v7;
  const char *v8;
  char *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  HGTextureManager::_uninitDeleteQueue(this);
  HGTextureManager::_uninitTexturePool(this);
  if (*(_QWORD *)(*((_QWORD *)this + 4) + 120))
    HGLogger::warning((HGLogger *)"texture manager pool is NOT empty! Textures are still in used.", v2, v3);
  {
      goto LABEL_7;
  }
  else
  {
    v4 = (_QWORD *)operator new();
    v6 = 0;
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    v5 = (HGTextureManager **)v4[1];
    if (v5)
    {
LABEL_7:
      while (*v6 != this)
      {
        if (++v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  v7 = (char *)v5 - (char *)(v6 + 1);
  if (v5 != v6 + 1)
    memmove(v6, v6 + 1, (char *)v5 - (char *)(v6 + 1));
  v4[1] = (char *)v6 + v7;
  if (*((_QWORD *)this + 5))
  {
    v10 = atomic_load(HGLogger::_enabled);
    if ((v10 & 1) != 0)
      HGLogger::log((HGLogger *)"init", (const char *)1, (HGLogger *)"deleting auxiliary context\n", v8, v9);
    v11 = *((_QWORD *)this + 5);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    *((_QWORD *)this + 5) = 0;
    pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 48));
  }
  v12 = *((_QWORD *)this + 14);
  if (v12)
  {
    pthread_mutex_destroy(*((pthread_mutex_t **)this + 14));
    v13 = *(void **)(v12 + 64);
    if (v13)
    {
      *(_QWORD *)(v12 + 72) = v13;
      operator delete(v13);
    }
    MEMORY[0x1B5E29170](v12, 0x1080C40D9CAA561);
  }
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v14 = *((_QWORD *)this + 20);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v15 = *((_QWORD *)this + 19);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  v16 = *((_QWORD *)this + 5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  v17 = *((_QWORD *)this + 4);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
}

uint64_t HGTextureManager::_uninitDeleteQueue(HGTextureManager *this)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;

  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v12 = (_QWORD *)operator new();
    v12[2] = 0;
    v12[1] = 0;
    *v12 = v12 + 1;
    qword_1EF0759D0 = (uint64_t)v12;
    return pthread_mutex_unlock(&_MergedGlobals);
  }
  v2 = *(_QWORD **)(qword_1EF0759D0 + 8);
  if (!v2)
    return pthread_mutex_unlock(&_MergedGlobals);
  v3 = *((_QWORD *)this + 2);
  v4 = (uint64_t *)(qword_1EF0759D0 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(qword_1EF0759D0 + 8) || v3 < v4[4])
    return pthread_mutex_unlock(&_MergedGlobals);
  v8 = atomic_load((unsigned int *)(v4[5] + 8));
  if (v8 == 1)
  {
    v9 = (uint64_t **)qword_1EF0759D0;
    if (!qword_1EF0759D0)
    {
      v9 = (uint64_t **)operator new();
      v9[2] = 0;
      v9[1] = 0;
      *v9 = (uint64_t *)(v9 + 1);
      qword_1EF0759D0 = (uint64_t)v9;
    }
    v10 = (uint64_t *)v4[1];
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
    else
    {
      v14 = v4;
      do
      {
        v11 = (uint64_t *)v14[2];
        v15 = *v11 == (_QWORD)v14;
        v14 = v11;
      }
      while (!v15);
    }
    if (*v9 == v4)
      *v9 = v11;
    v16 = v9[1];
    v9[2] = (uint64_t *)((char *)v9[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v16, v4);
    v17 = v4[5];
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    operator delete(v4);
    return pthread_mutex_unlock(&_MergedGlobals);
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4[5] + 24))(v4[5]);
    return pthread_mutex_unlock(&_MergedGlobals);
  }
}

uint64_t HGTextureManager::_uninitTexturePool(HGTextureManager *this)
{
  _QWORD *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;

  {
    v23 = (_QWORD *)operator new();
    v23[2] = 0;
    v23[1] = 0;
    *v23 = v23 + 1;
    v3 = (unint64_t *)((char *)this + 16);
    goto LABEL_34;
  }
  v3 = (unint64_t *)((char *)this + 16);
  if (!v2)
    goto LABEL_34;
  v4 = *v3;
  do
  {
    v6 = v2[4];
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = v2;
    else
      v8 = v2 + 1;
    if (v7)
      v5 = (uint64_t)v2;
    v2 = (_QWORD *)*v8;
  }
  while (*v8);
  {
LABEL_34:
      goto LABEL_16;
LABEL_35:
    v24 = (_QWORD *)operator new();
    v24[2] = 0;
    v24[1] = 0;
    *v24 = v24 + 1;
  }
  v9 = atomic_load((unsigned int *)(*(_QWORD *)(v5 + 40) + 8));
  if (v9 == 1)
    HGTextureManager::emptyTexturePool(this);
    goto LABEL_35;
LABEL_16:
  v13 = *(_QWORD **)(v10 + 8);
  v11 = (uint64_t *)(v10 + 8);
  v12 = v13;
  if (!v13)
  v14 = *v3;
  v15 = v11;
  do
  {
    v16 = v12[4];
    v17 = v16 >= v14;
    if (v16 >= v14)
      v18 = v12;
    else
      v18 = v12 + 1;
    if (v17)
      v15 = v12;
    v12 = (_QWORD *)*v18;
  }
  while (*v18);
  if (v15 == v11 || v14 < v15[4])
  v19 = atomic_load((unsigned int *)(v15[5] + 8));
  if (v19 == 1)
  {
    {
      v20 = (uint64_t **)operator new();
      v20[2] = 0;
      v20[1] = 0;
      *v20 = (uint64_t *)(v20 + 1);
    }
    v21 = (uint64_t *)v15[1];
    if (v21)
    {
      do
      {
        v22 = v21;
        v21 = (uint64_t *)*v21;
      }
      while (v21);
    }
    else
    {
      v26 = v15;
      do
      {
        v22 = (uint64_t *)v26[2];
        v27 = *v22 == (_QWORD)v26;
        v26 = v22;
      }
      while (!v27);
    }
    if (*v20 == v15)
      *v20 = v22;
    v28 = v20[1];
    v20[2] = (uint64_t *)((char *)v20[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v28, v15);
    v29 = v15[5];
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
    operator delete(v15);
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15[5] + 24))(v15[5]);
  }
}

void HGTextureManager::finishDeleteTextureQueue(HGTextureManager *this)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  TextureDeleteQueue *v9;

  v1 = *((_QWORD *)this + 2);
  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v8 = (_QWORD *)operator new();
    v8[1] = 0;
    v2 = (uint64_t)(v8 + 1);
    v8[2] = 0;
    *v8 = v8 + 1;
    qword_1EF0759D0 = (uint64_t)v8;
LABEL_15:
    v4 = v2;
    goto LABEL_16;
  }
  v2 = qword_1EF0759D0 + 8;
  v3 = *(_QWORD **)(qword_1EF0759D0 + 8);
  if (!v3)
    goto LABEL_15;
  v4 = qword_1EF0759D0 + 8;
  do
  {
    v5 = v3[4];
    v6 = v5 >= v1;
    if (v5 >= v1)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = (uint64_t)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == v2 || *(_QWORD *)(v4 + 32) > v1)
    goto LABEL_15;
LABEL_16:
  v9 = *(TextureDeleteQueue **)(v4 + 40);
  pthread_mutex_unlock(&_MergedGlobals);
  TextureDeleteQueue::finishQueue(v9);
}

BOOL HGTextureManager::init(HGTextureManager *this)
{
  uint64_t GLState;
  const char *v3;
  char *v4;
  PC_Sp_counted_base *var0;
  unsigned __int8 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  HGObject *v12;
  HGObject *v13;
  HGObject *v14;
  unint64_t v15;
  float v16;
  HGObject *v17;
  HGObject *v18;
  void (**v19)(SimplePoolingPolicy *__hidden);
  HGObject *v20;
  void (**v21)(HGTextureManagerHandleImpl *__hidden);
  HGObject *v22;
  _BOOL8 v23;
  PCSharedCount v25;
  PCSharedCount v26[3];
  _BYTE v27[16];
  size_t v28;
  PCSharedCount v29;
  int v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v27, "init", 1, "HGTextureManager::init()");
  GLState = HGGPURenderer::GetGLState(*((HGGPURenderer **)this + 1));
  HGGPURenderer::GetContext(*((_QWORD *)this + 1), 24, (uint64_t *)&v25);
  HGGLState::SetCurrentContextGuard::SetCurrentContextGuard(v26, GLState, &v25);
  PCSharedCount::PCSharedCount(&v25);
  v28 = 8;
  v29.var0 = 0;
  *(_QWORD *)v30 = 0x1800000006;
  sysctl(v30, 2u, &v29, &v28, 0, 0);
  var0 = v29.var0;
  v6 = atomic_load(HGLogger::_enabled);
  if ((v6 & 1) != 0)
    HGLogger::log((HGLogger *)"init", (const char *)1, (HGLogger *)"getAvailableVideoMemory() : %zu\n", v3, v4, v29.var0);
  *((_QWORD *)this + 18) = var0;
  LODWORD(v28) = 0;
  glGetIntegerv(0xD33u, (GLint *)&v28);
  v7 = v28;
  *((_DWORD *)this + 30) = v28;
  *(int32x4_t *)((char *)this + 124) = vdupq_n_s32((float)((float)v7 * 0.95));
  HGTextureManager::_createAuxiliaryGLContext((uint64_t)this, v8, v9, v10, v11);
  if (HG_RENDERER_ENV::FORCE_CLUSTERED_TEXTURE_PADDING == 1)
  {
    v12 = (HGObject *)HGObject::operator new(0x38uLL);
    HGObject::HGObject(v12);
    *(_QWORD *)v12 = off_1E6529E98;
    *((_QWORD *)v12 + 2) = (char *)v12 + 16;
    *((_QWORD *)v12 + 3) = (char *)v12 + 16;
    *((_QWORD *)v12 + 4) = 0;
    *((_QWORD *)v12 + 5) = 0x100000002;
    *((_DWORD *)v12 + 12) = 4;
    if (HG_RENDERER_ENV::TEX_PADDING_REMEMBRANCE != -1)
      *((_DWORD *)v12 + 10) = HG_RENDERER_ENV::TEX_PADDING_REMEMBRANCE;
    if (HG_RENDERER_ENV::TEX_PADDING_CUSHIONING != -1)
      *((_DWORD *)v12 + 11) = HG_RENDERER_ENV::TEX_PADDING_CUSHIONING;
    if (HG_RENDERER_ENV::TEX_PADDING_CLUMPING != -1)
      *((_DWORD *)v12 + 12) = HG_RENDERER_ENV::TEX_PADDING_CLUMPING;
    v13 = (HGObject *)*((_QWORD *)this + 19);
    if (v13 == v12)
    {
      HGObject::Release((unsigned int *)v12);
    }
    else
    {
      if (v13)
        (*(void (**)(HGObject *))(*(_QWORD *)v13 + 24))(v13);
      *((_QWORD *)this + 19) = v12;
    }
  }
  if (HG_RENDERER_ENV::FORCE_LEGACY_TEXTURE_POOLING == 1)
  {
    v14 = (HGObject *)HGObject::operator new(0x28uLL);
    HGObject::HGObject(v14);
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = 0;
    *(_QWORD *)v14 = off_1E6529ED8;
    *((_DWORD *)v14 + 8) = 1056964608;
    v15 = *((_QWORD *)this + 18);
    v16 = (float)v15;
    if (v15 >> 31)
    {
      *((_DWORD *)v14 + 8) = 1062836634;
      *((_QWORD *)v14 + 3) = (unint64_t)(float)(v16 * 0.5);
      v17 = (HGObject *)*((_QWORD *)this + 20);
      v18 = v14;
      if (v17 == v14)
        goto LABEL_24;
    }
    else
    {
      *((_QWORD *)v14 + 3) = (unint64_t)(float)(v16 * 0.25);
      v17 = (HGObject *)*((_QWORD *)this + 20);
      v18 = v14;
      if (v17 == v14)
      {
LABEL_24:
        v20 = (HGObject *)HGObject::operator new(0x18uLL);
        HGObject::HGObject(v20);
        v21 = off_1E6529CE0;
        *(_QWORD *)v20 = off_1E6529CE0;
        *((_QWORD *)v20 + 2) = this;
        v22 = (HGObject *)*((_QWORD *)v18 + 2);
        if (v22 != v20)
        {
          if (v22)
          {
            (*(void (**)(HGObject *))(*(_QWORD *)v22 + 24))(v22);
            v21 = *(void (***)(HGTextureManagerHandleImpl *__hidden))v20;
          }
          *((_QWORD *)v18 + 2) = v20;
          v21[2](v20);
          v21 = *(void (***)(HGTextureManagerHandleImpl *__hidden))v20;
        }
        v21[3](v20);
        (*(void (**)(HGObject *))(*(_QWORD *)v14 + 24))(v14);
        goto LABEL_29;
      }
    }
    if (v17)
    {
      (*(void (**)(HGObject *))(*(_QWORD *)v17 + 24))(v17);
      v19 = *(void (***)(SimplePoolingPolicy *__hidden))v14;
    }
    else
    {
      v19 = off_1E6529ED8;
    }
    *((_QWORD *)this + 20) = v14;
    v19[2](v14);
    v18 = (HGObject *)*((_QWORD *)this + 20);
    goto LABEL_24;
  }
LABEL_29:
  HGGLContext::context((uint64_t *)&v29, *((HGGLContext **)this + 5));
  v23 = PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v29) != 0;
  PCSharedCount::PCSharedCount(&v29);
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard(v26);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v27);
  return v23;
}

void sub_1B2AA5F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCSharedCount a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B2AA6080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

uint64_t HGTextureManager::_createAuxiliaryGLContext(uint64_t this, uint64_t a2, uint64_t a3, const char *a4, char *a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  HGObject *v7;
  HGObject *v8;
  const char *v9;
  char *v10;
  PCSharedCount v11;
  HGObject *v12;

  if (!*(_QWORD *)(this + 40))
  {
    v5 = this;
    v6 = atomic_load(HGLogger::_enabled);
    if ((v6 & 1) != 0)
      HGLogger::log((HGLogger *)"init", (const char *)1, (HGLogger *)"creating auxiliary context for texture delete thread\n", a4, a5);
    HGGPURenderer::GetContext(*(_QWORD *)(v5 + 8), 24, (uint64_t *)&v11);
    HGGLContext::Create((uint64_t *)&v11, &v12);
    v7 = *(HGObject **)(v5 + 40);
    v8 = v12;
    if (v7 == v12)
    {
      if (v7)
        (*(void (**)(HGObject *))(*(_QWORD *)v7 + 24))(v7);
    }
    else
    {
      if (v7)
      {
        (*(void (**)(HGObject *))(*(_QWORD *)v7 + 24))(v7);
        v8 = v12;
      }
      *(_QWORD *)(v5 + 40) = v8;
      v12 = 0;
    }
    PCSharedCount::PCSharedCount(&v11);
    if (!HGGLContext::ptr(*(HGGLContext **)(v5 + 40)))
      HGLogger::warning((HGLogger *)"couldn't create shared context\n", v9, v10);
    return pthread_mutex_init((pthread_mutex_t *)(v5 + 48), 0);
  }
  return this;
}

void sub_1B2AA6184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  PCSharedCount::PCSharedCount((PCSharedCount *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HGTextureManager::maxTextureSizeGL(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 132;
  if (a2 == 28)
    v2 = 136;
  return *(unsigned int *)(a1 + v2);
}

uint64_t HGTextureManager::renderBgn(HGTextureManager *this)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = *((_QWORD *)this + 2);
  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v9 = (_QWORD *)operator new();
    v9[1] = 0;
    v3 = (uint64_t)(v9 + 1);
    v9[2] = 0;
    *v9 = v9 + 1;
    qword_1EF0759D0 = (uint64_t)v9;
LABEL_15:
    v5 = v3;
    goto LABEL_16;
  }
  v3 = qword_1EF0759D0 + 8;
  v4 = *(_QWORD **)(qword_1EF0759D0 + 8);
  if (!v4)
    goto LABEL_15;
  v5 = qword_1EF0759D0 + 8;
  do
  {
    v6 = v4[4];
    v7 = v6 >= v2;
    if (v6 >= v2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = (uint64_t)v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v3 || *(_QWORD *)(v5 + 32) > v2)
    goto LABEL_15;
LABEL_16:
  v10 = *(_QWORD *)(v5 + 40);
  pthread_mutex_unlock(&_MergedGlobals);
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 336));
  v11 = *(_DWORD *)(v10 + 400);
  *(_DWORD *)(v10 + 400) = v11 + 1;
  if (!v11)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v10 + 128));
    *(_BYTE *)(v10 + 404) = 1;
    while (!*(_BYTE *)(v10 + 405))
      pthread_cond_wait((pthread_cond_t *)(v10 + 240), (pthread_mutex_t *)(v10 + 128));
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 128));
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v10 + 336));
  *(_QWORD *)this = 0;
  pthread_mutex_lock(&stru_1ED4D8EB8);
  if (!qword_1EF0759D8)
  {
    v19 = (_QWORD *)operator new();
    v19[1] = 0;
    v12 = (uint64_t)(v19 + 1);
    v19[2] = 0;
    *v19 = v19 + 1;
    qword_1EF0759D8 = (uint64_t)v19;
LABEL_34:
    v15 = v12;
    goto LABEL_35;
  }
  v12 = qword_1EF0759D8 + 8;
  v13 = *(_QWORD **)(qword_1EF0759D8 + 8);
  if (!v13)
    goto LABEL_34;
  v14 = *((_QWORD *)this + 2);
  v15 = qword_1EF0759D8 + 8;
  do
  {
    v16 = v13[4];
    v17 = v16 >= v14;
    if (v16 >= v14)
      v18 = v13;
    else
      v18 = v13 + 1;
    if (v17)
      v15 = (uint64_t)v13;
    v13 = (_QWORD *)*v18;
  }
  while (*v18);
  if (v15 == v12 || v14 < *(_QWORD *)(v15 + 32))
    goto LABEL_34;
LABEL_35:
  v20 = *(_QWORD *)(v15 + 40);
  *(_QWORD *)(v20 + 48) = 0;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)v20 = 0u;
  return pthread_mutex_unlock(&stru_1ED4D8EB8);
}

uint64_t HGTextureManager::renderEnd(HGTextureManager *this)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 48))(*((_QWORD *)this + 20));
  HGTextureManager::_dumpMaxUsage(this);
  HGTextureManager::_dumpTextures(this, 0);
  v2 = *((_QWORD *)this + 2);
  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v9 = (_QWORD *)operator new();
    v9[1] = 0;
    v3 = (uint64_t)(v9 + 1);
    v9[2] = 0;
    *v9 = v9 + 1;
    qword_1EF0759D0 = (uint64_t)v9;
LABEL_15:
    v5 = v3;
    goto LABEL_16;
  }
  v3 = qword_1EF0759D0 + 8;
  v4 = *(_QWORD **)(qword_1EF0759D0 + 8);
  if (!v4)
    goto LABEL_15;
  v5 = qword_1EF0759D0 + 8;
  do
  {
    v6 = v4[4];
    v7 = v6 >= v2;
    if (v6 >= v2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = (uint64_t)v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v3 || *(_QWORD *)(v5 + 32) > v2)
    goto LABEL_15;
LABEL_16:
  v10 = *(_QWORD *)(v5 + 40);
  pthread_mutex_unlock(&_MergedGlobals);
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 336));
  v11 = *(_DWORD *)(v10 + 400) - 1;
  *(_DWORD *)(v10 + 400) = v11;
  if (!v11)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v10 + 128));
    *(_BYTE *)(v10 + 404) = 0;
    pthread_cond_signal((pthread_cond_t *)(v10 + 192));
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 128));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(v10 + 336));
}

void HGTextureManager::_dumpMaxUsage(HGTextureManager *this)
{
  const char *v2;
  unsigned __int8 v3;
  const char *v4;
  char *v5;
  unsigned __int8 v6;
  const char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *v11;
  unsigned __int8 v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _BYTE v16[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v16, "texManager", 1, "HGTextureManager::_dumpMaxUsage()");
  HGTextureManager::_dumpMaxUsage(this, *((_QWORD *)this + 2));
  v3 = atomic_load(HGLogger::_enabled);
  if ((v3 & 1) != 0 && (int)HGLogger::getLevel((HGLogger *)"texManager", v2) >= 1)
  {
    v6 = atomic_load(HGLogger::_enabled);
    if ((v6 & 1) != 0)
      HGLogger::log((HGLogger *)"texManager", (const char *)1, (HGLogger *)"  max usage, per share group :\n", v4, v5);
    pthread_mutex_lock(&stru_1ED4D8EB8);
    v9 = (_QWORD *)qword_1EF0759D8;
    if (qword_1EF0759D8)
    {
      v10 = *(_QWORD **)qword_1EF0759D8;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      v9[1] = 0;
      v10 = v9 + 1;
      v9[2] = 0;
      *v9 = v9 + 1;
      qword_1EF0759D8 = (uint64_t)v9;
    }
    while (1)
    {
      if (!v9)
      {
        v9 = (_QWORD *)operator new();
        v9[2] = 0;
        v9[1] = 0;
        *v9 = v9 + 1;
        qword_1EF0759D8 = (uint64_t)v9;
      }
      if (v10 == v9 + 1)
        break;
      v12 = atomic_load(HGLogger::_enabled);
      if ((v12 & 1) != 0)
      {
        v11 = (unint64_t *)v10[5];
        HGLogger::log((HGLogger *)"texManager", (const char *)1, (HGLogger *)"total : %4.1f mb  |  used : %4.1f mb  |  active : %4.1f mb  |  shared : %4.1f mb  |  unowned : %4.1f mb  |  free : %4.1f mb  |  queued : %4.1f mb\n", v7, v8, (float)((float)*v11 * 0.00000095367), (float)((float)v11[1] * 0.00000095367), (float)((float)v11[2] * 0.00000095367), (float)((float)v11[3] * 0.00000095367), (float)((float)v11[4] * 0.00000095367), (float)((float)v11[5] * 0.00000095367), (float)((float)v11[6] * 0.00000095367));
      }
      v13 = (_QWORD *)v10[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v10[2];
          v15 = *v14 == (_QWORD)v10;
          v10 = v14;
        }
        while (!v15);
      }
      v9 = (_QWORD *)qword_1EF0759D8;
      v10 = v14;
    }
    pthread_mutex_unlock(&stru_1ED4D8EB8);
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v16);
}

void sub_1B2AA6704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA6718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA672C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA6740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void HGTextureManager::_dumpTextures(HGTextureManager *this, char *a2)
{
  unsigned __int8 v4;
  int Level;
  HGTextureManager *v6;
  const char *v7;
  char *v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64x2_t *v17;
  int8x16_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  uint64x2_t v21;
  uint64x2_t v22;
  uint64x2_t v23;
  unint64_t v24;
  _BYTE v25[16];

  v20 = atomic_load(HGLogger::_enabled);
  if ((v20 & 1) != 0)
  {
    v4 = atomic_load(HGLogger::_enabled);
    if ((v4 & 1) != 0)
    {
      Level = HGLogger::getLevel((HGLogger *)"texManager", a2);
      if (Level > 0)
      {
        v6 = HGTraceGuard::HGTraceGuard((HGTraceGuard *)v25, "texManager", 3, "HGTextureManager::_dumpTextures()");
        v24 = 0;
        v22 = 0u;
        v23 = 0u;
        v21 = 0u;
        if (Level < 4)
        {
          v9 = atomic_load(HGLogger::_enabled);
          if ((v9 & 1) != 0)
            HGLogger::log((HGLogger *)"texManager", (const char *)3, (HGLogger *)"usage summary :\n", v7, v8);
          HGTextureManager::_printUsageSummary(v6, (const char *)3, a2, (HGTextureManager::TextureUsage *)&v21);
        }
        else
        {
          HGTextureManager::_printTextureList(this, (char *)4, a2, (HGTextureManager::TextureUsage *)&v21);
        }
        if (!a2)
          goto LABEL_29;
        pthread_mutex_lock(&stru_1ED4D8EB8);
        if (qword_1EF0759D8)
        {
          v10 = qword_1EF0759D8 + 8;
          v11 = *(_QWORD **)(qword_1EF0759D8 + 8);
          if (v11)
          {
            v12 = qword_1EF0759D8 + 8;
            do
            {
              v13 = v11[4];
              v14 = v13 >= (unint64_t)a2;
              if (v13 >= (unint64_t)a2)
                v15 = v11;
              else
                v15 = v11 + 1;
              if (v14)
                v12 = (uint64_t)v11;
              v11 = (_QWORD *)*v15;
            }
            while (*v15);
            if (v12 != v10 && *(_QWORD *)(v12 + 32) <= (unint64_t)a2)
              goto LABEL_26;
          }
        }
        else
        {
          v16 = (_QWORD *)operator new();
          v16[1] = 0;
          v10 = (uint64_t)(v16 + 1);
          v16[2] = 0;
          *v16 = v16 + 1;
          qword_1EF0759D8 = (uint64_t)v16;
        }
        v12 = v10;
LABEL_26:
        v17 = *(uint64x2_t **)(v12 + 40);
        v18 = vbslq_s8((int8x16_t)vcgtq_u64(v17[1], v22), (int8x16_t)v17[1], (int8x16_t)v22);
        *(int8x16_t *)v17 = vbslq_s8((int8x16_t)vcgtq_u64(*v17, v21), *(int8x16_t *)v17, (int8x16_t)v21);
        v17[1] = (uint64x2_t)v18;
        v17[2] = (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64(v17[2], v23), (int8x16_t)v17[2], (int8x16_t)v23);
        v19 = v17[3].u64[0];
        if (v19 <= v24)
          v19 = v24;
        v17[3].i64[0] = v19;
        pthread_mutex_unlock(&stru_1ED4D8EB8);
LABEL_29:
        HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v25);
      }
    }
  }
}

void sub_1B2AA69D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1B2AA69E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1B2AA69F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 64));
  _Unwind_Resume(a1);
}

uint64_t HGTextureManager::storageRecyclingPolicy(uint64_t result, int a2)
{
  *(_DWORD *)(result + 168) = a2;
  return result;
}

uint64_t HGTextureManager::recycleClientStorageTextures(uint64_t this, char a2)
{
  *(_BYTE *)(this + 172) = a2;
  return this;
}

uint64_t HGTextureManager::createRenderbuffer(HGTextureManager *this, unsigned int a2, uint64_t a3)
{
  unsigned __int8 v4;
  unsigned int v5;
  unsigned __int8 v6;
  uint64_t Renderbuffer;

  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_113);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_113))
  {
    __cxa_guard_release(&_MergedGlobals_113);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_1EF0759C8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EF0759C8))
  {
    qword_1EF0759E8 = 0;
    unk_1EF0759F0 = 0;
    qword_1EF0759E0 = 0;
    __cxa_atexit((void (*)(void *))RenderbufferCache::~RenderbufferCache, &qword_1EF0759E0, &dword_1B2737000);
    __cxa_guard_release(&qword_1EF0759C8);
  }
  Renderbuffer = RenderbufferCache::createRenderbuffer((RenderbufferCache *)&qword_1EF0759E0, v5, a3);
  return Renderbuffer;
}

void sub_1B2AA6B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HGTextureManager::deleteRenderbuffer(HGTextureManager *this, uint64_t a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  const char *v5;
  char *v6;
  uint64_t v7;
  unsigned __int8 v8;
  char *v9;
  unsigned __int8 v10;
  _BYTE v11[16];

  v3 = atomic_load((unsigned __int8 *)&_MergedGlobals_113);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_113))
  {
    __cxa_guard_release(&_MergedGlobals_113);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1EF0759C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EF0759C8))
  {
    qword_1EF0759E8 = 0;
    unk_1EF0759F0 = 0;
    qword_1EF0759E0 = 0;
    __cxa_atexit((void (*)(void *))RenderbufferCache::~RenderbufferCache, &qword_1EF0759E0, &dword_1B2737000);
    __cxa_guard_release(&qword_1EF0759C8);
  }
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v11, "renderbuffer", 1, "deleteRenderbuffer()");
  v7 = qword_1EF0759E0;
  if (qword_1EF0759E0 != qword_1EF0759E8)
  {
    while (*(_DWORD *)(v7 + 16) != (_DWORD)a2)
    {
      v7 += 24;
      if (v7 == qword_1EF0759E8)
        goto LABEL_10;
    }
  }
  if (v7 == qword_1EF0759E8)
  {
LABEL_10:
    v10 = atomic_load(HGLogger::_enabled);
    if ((v10 & 1) != 0)
    {
      v9 = "uh oh! unknown renderbuffer (%d)\n";
      goto LABEL_12;
    }
  }
  else
  {
    *(_BYTE *)(v7 + 20) = 0;
    v8 = atomic_load(HGLogger::_enabled);
    if ((v8 & 1) != 0)
    {
      v9 = "done with renderbuffer (%d) - marking unused\n";
LABEL_12:
      HGLogger::log((HGLogger *)"renderbuffer", (const char *)1, (HGLogger *)v9, v5, v6, a2);
    }
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v11);
}

void sub_1B2AA6C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA6CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HGTextureManager::adjustTextureSize(HGTextureManager *this, HGRect a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 19) + 40))(*((_QWORD *)this + 19), *(_QWORD *)&a2.var0, *(_QWORD *)&a2.var2);
}

void HGTextureManager::createTexture(HGTextureManager *this, unsigned int *a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  pthread_mutex_t *v14;
  _BYTE v15[16];
  _BYTE v16[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v15, "texManager", 2, "createTexture()");
  ++*(_DWORD *)this;
  v6 = *((_QWORD *)this + 2);
  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v13 = (_QWORD *)operator new();
    v13[1] = 0;
    v7 = (uint64_t)(v13 + 1);
    v13[2] = 0;
    *v13 = v13 + 1;
    qword_1EF0759D0 = (uint64_t)v13;
LABEL_15:
    v9 = v7;
    goto LABEL_16;
  }
  v7 = qword_1EF0759D0 + 8;
  v8 = *(_QWORD **)(qword_1EF0759D0 + 8);
  if (!v8)
    goto LABEL_15;
  v9 = qword_1EF0759D0 + 8;
  do
  {
    v10 = v8[4];
    v11 = v10 >= v6;
    if (v10 >= v6)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = (uint64_t)v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v7 || *(_QWORD *)(v9 + 32) > v6)
    goto LABEL_15;
LABEL_16:
  v14 = *(pthread_mutex_t **)(v9 + 40);
  pthread_mutex_unlock(&_MergedGlobals);
  if (v14[6].__opaque[12])
    TextureDeleteQueue::executeFinishedRequests(v14, 1);
  if (HGTextureManager::_waitForOneQueuedTexture(this))
  {
    while ((HGTextureManager::_waitForOneQueuedTexture(this) & 1) != 0)
      ;
  }
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v16, "texManager", 2, "_poolPreAllocateTexture()");
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 20) + 40))(*((_QWORD *)this + 20), 0, 0, 0, 0, 0);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v16);
  HGTextureManager::_allocateTexture((HGGPURenderer **)this, a2, a3, 0, 0, 0, 0, 0);
  HGTextureManager::_dumpTextures(this, *((char **)this + 2));
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v15);
}

void sub_1B2AA6F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a11);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AA6F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AA6F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a9);
  _Unwind_Resume(a1);
}

void HGTextureManager::_poolPreAllocateTexture(HGTextureManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE v12[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v12, "texManager", 2, "_poolPreAllocateTexture()");
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 20) + 40))(*((_QWORD *)this + 20), a2, a3, a4, a5, a6);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v12);
}

void sub_1B2AA6FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a9);
  _Unwind_Resume(a1);
}

void HGTextureManager::_allocateTexture(HGGPURenderer **this, unsigned int *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t GLState;
  GLuint v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  HGGPURenderer *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  PCSharedCount v27;
  PCSharedCount v28[3];
  _BYTE v29[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v29, "texManager", 2, "_allocateTexture()");
  GLState = HGGPURenderer::GetGLState(this[1]);
  HGGPURenderer::GetCurrentContext(this[1], (uint64_t *)&v27);
  HGGLState::SetCurrentContextGuard::SetCurrentContextGuard(v28, GLState, &v27);
  PCSharedCount::PCSharedCount(&v27);
  glGenTextures(1, a2);
  v17 = *a2;
  v20 = HGGetTBC();
  v21 = this[4];
  v22 = *((_QWORD *)v21 + 12);
  v23 = *((_QWORD *)v21 + 11);
  v24 = 42 * ((v22 - v23) >> 3) - 1;
  if (v22 == v23)
    v24 = 0;
  v25 = *((_QWORD *)v21 + 15) + *((_QWORD *)v21 + 14);
  if (v24 == v25)
  {
    std::deque<HGTextureManager::TextureEntry>::__add_back_capacity((uint64_t)v21 + 80);
    v23 = *((_QWORD *)v21 + 11);
    v25 = *((_QWORD *)v21 + 15) + *((_QWORD *)v21 + 14);
  }
  v26 = *(_QWORD *)(v23 + 8 * (v25 / 0x2A)) + 96 * (v25 % 0x2A);
  *(_DWORD *)v26 = a3;
  *(_DWORD *)(v26 + 4) = a4;
  *(_DWORD *)(v26 + 8) = a5;
  *(_DWORD *)(v26 + 12) = a6;
  *(_DWORD *)(v26 + 16) = a7;
  *(_DWORD *)(v26 + 20) = a8;
  *(_OWORD *)(v26 + 24) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *(_WORD *)(v26 + 56) = 0;
  *(_DWORD *)(v26 + 64) = v17;
  *(_WORD *)(v26 + 68) = 511;
  *(_QWORD *)(v26 + 72) = 1;
  *(_DWORD *)(v26 + 80) = 0;
  *(_QWORD *)(v26 + 88) = v20;
  ++*((_QWORD *)v21 + 15);
  LOBYTE(v26) = atomic_load(HGLogger::_enabled);
  if ((v26 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"allocating texture %d\n", v18, v19, *a2);
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard(v28);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v29);
}

void sub_1B2AA71D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCSharedCount a11, PCSharedCount a12, uint64_t a13, uint64_t a14, char a15)
{
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard(&a12);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a15);
  _Unwind_Resume(a1);
}

void HGTextureManager::createTexture(HGTextureManager *this, unsigned int *a2, const HGTextureManager::TextureInfo *a3)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  pthread_mutex_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[16];
  _BYTE v21[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v20, "texManager", 2, "createTexture( with size)");
  ++*(_DWORD *)this;
  v6 = *((_QWORD *)this + 2);
  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v13 = (_QWORD *)operator new();
    v13[1] = 0;
    v7 = (uint64_t)(v13 + 1);
    v13[2] = 0;
    *v13 = v13 + 1;
    qword_1EF0759D0 = (uint64_t)v13;
LABEL_15:
    v9 = v7;
    goto LABEL_16;
  }
  v7 = qword_1EF0759D0 + 8;
  v8 = *(_QWORD **)(qword_1EF0759D0 + 8);
  if (!v8)
    goto LABEL_15;
  v9 = qword_1EF0759D0 + 8;
  do
  {
    v10 = v8[4];
    v11 = v10 >= v6;
    if (v10 >= v6)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = (uint64_t)v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v7 || *(_QWORD *)(v9 + 32) > v6)
    goto LABEL_15;
LABEL_16:
  v14 = *(pthread_mutex_t **)(v9 + 40);
  pthread_mutex_unlock(&_MergedGlobals);
  if (v14[6].__opaque[12])
    TextureDeleteQueue::executeFinishedRequests(v14, 1);
  if ((HGTextureManager::_findTexture(this, a2, a3) & 1) == 0)
  {
    if (HG_RENDERER_ENV::WAIT_FOR_QUEUED_TEXTURE_ONE_BY_ONE)
    {
      while (HGTextureManager::_waitForOneQueuedTexture(this))
      {
        if ((HGTextureManager::_findTexture(this, a2, a3) & 1) != 0)
          goto LABEL_26;
      }
      goto LABEL_27;
    }
    if (!HGTextureManager::_waitForOneQueuedTexture(this))
      goto LABEL_27;
    while ((HGTextureManager::_waitForOneQueuedTexture(this) & 1) != 0)
      ;
    if ((HGTextureManager::_findTexture(this, a2, a3) & 1) == 0)
    {
LABEL_27:
      v15 = *((unsigned int *)a3 + 1);
      v16 = *((unsigned int *)a3 + 2);
      v17 = *((unsigned int *)a3 + 3);
      v18 = *((unsigned int *)a3 + 4);
      v19 = *((unsigned int *)a3 + 5);
      HGTraceGuard::HGTraceGuard((HGTraceGuard *)v21, "texManager", 2, "_poolPreAllocateTexture()");
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 20) + 40))(*((_QWORD *)this + 20), v15, v16, v17, v18, v19);
      HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v21);
      HGTextureManager::_allocateTexture((HGGPURenderer **)this, a2, *(_DWORD *)a3, *((_DWORD *)a3 + 1), *((_DWORD *)a3 + 2), *((_DWORD *)a3 + 3), *((_DWORD *)a3 + 4), *((_DWORD *)a3 + 5));
      goto LABEL_28;
    }
  }
LABEL_26:
  ++*((_DWORD *)this + 1);
LABEL_28:
  HGTextureManager::_dumpTextures(this, *((char **)this + 2));
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v20);
}

void sub_1B2AA7460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a11);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AA747C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AA7490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AA74A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HGTextureManager::_findTexture(HGTextureManager *this, unsigned int *a2, const HGTextureManager::TextureInfo *a3)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int64x2_t *v71;
  unint64_t v72;
  int64x2_t *v73;
  const char *v74;
  char *v75;
  unsigned __int8 v76;
  _BYTE v78[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v78, "texManager", 2, "_findTexture()");
  v6 = *((_QWORD *)this + 2);
  {
    v13 = (_QWORD *)operator new();
    v13[1] = 0;
    v7 = (uint64_t)(v13 + 1);
    v13[2] = 0;
    *v13 = v13 + 1;
LABEL_15:
    v9 = v7;
    goto LABEL_16;
  }
  if (!v8)
    goto LABEL_15;
  do
  {
    v10 = v8[4];
    v11 = v10 >= v6;
    if (v10 >= v6)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = (uint64_t)v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v7 || *(_QWORD *)(v9 + 32) > v6)
    goto LABEL_15;
LABEL_16:
  v14 = *(_QWORD *)(v9 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(v14 + 16));
  v15 = *(_QWORD *)(v14 + 120);
  if (!v15)
  {
LABEL_100:
    v49 = 0;
    goto LABEL_129;
  }
  v16 = *((_DWORD *)this + 42);
  if (v16 < 2)
  {
    v17 = *(_QWORD *)(v14 + 112);
    v31 = v17 + v15;
    v32 = (v17 + v15) >> 1;
    v33 = (v17 + v15) / 0x2A;
    v21 = *(_QWORD *)(v14 + 88);
    v22 = *(_QWORD *)(v14 + 96);
    v23 = (uint64_t *)(v21 + 8 * v33);
    if (v16 == 1)
    {
      if (v22 != v21)
      {
        v34 = *v23;
        v26 = *v23 + 96 * (v31 - 42 * ((unint64_t)((v32 * (unsigned __int128)0xC30C30C30C30C30DLL) >> 64) >> 4));
        v35 = *(_QWORD *)(v21 + 8 * (v17 / 0x2A)) + 96 * (v17 % 0x2A);
        if (v26 == v35)
          goto LABEL_104;
        v36 = *(_DWORD *)a3;
        while (1)
        {
          v37 = v26;
          if (v26 == v34)
          {
            v37 = *(v23 - 1) + 4032;
            if (v36 != *(_DWORD *)(*(v23 - 1) + 3936))
              goto LABEL_46;
          }
          else if (v36 != *(_DWORD *)(v26 - 96))
          {
            goto LABEL_46;
          }
          if (*((_DWORD *)a3 + 1) == *(_DWORD *)(v37 - 92)
            && *((_DWORD *)a3 + 2) == *(_DWORD *)(v37 - 88)
            && *((_DWORD *)a3 + 4) == *(_DWORD *)(v37 - 80)
            && *((_DWORD *)a3 + 5) == *(_DWORD *)(v37 - 76)
            && (*((_QWORD *)a3 + 3) == 0) != (*(_QWORD *)(v37 - 72) != 0)
            && *((unsigned __int8 *)a3 + 57) == *(unsigned __int8 *)(v37 - 39)
            && *((unsigned __int8 *)a3 + 56) == *(unsigned __int8 *)(v37 - 40))
          {
            goto LABEL_104;
          }
LABEL_46:
          if (v26 == v34)
          {
            v38 = *--v23;
            v34 = v38;
            v26 = v38 + 3936;
            if (v38 + 3936 == v35)
              goto LABEL_98;
          }
          else
          {
            v26 -= 96;
            if (v26 == v35)
              goto LABEL_98;
          }
        }
      }
LABEL_101:
      v26 = 0;
      if (v22 != v21)
        goto LABEL_105;
LABEL_99:
      if (v26)
        goto LABEL_106;
      goto LABEL_100;
    }
    if (v22 == v21)
      goto LABEL_101;
    v45 = *(_QWORD *)(v21 + 8 * v33);
    v26 = v45 + 96 * (v31 - 42 * v33);
    v35 = *(_QWORD *)(v21 + 8 * (v17 / 0x2A)) + 96 * (v17 % 0x2A);
    if (v26 == v35)
      goto LABEL_104;
    v46 = *(_DWORD *)a3;
    while (1)
    {
      v47 = v26;
      if (v26 == v45)
      {
        v47 = *(v23 - 1) + 4032;
        if (v46 != *(_DWORD *)(*(v23 - 1) + 3936))
          goto LABEL_86;
      }
      else if (v46 != *(_DWORD *)(v26 - 96))
      {
        goto LABEL_86;
      }
      if (*((_DWORD *)a3 + 1) == *(_DWORD *)(v47 - 92)
        && *((_DWORD *)a3 + 2) == *(_DWORD *)(v47 - 88)
        && *((_DWORD *)a3 + 4) == *(_DWORD *)(v47 - 80)
        && *((_DWORD *)a3 + 5) == *(_DWORD *)(v47 - 76))
      {
        goto LABEL_104;
      }
LABEL_86:
      if (v26 == v45)
      {
        v48 = *--v23;
        v45 = v48;
        v26 = v48 + 3936;
        if (v48 + 3936 == v35)
        {
LABEL_98:
          v26 = v35;
          if (v22 == v21)
            goto LABEL_99;
          goto LABEL_105;
        }
      }
      else
      {
        v26 -= 96;
        if (v26 == v35)
          goto LABEL_98;
      }
    }
  }
  v17 = *(_QWORD *)(v14 + 112);
  v18 = v17 + v15;
  v19 = (v17 + v15) >> 1;
  v20 = (v17 + v15) / 0x2A;
  v21 = *(_QWORD *)(v14 + 88);
  v22 = *(_QWORD *)(v14 + 96);
  v23 = (uint64_t *)(v21 + 8 * v20);
  if (v16 != 2 || (v24 = *((_QWORD *)a3 + 5)) == 0)
  {
    if (v22 == v21)
    {
      v26 = 0;
    }
    else
    {
      v39 = *(_QWORD *)(v21 + 8 * v20);
      v26 = v39 + 96 * (v18 - 42 * v20);
      v35 = *(_QWORD *)(v21 + 8 * (v17 / 0x2A)) + 96 * (v17 % 0x2A);
      if (v26 != v35)
      {
        v40 = *(_DWORD *)a3;
        v41 = *((_QWORD *)a3 + 3);
        while (1)
        {
          v42 = v26;
          if (v26 == v39)
          {
            v42 = *(v23 - 1) + 4032;
            if (v40 != *(_DWORD *)(*(v23 - 1) + 3936))
              goto LABEL_65;
          }
          else if (v40 != *(_DWORD *)(v26 - 96))
          {
            goto LABEL_65;
          }
          if (*((_DWORD *)a3 + 1) == *(_DWORD *)(v42 - 92)
            && *((_DWORD *)a3 + 2) == *(_DWORD *)(v42 - 88)
            && *((_DWORD *)a3 + 4) == *(_DWORD *)(v42 - 80)
            && *((_DWORD *)a3 + 5) == *(_DWORD *)(v42 - 76))
          {
            v43 = *(_QWORD *)(v42 - 72);
            if ((v41 == 0) != (v43 != 0)
              && *((unsigned __int8 *)a3 + 57) == *(unsigned __int8 *)(v42 - 39)
              && v41 == v43
              && *((unsigned __int8 *)a3 + 56) == *(unsigned __int8 *)(v42 - 40)
              && *((_QWORD *)a3 + 4) == *(_QWORD *)(v42 - 64))
            {
              break;
            }
          }
LABEL_65:
          if (v26 == v39)
          {
            v44 = *--v23;
            v39 = v44;
            v26 = v44 + 3936;
            if (v44 + 3936 == v35)
              goto LABEL_98;
          }
          else
          {
            v26 -= 96;
            if (v26 == v35)
              goto LABEL_98;
          }
        }
      }
    }
LABEL_104:
    if (v22 == v21)
      goto LABEL_99;
    goto LABEL_105;
  }
  if (v22 == v21)
    goto LABEL_101;
  v25 = *v23;
  v26 = *v23 + 96 * (v18 - 42 * ((unint64_t)((v19 * (unsigned __int128)0xC30C30C30C30C30DLL) >> 64) >> 4));
  v27 = *(_QWORD *)(v21 + 8 * (v17 / 0x2A)) + 96 * (v17 % 0x2A);
  if (v26 == v27)
    goto LABEL_104;
  v28 = *(_DWORD *)a3;
  do
  {
    while (1)
    {
      v29 = v26;
      if (v26 == v25)
      {
        v29 = *(v23 - 1) + 4032;
        if (v28 != *(_DWORD *)(*(v23 - 1) + 3936))
          goto LABEL_23;
      }
      else if (v28 != *(_DWORD *)(v26 - 96))
      {
        goto LABEL_23;
      }
      if (*((_DWORD *)a3 + 1) == *(_DWORD *)(v29 - 92)
        && *((_DWORD *)a3 + 2) == *(_DWORD *)(v29 - 88)
        && *((_DWORD *)a3 + 4) == *(_DWORD *)(v29 - 80)
        && *((_DWORD *)a3 + 5) == *(_DWORD *)(v29 - 76)
        && (*((_QWORD *)a3 + 3) == 0) != (*(_QWORD *)(v29 - 72) != 0)
        && *((unsigned __int8 *)a3 + 57) == *(unsigned __int8 *)(v29 - 39)
        && *((unsigned __int8 *)a3 + 56) == *(unsigned __int8 *)(v29 - 40)
        && v24 == *(_QWORD *)(v29 - 56)
        && *((_QWORD *)a3 + 6) == *(_QWORD *)(v29 - 48))
      {
        goto LABEL_104;
      }
LABEL_23:
      if (v26 == v25)
        break;
      v26 -= 96;
      if (v26 == v27)
        goto LABEL_40;
    }
    v30 = *--v23;
    v25 = v30;
    v26 = v30 + 3936;
  }
  while (v30 + 3936 != v27);
LABEL_40:
  v26 = *(_QWORD *)(v21 + 8 * (v17 / 0x2A)) + 96 * (v17 % 0x2A);
  if (v22 == v21)
    goto LABEL_99;
LABEL_105:
  if (v26 == *(_QWORD *)(v21 + 8 * (v17 / 0x2A)) + 96 * (v17 % 0x2A))
    goto LABEL_100;
LABEL_106:
  v50 = v26 - *v23;
  v51 = 0xAAAAAAAAAAAAAAABLL * (v50 >> 5);
  if (v50 < 97)
  {
    v57 = 42 - v51;
    v53 = &v23[-(v57 / 0x2A)];
    v58 = 42 * (v57 / 0x2A) - v57;
    v54 = *v53 + 96 * v58 + 3936;
    *a2 = *(_DWORD *)(*v53 + 96 * v58 + 4000);
    if (*(_BYTE *)(v54 + 56) == 2)
      goto LABEL_112;
LABEL_108:
    v55 = *(int *)(v54 + 76);
    if (!*(_BYTE *)(v54 + 69))
    {
      v56 = (_QWORD *)(v14 + 160);
      goto LABEL_114;
    }
    *(int64x2_t *)(v14 + 128) = vsubq_s64(*(int64x2_t *)(v14 + 128), vdupq_n_s64(v55));
    if ((*(char *)(v54 + 68) & 0x80000000) == 0)
    {
      v56 = (_QWORD *)(v14 + 144);
      goto LABEL_114;
    }
  }
  else
  {
    v52 = v51 - 1;
    v53 = &v23[v52 / 0x2A];
    v54 = *v53 + 96 * (v52 % 0x2A);
    *a2 = *(_DWORD *)(v54 + 64);
    if (*(_BYTE *)(v54 + 56) != 2)
      goto LABEL_108;
LABEL_112:
    v55 = *(int *)(v54 + 76);
    v56 = (_QWORD *)(v14 + 152);
LABEL_114:
    *v56 -= v55;
  }
  *(_BYTE *)(v54 + 68) = -1;
  ++*(_DWORD *)(v54 + 72);
  *(_DWORD *)(v54 + 80) = 0;
  v59 = HGGetTBC();
  v61 = (_QWORD *)*((_QWORD *)this + 4);
  v62 = v61[12];
  v63 = v61[11];
  v64 = 42 * ((v62 - v63) >> 3) - 1;
  *(_QWORD *)(v54 + 88) = v59;
  if (v62 == v63)
    v64 = 0;
  v65 = v61[15] + v61[14];
  if (v64 == v65)
  {
    std::deque<HGTextureManager::TextureEntry>::__add_back_capacity((uint64_t)(v61 + 10));
    v63 = v61[11];
    v65 = v61[15] + v61[14];
  }
  v66 = (_OWORD *)(*(_QWORD *)(v63 + 8 * (v65 / 0x2A)) + 96 * (v65 % 0x2A));
  v67 = *(_OWORD *)(v54 + 16);
  *v66 = *(_OWORD *)v54;
  v66[1] = v67;
  v68 = *(_OWORD *)(v54 + 32);
  v69 = *(_OWORD *)(v54 + 48);
  v70 = *(_OWORD *)(v54 + 80);
  v66[4] = *(_OWORD *)(v54 + 64);
  v66[5] = v70;
  v66[2] = v68;
  v66[3] = v69;
  ++v61[15];
  v71 = (int64x2_t *)*((_QWORD *)this + 4);
  if (*(_BYTE *)(v54 + 56) == 2)
  {
    v72 = *(int *)(v54 + 76);
    v73 = (int64x2_t *)((char *)v71 + 152);
    goto LABEL_125;
  }
  v72 = *(int *)(v54 + 76);
  if (*(_BYTE *)(v54 + 69))
  {
    v71[8] = vaddq_s64(v71[8], vdupq_n_s64(v72));
    if ((*(char *)(v54 + 68) & 0x80000000) == 0)
    {
      v73 = v71 + 9;
      goto LABEL_125;
    }
  }
  else
  {
    v73 = v71 + 10;
LABEL_125:
    v73->i64[0] += v72;
  }
  HGTextureManager::TextureEntry::log((HGTextureManager::TextureEntry *)v54, (const char *)2, v60);
  std::deque<HGTextureManager::TextureEntry>::erase((int64x2_t *)(v14 + 80), v53, (char *)v54);
  v76 = atomic_load(HGLogger::_enabled);
  if ((v76 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"re-using texture %d.  GREAT!!\n", v74, v75, *a2);
  v49 = 1;
LABEL_129:
  pthread_mutex_unlock((pthread_mutex_t *)(v14 + 16));
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v78);
  return v49;
}

void sub_1B2AA7E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  pthread_mutex_t *v11;

  pthread_mutex_unlock(v11);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a11);
  _Unwind_Resume(a1);
}

uint64_t HGTextureManager::_waitForOneQueuedTexture(HGTextureManager *this)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;

  v2 = *((_QWORD *)this + 2);
  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v9 = (_QWORD *)operator new();
    v9[1] = 0;
    v3 = (uint64_t)(v9 + 1);
    v9[2] = 0;
    *v9 = v9 + 1;
    qword_1EF0759D0 = (uint64_t)v9;
LABEL_15:
    v5 = v3;
    goto LABEL_16;
  }
  v3 = qword_1EF0759D0 + 8;
  v4 = *(_QWORD **)(qword_1EF0759D0 + 8);
  if (!v4)
    goto LABEL_15;
  v5 = qword_1EF0759D0 + 8;
  do
  {
    v6 = v4[4];
    v7 = v6 >= v2;
    if (v6 >= v2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = (uint64_t)v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v3 || *(_QWORD *)(v5 + 32) > v2)
    goto LABEL_15;
LABEL_16:
  v10 = *(_QWORD *)(v5 + 40);
  pthread_mutex_unlock(&_MergedGlobals);
  v11 = *(unsigned __int8 *)(v10 + 404);
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 128));
  v12 = *(_QWORD *)(v10 + 120);
  pthread_mutex_unlock((pthread_mutex_t *)(v10 + 128));
  if (v11)
  {
    if (v12)
    {
      HGTextureManager::_getQueuedTotalTextureUsage(*((_QWORD *)this + 2), &v14);
      if ((float)((float)*((unint64_t *)this + 18) * 0.8) < (float)v15
        || (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 20) + 56))(*((_QWORD *)this + 20)))
      {
        pthread_mutex_lock((pthread_mutex_t *)(v10 + 128));
        if (*(_QWORD *)(v10 + 120))
        {
          TextureDeleteQueue::_popFrontRequest((TextureDeleteQueue *)v10, (uint64_t)&v14);
          pthread_mutex_unlock((pthread_mutex_t *)(v10 + 128));
          TextureDeleteQueue::DeleteRequest::execute((TextureDeleteQueue::DeleteRequest *)&v14);
          return 1;
        }
LABEL_27:
        pthread_mutex_unlock((pthread_mutex_t *)(v10 + 128));
        return 1;
      }
    }
  }
  else if (v12)
  {
    HGTextureManager::_getQueuedTotalTextureUsage(*((_QWORD *)this + 2), &v14);
    if ((float)((float)*((unint64_t *)this + 18) * 0.8) < (float)v15
      || (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 20) + 56))(*((_QWORD *)this + 20)))
    {
      pthread_mutex_lock((pthread_mutex_t *)(v10 + 128));
      if (*(_QWORD *)(v10 + 120))
        pthread_cond_wait((pthread_cond_t *)(v10 + 288), (pthread_mutex_t *)(v10 + 128));
      goto LABEL_27;
    }
  }
  return 0;
}

void HGTextureManager::deleteTexture(HGTextureManager *this, const unsigned int *a2, char *a3, const char *a4)
{
  const char *v8;
  char *v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  pthread_mutex_t *v19;
  const char *v20;
  char *v21;
  int64x2_t *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64x2_t *v34;
  unsigned __int8 v35;
  const char *v36;
  char *v37;
  unsigned __int8 v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  _QWORD *v45;
  unsigned __int8 v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD *v62;
  char v63;
  char v64;
  _BYTE v65[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v65, "texManager", 2, "deleteTexture()");
  v10 = atomic_load(HGLogger::_enabled);
  if ((v10 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"deleting texture %d\n", v8, v9, *a2);
  v11 = *((_QWORD *)this + 2);
  pthread_mutex_lock(&_MergedGlobals);
  if (qword_1EF0759D0)
  {
    v12 = qword_1EF0759D0 + 8;
    v13 = *(_QWORD **)(qword_1EF0759D0 + 8);
    if (v13)
    {
      v14 = qword_1EF0759D0 + 8;
      do
      {
        v15 = v13[4];
        v16 = v15 >= v11;
        if (v15 >= v11)
          v17 = v13;
        else
          v17 = v13 + 1;
        if (v16)
          v14 = (uint64_t)v13;
        v13 = (_QWORD *)*v17;
      }
      while (*v17);
      if (v14 != v12 && *(_QWORD *)(v14 + 32) <= v11)
        goto LABEL_18;
    }
  }
  else
  {
    v18 = (_QWORD *)operator new();
    v18[1] = 0;
    v12 = (uint64_t)(v18 + 1);
    v18[2] = 0;
    *v18 = v18 + 1;
    qword_1EF0759D0 = (uint64_t)v18;
  }
  v14 = v12;
LABEL_18:
  v19 = *(pthread_mutex_t **)(v14 + 40);
  pthread_mutex_unlock(&_MergedGlobals);
  if (v19[6].__opaque[12])
    TextureDeleteQueue::executeFinishedRequests(v19, 1);
  v22 = (int64x2_t *)*((_QWORD *)this + 4);
  v23 = v22[5].i64[1];
  if (v22[6].i64[0] != v23)
  {
    v24 = v22[7].u64[0];
    v25 = (_QWORD *)(v23 + 8 * (v24 / 0x2A));
    v26 = *v25 + 96 * (v24 % 0x2A);
    v27 = v22[7].i64[1] + v24;
    v28 = v27 / 0x2A;
    v29 = *(_QWORD *)(v23 + 8 * (v27 / 0x2A));
    v30 = v27 % 0x2A;
    v31 = v29 + 96 * v30;
    if (v26 != v31)
    {
      while (*(_DWORD *)(v26 + 64) != *a2)
      {
        v26 += 96;
        if (v26 - *v25 == 4032)
        {
          v32 = v25[1];
          ++v25;
          v26 = v32;
        }
        if (v26 == v31)
        {
          v26 = v31;
          break;
        }
      }
    }
    if (v26 != *(_QWORD *)(v23 + 8 * v28) + 96 * v30)
    {
      if (*(_BYTE *)(v26 + 56) == 2)
      {
        v33 = *(int *)(v26 + 76);
        v34 = (int64x2_t *)((char *)v22 + 152);
      }
      else
      {
        v33 = *(int *)(v26 + 76);
        if (*(_BYTE *)(v26 + 69))
        {
          v22[8] = vsubq_s64(v22[8], vdupq_n_s64(v33));
          if (*(char *)(v26 + 68) < 0)
          {
LABEL_38:
            *(_BYTE *)(v26 + 68) = -1;
            *(_DWORD *)(v26 + 80) = 2;
            *(_QWORD *)(v26 + 88) = HGGetTBC();
            if (*(_DWORD *)(v26 + 4)
              && *(_DWORD *)(v26 + 8)
              && *(_DWORD *)(v26 + 16)
              && *(_DWORD *)(v26 + 20)
              && *(_DWORD *)(v26 + 12)
              && (!*(_BYTE *)(v26 + 57) || *((_BYTE *)this + 172)))
            {
              v38 = atomic_load(HGLogger::_enabled);
              if ((v38 & 1) != 0)
                HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"queueing add to free textures pool: %d\n", v36, v37, *(unsigned int *)(v26 + 64));
              v39 = *((_QWORD *)this + 2);
              pthread_mutex_lock(&_MergedGlobals);
              if (qword_1EF0759D0)
              {
                v40 = qword_1EF0759D0 + 8;
                v41 = *(_QWORD **)(qword_1EF0759D0 + 8);
                if (v41)
                {
                  v42 = qword_1EF0759D0 + 8;
                  do
                  {
                    v43 = v41[4];
                    v44 = v43 >= v39;
                    if (v43 >= v39)
                      v45 = v41;
                    else
                      v45 = v41 + 1;
                    if (v44)
                      v42 = (uint64_t)v41;
                    v41 = (_QWORD *)*v45;
                  }
                  while (*v45);
                  if (v42 != v40 && *(_QWORD *)(v42 + 32) <= v39)
                    goto LABEL_82;
                }
              }
              else
              {
                v62 = (_QWORD *)operator new();
                v62[1] = 0;
                v40 = (uint64_t)(v62 + 1);
                v62[2] = 0;
                *v62 = v62 + 1;
                qword_1EF0759D0 = (uint64_t)v62;
              }
              v42 = v40;
LABEL_82:
              v55 = *(_QWORD *)(v42 + 40);
              pthread_mutex_unlock(&_MergedGlobals);
              v56 = 1;
              v57 = &v63;
              goto LABEL_78;
            }
            v46 = atomic_load(HGLogger::_enabled);
            if ((v46 & 1) != 0)
              HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"null size, queueing delete %d\n", v36, v37, *(unsigned int *)(v26 + 64));
            v47 = *((_QWORD *)this + 2);
            pthread_mutex_lock(&_MergedGlobals);
            if (qword_1EF0759D0)
            {
              v48 = qword_1EF0759D0 + 8;
              v49 = *(_QWORD **)(qword_1EF0759D0 + 8);
              if (v49)
              {
                v50 = qword_1EF0759D0 + 8;
                do
                {
                  v51 = v49[4];
                  v52 = v51 >= v47;
                  if (v51 >= v47)
                    v53 = v49;
                  else
                    v53 = v49 + 1;
                  if (v52)
                    v50 = (uint64_t)v49;
                  v49 = (_QWORD *)*v53;
                }
                while (*v53);
                if (v50 != v48 && *(_QWORD *)(v50 + 32) <= v47)
                  goto LABEL_77;
              }
            }
            else
            {
              v54 = (_QWORD *)operator new();
              v54[1] = 0;
              v48 = (uint64_t)(v54 + 1);
              v54[2] = 0;
              *v54 = v54 + 1;
              qword_1EF0759D0 = (uint64_t)v54;
            }
            v50 = v48;
LABEL_77:
            v55 = *(_QWORD *)(v50 + 40);
            pthread_mutex_unlock(&_MergedGlobals);
            v56 = 0;
            v57 = &v64;
LABEL_78:
            v58 = *(_OWORD *)(v26 + 16);
            *(_OWORD *)v57 = *(_OWORD *)v26;
            *((_OWORD *)v57 + 1) = v58;
            v59 = *(_OWORD *)(v26 + 32);
            v60 = *(_OWORD *)(v26 + 48);
            v61 = *(_OWORD *)(v26 + 80);
            *((_OWORD *)v57 + 4) = *(_OWORD *)(v26 + 64);
            *((_OWORD *)v57 + 5) = v61;
            *((_OWORD *)v57 + 2) = v59;
            *((_OWORD *)v57 + 3) = v60;
            TextureDeleteQueue::enqueueDelete(v55, (uint64_t)this, (uint64_t)v57, a4, a3, 1, v56);
            std::deque<HGTextureManager::TextureEntry>::erase(v22 + 5, v25, (char *)v26);
            goto LABEL_79;
          }
          v34 = v22 + 9;
        }
        else
        {
          v34 = v22 + 10;
        }
      }
      v34->i64[0] -= v33;
      goto LABEL_38;
    }
  }
  v35 = atomic_load(HGLogger::_enabled);
  if ((v35 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)1, (HGLogger *)"ERROR deleting texture ID %d, texture not found!\n", v20, v21, *a2);
LABEL_79:
  HGTextureManager::_dumpTextures(this, *((char **)this + 2));
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v65);
}

void sub_1B2AA8530(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_1B2AA8544(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 96));
  _Unwind_Resume(a1);
}

void **std::deque<HGTextureManager::TextureEntry>::erase(int64x2_t *a1, _QWORD *a2, char *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void **v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void **v26;
  char *v27;
  unint64_t v28;
  int64x2_t v29;
  unint64_t v30;
  void **v31;
  void **result;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const void **v38;
  _BYTE *v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  const void **v43[4];

  v6 = a1[2].u64[0];
  v7 = a1->i64[1];
  v8 = a1[1].i64[0];
  v9 = (const void **)(v7 + 8 * (v6 / 0x2A));
  if (v8 != v7)
  {
    v10 = (char *)*v9 + 96 * (v6 % 0x2A);
    if (a3 != v10)
      goto LABEL_3;
LABEL_9:
    v13 = 0;
    v12 = *v9;
    goto LABEL_10;
  }
  v10 = 0;
  if (!a3)
    goto LABEL_9;
LABEL_3:
  v11 = 42 * ((const void **)a2 - v9) - 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 5);
  v12 = *v9;
  v13 = v11 + 0x5555555555555555 * ((v10 - (_BYTE *)*v9) >> 5);
  if (!v13)
  {
LABEL_10:
    v22 = 1;
    v14 = (const void **)(v7 + 8 * (v6 / 0x2A));
    v15 = (const void **)v10;
    goto LABEL_13;
  }
  if (v11 < 1)
  {
    v14 = &v9[-((41 - v11) / 0x2AuLL)];
    v12 = *v14;
    v15 = (const void **)((char *)*v14 + 96 * (42 * ((41 - v11) / 0x2AuLL) - (41 - v11)) + 3936);
    v16 = a1[2].i64[1];
    if (v13 > (unint64_t)(v16 - 1) >> 1)
      goto LABEL_6;
  }
  else
  {
    v14 = &v9[v11 / 0x2AuLL];
    v12 = *v14;
    v15 = (const void **)((char *)*v14 + 96 * (v11 % 0x2AuLL));
    v16 = a1[2].i64[1];
    if (v13 > (unint64_t)(v16 - 1) >> 1)
    {
LABEL_6:
      v17 = (char *)v15 - v12;
      v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - v12) >> 5);
      if (v17 < -95)
      {
        v35 = 40 - v18;
        v20 = &v14[-(v35 / 0x2A)];
        v21 = (char *)*v20 + 96 * (42 * (v35 / 0x2A) - v35) + 3936;
      }
      else
      {
        v19 = v18 + 1;
        v20 = &v14[v19 / 0x2A];
        v21 = (char *)*v20 + 96 * (v19 % 0x2A);
      }
      v36 = v16 + v6;
      v37 = (v16 + v6) / 0x2A;
      v38 = (const void **)(v7 + 8 * v37);
      if (v8 == v7)
        v39 = 0;
      else
        v39 = (char *)*v38 + 96 * (v36 - 42 * v37);
      v43[0] = v14;
      v43[1] = v15;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<HGTextureManager::TextureEntry,HGTextureManager::TextureEntry*,HGTextureManager::TextureEntry&,HGTextureManager::TextureEntry**,long,42l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<HGTextureManager::TextureEntry,HGTextureManager::TextureEntry*,HGTextureManager::TextureEntry&,HGTextureManager::TextureEntry**,long,42l>,std::__deque_iterator<HGTextureManager::TextureEntry,HGTextureManager::TextureEntry*,HGTextureManager::TextureEntry&,HGTextureManager::TextureEntry**,long,42l>>>(v20, v21, v38, v39, (uint64_t)v43);
      v31 = (void **)a1->i64[1];
      v40 = (void **)a1[1].i64[0];
      v41 = 42 * (v40 - v31) - 1;
      v30 = a1[2].u64[0];
      v42 = a1[2].i64[1];
      a1[2].i64[1] = v42 - 1;
      if (v40 == v31)
        v41 = 0;
      if (v41 - (v42 + v30) + 1 >= 0x54)
      {
        operator delete(*(v40 - 1));
        v22 = 0;
        v31 = (void **)a1->i64[1];
        a1[1].i64[0] -= 8;
        v30 = a1[2].u64[0];
      }
      else
      {
        v22 = 0;
      }
      goto LABEL_18;
    }
  }
  v22 = 0;
LABEL_13:
  v23 = (char *)v15 - v12;
  v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - v12) >> 5);
  if (v23 < -95)
  {
    v28 = 40 - v24;
    v26 = &v14[-(v28 / 0x2A)];
    v27 = (char *)*v26 + 96 * (42 * (v28 / 0x2A) - v28) + 3936;
  }
  else
  {
    v25 = v24 + 1;
    v26 = &v14[v25 / 0x2A];
    v27 = (char *)*v26 + 96 * (v25 % 0x2A);
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<HGTextureManager::TextureEntry,HGTextureManager::TextureEntry*,HGTextureManager::TextureEntry&,HGTextureManager::TextureEntry**,long,42l>,std::__deque_iterator<HGTextureManager::TextureEntry,HGTextureManager::TextureEntry*,HGTextureManager::TextureEntry&,HGTextureManager::TextureEntry**,long,42l>,0>(v9, v10, v14, (char *)v15, v26, v27, v43);
  v29 = vaddq_s64(a1[2], (int64x2_t)xmmword_1B304F0B0);
  a1[2] = v29;
  v30 = v29.i64[0];
  v31 = (void **)a1->i64[1];
  if (v29.i64[0] >= 0x54uLL)
  {
    operator delete(*v31);
    v31 = (void **)(a1->i64[1] + 8);
    a1->i64[1] = (uint64_t)v31;
    v30 = a1[2].i64[0] - 42;
    a1[2].i64[0] = v30;
  }
LABEL_18:
  result = &v31[v30 / 0x2A];
  if ((void **)a1[1].i64[0] == v31)
  {
    v33 = 0;
    if ((v22 & 1) != 0)
      return result;
  }
  else
  {
    v33 = (unint64_t)*result + 96 * (v30 % 0x2A);
    if ((v22 & 1) != 0)
      return result;
  }
  v34 = v13 - 0x5555555555555555 * ((uint64_t)(v33 - (_QWORD)*result) >> 5);
  if (v34 < 1)
    result -= (41 - v34) / 0x2AuLL;
  else
    result += v34 / 0x2AuLL;
  return result;
}

void HGTextureManager::dismissTexture(HGTextureManager *this, const unsigned int *a2, char *a3, const char *a4)
{
  const char *v8;
  char *v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  pthread_mutex_t *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _OWORD v30[4];
  int v31;
  __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _BYTE v36[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v36, "texManager", 2, "dismissTexture()");
  v10 = atomic_load(HGLogger::_enabled);
  if ((v10 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"dismiss texture %d\n", v8, v9, *a2);
  v11 = *((_QWORD *)this + 2);
  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v18 = (_QWORD *)operator new();
    v18[1] = 0;
    v12 = (uint64_t)(v18 + 1);
    v18[2] = 0;
    *v18 = v18 + 1;
    qword_1EF0759D0 = (uint64_t)v18;
LABEL_17:
    v14 = v12;
    goto LABEL_18;
  }
  v12 = qword_1EF0759D0 + 8;
  v13 = *(_QWORD **)(qword_1EF0759D0 + 8);
  if (!v13)
    goto LABEL_17;
  v14 = qword_1EF0759D0 + 8;
  do
  {
    v15 = v13[4];
    v16 = v15 >= v11;
    if (v15 >= v11)
      v17 = v13;
    else
      v17 = v13 + 1;
    if (v16)
      v14 = (uint64_t)v13;
    v13 = (_QWORD *)*v17;
  }
  while (*v17);
  if (v14 == v12 || *(_QWORD *)(v14 + 32) > v11)
    goto LABEL_17;
LABEL_18:
  v19 = *(pthread_mutex_t **)(v14 + 40);
  pthread_mutex_unlock(&_MergedGlobals);
  if (v19[6].__opaque[12])
    TextureDeleteQueue::executeFinishedRequests(v19, 1);
  v20 = *a2;
  v21 = *((_QWORD *)this + 2);
  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v28 = (_QWORD *)operator new();
    v28[1] = 0;
    v22 = (uint64_t)(v28 + 1);
    v28[2] = 0;
    *v28 = v28 + 1;
    qword_1EF0759D0 = (uint64_t)v28;
LABEL_34:
    v24 = v22;
    goto LABEL_35;
  }
  v22 = qword_1EF0759D0 + 8;
  v23 = *(_QWORD **)(qword_1EF0759D0 + 8);
  if (!v23)
    goto LABEL_34;
  v24 = qword_1EF0759D0 + 8;
  do
  {
    v25 = v23[4];
    v26 = v25 >= v21;
    if (v25 >= v21)
      v27 = v23;
    else
      v27 = v23 + 1;
    if (v26)
      v24 = (uint64_t)v23;
    v23 = (_QWORD *)*v27;
  }
  while (*v27);
  if (v24 == v22 || *(_QWORD *)(v24 + 32) > v21)
    goto LABEL_34;
LABEL_35:
  v29 = *(_QWORD *)(v24 + 40);
  pthread_mutex_unlock(&_MergedGlobals);
  memset(v30, 0, 58);
  v31 = v20;
  v32 = 511;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  TextureDeleteQueue::enqueueDelete(v29, (uint64_t)this, (uint64_t)v30, a4, a3, 0, 0);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v36);
}

void sub_1B2AA8C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1B2AA8C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 64));
  _Unwind_Resume(a1);
}

void HGTextureManager::removeTexture(HGTextureManager *this, uint64_t a2)
{
  const char *v4;
  char *v5;
  unsigned __int8 v6;
  int64x2_t *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t *v18;
  unint64_t v19;
  int64x2_t *v20;
  _BYTE v21[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v21, "texManager", 2, "removeTexture()");
  v6 = atomic_load(HGLogger::_enabled);
  if ((v6 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"remove texture %d (delegate ownership)\n", v4, v5, a2);
  v7 = (int64x2_t *)*((_QWORD *)this + 4);
  v8 = v7[5].i64[1];
  if (v7[6].i64[0] != v8)
  {
    v9 = v7[7].u64[0];
    v10 = (_QWORD *)(v8 + 8 * (v9 / 0x2A));
    v11 = *v10 + 96 * (v9 % 0x2A);
    v12 = v7[7].i64[1] + v9;
    v13 = v12 / 0x2A;
    v14 = *(_QWORD *)(v8 + 8 * (v12 / 0x2A));
    v15 = v12 % 0x2A;
    v16 = v14 + 96 * v15;
    if (v11 != v16)
    {
      while (*(_DWORD *)(v11 + 64) != (_DWORD)a2)
      {
        v11 += 96;
        if (v11 - *v10 == 4032)
        {
          v17 = v10[1];
          ++v10;
          v11 = v17;
        }
        if (v11 == v16)
        {
          v11 = v16;
          break;
        }
      }
    }
    if (v11 != *(_QWORD *)(v8 + 8 * v13) + 96 * v15)
    {
      v18 = (int64x2_t *)*((_QWORD *)this + 4);
      if (*(_BYTE *)(v11 + 56) == 2)
      {
        v19 = *(int *)(v11 + 76);
        v20 = (int64x2_t *)((char *)v18 + 152);
      }
      else
      {
        v19 = *(int *)(v11 + 76);
        if (*(_BYTE *)(v11 + 69))
        {
          v18[8] = vsubq_s64(v18[8], vdupq_n_s64(v19));
          if (*(char *)(v11 + 68) < 0)
          {
LABEL_19:
            std::deque<HGTextureManager::TextureEntry>::erase(v7 + 5, v10, (char *)v11);
            goto LABEL_20;
          }
          v20 = v18 + 9;
        }
        else
        {
          v20 = v18 + 10;
        }
      }
      v20->i64[0] -= v19;
      goto LABEL_19;
    }
  }
LABEL_20:
  HGTextureManager::_dumpTextures(this, *((char **)this + 2));
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v21);
}

void sub_1B2AA8E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA8E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

uint64_t HGTextureManager::emptyTexturePool(HGTextureManager *this)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  pthread_mutex_t *v10;

  v2 = *((_QWORD *)this + 2);
  {
    v9 = (_QWORD *)operator new();
    v9[1] = 0;
    v3 = (uint64_t)(v9 + 1);
    v9[2] = 0;
    *v9 = v9 + 1;
LABEL_15:
    v5 = v3;
    goto LABEL_16;
  }
  if (!v4)
    goto LABEL_15;
  do
  {
    v6 = v4[4];
    v7 = v6 >= v2;
    if (v6 >= v2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = (uint64_t)v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v3 || *(_QWORD *)(v5 + 32) > v2)
    goto LABEL_15;
LABEL_16:
  v10 = *(pthread_mutex_t **)(v5 + 40);
  v10 = (pthread_mutex_t *)((char *)v10 + 16);
  pthread_mutex_lock(v10);
  HGTextureManager::emptyTexturePool_NoLock(this);
  return pthread_mutex_unlock(v10);
}

void sub_1B2AA8F5C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t HGTextureManager::activeTexture(HGTextureManager *this, GLenum a2, uint64_t a3, const char *a4, char *a5)
{
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t GLState;
  PCSharedCount v11;
  PCSharedCount v12[3];

  v7 = *((unsigned int *)this + 6);
  *((_DWORD *)this + 6) = a2 - 33984;
  v8 = atomic_load(HGLogger::_enabled);
  if ((v8 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"active texture %d\n", a4, a5, *((unsigned int *)this + 6));
  GLState = HGGPURenderer::GetGLState(*((HGGPURenderer **)this + 1));
  HGGPURenderer::GetCurrentContext(*((HGGPURenderer **)this + 1), (uint64_t *)&v11);
  HGGLState::SetCurrentContextGuard::SetCurrentContextGuard(v12, GLState, &v11);
  PCSharedCount::PCSharedCount(&v11);
  glActiveTexture(a2);
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard(v12);
  return v7;
}

void sub_1B2AA9028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA903C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCSharedCount a11)
{
  PCSharedCount::PCSharedCount(&a11);
  _Unwind_Resume(a1);
}

void HGTextureManager::bindTexture(HGTextureManager *this, GLenum a2, uint64_t a3)
{
  char *v6;
  const char *v7;
  char *v8;
  unsigned __int8 v9;
  int64x2_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned __int8 v23;
  int64x2_t *v24;
  uint64_t v25;
  unint64_t v26;
  int64x2_t v27;
  int64x2_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int64x2_t *v37;
  unint64_t v38;
  int64x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  int64x2_t *v45;
  unint64_t v46;
  int64x2_t *v47;
  int64x2_t v48;
  int v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t GLState;
  PCSharedCount v53;
  PCSharedCount v54[3];
  _BYTE v55[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v55, "texManager", 2, "bindTexture()");
  v9 = atomic_load(HGLogger::_enabled);
  if ((v9 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"binding texture %d in unit %d\n", v7, v8, a3, *((unsigned int *)this + 6));
  v10 = (int64x2_t *)*((_QWORD *)this + 4);
  v11 = v10[5].i64[1];
  if (v10[6].i64[0] == v11)
  {
    v12 = &v10[7].i64[1];
    v21 = (unsigned int *)((char *)this + 24);
    if (!(_DWORD)a3)
      goto LABEL_64;
    goto LABEL_26;
  }
  v12 = &v10[7].i64[1];
  v13 = v10[7].u64[0];
  v14 = (_QWORD *)(v11 + 8 * (v13 / 0x2A));
  v15 = *v14 + 96 * (v13 % 0x2A);
  v16 = v10[7].i64[1] + v13;
  v17 = v16 / 0x2A;
  v18 = *(_QWORD *)(v11 + 8 * (v16 / 0x2A));
  v19 = v16 % 0x2A;
  v20 = v18 + 96 * v19;
  v21 = (unsigned int *)((char *)this + 24);
  if (v15 != v20)
  {
    while (*((_DWORD *)this + 6) != *(char *)(v15 + 68))
    {
      v15 += 96;
      if (v15 - *v14 == 4032)
      {
        v22 = v14[1];
        ++v14;
        v15 = v22;
      }
      if (v15 == v20)
      {
        v15 = v20;
        break;
      }
    }
  }
  if (v15 == *(_QWORD *)(v11 + 8 * v17) + 96 * v19)
    goto LABEL_25;
  v23 = atomic_load(HGLogger::_enabled);
  if ((v23 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"  (...unbinding tex %d from unit %d)\n", v7, v8, *(unsigned int *)(v15 + 64), *v21);
  v24 = (int64x2_t *)*((_QWORD *)this + 4);
  if (*(_BYTE *)(v15 + 56) == 2)
  {
    v25 = v24[9].i64[1];
    v24[9].i64[1] = v25 - *(int *)(v15 + 76);
    *(_BYTE *)(v15 + 68) = -1;
    if (*(_BYTE *)(v15 + 69))
    {
      v24[9].i64[1] = v25;
      if (!(_DWORD)a3)
        goto LABEL_64;
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  v26 = *(int *)(v15 + 76);
  if (!*(_BYTE *)(v15 + 69))
  {
    v24[10].i64[0] -= v26;
    *(_BYTE *)(v15 + 68) = -1;
LABEL_24:
    std::deque<HGTextureManager::TextureEntry>::erase(v10 + 5, v14, (char *)v15);
LABEL_25:
    if (!(_DWORD)a3)
      goto LABEL_64;
    goto LABEL_26;
  }
  v27 = vdupq_n_s64(v26);
  v28 = vsubq_s64(v24[8], v27);
  v24[8] = v28;
  if (*(char *)(v15 + 68) < 0)
  {
    *(_BYTE *)(v15 + 68) = -1;
  }
  else
  {
    v24[9].i64[0] -= v26;
    *(_BYTE *)(v15 + 68) = -1;
    v28 = v24[8];
  }
  v24[8] = vaddq_s64(v28, v27);
  if (!(_DWORD)a3)
    goto LABEL_64;
LABEL_26:
  v29 = v10[7].u64[0];
  v30 = v10[5].i64[1];
  v31 = v10[6].i64[0];
  if (v31 == v30)
  {
    v33 = 0;
    v34 = *v12 + v29;
  }
  else
  {
    v32 = (_QWORD *)(v30 + 8 * (v29 / 0x2A));
    v33 = *v32 + 96 * (v29 % 0x2A);
    v34 = *v12 + v29;
    v35 = *(_QWORD *)(v30 + 8 * (v34 / 0x2A)) + 96 * (v34 % 0x2A);
    if (v33 != v35)
    {
      while (*(_DWORD *)(v33 + 64) != (_DWORD)a3)
      {
        v33 += 96;
        if (v33 - *v32 == 4032)
        {
          v36 = v32[1];
          ++v32;
          v33 = v36;
        }
        if (v33 == v35)
        {
          v33 = *(_QWORD *)(v30 + 8 * (v34 / 0x2A)) + 96 * (v34 % 0x2A);
          break;
        }
      }
    }
    if (v33 != *(_QWORD *)(v30 + 8 * (v34 / 0x2A)) + 96 * (v34 % 0x2A))
    {
      v37 = (int64x2_t *)*((_QWORD *)this + 4);
      if (*(_BYTE *)(v33 + 56) == 2)
      {
        v38 = *(int *)(v33 + 76);
        v41 = v37[9].i64[1];
        v39 = (int64x2_t *)((char *)v37 + 152);
        v40 = v41;
      }
      else
      {
        v38 = *(int *)(v33 + 76);
        if (*(_BYTE *)(v33 + 69))
        {
          v48 = vdupq_n_s64(v38);
          v37[8] = vsubq_s64(v37[8], v48);
          if ((*(char *)(v33 + 68) & 0x80000000) == 0)
            v37[9].i64[0] -= v38;
          v49 = *(char *)v21;
          *(_BYTE *)(v33 + 68) = *(_BYTE *)v21;
          v37[8] = vaddq_s64(v37[8], v48);
          if (v49 < 0)
            goto LABEL_63;
          v39 = v37 + 9;
LABEL_62:
          v39->i64[0] += v38;
LABEL_63:
          HGTextureManager::TextureEntry::log((HGTextureManager::TextureEntry *)v33, (const char *)2, v6);
          goto LABEL_64;
        }
        v51 = v37[10].i64[0];
        v39 = v37 + 10;
        v40 = v51;
      }
      v39->i64[0] = v40 - v38;
      *(_BYTE *)(v33 + 68) = *v21;
      goto LABEL_62;
    }
  }
  v42 = *v21;
  if (v31 == v30)
    v43 = 0;
  else
    v43 = 42 * ((v31 - v30) >> 3) - 1;
  if (v43 == v34)
  {
    std::deque<HGTextureManager::TextureEntry>::__add_back_capacity((uint64_t)v10[5].i64);
    v30 = v10[5].i64[1];
    v34 = v10[7].i64[1] + v10[7].i64[0];
  }
  v44 = *(_QWORD *)(v30 + 8 * (v34 / 0x2A)) + 96 * (v34 % 0x2A);
  *(_DWORD *)v44 = a2;
  *(_OWORD *)(v44 + 4) = 0u;
  *(_OWORD *)(v44 + 20) = 0u;
  *(_OWORD *)(v44 + 36) = 0u;
  *(_QWORD *)(v44 + 50) = 0;
  *(_DWORD *)(v44 + 64) = a3;
  *(_BYTE *)(v44 + 68) = v42;
  *(_BYTE *)(v44 + 69) = 0;
  *(_QWORD *)(v44 + 72) = 0xFFFFFFFFLL;
  *(_DWORD *)(v44 + 80) = 0;
  *(_QWORD *)(v44 + 88) = 0;
  ++*v12;
  v45 = (int64x2_t *)*((_QWORD *)this + 4);
  if (*(_BYTE *)(v33 + 56) == 2)
  {
    v46 = *(int *)(v33 + 76);
    v47 = (int64x2_t *)((char *)v45 + 152);
  }
  else
  {
    v46 = *(int *)(v33 + 76);
    if (*(_BYTE *)(v33 + 69))
    {
      v45[8] = vaddq_s64(v45[8], vdupq_n_s64(v46));
      if (*(char *)(v33 + 68) < 0)
        goto LABEL_55;
      v47 = v45 + 9;
    }
    else
    {
      v47 = v45 + 10;
    }
  }
  v47->i64[0] += v46;
LABEL_55:
  v50 = atomic_load(HGLogger::_enabled);
  if ((v50 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"id %d in unit %d (app-managed texture)\n", v7, v8, a3, *v21);
LABEL_64:
  GLState = HGGPURenderer::GetGLState(*((HGGPURenderer **)this + 1));
  HGGPURenderer::GetCurrentContext(*((HGGPURenderer **)this + 1), (uint64_t *)&v53);
  HGGLState::SetCurrentContextGuard::SetCurrentContextGuard(v54, GLState, &v53);
  PCSharedCount::PCSharedCount(&v53);
  glBindTexture(a2, a3);
  HGTextureManager::_dumpTextures(this, *((char **)this + 2));
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard(v54);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v55);
}

void sub_1B2AA9594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA95A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA95BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA95D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCSharedCount a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  PCSharedCount::PCSharedCount(&a11);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a15);
  _Unwind_Resume(a1);
}

void sub_1B2AA95EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  PCSharedCount v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.var0 = va_arg(va1, PC_Sp_counted_base *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard((PCSharedCount *)va);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va1);
  _Unwind_Resume(a1);
}

void sub_1B2AA9608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void HGTextureManager::framebufferTexture2D(HGTextureManager *this, GLenum a2, uint64_t a3)
{
  char *v6;
  const char *v7;
  char *v8;
  unsigned __int8 v9;
  int64x2_t *v10;
  uint64_t v11;
  int64x2_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unint64_t v24;
  int64x2_t *v25;
  uint64_t v26;
  int64x2_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64x2_t *v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t v43;
  uint64_t v44;
  uint64_t GLState;
  PCSharedCount v46;
  PCSharedCount v47[3];
  _BYTE v48[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v48, "texManager", 2, "framebufferTexture2D()");
  v9 = atomic_load(HGLogger::_enabled);
  if ((v9 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"binding buffer %d\n", v7, v8, a3);
  v10 = (int64x2_t *)*((_QWORD *)this + 4);
  v11 = v10[5].i64[1];
  v12 = v10;
  if (v10[6].i64[0] != v11)
  {
    v13 = v10[7].u64[0];
    v14 = (_QWORD *)(v11 + 8 * (v13 / 0x2A));
    v15 = *v14 + 96 * (v13 % 0x2A);
    v16 = v10[7].i64[1] + v13;
    v17 = v16 / 0x2A;
    v18 = *(_QWORD *)(v11 + 8 * (v16 / 0x2A));
    v19 = v16 % 0x2A;
    v20 = v18 + 96 * v19;
    if (v15 != v20)
    {
      while (*(_BYTE *)(v15 + 68) != 99)
      {
        v15 += 96;
        if (v15 - *v14 == 4032)
        {
          v21 = v14[1];
          ++v14;
          v15 = v21;
        }
        if (v15 == v20)
        {
          v15 = v20;
          break;
        }
      }
    }
    v22 = *(_QWORD *)(v11 + 8 * v17) + 96 * v19;
    v12 = (int64x2_t *)*((_QWORD *)this + 4);
    if (v15 != v22)
    {
      v23 = atomic_load(HGLogger::_enabled);
      if ((v23 & 1) != 0)
        HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"  (...unbinding buffer %d from unit %d)\n", v7, v8, *(unsigned int *)(v15 + 64), 99);
      v12 = (int64x2_t *)*((_QWORD *)this + 4);
      if (*(_BYTE *)(v15 + 56) == 2)
      {
        v24 = *(int *)(v15 + 76);
        v25 = (int64x2_t *)((char *)v12 + 152);
        v26 = v12[9].i64[1];
        goto LABEL_23;
      }
      v24 = *(int *)(v15 + 76);
      if (!*(_BYTE *)(v15 + 69))
      {
        v25 = v12 + 10;
        v26 = v12[10].i64[0];
LABEL_23:
        v28 = v26 - v24;
        v25->i64[0] = v28;
        *(_BYTE *)(v15 + 68) = -1;
        v25->i64[0] = v28 + v24;
        if (!(_DWORD)a3)
          goto LABEL_42;
        goto LABEL_24;
      }
      v27 = vdupq_n_s64(v24);
      v12[8] = vsubq_s64(v12[8], v27);
      if ((*(char *)(v15 + 68) & 0x80000000) == 0)
        v12[9].i64[0] -= v24;
      *(_BYTE *)(v15 + 68) = -1;
      v12[8] = vaddq_s64(v12[8], v27);
    }
  }
  if (!(_DWORD)a3)
    goto LABEL_42;
LABEL_24:
  v29 = v10[5].i64[1];
  if (v10[6].i64[0] != v29)
  {
    v30 = v10[7].u64[0];
    v31 = (_QWORD *)(v29 + 8 * (v30 / 0x2A));
    v32 = *v31 + 96 * (v30 % 0x2A);
    v33 = v10[7].i64[1] + v30;
    v34 = v33 / 0x2A;
    v35 = *(_QWORD *)(v29 + 8 * (v33 / 0x2A));
    v36 = v33 % 0x2A;
    v37 = v35 + 96 * v36;
    if (v32 != v37)
    {
      while (*(_DWORD *)(v32 + 64) != (_DWORD)a3)
      {
        v32 += 96;
        if (v32 - *v31 == 4032)
        {
          v38 = v31[1];
          ++v31;
          v32 = v38;
        }
        if (v32 == v37)
        {
          v32 = v37;
          break;
        }
      }
    }
    if (v32 != *(_QWORD *)(v29 + 8 * v34) + 96 * v36)
    {
      a2 = *(_DWORD *)v32;
      if (*(_BYTE *)(v32 + 56) == 2)
      {
        v39 = *(int *)(v32 + 76);
        v42 = v12[9].i64[1];
        v40 = (int64x2_t *)((char *)v12 + 152);
        v41 = v42;
      }
      else
      {
        v39 = *(int *)(v32 + 76);
        if (*(_BYTE *)(v32 + 69))
        {
          v43 = vdupq_n_s64(v39);
          v12[8] = vsubq_s64(v12[8], v43);
          if ((*(char *)(v32 + 68) & 0x80000000) == 0)
            v12[9].i64[0] -= v39;
          *(_BYTE *)(v32 + 68) = 99;
          v12[8] = vaddq_s64(v12[8], v43);
          v40 = v12 + 9;
          goto LABEL_41;
        }
        v44 = v12[10].i64[0];
        v40 = v12 + 10;
        v41 = v44;
      }
      v40->i64[0] = v41 - v39;
      *(_BYTE *)(v32 + 68) = 99;
LABEL_41:
      v40->i64[0] += v39;
      HGTextureManager::TextureEntry::log((HGTextureManager::TextureEntry *)v32, (const char *)2, v6);
    }
  }
LABEL_42:
  GLState = HGGPURenderer::GetGLState(*((HGGPURenderer **)this + 1));
  HGGPURenderer::GetCurrentContext(*((HGGPURenderer **)this + 1), (uint64_t *)&v46);
  HGGLState::SetCurrentContextGuard::SetCurrentContextGuard(v47, GLState, &v46);
  PCSharedCount::PCSharedCount(&v46);
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, a2, a3, 0);
  HGTextureManager::_dumpTextures(this, *((char **)this + 2));
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard(v47);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v48);
}

void sub_1B2AA99C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA99D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA99EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA9A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCSharedCount a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  PCSharedCount::PCSharedCount(&a11);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a15);
  _Unwind_Resume(a1);
}

void sub_1B2AA9A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  PCSharedCount v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.var0 = va_arg(va1, PC_Sp_counted_base *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard((PCSharedCount *)va);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va1);
  _Unwind_Resume(a1);
}

void sub_1B2AA9A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void HGTextureManager::texImage2D(HGTextureManager *this, const HGTextureManager::TextureInfo *a2)
{
  char *v4;
  const char *v5;
  char *v6;
  unsigned __int8 v7;
  int64x2_t *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64x2_t *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int64x2_t *v32;
  int64x2_t *v33;
  uint64_t GLState;
  PCSharedCount v35;
  PCSharedCount v36[3];
  _BYTE v37[16];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v37, "texManager", 2, "texImage2D()");
  v7 = atomic_load(HGLogger::_enabled);
  if ((v7 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"creating texture (%dx%d) in unit %d\n", v5, v6, *((unsigned int *)a2 + 1), *((unsigned int *)a2 + 2), *((unsigned int *)this + 6));
  v8 = (int64x2_t *)*((_QWORD *)this + 4);
  v9 = v8[5].i64[1];
  if (v8[6].i64[0] != v9)
  {
    v10 = v8[7].u64[0];
    v11 = (_QWORD *)(v9 + 8 * (v10 / 0x2A));
    v12 = *v11 + 96 * (v10 % 0x2A);
    v13 = v8[7].i64[1] + v10;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(v9 + 8 * (v13 / 0x2A));
    v16 = v13 % 0x2A;
    v17 = v15 + 96 * v16;
    if (v12 != v17)
    {
      while (*((_DWORD *)this + 6) != *(char *)(v12 + 68))
      {
        v12 += 96;
        if (v12 - *v11 == 4032)
        {
          v18 = v11[1];
          ++v11;
          v12 = v18;
        }
        if (v12 == v17)
        {
          v12 = v17;
          break;
        }
      }
    }
    if (v12 != *(_QWORD *)(v9 + 8 * v14) + 96 * v16)
    {
      if (*(_BYTE *)(v12 + 56) == 2)
      {
        v19 = *(int *)(v12 + 76);
        v20 = (int64x2_t *)((char *)v8 + 152);
      }
      else
      {
        v19 = *(int *)(v12 + 76);
        if (*(_BYTE *)(v12 + 69))
        {
          v8[8] = vsubq_s64(v8[8], vdupq_n_s64(v19));
          if (*(char *)(v12 + 68) < 0)
            goto LABEL_19;
          v20 = v8 + 9;
        }
        else
        {
          v20 = v8 + 10;
        }
      }
      v20->i64[0] -= v19;
LABEL_19:
      v22 = *((_OWORD *)a2 + 1);
      v21 = *((_OWORD *)a2 + 2);
      v23 = *(_OWORD *)((char *)a2 + 42);
      *(_OWORD *)v12 = *(_OWORD *)a2;
      *(_OWORD *)(v12 + 16) = v22;
      *(_OWORD *)(v12 + 42) = v23;
      *(_OWORD *)(v12 + 32) = v21;
      v25 = *(_DWORD *)(v12 + 4);
      v24 = *(_DWORD *)(v12 + 8);
      v26 = HGFormatUtils::GLFormatToByteSize((HGFormatUtils *)*(unsigned int *)(v12 + 16), (const char *)*(unsigned int *)(v12 + 20), v4);
      v28 = v25 + 127;
      if (v25 < -127)
        v28 = v25 + 254;
      v29 = v28 >> 7;
      if (v24 <= 128)
        v30 = 128;
      else
        v30 = v24;
      LODWORD(v31) = (v29 * v30 * v26) << 7;
      *(_DWORD *)(v12 + 76) = v31;
      v32 = (int64x2_t *)*((_QWORD *)this + 4);
      if (*(_BYTE *)(v12 + 56) == 2)
      {
        v31 = (int)v31;
        v33 = (int64x2_t *)((char *)v32 + 152);
      }
      else
      {
        v31 = (int)v31;
        if (*(_BYTE *)(v12 + 69))
        {
          v32[8] = vaddq_s64(v32[8], vdupq_n_s64((int)v31));
          if (*(char *)(v12 + 68) < 0)
          {
LABEL_31:
            HGTextureManager::TextureEntry::log((HGTextureManager::TextureEntry *)v12, (const char *)2, v27);
            goto LABEL_32;
          }
          v33 = v32 + 9;
        }
        else
        {
          v33 = v32 + 10;
        }
      }
      v33->i64[0] += v31;
      goto LABEL_31;
    }
  }
LABEL_32:
  GLState = HGGPURenderer::GetGLState(*((HGGPURenderer **)this + 1));
  HGGPURenderer::GetCurrentContext(*((HGGPURenderer **)this + 1), (uint64_t *)&v35);
  HGGLState::SetCurrentContextGuard::SetCurrentContextGuard(v36, GLState, &v35);
  PCSharedCount::PCSharedCount(&v35);
  glTexImage2D(*(_DWORD *)a2, 0, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 2), 0, *((_DWORD *)a2 + 4), *((_DWORD *)a2 + 5), *((const GLvoid **)a2 + 3));
  HGTextureManager::_dumpTextures(this, *((char **)this + 2));
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard(v36);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v37);
}

void sub_1B2AA9D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA9D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AA9D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCSharedCount a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  PCSharedCount::PCSharedCount(&a13);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a17);
  _Unwind_Resume(a1);
}

void sub_1B2AA9D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  PCSharedCount v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7.var0 = va_arg(va1, PC_Sp_counted_base *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  HGGLState::SetCurrentContextGuard::~SetCurrentContextGuard((PCSharedCount *)va);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va1);
  _Unwind_Resume(a1);
}

void sub_1B2AA9D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void HGTextureManager::texImage2D(HGTextureManager *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, const void *a10)
{
  _DWORD v10[6];
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;

  v10[0] = a2;
  v10[1] = a5;
  v10[2] = a6;
  v10[3] = a4;
  v10[4] = a8;
  v10[5] = a9;
  v13 = 0;
  v14 = 0;
  v11 = a10;
  v12 = 0;
  v15 = 0;
  HGTextureManager::texImage2D(this, (const HGTextureManager::TextureInfo *)v10);
}

void HGTextureManager::sizeHint(HGTextureManager *this, HGGLTexture *a2, BOOL a3, const char *a4, char *a5)
{
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  int64x2_t *v29;
  int64x2_t *v30;

  v7 = atomic_load(HGLogger::_enabled);
  if ((v7 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)2, (HGLogger *)"size hint: texture %lu\n", a4, a5, *((_QWORD *)a2 + 21));
  v8 = (_QWORD *)*((_QWORD *)this + 4);
  v9 = v8[11];
  if (v8[12] != v9)
  {
    v10 = v8[14];
    v11 = (_QWORD *)(v9 + 8 * (v10 / 0x2A));
    v12 = *v11 + 96 * (v10 % 0x2A);
    v13 = v8[15] + v10;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(v9 + 8 * (v13 / 0x2A));
    v16 = v13 % 0x2A;
    v17 = v15 + 96 * v16;
    if (v12 != v17)
    {
      while (*(_DWORD *)(v12 + 64) != *((_DWORD *)a2 + 42))
      {
        v12 += 96;
        if (v12 - *v11 == 4032)
        {
          v18 = v11[1];
          ++v11;
          v12 = v18;
        }
        if (v12 == v17)
        {
          v12 = v17;
          break;
        }
      }
    }
    if (v12 != *(_QWORD *)(v9 + 8 * v14) + 96 * v16 && !*(_BYTE *)(v12 + 69))
    {
      v19 = 20;
      if (*(_BYTE *)(v12 + 56) == 2)
        v19 = 19;
      v8[v19] -= *(int *)(v12 + 76);
      *(int32x2_t *)(v12 + 4) = vsub_s32(*(int32x2_t *)((char *)a2 + 28), *(int32x2_t *)((char *)a2 + 20));
      *(_DWORD *)(v12 + 16) = HGFormatUtils::toGLFormat(*((_DWORD *)a2 + 4));
      *(_DWORD *)(v12 + 20) = HGFormatUtils::toGLType(*((_DWORD *)a2 + 4));
      *(_DWORD *)(v12 + 12) = HGFormatUtils::toGLInternalFormat(*((_DWORD *)a2 + 4));
      v21 = *(_DWORD *)(v12 + 4);
      v22 = *(_DWORD *)(v12 + 8);
      v24 = v21 + 127;
      v23 = v21 < -127;
      v25 = v21 + 254;
      if (!v23)
        v25 = v24;
      v26 = v25 >> 7;
      if (v22 <= 128)
        v22 = 128;
      LODWORD(v28) = (v26
                    * v22
                    * HGFormatUtils::GLFormatToByteSize((HGFormatUtils *)*(unsigned int *)(v12 + 16), (const char *)*(unsigned int *)(v12 + 20), v20)) << 7;
      *(_DWORD *)(v12 + 76) = v28;
      v29 = (int64x2_t *)*((_QWORD *)this + 4);
      if (*(_BYTE *)(v12 + 56) == 2)
      {
        v28 = (int)v28;
        v30 = (int64x2_t *)((char *)v29 + 152);
      }
      else
      {
        v28 = (int)v28;
        if (*(_BYTE *)(v12 + 69))
        {
          v29[8] = vaddq_s64(v29[8], vdupq_n_s64((int)v28));
          if (*(char *)(v12 + 68) < 0)
          {
LABEL_26:
            HGTextureManager::TextureEntry::log((HGTextureManager::TextureEntry *)v12, (const char *)2, v27);
            goto LABEL_27;
          }
          v30 = v29 + 9;
        }
        else
        {
          v30 = v29 + 10;
        }
      }
      v30->i64[0] += v28;
      goto LABEL_26;
    }
  }
LABEL_27:
  HGTextureManager::_dumpTextures(this, *((char **)this + 2));
}

uint64_t HGTextureManager::_getFreeTotalTextureCount(HGTextureManager *this, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;

  {
    v12 = (_QWORD *)operator new();
    v12[1] = 0;
    v3 = (uint64_t)(v12 + 1);
    v12[2] = 0;
    *v12 = v12 + 1;
    goto LABEL_17;
  }
  if (!v4)
    goto LABEL_17;
  do
  {
    v6 = v4[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = (uint64_t)v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v3 || *(_QWORD *)(v5 + 32) > a2)
  {
LABEL_17:
    v9 = *(_QWORD **)(v3 + 40);
    if (!v9)
      goto LABEL_15;
    goto LABEL_14;
  }
  v9 = *(_QWORD **)(v5 + 40);
  if (v9)
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 16))(v9);
LABEL_15:
  v10 = v9[15];
  (*(void (**)(_QWORD *))(*v9 + 24))(v9);
  return v10;
}

uint64_t HGTextureManager::_getFreeTotalTextureCount(HGTextureManager *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;

  {
    v9 = (_QWORD *)operator new();
    v9[1] = 0;
    v9[2] = 0;
    *v9 = v9 + 1;
    goto LABEL_14;
  }
  {
LABEL_14:
    v3 = 0;
    goto LABEL_15;
  }
  v3 = 0;
  do
  {
    v4 = (_QWORD *)v1[5];
    if (v4)
      (*(void (**)(_QWORD))(*v4 + 16))(v1[5]);
    v5 = v4[15];
    (*(void (**)(_QWORD *))(*v4 + 24))(v4);
    v6 = (_QWORD *)v1[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v1[2];
        v8 = *v7 == (_QWORD)v1;
        v1 = v7;
      }
      while (!v8);
    }
    v3 += v5;
    v1 = v7;
  }
  while (v7 != (_QWORD *)v2);
LABEL_15:
  return v3;
}

uint64_t HGTextureManager::_getQueuedTotalTextureCount(HGTextureManager *this, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;

  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v12 = (_QWORD *)operator new();
    v12[1] = 0;
    v3 = (uint64_t)(v12 + 1);
    v12[2] = 0;
    *v12 = v12 + 1;
    qword_1EF0759D0 = (uint64_t)v12;
    goto LABEL_17;
  }
  v3 = qword_1EF0759D0 + 8;
  v4 = *(_QWORD **)(qword_1EF0759D0 + 8);
  if (!v4)
    goto LABEL_17;
  v5 = qword_1EF0759D0 + 8;
  do
  {
    v6 = v4[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = (uint64_t)v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v3 || *(_QWORD *)(v5 + 32) > a2)
  {
LABEL_17:
    v9 = *(_QWORD **)(v3 + 40);
    if (!v9)
      goto LABEL_15;
    goto LABEL_14;
  }
  v9 = *(_QWORD **)(v5 + 40);
  if (v9)
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 16))(v9);
LABEL_15:
  v10 = v9[15];
  (*(void (**)(_QWORD *))(*v9 + 24))(v9);
  pthread_mutex_unlock(&_MergedGlobals);
  return v10;
}

uint64_t HGTextureManager::_getQueuedTotalTextureCount(HGTextureManager *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;

  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v9 = (_QWORD *)operator new();
    v9[1] = 0;
    v9[2] = 0;
    *v9 = v9 + 1;
    qword_1EF0759D0 = (uint64_t)v9;
    goto LABEL_14;
  }
  v1 = *(_QWORD **)qword_1EF0759D0;
  v2 = qword_1EF0759D0 + 8;
  if (*(_QWORD *)qword_1EF0759D0 == qword_1EF0759D0 + 8)
  {
LABEL_14:
    v3 = 0;
    goto LABEL_15;
  }
  v3 = 0;
  do
  {
    v4 = (_QWORD *)v1[5];
    if (v4)
      (*(void (**)(_QWORD))(*v4 + 16))(v1[5]);
    v5 = v4[15];
    (*(void (**)(_QWORD *))(*v4 + 24))(v4);
    v6 = (_QWORD *)v1[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v1[2];
        v8 = *v7 == (_QWORD)v1;
        v1 = v7;
      }
      while (!v8);
    }
    v3 += v5;
    v1 = v7;
  }
  while (v7 != (_QWORD *)v2);
LABEL_15:
  pthread_mutex_unlock(&_MergedGlobals);
  return v3;
}

uint64_t HGTextureManager::_getFreeTotalTextureUsage@<X0>(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;

  {
    v20 = (_QWORD *)operator new();
    v20[1] = 0;
    v5 = (uint64_t)(v20 + 1);
    v20[2] = 0;
    *v20 = v20 + 1;
    goto LABEL_17;
  }
  if (!v6)
    goto LABEL_17;
  do
  {
    v8 = v6[4];
    v9 = v8 >= a1;
    if (v8 >= a1)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (uint64_t)v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v5 || *(_QWORD *)(v7 + 32) > a1)
  {
LABEL_17:
    v11 = *(_QWORD **)(v5 + 40);
    if (!v11)
      goto LABEL_15;
    goto LABEL_14;
  }
  v11 = *(_QWORD **)(v7 + 40);
  if (v11)
LABEL_14:
    (*(void (**)(_QWORD *))(*v11 + 16))(v11);
LABEL_15:
  v12 = v11[16];
  v13 = v11[17];
  v14 = v11[18];
  v15 = v11[19];
  v16 = v11[20];
  v17 = v11[21];
  v18 = v11[22];
  (*(void (**)(_QWORD *))(*v11 + 24))(v11);
  *a2 = v12;
  a2[1] = v13;
  a2[2] = v14;
  a2[3] = v15;
  a2[4] = v16;
  a2[5] = v17;
  a2[6] = v18;
  return result;
}

uint64_t HGTextureManager::_getFreeTotalTextureUsage@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  {
    v21 = (_QWORD *)operator new();
    v21[1] = 0;
    v21[2] = 0;
    *v21 = v21 + 1;
    goto LABEL_14;
  }
  {
LABEL_14:
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    goto LABEL_15;
  }
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v25 = v8;
    v26 = v7;
    v27 = v6;
    v28 = v5;
    v29 = v4;
    v30 = v3;
    v10 = (_QWORD *)v2[5];
    if (v10)
      (*(void (**)(_QWORD))(*v10 + 16))(v2[5]);
    v12 = v10[16];
    v11 = v10[17];
    v14 = v10[18];
    v13 = v10[19];
    v16 = v10[20];
    v15 = v10[21];
    v17 = v10[22];
    (*(void (**)(_QWORD *))(*v10 + 24))(v10);
    v18 = (_QWORD *)v2[1];
    if (v18)
    {
      do
      {
        v19 = v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = (_QWORD *)v2[2];
        v20 = *v19 == (_QWORD)v2;
        v2 = v19;
      }
      while (!v20);
    }
    v9 += v12;
    v8 = v11 + v25;
    v7 = v14 + v26;
    v6 = v13 + v27;
    v5 = v16 + v28;
    v4 = v15 + v29;
    v3 = v17 + v30;
    v2 = v19;
  }
  while (v19 != (_QWORD *)v24);
LABEL_15:
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  a1[3] = v6;
  a1[4] = v5;
  a1[5] = v4;
  a1[6] = v3;
  return result;
}

uint64_t HGTextureManager::_getQueuedTotalTextureUsage@<X0>(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;

  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v20 = (_QWORD *)operator new();
    v20[1] = 0;
    v5 = (uint64_t)(v20 + 1);
    v20[2] = 0;
    *v20 = v20 + 1;
    qword_1EF0759D0 = (uint64_t)v20;
    goto LABEL_17;
  }
  v5 = qword_1EF0759D0 + 8;
  v6 = *(_QWORD **)(qword_1EF0759D0 + 8);
  if (!v6)
    goto LABEL_17;
  v7 = qword_1EF0759D0 + 8;
  do
  {
    v8 = v6[4];
    v9 = v8 >= a1;
    if (v8 >= a1)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (uint64_t)v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v5 || *(_QWORD *)(v7 + 32) > a1)
  {
LABEL_17:
    v11 = *(_QWORD **)(v5 + 40);
    if (!v11)
      goto LABEL_15;
    goto LABEL_14;
  }
  v11 = *(_QWORD **)(v7 + 40);
  if (v11)
LABEL_14:
    (*(void (**)(_QWORD *))(*v11 + 16))(v11);
LABEL_15:
  v12 = v11[2];
  v13 = v11[3];
  v14 = v11[4];
  v15 = v11[5];
  v16 = v11[6];
  v17 = v11[7];
  v18 = v11[8];
  (*(void (**)(_QWORD *))(*v11 + 24))(v11);
  result = pthread_mutex_unlock(&_MergedGlobals);
  *a2 = v12;
  a2[1] = v13;
  a2[2] = v14;
  a2[3] = v15;
  a2[4] = v16;
  a2[5] = v17;
  a2[6] = v18;
  return result;
}

uint64_t HGTextureManager::_getQueuedTotalTextureUsage@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  pthread_mutex_lock(&_MergedGlobals);
  if (!qword_1EF0759D0)
  {
    v21 = (_QWORD *)operator new();
    v21[1] = 0;
    v21[2] = 0;
    *v21 = v21 + 1;
    qword_1EF0759D0 = (uint64_t)v21;
    goto LABEL_14;
  }
  v2 = *(_QWORD **)qword_1EF0759D0;
  v24 = qword_1EF0759D0 + 8;
  if (*(_QWORD *)qword_1EF0759D0 == qword_1EF0759D0 + 8)
  {
LABEL_14:
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    goto LABEL_15;
  }
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v25 = v8;
    v26 = v7;
    v27 = v6;
    v28 = v5;
    v29 = v4;
    v30 = v3;
    v10 = (_QWORD *)v2[5];
    if (v10)
      (*(void (**)(_QWORD))(*v10 + 16))(v2[5]);
    v12 = v10[2];
    v11 = v10[3];
    v14 = v10[4];
    v13 = v10[5];
    v16 = v10[6];
    v15 = v10[7];
    v17 = v10[8];
    (*(void (**)(_QWORD *))(*v10 + 24))(v10);
    v18 = (_QWORD *)v2[1];
    if (v18)
    {
      do
      {
        v19 = v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = (_QWORD *)v2[2];
        v20 = *v19 == (_QWORD)v2;
        v2 = v19;
      }
      while (!v20);
    }
    v9 += v12;
    v8 = v11 + v25;
    v7 = v14 + v26;
    v6 = v13 + v27;
    v5 = v16 + v28;
    v4 = v15 + v29;
    v3 = v17 + v30;
    v2 = v19;
  }
  while (v19 != (_QWORD *)v24);
LABEL_15:
  result = pthread_mutex_unlock(&_MergedGlobals);
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  a1[3] = v6;
  a1[4] = v5;
  a1[5] = v4;
  a1[6] = v3;
  return result;
}

uint64_t HGTextureManager::_poolWaitForQueuedTexture(HGTextureManager *this)
{
  _QWORD v3[7];

  HGTextureManager::_getQueuedTotalTextureUsage(*((_QWORD *)this + 2), v3);
  if ((float)((float)*((unint64_t *)this + 18) * 0.8) >= (float)v3[1])
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 20) + 56))(*((_QWORD *)this + 20));
  else
    return 1;
}

void HGTextureManager::_dumpMaxUsage(HGTextureManager *this, unint64_t a2)
{
  unsigned __int8 v4;
  const char *v5;
  char *v6;
  int v7;
  unsigned __int8 v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t *v17;
  unsigned __int8 v18;
  _QWORD *v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  _BYTE v27[16];

  v4 = atomic_load(HGLogger::_enabled);
  if ((v4 & 1) == 0 || (int)HGLogger::getLevel((HGLogger *)"texManager", (const char *)*((unsigned int *)this + 1)) < 1)
    return;
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v27, "texManager", 1, "------ HGTextureManager::_dumpMaxUsage(shareGroup) ------");
  v7 = *(_DWORD *)this;
  v8 = atomic_load(HGLogger::_enabled);
  if (v7)
  {
    if ((v8 & 1) != 0)
      HGLogger::log((HGLogger *)"texManager", (const char *)1, (HGLogger *)"  tex recycling : %d re-used / %d new  (%d%% re-usage)\n", v5, v6, *((unsigned int *)this + 1), *(unsigned int *)this, (int)(float)((float)((float)*((unsigned int *)this + 1) * 100.0) / (float)*(unsigned int *)this));
  }
  else if ((v8 & 1) != 0)
  {
    HGLogger::log((HGLogger *)"texManager", (const char *)1, (HGLogger *)"  tex recycling : %d re-used / %d new\n", v5, v6, *((unsigned int *)this + 1), *(unsigned int *)this);
  }
  pthread_mutex_lock(&stru_1ED4D8EB8);
  if (qword_1EF0759D8)
  {
    v11 = qword_1EF0759D8 + 8;
    v12 = *(_QWORD **)(qword_1EF0759D8 + 8);
    if (v12)
    {
      v13 = qword_1EF0759D8 + 8;
      do
      {
        v14 = v12[4];
        v15 = v14 >= a2;
        if (v14 >= a2)
          v16 = v12;
        else
          v16 = v12 + 1;
        if (v15)
          v13 = (uint64_t)v12;
        v12 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v13 != v11 && *(_QWORD *)(v13 + 32) <= a2)
      {
        v17 = *(unint64_t **)(v13 + 40);
        v18 = atomic_load(HGLogger::_enabled);
        if ((v18 & 1) == 0)
          goto LABEL_25;
        goto LABEL_24;
      }
    }
  }
  else
  {
    v19 = (_QWORD *)operator new();
    v19[1] = 0;
    v11 = (uint64_t)(v19 + 1);
    v19[2] = 0;
    *v19 = v19 + 1;
    qword_1EF0759D8 = (uint64_t)v19;
  }
  v17 = *(unint64_t **)(v11 + 40);
  v20 = atomic_load(HGLogger::_enabled);
  if ((v20 & 1) != 0)
LABEL_24:
    HGLogger::log((HGLogger *)"texManager", (const char *)1, (HGLogger *)"  max total   : %3.1f mb\n", v9, v10, (float)((float)*v17 * 0.00000095367));
LABEL_25:
  v21 = atomic_load(HGLogger::_enabled);
  if ((v21 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)1, (HGLogger *)"  max used    : %3.1f mb\n", v9, v10, (float)((float)v17[1] * 0.00000095367));
  v22 = atomic_load(HGLogger::_enabled);
  if ((v22 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)1, (HGLogger *)"  max active  : %3.1f mb\n", v9, v10, (float)((float)v17[2] * 0.00000095367));
  v23 = atomic_load(HGLogger::_enabled);
  if ((v23 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)1, (HGLogger *)"  max shared  : %3.1f mb\n", v9, v10, (float)((float)v17[3] * 0.00000095367));
  v24 = atomic_load(HGLogger::_enabled);
  if ((v24 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)1, (HGLogger *)"  max unowned : %3.1f mb\n", v9, v10, (float)((float)v17[4] * 0.00000095367));
  v25 = atomic_load(HGLogger::_enabled);
  if ((v25 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)1, (HGLogger *)"  max free    : %3.1f mb\n", v9, v10, (float)((float)v17[5] * 0.00000095367));
  v26 = atomic_load(HGLogger::_enabled);
  if ((v26 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)1, (HGLogger *)"  max queued  : %3.1f mb\n", v9, v10, (float)((float)v17[6] * 0.00000095367));
  pthread_mutex_unlock(&stru_1ED4D8EB8);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v27);
}

void sub_1B2AAAE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AAAE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AAAE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void HGTextureManager::_printTextureList(HGTextureManager *this, char *a2, void *a3, HGTextureManager::TextureUsage *a4)
{
  HGTextureManager *v7;
  const char *v8;
  char *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  HGTextureManager *v12;
  const char *v13;
  char *v14;
  unsigned __int8 v15;
  HGTextureManager *v16;
  const char *v17;
  char *v18;
  unsigned __int8 v19;
  const char *v20;
  char *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  const char *v25;
  char *v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  unsigned __int8 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  int64x2_t v44[3];
  uint64_t v45;
  _BYTE v46[16];

  v7 = HGTraceGuard::HGTraceGuard((HGTraceGuard *)v46, "texManager", (int)a2, "HGTextureManager::_printTextureList()");
  v10 = atomic_load(HGLogger::_enabled);
  if (a3)
  {
    if ((v10 & 1) != 0)
      HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"dumping ALL textures from share group %p\n", v8, v9, a3);
  }
  else if ((v10 & 1) != 0)
  {
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"dumping ALL textures from ALL share groups\n", v8, v9);
  }
  v11 = atomic_load(HGLogger::_enabled);
  if ((v11 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"\n", v8, v9);
  v45 = 0;
  memset(v44, 0, sizeof(v44));
  v12 = (HGTextureManager *)HGTextureManager::_printUsedTextures(v7, a2, a3, (HGTextureManager::TextureUsage *)v44, v9);
  v15 = atomic_load(HGLogger::_enabled);
  if ((v15 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"\n", v13, v14);
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  v16 = (HGTextureManager *)HGTextureManager::_printFreeTextures(v12, a2, (unint64_t)a3, (HGTextureManager::TextureUsage *)&v40, v14);
  v19 = atomic_load(HGLogger::_enabled);
  if ((v19 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"\n", v17, v18);
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  HGTextureManager::_printQueuedTextures(v16, a2, (unint64_t)a3, (HGTextureManager::TextureUsage *)&v36, v18);
  v22 = atomic_load(HGLogger::_enabled);
  if ((v22 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"\n", v20, v21);
  v23 = atomic_load(HGLogger::_enabled);
  if ((v23 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"ALL TEXTURES :\n", v20, v21);
  HGLogger::indent(1);
  v24 = atomic_load(HGLogger::_enabled);
  if ((v24 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"used : %4.1f mb (active : %4.1f mb)  |  shared : %4.1f mb  |  unowned : %4.1f mb  |  (total : %4.1f mb)\n", *((const char **)&v37 + 1), (char *)v38, (float)((float)(unint64_t)(*((_QWORD *)&v40 + 1) + v44[0].i64[1] + *((_QWORD *)&v36 + 1)) * 0.00000095367), (float)((float)(unint64_t)(v41 + v44[1].i64[0] + v37) * 0.00000095367), (float)((float)(unint64_t)(*((_QWORD *)&v41 + 1) + v44[1].i64[1] + *((_QWORD *)&v37 + 1)) * 0.00000095367), (float)((float)(unint64_t)(v42 + v44[2].i64[0] + v38) * 0.00000095367), (float)((float)(unint64_t)(v40 + v44[0].i64[0] + v36) * 0.00000095367));
  HGLogger::indent(0xFFFFFFFFLL);
  v27 = atomic_load(HGLogger::_enabled);
  if ((v27 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"\n", v25, v26);
  v28 = *((_QWORD *)&v40 + 1);
  v29 = *((_QWORD *)&v36 + 1);
  v30 = v40 + v44[0].i64[0] + v36;
  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  *((_OWORD *)a4 + 2) = 0u;
  *(_QWORD *)a4 = v30;
  v31 = *(int64x2_t *)((char *)&v44[1] + 8);
  v32 = *((_QWORD *)a4 + 5) + v28;
  *(int64x2_t *)((char *)a4 + 8) = vaddq_s64(*(int64x2_t *)((char *)a4 + 8), *(int64x2_t *)((char *)v44 + 8));
  *(int64x2_t *)((char *)a4 + 24) = vaddq_s64(*(int64x2_t *)((char *)a4 + 24), v31);
  *((_QWORD *)a4 + 5) = v32;
  *((_QWORD *)a4 + 6) = 0;
  *((_QWORD *)a4 + 6) = v29;
  HGTextureManager::TextureUsage::logSummary(a4, (char *)3, 1, v25, v26);
  v35 = atomic_load(HGLogger::_enabled);
  if ((v35 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"\n", v33, v34);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v46);
}

void sub_1B2AAB1BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1B2AAB1D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1B2AAB1E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1B2AAB1F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1B2AAB20C(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 64));
  _Unwind_Resume(a1);
}

uint64_t HGTextureManager::_printUsageSummary(HGTextureManager *this, const char *a2, void *a3, HGTextureManager::TextureUsage *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  char *v38;
  unsigned __int8 v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (a3)
  {
    {
        goto LABEL_4;
    }
    else
    {
      v24 = (_QWORD *)operator new();
      v7 = 0;
      v24[1] = 0;
      v24[2] = 0;
      *v24 = 0;
      v8 = v24[1];
      if (v8)
      {
LABEL_4:
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        do
        {
          if (*(void **)(*(_QWORD *)v7 + 16) == a3)
          {
            v14 = *(_QWORD **)(*(_QWORD *)v7 + 32);
            v13 += v14[16];
            v12 += v14[17];
            v11 += v14[18];
            v10 += v14[19];
            v9 += v14[20];
          }
          v7 += 8;
        }
        while (v7 != v8);
        goto LABEL_15;
      }
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
LABEL_15:
    HGTextureManager::_getFreeTotalTextureUsage((unint64_t)a3, &v43);
    HGTextureManager::_getQueuedTotalTextureUsage((unint64_t)a3, &v41);
    v25 = v44;
    v26 = *((_QWORD *)a4 + 1);
    v27 = v42;
    *(_QWORD *)a4 += v43 + v13 + v41;
    *((_QWORD *)a4 + 1) = v26 + v12;
    v28 = *((_QWORD *)a4 + 3) + v10;
    *((_QWORD *)a4 + 2) += v11;
    *((_QWORD *)a4 + 3) = v28;
    v29 = *((_QWORD *)a4 + 5) + v25;
    *((_QWORD *)a4 + 4) += v9;
    *((_QWORD *)a4 + 5) = v29;
    v30 = *((_QWORD *)a4 + 6) + v27;
    goto LABEL_19;
  }
  {
      goto LABEL_10;
  }
  else
  {
    v31 = (_QWORD *)operator new();
    v15 = 0;
    v31[1] = 0;
    v31[2] = 0;
    *v31 = 0;
    v16 = (uint64_t *)v31[1];
    if (v16)
    {
LABEL_10:
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      do
      {
        v22 = *v15++;
        v23 = *(_QWORD **)(v22 + 32);
        v21 += v23[16];
        v20 += v23[17];
        v19 += v23[18];
        v18 += v23[19];
        v17 += v23[20];
      }
      while (v15 != v16);
      goto LABEL_18;
    }
  }
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
LABEL_18:
  HGTextureManager::_getFreeTotalTextureUsage(&v43);
  HGTextureManager::_getQueuedTotalTextureUsage(&v41);
  v32 = v42;
  v33 = *((_QWORD *)a4 + 1);
  v34 = v44;
  *(_QWORD *)a4 += v43 + v21 + v41;
  *((_QWORD *)a4 + 1) = v33 + v20;
  v35 = *((_QWORD *)a4 + 3) + v18;
  *((_QWORD *)a4 + 2) += v19;
  *((_QWORD *)a4 + 3) = v35;
  v36 = *((_QWORD *)a4 + 5) + v34;
  *((_QWORD *)a4 + 4) += v17;
  *((_QWORD *)a4 + 5) = v36;
  v30 = *((_QWORD *)a4 + 6) + v32;
LABEL_19:
  *((_QWORD *)a4 + 6) = v30;
  HGLogger::indent(1);
  v39 = atomic_load(HGLogger::_enabled);
  if ((v39 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"total : %4.1f mb  |  used : %4.1f mb  |  active : %4.1f mb  |  shared : %4.1f mb  |  unowned : %4.1f mb  |  free : %4.1f mb  |  queued : %4.1f mb\n", v37, v38, (float)((float)*(unint64_t *)a4 * 0.00000095367), (float)((float)*((unint64_t *)a4 + 1) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 2) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 3) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 4) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 5) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 6) * 0.00000095367));
  return HGLogger::indent(0xFFFFFFFFLL);
}

uint64_t HGTextureManager::_printUsedTextures(HGTextureManager *this, char *a2, void *a3, HGTextureManager::TextureUsage *a4, char *a5)
{
  unsigned __int8 v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  unsigned __int8 v21;
  const char *v22;
  char *v23;
  unsigned __int8 v24;
  uint64_t v26;
  HGTextureManager::TextureUsage *v27;

  v8 = atomic_load(HGLogger::_enabled);
  if ((v8 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"USED textures :\n", (const char *)a4, a5);
  if (a3)
  {
    {
    }
    else
    {
      v12 = (_QWORD *)operator new();
      v13 = 0;
      v12[1] = 0;
      v12[2] = 0;
      *v12 = 0;
    }
    v16 = (uint64_t *)v12[1];
    v26 = a2;
    v27 = a4;
    while (v13 != v16)
    {
      if (*(void **)(*v13 + 16) == a3)
      ++v13;
    }
  }
  else
  {
    {
      v26 = a2;
      v27 = a4;
      if (v14 == v15)
        goto LABEL_17;
    }
    else
    {
      v17 = (_QWORD *)operator new();
      v14 = 0;
      v17[1] = 0;
      v17[2] = 0;
      *v17 = 0;
      v15 = (uint64_t *)v17[1];
      v26 = a2;
      v27 = a4;
      if (!v15)
        goto LABEL_17;
    }
    do
    {
      v18 = *v14++;
    }
    while (v14 != v15);
  }
LABEL_17:
  v21 = atomic_load(HGLogger::_enabled);
  if ((v21 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"all pools : \n", v19, v20);
  HGLogger::indent(1);
  v24 = atomic_load(HGLogger::_enabled);
  if ((v24 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"used : %4.1f mb (active : %4.1f mb)  |  shared : %4.1f mb  |  unowned : %4.1f mb  |  (total : %4.1f mb)\n", v22, v23, (float)((float)*((unint64_t *)a4 + 1) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 2) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 3) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 4) * 0.00000095367), (float)((float)*(unint64_t *)a4 * 0.00000095367));
  return HGLogger::indent(0xFFFFFFFFLL);
}

uint64_t HGTextureManager::_printFreeTextures(HGTextureManager *this, char *a2, unint64_t a3, HGTextureManager::TextureUsage *a4, char *a5)
{
  unsigned __int8 v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  HGTextureManager::TextureUsage *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t result;
  const char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  unsigned __int8 v30;
  const char *v31;
  char *v32;
  unsigned __int8 v33;
  _QWORD v34[2];
  _QWORD v35[2];
  uint64_t v36;
  HGTextureManager::TextureUsage *v37;

  v8 = atomic_load(HGLogger::_enabled);
  if ((v8 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"FREE textures :\n", (const char *)a4, a5);
  LODWORD(v34[0]) = (_DWORD)a2;
  v34[1] = a4;
  if (a3)
  {
    {
      if (v14)
      {
        do
        {
          v16 = v14[4];
          v17 = v16 >= a3;
          if (v16 >= a3)
            v18 = v14;
          else
            v18 = v14 + 1;
          if (v17)
            v15 = (uint64_t)v14;
          v14 = (_QWORD *)*v18;
        }
        while (*v18);
        if (v15 != v13 && *(_QWORD *)(v15 + 32) <= a3)
        {
          v19 = *(HGTextureManager::TextureUsage **)(v15 + 40);
          v36 = *(_QWORD *)(v15 + 32);
          v37 = v19;
          if (!v19)
            goto LABEL_18;
          goto LABEL_17;
        }
      }
    }
    else
    {
      v12 = (_QWORD *)operator new();
      v12[1] = 0;
      v13 = (uint64_t)(v12 + 1);
      v12[2] = 0;
      *v12 = v12 + 1;
    }
    v19 = *(HGTextureManager::TextureUsage **)(v13 + 40);
    v36 = v12[5];
    v37 = v19;
    if (!v19)
    {
LABEL_18:
      if (v19)
        (*(void (**)(HGTextureManager::TextureUsage *))(*(_QWORD *)v19 + 24))(v19);
      goto LABEL_27;
    }
LABEL_17:
    (*(void (**)(HGTextureManager::TextureUsage *))(*(_QWORD *)v19 + 16))(v19);
    goto LABEL_18;
  }
  {
    v36 = v34[0];
    v37 = a4;
    {
      do
      {
        v26 = v20[5];
        v35[0] = v20[4];
        v35[1] = v26;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
        v27 = (_QWORD *)v20[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v20[2];
            v29 = *v28 == (_QWORD)v20;
            v20 = v28;
          }
          while (!v29);
        }
        v20 = v28;
      }
      while (v28 != (_QWORD *)v21);
    }
  }
  else
  {
    v22 = (_QWORD *)operator new();
    v22[1] = 0;
    v22[2] = 0;
    *v22 = v22 + 1;
    v36 = v34[0];
    v37 = a4;
  }
LABEL_27:
  if (!a3)
  {
    v30 = atomic_load(HGLogger::_enabled);
    if ((v30 & 1) != 0)
      HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"all pools : \n", v24, v25);
    HGLogger::indent(1);
    v33 = atomic_load(HGLogger::_enabled);
    if ((v33 & 1) != 0)
      HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"used : %4.1f mb (active : %4.1f mb)  |  shared : %4.1f mb  |  unowned : %4.1f mb  |  (total : %4.1f mb)\n", v31, v32, (float)((float)*((unint64_t *)a4 + 1) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 2) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 3) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 4) * 0.00000095367), (float)((float)*(unint64_t *)a4 * 0.00000095367));
    return HGLogger::indent(0xFFFFFFFFLL);
  }
  return result;
}

void sub_1B2AABA70(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t HGTextureManager::_printQueuedTextures(HGTextureManager *this, char *a2, unint64_t a3, HGTextureManager::TextureUsage *a4, char *a5)
{
  unsigned __int8 v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  HGTextureManager::TextureUsage *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t result;
  const char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  unsigned __int8 v30;
  const char *v31;
  char *v32;
  unsigned __int8 v33;
  _QWORD v34[2];
  _QWORD v35[2];
  uint64_t v36;
  HGTextureManager::TextureUsage *v37;

  v8 = atomic_load(HGLogger::_enabled);
  if ((v8 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"QUEUED for deletion :\n", (const char *)a4, a5);
  LODWORD(v34[0]) = (_DWORD)a2;
  v34[1] = a4;
  pthread_mutex_lock(&_MergedGlobals);
  if (a3)
  {
    v12 = (_QWORD *)qword_1EF0759D0;
    if (qword_1EF0759D0)
    {
      v13 = qword_1EF0759D0 + 8;
      v14 = *(_QWORD **)(qword_1EF0759D0 + 8);
      if (v14)
      {
        v15 = qword_1EF0759D0 + 8;
        do
        {
          v16 = v14[4];
          v17 = v16 >= a3;
          if (v16 >= a3)
            v18 = v14;
          else
            v18 = v14 + 1;
          if (v17)
            v15 = (uint64_t)v14;
          v14 = (_QWORD *)*v18;
        }
        while (*v18);
        if (v15 != v13 && *(_QWORD *)(v15 + 32) <= a3)
        {
          v19 = *(HGTextureManager::TextureUsage **)(v15 + 40);
          v36 = *(_QWORD *)(v15 + 32);
          v37 = v19;
          if (!v19)
            goto LABEL_18;
          goto LABEL_17;
        }
      }
    }
    else
    {
      v12 = (_QWORD *)operator new();
      v12[1] = 0;
      v13 = (uint64_t)(v12 + 1);
      v12[2] = 0;
      *v12 = v12 + 1;
      qword_1EF0759D0 = (uint64_t)v12;
    }
    v19 = *(HGTextureManager::TextureUsage **)(v13 + 40);
    v36 = v12[5];
    v37 = v19;
    if (!v19)
    {
LABEL_18:
      if (v19)
        (*(void (**)(HGTextureManager::TextureUsage *))(*(_QWORD *)v19 + 24))(v19);
      goto LABEL_27;
    }
LABEL_17:
    (*(void (**)(HGTextureManager::TextureUsage *))(*(_QWORD *)v19 + 16))(v19);
    goto LABEL_18;
  }
  if (qword_1EF0759D0)
  {
    v20 = *(_QWORD **)qword_1EF0759D0;
    v21 = qword_1EF0759D0 + 8;
    v36 = v34[0];
    v37 = a4;
    if (v20 != (_QWORD *)(qword_1EF0759D0 + 8))
    {
      do
      {
        v26 = v20[5];
        v35[0] = v20[4];
        v35[1] = v26;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
        v27 = (_QWORD *)v20[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v20[2];
            v29 = *v28 == (_QWORD)v20;
            v20 = v28;
          }
          while (!v29);
        }
        v20 = v28;
      }
      while (v28 != (_QWORD *)v21);
    }
  }
  else
  {
    v22 = (_QWORD *)operator new();
    v22[1] = 0;
    v22[2] = 0;
    *v22 = v22 + 1;
    qword_1EF0759D0 = (uint64_t)v22;
    v36 = v34[0];
    v37 = a4;
  }
LABEL_27:
  result = pthread_mutex_unlock(&_MergedGlobals);
  if (!a3)
  {
    v30 = atomic_load(HGLogger::_enabled);
    if ((v30 & 1) != 0)
      HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"all pools : \n", v24, v25);
    HGLogger::indent(1);
    v33 = atomic_load(HGLogger::_enabled);
    if ((v33 & 1) != 0)
      HGLogger::log((HGLogger *)"texManager", a2, (HGLogger *)"used : %4.1f mb (active : %4.1f mb)  |  shared : %4.1f mb  |  unowned : %4.1f mb  |  (total : %4.1f mb)\n", v31, v32, (float)((float)*((unint64_t *)a4 + 1) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 2) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 3) * 0.00000095367), (float)((float)*((unint64_t *)a4 + 4) * 0.00000095367), (float)((float)*(unint64_t *)a4 * 0.00000095367));
    return HGLogger::indent(0xFFFFFFFFLL);
  }
  return result;
}

void sub_1B2AABDC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::FreeTexturesPrinter::operator()(unsigned int *a1, _QWORD *a2, uint64_t a3, const char *a4, char *a5)
{
  uint64_t v6;
  unsigned __int8 v7;
  const char *v8;
  char *v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  HGTextureManager::TextureEntry *v15;
  unint64_t v16;
  HGTextureManager::TextureEntry *v17;
  unsigned __int8 v18;
  int64x2_t *v19;
  uint64_t v20;
  int64x2_t v21;
  int64x2_t v22;

  v6 = a2[1];
  v7 = atomic_load(HGLogger::_enabled);
  if ((v7 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)*a1, (HGLogger *)"texture pool %p (group : %p) :\n", a4, a5, a2[1], *a2);
  HGLogger::indent(1);
  v8 = (const char *)*a1;
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
  v12 = *(_QWORD *)(v6 + 88);
  if (*(_QWORD *)(v6 + 96) != v12)
  {
    v13 = *(_QWORD *)(v6 + 112);
    v14 = (_QWORD *)(v12 + 8 * (v13 / 0x2A));
    v15 = (HGTextureManager::TextureEntry *)(*v14 + 96 * (v13 % 0x2A));
    v16 = *(_QWORD *)(v12 + 8 * ((*(_QWORD *)(v6 + 120) + v13) / 0x2A)) + 96 * ((*(_QWORD *)(v6 + 120) + v13) % 0x2A);
    while (v15 != (HGTextureManager::TextureEntry *)v16)
    {
      HGTextureManager::TextureEntry::log(v15, v8, v9);
      v15 = (HGTextureManager::TextureEntry *)((char *)v15 + 96);
      if ((HGTextureManager::TextureEntry *)((char *)v15 - *v14) == (HGTextureManager::TextureEntry *)4032)
      {
        v17 = (HGTextureManager::TextureEntry *)v14[1];
        ++v14;
        v15 = v17;
      }
    }
  }
  v18 = atomic_load(HGLogger::_enabled);
  if ((v18 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)*a1, (HGLogger *)"used : %4.1f mb (active : %4.1f mb)  |  shared : %4.1f mb  |  unowned : %4.1f mb  |  (total : %4.1f mb)\n", v10, v11, (float)((float)*(unint64_t *)(v6 + 136) * 0.00000095367), (float)((float)*(unint64_t *)(v6 + 144) * 0.00000095367), (float)((float)*(unint64_t *)(v6 + 152) * 0.00000095367), (float)((float)*(unint64_t *)(v6 + 160) * 0.00000095367), (float)((float)*(unint64_t *)(v6 + 128) * 0.00000095367));
  HGLogger::indent(0xFFFFFFFFLL);
  v19 = (int64x2_t *)*((_QWORD *)a1 + 1);
  v20 = *(_QWORD *)(v6 + 176);
  v21 = vaddq_s64(v19[1], *(int64x2_t *)(v6 + 144));
  v22 = *(int64x2_t *)(v6 + 160);
  *v19 = vaddq_s64(*v19, *(int64x2_t *)(v6 + 128));
  v19[1] = v21;
  v19[2] = vaddq_s64(v19[2], v22);
  v19[3].i64[0] += v20;
  return pthread_mutex_unlock((pthread_mutex_t *)(v6 + 16));
}

void sub_1B2AABFE8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::QueuedTexturesPrinter::operator()(unsigned int *a1, _QWORD *a2, uint64_t a3, const char *a4, char *a5)
{
  uint64_t v6;
  unsigned __int8 v7;
  const char *v8;
  char *v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  int64x2_t *v19;
  uint64_t v20;
  int64x2_t v21;
  int64x2_t v22;

  v6 = a2[1];
  v7 = atomic_load(HGLogger::_enabled);
  if ((v7 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)*a1, (HGLogger *)"finish queue %p (group : %p) :\n", a4, a5, a2[1], *a2);
  HGLogger::indent(1);
  v8 = (const char *)*a1;
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 128));
  v12 = *(_QWORD *)(v6 + 88);
  if (*(_QWORD *)(v6 + 96) != v12)
  {
    v13 = *(_QWORD *)(v6 + 112);
    v14 = (_QWORD *)(v12 + 8 * (v13 / 0x1E));
    v15 = *v14 + 136 * (v13 % 0x1E);
    v16 = *(_QWORD *)(v12 + 8 * ((*(_QWORD *)(v6 + 120) + v13) / 0x1E)) + 136 * ((*(_QWORD *)(v6 + 120) + v13) % 0x1E);
    while (v15 != v16)
    {
      HGTextureManager::TextureEntry::log((HGTextureManager::TextureEntry *)(v15 + 8), v8, v9);
      v15 += 136;
      if (v15 - *v14 == 4080)
      {
        v17 = v14[1];
        ++v14;
        v15 = v17;
      }
    }
  }
  v18 = atomic_load(HGLogger::_enabled);
  if ((v18 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)*a1, (HGLogger *)"used : %4.1f mb (active : %4.1f mb)  |  shared : %4.1f mb  |  unowned : %4.1f mb  |  (total : %4.1f mb)\n", v10, v11, (float)((float)*(unint64_t *)(v6 + 24) * 0.00000095367), (float)((float)*(unint64_t *)(v6 + 32) * 0.00000095367), (float)((float)*(unint64_t *)(v6 + 40) * 0.00000095367), (float)((float)*(unint64_t *)(v6 + 48) * 0.00000095367), (float)((float)*(unint64_t *)(v6 + 16) * 0.00000095367));
  HGLogger::indent(0xFFFFFFFFLL);
  v19 = (int64x2_t *)*((_QWORD *)a1 + 1);
  v20 = *(_QWORD *)(v6 + 64);
  v21 = vaddq_s64(v19[1], *(int64x2_t *)(v6 + 32));
  v22 = *(int64x2_t *)(v6 + 48);
  *v19 = vaddq_s64(*v19, *(int64x2_t *)(v6 + 16));
  v19[1] = v21;
  v19[2] = vaddq_s64(v19[2], v22);
  v19[3].i64[0] += v20;
  return pthread_mutex_unlock((pthread_mutex_t *)(v6 + 128));
}

void sub_1B2AAC1DC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<HGTextureManager::TextureEntry>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFC0uLL);
      std::__split_buffer<HGNode **>::push_back((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFC0uLL);
    std::__split_buffer<HGNode **>::push_front((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_1B2AAC75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1B2AAC778(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AAC78C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AAC7A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<TextureDeleteQueue::DeleteRequest>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 15;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 30;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::deque<TextureDeleteQueue::DeleteRequest>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x1E;
  v4 = v2 - 30;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFF0uLL);
      std::__split_buffer<HGNode **>::push_back((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFF0uLL);
    std::__split_buffer<HGNode **>::push_front((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_1B2AACDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1B2AACDF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AACE0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AACE24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<HGTextureManager::TextureEntry>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 21;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 42;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<HGTextureManager::TextureEntry,HGTextureManager::TextureEntry*,HGTextureManager::TextureEntry&,HGTextureManager::TextureEntry**,long,42l>,std::__deque_iterator<HGTextureManager::TextureEntry,HGTextureManager::TextureEntry*,HGTextureManager::TextureEntry&,HGTextureManager::TextureEntry**,long,42l>,0>@<X0>(const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  const void **v8;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  void *result;
  uint64_t v19;
  char *v20;
  const void **v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  int64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int64_t v34;
  uint64_t v35;
  char *v36;

  v8 = a5;
  if (a1 == a3)
  {
    if (a2 == a4)
      goto LABEL_42;
    v32 = (uint64_t)*a5;
    v33 = a4;
    while (1)
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a6[-v32] >> 5);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v33 - a2) >> 5)) < v34)
        v34 = 0xAAAAAAAAAAAAAAABLL * ((v33 - a2) >> 5);
      v33 -= 96 * v34;
      a6 -= 96 * v34;
      if (v34)
        result = memmove(a6, v33, 96 * v34);
      if (v33 == a2)
        break;
      v35 = (uint64_t)*--v8;
      v32 = v35;
      a6 = (char *)(v35 + 4032);
    }
    goto LABEL_40;
  }
  v14 = *a3;
  if (*a3 != a4)
  {
    v15 = (uint64_t)*a5;
    v16 = a4;
    while (1)
    {
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a6[-v15] >> 5);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v16 - v14) >> 5)) < v17)
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v14) >> 5);
      v16 -= 96 * v17;
      a6 -= 96 * v17;
      if (v17)
        result = memmove(a6, v16, 96 * v17);
      if (v16 == v14)
        break;
      v19 = (uint64_t)*--v8;
      v15 = v19;
      a6 = (char *)(v19 + 4032);
    }
    if ((char *)*v8 + 4032 == a6)
    {
      v20 = (char *)v8[1];
      ++v8;
      a6 = v20;
    }
  }
  v21 = a3 - 1;
  if (a3 - 1 != a1)
  {
    v22 = (char *)*v8;
    do
    {
      while (1)
      {
        v23 = *v21;
        v24 = (char *)*v21 + 4032;
        while (1)
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * ((a6 - v22) >> 5);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 5)) < v25)
            v25 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 5);
          v24 -= 96 * v25;
          a6 -= 96 * v25;
          if (v25)
            result = memmove(a6, v24, 96 * v25);
          if (v24 == v23)
            break;
          v26 = (char *)*--v8;
          v22 = v26;
          a6 = v26 + 4032;
        }
        v22 = (char *)*v8;
        if ((char *)*v8 + 4032 == a6)
          break;
        if (--v21 == a1)
          goto LABEL_24;
      }
      v27 = (char *)v8[1];
      ++v8;
      v22 = v27;
      a6 = v27;
      --v21;
    }
    while (v21 != a1);
  }
LABEL_24:
  v28 = (char *)*a1 + 4032;
  if (v28 != a2)
  {
    v29 = (uint64_t)*v8;
    while (1)
    {
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a6[-v29] >> 5);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v28 - a2) >> 5)) < v30)
        v30 = 0xAAAAAAAAAAAAAAABLL * ((v28 - a2) >> 5);
      v28 -= 96 * v30;
      a6 -= 96 * v30;
      if (v30)
        result = memmove(a6, v28, 96 * v30);
      if (v28 == a2)
        break;
      v31 = (uint64_t)*--v8;
      v29 = v31;
      a6 = (char *)(v31 + 4032);
    }
LABEL_40:
    if ((char *)*v8 + 4032 == a6)
    {
      v36 = (char *)v8[1];
      ++v8;
      a6 = v36;
    }
  }
LABEL_42:
  *a7 = a3;
  a7[1] = (const void **)a4;
  a7[2] = v8;
  a7[3] = (const void **)a6;
  return result;
}

const void **std::__for_each_segment[abi:ne180100]<std::__deque_iterator<HGTextureManager::TextureEntry,HGTextureManager::TextureEntry*,HGTextureManager::TextureEntry&,HGTextureManager::TextureEntry**,long,42l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<HGTextureManager::TextureEntry,HGTextureManager::TextureEntry*,HGTextureManager::TextureEntry&,HGTextureManager::TextureEntry**,long,42l>,std::__deque_iterator<HGTextureManager::TextureEntry,HGTextureManager::TextureEntry*,HGTextureManager::TextureEntry&,HGTextureManager::TextureEntry**,long,42l>>>(const void **result, _BYTE *__src, const void **a3, _BYTE *a4, uint64_t a5)
{
  _BYTE *v6;
  char *v7;
  void **v8;
  const void **v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  int64_t v13;
  unint64_t v14;
  char *v15;
  const void **i;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int64_t v32;
  char *v33;

  v6 = __src;
  v8 = *(void ***)a5;
  v7 = *(char **)(a5 + 8);
  if (result == a3)
  {
    if (__src == a4)
      goto LABEL_47;
    v31 = (char *)*v8++;
    v30 = v31;
    while (1)
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * ((v30 - v7 + 4032) >> 5);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - v6) >> 5)) >= v32)
        v28 = v32;
      else
        v28 = 0xAAAAAAAAAAAAAAABLL * ((a4 - v6) >> 5);
      if (v28)
        result = (const void **)memmove(v7, v6, 96 * v28);
      v6 += 96 * v28;
      if (v6 == a4)
        break;
      v33 = (char *)*v8++;
      v30 = v33;
      v7 = v33;
    }
    goto LABEL_44;
  }
  v9 = result;
  v10 = (char *)*result + 4032;
  if (v10 == __src)
    goto LABEL_13;
  v12 = (char *)*v8++;
  v11 = v12;
  while (1)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v7 + 4032) >> 5);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 5)) >= v13)
      v14 = v13;
    else
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 5);
    if (v14)
      result = (const void **)memmove(v7, v6, 96 * v14);
    v6 += 96 * v14;
    if (v6 == v10)
      break;
    v15 = (char *)*v8++;
    v11 = v15;
    v7 = v15;
  }
  v7 += 96 * v14;
  if ((char *)*(v8 - 1) + 4032 != v7)
  {
    --v8;
LABEL_13:
    *(_QWORD *)a5 = v8;
    *(_QWORD *)(a5 + 8) = v7;
    for (i = v9 + 1; i != a3; ++i)
    {
LABEL_16:
      while (1)
      {
        v17 = 0;
        v18 = (char *)*i;
        v20 = (char *)*v8++;
        v19 = v20;
        while (1)
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v7 + 4032) >> 5);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((4032 - 96 * v17) >> 5)) >= v21)
            v22 = v21;
          else
            v22 = 0xAAAAAAAAAAAAAAABLL * ((4032 - 96 * v17) >> 5);
          if (v22)
            result = (const void **)memmove(v7, &v18[96 * v17], 96 * v22);
          v17 += v22;
          if (v17 == 42)
            break;
          v23 = (char *)*v8++;
          v19 = v23;
          v7 = v23;
        }
        v7 += 96 * v22;
        if ((char *)*(v8 - 1) + 4032 != v7)
          break;
        v7 = (char *)*v8;
        *(_QWORD *)a5 = v8;
        *(_QWORD *)(a5 + 8) = v7;
        if (++i == a3)
          goto LABEL_26;
      }
      *(_QWORD *)a5 = --v8;
      *(_QWORD *)(a5 + 8) = v7;
    }
    goto LABEL_26;
  }
  v7 = (char *)*v8;
  *(_QWORD *)a5 = v8;
  *(_QWORD *)(a5 + 8) = v7;
  i = v9 + 1;
  if (v9 + 1 != a3)
    goto LABEL_16;
LABEL_26:
  v24 = *a3;
  if (*a3 == a4)
    goto LABEL_47;
  v26 = (char *)*v8++;
  v25 = v26;
  while (1)
  {
    v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v7 + 4032) >> 5);
    v28 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - v24) >> 5)) >= v27 ? v27 : 0xAAAAAAAAAAAAAAABLL * ((a4 - v24) >> 5);
    if (v28)
      result = (const void **)memmove(v7, v24, 96 * v28);
    v24 += 96 * v28;
    if (v24 == a4)
      break;
    v29 = (char *)*v8++;
    v25 = v29;
    v7 = v29;
  }
LABEL_44:
  v7 += 96 * v28;
  if ((char *)*(v8 - 1) + 4032 == v7)
    v7 = (char *)*v8;
  else
    --v8;
LABEL_47:
  *(_QWORD *)a5 = v8;
  *(_QWORD *)(a5 + 8) = v7;
  return result;
}

uint64_t `anonymous namespace'::UsedTexturesPrinter::operator()(unsigned int *a1, uint64_t a2, uint64_t a3, const char *a4, char *a5)
{
  uint64_t v6;
  unsigned __int8 v7;
  const char *v8;
  char *v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  HGTextureManager::TextureEntry *v15;
  unint64_t v16;
  HGTextureManager::TextureEntry *v17;
  unsigned __int8 v18;
  int64x2_t *v19;
  uint64_t v20;
  int64x2_t v21;
  int64x2_t v22;

  v6 = *(_QWORD *)(a2 + 32);
  v7 = atomic_load(HGLogger::_enabled);
  if ((v7 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)*a1, (HGLogger *)"texture pool %p (rnd : %p, group : %p) :\n", a4, a5, v6, a2, *(_QWORD *)(a2 + 16));
  HGLogger::indent(1);
  v8 = (const char *)*a1;
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
  v12 = *(_QWORD *)(v6 + 88);
  if (*(_QWORD *)(v6 + 96) != v12)
  {
    v13 = *(_QWORD *)(v6 + 112);
    v14 = (_QWORD *)(v12 + 8 * (v13 / 0x2A));
    v15 = (HGTextureManager::TextureEntry *)(*v14 + 96 * (v13 % 0x2A));
    v16 = *(_QWORD *)(v12 + 8 * ((*(_QWORD *)(v6 + 120) + v13) / 0x2A)) + 96 * ((*(_QWORD *)(v6 + 120) + v13) % 0x2A);
    while (v15 != (HGTextureManager::TextureEntry *)v16)
    {
      HGTextureManager::TextureEntry::log(v15, v8, v9);
      v15 = (HGTextureManager::TextureEntry *)((char *)v15 + 96);
      if ((HGTextureManager::TextureEntry *)((char *)v15 - *v14) == (HGTextureManager::TextureEntry *)4032)
      {
        v17 = (HGTextureManager::TextureEntry *)v14[1];
        ++v14;
        v15 = v17;
      }
    }
  }
  v18 = atomic_load(HGLogger::_enabled);
  if ((v18 & 1) != 0)
    HGLogger::log((HGLogger *)"texManager", (const char *)*a1, (HGLogger *)"used : %4.1f mb (active : %4.1f mb)  |  shared : %4.1f mb  |  unowned : %4.1f mb  |  (total : %4.1f mb)\n", v10, v11, (float)((float)*(unint64_t *)(v6 + 136) * 0.00000095367), (float)((float)*(unint64_t *)(v6 + 144) * 0.00000095367), (float)((float)*(unint64_t *)(v6 + 152) * 0.00000095367), (float)((float)*(unint64_t *)(v6 + 160) * 0.00000095367), (float)((float)*(unint64_t *)(v6 + 128) * 0.00000095367));
  HGLogger::indent(0xFFFFFFFFLL);
  v19 = (int64x2_t *)*((_QWORD *)a1 + 1);
  v20 = *(_QWORD *)(v6 + 176);
  v21 = vaddq_s64(v19[1], *(int64x2_t *)(v6 + 144));
  v22 = *(int64x2_t *)(v6 + 160);
  *v19 = vaddq_s64(*v19, *(int64x2_t *)(v6 + 128));
  v19[1] = v21;
  v19[2] = vaddq_s64(v19[2], v22);
  v19[3].i64[0] += v20;
  return pthread_mutex_unlock((pthread_mutex_t *)(v6 + 16));
}

void sub_1B2AAD6BC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void HGCPURenderContext::HGCPURenderContext(HGCPURenderContext *this)
{
  HGComputeDeviceManager *v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  HGRenderer *v17;
  __int128 v18;

  HGRenderContext::HGRenderContext(this);
  *(_QWORD *)v2 = off_1E652A118;
  *((_QWORD *)v2 + 17) = 0;
  *((_QWORD *)v2 + 18) = 0;
  HGComputeDeviceManager::GetCPUComputeDevice(v2, &v18);
  v3 = v18;
  v18 = 0uLL;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  *(_OWORD *)((char *)this + 136) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v11 = *((_QWORD *)this + 17);
  v10 = *((_QWORD *)this + 18);
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = v11;
  *((_QWORD *)this + 3) = v10;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (HGRenderer *)HGObject::operator new(0x450uLL);
  HGRenderer::HGRenderer(v17);
  *((_QWORD *)this + 9) = v17;
  *((_DWORD *)this + 9) = 0;
  *((_QWORD *)this + 19) = (*(int (**)(HGRenderer *, uint64_t))(*(_QWORD *)v17 + 128))(v17, 5);
  *((_QWORD *)this + 20) = (*(int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 128))(*((_QWORD *)this + 9), 1);
  *((_QWORD *)this + 21) = (*(int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 128))(*((_QWORD *)this + 9), 2);
}

void sub_1B2AAD874(_Unwind_Exception *a1)
{
  HGRenderContext *v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v4 = v3;
  HGObject::operator delete(v4);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100](v2);
  HGRenderContext::~HGRenderContext(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AAD89C(_Unwind_Exception *a1)
{
  HGRenderContext *v1;
  uint64_t v2;

  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100](v2);
  HGRenderContext::~HGRenderContext(v1);
  _Unwind_Resume(a1);
}

void HGCPURenderContext::~HGCPURenderContext(HGCPURenderContext *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E652A118;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    HGRenderContext::~HGRenderContext(this);
  }
  else
  {
LABEL_5:
    HGRenderContext::~HGRenderContext(this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E652A118;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    HGRenderContext::~HGRenderContext(this);
  }
  else
  {
LABEL_5:
    HGRenderContext::~HGRenderContext(this);
  }
  HGObject::operator delete(v5);
}

uint64_t HGCPURenderContext::DumpContext(HGCPURenderContext *this)
{
  puts("-----------------------------------------");
  printf("Dumping HGCPURenderContext: %p\n", this);
  printf("    _state                    : %d\n", *((_DWORD *)this + 8));
  printf("    _type                     : %d\n", *((_DWORD *)this + 9));
  printf("    _numPhysicalCores         : %u\n", *(_DWORD *)(*((_QWORD *)this + 17) + 88));
  printf("    _numLogicalCores          : %u\n", *(_DWORD *)(*((_QWORD *)this + 17) + 92));
  printf("    _defaultFilteringMode     : %d\n", *((_DWORD *)this + 21));
  printf("    _intermediateBufferFormat : %d\n", *((_DWORD *)this + 20));
  printf("    _numCPURenderThreads      : %lu\n", *((_QWORD *)this + 19));
  printf("    _cpuRendererTileSizeX     : %lu\n", *((_QWORD *)this + 20));
  printf("    _cpuRendererTileSizeY     : %lu\n", *((_QWORD *)this + 21));
  printf("    _renderer                 : %p\n", *((const void **)this + 9));
  printf("    _renderQueue              : %p\n", *((const void **)this + 6));
  printf("    _renderGraphDumpLevel     : %d\n", *((_DWORD *)this + 22));
  printf("    _renderStatsFlag          : %d\n", *((unsigned __int8 *)this + 92));
  printf("    _renderStatsWarmUp        : %lu\n", *((_QWORD *)this + 12));
  printf("    _renderStatsMaxVals       : %lu\n", *((_QWORD *)this + 13));
  return puts("-----------------------------------------");
}

void HGStackPage::~HGStackPage(HGStackPage *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    HGFree(v2);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
}

void HGExecUnitStack::HGExecUnitStack(HGExecUnitStack *this)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char **v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  char *v19;
  char **v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  char *v34;
  _QWORD **v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  *(_OWORD *)((char *)this + 8) = 0u;
  v2 = (char *)this + 8;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 38) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  *(_QWORD *)this = v3;
  v4 = (_QWORD *)operator new();
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *((_QWORD *)this + 15) = v4;
  v5 = (_QWORD *)operator new();
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *((_QWORD *)this + 16) = v5;
  v6 = (char **)*((_QWORD *)this + 15);
  v8 = v6[1];
  v7 = (unint64_t)v6[2];
  if ((unint64_t)v8 < v7)
  {
    *(_QWORD *)v8 = v2;
    v9 = (uint64_t)(v8 + 8);
    goto LABEL_14;
  }
  v10 = *v6;
  v11 = v8 - *v6;
  v12 = v11 >> 3;
  v13 = (v11 >> 3) + 1;
  if (v13 >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v14 = v7 - (_QWORD)v10;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = operator new(8 * v15);
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = v2;
    v9 = (uint64_t)(v17 + 8);
    v19 = (char *)(v8 - v10);
    if (v8 == v10)
    {
LABEL_12:
      *v6 = v17;
      v6[1] = (char *)v9;
      v6[2] = v18;
      if (!v8)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else
  {
    v16 = 0;
    v17 = (char *)(8 * v12);
    v18 = 0;
    *(_QWORD *)(8 * v12) = v2;
    v9 = 8 * v12 + 8;
    v19 = (char *)(v8 - v10);
    if (v8 == v10)
      goto LABEL_12;
  }
  v36 = (unint64_t)(v19 - 8);
  if (v36 < 0x58)
    goto LABEL_52;
  if ((unint64_t)(v8 - v16 - v11) < 0x20)
    goto LABEL_52;
  v37 = (v36 >> 3) + 1;
  v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
  v39 = &v8[-v38];
  v17 -= v38;
  v40 = &v16[8 * v12 - 16];
  v41 = v8 - 16;
  v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v43 = *(_OWORD *)v41;
    *(v40 - 1) = *((_OWORD *)v41 - 1);
    *v40 = v43;
    v40 -= 2;
    v41 -= 32;
    v42 -= 4;
  }
  while (v42);
  v8 = v39;
  if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_52:
    do
    {
      v44 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v17 - 1) = v44;
      v17 -= 8;
    }
    while (v8 != v10);
  }
  v8 = *v6;
  *v6 = v17;
  v6[1] = (char *)v9;
  v6[2] = v18;
  if (v8)
LABEL_13:
    operator delete(v8);
LABEL_14:
  v6[1] = (char *)v9;
  v20 = (char **)*((_QWORD *)this + 16);
  v21 = (char *)this + 64;
  v23 = v20[1];
  v22 = (unint64_t)v20[2];
  if ((unint64_t)v23 < v22)
  {
    *(_QWORD *)v23 = v21;
    v24 = (uint64_t)(v23 + 8);
    goto LABEL_27;
  }
  v25 = *v20;
  v26 = v23 - *v20;
  v27 = v26 >> 3;
  v28 = (v26 >> 3) + 1;
  if (v28 >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v29 = v22 - (_QWORD)v25;
  if (v29 >> 2 > v28)
    v28 = v29 >> 2;
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v31 = operator new(8 * v30);
    v32 = &v31[8 * v27];
    v33 = &v31[8 * v30];
    *(_QWORD *)v32 = v21;
    v24 = (uint64_t)(v32 + 8);
    v34 = (char *)(v23 - v25);
    if (v23 == v25)
    {
LABEL_25:
      *v20 = v32;
      v20[1] = (char *)v24;
      v20[2] = v33;
      if (!v23)
        goto LABEL_27;
LABEL_26:
      operator delete(v23);
      goto LABEL_27;
    }
  }
  else
  {
    v31 = 0;
    v32 = (char *)(8 * v27);
    v33 = 0;
    *(_QWORD *)(8 * v27) = v21;
    v24 = 8 * v27 + 8;
    v34 = (char *)(v23 - v25);
    if (v23 == v25)
      goto LABEL_25;
  }
  v45 = (unint64_t)(v34 - 8);
  if (v45 < 0x58)
    goto LABEL_53;
  if ((unint64_t)(v23 - v31 - v26) < 0x20)
    goto LABEL_53;
  v46 = (v45 >> 3) + 1;
  v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
  v48 = &v23[-v47];
  v32 -= v47;
  v49 = &v31[8 * v27 - 16];
  v50 = v23 - 16;
  v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v52 = *(_OWORD *)v50;
    *(v49 - 1) = *((_OWORD *)v50 - 1);
    *v49 = v52;
    v49 -= 2;
    v50 -= 32;
    v51 -= 4;
  }
  while (v51);
  v23 = v48;
  if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_53:
    do
    {
      v53 = *((_QWORD *)v23 - 1);
      v23 -= 8;
      *((_QWORD *)v32 - 1) = v53;
      v32 -= 8;
    }
    while (v23 != v25);
  }
  v23 = *v20;
  *v20 = v32;
  v20[1] = (char *)v24;
  v20[2] = v33;
  if (v23)
    goto LABEL_26;
LABEL_27:
  v20[1] = (char *)v24;
  v35 = (_QWORD **)*((_QWORD *)this + 16);
  *((_QWORD *)this + 17) = ***((_QWORD ***)this + 15);
  *((_QWORD *)this + 18) = **v35;
}

void sub_1B2AADF04(_Unwind_Exception *a1)
{
  uint64_t v1;
  HGStackPage *v2;

  HGStackPage::~HGStackPage((HGStackPage *)(v1 + 64));
  HGStackPage::~HGStackPage(v2);
  _Unwind_Resume(a1);
}

void HGExecUnitStack::~HGExecUnitStack(HGExecUnitStack *this)
{
  HGStackPage ***v2;
  HGStackPage **v3;
  HGStackPage **v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  HGStackPage ***v10;
  HGStackPage **v11;
  uint64_t v12;
  uint64_t v13;

  HGExecUnitStack::resetStack((HGStackPage ****)this);
LABEL_3:
  v2 = *(HGStackPage ****)this;
  v3 = **(HGStackPage ****)this;
  while (1)
  {
    v4 = v2[1];
    if (v3 == v4)
      break;
    v5 = (uint64_t *)*(v4 - 1);
    v2[1] = v4 - 1;
    if (v5)
    {
      if (*v5)
      {
        HGFree(*v5);
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      MEMORY[0x1B5E29170](v5, 0x1080C40347F1BC8);
      goto LABEL_3;
    }
  }
  v6 = *((_QWORD *)this + 15);
  if (v6)
  {
    v7 = *(void **)v6;
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(v6 + 8) = v7;
      operator delete(v7);
    }
    MEMORY[0x1B5E29170](v6, 0x80C40D6874129);
  }
  v8 = *((_QWORD *)this + 16);
  if (v8)
  {
    v9 = *(void **)v8;
    if (*(_QWORD *)v8)
    {
      *(_QWORD *)(v8 + 8) = v9;
      operator delete(v9);
    }
    MEMORY[0x1B5E29170](v8, 0x80C40D6874129);
  }
  v10 = *(HGStackPage ****)this;
  if (*(_QWORD *)this)
  {
    v11 = *v10;
    if (*v10)
    {
      v10[1] = v11;
      operator delete(v11);
    }
    MEMORY[0x1B5E29170](v10, 0x80C40D6874129);
  }
  *(_QWORD *)this = 0;
  v12 = *((_QWORD *)this + 8);
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  if (v12)
  {
    HGFree(v12);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    HGFree(v13);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
  }
}

void HGExecUnitStack::resetStack(HGStackPage ****this)
{
  HGStackPage *****v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t ***v5;
  uint64_t *v6;
  int64_t v7;

  HGExecUnitStack::rewindStack((HGExecUnitStack *)this, 0, **this[15]);
  HGExecUnitStack::rewindStack((HGExecUnitStack *)this, 1u, **this[16]);
  v2 = (HGStackPage *****)this[16];
  this[17] = (HGStackPage ***)**this[15];
  this[18] = **v2;
  this[20] = 0;
  this[21] = 0;
  while (1)
  {
    v3 = (uint64_t **)**this;
    v5 = (uint64_t ***)(*this + 1);
    v4 = *v5;
    if (v3 == *v5)
      break;
    v6 = *v3;
    if ((unint64_t)this[22] - (*v3)[6] < 0x15)
      break;
    v7 = (char *)v4 - (char *)(v3 + 1);
    if (v4 != v3 + 1)
      memmove(**this, v3 + 1, (char *)v4 - (char *)(v3 + 1));
    *v5 = (uint64_t **)((char *)v3 + v7);
    if (*v6)
    {
      HGFree(*v6);
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
    }
    MEMORY[0x1B5E29170](v6, 0x1080C40347F1BC8);
  }
}

uint64_t HGExecUnitStack::getStack(uint64_t ***this, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t *v29;
  uint64_t *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _OWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v4 = (uint64_t)this[*((unsigned int *)this + 38) + 17];
  if (*(_QWORD *)v4 && *(_QWORD *)(v4 + 8) - *(_QWORD *)(v4 + 16) >= a2)
    goto LABEL_50;
  if (a2 >= 0x2401)
    v5 = 9216 * ((a2 - 1) / 0x2400) + 9216;
  else
    v5 = 9216;
  v6 = *this;
  v8 = **this;
  v7 = (*this)[1];
  if (v8 == v7)
    goto LABEL_21;
  v9 = (*this)[1];
  v10 = **this;
  do
  {
    v11 = *v10++;
    v12 = *(_QWORD *)(v11 + 8);
    if (v12 <= 2 * v5 && v12 >= v5)
      v9 = v8;
    v8 = v10;
  }
  while (v10 != v7);
  if (v9 == v7)
    goto LABEL_21;
  v4 = *v9;
  v14 = (char *)v7 - (char *)(v9 + 1);
  if (v7 != v9 + 1)
    memmove(v9, v9 + 1, (char *)v7 - (char *)(v9 + 1));
  v6[1] = (uint64_t *)((char *)v9 + v14);
  if (!v4)
  {
LABEL_21:
    v15 = (unint64_t)(float)((float)a2 * 1.2);
    if (v15 < 0x2401)
      v16 = 9216;
    else
      v16 = 9216 * ((v15 - 1) / 0x2400) + 9216;
    v4 = operator new();
    *(_QWORD *)(v4 + 48) = 0;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 28) = 0u;
    if (v16)
    {
      *(_QWORD *)v4 = HGMalloc(16 * v16);
      *(_QWORD *)(v4 + 8) = v16;
    }
  }
  v17 = *((unsigned int *)this + 38);
  v18 = this[v17 + 15];
  v20 = v18[1];
  v19 = (unint64_t)v18[2];
  if ((unint64_t)v20 >= v19)
  {
    v22 = *v18;
    v23 = (char *)v20 - (char *)*v18;
    v24 = v23 >> 3;
    v25 = (v23 >> 3) + 1;
    if (v25 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v26 = v19 - (_QWORD)v22;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v28 = operator new(8 * v27);
      v29 = (uint64_t *)&v28[8 * v24];
      v30 = (uint64_t *)&v28[8 * v27];
      *v29 = v4;
      v21 = (uint64_t)(v29 + 1);
      v31 = (char *)((char *)v20 - (char *)v22);
      if (v20 == v22)
        goto LABEL_46;
    }
    else
    {
      v28 = 0;
      v29 = (uint64_t *)(8 * v24);
      v30 = 0;
      *(_QWORD *)(8 * v24) = v4;
      v21 = 8 * v24 + 8;
      v31 = (char *)((char *)v20 - (char *)v22);
      if (v20 == v22)
      {
LABEL_46:
        *v18 = v29;
        v18[1] = (uint64_t *)v21;
        v18[2] = v30;
        if (v20)
        {
          operator delete(v20);
          v17 = *((unsigned int *)this + 38);
        }
        goto LABEL_48;
      }
    }
    v32 = (unint64_t)(v31 - 8);
    if (v32 < 0x58)
      goto LABEL_57;
    if ((unint64_t)((char *)v20 - &v28[v23]) < 0x20)
      goto LABEL_57;
    v33 = (v32 >> 3) + 1;
    v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    v35 = &v20[v34 / 0xFFFFFFFFFFFFFFF8];
    v29 = (uint64_t *)((char *)v29 - v34);
    v36 = &v28[8 * v24 - 16];
    v37 = v20 - 2;
    v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 4;
      v38 -= 4;
    }
    while (v38);
    v20 = v35;
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        v40 = *--v20;
        *--v29 = v40;
      }
      while (v20 != v22);
    }
    v20 = *v18;
    goto LABEL_46;
  }
  *v20 = v4;
  v21 = (uint64_t)(v20 + 1);
LABEL_48:
  v18[1] = (uint64_t *)v21;
  this[v17 + 17] = (uint64_t **)v4;
  v41 = (unint64_t)this[21];
  v42 = (unint64_t)&this[20][2 * *(_QWORD *)(v4 + 8)];
  this[20] = (uint64_t **)v42;
  if (v42 > v41)
    this[21] = (uint64_t **)v42;
LABEL_50:
  if (a2)
  {
    v43 = *(_QWORD *)(v4 + 32) + a2;
    *(_QWORD *)(v4 + 24) = a2;
    *(_QWORD *)(v4 + 32) = v43;
    ++*(_DWORD *)(v4 + 40);
  }
  return *(_QWORD *)v4 + 16 * *(_QWORD *)(v4 + 16);
}

void sub_1B2AAE4B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1080C40347F1BC8);
  _Unwind_Resume(a1);
}

void HGExecUnitStack::rewindStack(HGExecUnitStack *this, unsigned int a2, HGStackPage *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  HGStackPage *v9;
  HGStackPage *v10;
  HGStackPage ***v11;
  unint64_t v12;
  HGStackPage **v13;
  HGStackPage **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  HGStackPage **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  HGStackPage **v25;
  _OWORD *v26;
  HGStackPage **v27;
  uint64_t v28;
  __int128 v29;
  HGStackPage *v30;
  _QWORD *v31;

  v4 = (_QWORD *)*((_QWORD *)this + a2 + 15);
  v5 = v4[1];
  if (*v4 != v5)
  {
    v31 = (_QWORD *)*((_QWORD *)this + a2 + 15);
    while (1)
    {
      v10 = *(HGStackPage **)(v5 - 8);
      v8 = v5 - 8;
      v9 = v10;
      if (v10 == a3)
        goto LABEL_28;
      v4[1] = v8;
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 6) = *((_QWORD *)this + 22);
      v11 = *(HGStackPage ****)this;
      v13 = *(HGStackPage ***)(*(_QWORD *)this + 8);
      v12 = *(_QWORD *)(*(_QWORD *)this + 16);
      if ((unint64_t)v13 >= v12)
        break;
      *v13 = v9;
      v7 = (uint64_t)(v13 + 1);
LABEL_4:
      v11[1] = (HGStackPage **)v7;
      *((_QWORD *)this + 20) -= 16 * *((_QWORD *)v9 + 1);
      v5 = v4[1];
      if (*v4 == v5)
        goto LABEL_28;
    }
    v14 = *v11;
    v15 = (char *)v13 - (char *)*v11;
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v18 = v12 - (_QWORD)v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = operator new(8 * v19);
      v21 = (HGStackPage **)&v20[8 * v16];
      *v21 = v9;
      v7 = (uint64_t)(v21 + 1);
      if (v13 == v14)
        goto LABEL_25;
    }
    else
    {
      v20 = 0;
      v21 = (HGStackPage **)(8 * v16);
      *(_QWORD *)(8 * v16) = v9;
      v7 = 8 * v16 + 8;
      if (v13 == v14)
      {
LABEL_25:
        *v11 = v21;
        v11[1] = (HGStackPage **)v7;
        v11[2] = (HGStackPage **)&v20[8 * v19];
        if (v13)
          operator delete(v13);
        v4 = v31;
        goto LABEL_4;
      }
    }
    v22 = (char *)(v13 - 1) - (char *)v14;
    if (v22 < 0x58)
      goto LABEL_33;
    if ((unint64_t)((char *)v13 - &v20[v15]) < 0x20)
      goto LABEL_33;
    v23 = (v22 >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v25 = &v13[v24 / 0xFFFFFFFFFFFFFFF8];
    v21 = (HGStackPage **)((char *)v21 - v24);
    v26 = &v20[8 * v16 - 16];
    v27 = v13 - 2;
    v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 4;
      v28 -= 4;
    }
    while (v28);
    v13 = v25;
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_33:
      do
      {
        v30 = *--v13;
        *--v21 = v30;
      }
      while (v13 != v14);
    }
    v13 = *v11;
    goto LABEL_25;
  }
LABEL_28:
  *((_QWORD *)a3 + 2) = 0;
}

void HGExecutionUnit::HGExecutionUnit(HGExecutionUnit *this, HGRenderer *a2, int a3)
{
  HGExecUnitStack *v6;
  HGStats::UnitStats *v7;

  HGSampler::HGSampler(this, this);
  v6 = (HGExecUnitStack *)operator new();
  HGExecUnitStack::HGExecUnitStack(v6);
  *((_QWORD *)this + 18) = v6;
  *((_QWORD *)this + 19) = a2;
  *((_DWORD *)this + 40) = a3;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_DWORD *)this + 110) = 0;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 176), 0);
  pthread_cond_init((pthread_cond_t *)this + 5, 0);
  *((_BYTE *)this + 288) = 0;
  *((_QWORD *)this + 37) = dispatch_group_create();
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = (char *)this + 304;
  *((_QWORD *)this + 50) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  v7 = (HGStats::UnitStats *)operator new();
  HGStats::UnitStats::UnitStats(v7);
  *((_QWORD *)this + 53) = v7;
}

void sub_1B2AAE794(_Unwind_Exception *a1)
{
  HGSampler *v1;
  uint64_t v2;

  MEMORY[0x1B5E29170](v2, 0x20C4093837F09);
  HGSampler::~HGSampler(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AAE7DC(_Unwind_Exception *a1)
{
  HGSampler *v1;

  HGSampler::~HGSampler(v1);
  _Unwind_Resume(a1);
}

double HGExecutionUnit::ClearStats(HGExecutionUnit *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 52);
  *(_QWORD *)(v1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  return result;
}

void HGExecutionUnit::~HGExecutionUnit(HGExecutionUnit *this)
{
  _opaque_pthread_t *v2;
  HGStats::UnitStats *v3;
  HGExecUnitStack *v4;
  uint64_t v5;
  NSObject *v6;

  v2 = (_opaque_pthread_t *)*((_QWORD *)this + 21);
  if (v2)
  {
    pthread_cancel(v2);
    pthread_cond_signal((pthread_cond_t *)this + 5);
    pthread_join(*((pthread_t *)this + 21), 0);
  }
  pthread_cond_destroy((pthread_cond_t *)this + 5);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 176));
  v3 = (HGStats::UnitStats *)*((_QWORD *)this + 53);
  if (v3)
  {
    HGStats::UnitStats::~UnitStats(v3);
    MEMORY[0x1B5E29170]();
  }
  *((_QWORD *)this + 53) = 0;
  v4 = (HGExecUnitStack *)*((_QWORD *)this + 18);
  if (v4)
  {
    HGExecUnitStack::~HGExecUnitStack(v4);
    MEMORY[0x1B5E29170]();
  }
  *((_QWORD *)this + 18) = 0;
  v5 = *((_QWORD *)this + 54);
  if (v5)
    HGFree(v5);
  v6 = *((_QWORD *)this + 37);
  if (v6)
    dispatch_release(v6);
  HGSampler::~HGSampler(this);
}

uint64_t HGExecutionUnit::GetStack(uint64_t ****this, unint64_t a2)
{
  return HGExecUnitStack::getStack(this[18], a2);
}

uint64_t HGExecutionUnit::GetStackState@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(this + 144);
  v3 = *(_QWORD *)(v2 + 136);
  v4 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(a2 + 24) = v5;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v2 + 152);
  return this;
}

void HGExecutionUnit::SetStackState(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 144);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_DWORD *)a2 + 8);
  v6 = *a2;
  *(_OWORD *)(v2 + 136) = *a2;
  *(_DWORD *)(v2 + 152) = v5;
  HGExecUnitStack::rewindStack((HGExecUnitStack *)v2, 0, (HGStackPage *)v6);
  HGExecUnitStack::rewindStack((HGExecUnitStack *)v2, 1u, *(HGStackPage **)(v2 + 144));
  v7 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(*(_QWORD *)(v2 + 136) + 16) += v3;
  *(_QWORD *)(v7 + 16) += v4;
}

uint64_t HGExecutionUnit::SwapStack(uint64_t this)
{
  *(_DWORD *)(*(_QWORD *)(this + 144) + 152) = *(_DWORD *)(*(_QWORD *)(this + 144) + 152) == 0;
  return this;
}

uint64_t HGExecutionUnit::CommitStack(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(*(_QWORD *)(result + 144) + 8 * *(unsigned int *)(*(_QWORD *)(result + 144) + 152) + 136);
  v4 = v3[2];
  if (*v3 + 16 * v4 == a2)
    v3[2] = v4 + a3;
  return result;
}

uint64_t HGExecutionUnit::StackSize(HGExecutionUnit *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 18) + 168);
}

void HGExecutionUnit::Execute(HGExecutionUnit *this)
{
  uint64_t v2;
  int *v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  float v14;
  signed int v15;
  float v16;
  signed int v17;
  BOOL v18;
  BOOL i;
  char *Stack;
  BOOL IsNull;
  _DWORD *v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  int v27;
  HGRenderer *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int *v34;
  __int128 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  _BYTE v43[16];

  ++*(_QWORD *)(*((_QWORD *)this + 18) + 176);
  v2 = *((_QWORD *)this + 19);
  v3 = *(int **)(v2 + 272);
  v38 = v3[1];
  v39 = *v3;
  v36 = v3[3];
  v37 = v3[2];
  v4 = *(_DWORD *)(v2 + 592);
  v5 = *(_DWORD *)(v2 + 588);
  v42 = 0;
  v41 = 0;
  v6 = 0;
  v7 = *((_DWORD *)this + 40);
  v8 = -v7 < 0;
  v9 = -v7 & 7;
  v10 = v7 & 7;
  if (!v8)
    v10 = -v9;
  v35 = hg_eu_color[v10];
  v11 = *((_QWORD *)v3 + 3);
  if (!*(_QWORD *)(v11 + 192) && (*(_BYTE *)(v11 + 16) & 0x80) != 0)
  {
    IsNull = HGRect::IsNull((HGRect *)v3);
    v23 = (_DWORD *)*((_QWORD *)this + 19);
    Stack = 0;
    if (IsNull)
      v17 = 0;
    else
      v17 = v23[149];
    v40 = 1;
    v15 = 1;
    if (!(*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v23 + 128))(v23, 28))
      goto LABEL_26;
    goto LABEL_20;
  }
  v12 = 4 * *(_DWORD *)(v2 + 596);
  v13 = HGFormatUtils::tileWidthFactorRequirement(*(_DWORD *)(*((_QWORD *)v3 + 2) + 16));
  v14 = (float)(v37 - v39);
  v5 = v5 / (4 * v13) * 4 * v13;
  v15 = vcvtps_s32_f32(v14 / (float)v5);
  v16 = (float)(v36 - v38);
  v17 = v15 * vcvtps_s32_f32(v16 / (float)v4);
  if (v17 < v12)
  {
    v18 = v4 > 1;
    for (i = v5 > 1; v5 > 1 || v4 >= 2; i = v5 > 1)
    {
      if (v4 >= v5)
      {
        v4 >>= v18;
      }
      else
      {
        if ((v5 >> 1) % v13)
          break;
        if (i)
          v5 >>= 1;
      }
      v15 = vcvtps_s32_f32(v14 / (float)v5);
      v17 = vcvtps_s32_f32(v16 / (float)v4) * v15;
      if (v17 >= v12)
        break;
      v18 = v4 > 1;
    }
  }
  Stack = (char *)HGExecUnitStack::getStack(*((uint64_t ****)this + 18), v4 * v5);
  v40 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 19) + 128))(*((_QWORD *)this + 19), 28))
  {
LABEL_20:
    if (!*((_QWORD *)this + 54))
      *((_QWORD *)this + 54) = HGMalloc(0x100000);
  }
LABEL_26:
  v24 = *(unsigned int **)(*((_QWORD *)this + 19) + 280);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  while (v25 < v17)
  {
    if (v40)
    {
      v26 = *((_QWORD *)v3 + 2);
      HGRenderer::RenderTile(*((_QWORD *)this + 19), (int *)this, *(char **)(v26 + 80), *(_QWORD *)(v26 + 20), *(_QWORD *)(v26 + 28), *((_QWORD *)v3 + 3), (*(_QWORD *)(v26 + 64) / *(_QWORD *)(v26 + 56))- *(_QWORD *)(v26 + 28)+ *(_QWORD *)(v26 + 20));
      v27 = *(_DWORD *)(*((_QWORD *)this + 52) + 100);
      v28 = (HGRenderer *)*((_QWORD *)this + 19);
      if (v27)
        goto LABEL_39;
    }
    else
    {
      v29 = (v39 + v25 % v15 * v5);
      v30 = (v38 + v25 / v15 * v4);
      LODWORD(v31) = v30 + v4;
      LODWORD(v32) = v29 + v5;
      if ((int)v30 + v4 >= v36)
        v31 = v36;
      else
        v31 = v31;
      if ((int)v32 >= v37)
        v32 = v37;
      else
        v32 = v32;
      v6 = v32 | (v31 << 32);
      v42 = v39 + v25 % v15 * v5;
      HGRenderer::RenderTile(*((_QWORD *)this + 19), (int *)this, Stack, v29 | (v30 << 32), v6, *((_QWORD *)v3 + 3), 0);
      v41 = (v38 + v25 / v15 * v4);
      v27 = *(_DWORD *)(*((_QWORD *)this + 52) + 100);
      v28 = (HGRenderer *)*((_QWORD *)this + 19);
      if (v27)
      {
LABEL_39:
        v33 = *((_DWORD *)v28 + 167);
        if (v33 != 2 && (v27 < 0 || v33 == 1))
          return;
      }
    }
    if (HGRenderer::RenderCheckPoint(v28))
      return;
    *(float *)(*((_QWORD *)this + 52) + 96) = (float)v25 / (float)(v17 - 1);
    if (Stack)
    {
      if (*(_DWORD *)(*((_QWORD *)this + 19) + 608))
        *(_OWORD *)Stack = v35;
      HGStats::ProfilerScopeGuard::ProfilerScopeGuard(v43, *((_QWORD *)this + 53), 2, (HIDWORD(v6) - (_DWORD)v41) * (v6 - v42), *(_QWORD *)(*((_QWORD *)v3 + 2) + 56) * (HIDWORD(v6) - (_DWORD)v41) * (v6 - v42));
      (*(void (**)(_QWORD, char *, unint64_t, unint64_t))(**((_QWORD **)v3 + 2) + 80))(*((_QWORD *)v3 + 2), Stack, v42 | (unint64_t)(v41 << 32), v6);
      HGStats::ProfilerScopeGuard::~ProfilerScopeGuard((HGStats::ProfilerScopeGuard *)v43);
    }
    v34 = *(unsigned int **)(*((_QWORD *)this + 19) + 280);
    do
      v25 = __ldaxr(v34);
    while (__stlxr(v25 + 1, v34));
  }
  *(_DWORD *)(*((_QWORD *)this + 52) + 96) = 1065353216;
}

void sub_1B2AAEDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  HGStats::ProfilerScopeGuard::~ProfilerScopeGuard((HGStats::ProfilerScopeGuard *)va);
  _Unwind_Resume(a1);
}

uint64_t HGExecutionUnit::BgnExec(HGExecutionUnit *this)
{
  pthread_t *v2;
  uint64_t result;

  HGExecUnitStack::resetStack(*((HGStackPage *****)this + 18));
  if (*((_DWORD *)this + 40))
  {
    v2 = (pthread_t *)((char *)this + 168);
    if (*((_QWORD *)this + 21))
      goto LABEL_7;
  }
  else
  {
    atomic_store(0, *(unsigned int **)(*((_QWORD *)this + 19) + 280));
    v2 = (pthread_t *)((char *)this + 168);
    if (*((_QWORD *)this + 21))
      goto LABEL_7;
  }
  result = pthread_create(v2, 0, (void *(__cdecl *)(void *))hg_pthread_loop, this);
  if ((_DWORD)result)
  {
    *(_DWORD *)(*((_QWORD *)this + 19) + 596) = *((_DWORD *)this + 40);
    return result;
  }
LABEL_7:
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 176));
  *((_BYTE *)this + 288) = 1;
  pthread_cond_signal((pthread_cond_t *)this + 5);
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 176));
}

void hg_pthread_loop(char *a1)
{
  ipc_space_t *v2;
  thread_inspect_t v3;
  int v4;
  intptr_t v5;
  NSObject *global_queue;
  BOOLean_t get_default;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[4];
  char __str[512];

  snprintf(__str, 0x200uLL, "com.apple.helium-unit.%d.%d", *(_DWORD *)(*((_QWORD *)a1 + 19) + 1016), *((_DWORD *)a1 + 40));
  pthread_setname_np(__str);
  v2 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 176));
  while (!a1[288])
  {
LABEL_6:
    pthread_cond_wait((pthread_cond_t *)a1 + 5, (pthread_mutex_t *)(a1 + 176));
    pthread_testcancel();
  }
  while (2)
  {
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 19) + 128))(*((_QWORD *)a1 + 19), 6);
    v5 = -2;
    switch(v4)
    {
      case 0:
        goto LABEL_4;
      case 1:
        goto LABEL_11;
      case 2:
        v5 = 0;
        goto LABEL_11;
      case 3:
        v5 = 2;
LABEL_11:
        global_queue = dispatch_get_global_queue(v5, 0);
        goto LABEL_12;
      case 4:
        v3 = MEMORY[0x1B5E29B3C](-2);
        get_default = 0;
        policy_infoCnt = 4;
        thread_policy_get(v3, 2u, policy_info, &policy_infoCnt, &get_default);
        thread_policy_set(v3, 2u, policy_info, policy_infoCnt);
        mach_port_deallocate(*v2, v3);
LABEL_4:
        HGExecutionUnit::Execute((HGExecutionUnit *)a1);
        goto LABEL_5;
      default:
        global_queue = 0;
LABEL_12:
        dispatch_group_async_f(*((dispatch_group_t *)a1 + 37), global_queue, a1, (dispatch_function_t)ExecuteUnitGCD);
        dispatch_group_wait(*((dispatch_group_t *)a1 + 37), 0xFFFFFFFFFFFFFFFFLL);
LABEL_5:
        a1[288] = 0;
        pthread_cond_signal((pthread_cond_t *)a1 + 5);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 176));
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 176));
        if (!a1[288])
          goto LABEL_6;
        continue;
    }
  }
}

uint64_t HGExecutionUnit::EndExec(pthread_cond_t *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)&this[3].__opaque[24];
  pthread_mutex_lock((pthread_mutex_t *)&this[3].__opaque[24]);
  while (LOBYTE(this[6].__sig))
    pthread_cond_wait(this + 5, v2);
  return pthread_mutex_unlock(v2);
}

void HGExecutionUnit::RenderTile(uint64_t a1, char *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  HGStats::UnitStatsImpl *v12[2];

  HGStats::ProfilerScopeGuard::ProfilerScopeGuard(v12, *(HGStats::UnitStatsImpl ***)(a1 + 424), 0);
  HGRenderer::RenderTile(*(_QWORD *)(a1 + 152), (int *)a1, a2, a3, a4, a5, a6);
  HGStats::ProfilerScopeGuard::~ProfilerScopeGuard((HGStats::ProfilerScopeGuard *)v12);
}

{
  HGStats::UnitStatsImpl *v12[2];

  HGStats::ProfilerScopeGuard::ProfilerScopeGuard(v12, *(HGStats::UnitStatsImpl ***)(a1 + 424), 0);
  HGRenderer::RenderTile(*(_QWORD *)(a1 + 152), (int *)a1, a2, a3, a4, a5, a6);
  HGStats::ProfilerScopeGuard::~ProfilerScopeGuard((HGStats::ProfilerScopeGuard *)v12);
}

void sub_1B2AAF0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGStats::ProfilerScopeGuard::~ProfilerScopeGuard((HGStats::ProfilerScopeGuard *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AAF160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGStats::ProfilerScopeGuard::~ProfilerScopeGuard((HGStats::ProfilerScopeGuard *)&a9);
  _Unwind_Resume(a1);
}

double HGExecutionUnit::PushStats(HGExecutionUnit *this)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = operator new();
  v3 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = v2;
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = v3;
  return result;
}

int64x2_t *HGExecutionUnit::PopStats(HGExecutionUnit *this)
{
  int64x2_t *result;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  __int32 v6;

  result = (int64x2_t *)*((_QWORD *)this + 52);
  v3 = (int64x2_t *)result[6].i64[1];
  if (v3)
  {
    v4 = v3[1];
    *v3 = vaddq_s64(*v3, *result);
    v3[1] = vaddq_s64(v4, result[1]);
    v5 = v3[3];
    v3[2] = vaddq_s64(v3[2], result[2]);
    v3[3] = vaddq_s64(v5, result[3]);
    v3[5] = vaddq_s64(v3[5], result[5]);
    v6 = result[6].i32[1];
    if (v6)
      v3[6].i32[1] = v6;
    result = (int64x2_t *)MEMORY[0x1B5E29170]();
    *((_QWORD *)this + 52) = v3;
  }
  return result;
}

float timeDiff@<S0>(const uint64_t *a1@<X0>, const uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  tm *v5;
  int tm_sec;
  int32x2_t v7;
  tm *v8;
  int v9;
  int32x2_t v10;
  int32x2_t v11;
  int v12;
  double v13;
  float v14;
  float v15;
  float result;
  double __y;

  v5 = localtime(a1);
  tm_sec = v5->tm_sec;
  v7 = *(int32x2_t *)&v5->tm_min;
  v8 = localtime(a2);
  v9 = v8->tm_sec;
  v10 = *(int32x2_t *)&v8->tm_min;
  a3[1] = 0;
  a3[2] = 0;
  v11 = vmul_s32(vsub_s32(v10, v7), (int32x2_t)0xE100000003CLL);
  v12 = v9 - tm_sec + v11.i32[0] + v11.i32[1];
  v13 = (double)v12;
  __y = 0.0;
  if (v12 >= 3601)
  {
    v13 = modf(v13 / 3600.0, &__y) * 3600.0;
    v14 = __y;
    a3[2] = llroundf(v14);
  }
  if (v13 > 60.0)
  {
    v13 = modf(v13 / 60.0, &__y) * 60.0;
    v15 = __y;
    a3[1] = llroundf(v15);
  }
  result = v13;
  *a3 = llroundf(result);
  return result;
}

void ROIStatIO::~ROIStatIO(ROIStatIO *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[5];
  ROIStatIO::open(this);
  ROIStatIO::writeList(this);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) | 4);
  v5 = *((_QWORD *)this + 52);
  if (v5)
  {
    v6 = *((_QWORD *)this + 53);
    v7 = (void *)*((_QWORD *)this + 52);
    if (v6 == v5)
    {
LABEL_13:
      *((_QWORD *)this + 53) = v5;
      operator delete(v7);
      goto LABEL_14;
    }
    while (1)
    {
      if (*(char *)(v6 - 1) < 0)
      {
        operator delete(*(void **)(v6 - 24));
        if (*(char *)(v6 - 49) < 0)
LABEL_11:
          operator delete(*(void **)(v6 - 72));
      }
      else if (*(char *)(v6 - 49) < 0)
      {
        goto LABEL_11;
      }
      v6 -= 72;
      if (v6 == v5)
      {
        v7 = (void *)*((_QWORD *)this + 52);
        goto LABEL_13;
      }
    }
  }
LABEL_14:
  v8 = a2[1];
  *(_QWORD *)this = v8;
  *(_QWORD *)((char *)this + *(_QWORD *)(v8 - 24)) = a2[4];
  MEMORY[0x1B5E28E04]((char *)this + 8);
  std::ostream::~ostream();
}

uint64_t ROIStatIO::open(ROIStatIO *this)
{
  char *v1;
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *__dst[2];
  unint64_t v11;

  v1 = getenv("ROI_DATA_PATH");
  if (v1)
    v2 = v1;
  else
    v2 = "./ROIData.txt";
  v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    v5 = (void **)operator new(v8 + 1);
    __dst[1] = v4;
    v11 = v9 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v11) = v3;
    v5 = __dst;
    if (!v3)
    {
      LOBYTE(__dst[0]) = 0;
      if (ROIStatIO::_pThis)
        goto LABEL_8;
LABEL_14:
      v6 = operator new();
      *(_QWORD *)(v6 + 448) = MEMORY[0x1E0DE4FF8] + 16;
      std::ofstream::basic_ofstream((uint64_t *)v6, (uint64_t *)&off_1E652A1B8);
      *(_QWORD *)v6 = &off_1E652A178;
      *(_QWORD *)(v6 + 448) = &unk_1E652A1A0;
      *(_OWORD *)(v6 + 416) = 0u;
      *(_OWORD *)(v6 + 432) = 0u;
      ROIStatIO::_pThis = v6;
      if ((SHIBYTE(v11) & 0x80000000) == 0)
        return v6;
      goto LABEL_15;
    }
  }
  memmove(v5, v2, (size_t)v4);
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  if (!ROIStatIO::_pThis)
    goto LABEL_14;
LABEL_8:
  std::ofstream::open();
  v6 = ROIStatIO::_pThis;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
    return v6;
LABEL_15:
  operator delete(__dst[0]);
  return v6;
}

void ROIStatIO::writeList(ROIStatIO *this)
{
  ROIStatIO *v2;
  uint64_t i;
  tm v4;
  uint64_t v5;

  if (ROIStatIO::_pThis)
  {
    if (!*(_DWORD *)(ROIStatIO::_pThis + *(_QWORD *)(*(_QWORD *)ROIStatIO::_pThis - 24) + 32))
    {
      if (*(_QWORD *)(ROIStatIO::_pThis + 128))
      {
        v5 = time(0);
        timeDiff((const uint64_t *)this + 55, &v5, &v4);
        for (i = *((_QWORD *)this + 52); i != *((_QWORD *)this + 53); i += 72)
        {
          if ((*(_DWORD *)(i + 28) & 0x80000000) != 0)
          {
            v2 = (ROIStatIO *)ROIStatIO::writePassValue(v2, (const ROIStatIO::ROITestSet *)i, &v4);
          }
          else if (*(double *)(i + 40) / (double)*(int *)(i + 32) >= 1.0)
          {
            v2 = (ROIStatIO *)ROIStatIO::writeOverValue(v2, (const ROIStatIO::ROITestSet *)i, &v4);
          }
          else
          {
            v2 = (ROIStatIO *)ROIStatIO::writeUnderValue(v2, (const ROIStatIO::ROITestSet *)i, &v4);
          }
        }
      }
    }
  }
}

void ROIStatIO::~ROIStatIO(ROIStatIO *this)
{
  uint64_t v1;

  MEMORY[0x1B5E290BC](v1 + 448);
}

{
  uint64_t v1;

  MEMORY[0x1B5E290BC](v1 + 448);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'ROIStatIO::~ROIStatIO(ROIStatIO *this)
{
  JUMPOUT(0x1B5E290BCLL);
}

{
  ROIStatIO *v1;

  v1 = (ROIStatIO *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  MEMORY[0x1B5E290BC]((char *)v1 + 448);
  JUMPOUT(0x1B5E29170);
}

uint64_t ROIStatIO::writeUnderValue(ROIStatIO *this, const ROIStatIO::ROITestSet *a2, const tm *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  const ROIStatIO::ROITestSet *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  void *__p[2];
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32[8];
  void *v33[2];
  __int128 v34;
  int v35;
  uint64_t v36[19];
  std::locale v37;

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v36[0] = MEMORY[0x1E0DE4FE0] + 64;
  v31 = v7;
  *(uint64_t *)((char *)&v32[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v32[-1] + *(_QWORD *)(v31 - 24));
  std::ios_base::init(v9, v32);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v31 = v4 + 24;
  v36[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v32[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v33 = 0u;
  v34 = 0u;
  v35 = 16;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"under ", 6);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"name ", 5);
  v13 = *((char *)a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(const ROIStatIO::ROITestSet **)a2;
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 23);
  else
    v15 = *((_QWORD *)a2 + 1);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" frame ", 7);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" input ", 7);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" time ", 6);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"H", 1);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"M", 1);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"S", 1);
  std::stringbuf::str();
  if ((v30 & 0x80u) == 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  puts((const char *)v22);
  if ((char)v30 < 0)
    operator delete(__p[0]);
  v23 = (_QWORD *)ROIStatIO::_pThis;
  std::stringbuf::str();
  if ((v30 & 0x80u) == 0)
    v24 = __p;
  else
    v24 = (void **)__p[0];
  if ((v30 & 0x80u) == 0)
    v25 = v30;
  else
    v25 = (uint64_t)__p[1];
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
  v27 = std::locale::use_facet(&v37, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale(&v37);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v30 < 0)
    operator delete(__p[0]);
  v31 = *v6;
  *(uint64_t *)((char *)&v32[-1] + *(_QWORD *)(v31 - 24)) = v6[3];
  v32[0] = v10 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(v33[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](v36);
}

void sub_1B2AAFACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2AAFAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2AAFAF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E290BC](v1);
  _Unwind_Resume(a1);
}

uint64_t ROIStatIO::writeOverValue(ROIStatIO *this, const ROIStatIO::ROITestSet *a2, const tm *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  const ROIStatIO::ROITestSet *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  void *__p[2];
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33[8];
  void *v34[2];
  __int128 v35;
  int v36;
  uint64_t v37[19];
  std::locale v38;

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v37[0] = MEMORY[0x1E0DE4FE0] + 64;
  v32 = v7;
  *(uint64_t *)((char *)&v33[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v33[-1] + *(_QWORD *)(v32 - 24));
  std::ios_base::init(v9, v33);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v32 = v4 + 24;
  v37[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v33[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  v36 = 16;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"over ", 5);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"name ", 5);
  v13 = *((char *)a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(const ROIStatIO::ROITestSet **)a2;
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 23);
  else
    v15 = *((_QWORD *)a2 + 1);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" frame ", 7);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" input ", 7);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ratio ", 7);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" time ", 6);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"H", 1);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"M", 1);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"S", 1);
  std::stringbuf::str();
  if ((v31 & 0x80u) == 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  puts((const char *)v23);
  if ((char)v31 < 0)
    operator delete(__p[0]);
  v24 = (_QWORD *)ROIStatIO::_pThis;
  std::stringbuf::str();
  if ((v31 & 0x80u) == 0)
    v25 = __p;
  else
    v25 = (void **)__p[0];
  if ((v31 & 0x80u) == 0)
    v26 = v31;
  else
    v26 = (uint64_t)__p[1];
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
  v28 = std::locale::use_facet(&v38, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale(&v38);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v31 < 0)
    operator delete(__p[0]);
  v32 = *v6;
  *(uint64_t *)((char *)&v33[-1] + *(_QWORD *)(v32 - 24)) = v6[3];
  v33[0] = v10 + 16;
  if (SBYTE7(v35) < 0)
    operator delete(v34[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](v37);
}

void sub_1B2AAFE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2AAFE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2AAFE80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E290BC](v1);
  _Unwind_Resume(a1);
}

uint64_t ROIStatIO::writePassValue(ROIStatIO *this, const ROIStatIO::ROITestSet *a2, const tm *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  const ROIStatIO::ROITestSet *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void **v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  void *__p[2];
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31[8];
  void *v32[2];
  __int128 v33;
  int v34;
  uint64_t v35[19];
  std::locale v36;

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v35[0] = MEMORY[0x1E0DE4FE0] + 64;
  v30 = v7;
  *(uint64_t *)((char *)&v31[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v31[-1] + *(_QWORD *)(v30 - 24));
  std::ios_base::init(v9, v31);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v30 = v4 + 24;
  v35[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v31[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v32 = 0u;
  v33 = 0u;
  v34 = 16;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"pass ", 5);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"name ", 5);
  v13 = *((char *)a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(const ROIStatIO::ROITestSet **)a2;
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 23);
  else
    v15 = *((_QWORD *)a2 + 1);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" frame ", 7);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" time ", 6);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"H", 1);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"M", 1);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"S", 1);
  std::stringbuf::str();
  if ((v29 & 0x80u) == 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  puts((const char *)v21);
  if ((char)v29 < 0)
    operator delete(__p[0]);
  v22 = (_QWORD *)ROIStatIO::_pThis;
  std::stringbuf::str();
  if ((v29 & 0x80u) == 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if ((v29 & 0x80u) == 0)
    v24 = v29;
  else
    v24 = (uint64_t)__p[1];
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
  v26 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v29 < 0)
    operator delete(__p[0]);
  v30 = *v6;
  *(uint64_t *)((char *)&v31[-1] + *(_QWORD *)(v30 - 24)) = v6[3];
  v31[0] = v10 + 16;
  if (SBYTE7(v33) < 0)
    operator delete(v32[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](v35);
}

void sub_1B2AB01A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2AB01B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2AB01CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E290BC](v1);
  _Unwind_Resume(a1);
}

void ROIStatIO::currNode(ROIStatIO *this, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  unint64_t v14;
  __int128 v15;
  std::string __p;
  _BYTE v17[12];
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_DWORD *)v17 = a3;
  *(_QWORD *)&v17[4] = 0xFFFFFFFFLL;
  v18 = 0x3FF0000000000000;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v5 = *((_QWORD *)this + 52);
  v6 = *((_QWORD *)this + 53);
  if (v5 != v6)
  {
    if (*(_DWORD *)(v5 + 24) == a3)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      while (1)
      {
        if ((std::string *)v5 == &__p)
          goto LABEL_40;
        v9 = *(unsigned __int8 *)(v5 + 23);
        if ((v9 & 0x80u) == 0)
          v10 = *(unsigned __int8 *)(v5 + 23);
        else
          v10 = *(_QWORD *)(v5 + 8);
        if (v10 == size)
        {
          if ((v9 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v5, p_p, *(_QWORD *)(v5 + 8)))
            {
LABEL_12:
              if (*(_DWORD *)(v5 + 24) == a3)
                goto LABEL_40;
            }
          }
          else
          {
            if (!*(_BYTE *)(v5 + 23))
              goto LABEL_12;
            v11 = 0;
            while (*(unsigned __int8 *)(v5 + v11) == p_p->__r_.__value_.__s.__data_[v11])
            {
              if (v9 == ++v11)
                goto LABEL_12;
            }
          }
        }
        v5 += 72;
        if (v5 == v6)
          goto LABEL_36;
      }
    }
    ROIStatIO::writeList(this);
    v12 = *((_QWORD *)this + 52);
    for (i = *((_QWORD *)this + 53); ; i -= 72)
    {
      if (i == v12)
      {
        *((_QWORD *)this + 53) = v12;
        break;
      }
      if (*(char *)(i - 1) < 0)
      {
        operator delete(*(void **)(i - 24));
        if ((*(char *)(i - 49) & 0x80000000) == 0)
          continue;
      }
      else if ((*(char *)(i - 49) & 0x80000000) == 0)
      {
        continue;
      }
      operator delete(*(void **)(i - 72));
    }
  }
LABEL_36:
  *((_QWORD *)this + 55) = time(0);
  v14 = *((_QWORD *)this + 53);
  if (v14 >= *((_QWORD *)this + 54))
  {
    *((_QWORD *)this + 53) = std::vector<ROIStatIO::ROITestSet>::__push_back_slow_path<ROIStatIO::ROITestSet const&>((uint64_t *)this + 52, (uint64_t)&__p);
    if (SHIBYTE(v21) < 0)
      goto LABEL_45;
LABEL_40:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_41;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(*((std::string **)this + 53), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v14 = v15;
  }
  *(_QWORD *)(v14 + 24) = *(_QWORD *)v17;
  *(_DWORD *)(v14 + 32) = *(_DWORD *)&v17[8];
  *(_QWORD *)(v14 + 40) = v18;
  *(_QWORD *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *((_QWORD *)this + 53) = v14 + 72;
  *((_QWORD *)this + 53) = v14 + 72;
  if ((SHIBYTE(v21) & 0x80000000) == 0)
    goto LABEL_40;
LABEL_45:
  operator delete(v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_41:
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B2AB0480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 424) = v10;
  ROIStatIO::ROITestSet::~ROITestSet(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AB0498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ROIStatIO::ROITestSet::~ROITestSet(&a9);
  _Unwind_Resume(a1);
}

void ROIStatIO::ROITestSet::~ROITestSet(void **this)
{
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*this);
    return;
  }
  operator delete(this[6]);
  if (*((char *)this + 23) < 0)
    goto LABEL_5;
}

void ROIStatIO::failed(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  std::string *v8;
  uint64_t v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  uint64_t v15;
  __int128 v16;
  std::string v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  void *__p;
  uint64_t v22;
  uint64_t v23;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  v18 = __PAIR64__(a4, a3);
  v19 = 0;
  v20 = 0xBFF0000000000000;
  __p = 0;
  v22 = 0;
  v23 = 0;
  v8 = (std::string *)a1[52];
  v7 = a1[53];
  if (v8 != (std::string *)v7)
  {
    if (LODWORD(v8[1].__r_.__value_.__l.__data_) != a3)
      goto LABEL_38;
    while (1)
    {
      while (v8 == &v17)
      {
LABEL_25:
        if (&v8[3] == (std::string *)v7)
        {
          v15 = (uint64_t)v8;
        }
        else
        {
          v14 = v8;
          do
          {
            std::string::operator=(v14, v14 + 3);
            v14[1].__r_.__value_.__r.__words[0] = v14[4].__r_.__value_.__r.__words[0];
            LODWORD(v14[1].__r_.__value_.__r.__words[1]) = v14[4].__r_.__value_.__r.__words[1];
            v14[1].__r_.__value_.__r.__words[2] = v14[4].__r_.__value_.__r.__words[2];
            v14 += 3;
            v15 = (uint64_t)v14;
          }
          while (&v14[3] != (std::string *)v7);
          v7 = a1[53];
        }
        while (v7 != v15)
        {
          if (*(char *)(v7 - 1) < 0)
          {
            operator delete(*(void **)(v7 - 24));
            if ((*(char *)(v7 - 49) & 0x80000000) == 0)
              goto LABEL_30;
          }
          else if ((*(char *)(v7 - 49) & 0x80000000) == 0)
          {
            goto LABEL_30;
          }
          operator delete(*(void **)(v7 - 72));
LABEL_30:
          v7 -= 72;
        }
        a1[53] = v15;
        v7 = v15;
        if (v8 == (std::string *)v15)
        {
LABEL_38:
          if (v7 < a1[54])
            goto LABEL_39;
LABEL_42:
          a1[53] = std::vector<ROIStatIO::ROITestSet>::__push_back_slow_path<ROIStatIO::ROITestSet const&>(a1 + 52, (uint64_t)&v17);
          if ((SHIBYTE(v23) & 0x80000000) == 0)
            goto LABEL_43;
LABEL_47:
          operator delete(__p);
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_48;
          return;
        }
      }
      v9 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
      if ((v9 & 0x80u) == 0)
        size = HIBYTE(v8->__r_.__value_.__r.__words[2]);
      else
        size = v8->__r_.__value_.__l.__size_;
      v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v11 = v17.__r_.__value_.__l.__size_;
      if (size != v11)
        goto LABEL_8;
      v12 = (v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v17
          : (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v9 & 0x80) != 0)
        break;
      if (!*((_BYTE *)&v8->__r_.__value_.__s + 23))
        goto LABEL_24;
      v13 = v8;
      while (v13->__r_.__value_.__s.__data_[0] == v12->__r_.__value_.__s.__data_[0])
      {
        v13 = (std::string *)((char *)v13 + 1);
        v12 = (std::string *)((char *)v12 + 1);
        if (!--v9)
          goto LABEL_24;
      }
LABEL_8:
      v8 += 3;
      if (v8 == (std::string *)v7)
        goto LABEL_38;
    }
    if (memcmp(v8->__r_.__value_.__l.__data_, v12, v8->__r_.__value_.__l.__size_))
      goto LABEL_8;
LABEL_24:
    if (LODWORD(v8[1].__r_.__value_.__l.__data_) != (_DWORD)v18)
      goto LABEL_8;
    goto LABEL_25;
  }
  v7 = a1[52];
  if ((unint64_t)v8 >= a1[54])
    goto LABEL_42;
LABEL_39:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v7, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  }
  else
  {
    v16 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)&v17.__r_.__value_.__l + 2);
    *(_OWORD *)v7 = v16;
  }
  *(_QWORD *)(v7 + 24) = v18;
  *(_DWORD *)(v7 + 32) = v19;
  *(_QWORD *)(v7 + 40) = v20;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  a1[53] = v7 + 72;
  a1[53] = v7 + 72;
  if (SHIBYTE(v23) < 0)
    goto LABEL_47;
LABEL_43:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
LABEL_48:
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1B2AB07A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 424) = v10;
  ROIStatIO::ROITestSet::~ROITestSet(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AB07BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ROIStatIO::ROITestSet::~ROITestSet(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AB07D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ROIStatIO::ROITestSet::~ROITestSet(&a9);
  _Unwind_Resume(a1);
}

void ROIStatIO::over(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, double a5)
{
  std::string *v9;
  unint64_t v10;
  std::string::size_type size;
  std::string *p_n;
  std::string *v13;
  uint64_t v14;
  std::string::size_type v15;
  uint64_t v16;
  double v17;
  size_t v18;
  std::string::size_type v19;
  std::string::size_type v20;
  int v21;
  std::string *v22;
  std::string *v23;
  uint64_t v24;
  const void *v25;
  std::string::size_type v26;
  int v27;
  std::string *v28;
  std::string::size_type v29;
  __int128 v30;
  uint64_t v31;
  std::string __n;
  unint64_t v33;
  int v34;
  double v35;
  void *__p;
  uint64_t v37;
  uint64_t v38;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__n, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __n = *(std::string *)a2;
  v33 = __PAIR64__(a4, a3);
  v34 = 1;
  v35 = a5;
  v37 = 0;
  v38 = 0;
  __p = 0;
  v9 = (std::string *)a1[52];
  v10 = a1[53];
  if (v9 == (std::string *)v10 || LODWORD(v9[1].__r_.__value_.__l.__data_) != a3)
  {
LABEL_71:
    if (v10 >= a1[54])
    {
      v31 = std::vector<ROIStatIO::ROITestSet>::__push_back_slow_path<ROIStatIO::ROITestSet const&>(a1 + 52, (uint64_t)&__n);
    }
    else
    {
      if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v10, __n.__r_.__value_.__l.__data_, __n.__r_.__value_.__l.__size_);
      }
      else
      {
        v30 = *(_OWORD *)&__n.__r_.__value_.__l.__data_;
        *(_QWORD *)(v10 + 16) = *((_QWORD *)&__n.__r_.__value_.__l + 2);
        *(_OWORD *)v10 = v30;
      }
      *(_QWORD *)(v10 + 24) = v33;
      *(_DWORD *)(v10 + 32) = v34;
      *(double *)(v10 + 40) = v35;
      *(_QWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      v31 = v10 + 72;
      a1[53] = v10 + 72;
    }
    a1[53] = v31;
    goto LABEL_78;
  }
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  else
    size = __n.__r_.__value_.__l.__size_;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_n = &__n;
  else
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
  v13 = (std::string *)a1[52];
  do
  {
    if (v13 == &__n)
    {
      v13 = &__n;
LABEL_29:
      v17 = *(double *)&v13[1].__r_.__value_.__r.__words[2];
      if (v17 > 0.0)
      {
        ++LODWORD(v13[1].__r_.__value_.__r.__words[1]);
        *(double *)&v13[1].__r_.__value_.__r.__words[2] = v17 + a5;
      }
      goto LABEL_78;
    }
    v14 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    if ((v14 & 0x80u) == 0)
      v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    else
      v15 = v13->__r_.__value_.__l.__size_;
    if (v15 == size)
    {
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(v13->__r_.__value_.__l.__data_, p_n, v13->__r_.__value_.__l.__size_))
          goto LABEL_14;
      }
      else if (*((_BYTE *)&v13->__r_.__value_.__s + 23))
      {
        v16 = 0;
        while (v13->__r_.__value_.__s.__data_[v16] == p_n->__r_.__value_.__s.__data_[v16])
        {
          if (v14 == ++v16)
            goto LABEL_25;
        }
        goto LABEL_14;
      }
LABEL_25:
      if (LODWORD(v13[1].__r_.__value_.__l.__data_) == a3 && HIDWORD(v13[1].__r_.__value_.__r.__words[0]) == a4)
        goto LABEL_29;
    }
LABEL_14:
    v13 += 3;
  }
  while (v13 != (std::string *)v10);
  v18 = __n.__r_.__value_.__l.__size_;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  else
    v19 = __n.__r_.__value_.__l.__size_;
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v25 = (const void *)__n.__r_.__value_.__r.__words[0];
    while (v9 != &__n)
    {
      v26 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      v27 = (char)v26;
      if ((v26 & 0x80u) != 0)
        v26 = v9->__r_.__value_.__l.__size_;
      if (v19 == v26)
      {
        v28 = v27 >= 0 ? v9 : (std::string *)v9->__r_.__value_.__r.__words[0];
        if (!memcmp(v25, v28, v18) && LODWORD(v9[1].__r_.__value_.__l.__data_) == a3)
        {
LABEL_69:
          if (HIDWORD(v9[1].__r_.__value_.__r.__words[0]) != -1)
            goto LABEL_85;
          std::string::operator=(v9, &__n);
          v9[1].__r_.__value_.__r.__words[0] = v33;
          LODWORD(v9[1].__r_.__value_.__r.__words[1]) = v34;
          *(double *)&v9[1].__r_.__value_.__r.__words[2] = v35;
          goto LABEL_78;
        }
      }
      v9 += 3;
      if (v9 == (std::string *)v10)
        goto LABEL_71;
    }
  }
  else if (*((_BYTE *)&__n.__r_.__value_.__s + 23))
  {
    while (&__n != v9)
    {
      v20 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      v21 = (char)v20;
      if ((v20 & 0x80u) != 0)
        v20 = v9->__r_.__value_.__l.__size_;
      if (v19 == v20)
      {
        if (v21 >= 0)
          v22 = v9;
        else
          v22 = (std::string *)v9->__r_.__value_.__r.__words[0];
        v23 = &__n;
        v24 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
        while (v23->__r_.__value_.__s.__data_[0] == v22->__r_.__value_.__s.__data_[0])
        {
          v23 = (std::string *)((char *)v23 + 1);
          v22 = (std::string *)((char *)v22 + 1);
          if (!--v24)
          {
            if (LODWORD(v9[1].__r_.__value_.__l.__data_) != a3)
              break;
            goto LABEL_69;
          }
        }
      }
      v9 += 3;
      if (v9 == (std::string *)v10)
        goto LABEL_71;
    }
  }
  else
  {
    while (v9 != &__n)
    {
      v29 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      if ((v29 & 0x80u) != 0)
        v29 = v9->__r_.__value_.__l.__size_;
      if (v19 == v29 && LODWORD(v9[1].__r_.__value_.__l.__data_) == a3)
        goto LABEL_69;
      v9 += 3;
      if (v9 == (std::string *)v10)
        goto LABEL_71;
    }
  }
  if (a4 != -1)
  {
    v9 = &__n;
LABEL_85:
    std::vector<ROIStatIO::ROITestSet>::insert(a1 + 52, (uint64_t)v9, &__n);
  }
LABEL_78:
  if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_82:
    operator delete(__n.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_82;
}

void sub_1B2AB0BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ROIStatIO::ROITestSet::~ROITestSet(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AB0BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 424) = v10;
  ROIStatIO::ROITestSet::~ROITestSet(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AB0BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ROIStatIO::ROITestSet::~ROITestSet(&a9);
  _Unwind_Resume(a1);
}

std::string *std::vector<ROIStatIO::ROITestSet>::insert(uint64_t *a1, uint64_t a2, std::string *__str)
{
  std::string *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::string *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  std::string *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *__p;
  char *v33;
  char *v34;
  char *v35;
  uint64_t *v36;

  v3 = __str;
  v5 = *a1;
  v6 = a1[1];
  v7 = (a2 - *a1) / 72;
  v8 = (std::string *)(*a1 + 72 * v7);
  v9 = a1[2];
  if (v6 < v9)
  {
    if (v8 == (std::string *)v6)
    {
      if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(*a1 + 72 * v7), __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      }
      else
      {
        v22 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
        v8->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v22;
      }
      v29 = v5 + 72 * v7;
      *(_QWORD *)(v29 + 24) = v3[1].__r_.__value_.__l.__data_;
      *(_DWORD *)(v29 + 32) = v3[1].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v29 + 40) = *((_QWORD *)&v3[1].__r_.__value_.__l + 2);
      *(_QWORD *)(v29 + 56) = 0;
      *(_QWORD *)(v29 + 64) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      a1[1] = (uint64_t)&v8[3];
    }
    else
    {
      v31 = (a2 - *a1) / 72;
      v10 = v6 - 72;
      v11 = a1[1];
      if (v6 >= 0x48)
      {
        v12 = 0;
        v13 = v5 + 8 * ((uint64_t)(v6 - (_QWORD)(v8 + 3)) >> 3) + 72 * v31;
        do
        {
          v16 = (__int128 *)(v10 + v12);
          v17 = (std::string *)(v6 + v12);
          if (*(char *)(v13 + v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v16, *(_QWORD *)(v13 + v12 + 8));
          }
          else
          {
            v14 = *v16;
            v17->__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v14;
          }
          v15 = v6 + v12;
          *(_QWORD *)(v15 + 24) = *(_QWORD *)(v13 + v12 + 24);
          *(_DWORD *)(v15 + 32) = *(_DWORD *)(v13 + v12 + 32);
          *(_QWORD *)(v15 + 40) = *(_QWORD *)(v13 + v12 + 40);
          *(_QWORD *)(v15 + 56) = 0;
          *(_QWORD *)(v15 + 64) = 0;
          *(_QWORD *)(v15 + 48) = 0;
          v12 += 72;
        }
        while (v10 + v12 < v6);
        v11 = v6 + v12;
      }
      a1[1] = v11;
      if ((std::string *)v6 != &v8[3])
      {
        v25 = 0;
        v26 = v5 + 8 * ((uint64_t)(v6 - (_QWORD)(v8 + 3)) >> 3) + 72 * v31;
        do
        {
          if (v26 != v6)
          {
            v27 = v6 + v25;
            std::string::operator=((std::string *)(v6 + v25 - 72), (const std::string *)(v26 + v25 - 72));
            *(_QWORD *)(v27 - 48) = *(_QWORD *)(v26 + v25 - 48);
            *(_DWORD *)(v27 - 40) = *(_DWORD *)(v26 + v25 - 40);
            *(_QWORD *)(v27 - 32) = *(_QWORD *)(v26 + v25 - 32);
          }
          v25 -= 72;
        }
        while (-8 * ((uint64_t)(v6 - (_QWORD)(v8 + 3)) >> 3) != v25);
      }
      if (v8 <= v3)
        v3 += 3 * (a1[1] > (unint64_t)v3);
      if (v8 != v3)
      {
        std::string::operator=(v8, v3);
        v28 = v5 + 72 * v31;
        *(_QWORD *)(v28 + 24) = v3[1].__r_.__value_.__l.__data_;
        *(_DWORD *)(v28 + 32) = v3[1].__r_.__value_.__r.__words[1];
        *(_QWORD *)(v28 + 40) = *((_QWORD *)&v3[1].__r_.__value_.__l + 2);
      }
    }
    return v8;
  }
  v18 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v5) >> 3) + 1;
  if (v18 > 0x38E38E38E38E38ELL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v5) >> 3);
  if (2 * v19 > v18)
    v18 = 2 * v19;
  if (v19 >= 0x1C71C71C71C71C7)
    v20 = 0x38E38E38E38E38ELL;
  else
    v20 = v18;
  v36 = a1 + 2;
  if (v20)
  {
    if (v20 > 0x38E38E38E38E38ELL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v21 = (char *)operator new(72 * v20);
  }
  else
  {
    v21 = 0;
  }
  __p = v21;
  v33 = &v21[72 * v7];
  v34 = v33;
  v35 = &v21[72 * v20];
  std::__split_buffer<ROIStatIO::ROITestSet>::push_back[abi:ne180100]((uint64_t)&__p, (__int128 *)v3);
  v8 = (std::string *)std::vector<ROIStatIO::ROITestSet>::__swap_out_circular_buffer(a1, &__p, (uint64_t)v8);
  v23 = v33;
  while (1)
  {
    v24 = v34;
    if (v34 == v23)
      break;
    v34 -= 72;
    if (*(v24 - 1) < 0)
    {
      operator delete(*((void **)v24 - 3));
      if (*(v24 - 49) < 0)
        goto LABEL_27;
    }
    else if (*(v24 - 49) < 0)
    {
LABEL_27:
      operator delete(*((void **)v24 - 9));
    }
  }
  if (__p)
    operator delete(__p);
  return v8;
}

void sub_1B2AB0F80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_1B2AB0F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ROIStatIO::ROITestSet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2AB0F9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8) = v2 + v3;
  _Unwind_Resume(a1);
}

void HGSampleRectStat::HGSampleRectStat(HGSampleRectStat *this, HGRect a2, HGRect a3, const HGNode *lpsrc, int a5)
{
  const HGNode *ActiveShaderNode;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  HGRasterizer *v13;

  ActiveShaderNode = lpsrc;
  v7 = *(_QWORD *)&a3.var2;
  v8 = *(_QWORD *)&a3.var0;
  v9 = *(_QWORD *)&a2.var2;
  v10 = *(_QWORD *)&a2.var0;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)lpsrc - 8) + 8);
  if ((char *)v12 == "12HGRasterizer"
    || (((unint64_t)"12HGRasterizer" & v12 & 0x8000000000000000) != 0) != __OFSUB__(v12, "12HGRasterizer")
    && !strcmp((const char *)(v12 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"12HGRasterizer" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    if (!v13)
      __cxa_bad_cast();
    ActiveShaderNode = (const HGNode *)HGRasterizer::getActiveShaderNode(v13);
  }
  *(_QWORD *)this = ActiveShaderNode;
  *((_QWORD *)this + 1) = v10;
  *((_QWORD *)this + 2) = v9;
  *((_QWORD *)this + 3) = v8;
  *((_QWORD *)this + 4) = v7;
  *((_DWORD *)this + 10) = a5;
  *(_OWORD *)((char *)this + 44) = xmmword_1B3523CB0;
  *((_WORD *)this + 30) = 0;
}

void HGSampleRectStat::~HGSampleRectStat(HGSampleRectStat *this)
{
  HGSampleRectStat::analyzeFull(this);
}

void HGSampleRectStat::analyzeFull(HGSampleRectStat *this)
{
  const char *v2;
  size_t v3;
  size_t v4;
  void **p_dst;
  uint64_t v6;
  uint64_t v7;
  char v8;
  size_t v9;
  void **v10;
  char *v11;
  uint64_t v12;
  ROIStatIO *v13;
  int v14;
  _DWORD *v15;
  int v16;
  unsigned int v17;
  float v18;
  unsigned int v19;
  _DWORD *v20;
  _DWORD *v21;
  char v22[24];
  void **__dst;
  size_t __n;
  int64_t v25;

  v2 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 48))(*(_QWORD *)this);
  v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (void **)operator new(v6 + 1);
    __n = v4;
    v25 = v7 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_8:
    v3 = (size_t)memmove(p_dst, v2, v4);
  *((_BYTE *)p_dst + v4) = 0;
  v22[23] = 8;
  strcpy(v22, "LiHeEdge");
  v8 = HIBYTE(v25);
  if (v25 >= 0)
    v9 = HIBYTE(v25);
  else
    v9 = __n;
  if (v9 != 8)
    goto LABEL_20;
  if ((v25 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v25))
      goto LABEL_36;
    v10 = (void **)&__dst;
    v11 = v22;
    v12 = HIBYTE(v25);
    while (*(unsigned __int8 *)v10 == *v11)
    {
      v10 = (void **)((char *)v10 + 1);
      ++v11;
      if (!--v12)
        goto LABEL_36;
    }
LABEL_20:
    v13 = (ROIStatIO *)ROIStatIO::open((ROIStatIO *)v3);
    if (MotionROIFrame::_pThis)
    {
      v14 = *(_DWORD *)MotionROIFrame::_pThis;
    }
    else
    {
      v15 = (_DWORD *)operator new();
      v14 = -1;
      *v15 = -1;
      MotionROIFrame::_pThis = (uint64_t)v15;
    }
    ROIStatIO::currNode(v13, (uint64_t)&__dst, v14);
    v16 = *((_DWORD *)this + 11);
    if (v16 != 999999)
    {
      if (*((_BYTE *)this + 60))
      {
        if (MotionROIFrame::_pThis)
        {
          v17 = *(_DWORD *)MotionROIFrame::_pThis;
        }
        else
        {
          v20 = (_DWORD *)operator new();
          v17 = -1;
          *v20 = -1;
          MotionROIFrame::_pThis = (uint64_t)v20;
        }
        ROIStatIO::failed((uint64_t *)v13, (uint64_t)&__dst, v17, *((_DWORD *)this + 10));
      }
      else
      {
        v18 = (float)((float)((float)(*((_DWORD *)this + 8) - *((_DWORD *)this + 6))
                            / (float)(*((_DWORD *)this + 13) - v16))
                    * (float)(*((_DWORD *)this + 9) - *((_DWORD *)this + 7)))
            / (float)(*((_DWORD *)this + 14) - *((_DWORD *)this + 12));
        if (v18 > 1.0)
        {
          if (MotionROIFrame::_pThis)
          {
            v19 = *(_DWORD *)MotionROIFrame::_pThis;
          }
          else
          {
            v21 = (_DWORD *)operator new();
            v19 = -1;
            *v21 = -1;
            MotionROIFrame::_pThis = (uint64_t)v21;
          }
          ROIStatIO::over((uint64_t *)v13, (uint64_t)&__dst, v19, *((_DWORD *)this + 10), v18);
        }
      }
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)), *(_DWORD *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24) + 32) | 4);
LABEL_36:
    if ((v8 & 0x80) == 0)
      return;
    goto LABEL_37;
  }
  v3 = memcmp(__dst, v22, __n);
  if ((_DWORD)v3)
    goto LABEL_20;
LABEL_37:
  operator delete(__dst);
}

void sub_1B2AB1378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  char v12;

  if (v12 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = MEMORY[0x1E0DE4FB0];
  *a1 = MEMORY[0x1E0DE4FB0] + 24;
  v3 = a1 + 52;
  a1[52] = v2 + 64;
  MEMORY[0x1B5E28E04](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1B5E290BC](v3);
  return a1;
}

void std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = MEMORY[0x1E0DE4FB0];
  *a1 = MEMORY[0x1E0DE4FB0] + 24;
  v2 = a1 + 52;
  a1[52] = v1 + 64;
  MEMORY[0x1B5E28E04](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1B5E290BC](v2);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'std::ofstream::~ofstream(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v2 = MEMORY[0x1E0DE4FB0];
  *v1 = MEMORY[0x1E0DE4FB0] + 24;
  v1[52] = v2 + 64;
  MEMORY[0x1B5E28E04](v1 + 1);
  std::ostream::~ostream();
  JUMPOUT(0x1B5E290BCLL);
}

{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v2 = MEMORY[0x1E0DE4FB0];
  *v1 = MEMORY[0x1E0DE4FB0] + 24;
  v1[52] = v2 + 64;
  MEMORY[0x1B5E28E04](v1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1B5E290BC](v1 + 52);
  JUMPOUT(0x1B5E29170);
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;

  v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[3];
  v5 = a1 + 1;
  v6 = a2[1];
  *a1 = v6;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v6 - 24)) = a2[2];
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v8 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v8 - 24)) = a2[3];
  MEMORY[0x1B5E28DF8](v5);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1B2AB161C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  _Unwind_Resume(a1);
}

uint64_t std::vector<ROIStatIO::ROITestSet>::__push_back_slow_path<ROIStatIO::ROITestSet const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  std::string *v8;
  char *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  void *__p;
  std::string *v15;
  std::string *v16;
  char *v17;
  uint64_t *v18;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  v18 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(72 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (std::string *)&v7[72 * v3];
  __p = v7;
  v15 = v8;
  v16 = v8;
  v17 = &v7[72 * v6];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v8 = v16;
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v9 = &v7[72 * v3];
  *((_QWORD *)v9 + 3) = *(_QWORD *)(a2 + 24);
  *((_DWORD *)v9 + 8) = *(_DWORD *)(a2 + 32);
  *((_QWORD *)v9 + 5) = *(_QWORD *)(a2 + 40);
  *((_QWORD *)v9 + 7) = 0;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 6) = 0;
  v16 = v8 + 3;
  std::vector<ROIStatIO::ROITestSet>::__swap_out_circular_buffer(a1, &__p);
  v10 = a1[1];
  v11 = v15;
  while (1)
  {
    v12 = v16;
    if (v16 == v11)
      break;
    v16 -= 3;
    if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v12[-1].__r_.__value_.__l.__data_);
      if (SHIBYTE(v12[-3].__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
    }
    else if (SHIBYTE(v12[-3].__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_20:
      operator delete(v12[-3].__r_.__value_.__l.__data_);
    }
  }
  if (__p)
    operator delete(__p);
  return v10;
}

void sub_1B2AB1808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ROIStatIO::ROITestSet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<ROIStatIO::ROITestSet>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  const std::string::value_type **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    v7 = 0;
    do
    {
      v10 = (std::string *)(v6 + v7 - 72);
      v11 = (const std::string::value_type **)(v4 + v7 - 72);
      if (*(char *)(v4 + v7 - 49) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *v11, *(_QWORD *)(v4 + v7 - 64));
      }
      else
      {
        v8 = *(_OWORD *)v11;
        *(_QWORD *)(v6 + v7 - 56) = *(_QWORD *)(v4 + v7 - 56);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v8;
      }
      v9 = v6 + v7;
      *(_QWORD *)(v9 - 48) = *(_QWORD *)(v4 + v7 - 48);
      *(_DWORD *)(v9 - 40) = *(_DWORD *)(v4 + v7 - 40);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(v4 + v7 - 32);
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      v7 -= 72;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v12 = *a1;
  *a1 = v6;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
}

void sub_1B2AB1910(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    std::vector<ROIStatIO::ROITestSet>::__swap_out_circular_buffer(v1 + v2, v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<ROIStatIO::ROITestSet>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 49) & 0x80000000) == 0)
        continue;
    }
    else if ((*(char *)(i - 49) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double std::__split_buffer<ROIStatIO::ROITestSet>::push_back[abi:ne180100](uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  std::string *v26;
  __int128 *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  double result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != *(_QWORD *)(a1 + 24))
    goto LABEL_24;
  v6 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 > *(_QWORD *)a1)
  {
    v7 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *(_QWORD *)a1) >> 3);
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    if (v5 == v4)
    {
      v28 = v5 - 72 * v9;
    }
    else
    {
      v11 = -72 * v9;
      do
      {
        if (v11)
        {
          v12 = v5 + v11;
          std::string::operator=((std::string *)(v5 + v11), (const std::string *)v5);
          *(_QWORD *)(v12 + 24) = *(_QWORD *)(v5 + 24);
          *(_DWORD *)(v12 + 32) = *(_DWORD *)(v5 + 32);
          *(_QWORD *)(v12 + 40) = *(_QWORD *)(v5 + 40);
        }
        v5 += 72;
      }
      while (v5 != v4);
      v4 = *(_QWORD *)(a1 + 8);
      v28 = v5 + 72 * v10;
    }
    *(_QWORD *)(a1 + 8) = v4 + 72 * v10;
    *(_QWORD *)(a1 + 16) = v28;
    v4 = v28;
LABEL_24:
    if (*((char *)a2 + 23) < 0)
      goto LABEL_38;
    goto LABEL_25;
  }
  v13 = 0x1C71C71C71C71C72 * ((uint64_t)(v4 - (_QWORD)v6) >> 3);
  if ((void *)v4 == v6)
    v13 = 1;
  if (v13 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v14 = v13 >> 2;
  v15 = 72 * v13;
  v16 = (char *)operator new(72 * v13);
  v17 = &v16[72 * v14];
  v18 = &v16[v15];
  v19 = v4 - v5;
  if (v4 == v5)
  {
    v29 = v4;
    v22 = v17;
  }
  else
  {
    v20 = 0;
    v21 = v19 / 72;
    v22 = &v17[72 * v21];
    v23 = 72 * v21;
    do
    {
      v26 = (std::string *)&v17[v20];
      v27 = (__int128 *)(v5 + v20);
      if (*(char *)(v5 + v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
      }
      else
      {
        v24 = *v27;
        v26->__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v24;
      }
      v25 = &v17[v20];
      *((_QWORD *)v25 + 3) = *(_QWORD *)(v5 + v20 + 24);
      *((_DWORD *)v25 + 8) = *(_DWORD *)(v5 + v20 + 32);
      *((_QWORD *)v25 + 5) = *(_QWORD *)(v5 + v20 + 40);
      *((_QWORD *)v25 + 7) = 0;
      *((_QWORD *)v25 + 8) = 0;
      *((_QWORD *)v25 + 6) = 0;
      v20 += 72;
    }
    while (v23 != v20);
    v6 = *(void **)a1;
    v29 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v18;
  while (v4 != v29)
  {
    if (*(char *)(v4 - 1) < 0)
    {
      operator delete(*(void **)(v4 - 24));
      if ((*(char *)(v4 - 49) & 0x80000000) == 0)
        goto LABEL_28;
    }
    else if ((*(char *)(v4 - 49) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(*(void **)(v4 - 72));
LABEL_28:
    v4 -= 72;
  }
  if (v6)
    operator delete(v6);
  v4 = *(_QWORD *)(a1 + 16);
  if (*((char *)a2 + 23) < 0)
  {
LABEL_38:
    std::string::__init_copy_ctor_external((std::string *)v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    goto LABEL_39;
  }
LABEL_25:
  v30 = *a2;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v4 = v30;
LABEL_39:
  *(_QWORD *)(v4 + 24) = *((_QWORD *)a2 + 3);
  *(_DWORD *)(v4 + 32) = *((_DWORD *)a2 + 8);
  result = *((double *)a2 + 5);
  *(double *)(v4 + 40) = result;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(a1 + 16) += 72;
  return result;
}

void sub_1B2AB1C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  a12 = v13 + v12;
  std::__split_buffer<ROIStatIO::ROITestSet>::~__split_buffer((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ROIStatIO::ROITestSet>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::string *v12;
  const std::string::value_type **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  std::string *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2[1];
  v7 = *a1;
  v8 = v6;
  if (*a1 != a3)
  {
    v9 = 0;
    do
    {
      v12 = (std::string *)(v6 + v9 - 72);
      v13 = (const std::string::value_type **)(a3 + v9 - 72);
      if (*(char *)(a3 + v9 - 49) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *v13, *(_QWORD *)(a3 + v9 - 64));
      }
      else
      {
        v10 = *(_OWORD *)v13;
        *(_QWORD *)(v6 + v9 - 56) = *(_QWORD *)(a3 + v9 - 56);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v10;
      }
      v11 = v6 + v9;
      *(_QWORD *)(v11 - 48) = *(_QWORD *)(a3 + v9 - 48);
      *(_DWORD *)(v11 - 40) = *(_DWORD *)(a3 + v9 - 40);
      *(_QWORD *)(v11 - 32) = *(_QWORD *)(a3 + v9 - 32);
      *(_QWORD *)(v11 - 16) = 0;
      *(_QWORD *)(v11 - 8) = 0;
      *(_QWORD *)(v11 - 24) = 0;
      v9 -= 72;
    }
    while (a3 + v9 != v7);
    v8 = v6 + v9;
  }
  a2[1] = v8;
  v14 = a1[1];
  v15 = a2[2];
  if (v14 != a3)
  {
    v16 = 0;
    do
    {
      v19 = (std::string *)(v15 + v16);
      v20 = (__int128 *)(a3 + v16);
      if (*(char *)(a3 + v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
      }
      else
      {
        v17 = *v20;
        v19->__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v17;
      }
      v18 = v15 + v16;
      *(_QWORD *)(v18 + 24) = *(_QWORD *)(a3 + v16 + 24);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(a3 + v16 + 32);
      *(_QWORD *)(v18 + 40) = *(_QWORD *)(a3 + v16 + 40);
      *(_QWORD *)(v18 + 56) = 0;
      *(_QWORD *)(v18 + 64) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      v16 += 72;
    }
    while (a3 + v16 != v14);
    v8 = a2[1];
    v15 += v16;
  }
  a2[2] = v15;
  v21 = *a1;
  *a1 = v8;
  a2[1] = v21;
  v22 = a1[1];
  a1[1] = a2[2];
  a2[2] = v22;
  v23 = a1[2];
  a1[2] = a2[3];
  a2[3] = v23;
  *a2 = a2[1];
  return v6;
}

void sub_1B2AB1E30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
  {
    std::vector<ROIStatIO::ROITestSet>::__swap_out_circular_buffer(v1 + v2, v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<ROIStatIO::ROITestSet>::__swap_out_circular_buffer(uint64_t a1, uint64_t a2)
{
  do
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    a1 += 72;
  }
  while (a1 != a2);
  OUTLINED_FUNCTION_0_4();
}

{
  do
  {
    if (*(char *)(a1 - 1) < 0)
      operator delete(*(void **)(a1 - 24));
    if (*(char *)(a1 - 49) < 0)
      operator delete(*(void **)(a1 - 72));
    a1 -= 72;
  }
  while (a1 != a2);
  OUTLINED_FUNCTION_0_4();
}

void HGAnisotropicSampler::~HGAnisotropicSampler(HGNode *this)
{
  void *v2;

  *(_QWORD *)this = off_1E652A2A8;
  v2 = (void *)*((_QWORD *)this + 63);
  if (v2)
    free(v2);
  HGNode::~HGNode(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E652A2A8;
  v2 = (void *)*((_QWORD *)this + 63);
  if (v2)
    free(v2);
  HGNode::~HGNode(this);
  HGObject::operator delete(v3);
}

uint64_t HGAnisotropicSampler::Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t MatrixPtr;
  unsigned int v27;
  unsigned int v28;
  float64x2_t v29;
  uint64_t v31;
  float64x2_t *v32;
  int v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD v38[19];

  v15 = a6 - a5 + 1;
  if (*(_DWORD *)(a1 + 500) <= a6 - a5)
    *(_QWORD *)(a1 + 504) = malloc_type_realloc(*(void **)(a1 + 504), 32 * v15, 0x1000040E0EAB150uLL);
  *(_QWORD *)(a1 + 480) = a3;
  *(_QWORD *)(a1 + 488) = a4;
  *(_DWORD *)(a1 + 496) = a5;
  *(_DWORD *)(a1 + 500) = v15;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 27);
  v17 = a5;
  if (a6 >= a5)
  {
    v18 = v16;
    v35 = a3;
    v19 = 0;
    v20 = 0;
    v36 = a8 - a7;
    v21 = HIDWORD(a8) - HIDWORD(a7);
    v34 = a6 + 1;
    v22 = ~a6 + a5;
    while (1)
    {
      v23 = a5 + v20;
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 584))(a4, a2, (a5 + v20));
      if (!v24)
        break;
      v25 = v24;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 600))(v38, a4, (a5 + v20), 0);
      MatrixPtr = HGTransform::GetMatrixPtr((HGTransform *)v38);
      *(float *)&v27 = *(double *)MatrixPtr;
      *(float *)&v28 = *(double *)(MatrixPtr + 40);
      *(_OWORD *)(*(_QWORD *)(a1 + 504) + v19) = __PAIR64__(v28, v27);
      v29 = *(float64x2_t *)(MatrixPtr + 96);
      *(float32x2_t *)&v29.f64[0] = vcvt_f32_f64(v29);
      *(float64x2_t *)(*(_QWORD *)(a1 + 504) + v19 + 16) = v29;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v20, v25);
      if (v21 >> v23 > v18 || v36 >> v23 > v18)
        v31 = 25;
      else
        v31 = 17;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v20, v31);
      HGTransform::~HGTransform((HGTransform *)v38);
      v20 = (v20 + 1);
      v19 += 32;
      if (!(v22 + (_DWORD)v20))
      {
        a3 = v35;
        v17 = v34;
        goto LABEL_15;
      }
    }
    v17 = a5 + v20;
    a3 = v35;
  }
LABEL_15:
  *(_DWORD *)(a1 + 500) = v17 - a5;
  v32 = (float64x2_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 448) + 272))(*(_QWORD *)(a3 + 448));
  *(float32x4_t *)(a1 + 416) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v32), v32[1]);
  *(float32x4_t *)(a1 + 432) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v32[2]), v32[3]);
  *(float32x4_t *)(a1 + 448) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v32[4]), v32[5]);
  *(float32x4_t *)(a1 + 464) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v32[6]), v32[7]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, 0xFFFFFFFFLL, 32);
  return (v17 - 1);
}

void sub_1B2AB21D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGTransform::~HGTransform((HGTransform *)va);
  _Unwind_Resume(a1);
}

HGAnisotropicSampler *HGAnisotropicSampler::GetOutput(HGAnisotropicSampler *this, HGRenderer *a2)
{
  *((_BYTE *)this + 512) = (*(unsigned int (**)(HGAnisotropicSampler *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) == 0;
  return this;
}

uint64_t HGAnisotropicSampler::GetDOD(HGAnisotropicSampler *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  HGRect v30;

  if (*((_DWORD *)this + 125) <= a3)
    return 0;
  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  v9 = *(_QWORD *)(*((_QWORD *)this + 61) + 740);
  v10 = *(_QWORD *)(*((_QWORD *)this + 61) + 748);
  if ((*(int (**)(HGAnisotropicSampler *))(*(_QWORD *)this + 312))(this) >= 1)
  {
    v11 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v5 = HGRectGrow(v5, v4, v11);
    v4 = v12;
    v13 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v9 = HGRectGrow(v9, v10, v13);
    v10 = v14;
  }
  v15 = *((_QWORD *)this + 61);
  v16 = (*((_DWORD *)this + 124) + a3);
  v17 = (*(uint64_t (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v15 + 592))(v15, v16, v5, v4, 0, 0, v17);
  v20 = HGRectIntersection(v18, v19, v9, v10);
  v22 = v21;
  LODWORD(v23) = 0;
  *(_QWORD *)&v30.var0 = v20;
  *(_QWORD *)&v30.var2 = v22;
  v25 = hg_dod(*(HGTransform **)(*((_QWORD *)this + 60) + 456), v30, v23, v24);
  v27 = v26;
  if (*(int *)(*((_QWORD *)this + 60) + 436) > 1)
  {
    v28 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v25, v27, v28);
  }
  return v25;
}

uint64_t hg_dod(HGTransform *a1, HGRect a2, double a3, float a4)
{
  float v4;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  float64x2_t v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  double v20;
  float32x2_t *v21;
  float *v22;
  float32x2_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float32x2_t v28;
  float64x2_t v29;
  float32x2_t v30;
  double v31;
  double v32;
  double v33;
  float32x2_t *v34;
  float32x2_t v35;
  float32x2_t v36;
  float64x2_t v37;
  float32x2_t v38;
  double v39;
  double v40;
  float64x2_t v41;
  double v42;
  double v43;
  _BYTE v44[12];
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;

  v4 = *(float *)&a3;
  v61 = *MEMORY[0x1E0C80C00];
  v49 = (float)a2.var0 - *(float *)&a3;
  v50 = (float)a2.var1 - *(float *)&a3;
  v51 = 0x3F80000000000000;
  v52 = (float)a2.var2 + *(float *)&a3;
  v53 = v50;
  v54 = 0x3F80000000000000;
  v55 = v52;
  v56 = (float)a2.var3 + *(float *)&a3;
  v57 = 0x3F80000000000000;
  v58 = v49;
  v59 = v56;
  v60 = 0x3F80000000000000;
  (*(void (**)(HGTransform *, _BYTE *, float *, uint64_t))(*(_QWORD *)a1 + 208))(a1, v44, &v49, 4);
  v6.n128_u32[0] = 897988541;
  v7.n128_f32[0] = v47;
  v8.n128_f32[0] = v48;
  v9 = (v45 < 0.000001) | (2 * (v46 < 0.000001)) | (4 * (v47 < 0.000001)) | (8 * (v48 < 0.000001));
  if (v9 == 15)
    return 0;
  v11 = (*(uint64_t (**)(HGTransform *, __n128, __n128, __n128))(*(_QWORD *)a1 + 272))(a1, v6, v7, v8);
  v12 = 0;
  v13.f64[0] = *(float64_t *)(v11 + 24);
  v14 = *(double *)(v11 + 120) + -0.000000999999997;
  v42 = *(double *)(v11 + 56);
  v43 = v13.f64[0];
  v15 = INFINITY;
  v16 = -INFINITY;
  v13.f64[1] = v42;
  v41 = v13;
  v17 = -INFINITY;
  v18 = INFINITY;
  do
  {
    if (((v9 >> v12) & 1) == 0)
    {
      v22 = (float *)&v44[16 * v12];
      v25 = v22[3];
      v26 = *v22 / v25;
      v27 = v22[1] / v25;
      *v22 = v26;
      v22[1] = v27;
      v18 = fminf(v18, v26);
      v17 = fmaxf(v17, v26);
      v15 = fminf(v15, v27);
      v16 = fmaxf(v16, v27);
      v24 = v12 + 1;
      goto LABEL_7;
    }
    v24 = v12 + 1;
    if (((v9 >> ((v12 + 1) & 3)) & 1) != 0)
    {
      v22 = (float *)(((_BYTE)v12 - 1) & 3);
      if (((v9 >> (char)v22) & 1) != 0)
        goto LABEL_7;
LABEL_18:
      v36 = *(float32x2_t *)(&v49 + 4 * v12);
      v37 = vcvtq_f64_f32(v36);
      v38 = *(float32x2_t *)(&v49 + 4 * v22);
      v39 = v14 + v43 * v37.f64[0] + vmuld_lane_f64(v42, v37, 1);
      v40 = vaddvq_f64(vmulq_f64(v41, vsubq_f64(v37, vcvtq_f64_f32(v38))));
      if (v40 == 0.0)
      {
        v19 = v39 < 0.0;
        v20 = INFINITY;
        if (v19)
          v20 = -INFINITY;
      }
      else
      {
        v20 = v39 / v40;
      }
      v21 = (float32x2_t *)&v44[16 * v12];
      *v21 = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vcvtq_f64_f32(vsub_f32(v38, v36)), v20), v37));
      v21[1] = (float32x2_t)0x3F80000000000000;
      (*(void (**)(HGTransform *, float32x2_t *, float32x2_t *, uint64_t))(*(_QWORD *)a1 + 208))(a1, v21, v21, 1);
      v21[1].i32[1] = 897988541;
      v23 = vdiv_f32(*v21, (float32x2_t)vdup_n_s32(0x358637BDu));
      *v21 = v23;
      v18 = fminf(v18, v23.f32[0]);
      v17 = fmaxf(v17, v23.f32[0]);
      v15 = fminf(v15, v23.f32[1]);
      v16 = fmaxf(v16, v23.f32[1]);
      goto LABEL_7;
    }
    v28 = *(float32x2_t *)(&v49 + 4 * v12);
    v29 = vcvtq_f64_f32(v28);
    v30 = *(float32x2_t *)(&v49 + 4 * (v24 & 3));
    v31 = v14 + v43 * v29.f64[0] + vmuld_lane_f64(v42, v29, 1);
    v32 = vaddvq_f64(vmulq_f64(v41, vsubq_f64(v29, vcvtq_f64_f32(v30))));
    if (v32 == 0.0)
    {
      v19 = v31 < 0.0;
      v33 = INFINITY;
      if (v19)
        v33 = -INFINITY;
    }
    else
    {
      v33 = v31 / v32;
    }
    v34 = (float32x2_t *)&v44[16 * v12];
    *v34 = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vcvtq_f64_f32(vsub_f32(v30, v28)), v33), v29));
    v34[1] = (float32x2_t)0x3F80000000000000;
    (*(void (**)(HGTransform *, float32x2_t *, float32x2_t *, uint64_t))(*(_QWORD *)a1 + 208))(a1, v34, v34, 1);
    v34[1].i32[1] = 897988541;
    v35 = vdiv_f32(*v34, (float32x2_t)vdup_n_s32(0x358637BDu));
    *v34 = v35;
    v18 = fminf(v18, v35.f32[0]);
    v17 = fmaxf(v17, v35.f32[0]);
    v15 = fminf(v15, v35.f32[1]);
    v16 = fmaxf(v16, v35.f32[1]);
    v22 = (float *)(((_BYTE)v12 - 1) & 3);
    if (((v9 >> (char)v22) & 1) == 0)
      goto LABEL_18;
LABEL_7:
    v12 = v24;
  }
  while (v24 != 4);
  return HGRectMake4f((uint64_t)v22, v18 - v4, v15 - v4, v17 + v4, v16 + v4);
}

uint64_t HGAnisotropicSampler::GetROI(HGAnisotropicSampler *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  HGTransform *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  double v19;
  double v20;
  int v21;
  int v22;
  HGGPURenderer *v23;
  unsigned int MaxTileArea;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  HGRenderer *v41;
  uint64_t v42;
  uint64_t v43;
  float64x2_t v44;
  double v45;
  float v46;
  float v47;
  float32x2_t v48;
  float v49;
  float v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  float32x2_t v56;
  float64x2_t v57;
  float32x2_t v58;
  double v59;
  double v60;
  double v61;
  BOOL v62;
  float32x2_t *v63;
  float32x2_t v64;
  float32x2_t v65;
  float64x2_t v66;
  float32x2_t v67;
  double v68;
  double v69;
  double v70;
  float32x2_t *v71;
  float32x2_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float64x2_t v80;
  double v81;
  double v82;
  int v83;
  int v86[2];
  _BYTE v87[12];
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  uint64_t v94;
  float v95;
  float v96;
  uint64_t v97;
  float v98;
  float v99;
  uint64_t v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  HGRect v105;
  HGRect v106;

  v104 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 125) <= a3)
    return 0;
  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  v7 = (*(uint64_t (**)(HGAnisotropicSampler *))(*(_QWORD *)this + 312))(this);
  v8 = *(HGTransform **)(*((_QWORD *)this + 60) + 448);
  v9 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  v10 = HGRectGrow(v5, v4, v9);
  v13 = v12;
  v14 = *((_QWORD *)this + 60);
  v16 = *(_QWORD *)(v14 + 464);
  v15 = *(_QWORD *)(v14 + 472);
  v83 = v7;
  v17 = v7 <= 0 ? 0.5 : 1.5;
  v18 = *(float *)(v14 + 424);
  HIDWORD(v19) = *(int *)(v14 + 436) >> 31;
  v20 = (double)*(int *)(v14 + 436);
  v21 = *(_DWORD *)(v14 + 480);
  v22 = *(_DWORD *)(v14 + 484);
  if (a2
  {
    MaxTileArea = HGGPURenderer::GetMaxTileArea(v23);
  }
  else
  {
    MaxTileArea = 0x1000000;
  }
  *(_QWORD *)&v105.var0 = v10;
  *(_QWORD *)&v105.var2 = v13;
  *(_QWORD *)&v106.var0 = v16;
  *(_QWORD *)&v106.var2 = v15;
  *(float *)&v19 = v17;
  v25 = hg_clip(v8, v105, v106, v19, v18, v20, v11, v86, v21, v22, MaxTileArea);
  if (HGRectIsNull(v25, v26))
    return 0;
  v29 = a3;
  v30 = *((_DWORD *)this + 124) + a3;
  if ((a3 != 7 || v30 >= v86[0]) && (v30 < v86[0] || v30 > v86[1]))
    return 0;
  v31 = *((_QWORD *)this + 60);
  if (*(int *)(v31 + 436) >= 2)
  {
    v32 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v5 = HGRectGrow(v5, v4, v32);
    v4 = v33;
    v31 = *((_QWORD *)this + 60);
  }
  v34 = *(_QWORD *)(v31 + 448);
  v92 = (float)(int)v5 + 0.5;
  v93 = (float)SHIDWORD(v5) + 0.5;
  v94 = 0x3F80000000000000;
  v95 = (float)(int)v4 + -0.5;
  v96 = v93;
  v97 = 0x3F80000000000000;
  v98 = v95;
  v99 = (float)SHIDWORD(v4) + -0.5;
  v100 = 0x3F80000000000000;
  v101 = v92;
  v102 = v99;
  v103 = 0x3F80000000000000;
  (*(void (**)(uint64_t, _BYTE *, float *, uint64_t))(*(_QWORD *)v34 + 208))(v34, v87, &v92, 4);
  v35.n128_u32[0] = 897988541;
  v36.n128_f32[0] = v90;
  v37.n128_f32[0] = v91;
  v38 = (v88 < 0.000001) | (2 * (v89 < 0.000001)) | (4 * (v90 < 0.000001)) | (8 * (v91 < 0.000001));
  if (v38 != 15 && (!v38 || (int)v4 - (uint64_t)(int)v5 > 1 || (v4 >> 32) - (v5 >> 32) > 1))
  {
    v42 = (*(uint64_t (**)(uint64_t, __n128, __n128, __n128))(*(_QWORD *)v34 + 272))(v34, v35, v36, v37);
    v43 = 0;
    v44.f64[0] = *(float64_t *)(v42 + 24);
    v45 = *(double *)(v42 + 120) + -0.000000999999997;
    v81 = *(double *)(v42 + 56);
    v82 = v44.f64[0];
    v44.f64[1] = v81;
    v80 = v44;
    v46 = INFINITY;
    v47 = -INFINITY;
    v48 = (float32x2_t)vdup_n_s32(0x358637BDu);
    v49 = -INFINITY;
    v50 = INFINITY;
    while (1)
    {
      if (((v38 >> v43) & 1) != 0)
      {
        v55 = v43 + 1;
        if (((v38 >> ((v43 + 1) & 3)) & 1) == 0)
        {
          v56 = *(float32x2_t *)(&v92 + 4 * v43);
          v57 = vcvtq_f64_f32(v56);
          v58 = *(float32x2_t *)(&v92 + 4 * (v55 & 3));
          v59 = v45 + v82 * v57.f64[0] + vmuld_lane_f64(v81, v57, 1);
          v60 = vaddvq_f64(vmulq_f64(v80, vsubq_f64(v57, vcvtq_f64_f32(v58))));
          if (v60 == 0.0)
          {
            v62 = v59 < 0.0;
            v61 = INFINITY;
            if (v62)
              v61 = -INFINITY;
          }
          else
          {
            v61 = v59 / v60;
          }
          v63 = (float32x2_t *)&v87[16 * v43];
          *v63 = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vcvtq_f64_f32(vsub_f32(v58, v56)), v61), v57));
          v63[1] = (float32x2_t)0x3F80000000000000;
          (*(void (**)(uint64_t, float32x2_t *, float32x2_t *, uint64_t))(*(_QWORD *)v34 + 208))(v34, v63, v63, 1);
          v63[1].i32[1] = 897988541;
          v64 = vdiv_f32(*v63, v48);
          *v63 = v64;
          v50 = fminf(v50, v64.f32[0]);
          v49 = fmaxf(v49, v64.f32[0]);
          v46 = fminf(v46, v64.f32[1]);
          v47 = fmaxf(v47, v64.f32[1]);
          v51 = (float *)(((_BYTE)v43 - 1) & 3);
          if (((v38 >> (char)v51) & 1) != 0)
            goto LABEL_25;
LABEL_35:
          v65 = *(float32x2_t *)(&v92 + 4 * v43);
          v66 = vcvtq_f64_f32(v65);
          v67 = *(float32x2_t *)(&v92 + 4 * v51);
          v68 = v45 + v82 * v66.f64[0] + vmuld_lane_f64(v81, v66, 1);
          v69 = vaddvq_f64(vmulq_f64(v80, vsubq_f64(v66, vcvtq_f64_f32(v67))));
          if (v69 == 0.0)
          {
            v62 = v68 < 0.0;
            v70 = INFINITY;
            if (v62)
              v70 = -INFINITY;
          }
          else
          {
            v70 = v68 / v69;
          }
          v71 = (float32x2_t *)&v87[16 * v43];
          *v71 = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vcvtq_f64_f32(vsub_f32(v67, v65)), v70), v66));
          v71[1] = (float32x2_t)0x3F80000000000000;
          (*(void (**)(uint64_t, float32x2_t *, float32x2_t *, uint64_t))(*(_QWORD *)v34 + 208))(v34, v71, v71, 1);
          v71[1].i32[1] = 897988541;
          v72 = vdiv_f32(*v71, v48);
          *v71 = v72;
          v50 = fminf(v50, v72.f32[0]);
          v49 = fmaxf(v49, v72.f32[0]);
          v46 = fminf(v46, v72.f32[1]);
          v47 = fmaxf(v47, v72.f32[1]);
          goto LABEL_25;
        }
        v51 = (float *)(((_BYTE)v43 - 1) & 3);
        if (((v38 >> (char)v51) & 1) == 0)
          goto LABEL_35;
      }
      else
      {
        v51 = (float *)&v87[16 * v43];
        v52 = v51[3];
        v53 = *v51 / v52;
        v54 = v51[1] / v52;
        *v51 = v53;
        v51[1] = v54;
        v50 = fminf(v50, v53);
        v49 = fmaxf(v49, v53);
        v46 = fminf(v46, v54);
        v47 = fmaxf(v47, v54);
        v55 = v43 + 1;
      }
LABEL_25:
      v43 = v55;
      if (v55 == 4)
      {
        v39 = HGRectMake4f((uint64_t)v51, v50, v46, v49 + 0.0, v47 + 0.0);
        v40 = v73;
        v41 = a2;
        v29 = a3;
        goto LABEL_41;
      }
    }
  }
  v39 = 0;
  v40 = 0;
  v41 = a2;
LABEL_41:
  v74 = *((_QWORD *)this + 61);
  v75 = (*((_DWORD *)this + 124) + v29);
  v76 = (*(uint64_t (**)(HGRenderer *, __n128, __n128, __n128))(*(_QWORD *)v41 + 304))(v41, v35, v36, v37);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v74 + 592))(v74, v75, v39, v40, 1, 0, v76);
  v78 = v77;
  if (v83 >= 1)
  {
    v79 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v27, v78, v79);
  }
  return v27;
}

uint64_t hg_clip(HGTransform *a1, HGRect a2, HGRect a3, double a4, float a5, double a6, double a7, int *a8, int a9, int a10, unsigned int a11)
{
  uint64_t v14;
  float v16;
  uint64_t v17;
  int var1;
  int var3;
  int v21;
  unsigned int v22;
  float v23;
  unsigned int v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  unsigned int v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v35;
  uint64_t v36;
  float64x2_t v37;
  double v38;
  float v39;
  float v40;
  double v41;
  double v42;
  float v43;
  float v44;
  float v45;
  float v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  float *v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  double v55;
  float v56;
  double v57;
  long double v58;
  double v59;
  float32x2_t v60;
  float64x2_t v61;
  float32x2_t v62;
  double v63;
  double v64;
  float v65;
  float v66;
  double v67;
  BOOL v68;
  float32x2_t *v69;
  float32x2_t v70;
  uint64_t v71;
  double v72;
  double v73;
  long double v74;
  double v75;
  float v76;
  float32x2_t v77;
  float64x2_t v78;
  float32x2_t v79;
  double v80;
  double v81;
  float v82;
  float v83;
  double v84;
  float32x2_t *v85;
  float32x2_t v86;
  uint64_t v87;
  double v88;
  double v89;
  long double v90;
  double v91;
  float v92;
  double v93;
  float v94;
  float v95;
  float v96;
  unint64_t v97;
  float v98;
  uint64_t v100;
  float v101;
  int v102;
  int var2;
  int v104;
  int var0;
  double v106;
  double v107;
  float64x2_t v108;
  double v109;
  double v110;
  double v111;
  double v113;
  float v114;
  float32x2_t v115;
  float32x2_t v116;
  double v117;
  float v118;
  float v119;
  __int128 v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  uint64_t v126;
  float v127;
  float v128;
  uint64_t v129;
  float v130;
  float v131;
  uint64_t v132;
  float v133;
  float v134;
  uint64_t v135;
  uint64_t v136;

  v14 = *(_QWORD *)&a2.var2;
  v16 = *(float *)&a4;
  v17 = *(_QWORD *)&a2.var0;
  v136 = *MEMORY[0x1E0C80C00];
  var1 = a2.var1;
  var3 = a2.var3;
  v104 = a3.var1;
  var0 = a3.var0;
  var2 = a3.var2;
  v21 = a3.var3;
  v120 = xmmword_1B30530B0;
  (*(void (**)(HGTransform *, float *, __int128 *, uint64_t))(*(_QWORD *)a1 + 208))(a1, &v124, &v120, 1);
  v102 = v21;
  if (((v14 - v17) < 5 || (var3 - var1) <= 4) && a9 < a10)
  {
    v22 = (v21 - v104) * (var2 - var0);
    v23 = sqrtf((float)((float)((float)(v124 * v124) + (float)(v125 * v125)) + (float)(*(float *)&v126 * *(float *)&v126))+ (float)(*((float *)&v126 + 1) * *((float *)&v126 + 1)));
    if (fabsf((float)(*((float *)&v120 + 2) * (float)((float)(*(float *)&v126 / *((float *)&v126 + 1)) / v23))+ (float)((float)(*((float *)&v120 + 1) * (float)((float)(v125 / *((float *)&v126 + 1)) / v23))+ (float)(*(float *)&v120 * (float)((float)(v124 / *((float *)&v126 + 1)) / v23)))) < 0.00000001&& v22 > a11)
    {
      if (a9 < a10)
      {
        do
        {
          ++a9;
          v22 = ((double)v22 * 0.25);
        }
        while (v22 > a11 && a9 < a10);
      }
      if (a9 >= a10)
        a9 = a10 - 1;
    }
  }
  if ((a10 & ~(a10 >> 31)) >= 0x1F)
    v26 = 31;
  else
    v26 = a10 & ~(a10 >> 31);
  v124 = (float)(int)v17 + 0.5;
  v125 = (float)var1 + 0.5;
  v126 = 0x3F80000000000000;
  v127 = (float)(int)v14 + -0.5;
  v128 = v125;
  v129 = 0x3F80000000000000;
  v130 = v127;
  v131 = (float)var3 + -0.5;
  v132 = 0x3F80000000000000;
  v133 = v124;
  v134 = v131;
  v135 = 0x3F80000000000000;
  (*(void (**)(HGTransform *, __int128 *, float *, uint64_t))(*(_QWORD *)a1 + 208))(a1, &v120, &v124, 4);
  v27.n128_u32[0] = 897988541;
  v28.n128_f32[0] = v122;
  v29.n128_f32[0] = v123;
  v30 = (*((float *)&v120 + 3) < 0.000001) | (2 * (v121 < 0.000001)) | (4 * (v122 < 0.000001)) | (8 * (v123 < 0.000001));
  if ((a9 & ~(a9 >> 31)) >= 0x1F)
    v31 = 31;
  else
    v31 = a9 & ~(a9 >> 31);
  if (v26 <= v31)
    v32 = v31;
  else
    v32 = v26;
  if (v30 == 15)
    return 0;
  v33 = v30 && (int)v14 - (uint64_t)(int)v17 <= 1;
  if (v33 && (v14 >> 32) - (v17 >> 32) <= 1)
    return 0;
  v101 = v16;
  v35 = (*(uint64_t (**)(HGTransform *, __n128, __n128, __n128))(*(_QWORD *)a1 + 272))(a1, v27, v28, v29);
  v36 = 0;
  v37.f64[0] = *(float64_t *)(v35 + 24);
  v109 = *(double *)(v35 + 120) + -0.000000999999997;
  v38 = (double)v31;
  v106 = (double)v32;
  v107 = a5;
  v110 = *(double *)(v35 + 56);
  v111 = v37.f64[0];
  v39 = INFINITY;
  v40 = -INFINITY;
  v41 = INFINITY;
  v42 = -INFINITY;
  v43 = -INFINITY;
  v44 = INFINITY;
  v37.f64[1] = v110;
  v108 = v37;
  v45 = -INFINITY;
  v118 = INFINITY;
  v119 = -INFINITY;
  v46 = INFINITY;
  v117 = (double)v31;
  do
  {
    if (((v30 >> v36) & 1) != 0)
    {
      v48 = v36 + 1;
      if (((v30 >> ((v36 + 1) & 3)) & 1) != 0)
      {
        v49 = ((_BYTE)v36 - 1) & 3;
        if (((v30 >> v49) & 1) != 0)
          goto LABEL_36;
LABEL_50:
        v77 = *(float32x2_t *)(&v124 + 4 * v36);
        v78 = vcvtq_f64_f32(v77);
        v79 = *(float32x2_t *)(&v124 + 4 * v49);
        v80 = v109 + v111 * v78.f64[0] + vmuld_lane_f64(v110, v78, 1);
        v81 = vaddvq_f64(vmulq_f64(v108, vsubq_f64(v78, vcvtq_f64_f32(v79))));
        v82 = v44;
        v83 = v45;
        if (v81 == 0.0)
        {
          v68 = v80 < 0.0;
          v84 = INFINITY;
          if (v68)
            v84 = -INFINITY;
        }
        else
        {
          v84 = v80 / v81;
        }
        v85 = (float32x2_t *)(&v120 + v36);
        *v85 = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vcvtq_f64_f32(vsub_f32(v79, v77)), v84), v78));
        v85[1] = (float32x2_t)0x3F80000000000000;
        (*(void (**)(HGTransform *, float32x2_t *, float32x2_t *, uint64_t))(*(_QWORD *)a1 + 208))(a1, v85, v85, 1);
        v85[1].i32[1] = 897988541;
        v86 = vdiv_f32(*v85, (float32x2_t)vdup_n_s32(0x358637BDu));
        *v85 = v86;
        LOBYTE(v87) = v31;
        v38 = (double)v31;
        v88 = (double)v31;
        if (v31 < v26)
        {
          v116 = v86;
          v89 = rho((float *)&v120 + 4 * v36, (const double *)v35, a6);
          v90 = log2(v89);
          v86 = v116;
          v38 = (double)v31;
          v91 = fmax(fmin(v90 + v107, v106), v117);
          v88 = fmax(v42, v91);
          v87 = (uint64_t)rint(ceil(v91));
        }
        v42 = fmax(v88, v38);
        v46 = fminf(v46, v86.f32[0]);
        v118 = fminf(v118, v86.f32[1]);
        v119 = fmaxf(v119, v86.f32[0]);
        v45 = fmaxf(v83, v86.f32[1]);
        v92 = (float)(1 << v87);
        v44 = fminf(v82, v86.f32[0] - v92);
        v43 = fmaxf(v43, v86.f32[0] + v92);
        v39 = fminf(v39, v86.f32[1] - v92);
        v40 = fmaxf(v40, v86.f32[1] + v92);
        v41 = v38;
        goto LABEL_36;
      }
      v60 = *(float32x2_t *)(&v124 + 4 * v36);
      v61 = vcvtq_f64_f32(v60);
      v62 = *(float32x2_t *)(&v124 + 4 * (v48 & 3));
      v63 = v109 + v111 * v61.f64[0] + vmuld_lane_f64(v110, v61, 1);
      v64 = vaddvq_f64(vmulq_f64(v108, vsubq_f64(v61, vcvtq_f64_f32(v62))));
      v65 = v44;
      v66 = v45;
      if (v64 == 0.0)
      {
        v68 = v63 < 0.0;
        v67 = INFINITY;
        if (v68)
          v67 = -INFINITY;
      }
      else
      {
        v67 = v63 / v64;
      }
      v69 = (float32x2_t *)(&v120 + v36);
      *v69 = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vcvtq_f64_f32(vsub_f32(v62, v60)), v67), v61));
      v69[1] = (float32x2_t)0x3F80000000000000;
      (*(void (**)(HGTransform *, float32x2_t *, float32x2_t *, uint64_t))(*(_QWORD *)a1 + 208))(a1, v69, v69, 1);
      v69[1].i32[1] = 897988541;
      v70 = vdiv_f32(*v69, (float32x2_t)vdup_n_s32(0x358637BDu));
      *v69 = v70;
      LOBYTE(v71) = v31;
      v38 = (double)v31;
      v72 = (double)v31;
      if (v31 < v26)
      {
        v115 = v70;
        v73 = rho((float *)&v120 + 4 * v36, (const double *)v35, a6);
        v74 = log2(v73);
        v70 = v115;
        v38 = (double)v31;
        v75 = fmax(fmin(v74 + v107, v106), v117);
        v72 = fmax(v42, v75);
        v71 = (uint64_t)rint(ceil(v75));
      }
      v42 = fmax(v72, v38);
      v46 = fminf(v46, v70.f32[0]);
      v118 = fminf(v118, v70.f32[1]);
      v119 = fmaxf(v119, v70.f32[0]);
      v45 = fmaxf(v66, v70.f32[1]);
      v76 = (float)(1 << v71);
      v44 = fminf(v65, v70.f32[0] - v76);
      v43 = fmaxf(v43, v70.f32[0] + v76);
      v39 = fminf(v39, v70.f32[1] - v76);
      v40 = fmaxf(v40, v70.f32[1] + v76);
      v41 = v38;
      v49 = ((_BYTE)v36 - 1) & 3;
      if (((v30 >> v49) & 1) == 0)
        goto LABEL_50;
    }
    else
    {
      v113 = v42;
      v114 = v39;
      v50 = (float *)(&v120 + v36);
      v51 = v50[3];
      v52 = *v50 / v51;
      v53 = v50[1] / v51;
      *v50 = v52;
      v50[1] = v53;
      LOBYTE(v54) = v31;
      v55 = v38;
      v42 = v38;
      if (v31 < v26)
      {
        v56 = v45;
        v57 = rho(v50, (const double *)v35, a6);
        v58 = log2(v57);
        v38 = (double)v31;
        v45 = v56;
        v59 = fmax(fmin(v58 + v107, v106), v117);
        v55 = fmin(v41, v59);
        v42 = fmax(v113, v59);
        v54 = (uint64_t)rint(ceil(v59));
      }
      v47 = 1 << v54;
      v46 = fminf(v46, v52);
      v118 = fminf(v118, v53);
      v119 = fmaxf(v119, v52);
      v45 = fmaxf(v45, v53);
      v44 = fminf(v44, v52 - (float)v47);
      v43 = fmaxf(v43, v52 + (float)v47);
      v39 = fminf(v114, v53 - (float)v47);
      v40 = fmaxf(v40, v53 + (float)v47);
      v48 = v36 + 1;
      v41 = v55;
    }
LABEL_36:
    v36 = v48;
  }
  while (v48 != 4);
  v93 = v101;
  v94 = fmax((float)(v46 - v44), 1.0) * v101;
  *((float *)&v120 + 3) = v94;
  if (var0 != 0x80000000 && v119 < (float)((float)var0 - v94))
    return 0;
  v95 = fmax((float)(v118 - v39), 1.0) * v93;
  v121 = v95;
  if (v104 != 0x80000000 && v45 < (float)((float)v104 - v95))
    return 0;
  v96 = fmax((float)(v43 - v119), 1.0) * v93;
  v122 = v96;
  v97 = 0x7FFFFFFFLL;
  if (var2 != 0x7FFFFFFF && v46 > (float)((float)var2 + v96))
    return 0;
  v98 = fmax((float)(v40 - v45), 1.0) * v93;
  v123 = v98;
  if (v102 != 0x7FFFFFFF && v118 > (float)((float)v102 + v98))
    return 0;
  if (a8)
  {
    v97 = (uint64_t)rint(floor(v41));
    v100 = (uint64_t)rint(ceil(v42));
    *a8 = v97;
    a8[1] = v100;
    if ((_DWORD)v97 == (_DWORD)v100)
    {
      if (v32 == (_DWORD)v97)
      {
        v97 = (__PAIR64__(v32, v31) - v26) >> 32;
        *a8 = v97;
      }
      else
      {
        if (v32 <= (int)v97)
          v97 = v97;
        else
          v97 = (v97 + 1);
        a8[1] = v97;
      }
    }
  }
  return HGRectMake4f(v97, floorf(v46), floorf(v118), ceilf(v119), ceilf(v45));
}

uint64_t HGAnisotropicSampler::Bind(HGAnisotropicSampler *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, char *))(*(_QWORD *)a2 + 120))(a2, (char *)this + 416);
  return 0;
}

uint64_t HGAnisotropicSampler::BindTexture(HGAnisotropicSampler *this, HGHandler *a2, uint64_t a3)
{
  uint64_t v5;

  (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 43) == 1)
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
  v5 = (*(uint64_t (**)(HGAnisotropicSampler *, _QWORD))(*(_QWORD *)this + 312))(this, 0);
  (*(void (**)(HGHandler *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v5, v5);
  return 0;
}

uint64_t HGAnisotropicSampler::UnBind(HGAnisotropicSampler *this, HGHandler *a2)
{
  return 0;
}

const char *HGAnisotropicSampler::GetProgram(HGAnisotropicSampler *this, HGRenderer *a2)
{
  unsigned int Target;
  int v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  __n128 v9;
  int v10;
  const char *v11;
  const char *v12;
  const char *v14;
  const char *v15;

  Target = HGRenderer::GetTarget(a2, 393216);
  v5 = (*(uint64_t (**)(HGAnisotropicSampler *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2);
  v6 = *((_QWORD *)this + 60);
  v7 = (float)*(int *)(v6 + 436);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 448) + 272))(*(_QWORD *)(v6 + 448));
  v9.n128_u64[0] = *(_QWORD *)(v8 + 24);
  if (v9.n128_f64[0] == 0.0)
  {
    v9.n128_u64[0] = *(_QWORD *)(v8 + 56);
    if (v9.n128_f64[0] == 0.0)
    {
      v9.n128_u64[0] = *(_QWORD *)(v8 + 88);
      if (v9.n128_f64[0] == 0.0)
      {
        v9.n128_u64[0] = *(_QWORD *)v8;
        if (*(double *)v8 == *(double *)(v8 + 40) && v9.n128_f64[0] == *(double *)(v8 + 80))
        {
          v9.n128_u64[0] = *(_QWORD *)(v8 + 8);
          if (v9.n128_f64[0] == 0.0)
          {
            v9.n128_u64[0] = *(_QWORD *)(v8 + 16);
            if (v9.n128_f64[0] == 0.0)
            {
              v9.n128_u64[0] = *(_QWORD *)(v8 + 32);
              if (v9.n128_f64[0] == 0.0)
              {
                v9.n128_u64[0] = *(_QWORD *)(v8 + 48);
                if (v9.n128_f64[0] == 0.0)
                  v7 = 1.0;
              }
            }
          }
        }
      }
    }
  }
  if (Target <= 0x60B0F)
  {
    if (Target > 0x6043F || Target == 394016)
    {
      if (*((_DWORD *)this + 125) == 1)
      {
        return "//GLfs2.0      \n"
               "//LEN=000000029c\n"
               "#ifndef GL_ES\n"
               "#define lowp\n"
               "#define mediump\n"
               "#define highp\n"
               "#endif\n"
               "#define defaultp mediump\n"
               "varying highp vec4 hg_TexCoord0;\n"
               "uniform highp sampler2D hg_Texture0;\n"
               "uniform highp vec4 hg_ProgramLocal0;\n"
               "uniform highp vec4 hg_ProgramLocal9;\n"
               "void main()\n"
               "{\n"
               "\tif (hg_TexCoord0.w > hg_ProgramLocal9.y) {\n"
               "\t\thighp vec4 uv = hg_TexCoord0/hg_TexCoord0.w;\n"
               "\t\thighp vec2 coord = uv.xy*hg_ProgramLocal0.xy + hg_ProgramLocal0.zw;\n"
               "\t\tgl_FragColor = texture2D(hg_Texture0, coord);\n"
               "\t} else {\n"
               "\t\tgl_FragColor = vec4(0.);\n"
               "\t}\n"
               "}\n"
               "//MD5=a7f2e069:2714aa11:2f22558e:c6207705\n"
               "//SIG=00000000:00000000:00000000:00000000:0001:000a:0000:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
      }
      else
      {
        if (v5)
        {
          v14 = "//GLfs2.0      \n"
                "//LEN=0000000e0a\n"
                "#ifndef GL_ES\n"
                "#define highp\n"
                "#define mediump\n"
                "#define lowp\n"
                "#endif\n"
                "#define defaultp mediump\n"
                "#extension GL_OES_standard_derivatives : require\n"
                "#define mediump highp\n"
                "varying highp vec4 hg_TexCoord0;\n"
                "uniform highp sampler2D hg_Texture0;\n"
                "uniform highp sampler2D hg_Texture1;\n"
                "uniform highp sampler2D hg_Texture2;\n"
                "uniform highp sampler2D hg_Texture3;\n"
                "uniform highp sampler2D hg_Texture4;\n"
                "uniform highp sampler2D hg_Texture5;\n"
                "uniform highp sampler2D hg_Texture6;\n"
                "uniform highp sampler2D hg_Texture7;\n"
                "uniform highp vec4 hg_ProgramLocal0;\n"
                "uniform highp vec4 hg_ProgramLocal1;\n"
                "uniform highp vec4 hg_ProgramLocal2;\n"
                "uniform highp vec4 hg_ProgramLocal3;\n"
                "uniform highp vec4 hg_ProgramLocal4;\n"
                "uniform highp vec4 hg_ProgramLocal5;\n"
                "uniform highp vec4 hg_ProgramLocal6;\n"
                "uniform highp vec4 hg_ProgramLocal7;\n"
                "uniform highp vec4 hg_ProgramLocal8;\n"
                "uniform highp vec4 hg_ProgramLocal9;\n"
                "void main()\n"
                "{\n"
                "highp vec4 uv = hg_TexCoord0/hg_TexCoord0.w;\n"
                "highp vec4 ddxy = vec4(dFdx(uv.xy), dFdy(uv.xy));\n"
                "if (hg_TexCoord0.w > hg_ProgramLocal9.y) {\n"
                "highp vec4 c;\n"
                "highp vec2 coord;\n"
                "highp float f = log2(max(length(ddxy.xy), length(ddxy.zw))) + hg_ProgramLocal9.x;\n"
                "f = min(max(f, hg_ProgramLocal8.x), hg_ProgramLocal8.y);\n"
                "highp float lod = min(f, hg_ProgramLocal8.y - 1.);\n"
                "lod = floor(lod);\n"
                "if (lod < hg_ProgramLocal8.z || lod >= hg_ProgramLocal8.w) {\n"
                "    discard;\n"
                "} else {\n"
                "f -= lod;\n"
                "lod -= hg_ProgramLocal8.z;\n"
                "if (lod < 4.) {\n"
                "    if (lod < 2.) {\n"
                "        if (lod < 1.) {\n"
                "            coord = uv.xy*hg_ProgramLocal0.xy + hg_ProgramLocal0.zw;\n"
                "            c = texture2D(hg_Texture0, coord);\n"
                "            coord = uv.xy*hg_ProgramLocal1.xy + hg_ProgramLocal1.zw;\n"
                "            gl_FragColor = mix(c, texture2D(hg_Texture1, coord), f);\n"
                "        } else {\n"
                "            coord = uv.xy*hg_ProgramLocal1.xy + hg_ProgramLocal1.zw;\n"
                "            c = texture2D(hg_Texture1, coord);\n"
                "            coord = uv.xy*hg_ProgramLocal2.xy + hg_ProgramLocal2.zw;\n"
                "            gl_FragColor = mix(c, texture2D(hg_Texture2, coord), f);\n"
                "        }\n"
                "    } else {\n"
                "        if (lod < 3.) {\n"
                "            coord = uv.xy*hg_ProgramLocal2.xy + hg_ProgramLocal2.zw;\n"
                "            c = texture2D(hg_Texture2, coord);\n"
                "            coord = uv.xy*hg_ProgramLocal3.xy + hg_ProgramLocal3.zw;\n"
                "            gl_FragColor = mix(c, texture2D(hg_Texture3, coord), f);\n"
                "        } else {\n"
                "            coord = uv.xy*hg_ProgramLocal3.xy + hg_ProgramLocal3.zw;\n"
                "            c = texture2D(hg_Texture3, coord);\n"
                "            coord = uv.xy*hg_ProgramLocal4.xy + hg_ProgramLocal4.zw;\n"
                "            gl_FragColor = mix(c, texture2D(hg_Texture4, coord), f);\n"
                "        }\n"
                "    }\n"
                "} else {\n"
                "    if (lod < 6.) {\n"
                "        if (lod < 5.) {\n"
                "            coord = uv.xy*hg_ProgramLocal4.xy + hg_ProgramLocal4.zw;\n"
                "            c = texture2D(hg_Texture4, coord);\n"
                "            coord = uv.xy*hg_ProgramLocal5.xy + hg_ProgramLocal5.zw;\n"
                "            gl_FragColor = mix(c, texture2D(hg_Texture5, coord), f);\n"
                "        } else {\n"
                "            coord = uv.xy*hg_ProgramLocal5.xy + hg_ProgramLocal5.zw;\n"
                "            c = texture2D(hg_Texture5, coord);\n"
                "            coord = uv.xy*hg_ProgramLocal6.xy + hg_ProgramLocal6.zw;\n"
                "            gl_FragColor = mix(c, texture2D(hg_Texture6, coord), f);\n"
                "        }\n"
                "    } else {\n"
                "        coord = uv.xy*hg_ProgramLocal6.xy + hg_ProgramLocal6.zw;\n"
                "        c = texture2D(hg_Texture6, coord);\n"
                "        coord = uv.xy*hg_ProgramLocal7.xy + hg_ProgramLocal7.zw;\n"
                "        gl_FragColor = mix(c, texture2D(hg_Texture7, coord), f);\n"
                "    }\n"
                "}\n"
                "}\n"
                "} else {\n"
                "gl_FragColor = vec4(0.);\n"
                "}\n"
                "}\n"
                "//MD5=8828affd:84a65bad:f77ba030:c9de33bc\n"
                "//SIG=00000000:00000000:00000000:00000000:0008:000a:0000:0000:0000:0000:0000:0000:0001:08:0:1:0\n";
          v15 = aGlfs20Len00000_135;
        }
        else
        {
          v14 = "//GLfs2.0      \n"
                "//LEN=0000000a6a\n"
                "#ifndef GL_ES\n"
                "#define lowp\n"
                "#define mediump\n"
                "#define highp\n"
                "#endif\n"
                "#define defaultp mediump\n"
                "#extension GL_OES_standard_derivatives : require\n"
                "varying highp vec4 hg_TexCoord0;\n"
                "uniform highp sampler2D hg_Texture0;\n"
                "uniform highp sampler2D hg_Texture1;\n"
                "uniform highp sampler2D hg_Texture2;\n"
                "uniform highp sampler2D hg_Texture3;\n"
                "uniform highp sampler2D hg_Texture4;\n"
                "uniform highp sampler2D hg_Texture5;\n"
                "uniform highp sampler2D hg_Texture6;\n"
                "uniform highp sampler2D hg_Texture7;\n"
                "uniform highp vec4 hg_ProgramLocal0;\n"
                "uniform highp vec4 hg_ProgramLocal1;\n"
                "uniform highp vec4 hg_ProgramLocal2;\n"
                "uniform highp vec4 hg_ProgramLocal3;\n"
                "uniform highp vec4 hg_ProgramLocal4;\n"
                "uniform highp vec4 hg_ProgramLocal5;\n"
                "uniform highp vec4 hg_ProgramLocal6;\n"
                "uniform highp vec4 hg_ProgramLocal7;\n"
                "uniform highp vec4 hg_ProgramLocal8;\n"
                "uniform highp vec4 hg_ProgramLocal9;\n"
                "void main()\n"
                "{\n"
                "\thighp vec4 uv = hg_TexCoord0/hg_TexCoord0.w;\n"
                "\thighp vec4 ddxy = vec4(dFdx(uv.xy), dFdy(uv.xy));\n"
                "\tif (hg_TexCoord0.w > hg_ProgramLocal9.y) {\n"
                "\thighp vec2 coord;\n"
                "\thighp float lod = log2(max(length(ddxy.xy), length(ddxy.zw))) + hg_ProgramLocal9.x;\n"
                "\tlod = min(max(lod, hg_ProgramLocal8.x), hg_ProgramLocal8.y);\n"
                "\tlod = ceil(lod);\n"
                "\t\n"
                "\tif (lod < hg_ProgramLocal8.z || lod > hg_ProgramLocal8.w) {\n"
                "\t   discard;\n"
                "\t} else {\n"
                "\tlod -= hg_ProgramLocal8.z;\n"
                "\t\tif (lod < 4.) {\n"
                "\t\t\tif (lod < 2.) {\n"
                "\t\t\t\tif (lod < 1.) {\n"
                "\t\t\t\t   coord = uv.xy*hg_ProgramLocal0.xy + hg_ProgramLocal0.zw;\n"
                "\t\t\t\t\tgl_FragColor = texture2D(hg_Texture0, coord);\n"
                "\t\t\t\t} else {\n"
                "\t\t\t\t\tcoord = uv.xy*hg_ProgramLocal1.xy + hg_ProgramLocal1.zw;\n"
                "\t\t\t\t\tgl_FragColor = texture2D(hg_Texture1, coord);\n"
                "\t\t\t\t}\n"
                "\t\t\t} else {\n"
                "\t\t\t\tif (lod < 3.) {\n"
                "\t\t\t\t\tcoord = uv.xy*hg_ProgramLocal2.xy + hg_ProgramLocal2.zw;\n"
                "\t\t\t\t\tgl_FragColor = texture2D(hg_Texture2, coord);\n"
                "\t\t\t   } else {\n"
                "\t\t\t\t\tcoord = uv.xy*hg_ProgramLocal3.xy + hg_ProgramLocal3.zw;\n"
                "\t\t\t\t\tgl_FragColor = texture2D(hg_Texture3, coord);\n"
                "\t\t\t\t}\n"
                "\t\t\t}\n"
                "\t\t} else {\n"
                "\t\t\tif (lod < 6.) {\n"
                "\t\t\t\tif (lod < 5.) {\n"
                "\t\t\t\t\tcoord = uv.xy*hg_ProgramLocal4.xy + hg_ProgramLocal4.zw;\n"
                "\t\t\t\t\tgl_FragColor = texture2D(hg_Texture4, coord);\n"
                "\t\t\t\t} else {\n"
                "\t\t\t\t\tcoord = uv.xy*hg_ProgramLocal5.xy + hg_ProgramLocal5.zw;\n"
                "\t\t\t\t\tgl_FragColor = texture2D(hg_Texture5, coord);\n"
                "\t\t\t\t}\n"
                "\t\t\t} else {\n"
                "\t\t\t\tif (lod < 7.) {\n"
                "\t\t\t\t\tcoord = uv.xy*hg_ProgramLocal6.xy + hg_ProgramLocal6.zw;\n"
                "\t\t\t\t\tgl_FragColor = texture2D(hg_Texture6, coord);\n"
                "\t\t\t\t} else {\n"
                "\t\t\t\t\tcoord = uv.xy*hg_ProgramLocal7.xy + hg_ProgramLocal7.zw;\n"
                "\t\t\t\t\tgl_FragColor = texture2D(hg_Texture7, coord);\n"
                "\t\t\t\t}\n"
                "\t\t\t}\n"
                "\t\t}\n"
                "\t}\n"
                "\t} else {\n"
                "\t\tgl_FragColor = vec4(0.);\n"
                "\t}\n"
                "}\n"
                "//MD5=d39193e9:42f0582f:95174530:f40f17ba\n"
                "//SIG=00000000:00000000:00000000:00000000:0008:000a:0000:0000:0000:0000:0000:0000:0001:08:0:1:0\n";
          v15 = aGlfs20Len00000_133;
        }
        if (v7 <= 1.0)
          return v14;
        else
          return v15;
      }
    }
    else
    {
      return "!!ARBfp1.0     \n"
             "##LEN=000000072e\n"
             "##                          \n"
             "##                            \n"
             "##                                \n"
             "##                                     \n"
             "##$\n"
             "OUTPUT $o0=result.color;\n"
             "ATTRIB $f0=fragment.texcoord[0];\n"
             "ATTRIB $f1=fragment.texcoord[1];\n"
             "ATTRIB $f2=fragment.texcoord[2];\n"
             "ATTRIB $f3=fragment.texcoord[3];\n"
             "PARAM $p0=program.local[0];\n"
             "PARAM $p1=program.local[1];\n"
             "PARAM $c0={1.5,.5,0,0};\n"
             "PARAM $c1={.5,1.5,0,0};\n"
             "PARAM $c2={1.5,1.5,0,0};\n"
             "PARAM $c3={.5,.5,0,0};\n"
             "##%\n"
             "TEMP r0,r1,r2,r3,r4,r5,r6,r7;\n"
             "##@\n"
             "##3\n"
             "TXP r7,$f3,texture[3],2D;\n"
             "MAD r7.w,$p1.x,r7.w,$p1.w;\n"
             "SUB r6.w,r7,$p0.x;\n"
             "SUB r6.xyz,$p0.z,r7.w;\n"
             "KIL r6;\n"
             "SUB r7.w,$p0.y,r7;\n"
             "MOV_SAT r7.x,r7.w;\n"
             "MOV_SAT r7.w,-r7.w;\n"
             "ADD r7.y,r7.x,r7.w;\n"
             "RCP r6.w,$f3.w;\n"
             "MAD r6.xy,$f1,r6.w,-$c3;\n"
             "FLR r5.xy,r6;\n"
             "SUB r6.xy,r6,r5;\n"
             "ADD r0.xy,r5,$c3;\n"
             "##1\n"
             "TEX r0,r0,texture[1],RECT;\n"
             "ADD r1.xy,r5,$c0;\n"
             "##1\n"
             "TEX r1,r1,texture[1],RECT;\n"
             "ADD r2.xy,r5,$c1;\n"
             "##1\n"
             "TEX r2,r2,texture[1],RECT;\n"
             "ADD r3.xy,r5,$c2;\n"
             "##1\n"
             "TEX r3,r3,texture[1],RECT;\n"
             "LRP r0,r6.x,r1,r0;\n"
             "LRP r2,r6.x,r3,r2;\n"
             "LRP r0,r6.y,r2,r0;\n"
             "MAD r4,-r7.y,r0,r0;\n"
             "MAD r6.xy,$f0,r6.w,-$c3;\n"
             "FLR r5,r6;\n"
             "SUB r6.xy,r6,r5;\n"
             "ADD r0,r5,$c3;\n"
             "##0\n"
             "TEX r0,r0,texture[0],RECT;\n"
             "ADD r1,r5,$c0;\n"
             "##0\n"
             "TEX r1,r1,texture[0],RECT;\n"
             "ADD r2,r5,$c1;\n"
             "##0\n"
             "TEX r2,r2,texture[0],RECT;\n"
             "ADD r3,r5,$c2;\n"
             "##0\n"
             "TEX r3,r3,texture[0],RECT;\n"
             "LRP r0,r6.x,r1,r0;\n"
             "LRP r2,r6.x,r3,r2;\n"
             "LRP r0,r6.y,r2,r0;\n"
             "MAD r4,r7.x,r0,r4;\n"
             "MAD r6.xy,$f2,r6.w,-$c3;\n"
             "FLR r5,r6;\n"
             "SUB r6.xy,r6,r5;\n"
             "ADD r0,r5,$c3;\n"
             "##2\n"
             "TEX r0,r0,texture[2],RECT;\n"
             "ADD r1,r5,$c0;\n"
             "##2\n"
             "TEX r1,r1,texture[2],RECT;\n"
             "ADD r2,r5,$c1;\n"
             "##2\n"
             "TEX r2,r2,texture[2],RECT;\n"
             "ADD r3,r5,$c2;\n"
             "##2\n"
             "TEX r3,r3,texture[2],RECT;\n"
             "LRP r0,r6.x,r1,r0;\n"
             "LRP r2,r6.x,r3,r2;\n"
             "LRP r0,r6.y,r2,r0;\n"
             "MAD r4,r7.w,r0,r4;\n"
             "CMP $o0,$f3.w,0.,r4;\n"
             "END\n"
             "##MD5=ef0fd3e2:cb522fe7:1347379a:8991ea22\n"
             "##SIG=01000000:00000000:00000000:00000000:0004:0002:0008:0000:0000:0000:0000:0000:0004:04:0:1:0\n";
    }
  }
  else
  {
    v10 = (*(uint64_t (**)(HGRenderer *, uint64_t, __n128))(*(_QWORD *)a2 + 128))(a2, 20, v9);
    if (*((_DWORD *)this + 125) == 1)
    {
      v11 = "//Metal1.0     \n"
            "//LEN=0000000369\n"
            "fragment FragmentOut fragmentFunc(VertexInOut            frag        [[ stage_in ]],\n"
            "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
            "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
            "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
            "{\n"
            "    FragmentOut out;\n"
            "    \n"
            "    if (frag._texCoord0.w > hg_Params[9].y)\n"
            "    {\n"
            "        float4 uv = frag._texCoord0 / frag._texCoord0.w;\n"
            "        float2 coordinate = uv.xy * hg_Params[0].xy + hg_Params[0].zw;\n"
            "        out.color0 = hg_Texture0.sample(hg_Sampler0, coordinate);\n"
            "    }\n"
            "    else\n"
            "    {\n"
            "        out.color0 = float4(0.0f);\n"
            "    }\n"
            "    \n"
            "    return out;\n"
            "}\n"
            "//MD5=750a3032:b6067064:6a00a29b:b3c8c145\n"
            "//SIG=00000000:00000000:00000000:00000000:0001:0001:0000:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
      v12 = "//Metal1.0     \n"
            "//LEN=0000000372\n"
            "fragment FragmentOut fragmentFunc(VertexInOut            frag        [[ stage_in ]],\n"
            "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
            "                                  texture2d< half >      hg_Texture0 [[ texture(0) ]],\n"
            "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
            "{\n"
            "    FragmentOut out;\n"
            "    \n"
            "    if (frag._texCoord0.w > hg_Params[9].y)\n"
            "    {\n"
            "        float4 uv = frag._texCoord0 / frag._texCoord0.w;\n"
            "        float2 coordinate = uv.xy * hg_Params[0].xy + hg_Params[0].zw;\n"
            "        out.color0 = (float4) hg_Texture0.sample(hg_Sampler0, coordinate);\n"
            "    }\n"
            "    else\n"
            "    {\n"
            "        out.color0 = float4(0.0f);\n"
            "    }\n"
            "    \n"
            "    return out;\n"
            "}\n"
            "//MD5=eb23f2ee:71cb8148:b382db79:f0fcba1b\n"
            "//SIG=00400000:00000000:00000000:00000001:0001:000a:0000:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    }
    else if (v5)
    {
      if (v7 > 1.0)
      {
        v11 = aMetal10Len0000_400;
        v12 = aMetal10Len0000_399;
      }
      else
      {
        v11 = aMetal10Len0000_398;
        v12 = aMetal10Len0000_397;
      }
    }
    else if (v7 > 1.0)
    {
      v11 = aMetal10Len0000_396;
      v12 = aMetal10Len0000_395;
    }
    else
    {
      v11 = aMetal10Len0000_394;
      v12 = aMetal10Len0000_393;
    }
    if (v10 == 27)
      return v12;
    else
      return v11;
  }
}

void HGAnisotropicSampler::InitProgramDescriptor(HGAnisotropicSampler *this, HGProgramDescriptor *a2)
{
  uint64_t v4;
  float v5;
  double *v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  const std::string::value_type *v19;
  std::string *v20;
  std::string v21;
  void *__p[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;
  void *v26[2];
  unsigned __int8 v27;
  std::string v28;
  std::string v29;
  std::string v30;

  v4 = *((_QWORD *)this + 60);
  v5 = (float)*(int *)(v4 + 436);
  v6 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 448) + 272))(*(_QWORD *)(v4 + 448));
  if (v6[3] == 0.0
    && v6[7] == 0.0
    && v6[11] == 0.0
    && *v6 == v6[5]
    && *v6 == v6[10]
    && v6[1] == 0.0
    && v6[2] == 0.0
    && v6[4] == 0.0
    && v6[6] == 0.0)
  {
    v5 = 1.0;
  }
  HGMetalUtils::stringForMetalHeader((uint64_t)&v28);
  HGMetalUtils::stringForMetalVertexOutputStruct((HGMetalUtils *)1, 0, (uint64_t)v26);
  if ((v27 & 0x80u) == 0)
    v7 = v26;
  else
    v7 = (void **)v26[0];
  if ((v27 & 0x80u) == 0)
    v8 = v27;
  else
    v8 = (std::string::size_type)v26[1];
  v9 = std::string::append(&v28, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  HGMetalUtils::stringForMetalVertexShader((HGMetalUtils *)"vertexFunc", (const char *)1, 0, (uint64_t)v24);
  if ((v25 & 0x80u) == 0)
    v11 = v24;
  else
    v11 = (void **)v24[0];
  if ((v25 & 0x80u) == 0)
    v12 = v25;
  else
    v12 = (std::string::size_type)v24[1];
  v13 = std::string::append(&v29, (const std::string::value_type *)v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  HGMetalUtils::stringForMetalFragmentOutputStruct((HGMetalUtils *)1, 0, (uint64_t)__p);
  if ((v23 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v16 = v23;
  else
    v16 = (std::string::size_type)__p[1];
  v17 = std::string::append(&v21, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if (((char)v25 & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_39;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if (((char)v25 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v24[0]);
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if (((char)v27 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v29.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v26[0]);
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    if (*((_DWORD *)this + 125) == 1)
    {
LABEL_36:
      v19 = "//Metal1.0     \n"
            "//LEN=0000000369\n"
            "fragment FragmentOut fragmentFunc(VertexInOut            frag        [[ stage_in ]],\n"
            "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
            "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
            "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
            "{\n"
            "    FragmentOut out;\n"
            "    \n"
            "    if (frag._texCoord0.w > hg_Params[9].y)\n"
            "    {\n"
            "        float4 uv = frag._texCoord0 / frag._texCoord0.w;\n"
            "        float2 coordinate = uv.xy * hg_Params[0].xy + hg_Params[0].zw;\n"
            "        out.color0 = hg_Texture0.sample(hg_Sampler0, coordinate);\n"
            "    }\n"
            "    else\n"
            "    {\n"
            "        out.color0 = float4(0.0f);\n"
            "    }\n"
            "    \n"
            "    return out;\n"
            "}\n"
            "//MD5=750a3032:b6067064:6a00a29b:b3c8c145\n"
            "//SIG=00000000:00000000:00000000:00000000:0001:0001:0000:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
LABEL_50:
      std::string::append(&v30, v19);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v30;
      else
        v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
      HGProgramDescriptor::SetShaderProgram(a2, (const char *)v20);
    }
LABEL_43:
    if (*((_BYTE *)this + 512))
    {
      if (v5 <= 1.0)
        v19 = aMetal10Len0000_394;
      else
        v19 = aMetal10Len0000_396;
    }
    else if (v5 <= 1.0)
    {
      v19 = aMetal10Len0000_398;
    }
    else
    {
      v19 = aMetal10Len0000_400;
    }
    goto LABEL_50;
  }
LABEL_42:
  operator delete(v28.__r_.__value_.__l.__data_);
  if (*((_DWORD *)this + 125) == 1)
    goto LABEL_36;
  goto LABEL_43;
}

void sub_1B2AB4148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  if (a22 < 0)
    operator delete(__p);
  std::vector<HGBinding>::~vector[abi:ne180100]((void **)&a43);
  std::vector<HGBinding>::~vector[abi:ne180100]((void **)(v48 - 160));
  if (*(char *)(v48 - 105) < 0)
    operator delete(*(void **)(v48 - 128));
  _Unwind_Resume(a1);
}

HGRenderer *HGAnisotropicSampler::RenderPageGeneric(uint64_t a1, HGRenderer **a2, int a3)
{
  HGRenderer *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  HGRenderer *v10;
  HGNode *v11;
  uint64_t v12;
  uint64_t v13;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  HGRect v22;

  v6 = *a2;
  v7 = (unint64_t)a2[2];
  v8 = (unint64_t)a2[3];
  v9 = (*(uint64_t (**)(uint64_t, HGRenderer *))(*(_QWORD *)a1 + 312))(a1, *a2);
  v10 = a2[1];
  if (v10)
  {
    (*(void (**)(HGRenderer *))(*(_QWORD *)v10 + 16))(v10);
    if (a3 != 1)
      goto LABEL_3;
LABEL_6:
    Input = HGRenderer::GetInput(v6, (HGNode *)a1, 0);
    DOD = HGRenderer::GetDOD(v6, Input);
    HGAnisotropicSampler::GetPageMetal(a1, (HGBitmap **)a2, v7, v8, DOD, v16, v9, 0xFFFFFFFF, v17, v18, v19, v20, 0);
    return a2[1];
  }
  *(_QWORD *)&v22.var0 = v7;
  *(_QWORD *)&v22.var2 = v8;
  a2[1] = (HGRenderer *)HGGPURenderer::CreateBuffer((uint64_t)v6, v22, *((unsigned int *)a2 + 8), a3, (*(_DWORD *)(a1 + 16) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
  if (a3 == 1)
    goto LABEL_6;
LABEL_3:
  if (!a3)
  {
    v11 = HGRenderer::GetInput(v6, (HGNode *)a1, 0);
    v12 = HGRenderer::GetDOD(v6, v11);
    HGAnisotropicSampler::GetPage(a1, (uint64_t)a2, v7, v8, v12, v13, v9, 0xFFFFFFFF, 0);
    return a2[1];
  }
  return 0;
}

uint64_t HGAnisotropicSampler::GetPage(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8, int a9)
{
  HGRenderer *v12;
  unsigned int Target;
  double v14;
  double v15;
  uint64_t v16;
  int v17;
  HGTransform *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  HGRect v26;
  uint64_t v27;
  float v28;
  float v29;
  double v30;
  int v31;
  int v32;
  HGGPURenderer *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  double v39;
  int v40;
  int v41;
  HGGPURenderer *v42;
  unsigned int MaxTileArea;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  float32x4_t v49;
  const char *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  double v55;
  double v56;
  uint64_t v57;
  HGTransform *v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  HGRenderer *v63;
  int v64;
  int v65;
  HGGPURenderer *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  float32x4_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  HGNode *Input;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  HGNode *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t v117;
  float32x4_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  HGNode *v123;
  uint64_t v124;
  uint64_t v125;
  HGHandler *v126;
  _DWORD *v127;
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  _DWORD *v133;
  int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  _DWORD *v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  float v147;
  __n128 v148;
  __n128 v149;
  int v150;
  double v151;
  float v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  float32x4_t *v168;
  float32x4_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  HGNode *v176;
  HGHandler *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t TextureRect;
  int v182;
  int v183;
  double v184;
  double v185;
  _OWORD *v186;
  double v187;
  double v188;
  float v189;
  float v190;
  int v192;
  int v193;
  uint64_t v194;
  unsigned int v195[2];
  unsigned int v196[2];
  unsigned int v197[2];
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _OWORD *v202;
  _OWORD *v203;
  uint64_t v204;
  HGGPURenderer *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unint64_t v211;
  int v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  float32x4_t v218;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v224;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  HGRect v233;
  HGRect v234;
  HGRect v235;
  HGRect v236;
  HGRect v237;
  HGRect v238;
  HGRect v239;
  HGRect v240;

  v232 = *MEMORY[0x1E0C80C00];
  v12 = *(HGRenderer **)a2;
  Target = HGRenderer::GetTarget(*(HGRenderer **)a2, 393216);
  v16 = *(_QWORD *)(a1 + 480);
  v17 = *(_DWORD *)(v16 + 436);
  v18 = *(HGTransform **)(v16 + 448);
  v212 = v17;
  v226 = Target;
  if (v17 < 2)
  {
    v36 = *(_QWORD *)(v16 + 464);
    v35 = *(_QWORD *)(v16 + 472);
    if (a7 <= 0)
      v37 = 0.5;
    else
      v37 = 1.5;
    v38 = *(float *)(v16 + 424);
    v39 = (double)v17;
    v40 = *(_DWORD *)(v16 + 480);
    v41 = *(_DWORD *)(v16 + 484);
    if (v12
    {
      MaxTileArea = HGGPURenderer::GetMaxTileArea(v42);
    }
    else
    {
      MaxTileArea = 0x1000000;
    }
    *(_QWORD *)&v233.var0 = a3;
    *(_QWORD *)&v233.var2 = a4;
    *(_QWORD *)&v239.var0 = v36;
    *(_QWORD *)&v239.var2 = v35;
    *(float *)&v14 = v37;
    v44 = hg_clip(v18, v233, v239, v14, v38, v39, v15, &v230, v40, v41, MaxTileArea);
  }
  else
  {
    v19 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v21 = HGRectGrow(a3, a4, v19);
    v24 = v20;
    v25 = *(_QWORD *)(a1 + 480);
    *(_QWORD *)&v26.var0 = *(_QWORD *)(v25 + 464);
    v27 = *(_QWORD *)(v25 + 472);
    if (a7 <= 0)
      v28 = 0.5;
    else
      v28 = 1.5;
    v29 = *(float *)(v25 + 424);
    v30 = (double)v17;
    v31 = *(_DWORD *)(v25 + 480);
    v32 = *(_DWORD *)(v25 + 484);
    if (v12)
    {
      v207 = *(_QWORD *)(v25 + 464);
      v215 = v20;
      if (v33)
        v34 = HGGPURenderer::GetMaxTileArea(v33);
      else
        v34 = 0x1000000;
      v24 = v215;
      *(_QWORD *)&v26.var0 = v207;
    }
    else
    {
      v34 = 0x1000000;
    }
    *(_QWORD *)&v234.var0 = v21;
    *(_QWORD *)&v234.var2 = v24;
    *(_QWORD *)&v26.var2 = v27;
    *(float *)&v22 = v28;
    v44 = hg_clip(v18, v234, v26, v22, v29, v30, v23, &v230, v31, v32, v34);
  }
  v46 = v44;
  v47 = v45;
  result = HGRectIsNull(v44, v45);
  if ((_DWORD)result)
    goto LABEL_21;
  v52 = HIDWORD(a3);
  v53 = HIDWORD(a4);
  v54 = v230;
  v55 = (double)a8;
  v56 = fmax(((double)(int)v47 - (double)(int)v46) * (1.0 / (double)(1 << v54)) / (double)a8, ((double)SHIDWORD(v47) - (double)SHIDWORD(v46)) * (1.0 / (double)(1 << v54)) / (double)a8);
  v216 = a4;
  v205 = v12;
  if ((_DWORD)a4 - (_DWORD)a3 == 1 && HIDWORD(a4) - HIDWORD(a3) == 1 && v56 > 1.0)
  {
    v57 = *(_QWORD *)(a1 + 480);
    v58 = *(HGTransform **)(v57 + 448);
    v59 = *(_QWORD *)(v57 + 464);
    v60 = *(_QWORD *)(v57 + 472);
    if (a7 <= 0)
      v61 = 0.5;
    else
      v61 = 1.5;
    v62 = *(float *)(v57 + 424);
    v63 = v12;
    v64 = *(_DWORD *)(v57 + 480);
    v65 = *(_DWORD *)(v57 + 484);
    if (v63
    {
      v67 = HGGPURenderer::GetMaxTileArea(v66);
    }
    else
    {
      v67 = 0x1000000;
    }
    *(_QWORD *)&v236.var0 = a3;
    *(_QWORD *)&v236.var2 = a4;
    *(_QWORD *)&v240.var0 = v59;
    *(_QWORD *)&v240.var2 = v60;
    *(float *)&v56 = v61;
    v82 = hg_clip(v58, v236, v240, v56, v62, 1.0, v55, &v230, v64, v65, v67);
    v47 = v83;
    result = HGRectIsNull(v82, v83);
    v12 = v205;
    if ((_DWORD)result)
    {
LABEL_21:
      (*(void (**)(HGRenderer *, _QWORD))(*(_QWORD *)v12 + 144))(v12, *(_QWORD *)(a2 + 8));
      *(_QWORD *)&v235.var0 = a3;
      *(_QWORD *)&v235.var2 = a4;
      return HGGPURenderer::Clear(v12, v235, v50, v51);
    }
    a7 = 0;
    v54 = v231;
    v230 = v231;
    v212 = 1;
    v211 = a3;
    if (v226 > 0x6043F)
    {
      v46 = v82;
    }
    else
    {
      v46 = v82;
      if (v226 != 394016)
        goto LABEL_56;
    }
  }
  else
  {
    if (v56 > 2.0)
    {
      v210 = a3;
      if (SHIDWORD(a4) > SHIDWORD(a3) && (int)a4 > (int)a3)
      {
        v68 = (uint64_t)rint(fmax(sqrt(((double)(int)a4 - (double)(int)a3) * ((double)SHIDWORD(a4) - (double)SHIDWORD(a3)) / v56), 1.0));
        do
        {
          v69 = v52 + v68;
          v213 = v52 + v68;
          if ((int)v52 + (int)v68 >= (int)v53)
            v69 = v53;
          v227 = v69;
          LODWORD(result) = v210;
          do
          {
            v70 = (result + v68);
            if ((int)v70 >= (int)a4)
              v71 = a4;
            else
              v71 = result + v68;
            v72 = v52;
            v73 = HGRectMake4i(result, v52, v71, v227);
            HGAnisotropicSampler::GetPage(a1, a2, v73, v74, a5, a6, a7, a8, a9 + 1);
            v52 = v72;
            result = v70;
          }
          while ((int)v70 < (int)a4);
          v52 = v213;
          LODWORD(v53) = HIDWORD(a4);
        }
        while (v213 < SHIDWORD(a4));
      }
      return result;
    }
    if (v56 > 1.0)
    {
      v75 = a9 + 1;
      if (HIDWORD(a4) - HIDWORD(a3) <= (a4 - a3))
      {
        v155 = HGRectMake4i(a3, HIDWORD(a3), ((int)a3 + (int)a4) >> 1, HIDWORD(a4));
        HGAnisotropicSampler::GetPage(a1, a2, v155, v156, a5, a6, a7, a8, v75);
        v79 = HGRectMake4i(((int)a3 + (int)a4) >> 1, HIDWORD(a3), a4, HIDWORD(a4));
      }
      else
      {
        v76 = HGRectMake4i(a3, HIDWORD(a3), a4, (HIDWORD(a3) + HIDWORD(a4)) >> 1);
        HGAnisotropicSampler::GetPage(a1, a2, v76, v77, a5, a6, a7, a8, v75);
        v79 = HGRectMake4i(a3, (HIDWORD(a3) + HIDWORD(a4)) >> 1, a4, HIDWORD(a4));
      }
      return HGAnisotropicSampler::GetPage(a1, a2, v79, v78, a5, a6, a7, a8, v75);
    }
    v211 = a3;
    if (v226 <= 0x6043F && v226 != 394016)
    {
      if (a7 >= 1)
      {
        v80 = 1;
        result = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
        v81 = result;
        v54 = v230;
        goto LABEL_57;
      }
LABEL_56:
      v80 = a7;
      v81 = 0;
LABEL_57:
      v84 = v231;
      if (v54 <= v231)
      {
        v85 = 0;
        v86 = *(float *)(*(_QWORD *)(a1 + 480) + 424);
        v49.f32[0] = (float)(int)v46;
        v49.f32[1] = (float)SHIDWORD(v46);
        v224 = v49;
        v49.f32[0] = (float)(int)v47;
        v49.f32[1] = (float)SHIDWORD(v47);
        v220 = v49;
        if (v80)
          v87 = 2;
        else
          v87 = 3;
        v200 = a1 + 416;
        v88 = v54;
        v202 = (_OWORD *)(a2 + 52);
        v203 = (_OWORD *)(a2 + 36);
        v89 = v54;
        v198 = v54 - 1;
        v199 = v54;
        v90 = 32 * v54;
        v208 = v87;
        v204 = 32 * v87;
        v91 = v54;
        v201 = v81;
        do
        {
          v92 = v89;
          v93 = v88 + v85;
          v94 = *(int *)(a1 + 496);
          if (v88 + v85 - v94 < *(int *)(a1 + 500) && v93 <= v84)
          {
            v97 = *(_QWORD *)(a1 + 504) - 32 * v94 + v90;
            v98 = *(float32x4_t *)(v97 + 16);
            v99 = vaddq_f32(vmulq_f32(v224, *(float32x4_t *)v97), v98).u64[0];
            v98.i64[0] = vaddq_f32(vmulq_f32(v220, *(float32x4_t *)v97), v98).u64[0];
            v100 = HGRectIntegral(v97, *(float *)&v99, *((float *)&v99 + 1), v98.f32[0], v98.f32[1]);
            *(_QWORD *)(a2 + 36) = HGRectGrow(v100, v101, v81);
            *(_QWORD *)(a2 + 44) = v102;
            Input = HGRenderer::GetInput(v12, (HGNode *)a1, (int)v92 + (int)v85 - *(_DWORD *)(a1 + 496));
            *(_QWORD *)(a2 + 168) = HGGPURenderer::GetNodeTexture(v12, Input, *(HGRect *)(a2 + 36), 0, 1u);
          }
          else
          {
            *v203 = *(_OWORD *)(a2 + 20);
            v96 = *(_QWORD *)(a2 + 160);
            *(_QWORD *)(a2 + 168) = v96;
            if (v96)
              (*(void (**)(uint64_t))(*(_QWORD *)v96 + 16))(v96);
          }
          v104 = *(int *)(a1 + 496);
          if (v88 + v85 - v104 + 1 >= *(int *)(a1 + 500) || v93 >= v231)
          {
            *v202 = *v203;
            v113 = *(_QWORD *)(a2 + 168);
            *(_QWORD *)(a2 + 176) = v113;
            v89 = v92;
            if (v113)
              (*(void (**)(uint64_t))(*(_QWORD *)v113 + 16))(v113);
          }
          else
          {
            v105 = *(_QWORD *)(a1 + 504) - 32 * v104 + v90;
            v106 = *(float32x4_t *)(v105 + 32);
            v107 = *(float32x4_t *)(v105 + 48);
            v108 = vaddq_f32(vmulq_f32(v224, v106), v107).u64[0];
            v107.i64[0] = vaddq_f32(vmulq_f32(v220, v106), v107).u64[0];
            v109 = HGRectIntegral(v105, *(float *)&v108, *((float *)&v108 + 1), v107.f32[0], v107.f32[1]);
            *(_QWORD *)(a2 + 52) = HGRectGrow(v109, v110, v81);
            *(_QWORD *)(a2 + 60) = v111;
            v89 = v92;
            v112 = HGRenderer::GetInput(v12, (HGNode *)a1, (int)v92 + (int)v85 - *(_DWORD *)(a1 + 496) + 1);
            *(_QWORD *)(a2 + 176) = HGGPURenderer::GetNodeTexture(v12, v112, *(HGRect *)(a2 + 52), 0, 1u);
          }
          v114 = v88 + v85 + 2;
          v115 = *(int *)(a1 + 496);
          v228 = v114;
          if (v114 - v115 >= *(int *)(a1 + 500) || v114 > v231)
          {
            *(_OWORD *)(a2 + 68) = *v202;
            v124 = *(_QWORD *)(a2 + 176);
            *(_QWORD *)(a2 + 184) = v124;
            if (v124)
              (*(void (**)(uint64_t))(*(_QWORD *)v124 + 16))(v124);
          }
          else
          {
            v116 = *(_QWORD *)(a1 + 504) - 32 * v115 + v90;
            v117 = *(float32x4_t *)(v116 + 64);
            v118 = *(float32x4_t *)(v116 + 80);
            v119 = vaddq_f32(vmulq_f32(v224, v117), v118).u64[0];
            v118.i64[0] = vaddq_f32(vmulq_f32(v220, v117), v118).u64[0];
            v120 = HGRectIntegral(v116, *(float *)&v119, *((float *)&v119 + 1), v118.f32[0], v118.f32[1]);
            *(_QWORD *)(a2 + 68) = HGRectGrow(v120, v121, v81);
            *(_QWORD *)(a2 + 76) = v122;
            v123 = HGRenderer::GetInput(v12, (HGNode *)a1, (int)v89 + (int)v85 - *(_DWORD *)(a1 + 496) + 2);
            *(_QWORD *)(a2 + 184) = HGGPURenderer::GetNodeTexture(v12, v123, *(HGRect *)(a2 + 68), 0, 1u);
          }
          (*(void (**)(HGRenderer *, _QWORD))(*(_QWORD *)v12 + 144))(v12, *(_QWORD *)(a2 + 8));
          (*(void (**)(HGRenderer *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 152))(v12, 0, *(_QWORD *)(a2 + 168), 0, 0);
          (*(void (**)(HGRenderer *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 152))(v12, 1, *(_QWORD *)(a2 + 176), 0, 0);
          (*(void (**)(HGRenderer *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 152))(v12, 2, *(_QWORD *)(a2 + 184), 0, 0);
          v125 = (*(uint64_t (**)(HGRenderer *, _QWORD, uint64_t))(*(_QWORD *)v12 + 368))(v12, *(_QWORD *)(a1 + 64), a1);
          if (v125)
          {
            v126 = (HGHandler *)v125;
            v127 = *(_DWORD **)(a2 + 168);
            if (v127)
            {
              v128 = v231;
              if ((int)v89 + (int)v85 < v231)
                v128 = v89 + v85;
              v129 = v128 - *(_DWORD *)(a1 + 496);
              v130 = *(_DWORD *)(a1 + 500);
              if (v129 >= v130)
                v131 = v130 - 1;
              else
                v131 = v129;
              v195[0] = -v127[5];
              v195[1] = -v127[6];
              (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unsigned int *))(*(_QWORD *)v125 + 32))(v125, v127[40], 0, 0, 0, 0, 0, 0, *(unsigned int **)v195);
              HGHandler::TexCoord(v126, 0, 0, 0, 0);
              v132 = 32 * v131;
              (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)v126 + 96))(v126, COERCE_FLOAT(*(_OWORD *)(*(_QWORD *)(a1 + 504) + v132 + 16)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(*(_QWORD *)(a1 + 504) + v132 + 16))), 0.0);
              (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)v126 + 104))(v126, COERCE_FLOAT(*(_OWORD *)(*(_QWORD *)(a1 + 504) + v132)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(*(_QWORD *)(a1 + 504) + v132))), 1.0);
              (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)v126 + 120))(v126, v200);
            }
            v133 = *(_DWORD **)(a2 + 176);
            if (v133)
            {
              v134 = v231;
              if ((int)v89 + (int)v85 + 1 < v231)
                v134 = v89 + v85 + 1;
              v135 = v134 - *(_DWORD *)(a1 + 496);
              v136 = *(_DWORD *)(a1 + 500);
              if (v135 >= v136)
                v137 = v136 - 1;
              else
                v137 = v135;
              v196[0] = -v133[5];
              v196[1] = -v133[6];
              (*(void (**)(HGHandler *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unsigned int *))(*(_QWORD *)v126 + 32))(v126, v133[40], 0, 0, 0, 0, 0, 0, *(unsigned int **)v196);
              HGHandler::TexCoord(v126, 1, 0, 0, 0);
              v138 = 32 * v137;
              (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)v126 + 96))(v126, COERCE_FLOAT(*(_OWORD *)(*(_QWORD *)(a1 + 504) + v138 + 16)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(*(_QWORD *)(a1 + 504) + v138 + 16))), 0.0);
              (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)v126 + 104))(v126, COERCE_FLOAT(*(_OWORD *)(*(_QWORD *)(a1 + 504) + v138)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(*(_QWORD *)(a1 + 504) + v138))), 1.0);
              (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)v126 + 120))(v126, v200);
            }
            v139 = *(_DWORD **)(a2 + 184);
            if (v139)
            {
              v140 = v91 + 2;
              v141 = v231;
              if ((int)v89 + (int)v85 + 2 < v231)
                v141 = v89 + v85 + 2;
              v142 = v141 - *(_DWORD *)(a1 + 496);
              v143 = *(_DWORD *)(a1 + 500);
              if (v142 >= v143)
                v144 = v143 - 1;
              else
                v144 = v142;
              v197[0] = -v139[5];
              v197[1] = -v139[6];
              (*(void (**)(HGHandler *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unsigned int *))(*(_QWORD *)v126 + 32))(v126, v139[40], 0, 0, 0, 0, 0, 0, *(unsigned int **)v197);
              HGHandler::TexCoord(v126, 2, 0, 0, 0);
              v145 = 32 * v144;
              (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)v126 + 96))(v126, COERCE_FLOAT(*(_OWORD *)(*(_QWORD *)(a1 + 504) + v145 + 16)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(*(_QWORD *)(a1 + 504) + v145 + 16))), 0.0);
              (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)v126 + 104))(v126, COERCE_FLOAT(*(_OWORD *)(*(_QWORD *)(a1 + 504) + v145)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(*(_QWORD *)(a1 + 504) + v145))), 1.0);
              (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)v126 + 120))(v126, v200);
            }
            else
            {
              v140 = v89 + v85 + 2;
            }
            v146 = v89 + v85;
            v147 = (*(float (**)(HGGPURenderer *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v205 + 424))(v205, 3, (int)(float)(v86 - (float)(v198 + v85)), v212);
            (*(void (**)(HGHandler *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v126 + 24))(v126, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), 0, 0);
            HGHandler::TexCoord(v126, 3, 0, 0, 0);
            (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)v126 + 120))(v126, v200);
            v149.n128_f32[0] = (float)(v89 + v85);
            if ((_DWORD)v89 + (_DWORD)v85 == v230)
              v149.n128_f32[0] = -1000.0;
            v148.n128_u32[0] = 1148846080;
            if (v228 < v231)
              v148.n128_f32[0] = (float)v140;
            if (v146 + 1 < v231)
              v150 = v146 + 1;
            else
              v150 = v231;
            (*(void (**)(HGHandler *, _QWORD, __n128, float, __n128, float))(*(_QWORD *)v126 + 136))(v126, 0, v149, (float)v150, v148, 0.0);
            v151 = (double)v146;
            v12 = v205;
            v152 = v151 + -1.0;
            (*(void (**)(HGHandler *, uint64_t, float, float, float, float))(*(_QWORD *)v126 + 136))(v126, 1, v147, v147, v147, v152);
            (*(void (**)(HGHandler *))(*(_QWORD *)v126 + 40))(v126);
            *(_QWORD *)&v237.var0 = v211;
            *(_QWORD *)&v237.var2 = v216;
            HGGPURenderer::Rect(v205, v126, v237, 4);
            (*(void (**)(HGGPURenderer *, HGHandler *))(*(_QWORD *)v205 + 392))(v205, v126);
            v81 = v201;
            v88 = v199;
          }
          v153 = *(_QWORD *)(a2 + 168);
          if (v153)
            (*(void (**)(uint64_t))(*(_QWORD *)v153 + 24))(v153);
          v154 = *(_QWORD *)(a2 + 176);
          if (v154)
            (*(void (**)(uint64_t))(*(_QWORD *)v154 + 24))(v154);
          result = *(_QWORD *)(a2 + 184);
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
          v91 += v208;
          v85 += v208;
          v90 += v204;
          v84 = v231;
        }
        while (v88 + v85 <= v231);
      }
      return result;
    }
    if (a7 >= 1)
    {
      result = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      v229 = result;
      v54 = v230;
      goto LABEL_123;
    }
  }
  v229 = 0;
LABEL_123:
  if (v54 <= v231)
  {
    v49.f32[0] = (float)(int)v46;
    v49.f32[1] = (float)SHIDWORD(v46);
    v221 = v49;
    v49.f32[0] = (float)(int)v47;
    v49.f32[1] = (float)SHIDWORD(v47);
    v218 = v49;
    if (a7)
      v157 = 7;
    else
      v157 = 8;
    v158 = (float)v212;
    v159 = v54;
    v160 = v54;
    v161 = (32 * v54) | 0x10;
    v206 = 32 * v157;
    v209 = v157;
    v162 = a2 + 168;
    do
    {
      v163 = 0;
      v164 = -128;
      v214 = v161;
      v165 = v161;
      do
      {
        v166 = *(int *)(a1 + 496);
        if (v159 + v163 - v166 >= *(int *)(a1 + 500) || v159 + v163 > v231)
          break;
        v168 = (float32x4_t *)(*(_QWORD *)(a1 + 504) - 32 * v166 + v165);
        v169 = v168[-1];
        v170 = vaddq_f32(vmulq_f32(v221, v169), *v168).u64[0];
        v171 = vaddq_f32(vmulq_f32(v218, v169), *v168).u64[0];
        v172 = HGRectIntegral((uint64_t)v168, *(float *)&v170, *((float *)&v170 + 1), *(float *)&v171, *((float *)&v171 + 1));
        v174 = v162 + v164;
        *(_QWORD *)(v174 - 4) = HGRectGrow(v172, v173, v229);
        *(_QWORD *)(v174 + 4) = v175;
        v176 = HGRenderer::GetInput(v12, (HGNode *)a1, v160 + (int)v163 - *(_DWORD *)(a1 + 496));
        *(_QWORD *)(v162 + 8 * v163++) = HGGPURenderer::GetNodeTexture(v12, v176, *(HGRect *)(v162 + v164 - 4), 0, 1u);
        v165 += 32;
        v164 += 16;
      }
      while (v163 != 8);
      (*(void (**)(HGRenderer *, _QWORD))(*(_QWORD *)v12 + 144))(v12, *(_QWORD *)(a2 + 8));
      if ((int)v159 - *(_DWORD *)(a1 + 496) < *(_DWORD *)(a1 + 500) && v159 <= v231)
      {
        (*(void (**)(HGRenderer *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 152))(v12, 0, *(_QWORD *)(a2 + 168), 0, 0);
        if ((int)v159 - *(_DWORD *)(a1 + 496) + 1 < *(_DWORD *)(a1 + 500) && v159 < v231)
        {
          (*(void (**)(HGRenderer *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 152))(v12, 1, *(_QWORD *)(a2 + 176), 0, 0);
          if ((int)v159 - *(_DWORD *)(a1 + 496) + 2 < *(_DWORD *)(a1 + 500) && v159 + 2 <= v231)
          {
            (*(void (**)(HGRenderer *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 152))(v12, 2, *(_QWORD *)(a2 + 184), 0, 0);
            if ((int)v159 - *(_DWORD *)(a1 + 496) + 3 < *(_DWORD *)(a1 + 500) && v159 + 3 <= v231)
            {
              (*(void (**)(HGRenderer *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 152))(v12, 3, *(_QWORD *)(a2 + 192), 0, 0);
              if ((int)v159 - *(_DWORD *)(a1 + 496) + 4 < *(_DWORD *)(a1 + 500) && v159 + 4 <= v231)
              {
                (*(void (**)(HGRenderer *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 152))(v12, 4, *(_QWORD *)(a2 + 200), 0, 0);
                if ((int)v159 - *(_DWORD *)(a1 + 496) + 5 < *(_DWORD *)(a1 + 500) && v159 + 5 <= v231)
                {
                  (*(void (**)(HGRenderer *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 152))(v12, 5, *(_QWORD *)(a2 + 208), 0, 0);
                  if ((int)v159 - *(_DWORD *)(a1 + 496) + 6 < *(_DWORD *)(a1 + 500) && v159 + 6 <= v231)
                  {
                    (*(void (**)(HGRenderer *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 152))(v12, 6, *(_QWORD *)(a2 + 216), 0, 0);
                    if ((int)v159 - *(_DWORD *)(a1 + 496) + 7 < *(_DWORD *)(a1 + 500) && v159 + 7 <= v231)
                      (*(void (**)(HGRenderer *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 152))(v12, 7, *(_QWORD *)(a2 + 224), 0, 0);
                  }
                }
              }
            }
          }
        }
      }
      result = (*(uint64_t (**)(HGRenderer *, _QWORD, uint64_t))(*(_QWORD *)v12 + 368))(v12, *(_QWORD *)(a1 + 64), a1);
      if (result)
      {
        v178 = (HGHandler *)result;
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 32))(result, 3553, 0, 0, 0, 0, 0, 0, 0);
        v179 = 0;
        v180 = v214;
        do
        {
          if (v160 + (int)v179 - *(_DWORD *)(a1 + 496) >= *(_DWORD *)(a1 + 500) || v159 + v179 > v231)
            break;
          if (*(_QWORD *)(v162 + 8 * v179))
          {
            (*(void (**)(uint64_t, HGHandler *, uint64_t))(*(_QWORD *)a1 + 208))(a1, v178, v179);
            (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)v178 + 72))(v178, v179, 0);
            (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)v178 + 48))(v178, a7, a7);
            result = *(_QWORD *)(v162 + 8 * v179);
            if (!result)
              return result;
            if (!result)
              return result;
            TextureRect = HGGLTexture::GetTextureRect((HGGLTexture *)result);
            v184 = 1.0 / (double)(v182 - TextureRect);
            v185 = 1.0 / (double)(v183 - HIDWORD(TextureRect));
            v186 = (_OWORD *)(*(_QWORD *)(a1 + 504) - 32 * *(int *)(a1 + 496) + v180);
            v187 = v184 * (float)(COERCE_FLOAT(*v186) - (float)(int)TextureRect);
            v188 = v185 * (float)(COERCE_FLOAT(HIDWORD(*(_QWORD *)v186)) - (float)SHIDWORD(TextureRect));
            *(float *)&v184 = v184 * COERCE_FLOAT(*(v186 - 1));
            *(float *)&v185 = v185 * COERCE_FLOAT(HIDWORD(*((_QWORD *)v186 - 2)));
            v189 = v187;
            v190 = v188;
            (*(void (**)(HGHandler *, uint64_t, float, float, float, float))(*(_QWORD *)v178 + 136))(v178, v179, *(float *)&v184, *(float *)&v185, v189, v190);
          }
          ++v179;
          v180 += 32;
        }
        while (v179 != 8);
        (*(void (**)(HGHandler *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v178 + 24))(v178, 0, 0, 0, 0, 0, 0);
        (*(void (**)(uint64_t, HGHandler *))(*(_QWORD *)a1 + 200))(a1, v178);
        (*(void (**)(HGHandler *, uint64_t, float, float, float, float))(*(_QWORD *)v178 + 136))(v178, 8, (float)v230, (float)v231, (float)(int)v159, (float)(v159 + 7));
        (*(void (**)(HGHandler *, uint64_t, float, float, float, float))(*(_QWORD *)v178 + 136))(v178, 9, *(float *)(*(_QWORD *)(a1 + 480) + 424), 0.000001, *(float *)(*(_QWORD *)(a1 + 480) + 424), v158);
        (*(void (**)(HGHandler *))(*(_QWORD *)v178 + 40))(v178);
        *(_QWORD *)&v238.var0 = v211;
        *(_QWORD *)&v238.var2 = v216;
        HGGPURenderer::Rect(v12, v178, v238, 1);
        result = (*(uint64_t (**)(HGRenderer *, HGHandler *))(*(_QWORD *)v12 + 392))(v12, v178);
        v192 = *(_DWORD *)(a1 + 496);
        v193 = *(_DWORD *)(a1 + 500);
        if ((int)v159 - v192 < v193)
        {
          v194 = v231;
          if (v159 <= v231)
          {
            result = *(_QWORD *)(a2 + 168);
            if (result)
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
              v192 = *(_DWORD *)(a1 + 496);
              v193 = *(_DWORD *)(a1 + 500);
              v194 = v231;
            }
            if ((int)v159 - v192 + 1 < v193 && v159 < v194)
            {
              result = *(_QWORD *)(a2 + 176);
              if (result)
              {
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
                v192 = *(_DWORD *)(a1 + 496);
                v193 = *(_DWORD *)(a1 + 500);
                v194 = v231;
              }
              if ((int)v159 - v192 + 2 < v193 && v159 + 2 <= v194)
              {
                result = *(_QWORD *)(a2 + 184);
                if (result)
                {
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
                  v192 = *(_DWORD *)(a1 + 496);
                  v193 = *(_DWORD *)(a1 + 500);
                  v194 = v231;
                }
                if ((int)v159 - v192 + 3 < v193 && v159 + 3 <= v194)
                {
                  result = *(_QWORD *)(a2 + 192);
                  if (result)
                  {
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
                    v192 = *(_DWORD *)(a1 + 496);
                    v193 = *(_DWORD *)(a1 + 500);
                    v194 = v231;
                  }
                  if ((int)v159 - v192 + 4 < v193 && v159 + 4 <= v194)
                  {
                    result = *(_QWORD *)(a2 + 200);
                    if (result)
                    {
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
                      v192 = *(_DWORD *)(a1 + 496);
                      v193 = *(_DWORD *)(a1 + 500);
                      v194 = v231;
                    }
                    if ((int)v159 - v192 + 5 < v193 && v159 + 5 <= v194)
                    {
                      result = *(_QWORD *)(a2 + 208);
                      if (result)
                      {
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
                        v192 = *(_DWORD *)(a1 + 496);
                        v193 = *(_DWORD *)(a1 + 500);
                        v194 = v231;
                      }
                      if ((int)v159 - v192 + 6 < v193 && v159 + 6 <= v194)
                      {
                        result = *(_QWORD *)(a2 + 216);
                        if (result)
                        {
                          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
                          v192 = *(_DWORD *)(a1 + 496);
                          v193 = *(_DWORD *)(a1 + 500);
                          v194 = v231;
                        }
                        if ((int)v159 - v192 + 7 < v193 && v159 + 7 <= v194)
                        {
                          result = *(_QWORD *)(a2 + 224);
                          if (result)
                            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v159 += v209;
      v160 += v209;
      v161 = v214 + v206;
    }
    while (v159 <= v231);
  }
  return result;
}

uint64_t HGAnisotropicSampler::GetPageMetal(uint64_t a1, HGBitmap **a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, double a9, double a10, double a11, double a12, int a13)
{
  HGBitmap *v19;
  uint64_t v20;
  int v21;
  HGTransform *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  HGRect v30;
  uint64_t v31;
  float v32;
  float v33;
  double v34;
  int v35;
  int v36;
  HGGPURenderer *v37;
  unint64_t v38;
  unsigned int v39;
  HGRect v40;
  uint64_t v41;
  float v42;
  float v43;
  double v44;
  int v45;
  int v46;
  HGTransform *v47;
  HGGPURenderer *v48;
  unsigned int MaxTileArea;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  float32x4_t v55;
  uint64_t result;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  double v61;
  double v62;
  unsigned int v63;
  uint64_t v64;
  HGTransform *v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  float v69;
  int v70;
  int v71;
  HGGPURenderer *v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  char *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  HGTransform *v96;
  HGBitmap **v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float32x4_t *v103;
  float32x4_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  HGBitmap *v109;
  HGNode *Input;
  HGBitmap *NodeBitmap;
  HGBitmap *v112;
  HGTexture *v113;
  HGTransform *v114;
  std::string *v115;
  const char *v116;
  size_t v117;
  std::string::size_type v118;
  std::string *p_dst;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  HGBitmap **v123;
  HGBitmap **v124;
  HGBitmap *v125;
  __n128 v126;
  uint64_t v127;
  uint64_t v128;
  HGTransform *v129;
  __n128 *v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  float32x4_t v143;
  int v144;
  float32x4_t v145;
  uint64_t v146;
  int v147[2];
  int v148;
  uint64_t v149;
  HGTransform *v150;
  HGTransform *v151;
  HGTransform *v152;
  int v155;
  std::string __dst;
  int v158;
  int v159;
  uint64_t v160;
  HGRect v161;
  HGRect v162;
  HGRect v163;
  HGRect v164;
  HGRect v165;
  HGRect v166;
  HGRect v167;

  v160 = *MEMORY[0x1E0C80C00];
  v19 = *a2;
  v20 = *(_QWORD *)(a1 + 480);
  v21 = *(_DWORD *)(v20 + 436);
  v22 = *(HGTransform **)(v20 + 448);
  v144 = v21;
  if (v21 < 2)
  {
    v41 = *(_QWORD *)(v20 + 464);
    *(_QWORD *)&v40.var2 = *(_QWORD *)(v20 + 472);
    v31 = a7;
    if ((int)a7 <= 0)
      v42 = 0.5;
    else
      v42 = 1.5;
    v43 = *(float *)(v20 + 424);
    v44 = (double)v21;
    v45 = *(_DWORD *)(v20 + 480);
    v46 = *(_DWORD *)(v20 + 484);
    if (v19)
    {
      v148 = *(_DWORD *)(v20 + 480);
      v151 = *(HGTransform **)(v20 + 472);
      v47 = *(HGTransform **)(v20 + 448);
      if (v48)
        MaxTileArea = HGGPURenderer::GetMaxTileArea(v48);
      else
        MaxTileArea = 0x1000000;
      v22 = v47;
      *(_QWORD *)&v40.var2 = v151;
      v45 = v148;
    }
    else
    {
      MaxTileArea = 0x1000000;
    }
    v38 = a3;
    *(_QWORD *)&v162.var0 = a3;
    *(_QWORD *)&v162.var2 = a4;
    *(_QWORD *)&v40.var0 = v41;
    *(float *)&a9 = v42;
    v50 = hg_clip(v22, v162, v40, a9, v43, v44, a12, &v158, v45, v46, MaxTileArea);
  }
  else
  {
    v150 = *(HGTransform **)(v20 + 448);
    v23 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v24 = HGRectGrow(a3, a4, v23);
    v28 = v27;
    v29 = *(_QWORD *)(a1 + 480);
    v30 = *(HGRect *)(v29 + 464);
    v31 = a7;
    if ((int)a7 <= 0)
      v32 = 0.5;
    else
      v32 = 1.5;
    v33 = *(float *)(v29 + 424);
    v34 = (double)v21;
    v35 = *(_DWORD *)(v29 + 480);
    v36 = *(_DWORD *)(v29 + 484);
    if (v19)
    {
      v142 = *(_DWORD *)(v29 + 480);
      v146 = *(_QWORD *)(v29 + 472);
      *(_QWORD *)v147 = *(_QWORD *)(v29 + 464);
      v38 = a3;
      if (v37)
        v39 = HGGPURenderer::GetMaxTileArea(v37);
      else
        v39 = 0x1000000;
      *(_QWORD *)&v30.var2 = v146;
      *(_QWORD *)&v30.var0 = *(_QWORD *)v147;
      v35 = v142;
    }
    else
    {
      v38 = a3;
      v39 = 0x1000000;
    }
    *(_QWORD *)&v161.var0 = v24;
    *(_QWORD *)&v161.var2 = v28;
    *(float *)&v25 = v32;
    v50 = hg_clip(v150, v161, v30, v25, v33, v34, v26, &v158, v35, v36, v39);
  }
  v52 = v50;
  v53 = v51;
  if (HGRectIsNull(v50, v51))
  {
    *(_QWORD *)&v165.var0 = v38;
    *(_QWORD *)&v165.var2 = a4;
    return (uint64_t)HGGPURenderer::ClearMetal((HGGPURenderer *)v19, a2[1], v165, v54);
  }
  result = v38;
  v57 = HIDWORD(v38);
  v58 = a4;
  v59 = HIDWORD(a4);
  v60 = v158;
  v61 = (double)a8;
  v62 = fmax(((double)(int)v53 - (double)(int)v52) * (1.0 / (double)(1 << v60)) / (double)a8, ((double)SHIDWORD(v53) - (double)SHIDWORD(v52)) * (1.0 / (double)(1 << v60)) / (double)a8);
  v63 = a4 - v38;
  if ((_DWORD)a4 - (_DWORD)v38 == 1 && HIDWORD(a4) - HIDWORD(v38) == 1 && v62 > 1.0)
  {
    v138 = v38;
    v64 = *(_QWORD *)(a1 + 480);
    v65 = *(HGTransform **)(v64 + 448);
    v66 = *(_QWORD *)(v64 + 464);
    v67 = *(_QWORD *)(v64 + 472);
    if ((int)v31 <= 0)
      v68 = 0.5;
    else
      v68 = 1.5;
    v69 = *(float *)(v64 + 424);
    v70 = *(_DWORD *)(v64 + 480);
    v71 = *(_DWORD *)(v64 + 484);
    if (v19
    {
      v73 = HGGPURenderer::GetMaxTileArea(v72);
      v58 = a4;
    }
    else
    {
      v73 = 0x1000000;
    }
    *(_QWORD *)&v163.var0 = v138;
    *(_QWORD *)&v163.var2 = v58;
    *(_QWORD *)&v167.var0 = v66;
    *(_QWORD *)&v167.var2 = v67;
    *(float *)&v62 = v68;
    v52 = hg_clip(v65, v163, v167, v62, v69, 1.0, v61, &v158, v70, v71, v73);
    v53 = v89;
    result = HGRectIsNull(v52, v89);
    if ((_DWORD)result)
    {
      *(_QWORD *)&v166.var0 = v138;
      *(_QWORD *)&v166.var2 = a4;
      return (uint64_t)HGGPURenderer::ClearMetal((HGGPURenderer *)v19, a2[1], v166, v90);
    }
    v141 = 0;
    v60 = v159;
    v158 = v159;
    v88 = 1;
  }
  else
  {
    if (v62 > 2.0)
    {
      v139 = v38;
      if (SHIDWORD(a4) > SHIDWORD(v38) && (int)a4 > (int)v38)
      {
        v74 = (uint64_t)rint(fmax(sqrt(((double)(int)a4 - (double)(int)v38) * ((double)SHIDWORD(a4) - (double)SHIDWORD(v38)) / v62), 1.0));
        do
        {
          v75 = v57 + v74;
          if ((int)v57 + (int)v74 >= (int)v59)
            v76 = v59;
          else
            v76 = v57 + v74;
          LODWORD(result) = v139;
          v77 = a4;
          do
          {
            v78 = (result + v74);
            if ((int)v78 >= v77)
              v79 = v77;
            else
              v79 = result + v74;
            v80 = HGRectMake4i(result, v57, v79, v76);
            HGAnisotropicSampler::GetPageMetal(a1, a2, v80, v81, a5, a6, v31, a8, a13 + 1);
            result = v78;
            v77 = a4;
          }
          while ((int)v78 < (int)a4);
          LODWORD(v57) = v57 + v74;
          LODWORD(v59) = HIDWORD(a4);
        }
        while (v75 < SHIDWORD(a4));
      }
      return result;
    }
    if (v62 > 1.0)
    {
      v82 = a13 + 1;
      if (HIDWORD(a4) - (int)v57 <= v63)
      {
        v91 = ((int)result + (int)a4) >> 1;
        v92 = HGRectMake4i(result, v57, v91, HIDWORD(a4));
        HGAnisotropicSampler::GetPageMetal(a1, a2, v92, v93, a5, a6, v31, a8, v82);
        v86 = HGRectMake4i(v91, v57, a4, HIDWORD(a4));
      }
      else
      {
        v83 = result;
        v84 = HGRectMake4i(result, v57, a4, ((int)v57 + HIDWORD(a4)) >> 1);
        HGAnisotropicSampler::GetPageMetal(a1, a2, v84, v85, a5, a6, v31, a8, v82);
        v86 = HGRectMake4i(v83, ((int)v57 + HIDWORD(a4)) >> 1, a4, HIDWORD(a4));
      }
      return HGAnisotropicSampler::GetPageMetal(a1, a2, v86, v87, a5, a6, v31, a8, v82);
    }
    v138 = v38;
    v141 = v31;
    if ((int)v31 >= 1)
    {
      result = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      v149 = result;
      v60 = v158;
      v88 = v144;
      if (v158 <= v159)
        goto LABEL_62;
      return result;
    }
    v88 = v144;
  }
  v149 = 0;
  if (v60 <= v159)
  {
LABEL_62:
    if (v141)
      v94 = 7;
    else
      v94 = 8;
    v55.f32[0] = (float)(int)v52;
    v55.f32[1] = (float)SHIDWORD(v52);
    v145 = v55;
    v55.f32[0] = (float)(int)v53;
    v55.f32[1] = (float)SHIDWORD(v53);
    v143 = v55;
    v95 = (float)v88;
    v96 = (HGTransform *)v60;
    v97 = a2 + 21;
    v155 = v60;
    v98 = (32 * v60) | 0x10;
    v136 = 32 * v94;
    v137 = v94;
    v135 = (uint64_t *)(a2 + 28);
    while (1)
    {
      v99 = 0;
      v100 = 0x1FFFFFFFFFFFFFF0;
      v140 = v98;
      v152 = v96;
      do
      {
        v101 = *(int *)(a1 + 496);
        if ((uint64_t)v96 + v99 - v101 >= *(int *)(a1 + 500) || (uint64_t)v96 + v99 > v159)
          break;
        v103 = (float32x4_t *)(*(_QWORD *)(a1 + 504) - 32 * v101 + v98);
        v104 = v103[-1];
        v105 = vaddq_f32(vmulq_f32(v145, v104), *v103).u64[0];
        v106 = vaddq_f32(vmulq_f32(v143, v104), *v103).u64[0];
        v107 = HGRectIntegral((uint64_t)v103, *(float *)&v105, *((float *)&v105 + 1), *(float *)&v106, *((float *)&v106 + 1));
        *(HGBitmap **)((char *)&v97[v100 - 1] + 4) = (HGBitmap *)HGRectGrow(v107, v108, v149);
        *(HGBitmap **)((char *)&v97[v100] + 4) = v109;
        Input = HGRenderer::GetInput((HGRenderer *)v19, (HGNode *)a1, v155 + (int)v99 - *(_DWORD *)(a1 + 496));
        NodeBitmap = HGGPURenderer::GetNodeBitmap((HGGPURenderer *)v19, Input, *(HGRect *)((char *)&v97[v100 - 1] + 4), 0, 1u);
        v112 = HGGPURenderer::ConvertToNonGLTexture((HGGPURenderer *)v19, NodeBitmap);
        v113 = (HGTexture *)HGObject::operator new(0x80uLL);
        *(_QWORD *)&v164.var0 = *(_QWORD *)((char *)v112 + 20);
        *(_QWORD *)&v164.var2 = *(_QWORD *)((char *)v112 + 28);
        HGTexture::HGTexture(v113, v164, v112);
        v97[v99] = (HGBitmap *)v113;
        (*(void (**)(HGBitmap *))(*(_QWORD *)v112 + 24))(v112);
        (*(void (**)(HGBitmap *))(*(_QWORD *)NodeBitmap + 24))(NodeBitmap);
        ++v99;
        v98 += 32;
        v100 += 2;
        v96 = v152;
      }
      while (v99 != 8);
      result = (*(uint64_t (**)(HGBitmap *, _QWORD, uint64_t))(*(_QWORD *)*a2 + 368))(*a2, *(_QWORD *)(a1 + 64), a1);
      v114 = v152;
      if (result)
      {
        if (result)
          break;
      }
LABEL_66:
      v96 = (HGTransform *)((char *)v114 + v137);
      v155 += v137;
      v98 = v140 + v136;
      if ((uint64_t)v96 > v159)
        return result;
    }
    v115 = (std::string *)result;
    v116 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v117 = strlen(v116);
    if (v117 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v118 = v117;
    if (v117 >= 0x17)
    {
      v120 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v117 | 7) != 0x17)
        v120 = v117 | 7;
      v121 = v120 + 1;
      p_dst = (std::string *)operator new(v120 + 1);
      __dst.__r_.__value_.__l.__size_ = v118;
      __dst.__r_.__value_.__r.__words[2] = v121 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v117;
      p_dst = &__dst;
      if (!v117)
        goto LABEL_84;
    }
    memmove(p_dst, v116, v118);
LABEL_84:
    p_dst->__r_.__value_.__s.__data_[v118] = 0;
    HGMetalHandler::SetDebugLabel(v115, &__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    HGMetalHandler::BindBuffer((HGMetalHandler *)v115, a2[1]);
    v122 = 0;
    if ((int)v152 - *(_DWORD *)(a1 + 496) < *(_DWORD *)(a1 + 500) && (uint64_t)v152 <= v159)
    {
      HGMetalHandler::BindTexture((HGMetalTexture ***)v115, 0, a2[21]);
      v122 = 1;
      if ((int)v152 - *(_DWORD *)(a1 + 496) + 1 < *(_DWORD *)(a1 + 500) && (uint64_t)v152 < v159)
      {
        HGMetalHandler::BindTexture((HGMetalTexture ***)v115, 1, a2[22]);
        v122 = 2;
        if ((int)v152 - *(_DWORD *)(a1 + 496) + 2 < *(_DWORD *)(a1 + 500) && (uint64_t)v152 + 2 <= v159)
        {
          HGMetalHandler::BindTexture((HGMetalTexture ***)v115, 2, a2[23]);
          v122 = 3;
          if ((int)v152 - *(_DWORD *)(a1 + 496) + 3 < *(_DWORD *)(a1 + 500) && (uint64_t)v152 + 3 <= v159)
          {
            HGMetalHandler::BindTexture((HGMetalTexture ***)v115, 3, a2[24]);
            v122 = 4;
            if ((int)v152 - *(_DWORD *)(a1 + 496) + 4 < *(_DWORD *)(a1 + 500) && (uint64_t)v152 + 4 <= v159)
            {
              HGMetalHandler::BindTexture((HGMetalTexture ***)v115, 4, a2[25]);
              v122 = 5;
              if ((int)v152 - *(_DWORD *)(a1 + 496) + 5 < *(_DWORD *)(a1 + 500) && (uint64_t)v152 + 5 <= v159)
              {
                HGMetalHandler::BindTexture((HGMetalTexture ***)v115, 5, a2[26]);
                v122 = 6;
                if ((int)v152 - *(_DWORD *)(a1 + 496) + 6 < *(_DWORD *)(a1 + 500) && (uint64_t)v152 + 6 <= v159)
                {
                  HGMetalHandler::BindTexture((HGMetalTexture ***)v115, 6, a2[27]);
                  v122 = 7;
                  if ((int)v152 - *(_DWORD *)(a1 + 496) + 7 < *(_DWORD *)(a1 + 500))
                  {
                    v123 = a2 + 28;
                    if ((uint64_t)v152 + 7 <= v159)
                      goto LABEL_109;
                  }
                }
              }
            }
          }
        }
      }
    }
    v124 = &a2[v122];
    v125 = v124[20];
    v123 = v124 + 20;
    v126 = HGMetalHandler::BindTexture((HGMetalTexture ***)v115, v122, v125);
    if (v122 != 7)
    {
      v126 = HGMetalHandler::BindTexture((HGMetalTexture ***)v115, v122 + 1, *v123);
      if (v122 != 6)
      {
        v126 = HGMetalHandler::BindTexture((HGMetalTexture ***)v115, v122 + 2, *v123);
        if (v122 != 5)
        {
          v126 = HGMetalHandler::BindTexture((HGMetalTexture ***)v115, v122 + 3, *v123);
          if (v122 != 4)
          {
            v126 = HGMetalHandler::BindTexture((HGMetalTexture ***)v115, v122 + 4, *v123);
            if (v122 != 3)
            {
              v126 = HGMetalHandler::BindTexture((HGMetalTexture ***)v115, v122 + 5, *v123);
              if (v122 != 2)
              {
                v126 = HGMetalHandler::BindTexture((HGMetalTexture ***)v115, v122 + 6, *v123);
                v122 += 7;
                if (v122 != 8)
LABEL_109:
                  v126 = HGMetalHandler::BindTexture((HGMetalTexture ***)v115, v122, *v123);
              }
            }
          }
        }
      }
    }
    (*(void (**)(std::string *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128, _QWORD))(v115->__r_.__value_.__r.__words[0] + 32))(v115, 3553, 0, 0, 0, 0, 0, 0, v126, 0);
    v127 = 0;
    v128 = v140;
    v129 = v152;
    do
    {
      if (v155 + (int)v127 - *(_DWORD *)(a1 + 496) >= *(_DWORD *)(a1 + 500) || (uint64_t)v129 + v127 > v159)
        break;
      if (v97[v127])
      {
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 208))(a1, v115, v127);
        (*(void (**)(std::string *, uint64_t, _QWORD))(v115->__r_.__value_.__r.__words[0] + 72))(v115, v127, 0);
        (*(void (**)(std::string *, _QWORD, _QWORD))(v115->__r_.__value_.__r.__words[0] + 48))(v115, v141, v141);
        v131 = (__n128 *)(*(_QWORD *)(a1 + 504) - 32 * *(int *)(a1 + 496) + v128);
        (*(void (**)(std::string *, uint64_t, __n128, float, float, float))(v115->__r_.__value_.__r.__words[0]
                                                                                    + 136))(v115, v127, v131[-1], COERCE_FLOAT(HIDWORD(v131[-1].n128_u64[0])), COERCE_FLOAT(*v131) - (float)*((int *)v97[v127] + 5), COERCE_FLOAT(HIDWORD(v131->n128_u64[0])) - (float)*((int *)v97[v127] + 6));
        v129 = v152;
      }
      ++v127;
      v128 += 32;
    }
    while (v127 != 8);
    (*(void (**)(std::string *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v115->__r_.__value_.__r.__words[0]
                                                                                          + 24))(v115, 0, 0, 0, 0, 0, 0);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 200))(a1, v115);
    (*(void (**)(std::string *, uint64_t, float, float, float, float))(v115->__r_.__value_.__r.__words[0] + 136))(v115, 8, (float)v158, (float)v159, (float)(int)v152, (float)((int)v152 + 7));
    (*(void (**)(std::string *, uint64_t, float, float, float, float))(v115->__r_.__value_.__r.__words[0] + 136))(v115, 9, *(float *)(*(_QWORD *)(a1 + 480) + 424), 0.000001, *(float *)(*(_QWORD *)(a1 + 480) + 424), v95);
    (*(void (**)(std::string *))(v115->__r_.__value_.__r.__words[0] + 40))(v115);
    (*(void (**)(std::string *, unint64_t, unint64_t, uint64_t))(v115->__r_.__value_.__r.__words[0]
                                                                                       + 192))(v115, v138, a4, 1);
    result = (*(uint64_t (**)(HGBitmap *, std::string *))(*(_QWORD *)v19 + 392))(v19, v115);
    v132 = *(_DWORD *)(a1 + 496);
    v114 = v152;
    v133 = *(_DWORD *)(a1 + 500);
    if ((int)v152 - v132 < v133)
    {
      v134 = v159;
      if ((uint64_t)v152 <= v159)
      {
        result = (uint64_t)a2[21];
        if (result)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
          v132 = *(_DWORD *)(a1 + 496);
          v133 = *(_DWORD *)(a1 + 500);
          v134 = v159;
          v114 = v152;
        }
        if ((int)v114 - v132 + 1 < v133 && (uint64_t)v114 < v134)
        {
          result = (uint64_t)a2[22];
          if (result)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
            v132 = *(_DWORD *)(a1 + 496);
            v133 = *(_DWORD *)(a1 + 500);
            v134 = v159;
            v114 = v152;
          }
          if ((int)v114 - v132 + 2 < v133 && (uint64_t)v114 + 2 <= v134)
          {
            result = (uint64_t)a2[23];
            if (result)
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
              v132 = *(_DWORD *)(a1 + 496);
              v133 = *(_DWORD *)(a1 + 500);
              v134 = v159;
              v114 = v152;
            }
            if ((int)v114 - v132 + 3 < v133 && (uint64_t)v114 + 3 <= v134)
            {
              result = (uint64_t)a2[24];
              if (result)
              {
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
                v132 = *(_DWORD *)(a1 + 496);
                v133 = *(_DWORD *)(a1 + 500);
                v134 = v159;
                v114 = v152;
              }
              if ((int)v114 - v132 + 4 < v133 && (uint64_t)v114 + 4 <= v134)
              {
                result = (uint64_t)a2[25];
                if (result)
                {
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
                  v132 = *(_DWORD *)(a1 + 496);
                  v133 = *(_DWORD *)(a1 + 500);
                  v134 = v159;
                  v114 = v152;
                }
                if ((int)v114 - v132 + 5 < v133 && (uint64_t)v114 + 5 <= v134)
                {
                  result = (uint64_t)a2[26];
                  if (result)
                  {
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
                    v132 = *(_DWORD *)(a1 + 496);
                    v133 = *(_DWORD *)(a1 + 500);
                    v134 = v159;
                    v114 = v152;
                  }
                  if ((int)v114 - v132 + 6 < v133 && (uint64_t)v114 + 6 <= v134)
                  {
                    result = (uint64_t)a2[27];
                    if (result)
                    {
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
                      v132 = *(_DWORD *)(a1 + 496);
                      v133 = *(_DWORD *)(a1 + 500);
                      v134 = v159;
                      v114 = v152;
                    }
                    if ((int)v114 - v132 + 7 < v133 && (uint64_t)v152 + 7 <= v134)
                    {
                      result = *v135;
                      if (*v135)
                      {
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
                        v114 = v152;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_66;
  }
  return result;
}

void sub_1B2AB6B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

HGRenderer *HGAnisotropicSampler::RenderPage(HGAnisotropicSampler *this, HGRenderer **a2)
{
  return HGAnisotropicSampler::RenderPageGeneric((uint64_t)this, a2, 0);
}

HGRenderer *HGAnisotropicSampler::RenderPageMetal(HGAnisotropicSampler *this, HGRenderer **a2)
{
  return HGAnisotropicSampler::RenderPageGeneric((uint64_t)this, a2, 1);
}

uint64_t HGAnisotropicSampler::RenderTile(HGAnisotropicSampler *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t Stack;
  float32x4_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HGAnisotropicSampler *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *((_QWORD *)a2 + 42);
  v7 = (*((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1)) * *((_DWORD *)a2 + 6);
  Stack = HGExecutionUnit::GetStack((uint64_t ****)v6, v7);
  v9 = (float32x4_t *)*((_QWORD *)a2 + 2);
  if ((float32x4_t *)Stack == v9)
  {
    HGExecutionUnit::CommitStack(v6, Stack, v7);
    v9 = (float32x4_t *)*((_QWORD *)a2 + 2);
  }
  v10 = *(_QWORD *)a2;
  v11 = *((_QWORD *)a2 + 1);
  v12 = *((unsigned int *)a2 + 6);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 152) + 128))(*(_QWORD *)(v6 + 152), 3);
  HGAnisotropicSampler::GetTile((uint64_t)this, (uint64_t)a2, v10, v11, v9, v12, v5, v13, 0);
  return 0;
}

void HGAnisotropicSampler::GetTile(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, float32x4_t *a5, uint64_t a6, int a7, unsigned int a8, int a9)
{
  int v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  HGRect v26;
  float v27;
  float v28;
  double v29;
  int v30;
  int v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  HGGPURenderer *v36;
  unsigned int MaxTileArea;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  double v45;
  double v46;
  unsigned int v47;
  double v48;
  uint64_t v49;
  HGTransform *v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  int v54;
  int v55;
  HGGPURenderer *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  float32x4_t *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  float32x4_t v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int v89;
  float32x4_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  uint64_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int32x4_t v105;
  float32x4_t v106;
  float32x4_t v112;
  float32x4_t v113;
  int8x16_t v114;
  unsigned __int32 v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int32x4_t v119;
  float32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  float32x4_t v123;
  int8x16_t v124;
  int8x16_t v125;
  uint64_t v126;
  uint64_t v127;
  float32x4_t v128;
  int32x4_t v129;
  float32x2_t v130;
  float32x4_t *v131;
  float32x4_t v132;
  const float *v133;
  float32x4_t v134;
  int v135;
  int v136;
  int32x4_t v137;
  float32x4_t v138;
  uint64_t v140;
  uint64_t v141;
  float32x4_t v142;
  uint64_t v143;
  uint64_t v144;
  int32x4_t *v145;
  uint64_t v146;
  float32x4_t *v148;
  float32x4_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  int32x4_t v155;
  int v156;
  float32x4_t v157;
  float32x4_t v158;
  uint64_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  int8x16_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  signed __int32 v185;
  signed __int32 v187;
  uint64_t v188;
  uint64_t v189;
  float32x4_t v190;
  uint64_t v191;
  float32x4_t v192;
  int32x4_t v193;
  int8x16_t v194;
  int8x16_t v195;
  unsigned __int32 v196;
  float32x4_t v197;
  uint64_t v198;
  uint64_t v199;
  float32x4_t v200;
  uint64_t v201;
  uint64_t v202;
  float32x4_t v203;
  int32x4_t v204;
  float32x4_t *v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  float32x4_t v212;
  int32x4_t v213;
  float32x4_t *v214;
  float32x4_t v215;
  float32x4_t v216;
  int v217;
  uint64_t v219;
  uint64_t v220;
  float32x4_t v221;
  uint64_t v222;
  uint64_t v223;
  int32x4_t *v224;
  uint64_t v225;
  float32x4_t *v227;
  float32x4_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  int32x4_t v234;
  int v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  uint64_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  int8x16_t v247;
  unsigned __int32 v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  signed __int32 v264;
  uint64_t v265;
  float32x4_t *v267;
  float32x4_t v268;
  float32x4_t v269;
  int32x4_t v270;
  int8x16_t v271;
  int8x16_t v272;
  uint64_t v273;
  float32x4_t v274;
  int32x4_t v275;
  int v276;
  float32x4_t v278;
  float32x4_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  float32x4_t v285;
  uint64_t v287;
  uint64_t v288;
  int32x4_t *v289;
  uint64_t v290;
  float32x4_t *v292;
  float32x4_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  int32x4_t v299;
  float32x4_t v300;
  int v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  uint64_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  int32x4_t v321;
  float32x4_t *v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  int32x4_t v326;
  float32x4_t *v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  int32x4_t v331;
  float32x4_t *v332;
  float32x4_t v333;
  float32x4_t v334;
  int32x4_t v335;
  float32x4_t *v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  int8x16_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int8x16_t v349;
  int32x2_t v350;
  int8x16_t v351;
  float32x4_t v352;
  int8x16_t v353;
  float32x4_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  signed __int32 v384;
  signed __int32 v386;
  uint64_t v387;
  uint64_t v388;
  float32x4_t *v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  uint64_t v393;
  float32x4_t v394;
  int32x4_t v395;
  int8x16_t v396;
  int8x16_t v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t v400;
  int v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  uint64_t v406;
  uint64_t v407;
  float32x4_t v408;
  uint64_t v409;
  uint64_t v410;
  float32x4_t v411;
  int32x4_t v412;
  float32x4_t *v413;
  float32x4_t v414;
  uint64_t v415;
  float32x4_t v416;
  float32x4_t *v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  float32x4_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  float32x4_t v425;
  int32x4_t v426;
  float32x4_t *v427;
  float32x4_t v428;
  float32x4_t v429;
  uint64_t v430;
  unsigned int v431;
  float32x4_t v432;
  int32x4_t v433;
  float32x4_t *v434;
  float32x4_t v435;
  float32x4_t v436;
  float32x4_t v437;
  int32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t *v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  int32x4_t v446;
  float32x4_t v447;
  float32x4_t *v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  int32x4_t v454;
  float32x4_t v455;
  float32x4_t *v456;
  float32x4_t v457;
  float32x4_t v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  float32x4_t v462;
  uint64_t v464;
  uint64_t v465;
  int32x4_t *v466;
  uint64_t v467;
  float32x4_t *v469;
  float32x4_t v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  int32x4_t v476;
  int v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  uint64_t v482;
  float32x4_t v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  float32x4_t v488;
  float32x4_t v489;
  int32x4_t v490;
  float32x4_t v491;
  int32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  float32x4_t v496;
  int8x16_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  int8x16_t v502;
  int8x16_t v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  float32x4_t v507;
  float32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  float32x4_t v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  float32x4_t v517;
  float32x4_t v518;
  float32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  float32x4_t v525;
  float32x4_t v526;
  signed __int32 v527;
  uint64_t v528;
  uint64_t v530;
  float32x4_t v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  int32x4_t v535;
  int8x16_t v536;
  int8x16_t v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  int v541;
  float32x4_t v542;
  float32x4_t v543;
  float32x4_t v544;
  float32x4_t v545;
  uint64_t v546;
  uint64_t v547;
  float32x4_t v548;
  uint64_t v549;
  float32x4_t v550;
  int32x4_t v551;
  int v552;
  float32x4_t v553;
  unsigned int v554;
  float32x4_t v555;
  int32x4_t v556;
  __int32 v557;
  __int32 v558;
  float32x4_t v559;
  int32x4_t v560;
  int v561;
  uint64_t v562;
  float32x4_t v563;
  uint64_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  uint64_t v569;
  int8x16_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  uint64_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  int8x16_t v583;
  float32x4_t v584;
  float32x4_t v585;
  float32x4_t v586;
  int v587;
  uint64_t v588;
  float32x4_t v589;
  int8x16_t v590;
  int32x4_t v591;
  unint64_t v592;
  float32x4_t *v593;
  float32x4_t v594;
  float32x4_t v595;
  int32x4_t v596;
  uint64_t v597;
  unint64_t v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  float32x4_t v602;
  uint64_t v603;
  unsigned int v604;
  float32x4_t v605;
  uint64_t v607;
  uint64_t v608;
  void *lpsrc;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  float32x4_t v613;
  uint64_t v614;
  HGTransform *v615;
  unint64_t v616;
  unsigned int v617;
  int v618;
  HGTransform *v619[2];
  HGTransform *v620[2];
  float32x4_t v621;
  HGTransform *v622[2];
  uint64_t v623;
  unsigned int v624;
  HGRect v625;
  HGRect v626;
  HGRect v627;
  HGRect v628;
  HGRect v629;
  HGRect v630;
  float32x4_t v632;
  float32x4_t v633;
  int8x16_t v634;
  float32x4_t v635;
  HGExecutionUnit *v636;
  _OWORD v637[2];
  uint64_t v638;
  __int128 v639[2];
  uint64_t v640;
  _OWORD v641[2];
  uint64_t v642;
  __int128 v643[2];
  uint64_t v644;
  __int128 v645[2];
  uint64_t v646;
  __int128 v647;
  __int128 v648;
  uint64_t v649;
  _QWORD v650[3];
  HGRect v651;
  HGRect v652;
  HGRect v653;

  v650[1] = *MEMORY[0x1E0C80C00];
  v592 = HIDWORD(a3);
  v598 = HIDWORD(a4);
  v15 = HIDWORD(a4) - HIDWORD(a3);
  v16 = *(_QWORD *)(a1 + 480);
  v17 = *(_DWORD *)(v16 + 436);
  v636 = *(HGExecutionUnit **)(a2 + 336);
  v18 = (void *)*((_QWORD *)v636 + 19);
  v615 = *(HGTransform **)(v16 + 448);
  v19 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  v623 = a3;
  v21 = HGRectGrow(a3, a4, v19);
  v24 = v20;
  v25 = *(_QWORD *)(a1 + 480);
  v26 = *(HGRect *)(v25 + 464);
  v604 = a7;
  if (a7 <= 0)
    v27 = 0.5;
  else
    v27 = 1.5;
  v28 = *(float *)(v25 + 424);
  v587 = v17;
  v29 = (double)v17;
  v30 = *(_DWORD *)(v25 + 480);
  v31 = *(_DWORD *)(v25 + 484);
  lpsrc = v18;
  if (v18)
  {
    v32 = v18;
    v610 = *(_QWORD *)(v25 + 472);
    v33 = *(_QWORD *)(v25 + 464);
    v34 = v20;
    v35 = v21;
    if (v36)
      MaxTileArea = HGGPURenderer::GetMaxTileArea(v36);
    else
      MaxTileArea = 0x1000000;
    v21 = v35;
    v24 = v34;
    *(_QWORD *)&v26.var0 = v33;
    *(_QWORD *)&v26.var2 = v610;
  }
  else
  {
    MaxTileArea = 0x1000000;
  }
  v607 = a4;
  v38 = (a4 - v623);
  *(_QWORD *)&v651.var0 = v21;
  *(_QWORD *)&v651.var2 = v24;
  *(float *)&v22 = v27;
  v39 = hg_clip(v615, v651, v26, v22, v28, v29, v23, (int *)v650, v30, v31, MaxTileArea);
  v41 = v40;
  if (!HGRectIsNull(v39, v40))
  {
    v42 = v41;
    v43 = HIDWORD(v39);
    v44 = v650[0];
    v616 = v42;
    v45 = (double)SHIDWORD(v39);
    v46 = ((double)(int)v42 - (double)(int)v39)
        * (1.0
         / (double)(1 << v44))
        * (((double)SHIDWORD(v42) - (double)SHIDWORD(v39))
         * (1.0
          / (double)(1 << v44)))
        / (double)a8;
    v47 = v604;
    if ((_DWORD)v38 == 1 && v15 == 1 && (v48 = 1.0, v46 > 1.0))
    {
      v49 = *(_QWORD *)(a1 + 480);
      v50 = *(HGTransform **)(v49 + 448);
      v51 = *(_QWORD *)(v49 + 464);
      v52 = *(_QWORD *)(v49 + 472);
      v53 = *(float *)(v49 + 424);
      v54 = *(_DWORD *)(v49 + 480);
      v55 = *(_DWORD *)(v49 + 484);
      if (lpsrc
      {
        v57 = HGGPURenderer::GetMaxTileArea(v56);
      }
      else
      {
        v57 = 0x1000000;
      }
      *(_QWORD *)&v652.var0 = v623;
      *(_QWORD *)&v652.var2 = v607;
      *(_QWORD *)&v653.var0 = v51;
      *(_QWORD *)&v653.var2 = v52;
      *(float *)&v48 = v27;
      v79 = hg_clip(v50, v652, v653, v48, v53, 1.0, v45, (int *)v650, v54, v55, v57);
      v81 = v80;
      if (HGRectIsNull(v79, v80))
        goto LABEL_13;
      v616 = v81;
      v47 = 0;
      v44 = HIDWORD(v650[0]);
      LODWORD(v650[0]) = HIDWORD(v650[0]);
      v76.f32[0] = (float)(int)v623 + 0.5;
      v76.f32[1] = (float)(int)v592 + 0.5;
      v76.i32[2] = 0;
      v76.i32[3] = 1.0;
      v78 = 1;
      v599 = v79;
      v43 = HIDWORD(v79);
    }
    else
    {
      if (v46 > 2.0)
      {
        v649 = 0;
        v647 = 0u;
        v648 = 0u;
        HGExecutionUnit::GetStackState((uint64_t)v636, (uint64_t)&v647);
        if ((int)v598 > (int)v592 && (int)v607 > (int)v623)
        {
          v58 = (uint64_t)rint(fmax(sqrt(((double)(int)v607 - (double)(int)v623) * ((double)(int)v598 - (double)(int)v592) / v46), 1.0));
          v578 = (int)v623;
          v59 = v623 >> 32;
          do
          {
            v624 = v59;
            v60 = v59 + (int)v58;
            v588 = v60;
            if ((int)v60 >= (int)v598)
              v61 = v598;
            else
              v61 = v60;
            v617 = v61;
            v593 = a5;
            v62 = a5;
            v63 = v578;
            do
            {
              v64 = v63 + (int)v58;
              if ((int)v58 + (int)v63 >= (int)v607)
                v65 = v607;
              else
                v65 = v58 + v63;
              v66 = HGRectMake4i(v63, v624, v65, v617);
              HGAnisotropicSampler::GetTile(a1, a2, v66, v67, v62, a6, v604, a8, a9 + 1);
              v645[0] = v647;
              v645[1] = v648;
              v646 = v649;
              HGExecutionUnit::SetStackState((uint64_t)v636, v645);
              v62 += (int)v58;
              v63 = v64;
            }
            while (v64 < (int)v607);
            a5 = &v593[(int)v58 * (uint64_t)(int)a6];
            v59 = v588;
          }
          while (v588 < v607 >> 32);
        }
        return;
      }
      if (v46 > 1.0)
      {
        v68 = a9 + 1;
        v618 = a9 + 1;
        if (v15 <= v38)
        {
          v82 = ((int)v623 + (int)v607) >> 1;
          v649 = 0;
          v647 = 0u;
          v648 = 0u;
          v70 = (uint64_t)v636;
          HGExecutionUnit::GetStackState((uint64_t)v636, (uint64_t)&v647);
          v83 = HGRectMake4i(v623, v592, v82, v598);
          HGAnisotropicSampler::GetTile(a1, a2, v83, v84, a5, a6, v604, a8, v68);
          v639[0] = v647;
          v639[1] = v648;
          v640 = v649;
          HGExecutionUnit::SetStackState((uint64_t)v636, v639);
          v85 = HGRectMake4i(v82, v592, v607, v598);
          HGAnisotropicSampler::GetTile(a1, a2, v85, v86, &a5[(int)(v82 - v623)], a6, v604, a8, v618);
          v637[0] = v647;
          v637[1] = v648;
          v638 = v649;
          v75 = v637;
        }
        else
        {
          v69 = ((int)v592 + (int)v598) >> 1;
          v649 = 0;
          v647 = 0u;
          v648 = 0u;
          v70 = (uint64_t)v636;
          HGExecutionUnit::GetStackState((uint64_t)v636, (uint64_t)&v647);
          v71 = HGRectMake4i(v623, v592, v607, v69);
          HGAnisotropicSampler::GetTile(a1, a2, v71, v72, a5, a6, v604, a8, v68);
          v643[0] = v647;
          v643[1] = v648;
          v644 = v649;
          HGExecutionUnit::SetStackState((uint64_t)v636, v643);
          v73 = HGRectMake4i(v623, v69, v607, v598);
          HGAnisotropicSampler::GetTile(a1, a2, v73, v74, &a5[(int)((v69 - v592) * a6)], a6, v604, a8, v618);
          v641[0] = v647;
          v641[1] = v648;
          v642 = v649;
          v75 = v641;
        }
        HGExecutionUnit::SetStackState(v70, v75);
        return;
      }
      v599 = v39;
      v76.f32[0] = (float)(int)v623 + 0.5;
      v76.f32[1] = (float)(int)v592 + 0.5;
      v76.i32[2] = 0;
      v76.i32[3] = 1.0;
      if ((int)v604 >= 1)
      {
        v625 = (HGRect)v76;
        v77 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
        v76 = (float32x4_t)v625;
        v608 = v77;
        v44 = v650[0];
        v78 = v587;
LABEL_47:
        v87 = *(float32x4_t *)(a1 + 464);
        v88 = vaddq_f32(vmulq_laneq_f32(v87, v76, 3), vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(a1 + 448), v76, 2), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 416), v76.f32[0]), vmulq_lane_f32(*(float32x4_t *)(a1 + 432), *(float32x2_t *)v76.f32, 1))));
        v577 = v88;
        v89 = HIDWORD(v650[0]);
        if (v44 == HIDWORD(v650[0]))
        {
          v90 = *(float32x4_t *)(*(_QWORD *)(a1 + 504) + 32 * (v44 - (uint64_t)*(int *)(a1 + 496)));
          v88.f32[0] = (float)v599;
          v88.f32[1] = (float)(int)v43;
          v91 = vaddq_f32(v90, vmulq_f32(v88, v90)).u64[0];
          v87.f32[0] = (float)(int)v616;
          v87.f32[1] = (float)SHIDWORD(v616);
          v92 = vaddq_f32(v90, vmulq_f32(v87, v90)).u64[0];
          v93 = HGRectIntegral(HIDWORD(v616), *(float *)&v91, *((float *)&v91 + 1), *(float *)&v92, *((float *)&v92 + 1));
          *(_QWORD *)(a2 + 208) = HGRectGrow(v93, v94, v608);
          *(_QWORD *)(a2 + 216) = v95;
          v626 = *(HGRect *)(a2 + 208);
          HGRenderer::RenderInput((uint64_t)lpsrc, (uint64_t)v636, a1, 0, a2 + 80, *(_QWORD *)(a2 + 208), v95, 0);
          if (v15 >= 1 && (int)v38 >= 1)
          {
            v96 = 0;
            v97 = vaddq_f32(vmulq_f32(vcvtq_f32_s32((int32x4_t)v626), (float32x4_t)xmmword_1B30520F0), (float32x4_t)xmmword_1B3523CF0);
            v98 = 0uLL;
            v99 = (float32x4_t)vdupq_n_s32(0x358637BDu);
            v100.i64[0] = 0x3F0000003F000000;
            v100.i64[1] = 0x3F0000003F000000;
            do
            {
              v101 = 0;
              v102 = vaddq_f32(v577, vmulq_f32(v98, *(float32x4_t *)(a1 + 432)));
              v103 = 0uLL;
              do
              {
                v112 = vaddq_f32(v102, vmulq_f32(v103, *(float32x4_t *)(a1 + 416)));
                v113 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 3);
                v114 = vmvnq_s8((int8x16_t)vcgtq_f32(v113, v99));
                *(int32x2_t *)v114.i8 = vpmax_s32(*(int32x2_t *)v114.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL));
                v115 = vpmax_s32(*(int32x2_t *)v114.i8, *(int32x2_t *)v114.i8).u32[0];
                v106 = 0uLL;
                if (!v115)
                {
                  v116 = vrecpeq_f32(v113);
                  v117 = vmulq_f32(v116, vrecpsq_f32(v113, v116));
                  v118 = vaddq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 504) + 16), vmulq_f32(vmulq_f32(v112, vmulq_f32(vrecpsq_f32(v113, v117), v117)), *(float32x4_t *)*(_QWORD *)(a1 + 504)));
                  v119 = *(int32x4_t *)(a2 + 208);
                  v120 = vaddq_f32(v118, (float32x4_t)xmmword_1B3522990);
                  if (v47)
                  {
                    v119 = vaddq_s32(v119, (int32x4_t)xmmword_1B30503B0);
                    v121 = vcvtq_s32_f32(v120);
                    v122 = vcltzq_f32(v120);
                  }
                  else
                  {
                    v123 = vaddq_f32(v120, v100);
                    v121 = vcvtq_s32_f32(v123);
                    v122 = vcgtq_f32(vcvtq_f32_s32(v121), v123);
                  }
                  v124 = (int8x16_t)vsraq_n_s32(v121, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vmovn_s32(v122)), 0x1FuLL), 0x1FuLL);
                  v125 = vextq_s8((int8x16_t)vcgeq_s32((int32x4_t)vextq_s8(v124, v124, 8uLL), v119), (int8x16_t)vcgtq_s32(v119, (int32x4_t)v124), 8uLL);
                  *(int32x2_t *)v125.i8 = vpmin_s32(*(int32x2_t *)v125.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL));
                  if (!vpmin_s32(*(int32x2_t *)v125.i8, *(int32x2_t *)v125.i8).u32[0])
                  {
                    v126 = *(_QWORD *)(a2 + 80);
                    v127 = *(int *)(a2 + 88);
                    v128 = vsubq_f32(v118, v97);
                    if (v47)
                    {
                      v129 = vaddq_s32(vcvtq_s32_f32(v128), vcltzq_f32(v128));
                      v130 = (float32x2_t)vsubq_f32(v128, vcvtq_f32_s32(v129)).u64[0];
                      v131 = (float32x4_t *)(v126 + 16 * (v129.i32[0] + v129.i32[1] * (int)v127));
                      v132 = vaddq_f32(*v131, vmulq_n_f32(vsubq_f32(v131[1], *v131), v130.f32[0]));
                      v106 = vaddq_f32(v132, vmulq_lane_f32(vsubq_f32(vaddq_f32(v131[v127], vmulq_n_f32(vsubq_f32(v131[(int)v127 + 1], v131[v127]), v130.f32[0])), v132), v130, 1));
                    }
                    else
                    {
                      v104 = vaddq_f32(v128, v100);
                      v105 = vcvtq_s32_f32(v104);
                      v104.i64[0] = vaddq_s32(v105, vcgtq_f32(vcvtq_f32_s32(v105), v104)).u64[0];
                      v106 = *(float32x4_t *)(v126 + 16 * (v104.i32[0] + v104.i32[1] * (int)v127));
                    }
                  }
                }
                a5[v101] = v106;
                __asm { FMOV            V7.4S, #1.0 }
                v103 = vaddq_f32(v103, _Q7);
                ++v101;
              }
              while (v38 != v101);
              v98 = vaddq_f32(v98, _Q7);
              ++v96;
              a5 += (int)a6;
            }
            while (v96 != v15);
          }
          return;
        }
        v133 = (const float *)(*(_QWORD *)(a1 + 480) + 424);
        v134 = vld1q_dup_f32(v133);
        v135 = *(_DWORD *)(a1 + 496);
        if (v44 <= v135)
          v44 = *(_DWORD *)(a1 + 496);
        v136 = v135 + *(_DWORD *)(a1 + 500) - 1;
        if (v44 >= v136)
          v44 = v135 + *(_DWORD *)(a1 + 500) - 1;
        if (SHIDWORD(v650[0]) <= v135)
          v89 = *(_DWORD *)(a1 + 496);
        if (v89 >= v136)
          v89 = v135 + *(_DWORD *)(a1 + 500) - 1;
        v650[0] = __PAIR64__(v89, v44);
        v88.f32[0] = (float)v44;
        v137 = vdupq_lane_s32(*(int32x2_t *)v88.f32, 0);
        v575 = (float32x4_t)v137;
        v576 = v134;
        *(float *)v137.i32 = (float)v89;
        v138 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v137.i8, 0);
        v567 = v138;
        if (v47)
        {
          if (v78 <= 1)
          {
            if (v44 > v89)
              return;
            v87.f32[0] = (float)v599;
            v87.f32[1] = (float)(int)v43;
            v627 = (HGRect)v87;
            v87.f32[0] = (float)(int)v616;
            v87.f32[1] = (float)SHIDWORD(v616);
            *(float32x4_t *)v619 = v87;
            __asm { FMOV            V0.4S, #-1.0 }
            v140 = v44;
            v141 = (32 * v44) | 0x10;
            v142 = 0uLL;
            v589 = (float32x4_t)vdupq_n_s32(0x358637BDu);
            v594 = vaddq_f32(v138, _Q0);
            v600 = 16 * (int)a6;
            v579 = (float32x4_t)vdupq_n_s32(0x3FD92000u);
            v583 = (int8x16_t)vdupq_n_s32(0x7F800000u);
            v568 = (float32x4_t)vdupq_n_s32(0xC0C9A634);
            v571 = (float32x4_t)vdupq_n_s32(0xC2F4531A);
            while (1)
            {
              v632 = v142;
              v144 = 0;
              v145 = (int32x4_t *)(a2 + 208);
              v611 = v141;
              do
              {
                v146 = *(int *)(a1 + 496);
                if (v140 + v144 - v146 >= *(int *)(a1 + 500) || v140 + v144 > SHIDWORD(v650[0]))
                  break;
                v148 = (float32x4_t *)(*(_QWORD *)(a1 + 504) - 32 * v146 + v141);
                v149 = v148[-1];
                v150 = vaddq_f32(vmulq_f32((float32x4_t)v627, v149), *v148).u64[0];
                v151 = vaddq_f32(vmulq_f32(*(float32x4_t *)v619, v149), *v148).u64[0];
                v152 = HGRectIntegral((uint64_t)v148, *(float *)&v150, *((float *)&v150 + 1), *(float *)&v151, *((float *)&v151 + 1));
                v145->i64[0] = HGRectGrow(v152, v153, v608);
                v145->i64[1] = v154;
                v155 = *v145;
                *(&v647 + v144) = (__int128)vaddq_f32(vmulq_f32(vcvtq_f32_s32(*v145), (float32x4_t)xmmword_1B30520F0), (float32x4_t)xmmword_1B3523CF0);
                HGRenderer::RenderInput((uint64_t)lpsrc, (uint64_t)v636, a1, v140 + v144++ - *(_DWORD *)(a1 + 496), (uint64_t)v145[-8].i64, v155.u64[0], v154, 0);
                v141 += 32;
                ++v145;
              }
              while (v144 != 8);
              if (v15 < 1)
              {
                v143 = v611;
                v142 = v632;
              }
              else
              {
                v142 = v632;
                if ((int)v38 > 0)
                {
                  v156 = 0;
                  v143 = v611;
                  v157.i64[0] = 0x3400000034000000;
                  v157.i64[1] = 0x3400000034000000;
                  v158.i64[0] = 0x80000000800000;
                  v158.i64[1] = 0x80000000800000;
                  while (1)
                  {
                    v160 = 0;
                    v161 = vaddq_f32(v577, vmulq_f32(v142, *(float32x4_t *)(a1 + 432)));
                    v162 = 0uLL;
                    do
                    {
                      v164 = *(float32x4_t *)(a1 + 416);
                      v165 = vaddq_f32(v161, vmulq_f32(v162, v164));
                      v166 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v165, 3);
                      v167 = vmvnq_s8((int8x16_t)vcgtq_f32(v166, v589));
                      *(int32x2_t *)v167.i8 = vpmax_s32(*(int32x2_t *)v167.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v167, v167, 8uLL));
                      v168 = 0uLL;
                      if (vpmax_s32(*(int32x2_t *)v167.i8, *(int32x2_t *)v167.i8).u32[0])
                        goto LABEL_88;
                      v169 = vrecpeq_f32(v166);
                      v170 = vmulq_f32(v169, vrecpsq_f32(v166, v169));
                      v171 = vmulq_f32(vrecpsq_f32(v166, v170), v170);
                      v172 = vmulq_f32(v165, v171);
                      v173 = vmulq_f32(v171, vsubq_f32(v164, vmulq_laneq_f32(v172, v164, 3)));
                      v173.i64[0] = vmulq_f32(v173, v173).u64[0];
                      v174 = vmulq_f32(v171, vsubq_f32(*(float32x4_t *)(a1 + 432), vmulq_laneq_f32(v172, *(float32x4_t *)(a1 + 432), 3)));
                      v174.i64[0] = vmulq_f32(v174, v174).u64[0];
                      v175 = vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v173.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v173.f32, 1)), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v174.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v174.f32, 1)));
                      v176 = vrsqrteq_f32(v175);
                      v177 = vmulq_f32(v176, vrsqrtsq_f32(vmulq_f32(v175, v176), v176));
                      v178 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v175, vmulq_f32(v177, vrsqrtsq_f32(vmulq_f32(v175, v177), v177))), (int8x16_t)vceqzq_f32(v175));
                      v179 = vmulq_f32(vcvtq_f32_s32((int32x4_t)v178), v157);
                      v180 = vcvtq_f32_s32(vcvtq_s32_f32(v179));
                      v181 = vminq_f32(vmaxq_f32(vaddq_f32(v576, vaddq_f32(vaddq_f32(vsubq_f32(v180, (float32x4_t)vandq_s8(v583, (int8x16_t)vcgtq_f32(v158, v178))), v571), vmulq_f32(vrsqrteq_f32(vaddq_f32(vsubq_f32(v179, v180), v579)), v568))), v575), v567);
                      v182 = vminq_f32(v181, v594);
                      v183 = vcvtq_f32_s32(vcvtq_s32_f32(v182));
                      v184 = vaddq_f32(v183, vcvtq_f32_s32(vcgtq_f32(v183, v182)));
                      v185 = vcvtq_s32_f32(v184).u32[0];
                      if (v140 <= v185 && v140 + 6 >= v185)
                      {
                        v187 = v185;
                        v188 = *(_QWORD *)(a1 + 504);
                        v189 = v185 - (uint64_t)*(int *)(a1 + 496);
                        v190 = vaddq_f32(*(float32x4_t *)(v188 + 32 * v189 + 48), vmulq_f32(v172, *(float32x4_t *)(v188 + 32 * v189 + 32)));
                        v191 = v187 - (int)v140;
                        v192 = vaddq_f32(v190, (float32x4_t)xmmword_1B3522990);
                        v193 = vaddq_s32(*(int32x4_t *)(a2 + 16 * (v191 + 1) + 208), (int32x4_t)xmmword_1B30503B0);
                        v194 = (int8x16_t)vaddq_s32(vcvtq_s32_f32(v192), vcltzq_f32(v192));
                        v195 = vextq_s8((int8x16_t)vcgeq_s32((int32x4_t)vextq_s8(v194, v194, 8uLL), v193), (int8x16_t)vcgtq_s32(v193, (int32x4_t)v194), 8uLL);
                        *(int32x2_t *)v195.i8 = vpmin_s32(*(int32x2_t *)v195.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v195, v195, 8uLL));
                        v196 = vpmin_s32(*(int32x2_t *)v195.i8, *(int32x2_t *)v195.i8).u32[0];
                        v168 = 0uLL;
                        if (!v196)
                        {
                          v197 = vsubq_f32(v181, v184);
                          v198 = 16 * (v191 + 1);
                          v199 = a2 + 80 + v198;
                          v200 = *(float32x4_t *)((char *)&v647 + v198);
                          v201 = *(_QWORD *)v199;
                          v202 = *(int *)(v199 + 8);
                          v203 = vsubq_f32(v190, v200);
                          v204 = vaddq_s32(vcvtq_s32_f32(v203), vcltzq_f32(v203));
                          v203.i64[0] = vsubq_f32(v203, vcvtq_f32_s32(v204)).u64[0];
                          v205 = (float32x4_t *)(v201 + 16 * (v204.i32[0] + v204.i32[1] * (int)v202));
                          v206 = vaddq_f32(*v205, vmulq_n_f32(vsubq_f32(v205[1], *v205), v203.f32[0]));
                          v207 = vaddq_f32(v206, vmulq_lane_f32(vsubq_f32(vaddq_f32(v205[v202], vmulq_n_f32(vsubq_f32(v205[(int)v202 + 1], v205[v202]), v203.f32[0])), v206), *(float32x2_t *)v203.f32, 1));
                          v208 = vaddq_f32(*(float32x4_t *)(v188 + 32 * (int)v189 + 16), vmulq_f32(v172, *(float32x4_t *)(v188 + 32 * (int)v189)));
                          v209 = a2 + 80 + 16 * v191;
                          v210 = *(_QWORD *)v209;
                          v211 = *(int *)(v209 + 8);
                          v212 = vsubq_f32(v208, *((float32x4_t *)&v647 + v191));
                          v213 = vaddq_s32(vcvtq_s32_f32(v212), vcltzq_f32(v212));
                          v212.i64[0] = vsubq_f32(v212, vcvtq_f32_s32(v213)).u64[0];
                          v214 = (float32x4_t *)(v210 + 16 * (v213.i32[0] + v213.i32[1] * (int)v211));
                          v215 = vaddq_f32(*v214, vmulq_n_f32(vsubq_f32(v214[1], *v214), v212.f32[0]));
                          v216 = vaddq_f32(v215, vmulq_lane_f32(vsubq_f32(vaddq_f32(v214[v211], vmulq_n_f32(vsubq_f32(v214[(int)v211 + 1], v214[v211]), v212.f32[0])), v215), *(float32x2_t *)v212.f32, 1));
                          v168 = vaddq_f32(v216, vmulq_f32(v197, vsubq_f32(v207, v216)));
                        }
LABEL_88:
                        a5[v160] = v168;
                        __asm { FMOV            V2.4S, #1.0 }
                        v162 = vaddq_f32(v162, _Q2);
                      }
                      ++v160;
                    }
                    while (v38 != v160);
                    __asm { FMOV            V0.4S, #1.0 }
                    v142 = vaddq_f32(v142, _Q0);
                    a5 = (float32x4_t *)((char *)a5 + v600);
                    if (++v156 == v15)
                      goto LABEL_75;
                  }
                }
                v217 = v15;
                v143 = v611;
                do
                {
                  __asm { FMOV            V0.4S, #1.0 }
                  v142 = vaddq_f32(v142, _Q0);
                  a5 = (float32x4_t *)((char *)a5 + v600);
                  --v217;
                }
                while (v217);
              }
LABEL_75:
              v140 += 7;
              v141 = v143 + 224;
              if (v140 > SHIDWORD(v650[0]))
                return;
            }
          }
          if (v44 > v89)
            return;
          *(float *)v137.i32 = (float)v78;
          v278 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v137.i8, 0);
          v87.f32[0] = (float)v599;
          v87.f32[1] = (float)(int)v43;
          v585 = v87;
          v87.f32[0] = (float)(int)v616;
          v87.f32[1] = (float)SHIDWORD(v616);
          v581 = v87;
          __asm { FMOV            V0.4S, #-1.0 }
          v280 = vaddq_f32(v138, _Q0);
          v281 = (int)a6;
          v282 = v44;
          v283 = (32 * v44) | 0x10;
          v284 = 16 * (int)a6;
          v285 = 0uLL;
          __asm { FMOV            V8.4S, #1.0 }
          v629 = (HGRect)vdupq_n_s32(0x3FD92000u);
          v634 = (int8x16_t)vdupq_n_s32(0x7F800000u);
          v613 = (float32x4_t)vdupq_n_s32(0xC0C9A634);
          v621 = (float32x4_t)vdupq_n_s32(0xC2F4531A);
          v596 = vdupq_n_s32(0x358637BDu);
          v602 = v280;
          v564 = v281;
          v562 = v284;
          v591 = vdupq_n_s32(0x7F7FFFFFu);
          v605 = _Q8;
          while (1)
          {
            v573 = v285;
            v288 = 0;
            v289 = (int32x4_t *)(a2 + 208);
            v569 = v283;
            do
            {
              v290 = *(int *)(a1 + 496);
              if (v282 + v288 - v290 >= *(int *)(a1 + 500) || v282 + v288 > SHIDWORD(v650[0]))
                break;
              v292 = (float32x4_t *)(*(_QWORD *)(a1 + 504) - 32 * v290 + v283);
              v293 = v292[-1];
              v294 = vaddq_f32(vmulq_f32(v585, v293), *v292).u64[0];
              v295 = vaddq_f32(vmulq_f32(v581, v293), *v292).u64[0];
              v296 = HGRectIntegral((uint64_t)v292, *(float *)&v294, *((float *)&v294 + 1), *(float *)&v295, *((float *)&v295 + 1));
              v289->i64[0] = HGRectGrow(v296, v297, v608);
              v289->i64[1] = v298;
              v299 = *v289;
              *(&v647 + v288) = (__int128)vaddq_f32(vmulq_f32(vcvtq_f32_s32(*v289), (float32x4_t)xmmword_1B30520F0), (float32x4_t)xmmword_1B3523CF0);
              HGRenderer::RenderInput((uint64_t)lpsrc, (uint64_t)v636, a1, v282 + v288++ - *(_DWORD *)(a1 + 496), (uint64_t)v289[-8].i64, v299.u64[0], v298, 0);
              v283 += 32;
              ++v289;
            }
            while (v288 != 8);
            if (v15 < 1)
            {
              v287 = v569;
              v285 = v573;
            }
            else
            {
              v285 = v573;
              v300 = v605;
              if ((int)v38 > 0)
              {
                v301 = 0;
                v303 = (float32x4_t)v596;
                v302 = v602;
                v287 = v569;
                v304.i64[0] = 0x80000000800000;
                v304.i64[1] = 0x80000000800000;
                v305 = (float32x4_t)v591;
                v306.i64[0] = 0x3400000034000000;
                v306.i64[1] = 0x3400000034000000;
                v307.i64[0] = 0x80000000800000;
                v307.i64[1] = 0x80000000800000;
                while (1)
                {
                  v308 = 0;
                  v309 = v285;
                  v310 = vaddq_f32(v577, vmulq_f32(v285, *(float32x4_t *)(a1 + 432)));
                  v311 = 0uLL;
                  do
                  {
                    v339 = *(float32x4_t *)(a1 + 416);
                    v340 = vaddq_f32(v310, vmulq_f32(v311, v339));
                    v341 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v340, 3);
                    v342 = vmvnq_s8((int8x16_t)vcgtq_f32(v341, v303));
                    *(int32x2_t *)v342.i8 = vpmax_s32(*(int32x2_t *)v342.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v342, v342, 8uLL));
                    v338 = 0uLL;
                    if (vpmax_s32(*(int32x2_t *)v342.i8, *(int32x2_t *)v342.i8).u32[0])
                      goto LABEL_147;
                    v343 = vrecpeq_f32(v341);
                    v344 = vmulq_f32(v343, vrecpsq_f32(v341, v343));
                    v345 = vmulq_f32(vrecpsq_f32(v341, v344), v344);
                    v346 = vmulq_f32(v340, v345);
                    v347 = (int8x16_t)vmulq_f32(v345, vsubq_f32(v339, vmulq_laneq_f32(v346, v339, 3)));
                    v348 = (int8x16_t)vmulq_f32(v345, vsubq_f32(*(float32x4_t *)(a1 + 432), vmulq_laneq_f32(v346, *(float32x4_t *)(a1 + 432), 3)));
                    v349 = (int8x16_t)vaddq_f32((float32x4_t)v347, (float32x4_t)v348);
                    v350 = (int32x2_t)vmulq_f32((float32x4_t)v347, (float32x4_t)v347).u64[0];
                    v351 = (int8x16_t)vsubq_f32((float32x4_t)v347, (float32x4_t)v348);
                    v344.i64[0] = vmulq_f32((float32x4_t)v348, (float32x4_t)v348).u64[0];
                    v352 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v344.f32, 0);
                    v353 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(v350, 0), (float32x4_t)vdupq_lane_s32(v350, 1));
                    v354 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v344.f32, 1);
                    v344.i64[0] = vmulq_f32((float32x4_t)v349, (float32x4_t)v349).u64[0];
                    v355 = (int8x16_t)vaddq_f32(v352, v354);
                    v352.i64[0] = vmulq_f32((float32x4_t)v351, (float32x4_t)v351).u64[0];
                    v356 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v344.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v344.f32, 1));
                    v357 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v352.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v352.f32, 1));
                    v358 = (int8x16_t)vcgtq_f32(vminq_f32((float32x4_t)v353, (float32x4_t)v355), vminq_f32((float32x4_t)v356, (float32x4_t)v357));
                    v359 = (float32x4_t)vbslq_s8(v358, v356, v353);
                    v360 = (float32x4_t)vbslq_s8(v358, v357, v355);
                    v361 = vminq_f32(v359, v360);
                    v362 = vrsqrteq_f32(v361);
                    v363 = vmulq_f32(v362, vrsqrtsq_f32(vmulq_f32(v361, v362), v362));
                    v364 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v361, vmulq_f32(v363, vrsqrtsq_f32(vmulq_f32(v361, v363), v363))), (int8x16_t)vceqzq_f32(v361));
                    v365 = vmaxq_f32(v359, v360);
                    v366 = vrsqrteq_f32(v365);
                    v367 = vmulq_f32(v366, vrsqrtsq_f32(vmulq_f32(v365, v366), v366));
                    v368 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v365, vmulq_f32(v367, vrsqrtsq_f32(vmulq_f32(v365, v367), v367))), (int8x16_t)vceqzq_f32(v365));
                    v369 = vminq_f32(vmaxq_f32(v364, v304), v305);
                    v370 = vminq_f32(vmaxq_f32(vrecpeq_f32(v369), v304), v305);
                    v371 = vminq_f32(vmaxq_f32(vmulq_f32(v370, vrecpsq_f32(v369, v370)), v304), v305);
                    v372 = vmaxq_f32(vminq_f32(vmulq_f32(v368, vmulq_f32(v371, vrecpsq_f32(v369, v371))), v278), v300);
                    v373 = vminq_f32(vmaxq_f32(v372, v304), v305);
                    v374 = vminq_f32(vmaxq_f32(vrecpeq_f32(v373), v304), v305);
                    v375 = vminq_f32(vmaxq_f32(vmulq_f32(v374, vrecpsq_f32(v373, v374)), v304), v305);
                    v376 = vmulq_f32(v375, vrecpsq_f32(v373, v375));
                    v377 = vmulq_f32(v368, v376);
                    v378 = vmulq_f32(vcvtq_f32_s32((int32x4_t)v377), v306);
                    v379 = vcvtq_f32_s32(vcvtq_s32_f32(v378));
                    v380 = vminq_f32(vmaxq_f32(vaddq_f32(v576, vaddq_f32(vaddq_f32(vsubq_f32(v379, (float32x4_t)vandq_s8(v634, (int8x16_t)vcgtq_f32(v307, v377))), v621), vmulq_f32(vrsqrteq_f32(vaddq_f32(vsubq_f32(v378, v379), (float32x4_t)v629)), v613))), v575), v567);
                    v381 = vminq_f32(v380, v302);
                    v382 = vcvtq_f32_s32(vcvtq_s32_f32(v381));
                    v383 = vaddq_f32(v382, vcvtq_f32_s32(vcgtq_f32(v382, v381)));
                    v384 = vcvtq_s32_f32(v383).u32[0];
                    if (v282 <= v384 && v282 + 6 >= v384)
                    {
                      v386 = v384;
                      v387 = *(_QWORD *)(a1 + 504);
                      v388 = v384 - (uint64_t)*(int *)(a1 + 496);
                      v389 = (float32x4_t *)(v387 + 32 * v388);
                      v391 = v389[2];
                      v390 = v389[3];
                      v392 = vaddq_f32(v390, vmulq_f32(v346, v391));
                      v393 = v386 - (int)v282;
                      v394 = vaddq_f32(v392, (float32x4_t)xmmword_1B3522990);
                      v395 = vaddq_s32(*(int32x4_t *)(a2 + 16 * (v393 + 1) + 208), (int32x4_t)xmmword_1B30503B0);
                      v396 = (int8x16_t)vaddq_s32(vcvtq_s32_f32(v394), vcltzq_f32(v394));
                      v397 = vextq_s8((int8x16_t)vcgeq_s32((int32x4_t)vextq_s8(v396, v396, 8uLL), v395), (int8x16_t)vcgtq_s32(v395, (int32x4_t)v396), 8uLL);
                      *(int32x2_t *)v397.i8 = vpmin_s32(*(int32x2_t *)v397.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v397, v397, 8uLL));
                      LODWORD(v389) = vpmin_s32(*(int32x2_t *)v397.i8, *(int32x2_t *)v397.i8).u32[0];
                      v338 = 0uLL;
                      if (!(_DWORD)v389)
                      {
                        v398 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v360, v359), vbslq_s8(v358, v351, v348), vbslq_s8(v358, v349, v347));
                        v399 = vcvtq_f32_s32(vcvtq_s32_f32(v372));
                        v400 = vaddq_f32(v399, vcvtq_f32_s32(vcgtq_f32(v399, v372)));
                        v401 = vcvtq_s32_f32(v400).u32[0];
                        v402 = vminq_f32(vmaxq_f32(v400, v304), v305);
                        v403 = vminq_f32(vmaxq_f32(vrecpeq_f32(v402), v304), v305);
                        v404 = vminq_f32(vmaxq_f32(vmulq_f32(v403, vrecpsq_f32(v402, v403)), v304), v305);
                        v405 = vmulq_f32(vmulq_f32(vmulq_f32(v376, v400), v398), vmulq_f32(v404, vrecpsq_f32(v402, v404)));
                        v406 = 16 * (v393 + 1);
                        v407 = a2 + 80 + v406;
                        v408 = *(float32x4_t *)((char *)&v647 + v406);
                        v409 = *(_QWORD *)v407;
                        v410 = *(int *)(v407 + 8);
                        v411 = vsubq_f32(v392, v408);
                        v412 = vaddq_s32(vcvtq_s32_f32(v411), vcltzq_f32(v411));
                        v411.i64[0] = vsubq_f32(v411, vcvtq_f32_s32(v412)).u64[0];
                        v413 = (float32x4_t *)(v409 + 16 * (v412.i32[0] + v412.i32[1] * (int)v410));
                        v414 = vaddq_f32(*v413, vmulq_n_f32(vsubq_f32(v413[1], *v413), v411.f32[0]));
                        v415 = (int)v410 + 1;
                        v416 = vaddq_f32(v414, vmulq_lane_f32(vsubq_f32(vaddq_f32(v413[v410], vmulq_n_f32(vsubq_f32(v413[v415], v413[v410]), v411.f32[0])), v414), *(float32x2_t *)v411.f32, 1));
                        v417 = (float32x4_t *)(v387 + 32 * (int)v388);
                        v419 = *v417;
                        v418 = v417[1];
                        v420 = vaddq_f32(v418, vmulq_f32(v346, *v417));
                        v421 = (float32x4_t)*(&v647 + v393);
                        v422 = a2 + 80 + 16 * v393;
                        v423 = *(_QWORD *)v422;
                        v424 = *(int *)(v422 + 8);
                        v425 = vsubq_f32(v420, v421);
                        v426 = vaddq_s32(vcvtq_s32_f32(v425), vcltzq_f32(v425));
                        v425.i64[0] = vsubq_f32(v425, vcvtq_f32_s32(v426)).u64[0];
                        v427 = (float32x4_t *)(*(_QWORD *)v422 + 16 * (v426.i32[0] + v426.i32[1] * (int)v424));
                        v428 = vaddq_f32(*v427, vmulq_n_f32(vsubq_f32(v427[1], *v427), v425.f32[0]));
                        v429 = vaddq_f32(v428, vmulq_lane_f32(vsubq_f32(vaddq_f32(v427[v424], vmulq_n_f32(vsubq_f32(v427[(int)v424 + 1], v427[v424]), v425.f32[0])), v428), *(float32x2_t *)v425.f32, 1));
                        v430 = v415;
                        if (v401 < 3)
                        {
                          v312 = v346;
                        }
                        else
                        {
                          v431 = v401 + 2;
                          v312 = v346;
                          do
                          {
                            v312 = vaddq_f32(v405, v312);
                            v346 = vsubq_f32(v346, v405);
                            v432 = vsubq_f32(vaddq_f32(v418, vmulq_f32(v419, v312)), v421);
                            v433 = vaddq_s32(vcvtq_s32_f32(v432), vcltzq_f32(v432));
                            v432.i64[0] = vsubq_f32(v432, vcvtq_f32_s32(v433)).u64[0];
                            v434 = (float32x4_t *)(v423 + 16 * (v433.i32[0] + v433.i32[1] * (int)v424));
                            v435 = *v434;
                            v436 = v434[v424];
                            v437 = vsubq_f32(vaddq_f32(v418, vmulq_f32(v419, v346)), v421);
                            v438 = vaddq_s32(vcvtq_s32_f32(v437), vcltzq_f32(v437));
                            v439 = vmulq_n_f32(vsubq_f32(v434[1], *v434), v432.f32[0]);
                            v437.i64[0] = vsubq_f32(v437, vcvtq_f32_s32(v438)).u64[0];
                            v440 = vmulq_n_f32(vsubq_f32(v434[(int)v424 + 1], v436), v432.f32[0]);
                            v441 = (float32x4_t *)(v423 + 16 * (v438.i32[0] + v438.i32[1] * (int)v424));
                            v442 = vaddq_f32(v435, v439);
                            v443 = vaddq_f32(v436, v440);
                            v444 = vaddq_f32(*v441, vmulq_n_f32(vsubq_f32(v441[1], *v441), v437.f32[0]));
                            v445 = vsubq_f32(vaddq_f32(v390, vmulq_f32(v391, v312)), v408);
                            v446 = vaddq_s32(vcvtq_s32_f32(v445), vcltzq_f32(v445));
                            v445.i64[0] = vsubq_f32(v445, vcvtq_f32_s32(v446)).u64[0];
                            v447 = vsubq_f32(vaddq_f32(v441[v424], vmulq_n_f32(vsubq_f32(v441[(int)v424 + 1], v441[v424]), v437.f32[0])), v444);
                            v448 = (float32x4_t *)(v409 + 16 * (v446.i32[0] + v446.i32[1] * (int)v410));
                            v449 = vmulq_lane_f32(vsubq_f32(v443, v442), *(float32x2_t *)v432.f32, 1);
                            v450 = vaddq_f32(*v448, vmulq_n_f32(vsubq_f32(v448[1], *v448), v445.f32[0]));
                            v451 = vaddq_f32(v442, v449);
                            v452 = vsubq_f32(vaddq_f32(v390, vmulq_f32(v391, v346)), v408);
                            v453 = vaddq_f32(v444, vmulq_lane_f32(v447, *(float32x2_t *)v437.f32, 1));
                            v454 = vaddq_s32(vcvtq_s32_f32(v452), vcltzq_f32(v452));
                            v452.i64[0] = vsubq_f32(v452, vcvtq_f32_s32(v454)).u64[0];
                            v455 = vaddq_f32(v450, vmulq_lane_f32(vsubq_f32(vaddq_f32(v448[v410], vmulq_n_f32(vsubq_f32(v448[v430], v448[v410]), v445.f32[0])), v450), *(float32x2_t *)v445.f32, 1));
                            v456 = (float32x4_t *)(v409 + 16 * (v454.i32[0] + v454.i32[1] * (int)v410));
                            v457 = vaddq_f32(v429, v451);
                            v458 = vaddq_f32(*v456, vmulq_n_f32(vsubq_f32(v456[1], *v456), v452.f32[0]));
                            v429 = vaddq_f32(v457, v453);
                            v416 = vaddq_f32(vaddq_f32(v416, v455), vaddq_f32(v458, vmulq_lane_f32(vsubq_f32(vaddq_f32(v456[v410], vmulq_n_f32(vsubq_f32(v456[v430], v456[v410]), v452.f32[0])), v458), *(float32x2_t *)v452.f32, 1)));
                            v431 -= 2;
                          }
                          while (v431 > 4);
                        }
                        v313 = vsubq_f32(v380, v383);
                        v300 = v605;
                        v314.i64[0] = 0x3F0000003F000000;
                        v314.i64[1] = 0x3F0000003F000000;
                        v315 = vmulq_f32(vaddq_f32(v400, v605), v314);
                        v316 = vcvtq_f32_s32(vcvtq_s32_f32(v315));
                        v317 = vaddq_f32(vmulq_f32(vsubq_f32(v372, v400), v314), vsubq_f32(v315, vaddq_f32(v316, vcvtq_f32_s32(vcgtq_f32(v316, v315)))));
                        v318 = vaddq_f32(v405, v312);
                        v319 = vsubq_f32(v346, v405);
                        v320 = vsubq_f32(vaddq_f32(v418, vmulq_f32(v419, v318)), v421);
                        v321 = vaddq_s32(vcvtq_s32_f32(v320), vcltzq_f32(v320));
                        v320.i64[0] = vsubq_f32(v320, vcvtq_f32_s32(v321)).u64[0];
                        v322 = (float32x4_t *)(v423 + 16 * (v321.i32[0] + v321.i32[1] * (int)v424));
                        v323 = vaddq_f32(*v322, vmulq_n_f32(vsubq_f32(v322[1], *v322), v320.f32[0]));
                        v324 = vaddq_f32(v429, vmulq_f32(v317, vaddq_f32(v323, vmulq_lane_f32(vsubq_f32(vaddq_f32(v322[v424], vmulq_n_f32(vsubq_f32(v322[(int)v424 + 1], v322[v424]), v320.f32[0])), v323), *(float32x2_t *)v320.f32, 1))));
                        v325 = vsubq_f32(vaddq_f32(v418, vmulq_f32(v419, v319)), v421);
                        v326 = vaddq_s32(vcvtq_s32_f32(v325), vcltzq_f32(v325));
                        v325.i64[0] = vsubq_f32(v325, vcvtq_f32_s32(v326)).u64[0];
                        v327 = (float32x4_t *)(v423 + 16 * (v326.i32[0] + v326.i32[1] * (int)v424));
                        v328 = vaddq_f32(*v327, vmulq_n_f32(vsubq_f32(v327[1], *v327), v325.f32[0]));
                        v329 = vaddq_f32(v324, vmulq_f32(v317, vaddq_f32(v328, vmulq_lane_f32(vsubq_f32(vaddq_f32(v327[v424], vmulq_n_f32(vsubq_f32(v327[(int)v424 + 1], v327[v424]), v325.f32[0])), v328), *(float32x2_t *)v325.f32, 1))));
                        v330 = vsubq_f32(vaddq_f32(v390, vmulq_f32(v391, v318)), v408);
                        v331 = vaddq_s32(vcvtq_s32_f32(v330), vcltzq_f32(v330));
                        v330.i64[0] = vsubq_f32(v330, vcvtq_f32_s32(v331)).u64[0];
                        v332 = (float32x4_t *)(v409 + 16 * (v331.i32[0] + v331.i32[1] * (int)v410));
                        v333 = vaddq_f32(*v332, vmulq_n_f32(vsubq_f32(v332[1], *v332), v330.f32[0]));
                        v334 = vsubq_f32(vaddq_f32(v390, vmulq_f32(v391, v319)), v408);
                        v335 = vaddq_s32(vcvtq_s32_f32(v334), vcltzq_f32(v334));
                        v334.i64[0] = vsubq_f32(v334, vcvtq_f32_s32(v335)).u64[0];
                        v336 = (float32x4_t *)(v409 + 16 * (v335.i32[0] + v335.i32[1] * (int)v410));
                        v337 = vaddq_f32(*v336, vmulq_n_f32(vsubq_f32(v336[1], *v336), v334.f32[0]));
                        v338 = vmulq_f32(v376, vaddq_f32(v329, vmulq_f32(v313, vsubq_f32(vaddq_f32(vaddq_f32(v416, vmulq_f32(v317, vaddq_f32(v333, vmulq_lane_f32(vsubq_f32(vaddq_f32(v332[v410], vmulq_n_f32(vsubq_f32(v332[v430], v332[v410]), v330.f32[0])), v333),
                                                 *(float32x2_t *)v330.f32,
                                                 1)))),
                                         vmulq_f32(v317, vaddq_f32(v337, vmulq_lane_f32(vsubq_f32(vaddq_f32(v336[v410], vmulq_n_f32(vsubq_f32(v336[v430], v336[v410]), v334.f32[0])), v337), *(float32x2_t *)v334.f32, 1)))), v329))));
                        v303 = (float32x4_t)v596;
                        v302 = v602;
                        v304.i64[0] = 0x80000000800000;
                        v304.i64[1] = 0x80000000800000;
                        v305 = (float32x4_t)v591;
                        v306.i64[0] = 0x3400000034000000;
                        v306.i64[1] = 0x3400000034000000;
                        v307.i64[0] = 0x80000000800000;
                        v307.i64[1] = 0x80000000800000;
                      }
LABEL_147:
                      a5[v308] = v338;
                      v311 = vaddq_f32(v311, v300);
                    }
                    ++v308;
                  }
                  while (v308 != v38);
                  v285 = vaddq_f32(v309, v300);
                  a5 += v564;
                  if (++v301 == v15)
                    goto LABEL_132;
                }
              }
              v459 = v15;
              v287 = v569;
              do
              {
                v285 = vaddq_f32(v285, v605);
                a5 = (float32x4_t *)((char *)a5 + v562);
                --v459;
              }
              while (v459);
            }
LABEL_132:
            v282 += 7;
            v283 = v287 + 224;
            if (v282 > SHIDWORD(v650[0]))
              return;
          }
        }
        if (v78 <= 1)
        {
          if (v44 > v89)
            return;
          v138.f32[0] = (float)v599;
          v138.f32[1] = (float)(int)v43;
          v628 = (HGRect)v138;
          v138.f32[0] = (float)(int)v616;
          v138.f32[1] = (float)SHIDWORD(v616);
          *(float32x4_t *)v620 = v138;
          v219 = v44;
          v220 = (32 * v44) | 0x10;
          v221 = 0uLL;
          v601 = 16 * (int)a6;
          v590 = (int8x16_t)vdupq_n_s32(0x7F800000u);
          v595 = (float32x4_t)vdupq_n_s32(0x358637BDu);
          v580 = (float32x4_t)vdupq_n_s32(0xC2F4531A);
          v584 = (float32x4_t)vdupq_n_s32(0x3FD92000u);
          v572 = (float32x4_t)vdupq_n_s32(0xC0C9A634);
          while (1)
          {
            v633 = v221;
            v223 = 0;
            v224 = (int32x4_t *)(a2 + 208);
            v612 = v220;
            do
            {
              v225 = *(int *)(a1 + 496);
              if (v219 + v223 - v225 >= *(int *)(a1 + 500) || v219 + v223 > SHIDWORD(v650[0]))
                break;
              v227 = (float32x4_t *)(*(_QWORD *)(a1 + 504) - 32 * v225 + v220);
              v228 = v227[-1];
              v229 = vaddq_f32(vmulq_f32((float32x4_t)v628, v228), *v227).u64[0];
              v230 = vaddq_f32(vmulq_f32(*(float32x4_t *)v620, v228), *v227).u64[0];
              v231 = HGRectIntegral((uint64_t)v227, *(float *)&v229, *((float *)&v229 + 1), *(float *)&v230, *((float *)&v230 + 1));
              v224->i64[0] = HGRectGrow(v231, v232, v608);
              v224->i64[1] = v233;
              v234 = *v224;
              *(&v647 + v223) = (__int128)vaddq_f32(vmulq_f32(vcvtq_f32_s32(*v224), (float32x4_t)xmmword_1B30520F0), (float32x4_t)xmmword_1B3523CF0);
              HGRenderer::RenderInput((uint64_t)lpsrc, (uint64_t)v636, a1, v219 + v223++ - *(_DWORD *)(a1 + 496), (uint64_t)v224[-8].i64, v234.u64[0], v233, 0);
              v220 += 32;
              ++v224;
            }
            while (v223 != 8);
            if (v15 < 1)
            {
              v222 = v612;
              v221 = v633;
            }
            else
            {
              v221 = v633;
              if ((int)v38 > 0)
              {
                v235 = 0;
                v222 = v612;
                v236.i64[0] = 0x3400000034000000;
                v236.i64[1] = 0x3400000034000000;
                v237.i64[0] = 0x80000000800000;
                v237.i64[1] = 0x80000000800000;
                v238.i64[0] = 0x3F0000003F000000;
                v238.i64[1] = 0x3F0000003F000000;
                while (1)
                {
                  v240 = 0;
                  v241 = vaddq_f32(v577, vmulq_f32(v221, *(float32x4_t *)(a1 + 432)));
                  v242 = 0uLL;
                  do
                  {
                    v244 = *(float32x4_t *)(a1 + 416);
                    v245 = vaddq_f32(v241, vmulq_f32(v242, v244));
                    v246 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v245, 3);
                    v247 = vmvnq_s8((int8x16_t)vcgtq_f32(v246, v595));
                    *(int32x2_t *)v247.i8 = vpmax_s32(*(int32x2_t *)v247.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v247, v247, 8uLL));
                    v248 = vpmax_s32(*(int32x2_t *)v247.i8, *(int32x2_t *)v247.i8).u32[0];
                    v249 = 0uLL;
                    if (v248)
                      goto LABEL_117;
                    v250 = vrecpeq_f32(v246);
                    v251 = vmulq_f32(v250, vrecpsq_f32(v246, v250));
                    v252 = vmulq_f32(vrecpsq_f32(v246, v251), v251);
                    v253 = vmulq_f32(v245, v252);
                    v254 = vmulq_f32(v252, vsubq_f32(v244, vmulq_laneq_f32(v253, v244, 3)));
                    v255 = vmulq_f32(v252, vsubq_f32(*(float32x4_t *)(a1 + 432), vmulq_laneq_f32(v253, *(float32x4_t *)(a1 + 432), 3)));
                    v254.i64[0] = vmulq_f32(v254, v254).u64[0];
                    v255.i64[0] = vmulq_f32(v255, v255).u64[0];
                    v256 = vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v254.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v254.f32, 1)), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v255.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v255.f32, 1)));
                    v257 = vrsqrteq_f32(v256);
                    v258 = vmulq_f32(v257, vrsqrtsq_f32(vmulq_f32(v256, v257), v257));
                    v259 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v256, vmulq_f32(v258, vrsqrtsq_f32(vmulq_f32(v256, v258), v258))), (int8x16_t)vceqzq_f32(v256));
                    v260 = vmulq_f32(vcvtq_f32_s32((int32x4_t)v259), v236);
                    v261 = vcvtq_f32_s32(vcvtq_s32_f32(v260));
                    v262 = vminq_f32(vmaxq_f32(vaddq_f32(v576, vaddq_f32(vaddq_f32(vsubq_f32(v261, (float32x4_t)vandq_s8(v590, (int8x16_t)vcgtq_f32(v237, v259))), v580), vmulq_f32(vrsqrteq_f32(vaddq_f32(vsubq_f32(v260, v261), v584)), v572))), v575), v567);
                    v263 = vcvtq_f32_s32(vcvtq_s32_f32(v262));
                    v264 = vcvtq_s32_f32(vsubq_f32(v263, vcvtq_f32_s32(vcgtq_f32(v262, v263)))).u32[0];
                    v265 = v264 - v219;
                    if (v264 >= v219 && v219 + 7 >= v264)
                    {
                      v267 = (float32x4_t *)(*(_QWORD *)(a1 + 504) + 32 * (v264 - (uint64_t)*(int *)(a1 + 496)));
                      v268 = vaddq_f32(v267[1], vmulq_f32(v253, *v267));
                      v269 = vaddq_f32(vaddq_f32(v268, (float32x4_t)xmmword_1B3522990), v238);
                      v270 = vcvtq_s32_f32(v269);
                      v271 = (int8x16_t)vaddq_s32(v270, vcgtq_f32(vcvtq_f32_s32(v270), v269));
                      v272 = vextq_s8((int8x16_t)vcgeq_s32((int32x4_t)vextq_s8(v271, v271, 8uLL), *(int32x4_t *)(a2 + 16 * v265 + 208)), (int8x16_t)vcgtq_s32(*(int32x4_t *)(a2 + 16 * v265 + 208), (int32x4_t)v271), 8uLL);
                      *(int32x2_t *)v272.i8 = vpmin_s32(*(int32x2_t *)v272.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v272, v272, 8uLL));
                      v249 = 0uLL;
                      if (!vpmin_s32(*(int32x2_t *)v272.i8, *(int32x2_t *)v272.i8).u32[0])
                      {
                        v273 = 16 * v265;
                        v274 = vaddq_f32(vsubq_f32(v268, *(float32x4_t *)((char *)&v647 + v273)), v238);
                        v275 = vcvtq_s32_f32(v274);
                        v274.i64[0] = vaddq_s32(v275, vcgtq_f32(vcvtq_f32_s32(v275), v274)).u64[0];
                        v249 = *(float32x4_t *)(*(_QWORD *)(a2 + v273 + 80)
                                              + 16 * (v274.i32[0] + v274.i32[1] * *(_DWORD *)(a2 + v273 + 88)));
                      }
LABEL_117:
                      a5[v240] = v249;
                      __asm { FMOV            V2.4S, #1.0 }
                      v242 = vaddq_f32(v242, _Q2);
                    }
                    ++v240;
                  }
                  while (v38 != v240);
                  __asm { FMOV            V0.4S, #1.0 }
                  v221 = vaddq_f32(v221, _Q0);
                  a5 = (float32x4_t *)((char *)a5 + v601);
                  if (++v235 == v15)
                    goto LABEL_104;
                }
              }
              v276 = v15;
              v222 = v612;
              do
              {
                __asm { FMOV            V0.4S, #1.0 }
                v221 = vaddq_f32(v221, _Q0);
                a5 = (float32x4_t *)((char *)a5 + v601);
                --v276;
              }
              while (v276);
            }
LABEL_104:
            v219 += 8;
            v220 = v222 + 256;
            if (v219 > SHIDWORD(v650[0]))
              return;
          }
        }
        if (v44 > v89)
          return;
        *(float *)v137.i32 = (float)v78;
        v138.f32[0] = (float)v599;
        v138.f32[1] = (float)(int)v43;
        v630 = (HGRect)v138;
        v138.f32[0] = (float)(int)v616;
        v138.f32[1] = (float)SHIDWORD(v616);
        *(float32x4_t *)v622 = v138;
        v460 = v44;
        v461 = (32 * v44) | 0x10;
        v462 = 0uLL;
        __asm { FMOV            V9.4S, #1.0 }
        v582 = (float32x4_t)vdupq_n_s32(0x358637BDu);
        v586 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v137.i8, 0);
        v603 = (int)a6;
        v597 = 16 * (int)a6;
        v570 = (int8x16_t)vdupq_n_s32(0x7F800000u);
        v574 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
        v565 = (float32x4_t)vdupq_n_s32(0xC2F4531A);
        v566 = (float32x4_t)vdupq_n_s32(0x3FD92000u);
        v563 = (float32x4_t)vdupq_n_s32(0xC0C9A634);
        while (1)
        {
          v635 = v462;
          v465 = 0;
          v466 = (int32x4_t *)(a2 + 208);
          v614 = v461;
          do
          {
            v467 = *(int *)(a1 + 496);
            if (v460 + v465 - v467 >= *(int *)(a1 + 500) || v460 + v465 > SHIDWORD(v650[0]))
              break;
            v469 = (float32x4_t *)(*(_QWORD *)(a1 + 504) - 32 * v467 + v461);
            v470 = v469[-1];
            v471 = vaddq_f32(vmulq_f32((float32x4_t)v630, v470), *v469).u64[0];
            v472 = vaddq_f32(vmulq_f32(*(float32x4_t *)v622, v470), *v469).u64[0];
            v473 = HGRectIntegral((uint64_t)v469, *(float *)&v471, *((float *)&v471 + 1), *(float *)&v472, *((float *)&v472 + 1));
            v466->i64[0] = HGRectGrow(v473, v474, v608);
            v466->i64[1] = v475;
            v476 = *v466;
            *(&v647 + v465) = (__int128)vaddq_f32(vmulq_f32(vcvtq_f32_s32(*v466), (float32x4_t)xmmword_1B30520F0), (float32x4_t)xmmword_1B3523CF0);
            HGRenderer::RenderInput((uint64_t)lpsrc, (uint64_t)v636, a1, v460 + v465++ - *(_DWORD *)(a1 + 496), (uint64_t)v466[-8].i64, v476.u64[0], v475, 0);
            v461 += 32;
            ++v466;
          }
          while (v465 != 8);
          if (v15 < 1)
          {
            v464 = v614;
            v462 = v635;
          }
          else
          {
            v462 = v635;
            if ((int)v38 > 0)
            {
              v477 = 0;
              v464 = v614;
              v478.i64[0] = 0x80000000800000;
              v478.i64[1] = 0x80000000800000;
              v479.i64[0] = 0x3400000034000000;
              v479.i64[1] = 0x3400000034000000;
              v480.i64[0] = 0x80000000800000;
              v480.i64[1] = 0x80000000800000;
              v481.i64[0] = 0x3F0000003F000000;
              v481.i64[1] = 0x3F0000003F000000;
              while (1)
              {
                v482 = 0;
                v483 = vaddq_f32(v577, vmulq_f32(v462, *(float32x4_t *)(a1 + 432)));
                v484 = 0uLL;
                do
                {
                  v494 = *(float32x4_t *)(a1 + 416);
                  v495 = vaddq_f32(v483, vmulq_f32(v484, v494));
                  v496 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v495, 3);
                  v497 = vmvnq_s8((int8x16_t)vcgtq_f32(v496, v582));
                  *(int32x2_t *)v497.i8 = vpmax_s32(*(int32x2_t *)v497.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v497, v497, 8uLL));
                  v493 = 0uLL;
                  if (vpmax_s32(*(int32x2_t *)v497.i8, *(int32x2_t *)v497.i8).u32[0])
                    goto LABEL_180;
                  v498 = vrecpeq_f32(v496);
                  v499 = vmulq_f32(v498, vrecpsq_f32(v496, v498));
                  v500 = vmulq_f32(vrecpsq_f32(v496, v499), v499);
                  v501 = vmulq_f32(v495, v500);
                  v502 = (int8x16_t)vmulq_f32(v500, vsubq_f32(v494, vmulq_laneq_f32(v501, v494, 3)));
                  v499.i64[0] = vmulq_f32((float32x4_t)v502, (float32x4_t)v502).u64[0];
                  v503 = (int8x16_t)vmulq_f32(v500, vsubq_f32(*(float32x4_t *)(a1 + 432), vmulq_laneq_f32(v501, *(float32x4_t *)(a1 + 432), 3)));
                  v500.i64[0] = vmulq_f32((float32x4_t)v503, (float32x4_t)v503).u64[0];
                  v504 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v499.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v499.f32, 1));
                  v505 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v500.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v500.f32, 1));
                  v506 = vminq_f32(v504, v505);
                  v507 = vrsqrteq_f32(v506);
                  v508 = vmulq_f32(v507, vrsqrtsq_f32(vmulq_f32(v506, v507), v507));
                  v509 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v506, vmulq_f32(v508, vrsqrtsq_f32(vmulq_f32(v506, v508), v508))), (int8x16_t)vceqzq_f32(v506));
                  v510 = vmaxq_f32(v504, v505);
                  v511 = vrsqrteq_f32(v510);
                  v512 = vmulq_f32(v511, vrsqrtsq_f32(vmulq_f32(v510, v511), v511));
                  v513 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v510, vmulq_f32(v512, vrsqrtsq_f32(vmulq_f32(v510, v512), v512))), (int8x16_t)vceqzq_f32(v510));
                  v514 = vminq_f32(vmaxq_f32(v509, v478), v574);
                  v515 = vminq_f32(vmaxq_f32(vrecpeq_f32(v514), v478), v574);
                  v516 = vminq_f32(vmaxq_f32(vmulq_f32(v515, vrecpsq_f32(v514, v515)), v478), v574);
                  v517 = vmaxq_f32(vminq_f32(vmulq_f32(v513, vmulq_f32(v516, vrecpsq_f32(v514, v516))), v586), _Q9);
                  v518 = vminq_f32(vmaxq_f32(v517, v478), v574);
                  v519 = vminq_f32(vmaxq_f32(vrecpeq_f32(v518), v478), v574);
                  v520 = vminq_f32(vmaxq_f32(vmulq_f32(v519, vrecpsq_f32(v518, v519)), v478), v574);
                  v521 = vmulq_f32(v520, vrecpsq_f32(v518, v520));
                  v522 = vmulq_f32(v513, v521);
                  v523 = vmulq_f32(vcvtq_f32_s32((int32x4_t)v522), v479);
                  v524 = vcvtq_f32_s32(vcvtq_s32_f32(v523));
                  v525 = vminq_f32(vmaxq_f32(vaddq_f32(v576, vaddq_f32(vaddq_f32(vsubq_f32(v524, (float32x4_t)vandq_s8(v570, (int8x16_t)vcgtq_f32(v480, v522))), v565), vmulq_f32(vrsqrteq_f32(vaddq_f32(vsubq_f32(v523, v524), v566)), v563))), v575), v567);
                  v526 = vcvtq_f32_s32(vcvtq_s32_f32(v525));
                  v527 = vcvtq_s32_f32(vsubq_f32(v526, vcvtq_f32_s32(vcgtq_f32(v525, v526)))).u32[0];
                  v528 = v527 - v460;
                  if (v527 >= v460 && v460 + 7 >= v527)
                  {
                    v530 = *(_QWORD *)(a1 + 504) + 32 * (v527 - (uint64_t)*(int *)(a1 + 496));
                    v532 = *(float32x4_t *)v530;
                    v531 = *(float32x4_t *)(v530 + 16);
                    v533 = vaddq_f32(v531, vmulq_f32(v501, *(float32x4_t *)v530));
                    v534 = vaddq_f32(vaddq_f32(v533, (float32x4_t)xmmword_1B3522990), v481);
                    v535 = vcvtq_s32_f32(v534);
                    v481.i64[0] = 0x3F0000003F000000;
                    v481.i64[1] = 0x3F0000003F000000;
                    v536 = (int8x16_t)vaddq_s32(v535, vcgtq_f32(vcvtq_f32_s32(v535), v534));
                    v537 = vextq_s8((int8x16_t)vcgeq_s32((int32x4_t)vextq_s8(v536, v536, 8uLL), *(int32x4_t *)(a2 + 16 * v528 + 208)), (int8x16_t)vcgtq_s32(*(int32x4_t *)(a2 + 16 * v528 + 208), (int32x4_t)v536), 8uLL);
                    *(int32x2_t *)v537.i8 = vpmin_s32(*(int32x2_t *)v537.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v537, v537, 8uLL));
                    LODWORD(v530) = vpmin_s32(*(int32x2_t *)v537.i8, *(int32x2_t *)v537.i8).u32[0];
                    v493 = 0uLL;
                    if (!(_DWORD)v530)
                    {
                      v538 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v505, v504), v503, v502);
                      v539 = vcvtq_f32_s32(vcvtq_s32_f32(v517));
                      v540 = vaddq_f32(v539, vcvtq_f32_s32(vcgtq_f32(v539, v517)));
                      v541 = vcvtq_s32_f32(v540).u32[0];
                      v542 = vminq_f32(vmaxq_f32(v540, v478), v574);
                      v543 = vminq_f32(vmaxq_f32(vrecpeq_f32(v542), v478), v574);
                      v544 = vminq_f32(vmaxq_f32(vmulq_f32(v543, vrecpsq_f32(v542, v543)), v478), v574);
                      v545 = vmulq_f32(vmulq_f32(v538, vmulq_f32(v521, v540)), vmulq_f32(v544, vrecpsq_f32(v542, v544)));
                      v546 = 16 * v528;
                      v547 = a2 + v546;
                      v548 = *(float32x4_t *)((char *)&v647 + v546);
                      v549 = *(_QWORD *)(a2 + v546 + 80);
                      v550 = vaddq_f32(vsubq_f32(v533, v548), v481);
                      v551 = vcvtq_s32_f32(v550);
                      v550.i64[0] = vaddq_s32(v551, vcgtq_f32(vcvtq_f32_s32(v551), v550)).u64[0];
                      v552 = *(_DWORD *)(v547 + 88);
                      v553 = *(float32x4_t *)(v549 + 16 * (v550.i32[0] + v550.i32[1] * v552));
                      if (v541 < 3)
                      {
                        v485 = v501;
                      }
                      else
                      {
                        v554 = v541 + 2;
                        v485 = v501;
                        do
                        {
                          v501 = vaddq_f32(v545, v501);
                          v485 = vsubq_f32(v485, v545);
                          v555 = vaddq_f32(vsubq_f32(vaddq_f32(v531, vmulq_f32(v532, v501)), v548), v481);
                          v556 = vcvtq_s32_f32(v555);
                          v555.i64[0] = vaddq_s32(v556, vcgtq_f32(vcvtq_f32_s32(v556), v555)).u64[0];
                          v557 = v555.i32[1];
                          v558 = v555.i32[0];
                          v559 = vaddq_f32(vsubq_f32(vaddq_f32(v531, vmulq_f32(v532, v485)), v548), v481);
                          v560 = vcvtq_s32_f32(v559);
                          v559.i64[0] = vaddq_s32(v560, vcgtq_f32(vcvtq_f32_s32(v560), v559)).u64[0];
                          v481.i64[0] = 0x3F0000003F000000;
                          v481.i64[1] = 0x3F0000003F000000;
                          v553 = vaddq_f32(vaddq_f32(v553, *(float32x4_t *)(v549 + 16 * (v558 + v557 * v552))), *(float32x4_t *)(v549 + 16 * (v559.i32[0] + v559.i32[1] * v552)));
                          v554 -= 2;
                        }
                        while (v554 > 4);
                      }
                      v486 = vmulq_f32(vaddq_f32(v540, _Q9), v481);
                      v487 = vcvtq_f32_s32(vcvtq_s32_f32(v486));
                      v488 = vaddq_f32(vmulq_f32(vsubq_f32(v517, v540), v481), vsubq_f32(v486, vaddq_f32(v487, vcvtq_f32_s32(vcgtq_f32(v487, v486)))));
                      v489 = vaddq_f32(vsubq_f32(vaddq_f32(v531, vmulq_f32(v532, vaddq_f32(v545, v501))), v548), v481);
                      v490 = vcvtq_s32_f32(v489);
                      v489.i64[0] = vaddq_s32(v490, vcgtq_f32(vcvtq_f32_s32(v490), v489)).u64[0];
                      v491 = vaddq_f32(vsubq_f32(vaddq_f32(v531, vmulq_f32(v532, vsubq_f32(v485, v545))), v548), v481);
                      v492 = vcvtq_s32_f32(v491);
                      v491.i64[0] = vaddq_s32(v492, vcgtq_f32(vcvtq_f32_s32(v492), v491)).u64[0];
                      v493 = vmulq_f32(v521, vaddq_f32(vaddq_f32(v553, vmulq_f32(v488, *(float32x4_t *)(v549 + 16 * (v489.i32[0] + v489.i32[1] * v552)))), vmulq_f32(v488, *(float32x4_t *)(v549 + 16 * (v491.i32[0] + v491.i32[1] * v552)))));
                    }
LABEL_180:
                    a5[v482] = v493;
                    v484 = vaddq_f32(v484, _Q9);
                  }
                  ++v482;
                }
                while (v482 != v38);
                v462 = vaddq_f32(v462, _Q9);
                a5 += v603;
                if (++v477 == v15)
                  goto LABEL_165;
              }
            }
            v561 = v15;
            v464 = v614;
            do
            {
              v462 = vaddq_f32(v462, _Q9);
              a5 = (float32x4_t *)((char *)a5 + v597);
              --v561;
            }
            while (v561);
          }
LABEL_165:
          v460 += 8;
          v461 = v464 + 256;
          if (v460 > SHIDWORD(v650[0]))
            return;
        }
      }
      v78 = v587;
    }
    v608 = 0;
    goto LABEL_47;
  }
  if (v15 >= 1 && (int)v38 >= 1)
  {
    do
    {
LABEL_13:
      bzero(a5, 16 * (v607 + ~(_DWORD)v623) + 16);
      a5 += (int)a6;
      --v15;
    }
    while (v15);
  }
}

void HGAnisotropicXForm::HGAnisotropicXForm(HGAnisotropicXForm *this)
{
  _QWORD *v2;
  HGMipmap *v3;
  char *v4;
  HGTransform *v5;
  HGTransform *v6;
  HGTransform *v7;
  HGNode *v8;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E652A4F8;
  v3 = (HGMipmap *)HGObject::operator new(0x300uLL);
  HGMipmap::HGMipmap(v3);
  *((_QWORD *)this + 51) = v3;
  HGMipmap::SetLodFilter((uint64_t)v3, 3, v4);
  v5 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v5);
  *((_QWORD *)this + 55) = v5;
  v6 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v6);
  *((_QWORD *)this + 57) = v6;
  v7 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v7);
  *((_QWORD *)this + 56) = v7;
  v8 = (HGNode *)HGObject::operator new(0x210uLL);
  HGNode::HGNode(v8);
  *(_QWORD *)v8 = off_1E652A2A8;
  *((_QWORD *)v8 + 63) = 0;
  *((_DWORD *)v8 + 125) = 0;
  *((_BYTE *)v8 + 512) = 0;
  *((_DWORD *)v8 + 4) |= 0x600u;
  *((_QWORD *)this + 52) = v8;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0x141800000;
}

void sub_1B2AB91FC(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v2;
  void *v3;

  v3 = v2;
  HGObject::operator delete(v3);
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AB922C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGAnisotropicXForm::~HGAnisotropicXForm(HGAnisotropicXForm *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E652A4F8;
  v2 = *((_QWORD *)this + 55);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    *((_QWORD *)this + 55) = 0;
  }
  v3 = *((_QWORD *)this + 57);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    *((_QWORD *)this + 57) = 0;
  }
  v4 = *((_QWORD *)this + 56);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    *((_QWORD *)this + 56) = 0;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 52) + 24))(*((_QWORD *)this + 52));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 51) + 24))(*((_QWORD *)this + 51));
  HGNode::~HGNode((HGNode *)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E652A4F8;
  v2 = *((_QWORD *)this + 55);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    *((_QWORD *)this + 55) = 0;
  }
  v3 = *((_QWORD *)this + 57);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    *((_QWORD *)this + 57) = 0;
  }
  v4 = *((_QWORD *)this + 56);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    *((_QWORD *)this + 56) = 0;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 52) + 24))(*((_QWORD *)this + 52));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 51) + 24))(*((_QWORD *)this + 51));
  HGNode::~HGNode((HGNode *)this);
  HGObject::operator delete(v5);
}

uint64_t HGAnisotropicXForm::SetParameter(HGAnisotropicXForm *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  int v8;
  int v9;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  if (*((float *)this + 106) != a3)
  {
    *((float *)this + 106) = a3;
    v8 = 1;
    if (*((float *)this + 107) == a4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = 0;
  if (*((float *)this + 107) != a4)
  {
LABEL_5:
    *((float *)this + 107) = a4;
    v8 = 1;
  }
LABEL_6:
  if (*((float *)this + 108) != a5)
  {
    *((float *)this + 108) = a5;
    if ((int)a6 <= 1)
      v9 = 1;
    else
      v9 = (int)a6;
    if (*((_DWORD *)this + 109) == v9)
      goto LABEL_11;
    goto LABEL_19;
  }
  v9 = (int)a6;
  if ((int)a6 <= 1)
    v9 = 1;
  if (*((_DWORD *)this + 109) != v9)
  {
LABEL_19:
    *((_DWORD *)this + 109) = v9;
    HGNode::ClearBits((HGNode *)this, a2, a7);
    return 1;
  }
  if (v8)
  {
LABEL_11:
    HGNode::ClearBits((HGNode *)this, a2, a7);
    return 1;
  }
  return 0;
}

uint64_t HGAnisotropicXForm::SetInput(HGNode *this, int a2, HGNode *a3)
{
  uint64_t v6;

  if (a2)
    return 0xFFFFFFFFLL;
  v6 = HGNode::SetInput(this, 0, a3);
  (*(void (**)(_QWORD, _QWORD, HGNode *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 0, a3);
  return v6;
}

uint64_t HGAnisotropicXForm::SetTransform(HGAnisotropicXForm *this, HGTransform *a2)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;

  v3 = **((_QWORD **)this + 55);
  if (a2)
  {
    if ((*(unsigned int (**)(void))(v3 + 232))())
    {
      return 0;
    }
    else
    {
      (*(void (**)(_QWORD, HGTransform *))(**((_QWORD **)this + 55) + 96))(*((_QWORD *)this + 55), a2);
      HGNode::ClearBits((HGNode *)this, v6, v7);
      return 1;
    }
  }
  else if ((*(unsigned int (**)(void))(v3 + 224))())
  {
    return 0;
  }
  else
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 55) + 56))(*((_QWORD *)this + 55));
    HGNode::ClearBits((HGNode *)this, v8, v9);
    return 1;
  }
}

uint64_t HGAnisotropicXForm::GetTransform(HGAnisotropicXForm *this)
{
  return *((_QWORD *)this + 55);
}

BOOL HGAnisotropicXForm::setup(uint64_t a1, const void *a2, HGRect a3, HGRect a4, int *a5, int a6, double a7, double a8, double a9, double a10)
{
  HGTransform *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  HGGPURenderer *v17;
  unsigned int MaxTileArea;
  unsigned int v19;
  unsigned int v20;
  unsigned int i;

  *(HGRect *)(a1 + 464) = a4;
  v13 = *(HGTransform **)(a1 + 448);
  LODWORD(a7) = 0.5;
  if (a6 > 0)
    *(float *)&a7 = 1.5;
  LODWORD(a10) = *(_DWORD *)(a1 + 432);
  v14 = hg_clip(v13, a3, a4, a7, *(float *)(a1 + 424), (double)*(int *)(a1 + 436), a10, a5, (int)*(float *)(a1 + 428), (int)*(float *)&a10, 0xFFFFFFFF);
  v16 = v15;
  if (a2
  {
    MaxTileArea = HGGPURenderer::GetMaxTileArea(v17);
  }
  else
  {
    MaxTileArea = 0x1000000;
  }
  v19 = a5[1];
  v20 = *(float *)(a1 + 432);
  for (i = (HIDWORD(v16) - HIDWORD(v14)) * (v16 - v14); MaxTileArea < i && v19 < v20; i = ((double)i * 0.25))
    ++v19;
  a5[1] = v19;
  return !HGRectIsNull(v14, v16);
}

HGNode *HGAnisotropicXForm::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *v3;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v6;
  uint64_t v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  int v14;
  double v15;
  double v16;
  double v17;
  int v18;
  HGRect v20;
  HGRect v21;
  HGRect v22;

  v3 = this;
  Input = HGRenderer::GetInput(a2, this, 0);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v3 + 57) + 96))(*((_QWORD *)v3 + 57), *((_QWORD *)v3 + 55));
  (*(void (**)(_QWORD))(**((_QWORD **)v3 + 57) + 184))(*((_QWORD *)v3 + 57));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v3 + 57) + 224))(*((_QWORD *)v3 + 57)))
    return Input;
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v3 + 56) + 96))(*((_QWORD *)v3 + 56), *((_QWORD *)v3 + 57));
  (*(void (**)(_QWORD))(**((_QWORD **)v3 + 56) + 168))(*((_QWORD *)v3 + 56));
  DOD = HGRenderer::GetDOD(a2, Input);
  v7 = v6;
  LODWORD(v8) = 1.5;
  *(_QWORD *)&v20.var0 = DOD;
  *(_QWORD *)&v20.var2 = v7;
  v10 = hg_dod(*((HGTransform **)v3 + 57), v20, v8, v9);
  v12 = v11;
  v13 = (*(double (**)(HGNode *, HGRenderer *))(*(_QWORD *)v3 + 312))(v3, a2);
  *(_QWORD *)&v21.var0 = v10;
  *(_QWORD *)&v21.var2 = v12;
  *(_QWORD *)&v22.var0 = DOD;
  *(_QWORD *)&v22.var2 = v7;
  if (HGAnisotropicXForm::setup((uint64_t)v3, a2, v21, v22, (int *)v3 + 120, v14, v13, v15, v16, v17))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, float))(**((_QWORD **)v3 + 51) + 576))(*((_QWORD *)v3 + 51), *((_QWORD *)v3 + 57), *((_QWORD *)v3 + 56), (float)*((int *)v3 + 109));
    v18 = HGAnisotropicSampler::Init(*((_QWORD *)v3 + 52), (uint64_t)a2, (uint64_t)v3, *((_QWORD *)v3 + 51), *((_DWORD *)v3 + 120), *((_DWORD *)v3 + 121), DOD, v7);
    if (*((_DWORD *)v3 + 121) > v18)
      *((_DWORD *)v3 + 121) = v18;
    return (HGNode *)*((_QWORD *)v3 + 52);
  }
  else
  {
    *((_QWORD *)v3 + 60) = -1;
  }
  return v3;
}

uint64_t HGAnisotropicXForm::GetDOD(HGAnisotropicXForm *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

uint64_t HGAnisotropicXForm::GetROI(HGAnisotropicXForm *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

uint64_t HGAnisotropicXForm::GetProgram(HGAnisotropicXForm *this, HGRenderer *a2)
{
  return 0;
}

uint64_t HGAnisotropicXForm::RenderTile(HGAnisotropicXForm *this, HGTile *a2)
{
  return 0;
}

uint64_t HGAnisotropicXForm::Bind(HGAnisotropicXForm *this, HGHandler *a2)
{
  return 0;
}

uint64_t HGAnisotropicXForm::BindTexture(HGAnisotropicXForm *this, HGHandler *a2)
{
  return 0;
}

uint64_t HGAnisotropicXForm::SetLodFilter(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  char *v5;

  if (HGMipmap::SetLodFilter(*(_QWORD *)(a1 + 408), a2, a3) != 1)
    return 0;
  HGNode::ClearBits((HGNode *)a1, v4, v5);
  return 1;
}

double rho(float *a1, const double *a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  double v21;
  float v22;
  float v24;
  float v25;
  double v26;
  float v27;

  v3 = *a1;
  v4 = a2[3];
  v5 = a1[3];
  v6 = (*a2 - v4 * v3) / v5;
  v7 = a1[1];
  v8 = (a2[1] - v4 * v7) / v5;
  v9 = a2[7];
  v10 = (a2[4] - v9 * v3) / v5;
  v11 = (a2[5] - v9 * v7) / v5;
  v12 = v8 + v11;
  v13 = v8 - v11;
  v14 = v6 * v6 + v8 * v8;
  v15 = v10 * v10 + v11 * v11;
  v16 = (v6 + v10) * (v6 + v10) + v12 * v12;
  v17 = (v6 - v10) * (v6 - v10) + v13 * v13;
  if (a3 <= 1.0)
  {
    v24 = fmax(v14, v15);
    v25 = fmax(v16, v17);
    return sqrtf(fminf(v24, v25));
  }
  else
  {
    v18 = fmin(v14, v15);
    v19 = fmin(v16, v17);
    v20 = a3;
    if (v19 >= v18)
    {
      v26 = sqrt(fmax(v14, v15));
      v27 = v26 / sqrt(v18);
      return v26 / fminf(v27, v20);
    }
    else
    {
      v21 = sqrt(fmax(v16, v17));
      v22 = v21 / sqrt(v19);
      return v21 / fminf(v22, v20);
    }
  }
}

uint64_t HGApply1DLUT::Init(HGApply1DLUT *this, int a2, float a3, float a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  HGNode *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  __n128 v22;
  __n128 v23;

  *((_BYTE *)this + 440) = 1;
  *((float *)this + 112) = a3;
  *((float *)this + 113) = a4;
  *((_BYTE *)this + 456) = a5;
  *((_BYTE *)this + 457) = a6;
  *((_BYTE *)this + 458) = a7;
  *((_BYTE *)this + 459) = a8;
  *((_DWORD *)this + 111) = a2;
  *((_BYTE *)this + 461) = a10;
  *((_BYTE *)this + 460) = a9;
  v12 = *((_QWORD *)this + 52);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    *((_QWORD *)this + 52) = 0;
  }
  v13 = *((_QWORD *)this + 51);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    *((_QWORD *)this + 51) = 0;
  }
  v14 = HGRectMake4i(0, 0, *((_DWORD *)this + 111) + 1, 1u);
  *((_QWORD *)this + 53) = v14;
  *((_QWORD *)this + 54) = v15;
  if ((v15 - v14) >= 0x801)
  {
    *((_QWORD *)this + 53) = HGRectMake4i(0, 0, 0x800u, ((v15 - v14) >> 11) + 1);
    *((_QWORD *)this + 54) = v16;
  }
  v17 = (HGNode *)HGObject::operator new(0x1F0uLL);
  HGNode::HGNode(v17);
  *(_QWORD *)v17 = off_1E652A9F8;
  *((_BYTE *)v17 + 480) = a9;
  HGNode::SetFlags(v17, 1, 4);
  *((_DWORD *)v17 + 4) |= 0x600u;
  *((_QWORD *)this + 51) = v17;
  *((_OWORD *)v17 + 29) = *(_OWORD *)((char *)this + 424);
  v18 = (float)(*((_DWORD *)this + 111) - 1);
  v19 = *((float *)this + 112);
  v20 = v18 / v19;
  v21 = -(v18 * *((float *)this + 113)) / v19;
  v22.n128_u64[0] = 0x4500000045000000;
  v23.n128_u64[0] = 0x3A0000003A000000;
  (*(void (**)(_QWORD, _QWORD, float, float, __n128, __n128))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 0, v20, v21, v22, v23);
  (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 1, (float)(*((_DWORD *)this + 111) - 1), (float)(*((_DWORD *)this + 111) - 1), (float)(*((_DWORD *)this + 111) - 1), (float)(*((_DWORD *)this + 111) - 1));
  return (*(uint64_t (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 2, (float)(char)(*((_BYTE *)this + 456) - 1), (float)(char)(*((_BYTE *)this + 457) - 1), (float)(char)(*((_BYTE *)this + 458) - 1), (float)(char)(*((_BYTE *)this + 459) - 1));
}

void sub_1B2AB9B78(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HGNode::~HGNode(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2AB9B90(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HGApply1DLUT::HGApply1DLUT(HGApply1DLUT *this)
{
  uint64_t v1;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v1 = off_1E652A790;
  *(_QWORD *)(v1 + 408) = 0;
  *(_QWORD *)(v1 + 416) = 0;
  *(_BYTE *)(v1 + 460) = 1;
  HGApply1DLUT::Init((HGApply1DLUT *)v1, 256, 1.0, 0.0, 1, 1, 1, 0, 1, 1);
}

void sub_1B2AB9C08(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGApply1DLUT::HGApply1DLUT(HGApply1DLUT *this, int a2, float a3, float a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  HGApply1DLUT *v19;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v19 = off_1E652A790;
  *((_QWORD *)v19 + 51) = 0;
  *((_QWORD *)v19 + 52) = 0;
  HGApply1DLUT::Init(v19, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1B2AB9CBC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGApply1DLUT::~HGApply1DLUT(HGNode *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E652A790;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 51);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E652A790;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 51);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
  HGObject::operator delete(v4);
}

uint64_t HGApply1DLUT::CreateBitmap(HGApply1DLUT *this)
{
  uint64_t v2;
  int v3;
  int v4;
  unint64_t v5;
  uint64_t *v6;
  HGBitmap *v7;

  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (*((_BYTE *)this + 461))
    v3 = 27;
  else
    v3 = 28;
  v4 = (*((_DWORD *)this + 109) - *((_DWORD *)this + 107)) * (*((_DWORD *)this + 108) - *((_DWORD *)this + 106));
  v5 = v4 * HGFormatUtils::bytesPerPixel(v3);
  v6 = (uint64_t *)HGObject::operator new(0x20uLL);
  HGMemory::StorageObject::StorageObject((HGMemory::StorageObject *)v6, v5);
  v7 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap((uint64_t)v7, *((_QWORD *)this + 53), *((_QWORD *)this + 54), v3, v6[2]);
  *((_QWORD *)this + 52) = v7;
  HGBitmap::SetStorage(v7, (HGObject *)v6);
  return (*(uint64_t (**)(uint64_t *))(*v6 + 24))(v6);
}

void sub_1B2AB9E40(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AB9E58(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t HGApply1DLUT::SetLUT(HGApply1DLUT *this, uint64_t (*a2)(void *, unsigned int *, unsigned int *, char *, uint64_t *, float), void *a3, float32x4_t a4)
{
  int32x2_t v4;
  float v8;
  float v9;
  __int16 *v10;
  uint64_t v11;
  float v12;
  int v13;
  uint64_t result;
  int8x16_t v15;
  float32x4_t v16;
  uint32x4_t v17;
  int v18;
  __int16 *v19;
  uint64_t v20;
  int v21;
  __int16 *v22;
  int v23;
  __int16 *v24;
  int32x4_t v25;
  int32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int32x4_t v33;
  uint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  float v41;
  float v42;
  BOOL v43;
  float v44;
  int8x16_t v45;
  float32x4_t v46;
  uint32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int32x2_t v52;
  uint64_t v53;
  unsigned int v54[4];
  int16x8x4_t v55;

  v53 = 0;
  *(_QWORD *)v54 = 0;
  v8 = *((float *)this + 112);
  v9 = (float)*((int *)this + 111) + -1.0;
  v4.i32[0] = *((_DWORD *)this + 113);
  *((_BYTE *)this + 440) = 1;
  v52 = v4;
  if (!*((_QWORD *)this + 52))
  {
    HGApply1DLUT::CreateBitmap(this);
    v4 = v52;
  }
  v10 = *(__int16 **)(*((_QWORD *)this + 52) + 80);
  v11 = *((unsigned int *)this + 111);
  v12 = v8 / v9;
  if (*((_BYTE *)this + 461))
  {
    if (a2)
    {
      if ((int)v11 >= 1)
      {
        v13 = 0;
        v50 = (float32x4_t)vdupq_n_s32(0x47800000u);
        v51 = (int8x16_t)vdupq_n_s32(0xC7800000);
        v48 = (int8x16_t)vdupq_n_s32(0xF800000u);
        v49 = (float32x4_t)vdupq_n_s32(0x7800000u);
        while (1)
        {
          result = a2(a3, &v54[1], v54, (char *)&v53 + 4, &v53, *(float *)v4.i32 + (float)(v12 * (float)v13));
          if ((_DWORD)result)
            return result;
          v15.i64[0] = __PAIR64__(v54[0], v54[1]);
          v15.i64[1] = __PAIR64__(v53, HIDWORD(v53));
          v16 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v51, (float32x4_t)v15), v51, v15);
          v17 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v16, v50), v48, (int8x16_t)vmulq_f32(v16, v49));
          *(int16x4_t *)v10 = vmovn_s32((int32x4_t)vorrq_s8(vandq_s8((int8x16_t)vshlq_u32(v17, (uint32x4_t)xmmword_1B3523D30), (int8x16_t)xmmword_1B3523D40), vandq_s8((int8x16_t)vshlq_u32(v17, (uint32x4_t)xmmword_1B3523D50), (int8x16_t)xmmword_1B3523D60)));
          v10 += 4;
          ++v13;
          v12 = v8 / v9;
          v4.i32[0] = v52.i32[0];
          if (v13 >= *((_DWORD *)this + 111))
            goto LABEL_37;
        }
      }
    }
    else if ((int)v11 >= 1)
    {
      if (v11 >= 8)
      {
        v20 = v11 & 0x7FFFFFF8;
        v24 = &v10[4 * (v11 & 0xFFFFFFF8)];
        a4 = (float32x4_t)vdupq_lane_s32(v4, 0);
        v25 = (int32x4_t)xmmword_1B3523D70;
        v26 = (int32x4_t)xmmword_1B3050090;
        v27 = (int8x16_t)vdupq_n_s32(0xC7800000);
        v28 = (float32x4_t)vdupq_n_s32(0x47800000u);
        v29 = (float32x4_t)vdupq_n_s32(0x7800000u);
        v30 = (int8x16_t)vdupq_n_s32(0xF800000u);
        v31.i64[0] = 0x7F0000007FLL;
        v31.i64[1] = 0x7F0000007FLL;
        v32.i64[0] = 0x800000008000;
        v32.i64[1] = 0x800000008000;
        v33.i64[0] = 0x800000008;
        v33.i64[1] = 0x800000008;
        v34 = v11 & 0xFFFFFFF8;
        do
        {
          v35 = (int8x16_t)vaddq_f32(a4, vmulq_n_f32(vcvtq_f32_s32(v25), v12));
          v36 = (int8x16_t)vaddq_f32(a4, vmulq_n_f32(vcvtq_f32_s32(v26), v12));
          v37 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v27, (float32x4_t)v35), v27, v35);
          v38 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v27, (float32x4_t)v36), v27, v36);
          v39 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v37, v28), v30, (int8x16_t)vmulq_f32(v37, v29));
          v40 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v38, v28), v30, (int8x16_t)vmulq_f32(v38, v29));
          v55.val[0] = vuzp1q_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v40, 0xDuLL), v31), vandq_s8((int8x16_t)vshrq_n_u32(v40, 0x10uLL), v32)), (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v39, 0xDuLL), v31), vandq_s8((int8x16_t)vshrq_n_u32(v39, 0x10uLL), v32)));
          v55.val[1] = v55.val[0];
          v55.val[2] = v55.val[0];
          v55.val[3] = v55.val[0];
          vst4q_s16(v10, v55);
          v10 += 32;
          v26 = vaddq_s32(v26, v33);
          v25 = vaddq_s32(v25, v33);
          v34 -= 8;
        }
        while (v34);
        if (v20 == v11)
        {
          v15 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v35, 3);
          v10 = v24;
          goto LABEL_37;
        }
        v10 = v24;
      }
      else
      {
        LODWORD(v20) = 0;
      }
      do
      {
        a4.f32[0] = *(float *)v4.i32 + (float)(v12 * (float)(int)v20);
        v41 = -65536.0;
        if (a4.f32[0] >= -65536.0)
          v41 = *(float *)v4.i32 + (float)(v12 * (float)(int)v20);
        v42 = v41 * 1.9259e-34;
        v43 = v41 <= 65536.0;
        v44 = 1.2622e-29;
        if (v43)
          v44 = v42;
        *(int16x4_t *)v10 = vdup_n_s16(HIWORD(LODWORD(v44)) & 0x8000 | (LODWORD(v44) >> 13) & 0x7FFF);
        v10 += 4;
        LODWORD(v20) = v20 + 1;
      }
      while ((_DWORD)v11 != (_DWORD)v20);
      v15 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
      goto LABEL_37;
    }
    v15 = 0uLL;
LABEL_37:
    result = 0;
    v45 = (int8x16_t)vdupq_n_s32(0xC7800000);
    v46 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v45, (float32x4_t)v15), v45, v15);
    v47 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v46, (float32x4_t)vdupq_n_s32(0x47800000u)), (int8x16_t)vdupq_n_s32(0xF800000u), (int8x16_t)vmulq_f32(v46, (float32x4_t)vdupq_n_s32(0x7800000u)));
    *(int16x4_t *)v10 = vmovn_s32((int32x4_t)vorrq_s8(vandq_s8((int8x16_t)vshlq_u32(v47, (uint32x4_t)xmmword_1B3523D30), (int8x16_t)xmmword_1B3523D40), vandq_s8((int8x16_t)vshlq_u32(v47, (uint32x4_t)xmmword_1B3523D50), (int8x16_t)xmmword_1B3523D60)));
    return result;
  }
  if (!a2)
  {
    if ((int)v11 >= 1)
    {
      v21 = 0;
      do
      {
        *(float *)v54 = *(float *)v4.i32 + (float)(v12 * (float)v21);
        v54[1] = v54[0];
        *(float *)&v53 = *(float *)v54;
        *((float *)&v53 + 1) = *(float *)v54;
        *(_DWORD *)v10 = v54[0];
        *((_DWORD *)v10 + 1) = v54[0];
        *((_DWORD *)v10 + 2) = HIDWORD(v53);
        v22 = v10 + 8;
        *((_DWORD *)v10 + 3) = v53;
        ++v21;
        v10 += 8;
      }
      while ((_DWORD)v11 != v21);
      v10 = v22;
    }
    goto LABEL_24;
  }
  if ((int)v11 < 1)
  {
LABEL_24:
    result = 0;
    *(_DWORD *)v10 = v54[1];
    v23 = HIDWORD(v53);
    *((_DWORD *)v10 + 1) = v54[0];
    *((_DWORD *)v10 + 2) = v23;
    *((_DWORD *)v10 + 3) = v53;
    return result;
  }
  v18 = 0;
  while (1)
  {
    result = a2(a3, &v54[1], v54, (char *)&v53 + 4, &v53, *(float *)v4.i32 + (float)(v12 * (float)v18));
    if ((_DWORD)result)
      return result;
    *(_DWORD *)v10 = v54[1];
    *((_DWORD *)v10 + 1) = v54[0];
    *((_DWORD *)v10 + 2) = HIDWORD(v53);
    v19 = v10 + 8;
    *((_DWORD *)v10 + 3) = v53;
    ++v18;
    v10 += 8;
    v12 = v8 / v9;
    v4.i32[0] = v52.i32[0];
    if (v18 >= *((_DWORD *)this + 111))
    {
      v10 = v19;
      goto LABEL_24;
    }
  }
}

uint64_t HGApply1DLUT::SetLUTBitmap(HGApply1DLUT *this, HGBitmap *a2)
{
  HGBitmap *v4;

  if (!a2)
    return 0xFFFFFFFFLL;
  if (!HGRect::IsEqual((HGRect *)((char *)a2 + 20), *(HGRect *)((char *)this + 424))
    || (*((_DWORD *)a2 + 4) - 27) > 1)
  {
    return 0xFFFFFFFFLL;
  }
  v4 = (HGBitmap *)*((_QWORD *)this + 52);
  if (v4 != a2)
  {
    *((_BYTE *)this + 440) = 1;
    if (v4)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v4 + 24))(v4);
    *((_QWORD *)this + 52) = a2;
    (*(void (**)(HGBitmap *))(*(_QWORD *)a2 + 16))(a2);
  }
  return 0;
}

uint64_t HGApply1DLUT::GetOutput(HGNode *this, HGRenderer *a2, float32x4_t a3)
{
  uint64_t v5;
  HGNode *Input;
  HGBitmapLoader *v7;
  HGTextureWrap *v8;
  char *v9;

  if (!*((_QWORD *)this + 52))
    HGApply1DLUT::SetLUT((HGApply1DLUT *)this, 0, 0, a3);
  v5 = *((_QWORD *)this + 51);
  Input = HGRenderer::GetInput(a2, this, 0);
  (*(void (**)(uint64_t, _QWORD, HGNode *))(*(_QWORD *)v5 + 120))(v5, 0, Input);
  if (*((_BYTE *)this + 440))
  {
    *((_BYTE *)this + 440) = 0;
    v7 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
    HGBitmapLoader::HGBitmapLoader(v7, *((HGBitmap **)this + 52));
    if (((*(uint64_t (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2) & 1) != 0 || !*((_BYTE *)this + 460))
    {
      (*(void (**)(_QWORD, uint64_t, HGBitmapLoader *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 1, v7);
    }
    else
    {
      v8 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
      HGTextureWrap::HGTextureWrap(v8);
      HGTextureWrap::SetTextureWrapMode((uint64_t)v8, (const char *)2, v9);
      (*(void (**)(HGTextureWrap *, _QWORD, HGBitmapLoader *))(*(_QWORD *)v8 + 120))(v8, 0, v7);
      (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v7 + 24))(v7);
      (*(void (**)(_QWORD, uint64_t, HGTextureWrap *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 1, v8);
      v7 = v8;
    }
    (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v7 + 24))(v7);
  }
  return *((_QWORD *)this + 51);
}

void sub_1B2ABA4E0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ABA4F8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HgcApply1DLUT::~HgcApply1DLUT(HGNode *this)
{
  void *v1;

  HGNode::~HGNode(this);
  HGObject::operator delete(v1);
}

uint64_t HgcApply1DLUT::SetParameter(HGNode *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch((_DWORD)a2)
  {
    case 2:
      v7 = (float *)((char *)this + 448);
      v8 = 460;
      v9 = 456;
      v10 = 452;
      goto LABEL_7;
    case 1:
      v7 = (float *)((char *)this + 432);
      v8 = 444;
      v9 = 440;
      v10 = 436;
      goto LABEL_7;
    case 0:
      v7 = (float *)((char *)this + 416);
      v8 = 428;
      v9 = 424;
      v10 = 420;
LABEL_7:
      *v7 = a3;
      *(float *)((char *)this + v10) = a4;
      *(float *)((char *)this + v9) = a5;
      *(float *)((char *)this + v8) = a6;
      break;
  }
  HGNode::ClearBits(this, a2, a7);
  return 1;
}

uint64_t HgcApply1DLUT::RenderTile(float32x4_t *this, HGTile *a2)
{
  Get1DLUTLinearTile(a2, this[26].f32, this + 27, this + 28, this[30].u8[0]);
  return 0;
}

const char *HgcApply1DLUT::GetProgram(HgcApply1DLUT *this, HGRenderer *a2)
{
  return GetApply1DProgram(a2, *((float *)this + 115) < 0.0, *((unsigned __int8 *)this + 480));
}

uint64_t HgcApply1DLUT::Bind(HgcApply1DLUT *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, char *, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, (char *)this + 416, 1);
  (*(void (**)(HGHandler *, uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, (char *)this + 432, 1);
  (*(void (**)(HGHandler *, uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, (char *)this + 448, 1);
  return 0;
}

uint64_t HgcApply1DLUT::BindTexture(HgcApply1DLUT *this, HGHandler *a2, int a3)
{
  int v4;
  uint64_t result;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((unsigned __int8 *)this + 480), *((unsigned __int8 *)this + 480));
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    {
      v7.n128_u32[0] = 0;
      v8.n128_u32[0] = 0;
      v9.n128_u32[0] = 1.0;
      v10.n128_u32[0] = 1.0;
    }
    else
    {
      v7.n128_f32[0] = (float)*((int *)a2 + 60);
      v8.n128_f32[0] = (float)*((int *)a2 + 61);
      v9.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v10.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 3, v7, v8, v9, v10);
    return 0;
  }
  else if (a3)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    result = 0;
    if (!v4)
    {
      (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
      return 0;
    }
  }
  return result;
}

void HgcApply1DLUT::InitProgramDescriptor(HgcApply1DLUT *this, HGProgramDescriptor *a2)
{
  InitApply1DProgramDescriptor(a2, *((float *)this + 115) < 0.0, *((unsigned __int8 *)this + 480));
}

uint64_t HgcApply1DLUT::GetDOD(HgcApply1DLUT *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcApply1DLUT::GetROI(HgcApply1DLUT *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)&a4.var0;
  v7 = *((_QWORD *)this + 58);
  if (((*(uint64_t (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2) & 1) == 0)
  {
    v8 = *((_QWORD *)this + 58);
    v9 = *((_QWORD *)this + 59);
    v10 = HGRectMake4i(0, 0, 1u, 0);
    v7 = HGRectGrow(v8, v9, v10);
  }
  if (!a3)
    return v4;
  if (a3 != 1)
    return 0;
  return v7;
}

void HGApply3DLUT::Init(uint64_t a1, int a2, unsigned int a3, char a4, int a5, char a6, char a7, char a8, float a9, float a10, float a11, float a12, float a13, float a14, char a15)
{
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  HgcApply3DLUTTetrahedralUniform_basekernel *v24;
  __n128 v25;
  __n128 v26;
  int v27;
  HgcApply3DLUTTetrahedralFast_basekernel *v28;
  int v29;
  HgcApply3DLUTTrilinearFast_basekernel *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  HGObject *v43;
  unint64_t v44;
  HGBitmap *v45;
  float **v46;
  int v47;
  float *v48;
  float v49;
  int i;
  float v51;
  float v52;
  HGBitmapLoader *v53;

  v18 = 1;
  *(_BYTE *)(a1 + 464) = 1;
  *(_BYTE *)(a1 + 465) = a4;
  *(_DWORD *)(a1 + 516) = a5;
  *(float *)(a1 + 476) = a9;
  *(float *)(a1 + 480) = a10;
  *(float *)(a1 + 484) = a11;
  *(float *)(a1 + 488) = a12;
  *(float *)(a1 + 492) = a13;
  *(float *)(a1 + 496) = a14;
  if (a11 != 0.0 || a12 != 1.0 || a13 != 0.0 || a14 != 0.0)
    v18 = 0;
  *(_BYTE *)(a1 + 500) = v18;
  *(_BYTE *)(a1 + 512) = a6;
  *(_BYTE *)(a1 + 513) = a7;
  *(_BYTE *)(a1 + 514) = a8;
  *(_BYTE *)(a1 + 515) = a15;
  v19 = *(_QWORD *)(a1 + 416);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  v20 = *(_QWORD *)(a1 + 424);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
  v21 = *(_QWORD *)(a1 + 408);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
  if (a3 <= 0x1C && ((1 << a3) & 0x1B3A0000) != 0)
    *(_DWORD *)(a1 + 468) = a3;
  *(_DWORD *)(a1 + 472) = a2;
  *(_QWORD *)(a1 + 432) = HGRectMake4i(0, 0, a2 * a2 + 1, a2 + 1);
  *(_QWORD *)(a1 + 440) = v22;
  *(_QWORD *)(a1 + 448) = HGRectMake4i(0, 0, *(_DWORD *)(a1 + 472), 1u);
  *(_QWORD *)(a1 + 456) = v23;
  if (*(_DWORD *)(a1 + 516))
  {
    if (*(_BYTE *)(a1 + 500))
    {
      v24 = (HgcApply3DLUTTetrahedralUniform_basekernel *)HGObject::operator new(0x1B0uLL);
      HgcApply3DLUTTetrahedralUniform_basekernel::HgcApply3DLUTTetrahedralUniform_basekernel(v24);
      *(_QWORD *)v24 = off_1E652B600;
      HGNode::SetFlags((HGNode *)v24, 1, 2);
      (*(void (**)(HgcApply3DLUTTetrahedralUniform_basekernel *, uint64_t, uint64_t))(*(_QWORD *)v24 + 136))(v24, 2, 2);
      goto LABEL_27;
    }
    v27 = *(unsigned __int8 *)(a1 + 465);
    v28 = (HgcApply3DLUTTetrahedralFast_basekernel *)HGObject::operator new(0x1B0uLL);
    v24 = v28;
    if (v27)
    {
      HgcApply3DLUTTetrahedralFast_basekernel::HgcApply3DLUTTetrahedralFast_basekernel(v28);
      *(_QWORD *)v24 = off_1E652B868;
    }
    else
    {
      HgcApply3DLUTTetrahedral_basekernel::HgcApply3DLUTTetrahedral_basekernel(v28);
      *(_QWORD *)v24 = off_1E652BAD0;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 500))
    {
      v24 = (HgcApply3DLUTTetrahedralUniform_basekernel *)HGObject::operator new(0x1B0uLL);
      HgcApply3DLUTTrilinearUniform_basekernel::HgcApply3DLUTTrilinearUniform_basekernel(v24);
      *(_QWORD *)v24 = off_1E652AEC8;
      HGNode::SetFlags((HGNode *)v24, 1, 2);
      (*(void (**)(HgcApply3DLUTTetrahedralUniform_basekernel *, uint64_t, uint64_t))(*(_QWORD *)v24 + 136))(v24, 2, 2);
      goto LABEL_27;
    }
    v29 = *(unsigned __int8 *)(a1 + 465);
    v30 = (HgcApply3DLUTTrilinearFast_basekernel *)HGObject::operator new(0x1B0uLL);
    v24 = v30;
    if (v29)
    {
      HgcApply3DLUTTrilinearFast_basekernel::HgcApply3DLUTTrilinearFast_basekernel(v30);
      *(_QWORD *)v24 = off_1E652B130;
    }
    else
    {
      HgcApply3DLUTTrilinear_basekernel::HgcApply3DLUTTrilinear_basekernel(v30);
      *(_QWORD *)v24 = off_1E652B398;
    }
  }
  HGNode::SetFlags((HGNode *)v24, 1, 2);
  (*(void (**)(HgcApply3DLUTTetrahedralUniform_basekernel *, uint64_t, uint64_t))(*(_QWORD *)v24 + 136))(v24, 2, 2);
LABEL_27:
  *(_QWORD *)(a1 + 408) = v24;
  *((_DWORD *)v24 + 104) = *(_DWORD *)(a1 + 472);
  v31 = *(float *)(a1 + 496);
  if (v31 != 0.0)
  {
    v32 = *(float *)(a1 + 488);
    v33 = *(float *)(a1 + 492);
    v34 = ((float)(v32 / v31) * 3.0 - (float)((float)(v33 * v33) / (float)(v31 * v31))) / 3.0;
    *(float *)(a1 + 504) = v34;
    v25.n128_f64[0] = (float)((float)(v33 * (float)(v33 * (float)(v33 + v33))) / (float)(v31 * (float)(v31 * v31)))
                    + v33 * -9.0 * v32 / (float)(v31 * v31);
    v25.n128_f32[0] = v25.n128_f64[0];
    *(_DWORD *)(a1 + 508) = v25.n128_u32[0];
  }
  v35 = *(_DWORD *)(a1 + 468);
  if (v35 <= 0x19 && ((1 << v35) & 0x30A0000) != 0)
  {
    v36 = *(float *)(a1 + 476);
    v25.n128_f32[0] = 1.0 / v36;
    v26.n128_f64[0] = -*(float *)(a1 + 480) / v36;
    v26.n128_f32[0] = v26.n128_f64[0];
    (*(void (**)(HgcApply3DLUTTetrahedralUniform_basekernel *, _QWORD, __n128, __n128))(*(_QWORD *)v24 + 96))(v24, 0, v25, v26);
  }
  else
  {
    v25.n128_u32[0] = *(_DWORD *)(a1 + 476);
    v26.n128_f64[0] = v25.n128_f32[0];
    v25.n128_f32[0] = 1.0 / v25.n128_f32[0];
    v26.n128_f64[0] = -*(float *)(a1 + 480) / v26.n128_f64[0];
    v26.n128_f32[0] = v26.n128_f64[0];
    (*(void (**)(HgcApply3DLUTTetrahedralUniform_basekernel *, _QWORD, __n128, __n128))(*(_QWORD *)v24 + 96))(v24, 0, v25, v26);
  }
  (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**(_QWORD **)(a1 + 408) + 96))(*(_QWORD *)(a1 + 408), 1, 1.0, (float)*(int *)(a1 + 472), 1.0, 0.0);
  (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**(_QWORD **)(a1 + 408) + 96))(*(_QWORD *)(a1 + 408), 2, (float)(char)(*(_BYTE *)(a1 + 512) - 1), (float)(char)(*(_BYTE *)(a1 + 513) - 1), (float)(char)(*(_BYTE *)(a1 + 514) - 1), (float)(char)(*(_BYTE *)(a1 + 515) - 1));
  if (!*(_BYTE *)(a1 + 500))
  {
    v37 = (float)(*(_DWORD *)(a1 + 472) - 1);
    (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**(_QWORD **)(a1 + 408) + 96))(*(_QWORD *)(a1 + 408), 3, *(float *)(a1 + 484) * v37, *(float *)(a1 + 488) * v37, *(float *)(a1 + 492) * v37, *(float *)(a1 + 496) * v37);
  }
  v38 = *(_DWORD *)(a1 + 440);
  v39 = *(_DWORD *)(a1 + 432);
  v40 = *(_DWORD *)(a1 + 444);
  v41 = *(_DWORD *)(a1 + 436);
  v42 = HGFormatUtils::bytesPerPixel(*(_DWORD *)(a1 + 468));
  v43 = (HGObject *)HGObject::operator new(0x20uLL);
  HGObject::HGObject(v43);
  *(_QWORD *)v43 = off_1E652BD38;
  v44 = (v40 - v41) * (v38 - v39) * (unint64_t)v42;
  *((_QWORD *)v43 + 2) = v44;
  *((_QWORD *)v43 + 3) = 0;
  if (v44)
    *((_QWORD *)v43 + 3) = operator new[]();
  v45 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap((uint64_t)v45, *(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 440), *(_DWORD *)(a1 + 468), *((_QWORD *)v43 + 3));
  *(_QWORD *)(a1 + 416) = v45;
  HGBitmap::SetStorage(v45, v43);
  (*(void (**)(HGObject *))(*(_QWORD *)v43 + 24))(v43);
  v46 = (float **)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v46, *(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), 28);
  *(_QWORD *)(a1 + 424) = v46;
  v47 = *(_DWORD *)(a1 + 472);
  if (v47 >= 1)
  {
    v48 = v46[10];
    v49 = (float)(v47 - 1);
    if (*(float *)(a1 + 496) == 0.0)
    {
      *v48 = 0.0 / v49;
      if (v47 == 1)
        goto LABEL_41;
    }
    else
    {
      *v48 = HGApply3DLUT::InvCubic((HGApply3DLUT *)a1, 0.0);
      if (v47 == 1)
        goto LABEL_41;
    }
    for (i = 1; i != v47; ++i)
    {
      v52 = (float)i;
      if (*(float *)(a1 + 496) == 0.0)
        v51 = v52 / v49;
      else
        v51 = HGApply3DLUT::InvCubic((HGApply3DLUT *)a1, v52);
      v48[4] = v51;
      v48[1] = 1.0 / (float)(v51 - *v48);
      v48 += 4;
    }
  }
LABEL_41:
  if (!*(_BYTE *)(a1 + 500) && !*(_BYTE *)(a1 + 465))
  {
    v53 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
    HGBitmapLoader::HGBitmapLoader(v53, *(HGBitmap **)(a1 + 424));
    (*(void (**)(_QWORD, uint64_t, HGBitmapLoader *))(**(_QWORD **)(a1 + 408) + 120))(*(_QWORD *)(a1 + 408), 2, v53);
    (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v53 + 24))(v53);
  }
}

void sub_1B2ABAF74(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ABAF88(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ABAF9C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ABAFB0(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HgcApply3DLUTTrilinear_basekernel::~HgcApply3DLUTTrilinear_basekernel(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2ABAFC8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ABAFDC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ABAFF0(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HgcApply3DLUTTetrahedral_basekernel::~HgcApply3DLUTTetrahedral_basekernel(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2ABB008(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HgcApply3DLUTTrilinearFast_basekernel::~HgcApply3DLUTTrilinearFast_basekernel(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2ABB020(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ABB034(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HgcApply3DLUTTetrahedralFast_basekernel::~HgcApply3DLUTTetrahedralFast_basekernel(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2ABB04C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ABB060(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HgcApply3DLUTTrilinearUniform_basekernel::~HgcApply3DLUTTrilinearUniform_basekernel(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2ABB078(_Unwind_Exception *a1)
{
  HGObject *v1;
  void *v3;

  HGObject::~HGObject(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2ABB090(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HgcApply3DLUTTetrahedralUniform_basekernel::~HgcApply3DLUTTetrahedralUniform_basekernel(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2ABB0A8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ABB0BC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ABB0D4(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

HGNode *HGApply3DLUT::HGApply3DLUT(HGNode *a1, int a2, unsigned int a3, char a4, int a5, char a6, char a7, char a8, float a9, float a10, float a11, float a12, float a13, float a14, char a15)
{
  _QWORD *v29;

  HGNode::HGNode(a1);
  *v29 = off_1E652AC60;
  v29[52] = 0;
  v29[53] = 0;
  v29[51] = 0;
  HGApply3DLUT::Init((uint64_t)v29, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return a1;
}

void sub_1B2ABB1D4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGApply3DLUT::~HGApply3DLUT(HGNode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E652AC60;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 53);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = *((_QWORD *)this + 51);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E652AC60;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 53);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = *((_QWORD *)this + 51);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  HGNode::~HGNode(this);
  HGObject::operator delete(v5);
}

float HGApply3DLUT::InvCubic(HGApply3DLUT *this, float a2)
{
  float result;
  double v5;
  double v6;
  double v7;
  float v8;
  double v9;
  double v10;
  float v11;
  float v12;

  result = 0.0;
  if (a2 != 0.0)
  {
    v5 = a2;
    v6 = (double)*((int *)this + 118) + -1.0;
    result = 1.0;
    if (v6 != v5)
    {
      v7 = *((float *)this + 124);
      v8 = ((*((float *)this + 121) - v5 / v6) * 27.0 / v7 + *((float *)this + 127)) / 27.0;
      v9 = v8 * -0.5;
      v10 = sqrt((float)(*((float *)this + 126) * (float)(*((float *)this + 126) * *((float *)this + 126))) / 27.0+ (float)(v8 * v8) * 0.25);
      v11 = cbrt(v9 + v10);
      v12 = cbrt(v9 - v10);
      return (float)(v11 + v12) + *((float *)this + 123) / (v7 * -3.0);
    }
  }
  return result;
}

uint64_t HGApply3DLUT::SetLUT(HGApply3DLUT *this, uint64_t (*a2)(void *, char *, unint64_t *, char *, unint64_t *, float, float, float), void *a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t result;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  BOOL v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;

  v5 = 0;
  v74 = 0;
  v75 = 0;
  *((_BYTE *)this + 464) = 1;
  v6 = *((_DWORD *)this + 117);
  if (v6 - 17 <= 0xB)
    v5 = dword_1B3523E98[v6 - 17];
  v7 = *((_DWORD *)this + 118);
  if (v7 < 1)
    return 0;
  v8 = 0;
  v9 = 2 * v5;
  v73 = v5;
  v10 = 3 * v5;
  v71 = 4 * v5;
  v11 = *(float **)(*((_QWORD *)this + 53) + 80);
  while (1)
  {
    v69 = v8;
    if (v7 >= 1)
      break;
LABEL_114:
    v8 = v69 + 1;
    if (v69 + 1 >= v7)
      return 0;
  }
  v12 = 0;
  v13 = (4 * v8);
  v14 = (_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 52) + 80) + *(_QWORD *)(*((_QWORD *)this + 52) + 64) * v8);
  v15 = v7;
LABEL_7:
  while (v15 <= 0)
  {
    if (++v12 >= v15)
      goto LABEL_114;
  }
  v16 = 0;
  v70 = v12;
  v17 = (4 * v12);
  v18 = v11;
  while (2)
  {
    v20 = *((float *)this + 119);
    v21 = *((float *)this + 120);
    v22 = (float)(v20 * *v18) + v21;
    v23 = v21 + (float)(v20 * v11[v17]);
    v24 = v21 + (float)(v20 * v11[v13]);
    if (a2)
    {
      result = a2(a3, (char *)&v75 + 4, &v75, (char *)&v74 + 4, &v74, v22, v23, v24);
      v6 = *((_DWORD *)this + 117);
      if (v6 <= 0x19 && ((1 << v6) & 0x30A0000) != 0)
      {
LABEL_16:
        v27 = *((float *)this + 120);
        v28 = *((float *)this + 119);
        *(float *)&v75 = (float)(*(float *)&v75 - v27) / v28;
        *((float *)&v75 + 1) = (float)(*((float *)&v75 + 1) - v27) / v28;
        *(float *)&v74 = (float)(*(float *)&v74 - v27) / v28;
        *((float *)&v74 + 1) = (float)(*((float *)&v74 + 1) - v27) / v28;
      }
    }
    else
    {
      result = 0;
      v75 = __PAIR64__(LODWORD(v22), LODWORD(v23));
      *((float *)&v74 + 1) = v24;
      LODWORD(v74) = 1065353216;
      if (v6 <= 0x19 && ((1 << v6) & 0x30A0000) != 0)
        goto LABEL_16;
    }
    if (!(_DWORD)result)
    {
      switch(v6)
      {
        case 0x11u:
          v29 = fminf(*((float *)&v75 + 1) * 255.0, 255.0);
          if ((float)(*((float *)&v75 + 1) * 255.0) >= 0.0)
            v30 = v29;
          else
            v30 = 0.0;
          v31 = fminf(*(float *)&v75 * 255.0, 255.0);
          if ((float)(*(float *)&v75 * 255.0) >= 0.0)
            v32 = v31;
          else
            v32 = 0.0;
          v75 = __PAIR64__(LODWORD(v30), LODWORD(v32));
          v33 = fminf(*((float *)&v74 + 1) * 255.0, 255.0);
          if ((float)(*((float *)&v74 + 1) * 255.0) < 0.0)
            v33 = 0.0;
          *((float *)&v74 + 1) = v33;
          *v14 = (int)v30;
          v14[v73] = (int)*(float *)&v75;
          v14[v9] = (int)*((float *)&v74 + 1);
          v6 = *((_DWORD *)this + 117);
          if (v6 <= 0x15)
            goto LABEL_109;
          goto LABEL_9;
        case 0x13u:
          v35 = fminf(*((float *)&v75 + 1) * 65535.0, 65535.0);
          if ((float)(*((float *)&v75 + 1) * 65535.0) >= 0.0)
            v36 = v35;
          else
            v36 = 0.0;
          v37 = fminf(*(float *)&v75 * 65535.0, 65535.0);
          if ((float)(*(float *)&v75 * 65535.0) >= 0.0)
            v38 = v37;
          else
            v38 = 0.0;
          v75 = __PAIR64__(LODWORD(v36), LODWORD(v38));
          v39 = fminf(*((float *)&v74 + 1) * 65535.0, 65535.0);
          if ((float)(*((float *)&v74 + 1) * 65535.0) < 0.0)
            v39 = 0.0;
          *((float *)&v74 + 1) = v39;
          *(_WORD *)v14 = (int)v36;
          *(_WORD *)&v14[v73] = (int)v38;
          *(_WORD *)&v14[v9] = (int)v39;
          v6 = *((_DWORD *)this + 117);
          if (v6 > 0x15)
            goto LABEL_9;
          goto LABEL_109;
        case 0x14u:
          v40 = *((float *)&v75 + 1);
          v41 = -65536.0;
          if (*((float *)&v75 + 1) < -65536.0)
            v40 = -65536.0;
          v42 = v40 * 1.9259e-34;
          v43 = v40 <= 65536.0;
          v44 = 1.2622e-29;
          if (!v43)
            v42 = 1.2622e-29;
          *(_WORD *)v14 = HIWORD(v42) & 0x8000 | (LODWORD(v42) >> 13) & 0x7FFF;
          v45 = *(float *)&v75;
          if (*(float *)&v75 < -65536.0)
            v45 = -65536.0;
          if (v45 <= 65536.0)
            v46 = v45 * 1.9259e-34;
          else
            v46 = 1.2622e-29;
          *(_WORD *)&v14[v73] = HIWORD(v46) & 0x8000 | (LODWORD(v46) >> 13) & 0x7FFF;
          if (*((float *)&v74 + 1) >= -65536.0)
            v41 = *((float *)&v74 + 1);
          if (v41 <= 65536.0)
            v44 = v41 * 1.9259e-34;
          *(_WORD *)&v14[v9] = HIWORD(v44) & 0x8000 | (LODWORD(v44) >> 13) & 0x7FFF;
          v6 = *((_DWORD *)this + 117);
          if (v6 > 0x15)
            goto LABEL_9;
          goto LABEL_109;
        case 0x15u:
          *(_DWORD *)v14 = HIDWORD(v75);
          *(_DWORD *)&v14[v73] = v75;
          *(_DWORD *)&v14[v9] = HIDWORD(v74);
          v6 = *((_DWORD *)this + 117);
          if (v6 > 0x15)
            goto LABEL_9;
          goto LABEL_109;
        case 0x18u:
          v47 = fminf(*((float *)&v75 + 1) * 255.0, 255.0);
          if ((float)(*((float *)&v75 + 1) * 255.0) >= 0.0)
            v48 = v47;
          else
            v48 = 0.0;
          v49 = fminf(*(float *)&v75 * 255.0, 255.0);
          if ((float)(*(float *)&v75 * 255.0) >= 0.0)
            v50 = v49;
          else
            v50 = 0.0;
          v75 = __PAIR64__(LODWORD(v48), LODWORD(v50));
          v51 = fminf(*((float *)&v74 + 1) * 255.0, 255.0);
          if ((float)(*((float *)&v74 + 1) * 255.0) >= 0.0)
            v52 = v51;
          else
            v52 = 0.0;
          v53 = fminf(*(float *)&v74 * 255.0, 255.0);
          if ((float)(*(float *)&v74 * 255.0) < 0.0)
            v53 = 0.0;
          v74 = __PAIR64__(LODWORD(v52), LODWORD(v53));
          *v14 = (int)v48;
          v14[v73] = (int)*(float *)&v75;
          v14[v9] = (int)*((float *)&v74 + 1);
          v14[v10] = (int)*(float *)&v74;
          v6 = *((_DWORD *)this + 117);
          if (v6 > 0x15)
            goto LABEL_9;
          goto LABEL_109;
        case 0x19u:
          v54 = fminf(*((float *)&v75 + 1) * 65535.0, 65535.0);
          if ((float)(*((float *)&v75 + 1) * 65535.0) >= 0.0)
            v55 = v54;
          else
            v55 = 0.0;
          v56 = fminf(*(float *)&v75 * 65535.0, 65535.0);
          if ((float)(*(float *)&v75 * 65535.0) >= 0.0)
            v57 = v56;
          else
            v57 = 0.0;
          v75 = __PAIR64__(LODWORD(v55), LODWORD(v57));
          v58 = fminf(*((float *)&v74 + 1) * 65535.0, 65535.0);
          if ((float)(*((float *)&v74 + 1) * 65535.0) >= 0.0)
            v59 = v58;
          else
            v59 = 0.0;
          v60 = fminf(*(float *)&v74 * 65535.0, 65535.0);
          if ((float)(*(float *)&v74 * 65535.0) < 0.0)
            v60 = 0.0;
          v74 = __PAIR64__(LODWORD(v59), LODWORD(v60));
          *(_WORD *)v14 = (int)v55;
          *(_WORD *)&v14[v73] = (int)v57;
          *(_WORD *)&v14[v9] = (int)v59;
          *(_WORD *)&v14[v10] = (int)v60;
          v6 = *((_DWORD *)this + 117);
          if (v6 > 0x15)
            goto LABEL_9;
          goto LABEL_109;
        case 0x1Bu:
          v61 = *((float *)&v75 + 1);
          v62 = -65536.0;
          if (*((float *)&v75 + 1) < -65536.0)
            v61 = -65536.0;
          v63 = v61 * 1.9259e-34;
          v43 = v61 <= 65536.0;
          v64 = 1.2622e-29;
          if (!v43)
            v63 = 1.2622e-29;
          *(_WORD *)v14 = HIWORD(v63) & 0x8000 | (LODWORD(v63) >> 13) & 0x7FFF;
          v65 = *(float *)&v75;
          if (*(float *)&v75 < -65536.0)
            v65 = -65536.0;
          if (v65 <= 65536.0)
            v66 = v65 * 1.9259e-34;
          else
            v66 = 1.2622e-29;
          *(_WORD *)&v14[v73] = HIWORD(v66) & 0x8000 | (LODWORD(v66) >> 13) & 0x7FFF;
          v67 = *((float *)&v74 + 1);
          if (*((float *)&v74 + 1) < -65536.0)
            v67 = -65536.0;
          if (v67 <= 65536.0)
            v68 = v67 * 1.9259e-34;
          else
            v68 = 1.2622e-29;
          *(_WORD *)&v14[v9] = HIWORD(v68) & 0x8000 | (LODWORD(v68) >> 13) & 0x7FFF;
          if (*(float *)&v74 >= -65536.0)
            v62 = *(float *)&v74;
          if (v62 <= 65536.0)
            v64 = v62 * 1.9259e-34;
          *(_WORD *)&v14[v10] = HIWORD(v64) & 0x8000 | (LODWORD(v64) >> 13) & 0x7FFF;
          v6 = *((_DWORD *)this + 117);
          if (v6 <= 0x15)
            goto LABEL_109;
          goto LABEL_9;
        default:
          *(_DWORD *)v14 = HIDWORD(v75);
          *(_DWORD *)&v14[v73] = v75;
          *(_DWORD *)&v14[v9] = HIDWORD(v74);
          *(_DWORD *)&v14[v10] = v74;
          v6 = *((_DWORD *)this + 117);
          if (v6 > 0x15)
            goto LABEL_9;
LABEL_109:
          v19 = v10;
          if (((1 << v6) & 0x3A0000) == 0)
LABEL_9:
            v19 = v71;
          v14 += v19;
          ++v16;
          v7 = *((_DWORD *)this + 118);
          v18 += 4;
          if (v16 < v7)
            continue;
          v15 = *((_DWORD *)this + 118);
          v12 = v70 + 1;
          if (v70 + 1 >= v7)
            goto LABEL_114;
          goto LABEL_7;
      }
    }
    return result;
  }
}

uint64_t HGApply3DLUT::SetLUT(uint64_t a1, char *__src, int a3, int a4, int a5, int a6)
{
  char *v6;
  int v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  __int16 *v23;
  uint64_t v24;
  __int16 *v25;
  const float *v26;
  int8x16_t *v27;
  int16x4_t *v28;
  int v29;
  uint64_t v30;
  __int16 *v31;
  const float *v32;
  const float *v33;
  float32x4_t v34;
  float32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  int16x8_t v46;
  int v47;
  int8x16_t v48;
  float32x4_t v49;
  uint32x4_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  int8x8_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  __int16 *v66;
  const float *v67;
  uint64_t v68;
  __int16 *v69;
  const float *v70;
  float32x2_t *v71;
  _WORD *v72;
  int v73;
  uint64_t v74;
  __int16 *v75;
  const float *v76;
  const float *v77;
  float32x4_t v78;
  float32x4_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  uint32x4_t v84;
  uint32x4_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int v88;
  float32x2_t v89;
  uint32x2_t v90;
  int8x8_t v91;
  float v92;
  float v93;
  BOOL v94;
  float v95;
  uint64_t v96;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  float32x4x3_t v103;
  int16x8x3_t v104;
  float32x4x4_t v105;
  float32x4x4_t v106;

  *(_BYTE *)(a1 + 464) = 1;
  if (*(_DWORD *)(a1 + 472) == a3)
  {
    v6 = __src;
    v8 = *(_DWORD *)(a1 + 468);
    v9 = a3;
    switch(v8)
    {
      case 17:
        v9 = 3 * a3;
        if (a6)
          goto LABEL_14;
        goto LABEL_51;
      case 19:
      case 20:
        v9 = 6 * a3;
        if (!a6)
          goto LABEL_51;
        goto LABEL_14;
      case 21:
        v9 = 12 * a3;
        if (!a6)
          goto LABEL_51;
        goto LABEL_14;
      case 24:
        v9 = 4 * a3;
        goto LABEL_13;
      case 25:
      case 27:
        v9 = 8 * a3;
        if (!a6)
          goto LABEL_51;
        goto LABEL_14;
      case 28:
        v9 = 16 * a3;
        if (!a6)
          goto LABEL_51;
        goto LABEL_14;
      default:
LABEL_13:
        if (!a6)
          goto LABEL_51;
LABEL_14:
        if (v8 == a6)
        {
LABEL_51:
          if (a3 >= 1)
          {
            v96 = 0;
            v97 = v9;
            v98 = a4;
            v99 = a5;
            do
            {
              while (a3 <= 0)
              {
                ++v96;
                v6 += v99;
                if (v96 >= a3)
                  return 0;
              }
              v100 = 0;
              v101 = 0;
              v102 = v6;
              do
              {
                memcpy((void *)(*(_QWORD *)(*(_QWORD *)(a1 + 416) + 80)+ v96 * *(_QWORD *)(*(_QWORD *)(a1 + 416) + 64)+ v100), v102, v97);
                ++v101;
                a3 = *(_DWORD *)(a1 + 472);
                v100 += v97;
                v102 += v98;
              }
              while (v101 < a3);
              ++v96;
              v6 += v99;
            }
            while (v96 < a3);
          }
          return 0;
        }
        if (a6 == 28 && v8 == 27)
        {
          if (a3 >= 1)
          {
            v11 = 0;
            v12 = *(_QWORD *)(a1 + 416);
            v13 = *(__int16 **)(v12 + 80);
            v14 = *(_QWORD *)(v12 + 64);
            v15 = a4;
            v16 = a3 & 0xFFFFFFF8;
            v17 = (int8x16_t)vdupq_n_s32(0xC7800000);
            v18 = (float32x4_t)vdupq_n_s32(0x47800000u);
            v19 = (float32x4_t)vdupq_n_s32(0x7800000u);
            v20 = (int8x16_t)vdupq_n_s32(0xF800000u);
            v21.i64[0] = 0x7F0000007FLL;
            v21.i64[1] = 0x7F0000007FLL;
            v22.i64[0] = 0x800000008000;
            v22.i64[1] = 0x800000008000;
            v23 = v13;
            do
            {
              v24 = 0;
              v25 = v23;
              v26 = (const float *)__src;
              do
              {
                v27 = (int8x16_t *)&v6[v11 * a5 + v24 * v15];
                v28 = (int16x4_t *)((char *)v13 + v14 * v11 + v24 * v9);
                if (a3 < 8)
                {
                  v29 = 0;
LABEL_27:
                  v47 = a3 - v29;
                  do
                  {
                    v48 = *v27++;
                    v49 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v17, (float32x4_t)v48), v17, v48);
                    v50 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v49, v18), v20, (int8x16_t)vmulq_f32(v49, v19));
                    *v28++ = vmovn_s32((int32x4_t)vorrq_s8(vandq_s8((int8x16_t)vshlq_u32(v50, (uint32x4_t)xmmword_1B3523D30), (int8x16_t)xmmword_1B3523D40), vandq_s8((int8x16_t)vshlq_u32(v50, (uint32x4_t)xmmword_1B3523D50), (int8x16_t)xmmword_1B3523D60)));
                    --v47;
                  }
                  while (v47);
                  goto LABEL_21;
                }
                v28 += v16;
                v27 += v16;
                v30 = a3 & 0xFFFFFFF8;
                v31 = v25;
                v32 = v26;
                do
                {
                  v33 = v32;
                  v105 = vld4q_f32(v33);
                  v33 += 16;
                  v34 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v17, v105.val[0]), v17, (int8x16_t)v105.val[0]);
                  v106 = vld4q_f32(v33);
                  v35 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v17, v106.val[0]), v17, (int8x16_t)v106.val[0]);
                  v36 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v35, v18), v20, (int8x16_t)vmulq_f32(v35, v19));
                  v37 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v34, v18), v20, (int8x16_t)vmulq_f32(v34, v19));
                  v38 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v17, v106.val[1]), v17, (int8x16_t)v106.val[1]);
                  v39 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v17, v105.val[1]), v17, (int8x16_t)v105.val[1]);
                  v40 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v38, v18), v20, (int8x16_t)vmulq_f32(v38, v19));
                  v41 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v39, v18), v20, (int8x16_t)vmulq_f32(v39, v19));
                  v42 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v17, v106.val[2]), v17, (int8x16_t)v106.val[2]);
                  v43 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v17, v105.val[2]), v17, (int8x16_t)v105.val[2]);
                  v44 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v42, v18), v20, (int8x16_t)vmulq_f32(v42, v19));
                  v45 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v43, v18), v20, (int8x16_t)vmulq_f32(v43, v19));
                  v106.val[0] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v17, v106.val[3]), v17, (int8x16_t)v106.val[3]);
                  v105.val[0] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v17, v105.val[3]), v17, (int8x16_t)v105.val[3]);
                  v106.val[1] = (float32x4_t)vuzp1q_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v37, 0xDuLL), v21), vandq_s8((int8x16_t)vshrq_n_u32(v37, 0x10uLL), v22)), (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v36, 0xDuLL), v21), vandq_s8((int8x16_t)vshrq_n_u32(v36, 0x10uLL), v22)));
                  v105.val[2] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v106.val[0], v18), v20, (int8x16_t)vmulq_f32(v106.val[0], v19));
                  v105.val[0] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v105.val[0], v18), v20, (int8x16_t)vmulq_f32(v105.val[0], v19));
                  v106.val[2] = (float32x4_t)vuzp1q_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v41, 0xDuLL), v21), vandq_s8((int8x16_t)vshrq_n_u32(v41, 0x10uLL), v22)), (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v40, 0xDuLL), v21), vandq_s8((int8x16_t)vshrq_n_u32(v40, 0x10uLL), v22)));
                  v106.val[3] = (float32x4_t)vuzp1q_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v45, 0xDuLL), v21), vandq_s8((int8x16_t)vshrq_n_u32(v45, 0x10uLL), v22)), (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v44, 0xDuLL), v21), vandq_s8((int8x16_t)vshrq_n_u32(v44, 0x10uLL), v22)));
                  v46 = vuzp1q_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v105.val[0], 0xDuLL), v21), vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v105.val[0], 0x10uLL), v22)), (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v105.val[2], 0xDuLL), v21), vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v105.val[2], 0x10uLL), v22)));
                  vst4q_s16(v31, *(int16x8x4_t *)((char *)&v106 + 16));
                  v31 += 32;
                  v32 += 32;
                  v30 -= 8;
                }
                while (v30);
                v29 = a3 & 0x7FFFFFF8;
                if (v16 != a3)
                  goto LABEL_27;
LABEL_21:
                ++v24;
                v26 = (const float *)((char *)v26 + v15);
                v25 = (__int16 *)((char *)v25 + v9);
              }
              while (v24 != a3);
              ++v11;
              __src += a5;
              v23 = (__int16 *)((char *)v23 + v14);
            }
            while (v11 != a3);
          }
          return 0;
        }
        result = 0xFFFFFFFFLL;
        if (a6 != 21 || v8 != 20)
          return result;
        if (a3 <= 0)
          return 0;
        v51 = 0;
        v52 = *(_QWORD *)(a1 + 416);
        v53 = *(__int16 **)(v52 + 80);
        v54 = *(_QWORD *)(v52 + 64);
        v55 = a3 & 0xFFFFFFF8;
        v56 = (float32x2_t)vdup_n_s32(0xC7800000);
        v57 = (float32x2_t)vdup_n_s32(0x47800000u);
        v58 = (float32x2_t)vdup_n_s32(0x7800000u);
        v59 = (int8x8_t)vdup_n_s32(0xF800000u);
        v60 = (int8x16_t)vdupq_n_s32(0xC7800000);
        v61 = (float32x4_t)vdupq_n_s32(0x47800000u);
        v62 = (float32x4_t)vdupq_n_s32(0x7800000u);
        v63 = (int8x16_t)vdupq_n_s32(0xF800000u);
        v64.i64[0] = 0x7F0000007FLL;
        v64.i64[1] = 0x7F0000007FLL;
        v65.i64[0] = 0x800000008000;
        v65.i64[1] = 0x800000008000;
        v66 = v53;
        v67 = (const float *)__src;
LABEL_35:
        v68 = 0;
        v69 = v66;
        v70 = v67;
        break;
    }
    while (1)
    {
      v71 = (float32x2_t *)&__src[v51 * a5 + v68 * a4];
      v72 = (__int16 *)((char *)v53 + v54 * v51 + v68 * v9);
      if (a3 < 8)
        break;
      v72 += 3 * v55;
      v71 = (float32x2_t *)((char *)v71 + 12 * v55);
      v74 = a3 & 0xFFFFFFF8;
      v75 = v69;
      v76 = v70;
      do
      {
        v77 = v76;
        v103 = vld3q_f32(v77);
        v77 += 12;
        v78 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v60, v103.val[0]), v60, (int8x16_t)v103.val[0]);
        v104 = (int16x8x3_t)vld3q_f32(v77);
        v79 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v60, (float32x4_t)v104.val[0]), v60, (int8x16_t)v104.val[0]);
        v80 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v78, v61), v63, (int8x16_t)vmulq_f32(v78, v62));
        v81 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v79, v61), v63, (int8x16_t)vmulq_f32(v79, v62));
        v82 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v60, (float32x4_t)v104.val[1]), v60, (int8x16_t)v104.val[1]);
        v83 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v60, v103.val[1]), v60, (int8x16_t)v103.val[1]);
        v84 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v82, v61), v63, (int8x16_t)vmulq_f32(v82, v62));
        v85 = (uint32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v83, v61), v63, (int8x16_t)vmulq_f32(v83, v62));
        v104.val[0] = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v60, (float32x4_t)v104.val[2]), v60, (int8x16_t)v104.val[2]);
        v103.val[0] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v60, v103.val[2]), v60, (int8x16_t)v103.val[2]);
        v103.val[2] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v104.val[0], v61), v63, (int8x16_t)vmulq_f32((float32x4_t)v104.val[0], v62));
        v103.val[0] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v103.val[0], v61), v63, (int8x16_t)vmulq_f32(v103.val[0], v62));
        v86 = vuzp1q_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v80, 0xDuLL), v64), vandq_s8((int8x16_t)vshrq_n_u32(v80, 0x10uLL), v65)), (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v81, 0xDuLL), v64), vandq_s8((int8x16_t)vshrq_n_u32(v81, 0x10uLL), v65)));
        v87 = vuzp1q_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v85, 0xDuLL), v64), vandq_s8((int8x16_t)vshrq_n_u32(v85, 0x10uLL), v65)), (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v84, 0xDuLL), v64), vandq_s8((int8x16_t)vshrq_n_u32(v84, 0x10uLL), v65)));
        v104.val[0] = vuzp1q_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v103.val[0], 0xDuLL), v64), vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v103.val[0], 0x10uLL), v65)), (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v103.val[2], 0xDuLL), v64), vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v103.val[2], 0x10uLL), v65)));
        vst3q_s16(v75, v104);
        v75 += 24;
        v76 += 24;
        v74 -= 8;
      }
      while (v74);
      v73 = a3 & 0x7FFFFFF8;
      if (v55 != a3)
        goto LABEL_42;
LABEL_36:
      ++v68;
      v70 = (const float *)((char *)v70 + a4);
      v69 = (__int16 *)((char *)v69 + v9);
      if (v68 == a3)
      {
        ++v51;
        v67 = (const float *)((char *)v67 + a5);
        v66 = (__int16 *)((char *)v66 + v54);
        if (v51 == a3)
          return 0;
        goto LABEL_35;
      }
    }
    v73 = 0;
LABEL_42:
    v88 = a3 - v73;
    do
    {
      v89 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v56, *v71), (int8x8_t)v56, (int8x8_t)*v71);
      v90 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v89, v57), v59, (int8x8_t)vmul_f32(v89, v58));
      v91 = vorr_s8(vand_s8((int8x8_t)vshl_u32(v90, (uint32x2_t)0xFFFFFFF3FFFFFFF0), (int8x8_t)0x7FFF00008000), vand_s8((int8x8_t)vshl_u32(v90, (uint32x2_t)0xFFFFFFF0FFFFFFF3), (int8x8_t)0x800000007FFFLL));
      v72[1] = v91.i16[2];
      *v72 = v91.i16[0];
      v92 = v71[1].f32[0];
      if (v92 < -65536.0)
        v92 = -65536.0;
      v93 = v92 * 1.9259e-34;
      v94 = v92 <= 65536.0;
      v95 = 1.2622e-29;
      if (v94)
        v95 = v93;
      v72[2] = HIWORD(v95) & 0x8000 | (LODWORD(v95) >> 13) & 0x7FFF;
      v71 = (float32x2_t *)((char *)v71 + 12);
      v72 += 3;
      --v88;
    }
    while (v88);
    goto LABEL_36;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HGApply3DLUT::SetLUTBitmap(HGRect *this, HGBitmap *a2)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  HGBitmap *v8;

  if (!a2)
    return 0xFFFFFFFFLL;
  if (!HGRect::IsEqual((HGRect *)((char *)a2 + 20), this[27]))
    return 0xFFFFFFFFLL;
  v4 = *((_DWORD *)a2 + 4);
  v5 = v4 > 0x1C;
  v6 = (1 << v4) & 0x1B3A0000;
  if (v5 || v6 == 0)
    return 0xFFFFFFFFLL;
  v8 = *(HGBitmap **)&this[26].var0;
  if (v8 != a2)
  {
    LOBYTE(this[29].var0) = 1;
    if (v8)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v8 + 24))(v8);
    *(_QWORD *)&this[26].var0 = a2;
    (*(void (**)(HGBitmap *))(*(_QWORD *)a2 + 16))(a2);
  }
  return 0;
}

uint64_t HGApply3DLUT::GetOutput(HGNode *this, HGRenderer *a2)
{
  uint64_t v4;
  HGNode *Input;
  uint64_t v6;
  HGNode *v7;
  HGBitmapLoader *v9;

  v4 = *((_QWORD *)this + 51);
  Input = HGRenderer::GetInput(a2, this, 0);
  (*(void (**)(uint64_t, _QWORD, HGNode *))(*(_QWORD *)v4 + 120))(v4, 0, Input);
  if (HGRenderer::GetInput(a2, this, 1u))
  {
    v6 = *((_QWORD *)this + 51);
    v7 = HGRenderer::GetInput(a2, this, 1u);
    (*(void (**)(uint64_t, uint64_t, HGNode *))(*(_QWORD *)v6 + 120))(v6, 1, v7);
    return *((_QWORD *)this + 51);
  }
  if (!*((_BYTE *)this + 464))
    return *((_QWORD *)this + 51);
  *((_BYTE *)this + 464) = 0;
  v9 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v9, *((HGBitmap **)this + 52));
  (*(void (**)(_QWORD, uint64_t, HGBitmapLoader *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 1, v9);
  (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v9 + 24))(v9);
  return *((_QWORD *)this + 51);
}

void sub_1B2ABC33C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HgcApply3DLUTTrilinearUniform::~HgcApply3DLUTTrilinearUniform(HGNode *this)
{
  void *v1;

  HgcApply3DLUTTrilinearUniform_basekernel::~HgcApply3DLUTTrilinearUniform_basekernel(this);
  HGObject::operator delete(v1);
}

uint64_t HgcApply3DLUTTrilinearUniform::GetDOD(HgcApply3DLUTTrilinearUniform *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcApply3DLUTTrilinearUniform::GetROI(HgcApply3DLUTTrilinearUniform *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)&a4.var0;
  result = HGRectMake4i(0, 0, *((_DWORD *)this + 104) * *((_DWORD *)this + 104) + 1, *((_DWORD *)this + 104) + 1);
  if (a3 != 1)
  {
    if (a3)
      return 0;
    else
      return v4;
  }
  return result;
}

void HgcApply3DLUTTrilinearFast::~HgcApply3DLUTTrilinearFast(HGNode *this)
{
  void *v1;

  HgcApply3DLUTTrilinearFast_basekernel::~HgcApply3DLUTTrilinearFast_basekernel(this);
  HGObject::operator delete(v1);
}

uint64_t HgcApply3DLUTTrilinearFast::GetDOD(HgcApply3DLUTTrilinearFast *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcApply3DLUTTrilinearFast::GetROI(HgcApply3DLUTTrilinearFast *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)&a4.var0;
  result = HGRectMake4i(0, 0, *((_DWORD *)this + 104) * *((_DWORD *)this + 104) + 1, *((_DWORD *)this + 104) + 1);
  if (a3 != 1)
  {
    if (a3)
      return 0;
    else
      return v4;
  }
  return result;
}

void HgcApply3DLUTTrilinear::~HgcApply3DLUTTrilinear(HGNode *this)
{
  void *v1;

  HgcApply3DLUTTrilinear_basekernel::~HgcApply3DLUTTrilinear_basekernel(this);
  HGObject::operator delete(v1);
}

uint64_t HgcApply3DLUTTrilinear::GetDOD(HgcApply3DLUTTrilinear *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcApply3DLUTTrilinear::GetROI(HgcApply3DLUTTrilinear *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)&a4.var0;
  v7 = HGRectMake4i(0, 0, *((_DWORD *)this + 104) * *((_DWORD *)this + 104) + 1, *((_DWORD *)this + 104) + 1);
  v8 = HGRectMake4i(0, 0, *((_DWORD *)this + 104), 1u);
  if (a3 == 2)
    return v8;
  if (a3 != 1)
  {
    if (a3)
      return 0;
    else
      return v4;
  }
  return v7;
}

void HgcApply3DLUTTetrahedralUniform::~HgcApply3DLUTTetrahedralUniform(HGNode *this)
{
  void *v1;

  HgcApply3DLUTTetrahedralUniform_basekernel::~HgcApply3DLUTTetrahedralUniform_basekernel(this);
  HGObject::operator delete(v1);
}

uint64_t HgcApply3DLUTTetrahedralUniform::GetDOD(HgcApply3DLUTTetrahedralUniform *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcApply3DLUTTetrahedralUniform::GetROI(HgcApply3DLUTTetrahedralUniform *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)&a4.var0;
  result = HGRectMake4i(0, 0, *((_DWORD *)this + 104) * *((_DWORD *)this + 104) + 1, *((_DWORD *)this + 104) + 1);
  if (a3 != 1)
  {
    if (a3)
      return 0;
    else
      return v4;
  }
  return result;
}

void HgcApply3DLUTTetrahedralFast::~HgcApply3DLUTTetrahedralFast(HGNode *this)
{
  void *v1;

  HgcApply3DLUTTetrahedralFast_basekernel::~HgcApply3DLUTTetrahedralFast_basekernel(this);
  HGObject::operator delete(v1);
}

uint64_t HgcApply3DLUTTetrahedralFast::GetDOD(HgcApply3DLUTTetrahedralFast *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcApply3DLUTTetrahedralFast::GetROI(HgcApply3DLUTTetrahedralFast *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)&a4.var0;
  result = HGRectMake4i(0, 0, *((_DWORD *)this + 104) * *((_DWORD *)this + 104) + 1, *((_DWORD *)this + 104) + 1);
  if (a3 != 1)
  {
    if (a3)
      return 0;
    else
      return v4;
  }
  return result;
}

void HgcApply3DLUTTetrahedral::~HgcApply3DLUTTetrahedral(HGNode *this)
{
  void *v1;

  HgcApply3DLUTTetrahedral_basekernel::~HgcApply3DLUTTetrahedral_basekernel(this);
  HGObject::operator delete(v1);
}

uint64_t HgcApply3DLUTTetrahedral::GetDOD(HgcApply3DLUTTetrahedral *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcApply3DLUTTetrahedral::GetROI(HgcApply3DLUTTetrahedral *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)&a4.var0;
  v7 = HGRectMake4i(0, 0, *((_DWORD *)this + 104) * *((_DWORD *)this + 104) + 1, *((_DWORD *)this + 104) + 1);
  v8 = HGRectMake4i(0, 0, *((_DWORD *)this + 104), 1u);
  if (a3 == 2)
    return v8;
  if (a3 != 1)
  {
    if (a3)
      return 0;
    else
      return v4;
  }
  return v7;
}

void HGStorage3DLUT::~HGStorage3DLUT(HGStorage3DLUT *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E652BD38;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x1B5E2914C](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  HGObject::~HGObject(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E652BD38;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x1B5E2914C](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  HGObject::~HGObject(this);
  HGObject::operator delete(v3);
}

void HGMetalTexture::~HGMetalTexture(HGMetalTexture *this)
{
  std::mutex *v2;
  std::mutex *m;
  uint64_t *v4;
  void *v5;
  std::unique_lock<std::mutex> v6;

  *(_QWORD *)this = off_1E652BD88;
  v2 = (std::mutex *)((char *)this + 176);
  v6.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 176);
  v6.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 176));
  m = v2;
  if (!*((_BYTE *)this + 171))
    goto LABEL_5;
  do
    std::condition_variable::wait((std::condition_variable *)this + 5, &v6);
  while (*((_BYTE *)this + 171));
  if (v6.__owns_)
  {
    m = v6.__m_;
LABEL_5:
    std::mutex::unlock(m);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 16);
  if (v4)
    HGMetalTexturePool::releaseTexture(v4, *((_QWORD *)this + 18));
  else

  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  std::condition_variable::~condition_variable((std::condition_variable *)this + 5);
  std::mutex::~mutex(v2);
  HGBitmap::~HGBitmap((HGBitmap *)this, v5);
}

{
  void *v1;

  HGMetalTexture::~HGMetalTexture(this);
  HGObject::operator delete(v1);
}

void HGMetalTexture::WaitForCopy(HGMetalTexture *this)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 176);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 176));
  if (!*((_BYTE *)this + 171))
    goto LABEL_4;
  do
    std::condition_variable::wait((std::condition_variable *)this + 5, &v2);
  while (*((_BYTE *)this + 171));
  if (v2.__owns_)
LABEL_4:
    std::mutex::unlock(v2.__m_);
}

void *HGMetalTexture::hasComputeUsage(HGMetalTexture *this)
{
  void *result;

  result = (void *)*((_QWORD *)this + 18);
  if (result)
    return (void *)(((unint64_t)objc_msgSend(result, "usage") >> 1) & 1);
  return result;
}

uint64_t HGMetalTexture::GetTextureRect(HGMetalTexture *this)
{
  _BOOL4 IsZero;
  uint64_t v3;

  IsZero = HGRect::IsZero((HGRect *)((char *)this + 152));
  v3 = 152;
  if (IsZero)
    v3 = 20;
  return *(_QWORD *)((char *)this + v3);
}

void HGMetalTexture::CopyManagedTextureData(HGMetalTexture *this, HGBitmap *a2, HGRect a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BOOL4 IsZero;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  unsigned __int8 v26;
  _QWORD v27[6];
  int v28;
  _BYTE v29[16];
  HGRect v30;

  v3 = *(_QWORD *)&a3.var2;
  v4 = *(_QWORD *)&a3.var0;
  v7 = (void *)*((_QWORD *)this + 18);
  if (v7 && objc_msgSend(v7, "storageMode") == 2)
  {
    v8 = "HGMetalTexture::CopyTextureData failed. Texture has private storage.";
LABEL_17:
    HGLogger::warning((HGLogger *)v8, (const char *)a2, *(char **)&a3.var0);
    return;
  }
  if (!a2 || !*((_QWORD *)a2 + 10))
  {
    v8 = "HGMetalTexture::ReplaceManagedTextureData failed. No destination data.";
    goto LABEL_17;
  }
  v9 = HGRectIntersection(*(_QWORD *)((char *)this + 20), *(_QWORD *)((char *)this + 28), *(_QWORD *)((char *)a2 + 20), *(_QWORD *)((char *)a2 + 28));
  *(_QWORD *)&v30.var0 = HGRectIntersection(v9, v10, v4, v3);
  *(_QWORD *)&v30.var2 = v11;
  if (!HGRect::IsNull(&v30))
  {
    HGTraceGuard::HGTraceGuard((HGTraceGuard *)v29, "metal_osx", 1, "HGMetalTexture::CopyManagedTextureData()");
    v28 = 4612;
    kdebug_trace();
    v12 = HGBitmap::byteOffset(a2, v30.var0, v30.var1);
    v13 = *((_QWORD *)a2 + 10);
    v14 = HGFormatUtils::collapseRectForFormat((uint64_t *)&v30.var0, *((_DWORD *)this + 4));
    v16 = v15;
    if (HGRect::IsZero((HGRect *)((char *)this + 152)))
      v17 = (char *)this + 20;
    else
      v17 = (char *)this + 152;
    v18 = *(_QWORD *)v17;
    IsZero = HGRect::IsZero((HGRect *)((char *)this + 152));
    v20 = 152;
    if (IsZero)
      v20 = 20;
    v21 = (void *)*((_QWORD *)this + 18);
    v22 = *((_QWORD *)a2 + 8);
    v23 = (HIDWORD(v14) - *(_DWORD *)((char *)this + v20 + 4));
    v27[0] = (v14 - v18);
    v27[1] = v23;
    v27[2] = 0;
    v27[3] = (v16 - v14);
    v27[4] = (HIDWORD(v16) - HIDWORD(v14));
    v27[5] = 1;
    objc_msgSend(v21, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v13 + v12, v22, v27, 0);
    v26 = atomic_load(HGLogger::_enabled);
    if ((v26 & 1) != 0)
      HGLogger::log((HGLogger *)"mtl_perf_validation", (const char *)1, (HGLogger *)"HGMTL PERF WARNING - MTLTexture.getBytes: slow download from managed texture (prefer a BlitEncoder)\n", v24, v25);
    kdebug_trace();
    HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v29);
  }
}

void sub_1B2ABCC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, __int16 a18, char a19)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a17);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a19);
  _Unwind_Resume(a1);
}

void HGMetalTexture::ReplaceManagedTextureData(HGMetalTexture *this, HGBitmap *a2, HGRect a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  _BOOL4 IsZero;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *global_queue;
  const char *v30;
  char *v31;
  void *v32;
  unsigned __int8 v33;
  _QWORD v34[6];
  int v35;
  _QWORD block[13];
  _BYTE v37[16];
  HGRect v38;

  v5 = *(_QWORD *)&a3.var2;
  v6 = *(_QWORD *)&a3.var0;
  v9 = (void *)*((_QWORD *)this + 18);
  if (v9 && objc_msgSend(v9, "storageMode") == 2)
  {
    v10 = "HGMetalTexture::ReplaceManagedTextureData failed. Texture has private storage.";
LABEL_16:
    HGLogger::warning((HGLogger *)v10, (const char *)a2, *(char **)&a3.var0);
    return;
  }
  if (!a2 || !*((_QWORD *)a2 + 10))
  {
    v10 = "HGMetalTexture::ReplaceManagedTextureData failed. No source data.";
    goto LABEL_16;
  }
  v11 = HGRectIntersection(*(_QWORD *)((char *)this + 20), *(_QWORD *)((char *)this + 28), *(_QWORD *)((char *)a2 + 20), *(_QWORD *)((char *)a2 + 28));
  *(_QWORD *)&v38.var0 = HGRectIntersection(v11, v12, v6, v5);
  *(_QWORD *)&v38.var2 = v13;
  if (!HGRect::IsNull(&v38))
  {
    HGTraceGuard::HGTraceGuard((HGTraceGuard *)v37, "metal_osx", 1, "HGMetalTexture::ReplaceManagedTextureData()");
    v14 = HGBitmap::byteOffset(a2, v38.var0, v38.var1);
    v15 = *((_QWORD *)a2 + 10);
    v16 = HGFormatUtils::collapseRectForFormat((uint64_t *)&v38.var0, *((_DWORD *)this + 4));
    v18 = v17;
    if (HGRect::IsZero((HGRect *)((char *)this + 152)))
      v19 = (char *)this + 20;
    else
      v19 = (char *)this + 152;
    v20 = *(_DWORD *)v19;
    IsZero = HGRect::IsZero((HGRect *)((char *)this + 152));
    v22 = v15 + v14;
    v23 = HIDWORD(v16);
    v24 = (v16 - v20);
    if (IsZero)
      v25 = (char *)this + 20;
    else
      v25 = (char *)this + 152;
    v26 = (HIDWORD(v16) - *((_DWORD *)v25 + 1));
    v27 = (v18 - v16);
    v28 = (HIDWORD(v18) - v23);
    if (a4)
    {
      HGBitmap::SetStorage((HGBitmap *)this, (HGObject *)a2);
      std::mutex::lock((std::mutex *)((char *)this + 176));
      *((_BYTE *)this + 171) = 1;
      std::condition_variable::notify_all((std::condition_variable *)this + 5);
      std::mutex::unlock((std::mutex *)((char *)this + 176));
      global_queue = dispatch_get_global_queue(2, 0);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZN14HGMetalTexture25ReplaceManagedTextureDataEP8HGBitmap6HGRectb_block_invoke;
      block[3] = &__block_descriptor_104_e5_v8__0l;
      block[4] = this;
      block[5] = v24;
      block[6] = v26;
      block[7] = 0;
      block[8] = v27;
      block[9] = v28;
      block[10] = 1;
      block[11] = v22;
      block[12] = a2;
      dispatch_async(global_queue, block);
    }
    else
    {
      v35 = 4614;
      kdebug_trace();
      v32 = (void *)*((_QWORD *)this + 18);
      v34[0] = v24;
      v34[1] = v26;
      v34[2] = 0;
      v34[3] = v27;
      v34[4] = v28;
      v34[5] = 1;
      objc_msgSend(v32, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", v34, 0, v22, *((_QWORD *)a2 + 8));
      kdebug_trace();
    }
    v33 = atomic_load(HGLogger::_enabled);
    if ((v33 & 1) != 0)
      HGLogger::log((HGLogger *)"mtl_perf_validation", (const char *)1, (HGLogger *)"HGMTL PERF WARNING - MTLTexture.replaceRegion: slow upload into managed texture (%d x %d) (data is probably not page-aligned)\n", v30, v31, (*((_DWORD *)a2 + 7) - *((_DWORD *)a2 + 5)), (*((_DWORD *)a2 + 8) - *((_DWORD *)a2 + 6)));
    HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v37);
  }
}

void sub_1B2ABCF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  uint64_t v19;

  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a19);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v19 - 120));
  _Unwind_Resume(a1);
}

void sub_1B2ABCF34(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1B2ABCF48(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1B2ABCF5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1B2ABCF70(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1B2ABCF84(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1B2ABCF98(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HGMetalTexture25ReplaceManagedTextureDataEP8HGBitmap6HGRectb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  _OWORD v6[3];
  int v7;

  v2 = *(_QWORD *)(a1 + 32);
  v7 = 4614;
  kdebug_trace();
  v3 = *(void **)(v2 + 144);
  v4 = *(_OWORD *)(a1 + 56);
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v4;
  v6[2] = *(_OWORD *)(a1 + 72);
  objc_msgSend(v3, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", v6, 0, *(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 64));
  std::mutex::lock((std::mutex *)(v2 + 176));
  *(_BYTE *)(v2 + 171) = 0;
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 240));
  std::mutex::unlock((std::mutex *)(v2 + 176));
  return kdebug_trace();
}

void sub_1B2ABD064(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)(v1 - 20));
  _Unwind_Resume(a1);
}

void HGMetalTexture::InitializeBorders(HGMetalTexture *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  HGMetalUtils *v68;
  int v69;
  unint64_t *v70;
  void *v71;
  void *v72;
  int32x2_t *v73;
  char *v74;
  int32x2_t v75;
  int32x2_t v76;
  __int128 v77;
  void *v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int32x2_t v85;
  _QWORD v86[3];
  __int128 v87;
  uint64_t v88;
  int v89;
  void *__p;
  char *v91;
  unint64_t v92;
  _BYTE v93[24];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v93, "metal_osx", 1, "HGMetalTexture::InitializeBorders()");
  v2 = HGFormatUtils::collapseRectForFormat((uint64_t *)((char *)this + 20), *((_DWORD *)this + 4));
  v4 = v3;
  if (HGRect::IsZero((HGRect *)((char *)this + 152)))
    v5 = (uint64_t *)((char *)this + 20);
  else
    v5 = (uint64_t *)((char *)this + 152);
  v6 = *v5;
  v7 = v5[1];
  if (HGRectIsEqual(v2, v4, *v5, v7))
    goto LABEL_86;
  __p = 0;
  v91 = 0;
  v92 = 0;
  v84 = HIDWORD(v2);
  if (SHIDWORD(v6) >= SHIDWORD(v2))
  {
    v12 = 0;
    v13 = HIDWORD(v7);
    v14 = HIDWORD(v4);
    v82 = HIDWORD(v4);
    if (SHIDWORD(v7) > SHIDWORD(v4))
      goto LABEL_22;
LABEL_8:
    if ((int)v6 < (int)v2)
      goto LABEL_42;
    goto LABEL_9;
  }
  v8 = HGRectMake4i(v6, HIDWORD(v6), v7, HIDWORD(v2));
  v10 = v8;
  v11 = v9;
  v15 = (v91 - (_BYTE *)__p) >> 4;
  v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v17 = v92 - (_QWORD)__p;
  if ((uint64_t)(v92 - (_QWORD)__p) >> 3 > v16)
    v16 = v17 >> 3;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
    v18 = 0xFFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
  {
    v83 = v8;
    if (v18 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v19 = (char *)operator new(16 * v18);
    v10 = v83;
    v20 = (uint64_t *)&v19[16 * ((v91 - (_BYTE *)__p) >> 4)];
    v21 = &v19[16 * v18];
    *v20 = v83;
    v20[1] = v11;
    v22 = (uint64_t)(v20 + 2);
  }
  else
  {
    v20 = (uint64_t *)(16 * v15);
    v21 = 0;
    *v20 = v8;
    v20[1] = v9;
    v22 = 16 * v15 + 16;
  }
  __p = v20;
  v92 = (unint64_t)v21;
  v91 = (char *)v22;
  v12 = (HIDWORD(v11) - HIDWORD(v10)) * (v11 - v10);
  v13 = HIDWORD(v7);
  v14 = HIDWORD(v4);
  v82 = HIDWORD(v4);
  if (SHIDWORD(v7) <= SHIDWORD(v4))
    goto LABEL_8;
LABEL_22:
  v80 = v12;
  v23 = HGRectMake4i(v6, v14, v7, v13);
  v25 = v23;
  v26 = v24;
  v27 = v91;
  if ((unint64_t)v91 < v92)
  {
    *(_QWORD *)v91 = v23;
    *((_QWORD *)v27 + 1) = v24;
    v28 = (uint64_t)(v27 + 16);
    goto LABEL_39;
  }
  v29 = (char *)__p;
  v30 = (v91 - (_BYTE *)__p) >> 4;
  v31 = v30 + 1;
  if ((unint64_t)(v30 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v32 = v92 - (_QWORD)__p;
  if ((uint64_t)(v92 - (_QWORD)__p) >> 3 > v31)
    v31 = v32 >> 3;
  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
    v33 = 0xFFFFFFFFFFFFFFFLL;
  else
    v33 = v31;
  if (v33)
  {
    v79 = v23;
    if (v33 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v34 = (char *)operator new(16 * v33);
    v25 = v79;
    v35 = (uint64_t *)&v34[16 * ((v91 - (_BYTE *)__p) >> 4)];
    v36 = &v34[16 * v33];
    *v35 = v79;
    v35[1] = v26;
    v28 = (uint64_t)(v35 + 2);
    if (v27 == v29)
      goto LABEL_37;
  }
  else
  {
    v35 = (uint64_t *)(16 * v30);
    v36 = 0;
    *v35 = v23;
    v35[1] = v24;
    v28 = 16 * v30 + 16;
    if (v27 == v29)
      goto LABEL_37;
  }
  do
  {
    *((_OWORD *)v35 - 1) = *((_OWORD *)v27 - 1);
    v35 -= 2;
    v27 -= 16;
  }
  while (v27 != v29);
  v27 = (char *)__p;
LABEL_37:
  __p = v35;
  v91 = (char *)v28;
  v92 = (unint64_t)v36;
  v12 = v80;
  if (v27)
  {
    v37 = v27;
    v38 = v25;
    operator delete(v37);
    v25 = v38;
  }
LABEL_39:
  LODWORD(v14) = v82;
  v91 = (char *)v28;
  if (v12 <= (HIDWORD(v26) - HIDWORD(v25)) * ((int)v26 - (int)v25))
    v12 = (HIDWORD(v26) - HIDWORD(v25)) * (v26 - v25);
  if ((int)v6 < (int)v2)
  {
LABEL_42:
    v81 = v12;
    v39 = HGRectMake4i(v6, HIDWORD(v2), v2, v14);
    v41 = v39;
    v42 = v40;
    v43 = v91;
    if ((unint64_t)v91 < v92)
    {
      *(_QWORD *)v91 = v39;
      v43[1] = v40;
      v44 = (uint64_t)(v43 + 2);
      goto LABEL_59;
    }
    v45 = __p;
    v46 = (v91 - (_BYTE *)__p) >> 4;
    v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v48 = v92 - (_QWORD)__p;
    if ((uint64_t)(v92 - (_QWORD)__p) >> 3 > v47)
      v47 = v48 >> 3;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
      v49 = 0xFFFFFFFFFFFFFFFLL;
    else
      v49 = v47;
    if (v49)
    {
      if (v49 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v50 = (char *)operator new(16 * v49);
      v51 = (uint64_t *)&v50[16 * ((v91 - (_BYTE *)__p) >> 4)];
      v52 = &v50[16 * v49];
      *v51 = v41;
      v51[1] = v42;
      v44 = (uint64_t)(v51 + 2);
      if (v43 == v45)
        goto LABEL_57;
    }
    else
    {
      v51 = (uint64_t *)(16 * v46);
      v52 = 0;
      *v51 = v39;
      v51[1] = v40;
      v44 = 16 * v46 + 16;
      if (v43 == v45)
        goto LABEL_57;
    }
    do
    {
      *((_OWORD *)v51 - 1) = *((_OWORD *)v43 - 1);
      v51 -= 2;
      v43 -= 2;
    }
    while (v43 != v45);
    v43 = __p;
LABEL_57:
    __p = v51;
    v91 = (char *)v44;
    v92 = (unint64_t)v52;
    v12 = v81;
    if (v43)
      operator delete(v43);
LABEL_59:
    LODWORD(v14) = v82;
    v91 = (char *)v44;
    if (v12 <= (HIDWORD(v42) - HIDWORD(v41)) * ((int)v42 - (int)v41))
      v12 = (HIDWORD(v42) - HIDWORD(v41)) * (v42 - v41);
    if ((int)v7 <= (int)v4)
      goto LABEL_82;
LABEL_62:
    v53 = v12;
    v54 = HGRectMake4i(v4, v84, v7, v14);
    v56 = v54;
    v57 = v55;
    v58 = v91;
    if ((unint64_t)v91 < v92)
    {
      *(_QWORD *)v91 = v54;
      v58[1] = v55;
      v59 = (uint64_t)(v58 + 2);
LABEL_79:
      v91 = (char *)v59;
      if (v53 <= (HIDWORD(v57) - HIDWORD(v56)) * ((int)v57 - (int)v56))
        v12 = (HIDWORD(v57) - HIDWORD(v56)) * (v57 - v56);
      else
        v12 = v53;
      goto LABEL_82;
    }
    v60 = __p;
    v61 = (v91 - (_BYTE *)__p) >> 4;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v63 = v92 - (_QWORD)__p;
    if ((uint64_t)(v92 - (_QWORD)__p) >> 3 > v62)
      v62 = v63 >> 3;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
      v64 = 0xFFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    if (v64)
    {
      if (v64 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v65 = (char *)operator new(16 * v64);
      v66 = (uint64_t *)&v65[16 * v61];
      v67 = &v65[16 * v64];
      *v66 = v56;
      v66[1] = v57;
      v59 = (uint64_t)(v66 + 2);
      if (v58 == v60)
        goto LABEL_77;
    }
    else
    {
      v66 = (uint64_t *)(16 * v61);
      v67 = 0;
      *v66 = v54;
      v66[1] = v55;
      v59 = 16 * v61 + 16;
      if (v58 == v60)
        goto LABEL_77;
    }
    do
    {
      *((_OWORD *)v66 - 1) = *((_OWORD *)v58 - 1);
      v66 -= 2;
      v58 -= 2;
    }
    while (v58 != v60);
    v58 = __p;
LABEL_77:
    __p = v66;
    v91 = (char *)v59;
    v92 = (unint64_t)v67;
    if (v58)
      operator delete(v58);
    goto LABEL_79;
  }
LABEL_9:
  if ((int)v7 > (int)v4)
    goto LABEL_62;
LABEL_82:
  v68 = (HGMetalUtils *)HGMetalUtils::metalFormat(*((_DWORD *)this + 4));
  v69 = HGMetalUtils::bytesPerPixel(v68);
  v71 = (void *)HGMemory::allocate((HGMemory *)(v69 * v12), 0, v70);
  bzero(v71, v69 * v12);
  v73 = (int32x2_t *)__p;
  v74 = v91;
  if (__p != v91)
  {
    do
    {
      v75 = v73[1];
      v85 = *v73;
      v89 = 4614;
      kdebug_trace();
      v76 = vsub_s32(v75, v85);
      *(_QWORD *)&v77 = v76.u32[0];
      *((_QWORD *)&v77 + 1) = v76.u32[1];
      v78 = (void *)*((_QWORD *)this + 18);
      v86[0] = (v85.i32[0] - v6);
      v86[1] = (v85.i32[1] - HIDWORD(v6));
      v86[2] = 0;
      v87 = v77;
      v88 = 1;
      objc_msgSend(v78, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", v86, 0, v71, (v76.i32[0] * v69));
      kdebug_trace();
      v73 += 2;
    }
    while (v73 != (int32x2_t *)v74);
  }
  HGMemory::release((HGMemory *)v71, v72);
  if (__p)
  {
    v91 = (char *)__p;
    operator delete(__p);
  }
LABEL_86:
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v93);
}

void sub_1B2ABD754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  if (__p)
    operator delete(__p);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v25 - 120));
  _Unwind_Resume(a1);
}

void HGMetalTexture::CopyTexture(HGMetalTexture *this, id *a2, HGBitmap *a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v9;
  uint64_t *v10;
  void *v11;
  const char *v12;
  char *v13;
  unsigned __int8 v14;
  HGMetalBuffer *v15;
  const char *v16;
  char *v17;
  unsigned __int8 v18;
  dispatch_group_t *v19;
  uint64_t v20;
  _BYTE v21[16];
  HGRect v22;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v21, "metal_osx", 1, "HGMetalTexture::CopyTexture() to bitmap");
  v9 = (void *)*((_QWORD *)this + 18);
  if (!v9)
  {
LABEL_11:
    *(_QWORD *)&v22.var0 = v5;
    *(_QWORD *)&v22.var2 = v4;
    HGMetalTexture::CopyManagedTextureData(this, a3, v22);
    goto LABEL_12;
  }
  if (objc_msgSend(v9, "storageMode") != 2)
  {
    v11 = (void *)*((_QWORD *)this + 18);
    if (v11 && !objc_msgSend(v11, "storageMode"))
    {
      v14 = atomic_load(HGLogger::_enabled);
      if ((v14 & 1) != 0)
        HGLogger::log((HGLogger *)"mtl_perf_validation", (const char *)1, (HGLogger *)"HGMTL PERF WARNING - [MTLTexture getBytes] with MTLStorageModeShared texture!? This sync'ed copy should have been avoidable...\n", v12, v13);
      HGMetalContext::synchronizeCommandQueue(a2);
    }
    goto LABEL_11;
  }
  v10 = (uint64_t *)HGMetalContext::bufferInfiniPool((HGMetalContext *)a2);
  if (HGMetalBuffer::canCreateFromBytes(*((_QWORD *)a2[2] + 2), a3))
  {
    HGMetalBuffer::createFromBytes((HGMetalBuffer *)a3, *((void **)a2[2] + 2), v10, 1, &v20);
    HGMetalUtils::blitTextureToBuffer(a2[4], this, v20, v5, v4, 1, 0);
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
  }
  else
  {
    v15 = (HGMetalBuffer *)HGObject::operator new(0x80uLL);
    HGBitmap::HGBitmap(v15, *(_QWORD *)((char *)a3 + 20), *(_QWORD *)((char *)a3 + 28), *((unsigned int *)a3 + 4));
    HGMetalBuffer::createFromBytes(v15, *((void **)a2[2] + 2), v10, 1, &v20);
    HGMetalUtils::blitTextureToBuffer(a2[4], this, v20, v5, v4, 1, 0);
    HGRenderUtils::BufferCopier::BufferCopier((HGRenderUtils::BufferCopier *)&v19);
    HGRenderUtils::BufferCopier::execute(&v19, a3, (HGBitmap *)v15);
    v18 = atomic_load(HGLogger::_enabled);
    if ((v18 & 1) != 0)
      HGLogger::log((HGLogger *)"mtl_perf_validation", (const char *)1, (HGLogger *)"HGMTL PERF WARNING - HGMetalTexture::CopyTexture: blit download of private texture has extra copy into misaligned buffer\n", v16, v17);
    HGRenderUtils::BufferCopier::~BufferCopier((HGRenderUtils::BufferCopier *)&v19);
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
    if (v15)
      (*(void (**)(HGMetalBuffer *))(*(_QWORD *)v15 + 24))(v15);
  }
LABEL_12:
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v21);
}

void sub_1B2ABD9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void HGMetalTexture::CreateBitmapCopy(HGMetalTexture *this@<X0>, id *a2@<X1>, HGRect a3@<0:X2, 8:X3>, HGBitmap **a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  HGBitmap *v10;
  HGRect v11;

  v7 = HGRectIntersection(*(_QWORD *)((char *)this + 20), *(_QWORD *)((char *)this + 28), *(uint64_t *)&a3.var0, *(uint64_t *)&a3.var2);
  v9 = v8;
  v10 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v10, v7, v9, *((unsigned int *)this + 4));
  *a4 = v10;
  *(_QWORD *)&v11.var0 = v7;
  *(_QWORD *)&v11.var2 = v9;
  HGMetalTexture::CopyTexture(this, a2, v10, v11);
}

void sub_1B2ABDB1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

BOOL HGMetalTexture::_canCreateLinearTexture<(HGMetalTexture::CreationStrategyFlags)16>(void *a1, HGBitmap *this)
{
  const void *Storage;
  _QWORD *v5;
  HGBitmap *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  unsigned int v11;
  _BOOL4 v12;

  Storage = (const void *)HGBitmap::GetStorage(this);
  if (!Storage
  {
    v6 = this;
  }
  v7 = HGMetalUtils::metalFormat(*((_DWORD *)v6 + 4));
  v8 = objc_msgSend(a1, "minimumLinearTextureAlignmentForPixelFormat:", v7);
  v9 = getpagesize();
  v10 = !(*((_QWORD *)v6 + 10) % v9) && !(*((_QWORD *)v6 + 9) % v9) && *((_QWORD *)v6 + 8) % v8 == 0;
  v11 = *(_DWORD *)(HGMetalDeviceInfo::getDeviceInfo((uint64_t)a1) + 48);
  if (*((_DWORD *)v6 + 7) - *((_DWORD *)v6 + 5) <= v11)
  {
    v12 = *((_DWORD *)v6 + 8) - *((_DWORD *)v6 + 6) <= v11;
    if (!v10)
      return 0;
  }
  else
  {
    v12 = 0;
    if (!v10)
      return 0;
  }
  return v7 && v12;
}

id HGMetalTexture::createFromTexture@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  char *v10;
  id result;

  *a2 = 0;
  v4 = a1;
  v5 = HGRectMake4i(0, 0, objc_msgSend(a1, "width"), objc_msgSend(a1, "height"));
  v7 = v6;
  v8 = HGMetalUtils::hgFormat((HGMetalUtils *)objc_msgSend(a1, "pixelFormat"));
  v9 = (void *)objc_msgSend(a1, "device");
  v10 = (char *)HGObject::operator new(0x120uLL);
  result = (id)HGBitmap::HGBitmap((uint64_t)v10, v5, v7, v8, 0);
  *(_QWORD *)v10 = off_1E652BD88;
  *((_QWORD *)v10 + 17) = 0;
  *((_QWORD *)v10 + 18) = 0;
  *((_QWORD *)v10 + 16) = 0;
  *(_OWORD *)(v10 + 152) = HGRectNull;
  *((_DWORD *)v10 + 42) = 1;
  *((_QWORD *)v10 + 22) = 850045863;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(_OWORD *)(v10 + 216) = 0u;
  *((_QWORD *)v10 + 29) = 0;
  *((_QWORD *)v10 + 30) = 1018212795;
  *(_OWORD *)(v10 + 248) = 0u;
  *((_QWORD *)v10 + 35) = 0;
  *(_OWORD *)(v10 + 264) = 0u;
  *((_DWORD *)v10 + 3) |= 0x220u;
  if (v9)
  {
    *((_QWORD *)v10 + 17) = v9;
    result = v9;
  }
  *a2 = v10;
  *((_QWORD *)v10 + 18) = a1;
  v10[169] = 1;
  return result;
}

void sub_1B2ABDDC8(_Unwind_Exception *a1)
{
  HGBitmap *v1;
  std::mutex *v2;
  std::condition_variable *v3;
  void *v5;
  void *v6;

  std::condition_variable::~condition_variable(v3);
  std::mutex::~mutex(v2);
  HGBitmap::~HGBitmap(v1, v5);
  HGObject::operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_1B2ABDDF0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HGMetalTexture::createFromBitmap(HGMetalTexture *this@<X0>, HGMetalContext *a2@<X1>, HGBitmap *a3@<X2>, HGRect a4@<0:X3, 8:X4>, uint64_t a5@<X5>, HGMetalContext **a6@<X8>)
{
  HGMetalTexture::createFromBitmap(this, (HGMetalContext *)*((unsigned int *)this + 12), a3, a4, (uint64_t)a2, a5, a6);
}

void HGMetalTexture::createFromBitmap(HGMetalTexture *this@<X0>, HGMetalContext *a2@<X1>, HGBitmap *a3@<X3>, HGRect a4@<0:X4, 8:X5>, uint64_t a5@<X2>, uint64_t a6@<X6>, HGMetalContext **a7@<X8>)
{
  char var2;
  uint64_t v9;
  char v12;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  char *v20;
  char *v21;
  HGBitmap *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  HGMetalDeviceInfo *LUTEnd;
  unsigned int v27;
  HGMetalUtils *v28;
  uint64_t *v29;
  HGMetalContext *v30;
  char *CVBitmapStorage;
  HGCVBitmap *v32;
  char v33;
  uint64_t v34;
  HGMetalBuffer *v35;
  HGMetalContext *v36;
  HGMetalContext *v37;
  HGBitmap *v38;
  HGMetalContext *v39;
  HGRect v40;

  var2 = a4.var2;
  v9 = *(_QWORD *)&a4.var0;
  v12 = (char)a2;
  v15 = *(void **)(*((_QWORD *)this + 2) + 16);
  v16 = HGMetalContext::texturePool(this);
  *a7 = 0;
  if (!a5 || (!*(_QWORD *)(a5 + 80) ? (v19 = (*(_DWORD *)(a5 + 12) & 1) == 0) : (v19 = 0), v19))
  {
    HGLogger::warning((HGLogger *)"HGMetalTexture::createFromBitmap() failed. HGBitmap doesn't have any data!", v17, v18);
  }
  else if ((*(_DWORD *)(a5 + 12) & 1) != 0)
  {
    CVBitmapStorage = (char *)HGCVBitmap::getCVBitmapStorage((HGBitmap *)a5, (HGBitmap *)v17);
    HGMetalTexture::createFromIOSurface(this, (HGMetalContext *)(v12 & 3), v32, CVBitmapStorage, &v39);
    if (v39)
      *a7 = v39;
  }
  else
  {
    v20 = (char *)v16;
    v33 = var2;
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    v39 = (HGMetalContext *)a5;
    v22 = v38;
    v23 = HGRectIntersection(*(_QWORD *)((char *)v38 + 20), *(_QWORD *)((char *)v38 + 28), (uint64_t)a3, v9);
    v34 = v24;
    v35 = (HGMetalBuffer *)v23;
    v25 = *((_DWORD *)v22 + 4);
    LUTEnd = (HGMetalDeviceInfo *)PCICCTransferFunctionLUT::getLUTEnd(this);
    v27 = *((_DWORD *)this + 24);
    if (v27)
    {
      if (LUTEnd)
      {
        if (HGMetalDeviceInfo::isAMD(LUTEnd))
        {
          v28 = (HGMetalUtils *)HGMetalUtils::metalFormat(v25);
          if (v27 < ((HIDWORD(v34) - HIDWORD(v35))
                    * ((_DWORD)v34 - (_DWORD)v35)
                    * HGMetalUtils::bytesPerPixel(v28)) >> 20)
            v12 &= 0xFu;
        }
      }
    }
    if ((v12 & 0x78) != 0
      && HGMetalBuffer::canCreateFromBytes((uint64_t)v15, v22)
      && (v29 = (uint64_t *)HGMetalContext::bufferInfiniPool(this),
          HGMetalBuffer::createFromBytes((HGMetalBuffer *)v22, v15, v29, 1, &v37),
          v37))
    {
      *(_QWORD *)&v40.var0 = v34;
      *(_QWORD *)&v40.var2 = a6;
      HGMetalTexture::createFromBuffer(this, (HGMetalContext *)(v12 & 0x78), v37, v35, v40, &v36);
      v30 = v36;
      if (v36)
        *a7 = v36;
      if (v37)
        (*(void (**)(HGMetalContext *))(*(_QWORD *)v37 + 24))(v37);
    }
    else
    {
      v30 = 0;
    }
    if ((v12 & 4) != 0 && !v30)
    {
      HGMetalTexture::createWithCopy(v15, v20, (uint64_t)v22, (uint64_t)v35, v34, v33, a6 ^ 1, &v37);
      if (v37)
        *a7 = v37;
    }
    (*(void (**)(HGBitmap *))(*(_QWORD *)v22 + 24))(v22);
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 24))(a5);
  }
}

void sub_1B2ABE074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  _Unwind_Resume(a1);
}

void HGMetalTexture::createFromIOSurface(HGMetalTexture *this@<X0>, HGMetalContext *a2@<X1>, HGCVBitmap *a3@<X3>, char *a4@<X2>, _QWORD *a5@<X8>)
{
  char v5;
  void *v8;
  char *CVTextureCacheRetainedRef;
  char *v10;
  HGBitmap *v11;
  HGBitmap *v12;

  *a5 = 0;
  if (!a4)
    goto LABEL_14;
  v5 = (char)a2;
  if ((a2 & 3) == 0)
    goto LABEL_14;
  v8 = *(void **)(*((_QWORD *)this + 2) + 16);
  CVTextureCacheRetainedRef = (char *)HGMetalContext::getCVTextureCacheRetainedRef((HGGPUResources **)this);
  v10 = CVTextureCacheRetainedRef;
  v11 = 0;
  if ((v5 & 1) != 0)
  {
    if (CVTextureCacheRetainedRef)
    {
      HGMetalTexture::createFromIOSurface(v8, CVTextureCacheRetainedRef, (uint64_t)a4, &v12);
      v11 = v12;
      if (v12)
        *a5 = v12;
    }
  }
  if ((v5 & 2) != 0 && !v11)
  {
    HGMetalTexture::createFromIOSurface(v8, (uint64_t)a4, a4, &v12);
    v11 = v12;
    if (v12)
      *a5 = v12;
  }
  if (v10)
    CFRelease(v10);
  if (!v11)
LABEL_14:
    HGLogger::warning((HGLogger *)"HGMetalTexture::createFromIOSurface failed. Invalid cvbmp or strategy.", (const char *)a2, a4, a3);
}

void sub_1B2ABE1BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::adjustBitmapForTexture(HGBitmap **a1, const char *a2, char *a3)
{
  uint64_t v5;
  HGBitmap *v6;
  HGBitmap *v7;
  HGBitmap *v8;
  const char *v9;
  char *v10;
  unsigned __int8 v11;
  char v12[8];
  _BYTE v13[16];

  v5 = HGFormatUtils::RGBtoRGBA(*(unsigned int *)(*(_QWORD *)a2 + 16), a2, a3);
  v6 = *(HGBitmap **)a2;
  if ((_DWORD)v5 == *(_DWORD *)(*(_QWORD *)a2 + 16))
  {
    *a1 = v6;
    (*(void (**)(HGBitmap *))(*(_QWORD *)v6 + 16))(v6);
  }
  else
  {
    HGTraceGuard::HGTraceGuard((HGTraceGuard *)v13, "metal_osx", 1, "adjustBitmapForTexture() -- HGMetalTexture reformat");
    v7 = *(HGBitmap **)a2;
    v8 = (HGBitmap *)HGObject::operator new(0x80uLL);
    HGBitmap::HGBitmap(v8, *(_QWORD *)((char *)v7 + 20), *(_QWORD *)((char *)v7 + 28), v5);
    *a1 = v8;
    HGRenderUtils::BufferReformatter::BufferReformatter((HGRenderUtils::BufferReformatter *)v12);
    HGRenderUtils::BufferReformatter::execute((HGRenderUtils::BufferReformatter *)v12, v8, *(HGBitmap **)a2);
    v11 = atomic_load(HGLogger::_enabled);
    if ((v11 & 1) != 0)
      HGLogger::log((HGLogger *)"mtl_perf_validation", (const char *)1, (HGLogger *)"HGMTL PERF WARNING - HGMetalTexture creation triggered RGB to RGBA conversion\n", v9, v10);
    HGRenderUtils::BufferReformatter::~BufferReformatter((HGRenderUtils::BufferReformatter *)v12);
    HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v13);
  }
}

void sub_1B2ABE2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void HGMetalTexture::createFromBuffer(HGMetalTexture *this@<X0>, HGMetalContext *a2@<X1>, HGMetalContext *a3@<X2>, HGMetalBuffer *a4@<X3>, HGRect a5@<0:X4, 8:X5>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v10;
  void *v13;
  int v14;
  const char *v15;
  char *v16;
  unsigned __int8 v17;
  HGBitmap *v18;
  HGRect v19;

  v6 = *(_QWORD *)&a5.var2;
  v7 = *(_QWORD *)&a5.var0;
  v10 = (char)a2;
  v13 = *(void **)(*((_QWORD *)this + 2) + 16);
  *a6 = 0;
  if ((a2 & 0x10) != 0
    && HGMetalTexture::_canCreateLinearTexture<(HGMetalTexture::CreationStrategyFlags)16>(v13, (HGBitmap *)a3)
    && (HGMetalTexture::_createFromBufferStorage<(HGMetalTexture::CreationStrategyFlags)16>(v13, (uint64_t)a3, (char *)a4, v7, &v18), v18))
  {
    *a6 = v18;
  }
  else if ((v10 & 8) != 0)
  {
    v14 = v10 & 0x70;
    *(_QWORD *)&v19.var0 = v7;
    *(_QWORD *)&v19.var2 = v6;
    HGMetalTexture::createWithBlitEncoder(this, a3, a4, v19, &v18);
    if (v18)
      *a6 = v18;
    if (v14)
    {
      v17 = atomic_load(HGLogger::_enabled);
      if ((v17 & 1) != 0)
        HGLogger::log((HGLogger *)"mtl_perf_validation", (const char *)1, (HGLogger *)"HGMTL PERF WARNING - HGMetalTexture::createFromBitmap: BlitEncoder isn't the preferred upload path on Intel IG (check rowbytes alignment). Mixed results on discrete GPUs.\n", v15, v16);
    }
  }
}

void sub_1B2ABE454(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
  _Unwind_Resume(exception_object);
}

const char *HGMetalTexture::createWithCopy@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, int a7@<W6>, HGMetalTexture **a8@<X8>)
{
  char *v16;
  HGBitmap *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  HGMetalTexture *v21;
  HGMetalTexture *v23;
  HGBitmap *v24;
  char v25[12];
  int v26;
  HGRect v27;

  *a8 = 0;
  if (!a3 || !*(_QWORD *)(a3 + 80))
    return HGLogger::warning((HGLogger *)"HGMetalTexture::createWithCopy() failed. No bitmap provided.", a2, (char *)a3);
  v26 = 4622;
  kdebug_trace();
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  *(_QWORD *)v25 = a3;
  v17 = v24;
  v18 = HGRectIntersection(*(_QWORD *)((char *)v24 + 20), *(_QWORD *)((char *)v24 + 28), a4, a5);
  v20 = v19;
  HGMetalTexture::_create(a1, (uint64_t *)a2, v18, v19, *((_DWORD *)v17 + 4), a6, 0, 0, &v23, 0, 1u);
  v21 = v23;
  if (v23)
  {
    *a8 = v23;
    HGMetalTexture::InitializeBorders(v21);
    *(_QWORD *)&v27.var0 = v18;
    *(_QWORD *)&v27.var2 = v20;
    HGMetalTexture::ReplaceManagedTextureData(v21, v17, v27, a7);
    *((_BYTE *)v21 + 168) = 1;
  }
  (*(void (**)(HGBitmap *))(*(_QWORD *)v17 + 24))(v17);
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  return (const char *)kdebug_trace();
}

void sub_1B2ABE628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a15);
  _Unwind_Resume(a1);
}

const char *HGMetalTexture::createFromIOSurface@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  __CVBuffer *v8;
  __IOSurface *IOSurface;
  HGMetalUtils *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  char *v16;
  unint64_t v17;
  size_t v18;
  size_t v19;
  char *v20;
  id v21;
  id Texture;
  id v23;
  HGCVBufferPairStorage *v24;
  uint64_t v25;
  uint64_t ID;
  char *v27;
  CVMetalTextureRef image;
  int v30;

  *a4 = 0;
  if (!a3)
  {
    v27 = "HGMetalTexture::createFromIOSurface() failed. Buffer is not a HGCVBitmap.";
    return HGLogger::warning((HGLogger *)v27, a2, (char *)a3);
  }
  if (!a2)
  {
    v27 = "HGMetalTexture::createFromIOSurface() failed. No HGCVMetalTextureCacheRef provided.";
    return HGLogger::warning((HGLogger *)v27, a2, (char *)a3);
  }
  v30 = 4630;
  kdebug_trace();
  v8 = *(__CVBuffer **)(*(_QWORD *)(a3 + 128) + 24);
  IOSurface = CVPixelBufferGetIOSurface(v8);
  v10 = (HGMetalUtils *)HGMetalUtils::metalFormat(*(_DWORD *)(a3 + 16));
  v11 = HGFormatUtils::collapseRectForFormat((uint64_t *)(a3 + 20), *(_DWORD *)(a3 + 16));
  v13 = v12;
  v14 = HGMetalUtils::bytesPerPixel(v10);
  if (v14 == HGFormatUtils::bytesPerPixel(*(_DWORD *)(a3 + 16))
    && HGRectIsEqual(v11, v13, *(_QWORD *)(a3 + 20), *(_QWORD *)(a3 + 28))
    || IOSurfaceAllowsPixelSizeCasting(IOSurface))
  {
    v17 = HIDWORD(v11);
    image = 0;
    v18 = (v13 - v11);
    v19 = (HIDWORD(v13) - v17);
    if (!CVMetalTextureCacheCreateTextureFromImage(0, (CVMetalTextureCacheRef)a2, v8, 0, (MTLPixelFormat)v10, v18, v19, *(_QWORD *)(a3 + 136), &image))
    {
      v20 = (char *)HGObject::operator new(0x120uLL);
      HGBitmap::HGBitmap((uint64_t)v20, *(_QWORD *)(a3 + 20), *(_QWORD *)(a3 + 28), *(_DWORD *)(a3 + 16), 0);
      *(_QWORD *)v20 = off_1E652BD88;
      *((_QWORD *)v20 + 17) = 0;
      *((_QWORD *)v20 + 18) = 0;
      *((_QWORD *)v20 + 16) = 0;
      *(_OWORD *)(v20 + 152) = HGRectNull;
      *((_DWORD *)v20 + 42) = 1;
      *((_QWORD *)v20 + 22) = 850045863;
      *(_OWORD *)(v20 + 184) = 0u;
      *(_OWORD *)(v20 + 200) = 0u;
      *(_OWORD *)(v20 + 216) = 0u;
      *((_QWORD *)v20 + 29) = 0;
      *((_QWORD *)v20 + 30) = 1018212795;
      *(_OWORD *)(v20 + 248) = 0u;
      *((_QWORD *)v20 + 35) = 0;
      *(_OWORD *)(v20 + 264) = 0u;
      *((_DWORD *)v20 + 3) |= 0x220u;
      if (a1)
      {
        *((_QWORD *)v20 + 17) = a1;
        v21 = a1;
      }
      *a4 = v20;
      Texture = CVMetalTextureGetTexture(image);
      *((_QWORD *)v20 + 18) = Texture;
      v23 = Texture;
      *((_DWORD *)v20 + 3) |= 1u;
      v24 = (HGCVBufferPairStorage *)HGObject::operator new(0x20uLL);
      HGCVBufferPairStorage::HGCVBufferPairStorage(v24, (HGCVBitmap *)a3, image);
      HGBitmap::SetStorage((HGBitmap *)v20, v24);
      CFRelease(image);
      v25 = HGMetalUtils::metalFormat(*(_DWORD *)(a3 + 16));
      ID = IOSurfaceGetID(IOSurface);
      if (v24)
        (*(void (**)(HGCVBufferPairStorage *, size_t, size_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 24))(v24, v18, v19, v25, ID);
    }
  }
  else
  {
    HGLogger::warning((HGLogger *)"HGMetalTexture::createFromIOSurface() failed. Pixel size casting is not allowed by IOSurface.", v15, v16);
  }
  return (const char *)kdebug_trace();
}

void sub_1B2ABE97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13)
{
  HGBitmap *v13;
  std::mutex *v14;
  std::condition_variable *v15;
  void *v17;

  std::condition_variable::~condition_variable(v15);
  std::mutex::~mutex(v14);
  HGBitmap::~HGBitmap(v13, v17);
  HGObject::operator delete(v13);
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a13);
  _Unwind_Resume(a1);
}

void sub_1B2ABE9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a13);
  _Unwind_Resume(a1);
}

void sub_1B2ABE9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a13);
  _Unwind_Resume(a1);
}

void sub_1B2ABEA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a13);
  _Unwind_Resume(a1);
}

void sub_1B2ABEA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a13);
  _Unwind_Resume(a1);
}

void sub_1B2ABEA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a13);
  _Unwind_Resume(a1);
}

void sub_1B2ABEA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  uint64_t v13;
  uint64_t v14;

  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a13);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  _Unwind_Resume(a1);
}

void sub_1B2ABEA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a13);
  _Unwind_Resume(a1);
}

void HGMetalTexture::createFromIOSurface(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, HGBitmap **a4@<X8>)
{
  __IOSurface *IOSurface;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  HGMetalUtils *v11;
  int v12;
  const char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  char *v20;
  uint64_t DeviceInfo;
  HGBitmap *v22;
  id v23;
  uint64_t ID;
  char *v25;
  _BYTE v26[16];

  *a4 = 0;
  if (!a2)
  {
    HGLogger::warning((HGLogger *)"HGMetalTexture::createFromIOSurface() failed. Buffer is not a HGCVBitmap.", 0, a3);
    return;
  }
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v26, "metal_osx", 1, "HGMetalTexture::createFromIOSurface()");
  kdebug_trace();
  IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(*(_QWORD *)(a2 + 128) + 24));
  v8 = HGFormatUtils::collapseRectForFormat((uint64_t *)(a2 + 20), *(_DWORD *)(a2 + 16));
  v10 = v9;
  v11 = (HGMetalUtils *)HGMetalUtils::metalFormat(*(_DWORD *)(a2 + 16));
  v12 = HGMetalUtils::bytesPerPixel(v11);
  if ((v12 != HGFormatUtils::bytesPerPixel(*(_DWORD *)(a2 + 16))
     || !HGRectIsEqual(v8, v10, *(_QWORD *)(a2 + 20), *(_QWORD *)(a2 + 28)))
    && !IOSurfaceAllowsPixelSizeCasting(IOSurface))
  {
    HGLogger::warning((HGLogger *)"HGMetalTexture::createFromIOSurface() failed. Pixel size casting is not allowed by IOSurface.", v13, v14);
    goto LABEL_19;
  }
  v15 = HIDWORD(v8);
  v16 = (v10 - v8);
  v17 = (HIDWORD(v10) - v15);
  v18 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v11, v16, v17, 0);
  objc_msgSend(v18, "setUsage:", 7);
  DeviceInfo = HGMetalDeviceInfo::getDeviceInfo((uint64_t)a1);
  if (!DeviceInfo
    || !objc_msgSend(v18, "width")
    || objc_msgSend(v18, "width") > (unint64_t)*(unsigned int *)(DeviceInfo + 48)
    || !objc_msgSend(v18, "height")
    || objc_msgSend(v18, "height") > (unint64_t)*(unsigned int *)(DeviceInfo + 48)
    || !objc_msgSend(v18, "pixelFormat"))
  {
    v25 = "HGMetalTexture::createFromIOSurface() failed. Invalid texture description.";
LABEL_16:
    HGLogger::warning((HGLogger *)v25, v19, v20);
    goto LABEL_19;
  }
  v22 = (HGBitmap *)HGObject::operator new(0x120uLL);
  HGBitmap::HGBitmap((uint64_t)v22, *(_QWORD *)(a2 + 20), *(_QWORD *)(a2 + 28), *(_DWORD *)(a2 + 16), 0);
  *(_QWORD *)v22 = off_1E652BD88;
  *((_QWORD *)v22 + 17) = 0;
  *((_QWORD *)v22 + 18) = 0;
  *((_QWORD *)v22 + 16) = 0;
  *(_OWORD *)((char *)v22 + 152) = HGRectNull;
  *((_DWORD *)v22 + 42) = 1;
  *((_QWORD *)v22 + 22) = 850045863;
  *(_OWORD *)((char *)v22 + 184) = 0u;
  *(_OWORD *)((char *)v22 + 200) = 0u;
  *(_OWORD *)((char *)v22 + 216) = 0u;
  *((_QWORD *)v22 + 29) = 0;
  *((_QWORD *)v22 + 30) = 1018212795;
  *(_OWORD *)((char *)v22 + 248) = 0u;
  *((_QWORD *)v22 + 35) = 0;
  *(_OWORD *)((char *)v22 + 264) = 0u;
  *((_DWORD *)v22 + 3) |= 0x220u;
  if (a1)
  {
    *((_QWORD *)v22 + 17) = a1;
    v23 = a1;
  }
  *a4 = v22;
  *((_QWORD *)v22 + 18) = objc_msgSend(a1, "newTextureWithDescriptor:iosurface:plane:", v18, IOSurface, *(_QWORD *)(a2 + 136), (char *)v22 + 176);
  *((_DWORD *)v22 + 3) |= 1u;
  ID = IOSurfaceGetID(IOSurface);
  if (!*((_QWORD *)v22 + 18))
  {
    (*(void (**)(HGBitmap *, uint64_t, uint64_t, HGMetalUtils *, uint64_t))(*(_QWORD *)v22 + 24))(v22, v16, v17, v11, ID);
    *a4 = 0;
    v25 = "HGMetalTexture::createFromIOSurface() failed. newTextureWithDescriptor failed.";
    goto LABEL_16;
  }
  HGBitmap::SetStorage(v22, (HGObject *)a2);
LABEL_19:
  kdebug_trace();
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v26);
}

void sub_1B2ABEDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, int a10, char a11, __int16 a12, char a13, char a14)
{
  HGBitmap *v14;
  std::condition_variable *v15;
  void *v17;

  std::condition_variable::~condition_variable(v15);
  std::mutex::~mutex(a9);
  HGBitmap::~HGBitmap(v14, v17);
  HGObject::operator delete(v14);
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a13);
  _Unwind_Resume(a1);
}

HGObject *HGMetalTexture::createWithBlitEncoder@<X0>(HGObject *this@<X0>, HGMetalContext *a2@<X1>, HGMetalBuffer *a3@<X2>, HGRect a4@<0:X3, 8:X4>, HGBitmap **a5@<X8>)
{
  int var2;
  unint64_t v6;
  HGObject *v9;
  void *v11;
  uint64_t *v12;
  HGBitmap *v13;
  unint64_t v14;
  HGBitmap *v15;

  *a5 = 0;
  if (a2)
  {
    var2 = a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    v9 = this;
    v11 = *(void **)(*((_QWORD *)this + 2) + 16);
    v12 = (uint64_t *)HGMetalContext::texturePool(this);
    this = (HGObject *)HGMetalTexture::_create(v11, v12, (uint64_t)a3, v6, *((_DWORD *)a2 + 4), 0, 0, 0, &v15, 2, 1u);
    v13 = v15;
    if (v15)
    {
      *a5 = v15;
      v14 = *((unsigned int *)v9 + 24);
      if ((_DWORD)v14)
        HGMetalUtils::tiledBlitBufferToTexture(*((void **)v9 + 4), (uint64_t)a2, v13, (unint64_t)a3, v6, var2, 0, v14);
      else
        HGMetalUtils::blitBufferToTexture(*((void **)v9 + 4), (uint64_t)a2, v13, (uint64_t)a3, v6, var2, 0);
      return HGBitmap::SetStorage(v13, a2);
    }
  }
  return this;
}

void sub_1B2ABEF84(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

const char *HGMetalTexture::_createFromBufferStorage<(HGMetalTexture::CreationStrategyFlags)16>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t v12;
  int var1;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  HGMetalDeviceInfo *DeviceInfo;
  void *v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char *v37;
  id v38;
  unint64_t v39;
  HGRect v40;

  *a5 = 0;
  if (!a2)
    return HGLogger::warning((HGLogger *)"HGMetalTexture::_createFromBufferStorage() failed. No MTLBuffer provided.", 0, a3);
  *(_QWORD *)&v40.var0 = 0;
  *(_QWORD *)&v40.var2 = 0;
  *(_QWORD *)&v40.var0 = HGRectIntersection(*(_QWORD *)(a2 + 20), *(_QWORD *)(a2 + 28), (uint64_t)a3, a4);
  *(_QWORD *)&v40.var2 = v8;
  if (HGRect::IsNull(&v40))
    return HGLogger::warning((HGLogger *)"HGMetalTexture::_createFromBufferStorage() failed. Empty ROI.", v9, v10);
  kdebug_trace();
  if (HGFormatUtils::isPackedFormat(*(_DWORD *)(a2 + 16)))
    v40.var0 = *(_DWORD *)(a2 + 20);
  v12 = objc_msgSend(a1, "minimumLinearTextureAlignmentForPixelFormat:", HGMetalUtils::metalFormat(*(_DWORD *)(a2 + 16)));
  var1 = v40.var1;
  v14 = *(_DWORD *)(a2 + 20);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = v15 * (v40.var0 - v14);
  if (*(_DWORD *)(a2 + 16) == 31)
    v17 = ((3 * ((uint64_t)(4 * v16 / 6uLL) / v12 * v12 / v15)) >> 1) & 0x3FFFFFFFFFFFFFFFLL;
  else
    v17 = v16 / v12 * v12 / v15;
  v18 = (v14 + v17);
  *(_QWORD *)&v40.var0 = *(_QWORD *)&v40.var0 & 0xFFFFFFFF00000000 | v18;
  v19 = HGBitmap::byteOffset((HGBitmap *)a2, v18, var1);
  v20 = HGFormatUtils::collapseRectForFormat((uint64_t *)&v40.var0, *(_DWORD *)(a2 + 16));
  v22 = v21;
  v23 = HGMetalUtils::metalFormat(*(_DWORD *)(a2 + 16));
  v24 = (char *)(v22 - v20);
  v25 = (HIDWORD(v22) - HIDWORD(v20));
  v26 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v23, v24, v25, 0);
  objc_msgSend(v26, "setUsage:", 1);
  v39 = v20;
  DeviceInfo = (HGMetalDeviceInfo *)HGMetalDeviceInfo::getDeviceInfo((uint64_t)a1);
  if (HGMetalDeviceInfo::isApple(DeviceInfo))
    objc_msgSend(v26, "setUsage:", objc_msgSend(v26, "usage") | 6);
  v28 = *(void **)(a2 + 144);
  if (HGMetalTexture::_canCreateLinearTexture<(HGMetalTexture::CreationStrategyFlags)16>(a1, (HGBitmap *)a2))
  {
    kdebug_trace();
    v31 = objc_msgSend(v28, "newTextureWithDescriptor:offset:bytesPerRow:", v26, v19, *(_QWORD *)(a2 + 64));
    v32 = 0;
    v33 = v24;
    v34 = v25;
    v35 = v23;
    v36 = v28;
    if (v31)
    {
      v37 = (char *)HGObject::operator new(0x120uLL);
      HGBitmap::HGBitmap((uint64_t)v37, *(uint64_t *)&v40.var0, *(uint64_t *)&v40.var2, *(_DWORD *)(a2 + 16), 0);
      *(_QWORD *)v37 = off_1E652BD88;
      *((_QWORD *)v37 + 17) = 0;
      *((_QWORD *)v37 + 18) = 0;
      *((_QWORD *)v37 + 16) = 0;
      *(_OWORD *)(v37 + 152) = HGRectNull;
      *((_DWORD *)v37 + 42) = 1;
      *((_QWORD *)v37 + 22) = 850045863;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *((_QWORD *)v37 + 29) = 0;
      *((_QWORD *)v37 + 30) = 1018212795;
      *(_OWORD *)(v37 + 248) = 0u;
      *((_QWORD *)v37 + 35) = 0;
      *(_OWORD *)(v37 + 264) = 0u;
      *((_DWORD *)v37 + 3) |= 0x220u;
      if (a1)
      {
        *((_QWORD *)v37 + 17) = a1;
        v38 = a1;
      }
      *a5 = v37;
      *((_QWORD *)v37 + 19) = v39;
      *((_QWORD *)v37 + 20) = v22;
      *((_QWORD *)v37 + 18) = v31;
      HGBitmap::SetStorage((HGBitmap *)v37, (HGObject *)a2);
      return (const char *)kdebug_trace();
    }
  }
  else
  {
    HGLogger::warning((HGLogger *)"HGMetalTexture::_createFromBufferStorage() failed. Bad alignment.", v29, v30);
  }
  HGLogger::warning((HGLogger *)"HGMetalTexture::_createFromBufferStorage() failed. MTLTexture creation failed.", v32, v33, v34, v35, v36, v39);
  return (const char *)kdebug_trace();
}

void sub_1B2ABF2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  HGBitmap *v11;
  std::mutex *v12;
  std::condition_variable *v13;
  void *v15;

  std::condition_variable::~condition_variable(v13);
  std::mutex::~mutex(v12);
  HGBitmap::~HGBitmap(v11, v15);
  HGObject::operator delete(v11);
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B2ABF354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B2ABF36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B2ABF380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B2ABF394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B2ABF3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B2ABF3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B2ABF3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B2ABF3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B2ABF3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B2ABF40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

uint64_t HGMetalTexture::create@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, char a6@<W5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, char a10)
{
  uint64_t v10;

  v10 = 2;
  if (!a10)
    v10 = 0;
  return HGMetalTexture::_create(a1, a2, a3, a4, a5, a6, a7, a8, a9, v10, 1u);
}

uint64_t HGMetalTexture::_create@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, char a6@<W5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, uint64_t a10, unsigned int a11)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t DeviceInfo;
  const char *v28;
  char *v29;
  unint64_t v30;
  const char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  __int128 v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;

  v57 = a3;
  v58 = a4;
  v56 = 4624;
  kdebug_trace();
  v15 = HGFormatUtils::collapseRectForFormat(&v57, a5);
  v17 = v16;
  v18 = HGRectMake4i(0, 0, 0, 0);
  v43 = HGRectGrow(v15, v17, v18);
  v45 = HIDWORD(v43);
  v20 = (v19 - v43);
  v22 = (v21 - HIDWORD(v43));
  *(_QWORD *)&v50 = v20;
  *((_QWORD *)&v50 + 1) = v22;
  v23 = HGMetalUtils::metalFormat(a5);
  v51 = v23;
  v53 = a10;
  if (a11 >= 2)
    v24 = 4;
  else
    v24 = 2;
  v54 = v24;
  v55 = a11;
  if (a7)
    v25 = 5;
  else
    v25 = 1;
  if (a8)
    v26 = v25 | 2;
  else
    v26 = v25;
  v52 = v26;
  *a9 = 0;
  DeviceInfo = HGMetalDeviceInfo::getDeviceInfo((uint64_t)a1);
  if (!DeviceInfo
    || !v20
    || (v30 = *(unsigned int *)(DeviceInfo + 48), v20 > v30)
    || v22 - 1 >= v30
    || !v23
    || *(_DWORD *)(DeviceInfo + 52) < a11)
  {
    HGLogger::warning((HGLogger *)"HGMetalTexture::_create() failed. Invalid texture description.", v28, v29, v43, v45);
    return kdebug_trace();
  }
  if (!a2)
  {
    v42 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v23, v20, v22, 0);
    objc_msgSend(v42, "setUsage:", v26);
    objc_msgSend(v42, "setStorageMode:", a10);
    objc_msgSend(v42, "setTextureType:", v24);
    objc_msgSend(v42, "setSampleCount:", a11);
    v36 = (void *)objc_msgSend(a1, "newTextureWithDescriptor:", v42);
    v32 = 0;
    v33 = (char *)v20;
    v34 = v22;
    v35 = v23;
    if (v36)
      goto LABEL_20;
LABEL_26:
    HGLogger::warning((HGLogger *)"HGMetalTexture::_create() failed. Failed to allocate texture object.", v32, v33, v34, v35, v43, v45);
    return kdebug_trace();
  }
  v36 = (void *)HGMetalTexturePool::newTexture(a2, &v50, a6);
  if (!v36)
    goto LABEL_26;
LABEL_20:
  v37 = (char *)HGObject::operator new(0x120uLL);
  HGBitmap::HGBitmap((uint64_t)v37, v57, v58, a5, 0);
  *(_QWORD *)v37 = off_1E652BD88;
  *((_QWORD *)v37 + 17) = 0;
  *((_QWORD *)v37 + 18) = 0;
  *((_QWORD *)v37 + 16) = 0;
  *(_OWORD *)(v37 + 152) = HGRectNull;
  *((_DWORD *)v37 + 42) = 1;
  *((_QWORD *)v37 + 22) = 850045863;
  *(_OWORD *)(v37 + 184) = 0u;
  *(_OWORD *)(v37 + 200) = 0u;
  *(_OWORD *)(v37 + 216) = 0u;
  *((_QWORD *)v37 + 29) = 0;
  *((_QWORD *)v37 + 30) = 1018212795;
  *(_OWORD *)(v37 + 248) = 0u;
  *((_QWORD *)v37 + 35) = 0;
  *(_OWORD *)(v37 + 264) = 0u;
  *((_DWORD *)v37 + 3) |= 0x220u;
  if (a1)
  {
    *((_QWORD *)v37 + 17) = a1;
    v38 = a1;
  }
  *a9 = v37;
  *((_QWORD *)v37 + 18) = v36;
  *((_QWORD *)v37 + 16) = a2;
  *((_WORD *)v37 + 84) = 256;
  v39 = objc_msgSend(v36, "width", v43, v45);
  v40 = objc_msgSend(v36, "height");
  if (v39 != (_DWORD)v58 - (_DWORD)v57 || v40 != HIDWORD(v58) - HIDWORD(v57))
  {
    *((_QWORD *)v37 + 19) = HGRectMake4i(v44, v46, v39 + v44, v40 + v46);
    *((_QWORD *)v37 + 20) = v41;
  }
  return kdebug_trace();
}

void sub_1B2ABF798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,char a21)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a21);
  _Unwind_Resume(a1);
}

uint64_t HGMetalTexture::create@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, char a6@<W5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, uint64_t a10, unsigned int a11)
{
  return HGMetalTexture::_create(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t HGMetalTexture::createDepth@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, _QWORD *a6@<X8>)
{
  return HGMetalTexture::_create(a1, a2, a3, a4, 9, 0, 1, 0, a6, 2, a5);
}

const char *HGMetalTexture::createMSAA@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unsigned int a6@<W5>, _QWORD *a7@<X8>)
{
  const char *result;

  if (a6 > 1)
    return (const char *)HGMetalTexture::_create(a1, a2, (uint64_t)a3, a4, a5, 0, 1, 0, a7, 2, a6);
  result = HGLogger::warning((HGLogger *)"HGMetalTexture::createMSAA failed. 'sampleCount' must be greater than 1.", (const char *)a2, a3);
  *a7 = 0;
  return result;
}

void *HGMetalTexture::getMetalStorage(HGBitmap *this, HGBitmap *a2)
{
  HGBitmap *v2;
  void *v3;
  const void *Storage;
  HGBitmap *v5;

  if (!this)
    return 0;
  v2 = this;
  do
  {
    Storage = (const void *)HGBitmap::GetStorage(v2);
    if (!Storage)
      break;
    v2 = v5;
  }
  while (!v3 && v5 != 0);
  return v3;
}

uint64_t project_util::getUniformLocation(project_util *this, const GLchar *a2, const char *a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::locale v10;

  result = glGetUniformLocation((GLuint)this, a2);
  v5 = result;
  if ((_DWORD)result == -1)
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"no uniform location for: ", 25);
    v7 = strlen(a2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a2, v7);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
    v9 = std::locale::use_facet(&v10, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v10);
    std::ostream::put();
    std::ostream::flush();
    return v5;
  }
  return result;
}

void sub_1B2ABFA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t project_util::getAttribLocation(project_util *this, const GLchar *a2, const char *a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::locale v10;

  result = glGetAttribLocation((GLuint)this, a2);
  v5 = result;
  if ((_DWORD)result == -1)
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"no attrib location for: ", 24);
    v7 = strlen(a2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a2, v7);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
    v9 = std::locale::use_facet(&v10, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v10);
    std::ostream::put();
    std::ostream::flush();
    return v5;
  }
  return result;
}

void sub_1B2ABFB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t project_util::prettyPrintShaderText(project_util *this, const char *a2)
{
  project_util *v2;
  size_t v3;
  _QWORD *v4;
  size_t v5;
  BOOL v6;
  uint64_t v7;
  char v8;
  int v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  char v13;
  std::locale v14;

  v2 = this;
  v3 = strlen((const char *)this);
  v4 = (_QWORD *)MEMORY[0x1E0DE4A50];
  if (v3)
  {
    v5 = v3;
    v6 = 1;
    v7 = 1;
    do
    {
      if (v6)
      {
        *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 3;
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      }
      v9 = *(unsigned __int8 *)v2;
      v2 = (project_util *)((char *)v2 + 1);
      v8 = v9;
      v6 = v9 == 10;
      if (v9 == 10)
        ++v7;
      v13 = v8;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v13, 1);
      --v5;
    }
    while (v5);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v11 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v14);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1B2ABFCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t project_util::compileShaderProgram(GLchar *this, GLchar *a2, const char *a3)
{
  GLuint Shader;
  size_t v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  const char *v7;
  GLuint v8;
  size_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  const char *v12;
  uint64_t Program;
  size_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  GLsizei v18;
  GLsizei length;
  GLint params;
  GLchar *v21;
  GLchar *string;
  std::locale v23;
  GLchar infolog[2048];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = a2;
  string = this;
  Shader = glCreateShader(0x8B31u);
  glShaderSource(Shader, 1, (const GLchar *const *)&string, 0);
  glCompileShader(Shader);
  params = 0;
  glGetShaderiv(Shader, 0x8B81u, &params);
  if (params != 1)
  {
    length = 0;
    glGetShaderInfoLog(Shader, 2048, &length, infolog);
    v4 = strlen(infolog);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)infolog, v4);
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
    v6 = std::locale::use_facet(&v23, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v23);
    std::ostream::put();
    std::ostream::flush();
    project_util::prettyPrintShaderText((project_util *)string, v7);
  }
  v8 = glCreateShader(0x8B30u);
  glShaderSource(v8, 1, (const GLchar *const *)&v21, 0);
  glCompileShader(v8);
  params = 0;
  glGetShaderiv(v8, 0x8B81u, &params);
  if (params != 1)
  {
    length = 0;
    glGetShaderInfoLog(v8, 2048, &length, infolog);
    v9 = strlen(infolog);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)infolog, v9);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
    v11 = std::locale::use_facet(&v23, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v23);
    std::ostream::put();
    std::ostream::flush();
    project_util::prettyPrintShaderText((project_util *)v21, v12);
  }
  Program = glCreateProgram();
  glAttachShader(Program, Shader);
  glAttachShader(Program, v8);
  glLinkProgram(Program);
  length = 0;
  glGetProgramiv(Program, 0x8B82u, &length);
  if (length != 1)
  {
    v18 = 0;
    glGetProgramInfoLog(Program, 2048, &v18, infolog);
    v14 = strlen(infolog);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)infolog, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v23, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v23);
    std::ostream::put();
    std::ostream::flush();
  }
  glDeleteShader(Shader);
  glDeleteShader(v8);
  return Program;
}

void sub_1B2ABFFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
  std::locale::~locale(&a13);
  _Unwind_Resume(a1);
}

void sub_1B2ABFFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
  std::locale::~locale(&a13);
  _Unwind_Resume(a1);
}

void sub_1B2ABFFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
  std::locale::~locale(&a13);
  _Unwind_Resume(a1);
}

void project_util::fill_flat_array(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t i;
  float32x4_t v7;
  int32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  __int32 v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  __int32 *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  __int32 v49;
  __int32 v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  __int32 *v58;
  unint64_t v59;
  char *v60;
  __int32 v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  float32x4_t v68;

  if (a1[1] != *a1)
  {
    v4 = 0;
    v5 = *(char **)(a2 + 8);
    do
    {
      for (i = 0; i != 3; ++i)
      {
        v7 = *(float32x4_t *)(*a1 + 48 * v4 + 16 * i);
        v8 = (int32x4_t)vmulq_f32(v7, v7);
        v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
        v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
        v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
        v11 = vmulq_n_f32(v7, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]);
        v12 = *(char **)(a2 + 16);
        v68 = v11;
        if (v5 < v12)
        {
          *(_DWORD *)v5 = v11.i32[0];
          v13 = v5 + 4;
          goto LABEL_34;
        }
        v14 = *(char **)a2;
        v15 = (uint64_t)&v5[-*(_QWORD *)a2];
        v16 = v15 >> 2;
        v17 = (v15 >> 2) + 1;
        if (v17 >> 62)
          goto LABEL_89;
        v18 = v12 - v14;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 62)
            goto LABEL_90;
          v20 = operator new(4 * v19);
          v11 = v68;
          v21 = &v20[4 * v16];
          *v21 = v68.i32[0];
          v13 = (char *)(v21 + 1);
          if (v5 == v14)
            goto LABEL_32;
        }
        else
        {
          v20 = 0;
          v21 = (_DWORD *)(4 * v16);
          *(_DWORD *)(4 * v16) = v11.i32[0];
          v13 = (char *)(4 * v16 + 4);
          if (v5 == v14)
            goto LABEL_32;
        }
        v22 = v5 - 4 - v14;
        if (v22 < 0xBC)
        {
          v23 = v5;
          goto LABEL_31;
        }
        if (&v20[v15 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v20[v15 - 4])
        {
          v23 = v5;
          goto LABEL_31;
        }
        if (&v5[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v5 - 4)
        {
          v23 = v5;
          do
          {
LABEL_31:
            v30 = *((_DWORD *)v23 - 1);
            v23 -= 4;
            *--v21 = v30;
          }
          while (v23 != v14);
          goto LABEL_32;
        }
        if ((unint64_t)(v5 - v20 - v15) < 0x20)
        {
          v23 = v5;
          goto LABEL_31;
        }
        v24 = (v22 >> 2) + 1;
        v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        v23 = &v5[-v25];
        v21 = (_DWORD *)((char *)v21 - v25);
        v26 = &v20[4 * v16 - 16];
        v27 = (__int128 *)(v5 - 16);
        v28 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v29 = *v27;
          *(v26 - 1) = *(v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 2;
          v28 -= 8;
        }
        while (v28);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_31;
LABEL_32:
        v12 = &v20[4 * v19];
        *(_QWORD *)a2 = v21;
        *(_QWORD *)(a2 + 8) = v13;
        *(_QWORD *)(a2 + 16) = v12;
        if (v14)
        {
          operator delete(v14);
          v11 = v68;
          v12 = *(char **)(a2 + 16);
        }
LABEL_34:
        *(_QWORD *)(a2 + 8) = v13;
        v31 = v11.i32[1];
        if (v13 < v12)
        {
          *(_DWORD *)v13 = v11.i32[1];
          v32 = v13 + 4;
          goto LABEL_61;
        }
        v33 = *(char **)a2;
        v34 = (uint64_t)&v13[-*(_QWORD *)a2];
        v35 = v34 >> 2;
        v36 = (v34 >> 2) + 1;
        if (v36 >> 62)
          goto LABEL_89;
        v37 = v12 - v33;
        if (v37 >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          if (v38 >> 62)
            goto LABEL_90;
          v39 = operator new(4 * v38);
          v11.i32[2] = v68.i32[2];
          v40 = (__int32 *)&v39[4 * v35];
          *v40 = v31;
          v32 = (char *)(v40 + 1);
          if (v13 == v33)
            goto LABEL_59;
        }
        else
        {
          v39 = 0;
          v40 = (__int32 *)(4 * v35);
          *(_DWORD *)(4 * v35) = v11.i32[1];
          v32 = (char *)(4 * v35 + 4);
          if (v13 == v33)
            goto LABEL_59;
        }
        v41 = v13 - 4 - v33;
        if (v41 < 0xBC)
        {
          v42 = v13;
          goto LABEL_58;
        }
        if (&v39[v34 - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v39[v34 - 4])
        {
          v42 = v13;
          goto LABEL_58;
        }
        if (&v13[-(v41 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v13 - 4)
        {
          v42 = v13;
          do
          {
LABEL_58:
            v49 = *((_DWORD *)v42 - 1);
            v42 -= 4;
            *--v40 = v49;
          }
          while (v42 != v33);
          goto LABEL_59;
        }
        if ((unint64_t)(v13 - v39 - v34) < 0x20)
        {
          v42 = v13;
          goto LABEL_58;
        }
        v43 = (v41 >> 2) + 1;
        v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
        v42 = &v13[-v44];
        v40 = (__int32 *)((char *)v40 - v44);
        v45 = &v39[4 * v35 - 16];
        v46 = (__int128 *)(v13 - 16);
        v47 = v43 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v48 = *v46;
          *(v45 - 1) = *(v46 - 1);
          *v45 = v48;
          v45 -= 2;
          v46 -= 2;
          v47 -= 8;
        }
        while (v47);
        if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_58;
LABEL_59:
        v12 = &v39[4 * v38];
        *(_QWORD *)a2 = v40;
        *(_QWORD *)(a2 + 8) = v32;
        *(_QWORD *)(a2 + 16) = v12;
        if (v33)
        {
          operator delete(v33);
          v11.i32[2] = v68.i32[2];
          v12 = *(char **)(a2 + 16);
        }
LABEL_61:
        *(_QWORD *)(a2 + 8) = v32;
        v50 = v11.i32[2];
        if (v32 < v12)
        {
          *(_DWORD *)v32 = v11.i32[2];
          v5 = v32 + 4;
          goto LABEL_6;
        }
        v51 = *(char **)a2;
        v52 = (uint64_t)&v32[-*(_QWORD *)a2];
        v53 = v52 >> 2;
        v54 = (v52 >> 2) + 1;
        if (v54 >> 62)
LABEL_89:
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v55 = v12 - v51;
        if (v55 >> 1 > v54)
          v54 = v55 >> 1;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
          v56 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          if (v56 >> 62)
LABEL_90:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v57 = operator new(4 * v56);
          v58 = (__int32 *)&v57[4 * v53];
          *v58 = v50;
          v5 = (char *)(v58 + 1);
          if (v32 == v51)
            goto LABEL_76;
        }
        else
        {
          v57 = 0;
          v58 = (__int32 *)(4 * v53);
          *(_DWORD *)(4 * v53) = v11.i32[2];
          v5 = (char *)(4 * v53 + 4);
          if (v32 == v51)
            goto LABEL_76;
        }
        v59 = v32 - 4 - v51;
        if (v59 >= 0xBC)
        {
          if (&v57[v52 - 4 - (v59 & 0xFFFFFFFFFFFFFFFCLL)] > &v57[v52 - 4])
          {
            v60 = v32;
          }
          else if (&v32[-(v59 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v32 - 4)
          {
            v60 = v32;
          }
          else if ((unint64_t)(v32 - v57 - v52) >= 0x20)
          {
            v62 = (v59 >> 2) + 1;
            v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
            v60 = &v32[-v63];
            v58 = (__int32 *)((char *)v58 - v63);
            v64 = &v57[4 * v53 - 16];
            v65 = (__int128 *)(v32 - 16);
            v66 = v62 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v67 = *v65;
              *(v64 - 1) = *(v65 - 1);
              *v64 = v67;
              v64 -= 2;
              v65 -= 2;
              v66 -= 8;
            }
            while (v66);
            if (v62 == (v62 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_76;
          }
          else
          {
            v60 = v32;
          }
        }
        else
        {
          v60 = v32;
        }
        do
        {
          v61 = *((_DWORD *)v60 - 1);
          v60 -= 4;
          *--v58 = v61;
        }
        while (v60 != v51);
LABEL_76:
        *(_QWORD *)a2 = v58;
        *(_QWORD *)(a2 + 8) = v5;
        *(_QWORD *)(a2 + 16) = &v57[4 * v56];
        if (v51)
          operator delete(v51);
LABEL_6:
        *(_QWORD *)(a2 + 8) = v5;
      }
      ++v4;
    }
    while (v4 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4));
  }
}

void project_util::generateIcosphere(int a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  __int128 v7;
  char *v8;
  _OWORD *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t i;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t *v71;
  _OWORD *f32;
  unint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t *v82;
  float32x4_t *v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  char *v87;
  float32x4_t *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  float32x4_t *k;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t *v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t *v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t *v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t *v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t *v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t *v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t *v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t *v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t *v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t *v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t *v141;
  float32x4_t *v142;
  float32x4_t *v143;
  uint64_t j;
  _OWORD *v145;
  __int128 v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  float32x4_t v152;
  float32x4_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  float32x4_t v158;
  float32x4_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  float32x4_t v164;
  float32x4_t v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  float32x4_t v170;
  float32x4_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  float32x4_t v176;
  float32x4_t v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  float32x4_t v182;
  float32x4_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  float32x4_t v188;
  float32x4_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  float32x4_t v194;
  float32x4_t v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  char *v199;
  float32x4_t v200;
  float32x4_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  float32x4_t v206;
  float32x4_t v207;
  unint64_t v208;
  unint64_t v209;
  char *v210;
  char *v211;
  float32x4_t v212;
  float32x4_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  float32x4_t v218;
  float32x4_t v219;
  unint64_t v220;
  unint64_t v221;
  char *v222;
  char *v223;
  float32x4_t v224;
  float32x4_t v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  float32x4_t *v229;
  char *v230;
  float32x4_t v231;
  float32x4_t v232;
  int m;
  unint64_t v234;
  unint64_t v235;
  float32x4_t *v236;
  float32x4_t v237;
  float32x4_t v238;
  int32x4_t v239;
  float32x2_t v240;
  float32x2_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  int32x4_t v245;
  float32x2_t v246;
  float32x2_t v247;
  float32x4_t v248;
  float32x4_t v249;
  int32x4_t v250;
  float32x4_t v251;
  float32x4_t *v252;
  unint64_t v253;
  unint64_t v254;
  char *v255;
  float32x4_t *v256;
  float32x4_t *v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t *v261;
  float32x4_t v262;
  float32x4_t *v263;
  unint64_t v264;
  unint64_t v265;
  char *v266;
  float32x4_t *v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t *v270;
  float32x4_t *v271;
  unint64_t v272;
  unint64_t v273;
  char *v274;
  float32x4_t *v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t *v279;
  unint64_t v280;
  unint64_t v281;
  char *v282;
  float32x4_t *v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t *v286;
  uint64_t v287;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  __int128 v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  __int128 v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  __int128 v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t *v352;
  unint64_t v353;
  void *__p;
  float32x4_t *v355;
  char *v356;
  char *v357;
  _OWORD *v358;
  char *v359;

  v358 = 0;
  v3 = (char *)operator new(0x10uLL);
  *(_OWORD *)v3 = xmmword_1B3523F10;
  v357 = v3;
  v359 = v3 + 16;
  v4 = (char *)operator new(0x20uLL);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *((_OWORD *)v4 + 1) = xmmword_1B3523F20;
  v5 = v357;
  v357 = v4;
  v359 = v4 + 32;
  if (v5)
    operator delete(v5);
  v358 = v4 + 32;
  v6 = (char *)operator new(0x40uLL);
  v7 = *(_OWORD *)v4;
  *((_OWORD *)v6 + 1) = *((_OWORD *)v4 + 1);
  *((_OWORD *)v6 + 2) = xmmword_1B3523F30;
  *(_OWORD *)v6 = v7;
  v8 = v357;
  v357 = v6;
  v359 = v6 + 64;
  if (v8)
    operator delete(v8);
  *((_OWORD *)v6 + 3) = xmmword_1B3523F40;
  v358 = v6 + 64;
  v9 = operator new(0x80uLL);
  v10 = (unint64_t)(v9 + 8);
  v11 = v9 + 5;
  v12 = *((_OWORD *)v6 + 2);
  v9[3] = *((_OWORD *)v6 + 3);
  v9[4] = xmmword_1B3523F50;
  v13 = *(_OWORD *)v6;
  v9[1] = *((_OWORD *)v6 + 1);
  v9[2] = v12;
  *v9 = v13;
  v14 = v357;
  v357 = (char *)v9;
  v359 = (char *)(v9 + 8);
  if (v14)
    operator delete(v14);
  v358 = v9 + 5;
  if ((unint64_t)v11 < v10)
  {
    *v11 = xmmword_1B3523F60;
    v15 = v9 + 6;
    v358 = v9 + 6;
    if ((unint64_t)(v9 + 6) < v10)
      goto LABEL_9;
LABEL_20:
    v25 = v15 - v9;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    if ((uint64_t)(v10 - (_QWORD)v9) >> 3 > v26)
      v26 = (uint64_t)(v10 - (_QWORD)v9) >> 3;
    if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v27 = 0xFFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v28 = (char *)operator new(16 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[16 * v25];
    v10 = (unint64_t)&v28[16 * v27];
    *(_OWORD *)v29 = xmmword_1B3523F70;
    v16 = v29 + 16;
    if (v15 == v9)
    {
      v357 = v29;
      v359 = (char *)v10;
    }
    else
    {
      do
      {
        v30 = *--v15;
        *((_OWORD *)v29 - 1) = v30;
        v29 -= 16;
      }
      while (v15 != v9);
      v9 = v357;
      v357 = v29;
      v359 = (char *)v10;
      if (!v9)
      {
        v9 = v29;
        v358 = v16;
        if ((unint64_t)v16 >= v10)
          goto LABEL_34;
        goto LABEL_10;
      }
    }
    operator delete(v9);
    v9 = v29;
    v358 = v16;
    if ((unint64_t)v16 >= v10)
      goto LABEL_34;
LABEL_10:
    *v16 = xmmword_1B3523F80;
    v17 = v16 + 1;
    v358 = v16 + 1;
    if ((unint64_t)(v16 + 1) < v10)
      goto LABEL_11;
LABEL_51:
    v37 = v17 - v9;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    if ((uint64_t)(v10 - (_QWORD)v9) >> 3 > v38)
      v38 = (uint64_t)(v10 - (_QWORD)v9) >> 3;
    if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v39 = 0xFFFFFFFFFFFFFFFLL;
    else
      v39 = v38;
    if (v39)
    {
      if (v39 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v40 = (char *)operator new(16 * v39);
    }
    else
    {
      v40 = 0;
    }
    v41 = &v40[16 * v37];
    v10 = (unint64_t)&v40[16 * v39];
    *(_OWORD *)v41 = xmmword_1B3523F90;
    v18 = v41 + 16;
    if (v17 == v9)
    {
      v357 = v41;
      v359 = (char *)v10;
    }
    else
    {
      do
      {
        v42 = *--v17;
        *((_OWORD *)v41 - 1) = v42;
        v41 -= 16;
      }
      while (v17 != v9);
      v9 = v357;
      v357 = v41;
      v359 = (char *)v10;
      if (!v9)
      {
        v9 = v41;
        v358 = v18;
        if ((unint64_t)v18 >= v10)
          goto LABEL_68;
        goto LABEL_12;
      }
    }
    operator delete(v9);
    v9 = v41;
    v358 = v18;
    if ((unint64_t)v18 >= v10)
      goto LABEL_68;
LABEL_12:
    *v18 = xmmword_1B3523FA0;
    v19 = v18 + 1;
    v358 = v18 + 1;
    if ((unint64_t)(v18 + 1) < v10)
      goto LABEL_13;
LABEL_85:
    v49 = v19 - v9;
    v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    if ((uint64_t)(v10 - (_QWORD)v9) >> 3 > v50)
      v50 = (uint64_t)(v10 - (_QWORD)v9) >> 3;
    if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v50;
    if (v51)
    {
      if (v51 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v52 = (char *)operator new(16 * v51);
    }
    else
    {
      v52 = 0;
    }
    v53 = &v52[16 * v49];
    v10 = (unint64_t)&v52[16 * v51];
    *(_OWORD *)v53 = xmmword_1B3523FB0;
    v20 = v53 + 16;
    if (v19 == v9)
    {
      v357 = v53;
      v359 = (char *)v10;
    }
    else
    {
      do
      {
        v54 = *--v19;
        *((_OWORD *)v53 - 1) = v54;
        v53 -= 16;
      }
      while (v19 != v9);
      v9 = v357;
      v357 = v53;
      v359 = (char *)v10;
      if (!v9)
      {
        v9 = v53;
        v358 = v20;
        if ((unint64_t)v20 < v10)
          goto LABEL_14;
        goto LABEL_102;
      }
    }
    operator delete(v9);
    v9 = v53;
    v358 = v20;
    if ((unint64_t)v20 < v10)
      goto LABEL_14;
    goto LABEL_102;
  }
  v22 = operator new(0x100uLL);
  v23 = v22 + 5;
  v10 = (unint64_t)(v22 + 16);
  v22[5] = xmmword_1B3523F60;
  v15 = v22 + 6;
  if (v11 == v9)
  {
    v357 = (char *)(v22 + 5);
    v359 = (char *)(v22 + 16);
  }
  else
  {
    for (i = 0; i != -5; --i)
      v23[i - 1] = v9[i + 4];
    v9 = v357;
    v23 = v22;
    v357 = (char *)v22;
    v359 = (char *)(v22 + 16);
    if (!v9)
    {
      v9 = v22;
      v358 = v22 + 6;
      if ((unint64_t)v15 >= v10)
        goto LABEL_20;
      goto LABEL_9;
    }
  }
  operator delete(v9);
  v9 = v23;
  v358 = v15;
  if ((unint64_t)v15 >= v10)
    goto LABEL_20;
LABEL_9:
  *v15 = xmmword_1B3523F70;
  v16 = v15 + 1;
  v358 = v15 + 1;
  if ((unint64_t)(v15 + 1) < v10)
    goto LABEL_10;
LABEL_34:
  v31 = v16 - v9;
  v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if ((uint64_t)(v10 - (_QWORD)v9) >> 3 > v32)
    v32 = (uint64_t)(v10 - (_QWORD)v9) >> 3;
  if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
    v33 = 0xFFFFFFFFFFFFFFFLL;
  else
    v33 = v32;
  if (v33)
  {
    if (v33 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v34 = (char *)operator new(16 * v33);
  }
  else
  {
    v34 = 0;
  }
  v35 = &v34[16 * v31];
  v10 = (unint64_t)&v34[16 * v33];
  *(_OWORD *)v35 = xmmword_1B3523F80;
  v17 = v35 + 16;
  if (v16 == v9)
  {
    v357 = v35;
    v359 = (char *)v10;
  }
  else
  {
    do
    {
      v36 = *--v16;
      *((_OWORD *)v35 - 1) = v36;
      v35 -= 16;
    }
    while (v16 != v9);
    v9 = v357;
    v357 = v35;
    v359 = (char *)v10;
    if (!v9)
    {
      v9 = v35;
      v358 = v17;
      if ((unint64_t)v17 >= v10)
        goto LABEL_51;
      goto LABEL_11;
    }
  }
  operator delete(v9);
  v9 = v35;
  v358 = v17;
  if ((unint64_t)v17 >= v10)
    goto LABEL_51;
LABEL_11:
  *v17 = xmmword_1B3523F90;
  v18 = v17 + 1;
  v358 = v17 + 1;
  if ((unint64_t)(v17 + 1) < v10)
    goto LABEL_12;
LABEL_68:
  v43 = v18 - v9;
  v44 = v43 + 1;
  if ((unint64_t)(v43 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if ((uint64_t)(v10 - (_QWORD)v9) >> 3 > v44)
    v44 = (uint64_t)(v10 - (_QWORD)v9) >> 3;
  if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
    v45 = 0xFFFFFFFFFFFFFFFLL;
  else
    v45 = v44;
  if (v45)
  {
    if (v45 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v46 = (char *)operator new(16 * v45);
  }
  else
  {
    v46 = 0;
  }
  v47 = &v46[16 * v43];
  v10 = (unint64_t)&v46[16 * v45];
  *(_OWORD *)v47 = xmmword_1B3523FA0;
  v19 = v47 + 16;
  if (v18 == v9)
  {
    v357 = v47;
    v359 = (char *)v10;
  }
  else
  {
    do
    {
      v48 = *--v18;
      *((_OWORD *)v47 - 1) = v48;
      v47 -= 16;
    }
    while (v18 != v9);
    v9 = v357;
    v357 = v47;
    v359 = (char *)v10;
    if (!v9)
    {
      v9 = v47;
      v358 = v19;
      if ((unint64_t)v19 >= v10)
        goto LABEL_85;
      goto LABEL_13;
    }
  }
  operator delete(v9);
  v9 = v47;
  v358 = v19;
  if ((unint64_t)v19 >= v10)
    goto LABEL_85;
LABEL_13:
  *v19 = xmmword_1B3523FB0;
  v20 = v19 + 1;
  v358 = v19 + 1;
  if ((unint64_t)(v19 + 1) < v10)
  {
LABEL_14:
    *v20 = xmmword_1B3523FC0;
    v21 = v20 + 1;
    goto LABEL_125;
  }
LABEL_102:
  v55 = v20 - v9;
  v56 = v55 + 1;
  if ((unint64_t)(v55 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if ((uint64_t)(v10 - (_QWORD)v9) >> 3 > v56)
    v56 = (uint64_t)(v10 - (_QWORD)v9) >> 3;
  if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
    v57 = 0xFFFFFFFFFFFFFFFLL;
  else
    v57 = v56;
  if (v57)
  {
    if (v57 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v58 = (char *)operator new(16 * v57);
  }
  else
  {
    v58 = 0;
  }
  v59 = &v58[16 * v55];
  *(_OWORD *)v59 = xmmword_1B3523FC0;
  v21 = v59 + 16;
  if (v20 == v9)
  {
    v357 = v59;
    v359 = &v58[16 * v57];
  }
  else
  {
    do
    {
      v60 = *--v20;
      *((_OWORD *)v59 - 1) = v60;
      v59 -= 16;
    }
    while (v20 != v9);
    v9 = v357;
    v357 = v59;
    v359 = &v58[16 * v57];
    if (!v9)
      goto LABEL_124;
  }
  operator delete(v9);
LABEL_124:
  v9 = v59;
LABEL_125:
  v358 = v21;
  __p = 0;
  v355 = 0;
  v356 = 0;
  v312 = *((float32x4_t *)v9 + 11);
  v332 = *(float32x4_t *)v9;
  v291 = *((float32x4_t *)v9 + 5);
  v61 = (float32x4_t *)operator new(0x30uLL);
  *v61 = v332;
  v61[1] = v312;
  v61[2] = v291;
  v355 = v61 + 3;
  v356 = (char *)&v61[3];
  v62 = *((float32x4_t *)v9 + 5);
  __p = v61;
  v313 = v62;
  v333 = *(float32x4_t *)v9;
  v292 = *((float32x4_t *)v9 + 1);
  v63 = (float32x4_t *)operator new(0x60uLL);
  v63[4] = v313;
  v63[5] = v292;
  v64 = v61[1];
  *v63 = *v61;
  v63[1] = v64;
  v63[2] = v61[2];
  v63[3] = v333;
  __p = v63;
  v356 = (char *)&v63[6];
  operator delete(v61);
  v355 = v63 + 6;
  v314 = *((float32x4_t *)v9 + 1);
  v334 = *(float32x4_t *)v9;
  v293 = *((float32x4_t *)v9 + 7);
  v65 = (float32x4_t *)operator new(0xC0uLL);
  v65[6] = v334;
  v65[7] = v314;
  v65[8] = v293;
  v66 = v63[5];
  v65[4] = v63[4];
  v65[5] = v66;
  v67 = v63[1];
  *v65 = *v63;
  v65[1] = v67;
  v68 = v63[3];
  v65[2] = v63[2];
  v65[3] = v68;
  __p = v65;
  v356 = (char *)&v65[12];
  operator delete(v63);
  v355 = v65 + 9;
  v69 = *((float32x4_t *)v9 + 7);
  v70 = *((float32x4_t *)v9 + 10);
  v65[9] = *(float32x4_t *)v9;
  v65[10] = v69;
  v65[11] = v70;
  v355 = v65 + 12;
  v335 = *((float32x4_t *)v9 + 10);
  v294 = *(float32x4_t *)v9;
  v315 = *((float32x4_t *)v9 + 11);
  v71 = (float32x4_t *)operator new(0x180uLL);
  v71[12] = v294;
  f32 = (_OWORD *)v71[12].f32;
  v73 = (unint64_t)&v71[24];
  v71[13] = v335;
  v71[14] = v315;
  v74 = v65[11];
  v71[10] = v65[10];
  v71[11] = v74;
  v75 = v65[7];
  v71[6] = v65[6];
  v71[7] = v75;
  v76 = v65[9];
  v71[8] = v65[8];
  v71[9] = v76;
  v77 = v65[5];
  v71[4] = v65[4];
  v71[5] = v77;
  v78 = v65[3];
  v71[2] = v65[2];
  v71[3] = v78;
  v79 = v65[1];
  *v71 = *v65;
  v71[1] = v79;
  __p = v71;
  v356 = (char *)&v71[24];
  operator delete(v65);
  v355 = v71 + 15;
  v80 = *((float32x4_t *)v9 + 5);
  v81 = *((float32x4_t *)v9 + 9);
  if (&v71[15] >= &v71[24])
  {
    v295 = *((float32x4_t *)v9 + 1);
    v316 = *((float32x4_t *)v9 + 5);
    v336 = *((float32x4_t *)v9 + 9);
    v142 = (float32x4_t *)operator new(0x300uLL);
    v82 = v142 + 15;
    v73 = (unint64_t)&v142[48];
    v142[15] = v295;
    v142[16] = v316;
    v142[17] = v336;
    v143 = v142 + 15;
    if (&v71[15] != v71)
    {
      for (j = 0; j != -15; j -= 3)
      {
        v145 = (_OWORD *)v142[j].f32;
        v146 = f32[j + 1];
        v145[12] = f32[j];
        v145[13] = v146;
        v145[14] = f32[j + 2];
      }
      v143 = v142;
    }
    __p = v143;
    v356 = (char *)&v142[48];
    operator delete(v71);
    v71 = v143;
    v83 = v82 + 3;
    v355 = v82 + 3;
    v84 = *((float32x4_t *)v9 + 11);
    v85 = *((float32x4_t *)v9 + 4);
    v86 = *((float32x4_t *)v9 + 5);
    if ((unint64_t)&v82[3] < v73)
    {
LABEL_127:
      v82[3] = v86;
      v82[4] = v84;
      v87 = (char *)v83;
      v82[5] = v85;
      v88 = v83 + 3;
      v355 = v88;
      v89 = v9[10];
      v90 = v9[11];
      v91 = v9[2];
      if ((unint64_t)v88 < v73)
        goto LABEL_128;
      goto LABEL_161;
    }
  }
  else
  {
    v71[15] = *((float32x4_t *)v9 + 1);
    v71[16] = v80;
    v82 = v71 + 15;
    v71[17] = v81;
    v83 = v71 + 18;
    v355 = v71 + 18;
    v84 = *((float32x4_t *)v9 + 11);
    v85 = *((float32x4_t *)v9 + 4);
    v86 = *((float32x4_t *)v9 + 5);
    if ((unint64_t)&v71[18] < v73)
      goto LABEL_127;
  }
  v147 = 0xAAAAAAAAAAAAAAABLL * (v83 - v71) + 1;
  if (v147 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v147)
    v147 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v148 = 0x555555555555555;
  else
    v148 = v147;
  if (v148)
  {
    v296 = v86;
    v317 = v84;
    v337 = v85;
    if (v148 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v149 = (char *)operator new(48 * v148);
    v84 = v317;
    v85 = v337;
    v86 = v296;
  }
  else
  {
    v149 = 0;
  }
  v87 = &v149[16 * (v83 - v71)];
  v73 = (unint64_t)&v149[48 * v148];
  *(float32x4_t *)v87 = v86;
  *((float32x4_t *)v87 + 1) = v84;
  *((float32x4_t *)v87 + 2) = v85;
  v150 = v87;
  if (v83 != v71)
  {
    v151 = &v149[16 * (v83 - v71)];
    do
    {
      v152 = v83[-3];
      v153 = v83[-1];
      v150 = v151 - 48;
      *((float32x4_t *)v151 - 2) = v83[-2];
      *((float32x4_t *)v151 - 1) = v153;
      *((float32x4_t *)v151 - 3) = v152;
      v83 -= 3;
      v151 -= 48;
    }
    while (v83 != v71);
  }
  __p = v150;
  v356 = &v149[48 * v148];
  operator delete(v71);
  v71 = (float32x4_t *)v150;
  v88 = (float32x4_t *)(v87 + 48);
  v355 = (float32x4_t *)(v87 + 48);
  v89 = v9[10];
  v90 = v9[11];
  v91 = v9[2];
  if ((unint64_t)(v87 + 48) < v73)
  {
LABEL_128:
    *((_OWORD *)v87 + 3) = v90;
    *((_OWORD *)v87 + 4) = v89;
    k = (float32x4_t *)(v87 + 96);
    *((_OWORD *)v87 + 5) = v91;
    v355 = (float32x4_t *)(v87 + 96);
    v93 = *((float32x4_t *)v9 + 10);
    v94 = *((float32x4_t *)v9 + 6);
    v95 = *((float32x4_t *)v9 + 7);
    if ((unint64_t)(v87 + 96) < v73)
      goto LABEL_129;
    goto LABEL_174;
  }
LABEL_161:
  v154 = 0xAAAAAAAAAAAAAAABLL * (v88 - v71) + 1;
  if (v154 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v154)
    v154 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v155 = 0x555555555555555;
  else
    v155 = v154;
  if (v155)
  {
    v297 = v90;
    v318 = v89;
    v338 = v91;
    if (v155 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v156 = (char *)operator new(48 * v155);
    v89 = v318;
    v91 = v338;
    v90 = v297;
  }
  else
  {
    v156 = 0;
  }
  v157 = &v156[16 * (v88 - v71)];
  v73 = (unint64_t)&v156[48 * v155];
  *(_OWORD *)v157 = v90;
  *((_OWORD *)v157 + 1) = v89;
  *((_OWORD *)v157 + 2) = v91;
  for (k = (float32x4_t *)(v157 + 48); v88 != v71; v88 -= 3)
  {
    v158 = v88[-3];
    v159 = v88[-1];
    *((float32x4_t *)v157 - 2) = v88[-2];
    *((float32x4_t *)v157 - 1) = v159;
    *((float32x4_t *)v157 - 3) = v158;
    v157 -= 48;
  }
  __p = v157;
  v356 = &v156[48 * v155];
  operator delete(v71);
  v71 = (float32x4_t *)v157;
  v355 = k;
  v93 = *((float32x4_t *)v9 + 10);
  v94 = *((float32x4_t *)v9 + 6);
  v95 = *((float32x4_t *)v9 + 7);
  if ((unint64_t)k < v73)
  {
LABEL_129:
    *k = v93;
    k[1] = v95;
    v96 = k + 3;
    k[2] = v94;
    v355 = k + 3;
    v97 = *((float32x4_t *)v9 + 1);
    v99 = *((float32x4_t *)v9 + 7);
    v98 = *((float32x4_t *)v9 + 8);
    if ((unint64_t)&k[3] < v73)
      goto LABEL_130;
    goto LABEL_191;
  }
LABEL_174:
  v160 = 0xAAAAAAAAAAAAAAABLL * (k - v71) + 1;
  if (v160 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v160)
    v160 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v161 = 0x555555555555555;
  else
    v161 = v160;
  if (v161)
  {
    v298 = v93;
    v319 = v95;
    v339 = v94;
    if (v161 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v162 = (char *)operator new(48 * v161);
    v95 = v319;
    v94 = v339;
    v93 = v298;
  }
  else
  {
    v162 = 0;
  }
  v163 = &v162[16 * (k - v71)];
  v73 = (unint64_t)&v162[48 * v161];
  *(float32x4_t *)v163 = v93;
  *((float32x4_t *)v163 + 1) = v95;
  *((float32x4_t *)v163 + 2) = v94;
  v96 = (float32x4_t *)(v163 + 48);
  if (k == v71)
  {
    __p = &v162[16 * (k - v71)];
    v356 = &v162[48 * v161];
LABEL_189:
    operator delete(v71);
    goto LABEL_190;
  }
  do
  {
    v164 = k[-3];
    v165 = k[-1];
    *((float32x4_t *)v163 - 2) = k[-2];
    *((float32x4_t *)v163 - 1) = v165;
    *((float32x4_t *)v163 - 3) = v164;
    v163 -= 48;
    k -= 3;
  }
  while (k != v71);
  __p = v163;
  v356 = &v162[48 * v161];
  if (v71)
    goto LABEL_189;
LABEL_190:
  v71 = (float32x4_t *)v163;
  v355 = v96;
  v97 = *((float32x4_t *)v9 + 1);
  v99 = *((float32x4_t *)v9 + 7);
  v98 = *((float32x4_t *)v9 + 8);
  if ((unint64_t)v96 < v73)
  {
LABEL_130:
    *v96 = v99;
    v96[1] = v97;
    v100 = v96 + 3;
    v96[2] = v98;
    v355 = v96 + 3;
    v101 = *((float32x4_t *)v9 + 9);
    v103 = *((float32x4_t *)v9 + 3);
    v102 = *((float32x4_t *)v9 + 4);
    if ((unint64_t)&v96[3] < v73)
      goto LABEL_131;
    goto LABEL_208;
  }
LABEL_191:
  v166 = 0xAAAAAAAAAAAAAAABLL * (v96 - v71) + 1;
  if (v166 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v166)
    v166 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v167 = 0x555555555555555;
  else
    v167 = v166;
  if (v167)
  {
    v299 = v99;
    v320 = v97;
    v340 = v98;
    if (v167 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v168 = (char *)operator new(48 * v167);
    v97 = v320;
    v98 = v340;
    v99 = v299;
  }
  else
  {
    v168 = 0;
  }
  v169 = &v168[16 * (v96 - v71)];
  v73 = (unint64_t)&v168[48 * v167];
  *(float32x4_t *)v169 = v99;
  *((float32x4_t *)v169 + 1) = v97;
  *((float32x4_t *)v169 + 2) = v98;
  v100 = (float32x4_t *)(v169 + 48);
  if (v96 == v71)
  {
    __p = &v168[16 * (v96 - v71)];
    v356 = &v168[48 * v167];
LABEL_206:
    operator delete(v71);
    goto LABEL_207;
  }
  do
  {
    v170 = v96[-3];
    v171 = v96[-1];
    *((float32x4_t *)v169 - 2) = v96[-2];
    *((float32x4_t *)v169 - 1) = v171;
    *((float32x4_t *)v169 - 3) = v170;
    v169 -= 48;
    v96 -= 3;
  }
  while (v96 != v71);
  __p = v169;
  v356 = &v168[48 * v167];
  if (v71)
    goto LABEL_206;
LABEL_207:
  v71 = (float32x4_t *)v169;
  v355 = v100;
  v101 = *((float32x4_t *)v9 + 9);
  v103 = *((float32x4_t *)v9 + 3);
  v102 = *((float32x4_t *)v9 + 4);
  if ((unint64_t)v100 < v73)
  {
LABEL_131:
    *v100 = v103;
    v100[1] = v101;
    v104 = v100 + 3;
    v100[2] = v102;
    v355 = v100 + 3;
    v106 = *((float32x4_t *)v9 + 3);
    v105 = *((float32x4_t *)v9 + 4);
    v107 = *((float32x4_t *)v9 + 2);
    if ((unint64_t)&v100[3] < v73)
      goto LABEL_132;
    goto LABEL_225;
  }
LABEL_208:
  v172 = 0xAAAAAAAAAAAAAAABLL * (v100 - v71) + 1;
  if (v172 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v172)
    v172 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v173 = 0x555555555555555;
  else
    v173 = v172;
  if (v173)
  {
    v300 = v103;
    v321 = v101;
    v341 = v102;
    if (v173 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v174 = (char *)operator new(48 * v173);
    v101 = v321;
    v102 = v341;
    v103 = v300;
  }
  else
  {
    v174 = 0;
  }
  v175 = &v174[16 * (v100 - v71)];
  v73 = (unint64_t)&v174[48 * v173];
  *(float32x4_t *)v175 = v103;
  *((float32x4_t *)v175 + 1) = v101;
  *((float32x4_t *)v175 + 2) = v102;
  v104 = (float32x4_t *)(v175 + 48);
  if (v100 == v71)
  {
    __p = &v174[16 * (v100 - v71)];
    v356 = (char *)v73;
LABEL_223:
    operator delete(v71);
    goto LABEL_224;
  }
  do
  {
    v176 = v100[-3];
    v177 = v100[-1];
    *((float32x4_t *)v175 - 2) = v100[-2];
    *((float32x4_t *)v175 - 1) = v177;
    *((float32x4_t *)v175 - 3) = v176;
    v175 -= 48;
    v100 -= 3;
  }
  while (v100 != v71);
  __p = v175;
  v356 = (char *)v73;
  if (v71)
    goto LABEL_223;
LABEL_224:
  v71 = (float32x4_t *)v175;
  v355 = v104;
  v106 = *((float32x4_t *)v9 + 3);
  v105 = *((float32x4_t *)v9 + 4);
  v107 = *((float32x4_t *)v9 + 2);
  if ((unint64_t)v104 < v73)
  {
LABEL_132:
    *v104 = v106;
    v104[1] = v105;
    v108 = v104 + 3;
    v104[2] = v107;
    v355 = v104 + 3;
    v109 = (float32x4_t *)v357;
    v110 = *((float32x4_t *)v357 + 2);
    v111 = *((float32x4_t *)v357 + 3);
    v112 = *((float32x4_t *)v357 + 6);
    if ((unint64_t)&v104[3] < v73)
      goto LABEL_133;
    goto LABEL_242;
  }
LABEL_225:
  v178 = 0xAAAAAAAAAAAAAAABLL * (v104 - v71) + 1;
  if (v178 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v178)
    v178 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v179 = 0x555555555555555;
  else
    v179 = v178;
  if (v179)
  {
    v301 = v106;
    v322 = v105;
    v342 = v107;
    if (v179 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v180 = (char *)operator new(48 * v179);
    v105 = v322;
    v107 = v342;
    v106 = v301;
  }
  else
  {
    v180 = 0;
  }
  v181 = &v180[16 * (v104 - v71)];
  v73 = (unint64_t)&v180[48 * v179];
  *(float32x4_t *)v181 = v106;
  *((float32x4_t *)v181 + 1) = v105;
  *((float32x4_t *)v181 + 2) = v107;
  v108 = (float32x4_t *)(v181 + 48);
  if (v104 == v71)
  {
    __p = &v180[16 * (v104 - v71)];
    v356 = &v180[48 * v179];
LABEL_240:
    operator delete(v71);
    goto LABEL_241;
  }
  do
  {
    v182 = v104[-3];
    v183 = v104[-1];
    *((float32x4_t *)v181 - 2) = v104[-2];
    *((float32x4_t *)v181 - 1) = v183;
    *((float32x4_t *)v181 - 3) = v182;
    v181 -= 48;
    v104 -= 3;
  }
  while (v104 != v71);
  __p = v181;
  v356 = &v180[48 * v179];
  if (v71)
    goto LABEL_240;
LABEL_241:
  v71 = (float32x4_t *)v181;
  v355 = v108;
  v109 = (float32x4_t *)v357;
  v110 = *((float32x4_t *)v357 + 2);
  v111 = *((float32x4_t *)v357 + 3);
  v112 = *((float32x4_t *)v357 + 6);
  if ((unint64_t)v108 < v73)
  {
LABEL_133:
    *v108 = v111;
    v108[1] = v110;
    v113 = v108 + 3;
    v108[2] = v112;
    v355 = v108 + 3;
    v114 = v109[3];
    v115 = v109[6];
    v116 = v109[8];
    if ((unint64_t)&v108[3] < v73)
      goto LABEL_134;
    goto LABEL_259;
  }
LABEL_242:
  v184 = 0xAAAAAAAAAAAAAAABLL * (v108 - v71) + 1;
  if (v184 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v184)
    v184 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v185 = 0x555555555555555;
  else
    v185 = v184;
  if (v185)
  {
    v302 = v111;
    v323 = v110;
    v343 = v112;
    if (v185 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v186 = (char *)operator new(48 * v185);
    v110 = v323;
    v112 = v343;
    v111 = v302;
  }
  else
  {
    v186 = 0;
  }
  v187 = &v186[16 * (v108 - v71)];
  v73 = (unint64_t)&v186[48 * v185];
  *(float32x4_t *)v187 = v111;
  *((float32x4_t *)v187 + 1) = v110;
  *((float32x4_t *)v187 + 2) = v112;
  v113 = (float32x4_t *)(v187 + 48);
  if (v108 == v71)
  {
    __p = &v186[16 * (v108 - v71)];
    v356 = &v186[48 * v185];
LABEL_257:
    operator delete(v71);
    goto LABEL_258;
  }
  do
  {
    v188 = v108[-3];
    v189 = v108[-1];
    *((float32x4_t *)v187 - 2) = v108[-2];
    *((float32x4_t *)v187 - 1) = v189;
    *((float32x4_t *)v187 - 3) = v188;
    v187 -= 48;
    v108 -= 3;
  }
  while (v108 != v71);
  __p = v187;
  v356 = &v186[48 * v185];
  if (v71)
    goto LABEL_257;
LABEL_258:
  v71 = (float32x4_t *)v187;
  v355 = v113;
  v114 = v109[3];
  v115 = v109[6];
  v116 = v109[8];
  if ((unint64_t)v113 < v73)
  {
LABEL_134:
    *v113 = v114;
    v113[1] = v115;
    v117 = v113 + 3;
    v113[2] = v116;
    v355 = v113 + 3;
    v118 = v109[3];
    v120 = v109[8];
    v119 = v109[9];
    if ((unint64_t)&v113[3] < v73)
      goto LABEL_135;
    goto LABEL_276;
  }
LABEL_259:
  v190 = 0xAAAAAAAAAAAAAAABLL * (v113 - v71) + 1;
  if (v190 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v190)
    v190 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v191 = 0x555555555555555;
  else
    v191 = v190;
  if (v191)
  {
    v303 = v114;
    v324 = v115;
    v344 = v116;
    if (v191 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v192 = (char *)operator new(48 * v191);
    v115 = v324;
    v116 = v344;
    v114 = v303;
  }
  else
  {
    v192 = 0;
  }
  v193 = &v192[16 * (v113 - v71)];
  v73 = (unint64_t)&v192[48 * v191];
  *(float32x4_t *)v193 = v114;
  *((float32x4_t *)v193 + 1) = v115;
  *((float32x4_t *)v193 + 2) = v116;
  v117 = (float32x4_t *)(v193 + 48);
  if (v113 == v71)
  {
    __p = &v192[16 * (v113 - v71)];
    v356 = &v192[48 * v191];
LABEL_274:
    operator delete(v71);
    goto LABEL_275;
  }
  do
  {
    v194 = v113[-3];
    v195 = v113[-1];
    *((float32x4_t *)v193 - 2) = v113[-2];
    *((float32x4_t *)v193 - 1) = v195;
    *((float32x4_t *)v193 - 3) = v194;
    v193 -= 48;
    v113 -= 3;
  }
  while (v113 != v71);
  __p = v193;
  v356 = &v192[48 * v191];
  if (v71)
    goto LABEL_274;
LABEL_275:
  v71 = (float32x4_t *)v193;
  v355 = v117;
  v118 = v109[3];
  v120 = v109[8];
  v119 = v109[9];
  if ((unint64_t)v117 < v73)
  {
LABEL_135:
    *v117 = v118;
    v117[1] = v120;
    v121 = v117 + 3;
    v117[2] = v119;
    v355 = v117 + 3;
    v122 = v109[9];
    v124 = v109[4];
    v123 = v109[5];
    if ((unint64_t)&v117[3] < v73)
      goto LABEL_136;
    goto LABEL_293;
  }
LABEL_276:
  v196 = 0xAAAAAAAAAAAAAAABLL * (v117 - v71) + 1;
  if (v196 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v196)
    v196 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v197 = 0x555555555555555;
  else
    v197 = v196;
  if (v197)
  {
    v304 = v118;
    v325 = v120;
    v345 = v119;
    if (v197 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v198 = (char *)operator new(48 * v197);
    v120 = v325;
    v119 = v345;
    v118 = v304;
  }
  else
  {
    v198 = 0;
  }
  v199 = &v198[16 * (v117 - v71)];
  v73 = (unint64_t)&v198[48 * v197];
  *(float32x4_t *)v199 = v118;
  *((float32x4_t *)v199 + 1) = v120;
  *((float32x4_t *)v199 + 2) = v119;
  v121 = (float32x4_t *)(v199 + 48);
  if (v117 == v71)
  {
    __p = &v198[16 * (v117 - v71)];
    v356 = &v198[48 * v197];
LABEL_291:
    operator delete(v71);
    goto LABEL_292;
  }
  do
  {
    v200 = v117[-3];
    v201 = v117[-1];
    *((float32x4_t *)v199 - 2) = v117[-2];
    *((float32x4_t *)v199 - 1) = v201;
    *((float32x4_t *)v199 - 3) = v200;
    v199 -= 48;
    v117 -= 3;
  }
  while (v117 != v71);
  __p = v199;
  v356 = &v198[48 * v197];
  if (v71)
    goto LABEL_291;
LABEL_292:
  v71 = (float32x4_t *)v199;
  v355 = v121;
  v122 = v109[9];
  v124 = v109[4];
  v123 = v109[5];
  if ((unint64_t)v121 < v73)
  {
LABEL_136:
    *v121 = v124;
    v121[1] = v122;
    v125 = v121 + 3;
    v121[2] = v123;
    v355 = v121 + 3;
    v126 = v109[2];
    v127 = v109[4];
    v128 = v109[11];
    if ((unint64_t)&v121[3] < v73)
      goto LABEL_137;
    goto LABEL_310;
  }
LABEL_293:
  v202 = 0xAAAAAAAAAAAAAAABLL * (v121 - v71) + 1;
  if (v202 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v202)
    v202 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v203 = 0x555555555555555;
  else
    v203 = v202;
  if (v203)
  {
    v305 = v124;
    v326 = v122;
    v346 = v123;
    if (v203 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v204 = (char *)operator new(48 * v203);
    v122 = v326;
    v123 = v346;
    v124 = v305;
  }
  else
  {
    v204 = 0;
  }
  v205 = &v204[16 * (v121 - v71)];
  v73 = (unint64_t)&v204[48 * v203];
  *(float32x4_t *)v205 = v124;
  *((float32x4_t *)v205 + 1) = v122;
  *((float32x4_t *)v205 + 2) = v123;
  v125 = (float32x4_t *)(v205 + 48);
  if (v121 == v71)
  {
    __p = &v204[16 * (v121 - v71)];
    v356 = &v204[48 * v203];
LABEL_308:
    operator delete(v71);
    goto LABEL_309;
  }
  do
  {
    v206 = v121[-3];
    v207 = v121[-1];
    *((float32x4_t *)v205 - 2) = v121[-2];
    *((float32x4_t *)v205 - 1) = v207;
    *((float32x4_t *)v205 - 3) = v206;
    v205 -= 48;
    v121 -= 3;
  }
  while (v121 != v71);
  __p = v205;
  v356 = &v204[48 * v203];
  if (v71)
    goto LABEL_308;
LABEL_309:
  v71 = (float32x4_t *)v205;
  v355 = v125;
  v126 = v109[2];
  v127 = v109[4];
  v128 = v109[11];
  if ((unint64_t)v125 < v73)
  {
LABEL_137:
    *v125 = v126;
    v125[1] = v127;
    v129 = v125 + 3;
    v125[2] = v128;
    v355 = v125 + 3;
    v130 = v109[6];
    v131 = v109[2];
    v132 = v109[10];
    if ((unint64_t)&v125[3] < v73)
      goto LABEL_138;
    goto LABEL_327;
  }
LABEL_310:
  v208 = 0xAAAAAAAAAAAAAAABLL * (v125 - v71) + 1;
  if (v208 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v208)
    v208 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v209 = 0x555555555555555;
  else
    v209 = v208;
  if (v209)
  {
    v306 = v126;
    v327 = v127;
    v347 = v128;
    if (v209 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v210 = (char *)operator new(48 * v209);
    v127 = v327;
    v128 = v347;
    v126 = v306;
  }
  else
  {
    v210 = 0;
  }
  v211 = &v210[16 * (v125 - v71)];
  v73 = (unint64_t)&v210[48 * v209];
  *(float32x4_t *)v211 = v126;
  *((float32x4_t *)v211 + 1) = v127;
  *((float32x4_t *)v211 + 2) = v128;
  v129 = (float32x4_t *)(v211 + 48);
  if (v125 == v71)
  {
    __p = &v210[16 * (v125 - v71)];
    v356 = &v210[48 * v209];
LABEL_325:
    operator delete(v71);
    goto LABEL_326;
  }
  do
  {
    v212 = v125[-3];
    v213 = v125[-1];
    *((float32x4_t *)v211 - 2) = v125[-2];
    *((float32x4_t *)v211 - 1) = v213;
    *((float32x4_t *)v211 - 3) = v212;
    v211 -= 48;
    v125 -= 3;
  }
  while (v125 != v71);
  __p = v211;
  v356 = &v210[48 * v209];
  if (v71)
    goto LABEL_325;
LABEL_326:
  v71 = (float32x4_t *)v211;
  v355 = v129;
  v130 = v109[6];
  v131 = v109[2];
  v132 = v109[10];
  if ((unint64_t)v129 < v73)
  {
LABEL_138:
    *v129 = v130;
    v129[1] = v131;
    v133 = v129 + 3;
    v129[2] = v132;
    v355 = v129 + 3;
    v134 = v109[7];
    v135 = v109[8];
    v136 = v109[6];
    if ((unint64_t)&v129[3] < v73)
      goto LABEL_139;
    goto LABEL_344;
  }
LABEL_327:
  v214 = 0xAAAAAAAAAAAAAAABLL * (v129 - v71) + 1;
  if (v214 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v214)
    v214 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v215 = 0x555555555555555;
  else
    v215 = v214;
  if (v215)
  {
    v307 = v130;
    v328 = v131;
    v348 = v132;
    if (v215 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v216 = (char *)operator new(48 * v215);
    v131 = v328;
    v132 = v348;
    v130 = v307;
  }
  else
  {
    v216 = 0;
  }
  v217 = &v216[16 * (v129 - v71)];
  v73 = (unint64_t)&v216[48 * v215];
  *(float32x4_t *)v217 = v130;
  *((float32x4_t *)v217 + 1) = v131;
  *((float32x4_t *)v217 + 2) = v132;
  v133 = (float32x4_t *)(v217 + 48);
  if (v129 == v71)
  {
    __p = &v216[16 * (v129 - v71)];
    v356 = &v216[48 * v215];
LABEL_342:
    operator delete(v71);
    goto LABEL_343;
  }
  do
  {
    v218 = v129[-3];
    v219 = v129[-1];
    *((float32x4_t *)v217 - 2) = v129[-2];
    *((float32x4_t *)v217 - 1) = v219;
    *((float32x4_t *)v217 - 3) = v218;
    v217 -= 48;
    v129 -= 3;
  }
  while (v129 != v71);
  __p = v217;
  v356 = &v216[48 * v215];
  if (v71)
    goto LABEL_342;
LABEL_343:
  v71 = (float32x4_t *)v217;
  v355 = v133;
  v134 = v109[7];
  v135 = v109[8];
  v136 = v109[6];
  if ((unint64_t)v133 < v73)
  {
LABEL_139:
    *v133 = v135;
    v133[1] = v136;
    v137 = v133 + 3;
    v133[2] = v134;
    v355 = v133 + 3;
    v138 = v109[8];
    v139 = v109[9];
    v140 = v109[1];
    v287 = a2;
    if ((unint64_t)&v133[3] < v73)
      goto LABEL_140;
    goto LABEL_361;
  }
LABEL_344:
  v220 = 0xAAAAAAAAAAAAAAABLL * (v133 - v71) + 1;
  if (v220 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v220)
    v220 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v221 = 0x555555555555555;
  else
    v221 = v220;
  if (v221)
  {
    v308 = v135;
    v329 = v136;
    v349 = v134;
    if (v221 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v222 = (char *)operator new(48 * v221);
    v136 = v329;
    v134 = v349;
    v135 = v308;
  }
  else
  {
    v222 = 0;
  }
  v223 = &v222[16 * (v133 - v71)];
  v73 = (unint64_t)&v222[48 * v221];
  *(float32x4_t *)v223 = v135;
  *((float32x4_t *)v223 + 1) = v136;
  *((float32x4_t *)v223 + 2) = v134;
  v137 = (float32x4_t *)(v223 + 48);
  if (v133 == v71)
  {
    __p = &v222[16 * (v133 - v71)];
    v356 = &v222[48 * v221];
LABEL_359:
    operator delete(v71);
    goto LABEL_360;
  }
  do
  {
    v224 = v133[-3];
    v225 = v133[-1];
    *((float32x4_t *)v223 - 2) = v133[-2];
    *((float32x4_t *)v223 - 1) = v225;
    *((float32x4_t *)v223 - 3) = v224;
    v223 -= 48;
    v133 -= 3;
  }
  while (v133 != v71);
  __p = v223;
  v356 = &v222[48 * v221];
  if (v71)
    goto LABEL_359;
LABEL_360:
  v71 = (float32x4_t *)v223;
  v355 = v137;
  v138 = v109[8];
  v139 = v109[9];
  v140 = v109[1];
  v287 = a2;
  if ((unint64_t)v137 < v73)
  {
LABEL_140:
    *v137 = v139;
    v137[1] = v138;
    v141 = v137 + 3;
    v137[2] = v140;
    v355 = v137 + 3;
    if (a1 < 1)
      goto LABEL_458;
    goto LABEL_378;
  }
LABEL_361:
  v226 = 0xAAAAAAAAAAAAAAABLL * (v137 - v71) + 1;
  if (v226 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4) > v226)
    v226 = 0x5555555555555556 * ((uint64_t)(v73 - (_QWORD)v71) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v227 = 0x555555555555555;
  else
    v227 = v226;
  if (v227)
  {
    v309 = v139;
    v330 = v138;
    v350 = v140;
    if (v227 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v228 = (char *)operator new(48 * v227);
    v138 = v330;
    v140 = v350;
    v139 = v309;
  }
  else
  {
    v228 = 0;
  }
  v229 = (float32x4_t *)&v228[16 * (v137 - v71)];
  v230 = &v228[48 * v227];
  *v229 = v139;
  v229[1] = v138;
  v229[2] = v140;
  v141 = v229 + 3;
  if (v137 == v71)
  {
    __p = &v228[16 * (v137 - v71)];
    v356 = v230;
    goto LABEL_377;
  }
  do
  {
    v231 = v137[-3];
    v232 = v137[-1];
    v229[-2] = v137[-2];
    v229[-1] = v232;
    v229[-3] = v231;
    v229 -= 3;
    v137 -= 3;
  }
  while (v137 != v71);
  __p = v229;
  v356 = v230;
  if (v71)
  {
LABEL_377:
    operator delete(v71);
    v71 = v229;
    v355 = v141;
    if (a1 < 1)
      goto LABEL_458;
    goto LABEL_378;
  }
  v71 = v229;
  v355 = v141;
  if (a1 >= 1)
  {
LABEL_378:
    for (m = 0; m != a1; ++m)
    {
      v352 = 0;
      v353 = 0;
      if (v141 == v71)
      {
        v141 = 0;
        v286 = 0;
        __p = 0;
        v355 = 0;
        v356 = 0;
        if (!v71)
          goto LABEL_379;
LABEL_457:
        operator delete(v71);
        goto LABEL_379;
      }
      v234 = 0;
      v141 = 0;
      v235 = 0;
      do
      {
        v236 = &v71[3 * v235];
        v237 = v236[1];
        v238 = vaddq_f32(*v236, v237);
        v239 = (int32x4_t)vmulq_f32(v238, v238);
        v239.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v239, 2), vadd_f32(*(float32x2_t *)v239.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v239.i8, 1))).u32[0];
        v240 = vrsqrte_f32((float32x2_t)v239.u32[0]);
        v241 = vmul_f32(v240, vrsqrts_f32((float32x2_t)v239.u32[0], vmul_f32(v240, v240)));
        v242 = vmulq_n_f32(v238, vmul_f32(v241, vrsqrts_f32((float32x2_t)v239.u32[0], vmul_f32(v241, v241))).f32[0]);
        v243 = v236[2];
        v244 = vaddq_f32(v237, v243);
        v245 = (int32x4_t)vmulq_f32(v244, v244);
        v245.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v245, 2), vadd_f32(*(float32x2_t *)v245.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v245.i8, 1))).u32[0];
        v246 = vrsqrte_f32((float32x2_t)v245.u32[0]);
        v247 = vmul_f32(v246, vrsqrts_f32((float32x2_t)v245.u32[0], vmul_f32(v246, v246)));
        v248 = vmulq_n_f32(v244, vmul_f32(v247, vrsqrts_f32((float32x2_t)v245.u32[0], vmul_f32(v247, v247))).f32[0]);
        v249 = vaddq_f32(*v236, v243);
        v250 = (int32x4_t)vmulq_f32(v249, v249);
        v250.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v250, 2), vadd_f32(*(float32x2_t *)v250.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v250.i8, 1))).u32[0];
        *(float32x2_t *)v243.f32 = vrsqrte_f32((float32x2_t)v250.u32[0]);
        *(float32x2_t *)v243.f32 = vmul_f32(*(float32x2_t *)v243.f32, vrsqrts_f32((float32x2_t)v250.u32[0], vmul_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v243.f32)));
        v251 = vmulq_n_f32(v249, vmul_f32(*(float32x2_t *)v243.f32, vrsqrts_f32((float32x2_t)v250.u32[0], vmul_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v243.f32))).f32[0]);
        v331 = v251;
        v351 = v248;
        v310 = v242;
        if ((unint64_t)v141 < v234)
        {
          *v141 = v242;
          v141[1] = v248;
          v141[2] = v251;
          v252 = v141 + 3;
          v234 = v353;
          goto LABEL_401;
        }
        v253 = 0xAAAAAAAAAAAAAAABLL * (v141 - v352) + 1;
        if (v253 > 0x555555555555555)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v234 - (_QWORD)v352) >> 4) > v253)
          v253 = 0x5555555555555556 * ((uint64_t)(v234 - (_QWORD)v352) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v234 - (_QWORD)v352) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v254 = 0x555555555555555;
        else
          v254 = v253;
        if (v254)
        {
          if (v254 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v255 = (char *)operator new(48 * v254);
          v251 = v331;
          v248 = v351;
          v242 = v310;
          v256 = (float32x4_t *)&v255[16 * (v141 - v352)];
          *v256 = v310;
          v256[1] = v351;
          v256[2] = v331;
          v257 = v256;
          if (v141 == v352)
            goto LABEL_399;
        }
        else
        {
          v255 = 0;
          v256 = (float32x4_t *)(16 * (v141 - v352));
          *v256 = v242;
          v256[1] = v248;
          v256[2] = v251;
          v257 = v256;
          if (v141 == v352)
            goto LABEL_399;
        }
        do
        {
          v258 = v141[-3];
          v259 = v141[-1];
          v257[-2] = v141[-2];
          v257[-1] = v259;
          v257[-3] = v258;
          v257 -= 3;
          v141 -= 3;
        }
        while (v141 != v352);
        v141 = v352;
LABEL_399:
        v234 = (unint64_t)&v255[48 * v254];
        v252 = v256 + 3;
        v352 = v257;
        v353 = v234;
        if (v141)
        {
          operator delete(v141);
          v242 = v310;
          v251 = v331;
          v248 = v351;
        }
LABEL_401:
        v260 = *v236;
        if ((unint64_t)v252 < v234)
        {
          *v252 = v260;
          v252[1] = v242;
          v261 = v252 + 3;
          v252[2] = v251;
          v262 = v236[1];
          if ((unint64_t)&v252[3] < v234)
            goto LABEL_418;
          goto LABEL_421;
        }
        v263 = v352;
        v264 = 0xAAAAAAAAAAAAAAABLL * (v252 - v352) + 1;
        if (v264 > 0x555555555555555)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v234 - (_QWORD)v352) >> 4) > v264)
          v264 = 0x5555555555555556 * ((uint64_t)(v234 - (_QWORD)v352) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v234 - (_QWORD)v352) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v265 = 0x555555555555555;
        else
          v265 = v264;
        if (v265)
        {
          v289 = *v236;
          if (v265 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v266 = (char *)operator new(48 * v265);
          v251 = v331;
          v248 = v351;
          v260 = v289;
          v242 = v310;
        }
        else
        {
          v266 = 0;
        }
        v267 = (float32x4_t *)&v266[16 * (v252 - v352)];
        v234 = (unint64_t)&v266[48 * v265];
        *v267 = v260;
        v267[1] = v242;
        v267[2] = v251;
        v261 = v267 + 3;
        if (v252 == v352)
        {
          v352 = (float32x4_t *)&v266[16 * (v252 - v352)];
          v353 = v234;
          v263 = v252;
        }
        else
        {
          do
          {
            v268 = v252[-3];
            v269 = v252[-1];
            v267[-2] = v252[-2];
            v267[-1] = v269;
            v267[-3] = v268;
            v267 -= 3;
            v252 -= 3;
          }
          while (v252 != v352);
          v352 = v267;
          v353 = v234;
          if (!v263)
          {
            v262 = v236[1];
            if ((unint64_t)v261 < v234)
              goto LABEL_418;
            goto LABEL_421;
          }
        }
        operator delete(v263);
        v242 = v310;
        v251 = v331;
        v248 = v351;
        v262 = v236[1];
        if ((unint64_t)v261 < v234)
        {
LABEL_418:
          *v261 = v242;
          v261[1] = v262;
          v270 = v261 + 3;
          v261[2] = v248;
          goto LABEL_437;
        }
LABEL_421:
        v271 = v352;
        v272 = 0xAAAAAAAAAAAAAAABLL * (v261 - v352) + 1;
        if (v272 > 0x555555555555555)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v234 - (_QWORD)v352) >> 4) > v272)
          v272 = 0x5555555555555556 * ((uint64_t)(v234 - (_QWORD)v352) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v234 - (_QWORD)v352) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v273 = 0x555555555555555;
        else
          v273 = v272;
        if (v273)
        {
          v290 = v262;
          if (v273 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v274 = (char *)operator new(48 * v273);
          v251 = v331;
          v248 = v351;
          v262 = v290;
          v242 = v310;
        }
        else
        {
          v274 = 0;
        }
        v275 = (float32x4_t *)&v274[16 * (v261 - v352)];
        v234 = (unint64_t)&v274[48 * v273];
        *v275 = v242;
        v275[1] = v262;
        v275[2] = v248;
        v270 = v275 + 3;
        if (v261 == v352)
        {
          v352 = (float32x4_t *)&v274[16 * (v261 - v352)];
          v353 = v234;
          v271 = v261;
LABEL_436:
          operator delete(v271);
          v251 = v331;
          v248 = v351;
          goto LABEL_437;
        }
        do
        {
          v276 = v261[-3];
          v277 = v261[-1];
          v275[-2] = v261[-2];
          v275[-1] = v277;
          v275[-3] = v276;
          v275 -= 3;
          v261 -= 3;
        }
        while (v261 != v352);
        v352 = v275;
        v353 = v234;
        if (v271)
          goto LABEL_436;
LABEL_437:
        v278 = v236[2];
        if ((unint64_t)v270 < v234)
        {
          *v270 = v251;
          v270[1] = v248;
          v141 = v270 + 3;
          v270[2] = v278;
          goto LABEL_383;
        }
        v279 = v352;
        v280 = 0xAAAAAAAAAAAAAAABLL * (v270 - v352) + 1;
        if (v280 > 0x555555555555555)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v234 - (_QWORD)v352) >> 4) > v280)
          v280 = 0x5555555555555556 * ((uint64_t)(v234 - (_QWORD)v352) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v234 - (_QWORD)v352) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v281 = 0x555555555555555;
        else
          v281 = v280;
        if (v281)
        {
          v311 = v278;
          if (v281 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v282 = (char *)operator new(48 * v281);
          v251 = v331;
          v248 = v351;
          v278 = v311;
        }
        else
        {
          v282 = 0;
        }
        v283 = (float32x4_t *)&v282[16 * (v270 - v352)];
        v234 = (unint64_t)&v282[48 * v281];
        *v283 = v251;
        v283[1] = v248;
        v283[2] = v278;
        v141 = v283 + 3;
        if (v270 == v352)
        {
          v352 = (float32x4_t *)&v282[16 * (v270 - v352)];
          v353 = v234;
          v279 = v270;
LABEL_453:
          operator delete(v279);
          goto LABEL_383;
        }
        do
        {
          v284 = v270[-3];
          v285 = v270[-1];
          v283[-2] = v270[-2];
          v283[-1] = v285;
          v283[-3] = v284;
          v283 -= 3;
          v270 -= 3;
        }
        while (v270 != v352);
        v352 = v283;
        v353 = v234;
        if (v279)
          goto LABEL_453;
LABEL_383:
        ++v235;
        v71 = (float32x4_t *)__p;
      }
      while (v235 < 0xAAAAAAAAAAAAAAABLL * (((char *)v355 - (_BYTE *)__p) >> 4));
      v286 = v352;
      __p = v352;
      v355 = v141;
      v356 = (char *)v234;
      if (v71)
        goto LABEL_457;
LABEL_379:
      v71 = v286;
    }
  }
LABEL_458:
  project_util::fill_flat_array(&__p, v287);
  if (__p)
    operator delete(__p);
  if (v357)
    operator delete(v357);
}

void sub_1B2AC2660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  if (__p)
    operator delete(__p);
  v25 = *(void **)(v23 - 112);
  if (v25)
  {
    *(_QWORD *)(v23 - 104) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void HGEquirectProject::HGEquirectProject(HGEquirectProject *this)
{
  _OWORD *v2;
  uint64_t v3;

  v2 = (_OWORD *)((char *)this + 408);
  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v3 = off_1E652BE28;
  *v2 = xmmword_1B304F230;
  v2[1] = xmmword_1B304F230;
  *(_QWORD *)(v3 + 440) = 0x423400003F800000;
  *(_DWORD *)(v3 + 448) = 1110704128;
  *(_BYTE *)(v3 + 452) = 0;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_WORD *)(v3 + 496) = 0;
  *(_OWORD *)((char *)v2 + 92) = xmmword_1B304FAB0;
  *(_OWORD *)((char *)v2 + 108) = xmmword_1B3050190;
  *(_OWORD *)((char *)v2 + 124) = xmmword_1B304FAB0;
  *(_OWORD *)((char *)v2 + 140) = xmmword_1B3050190;
  HGNode::SetFlags((HGNode *)v3, 0, 2);
  (*(void (**)(HGEquirectProject *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 512);
  (*(void (**)(HGEquirectProject *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 1024);
  (*(void (**)(HGEquirectProject *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 32);
}

void sub_1B2AC283C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGEquirectProject::~HGEquirectProject(HGNode *this)
{
  void *v1;

  HGNode::~HGNode(this);
  HGObject::operator delete(v1);
}

uint64_t HGEquirectProject::GetDOD(HGEquirectProject *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  HGRect v34;

  v34 = a4;
  if (!a3 && HGRect::IsNull(&v34))
    return 0;
  v6 = HGRectMake4f(*((unsigned int *)this + 122), (float)-*((_DWORD *)this + 122) * 0.5, (float)-*((_DWORD *)this + 123) * 0.5, (float)*((int *)this + 122) * 0.5, (float)*((int *)this + 123) * 0.5);
  v8 = *((float *)this + 125);
  v9 = 1.0 / v8;
  v10 = (float)-*((float *)this + 128) / v8;
  v11 = *((float *)this + 130);
  v12 = 1.0 / v11;
  v13 = (float)-*((float *)this + 132) / v11;
  v14 = v9 * (float)(int)v6;
  v15 = (float)SHIDWORD(v6) * 0.0;
  v16 = v10 + (float)(v14 + v15);
  v17 = (float)(int)v6 * 0.0;
  v18 = v12 * (float)SHIDWORD(v6);
  v19 = v13 + (float)(v17 + v18);
  v20 = v9 * (float)(int)v7;
  v21 = v10 + (float)(v20 + v15);
  v22 = (float)(int)v7 * 0.0;
  v23 = v13 + (float)(v22 + v18);
  v24 = (float)SHIDWORD(v7) * 0.0;
  v25 = v10 + (float)(v14 + v24);
  v26 = v12 * (float)SHIDWORD(v7);
  v27 = v13 + (float)(v17 + v26);
  v28 = v10 + (float)(v20 + v24);
  v29 = v13 + (float)(v22 + v26);
  if (v21 >= v16)
    v30 = v16;
  else
    v30 = v21;
  if (v25 < v30)
    v30 = v25;
  if (v28 < v30)
    v30 = v28;
  if (v23 >= v19)
    v31 = v19;
  else
    v31 = v23;
  if (v27 < v31)
    v31 = v27;
  if (v29 < v31)
    v31 = v29;
  if (v16 >= v21)
    v32 = v16;
  else
    v32 = v21;
  if (v32 < v25)
    v32 = v25;
  if (v32 >= v28)
    v28 = v32;
  if (v19 >= v23)
    v33 = v19;
  else
    v33 = v23;
  if (v33 >= v27)
    v27 = v33;
  if (v27 >= v29)
    v29 = v27;
  return HGRectMake4f(HIDWORD(v7), v30, v31, v28, v29);
}

uint64_t HGEquirectProject::GetROI(HGEquirectProject *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;

  v5 = HGRectMake4f(*((unsigned int *)this + 120), (float)-*((_DWORD *)this + 120) * 0.5, (float)-*((_DWORD *)this + 121) * 0.5, (float)*((int *)this + 120) * 0.5, (float)*((int *)this + 121) * 0.5);
  v7 = *((float *)this + 133);
  v8 = v7 * (float)(int)v5;
  v9 = *((float *)this + 134);
  v10 = v9 * (float)SHIDWORD(v5);
  v11 = *((float *)this + 136);
  v12 = v11 + (float)(v8 + v10);
  v13 = *((float *)this + 137);
  v14 = v13 * (float)(int)v5;
  v15 = *((float *)this + 138);
  v16 = v15 * (float)SHIDWORD(v5);
  v17 = *((float *)this + 140);
  v18 = v17 + (float)(v14 + v16);
  v19 = v7 * (float)(int)v6;
  v20 = v11 + (float)(v19 + v10);
  v21 = v13 * (float)(int)v6;
  v22 = v17 + (float)(v21 + v16);
  v23 = v9 * (float)SHIDWORD(v6);
  v24 = v11 + (float)(v8 + v23);
  v25 = v15 * (float)SHIDWORD(v6);
  v26 = v17 + (float)(v14 + v25);
  v27 = v11 + (float)(v19 + v23);
  v28 = v17 + (float)(v21 + v25);
  if (v20 >= v12)
    v29 = v12;
  else
    v29 = v20;
  if (v24 < v29)
    v29 = v24;
  if (v27 < v29)
    v29 = v27;
  if (v22 >= v18)
    v30 = v18;
  else
    v30 = v22;
  if (v26 < v30)
    v30 = v26;
  if (v28 < v30)
    v30 = v28;
  if (v12 >= v20)
    v31 = v12;
  else
    v31 = v20;
  if (v31 < v24)
    v31 = v24;
  if (v31 >= v27)
    v27 = v31;
  if (v18 >= v22)
    v32 = v18;
  else
    v32 = v22;
  if (v32 < v26)
    v32 = v26;
  if (v32 >= v28)
    v28 = v32;
  return HGRectMake4f(HIDWORD(v6), v29, v30, v27, v28);
}

uint64_t HGEquirectProject::IntermediateFormat(uint64_t a1, uint64_t a2)
{
  return a2;
}

HGNode *HGEquirectProject::GetOutput(HGNode *this, HGRenderer *a2)
{
  if ((*(unsigned int (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2))
    return HGRenderer::GetInput(a2, this, 0);
  else
    return this;
}

const char *HGEquirectProject::GetProgram(HGEquirectProject *this, HGRenderer *a2)
{
  if (HGRenderer::GetTarget(a2, 393216) <= 0x60B0F)
    return 0;
  else
    return "\n"
           "\n"
           "constant float pi = 3.14159265358979323846;\n"
           "\n"
           "float2 pointToAngles(const float3 p)\n"
           "{\n"
           "    float2 angle;\n"
           "    \n"
           "    angle.x = atan2(p.z, p.x);  // longitude, the angle around the z axis, theta [-pi, pi]\n"
           "    angle.x = angle.x + pi/2.;  // align the equator and prime meridian to be in center of view\n"
           "    angle.y = asin(p.y);        // latitude, the angle with the z axis, phi [0, pi]\n"
           "\n"
           "    return angle;\n"
           "}\n"
           "\n"
           "float2 equirect2uv(const float3 p)\n"
           "{\n"
           "    float2 angles = pointToAngles(p);\n"
           "    float phi = angles.y;\n"
           "    float theta = angles.x;\n"
           "\n"
           "    /* wrap theta appropriately since we've added pi/2. for alignment */\n"
           "    float theta_larger_than_pi = step(pi, theta);\n"
           "    float amount_larger_than_pi = theta - pi;\n"
           "    theta = (1. - theta_larger_than_pi) * theta +                   // theta < pi\n"
           "            theta_larger_than_pi * (-pi + amount_larger_than_pi) ;  // theta >= pi\n"
           "\n"
           "    float2 t;\n"
           "    t.x = 0.5 + theta / (2.*pi);\n"
           "    t.y = 0.5 - phi/pi;\n"
           "\n"
           "    // reverse the y sampling direction\n"
           "    t.y = 1. - t.y;\n"
           "    \n"
           "    return t;\n"
           "}\n"
           "\n"
           "float wrapXTexCoordAbout0(float s, float2 texLBorder, float2 texSize)\n"
           "{\n"
           "    s += texLBorder.x;\n"
           "    float edge = texLBorder.x;\n"
           "    float shouldWrapLeft = 1. - step(edge,s);\n"
           "    s = mix(s, texLBorder.x + texSize.x - (edge - s), shouldWrapLeft);\n"
           "    return s;\n"
           "}\n"
           "\n"
           "float wrapXTexCoordAboutMaxW(float s, float2 texLBorder, float2 texSize)\n"
           "{\n"
           "    float edge = texLBorder.x + texSize.x;\n"
           "    float shouldWrapRight = step(edge,s);\n"
           "    s = mix(s, texLBorder.x + (s - edge), shouldWrapRight);\n"
           "    return s;\n"
           "}\n"
           "\n"
           "float wrapYTexCoordAbout0(float t, float2 texLBorder, float2 texSize)\n"
           "{\n"
           "    t += texLBorder.y;\n"
           "    float edge = texLBorder.y;\n"
           "    float shouldWrapBottom = 1. - step(edge,t);\n"
           "    t = mix(t, texLBorder.y + texSize.y - (edge - t), shouldWrapBottom);\n"
           "    return t;\n"
           "}\n"
           "\n"
           "float clampYTexCoordAboutMaxH(float t, float2 texLBorder, float2 texSize)\n"
           "{\n"
           "    float edge = texLBorder.y + texSize.y;\n"
           "    float shouldWrapTop = step(edge,t);\n"
           "    t = mix(t, edge-1., shouldWrapTop);\n"
           "    return t;\n"
           "}\n"
           "\n"
           "float4 bilinearSample(float2 uv, float2 texLBorder, float2 texSize,\n"
           "                      texture2d<float> tex, sampler sampler)\n"
           "{\n"
           "    float s = uv.x*texSize.x;\n"
           "    float t = uv.y*texSize.y;\n"
           "    \n"
           "    float sl = floor(s);\n"
           "    float sr = ceil(s);\n"
           "    float tl = floor(t);\n"
           "    float tu = ceil(t);\n"
           "    \n"
           "    sl = wrapXTexCoordAbout0(sl, texLBorder, texSize);\n"
           "    sr = wrapXTexCoordAbout0(sr, texLBorder, texSize);\n"
           "    sl = wrapXTexCoordAboutMaxW(sl, texLBorder, texSize);\n"
           "    sr = wrapXTexCoordAboutMaxW(sr, texLBorder, texSize);\n"
           "    tl = wrapYTexCoordAbout0(tl, texLBorder, texSize);\n"
           "    tu = wrapYTexCoordAbout0(tu, texLBorder, texSize);\n"
           "    tl = clampYTexCoordAboutMaxH(tl, texLBorder, texSize);\n"
           "    tu = clampYTexCoordAboutMaxH(tu, texLBorder, texSize);\n"
           "    \n"
           "    float4 ll = tex.sample(sampler, float2(sl, tl));\n"
           "    float4 lr = tex.sample(sampler, float2(sr, tl));\n"
           "    float4 ul = tex.sample(sampler, float2(sl, tu));\n"
           "    float4 ur = tex.sample(sampler, float2(sr, tu));\n"
           "\n"
           "    float q = fract(s);\n"
           "    float4 lowerColor = mix(ll, lr, q);\n"
           "    float4 upperColor = mix(ul, ur, q);\n"
           "    \n"
           "    float r = fract(t);\n"
           "    float4 finalColor = mix(lowerColor,upperColor,r);\n"
           "    \n"
           "    return finalColor;\n"
           "}\n"
           "\n"
           "fragment FragmentOut fragmentFunc(VertexInOut            frag        [[ stage_in ]],\n"
           "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
           "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
           "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
           "{\n"
           "    float3 p = normalize(frag._texCoord0.xyz);\n"
           "    float2 uv = equirect2uv(p);\n"
           "    float2 texLBorder = hg_Params[0].xy;\n"
           "    float2 texSize = hg_Params[1].xy;\n"
           "    \n"
           "    FragmentOut out;\n"
           "    out.color0 = bilinearSample(uv, texLBorder, texSize, hg_Texture0, hg_Sampler0);\n"
           "    return out;\n"
           "}\n";
}

void HGEquirectProject::initRenderResources(uint64_t a1, GLuint *a2)
{
  const char *v3;
  _BYTE *v4;
  GLuint v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  project_util::generateIcosphere(2, (uint64_t)&v13);
  glGenBuffers(1, a2);
  glBindBuffer(0x8892u, *a2);
  glBufferData(0x8892u, v14 - v13, v13, 0x88E4u);
  glBindBuffer(0x8892u, 0);
  v4 = v13;
  a2[1] = ((v14 - v13) >> 2) / 3uLL;
  if (v4)
  {
    v14 = v4;
    operator delete(v4);
  }
  v5 = project_util::compileShaderProgram("\n                                                           \n    attribute vec3 position;                               \n"
         "                                                           \n"
         "    uniform mat4 mvp;                                      \n"
         "                                                           \n"
         "    varying vec3 pos;                                      \n"
         "                                                           \n"
         "    void main()                                            \n"
         "    {                                                      \n"
         "        gl_Position = mvp * vec4(position,1.);             \n"
         "        pos = position;                                    \n"
         "    }                                                      \n"
         "    ",
         asc_1B370495D,
         v3);
  a2[2] = v5;
  glUseProgram(v5);
  a2[3] = project_util::getAttribLocation((project_util *)a2[2], "position", v6);
  a2[4] = project_util::getUniformLocation((project_util *)a2[2], "mvp", v7);
  a2[5] = project_util::getUniformLocation((project_util *)a2[2], "tex", v8);
  a2[6] = project_util::getUniformLocation((project_util *)a2[2], "texSize", v9);
  a2[7] = project_util::getUniformLocation((project_util *)a2[2], "texLBorder", v10);
  a2[8] = project_util::getUniformLocation((project_util *)a2[2], "paddedTexSize", v11);
  a2[9] = project_util::getUniformLocation((project_util *)a2[2], "flip", v12);
  glUseProgram(0);
}

void sub_1B2AC2D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *HGEquirectProject::getRenderResources(HGEquirectProject *this, HGGPURenderer *a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;

  v3 = atomic_load((unsigned __int8 *)&_MergedGlobals_13);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_13))
  {
    qword_1ED4DAAB8 = 0;
    qword_1ED4DAAB0 = 0;
    qword_1ED4DAAA8 = (uint64_t)&qword_1ED4DAAB0;
    __cxa_atexit((void (*)(void *))std::map<HGGPURenderer *,RenderResources>::~map[abi:ne180100], &qword_1ED4DAAA8, &dword_1B2737000);
    __cxa_guard_release(&_MergedGlobals_13);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1ED4DAA90);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA90))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &HGEquirectProject::getRenderResources(HGGPURenderer *)::mutex, &dword_1B2737000);
    __cxa_guard_release(&qword_1ED4DAA90);
  }
  std::mutex::lock(&HGEquirectProject::getRenderResources(HGGPURenderer *)::mutex);
  v6 = qword_1ED4DAAB0;
  if (qword_1ED4DAAB0)
  {
    v7 = &qword_1ED4DAAB0;
    v8 = qword_1ED4DAAB0;
    do
    {
      v9 = *(_QWORD *)(v8 + 32);
      v10 = v9 >= (unint64_t)a2;
      if (v9 >= (unint64_t)a2)
        v11 = (uint64_t *)v8;
      else
        v11 = (uint64_t *)(v8 + 8);
      if (v10)
        v7 = (uint64_t *)v8;
      v8 = *v11;
    }
    while (*v11);
    if (v7 != &qword_1ED4DAAB0 && v7[4] <= (unint64_t)a2)
    {
      if (qword_1ED4DAAB0)
        goto LABEL_28;
LABEL_26:
      v17 = &qword_1ED4DAAB0;
      v18 = &qword_1ED4DAAB0;
LABEL_32:
      v20 = (char *)operator new(0x50uLL);
      *((_QWORD *)v20 + 4) = a2;
      *(_OWORD *)(v20 + 40) = 0u;
      *(_OWORD *)(v20 + 56) = 0u;
      *((_QWORD *)v20 + 9) = 0;
      *(_QWORD *)v20 = 0;
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v20 + 2) = v18;
      *v17 = (uint64_t)v20;
      v21 = (uint64_t *)v20;
      if (*(_QWORD *)qword_1ED4DAAA8)
      {
        qword_1ED4DAAA8 = *(_QWORD *)qword_1ED4DAAA8;
        v21 = (uint64_t *)*v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED4DAAB0, v21);
      ++qword_1ED4DAAB8;
      goto LABEL_36;
    }
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t *)v6;
        v14 = *(_QWORD *)(v6 + 32);
        if (v14 <= (unint64_t)a2)
          break;
        v6 = *v13;
        v12 = v13;
        if (!*v13)
          goto LABEL_22;
      }
      if (v14 >= (unint64_t)a2)
        break;
      v6 = v13[1];
      if (!v6)
      {
        v12 = v13 + 1;
        goto LABEL_22;
      }
    }
    v15 = (char *)v13;
  }
  else
  {
    v12 = &qword_1ED4DAAB0;
    v13 = &qword_1ED4DAAB0;
LABEL_22:
    v15 = (char *)operator new(0x50uLL);
    *((_QWORD *)v15 + 4) = a2;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *((_QWORD *)v15 + 9) = 0;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v13;
    *v12 = (uint64_t)v15;
    v16 = (uint64_t *)v15;
    if (*(_QWORD *)qword_1ED4DAAA8)
    {
      qword_1ED4DAAA8 = *(_QWORD *)qword_1ED4DAAA8;
      v16 = (uint64_t *)*v12;
    }
    v5 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED4DAAB0, v16);
    ++qword_1ED4DAAB8;
  }
  HGEquirectProject::initRenderResources((uint64_t)v5, (GLuint *)v15 + 10);
  v6 = qword_1ED4DAAB0;
  if (!qword_1ED4DAAB0)
    goto LABEL_26;
  while (1)
  {
LABEL_28:
    while (1)
    {
      v18 = (uint64_t *)v6;
      v19 = *(_QWORD *)(v6 + 32);
      if (v19 <= (unint64_t)a2)
        break;
      v6 = *v18;
      v17 = v18;
      if (!*v18)
        goto LABEL_32;
    }
    if (v19 >= (unint64_t)a2)
      break;
    v6 = v18[1];
    if (!v6)
    {
      v17 = v18 + 1;
      goto LABEL_32;
    }
  }
  v20 = (char *)v18;
LABEL_36:
  std::mutex::unlock(&HGEquirectProject::getRenderResources(HGGPURenderer *)::mutex);
  return v20 + 40;
}

void sub_1B2AC2FDC(_Unwind_Exception *a1)
{
  std::mutex::unlock(&HGEquirectProject::getRenderResources(HGGPURenderer *)::mutex);
  _Unwind_Resume(a1);
}

uint64_t std::map<HGGPURenderer *,RenderResources>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEED1B8ne180100Ev(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void HGEquirectProject::render(uint64_t a1, int *lpsrc, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  GLfloat v18[2];
  GLfloat x[2];
  GLfloat v20[2];
  float32x4_t v21[4];
  GLfloat value[4];
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a3 + 168);
  if (lpsrc)
  {
    v10 = lpsrc[5];
    v11 = lpsrc[6];
    v12 = (uint64_t)(lpsrc + 5);
    v13 = *(_DWORD *)(v12 + 8);
    v14 = *(_DWORD *)(v12 + 12);
    if (v9)
    {
      v15 = v9[34];
      v16 = v9[35];
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v10 = MEMORY[0x14];
    v11 = MEMORY[0x18];
    v12 = 20;
    v13 = MEMORY[0x1C];
    v14 = MEMORY[0x20];
  }
  glViewport(v10 - v15, v11 - v16, v13 - v10, v14 - v11);
  glClearColor(0.0, 0.0, 0.0, 1.0);
  glClear(0x4000u);
  glUseProgram(*(_DWORD *)(a4 + 8));
  glBindBuffer(0x8892u, *(_DWORD *)a4);
  glEnableVertexAttribArray(*(_DWORD *)(a4 + 12));
  glVertexAttribPointer(*(_DWORD *)(a4 + 12), 3, 0x1406u, 0, 0, 0);
  *(_QWORD *)x = 0;
  *(_QWORD *)v20 = 0;
  *(_QWORD *)v18 = 0;
  *(_QWORD *)value = HGGLTexture::GetTextureRect((HGGLTexture *)a3);
  *(_QWORD *)&value[2] = v17;
  calculateUniforms(a1 + 408, (int32x2_t *)(a3 + 20), (int32x2_t *)value, (int *)v12, v21, (float32x2_t *)v20, x, (__n64 *)v18, 0);
  *(float32x4_t *)value = v21[0];
  v23 = v21[1];
  v24 = v21[2];
  v25 = v21[3];
  glUniformMatrix4fv(*(_DWORD *)(a4 + 16), 1, 0, value);
  glActiveTexture(0x84C0u);
  glUniform1i(*(_DWORD *)(a4 + 20), 0);
  glUniform1i(*(_DWORD *)(a4 + 36), *(unsigned __int8 *)(a1 + 496));
  glBindTexture(0xDE1u, v8);
  glTexParameteri(0xDE1u, 0x2800u, 9728);
  glTexParameteri(0xDE1u, 0x2801u, 9728);
  glUniform2f(*(_DWORD *)(a4 + 24), x[0], x[1]);
  glUniform2f(*(_DWORD *)(a4 + 28), v20[0], v20[1]);
  glUniform2f(*(_DWORD *)(a4 + 32), v18[0], v18[1]);
  glDrawArrays(4u, 0, *(_DWORD *)(a4 + 4));
  glUseProgram(0);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, 0);
  glDisableVertexAttribArray(*(_DWORD *)(a4 + 12));
  glBindBuffer(0x8892u, 0);
}

__n64 calculateUniforms(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int *a4, float32x4_t *a5, float32x2_t *a6, _DWORD *a7, __n64 *a8, char a9)
{
  uint64_t v16;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  double v81;
  int v82;
  double v83;
  double v84;
  double v85;
  int v86;
  double v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  double v95;
  __double2 v96;
  double v97;
  double v98;
  float v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  float v114;
  float v115;
  float32_t v116;
  float32_t v117;
  unsigned int v118;
  float v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x2_t v130;
  uint64_t v131;
  __n64 result;

  v16 = HGRectMake4i(0, 0, *(_DWORD *)(a1 + 80), *(_DWORD *)(a1 + 84));
  v18 = *(float *)(a1 + 92);
  v19 = *(float *)(a1 + 96);
  v20 = v18 * (float)(int)v16;
  v21 = v19 * (float)SHIDWORD(v16);
  v22 = *(float *)(a1 + 104);
  v23 = *(float *)(a1 + 108);
  v24 = v22 + (float)(v20 + v21);
  v25 = v23 * (float)(int)v16;
  v26 = *(float *)(a1 + 112);
  v27 = v26 * (float)SHIDWORD(v16);
  v28 = *(float *)(a1 + 120);
  v29 = v28 + (float)(v25 + v27);
  v30 = v18 * (float)(int)v17;
  v31 = v22 + (float)(v30 + v21);
  v32 = v23 * (float)(int)v17;
  v33 = v28 + (float)(v32 + v27);
  v34 = v19 * (float)SHIDWORD(v17);
  v35 = v22 + (float)(v20 + v34);
  v36 = v26 * (float)SHIDWORD(v17);
  v37 = v28 + (float)(v25 + v36);
  v38 = v22 + (float)(v30 + v34);
  v39 = v28 + (float)(v32 + v36);
  if (v31 >= v24)
    v40 = v24;
  else
    v40 = v31;
  if (v35 < v40)
    v40 = v35;
  if (v38 < v40)
    v40 = v38;
  if (v33 >= v29)
    v41 = v29;
  else
    v41 = v33;
  if (v37 < v41)
    v41 = v37;
  if (v39 < v41)
    v41 = v39;
  if (v24 >= v31)
    v42 = v24;
  else
    v42 = v31;
  if (v42 < v35)
    v42 = v35;
  if (v42 >= v38)
    v38 = v42;
  if (v29 >= v33)
    v43 = v29;
  else
    v43 = v33;
  if (v43 < v37)
    v43 = v37;
  if (v43 >= v39)
    v39 = v43;
  v44 = HGRectMake4f(HIDWORD(v17), v40, v41, v38, v39);
  v46 = v44;
  v48 = v47;
  v49 = HIDWORD(v44);
  v50 = (float)*a4;
  v51 = (float)a4[2];
  v52 = (float)a4[1];
  v53 = (float)a4[3];
  v54 = *(float *)(a1 + 92);
  v55 = *(float *)(a1 + 96);
  v56 = v54 * v50;
  v57 = v55 * v52;
  v58 = *(float *)(a1 + 104);
  v59 = *(float *)(a1 + 108);
  v60 = v58 + (float)((float)(v54 * v50) + (float)(v55 * v52));
  v61 = v59 * v50;
  v62 = *(float *)(a1 + 112);
  v63 = v62 * v52;
  v64 = *(float *)(a1 + 120);
  v65 = v64 + (float)(v61 + v63);
  v66 = v54 * v51;
  v67 = v58 + (float)(v66 + v57);
  v68 = v59 * v51;
  v69 = v64 + (float)(v68 + v63);
  v70 = v55 * v53;
  v71 = v58 + (float)(v56 + (float)(v55 * v53));
  v72 = v62 * v53;
  v73 = v64 + (float)(v61 + v72);
  v74 = v58 + (float)(v66 + v70);
  v75 = v64 + (float)(v68 + v72);
  if (v67 >= v60)
    v76 = v60;
  else
    v76 = v67;
  if (v71 < v76)
    v76 = v71;
  if (v74 < v76)
    v76 = v74;
  if (v69 >= v65)
    v77 = v65;
  else
    v77 = v69;
  if (v73 < v77)
    v77 = v73;
  if (v75 < v77)
    v77 = v75;
  if (v60 >= v67)
    v78 = v60;
  else
    v78 = v67;
  if (v78 < v71)
    v78 = v71;
  if (v78 < v74)
    v78 = v74;
  if (v65 >= v69)
    v79 = v65;
  else
    v79 = v69;
  if (v79 < v73)
    v79 = v73;
  if (v79 >= v75)
    v75 = v79;
  v80 = HGRectMake4f(v45, v76, v77, v78, v75);
  v81 = (double)(int)v80 / (double)(v48 - v46);
  v83 = (double)v82 / (double)(v48 - v46);
  v84 = (double)(HIDWORD(v48) - v49);
  v85 = (double)SHIDWORD(v80) / v84;
  v87 = (double)v86 / v84;
  if (*(_BYTE *)(a1 + 44))
  {
    v89 = *(float *)(a1 + 48);
    v88 = *(float *)(a1 + 52);
    v91 = *(float *)(a1 + 56);
    v90 = *(float *)(a1 + 60);
    v92 = 0.0;
    v93 = *(float *)(a1 + 64);
    v94 = *(float *)(a1 + 68);
  }
  else
  {
    v95 = (double)*(int *)(a1 + 80) / (double)*(int *)(a1 + 84);
    v96 = __sincos_stret(*(float *)(a1 + 36) * 0.0174532925 * 0.5);
    v97 = v96.__cosval + v96.__sinval / -0.608761429 * 0.79335334;
    v98 = -v97;
    if (v97 >= 0.0)
      v98 = 0.01;
    v93 = v98;
    v94 = fabs(v97 + -1.0) + 0.25;
    v92 = v97;
    v99 = v95;
    v90 = v93 * 0.76733;
    v88 = (float)(v93 * 0.76733) * v99;
    v91 = -(float)(v93 * 0.76733);
    v89 = -v88;
  }
  v100 = v88;
  v101 = v100 - v89;
  v102 = v100 - (0.5 - v81) * v101;
  v103 = v100 - (0.5 - v83) * v101;
  v104 = v90;
  v105 = v104 - v91;
  v106 = v104 - (0.5 - v85) * v105;
  v107 = v104 - (0.5 - v87) * v105;
  v108 = *(_OWORD *)(a1 + 16);
  v109 = *(_OWORD *)(a1 + 12);
  v110 = *(_OWORD *)(a1 + 20);
  v111 = *(_OWORD *)(a1 + 24);
  v112 = *(_OWORD *)(a1 + 28);
  v113 = *(_OWORD *)(a1 + 32);
  *(float *)&v102 = v102;
  *(float *)&v103 = v103;
  v114 = *(float *)&v102 + *(float *)&v103;
  *(float *)&v102 = *(float *)&v103 - *(float *)&v102;
  *(float *)&v103 = v114 / *(float *)&v102;
  *(float *)&v106 = v106;
  *(float *)&v107 = v107;
  v115 = *(float *)&v106 + *(float *)&v107;
  *(float *)&v106 = *(float *)&v107 - *(float *)&v106;
  v116 = v115 / *(float *)&v106;
  v117 = (float)-(float)(v94 + v93) / (float)(v94 - v93);
  *(float *)&v118 = (float)((float)(v94 * -2.0) * v93) / (float)(v94 - v93);
  v119 = v93 + v93;
  v120 = (float32x4_t)COERCE_UNSIGNED_INT(v119 / *(float *)&v102);
  v121.i32[0] = 0;
  v121.i64[1] = 0;
  v121.f32[1] = v119 / *(float *)&v106;
  __asm { FMOV            V23.4S, #-1.0 }
  _Q23.i32[0] = LODWORD(v103);
  v127 = _Q23;
  v127.f32[1] = v116;
  v128 = v127;
  v128.f32[2] = v117;
  v129.i64[0] = 0;
  v129.i64[1] = v118;
  if (a9)
  {
    v120 = vaddq_f32(vaddq_f32(vmulq_n_f32((float32x4_t)xmmword_1B304F230, v120.f32[0]), (float32x4_t)xmmword_1B3051AB0), (float32x4_t)0);
    v121 = vaddq_f32(vmlaq_lane_f32((float32x4_t)0, (float32x4_t)xmmword_1B3523FD0, *(float32x2_t *)v121.f32, 1), (float32x4_t)0);
    v128 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B304F230, _Q23.f32[0]), (float32x4_t)xmmword_1B3523FD0, *(float32x2_t *)v127.f32, 1), (float32x4_t)xmmword_1B304F760, v128, 2), (float32x4_t)xmmword_1B3523FE0);
    v129 = vaddq_f32(vmlaq_laneq_f32((float32x4_t)0, (float32x4_t)xmmword_1B304F760, v129, 2), (float32x4_t)0);
  }
  *a5 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v120, COERCE_FLOAT(*(_OWORD *)a1)), v121, COERCE_FLOAT(*(_OWORD *)(a1 + 4))), v128, COERCE_FLOAT(*(_OWORD *)(a1 + 8))), (float32x4_t)0, v129);
  a5[1] = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v120, *(float *)&v109), v121, *(float *)&v108), v128, *(float *)&v110), (float32x4_t)0, v129);
  a5[2] = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v120, *(float *)&v111), v121, *(float *)&v112), v128, *(float *)&v113), (float32x4_t)0, v129);
  a5[3] = vaddq_f32(v129, vmlaq_n_f32(vmlaq_f32(vmulq_f32(v120, (float32x4_t)0), (float32x4_t)0, v121), v128, v92));
  v130 = vcvt_f32_s32(vsub_s32(*a2, *a3));
  *(float *)&v131 = (float)(a2[1].i32[0] - a2->u32[0]);
  *a7 = v131;
  *((float *)&v131 + 1) = (float)(a2[1].i32[1] - a2->i32[1]);
  *(_QWORD *)a7 = v131;
  result.n64_f32[0] = (float)(a3[1].i32[0] - a3->i32[0]);
  a8->n64_u32[0] = result.n64_u32[0];
  result.n64_f32[1] = (float)(a3[1].i32[1] - a3->i32[1]);
  a8->n64_u64[0] = result.n64_u64[0];
  *a6 = v130;
  return result;
}

int *HGEquirectProject::RenderPage(HGNode *this, HGRect *a2)
{
  int *Buffer;
  HGEquirectProject *v5;
  char *RenderResources;
  const void *v7;
  void *v8;
  HGPage *v10;

  HGPagePullTexturesGuard::HGPagePullTexturesGuard((HGPagePullTexturesGuard *)&v10, this, (HGPage *)a2);
  Buffer = *(int **)&a2->var2;
  if (Buffer)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)Buffer + 16))(*(_QWORD *)&a2->var2);
  }
  else
  {
    Buffer = (int *)HGGPURenderer::CreateBuffer(*(_QWORD *)&a2->var0, a2[1], a2[2].var0, 0, (*((_DWORD *)this + 4) >> 12) & 1, LOBYTE(a2[15].var2));
    *(_QWORD *)&a2->var2 = Buffer;
  }
  (*(void (**)(_QWORD, int *))(**(_QWORD **)&a2->var0 + 144))(*(_QWORD *)&a2->var0, Buffer);
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 0, *(_QWORD *)&a2[10].var2, 0, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 1, *(_QWORD *)&a2[11].var0, 0, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 2, *(_QWORD *)&a2[11].var2, 0, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 3, *(_QWORD *)&a2[12].var0, 0, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 4, *(_QWORD *)&a2[12].var2, 0, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 5, *(_QWORD *)&a2[13].var0, 0, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 6, *(_QWORD *)&a2[13].var2, 0, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 7, *(_QWORD *)&a2[14].var0, 0, 0);
  if (*(_QWORD *)&a2[10].var2)
  {
    v5 = (HGEquirectProject *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&a2->var0 + 304))(*(_QWORD *)&a2->var0);
    if ((_DWORD)v5)
    {
      Buffer = *(int **)&a2[10].var2;
    }
    else
    {
      RenderResources = HGEquirectProject::getRenderResources(v5, *(HGGPURenderer **)&a2->var0);
      v7 = *(const void **)&a2[10].var2;
      if (v7)
      else
        v8 = 0;
      HGEquirectProject::render((uint64_t)this, Buffer, (uint64_t)v8, (uint64_t)RenderResources);
    }
  }
  else
  {
    fwrite("HGEquirectProject: no equirect input image.\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  }
  HGPagePullTexturesGuard::~HGPagePullTexturesGuard(&v10);
  return Buffer;
}

void sub_1B2AC3A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HGPagePullTexturesGuard::~HGPagePullTexturesGuard((HGPage **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AC3A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HGPagePullTexturesGuard::~HGPagePullTexturesGuard((HGPage **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AC3A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HGPagePullTexturesGuard::~HGPagePullTexturesGuard((HGPage **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AC3A9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HGPagePullTexturesGuard::~HGPagePullTexturesGuard((HGPage **)va);
  _Unwind_Resume(a1);
}

char *HGEquirectProject::RenderPageMetal(HGNode *this, HGPage *a2)
{
  char *Buffer;
  char *v5;
  const void *v6;
  std::string *v7;
  std::string *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  float32x4_t *p_dst;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  const HGBlendingInfo *v16;
  __n128 v17;
  __n128 *v18;
  unsigned __int8 v19;
  unint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n64 v26;
  double v27;
  double v28;
  __int128 __dst;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  HGPage *v33;
  char v34;
  __int128 *v35;

  HGPagePullMetalTexturesGuard::HGPagePullMetalTexturesGuard((HGPagePullMetalTexturesGuard *)&v33, this, a2);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)a2 + 144))(*(_QWORD *)a2, 0);
  Buffer = (char *)*((_QWORD *)a2 + 1);
  if (Buffer)
    (*(void (**)(_QWORD))(*(_QWORD *)Buffer + 16))(*((_QWORD *)a2 + 1));
  else
    Buffer = HGGPURenderer::CreateBuffer(*(_QWORD *)a2, *((HGRect *)a2 + 1), *((unsigned int *)a2 + 8), 1, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
  HGGPURenderer::ClearMetal(*(HGGPURenderer **)a2, (HGBitmap *)Buffer, *((HGRect *)a2 + 1), v5);
  v6 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD, HGNode *))(**(_QWORD **)a2 + 368))(*(_QWORD *)a2, *((_QWORD *)this + 8), this);
  if (!v6)
    goto LABEL_38;
  if (!v7)
    goto LABEL_38;
  v8 = v7;
  v9 = (const char *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)this + 48))(this);
  v10 = strlen(v9);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (float32x4_t *)operator new(v13 + 1);
    *((_QWORD *)&__dst + 1) = v11;
    *(_QWORD *)&v30 = v14 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    BYTE7(v30) = v10;
    p_dst = (float32x4_t *)&__dst;
    if (!v10)
      goto LABEL_14;
  }
  memmove(p_dst, v9, v11);
LABEL_14:
  p_dst->i8[v11] = 0;
  HGMetalHandler::SetDebugLabel(v8, (const std::string *)&__dst);
  if (SBYTE7(v30) < 0)
    operator delete((void *)__dst);
  HGMetalHandler::BindBuffer((HGMetalHandler *)v8, (HGBitmap *)Buffer);
  if (*((_QWORD *)a2 + 21))
  {
    (*(void (**)(std::string *, _QWORD, _QWORD))(v8->__r_.__value_.__r.__words[0] + 72))(v8, 0, 0);
    (*(void (**)(std::string *, _QWORD, _QWORD))(v8->__r_.__value_.__r.__words[0] + 48))(v8, 0, 0);
    v15 = HGMetalHandler::BindTexture((HGMetalTexture ***)v8, 0, (HGBitmap *)*((_QWORD *)a2 + 21));
  }
  if (*((_QWORD *)a2 + 22))
  {
    (*(void (**)(std::string *, uint64_t, _QWORD, __n128))(v8->__r_.__value_.__r.__words[0] + 72))(v8, 1, 0, v15);
    (*(void (**)(std::string *, _QWORD, _QWORD))(v8->__r_.__value_.__r.__words[0] + 48))(v8, 0, 0);
    v15 = HGMetalHandler::BindTexture((HGMetalTexture ***)v8, 1, (HGBitmap *)*((_QWORD *)a2 + 22));
  }
  if (*((_QWORD *)a2 + 23))
  {
    (*(void (**)(std::string *, uint64_t, _QWORD, __n128))(v8->__r_.__value_.__r.__words[0] + 72))(v8, 2, 0, v15);
    (*(void (**)(std::string *, _QWORD, _QWORD))(v8->__r_.__value_.__r.__words[0] + 48))(v8, 0, 0);
    v15 = HGMetalHandler::BindTexture((HGMetalTexture ***)v8, 2, (HGBitmap *)*((_QWORD *)a2 + 23));
  }
  if (*((_QWORD *)a2 + 24))
  {
    (*(void (**)(std::string *, uint64_t, _QWORD, __n128))(v8->__r_.__value_.__r.__words[0] + 72))(v8, 3, 0, v15);
    (*(void (**)(std::string *, _QWORD, _QWORD))(v8->__r_.__value_.__r.__words[0] + 48))(v8, 0, 0);
    v15 = HGMetalHandler::BindTexture((HGMetalTexture ***)v8, 3, (HGBitmap *)*((_QWORD *)a2 + 24));
  }
  if (*((_QWORD *)a2 + 25))
  {
    (*(void (**)(std::string *, uint64_t, _QWORD, __n128))(v8->__r_.__value_.__r.__words[0] + 72))(v8, 4, 0, v15);
    (*(void (**)(std::string *, _QWORD, _QWORD))(v8->__r_.__value_.__r.__words[0] + 48))(v8, 0, 0);
    v15 = HGMetalHandler::BindTexture((HGMetalTexture ***)v8, 4, (HGBitmap *)*((_QWORD *)a2 + 25));
  }
  if (*((_QWORD *)a2 + 26))
  {
    (*(void (**)(std::string *, uint64_t, _QWORD, __n128))(v8->__r_.__value_.__r.__words[0] + 72))(v8, 5, 0, v15);
    (*(void (**)(std::string *, _QWORD, _QWORD))(v8->__r_.__value_.__r.__words[0] + 48))(v8, 0, 0);
    v15 = HGMetalHandler::BindTexture((HGMetalTexture ***)v8, 5, (HGBitmap *)*((_QWORD *)a2 + 26));
  }
  if (*((_QWORD *)a2 + 27))
  {
    (*(void (**)(std::string *, uint64_t, _QWORD, __n128))(v8->__r_.__value_.__r.__words[0] + 72))(v8, 6, 0, v15);
    (*(void (**)(std::string *, _QWORD, _QWORD))(v8->__r_.__value_.__r.__words[0] + 48))(v8, 0, 0);
    v15 = HGMetalHandler::BindTexture((HGMetalTexture ***)v8, 6, (HGBitmap *)*((_QWORD *)a2 + 27));
  }
  if (*((_QWORD *)a2 + 28))
  {
    (*(void (**)(std::string *, uint64_t, _QWORD, __n128))(v8->__r_.__value_.__r.__words[0] + 72))(v8, 7, 0, v15);
    (*(void (**)(std::string *, _QWORD, _QWORD))(v8->__r_.__value_.__r.__words[0] + 48))(v8, 0, 0);
    HGMetalHandler::BindTexture((HGMetalTexture ***)v8, 7, *((HGBitmap **)a2 + 28));
  }
  v27 = 0.0;
  v28 = 0.0;
  v26.n64_u64[0] = 0;
  calculateUniforms((uint64_t)this + 408, (int32x2_t *)(*((_QWORD *)a2 + 21) + 20), (int32x2_t *)(*((_QWORD *)a2 + 21) + 20), (int *)Buffer + 5, (float32x4_t *)&__dst, (float32x2_t *)&v28, &v27, &v26, 1);
  v22 = xmmword_1B304F230;
  v23 = xmmword_1B304F240;
  v24 = xmmword_1B304F250;
  v25 = xmmword_1B304EFF0;
  (*(void (**)(std::string *, __int128 *))(v8->__r_.__value_.__r.__words[0] + 184))(v8, &v22);
  v22 = __dst;
  v23 = v30;
  v24 = v31;
  v25 = v32;
  (*(void (**)(std::string *, __int128 *))(v8->__r_.__value_.__r.__words[0] + 176))(v8, &v22);
  (*(void (**)(std::string *, _QWORD, double, float, float, float))(v8->__r_.__value_.__r.__words[0] + 136))(v8, 0, v28, *((float *)&v28 + 1), 0.0, 0.0);
  (*(void (**)(std::string *, uint64_t, double, float, float, float))(v8->__r_.__value_.__r.__words[0] + 136))(v8, 1, v27, *((float *)&v27 + 1), 0.0, 0.0);
  (*(void (**)(HGNode *, HGPage *, _QWORD, std::string *))(*(_QWORD *)this + 488))(this, a2, 0, v8);
  if (HGNode::IsInPlaceHardwareBlendingEnabled(this))
  {
    HGMetalHandler::EnableBlending((uint64_t)v8);
    v16 = (const HGBlendingInfo *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)this + 256))(this);
    v17 = HGMetalHandler::SetBlendingInfo((HGMetalHandler *)v8, v16);
    v18 = (__n128 *)(*(uint64_t (**)(HGNode *, __n128))(*(_QWORD *)this + 272))(this, v17);
    HGMetalHandler::SetBlendingColor((__n128 *)v8, v18);
  }
  v19 = atomic_load((unsigned __int8 *)&qword_1ED4DAA98);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1ED4DAA98))
  {
    qword_1ED4DAAC8 = 0;
    qword_1ED4DAAD0 = 0;
    qword_1ED4DAAC0 = 0;
    __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEED1B8ne180100Ev, &qword_1ED4DAAC0, &dword_1B2737000);
    __cxa_guard_release(&qword_1ED4DAA98);
  }
  v20 = atomic_load(&qword_1ED4DAAA0);
  if (v20 != -1)
  {
    *(_QWORD *)&v22 = &v34;
    v35 = &v22;
    std::__call_once(&qword_1ED4DAAA0, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<getIcosphereP(void)::$_0 &&>>);
  }
  HGMetalHandler::PrimitivesDraw((uint64_t)v8, 3u, (void *)qword_1ED4DAAC0, (unint64_t)(qword_1ED4DAAC8 - qword_1ED4DAAC0) >> 4, (void *)qword_1ED4DAAC0);
  (*(void (**)(HGNode *, HGPage *, _QWORD, std::string *))(*(_QWORD *)this + 496))(this, a2, 0, v8);
LABEL_38:
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard(&v33);
  return Buffer;
}

void sub_1B2AC40C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard((HGPage **)(v28 - 104));
  _Unwind_Resume(a1);
}

float HGEquirectProject::setParams(HGEquirectProject *this, const HGEquirectProjectParams *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  float v10;

  v2 = *(_OWORD *)&a2->var1[1];
  *(_OWORD *)((char *)this + 408) = *(_OWORD *)a2->var0;
  *(_OWORD *)((char *)this + 424) = v2;
  v3 = *(_OWORD *)&a2->var2[2];
  v4 = *(_OWORD *)&a2->var6;
  v5 = *(_OWORD *)&a2->var14;
  *(_OWORD *)((char *)this + 472) = *(_OWORD *)&a2->var10;
  *(_OWORD *)((char *)this + 488) = v5;
  *(_OWORD *)((char *)this + 440) = v3;
  *(_OWORD *)((char *)this + 456) = v4;
  v6 = *(_OWORD *)&a2->var18[1];
  v7 = *(_OWORD *)&a2->var19[1];
  v8 = *(_OWORD *)&a2->var20[1];
  *(_OWORD *)((char *)this + 548) = *(_OWORD *)a2->var21;
  *(_OWORD *)((char *)this + 520) = v7;
  *(_OWORD *)((char *)this + 536) = v8;
  *(_OWORD *)((char *)this + 504) = v6;
  if (!*((_BYTE *)this + 497))
  {
    *((_DWORD *)this + 133) = 1065353216;
    v9 = *((_DWORD *)this + 120);
    *((_QWORD *)this + 67) = 0;
    *((float *)this + 136) = (float)(v9 / 2);
    *((_DWORD *)this + 137) = 0;
    *((_QWORD *)this + 69) = 1065353216;
    *((float *)this + 140) = (float)(*((_DWORD *)this + 121) / 2);
    *((_DWORD *)this + 125) = 1065353216;
    v10 = (float)-*((_DWORD *)this + 122);
    *((_QWORD *)this + 63) = 0;
    *((float *)this + 128) = v10 * 0.5;
    *((_DWORD *)this + 129) = 0;
    *((_QWORD *)this + 65) = 1065353216;
    *(float *)&v6 = (float)-*((_DWORD *)this + 123) * 0.5;
    *((_DWORD *)this + 132) = v6;
  }
  return *(float *)&v6;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<getIcosphereP(void)::$_0 &&>>()
{
  _DWORD *v0;
  unint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  void *__p;
  _BYTE *v24;
  uint64_t v25;

  __p = 0;
  v24 = 0;
  v25 = 0;
  project_util::generateIcosphere(2, (uint64_t)&__p);
  v0 = __p;
  v1 = v24 - (_BYTE *)__p;
  v2 = ((v24 - (_BYTE *)__p) >> 2) / 3uLL;
  v3 = (void *)qword_1ED4DAAC0;
  if (v2 > (qword_1ED4DAAD0 - qword_1ED4DAAC0) >> 4)
  {
    if ((v1 & 0x8000000000000000) != 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v4 = qword_1ED4DAAC8;
    v5 = operator new(16 * v2);
    v6 = (uint64_t)v5 + ((v4 - (_QWORD)v3) & 0xFFFFFFFFFFFFFFF0);
    v7 = v6;
    if ((void *)v4 != v3)
    {
      v7 = (uint64_t)v5 + ((v4 - (_QWORD)v3) & 0xFFFFFFFFFFFFFFF0);
      do
      {
        v8 = *(_OWORD *)(v4 - 16);
        v4 -= 16;
        *(_OWORD *)(v7 - 16) = v8;
        v7 -= 16;
      }
      while ((void *)v4 != v3);
    }
    qword_1ED4DAAC0 = v7;
    qword_1ED4DAAC8 = v6;
    qword_1ED4DAAD0 = (uint64_t)v5 + 16 * v2;
    if (v3)
      operator delete(v3);
  }
  if (v1 >= 0xC)
  {
    v9 = 0;
    if (v2 <= 1)
      v2 = 1;
    v10 = (_OWORD *)qword_1ED4DAAC8;
    while (1)
    {
      *(_QWORD *)&v12 = *(_QWORD *)v0;
      DWORD2(v12) = v0[2];
      HIDWORD(v12) = 1.0;
      if ((unint64_t)v10 >= qword_1ED4DAAD0)
        break;
      *v10 = v12;
      v11 = (uint64_t)(v10 + 1);
LABEL_16:
      qword_1ED4DAAC8 = v11;
      v0 += 3;
      ++v9;
      v10 = (_OWORD *)v11;
      if (v9 == v2)
        goto LABEL_9;
    }
    v13 = qword_1ED4DAAC0;
    v14 = ((uint64_t)v10 - qword_1ED4DAAC0) >> 4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v16 = qword_1ED4DAAD0 - qword_1ED4DAAC0;
    if ((qword_1ED4DAAD0 - qword_1ED4DAAC0) >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v22 = v12;
      if (v17 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = (char *)operator new(16 * v17);
      v19 = &v18[16 * v14];
      *(_OWORD *)v19 = v22;
      v11 = (uint64_t)(v19 + 16);
      if (v10 == (_OWORD *)v13)
        goto LABEL_31;
    }
    else
    {
      v18 = 0;
      v19 = (char *)(16 * v14);
      v20 = (_OWORD *)(16 * v14);
      *v20 = v12;
      v11 = (uint64_t)(v20 + 1);
      if (v10 == (_OWORD *)v13)
        goto LABEL_31;
    }
    do
    {
      v21 = *--v10;
      *((_OWORD *)v19 - 1) = v21;
      v19 -= 16;
    }
    while (v10 != (_OWORD *)v13);
    v10 = (_OWORD *)qword_1ED4DAAC0;
LABEL_31:
    qword_1ED4DAAC0 = (uint64_t)v19;
    qword_1ED4DAAC8 = v11;
    qword_1ED4DAAD0 = (uint64_t)&v18[16 * v17];
    if (v10)
      operator delete(v10);
    goto LABEL_16;
  }
LABEL_9:
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
}

void sub_1B2AC4424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HGComicQuantize::HGComicQuantize(HGComicQuantize *this)
{
  uint64_t v1;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v1 = off_1E652C090;
  *(_QWORD *)(v1 + 408) = 0x3F80000000000000;
  *(_DWORD *)(v1 + 16) |= 0x620u;
}

void HGComicQuantize::~HGComicQuantize(HGNode *this)
{
  void *v1;

  HGNode::~HGNode(this);
  HGObject::operator delete(v1);
}

uint64_t HGComicQuantize::SetParameter(HGComicQuantize *this, int a2, float a3, float a4, float a5, float a6)
{
  if (a2 == 1)
  {
    if (*((float *)this + 103) != a3)
    {
      *((float *)this + 103) = a3;
      return 1;
    }
  }
  else
  {
    if (a2)
      return 0xFFFFFFFFLL;
    if (*((float *)this + 102) != a3)
    {
      *((float *)this + 102) = a3;
      return 1;
    }
  }
  return 0;
}

uint64_t HGComicQuantize::GetDOD(HGComicQuantize *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  double v6;
  const HGTransform *v7;
  uint64_t v8;
  HGTransformUtils *v9;
  float v10;
  _BYTE v12[144];
  HGRect v13;
  HGRect v14;

  v13 = a4;
  if (a3)
    return 0;
  if (HGRect::IsInfinite(&v13))
    return *(_QWORD *)&v13.var0;
  v6 = *((float *)this + 103);
  HGTransform::HGTransform((HGTransform *)v12);
  HGTransform::Scale((HGTransform *)v12, v6, v6, 1.0);
  v7 = *(const HGTransform **)&v13.var0;
  v8 = *(_QWORD *)&v13.var2;
  v10 = HGTransformUtils::MinW(v9);
  *(_QWORD *)&v14.var0 = v8;
  DOD = HGTransformUtils::GetDOD((HGTransformUtils *)v12, v7, v14, 0.5, v10);
  HGTransform::~HGTransform((HGTransform *)v12);
  return DOD;
}

void sub_1B2AC45A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AC45B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HGComicQuantize::GetROI(HGComicQuantize *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  unint64_t v6;
  double v7;
  HGTransformUtils *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[144];
  HGRect v15;
  HGRect v16;
  HGRect v17;

  if (a3)
    return HGRectNull;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v7 = 1.0 / *((float *)this + 103);
  HGTransform::HGTransform((HGTransform *)v14);
  HGTransform::Scale((HGTransform *)v14, v7, v7, 1.0);
  *(_QWORD *)&v15.var0 = 0;
  *(_QWORD *)&v15.var2 = 0;
  v9 = HGTransformUtils::MinW(v8);
  *(_QWORD *)&v17.var0 = v5;
  *(_QWORD *)&v15.var0 = HGTransformUtils::GetROI((HGTransformUtils *)v14, v6, v17, 0.5, v9);
  *(_QWORD *)&v15.var2 = v10;
  v11 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  v13 = v12;
  *(_QWORD *)&v16.var0 = v11;
  *(_QWORD *)&v16.var2 = v13;
  HGRect::Grow(&v15, v16);
  HGTransform::~HGTransform((HGTransform *)v14);
  return *(_QWORD *)&v15.var0;
}

void sub_1B2AC46AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AC46C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HGComicQuantize::IntermediateFormat()
{
  return 24;
}

uint64_t HGComicQuantize::RenderTile(HGComicQuantize *this, float32x4_t **a2)
{
  float v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  int32x2_t v8;
  int v9;
  int v10;
  float32x4_t v11;
  float v12;
  float32x4_t *v13;
  uint64_t v14;
  float32x4_t v15;
  float v16;
  float v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x2_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v53;
  float v54;
  float v55;
  float v56;
  BOOL v57;
  float v58;
  float32x2_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  float v67;
  float v68;
  float v69;
  int8x16_t v70;
  float v71;
  float v72;
  int8x16_t v73;
  float v74;
  uint64_t v76;
  int v77;
  float32x4_t v78;
  float32x4_t *v79;
  int v80;
  float v81;
  float32x4_t v82;
  __int128 v83;
  float32x4_t v84;
  float v85;
  float v86;
  float v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;

  v4 = *((float *)this + 103);
  v5 = HGTile::Renderer((HGTile *)a2);
  v6 = (*(uint64_t (**)(HGComicQuantize *, uint64_t))(*(_QWORD *)this + 312))(this, v5);
  v8 = (int32x2_t)*a2;
  v77 = *((_DWORD *)a2 + 3) - ((unint64_t)*a2 >> 32);
  if (v77 >= 1)
  {
    v76 = (*((_DWORD *)a2 + 2) - v8.i32[0]);
    if ((int)v76 >= 1)
    {
      v9 = v6;
      v10 = 0;
      *(float32x2_t *)v11.f32 = vadd_f32(vcvt_f32_s32(v8), (float32x2_t)0x3F0000003F000000);
      v11.i64[1] = 0x3F80000000000000;
      v12 = *((float *)this + 102);
      v81 = 1.0 / v4;
      v13 = a2[2];
      v91 = (float32x4_t)vdupq_n_s32(0x42C80000u);
      v82 = v11;
      do
      {
        v80 = v10;
        v14 = v76;
        v79 = v13;
        v78 = v11;
        v15 = v11;
        do
        {
          v19 = a2[10];
          v20 = *((int *)a2 + 22);
          v21 = vsubq_f32(vmulq_n_f32(v15, v81), v82);
          v90 = v15;
          if (v9)
          {
            v22 = vaddq_s32(vcvtq_s32_f32(v21), vcltzq_f32(v21));
            v23 = (float32x2_t)vsubq_f32(v21, vcvtq_f32_s32(v22)).u64[0];
            v24 = &v19[v22.i32[0] + v22.i32[1] * (int)v20];
            v25 = vaddq_f32(*v24, vmulq_n_f32(vsubq_f32(v24[1], *v24), v23.f32[0]));
            v26 = vaddq_f32(v25, vmulq_lane_f32(vsubq_f32(vaddq_f32(v24[v20], vmulq_n_f32(vsubq_f32(v24[(int)v20 + 1], v24[v20]), v23.f32[0])), v25), v23, 1));
            v92 = v26;
            if (v26.f32[0] > 0.04045)
              goto LABEL_10;
          }
          else
          {
            v32.i64[0] = 0x3F0000003F000000;
            v32.i64[1] = 0x3F0000003F000000;
            v33 = vaddq_f32(v21, v32);
            v34 = vcvtq_s32_f32(v33);
            v33.i64[0] = vaddq_s32(v34, vcgtq_f32(vcvtq_f32_s32(v34), v33)).u64[0];
            v26 = v19[v33.i32[0] + v33.i32[1] * (int)v20];
            v92 = v26;
            if (v26.f32[0] > 0.04045)
            {
LABEL_10:
              v27 = powf((float)(v26.f32[0] + 0.055) / 1.055, 2.4);
              v26.i32[2] = v92.i32[2];
              v87 = v27;
              v28 = v92.f32[1];
              if (v92.f32[1] <= 0.04045)
                goto LABEL_11;
              goto LABEL_15;
            }
          }
          v87 = v26.f32[0] / 12.92;
          v28 = v26.f32[1];
          if (v26.f32[1] <= 0.04045)
          {
LABEL_11:
            v29 = v28 / 12.92;
            v30 = v26.f32[2];
            if (v26.f32[2] <= 0.04045)
              goto LABEL_12;
            goto LABEL_16;
          }
LABEL_15:
          v29 = powf((float)(v28 + 0.055) / 1.055, 2.4);
          v30 = v92.f32[2];
          if (v92.f32[2] <= 0.04045)
          {
LABEL_12:
            v31 = v30 / 12.92;
            goto LABEL_17;
          }
LABEL_16:
          v85 = v29;
          v31 = powf((float)(v30 + 0.055) / 1.055, 2.4);
          v29 = v85;
LABEL_17:
          v35.i64[0] = __PAIR64__(LODWORD(v29), LODWORD(v87));
          v35.i64[1] = LODWORD(v31);
          v36 = (int8x16_t)vmulq_f32(v35, (float32x4_t)xmmword_1B3524010);
          *(float32x2_t *)v36.i8 = vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
          v37 = (int8x16_t)vmulq_f32(v35, (float32x4_t)xmmword_1B30516E0);
          *(float32x2_t *)v37.i8 = vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL));
          *(float32x2_t *)v36.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v36.i8, *(int32x2_t *)v37.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v36.i8, *(int32x2_t *)v37.i8));
          v38 = (int8x16_t)vmulq_f32(v35, (float32x4_t)xmmword_1B3524020);
          *(float32x2_t *)v38.i8 = vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
          v36.u64[1] = (unint64_t)vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1));
          v39 = vdivq_f32(vmulq_f32((float32x4_t)v36, v91), (float32x4_t)xmmword_1B3524030);
          v88 = v39;
          if (v39.f32[0] <= 0.008856)
          {
            v41 = (float)(v39.f32[0] * 7.787) + 0.13793;
            v42 = v39.f32[1];
            if (v39.f32[1] <= 0.008856)
            {
LABEL_19:
              v43 = (float)(v42 * 7.787) + 0.13793;
              v44 = v39.f32[2];
              if (v39.f32[2] <= 0.008856)
                goto LABEL_20;
              goto LABEL_23;
            }
          }
          else
          {
            v40 = powf(v39.f32[0], 0.33333);
            v39.i32[2] = v88.i32[2];
            v41 = v40;
            v42 = v88.f32[1];
            if (v88.f32[1] <= 0.008856)
              goto LABEL_19;
          }
          v43 = powf(v42, 0.33333);
          v44 = v88.f32[2];
          if (v88.f32[2] <= 0.008856)
          {
LABEL_20:
            v45 = (float)(v44 * 7.787) + 0.13793;
            goto LABEL_24;
          }
LABEL_23:
          v45 = powf(v44, 0.33333);
LABEL_24:
          v46.i32[3] = 0;
          v46.f32[0] = (float)((float)(v43 * 116.0) + -16.0) / 100.0;
          v46.f32[1] = (float)((float)((float)((float)(v41 - v43) * 500.0) / 127.0) * 0.5) + 0.5;
          v46.f32[2] = (float)((float)((float)((float)(v43 - v45) * 200.0) / 127.0) * 0.5) + 0.5;
          v47 = vmaxnmq_f32(v46, (float32x4_t)0);
          __asm { FMOV            V7.4S, #1.0 }
          v53 = vminnmq_f32(v47, _Q7);
          v54 = (float)((float)((float)((float)(1.0 / v12) * floorf((float)(v12 * v53.f32[0]) + 0.5)) * 100.0) + 16.0)
              / 116.0;
          v55 = (float)((float)((float)(v53.f32[1] + -0.5) * 254.0) / 500.0) + v54;
          v56 = v54 - (float)((float)((float)(v53.f32[2] + -0.5) * 254.0) / 200.0);
          v57 = v55 <= 0.2069;
          v58 = v55 * (float)(v55 * v55);
          v59.f32[0] = (float)(v55 + -0.13793) / 7.787;
          if (!v57)
            v59.f32[0] = v58;
          v57 = v54 <= 0.2069;
          v60 = v54 * (float)(v54 * v54);
          v61 = (float)(v54 + -0.13793) / 7.787;
          if (!v57)
            v61 = v60;
          v57 = v56 <= 0.2069;
          v62 = v56 * (float)(v56 * v56);
          v63 = (float)(v56 + -0.13793) / 7.787;
          if (!v57)
            v63 = v62;
          v59.f32[1] = v61;
          *(float32x2_t *)v64.f32 = vmul_f32(v59, (float32x2_t)0x42C8000042BE1810);
          v64.f32[2] = v63 * 108.88;
          v64.i32[3] = 0;
          v65 = vdivq_f32(v64, v91);
          v66 = (int8x16_t)vmulq_f32(v65, (float32x4_t)xmmword_1B3524040);
          v67 = vaddv_f32(vadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL)));
          v89 = _Q7;
          v84 = v65;
          if (v67 <= 0.0031308)
          {
            v69 = v67 * 12.92;
          }
          else
          {
            v68 = powf(v67, 0.41667);
            v65 = v84;
            v69 = (float)(v68 * 1.055) + -0.055;
          }
          v70 = (int8x16_t)vmulq_f32(v65, (float32x4_t)xmmword_1B3524050);
          v71 = vaddv_f32(vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)));
          v86 = v69;
          if (v71 <= 0.0031308)
          {
            *(float *)&v7 = v71 * 12.92;
          }
          else
          {
            v72 = powf(v71, 0.41667);
            v65 = v84;
            *(float *)&v7 = (float)(v72 * 1.055) + -0.055;
          }
          v73 = (int8x16_t)vmulq_f32(v65, (float32x4_t)xmmword_1B3524060);
          v74 = vaddv_f32(vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
          if (v74 > 0.0031308)
          {
            v83 = v7;
            v16 = powf(v74, 0.41667);
            v7 = v83;
            v17 = (float)(v16 * 1.055) + -0.055;
          }
          else
          {
            v17 = v74 * 12.92;
          }
          v18.i64[0] = __PAIR64__(v7, LODWORD(v86));
          v18.i64[1] = __PAIR64__(v92.u32[3], LODWORD(v17));
          *v13++ = vmaxnmq_f32(vminnmq_f32(v18, v89), (float32x4_t)0);
          v15 = vaddq_f32(v90, (float32x4_t)xmmword_1B304F230);
          --v14;
        }
        while (v14);
        v11 = vaddq_f32(v78, (float32x4_t)xmmword_1B304F240);
        v13 = &v79[*((int *)a2 + 6)];
        v10 = v80 + 1;
      }
      while (v80 + 1 != v77);
    }
  }
  return 0;
}

HGComicQuantize *HGComicQuantize::GetOutput(HGComicQuantize *this, HGRenderer *a2, char *a3)
{
  HGNode::SetParameter((HGNode *)this, 0, *((float *)this + 102), 1.0 / *((float *)this + 102), 0.0, 0.0, a3);
  return this;
}

const char *HGComicQuantize::GetProgram(HGComicQuantize *this, HGRenderer *a2)
{
  if (HGRenderer::GetTarget(a2, 393216) > 0x60B0F)
    return aMetal10Len0000_401;
  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
    return aGlfs10Len00000_5;
  return 0;
}

uint64_t HGComicQuantize::BindTexture(HGComicQuantize *this, HGHandler *a2, uint64_t a3)
{
  float v5;

  if ((a3 & 0x80000000) == 0)
  {
    v5 = 1.0 / *((float *)this + 103);
    HGHandler::TexCoord(a2, a3, 0, 0, 0);
    (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 104))(a2, v5, v5, 1.0);
  }
  (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
  (*(void (**)(HGHandler *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, 1, 1);
  return 0;
}

uint64_t HGProfiler::init(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  return this;
}

void HGProfiler::HGProfiler(HGProfiler *this)
{
  unint64_t v2;
  unint64_t v3;

  if (HGProfiler::_first)
  {
    mach_timebase_info((mach_timebase_info_t)&HGProfiler::_tb_init(void)::s_tbinfo);
    LODWORD(v2) = HGProfiler::_tb_init(void)::s_tbinfo;
    LODWORD(v3) = *(_DWORD *)algn_1ED4DAF04;
    *(float *)&v2 = (double)v2 * 0.000001 / (double)v3;
    HGProfiler::_tbfreq = v2;
    HGProfiler::_first = 0;
  }
  *((_QWORD *)this + 1) = 0;
}

uint64_t HGProfiler::start(HGProfiler *this)
{
  uint64_t result;

  result = mach_absolute_time();
  *(_QWORD *)this = result;
  return result;
}

uint64_t HGProfiler::stop(HGProfiler *this)
{
  uint64_t result;

  result = mach_absolute_time();
  *((_QWORD *)this + 1) += result - *(_QWORD *)this;
  return result;
}

double HGProfiler::getTime(HGProfiler *this)
{
  return (float)(*(float *)&HGProfiler::_tbfreq * (float)*((unint64_t *)this + 1));
}

uint64_t **HGProfilerGuard<(HGProfilerGuardMode)0>::HGProfilerGuard(uint64_t **a1, uint64_t *a2)
{
  *a1 = a2;
  if (a2)
    *a2 = mach_absolute_time();
  return a1;
}

_QWORD **HGProfilerGuard<(HGProfilerGuardMode)0>::~HGProfilerGuard(_QWORD **a1)
{
  _QWORD *v2;

  if (*a1)
  {
    v2 = *a1;
    v2[1] += mach_absolute_time() - *v2;
  }
  return a1;
}

_QWORD *HGProfilerGuard<(HGProfilerGuardMode)1>::HGProfilerGuard(_QWORD *a1, _QWORD *a2)
{
  *a1 = a2;
  if (a2)
    a2[1] += mach_absolute_time() - *a2;
  return a1;
}

uint64_t **HGProfilerGuard<(HGProfilerGuardMode)1>::~HGProfilerGuard(uint64_t **a1)
{
  uint64_t *v2;

  if (*a1)
  {
    v2 = *a1;
    *v2 = mach_absolute_time();
  }
  return a1;
}

void HGBitmapLoader::HGBitmapLoader(HGBitmapLoader *this)
{
  uint64_t v1;
  int v2;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v1 = off_1E652C2F8;
  *(_QWORD *)(v1 + 416) = 0;
  *(_QWORD *)(v1 + 424) = 0;
  *(_QWORD *)(v1 + 408) = 0;
  *(_WORD *)(v1 + 432) = 0;
  *(_BYTE *)(v1 + 434) = 1;
  *(_OWORD *)(v1 + 436) = 0u;
  *(_OWORD *)(v1 + 452) = 0u;
  *(_OWORD *)(v1 + 468) = 0u;
  *(_DWORD *)(v1 + 484) = 0;
  v2 = *(_DWORD *)(v1 + 16) | 0x600;
  *(_DWORD *)(v1 + 12) = 1112363084;
  *(_DWORD *)(v1 + 16) = v2;
}

void HGBitmapLoader::HGBitmapLoader(HGBitmapLoader *this, HGBitmap *a2)
{
  uint64_t v4;
  HGBitmap *v5;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v4 = off_1E652C2F8;
  *(_QWORD *)(v4 + 416) = 0;
  *(_QWORD *)(v4 + 424) = 0;
  *(_QWORD *)(v4 + 408) = 0;
  *(_DWORD *)(v4 + 12) = 1112363084;
  if (a2)
  {
    (*(void (**)(HGBitmap *))(*(_QWORD *)a2 + 16))(a2);
    v5 = (HGBitmap *)*((_QWORD *)this + 51);
    if (v5 == a2)
    {
      (*(void (**)(HGBitmap *))(*(_QWORD *)a2 + 24))(a2);
    }
    else
    {
      if (v5)
        (*(void (**)(HGBitmap *))(*(_QWORD *)v5 + 24))(v5);
      *((_QWORD *)this + 51) = a2;
    }
  }
  *((_WORD *)this + 216) = 0;
  *((_BYTE *)this + 434) = 1;
  *((_DWORD *)this + 121) = 0;
  *(_OWORD *)((char *)this + 436) = 0u;
  *(_OWORD *)((char *)this + 452) = 0u;
  *(_OWORD *)((char *)this + 468) = 0u;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2AC52DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = v2;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v6 = *(_QWORD *)(v1 + 424);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_QWORD *)(v1 + 416);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  if (*v3)
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HGBitmapLoader::~HGBitmapLoader(HGNode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E652C2F8;
  v2 = *((_QWORD *)this + 55);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    *((_QWORD *)this + 55) = 0;
  }
  v3 = *((_QWORD *)this + 56);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    *((_QWORD *)this + 56) = 0;
  }
  v4 = *((_QWORD *)this + 57);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    *((_QWORD *)this + 57) = 0;
  }
  v5 = *((_QWORD *)this + 58);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    *((_QWORD *)this + 58) = 0;
  }
  v6 = *((_QWORD *)this + 59);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    *((_QWORD *)this + 59) = 0;
  }
  v7 = *((_QWORD *)this + 60);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    *((_QWORD *)this + 60) = 0;
  }
  v8 = *((_QWORD *)this + 53);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v9 = *((_QWORD *)this + 52);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v10 = *((_QWORD *)this + 51);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HGBitmapLoader::~HGBitmapLoader(this);
  HGObject::operator delete(v1);
}

HGBitmap *HGBitmapLoader::SetBitmap(HGNode *this, HGBitmap *a2, char *a3)
{
  HGBitmap *result;

  if (*((HGBitmap **)this + 51) != a2)
  {
    HGNode::ClearBits(this, (uint64_t)a2, a3);
    *((_BYTE *)this + 434) = 1;
  }
  if (a2)
  {
    (*(void (**)(HGBitmap *))(*(_QWORD *)a2 + 16))(a2);
    result = (HGBitmap *)*((_QWORD *)this + 51);
    if (result == a2)
      return (HGBitmap *)(*(uint64_t (**)(HGBitmap *))(*(_QWORD *)a2 + 24))(a2);
  }
  else
  {
    result = (HGBitmap *)*((_QWORD *)this + 51);
    if (!result)
      return result;
  }
  if (result)
    result = (HGBitmap *)(*(uint64_t (**)(HGBitmap *))(*(_QWORD *)result + 24))(result);
  *((_QWORD *)this + 51) = a2;
  return result;
}

void sub_1B2AC5518(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t HGBitmapLoader::SetParameter(HGBitmapLoader *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

BOOL HGBitmapLoader::CanBypassTiling(HGBitmapLoader *this, HGRenderer *a2)
{
  TXParagraphStyleFolder_Factory *v5;

  if (!*((_QWORD *)this + 51) || ((*(uint64_t (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2) & 1) != 0)
    return 0;
  return (TXParagraphStyleFolder_Factory::version(v5) & 1) != 0
      || *((_QWORD *)this + 53)
      || (*(_BYTE *)(*((_QWORD *)this + 51) + 12) & 0x30) != 0;
}

BOOL HGBitmapLoader::IsBitmapPadded(HGBitmapUtils **this, HGBitmap *a2)
{
  return HGBitmapUtils::isPadded(this[51], a2);
}

unint64_t HGBitmapLoader::GetDOD(HGBitmapLoader *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;

  if (a3)
    return 0;
  v4 = *((_QWORD *)this + 51);
  if (!v4)
    return 0;
  v5 = *((_DWORD *)this + 109);
  v6 = *(_DWORD *)(v4 + 24);
  v7 = v6 - v5;
  v8 = v5 < 1;
  if (v5 >= 1)
    v9 = *(_DWORD *)(v4 + 20) - v5;
  else
    v9 = *(_DWORD *)(v4 + 20);
  if (v8)
    v10 = v6;
  else
    v10 = v7;
  return v9 | (unint64_t)(v10 << 32);
}

uint64_t HGBitmapLoader::GetBitmapPtr(HGBitmapLoader *this)
{
  return *((_QWORD *)this + 51);
}

uint64_t HGBitmapLoader::GetBitmapFormat(HGBitmapLoader *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 51);
  if (v1)
    return *(unsigned int *)(v1 + 16);
  else
    return 0;
}

uint64_t HGBitmapLoader::PreRenderOption(uint64_t this, HGRenderer *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  HGRect *v6;
  uint64_t v7;
  uint64_t v8;
  HGMetalContext *MetalContext;
  HGRect v10;
  HGRect v11;

  if (*(_BYTE *)(this + 432))
  {
    v3 = this;
    this = (*(uint64_t (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2);
    if ((this & 1) == 0)
    {
      this = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 43);
      if ((_DWORD)this == 1)
      {
        v4 = *(unsigned __int8 *)(v3 + 433);
        this = HGGPURenderer::GetNodeRenderAPI(a2, (HGNode *)v3);
        if ((_DWORD)this == 1)
        {
          *(_QWORD *)&v10.var0 = HGRenderer::GetROI(a2, (HGNode *)v3);
          *(_QWORD *)&v10.var2 = v5;
          v6 = &v10;
          if (HGRect::IsNull(&v10))
            v6 = (HGRect *)(*(_QWORD *)(v3 + 408) + 20);
          v7 = *(_QWORD *)&v6->var0;
          v8 = *(_QWORD *)&v6->var2;
          MetalContext = (HGMetalContext *)HGGPURenderer::GetMetalContext(a2);
          *(_QWORD *)&v11.var0 = v7;
          *(_QWORD *)&v11.var2 = v8;
          return (uint64_t)HGBitmapLoader::UploadBitmap((HGMetalContext *)v3, v11, MetalContext, v4 == 0);
        }
      }
    }
  }
  return this;
}

HGMetalContext *HGBitmapLoader::UploadBitmap(HGMetalContext *this, HGRect a2, HGMetalContext *a3, uint64_t a4)
{
  HGRect v5;
  HGMetalContext *v6;
  HGMetalContext *v7;
  HGMetalContext *v8;

  *(_QWORD *)&v5.var0 = *(_QWORD *)&a2.var2;
  *(_QWORD *)&a2.var2 = *((_QWORD *)this + 51);
  if (*(_QWORD *)&a2.var2)
  {
    v6 = this;
    if (!*((_QWORD *)this + 53))
    {
      *(_QWORD *)&v5.var2 = 1;
      HGMetalTexture::createFromBitmap(a3, (HGMetalContext *)0xD, *(HGBitmap **)&a2.var0, v5, *(uint64_t *)&a2.var2, a4, &v8);
      this = (HGMetalContext *)*((_QWORD *)v6 + 53);
      v7 = v8;
      if (this == v8)
      {
        if (this)
          return (HGMetalContext *)(*(uint64_t (**)(HGMetalContext *))(*(_QWORD *)this + 24))(this);
      }
      else
      {
        if (this)
        {
          this = (HGMetalContext *)(*(uint64_t (**)(HGMetalContext *))(*(_QWORD *)this + 24))(this);
          v7 = v8;
        }
        *((_QWORD *)v6 + 53) = v7;
      }
    }
  }
  return this;
}

void sub_1B2AC57F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t HGBitmapLoader::RenderTile(HGBitmapLoader *this, HGTile *a2)
{
  uint64_t v4;

  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 51) + 72))(*((_QWORD *)this + 51), *((_QWORD *)a2 + 2));
  v4 = (*((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1)) * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
  HGStats::UnitStats::readTile(*(uint64_t **)(*((_QWORD *)a2 + 42) + 424), (HGNode *)this, v4, *(_QWORD *)(*((_QWORD *)this + 51) + 56) * v4);
  return 0;
}

uint64_t HGBitmapLoader::RenderPage(HGBitmapLoader *this, const char **a2)
{
  return HGBitmapLoader::RenderPage((uint64_t)this, a2, 0);
}

uint64_t HGBitmapLoader::RenderPage(uint64_t a1, const char **a2, char *a3)
{
  int v3;
  uint64_t v6;
  HGBitmap **v7;
  HGBitmap *v8;
  PCICCTransferFunctionLUT *MetalContext;
  PCICCTransferFunctionLUT *v10;
  HGMetalDeviceInfo *LUTEnd;
  uint64_t ROI;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Texture;
  uint64_t *v17;
  uint64_t v18;
  HGBitmap *v19;
  int v20;
  int v23;
  HGBitmap *v24;
  HGBitmap *v25;
  uint64_t v26;
  _BYTE v28[20];
  HGRect v29;
  HGRect v30;

  v3 = (int)a3;
  v6 = *(_QWORD *)(a1 + 408);
  if (v6 && (*(_BYTE *)(v6 + 12) & 0x10) != 0)
    HGGPURenderer::ValidateGLSharegroupSupport(*a2, "OpenGL sharegroup : HGBitmapLoader's bitmap is an OpenGL object.", a3);
  v7 = (HGBitmap **)(a1 + 408);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    v8 = *v7;
    HGEdgePolicy::HGEdgePolicy((uint64_t)v28, 1);
    HGBitmap::SetEdgePolicy(v8, (const HGEdgePolicy *)v28);
  }
  MetalContext = (PCICCTransferFunctionLUT *)HGGPURenderer::GetMetalContext((HGGPURenderer *)*a2);
  v10 = MetalContext;
  if (!MetalContext)
  {
    LUTEnd = 0;
    ROI = HGRenderer::GetROI((HGRenderer *)*a2, (HGNode *)a1);
    v14 = v15;
    goto LABEL_13;
  }
  LUTEnd = (HGMetalDeviceInfo *)PCICCTransferFunctionLUT::getLUTEnd(MetalContext);
  ROI = HGRenderer::GetROI((HGRenderer *)*a2, (HGNode *)a1);
  v14 = v13;
  if (!LUTEnd || !HGMetalDeviceInfo::isApple(LUTEnd))
  {
LABEL_13:
    Texture = HGGPURenderer::ShouldAllocateTexture((uint64_t)*a2, (int)v14 - (int)ROI, HIDWORD(v14) - HIDWORD(ROI), *((_DWORD *)*v7 + 4), v3 == 1, v3 == 0);
    v17 = (uint64_t *)(a1 + 424);
    v18 = *(_QWORD *)(a1 + 424);
    if (v18)
      goto LABEL_42;
    goto LABEL_14;
  }
  Texture = 1;
  v17 = (uint64_t *)(a1 + 424);
  v18 = *(_QWORD *)(a1 + 424);
  if (v18)
    goto LABEL_42;
LABEL_14:
  v19 = *v7;
  if (LUTEnd)
    v20 = Texture;
  else
    v20 = 0;
  if ((*((_BYTE *)v19 + 12) & 0x30) != 0 || v20 == 0 || HG_RENDERER_ENV::FORCE_FULLSIZE_TEXTURE_UPLOAD != 1)
    goto LABEL_38;
  if (v3)
  {
    v23 = *((_DWORD *)v10 + 12);
    *(_QWORD *)&v29.var0 = ROI;
    *(_QWORD *)&v29.var2 = v14;
    v24 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)*a2, v29, v19);
    v25 = (HGBitmap *)*v17;
    if ((HGBitmap *)*v17 == v24)
    {
      if (v24)
        (*(void (**)(HGBitmap *))(*(_QWORD *)v24 + 24))(v24);
    }
    else
    {
      if (v25)
        (*(void (**)(HGBitmap *))(*(_QWORD *)v25 + 24))(v25);
      *v17 = (uint64_t)v24;
    }
    *((_DWORD *)v10 + 12) = v23;
LABEL_38:
    v18 = *v17;
    if (*v17)
      goto LABEL_42;
    goto LABEL_39;
  }
  *(_QWORD *)&v30.var0 = ROI;
  *(_QWORD *)&v30.var2 = v14;
  v18 = HGGPURenderer::ConvertToGLTexture((HGGPURenderer *)*a2, v30, v19);
  v26 = *v17;
  if (*v17 == v18)
  {
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      goto LABEL_38;
    }
LABEL_39:
    v18 = *(_QWORD *)(a1 + 416);
    if (v18)
    {
      v17 = (uint64_t *)(a1 + 416);
    }
    else
    {
      v18 = (uint64_t)*v7;
      v17 = (uint64_t *)(a1 + 408);
    }
    goto LABEL_42;
  }
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
  *v17 = v18;
  if (!v18)
    goto LABEL_39;
LABEL_42:
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  return *v17;
}

void sub_1B2AC5AF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t HGBitmapLoader::RenderPageMetal(HGBitmapLoader *this, const char **a2)
{
  return HGBitmapLoader::RenderPage((uint64_t)this, a2, (char *)1);
}

uint64_t HGBitmapLoader::SetState(HGBitmapLoader *this, HGRenderer *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a3 == 2)
  {
    v6 = *((_QWORD *)this + 52);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    *((_QWORD *)this + 52) = 0;
    v7 = *((_QWORD *)this + 53);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    *((_QWORD *)this + 53) = 0;
  }
  return HGNode::SetState((uint64_t)this, (uint64_t)a2, a3);
}

HGBitmapLoader *HGBitmapLoader::GetOutput(HGBitmapLoader *this, HGRenderer *a2)
{
  HGBitmapLoader *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  HGBitmapLoader *v10;
  uint64_t v11;

  v2 = this;
  if (*((_QWORD *)this + 51)
    && ((*(uint64_t (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2) & 1) == 0
    && *((_BYTE *)v2 + 434))
  {
    v3 = *(_DWORD *)(*((_QWORD *)v2 + 51) + 16);
    *((_BYTE *)v2 + 434) = 0;
    v4 = *((_QWORD *)v2 + 55);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      *((_QWORD *)v2 + 55) = 0;
    }
    v5 = *((_QWORD *)v2 + 56);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      *((_QWORD *)v2 + 56) = 0;
    }
    v6 = *((_QWORD *)v2 + 57);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      *((_QWORD *)v2 + 57) = 0;
    }
    v7 = *((_QWORD *)v2 + 58);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      *((_QWORD *)v2 + 58) = 0;
    }
    v8 = *((_QWORD *)v2 + 59);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
      *((_QWORD *)v2 + 59) = 0;
    }
    v9 = *((_QWORD *)v2 + 60);
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      *((_QWORD *)v2 + 60) = 0;
    }
    switch(v3)
    {
      case 22:
        v10 = (HGBitmapLoader *)*((_QWORD *)v2 + 56);
        if (!v10)
        {
          v10 = (HGBitmapLoader *)HGObject::operator new(0x1A0uLL);
          *(_OWORD *)v10 = 0u;
          *((_OWORD *)v10 + 1) = 0u;
          *((_OWORD *)v10 + 2) = 0u;
          *((_OWORD *)v10 + 3) = 0u;
          *((_OWORD *)v10 + 4) = 0u;
          *((_OWORD *)v10 + 5) = 0u;
          *((_OWORD *)v10 + 6) = 0u;
          *((_OWORD *)v10 + 7) = 0u;
          *((_OWORD *)v10 + 8) = 0u;
          *((_OWORD *)v10 + 9) = 0u;
          *((_OWORD *)v10 + 10) = 0u;
          *((_OWORD *)v10 + 11) = 0u;
          *((_OWORD *)v10 + 12) = 0u;
          *((_OWORD *)v10 + 13) = 0u;
          *((_OWORD *)v10 + 14) = 0u;
          *((_OWORD *)v10 + 15) = 0u;
          *((_OWORD *)v10 + 16) = 0u;
          *((_OWORD *)v10 + 17) = 0u;
          *((_OWORD *)v10 + 18) = 0u;
          *((_OWORD *)v10 + 19) = 0u;
          *((_OWORD *)v10 + 20) = 0u;
          *((_OWORD *)v10 + 21) = 0u;
          *((_OWORD *)v10 + 22) = 0u;
          *((_OWORD *)v10 + 23) = 0u;
          *((_OWORD *)v10 + 24) = 0u;
          *((_OWORD *)v10 + 25) = 0u;
          HgcPixelFormatConversion_kV4B_WXYZ_input::HgcPixelFormatConversion_kV4B_WXYZ_input(v10);
          *(_QWORD *)v10 = off_1E652C570;
          *((_QWORD *)v2 + 56) = v10;
        }
        goto LABEL_26;
      case 26:
        v10 = (HGBitmapLoader *)*((_QWORD *)v2 + 57);
        if (!v10)
        {
          v10 = (HGBitmapLoader *)HGObject::operator new(0x1A0uLL);
          *(_OWORD *)v10 = 0u;
          *((_OWORD *)v10 + 1) = 0u;
          *((_OWORD *)v10 + 2) = 0u;
          *((_OWORD *)v10 + 3) = 0u;
          *((_OWORD *)v10 + 4) = 0u;
          *((_OWORD *)v10 + 5) = 0u;
          *((_OWORD *)v10 + 6) = 0u;
          *((_OWORD *)v10 + 7) = 0u;
          *((_OWORD *)v10 + 8) = 0u;
          *((_OWORD *)v10 + 9) = 0u;
          *((_OWORD *)v10 + 10) = 0u;
          *((_OWORD *)v10 + 11) = 0u;
          *((_OWORD *)v10 + 12) = 0u;
          *((_OWORD *)v10 + 13) = 0u;
          *((_OWORD *)v10 + 14) = 0u;
          *((_OWORD *)v10 + 15) = 0u;
          *((_OWORD *)v10 + 16) = 0u;
          *((_OWORD *)v10 + 17) = 0u;
          *((_OWORD *)v10 + 18) = 0u;
          *((_OWORD *)v10 + 19) = 0u;
          *((_OWORD *)v10 + 20) = 0u;
          *((_OWORD *)v10 + 21) = 0u;
          *((_OWORD *)v10 + 22) = 0u;
          *((_OWORD *)v10 + 23) = 0u;
          *((_OWORD *)v10 + 24) = 0u;
          *((_OWORD *)v10 + 25) = 0u;
          HgcPixelFormatConversion_kV4S_WXYZ_input::HgcPixelFormatConversion_kV4S_WXYZ_input(v10);
          *(_QWORD *)v10 = off_1E652C7D8;
          *((_QWORD *)v2 + 57) = v10;
        }
        goto LABEL_26;
      case 29:
        v10 = (HGBitmapLoader *)*((_QWORD *)v2 + 58);
        if (!v10)
        {
          v10 = (HGBitmapLoader *)HGObject::operator new(0x1A0uLL);
          *(_OWORD *)v10 = 0u;
          *((_OWORD *)v10 + 1) = 0u;
          *((_OWORD *)v10 + 2) = 0u;
          *((_OWORD *)v10 + 3) = 0u;
          *((_OWORD *)v10 + 4) = 0u;
          *((_OWORD *)v10 + 5) = 0u;
          *((_OWORD *)v10 + 6) = 0u;
          *((_OWORD *)v10 + 7) = 0u;
          *((_OWORD *)v10 + 8) = 0u;
          *((_OWORD *)v10 + 9) = 0u;
          *((_OWORD *)v10 + 10) = 0u;
          *((_OWORD *)v10 + 11) = 0u;
          *((_OWORD *)v10 + 12) = 0u;
          *((_OWORD *)v10 + 13) = 0u;
          *((_OWORD *)v10 + 14) = 0u;
          *((_OWORD *)v10 + 15) = 0u;
          *((_OWORD *)v10 + 16) = 0u;
          *((_OWORD *)v10 + 17) = 0u;
          *((_OWORD *)v10 + 18) = 0u;
          *((_OWORD *)v10 + 19) = 0u;
          *((_OWORD *)v10 + 20) = 0u;
          *((_OWORD *)v10 + 21) = 0u;
          *((_OWORD *)v10 + 22) = 0u;
          *((_OWORD *)v10 + 23) = 0u;
          *((_OWORD *)v10 + 24) = 0u;
          *((_OWORD *)v10 + 25) = 0u;
          HgcPixelFormatConversion_kV4F_WXYZ_input::HgcPixelFormatConversion_kV4F_WXYZ_input(v10);
          *(_QWORD *)v10 = off_1E652CA40;
          *((_QWORD *)v2 + 58) = v10;
        }
        goto LABEL_26;
      case 32:
        v10 = (HGBitmapLoader *)HGObject::operator new(0x1A0uLL);
        *(_OWORD *)v10 = 0u;
        *((_OWORD *)v10 + 1) = 0u;
        *((_OWORD *)v10 + 2) = 0u;
        *((_OWORD *)v10 + 3) = 0u;
        *((_OWORD *)v10 + 4) = 0u;
        *((_OWORD *)v10 + 5) = 0u;
        *((_OWORD *)v10 + 6) = 0u;
        *((_OWORD *)v10 + 7) = 0u;
        *((_OWORD *)v10 + 8) = 0u;
        *((_OWORD *)v10 + 9) = 0u;
        *((_OWORD *)v10 + 10) = 0u;
        *((_OWORD *)v10 + 11) = 0u;
        *((_OWORD *)v10 + 12) = 0u;
        *((_OWORD *)v10 + 13) = 0u;
        *((_OWORD *)v10 + 14) = 0u;
        *((_OWORD *)v10 + 15) = 0u;
        *((_OWORD *)v10 + 16) = 0u;
        *((_OWORD *)v10 + 17) = 0u;
        *((_OWORD *)v10 + 18) = 0u;
        *((_OWORD *)v10 + 19) = 0u;
        *((_OWORD *)v10 + 20) = 0u;
        *((_OWORD *)v10 + 21) = 0u;
        *((_OWORD *)v10 + 22) = 0u;
        *((_OWORD *)v10 + 23) = 0u;
        *((_OWORD *)v10 + 24) = 0u;
        *((_OWORD *)v10 + 25) = 0u;
        HgcPixelFormatConversion_kV4B10Bit_BE_input::HgcPixelFormatConversion_kV4B10Bit_BE_input(v10);
        *(_QWORD *)v10 = off_1E652CF10;
        *((_QWORD *)v2 + 60) = v10;
        goto LABEL_26;
      case 33:
        v10 = (HGBitmapLoader *)*((_QWORD *)v2 + 59);
        if (!v10)
        {
          v10 = (HGBitmapLoader *)HGObject::operator new(0x1A0uLL);
          *(_OWORD *)v10 = 0u;
          *((_OWORD *)v10 + 1) = 0u;
          *((_OWORD *)v10 + 2) = 0u;
          *((_OWORD *)v10 + 3) = 0u;
          *((_OWORD *)v10 + 4) = 0u;
          *((_OWORD *)v10 + 5) = 0u;
          *((_OWORD *)v10 + 6) = 0u;
          *((_OWORD *)v10 + 7) = 0u;
          *((_OWORD *)v10 + 8) = 0u;
          *((_OWORD *)v10 + 9) = 0u;
          *((_OWORD *)v10 + 10) = 0u;
          *((_OWORD *)v10 + 11) = 0u;
          *((_OWORD *)v10 + 12) = 0u;
          *((_OWORD *)v10 + 13) = 0u;
          *((_OWORD *)v10 + 14) = 0u;
          *((_OWORD *)v10 + 15) = 0u;
          *((_OWORD *)v10 + 16) = 0u;
          *((_OWORD *)v10 + 17) = 0u;
          *((_OWORD *)v10 + 18) = 0u;
          *((_OWORD *)v10 + 19) = 0u;
          *((_OWORD *)v10 + 20) = 0u;
          *((_OWORD *)v10 + 21) = 0u;
          *((_OWORD *)v10 + 22) = 0u;
          *((_OWORD *)v10 + 23) = 0u;
          *((_OWORD *)v10 + 24) = 0u;
          *((_OWORD *)v10 + 25) = 0u;
          HgcPixelFormatConversion_kV4S_BE_WXYZ_input::HgcPixelFormatConversion_kV4S_BE_WXYZ_input(v10);
          *(_QWORD *)v10 = off_1E652CCA8;
          *((_QWORD *)v2 + 59) = v10;
        }
LABEL_26:
        if (v10 != v2)
        {
          v11 = (*(uint64_t (**)(HGBitmapLoader *))(*(_QWORD *)v2 + 584))(v2);
          *((_QWORD *)v2 + 55) = v11;
          *(_BYTE *)(v11 + 434) = 0;
          (*(void (**)(HGBitmapLoader *, _QWORD, uint64_t))(*(_QWORD *)v10 + 120))(v10, 0, v11);
          v2 = v10;
        }
        break;
      default:
        return v2;
    }
  }
  return v2;
}

void sub_1B2AC5ED8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AC5EEC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AC5F00(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AC5F14(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AC5F28(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

HGBitmapLoader *HGBitmapLoader::Duplicate(HGBitmap **this)
{
  HGBitmapLoader *v2;

  v2 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v2, this[51]);
  return v2;
}

void sub_1B2AC5F70(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HGCPixelFormatConversion_kV4B_WXYZ_input::~HGCPixelFormatConversion_kV4B_WXYZ_input(HGNode *this)
{
  void *v1;

  HgcPixelFormatConversion_kV4B_WXYZ_input::~HgcPixelFormatConversion_kV4B_WXYZ_input(this);
  HGObject::operator delete(v1);
}

uint64_t HGCPixelFormatConversion_kV4B_WXYZ_input::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  return HGRenderer::GetDOD(a2, Input);
}

uint64_t HGCPixelFormatConversion_kV4B_WXYZ_input::GetROI(HGCPixelFormatConversion_kV4B_WXYZ_input *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HGCPixelFormatConversion_kV4S_WXYZ_input::~HGCPixelFormatConversion_kV4S_WXYZ_input(HGNode *this)
{
  void *v1;

  HgcPixelFormatConversion_kV4S_WXYZ_input::~HgcPixelFormatConversion_kV4S_WXYZ_input(this);
  HGObject::operator delete(v1);
}

uint64_t HGCPixelFormatConversion_kV4S_WXYZ_input::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  return HGRenderer::GetDOD(a2, Input);
}

uint64_t HGCPixelFormatConversion_kV4S_WXYZ_input::GetROI(HGCPixelFormatConversion_kV4S_WXYZ_input *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HGCPixelFormatConversion_kV4F_WXYZ_input::~HGCPixelFormatConversion_kV4F_WXYZ_input(HGNode *this)
{
  void *v1;

  HgcPixelFormatConversion_kV4F_WXYZ_input::~HgcPixelFormatConversion_kV4F_WXYZ_input(this);
  HGObject::operator delete(v1);
}

uint64_t HGCPixelFormatConversion_kV4F_WXYZ_input::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  return HGRenderer::GetDOD(a2, Input);
}

uint64_t HGCPixelFormatConversion_kV4F_WXYZ_input::GetROI(HGCPixelFormatConversion_kV4F_WXYZ_input *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HGCPixelFormatConversion_kV4S_BE_WXYZ_input::~HGCPixelFormatConversion_kV4S_BE_WXYZ_input(HGNode *this)
{
  void *v1;

  HgcPixelFormatConversion_kV4S_BE_WXYZ_input::~HgcPixelFormatConversion_kV4S_BE_WXYZ_input(this);
  HGObject::operator delete(v1);
}

uint64_t HGCPixelFormatConversion_kV4S_BE_WXYZ_input::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  return HGRenderer::GetDOD(a2, Input);
}

uint64_t HGCPixelFormatConversion_kV4S_BE_WXYZ_input::GetROI(HGCPixelFormatConversion_kV4S_BE_WXYZ_input *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HGCPixelFormatConversion_kV4B10Bit_BE_input::~HGCPixelFormatConversion_kV4B10Bit_BE_input(HGNode *this)
{
  void *v1;

  HgcPixelFormatConversion_kV4B10Bit_BE_input::~HgcPixelFormatConversion_kV4B10Bit_BE_input(this);
  HGObject::operator delete(v1);
}

uint64_t HGCPixelFormatConversion_kV4B10Bit_BE_input::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  return HGRenderer::GetDOD(a2, Input);
}

uint64_t HGCPixelFormatConversion_kV4B10Bit_BE_input::GetROI(HGCPixelFormatConversion_kV4B10Bit_BE_input *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HGComicSobelOperator::HGComicSobelOperator(HGComicSobelOperator *this)
{
  uint64_t v1;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v1 = off_1E652D178;
  *(_DWORD *)(v1 + 408) = 1065353216;
  *(_BYTE *)(v1 + 412) = 0;
  *(_DWORD *)(v1 + 16) |= 0x600u;
}

void HGComicSobelOperator::~HGComicSobelOperator(HGNode *this)
{
  void *v1;

  HGNode::~HGNode(this);
  HGObject::operator delete(v1);
}

uint64_t HGComicSobelOperator::SetParameter(HGComicSobelOperator *this, int a2, float a3, float a4, float a5, float a6)
{
  int v7;

  if (a2)
  {
    if (a2 == 1)
    {
      if (*((float *)this + 102) != a3)
      {
        *((float *)this + 102) = a3;
        return 1;
      }
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    v7 = a3 == 1.0;
    if (*((unsigned __int8 *)this + 412) == v7)
      return 0;
    *((_BYTE *)this + 412) = v7;
    return 1;
  }
}

HGComicSobelOperator *HGComicSobelOperator::GetOutput(HGComicSobelOperator *this, HGRenderer *a2, char *a3)
{
  float v4;

  v4 = 1.0;
  if (!*((_BYTE *)this + 412))
    v4 = 0.0;
  HGNode::SetParameter((HGNode *)this, 0, v4, 0.0, 0.0, 0.0, a3);
  return this;
}

uint64_t HGComicSobelOperator::RenderTile(HGComicSobelOperator *this, float32x4_t **a2)
{
  float v4;
  uint64_t v5;
  int v6;
  int32x2_t v7;
  int v8;
  uint64_t v9;
  int v10;
  float32x4_t v11;
  int v12;
  float v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x2_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  float32x2_t v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  float32x2_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  float32x2_t v57;
  float32x4_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x2_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  float32x2_t v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  float32x2_t v78;
  float32x4_t *v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int32x4_t v84;
  float32x2_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int32x4_t v91;
  float32x2_t v92;
  float32x4_t *v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int32x4_t v105;

  v4 = *((float *)this + 102);
  v5 = HGTile::Renderer((HGTile *)a2);
  v6 = (*(uint64_t (**)(HGComicSobelOperator *, uint64_t))(*(_QWORD *)this + 312))(this, v5);
  v7 = (int32x2_t)*a2;
  v8 = *((_DWORD *)a2 + 3) - ((unint64_t)*a2 >> 32);
  if (v8 >= 1)
  {
    v9 = (*((_DWORD *)a2 + 2) - v7.i32[0]);
    if ((int)v9 >= 1)
    {
      v10 = 0;
      *(float32x2_t *)v11.f32 = vadd_f32(vcvt_f32_s32(v7), (float32x2_t)0x3F0000003F000000);
      v11.i64[1] = 0x3F80000000000000;
      v12 = *((unsigned __int8 *)this + 412);
      v13 = 1.0 / v4;
      v14 = a2[2];
      v15.i64[0] = 0x3F0000003F000000;
      v15.i64[1] = 0x3F0000003F000000;
      v16.i64[0] = 0xC0000000C0000000;
      v16.i64[1] = 0xC0000000C0000000;
      v17 = v11;
      do
      {
        v18 = v9;
        v19 = v14;
        v20 = v17;
        do
        {
          v31 = vmulq_n_f32(v20, v13);
          v32 = a2[10];
          v33 = *((int *)a2 + 22);
          v34 = vsubq_f32(vaddq_f32(v31, (float32x4_t)xmmword_1B3052990), v11);
          if (v6)
          {
            v35 = vaddq_s32(vcvtq_s32_f32(v34), vcltzq_f32(v34));
            v36 = (float32x2_t)vsubq_f32(v34, vcvtq_f32_s32(v35)).u64[0];
            v37 = &v32[v35.i32[0] + v35.i32[1] * (int)v33];
            v38 = vaddq_f32(*v37, vmulq_n_f32(vsubq_f32(v37[1], *v37), v36.f32[0]));
            v39 = vaddq_f32(v38, vmulq_lane_f32(vsubq_f32(vaddq_f32(v37[v33], vmulq_n_f32(vsubq_f32(v37[(int)v33 + 1], v37[v33]), v36.f32[0])), v38), v36, 1));
            if (!v12)
              goto LABEL_12;
          }
          else
          {
            v96 = vaddq_f32(v34, v15);
            v38 = (float32x4_t)vcvtq_s32_f32(v96);
            v96.i64[0] = vaddq_s32((int32x4_t)v38, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v38), v96)).u64[0];
            v39 = v32[v96.i32[0] + v96.i32[1] * (int)v33];
            if (!v12)
              goto LABEL_12;
          }
          v38.i32[0] = v39.i32[3];
          if (v39.f32[3] < 0.000001)
            v38.f32[0] = 0.000001;
          v40 = vdivq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 0));
          v40.i32[3] = v39.i32[3];
          v39 = v40;
LABEL_12:
          v41 = vsubq_f32(vaddq_f32(v31, (float32x4_t)xmmword_1B3524180), v11);
          if (v6)
          {
            v42 = vaddq_s32(vcvtq_s32_f32(v41), vcltzq_f32(v41));
            v43 = (float32x2_t)vsubq_f32(v41, vcvtq_f32_s32(v42)).u64[0];
            v44 = &v32[v42.i32[0] + v42.i32[1] * (int)v33];
            v45 = vaddq_f32(*v44, vmulq_n_f32(vsubq_f32(v44[1], *v44), v43.f32[0]));
            v46 = vaddq_f32(v45, vmulq_lane_f32(vsubq_f32(vaddq_f32(v44[v33], vmulq_n_f32(vsubq_f32(v44[(int)v33 + 1], v44[v33]), v43.f32[0])), v45), v43, 1));
            if (!v12)
              goto LABEL_17;
          }
          else
          {
            v97 = vaddq_f32(v41, v15);
            v45 = (float32x4_t)vcvtq_s32_f32(v97);
            v97.i64[0] = vaddq_s32((int32x4_t)v45, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v45), v97)).u64[0];
            v46 = v32[v97.i32[0] + v97.i32[1] * (int)v33];
            if (!v12)
              goto LABEL_17;
          }
          v45.i32[0] = v46.i32[3];
          if (v46.f32[3] < 0.000001)
            v45.f32[0] = 0.000001;
          v47 = vdivq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 0));
          v47.i32[3] = v46.i32[3];
          v46 = v47;
LABEL_17:
          v48 = vsubq_f32(vaddq_f32(v31, (float32x4_t)xmmword_1B3524190), v11);
          if (v6)
          {
            v49 = vaddq_s32(vcvtq_s32_f32(v48), vcltzq_f32(v48));
            v50 = (float32x2_t)vsubq_f32(v48, vcvtq_f32_s32(v49)).u64[0];
            v51 = &v32[v49.i32[0] + v49.i32[1] * (int)v33];
            v52 = vaddq_f32(*v51, vmulq_n_f32(vsubq_f32(v51[1], *v51), v50.f32[0]));
            v53 = vaddq_f32(v52, vmulq_lane_f32(vsubq_f32(vaddq_f32(v51[v33], vmulq_n_f32(vsubq_f32(v51[(int)v33 + 1], v51[v33]), v50.f32[0])), v52), v50, 1));
            if (!v12)
              goto LABEL_22;
          }
          else
          {
            v98 = vaddq_f32(v48, v15);
            v52 = (float32x4_t)vcvtq_s32_f32(v98);
            v98.i64[0] = vaddq_s32((int32x4_t)v52, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v52), v98)).u64[0];
            v53 = v32[v98.i32[0] + v98.i32[1] * (int)v33];
            if (!v12)
              goto LABEL_22;
          }
          v52.i32[0] = v53.i32[3];
          if (v53.f32[3] < 0.000001)
            v52.f32[0] = 0.000001;
          v54 = vdivq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0));
          v54.i32[3] = v53.i32[3];
          v53 = v54;
LABEL_22:
          v55 = vsubq_f32(vaddq_f32(v31, (float32x4_t)xmmword_1B3052980), v11);
          if (v6)
          {
            v56 = vaddq_s32(vcvtq_s32_f32(v55), vcltzq_f32(v55));
            v57 = (float32x2_t)vsubq_f32(v55, vcvtq_f32_s32(v56)).u64[0];
            v58 = &v32[v56.i32[0] + v56.i32[1] * (int)v33];
            v59 = vaddq_f32(*v58, vmulq_n_f32(vsubq_f32(v58[1], *v58), v57.f32[0]));
            v60 = vaddq_f32(v59, vmulq_lane_f32(vsubq_f32(vaddq_f32(v58[v33], vmulq_n_f32(vsubq_f32(v58[(int)v33 + 1], v58[v33]), v57.f32[0])), v59), v57, 1));
            if (!v12)
              goto LABEL_27;
          }
          else
          {
            v99 = vaddq_f32(v55, v15);
            v59 = (float32x4_t)vcvtq_s32_f32(v99);
            v99.i64[0] = vaddq_s32((int32x4_t)v59, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v59), v99)).u64[0];
            v60 = v32[v99.i32[0] + v99.i32[1] * (int)v33];
            if (!v12)
              goto LABEL_27;
          }
          v59.i32[0] = v60.i32[3];
          if (v60.f32[3] < 0.000001)
            v59.f32[0] = 0.000001;
          v61 = vdivq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 0));
          v61.i32[3] = v60.i32[3];
          v60 = v61;
LABEL_27:
          v62 = vsubq_f32(vaddq_f32(v31, (float32x4_t)xmmword_1B304F230), v11);
          if (v6)
          {
            v63 = vaddq_s32(vcvtq_s32_f32(v62), vcltzq_f32(v62));
            v64 = (float32x2_t)vsubq_f32(v62, vcvtq_f32_s32(v63)).u64[0];
            v65 = &v32[v63.i32[0] + v63.i32[1] * (int)v33];
            v66 = vaddq_f32(*v65, vmulq_n_f32(vsubq_f32(v65[1], *v65), v64.f32[0]));
            v67 = vaddq_f32(v66, vmulq_lane_f32(vsubq_f32(vaddq_f32(v65[v33], vmulq_n_f32(vsubq_f32(v65[(int)v33 + 1], v65[v33]), v64.f32[0])), v66), v64, 1));
            if (!v12)
              goto LABEL_32;
          }
          else
          {
            v100 = vaddq_f32(v62, v15);
            v66 = (float32x4_t)vcvtq_s32_f32(v100);
            v100.i64[0] = vaddq_s32((int32x4_t)v66, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v66), v100)).u64[0];
            v67 = v32[v100.i32[0] + v100.i32[1] * (int)v33];
            if (!v12)
              goto LABEL_32;
          }
          v66.i32[0] = v67.i32[3];
          if (v67.f32[3] < 0.000001)
            v66.f32[0] = 0.000001;
          v68 = vdivq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 0));
          v68.i32[3] = v67.i32[3];
          v67 = v68;
LABEL_32:
          v69 = vsubq_f32(vaddq_f32(v31, (float32x4_t)xmmword_1B30520F0), v11);
          if (v6)
          {
            v70 = vaddq_s32(vcvtq_s32_f32(v69), vcltzq_f32(v69));
            v71 = (float32x2_t)vsubq_f32(v69, vcvtq_f32_s32(v70)).u64[0];
            v72 = &v32[v70.i32[0] + v70.i32[1] * (int)v33];
            v73 = vaddq_f32(*v72, vmulq_n_f32(vsubq_f32(v72[1], *v72), v71.f32[0]));
            v74 = vaddq_f32(v73, vmulq_lane_f32(vsubq_f32(vaddq_f32(v72[v33], vmulq_n_f32(vsubq_f32(v72[(int)v33 + 1], v72[v33]), v71.f32[0])), v73), v71, 1));
            if (!v12)
              goto LABEL_37;
          }
          else
          {
            v101 = vaddq_f32(v69, v15);
            v73 = (float32x4_t)vcvtq_s32_f32(v101);
            v101.i64[0] = vaddq_s32((int32x4_t)v73, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v73), v101)).u64[0];
            v74 = v32[v101.i32[0] + v101.i32[1] * (int)v33];
            if (!v12)
              goto LABEL_37;
          }
          v73.i32[0] = v74.i32[3];
          if (v74.f32[3] < 0.000001)
            v73.f32[0] = 0.000001;
          v75 = vdivq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 0));
          v75.i32[3] = v74.i32[3];
          v74 = v75;
LABEL_37:
          v76 = vsubq_f32(vaddq_f32(v31, (float32x4_t)xmmword_1B3523FD0), v11);
          if (v6)
          {
            v77 = vaddq_s32(vcvtq_s32_f32(v76), vcltzq_f32(v76));
            v78 = (float32x2_t)vsubq_f32(v76, vcvtq_f32_s32(v77)).u64[0];
            v79 = &v32[v77.i32[0] + v77.i32[1] * (int)v33];
            v80 = vaddq_f32(*v79, vmulq_n_f32(vsubq_f32(v79[1], *v79), v78.f32[0]));
            v81 = vaddq_f32(v80, vmulq_lane_f32(vsubq_f32(vaddq_f32(v79[v33], vmulq_n_f32(vsubq_f32(v79[(int)v33 + 1], v79[v33]), v78.f32[0])), v80), v78, 1));
            if (!v12)
              goto LABEL_42;
          }
          else
          {
            v102 = vaddq_f32(v76, v15);
            v80 = (float32x4_t)vcvtq_s32_f32(v102);
            v102.i64[0] = vaddq_s32((int32x4_t)v80, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v80), v102)).u64[0];
            v81 = v32[v102.i32[0] + v102.i32[1] * (int)v33];
            if (!v12)
              goto LABEL_42;
          }
          v80.i32[0] = v81.i32[3];
          if (v81.f32[3] < 0.000001)
            v80.f32[0] = 0.000001;
          v82 = vdivq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 0));
          v82.i32[3] = v81.i32[3];
          v81 = v82;
LABEL_42:
          v83 = vsubq_f32(vaddq_f32(v31, (float32x4_t)xmmword_1B304F240), v11);
          if (v6)
          {
            v84 = vaddq_s32(vcvtq_s32_f32(v83), vcltzq_f32(v83));
            v85 = (float32x2_t)vsubq_f32(v83, vcvtq_f32_s32(v84)).u64[0];
            v86 = &v32[v84.i32[0] + v84.i32[1] * (int)v33];
            v87 = vaddq_f32(*v86, vmulq_n_f32(vsubq_f32(v86[1], *v86), v85.f32[0]));
            v88 = vaddq_f32(v87, vmulq_lane_f32(vsubq_f32(vaddq_f32(v86[v33], vmulq_n_f32(vsubq_f32(v86[(int)v33 + 1], v86[v33]), v85.f32[0])), v87), v85, 1));
            if (!v12)
              goto LABEL_47;
          }
          else
          {
            v103 = vaddq_f32(v83, v15);
            v87 = (float32x4_t)vcvtq_s32_f32(v103);
            v103.i64[0] = vaddq_s32((int32x4_t)v87, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v87), v103)).u64[0];
            v88 = v32[v103.i32[0] + v103.i32[1] * (int)v33];
            if (!v12)
              goto LABEL_47;
          }
          v87.i32[0] = v88.i32[3];
          if (v88.f32[3] < 0.000001)
            v87.f32[0] = 0.000001;
          v89 = vdivq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 0));
          v89.i32[3] = v88.i32[3];
          v88 = v89;
LABEL_47:
          v90 = vsubq_f32(v31, v11);
          if (v6)
          {
            v91 = vaddq_s32(vcvtq_s32_f32(v90), vcltzq_f32(v90));
            v92 = (float32x2_t)vsubq_f32(v90, vcvtq_f32_s32(v91)).u64[0];
            v93 = &v32[v91.i32[0] + v91.i32[1] * (int)v33];
            v94 = vaddq_f32(*v93, vmulq_n_f32(vsubq_f32(v93[1], *v93), v92.f32[0]));
            v95 = vaddq_f32(v94, vmulq_lane_f32(vsubq_f32(vaddq_f32(v93[v33], vmulq_n_f32(vsubq_f32(v93[(int)v33 + 1], v93[v33]), v92.f32[0])), v94), v92, 1));
          }
          else
          {
            v104 = vaddq_f32(v90, v15);
            v105 = vcvtq_s32_f32(v104);
            v104.i64[0] = vaddq_s32(v105, vcgtq_f32(vcvtq_f32_s32(v105), v104)).u64[0];
            v95 = v32[v104.i32[0] + v104.i32[1] * (int)v33];
          }
          v21 = vaddq_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vmulq_f32(v46, v16), v39), v53), v60), vaddq_f32(v67, v67)), v74);
          v22 = vaddq_f32(v74, vaddq_f32(vaddq_f32(v53, vsubq_f32(vsubq_f32(vmulq_f32(v81, v16), v39), v60)), vaddq_f32(v88, v88)));
          v23 = (int8x16_t)vmulq_f32(v21, v21);
          *(float32x2_t *)v23.i8 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
          v24 = (int8x16_t)vmulq_f32(v22, v22);
          *(float32x2_t *)v24.i8 = vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
          *(float32x2_t *)v23.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v23.i8, *(int32x2_t *)v24.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v23.i8, *(int32x2_t *)v24.i8));
          v25 = (int8x16_t)vmulq_f32(v21, v22);
          *(float *)&v23.i32[2] = (float)(vaddv_f32(vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)))+ 1.0)* 0.5;
          v23.i32[3] = v95.i32[3];
          __asm { FMOV            V25.4S, #1.0 }
          *v19++ = vmaxnmq_f32(vminnmq_f32((float32x4_t)v23, _Q25), (float32x4_t)0);
          v20 = vaddq_f32(v20, (float32x4_t)xmmword_1B304F230);
          --v18;
        }
        while (v18);
        v17 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F240);
        v14 += *((int *)a2 + 6);
        ++v10;
      }
      while (v10 != v8);
    }
  }
  return 0;
}

uint64_t HGComicSobelOperator::IntermediateFormat()
{
  return 24;
}

uint64_t HGComicSobelOperator::GetDOD(HGComicSobelOperator *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  double v6;
  const HGTransform *v7;
  uint64_t v8;
  HGTransformUtils *v9;
  float v10;
  _BYTE v12[144];
  HGRect v13;
  HGRect v14;

  v13 = a4;
  if (a3)
    return 0;
  if (HGRect::IsInfinite(&v13))
    return *(_QWORD *)&v13.var0;
  v6 = *((float *)this + 102);
  HGTransform::HGTransform((HGTransform *)v12);
  HGTransform::Scale((HGTransform *)v12, v6, v6, 1.0);
  v7 = *(const HGTransform **)&v13.var0;
  v8 = *(_QWORD *)&v13.var2;
  v10 = HGTransformUtils::MinW(v9);
  *(_QWORD *)&v14.var0 = v8;
  DOD = HGTransformUtils::GetDOD((HGTransformUtils *)v12, v7, v14, 0.5, v10);
  HGTransform::~HGTransform((HGTransform *)v12);
  return DOD;
}

void sub_1B2AC6BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AC6C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HGComicSobelOperator::GetROI(HGComicSobelOperator *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  unint64_t v6;
  double v7;
  HGTransformUtils *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[144];
  HGRect v18;
  HGRect v19;
  HGRect v20;
  HGRect v21;

  if (a3)
    return HGRectNull;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v7 = 1.0 / *((float *)this + 102);
  HGTransform::HGTransform((HGTransform *)v17);
  HGTransform::Scale((HGTransform *)v17, v7, v7, 1.0);
  *(_QWORD *)&v18.var0 = 0;
  *(_QWORD *)&v18.var2 = 0;
  v9 = HGTransformUtils::MinW(v8);
  *(_QWORD *)&v21.var0 = v5;
  *(_QWORD *)&v18.var0 = HGTransformUtils::GetROI((HGTransformUtils *)v17, v6, v21, 0.5, v9);
  *(_QWORD *)&v18.var2 = v10;
  v11 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  v13 = v12;
  *(_QWORD *)&v19.var0 = v11;
  *(_QWORD *)&v19.var2 = v13;
  HGRect::Grow(&v18, v19);
  v14 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  v16 = v15;
  *(_QWORD *)&v20.var0 = v14;
  *(_QWORD *)&v20.var2 = v16;
  HGRect::Grow(&v18, v20);
  HGTransform::~HGTransform((HGTransform *)v17);
  return *(_QWORD *)&v18.var0;
}

void sub_1B2AC6D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AC6D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

const char *HGComicSobelOperator::GetProgram(HGComicSobelOperator *this, HGRenderer *a2)
{
  if (HGRenderer::GetTarget(a2, 393216) > 0x60B0F)
    return "//Metal1.0     \n"
           "//LEN=0000000ac6\n"
           "static half3 texelFetch(texture2d<half> inTex, sampler samp, const float2 uv, const float unpremultiplyAlpha)"
           "\n"
           "{\n"
           "    half4 texel = inTex.sample(samp, uv);\n"
           "    \n"
           "    if (unpremultiplyAlpha)\n"
           "        texel.rgb /= max(texel.a, 1e-6h);\n"
           "    \n"
           "    return texel.rgb;\n"
           "}\n"
           "\n"
           "fragment FragmentOut fragmentFunc(VertexInOut            frag        [[ stage_in ]],\n"
           "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
           "                                  texture2d< half >      hg_Texture0 [[ texture(0) ]],\n"
           "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
           "{\n"
           "    const float2 d {1.0f, 1.0f};\n"
           "    const float2 uv = frag._texCoord0.xy;\n"
           "    const float unpremultiplyAlpha = hg_Params[0].x;\n"
           "    \n"
           "    const float2 NegNeg     = uv + float2(-d.x, -d.y);\n"
           "    const float2 NegZero    = uv + float2(-d.x,  0.0f);\n"
           "    const float2 NegPos     = uv + float2(-d.x, d.y);\n"
           "    const float2 PosNeg     = uv + float2(d.x, -d.y);\n"
           "    const float2 PosZero    = uv + float2(d.x, 0.0f);\n"
           "    const float2 PosPos     = uv + float2(d.x, d.y);\n"
           "    const float2 ZeroNeg    = uv + float2(0.0f, -d.y);\n"
           "    const float2 ZeroPos    = uv + float2(0.0f, d.y);\n"
           "\n"
           "    const half3 Gx =\n"
           "          (-1.0h * texelFetch(hg_Texture0, hg_Sampler0, NegNeg, unpremultiplyAlpha) +\n"
           "           -2.0h * texelFetch(hg_Texture0, hg_Sampler0, NegZero, unpremultiplyAlpha) +\n"
           "           -1.0h * texelFetch(hg_Texture0, hg_Sampler0, NegPos, unpremultiplyAlpha) +\n"
           "           +1.0h * texelFetch(hg_Texture0, hg_Sampler0, PosNeg, unpremultiplyAlpha) +\n"
           "           +2.0h * texelFetch(hg_Texture0, hg_Sampler0, PosZero, unpremultiplyAlpha) +\n"
           "           +1.0h * texelFetch(hg_Texture0, hg_Sampler0, PosPos, unpremultiplyAlpha));\n"
           "\n"
           "    const half3 Gy =\n"
           "          (-1.0h * texelFetch(hg_Texture0, hg_Sampler0, NegNeg, unpremultiplyAlpha) +\n"
           "           -2.0h * texelFetch(hg_Texture0, hg_Sampler0, ZeroNeg, unpremultiplyAlpha) +\n"
           "           -1.0h * texelFetch(hg_Texture0, hg_Sampler0, PosNeg, unpremultiplyAlpha) +\n"
           "           +1.0h * texelFetch(hg_Texture0, hg_Sampler0, NegPos, unpremultiplyAlpha) +\n"
           "           +2.0h * texelFetch(hg_Texture0, hg_Sampler0, ZeroPos, unpremultiplyAlpha) +\n"
           "           +1.0h * texelFetch(hg_Texture0, hg_Sampler0, PosPos, unpremultiplyAlpha));\n"
           "    \n"
           "    FragmentOut out {float4(dot(Gx, Gx), \n"
           "                            dot(Gy, Gy), \n"
           "                            0.5h * (1.0h + dot(Gx, Gy)),\n"
           "                            hg_Texture0.sample(hg_Sampler0, uv).a)};\n"
           "\n"
           "    // Ensure the result is clamped [0..1]; this is the default behavior of the original\n"
           "    // comic effect - this was implicit due to non-float, 8-bit, intermediate buffers.\n"
           "    out.color0 = clamp(out.color0, 0.0f, 1.0f);\n"
           "\n"
           "    return out;\n"
           "}\n"
           "//MD5=eef67a33:7b0e8e00:aeded09b:2240fcf5\n"
           "//SIG=00000000:00000000:00000000:00000001:0018:0001:0000:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
    return "//GLfs1.0      \n"
           "//LEN=0000000a47\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp\n"
           "\n"
           "uniform sampler2DRect inputTexture;\n"
           "uniform highp vec4 hg_ProgramLocal0;
           "\n"
           "highp vec3 texelFetch(sampler2DRect inTex, highp vec2 uv, lowp float unpremultiplyAlpha)\n"
           "{\n"
           "    vec4 texel = texture2DRect(inTex, uv);\n"
           "    \n"
           "    // Select for alpha-premultiplication (or) depending on wether the flag (unpremultiplyAlpha)\n"
           "    // is set (1.0) or not (0.0).\n"
           "    return  (texel.rgb /= max(texel.a, 1e-6)) * unpremultiplyAlpha +\n"
           "            texel.rgb * (1.0 - unpremultiplyAlpha);\n"
           "}\n"
           "\n"
           "void main()\n"
           "{\n"
           "    highp vec2 d = vec2(1.0, 1.0);\n"
           "    highp vec2 uv = gl_TexCoord[0].xy;\n"
           "    lowp float unpremultiplyAlpha = hg_ProgramLocal0.x;\n"
           "    \n"
           "    vec2 NegNeg     = uv + vec2(-d.x, -d.y);\n"
           "    vec2 NegZero    = uv + vec2(-d.x,  0.0);\n"
           "    vec2 NegPos     = uv + vec2(-d.x, d.y);\n"
           "    vec2 PosNeg     = uv + vec2(d.x, -d.y);\n"
           "    vec2 PosZero    = uv + vec2(d.x, 0.0);\n"
           "    vec2 PosPos     = uv + vec2(d.x, d.y);\n"
           "    vec2 ZeroNeg    = uv + vec2(0.0, -d.y);\n"
           "    vec2 ZeroPos    = uv + vec2(0.0, d.y);\n"
           "\n"
           "    highp vec3 Gx = (\n"
           "               -1.0 * texelFetch(inputTexture, NegNeg, unpremultiplyAlpha) +\n"
           "               -2.0 * texelFetch(inputTexture, NegZero, unpremultiplyAlpha) +\n"
           "               -1.0 * texelFetch(inputTexture, NegPos, unpremultiplyAlpha) +\n"
           "               +1.0 * texelFetch(inputTexture, PosNeg, unpremultiplyAlpha) +\n"
           "               +2.0 * texelFetch(inputTexture, PosZero, unpremultiplyAlpha) +\n"
           "               +1.0 * texelFetch(inputTexture, PosPos, unpremultiplyAlpha))  ;\n"
           "\n"
           "    highp vec3 Gy =(\n"
           "                -1.0 * texelFetch(inputTexture, NegNeg, unpremultiplyAlpha) +\n"
           "                -2.0 * texelFetch(inputTexture, ZeroNeg, unpremultiplyAlpha) +\n"
           "                -1.0 * texelFetch(inputTexture, PosNeg, unpremultiplyAlpha) +\n"
           "                +1.0 * texelFetch(inputTexture, NegPos, unpremultiplyAlpha) +\n"
           "                +2.0 * texelFetch(inputTexture, ZeroPos, unpremultiplyAlpha) +\n"
           "                +1.0 * texelFetch(inputTexture, PosPos, unpremultiplyAlpha))  ;\n"
           "    \n"
           "    highp vec4 result = vec4(dot(Gx, Gx), \n"
           "                             dot(Gy, Gy), \n"
           "                             0.5 * (1.0 + dot(Gx, Gy)),\n"
           "                             texture2DRect(inputTexture, uv).a);\n"
           "    \n"
           "    // Ensure the result is clamped [0..1]; this is the default behavior of the original\n"
           "    // comic effect - this was implicit due to non-float, 8-bit, intermediate buffers.\n"
           "    gl_FragColor = clamp(result, 0.0, 1.0);\n"
           "}\n"
           "//MD5=776e3a33:fba055f3:576fbb1b:bf6537a1\n"
           "//SIG=00000000:00000000:00000000:00000000:0030:0001:0000:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  return 0;
}

uint64_t HGComicSobelOperator::BindTexture(HGComicSobelOperator *this, HGHandler *a2, uint64_t a3)
{
  float v5;

  if ((_DWORD)a3)
  {
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
  }
  else
  {
    v5 = 1.0 / *((float *)this + 102);
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
    (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 104))(a2, v5, v5, 1.0);
  }
  (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
  (*(void (**)(HGHandler *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, 1, 1);
  return 0;
}

void HGLodFilter::HGLodFilter(HGLodFilter *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGMipmapLevel::HGMipmapLevel(this);
  *v2 = off_1E652D3E0;
  v3 = (_OWORD *)operator new();
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  *((_QWORD *)this + 72) = v3;
  *((_QWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 520) = HGRectInfinite;
  *((_QWORD *)this + 57) = 0x100000002;
  *((_QWORD *)this + 58) = 0x3F00000000000001;
  *((_QWORD *)this + 59) = 2;
  *((_DWORD *)this + 120) = 1;
  *((_QWORD *)this + 61) = 0x100000002;
  *((_QWORD *)this + 62) = 0x3F00000000000001;
  *((_QWORD *)this + 63) = 2;
  *((_DWORD *)this + 128) = 1;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2AC6F58(_Unwind_Exception *a1)
{
  HGMipmapLevel *v1;

  HGMipmapLevel::~HGMipmapLevel(v1);
  _Unwind_Resume(a1);
}

void HGLodFilter::~HGLodFilter(HGLodFilter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E652D3E0;
  v2 = *((_QWORD *)this + 54);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 55);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = *((_QWORD *)this + 52);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *((_QWORD *)this + 53);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *((_QWORD *)this + 72);
  if (v6)
    MEMORY[0x1B5E29170](v6, 0x1000C40FA0F61DDLL);
  HGMipmapLevel::~HGMipmapLevel(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = off_1E652D3E0;
  v2 = *((_QWORD *)this + 54);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 55);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = *((_QWORD *)this + 52);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *((_QWORD *)this + 53);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *((_QWORD *)this + 72);
  if (v6)
    MEMORY[0x1B5E29170](v6, 0x1000C40FA0F61DDLL);
  HGMipmapLevel::~HGMipmapLevel(this);
  HGObject::operator delete(v7);
}

uint64_t HGLodFilter::SetInput(HGNode *this, int a2, HGNode *a3)
{
  if (a2)
    return 0xFFFFFFFFLL;
  else
    return HGNode::SetInput(this, 0, a3);
}

uint64_t HGLodFilter::SetLevel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v18;
  double v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  __int128 v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  double v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  double v38;
  unsigned int v39;
  float v40;
  int v42;
  double v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unsigned int v51;
  double v52;
  unsigned int v53;
  float v54;
  char *v55;
  _OWORD *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  char *v61;
  _OWORD *v62;
  int v63;
  __int128 v64;
  int v65;
  HGBlur *v66;
  HGConvolution *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  *(_DWORD *)(a1 + 408) = a6;
  *(_DWORD *)(a1 + 412) = a7;
  if (!a7)
  {
    result = 0;
    *(_DWORD *)(a1 + 456) = 0;
    *(_DWORD *)(a1 + 488) = 0;
    return result;
  }
  v10 = (_OWORD *)(a1 + 456);
  *(_DWORD *)(a1 + 484) = 0;
  v11 = (_OWORD *)(a1 + 488);
  *(_DWORD *)(a1 + 516) = 0;
  v12 = (_OWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = a2;
  *(_QWORD *)(a1 + 560) = a3;
  if (a7 != 3)
  {
    *(_QWORD *)(a1 + 520) = HGRectMake4i(0x80000000, 0x80000000, 0x7FFFFFFFu, 0x7FFFFFFFu);
    *(_QWORD *)(a1 + 528) = v26;
    v27 = *(_OWORD *)(a1 + 520);
    *(_OWORD *)(a1 + 536) = v27;
    *v12 = v27;
    *(_DWORD *)(a1 + 488) = a7;
    *(_DWORD *)(a1 + 456) = a7;
    *(_DWORD *)(a1 + 492) = a6;
    *(_DWORD *)(a1 + 460) = a6;
    *(_DWORD *)(a1 + 496) = 1;
    *(_DWORD *)(a1 + 464) = 1;
    *(_QWORD *)(a1 + 508) = 0x100000000;
    *(_QWORD *)(a1 + 476) = 0x100000000;
    goto LABEL_63;
  }
  v13 = HIDWORD(a3) - HIDWORD(a2);
  v14 = a3 - a2;
  if ((a3 - a2) < 2)
  {
    v28 = 0;
    *(_DWORD *)(a1 + 520) = a2;
    *(_DWORD *)(a1 + 536) = a2;
    *(_DWORD *)(a1 + 528) = a3;
    *(_DWORD *)(a1 + 544) = a3;
    *(_DWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 456) = 0;
    v29 = 0uLL;
    v30 = 0uLL;
    *(_DWORD *)(a1 + 476) = 0;
    *(_DWORD *)(a1 + 484) = a2;
    v31 = 1;
    *(_DWORD *)(a1 + 480) = 1;
    if (v13 >= 2)
      goto LABEL_32;
LABEL_22:
    v34 = 0;
    *(_DWORD *)(a1 + 524) = HIDWORD(a2);
    *(_DWORD *)(a1 + 540) = HIDWORD(a2);
    *(_DWORD *)(a1 + 532) = HIDWORD(a3);
    *(_DWORD *)(a1 + 548) = HIDWORD(a3);
    *(_DWORD *)(a1 + 496) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    v35 = 0uLL;
    v36 = 0uLL;
    *(_DWORD *)(a1 + 508) = 0;
    *(_DWORD *)(a1 + 516) = HIDWORD(a2);
    *(_DWORD *)(a1 + 512) = 1;
    if (v28 != 3)
      goto LABEL_46;
    goto LABEL_56;
  }
  v15 = 1;
  if (a6 >= 2)
  {
    do
    {
      v16 = __CFADD__(v14, 1);
      v14 = (v14 + 1) >> 1;
      if (v16)
        v14 = 0x80000000;
      ++v15;
    }
    while (v14 >= 2 && v15 < a6);
  }
  v18 = v15 - (v15 == a6);
  v19 = (double)(int)a2;
  v20 = 1 << v18;
  if ((a2 & 0x80000000) == 0)
  {
    v21 = (uint64_t)rint(trunc(v19 / (double)v20));
    *(_DWORD *)(a1 + 536) = v21;
    v22 = v14 + v21;
    *(_DWORD *)(a1 + 544) = v14 + v21;
    if (v14 != 1)
    {
      v23 = v18 + 1;
      v24 = (uint64_t)rint(trunc(v19 / (double)(1 << v23)));
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  v32 = (double)(v20 + 0x7FFFFFFF);
  v33 = (uint64_t)rint(trunc((v19 - (double)(v20 - 1)) / (double)v20));
  LODWORD(v21) = (int)0x80000000 / v20;
  if (v32 <= v19)
    LODWORD(v21) = v33;
  *(_DWORD *)(a1 + 536) = v21;
  v22 = v21 + v14;
  *(_DWORD *)(a1 + 544) = v21 + v14;
  if (v14 == 1)
  {
LABEL_21:
    v28 = 0;
    *(_DWORD *)(a1 + 520) = v21;
    *(_DWORD *)(a1 + 528) = v22;
    *(_DWORD *)(a1 + 456) = 0;
    *(_DWORD *)(a1 + 464) = 0;
    v29 = 0uLL;
    v30 = 0uLL;
    *(_DWORD *)(a1 + 460) = v18;
    *(_DWORD *)(a1 + 476) = 0;
    *(_DWORD *)(a1 + 484) = v21;
    v31 = 1;
    *(_DWORD *)(a1 + 480) = 1;
    if (v13 >= 2)
      goto LABEL_32;
    goto LABEL_22;
  }
  v23 = v18 + 1;
  v24 = (uint64_t)rint(trunc((v19 - (double)((1 << v23) - 1)) / (double)(1 << v23)));
  if ((double)((1 << v23) + 0x7FFFFFFF) > v19)
    LODWORD(v24) = (int)0x80000000 / (1 << v23);
LABEL_26:
  *(_DWORD *)(a1 + 520) = v24;
  v37 = (v14 + 1) >> 1;
  if (v14 == -1)
    v37 = 0x80000000;
  *(_DWORD *)(a1 + 528) = v24 + v37;
  if ((v14 & 1) != 0)
  {
    v38 = 1.0 / ((double)v37 + (double)v37);
    *(float *)&v39 = v38;
    HIDWORD(v29) = 0;
    *(_QWORD *)&v29 = v39;
    LODWORD(v30) = 0;
    *((float *)&v29 + 2) = -*(float *)&v39;
    v40 = v38 * (double)(v37 + 1);
    *(float *)&v38 = v38 * (double)(v37 - 1);
    *((float *)&v30 + 1) = v40;
    *((_QWORD *)&v30 + 1) = LODWORD(v38);
    v28 = 3;
  }
  else
  {
    v28 = 2;
    v29 = 0uLL;
    v30 = 0uLL;
  }
  *(_DWORD *)(a1 + 456) = v28;
  *(_DWORD *)(a1 + 464) = 1;
  *(_DWORD *)(a1 + 460) = v23;
  *(_DWORD *)(a1 + 476) = v21 - 2 * v24;
  *(_DWORD *)(a1 + 484) = v24;
  v31 = 1;
  *(_DWORD *)(a1 + 480) = 1;
  if (v13 < 2)
    goto LABEL_22;
LABEL_32:
  if (a6 >= 2)
  {
    do
    {
      v16 = __CFADD__(v13, 1);
      v13 = (v13 + 1) >> 1;
      if (v16)
        v13 = 0x80000000;
      ++v31;
    }
    while (v13 >= 2 && v31 < a6);
  }
  v42 = v31 - (v31 == a6);
  v43 = (double)SHIDWORD(a2);
  v44 = 1 << v42;
  if ((a2 & 0x8000000000000000) == 0)
  {
    v45 = (uint64_t)rint(trunc(v43 / (double)v44));
    *(_DWORD *)(a1 + 540) = v45;
    v46 = v13 + v45;
    *(_DWORD *)(a1 + 548) = v13 + v45;
    if (v13 != 1)
    {
      v47 = v42 + 1;
      v48 = (uint64_t)rint(trunc(v43 / (double)(1 << v47)));
      goto LABEL_50;
    }
    goto LABEL_45;
  }
  v49 = (double)(v44 + 0x7FFFFFFF);
  v50 = (uint64_t)rint(trunc((v43 - (double)(v44 - 1)) / (double)v44));
  LODWORD(v45) = (int)0x80000000 / v44;
  if (v49 <= v43)
    LODWORD(v45) = v50;
  *(_DWORD *)(a1 + 540) = v45;
  v46 = v45 + v13;
  *(_DWORD *)(a1 + 548) = v45 + v13;
  if (v13 == 1)
  {
LABEL_45:
    v34 = 0;
    *(_DWORD *)(a1 + 524) = v45;
    *(_DWORD *)(a1 + 532) = v46;
    *(_DWORD *)(a1 + 488) = 0;
    *(_DWORD *)(a1 + 496) = 0;
    v35 = 0uLL;
    v36 = 0uLL;
    *(_DWORD *)(a1 + 492) = v42;
    *(_DWORD *)(a1 + 508) = 0;
    *(_DWORD *)(a1 + 516) = v45;
    *(_DWORD *)(a1 + 512) = 1;
    if (v28 != 3)
      goto LABEL_46;
LABEL_56:
    if (v34 == 3)
    {
      v55 = *(char **)(a1 + 416);
      if (!v55)
      {
        v70 = v36;
        v72 = v35;
        v68 = v30;
        v69 = v29;
        v55 = (char *)HGObject::operator new(0x250uLL);
        HGMipmapLevel::HGMipmapLevel((HGMipmapLevel *)v55);
        *(_QWORD *)v55 = off_1E652D3E0;
        v56 = (_OWORD *)operator new();
        v56[2] = 0u;
        v56[3] = 0u;
        *v56 = 0u;
        v56[1] = 0u;
        *((_QWORD *)v55 + 72) = v56;
        *((_QWORD *)v55 + 51) = 0;
        *(_OWORD *)(v55 + 520) = HGRectInfinite;
        *((_QWORD *)v55 + 57) = 0x100000002;
        *((_QWORD *)v55 + 58) = 0x3F00000000000001;
        *((_QWORD *)v55 + 59) = 2;
        *((_DWORD *)v55 + 120) = 1;
        *((_QWORD *)v55 + 61) = 0x100000002;
        *((_QWORD *)v55 + 62) = 0x3F00000000000001;
        *((_QWORD *)v55 + 63) = 2;
        *((_DWORD *)v55 + 128) = 1;
        *((_QWORD *)v55 + 71) = 0;
        *((_OWORD *)v55 + 26) = 0u;
        *((_OWORD *)v55 + 27) = 0u;
        *((_QWORD *)v55 + 56) = 0;
        *((_DWORD *)v55 + 4) |= 0x600u;
        *(_QWORD *)(a1 + 416) = v55;
        v30 = v68;
        v29 = v69;
        v36 = v70;
        v35 = v72;
      }
      v57 = *(_OWORD *)(a1 + 472);
      *(_OWORD *)(v55 + 456) = *v10;
      *(_OWORD *)(v55 + 472) = v57;
      *(_OWORD *)(*(_QWORD *)(a1 + 416) + 552) = *v12;
      *(_OWORD *)(*(_QWORD *)(a1 + 416) + 536) = *(_OWORD *)(a1 + 536);
      v58 = *(_QWORD *)(a1 + 416);
      *(_DWORD *)(v58 + 520) = *(_DWORD *)(a1 + 520);
      *(_DWORD *)(v58 + 528) = *(_DWORD *)(a1 + 528);
      *(_DWORD *)(v58 + 524) = *(_DWORD *)(a1 + 540);
      *(_DWORD *)(v58 + 532) = *(_DWORD *)(a1 + 548);
      *(_OWORD *)*(_QWORD *)(v58 + 576) = v29;
      *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 416) + 576) + 32) = v30;
      v59 = *(_QWORD *)(a1 + 416);
      LODWORD(v58) = *(_DWORD *)(a1 + 492) - 1;
      *(_DWORD *)(v59 + 488) = 0;
      *(_DWORD *)(v59 + 492) = v58;
      *(_QWORD *)(v59 + 496) = 0x3F00000000000000;
      v60 = xmmword_1B309BAB0;
      *(_OWORD *)(v59 + 504) = xmmword_1B309BAB0;
      v61 = *(char **)(a1 + 424);
      if (!v61)
      {
        v71 = v36;
        v73 = v35;
        v61 = (char *)HGObject::operator new(0x250uLL);
        HGMipmapLevel::HGMipmapLevel((HGMipmapLevel *)v61);
        *(_QWORD *)v61 = off_1E652D3E0;
        v62 = (_OWORD *)operator new();
        v62[2] = 0u;
        v62[3] = 0u;
        *v62 = 0u;
        v62[1] = 0u;
        *((_QWORD *)v61 + 72) = v62;
        *((_QWORD *)v61 + 51) = 0;
        *(_OWORD *)(v61 + 520) = HGRectInfinite;
        *((_QWORD *)v61 + 57) = 0x100000002;
        *((_QWORD *)v61 + 58) = 0x3F00000000000001;
        *((_QWORD *)v61 + 59) = 2;
        *((_DWORD *)v61 + 120) = 1;
        *((_QWORD *)v61 + 61) = 0x100000002;
        *((_QWORD *)v61 + 62) = 0x3F00000000000001;
        *((_QWORD *)v61 + 63) = 2;
        *((_DWORD *)v61 + 128) = 1;
        *((_QWORD *)v61 + 71) = 0;
        *((_OWORD *)v61 + 26) = 0u;
        *((_OWORD *)v61 + 27) = 0u;
        *((_QWORD *)v61 + 56) = 0;
        *((_DWORD *)v61 + 4) |= 0x600u;
        *(_QWORD *)(a1 + 424) = v61;
        v36 = v71;
        v35 = v73;
        v60 = xmmword_1B309BAB0;
      }
      v63 = *(_DWORD *)(a1 + 460);
      *((_DWORD *)v61 + 114) = 0;
      *((_DWORD *)v61 + 115) = v63;
      *((_QWORD *)v61 + 58) = 0x3F00000000000000;
      *(_OWORD *)(v61 + 472) = v60;
      v64 = *(_OWORD *)(a1 + 504);
      *(_OWORD *)(v61 + 488) = *v11;
      *(_OWORD *)(v61 + 504) = v64;
      *(_OWORD *)(*(_QWORD *)(a1 + 424) + 552) = *v12;
      *(_OWORD *)(*(_QWORD *)(a1 + 424) + 536) = *(_OWORD *)(*(_QWORD *)(a1 + 416) + 520);
      *(_OWORD *)(*(_QWORD *)(a1 + 424) + 520) = *(_OWORD *)(a1 + 520);
      *(_OWORD *)*(_QWORD *)(*(_QWORD *)(a1 + 424) + 576) = v35;
      *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 424) + 576) + 32) = v36;
    }
    else
    {
      *(_OWORD *)*(_QWORD *)(a1 + 576) = v29;
      *(_OWORD *)(*(_QWORD *)(a1 + 576) + 32) = v30;
    }
    goto LABEL_63;
  }
  v47 = v42 + 1;
  v48 = (uint64_t)rint(trunc((v43 - (double)((1 << v47) - 1)) / (double)(1 << v47)));
  if ((double)((1 << v47) + 0x7FFFFFFF) > v43)
    LODWORD(v48) = (int)0x80000000 / (1 << v47);
LABEL_50:
  *(_DWORD *)(a1 + 524) = v48;
  v51 = (v13 + 1) >> 1;
  if (v13 == -1)
    v51 = 0x80000000;
  *(_DWORD *)(a1 + 532) = v48 + v51;
  if ((v13 & 1) != 0)
  {
    v52 = 1.0 / ((double)v51 + (double)v51);
    *(float *)&v53 = v52;
    HIDWORD(v35) = 0;
    *(_QWORD *)&v35 = v53;
    LODWORD(v36) = 0;
    *((float *)&v35 + 2) = -*(float *)&v53;
    v54 = v52 * (double)(v51 + 1);
    *(float *)&v52 = v52 * (double)(v51 - 1);
    *((float *)&v36 + 1) = v54;
    *((_QWORD *)&v36 + 1) = LODWORD(v52);
    v34 = 3;
  }
  else
  {
    v34 = 2;
    v35 = 0uLL;
    v36 = 0uLL;
  }
  *(_DWORD *)(a1 + 488) = v34;
  *(_DWORD *)(a1 + 496) = 1;
  *(_DWORD *)(a1 + 492) = v47;
  *(_DWORD *)(a1 + 508) = v45 - 2 * v48;
  *(_DWORD *)(a1 + 516) = v48;
  *(_DWORD *)(a1 + 512) = 1;
  if (v28 == 3)
    goto LABEL_56;
LABEL_46:
  if (v34 == 3)
  {
    *(_OWORD *)*(_QWORD *)(a1 + 576) = v35;
    *(_OWORD *)(*(_QWORD *)(a1 + 576) + 32) = v36;
  }
LABEL_63:
  *(_DWORD *)(a1 + 472) = 1 << *(_DWORD *)(a1 + 464);
  *(_DWORD *)(a1 + 504) = 1 << *(_DWORD *)(a1 + 496);
  v65 = *(_DWORD *)(a1 + 456);
  if ((v65 == 4 || *(_DWORD *)v11 == 4) && !*(_QWORD *)(a1 + 432))
  {
    v66 = (HGBlur *)HGObject::operator new(0x220uLL);
    HGBlur::HGBlur(v66);
    *(_QWORD *)(a1 + 432) = v66;
    *((_DWORD *)v66 + 106) = 1;
    v65 = *(_DWORD *)(a1 + 456);
    if (v65 == 5)
      goto LABEL_71;
  }
  else if (v65 == 5)
  {
    goto LABEL_71;
  }
  if ((v65 & 0xFFFFFFFE) == 6 || (*(_DWORD *)v11 - 5) <= 2)
  {
LABEL_71:
    if (!*(_QWORD *)(a1 + 440))
    {
      v67 = (HGConvolution *)HGObject::operator new(0x220uLL);
      HGConvolution::HGConvolution(v67);
      *(_QWORD *)(a1 + 440) = v67;
      v65 = *(_DWORD *)(a1 + 456);
    }
  }
  if (*(_DWORD *)v11 | v65)
    return (a6 - 1);
  else
    return 0xFFFFFFFFLL;
}

void sub_1B2AC7A00(_Unwind_Exception *a1)
{
  HGMipmapLevel *v1;
  void *v3;

  HGMipmapLevel::~HGMipmapLevel(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2AC7A30(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AC7A44(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AC7A58(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t HGLodFilter::SetParameter(HGLodFilter *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  int v8;
  int v9;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  if (*((_DWORD *)this + 116) != (int)a3)
  {
    *((_DWORD *)this + 116) = (int)a3;
    v8 = 1;
    v9 = (int)a4;
    if (*((_DWORD *)this + 124) == (int)a4)
      goto LABEL_8;
    goto LABEL_7;
  }
  v8 = 0;
  v9 = (int)a4;
  if (*((_DWORD *)this + 124) != (int)a4)
  {
LABEL_7:
    *((_DWORD *)this + 124) = v9;
    v8 = 1;
  }
LABEL_8:
  if (*((float *)this + 117) != a5)
  {
    *((float *)this + 117) = a5;
    if (*((float *)this + 125) == a6)
    {
LABEL_10:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    }
    goto LABEL_12;
  }
  if (*((float *)this + 125) != a6)
  {
LABEL_12:
    *((float *)this + 125) = a6;
    HGNode::ClearBits((HGNode *)this, a2, a7);
    return 1;
  }
  if (v8)
    goto LABEL_10;
  return 0;
}

HGLodFilter *HGLodFilter::GetOutput(HGLodFilter *this, HGRenderer *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  int v16;
  int v17;
  __n128 v18;
  int v19;
  int v20;
  _DWORD *v21;
  char *v22;
  _OWORD *v23;
  uint64_t v24;
  HGNode *Input;
  const char *v27;
  char *v28;
  float v29;
  float v30;
  unsigned __int8 v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  _QWORD *v36;
  int v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  _OWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, _QWORD, HGLodFilter *);
  uint64_t v47;
  HGLodFilter *v48;
  uint64_t v50;
  unsigned int v51[8];
  unsigned int v52[8];

  v4 = (*(uint64_t (**)(HGLodFilter *, _QWORD))(*(_QWORD *)this + 128))(this, 0);
  v5 = *((_DWORD *)this + 114);
  if (!v5)
  {
    v6 = *((_DWORD *)this + 122);
    if (!v6)
    {
      v47 = *((_QWORD *)this + 71);
      Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
      if (!v47)
        return (HGLodFilter *)Input;
      v46 = *(void (**)(uint64_t, _QWORD, HGLodFilter *))(*(_QWORD *)v47 + 120);
      v45 = v47;
      goto LABEL_50;
    }
LABEL_5:
    if (v6 == 4)
      goto LABEL_6;
    if ((v5 - 5) < 3 || (v6 - 5) <= 2)
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 55) + 120))(*((_QWORD *)this + 55), 0, v4);
      v29 = (float)(1 << *((_DWORD *)this + 116));
      v30 = (float)(1 << *((_DWORD *)this + 124));
      v31 = atomic_load(HGLogger::_enabled);
      if ((v31 & 1) != 0)
        HGLogger::log((HGLogger *)"lodfilter", (const char *)1, (HGLogger *)"scalex = %.3f, scaley = %.3f, level = %d\n", v27, v28, v29, v30, *((unsigned int *)this + 115));
      HGLinearFilter2D::HGLinearFilter2D((HGLinearFilter2D *)v52);
      HGLinearFilter2D::HGLinearFilter2D((HGLinearFilter2D *)v51);
      v32 = *((_DWORD *)this + 114);
      if (v32 == 7)
        v33 = 2;
      else
        v33 = v32 == 6;
      v34 = *((_DWORD *)this + 122);
      if (v34 == 7)
        v35 = 2;
      else
        v35 = v34 == 6;
      *((_DWORD *)this + 112) = HGPrefilterUtils::GetPrefilterRadius(v33, *((float *)this + 117), v29);
      *((_DWORD *)this + 113) = HGPrefilterUtils::GetPrefilterRadius(v35, *((float *)this + 125), v30);
      HGPrefilterUtils::GetSeparablePrefilter(v52, v33, 0, *((float *)this + 117), v29, 1.0 / v29);
      HGPrefilterUtils::GetSeparablePrefilter(v51, v35, 1, *((float *)this + 125), v30, 1.0 / v30);
      v36 = (_QWORD *)((char *)this + 440);
      HGConvolution::SeparableFilter2D(*((HGConvolution **)this + 55), (const HGLinearFilter2D *)v52, (const HGLinearFilter2D *)v51);
      v37 = *((_DWORD *)this + 116);
      if (v37 <= 0 && *((int *)this + 124) < 1)
      {
        v50 = *((_QWORD *)this + 71);
        if (!v50)
        {
          v38 = (char *)this + 440;
          goto LABEL_39;
        }
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v50 + 120))(v50, 0, *v36);
      }
      else
      {
        v38 = (char *)this + 424;
        v39 = (_DWORD *)*((_QWORD *)this + 53);
        if (!v39)
        {
          v40 = (char *)HGObject::operator new(0x250uLL);
          HGMipmapLevel::HGMipmapLevel((HGMipmapLevel *)v40);
          *(_QWORD *)v40 = off_1E652D3E0;
          v41 = (_OWORD *)operator new();
          v41[2] = 0u;
          v41[3] = 0u;
          *v41 = 0u;
          v41[1] = 0u;
          *((_QWORD *)v40 + 72) = v41;
          *((_QWORD *)v40 + 51) = 0;
          *(_OWORD *)(v40 + 520) = HGRectInfinite;
          *((_QWORD *)v40 + 57) = 0x100000002;
          *((_QWORD *)v40 + 58) = 0x3F00000000000001;
          *((_QWORD *)v40 + 59) = 2;
          *((_DWORD *)v40 + 120) = 1;
          *((_QWORD *)v40 + 61) = 0x100000002;
          *((_QWORD *)v40 + 62) = 0x3F00000000000001;
          *((_QWORD *)v40 + 63) = 2;
          *((_DWORD *)v40 + 128) = 1;
          *((_QWORD *)v40 + 71) = 0;
          *((_OWORD *)v40 + 26) = 0u;
          *((_OWORD *)v40 + 27) = 0u;
          *((_QWORD *)v40 + 56) = 0;
          *((_DWORD *)v40 + 4) |= 0x600u;
          *(_QWORD *)v38 = v40;
          (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)v40 + 120))(v40, 0, *v36);
          v37 = *((_DWORD *)this + 116);
          v39 = (_DWORD *)*((_QWORD *)this + 53);
        }
        v39[114] = v37 != 0;
        v39[122] = *((_DWORD *)this + 124) != 0;
        v39[116] = v37;
        v39[124] = *((_DWORD *)this + 124);
        v42 = *((_QWORD *)this + 71);
        if (!v42)
          goto LABEL_39;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 120))(v42, 0);
      }
      v38 = (char *)this + 568;
LABEL_39:
      Input = *(HGNode **)v38;
      HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)v51);
      HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)v52);
      return (HGLodFilter *)Input;
    }
    if (v5 != 3 || v6 != 3)
    {
      *((_DWORD *)this + 118) = 1 << *((_DWORD *)this + 116);
      *((_DWORD *)this + 126) = 1 << *((_DWORD *)this + 124);
      v45 = *((_QWORD *)this + 71);
      if (!v45)
        return this;
      v46 = *(void (**)(uint64_t, _QWORD, HGLodFilter *))(*(_QWORD *)v45 + 120);
      v48 = this;
      goto LABEL_53;
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 52) + 120))(*((_QWORD *)this + 52), 0, v4);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 53) + 120))(*((_QWORD *)this + 53), 0, *((_QWORD *)this + 52));
    v45 = *((_QWORD *)this + 71);
    Input = (HGNode *)*((_QWORD *)this + 53);
    if (!v45)
      return (HGLodFilter *)Input;
    v46 = *(void (**)(uint64_t, _QWORD, HGLodFilter *))(*(_QWORD *)v45 + 120);
LABEL_50:
    v48 = (HGLodFilter *)Input;
LABEL_53:
    v46(v45, 0, v48);
    return (HGLodFilter *)*((_QWORD *)this + 71);
  }
  if (v5 != 4)
  {
    v6 = *((_DWORD *)this + 122);
    goto LABEL_5;
  }
LABEL_6:
  v7 = *((_DWORD *)this + 116);
  v8 = *((_DWORD *)this + 124);
  v9 = 1.0;
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 54) + 120))(*((_QWORD *)this + 54), 0, v4);
  v10 = 1.0;
  if (*((_DWORD *)this + 114) == 4)
  {
    v11 = 1.0 / (float)(1 << v7);
    v10 = 0.0;
    if (v11 < 1.0)
    {
      v12 = v11 * 3.14159265;
      v10 = (float)(sqrtf(logf(*((float *)this + 117)) * -2.0) * 3.0) / v12;
    }
    *((_DWORD *)this + 112) = (int)v10;
  }
  if (*((_DWORD *)this + 122) == 4)
  {
    v13 = 1.0 / (float)(1 << v8);
    v9 = 0.0;
    if (v13 < 1.0)
    {
      v14 = v13 * 3.14159265;
      v9 = (float)(sqrtf(logf(*((float *)this + 125)) * -2.0) * 3.0) / v14;
    }
    *((_DWORD *)this + 113) = (int)v9;
  }
  (*(void (**)(_QWORD, _QWORD, float, float, float, float))(**((_QWORD **)this + 54) + 96))(*((_QWORD *)this + 54), 0, v10, v9, 0.0, 0.0);
  HGBlur::GetDecimation(*((HGBlur **)this + 54), v10);
  v16 = v15;
  v18.n128_f32[0] = HGBlur::GetDecimation(*((HGBlur **)this + 54), v9);
  v19 = v17;
  v20 = *((_DWORD *)this + 116);
  if (v16 >= v20 && v17 >= *((_DWORD *)this + 124))
  {
    v43 = (char *)this + 432;
    v44 = *((_QWORD *)this + 71);
    if (v44)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, float))(*(_QWORD *)v44 + 120))(v44, 0, *(_QWORD *)v43, v18.n128_f32[0]);
      v43 = (char *)this + 568;
    }
    return *(HGLodFilter **)v43;
  }
  else
  {
    v21 = (_DWORD *)*((_QWORD *)this + 53);
    if (!v21)
    {
      v22 = (char *)HGObject::operator new(0x250uLL);
      HGMipmapLevel::HGMipmapLevel((HGMipmapLevel *)v22);
      *(_QWORD *)v22 = off_1E652D3E0;
      v23 = (_OWORD *)operator new();
      v23[2] = 0u;
      v23[3] = 0u;
      *v23 = 0u;
      v23[1] = 0u;
      *((_QWORD *)v22 + 72) = v23;
      *((_QWORD *)v22 + 51) = 0;
      *(_OWORD *)(v22 + 520) = HGRectInfinite;
      *((_QWORD *)v22 + 57) = 0x100000002;
      *((_QWORD *)v22 + 58) = 0x3F00000000000001;
      *((_QWORD *)v22 + 59) = 2;
      *((_DWORD *)v22 + 120) = 1;
      *((_QWORD *)v22 + 61) = 0x100000002;
      *((_QWORD *)v22 + 62) = 0x3F00000000000001;
      *((_QWORD *)v22 + 63) = 2;
      *((_DWORD *)v22 + 128) = 1;
      *((_QWORD *)v22 + 71) = 0;
      *((_OWORD *)v22 + 26) = 0u;
      *((_OWORD *)v22 + 27) = 0u;
      *((_QWORD *)v22 + 56) = 0;
      *((_DWORD *)v22 + 4) |= 0x600u;
      *((_QWORD *)this + 53) = v22;
      (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)v22 + 120))(v22, 0, *((_QWORD *)this + 54));
      v20 = *((_DWORD *)this + 116);
      v21 = (_DWORD *)*((_QWORD *)this + 53);
    }
    v21[114] = v20 != 0;
    v21[122] = *((_DWORD *)this + 124) != 0;
    v21[116] = v20 - v16;
    v21[124] = *((_DWORD *)this + 124) - v19;
    v24 = *((_QWORD *)this + 71);
    if (v24)
    {
      (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v24 + 120))(v24, 0, v18);
      return (HGLodFilter *)*((_QWORD *)this + 71);
    }
    else
    {
      return (HGLodFilter *)*((_QWORD *)this + 53);
    }
  }
}

void sub_1B2AC81D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  HGMipmapLevel *v17;

  HGMipmapLevel::~HGMipmapLevel(v17);
  HGObject::operator delete(v17);
  HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)&a13);
  HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)&a17);
  _Unwind_Resume(a1);
}

void sub_1B2AC820C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AC8220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)va);
  HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)va1);
  _Unwind_Resume(a1);
}

unint64_t HGLodFilter::GetRect(HGLodFilter *this, HGRect a2, int a3, int a4)
{
  unint64_t v4;
  uint64_t var1;
  int v7;
  double v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  float v14;
  double v15;
  double v16;
  int v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  double v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  double v32;
  double v33;
  int v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  float v51;
  float v52;

  v4 = *(_QWORD *)&a2.var2;
  if (!a3)
  {
    v9 = HGRectFloat(a2.var0);
    v13 = *((_DWORD *)this + 114);
    if ((v13 - 4) >= 4)
    {
      if (!v13)
        goto LABEL_26;
      v14 = 0.0;
      if (v13 == 3)
        v14 = 1.0;
    }
    else
    {
      v14 = (float)*((int *)this + 112);
    }
    v28 = (float)*((int *)this + 118);
    v29 = (float)*((int *)this + 119);
    v9 = (float)((float)(v9 * v28) + v29) - v14;
    v11 = v14 + (float)((float)(v11 * v28) + v29);
LABEL_26:
    v30 = *((unsigned int *)this + 122);
    if ((v30 - 4) >= 4)
    {
      if (!(_DWORD)v30)
      {
LABEL_50:
        v50 = HGRectIntegral(v30, v9, v10, v11, v12);
        goto LABEL_51;
      }
      v31 = 0.0;
      if ((_DWORD)v30 == 3)
        v31 = 1.0;
    }
    else
    {
      v31 = (float)*((int *)this + 113);
    }
    v51 = (float)*((int *)this + 126);
    v52 = (float)*((int *)this + 127);
    v10 = (float)((float)(v10 * v51) + v52) - v31;
    v12 = v31 + (float)((float)(v12 * v51) + v52);
    goto LABEL_50;
  }
  var1 = a2.var1;
  v7 = *((_DWORD *)this + 114);
  if ((v7 - 4) >= 4)
  {
    if (!v7)
      goto LABEL_20;
    v8 = 0.0;
    if (v7 == 3)
      v8 = 1.0;
  }
  else
  {
    v8 = (double)*((int *)this + 112);
  }
  v15 = (double)*((int *)this + 119);
  v16 = (double)a2.var0 - v15 - v8;
  v17 = *((_DWORD *)this + 118);
  v18 = (double)v17;
  v19 = (uint64_t)rint(trunc(v16 / (double)v17));
  v20 = (double)(v17 - 1);
  v21 = (uint64_t)rint(trunc((v16 - v20) / (double)v17));
  if (v16 < (double)(v17 + 0x7FFFFFFF))
    LODWORD(v21) = (int)0x80000000 / v17;
  if (v16 < 0.0)
    a2.var0 = v21;
  else
    a2.var0 = v19;
  v22 = v8 + (double)a2.var2 - v15;
  v23 = (double)(int)(0x80000000 - v17);
  v24 = (uint64_t)rint(trunc((v22 + v20) / v18));
  LODWORD(v25) = 0x7FFFFFFF / v17;
  if (v22 <= v23)
    LODWORD(v25) = v24;
  if (v22 < 0.0)
    v25 = (int)(v22 / v18);
  else
    v25 = v25;
  v4 = *(_QWORD *)&a2.var2 & 0xFFFFFFFF00000000 | v25;
LABEL_20:
  v26 = *((_DWORD *)this + 122);
  if ((v26 - 4) >= 4)
  {
    if (!v26)
      goto LABEL_41;
    v27 = 0.0;
    if (v26 == 3)
      v27 = 1.0;
  }
  else
  {
    v27 = (double)*((int *)this + 113);
  }
  v32 = (double)*((int *)this + 127);
  v33 = (double)a2.var1 - v32 - v27;
  v34 = *((_DWORD *)this + 126);
  v35 = (double)v34;
  var1 = (uint64_t)rint(trunc(v33 / (double)v34));
  v36 = (double)(v34 - 1);
  v37 = (uint64_t)rint(trunc((v33 - v36) / (double)v34));
  if (v33 < (double)(v34 + 0x7FFFFFFF))
    LODWORD(v37) = (int)0x80000000 / v34;
  if (v33 < 0.0)
    var1 = v37;
  else
    var1 = var1;
  v38 = v27 + (double)SHIDWORD(v4) - v32;
  v39 = (double)(int)(0x80000000 - v34);
  v40 = (uint64_t)rint(trunc((v38 + v36) / v35));
  v41 = 0x7FFFFFFF / v34;
  if (v38 <= v39)
    v41 = v40;
  if (v38 < 0.0)
    v41 = (int)(v38 / v35);
  v4 = v4 | ((unint64_t)v41 << 32);
LABEL_41:
  if (a4 >= 2)
  {
    v42 = a2.var0 | (unint64_t)(var1 << 32);
    v43 = *((_QWORD *)this + 65);
    v44 = *((_QWORD *)this + 66);
    v45 = HGRectMake4i(1 - a4, 1 - a4, a4 - 1, a4 - 1);
    v46 = HGRectGrow(v43, v44, v45);
    v48 = v47;
    v49 = v42;
LABEL_45:
    v50 = HGRectIntersection(v49, v4, v46, v48);
LABEL_51:
    var1 = HIDWORD(v50);
    a2.var0 = v50;
    return a2.var0 | (unint64_t)(var1 << 32);
  }
  if (a4 == 1)
  {
    v49 = a2.var0 | (unint64_t)(var1 << 32);
    v46 = *((_QWORD *)this + 65);
    v48 = *((_QWORD *)this + 66);
    goto LABEL_45;
  }
  return a2.var0 | (unint64_t)(var1 << 32);
}

unint64_t HGLodFilter::GetDOD(HGLodFilter *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return HGLodFilter::GetRect(this, a4, 1, 1);
}

uint64_t HGLodFilter::GetROI(HGLodFilter *this, HGRenderer *a2, int a3, HGRect a4)
{
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;

  if (a3)
    return 0;
  v6 = HGRectFloat(a4.var0);
  v10 = *((_DWORD *)this + 114);
  if ((v10 - 4) >= 4)
  {
    if (!v10)
      goto LABEL_9;
    v11 = 0.0;
    if (v10 == 3)
      v11 = 1.0;
  }
  else
  {
    v11 = (float)*((int *)this + 112);
  }
  v12 = (float)*((int *)this + 118);
  v13 = (float)*((int *)this + 119);
  v6 = (float)((float)(v6 * v12) + v13) - v11;
  v8 = v11 + (float)((float)(v8 * v12) + v13);
LABEL_9:
  v14 = *((unsigned int *)this + 122);
  if ((v14 - 4) < 4)
  {
    v15 = (float)*((int *)this + 113);
LABEL_14:
    v16 = (float)*((int *)this + 126);
    v17 = (float)*((int *)this + 127);
    v7 = (float)((float)(v7 * v16) + v17) - v15;
    v9 = v15 + (float)((float)(v9 * v16) + v17);
    return HGRectIntegral(v14, v6, v7, v8, v9);
  }
  if ((_DWORD)v14)
  {
    v15 = 0.0;
    if ((_DWORD)v14 == 3)
      v15 = 1.0;
    goto LABEL_14;
  }
  return HGRectIntegral(v14, v6, v7, v8, v9);
}

const char *HGLodFilter::GetProgram(HGLodFilter *this, HGRenderer *a2)
{
  const char *result;

  if (HGRenderer::GetTarget(a2, 393216) < 0x60B10)
  {
    result = "//GLfs2.0      \n"
             "//LEN=0000000391\n"
             "#define defaultp mediump\n"
             "uniform highp sampler2D hg_Texture0;\n"
             "uniform highp vec4 hg_ProgramLocal0;\n"
             "uniform highp vec4 hg_ProgramLocal1;\n"
             "uniform highp vec4 hg_ProgramLocal2;\n"
             "uniform highp vec4 hg_ProgramLocal3;\n"
             "varying highp vec4 hg_TexCoord0;\n"
             "varying highp vec4 hg_TexCoord1;\n"
             "varying highp vec4 hg_TexCoord2;\n"
             "varying highp vec4 hg_TexCoord3;\n"
             "            \n"
             "void main()\n"
             "{\n"
             "highp vec4 r0 = texture2D(hg_Texture0, hg_TexCoord0.st / hg_ProgramLocal3.xy);\n"
             "highp vec4 r1 = texture2D(hg_Texture0, hg_TexCoord1.st / hg_ProgramLocal3.xy);\n"
             "highp vec4 r2 = texture2D(hg_Texture0, hg_TexCoord2.st / hg_ProgramLocal3.xy);\n"
             "highp vec4 r3 = hg_ProgramLocal0 * hg_TexCoord3.x + hg_ProgramLocal1;\n"
             "r0 *= r3.x;\n"
             "r0 = r1 * r3.y + r0;\n"
             "gl_FragColor = r2 * r3.z + r0;\n"
             "}\n"
             "//MD5=ff36303c:ca5fc06a:7e48861a:299c157e\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0004:0000:0000:0000:0000:0000:0000:0004:01:0:1:0\n";
    switch(*((_DWORD *)this + 114) + 8 * *((_DWORD *)this + 122))
    {
      case 3:
      case 19:
        return result;
      case 24:
      case 26:
        result = "//GLfs2.0      \n"
                 "//LEN=000000038c\n"
                 "#define defaultp mediump\n"
                 "uniform highp sampler2D hg_Texture0;\n"
                 "uniform highp vec4 hg_ProgramLocal0;\n"
                 "uniform highp vec4 hg_ProgramLocal1;\n"
                 "uniform highp vec4 hg_ProgramLocal2;\n"
                 "uniform highp vec4 hg_ProgramLocal3;\n"
                 "varying highp vec4 hg_TexCoord0;\n"
                 "varying highp vec4 hg_TexCoord1;\n"
                 "varying highp vec4 hg_TexCoord2;\n"
                 "varying highp vec4 hg_TexCoord3;\n"
                 "\n"
                 "void main()\n"
                 "{\n"
                 "\thighp vec4 r0 = texture2D(hg_Texture0, hg_TexCoord0.st / hg_ProgramLocal3.xy);\n"
                 "\thighp vec4 r1 = texture2D(hg_Texture0, hg_TexCoord1.st / hg_ProgramLocal3.xy);\n"
                 "\thighp vec4 r2 = texture2D(hg_Texture0, hg_TexCoord2.st / hg_ProgramLocal3.xy);\n"
                 "\thighp vec4 r3 = hg_ProgramLocal0 * hg_TexCoord3.y + hg_ProgramLocal1;\n"
                 "\tr0 *= r3.x;\n"
                 "\tr0 = r1 * r3.y + r0;\n"
                 "\tgl_FragColor = r2 * r3.z + r0;\n"
                 "}\n"
                 "//MD5=4e8fa7bf:c2658db0:334235ed:cff07d69\n"
                 "//SIG=00000000:00000000:00000000:00000000:0000:0004:0000:0000:0000:0000:0000:0000:0004:01:0:1:0\n";
        break;
      default:
        result = "//GLfs2.0      \n"
                 "//LEN=00000001fe\n"
                 "#define defaultp mediump\n"
                 "uniform highp sampler2D hg_Texture0;\n"
                 "uniform highp vec4 hg_ProgramLocal0;\n"
                 "uniform highp vec4 hg_ProgramLocal1;\n"
                 "uniform highp vec4 hg_ProgramLocal2;\n"
                 "uniform highp vec4 hg_ProgramLocal3;\n"
                 "varying highp vec4 hg_TexCoord0;\n"
                 "\n"
                 "void main()\n"
                 "{\n"
                 "\tgl_FragColor = texture2D(hg_Texture0, hg_TexCoord0.st / hg_ProgramLocal3.xy);\n"
                 "}\n"
                 "//MD5=5b088dad:7525d40f:06ef5ff0:4b21e5e1\n"
                 "//SIG=00000000:00000000:00000000:00000000:0000:0004:0000:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
        break;
    }
  }
  else
  {
    result = "//Metal1.0     \n"
             "//LEN=0000000386\n"
             "fragment FragmentOut fragmentFunc(VertexInOut            frag        [[ stage_in ]],\n"
             "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
             "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
             "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    float4 r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
             "    float4 r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    float4 r3 = hg_Params[0] * frag._texCoord3.x + hg_Params[1];\n"
             "    \n"
             "    r0 *= r3.x;\n"
             "    r0 = r1 * r3.y + r0;\n"
             "    \n"
             "    FragmentOut out {r2 * r3.z + r0};\n"
             "    \n"
             "    return out;\n"
             "}\n"
             "//MD5=41a05813:cf28d4aa:3695a778:5f7a073f\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0002:0000:0000:0000:0000:001e:0000:0004:01:0:1:0\n";
    switch(*((_DWORD *)this + 114) + 8 * *((_DWORD *)this + 122))
    {
      case 3:
      case 19:
        return result;
      case 24:
      case 26:
        result = "//Metal1.0     \n"
                 "//LEN=0000000386\n"
                 "fragment FragmentOut fragmentFunc(VertexInOut            frag        [[ stage_in ]],\n"
                 "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
                 "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
                 "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
                 "{\n"
                 "    float4 r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
                 "    float4 r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
                 "    float4 r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
                 "    float4 r3 = hg_Params[0] * frag._texCoord3.y + hg_Params[1];\n"
                 "    \n"
                 "    r0 *= r3.x;\n"
                 "    r0 = r1 * r3.y + r0;\n"
                 "    \n"
                 "    FragmentOut out {r2 * r3.z + r0};\n"
                 "    \n"
                 "    return out;\n"
                 "}\n"
                 "//MD5=8278e286:74ca626e:6f50889b:3d54e426\n"
                 "//SIG=00000000:00000000:00000000:00000000:0000:0002:0000:0000:0000:0000:001e:0000:0004:01:0:1:0\n";
        break;
      default:
        result = "//Metal1.0     \n"
                 "//LEN=0000000287\n"
                 "fragment FragmentOut fragmentFunc(VertexInOut            frag        [[ stage_in ]],\n"
                 "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
                 "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
                 "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
                 "{\n"
                 "    float4 texel = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
                 "    \n"
                 "    FragmentOut out {texel};\n"
                 "    \n"
                 "    return out;\n"
                 "}\n"
                 "//MD5=b8f77c2b:532d0d81:5b63a9b7:6edf9352\n"
                 "//SIG=00000000:00000000:00000000:00000000:0000:0000:0000:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
        break;
    }
  }
  return result;
}

void HGLodFilter::InitProgramDescriptor(HGLodFilter *this, HGProgramDescriptor *a2)
{
  unsigned int v3;
  uint64_t v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  unsigned int v18;
  const std::string::value_type *v19;
  std::string *v20;
  std::string v21;
  void *__p[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;
  void *v26[2];
  unsigned __int8 v27;
  std::string v28;
  std::string v29;
  std::string v30;

  v3 = *((_DWORD *)this + 114) + 8 * *((_DWORD *)this + 122);
  if (v3 > 0x1A || ((1 << (*((_BYTE *)this + 456) + 8 * *((_BYTE *)this + 488))) & 0x5080008) == 0)
    v5 = 1;
  else
    v5 = 4;
  HGMetalUtils::stringForMetalHeader((uint64_t)&v28);
  HGMetalUtils::stringForMetalVertexOutputStruct((HGMetalUtils *)v5, 0, (uint64_t)v26);
  if ((v27 & 0x80u) == 0)
    v6 = v26;
  else
    v6 = (void **)v26[0];
  if ((v27 & 0x80u) == 0)
    v7 = v27;
  else
    v7 = (std::string::size_type)v26[1];
  v8 = std::string::append(&v28, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  HGMetalUtils::stringForMetalVertexShader((HGMetalUtils *)"vertexFunc", (const char *)v5, 0, (uint64_t)v24);
  if ((v25 & 0x80u) == 0)
    v10 = v24;
  else
    v10 = (void **)v24[0];
  if ((v25 & 0x80u) == 0)
    v11 = v25;
  else
    v11 = (std::string::size_type)v24[1];
  v12 = std::string::append(&v29, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  HGMetalUtils::stringForMetalFragmentOutputStruct((HGMetalUtils *)1, 0, (uint64_t)__p);
  if ((v23 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v15 = v23;
  else
    v15 = (std::string::size_type)__p[1];
  v16 = std::string::append(&v21, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if (((char)v25 & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_35;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if (((char)v25 & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v24[0]);
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if (((char)v27 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v29.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v26[0]);
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    v18 = v3 - 3;
    if (v3 - 3 > 0x17)
    {
LABEL_41:
      v19 = "//Metal1.0     \n"
            "//LEN=0000000287\n"
            "fragment FragmentOut fragmentFunc(VertexInOut            frag        [[ stage_in ]],\n"
            "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
            "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
            "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
            "{\n"
            "    float4 texel = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
            "    \n"
            "    FragmentOut out {texel};\n"
            "    \n"
            "    return out;\n"
            "}\n"
            "//MD5=b8f77c2b:532d0d81:5b63a9b7:6edf9352\n"
            "//SIG=00000000:00000000:00000000:00000000:0000:0000:0000:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
LABEL_42:
      std::string::append(&v30, v19);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v30;
      else
        v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
      HGProgramDescriptor::SetShaderProgram(a2, (const char *)v20);
    }
LABEL_39:
    v19 = "//Metal1.0     \n"
          "//LEN=0000000386\n"
          "fragment FragmentOut fragmentFunc(VertexInOut            frag        [[ stage_in ]],\n"
          "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
          "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
          "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
          "{\n"
          "    float4 r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
          "    float4 r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
          "    float4 r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
          "    float4 r3 = hg_Params[0] * frag._texCoord3.x + hg_Params[1];\n"
          "    \n"
          "    r0 *= r3.x;\n"
          "    r0 = r1 * r3.y + r0;\n"
          "    \n"
          "    FragmentOut out {r2 * r3.z + r0};\n"
          "    \n"
          "    return out;\n"
          "}\n"
          "//MD5=41a05813:cf28d4aa:3695a778:5f7a073f\n"
          "//SIG=00000000:00000000:00000000:00000000:0000:0002:0000:0000:0000:0000:001e:0000:0004:01:0:1:0\n";
    switch(v18)
    {
      case 0u:
      case 0x10u:
        goto LABEL_42;
      case 0x15u:
      case 0x17u:
        v19 = "//Metal1.0     \n"
              "//LEN=0000000386\n"
              "fragment FragmentOut fragmentFunc(VertexInOut            frag        [[ stage_in ]],\n"
              "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
              "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
              "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
              "{\n"
              "    float4 r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
              "    float4 r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
              "    float4 r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
              "    float4 r3 = hg_Params[0] * frag._texCoord3.y + hg_Params[1];\n"
              "    \n"
              "    r0 *= r3.x;\n"
              "    r0 = r1 * r3.y + r0;\n"
              "    \n"
              "    FragmentOut out {r2 * r3.z + r0};\n"
              "    \n"
              "    return out;\n"
              "}\n"
              "//MD5=8278e286:74ca626e:6f50889b:3d54e426\n"
              "//SIG=00000000:00000000:00000000:00000000:0000:0002:0000:0000:0000:0000:001e:0000:0004:01:0:1:0\n";
        goto LABEL_42;
      default:
        goto LABEL_41;
    }
  }
LABEL_38:
  operator delete(v28.__r_.__value_.__l.__data_);
  v18 = v3 - 3;
  goto LABEL_39;
}

void sub_1B2AC9008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a20 < 0)
    operator delete(__p);
  std::vector<HGBinding>::~vector[abi:ne180100]((void **)(v46 - 128));
  if (*(char *)(v46 - 73) < 0)
    operator delete(*(void **)(v46 - 96));
  _Unwind_Resume(a1);
}

uint64_t HGLodFilter::Bind(HGLodFilter *this, HGRenderer **a2)
{
  unsigned int Target;
  float32x4_t *v5;
  _BOOL4 v6;
  int v7;
  unsigned int v8;
  float32x4_t v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;

  Target = HGRenderer::GetTarget(a2[18], 393216);
  if (Target <= 0x6043F && Target - 394016 > 0xEF)
  {
    v5 = (float32x4_t *)*((_QWORD *)this + 72);
    v16 = *v5;
    v18 = *v5;
    v15 = v5[2];
    v17 = v15;
    HGHandler::TexCoord((HGHandler *)a2, 0, 0, 0, 0);
    v6 = 0;
    v7 = *((_DWORD *)this + 122);
    v8 = *((_DWORD *)this + 114) + 8 * v7;
    if (v8 <= 0x1A)
    {
      if (((1 << v8) & 0x10004) != 0)
      {
        v6 = v7 == 2;
        goto LABEL_15;
      }
      if (((1 << v8) & 0x1000008) != 0)
        goto LABEL_8;
      if (((1 << v8) & 0x4080000) != 0)
      {
        v9.i64[0] = 0x3F0000003F000000;
        v9.i64[1] = 0x3F0000003F000000;
        v18 = vmulq_f32(v16, v9);
        v17 = vmulq_f32(v15, v9);
LABEL_8:
        (*((void (**)(HGRenderer **, uint64_t, float32x4_t *, uint64_t))*a2 + 18))(a2, 2, &v18, 1);
        (*((void (**)(HGRenderer **, uint64_t, float32x4_t *, uint64_t))*a2 + 18))(a2, 3, &v17, 1);
        v6 = 0;
      }
    }
LABEL_15:
    (*((void (**)(HGRenderer **, _QWORD, float, float, float, float))*a2 + 17))(a2, 0, (float)*((int *)this + 118), (float)*((int *)this + 126), (float)*((int *)this + 8 * v6 + 120), (float)*((int *)this + 8 * !v6 + 120));
    return 0;
  }
  switch(*((_DWORD *)this + 114) + 8 * *((_DWORD *)this + 122))
  {
    case 3:
    case 19:
      HGHandler::TexCoord((HGHandler *)a2, 3, 0, 0, 0);
      (*((void (**)(HGRenderer **, double, double, double))*a2 + 13))(a2, (double)*((int *)this + 120), 1.0, 1.0);
      v10.n128_f64[0] = (double)-*((_DWORD *)this + 121) + -0.5;
      v11.n128_u64[0] = 0;
      (*((void (**)(HGRenderer **, __n128, __n128, double))*a2 + 12))(a2, v10, v11, 0.0);
      goto LABEL_12;
    case 24:
    case 26:
      HGHandler::TexCoord((HGHandler *)a2, 3, 0, 0, 0);
      (*((void (**)(HGRenderer **, double, double, double))*a2 + 13))(a2, 1.0, (double)*((int *)this + 128), 1.0);
      v12.n128_f64[0] = (double)-*((_DWORD *)this + 129) + -0.5;
      v13.n128_u64[0] = 0;
      (*((void (**)(HGRenderer **, __n128, __n128, double))*a2 + 12))(a2, v13, v12, 0.0);
LABEL_12:
      (*((void (**)(HGRenderer **, _QWORD, _QWORD, uint64_t))*a2 + 18))(a2, 0, *((_QWORD *)this + 72), 1);
      (*((void (**)(HGRenderer **, uint64_t, uint64_t, uint64_t))*a2 + 18))(a2, 1, *((_QWORD *)this + 72) + 32, 1);
      break;
    default:
      return 0;
  }
  return 0;
}

uint64_t HGLodFilter::BindTexture(HGLodFilter *this, HGRenderer **a2, int a3)
{
  uint64_t result;
  unsigned int Target;
  __n128 v7;
  __n128 v8;
  int v9;
  float v10;
  int v11;
  int v12;
  double v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  double v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  double v21;
  double v22;

  if (a3)
    return 0xFFFFFFFFLL;
  (*((void (**)(HGRenderer **, _QWORD))*a2 + 9))(a2, 0);
  (*((void (**)(HGRenderer **, _QWORD))*a2 + 7))(a2, 0);
  Target = HGRenderer::GetTarget(a2[18], 393216);
  if (Target > 0x6043F || Target - 394016 <= 0xEF)
  {
    v11 = *((_DWORD *)this + 114);
    v12 = *((_DWORD *)this + 122);
    switch(v11 + 8 * v12)
    {
      case 3:
      case 19:
        if (v12 == 2)
          v13 = 0.0;
        else
          v13 = 0.5;
        HGHandler::TexCoord((HGHandler *)a2, 0, 0, 0, 0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 12))(a2, (double)*((int *)this + 119) + 0.5 - (double)*((int *)this + 120), v13 + (double)*((int *)this + 127), 0.0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 13))(a2, (double)*((int *)this + 118), (double)*((int *)this + 126), 1.0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 12))(a2, -0.5, -v13, 0.0);
        if (*((_DWORD *)this + 122) == 2)
          (*((void (**)(HGRenderer **, uint64_t, uint64_t))*a2 + 6))(a2, 1, 1);
        HGHandler::TexCoord((HGHandler *)a2, 1, 0, 0, 0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 12))(a2, (double)*((int *)this + 119) + 0.5, v13 + (double)*((int *)this + 127), 0.0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 13))(a2, (double)*((int *)this + 118), (double)*((int *)this + 126), 1.0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 12))(a2, -0.5, -v13, 0.0);
        HGHandler::TexCoord((HGHandler *)a2, 2, 0, 0, 0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 12))(a2, (double)*((int *)this + 119) + 0.5 + (double)*((int *)this + 120), v13 + (double)*((int *)this + 127), 0.0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 13))(a2, (double)*((int *)this + 118), (double)*((int *)this + 126), 1.0);
        v14.n128_u64[0] = -0.5;
        v15.n128_u64[0] = 0;
        v16.n128_f64[0] = -v13;
        (*((void (**)(HGRenderer **, __n128, __n128, __n128))*a2 + 12))(a2, v14, v16, v15);
        goto LABEL_23;
      case 24:
      case 26:
        if (v11 == 2)
          v17 = 0.0;
        else
          v17 = 0.5;
        HGHandler::TexCoord((HGHandler *)a2, 0, 0, 0, 0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 12))(a2, v17 + (double)*((int *)this + 119), (double)*((int *)this + 127) + 0.5 - (double)*((int *)this + 128), 0.0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 13))(a2, (double)*((int *)this + 118), (double)*((int *)this + 126), 1.0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 12))(a2, -v17, -0.5, 0.0);
        if (*((_DWORD *)this + 114) == 2)
          (*((void (**)(HGRenderer **, uint64_t, uint64_t))*a2 + 6))(a2, 1, 1);
        HGHandler::TexCoord((HGHandler *)a2, 1, 0, 0, 0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 12))(a2, v17 + (double)*((int *)this + 119), (double)*((int *)this + 127) + 0.5, 0.0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 13))(a2, (double)*((int *)this + 118), (double)*((int *)this + 126), 1.0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 12))(a2, -v17, -0.5, 0.0);
        HGHandler::TexCoord((HGHandler *)a2, 2, 0, 0, 0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 12))(a2, v17 + (double)*((int *)this + 119), (double)*((int *)this + 127) + 0.5 + (double)*((int *)this + 128), 0.0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 13))(a2, (double)*((int *)this + 118), (double)*((int *)this + 126), 1.0);
        v18.n128_u64[0] = -0.5;
        v19.n128_u64[0] = 0;
        v20.n128_f64[0] = -v17;
        (*((void (**)(HGRenderer **, __n128, __n128, __n128))*a2 + 12))(a2, v20, v18, v19);
LABEL_23:
        result = 0;
        break;
      default:
        if (v11 == 2)
          v21 = 0.0;
        else
          v21 = 0.5;
        if (v12 == 2)
          v22 = 0.0;
        else
          v22 = 0.5;
        HGHandler::TexCoord((HGHandler *)a2, 0, 0, 0, 0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 12))(a2, v21 + (double)*((int *)this + 119), v22 + (double)*((int *)this + 127), 0.0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 13))(a2, (double)*((int *)this + 118), (double)*((int *)this + 126), 1.0);
        (*((void (**)(HGRenderer **, double, double, double))*a2 + 12))(a2, -v21, -v22, 0.0);
        if (*((_DWORD *)this + 114) == 2 || *((_DWORD *)this + 122) == 2)
          (*((void (**)(HGRenderer **, uint64_t, uint64_t))*a2 + 6))(a2, 1, 1);
        else
          (*((void (**)(HGRenderer **, _QWORD, _QWORD))*a2 + 6))(a2, 0, 0);
        result = 0;
        break;
    }
  }
  else
  {
    v7.n128_f32[0] = (float)((float)*((int *)this + 119) + 0.5) + (float)*((int *)a2 + 60);
    v8.n128_f32[0] = (float)((float)*((int *)this + 127) + 0.5) + (float)*((int *)a2 + 61);
    if (*((_DWORD *)this + 114) == 3)
    {
      v7.n128_f64[0] = v7.n128_f32[0] - (double)*((int *)this + 120);
      v7.n128_f32[0] = v7.n128_f64[0];
    }
    v9 = *((_DWORD *)this + 128);
    if (*((_DWORD *)this + 122) == 3)
    {
      v10 = v8.n128_f32[0] - (double)v9;
      v8.n128_f32[0] = v10;
    }
    (*((void (**)(HGRenderer **, uint64_t, __n128, __n128, float, float))*a2 + 17))(a2, 1, v7, v8, (float)-(*((_DWORD *)this + 120) * *((_DWORD *)this + 121)), (float)-(v9 * *((_DWORD *)this + 129)));
    return 0;
  }
  return result;
}

uint64_t HGLodFilter::RenderTile(HGLodFilter *this, HGTile *a2, double a3, float32x4_t a4, float32x4_t a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  float32x4_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v43;
  float32x4_t *v44;
  float32x4_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  uint64_t v64;
  int v65;
  float32x4_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  float32x4_t *v76;
  int v77;
  float32x4_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  uint64_t v86;
  float32x4_t *v87;
  float32x4_t v88;
  int v89;
  int v90;
  uint64_t v91;
  float32x4_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  float32x4_t v103;
  int v104;
  uint64_t v105;
  float32x4_t *v106;
  uint64_t v107;
  uint64_t v108;
  float32x4_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  float32x4_t v115;
  uint64_t v117;
  float32x4_t v118;
  float32x4_t *v119;

  v5 = *(_DWORD *)a2;
  v6 = *((_DWORD *)a2 + 1);
  v7 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
  v8 = *((_DWORD *)a2 + 3) - v6;
  v9 = *((int *)a2 + 22);
  v10 = *((_QWORD *)a2 + 10);
  v11 = *((_DWORD *)this + 127) * v9;
  v12 = *((int *)this + 119);
  v13 = v10 + 16 * v11 + 16 * v12;
  v14 = *((_QWORD *)a2 + 2);
  v15 = *((int *)a2 + 6);
  v16 = *((int *)this + 118);
  v17 = *((_DWORD *)this + 126);
  v18 = v11;
  v19 = *((int *)this + 120);
  v20 = *((_DWORD *)this + 128);
  v21 = v20 * v9;
  switch(*((_DWORD *)this + 114) + 8 * *((_DWORD *)this + 122))
  {
    case 2:
      if (v8 >= 1 && v7 >= 1)
      {
        v22 = 0;
        v23 = 16 * ((int)v16 - 1) * v5;
        v24 = v13 + v23;
        v25 = 16 * v15;
        v26 = v10 + v23 + 16 * v19 + 16 * v12 + 16 * v18;
        v27 = 16 * v9;
        v28 = 16 * v16;
        v29 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
        v30.i64[0] = 0x3F0000003F000000;
        v30.i64[1] = 0x3F0000003F000000;
        do
        {
          v31 = 0;
          v32 = 0;
          do
          {
            *(float32x4_t *)(v14 + v32) = vmulq_f32(vaddq_f32(*(float32x4_t *)(v24 + v31), *(float32x4_t *)(v26 + v31)), v30);
            v32 += 16;
            v31 += v28;
          }
          while (v29 != v32);
          ++v22;
          v14 += v25;
          v26 += v27;
          v24 += v27;
        }
        while (v22 != v8);
      }
      break;
    case 3:
      if (v8 >= 1)
      {
        v33 = 0;
        v34 = (float32x4_t *)(v13 + 16 * ((int)v16 - 1) * v5);
        v35 = 16 * v9;
        v36 = 16 * v16;
        v37 = 16 * v15;
        __asm { FMOV            V0.4S, #1.0 }
        do
        {
          if (v7 >= 1)
          {
            v43 = 0;
            a4.f32[0] = (float)((*(_DWORD *)a2 - *((_DWORD *)this + 121)) * v19);
            a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
            v44 = v34;
            do
            {
              v45 = vaddq_f32(*(float32x4_t *)(*((_QWORD *)this + 72) + 32), vmulq_f32(a4, *(float32x4_t *)*((_QWORD *)this + 72)));
              *(float32x4_t *)(v14 + v43) = vaddq_f32(vmulq_laneq_f32(v44[v19], v45, 2), vaddq_f32(vmulq_lane_f32(*v44, *(float32x2_t *)v45.f32, 1), vmulq_n_f32(v44[-v19], v45.f32[0])));
              a4 = vaddq_f32(a4, _Q0);
              v44 = (float32x4_t *)((char *)v44 + v36);
              v43 += 16;
            }
            while (16 * v7 != v43);
          }
          ++v33;
          v34 = (float32x4_t *)((char *)v34 + v35);
          v14 += v37;
        }
        while (v33 != v8);
      }
      break;
    case 16:
      if (v8 >= 1 && v7 >= 1)
      {
        v54 = 0;
        v55 = v9 * v6;
        v56 = v17 * (int)v9;
        v57 = 16 * v55 * (v17 - 1);
        v58 = v13 + v57;
        v59 = v10 + v57 + 16 * v12 + 16 * v21 + 16 * v18;
        v60 = 16 * v56;
        v61 = 16 * v15;
        v62 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
        v63.i64[0] = 0x3F0000003F000000;
        v63.i64[1] = 0x3F0000003F000000;
        do
        {
          v64 = 0;
          do
          {
            *(float32x4_t *)(v14 + v64) = vmulq_f32(vaddq_f32(*(float32x4_t *)(v58 + v64), *(float32x4_t *)(v59 + v64)), v63);
            v64 += 16;
          }
          while (v62 != v64);
          ++v54;
          v59 += v60;
          v58 += v60;
          v14 += v61;
        }
        while (v54 != v8);
      }
      break;
    case 18:
      if (v8 >= 1 && v7 >= 1)
      {
        v65 = 0;
        v66 = (float32x4_t *)(v13 + 16 * (((int)v16 - 1) * v5 + (int)v9 * v6 * (v17 - 1)));
        v67 = v17 * (int)v9;
        v68 = v21;
        v69 = 16 * v15;
        v70 = v19 + v21;
        v71 = 16 * v67;
        v72 = 16 * v16;
        v73 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
        __asm { FMOV            V0.4S, #0.25 }
        do
        {
          v75 = 0;
          v76 = v66;
          do
          {
            *(float32x4_t *)(v14 + v75) = vmulq_f32(vaddq_f32(vaddq_f32(*v76, v76[v19]), vaddq_f32(v76[v68], v76[v70])), _Q0);
            v75 += 16;
            v76 = (float32x4_t *)((char *)v76 + v72);
          }
          while (v73 != v75);
          ++v65;
          v14 += v69;
          v66 = (float32x4_t *)((char *)v66 + v71);
        }
        while (v65 != v8);
      }
      break;
    case 19:
      if (v8 >= 1)
      {
        v77 = 0;
        v78 = (float32x4_t *)(v13 + 16 * (((int)v16 - 1) * v5 + (int)v9 * v6 * (v17 - 1)));
        v79 = 16 * v17 * (int)v9;
        v80 = 16 * v16;
        v81 = v19 + v21;
        v82 = v21;
        v83 = 16 * v15;
        v84.i64[0] = 0x3F0000003F000000;
        v84.i64[1] = 0x3F0000003F000000;
        __asm { FMOV            V1.4S, #1.0 }
        do
        {
          if (v7 >= 1)
          {
            v86 = 0;
            a5.f32[0] = (float)((*(_DWORD *)a2 - *((_DWORD *)this + 121)) * v19);
            a5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
            v87 = v78;
            do
            {
              v88 = vaddq_f32(*(float32x4_t *)(*((_QWORD *)this + 72) + 32), vmulq_f32(a5, *(float32x4_t *)*((_QWORD *)this + 72)));
              *(float32x4_t *)(v14 + v86) = vmulq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(vaddq_f32(v87[-v19], *(float32x4_t *)((char *)v87 + v82 * 16 - 16 * v19)), v88.f32[0]), vmulq_lane_f32(vaddq_f32(*v87, v87[v82]), *(float32x2_t *)v88.f32, 1)), vmulq_laneq_f32(vaddq_f32(v87[v19], v87[v81]), v88, 2)), v84);
              a5 = vaddq_f32(a5, _Q1);
              v87 = (float32x4_t *)((char *)v87 + v80);
              v86 += 16;
            }
            while (16 * v7 != v86);
          }
          ++v77;
          v78 = (float32x4_t *)((char *)v78 + v79);
          v14 += v83;
        }
        while (v77 != v8);
      }
      break;
    case 24:
      if (v8 >= 1 && v7 >= 1)
      {
        v89 = 0;
        v90 = v17 * v9;
        v91 = 16 * (int)v9 * v6 * (v17 - 1);
        *(float *)&a3 = (float)((v6 - *((_DWORD *)this + 129)) * v20);
        v92 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
        v93 = v13 + v91;
        v94 = 16 * v21;
        v95 = v91 + 16 * v12 + 16 * v18;
        v96 = v10 + v94 + v95;
        v97 = 16 * v90;
        v98 = 16 * v15;
        v99 = v10 + v95 - v94;
        v100 = 16 * v7;
        __asm { FMOV            V1.4S, #1.0 }
        do
        {
          v102 = 0;
          v103 = vaddq_f32(*(float32x4_t *)(*((_QWORD *)this + 72) + 32), vmulq_f32(v92, *(float32x4_t *)*((_QWORD *)this + 72)));
          do
          {
            *(float32x4_t *)(v14 + v102) = vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(v96 + v102), v103, 2), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v99 + v102), v103.f32[0]), vmulq_lane_f32(*(float32x4_t *)(v93 + v102), *(float32x2_t *)v103.f32, 1)));
            v102 += 16;
          }
          while (v100 != v102);
          ++v89;
          v96 += v97;
          v92 = vaddq_f32(v92, _Q1);
          v93 += v97;
          v14 += v98;
          v99 += v97;
        }
        while (v89 != v8);
      }
      break;
    case 26:
      if (v8 >= 1 && v7 >= 1)
      {
        v104 = 0;
        v105 = v17 * (int)v9;
        v106 = (float32x4_t *)(v13 + 16 * (((int)v16 - 1) * v5 + (int)v9 * v6 * (v17 - 1)));
        *(float *)&a3 = (float)((v6 - *((_DWORD *)this + 129)) * v20);
        v107 = 16 * v15;
        v108 = 16 * v105;
        v109 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
        v110 = v19 + v21;
        v111 = 16 * v16;
        v112 = 16 * v21;
        v113 = v19;
        v114 = 16 * v7;
        v115.i64[0] = 0x3F0000003F000000;
        v115.i64[1] = 0x3F0000003F000000;
        __asm { FMOV            V2.4S, #1.0 }
        do
        {
          v117 = 0;
          v118 = vaddq_f32(*(float32x4_t *)(*((_QWORD *)this + 72) + 32), vmulq_f32(v109, *(float32x4_t *)*((_QWORD *)this + 72)));
          v119 = v106;
          do
          {
            *(float32x4_t *)(v14 + v117) = vmulq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(vaddq_f32(v119[v112 / 0xFFFFFFFFFFFFFFF0], *(float32x4_t *)((char *)v119 + v113 * 16 - v112)), v118.f32[0]), vmulq_lane_f32(vaddq_f32(*v119, v119[v113]), *(float32x2_t *)v118.f32, 1)), vmulq_laneq_f32(vaddq_f32(v119[(unint64_t)v112 / 0x10], v119[v110]), v118, 2)), v115);
            v117 += 16;
            v119 = (float32x4_t *)((char *)v119 + v111);
          }
          while (v114 != v117);
          v109 = vaddq_f32(v109, _Q2);
          ++v104;
          v14 += v107;
          v106 = (float32x4_t *)((char *)v106 + v108);
        }
        while (v104 != v8);
      }
      break;
    default:
      if (v8 >= 1 && v7 >= 1)
      {
        v46 = 0;
        v47 = v13 + 16 * (((int)v16 - 1) * v5 + (int)v9 * v6 * (v17 - 1));
        v48 = 16 * v15;
        v49 = 16 * v17 * (int)v9;
        v50 = 16 * v16;
        v51 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
        do
        {
          v52 = 0;
          v53 = 0;
          do
          {
            *(_OWORD *)(v14 + v53) = *(_OWORD *)(v47 + v52);
            v53 += 16;
            v52 += v50;
          }
          while (v51 != v53);
          ++v46;
          v14 += v48;
          v47 += v49;
        }
        while (v46 != v8);
      }
      break;
  }
  return 0;
}

char *HGLodFilter::RenderPage(HGLodFilter *this, HGRect *a2)
{
  const char *v4;
  int v5;
  char *Buffer;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  HGHandler *v15;
  const void *v16;
  HGGLTexture *v17;
  uint64_t TextureRect;
  int v19;
  int v20;
  char v22[16];
  char __str[256];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  (*(void (**)(HGLodFilter *, HGRect *, _QWORD))(*(_QWORD *)this + 472))(this, a2, 0);
  v4 = (const char *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL) - 1);
  do
    v5 = *(unsigned __int8 *)++v4;
  while ((v5 - 48) < 0xA);
  snprintf(__str, 0x100uLL, "%s::RenderPage( [%d %d %d %d])", v4, a2[1].var0, a2[1].var1, a2[1].var2, a2[1].var3);
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v22, "gpu", 1, __str);
  Buffer = *(char **)&a2->var2;
  if (Buffer)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)Buffer + 16))(*(_QWORD *)&a2->var2);
  }
  else
  {
    Buffer = HGGPURenderer::CreateBuffer(*(_QWORD *)&a2->var0, a2[1], a2[2].var0, 0, (*((_DWORD *)this + 4) >> 12) & 1, LOBYTE(a2[15].var2));
    *(_QWORD *)&a2->var2 = Buffer;
  }
  (*(void (**)(_QWORD, char *))(**(_QWORD **)&a2->var0 + 144))(*(_QWORD *)&a2->var0, Buffer);
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 0, *(_QWORD *)&a2[10].var2, 0, 0);
  v7 = *(_QWORD *)&a2[10].var2;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 1, *(_QWORD *)&a2[11].var0, 0, 0);
  v8 = *(_QWORD *)&a2[11].var0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 2, *(_QWORD *)&a2[11].var2, 0, 0);
  v9 = *(_QWORD *)&a2[11].var2;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 3, *(_QWORD *)&a2[12].var0, 0, 0);
  v10 = *(_QWORD *)&a2[12].var0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 4, *(_QWORD *)&a2[12].var2, 0, 0);
  v11 = *(_QWORD *)&a2[12].var2;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 5, *(_QWORD *)&a2[13].var0, 0, 0);
  v12 = *(_QWORD *)&a2[13].var0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 6, *(_QWORD *)&a2[13].var2, 0, 0);
  v13 = *(_QWORD *)&a2[13].var2;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)&a2->var0 + 152))(*(_QWORD *)&a2->var0, 7, *(_QWORD *)&a2[14].var0, 0, 0);
  v14 = *(_QWORD *)&a2[14].var0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v15 = (HGHandler *)(*(uint64_t (**)(_QWORD, _QWORD, HGLodFilter *))(**(_QWORD **)&a2->var0 + 368))(*(_QWORD *)&a2->var0, *((_QWORD *)this + 8), this);
  v16 = *(const void **)&a2[10].var2;
  if (v16
  {
    TextureRect = HGGLTexture::GetTextureRect(v17);
    (*(void (**)(HGHandler *, uint64_t, float, float, float, float))(*(_QWORD *)v15 + 136))(v15, 3, (float)(v19 - TextureRect), (float)(v20 - HIDWORD(TextureRect)), 0.0, 0.0);
    (*(void (**)(HGHandler *))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(HGLodFilter *, HGRect *, _QWORD, HGHandler *))(*(_QWORD *)this + 488))(this, a2, 0, v15);
    HGGPURenderer::Rect(*(HGGPURenderer **)&a2->var0, v15, a2[1], 8);
    (*(void (**)(HGLodFilter *, HGRect *, _QWORD, HGHandler *))(*(_QWORD *)this + 496))(this, a2, 0, v15);
  }
  else
  {
    Buffer = 0;
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v22);
  return Buffer;
}

void sub_1B2ACA518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2ACA530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2ACA544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2ACA558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void HGLodFilter::GetTransform(HGLodFilter *this@<X0>, int a2@<W1>, HGTransform *a3@<X8>)
{
  int v6;
  unsigned int v7;
  double v8;
  double v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint32x2_t v23;
  int64x2_t v24;
  double v25;
  double v26;
  int v27;
  double v28;
  double v29;
  char *v30;
  float64x2_t v31;

  HGTransform::HGTransform(a3);
  HGTransform::LoadIdentity(a3);
  v6 = *((_DWORD *)this + 103);
  if (!v6)
    return;
  v7 = *((_DWORD *)this + 115);
  v8 = 0.0;
  v9 = 0.0;
  if (v7)
  {
    v10 = *((int *)this + 114);
    v9 = 0.5;
    if (v10 <= 7)
      v9 = dbl_1B35242A8[v10];
  }
  v11 = *((_DWORD *)this + 123);
  if (v11)
  {
    v12 = *((int *)this + 122);
    v8 = 0.5;
    if (v12 <= 7)
      v8 = dbl_1B35242A8[v12];
  }
  if (v6 == 3)
  {
    v13 = *((_QWORD *)this + 70);
    v14.i64[0] = (int)v13;
    v14.i64[1] = SHIDWORD(v13);
    v15 = vcvtq_f64_s64(v14);
    v16 = *((_QWORD *)this + 69);
    v14.i64[0] = (int)v16;
    v14.i64[1] = SHIDWORD(v16);
    v17 = vsubq_f64(v15, vcvtq_f64_s64(v14));
    v18 = *((_QWORD *)this + 66);
    v14.i64[0] = (int)v18;
    v14.i64[1] = SHIDWORD(v18);
    v19 = vcvtq_f64_s64(v14);
    v20 = *((_QWORD *)this + 65);
    v14.i64[0] = (int)v20;
    v14.i64[1] = SHIDWORD(v20);
    v31 = vdivq_f64(v17, vsubq_f64(v19, vcvtq_f64_s64(v14)));
    v21 = v20;
    if ((_DWORD)v20 != 0x80000000)
    {
LABEL_10:
      v22 = (char *)this + 552;
      goto LABEL_14;
    }
  }
  else
  {
    v23 = vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)__PAIR64__(v11, v7));
    v24.i64[0] = v23.i32[0];
    v24.i64[1] = v23.i32[1];
    v31 = vcvtq_f64_s64(v24);
    v21 = *((_DWORD *)this + 130);
    if (v21 != 0x80000000)
      goto LABEL_10;
  }
  v21 = *((_DWORD *)this + 132);
  v25 = 0.0;
  v26 = 0.0;
  if (v21 == 0x7FFFFFFF)
    goto LABEL_15;
  v22 = (char *)this + 560;
LABEL_14:
  v25 = (double)-v21;
  v26 = (double)*(int *)v22;
LABEL_15:
  v27 = *((_DWORD *)this + 131);
  if (v27 != 0x80000000)
  {
    v30 = (char *)this + 556;
    goto LABEL_19;
  }
  v27 = *((_DWORD *)this + 133);
  v28 = 0.0;
  v29 = 0.0;
  if (v27 != 0x7FFFFFFF)
  {
    v30 = (char *)this + 564;
LABEL_19:
    v28 = (double)-v27;
    v29 = (double)*(int *)v30;
  }
  if (a2)
  {
    HGTransform::Translate(a3, v25 - v9, v28 - v8, 0.0);
    HGTransform::Scale(a3, v31.f64[0], v31.f64[1], 1.0);
  }
  else
  {
    HGTransform::Translate(a3, -v26, -v29, 0.0);
    HGTransform::Scale(a3, 1.0 / v31.f64[0], 1.0 / v31.f64[1], 1.0);
    v26 = v9 - v25;
    v29 = v8 - v28;
  }
  HGTransform::Translate(a3, v26, v29, 0.0);
}

void sub_1B2ACA7A4(_Unwind_Exception *a1)
{
  HGTransform *v1;

  HGTransform::~HGTransform(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACA7B8(_Unwind_Exception *a1)
{
  HGTransform *v1;

  HGTransform::~HGTransform(v1);
  _Unwind_Resume(a1);
}

uint64_t HGLodFilter::info(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  const char *v25;
  size_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  const char *v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  const char *v45;
  size_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v56;
  uint64_t v57[8];
  void *__p[2];
  __int128 v59;
  int v60;
  uint64_t v61[20];

  v8 = MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v61[0] = MEMORY[0x1E0DE4FE0] + 64;
  v56 = v11;
  *(uint64_t *)((char *)&v57[-1] + *(_QWORD *)(v11 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v57[-1] + *(_QWORD *)(v56 - 24));
  std::ios_base::init(v13, v57);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v56 = v8 + 24;
  v61[0] = v9;
  std::streambuf::basic_streambuf();
  v14 = MEMORY[0x1E0DE4FB8];
  v57[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v59 = 0u;
  v60 = 16;
  if (a2 >= 2)
  {
    v15 = *(char *)(a3 + 23);
    if (v15 >= 0)
      v16 = a3;
    else
      v16 = *(_QWORD *)a3;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a3 + 23);
    else
      v17 = *(_QWORD *)(a3 + 8);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, v16, v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"lodfilter, ", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"axis[", 5);
    v20 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"]: ", 3);
    v24 = *(int *)(a1 + 456);
    if (v24 >= 8)
    {
      HGLogger::error((HGLogger *)"HGLodFilter::info: Invalid filter mode: %d", v21, v22, *(int *)(a1 + 456));
      v25 = "INVALID FILTER MODE";
    }
    else
    {
      v25 = off_1E652D8A8[v24];
    }
    v26 = strlen(v25);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", ", 2);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", ", 2);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", ", 2);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", ", 2);
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", ", 2);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\n", 1);
    v35 = *(char *)(a4 + 23);
    if (v35 >= 0)
      v36 = a4;
    else
      v36 = *(_QWORD *)a4;
    if (v35 >= 0)
      v37 = *(unsigned __int8 *)(a4 + 23);
    else
      v37 = *(_QWORD *)(a4 + 8);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, v36, v37);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"lodfilter, ", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"axis[", 5);
    v40 = (_QWORD *)std::ostream::operator<<();
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"]: ", 3);
    v44 = *(int *)(a1 + 488);
    if (v44 >= 8)
    {
      HGLogger::error((HGLogger *)"HGLodFilter::info: Invalid filter mode: %d", v41, v42, *(int *)(a1 + 488));
      v45 = "INVALID FILTER MODE";
    }
    else
    {
      v45 = off_1E652D8A8[v44];
    }
    v46 = strlen(v45);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v45, v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", ", 2);
    v48 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", ", 2);
    v49 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", ", 2);
    v50 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", ", 2);
    v51 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", ", 2);
    v52 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)", ", 2);
    v53 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)", ", 2);
    v54 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n", 1);
  }
  std::stringbuf::str();
  v56 = *v10;
  *(uint64_t *)((char *)&v57[-1] + *(_QWORD *)(v56 - 24)) = v10[3];
  v57[0] = v14 + 16;
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](v61);
}

void sub_1B2ACABD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2ACABE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::ostream::~ostream();
  MEMORY[0x1B5E290BC](a10);
  _Unwind_Resume(a1);
}

void HGLodPreFilter::HGLodPreFilter(HGNode *a1, uint64_t a2, int a3)
{
  uint64_t v5;

  HGNode::HGNode(a1);
  *(_QWORD *)v5 = off_1E652D638;
  *(_QWORD *)(v5 + 408) = a2;
  *(_DWORD *)(v5 + 416) = a3;
}

void HGLodPreFilter::~HGLodPreFilter(HGNode *this)
{
  void *v1;

  HGNode::~HGNode(this);
  HGObject::operator delete(v1);
}

uint64_t HGLodPreFilter::GetDOD(HGLodPreFilter *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v7 = HGRectMake4i(0xFFFFFFF0, 0xFFFFFFF0, 0x10u, 0x10u);
  return HGRectGrow(v6, v5, v7);
}

uint64_t HGLodPreFilter::GetROI(HGLodPreFilter *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v7 = HGRectMake4i(0xFFFFFFF0, 0xFFFFFFF0, 0x10u, 0x10u);
  return HGRectGrow(v6, v5, v7);
}

const char *HGLodPreFilter::GetProgram(HGLodPreFilter *this, HGRenderer *a2)
{
  if (*((_DWORD *)this + 104))
    return "!!ARBfp1.0     \n"
           "##LEN=00000006f8\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "##%\n"
           "TEMP r0,r1,r2,r3;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "RCP r2.w,$f1.w;\n"
           "MUL r3,$f1.xyxy,r2.w;\n"
           "MAD r3,-r3,$p0,$p1;\n"
           "MUL r2.w,r3.y,r3.z;\n"
           "MAD r2.w,r3.x,r3.w,-r2.w;\n"
           "MUL r3,r3,$f1.w;\n"
           "RCP r2.w,r2.w;\n"
           "MUL r3,r3,r2.w;\n"
           "SWZ r3,r3,-z,x,w,-y;\n"
           "MAX r3,r3,-16.;\n"
           "MIN r3,r3,16.;\n"
           "MAD r1,.125,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.125,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,.25,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.25,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,.375,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.375,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,.5,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.5,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,.625,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.625,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,.75,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.75,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,.875,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.875,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "ADD r1,$f0,r3;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "SUB r1,$f0,r3;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MUL $o0,0.0588235294117647,r0;\n"
           "END\n"
           "##MD5=103181ed:3a2f2b1d:dd57ff36:42e782ba\n"
           "##SIG=00000000:00000000:00000000:00000000:0000:0002:0004:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  else
    return "!!ARBfp1.0     \n"
           "##LEN=00000006f8\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "##%\n"
           "TEMP r0,r1,r2,r3;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "RCP r2.w,$f1.w;\n"
           "MUL r3,$f1.xyxy,r2.w;\n"
           "MAD r3,-r3,$p0,$p1;\n"
           "MUL r2.w,r3.y,r3.z;\n"
           "MAD r2.w,r3.x,r3.w,-r2.w;\n"
           "MUL r3,r3,$f1.w;\n"
           "RCP r2.w,r2.w;\n"
           "MUL r3,r3,r2.w;\n"
           "SWZ r3,r3,w,-y,-z,x;\n"
           "MAX r3,r3,-16.;\n"
           "MIN r3,r3,16.;\n"
           "MAD r1,.125,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.125,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,.25,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.25,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,.375,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.375,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,.5,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.5,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,.625,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.625,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,.75,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.75,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,.875,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MAD r1,-.875,r3,$f0;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "ADD r1,$f0,r3;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "SUB r1,$f0,r3;\n"
           "##0\n"
           "TEX r1,r1,texture[0],RECT;\n"
           "ADD r0,r1,r0;\n"
           "MUL $o0,0.0588235294117647,r0;\n"
           "END\n"
           "##MD5=871a4a85:797b62fd:7f3669a5:784289d5\n"
           "##SIG=00000000:00000000:00000000:00000000:0000:0002:0004:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
}

uint64_t HGLodPreFilter::BindTexture(HGLodPreFilter *this, HGHandler *a2, int a3)
{
  if (a3)
    return 0xFFFFFFFFLL;
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  return 0;
}

uint64_t HGLodPreFilter::Bind(HGLodPreFilter *this, HGHandler *a2)
{
  double *MatrixPtr;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  MatrixPtr = (double *)HGTransform::GetMatrixPtr((HGTransform *)(*((_QWORD *)this + 51) + 448));
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, double *))(*(_QWORD *)a2 + 112))(a2, MatrixPtr);
  v5 = MatrixPtr[3] + MatrixPtr[3];
  v6 = MatrixPtr[7] + MatrixPtr[7];
  (*(void (**)(HGHandler *, _QWORD, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 0, v5, v5, v6, v6);
  v7 = *MatrixPtr + *MatrixPtr;
  v8 = MatrixPtr[1] + MatrixPtr[1];
  v9 = MatrixPtr[4] + MatrixPtr[4];
  v10 = MatrixPtr[5] + MatrixPtr[5];
  (*(void (**)(HGHandler *, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 1, v7, v8, v9, v10);
  (*(void (**)(HGHandler *, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 2, *(float *)(*((_QWORD *)this + 51) + 736), 0.0, 0.0, 0.0);
  return 0;
}

void hgColorConformNodeListCacheLockInitFunction(void)
{
  HGSynchronizable *v0;

  v0 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v0);
  HGColorConform::s_NodeListCacheLock = (uint64_t)v0;
}

void sub_1B2ACAEE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40BBCAB520);
  _Unwind_Resume(a1);
}

void HGColorConform::HGColorConform(HGColorConform *this)
{
  uint64_t v2;
  char *v3;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v2 = off_1E652D8F8;
  *(_OWORD *)(v2 + 776) = 0u;
  pthread_once(&hgColorConformNodeListCacheLockInit, hgColorConformNodeListCacheLockInitFunction);
  *((_WORD *)this + 216) = 0;
  *((_BYTE *)this + 434) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *(_QWORD *)((char *)this + 436) = 1;
  *((_WORD *)this + 236) = 257;
  *((_BYTE *)this + 474) = 0;
  *((_DWORD *)this + 113) = 1;
  *(_OWORD *)((char *)this + 456) = HGRectInfinite;
  *((_DWORD *)this + 121) = -1;
  v3 = (char *)HGObject::operator new(0x78uLL);
  HGObject::HGObject((HGObject *)v3);
  *(_QWORD *)v3 = off_1E652DBA8;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 9) = 0;
  *((_QWORD *)v3 + 10) = 0;
  *((_QWORD *)v3 + 8) = 0;
  *((_DWORD *)v3 + 6) = 1065353216;
  *(_QWORD *)(v3 + 28) = 0;
  *(_QWORD *)(v3 + 44) = 0;
  *(_QWORD *)(v3 + 36) = 0;
  *((_DWORD *)v3 + 13) = 0;
  v3[56] = 1;
  *((_DWORD *)v3 + 15) = 2;
  *(_OWORD *)(v3 + 88) = xmmword_1B35242F0;
  v3[104] = 1;
  *(_QWORD *)(v3 + 108) = 0x100000000;
  *((_QWORD *)this + 67) = v3;
  HGColorConform::ClearConversionParams(this);
  *(_QWORD *)((char *)this + 444) = 0;
  *(_QWORD *)((char *)this + 476) = 0xBF00000040000000;
  *(_QWORD *)((char *)this + 748) = 0x3F8000003F800000;
  *(_OWORD *)((char *)this + 716) = xmmword_1B3051560;
  *(_OWORD *)((char *)this + 732) = xmmword_1B30530B0;
  *((_BYTE *)this + 756) = 1;
  *((_QWORD *)this + 95) = 0x3F80000000000320;
  *((_BYTE *)this + 768) = 0;
  *((_QWORD *)this + 53) = 0;
}

void sub_1B2ACB06C(_Unwind_Exception *a1)
{
  HGNode *v1;
  uint64_t v2;
  void *v3;

  HGObject::operator delete(v3);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100](v2);
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACB090(_Unwind_Exception *a1)
{
  HGNode *v1;
  uint64_t v2;

  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100](v2);
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

double HGColorConform::ClearConversionParams(HGColorConform *this)
{
  uint64_t v2;
  const void *v3;
  double result;

  *(_OWORD *)((char *)this + 488) = xmmword_1B3524300;
  *((_DWORD *)this + 132) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 65) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 69) = 0;
  *((_OWORD *)this + 35) = xmmword_1B3524310;
  *((_OWORD *)this + 36) = xmmword_1B3524320;
  *((_QWORD *)this + 74) = 0x31AAAC00321E8A92;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_OWORD *)this + 40) = xmmword_1B304F230;
  *((_OWORD *)this + 41) = xmmword_1B304F240;
  *((_OWORD *)this + 42) = xmmword_1B304F250;
  *((_OWORD *)this + 43) = xmmword_1B304EFF0;
  *((_QWORD *)this + 88) = 0x300000003;
  *((_DWORD *)this + 178) = 0;
  v2 = *((_QWORD *)this + 67);
  if (v2)
  {
    v3 = *(const void **)(v2 + 16);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v2 + 16) = 0;
    }
    *(_DWORD *)(v2 + 24) = 1065353216;
    *(_QWORD *)(v2 + 28) = 0;
    *(_QWORD *)(v2 + 44) = 0;
    *(_QWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 52) = 0;
    *(_BYTE *)(v2 + 56) = 1;
    *(_DWORD *)(v2 + 60) = 2;
    *(_QWORD *)(v2 + 72) = *(_QWORD *)(v2 + 64);
    *(_OWORD *)(v2 + 88) = xmmword_1B35242F0;
    *(_BYTE *)(v2 + 104) = 1;
    *(_QWORD *)(v2 + 108) = 0x100000000;
  }
  result = 0.0;
  *((_QWORD *)this + 68) = 0;
  return result;
}

void HGColorConform::~HGColorConform(HGColorConform *this)
{
  uint64_t v2;
  uint64_t v3;
  HGSynchronizable *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = off_1E652D8F8;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 67);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = (HGSynchronizable *)HGColorConform::s_NodeListCacheLock;
  HGSynchronizable::Lock((HGSynchronizable *)HGColorConform::s_NodeListCacheLock);
  v5 = *((_QWORD *)this + 53);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  HGSynchronizable::Unlock(v4);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
  if (!v6)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    HGNode::~HGNode((HGNode *)this);
  }
  else
  {
LABEL_11:
    HGNode::~HGNode((HGNode *)this);
  }
}

{
  void *v1;

  HGColorConform::~HGColorConform(this);
  HGObject::operator delete(v1);
}

HGNode *HGColorConform::SetInputPixelFormat(uint64_t a1, uint64_t a2, char *a3)
{
  int v3;
  HGNode *result;

  v3 = a2;
  result = HGNode::ClearBits((HGNode *)a1, a2, a3);
  *(_DWORD *)(a1 + 444) = v3;
  return result;
}

HGNode *HGColorConform::SetOutputPixelFormat(uint64_t a1, uint64_t a2, char *a3)
{
  int v3;
  int v4;
  HGNode *result;

  v3 = (int)a3;
  v4 = a2;
  result = HGNode::ClearBits((HGNode *)a1, a2, a3);
  *(_DWORD *)(a1 + 440) = v4;
  *(_DWORD *)(a1 + 448) = v3;
  return result;
}

HGNode *HGColorConform::SetPremultiplyState(HGNode *this, uint64_t a2, char *a3)
{
  int v3;
  HGNode *v4;
  char v5;

  v3 = (int)a3;
  v4 = this;
  if (*((unsigned __int8 *)this + 472) == (_DWORD)a2)
  {
    if (*((unsigned __int8 *)this + 473) == (_DWORD)a3)
      return this;
LABEL_5:
    this = HGNode::ClearBits(v4, a2, a3);
    *((_BYTE *)v4 + 473) = v3;
    return this;
  }
  v5 = a2;
  this = HGNode::ClearBits(this, a2, a3);
  *((_BYTE *)v4 + 472) = v5;
  if (*((unsigned __int8 *)v4 + 473) != v3)
    goto LABEL_5;
  return this;
}

double HGColorConformLook3DLUT::Clear(HGColorConformLook3DLUT *this)
{
  const void *v2;
  double result;

  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 2) = 0;
  }
  *((_DWORD *)this + 6) = 1065353216;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *((_DWORD *)this + 13) = 0;
  *((_BYTE *)this + 56) = 1;
  *((_DWORD *)this + 15) = 2;
  *((_QWORD *)this + 9) = *((_QWORD *)this + 8);
  *(_OWORD *)((char *)this + 88) = xmmword_1B35242F0;
  *((_BYTE *)this + 104) = 1;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)((char *)this + 108) = 0x100000000;
  return result;
}

uint64_t HGColorConform::SetLook3DLutConversion(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  int v5;
  __n128 v8;
  uint64_t v9;

  v5 = (int)a3;
  HGNode::ClearBits((HGNode *)a1, a2, a3);
  *(_DWORD *)(a1 + 484) = 5;
  v8.n128_f64[0] = HGColorConform::ClearConversionParams((HGColorConform *)a1);
  v9 = *(_QWORD *)(a1 + 536);
  if (v9 != a2)
  {
    if (v9)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v9 + 24))(v9, v8.n128_f64[0]);
    *(_QWORD *)(a1 + 536) = a2;
    if (a2)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)a2 + 16))(a2, v8);
  }
  *(_DWORD *)(a1 + 544) = v5;
  *(_DWORD *)(a1 + 548) = a4;
  return 1;
}

uint64_t HGColorConform::Prep3DLUTBitmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  unsigned __int8 v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  char *v20;
  char *v21;
  uint64_t LUTCache;
  uint64_t NewLUT;
  HGObject *v24;
  HGObject *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned __int16 *v40;
  uint64_t v41;
  void *__p;
  void *v46;
  char *v47;

  if ((v14 & 1) == 0
  {
  }
  v15 = (_QWORD *)operator new();
  v16 = *(_QWORD *)(a1 + 536);
  v46 = 0;
  v47 = 0;
  __p = 0;
  v18 = *(_BYTE **)(v16 + 64);
  v17 = *(_BYTE **)(v16 + 72);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if ((v19 & 0x8000000000000000) != 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v20 = (char *)operator new(v17 - v18);
    v21 = &v20[v19];
    __p = v20;
    v47 = &v20[v19];
    memcpy(v20, v18, v19);
    v46 = v21;
  }
  HGColorConformLUTInfo::HGColorConformLUTInfo((uint64_t)v15, a4, 3uLL, (uint64_t)&__p, 0, *(float *)(v16 + 24), *(float *)(v16 + 28));
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  LUTCache = HGLUTCacheManager::getLUTCache(*(_QWORD *)(a2 + 552), (unint64_t)&HGColorConform::Prep3DLUTBitmap(HGRenderer *,unsigned char const*,unsigned long,unsigned long,unsigned long,BOOL,HGColorConform::hgLookLUTEndian)::lutFactory);
  if (HGLUTCache::isLUTCached(LUTCache, (uint64_t)v15))
  {
    NewLUT = HGLUTCache::getNewLUT(LUTCache, (uint64_t)v15);
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  }
  else
  {
    v24 = (HGObject *)HGObject::operator new(0x28uLL);
    HGObject::HGObject(v24);
    *(_QWORD *)v24 = off_1E652DBE0;
    *((_QWORD *)v24 + 2) = 6 * a4 * a4 * a4;
    *((_DWORD *)v24 + 8) = 19;
    *((_QWORD *)v24 + 3) = operator new[]();
    (*(void (**)(HGObject *))(*(_QWORD *)v24 + 16))(v24);
    v25 = (HGObject *)v15[5];
    if (v25 != v24)
    {
      if (v25)
        (*(void (**)(HGObject *))(*(_QWORD *)v25 + 24))(v25);
      v15[5] = v24;
      (*(void (**)(HGObject *))(*(_QWORD *)v24 + 16))(v24);
    }
    (*(void (**)(HGObject *))(*(_QWORD *)v24 + 24))(v24);
    v26 = HGFormatUtils::bytesPerPixel(19);
    v27 = HGFormatUtils::bytesPerPixel(19);
    v28 = v26;
    if (a7)
      v29 = a6;
    else
      v29 = v26;
    if (!a7)
      v28 = a6;
    if (a4)
    {
      v30 = 0;
      v31 = v27;
      v32 = v27 * a4;
      v33 = (unsigned __int16 *)(a3 + 2);
      v34 = *((_QWORD *)v24 + 3) + 2;
      v35 = a4 * a4 * v27;
      do
      {
        v36 = 0;
        v37 = (_WORD *)v34;
        v38 = v33;
        do
        {
          v39 = v37;
          v40 = v38;
          v41 = a4;
          do
          {
            while (a8 != 1)
            {
              *(v39 - 1) = *(v40 - 1);
              *v39 = *v40;
              v39[1] = v40[1];
              v40 = (unsigned __int16 *)((char *)v40 + v29);
              v39 = (_WORD *)((char *)v39 + v31);
              if (!--v41)
                goto LABEL_22;
            }
            *(v39 - 1) = bswap32(*(v40 - 1)) >> 16;
            *v39 = bswap32(*v40) >> 16;
            v39[1] = bswap32(v40[1]) >> 16;
            v40 = (unsigned __int16 *)((char *)v40 + v29);
            v39 = (_WORD *)((char *)v39 + v31);
            --v41;
          }
          while (v41);
LABEL_22:
          ++v36;
          v38 = (unsigned __int16 *)((char *)v38 + a5);
          v37 = (_WORD *)((char *)v37 + v32);
        }
        while (v36 != a4);
        ++v30;
        v33 = (unsigned __int16 *)((char *)v33 + v28);
        v34 += v35;
      }
      while (v30 != a4);
    }
    NewLUT = HGLUTCache::getNewLUT(LUTCache, (uint64_t)v15);
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    (*(void (**)(HGObject *))(*(_QWORD *)v24 + 24))(v24);
  }
  return NewLUT;
}

void sub_1B2ACB7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  _Unwind_Resume(a1);
}

HGNode *HGColorConform::SetToneQualityMode(HGNode *result, uint64_t a2, char *a3)
{
  int v3;
  HGNode *v4;

  if (*((_DWORD *)result + 109) != (_DWORD)a2)
  {
    v3 = a2;
    v4 = result;
    result = HGNode::ClearBits(result, a2, a3);
    *((_DWORD *)v4 + 109) = v3;
  }
  return result;
}

HGColorGamma *HGColorConform::CreateColorGammaNode(HGColorConform *this)
{
  HGColorGamma *v2;

  v2 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
  HGColorGamma::HGColorGamma(v2);
  HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v2, *((_BYTE *)this + 474));
  return v2;
}

void sub_1B2ACB8E8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t HGColorConform::PrepareOutputNode(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(result + 452) == 1)
  {
    *(_QWORD *)(result + 456) = a3;
    *(_QWORD *)(result + 464) = a4;
  }
  return result;
}

uint64_t HGColorConform::SetConversion(HGNode *this, CGColorSpace *a2, CGColorSpace *a3)
{
  const char *v6;
  char *v7;
  double v8;
  uint64_t result;
  const __CFData *v10;
  const __CFData *v11;
  const ColorSyncProfile *v12;
  CFDataRef v13;
  const __CFData *v14;
  const ColorSyncProfile *v15;
  uint64_t v16;

  HGNode::ClearBits(this, (uint64_t)a2, (char *)a3);
  *((_DWORD *)this + 121) = -1;
  v8 = HGColorConform::ClearConversionParams((HGColorConform *)this);
  if (!a2 || !a3)
  {
    HGLogger::warning((HGLogger *)"SetConversion does not allow NULL CGColorSpaceRef", v6, v7, v8);
    return 0;
  }
  if (CFEqual(a2, a3))
    return 1;
  v10 = CGColorSpaceCopyICCData(a2);
  if (v10)
  {
    v11 = v10;
    v12 = ColorSyncProfileCreate(v10, 0);
    CFRelease(v11);
    v13 = CGColorSpaceCopyICCData(a3);
    if (!v13)
      goto LABEL_18;
    v14 = v13;
LABEL_13:
    v15 = ColorSyncProfileCreate(v14, 0);
    CFRelease(v14);
    if (v12 && v15)
    {
      v16 = HGColorConform::SetConversion(this, v12, v15);
      CFRelease(v12);
      CFRelease(v15);
      return v16;
    }
    if (v15)
      CFRelease(v15);
LABEL_18:
    if (v12)
    {
      CFRelease(v12);
      return 0;
    }
    return 0;
  }
  result = (uint64_t)CGColorSpaceCopyICCData(a3);
  if (result)
  {
    v14 = (const __CFData *)result;
    v12 = 0;
    goto LABEL_13;
  }
  return result;
}

uint64_t HGColorConform::SetConversion(HGNode *this, const ColorSyncProfile *a2, const ColorSyncProfile *a3)
{
  HGSynchronizable *v6;
  uint64_t v7;
  ColorSyncMD5 MD5;
  ColorSyncMD5 v9;
  const ColorSyncProfile *v11;
  HGSynchronizable *v12;
  uint64_t v13;

  HGNode::ClearBits(this, (uint64_t)a2, (char *)a3);
  *((_DWORD *)this + 121) = -1;
  HGColorConform::ClearConversionParams((HGColorConform *)this);
  v6 = (HGSynchronizable *)HGColorConform::s_NodeListCacheLock;
  HGSynchronizable::Lock((HGSynchronizable *)HGColorConform::s_NodeListCacheLock);
  v7 = *((_QWORD *)this + 53);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  HGSynchronizable::Unlock(v6);
  MD5 = ColorSyncProfileGetMD5(a2);
  v9 = ColorSyncProfileGetMD5(a3);
  if (*(_QWORD *)MD5.digest == *(_QWORD *)v9.digest && *(_QWORD *)&MD5.digest[8] == *(_QWORD *)&v9.digest[8])
    return 1;
  v11 = (const ColorSyncProfile *)((char *)this + 424);
  v12 = (HGSynchronizable *)HGColorConform::s_NodeListCacheLock;
  HGSynchronizable::Lock((HGSynchronizable *)HGColorConform::s_NodeListCacheLock);
  if ((HGColorConform::DecodeFragmentList(a2, a3, v11, 0) & 1) != 0
    || HGColorConform::DecodeFragmentList(a2, a3, v11, (HGColorConformNodeListCacheItem **)1))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)v11 + 16))(*(_QWORD *)v11);
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *(_QWORD *)v11 = 0;
  }
  HGSynchronizable::Unlock(v12);
  return v13;
}

void sub_1B2ACBBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t HGColorConform::DecodeFragmentList(HGColorConform *this, const ColorSyncProfile *a2, const ColorSyncProfile *a3, HGColorConformNodeListCacheItem **a4)
{
  int v4;
  const char *v6;
  char *v7;
  char v8;
  unsigned __int8 v9;
  void **v10;
  void **v11;
  void *v12;
  void **v13;
  void **v14;
  void *v15;
  void *v16;
  void *v17;
  const __CFArray *v18;
  ColorSyncTransformRef v19;
  const char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int8 v24;
  const char *v25;
  const char *v26;
  char *v27;
  const char *v28;
  char *v29;
  unsigned __int8 v30;
  uint64_t v31;
  CFIndex v32;
  int v33;
  const __CFDictionary *ValueAtIndex;
  const char *v35;
  char *v36;
  unsigned __int8 v37;
  const __CFArray *v38;
  const __CFArray *v39;
  const __CFArray *v40;
  const __CFArray *v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  const __CFNumber *v44;
  const __CFNumber *v45;
  const __CFNumber *v46;
  const __CFNumber *v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  const __CFNumber *v50;
  const __CFNumber *v51;
  uint64_t v52;
  const char *v53;
  char *v54;
  __int128 v55;
  _OWORD *v56;
  __int128 v57;
  __int128 v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  CFIndex v61;
  const char *v62;
  char *v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  const char *v67;
  char *v68;
  const __CFArray *v69;
  const __CFNumber *v70;
  const char *v71;
  char *v72;
  unsigned __int8 v73;
  const __CFNumber *v74;
  const __CFNumber *v75;
  const char *v76;
  char *v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  const __CFNumber *v80;
  const char *v81;
  char *v82;
  unsigned __int8 v83;
  const __CFNumber *v84;
  const char *v85;
  char *v86;
  unsigned __int8 v87;
  const __CFNumber *v88;
  const __CFNumber *v89;
  const char *v90;
  char *v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  int *v94;
  int v95;
  unsigned __int8 v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  HGObject *v100;
  uint64_t v101;
  HGObject *v102;
  uint64_t v103;
  const UInt8 *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  const char *v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  _DWORD *v112;
  int v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  size_t v124;
  char *v125;
  char *v126;
  unint64_t v127;
  char *v128;
  __int128 *v129;
  unint64_t v130;
  __int128 v131;
  char *v132;
  uint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  _BYTE *v142;
  _BYTE *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  size_t v147;
  char *v148;
  char *v149;
  unint64_t v150;
  char *v151;
  __int128 *v152;
  unint64_t v153;
  __int128 v154;
  char *v155;
  uint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  char v160;
  void **v161;
  unsigned __int8 v162;
  BOOL v163;
  int v164;
  const char *v165;
  char *v166;
  unsigned __int8 v167;
  const __CFData *v168;
  int v169;
  unint64_t Length;
  uint64_t v171;
  int v172;
  int v173;
  int v174;
  HGObject *v175;
  uint64_t v176;
  HGObject *v177;
  uint64_t v178;
  const UInt8 *BytePtr;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t j;
  __int16 *v189;
  __int16 v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _DWORD *v194;
  _DWORD *v195;
  unint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t i;
  __int16 *v201;
  __int16 v202;
  uint64_t v203;
  uint64_t v204;
  _DWORD *v205;
  _DWORD *v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  __int16 *v210;
  __int16 v211;
  const char *v212;
  char *v213;
  unsigned __int8 v214;
  unsigned __int8 v215;
  unsigned __int8 v216;
  unsigned __int8 v217;
  const char *v218;
  char *v219;
  unsigned __int8 v220;
  const char *v222;
  char *v223;
  unsigned __int8 v224;
  char *v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  unsigned __int8 v229;
  const __CFNumber *v230;
  const __CFNumber *number;
  BOOL v232;
  unsigned int v233;
  const ColorSyncProfile *v234;
  CFIndex Count;
  int v236;
  CFIndex v237;
  const __CFArray *theArray;
  CFNumberRef v241;
  CFDataRef theData;
  CFNumberRef v243;
  float v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void *value;
  void **v249;
  uint64_t v250;
  ColorSyncMD5 MD5;
  ColorSyncMD5 valuePtr;
  void *v253[3];
  void *v254[3];
  void *values[3];
  void *keys[3];
  void *v257;
  CFDictionaryRef v258;
  uint64_t v259;

  v4 = (int)a4;
  v259 = *MEMORY[0x1E0C80C00];
  if (HGColorConform::GetNodeListFromCache(this, a2, a3, a4))
  {
    v8 = 1;
    return v8 & 1;
  }
  v236 = v4;
  v234 = a3;
  v250 = 0;
  v9 = atomic_load(HGLogger::_enabled);
  if ((v9 & 1) != 0)
    HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"HGColorConform processing ColorSync fragment list.\n", v6, v7);
  v257 = 0;
  v258 = 0;
  v10 = (void **)MEMORY[0x1E0C955B8];
  v11 = (void **)MEMORY[0x1E0C955C0];
  v12 = (void *)*MEMORY[0x1E0C955C0];
  v13 = (void **)MEMORY[0x1E0C95608];
  keys[0] = *(void **)MEMORY[0x1E0C955B8];
  keys[1] = v12;
  keys[2] = *(void **)MEMORY[0x1E0C95608];
  v14 = (void **)MEMORY[0x1E0C955D0];
  v15 = (void *)*MEMORY[0x1E0C955D0];
  values[0] = this;
  values[1] = v15;
  values[2] = *(void **)MEMORY[0x1E0C955E8];
  v257 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, 0, 0);
  v16 = *v11;
  v254[0] = *v10;
  v254[1] = v16;
  v254[2] = *v13;
  v17 = *v14;
  v253[0] = a2;
  v253[1] = v17;
  v253[2] = *(void **)MEMORY[0x1E0C955F8];
  v258 = CFDictionaryCreate(0, (const void **)v254, (const void **)v253, 3, 0, 0);
  v18 = CFArrayCreate(0, (const void **)&v257, 2, 0);
  v19 = ColorSyncTransformCreate(v18, 0);
  CFRelease(v257);
  CFRelease(v258);
  CFRelease(v18);
  if (!v19)
  {
    v216 = atomic_load(HGLogger::_enabled);
    if ((v216 & 1) != 0)
      HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"HGColorConform finished processing ColorSync fragment list: FAILURE (ColorSyncTransformCreate).\n", v20, v21);
    goto LABEL_288;
  }
  v22 = (uint64_t *)MEMORY[0x1E0C955F0];
  if (v236)
    v22 = (uint64_t *)MEMORY[0x1E0C95600];
  v23 = *v22;
  v24 = atomic_load(HGLogger::_enabled);
  if ((v24 & 1) != 0)
  {
    v25 = "false";
    if (v236)
      v25 = "true";
    HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"HGColorConform using simplified conversion data? %s", v20, v21, v25);
  }
  theArray = (const __CFArray *)MEMORY[0x1B5E28B34](v19, v23, 0);
  CFRelease(v19);
  if (!theArray)
  {
    v217 = atomic_load(HGLogger::_enabled);
    if ((v217 & 1) != 0)
      HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"HGColorConform finished processing ColorSync fragment list: FAILURE (ColorSyncTransformCopyProperty).\n", v26, v27);
    goto LABEL_288;
  }
  Count = CFArrayGetCount(theArray);
  if (!Count)
  {
    CFRelease(theArray);
    v220 = atomic_load(HGLogger::_enabled);
    if ((v220 & 1) != 0)
      HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"HGColorConform finished processing ColorSync fragment list: FAILURE (0 fragments).\n", v218, v219);
LABEL_288:
    v8 = 0;
    return v8 & 1;
  }
  v30 = atomic_load(HGLogger::_enabled);
  if ((v30 & 1) != 0)
    HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\tRetrieved %i fragments\n", v28, v29, Count);
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  v249 = (void **)v31;
  if (Count < 1)
  {
    v232 = 0;
LABEL_291:
    v33 = 0;
    goto LABEL_292;
  }
  v32 = 0;
  v33 = 0;
  v232 = 1;
  v233 = -2;
  while (1)
  {
    v237 = v32;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v32);
    value = 0;
    if (!CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C95500], (const void **)&value))
      break;
    v37 = atomic_load(HGLogger::_enabled);
    if ((v37 & 1) != 0)
      HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\tfragment %i, kCMMConversionMatrix\n", v35, v36, v237);
    if (v33)
      goto LABEL_292;
    v38 = (const __CFArray *)value;
    v39 = (const __CFArray *)CFArrayGetValueAtIndex((CFArrayRef)value, 0);
    v40 = (const __CFArray *)CFArrayGetValueAtIndex(v38, 1);
    v41 = (const __CFArray *)CFArrayGetValueAtIndex(v38, 2);
    v42 = (const __CFNumber *)CFArrayGetValueAtIndex(v39, 0);
    v43 = (const __CFNumber *)CFArrayGetValueAtIndex(v39, 1);
    v44 = (const __CFNumber *)CFArrayGetValueAtIndex(v39, 2);
    v45 = (const __CFNumber *)CFArrayGetValueAtIndex(v39, 3);
    v46 = (const __CFNumber *)CFArrayGetValueAtIndex(v40, 0);
    v47 = (const __CFNumber *)CFArrayGetValueAtIndex(v40, 1);
    v48 = (const __CFNumber *)CFArrayGetValueAtIndex(v40, 2);
    v49 = (const __CFNumber *)CFArrayGetValueAtIndex(v40, 3);
    v50 = (const __CFNumber *)CFArrayGetValueAtIndex(v41, 0);
    number = (const __CFNumber *)CFArrayGetValueAtIndex(v41, 1);
    v230 = (const __CFNumber *)CFArrayGetValueAtIndex(v41, 2);
    v51 = (const __CFNumber *)CFArrayGetValueAtIndex(v41, 3);
    *(_DWORD *)valuePtr.digest = 0;
    *(_DWORD *)MD5.digest = 0;
    LODWORD(v243) = 0;
    LODWORD(theData) = 0;
    LODWORD(v241) = 0;
    v246 = 0;
    v247 = 0;
    v245 = 0;
    v244 = 0.0;
    v52 = operator new();
    *(_QWORD *)(v52 + 224) = 0;
    *(_QWORD *)(v52 + 232) = 0;
    *(_QWORD *)(v52 + 240) = 0;
    *(_OWORD *)(v52 + 16) = 0u;
    *(_OWORD *)(v52 + 32) = 0u;
    *(_OWORD *)(v52 + 48) = 0u;
    *(_OWORD *)(v52 + 80) = 0u;
    *(_OWORD *)(v52 + 96) = 0u;
    *(_OWORD *)(v52 + 112) = 0u;
    *(_OWORD *)(v52 + 128) = 0u;
    *(_OWORD *)(v52 + 144) = 0u;
    *(_OWORD *)(v52 + 160) = 0u;
    *(_OWORD *)(v52 + 176) = 0u;
    *(_OWORD *)(v52 + 192) = 0u;
    *(_OWORD *)(v52 + 201) = 0u;
    v250 = v52;
    *(_DWORD *)v52 = 1;
    if (!CFNumberGetValue(v42, kCFNumberFloat32Type, &valuePtr)
      || !CFNumberGetValue(v43, kCFNumberFloat32Type, &MD5)
      || !CFNumberGetValue(v44, kCFNumberFloat32Type, &v243)
      || !CFNumberGetValue(v45, kCFNumberFloat32Type, &theData)
      || !CFNumberGetValue(v46, kCFNumberFloat32Type, &v241)
      || !CFNumberGetValue(v47, kCFNumberFloat32Type, (char *)&v247 + 4)
      || !CFNumberGetValue(v48, kCFNumberFloat32Type, &v247)
      || !CFNumberGetValue(v49, kCFNumberFloat32Type, (char *)&v246 + 4)
      || !CFNumberGetValue(v50, kCFNumberFloat32Type, &v246)
      || !CFNumberGetValue(number, kCFNumberFloat32Type, (char *)&v245 + 4)
      || !CFNumberGetValue(v230, kCFNumberFloat32Type, &v245)
      || !CFNumberGetValue(v51, kCFNumberFloat32Type, &v244))
    {
      goto LABEL_291;
    }
    *(_QWORD *)&v55 = __PAIR64__(*(unsigned int *)MD5.digest, *(unsigned int *)valuePtr.digest);
    *((_QWORD *)&v55 + 1) = __PAIR64__(theData, v243);
    v56 = (_OWORD *)v250;
    *(_QWORD *)&v57 = __PAIR64__(HIDWORD(v247), v241);
    *((_QWORD *)&v57 + 1) = __PAIR64__(HIDWORD(v246), v247);
    *(_QWORD *)&v58 = __PAIR64__(HIDWORD(v245), v246);
    DWORD2(v58) = v245;
    *(_OWORD *)(v250 + 16) = v55;
    v56[2] = v57;
    *((float *)&v58 + 3) = v244;
    v56[3] = v58;
    v56[4] = xmmword_1B304EFF0;
    LOBYTE(v56) = atomic_load(HGLogger::_enabled);
    if ((v56 & 1) != 0)
      HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tmatrix row 0: %f, %f, %f, %f\n", v53, v54, *(float *)valuePtr.digest, *(float *)MD5.digest, *(float *)&v243, *(float *)&theData);
    v59 = atomic_load(HGLogger::_enabled);
    if ((v59 & 1) != 0)
      HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tmatrix row 1: %f, %f, %f, %f\n", v53, v54, *(float *)&v241, *((float *)&v247 + 1), *(float *)&v247, *((float *)&v246 + 1));
    v60 = atomic_load(HGLogger::_enabled);
    if ((v60 & 1) != 0)
      HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tmatrix row 2: %f, %f, %f, %f\n", v53, v54, *(float *)&v246, *((float *)&v245 + 1), *(float *)&v245, v244);
    std::vector<HGColorConformNodeListItem *>::push_back[abi:ne180100](v249, &v250);
    v33 = 0;
    v250 = 0;
    v61 = v237;
LABEL_213:
    v32 = v61 + 1;
    v232 = Count > v32;
    if (v32 == Count)
      goto LABEL_292;
  }
  if (!CFDictionaryContainsKey(ValueAtIndex, (const void *)*MEMORY[0x1E0C95510])
    && !CFDictionaryContainsKey(ValueAtIndex, (const void *)*MEMORY[0x1E0C95518])
    && !CFDictionaryContainsKey(ValueAtIndex, (const void *)*MEMORY[0x1E0C95520])
    && !CFDictionaryContainsKey(ValueAtIndex, (const void *)*MEMORY[0x1E0C95528])
    && !CFDictionaryContainsKey(ValueAtIndex, (const void *)*MEMORY[0x1E0C95530])
    && !CFDictionaryContainsKey(ValueAtIndex, (const void *)*MEMORY[0x1E0C954D8]))
  {
    if (CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C954E0], (const void **)&value))
    {
      v167 = atomic_load(HGLogger::_enabled);
      if ((v167 & 1) != 0)
        HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\tfragment %i, kCMMConversion3DLut\n", v165, v166, v237);
      if (v33 || !v236)
        goto LABEL_292;
      v168 = (const __CFData *)value;
      theData = 0;
      v243 = 0;
      v241 = 0;
      v247 = 0;
      HIDWORD(v246) = 0;
      if (!CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C954F8], (const void **)&theData)
        || !CFNumberGetValue(theData, kCFNumberSInt32Type, &v247)
        || !CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C95508], (const void **)&v241)
        || !CFNumberGetValue(v241, kCFNumberSInt32Type, (char *)&v246 + 4)
        || (_DWORD)v247 != 3)
      {
        goto LABEL_291;
      }
      if (HIDWORD(v246) == 3)
      {
        v169 = 19;
      }
      else
      {
        if (HIDWORD(v246) != 4)
          goto LABEL_291;
        v169 = 25;
      }
      if (!CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C954F0], (const void **)&v243))
        goto LABEL_291;
      if (!CFNumberGetValue(v243, kCFNumberSInt32Type, (char *)&v247 + 4))
        goto LABEL_291;
      Length = CFDataGetLength(v168);
      if (Length != 2 * (HIDWORD(v247) * HIDWORD(v247) * HIDWORD(v247) * HIDWORD(v246)))
        goto LABEL_291;
      v171 = operator new();
      *(_QWORD *)(v171 + 224) = 0;
      *(_QWORD *)(v171 + 232) = 0;
      *(_QWORD *)(v171 + 240) = 0;
      *(_OWORD *)(v171 + 16) = 0u;
      *(_OWORD *)(v171 + 32) = 0u;
      *(_OWORD *)(v171 + 48) = 0u;
      *(_OWORD *)(v171 + 201) = 0u;
      *(_OWORD *)(v171 + 80) = 0u;
      *(_OWORD *)(v171 + 96) = 0u;
      *(_OWORD *)(v171 + 112) = 0u;
      *(_OWORD *)(v171 + 128) = 0u;
      *(_OWORD *)(v171 + 144) = 0u;
      *(_OWORD *)(v171 + 160) = 0u;
      *(_OWORD *)(v171 + 176) = 0u;
      *(_OWORD *)(v171 + 192) = 0u;
      v250 = v171;
      *(_DWORD *)v171 = 8;
      v172 = HIDWORD(v247);
      v173 = 2 * HIDWORD(v247) * HIDWORD(v246);
      v174 = v173 * HIDWORD(v247);
      *(_DWORD *)(v171 + 192) = v173;
      *(_DWORD *)(v171 + 196) = v174;
      *(_DWORD *)(v171 + 200) = v172;
      *(_DWORD *)(v171 + 204) = v169;
      v175 = (HGObject *)HGObject::operator new(0x28uLL);
      HGColorConformLUTData::HGColorConformLUTData(v175, Length, v169);
      v176 = v250;
      v177 = *(HGObject **)(v250 + 208);
      if (v177 == v175)
      {
        if (v175)
          (*(void (**)(HGObject *))(*(_QWORD *)v175 + 24))(v175);
      }
      else
      {
        if (v177)
          (*(void (**)(HGObject *))(*(_QWORD *)v177 + 24))(v177);
        *(_QWORD *)(v176 + 208) = v175;
      }
      v178 = *(_QWORD *)(v250 + 208);
      BytePtr = CFDataGetBytePtr(v168);
      if (Length <= *(_QWORD *)(v178 + 16))
        memcpy(*(void **)(v178 + 24), BytePtr, Length);
      v180 = HIDWORD(v247);
      if (HIDWORD(v247))
      {
        v181 = HIDWORD(v246);
        v182 = (HIDWORD(v246) * HIDWORD(v247));
        if ((_DWORD)v182)
        {
          v183 = *(_QWORD *)(*(_QWORD *)(v250 + 208) + 24);
          if (HIDWORD(v246) <= v182)
            v184 = (HIDWORD(v246) * HIDWORD(v247));
          else
            v184 = HIDWORD(v246);
          v185 = (v184 - 1) / (unint64_t)HIDWORD(v246) + 1;
          if (v185 > 1)
          {
            if (HIDWORD(v246) == 1)
            {
              v191 = v185 & 0xFFFFFFFFFFFFFFFELL;
              if (v185 == (v185 & 0xFFFFFFFFFFFFFFFELL))
              {
                v192 = 0;
                do
                {
                  v193 = 0;
                  v194 = (_DWORD *)(v183 + 4);
                  do
                  {
                    v195 = v194;
                    v196 = v185 & 0xFFFFFFFFFFFFFFFELL;
                    do
                    {
                      v197 = *(v195 - 1);
                      *(v195 - 1) = *v195;
                      *v195++ = v197;
                      v196 -= 2;
                    }
                    while (v196);
                    v183 += 2 * v182;
                    ++v193;
                    v194 = (_DWORD *)((char *)v194 + 2 * v182);
                  }
                  while (v193 != v180);
                  ++v192;
                }
                while (v192 != v180);
              }
              else
              {
                v203 = 0;
                do
                {
                  v204 = 0;
                  v205 = (_DWORD *)(v183 + 4);
                  do
                  {
                    v206 = v205;
                    v207 = v191;
                    do
                    {
                      v208 = *(v206 - 1);
                      *(v206 - 1) = *v206;
                      *v206++ = v208;
                      v207 -= 2;
                    }
                    while (v207);
                    v209 = v191 * v181;
                    do
                    {
                      v210 = (__int16 *)(v183 + 2 * v209);
                      v211 = *v210;
                      *v210 = v210[2];
                      v210[2] = v211;
                      v209 += v181;
                    }
                    while (v209 < v182);
                    v183 += 2 * v182;
                    ++v204;
                    v205 = (_DWORD *)((char *)v205 + 2 * v182);
                  }
                  while (v204 != v180);
                  ++v203;
                }
                while (v203 != v180);
              }
            }
            else
            {
              v198 = 0;
              do
              {
                v199 = 0;
                do
                {
                  for (i = 0; i < v182; i += v181)
                  {
                    v201 = (__int16 *)(v183 + 2 * i);
                    v202 = *v201;
                    *v201 = v201[2];
                    v201[2] = v202;
                  }
                  v183 += 2 * v182;
                  ++v199;
                }
                while (v199 != v180);
                ++v198;
              }
              while (v198 != v180);
            }
          }
          else
          {
            v186 = 0;
            do
            {
              v187 = 0;
              do
              {
                for (j = 0; j < v182; j += v181)
                {
                  v189 = (__int16 *)(v183 + 2 * j);
                  v190 = *v189;
                  *v189 = v189[2];
                  v189[2] = v190;
                }
                v183 += 2 * v182;
                ++v187;
              }
              while (v187 != v180);
              ++v186;
            }
            while (v186 != v180);
          }
        }
      }
      valuePtr = (ColorSyncMD5)0;
      valuePtr = ColorSyncProfileGetMD5(this);
      MD5 = (ColorSyncMD5)0;
      MD5 = ColorSyncProfileGetMD5(a2);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[1]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[2]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[3]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[4]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[5]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[6]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[7]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[8]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[9]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[10]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[11]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[12]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[13]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[14]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&valuePtr.digest[15]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[1]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[2]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[3]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[4]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[5]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[6]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[7]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[8]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[9]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[10]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[11]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[12]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[13]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[14]);
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&MD5.digest[15]);
      LOBYTE(v246) = v237;
      std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&v246);
      std::vector<HGColorConformNodeListItem *>::push_back[abi:ne180100](v249, &v250);
      v250 = 0;
      v214 = atomic_load(HGLogger::_enabled);
      if ((v214 & 1) != 0)
        HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tnumChannelsIn = %i, numChannelsOut = %i", v212, v213, v247, HIDWORD(v246));
      v215 = atomic_load(HGLogger::_enabled);
      if ((v215 & 1) != 0)
        HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tnumGridPoints = %i\n", v212, v213, HIDWORD(v247));
      v33 = 0;
    }
    goto LABEL_208;
  }
  if (CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C95510], (const void **)&value))
  {
    v64 = 0;
  }
  else if (CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C95518], (const void **)&value))
  {
    v64 = 1;
  }
  else if (CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C95520], (const void **)&value))
  {
    v64 = 2;
  }
  else if (CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C95528], (const void **)&value))
  {
    v64 = 3;
  }
  else if (CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C95530], (const void **)&value))
  {
    v64 = 4;
  }
  else
  {
    v64 = 0xFFFFFFFFLL;
  }
  v65 = atomic_load(HGLogger::_enabled);
  if ((v65 & 1) != 0)
    HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\tfragment %i, kColorSyncConversionParamCurve%i\n", v62, v63, v237, v64);
  if (v33)
  {
    if (v233 != (_DWORD)v64)
      goto LABEL_292;
  }
  else
  {
    v66 = operator new();
    *(_QWORD *)(v66 + 224) = 0;
    *(_QWORD *)(v66 + 232) = 0;
    *(_QWORD *)(v66 + 240) = 0;
    *(_DWORD *)v66 = 0;
    *(_OWORD *)(v66 + 16) = 0u;
    *(_OWORD *)(v66 + 32) = 0u;
    *(_OWORD *)(v66 + 48) = 0u;
    *(_OWORD *)(v66 + 80) = 0u;
    *(_OWORD *)(v66 + 96) = 0u;
    *(_OWORD *)(v66 + 112) = 0u;
    *(_OWORD *)(v66 + 128) = 0u;
    *(_OWORD *)(v66 + 144) = 0u;
    *(_OWORD *)(v66 + 160) = 0u;
    *(_OWORD *)(v66 + 176) = 0u;
    *(_OWORD *)(v66 + 192) = 0u;
    *(_OWORD *)(v66 + 201) = 0u;
    v233 = v64;
    v250 = v66;
  }
  v243 = 0;
  if (!CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C954E8], (const void **)&v243))
    goto LABEL_292;
  HIDWORD(v247) = 0;
  if (!CFNumberGetValue(v243, kCFNumberSInt32Type, (char *)&v247 + 4))
    goto LABEL_292;
  switch(v33)
  {
    case 0:
      if (HIDWORD(v247) < 3)
      {
        v33 = HIDWORD(v247) + 1;
        if ((v233 & 0x80000000) == 0)
          goto LABEL_88;
        goto LABEL_117;
      }
      goto LABEL_292;
    case 1:
      if (HIDWORD(v247) == 1)
        goto LABEL_116;
      if (HIDWORD(v247) == 2)
        goto LABEL_81;
      goto LABEL_292;
    case 2:
      if (!HIDWORD(v247))
      {
LABEL_116:
        v33 = 4;
        if ((v233 & 0x80000000) == 0)
          goto LABEL_88;
        goto LABEL_117;
      }
      if (HIDWORD(v247) == 2)
        goto LABEL_77;
      goto LABEL_292;
    case 3:
      if (!HIDWORD(v247))
      {
LABEL_81:
        v33 = 5;
        if ((v233 & 0x80000000) == 0)
          goto LABEL_88;
        goto LABEL_117;
      }
      if (HIDWORD(v247) == 1)
      {
LABEL_77:
        v33 = 6;
        if ((v233 & 0x80000000) == 0)
          goto LABEL_88;
        goto LABEL_117;
      }
      goto LABEL_292;
    case 4:
      if (HIDWORD(v247) == 2)
        goto LABEL_86;
      goto LABEL_292;
    case 5:
      if (HIDWORD(v247) == 1)
        goto LABEL_86;
      goto LABEL_292;
    case 6:
      if (!HIDWORD(v247))
      {
LABEL_86:
        v33 = 7;
        goto LABEL_87;
      }
      goto LABEL_292;
    default:
LABEL_87:
      if ((v233 & 0x80000000) == 0)
      {
LABEL_88:
        v69 = (const __CFArray *)value;
        v70 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)value, 0);
        *(_DWORD *)valuePtr.digest = 0;
        if (!CFNumberGetValue(v70, kCFNumberFloat32Type, &valuePtr))
          goto LABEL_292;
        *(_DWORD *)(v250 + 4 * SHIDWORD(v247) + 80) = *(_DWORD *)valuePtr.digest;
        v73 = atomic_load(HGLogger::_enabled);
        if ((v73 & 1) != 0)
          HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tgamma(%i) = %f\n", v71, v72, HIDWORD(v247), *(float *)valuePtr.digest);
        if (v233)
        {
          v74 = (const __CFNumber *)CFArrayGetValueAtIndex(v69, 1);
          v75 = (const __CFNumber *)CFArrayGetValueAtIndex(v69, 2);
          *(_DWORD *)MD5.digest = 0;
          LODWORD(theData) = 0;
          if (!CFNumberGetValue(v74, kCFNumberFloat32Type, &MD5)
            || !CFNumberGetValue(v75, kCFNumberFloat32Type, &theData))
          {
            goto LABEL_292;
          }
          *(_DWORD *)(v250 + 4 * SHIDWORD(v247) + 96) = *(_DWORD *)MD5.digest;
          *(_DWORD *)(v250 + 4 * SHIDWORD(v247) + 112) = (_DWORD)theData;
          v78 = atomic_load(HGLogger::_enabled);
          if ((v78 & 1) != 0)
            HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tA(%i) = %f\n", v76, v77, HIDWORD(v247), *(float *)MD5.digest);
          v79 = atomic_load(HGLogger::_enabled);
          if ((v79 & 1) != 0)
            HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tB(%i) = %f\n", v76, v77, HIDWORD(v247), *(float *)&theData);
          if (v233 >= 2)
          {
            v80 = (const __CFNumber *)CFArrayGetValueAtIndex(v69, 3);
            *(_DWORD *)MD5.digest = 0;
            if (!CFNumberGetValue(v80, kCFNumberFloat32Type, &MD5))
              goto LABEL_292;
            *(_DWORD *)(v250 + 4 * SHIDWORD(v247) + 128) = *(_DWORD *)MD5.digest;
            v83 = atomic_load(HGLogger::_enabled);
            if ((v83 & 1) != 0)
              HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tC(%i) = %f\n", v81, v82, HIDWORD(v247), *(float *)MD5.digest);
            if (v233 >= 3)
            {
              v84 = (const __CFNumber *)CFArrayGetValueAtIndex(v69, 4);
              *(_DWORD *)MD5.digest = 0;
              if (!CFNumberGetValue(v84, kCFNumberFloat32Type, &MD5))
                goto LABEL_292;
              *(_DWORD *)(v250 + 4 * SHIDWORD(v247) + 144) = *(_DWORD *)MD5.digest;
              v87 = atomic_load(HGLogger::_enabled);
              if ((v87 & 1) != 0)
                HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tD(%i) = %f\n", v85, v86, HIDWORD(v247), *(float *)MD5.digest);
              if (v233 >= 4)
              {
                v88 = (const __CFNumber *)CFArrayGetValueAtIndex(v69, 5);
                v89 = (const __CFNumber *)CFArrayGetValueAtIndex(v69, 6);
                *(_DWORD *)MD5.digest = 0;
                LODWORD(theData) = 0;
                if (!CFNumberGetValue(v88, kCFNumberFloat32Type, &MD5)
                  || !CFNumberGetValue(v89, kCFNumberFloat32Type, &theData))
                {
                  goto LABEL_292;
                }
                *(_DWORD *)(v250 + 4 * SHIDWORD(v247) + 160) = *(_DWORD *)MD5.digest;
                *(_DWORD *)(v250 + 4 * SHIDWORD(v247) + 176) = (_DWORD)theData;
                v92 = atomic_load(HGLogger::_enabled);
                if ((v92 & 1) != 0)
                  HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tE(%i) = %f\n", v90, v91, HIDWORD(v247), *(float *)MD5.digest);
                v93 = atomic_load(HGLogger::_enabled);
                if ((v93 & 1) != 0)
                  HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tF(%i) = %f\n", v90, v91, HIDWORD(v247), *(float *)&theData);
              }
            }
          }
        }
        if (v33 == 7)
        {
          switch(v233)
          {
            case 0u:
              v94 = (int *)v250;
              v95 = 2;
              break;
            case 1u:
              v94 = (int *)v250;
              v95 = 3;
              break;
            case 2u:
              v94 = (int *)v250;
              v95 = 4;
              break;
            case 3u:
              v94 = (int *)v250;
              v95 = 5;
              break;
            default:
              v94 = (int *)v250;
              v95 = 6;
              break;
          }
          *v94 = v95;
          std::vector<HGColorConformNodeListItem *>::push_back[abi:ne180100](v249, &v250);
          v250 = 0;
        }
LABEL_208:
        v61 = v237;
        v163 = v33 == 7;
        if (v33 == 7)
          v33 = 0;
        v164 = v233;
        if (v163)
          v164 = -2;
        v233 = v164;
        goto LABEL_213;
      }
LABEL_117:
      v96 = atomic_load(HGLogger::_enabled);
      if ((v96 & 1) != 0)
        HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\tfragment %i, kColorSyncConversion1DLut\n", v67, v68, v237);
      theData = 0;
      if (CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C954D8], (const void **)&theData))
      {
        v241 = 0;
        if (CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0C954F0], (const void **)&v241))
        {
          LODWORD(v247) = 0;
          if (CFNumberGetValue(v241, kCFNumberSInt32Type, &v247))
          {
            v97 = CFDataGetLength(theData);
            v98 = v247;
            if (v97 == 4 * v247)
            {
              v99 = v250;
              *(_DWORD *)(v250 + 200) = v247;
              *(_DWORD *)(v99 + 204) = 28;
              *(_DWORD *)(v99 + 192) = v97;
              *(_DWORD *)(v99 + 196) = 0;
              if (!*(_QWORD *)(v99 + 208))
              {
                v100 = (HGObject *)HGObject::operator new(0x28uLL);
                HGColorConformLUTData::HGColorConformLUTData(v100, v98 << 34 >> 30, 28);
                v101 = v250;
                v102 = *(HGObject **)(v250 + 208);
                if (v102 == v100)
                {
                  if (v100)
                    (*(void (**)(HGObject *))(*(_QWORD *)v100 + 24))(v100);
                }
                else
                {
                  if (v102)
                    (*(void (**)(HGObject *))(*(_QWORD *)v102 + 24))(v102);
                  *(_QWORD *)(v101 + 208) = v100;
                }
              }
              v103 = *(_QWORD *)(v250 + 208);
              v104 = CFDataGetBytePtr(theData);
              v105 = SHIDWORD(v247);
              v106 = *(_QWORD *)(v103 + 24);
              v107 = HGFormatUtils::bytesPerPixel(28);
              v110 = 4 * v105;
              v111 = *(_QWORD *)(v103 + 16);
              if (4 * v105 < v111)
              {
                v112 = (_DWORD *)(v106 + v110);
                do
                {
                  v113 = *(_DWORD *)v104;
                  v104 += 4;
                  *v112 = v113;
                  v112 += 4;
                  v110 += v107;
                }
                while (v110 < v111);
              }
              if (HIDWORD(v247) == 3)
                *(_BYTE *)(v250 + 216) = 1;
              if (v33 != 7)
                goto LABEL_206;
              valuePtr = ColorSyncProfileGetMD5(this);
              v114 = 0;
              MD5 = ColorSyncProfileGetMD5(a2);
              v115 = v237;
              while (2)
              {
                v117 = (_QWORD *)v250;
                v119 = *(_BYTE **)(v250 + 232);
                v118 = *(_QWORD *)(v250 + 240);
                if ((unint64_t)v119 < v118)
                {
                  *v119 = valuePtr.digest[v114];
                  v116 = (uint64_t)(v119 + 1);
                }
                else
                {
                  v120 = *(_BYTE **)(v250 + 224);
                  v121 = v119 - v120;
                  v122 = v119 - v120 + 1;
                  if (v122 < 0)
                    std::vector<double>::__throw_length_error[abi:ne180100]();
                  v123 = v118 - (_QWORD)v120;
                  if (2 * v123 > v122)
                    v122 = 2 * v123;
                  if (v123 >= 0x3FFFFFFFFFFFFFFFLL)
                    v124 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v124 = v122;
                  if (v124)
                    v125 = (char *)operator new(v124);
                  else
                    v125 = 0;
                  v126 = &v125[v121];
                  v125[v121] = valuePtr.digest[v114];
                  v116 = (uint64_t)&v125[v121 + 1];
                  if (v119 != v120)
                  {
                    if (v121 >= 8 && (unint64_t)(v120 - v125) >= 0x20)
                    {
                      if (v121 >= 0x20)
                      {
                        v127 = v121 & 0xFFFFFFFFFFFFFFE0;
                        v128 = &v125[v121 - 16];
                        v129 = (__int128 *)(v119 - 16);
                        v130 = v121 & 0xFFFFFFFFFFFFFFE0;
                        do
                        {
                          v131 = *v129;
                          *((_OWORD *)v128 - 1) = *(v129 - 1);
                          *(_OWORD *)v128 = v131;
                          v128 -= 32;
                          v129 -= 2;
                          v130 -= 32;
                        }
                        while (v130);
                        if (v121 == v127)
                          goto LABEL_170;
                        if ((v121 & 0x18) != 0)
                          goto LABEL_163;
                        v126 -= v127;
                        v119 -= v127;
                      }
                      else
                      {
                        v127 = 0;
LABEL_163:
                        v126 -= v121 & 0xFFFFFFFFFFFFFFF8;
                        v132 = &v125[&v119[-v127] - v120 - 8];
                        v133 = (uint64_t *)&v119[-v127 - 8];
                        v134 = v127 - (v121 & 0xFFFFFFFFFFFFFFF8);
                        do
                        {
                          v135 = *v133--;
                          *(_QWORD *)v132 = v135;
                          v132 -= 8;
                          v134 += 8;
                        }
                        while (v134);
                        v119 -= v121 & 0xFFFFFFFFFFFFFFF8;
                        if (v121 == (v121 & 0xFFFFFFFFFFFFFFF8))
                        {
LABEL_170:
                          v119 = (_BYTE *)v117[28];
                          v126 = v125;
                          goto LABEL_171;
                        }
                      }
                    }
                    v136 = v126 - 1;
                    do
                    {
                      v137 = *--v119;
                      *v136-- = v137;
                    }
                    while (v119 != v120);
                    goto LABEL_170;
                  }
LABEL_171:
                  v117[28] = v126;
                  v117[29] = v116;
                  v117[30] = &v125[v124];
                  v115 = v237;
                  if (v119)
                    operator delete(v119);
                }
                v117[29] = v116;
                if (++v114 != 16)
                  continue;
                break;
              }
              v138 = 0;
              while (2)
              {
                v140 = (_QWORD *)v250;
                v142 = *(_BYTE **)(v250 + 232);
                v141 = *(_QWORD *)(v250 + 240);
                if ((unint64_t)v142 < v141)
                {
                  *v142 = MD5.digest[v138];
                  v139 = (uint64_t)(v142 + 1);
                }
                else
                {
                  v143 = *(_BYTE **)(v250 + 224);
                  v144 = v142 - v143;
                  v145 = v142 - v143 + 1;
                  if (v145 < 0)
                    std::vector<double>::__throw_length_error[abi:ne180100]();
                  v146 = v141 - (_QWORD)v143;
                  if (2 * v146 > v145)
                    v145 = 2 * v146;
                  if (v146 >= 0x3FFFFFFFFFFFFFFFLL)
                    v147 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v147 = v145;
                  if (v147)
                    v148 = (char *)operator new(v147);
                  else
                    v148 = 0;
                  v149 = &v148[v144];
                  v148[v144] = MD5.digest[v138];
                  v139 = (uint64_t)&v148[v144 + 1];
                  if (v142 != v143)
                  {
                    if (v144 >= 8 && (unint64_t)(v143 - v148) >= 0x20)
                    {
                      if (v144 >= 0x20)
                      {
                        v150 = v144 & 0xFFFFFFFFFFFFFFE0;
                        v151 = &v148[v144 - 16];
                        v152 = (__int128 *)(v142 - 16);
                        v153 = v144 & 0xFFFFFFFFFFFFFFE0;
                        do
                        {
                          v154 = *v152;
                          *((_OWORD *)v151 - 1) = *(v152 - 1);
                          *(_OWORD *)v151 = v154;
                          v151 -= 32;
                          v152 -= 2;
                          v153 -= 32;
                        }
                        while (v153);
                        if (v144 == v150)
                          goto LABEL_202;
                        if ((v144 & 0x18) != 0)
                          goto LABEL_195;
                        v149 -= v150;
                        v142 -= v150;
                      }
                      else
                      {
                        v150 = 0;
LABEL_195:
                        v149 -= v144 & 0xFFFFFFFFFFFFFFF8;
                        v155 = &v148[&v142[-v150] - v143 - 8];
                        v156 = (uint64_t *)&v142[-v150 - 8];
                        v157 = v150 - (v144 & 0xFFFFFFFFFFFFFFF8);
                        do
                        {
                          v158 = *v156--;
                          *(_QWORD *)v155 = v158;
                          v155 -= 8;
                          v157 += 8;
                        }
                        while (v157);
                        v142 -= v144 & 0xFFFFFFFFFFFFFFF8;
                        if (v144 == (v144 & 0xFFFFFFFFFFFFFFF8))
                        {
LABEL_202:
                          v142 = (_BYTE *)v140[28];
                          v149 = v148;
                          goto LABEL_203;
                        }
                      }
                    }
                    v159 = v149 - 1;
                    do
                    {
                      v160 = *--v142;
                      *v159-- = v160;
                    }
                    while (v142 != v143);
                    goto LABEL_202;
                  }
LABEL_203:
                  v140[28] = v149;
                  v140[29] = v139;
                  v140[30] = &v148[v147];
                  v115 = v237;
                  if (v142)
                    operator delete(v142);
                }
                v140[29] = v139;
                if (++v138 == 16)
                {
                  BYTE4(v246) = v115;
                  std::vector<unsigned char>::push_back[abi:ne180100]((_QWORD *)(v250 + 224), (char *)&v246 + 4);
                  v161 = v249;
                  *(_DWORD *)v250 = 7;
                  std::vector<HGColorConformNodeListItem *>::push_back[abi:ne180100](v161, &v250);
                  v250 = 0;
LABEL_206:
                  v162 = atomic_load(HGLogger::_enabled);
                  if ((v162 & 1) != 0)
                    HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)"\t\tnumGridPoints = %i\tchannel = %i\n", v108, v109, v247, HIDWORD(v247));
                  goto LABEL_208;
                }
                continue;
              }
            }
          }
        }
      }
LABEL_292:
      CFRelease(theArray);
      v8 = v232 ^ (v232 || v33 == 0);
      if ((v8 & 1) != 0)
      {
        *(_QWORD *)v234 = HGColorConform::AddNodeListToCache(this, a2, (uint64_t)v249);
        v224 = atomic_load(HGLogger::_enabled);
        if ((v224 & 1) != 0)
        {
          v225 = "HGColorConform finished processing ColorSync fragment list: SUCCESS.\n";
          goto LABEL_303;
        }
      }
      else
      {
        v226 = v250;
        if (v250)
        {
          v227 = *(void **)(v250 + 224);
          if (v227)
          {
            *(_QWORD *)(v250 + 232) = v227;
            operator delete(v227);
          }
          v228 = *(_QWORD *)(v226 + 208);
          if (v228)
            (*(void (**)(uint64_t))(*(_QWORD *)v228 + 24))(v228);
          MEMORY[0x1B5E29170](v226, 0x1030C40C41003B7);
        }
        HGColorConform::DeleteNodeList(&v249);
        *(_QWORD *)v234 = 0;
        v229 = atomic_load(HGLogger::_enabled);
        if ((v229 & 1) != 0)
        {
          v225 = "HGColorConform finished processing ColorSync fragment list: FAILURE.\n";
LABEL_303:
          HGLogger::log((HGLogger *)"colorConform", (const char *)1, (HGLogger *)v225, v222, v223);
        }
      }
      return v8 & 1;
  }
}

void sub_1B2ACD7D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t HGColorConform::SetConversion(uint64_t a1, uint64_t a2, char *a3)
{
  int v4;

  if ((a2 & 0xFFFFFFFE) != 0x16 && (a2 - 1) >= 5)
    v4 = a2;
  else
    v4 = 0;
  if (*(_DWORD *)(a1 + 484) != v4)
  {
    HGNode::ClearBits((HGNode *)a1, a2, a3);
    *(_DWORD *)(a1 + 484) = v4;
    HGColorConform::ClearConversionParams((HGColorConform *)a1);
  }
  return 1;
}

uint64_t HGColorConform::SetConversion(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;

  if (*(_DWORD *)(a1 + 484) == 1
    && *(_DWORD *)(a1 + 488) == a2
    && *(_DWORD *)(a1 + 496) == a3
    && *(_DWORD *)(a1 + 504) == a4
    && *(_DWORD *)(a1 + 492) == a5
    && *(_DWORD *)(a1 + 500) == a6
    && *(_DWORD *)(a1 + 508) == a7)
  {
    return 1;
  }
  if ((HGColorGamma::TestConversion(a2, a3, a4, a5, a6, a7) & 1) != 0
    || HGColorGamma::TestConversion(a2, a3, a4, a5, 8, 0)
    && HGColorGamma::TestConversion(a5, 8, 0, a5, a6, a7))
  {
    HGNode::ClearBits((HGNode *)a1, v15, v16);
    v14 = 1;
    *(_DWORD *)(a1 + 484) = 1;
    HGColorConform::ClearConversionParams((HGColorConform *)a1);
    *(_DWORD *)(a1 + 488) = a2;
    *(_DWORD *)(a1 + 496) = a3;
    *(_DWORD *)(a1 + 504) = a4;
    *(_DWORD *)(a1 + 492) = a5;
    *(_DWORD *)(a1 + 500) = a6;
    *(_DWORD *)(a1 + 508) = a7;
  }
  else
  {
    if (*(_DWORD *)(a1 + 484))
    {
      HGNode::ClearBits((HGNode *)a1, v15, v16);
      *(_DWORD *)(a1 + 484) = 0;
      HGColorConform::ClearConversionParams((HGColorConform *)a1);
    }
    return 0;
  }
  return v14;
}

uint64_t HGColorConform::SetConversion(HGNode *this, uint64_t a2, char *a3, int a4, int a5)
{
  int v6;
  int v7;
  int v9;

  v6 = (int)a3;
  v7 = a2;
  if (a5)
    v9 = 3;
  else
    v9 = 0;
  if (*((_DWORD *)this + 121) != 3
    || *((_DWORD *)this + 128) != (_DWORD)a2
    || *((_DWORD *)this + 130) != (_DWORD)a3
    || *((_DWORD *)this + 131) != a4
    || *((_DWORD *)this + 132) != v9)
  {
    HGNode::ClearBits(this, a2, a3);
    *((_DWORD *)this + 121) = 3;
    HGColorConform::ClearConversionParams((HGColorConform *)this);
    *((_DWORD *)this + 128) = v7;
    *((_DWORD *)this + 130) = v6;
    *((_DWORD *)this + 131) = a4;
    *((_DWORD *)this + 132) = v9;
  }
  return 1;
}

HGNode *HGColorConform::SetAntiSymmetricToneCurves(HGNode *this, uint64_t a2, char *a3)
{
  char v3;
  HGNode *v4;

  if (*((unsigned __int8 *)this + 474) != (_DWORD)a2)
  {
    v3 = a2;
    v4 = this;
    this = HGNode::ClearBits(this, a2, a3);
    *((_BYTE *)v4 + 474) = v3;
  }
  return this;
}

HGColorGamma *HGColorConform::GetOutput(HGColorConform *this, HGRenderer *a2)
{
  int v4;
  uint64_t v5;
  HGNode *Input;
  HGColorGamma *v8;
  HGNode *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;

  v4 = *((_DWORD *)this + 121);
  if (v4 == -1)
  {
    if (HGColorConform::CreateColorConformHeliumGraph(this, a2))
      goto LABEL_3;
  }
  else if ((HGColorConform::CreateColorConformHeliumGraph(this, (uint64_t)a2, v4) & 1) != 0)
  {
LABEL_3:
    v5 = *((_QWORD *)this + 51);
    Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
    (*(void (**)(uint64_t, _QWORD, HGNode *))(*(_QWORD *)v5 + 120))(v5, 0, Input);
    return (HGColorGamma *)*((_QWORD *)this + 52);
  }
  v8 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
  HGColorGamma::HGColorGamma(v8);
  HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v8, *((_BYTE *)this + 474));
  v9 = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  (*(void (**)(HGColorGamma *, _QWORD, HGNode *))(*(_QWORD *)v8 + 120))(v8, 0, v9);
  HGColorGamma::SetConversionPreset((uint64_t)v8, 0, v10);
  HGColorGamma::SetFallbackMode((HGNode *)v8, *((unsigned __int8 *)this + 432), v11);
  HGColorGamma::SetDitherMode((HGNode *)v8, *((unsigned __int8 *)this + 433), v12);
  HGColorGamma::SetInputPixelFormat((uint64_t)v8, *((unsigned int *)this + 111), v13);
  HGColorGamma::SetOutputPixelFormat((uint64_t)v8, *((unsigned int *)this + 110), (char *)*((unsigned int *)this + 112));
  HGColorGamma::SetInOut422FilterMode((uint64_t)v8, *((unsigned int *)this + 113), v14);
  HGColorGamma::SetInOut422FilterRect((HGRect *)v8, *(HGRect *)((char *)this + 456));
  HGColorGamma::SetFixedPointPrecisionMode((HGNode *)v8, *((unsigned __int8 *)this + 434), v15);
  HGColorGamma::SetPremultiplyState(v8, *((_BYTE *)this + 472), *((_BYTE *)this + 473));
  HGColorGamma::Set1DLutScaleAndOffset((HGNode *)v8, *((float *)this + 119), *((float *)this + 120), v16, v17);
  *((_QWORD *)this + 51) = v8;
  *((_QWORD *)this + 52) = v8;
  return v8;
}

void sub_1B2ACDC40(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t HGColorConform::CreateColorConformHeliumGraph(HGColorConform *this, uint64_t a2, int a3)
{
  uint64_t v6;
  HGColorGamma *ColorGammaNode;
  uint64_t v8;
  char *v9;
  char *v10;
  HGColorGamma *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  HGColorGamma *v15;
  int v16;
  HgcColorGamma_bias_clamp *v17;
  HGColorGamma *v18;
  int v19;
  HGColorGamma *v20;
  char *v21;
  uint64_t v22;
  int v23;
  HgcWhiteBalanceRAW *v24;
  HgcWhiteBalanceRAW *v25;
  float v26;
  float v27;
  float v28;
  char *v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  HgcColorGamma_bias_clamp *v34;
  HgcASC_CDL *v35;
  HGNode *v36;
  const UInt8 *BytePtr;
  HGBitmap *v38;
  HGBitmap *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  HGColorMatrix *v47;
  uint64_t v48;
  char *v49;
  HGNode *v50;
  HgcColorGamma_bias_clamp *v51;
  char *v52;
  unsigned int v53;
  unint64_t v54;
  float32x4_t *v55;
  float32x4_t *v56;
  const float *v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v63;
  int v64;
  HGColorGamma *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  char *v69;
  float *v70;
  float v71;
  float v72;
  float v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  char *v78;
  int v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v91;
  char *v92;
  unsigned int v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  float32x4_t *v97;
  float32x4_t *v98;
  const float *v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  const void *v113;
  const void *v114;
  _BYTE *v115;
  char *v116;
  HGColorGamma *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  unsigned int v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 52);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    *((_QWORD *)this + 52) = 0;
  }
  switch(a3)
  {
    case 1:
      ColorGammaNode = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
      HGColorGamma::HGColorGamma(ColorGammaNode);
      HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)ColorGammaNode, *((_BYTE *)this + 474));
      *((_QWORD *)this + 51) = ColorGammaNode;
      HGColorGamma::Set1DLutScaleAndOffset((HGNode *)ColorGammaNode, *((float *)this + 119), *((float *)this + 120), v8, v9);
      if (!HGColorGamma::SetConversion((uint64_t)ColorGammaNode, *((unsigned int *)this + 122), (char *)*((unsigned int *)this + 124), *((_DWORD *)this + 126), *((_DWORD *)this + 123), *((_DWORD *)this + 125), *((_DWORD *)this + 127)))
      {
        v11 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
        HGColorGamma::HGColorGamma(v11);
        HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v11, *((_BYTE *)this + 474));
        (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *))(*(_QWORD *)v11 + 120))(v11, 0, ColorGammaNode);
        (*(void (**)(HGColorGamma *))(*(_QWORD *)ColorGammaNode + 24))(ColorGammaNode);
        HGColorGamma::SetConversion((uint64_t)ColorGammaNode, *((unsigned int *)this + 122), (char *)*((unsigned int *)this + 124), *((_DWORD *)this + 126), *((_DWORD *)this + 123), 8, 0);
        HGColorGamma::Set1DLutScaleAndOffset((HGNode *)v11, *((float *)this + 119), *((float *)this + 120), v41, v42);
        HGColorGamma::SetConversion((uint64_t)v11, *((unsigned int *)this + 123), (char *)8, 0, *((_DWORD *)this + 123), *((_DWORD *)this + 125), *((_DWORD *)this + 127));
        *((_QWORD *)this + 52) = v11;
        goto LABEL_82;
      }
      v11 = 0;
      *((_QWORD *)this + 52) = ColorGammaNode;
      if (ColorGammaNode)
        goto LABEL_82;
      goto LABEL_83;
    case 2:
      switch(*((_DWORD *)this + 129))
      {
        case 1:
        case 2:
          v11 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
          HGColorGamma::HGColorGamma(v11);
          HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v11, *((_BYTE *)this + 474));
          *((_QWORD *)this + 51) = v11;
          *((_QWORD *)this + 52) = v11;
          v63 = *((unsigned int *)this + 128);
          v64 = *((_DWORD *)this + 132);
          if (*((_DWORD *)this + 129) == 1)
            HGColorGamma::SetConversion((uint64_t)v11, v63, (char *)1, 3u, v64);
          else
            HGColorGamma::SetConversion((uint64_t)v11, v63, (char *)4, 0, v64);
          goto LABEL_83;
        case 3:
          ColorGammaNode = HGColorConform::CreateColorGammaNode(this);
          v11 = HGColorConform::CreateColorGammaNode(this);
          (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *))(*(_QWORD *)v11 + 120))(v11, 0, ColorGammaNode);
          (*(void (**)(HGColorGamma *))(*(_QWORD *)ColorGammaNode + 24))(ColorGammaNode);
          *((_QWORD *)this + 51) = ColorGammaNode;
          *((_QWORD *)this + 52) = v11;
          HGColorGamma::SetConversion((uint64_t)ColorGammaNode, *((unsigned int *)this + 128), 0, 3u, *((_DWORD *)this + 132));
          HGColorGamma::SetConversionPreset((uint64_t)v11, 0, v80);
          HGColorGamma::SetGammaFunction((uint64_t)v11, 0, v81, (__n128)xmmword_1B3524330, (float32x4_t)0, (float32x4_t)0, (float32x4_t)0, (int8x16_t)0, (float32x4_t)0, (float32x4_t)0);
          HGColorGamma::Set1DLutScaleAndOffset((HGNode *)v11, *((float *)this + 119), *((float *)this + 120), v82, v83);
          goto LABEL_82;
        case 4:
        case 5:
          ColorGammaNode = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
          HGColorGamma::HGColorGamma(ColorGammaNode);
          HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)ColorGammaNode, *((_BYTE *)this + 474));
          v65 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
          HGColorGamma::HGColorGamma(v65);
          HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v65, *((_BYTE *)this + 474));
          v11 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
          HGColorGamma::HGColorGamma(v11);
          HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v11, *((_BYTE *)this + 474));
          (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *))(*(_QWORD *)v65 + 120))(v65, 0, ColorGammaNode);
          (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *))(*(_QWORD *)v11 + 120))(v11, 0, v65);
          (*(void (**)(HGColorGamma *))(*(_QWORD *)ColorGammaNode + 24))(ColorGammaNode);
          (*(void (**)(HGColorGamma *))(*(_QWORD *)v65 + 24))(v65);
          *((_QWORD *)this + 51) = ColorGammaNode;
          *((_QWORD *)this + 52) = v11;
          if (*((_DWORD *)this + 129) == 4)
          {
            v66 = 12;
            v67 = 11;
          }
          else
          {
            v66 = 13;
            v67 = 12;
          }
          HGColorGamma::SetConversion((uint64_t)ColorGammaNode, *((unsigned int *)this + 128), (char *)v66, v67, *((_DWORD *)this + 132));
          __asm { FMOV            V0.4S, #1.0 }
          HGColorGamma::SetGammaFunction((uint64_t)v65, 18, v91, _Q0, (float32x4_t)0, (float32x4_t)0, (float32x4_t)0, (int8x16_t)0, (float32x4_t)0, (float32x4_t)0);
          HGColorGamma::SetToneQualityMode((uint64_t)v65, *((unsigned int *)this + 109), v92);
          HGColorGamma::SetPremultiplyState(v65, 0, 0);
          HGColorGamma::SetConversion((uint64_t)v11, *((unsigned int *)this + 132), (char *)1, 0, *((_DWORD *)this + 132), 8, 0);
          goto LABEL_82;
        case 6:
        case 7:
        case 8:
        case 9:
          ColorGammaNode = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
          HGColorGamma::HGColorGamma(ColorGammaNode);
          HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)ColorGammaNode, *((_BYTE *)this + 474));
          v15 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
          HGColorGamma::HGColorGamma(v15);
          HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v15, *((_BYTE *)this + 474));
          v11 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
          HGColorGamma::HGColorGamma(v11);
          HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v11, *((_BYTE *)this + 474));
          v16 = *((_DWORD *)this + 129);
          if (v16 == 9 || v16 == 7)
          {
            v17 = (HgcColorGamma_bias_clamp *)HGObject::operator new(0x1A0uLL);
            HgcColorGamma_bias_clamp::HgcColorGamma_bias_clamp(v17);
            v18 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
            HGColorGamma::HGColorGamma(v18);
            HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v18, *((_BYTE *)this + 474));
            (*(void (**)(HgcColorGamma_bias_clamp *, _QWORD, HGColorGamma *))(*(_QWORD *)v17 + 120))(v17, 0, ColorGammaNode);
            (*(void (**)(HGColorGamma *, _QWORD, HgcColorGamma_bias_clamp *))(*(_QWORD *)v18 + 120))(v18, 0, v17);
            (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *))(*(_QWORD *)v15 + 120))(v15, 0, v18);
            (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *))(*(_QWORD *)v11 + 120))(v11, 0, v15);
            (*(void (**)(HGColorGamma *))(*(_QWORD *)ColorGammaNode + 24))(ColorGammaNode);
            (*(void (**)(HgcColorGamma_bias_clamp *))(*(_QWORD *)v17 + 24))(v17);
          }
          else
          {
            (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *))(*(_QWORD *)v15 + 120))(v15, 0, ColorGammaNode);
            (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *))(*(_QWORD *)v11 + 120))(v11, 0, v15);
            v17 = 0;
            v18 = ColorGammaNode;
          }
          (*(void (**)(HGColorGamma *))(*(_QWORD *)v18 + 24))(v18);
          (*(void (**)(HGColorGamma *))(*(_QWORD *)v15 + 24))(v15);
          *((_QWORD *)this + 51) = ColorGammaNode;
          *((_QWORD *)this + 52) = v11;
          v75 = *((_DWORD *)this + 129);
          if (v75 == 9 || v75 == 7)
          {
            HGColorGamma::SetConversion((uint64_t)ColorGammaNode, 0, (char *)1, *((_DWORD *)this + 128), 0, 1, 0);
            v79 = *((_DWORD *)this + 129);
            if (v79 == 9)
              goto LABEL_68;
          }
          else
          {
            if (v75 == 6)
            {
              v76 = 8;
              v77 = 5;
            }
            else
            {
              v76 = 9;
              v77 = 8;
            }
            HGColorGamma::SetConversion((uint64_t)ColorGammaNode, *((unsigned int *)this + 128), (char *)v76, v77, *((_DWORD *)this + 132));
            v79 = *((_DWORD *)this + 129);
            if (v79 == 9)
              goto LABEL_68;
          }
          if (v79 != 7)
            goto LABEL_72;
LABEL_68:
          (*(void (**)(HgcColorGamma_bias_clamp *, _QWORD, float, float, float, float))(*(_QWORD *)v17 + 96))(v17, 0, 0.062561, 0.062561, 0.062561, 0.0);
          (*(void (**)(HgcColorGamma_bias_clamp *, uint64_t, float, float, float, float))(*(_QWORD *)v17 + 96))(v17, 1, 0.85631, 0.85631, 0.85631, 1.0);
          (*(void (**)(HgcColorGamma_bias_clamp *, uint64_t, float, float, float, float))(*(_QWORD *)v17 + 96))(v17, 2, -3.4028e38, -3.4028e38, -3.4028e38, -3.4028e38);
          (*(void (**)(HgcColorGamma_bias_clamp *, uint64_t, float, float, float, float))(*(_QWORD *)v17 + 96))(v17, 3, 3.4028e38, 3.4028e38, 3.4028e38, 3.4028e38);
          if (*((_DWORD *)this + 129) == 7)
            v93 = 7;
          else
            v93 = 8;
          HGColorGamma::SetConversion((uint64_t)v18, 0, (char *)9, v93, *((_DWORD *)this + 132));
          HGColorGamma::SetToneQualityMode((uint64_t)v18, *((unsigned int *)this + 109), v94);
          HGColorGamma::SetPremultiplyState(v18, 0, 0);
          v79 = *((_DWORD *)this + 129);
LABEL_72:
          if (v79 == 7)
          {
            v95 = 7;
          }
          else if (v79 == 6)
          {
            v95 = 5;
            if (*((_BYTE *)this + 768))
              v95 = 6;
          }
          else
          {
            v95 = 8;
          }
          v96 = v95 << 6;
          v97 = (float32x4_t *)((char *)&HGColorGamma::logGamutRGBToRec2020RGB + v96);
          v98 = (float32x4_t *)((char *)&HGColorGamma::logGamutRGBToRec709RGB + v96);
          if (*((_DWORD *)this + 132) == 3)
            v98 = v97;
          v99 = (const float *)((char *)this + 764);
          v100 = vld1q_dup_f32(v99);
          v100.i32[3] = 1.0;
          v101 = vmulq_f32(v100, v98[1]);
          v127 = vmulq_f32(*v98, v100);
          v128 = v101;
          v102 = vmulq_f32(v100, v98[2]);
          v103 = vmulq_f32(v100, v98[3]);
          v129 = v102;
          v130 = v103;
          HGColorGamma::LoadMatrix2((uint64_t)v18, (uint64_t)&v127, v78);
          __asm { FMOV            V0.4S, #1.0 }
          HGColorGamma::SetGammaFunction((uint64_t)v15, 18, v105, _Q0, (float32x4_t)0, (float32x4_t)0, (float32x4_t)0, (int8x16_t)0, (float32x4_t)0, (float32x4_t)0);
          HGColorGamma::SetToneQualityMode((uint64_t)v15, *((unsigned int *)this + 109), v106);
          HGColorGamma::SetPremultiplyState(v15, 0, 0);
          HGColorGamma::SetConversion((uint64_t)v11, *((unsigned int *)this + 132), (char *)1, 0, *((_DWORD *)this + 132), 8, 0);
          break;
        default:
          v11 = HGColorConform::CreateColorGammaNode(this);
          *((_QWORD *)this + 51) = v11;
          *((_QWORD *)this + 52) = v11;
          HGColorGamma::Set1DLutScaleAndOffset((HGNode *)v11, *((float *)this + 119), *((float *)this + 120), v84, v85);
          goto LABEL_61;
      }
      goto LABEL_82;
    case 3:
      v19 = *((_DWORD *)this + 130);
      if ((v19 & 0xFFFFFFFE) != 8)
      {
        v11 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
        HGColorGamma::HGColorGamma(v11);
        HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v11, *((_BYTE *)this + 474));
        *((_QWORD *)this + 51) = v11;
        *((_QWORD *)this + 52) = v11;
        v40 = (char *)*((unsigned int *)this + 130);
        if ((_DWORD)v40 == -1)
        {
          HGColorGamma::SetConversionPreset((uint64_t)v11, 0, v40);
          HGColorGamma::Set1DLutScaleAndOffset((HGNode *)v11, *((float *)this + 119), *((float *)this + 120), v68, v69);
        }
        else
        {
          HGColorGamma::SetConversion((uint64_t)v11, *((unsigned int *)this + 128), v40, *((_DWORD *)this + 131), *((_DWORD *)this + 132));
          if (*((_DWORD *)this + 130) == 2)
            HGColorGamma::SetARRILogCExposureIndex((HGNode *)v11, *((unsigned int *)this + 190), v10);
        }
        goto LABEL_83;
      }
      v20 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
      ColorGammaNode = v20;
      if (v19 == 8)
      {
        HGColorGamma::HGColorGamma(v20);
        HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)ColorGammaNode, *((_BYTE *)this + 474));
        *((_QWORD *)this + 51) = ColorGammaNode;
        *((_QWORD *)this + 52) = ColorGammaNode;
        v11 = ColorGammaNode;
        ColorGammaNode = 0;
        v21 = (char *)*((unsigned int *)this + 130);
        if ((_DWORD)v21 == 8)
        {
LABEL_16:
          v22 = *((unsigned int *)this + 128);
          goto LABEL_33;
        }
      }
      else
      {
        HGColorGamma::HGColorGamma(v20);
        HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)ColorGammaNode, *((_BYTE *)this + 474));
        v51 = (HgcColorGamma_bias_clamp *)HGObject::operator new(0x1A0uLL);
        HgcColorGamma_bias_clamp::HgcColorGamma_bias_clamp(v51);
        v11 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
        HGColorGamma::HGColorGamma(v11);
        HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v11, *((_BYTE *)this + 474));
        (*(void (**)(HgcColorGamma_bias_clamp *, _QWORD, HGColorGamma *))(*(_QWORD *)v51 + 120))(v51, 0, ColorGammaNode);
        (*(void (**)(HGColorGamma *, _QWORD, HgcColorGamma_bias_clamp *))(*(_QWORD *)v11 + 120))(v11, 0, v51);
        (*(void (**)(HGColorGamma *))(*(_QWORD *)ColorGammaNode + 24))(ColorGammaNode);
        (*(void (**)(HgcColorGamma_bias_clamp *))(*(_QWORD *)v51 + 24))(v51);
        *((_QWORD *)this + 51) = ColorGammaNode;
        *((_QWORD *)this + 52) = v11;
        HGColorGamma::SetConversion((uint64_t)ColorGammaNode, 0, (char *)1, *((_DWORD *)this + 128), 0, 1, 0);
        (*(void (**)(HgcColorGamma_bias_clamp *, _QWORD, float, float, float, float))(*(_QWORD *)v51 + 96))(v51, 0, 0.062561, 0.062561, 0.062561, 0.0);
        (*(void (**)(HgcColorGamma_bias_clamp *, uint64_t, float, float, float, float))(*(_QWORD *)v51 + 96))(v51, 1, 0.85631, 0.85631, 0.85631, 1.0);
        (*(void (**)(HgcColorGamma_bias_clamp *, uint64_t, float, float, float, float))(*(_QWORD *)v51 + 96))(v51, 2, -3.4028e38, -3.4028e38, -3.4028e38, -3.4028e38);
        (*(void (**)(HgcColorGamma_bias_clamp *, uint64_t, float, float, float, float))(*(_QWORD *)v51 + 96))(v51, 3, 3.4028e38, 3.4028e38, 3.4028e38, 3.4028e38);
        v21 = (char *)*((unsigned int *)this + 130);
        if ((_DWORD)v21 == 8)
          goto LABEL_16;
      }
      v22 = 0;
LABEL_33:
      HGColorGamma::SetConversion((uint64_t)v11, v22, v21, *((_DWORD *)this + 131), *((_DWORD *)this + 132));
      v53 = *((_DWORD *)this + 131);
      if (v53 - 5 <= 1)
      {
        if (*((_BYTE *)this + 768))
          v53 = 6;
        else
          v53 = 5;
      }
      v54 = (unint64_t)v53 << 6;
      v55 = (float32x4_t *)((char *)&HGColorGamma::logGamutRGBToRec709RGB + v54);
      v56 = (float32x4_t *)((char *)&HGColorGamma::logGamutRGBToRec2020RGB + v54);
      if (!*((_DWORD *)this + 132))
        v56 = v55;
      v57 = (const float *)((char *)this + 764);
      v58 = vld1q_dup_f32(v57);
      v58.i32[3] = 1.0;
      v59 = vmulq_f32(v58, v56[1]);
      v127 = vmulq_f32(*v56, v58);
      v128 = v59;
      v60 = vmulq_f32(v58, v56[2]);
      v61 = vmulq_f32(v58, v56[3]);
      v129 = v60;
      v130 = v61;
      HGColorGamma::LoadMatrix2((uint64_t)v11, (uint64_t)&v127, v52);
      if (ColorGammaNode)
        goto LABEL_82;
LABEL_83:
      if (v11)
      {
LABEL_84:
        HGColorGamma::SetToneQualityMode((uint64_t)v11, *((unsigned int *)this + 109), v10);
        HGColorGamma::SetFallbackMode((HGNode *)v11, *((unsigned __int8 *)this + 432), v110);
        HGColorGamma::SetInOut422FilterMode((uint64_t)v11, *((unsigned int *)this + 113), v111);
        HGColorGamma::SetInOut422FilterRect((HGRect *)v11, *(HGRect *)((char *)this + 456));
        HGColorGamma::SetFixedPointPrecisionMode((HGNode *)v11, *((unsigned __int8 *)this + 434), v112);
      }
      v113 = (const void *)*((_QWORD *)this + 52);
      if (!v113)
        return 0;
      v114 = (const void *)*((_QWORD *)this + 51);
      if (v114)
      else
        v115 = 0;
      if (v117)
      {
        if (!v115)
          goto LABEL_95;
      }
      else
      {
        v117 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
        HGColorGamma::HGColorGamma(v117);
        HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v117, *((_BYTE *)this + 474));
        (*(void (**)(HGColorGamma *, _QWORD, _QWORD))(*(_QWORD *)v117 + 120))(v117, 0, *((_QWORD *)this + 52));
        (*(void (**)(_QWORD))(**((_QWORD **)this + 52) + 24))(*((_QWORD *)this + 52));
        *((_QWORD *)this + 52) = v117;
        if (!v115)
          goto LABEL_95;
      }
      HGColorGamma::SetInputPixelFormat((uint64_t)v115, *((unsigned int *)this + 111), v116);
LABEL_95:
      HGColorGamma::SetOutputPixelFormat((uint64_t)v117, *((unsigned int *)this + 110), (char *)*((unsigned int *)this + 112));
      HGColorGamma::SetDitherMode((HGNode *)v117, *((unsigned __int8 *)this + 433), v118);
      HGColorGamma::SetFixedPointPrecisionMode((HGNode *)v117, *((unsigned __int8 *)this + 434), v119);
      if (*((_QWORD *)this + 51) == *((_QWORD *)this + 52))
      {
        HGColorGamma::SetPremultiplyState(v117, *((_BYTE *)this + 472), *((_BYTE *)this + 473));
      }
      else
      {
        if (v115)
          HGColorGamma::SetPremultiplyState(v115, *((_BYTE *)this + 472), 0);
        HGColorGamma::SetPremultiplyState(v117, 0, *((_BYTE *)this + 473));
      }
      return 1;
    case 4:
      v23 = *((_DWORD *)this + 139);
      v24 = (HgcWhiteBalanceRAW *)HGObject::operator new(0x1A0uLL);
      v25 = v24;
      if (v23)
      {
        *((_OWORD *)v24 + 24) = 0u;
        *((_OWORD *)v24 + 25) = 0u;
        *((_OWORD *)v24 + 22) = 0u;
        *((_OWORD *)v24 + 23) = 0u;
        *((_OWORD *)v24 + 20) = 0u;
        *((_OWORD *)v24 + 21) = 0u;
        *((_OWORD *)v24 + 18) = 0u;
        *((_OWORD *)v24 + 19) = 0u;
        *((_OWORD *)v24 + 16) = 0u;
        *((_OWORD *)v24 + 17) = 0u;
        *((_OWORD *)v24 + 14) = 0u;
        *((_OWORD *)v24 + 15) = 0u;
        *((_OWORD *)v24 + 12) = 0u;
        *((_OWORD *)v24 + 13) = 0u;
        *((_OWORD *)v24 + 10) = 0u;
        *((_OWORD *)v24 + 11) = 0u;
        *((_OWORD *)v24 + 8) = 0u;
        *((_OWORD *)v24 + 9) = 0u;
        *((_OWORD *)v24 + 6) = 0u;
        *((_OWORD *)v24 + 7) = 0u;
        *((_OWORD *)v24 + 4) = 0u;
        *((_OWORD *)v24 + 5) = 0u;
        *((_OWORD *)v24 + 2) = 0u;
        *((_OWORD *)v24 + 3) = 0u;
        *(_OWORD *)v24 = 0u;
        *((_OWORD *)v24 + 1) = 0u;
        HgcWhiteBalanceRAW::HgcWhiteBalanceRAW(v24);
        *(_QWORD *)v25 = off_1E652DCE0;
        *((_QWORD *)this + 51) = v25;
        v26 = *((float *)this + 140);
        v27 = *((float *)this + 143) * 65535.0 / v26;
        v28 = *((float *)this + 144) * 65535.0 / v26;
        HgcWhiteBalanceRAW::SetParameter(v25, 0, *((float *)this + 141), v27, 65535.0 / v26, v28, v29);
        (*(void (**)(HgcWhiteBalanceRAW *, uint64_t, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 1, *((float *)this + 150), *((float *)this + 151), *((float *)this + 152), *((float *)this + 153));
        v30.n128_u32[0] = *((_DWORD *)this + 154);
        v31.n128_u32[0] = *((_DWORD *)this + 155);
        v32.n128_u32[0] = *((_DWORD *)this + 145);
        v33.n128_u32[0] = *((_DWORD *)this + 146);
        (*(void (**)(HgcWhiteBalanceRAW *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)v25 + 96))(v25, 2, v30, v31, v32, v33);
      }
      else
      {
        HGDemosaic::HGDemosaic(v24);
        *((_QWORD *)this + 51) = v25;
        (*(void (**)(HgcWhiteBalanceRAW *, _QWORD, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 0, (float)*((unsigned int *)this + 138), 0.0, 0.0, 0.0);
        (*(void (**)(HgcWhiteBalanceRAW *, uint64_t, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 1, *((float *)this + 141), 0.0, 0.0, 0.0);
        (*(void (**)(HgcWhiteBalanceRAW *, uint64_t, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 2, 65535.0 / *((float *)this + 140), 0.0, 0.0, 0.0);
        (*(void (**)(HgcWhiteBalanceRAW *, uint64_t, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 3, *((float *)this + 145), *((float *)this + 146), 0.0, 0.0);
        (*(void (**)(HgcWhiteBalanceRAW *, uint64_t, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 4, *((float *)this + 142), 0.0, 0.0, 0.0);
        (*(void (**)(HgcWhiteBalanceRAW *, uint64_t, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 5, *((float *)this + 147), 0.0, 0.0, 0.0);
        (*(void (**)(HgcWhiteBalanceRAW *, uint64_t, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 6, *((float *)this + 148), 0.0, 0.0, 0.0);
        (*(void (**)(HgcWhiteBalanceRAW *, uint64_t, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 7, *((float *)this + 149), 0.0, 0.0, 0.0);
        v43.n128_u32[0] = *((_DWORD *)this + 143);
        v44.n128_u32[0] = *((_DWORD *)this + 144);
        v45.n128_u32[0] = 0;
        v46.n128_u32[0] = 0;
        (*(void (**)(HgcWhiteBalanceRAW *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)v25 + 96))(v25, 8, v43, v44, v45, v46);
      }
      v47 = (HGColorMatrix *)HGObject::operator new(0x1F0uLL);
      HGColorMatrix::HGColorMatrix(v47);
      (*(void (**)(HGColorMatrix *, _QWORD, HgcWhiteBalanceRAW *))(*(_QWORD *)v47 + 120))(v47, 0, v25);
      (*(void (**)(HgcWhiteBalanceRAW *))(*(_QWORD *)v25 + 24))(v25);
      HGColorMatrix::LoadMatrix(v47, (_OWORD *)this + 40, 1);
      v11 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
      HGColorGamma::HGColorGamma(v11);
      HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v11, *((_BYTE *)this + 474));
      (*(void (**)(HGColorGamma *, _QWORD, HGColorMatrix *))(*(_QWORD *)v11 + 120))(v11, 0, v47);
      (*(void (**)(HGColorMatrix *))(*(_QWORD *)v47 + 24))(v47);
      HGColorGamma::Set1DLutScaleAndOffset((HGNode *)v11, *((float *)this + 119), *((float *)this + 120), v48, v49);
      HGColorGamma::SetConversion((uint64_t)v11, *((unsigned int *)this + 176), (char *)8, 0, *((_DWORD *)this + 177), 8, 0);
      v50 = (HGNode *)HGObject::operator new(0x1B0uLL);
      HGCameraLogEncode::HGCameraLogEncode(v50, *((_DWORD *)this + 178));
      (*(void (**)(HGNode *, _QWORD, HGColorGamma *))(*(_QWORD *)v50 + 120))(v50, 0, v11);
      (*(void (**)(HGColorGamma *))(*(_QWORD *)v11 + 24))(v11);
      *((_QWORD *)this + 52) = v50;
      goto LABEL_84;
    case 5:
      ColorGammaNode = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
      HGColorGamma::HGColorGamma(ColorGammaNode);
      HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)ColorGammaNode, *((_BYTE *)this + 474));
      v34 = ColorGammaNode;
      if (!*(_QWORD *)(*((_QWORD *)this + 67) + 16))
        goto LABEL_48;
      v35 = ColorGammaNode;
      if (!*((_BYTE *)this + 756))
      {
        v35 = (HgcASC_CDL *)HGObject::operator new(0x1A0uLL);
        HgcASC_CDL::HgcASC_CDL(v35);
        (*(void (**)(HgcASC_CDL *, _QWORD, HGColorGamma *))(*(_QWORD *)v35 + 120))(v35, 0, ColorGammaNode);
        (*(void (**)(HGColorGamma *))(*(_QWORD *)ColorGammaNode + 24))(ColorGammaNode);
        (*(void (**)(HgcASC_CDL *, _QWORD, float, float, float, float))(*(_QWORD *)v35 + 96))(v35, 0, *((float *)this + 179), *((float *)this + 180), *((float *)this + 181), 1.0);
        (*(void (**)(HgcASC_CDL *, uint64_t, float, float, float, float))(*(_QWORD *)v35 + 96))(v35, 1, *((float *)this + 182), *((float *)this + 183), *((float *)this + 184), 0.0);
        (*(void (**)(HgcASC_CDL *, uint64_t, float, float, float, float))(*(_QWORD *)v35 + 96))(v35, 2, *((float *)this + 185), *((float *)this + 186), *((float *)this + 187), 1.0);
        (*(void (**)(HgcASC_CDL *, uint64_t, float, float, float, float))(*(_QWORD *)v35 + 96))(v35, 3, *((float *)this + 188), 0.0, 0.0, 0.0);
      }
      v36 = (HGNode *)HGObject::operator new(0x210uLL);
      HGApply3DLUT::HGApply3DLUT(v36, *(_QWORD *)(*((_QWORD *)this + 67) + 32), 0x19u, 1, 1, 1, 1, 1, *(float *)(*((_QWORD *)this + 67) + 24), *(float *)(*((_QWORD *)this + 67) + 28), 0.0, 1.0, 0.0, 0.0, 0);
      (*(void (**)(HGNode *, _QWORD, HgcASC_CDL *))(*(_QWORD *)v36 + 120))(v36, 0, v35);
      (*(void (**)(HgcASC_CDL *))(*(_QWORD *)v35 + 24))(v35);
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)(*((_QWORD *)this + 67) + 16));
      v38 = (HGBitmap *)HGColorConform::Prep3DLUTBitmap((uint64_t)this, a2, (uint64_t)BytePtr, *(_QWORD *)(*((_QWORD *)this + 67) + 32), *(_QWORD *)(*((_QWORD *)this + 67) + 40), *(_QWORD *)(*((_QWORD *)this + 67) + 48), *(unsigned __int8 *)(*((_QWORD *)this + 67) + 56), *(_DWORD *)(*((_QWORD *)this + 67) + 60));
      if (!v38)
      {
        (*(void (**)(HGNode *))(*(_QWORD *)v36 + 24))(v36);
        return 0;
      }
      v39 = v38;
      HGApply3DLUT::SetLUTBitmap((HGRect *)v36, v38);
      (*(void (**)(HGBitmap *))(*(_QWORD *)v39 + 24))(v39);
      if (*(_BYTE *)(*((_QWORD *)this + 67) + 104))
      {
        v34 = (HgcColorGamma_bias_clamp *)v36;
      }
      else
      {
        v34 = (HgcColorGamma_bias_clamp *)HGObject::operator new(0x1A0uLL);
        HgcColorGamma_bias_clamp::HgcColorGamma_bias_clamp(v34);
        (*(void (**)(HgcColorGamma_bias_clamp *, _QWORD, HGNode *))(*(_QWORD *)v34 + 120))(v34, 0, v36);
        (*(void (**)(HGNode *))(*(_QWORD *)v36 + 24))(v36);
        v70 = (float *)*((_QWORD *)this + 67);
        v71 = v70[22];
        v72 = v70[24];
        v73 = v70[25];
        (*(void (**)(HgcColorGamma_bias_clamp *, _QWORD, float, float, float, float))(*(_QWORD *)v34 + 96))(v34, 0, v70[23], v70[23], v70[23], 0.0);
        (*(void (**)(HgcColorGamma_bias_clamp *, uint64_t, float, float, float, float))(*(_QWORD *)v34 + 96))(v34, 1, v71, v71, v71, 1.0);
        (*(void (**)(HgcColorGamma_bias_clamp *, uint64_t, float, float, float, float))(*(_QWORD *)v34 + 96))(v34, 2, v72, v72, v72, -3.4028e38);
        (*(void (**)(HgcColorGamma_bias_clamp *, uint64_t, float, float, float, float))(*(_QWORD *)v34 + 96))(v34, 3, v73, v73, v73, 3.4028e38);
      }
LABEL_48:
      v11 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
      HGColorGamma::HGColorGamma(v11);
      HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v11, *((_BYTE *)this + 474));
      (*(void (**)(HGColorGamma *, _QWORD, HgcColorGamma_bias_clamp *))(*(_QWORD *)v11 + 120))(v11, 0, v34);
      (*(void (**)(HgcColorGamma_bias_clamp *))(*(_QWORD *)v34 + 24))(v34);
      *((_QWORD *)this + 51) = ColorGammaNode;
      *((_QWORD *)this + 52) = v11;
      v74 = *((_DWORD *)this + 136);
      if (v74)
        HGColorGamma::SetConversion((uint64_t)ColorGammaNode, 0, (char *)1, v74, 0, 1, 0);
      HGColorGamma::SetConversion((uint64_t)v11, *(unsigned int *)(*((_QWORD *)this + 67) + 108), (char *)*(unsigned int *)(*((_QWORD *)this + 67) + 112), 0, *((_DWORD *)this + 137), 8, 0);
      if (ColorGammaNode)
      {
LABEL_82:
        HGColorGamma::SetToneQualityMode((uint64_t)ColorGammaNode, *((unsigned int *)this + 109), v10);
        HGColorGamma::SetFallbackMode((HGNode *)ColorGammaNode, *((unsigned __int8 *)this + 432), v107);
        HGColorGamma::SetInOut422FilterMode((uint64_t)ColorGammaNode, *((unsigned int *)this + 113), v108);
        HGColorGamma::SetInOut422FilterRect((HGRect *)ColorGammaNode, *(HGRect *)((char *)this + 456));
        HGColorGamma::SetFixedPointPrecisionMode((HGNode *)ColorGammaNode, *((unsigned __int8 *)this + 434), v109);
      }
      goto LABEL_83;
    default:
      v11 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
      HGColorGamma::HGColorGamma(v11);
      HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v11, *((_BYTE *)this + 474));
      *((_QWORD *)this + 51) = v11;
      *((_QWORD *)this + 52) = v11;
      HGColorGamma::Set1DLutScaleAndOffset((HGNode *)v11, *((float *)this + 119), *((float *)this + 120), v12, v13);
      switch(a3)
      {
        case 6:
          HGColorGamma::SetConversionPreset((uint64_t)v11, 1, v14);
          goto LABEL_83;
        case 7:
          HGColorGamma::SetConversionPreset((uint64_t)v11, 2, v14);
          goto LABEL_83;
        case 8:
          HGColorGamma::SetConversionPreset((uint64_t)v11, 3, v14);
          goto LABEL_83;
        case 9:
          HGColorGamma::SetConversionPreset((uint64_t)v11, 4, v14);
          goto LABEL_83;
        case 10:
          HGColorGamma::SetConversionPreset((uint64_t)v11, 5, v14);
          goto LABEL_83;
        case 11:
          HGColorGamma::SetConversionPreset((uint64_t)v11, 6, v14);
          goto LABEL_83;
        case 12:
          v120 = (uint64_t)v11;
          v121 = 0;
          v122 = 1;
          v123 = 1;
          goto LABEL_113;
        case 13:
          v120 = (uint64_t)v11;
          v121 = 2;
          goto LABEL_109;
        case 14:
          v120 = (uint64_t)v11;
          v121 = 1;
LABEL_109:
          v122 = 1;
          v123 = 2;
          goto LABEL_113;
        case 15:
          v120 = (uint64_t)v11;
          v121 = 0;
          goto LABEL_112;
        case 16:
          v120 = (uint64_t)v11;
          v121 = 2;
LABEL_112:
          v122 = 1;
          v123 = 0;
LABEL_113:
          v124 = 8;
          goto LABEL_121;
        case 17:
          HGColorGamma::SetConversion((uint64_t)v11, 0, (char *)8, 0, 0, 1, 1u);
          goto LABEL_83;
        case 18:
          v125 = (uint64_t)v11;
          v126 = 2;
          goto LABEL_117;
        case 19:
          v125 = (uint64_t)v11;
          v126 = 1;
LABEL_117:
          HGColorGamma::SetConversion(v125, 0, (char *)8, 0, v126, 1, 2u);
          goto LABEL_83;
        case 20:
          v120 = (uint64_t)v11;
          v121 = 0;
          v122 = 8;
          v123 = 0;
          goto LABEL_120;
        case 21:
          v120 = (uint64_t)v11;
          v121 = 0;
          v122 = 1;
          v123 = 1;
LABEL_120:
          v124 = 1;
LABEL_121:
          HGColorGamma::SetConversion(v120, v121, (char *)v122, v123, 0, v124, 0);
          break;
        default:
LABEL_61:
          HGColorGamma::SetConversionPreset((uint64_t)v11, 0, v14);
          break;
      }
      goto LABEL_83;
  }
}

void sub_1B2ACF17C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF190(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF1A4(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF1B8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF1CC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF1E0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF1F4(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF208(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF21C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF230(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF244(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF258(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF26C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF280(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF294(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF2A8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF2BC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF2D0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF2E4(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF2F8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF30C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF320(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF334(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF348(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF35C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF370(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF384(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ACF398(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t HGColorConform::CreateColorConformHeliumGraph(HGColorConform *this, HGRenderer *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v7;
  int v8;
  HGColorGamma *v9;
  HGColorGamma *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __n128 Matrix2;
  int v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  __n128 Matrix1;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  size_t v78;
  HGRenderer *v79;
  char *v80;
  uint64_t v81;
  HGBitmap *v82;
  unsigned __int8 v83;
  uint64_t LUTCache;
  int v85;
  uint64_t v87;
  HGNode *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  size_t v97;
  HGRenderer *v98;
  char *v99;
  HGBitmap *NewLUT;
  HGNode *v101;
  const void *v103;
  HGColorGamma *v104;
  char *v105;
  HGColorGamma *v106;
  char *v107;
  char *v108;
  char *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  void *__p;
  void *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 53);
  if (!v2)
    return 0;
  v3 = *(uint64_t **)(v2 + 16);
  v4 = (unint64_t)(v3[1] - *v3) >> 3;
  if (!(_DWORD)v4)
    return 0;
  v7 = *((_QWORD *)this + 52);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  if ((int)v4 >= 1)
  {
    v8 = 0;
    v9 = 0;
    v115 = v4;
    while (1)
    {
      v11 = v4 - v8;
      if ((int)v4 - v8 >= 3)
        break;
      if (v11 == 2)
      {
        v13 = *v3;
        v12 = v8;
        v14 = (v3[1] - *v3) >> 3;
        goto LABEL_32;
      }
      if (v11 < 1)
        goto LABEL_7;
      v13 = *v3;
      v12 = v8;
      v14 = (v3[1] - *v3) >> 3;
LABEL_63:
      if (v14 <= v12)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      v53 = **(_DWORD **)(v13 + 8 * v12);
      if (v53 < 2)
      {
        if (v53 == 1)
        {
          v10 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
          HGColorGamma::HGColorGamma(v10);
          HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v10, *((_BYTE *)this + 474));
          HGColorGamma::SetPremultiplyState(v10, 0, 0);
          HGColorGamma::Set1DLutScaleAndOffset((HGNode *)v10, *((float *)this + 119), *((float *)this + 120), v63, v64);
          HGColorGamma::SetToneQualityMode((uint64_t)v10, *((unsigned int *)this + 109), v65);
          HGColorGamma::SetFallbackMode((HGNode *)v10, *((unsigned __int8 *)this + 432), v66);
          HGColorGamma::SetInOut422FilterMode((uint64_t)v10, *((unsigned int *)this + 113), v67);
          HGColorGamma::SetInOut422FilterRect((HGRect *)v10, *(HGRect *)((char *)this + 456));
          HGColorGamma::SetFixedPointPrecisionMode((HGNode *)v10, *((unsigned __int8 *)this + 434), v68);
          if (v12 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v124 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 16);
          if (v12 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v125 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 32);
          if (v12 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v126 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 48);
          if (v12 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v127 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 64);
          Matrix1 = HGColorGamma::LoadMatrix1((uint64_t)v10, (uint64_t)&v124, v69);
          if (v8)
          {
            (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *, __n128))(*(_QWORD *)v10 + 120))(v10, 0, v9, Matrix1);
            (*(void (**)(HGColorGamma *))(*(_QWORD *)v9 + 24))(v9);
          }
          else
          {
LABEL_127:
            *((_QWORD *)this + 51) = v10;
          }
          goto LABEL_128;
        }
LABEL_7:
        v10 = v9;
        goto LABEL_8;
      }
      if (v53 <= 6)
      {
        v10 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
        HGColorGamma::HGColorGamma(v10);
        HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v10, *((_BYTE *)this + 474));
        HGColorGamma::SetPremultiplyState(v10, 0, 0);
        HGColorGamma::Set1DLutScaleAndOffset((HGNode *)v10, *((float *)this + 119), *((float *)this + 120), v54, v55);
        HGColorGamma::SetToneQualityMode((uint64_t)v10, *((unsigned int *)this + 109), v56);
        HGColorGamma::SetFallbackMode((HGNode *)v10, *((unsigned __int8 *)this + 432), v57);
        HGColorGamma::SetInOut422FilterMode((uint64_t)v10, *((unsigned int *)this + 113), v58);
        HGColorGamma::SetInOut422FilterRect((HGRect *)v10, *(HGRect *)((char *)this + 456));
        HGColorGamma::SetFixedPointPrecisionMode((HGNode *)v10, *((unsigned __int8 *)this + 434), v59);
        if (v12 >= (v3[1] - *v3) >> 3)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        v61 = *(_QWORD *)(*v3 + 8 * v12);
        if ((*(_DWORD *)v61 - 3) >= 4)
          v62 = 0;
        else
          v62 = (*(_DWORD *)v61 - 2);
        HGColorGamma::SetGammaFunction((uint64_t)v10, v62, v60, *(__n128 *)(v61 + 80), *(float32x4_t *)(v61 + 96), *(float32x4_t *)(v61 + 112), *(float32x4_t *)(v61 + 128), *(int8x16_t *)(v61 + 144), *(float32x4_t *)(v61 + 160), *(float32x4_t *)(v61 + 176));
        if (!v8)
          goto LABEL_127;
        goto LABEL_71;
      }
      if (v53 == 8)
      {
        v83 = atomic_load((unsigned __int8 *)&qword_1EF075A08);
        if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_1EF075A08))
          __cxa_guard_release(&qword_1EF075A08);
        LUTCache = HGLUTCacheManager::getLUTCache(*((_QWORD *)a2 + 69), (unint64_t)&off_1ED4D8F00);
        if (v12 >= (v3[1] - *v3) >> 3)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        v85 = *(_DWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 204);
        if (v85 == 25 || v85 == 19)
        {
          v87 = LUTCache;
          v88 = (HGNode *)HGObject::operator new(0x210uLL);
          v10 = (HGColorGamma *)v88;
          if (v12 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          HGApply3DLUT::HGApply3DLUT(v88, *(_DWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 200), 0x19u, 1, 1, 1, 1, 1, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0);
          v89 = operator new();
          v90 = *v3;
          v91 = (v3[1] - *v3) >> 3;
          v114 = v89;
          if (v91 <= v12)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v92 = *(_QWORD *)(*(_QWORD *)(v90 + 8 * v12) + 208);
          v119 = v92;
          if (v92)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v92 + 16))(v92);
            v90 = *v3;
            v91 = (v3[1] - *v3) >> 3;
          }
          v112 = v87;
          if (v91 <= v12)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v93 = *(_QWORD *)(v90 + 8 * v12);
          v94 = *(int *)(v93 + 200);
          v117 = 0;
          v118 = 0;
          v116 = 0;
          v96 = *(_BYTE **)(v93 + 224);
          v95 = *(_BYTE **)(v93 + 232);
          v97 = v95 - v96;
          if (v95 != v96)
          {
            if ((v97 & 0x8000000000000000) != 0)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v98 = a2;
            v116 = (char *)operator new(v95 - v96);
            v117 = v116;
            v99 = &v116[v97];
            v118 = &v116[v97];
            memcpy(v116, v96, v97);
            v117 = v99;
            a2 = v98;
          }
          HGColorConformLUTInfo::HGColorConformLUTInfo(v114, &v119, v94, 3uLL, (uint64_t)&v116, 0, 1.0, 0.0);
          LODWORD(v4) = v115;
          if (v116)
          {
            v117 = v116;
            operator delete(v116);
          }
          if (v119)
            (*(void (**)(uint64_t))(*(_QWORD *)v119 + 24))(v119);
          NewLUT = (HGBitmap *)HGLUTCache::getNewLUT(v112, v114);
          HGApply3DLUT::SetLUTBitmap((HGRect *)v10, NewLUT);
          (*(void (**)(HGBitmap *))(*(_QWORD *)NewLUT + 24))(NewLUT);
          (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
        }
        else
        {
          v101 = (HGNode *)HGObject::operator new(0x210uLL);
          v10 = (HGColorGamma *)v101;
          if (v12 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          HGApply3DLUT::HGApply3DLUT(v101, *(_DWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 200), *(_DWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 204), 1, 1, 1, 1, 1, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0);
          if (v12 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          HGApply3DLUT::SetLUT((uint64_t)v10, *(char **)(*(_QWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 208) + 24), *(_DWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 200), *(_DWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 192), *(_DWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 196), 0);
        }
        if (!v8)
          goto LABEL_127;
LABEL_71:
        (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *))(*(_QWORD *)v10 + 120))(v10, 0, v9);
        (*(void (**)(HGColorGamma *))(*(_QWORD *)v9 + 24))(v9);
LABEL_128:
        ++v8;
        goto LABEL_8;
      }
      if (v53 != 7)
        goto LABEL_7;
      v10 = (HGColorGamma *)HGObject::operator new(0x1D0uLL);
      HGApply1DLUT::HGApply1DLUT(v10);
      if (v12 >= (v3[1] - *v3) >> 3)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      HGApply1DLUT::Init(v10, *(_DWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 200), 1.0, 0.0, 1, 1, 1, *(_BYTE *)(*(_QWORD *)(*v3 + 8 * v12) + 216), 1, 1);
      v71 = atomic_load((unsigned __int8 *)&_MergedGlobals_31);
      if ((v71 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_31))
        __cxa_guard_release(&_MergedGlobals_31);
      if (v12 >= (v3[1] - *v3) >> 3)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      v72 = *(_QWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 208);
      if (v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
      v113 = v72;
      v73 = operator new();
      v123 = v72;
      if (v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
      v111 = v73;
      if (v12 >= (v3[1] - *v3) >> 3)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      v74 = *(_QWORD *)(*v3 + 8 * v12);
      v75 = *(int *)(v74 + 200);
      v121 = 0;
      v122 = 0;
      __p = 0;
      v77 = *(_BYTE **)(v74 + 224);
      v76 = *(_BYTE **)(v74 + 232);
      v78 = v76 - v77;
      if (v76 != v77)
      {
        if ((v78 & 0x8000000000000000) != 0)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v79 = a2;
        __p = operator new(v76 - v77);
        v121 = __p;
        v80 = (char *)__p + v78;
        v122 = (char *)__p + v78;
        memcpy(__p, v77, v78);
        v121 = v80;
        a2 = v79;
      }
      HGColorConformLUTInfo::HGColorConformLUTInfo(v111, &v123, v75, 1uLL, (uint64_t)&__p, 1, 1.0, 0.0);
      LODWORD(v4) = v115;
      if (__p)
      {
        v121 = __p;
        operator delete(__p);
      }
      if (v123)
        (*(void (**)(uint64_t))(*(_QWORD *)v123 + 24))(v123);
      v81 = HGLUTCacheManager::getLUTCache(*((_QWORD *)a2 + 69), (unint64_t)&_MergedGlobals_0);
      v82 = (HGBitmap *)HGLUTCache::getNewLUT(v81, v111);
      HGApply1DLUT::SetLUTBitmap(v10, v82);
      (*(void (**)(HGBitmap *))(*(_QWORD *)v82 + 24))(v82);
      (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
      if (v8)
      {
        (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *))(*(_QWORD *)v10 + 120))(v10, 0, v9);
        (*(void (**)(HGColorGamma *))(*(_QWORD *)v9 + 24))(v9);
        ++v8;
        if (!v113)
          goto LABEL_8;
LABEL_122:
        (*(void (**)(uint64_t))(*(_QWORD *)v113 + 24))(v113);
        goto LABEL_8;
      }
      *((_QWORD *)this + 51) = v10;
      v8 = 1;
      if (v113)
        goto LABEL_122;
LABEL_8:
      v9 = v10;
      if (v8 >= (int)v4)
        goto LABEL_135;
    }
    v12 = v8;
    v13 = *v3;
    v14 = (v3[1] - *v3) >> 3;
    if (v14 <= v8)
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    if (**(_DWORD **)(v13 + 8 * v8) == 1)
    {
      v15 = v8 + 1;
      if (v14 <= v15)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      if ((**(_DWORD **)(v13 + 8 * v15) - 2) <= 4)
      {
        v16 = v8 + 2;
        if (v14 <= v16)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        if (**(_DWORD **)(v13 + 8 * v16) == 1)
        {
          v10 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
          HGColorGamma::HGColorGamma(v10);
          HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v10, *((_BYTE *)this + 474));
          HGColorGamma::SetPremultiplyState(v10, 0, 0);
          HGColorGamma::Set1DLutScaleAndOffset((HGNode *)v10, *((float *)this + 119), *((float *)this + 120), v17, v18);
          if (v8 >= (unint64_t)((v3[1] - *v3) >> 3))
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v124 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v8) + 16);
          if (v8 >= (unint64_t)((v3[1] - *v3) >> 3))
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v125 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v8) + 32);
          if (v8 >= (unint64_t)((v3[1] - *v3) >> 3))
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v126 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v8) + 48);
          if (v8 >= (unint64_t)((v3[1] - *v3) >> 3))
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v127 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v8) + 64);
          HGColorGamma::LoadMatrix1((uint64_t)v10, (uint64_t)&v124, v19);
          HGColorGamma::SetToneQualityMode((uint64_t)v10, *((unsigned int *)this + 109), v20);
          HGColorGamma::SetFallbackMode((HGNode *)v10, *((unsigned __int8 *)this + 432), v21);
          HGColorGamma::SetInOut422FilterMode((uint64_t)v10, *((unsigned int *)this + 113), v22);
          HGColorGamma::SetInOut422FilterRect((HGRect *)v10, *(HGRect *)((char *)this + 456));
          HGColorGamma::SetFixedPointPrecisionMode((HGNode *)v10, *((unsigned __int8 *)this + 434), v23);
          if (v15 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v25 = *(_QWORD *)(*v3 + 8 * v15);
          if ((*(_DWORD *)v25 - 3) >= 4)
            v26 = 0;
          else
            v26 = (*(_DWORD *)v25 - 2);
          HGColorGamma::SetGammaFunction((uint64_t)v10, v26, v24, *(__n128 *)(v25 + 80), *(float32x4_t *)(v25 + 96), *(float32x4_t *)(v25 + 112), *(float32x4_t *)(v25 + 128), *(int8x16_t *)(v25 + 144), *(float32x4_t *)(v25 + 160), *(float32x4_t *)(v25 + 176));
          if (v16 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v124 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v16) + 16);
          if (v16 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v125 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v16) + 32);
          if (v16 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v126 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v16) + 48);
          if (v16 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v127 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v16) + 64);
          Matrix2 = HGColorGamma::LoadMatrix2((uint64_t)v10, (uint64_t)&v124, v27);
          if (v8)
          {
            (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *, __n128))(*(_QWORD *)v10 + 120))(v10, 0, v9, Matrix2);
            (*(void (**)(HGColorGamma *))(*(_QWORD *)v9 + 24))(v9);
            v8 += 3;
          }
          else
          {
            *((_QWORD *)this + 51) = v10;
            v8 = 3;
          }
          goto LABEL_8;
        }
      }
    }
LABEL_32:
    if (v14 <= v12)
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    v29 = **(_DWORD **)(v13 + 8 * v12);
    if (v29 < 2)
    {
      if (v29 == 1)
      {
        v42 = v8 + 1;
        if (v14 <= v42)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        if ((**(_DWORD **)(v13 + 8 * v42) - 2) <= 4)
        {
          v10 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
          HGColorGamma::HGColorGamma(v10);
          HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v10, *((_BYTE *)this + 474));
          HGColorGamma::SetPremultiplyState(v10, 0, 0);
          HGColorGamma::Set1DLutScaleAndOffset((HGNode *)v10, *((float *)this + 119), *((float *)this + 120), v43, v44);
          HGColorGamma::SetToneQualityMode((uint64_t)v10, *((unsigned int *)this + 109), v45);
          HGColorGamma::SetFallbackMode((HGNode *)v10, *((unsigned __int8 *)this + 432), v46);
          HGColorGamma::SetInOut422FilterMode((uint64_t)v10, *((unsigned int *)this + 113), v47);
          HGColorGamma::SetInOut422FilterRect((HGRect *)v10, *(HGRect *)((char *)this + 456));
          HGColorGamma::SetFixedPointPrecisionMode((HGNode *)v10, *((unsigned __int8 *)this + 434), v48);
          if (v12 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v124 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 16);
          if (v12 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v125 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 32);
          if (v12 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v126 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 48);
          if (v12 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v127 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v12) + 64);
          HGColorGamma::LoadMatrix1((uint64_t)v10, (uint64_t)&v124, v49);
          if (v42 >= (v3[1] - *v3) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v51 = *(_QWORD *)(*v3 + 8 * v42);
          if ((*(_DWORD *)v51 - 3) >= 4)
            v52 = 0;
          else
            v52 = (*(_DWORD *)v51 - 2);
          HGColorGamma::SetGammaFunction((uint64_t)v10, v52, v50, *(__n128 *)(v51 + 80), *(float32x4_t *)(v51 + 96), *(float32x4_t *)(v51 + 112), *(float32x4_t *)(v51 + 128), *(int8x16_t *)(v51 + 144), *(float32x4_t *)(v51 + 160), *(float32x4_t *)(v51 + 176));
          if (!v8)
          {
LABEL_99:
            *((_QWORD *)this + 51) = v10;
            v8 += 2;
            goto LABEL_8;
          }
          (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *))(*(_QWORD *)v10 + 120))(v10, 0, v9);
          (*(void (**)(HGColorGamma *))(*(_QWORD *)v9 + 24))(v9);
          goto LABEL_60;
        }
      }
    }
    else if (v29 <= 6)
    {
      v30 = v8 + 1;
      if (v14 <= v30)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      if (**(_DWORD **)(v13 + 8 * v30) == 1)
      {
        v10 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
        HGColorGamma::HGColorGamma(v10);
        HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v10, *((_BYTE *)this + 474));
        HGColorGamma::SetPremultiplyState(v10, 0, 0);
        HGColorGamma::Set1DLutScaleAndOffset((HGNode *)v10, *((float *)this + 119), *((float *)this + 120), v31, v32);
        HGColorGamma::SetToneQualityMode((uint64_t)v10, *((unsigned int *)this + 109), v33);
        HGColorGamma::SetFallbackMode((HGNode *)v10, *((unsigned __int8 *)this + 432), v34);
        HGColorGamma::SetInOut422FilterMode((uint64_t)v10, *((unsigned int *)this + 113), v35);
        HGColorGamma::SetInOut422FilterRect((HGRect *)v10, *(HGRect *)((char *)this + 456));
        HGColorGamma::SetFixedPointPrecisionMode((HGNode *)v10, *((unsigned __int8 *)this + 434), v36);
        if (v12 >= (v3[1] - *v3) >> 3)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        v38 = *(_QWORD *)(*v3 + 8 * v12);
        if ((*(_DWORD *)v38 - 3) >= 4)
          v39 = 0;
        else
          v39 = (*(_DWORD *)v38 - 2);
        HGColorGamma::SetGammaFunction((uint64_t)v10, v39, v37, *(__n128 *)(v38 + 80), *(float32x4_t *)(v38 + 96), *(float32x4_t *)(v38 + 112), *(float32x4_t *)(v38 + 128), *(int8x16_t *)(v38 + 144), *(float32x4_t *)(v38 + 160), *(float32x4_t *)(v38 + 176));
        if (v30 >= (v3[1] - *v3) >> 3)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        v124 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v30) + 16);
        if (v30 >= (v3[1] - *v3) >> 3)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        v125 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v30) + 32);
        if (v30 >= (v3[1] - *v3) >> 3)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        v126 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v30) + 48);
        if (v30 >= (v3[1] - *v3) >> 3)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        v127 = *(_OWORD *)(*(_QWORD *)(*v3 + 8 * v30) + 64);
        v41 = HGColorGamma::LoadMatrix2((uint64_t)v10, (uint64_t)&v124, v40);
        if (!v8)
          goto LABEL_99;
        (*(void (**)(HGColorGamma *, _QWORD, HGColorGamma *, __n128))(*(_QWORD *)v10 + 120))(v10, 0, v9, v41);
        (*(void (**)(HGColorGamma *))(*(_QWORD *)v9 + 24))(v9);
LABEL_60:
        v8 += 2;
        goto LABEL_8;
      }
    }
    goto LABEL_63;
  }
  v10 = 0;
LABEL_135:
  *((_QWORD *)this + 52) = v10;
  v103 = (const void *)*((_QWORD *)this + 51);
  if (v103
  {
    if (!v10)
      goto LABEL_141;
  }
  else
  {
    v104 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
    HGColorGamma::HGColorGamma(v104);
    HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v104, *((_BYTE *)this + 474));
    (*(void (**)(_QWORD, _QWORD, HGColorGamma *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 0, v104);
    (*(void (**)(HGColorGamma *))(*(_QWORD *)v104 + 24))(v104);
    *((_QWORD *)this + 51) = v104;
    v10 = (HGColorGamma *)*((_QWORD *)this + 52);
    if (!v10)
    {
LABEL_141:
      v106 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
      HGColorGamma::HGColorGamma(v106);
      HGColorGamma::SetAntiSymmetricToneCurves((uint64_t)v106, *((_BYTE *)this + 474));
      (*(void (**)(HGColorGamma *, _QWORD, _QWORD))(*(_QWORD *)v106 + 120))(v106, 0, *((_QWORD *)this + 52));
      (*(void (**)(_QWORD))(**((_QWORD **)this + 52) + 24))(*((_QWORD *)this + 52));
      *((_QWORD *)this + 52) = v106;
      goto LABEL_142;
    }
  }
  if (!v106)
    goto LABEL_141;
LABEL_142:
  HGColorGamma::SetInputPixelFormat((uint64_t)v104, *((unsigned int *)this + 111), v105);
  HGColorGamma::SetOutputPixelFormat((uint64_t)v106, *((unsigned int *)this + 110), (char *)*((unsigned int *)this + 112));
  HGColorGamma::SetDitherMode((HGNode *)v106, *((unsigned __int8 *)this + 433), v107);
  HGColorGamma::SetFixedPointPrecisionMode((HGNode *)v104, *((unsigned __int8 *)this + 434), v108);
  HGColorGamma::SetFixedPointPrecisionMode((HGNode *)v106, *((unsigned __int8 *)this + 434), v109);
  v110 = *((unsigned __int8 *)this + 472);
  if (*((_QWORD *)this + 51) == *((_QWORD *)this + 52))
  {
    HGColorGamma::SetPremultiplyState(v104, v110 != 0, *((_BYTE *)this + 473));
  }
  else
  {
    HGColorGamma::SetPremultiplyState(v104, v110 != 0, 0);
    HGColorGamma::SetPremultiplyState(v106, 0, *((_BYTE *)this + 473));
  }
  return 1;
}

void sub_1B2AD057C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD0590(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD05A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  MEMORY[0x1B5E29170](a11, 0x10B1C40693A545BLL);
  _Unwind_Resume(a1);
}

void sub_1B2AD069C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD0708(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD071C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD0730(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD0744(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD0758(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD076C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (v1)
    JUMPOUT(0x1B2AD0774);
  _Unwind_Resume(a1);
}

void sub_1B2AD0788(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

BOOL HGColorConform::GetNodeListFromCache(HGColorConform *this, const ColorSyncProfile *a2, const ColorSyncProfile *a3, HGColorConformNodeListCacheItem **a4)
{
  HGSynchronizable *v7;
  CFMutableDictionaryRef Mutable;
  CFStringRef v9;
  const void *Value;
  _BOOL8 v11;
  UInt8 bytes[32];
  _BYTE v14[35];
  ColorSyncMD5 v15;
  ColorSyncMD5 MD5;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = (HGSynchronizable *)HGColorConform::s_NodeListCacheLock;
  HGSynchronizable::Lock((HGSynchronizable *)HGColorConform::s_NodeListCacheLock);
  Mutable = (CFMutableDictionaryRef)HGColorConform::s_NodeListCache;
  if (!HGColorConform::s_NodeListCache)
  {
    Mutable = CFDictionaryCreateMutable(0, 50, MEMORY[0x1E0C9B390], 0);
    HGColorConform::s_NodeListCache = (uint64_t)Mutable;
  }
  HGSynchronizable::Unlock(v7);
  if (!Mutable)
    return 0;
  MD5 = ColorSyncProfileGetMD5(this);
  v15 = ColorSyncProfileGetMD5(a2);
  fillBufWithAsciiHexMD5(bytes, MD5.digest);
  fillBufWithAsciiHexMD5(v14, v15.digest);
  v9 = CFStringCreateWithBytes(0, bytes, 64, 0x600u, 0);
  Value = CFDictionaryGetValue((CFDictionaryRef)HGColorConform::s_NodeListCache, v9);
  *(_QWORD *)a3 = Value;
  v11 = Value != 0;
  CFRelease(v9);
  return v11;
}

void sub_1B2AD08E4(_Unwind_Exception *a1)
{
  HGSynchronizable *v1;

  HGSynchronizable::Unlock(v1);
  _Unwind_Resume(a1);
}

void std::vector<HGColorConformNodeListItem *>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = v5 - (_BYTE *)*a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_28;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
      v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  a1[1] = v7;
}

void std::vector<unsigned char>::push_back[abi:ne180100](_QWORD *a1, char *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = (unint64_t)&v5[-*a1];
    v10 = v9 + 1;
    if ((uint64_t)(v9 + 1) < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = operator new(v12);
    else
      v13 = 0;
    v14 = &v13[v9];
    v15 = &v13[v12];
    v13[v9] = *a2;
    v7 = (uint64_t)&v13[v9 + 1];
    if (v5 == v8)
    {
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v15;
      if (!v5)
        goto LABEL_32;
      goto LABEL_31;
    }
    if (v9 < 8 || (unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    if (v9 >= 0x20)
    {
      v16 = v9 & 0xFFFFFFFFFFFFFFE0;
      v17 = (__int128 *)(v5 - 16);
      v18 = &v13[v5 - 16 - v8];
      v19 = v9 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *v18 = v20;
        v18 -= 2;
        v17 -= 2;
        v19 -= 32;
      }
      while (v19);
      if (v9 == v16)
      {
LABEL_30:
        v6 = (char *)*a1;
        *a1 = v13;
        a1[1] = v7;
        a1[2] = v15;
        if (!v6)
          goto LABEL_32;
LABEL_31:
        operator delete(v6);
        goto LABEL_32;
      }
      if ((v9 & 0x18) == 0)
      {
        v14 -= v16;
        v6 = &v5[-v16];
        goto LABEL_28;
      }
    }
    else
    {
      v16 = 0;
    }
    v6 = &v5[-(v9 & 0xFFFFFFFFFFFFFFF8)];
    v14 -= v9 & 0xFFFFFFFFFFFFFFF8;
    v21 = &v5[-v16 - 8];
    v22 = &v13[v21 - v8];
    v23 = v16 - (v9 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v24 = *(_QWORD *)v21;
      v21 -= 8;
      *v22-- = v24;
      v23 += 8;
    }
    while (v23);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
LABEL_28:
    v25 = v14 - 1;
    do
    {
      v26 = *--v6;
      *v25-- = v26;
    }
    while (v6 != v8);
    goto LABEL_30;
  }
  *v5 = *a2;
  v7 = (uint64_t)(v5 + 1);
LABEL_32:
  a1[1] = v7;
}

HGObject *HGColorConform::AddNodeListToCache(const ColorSyncProfile *a1, const ColorSyncProfile *a2, uint64_t a3)
{
  HGObject *v6;
  HGSynchronizable *v7;
  CFMutableDictionaryRef Mutable;
  CFStringRef v9;
  const void *Value;
  uint64_t v12;
  char v13;
  _BYTE v14[40];
  ColorSyncMD5 v15;
  ColorSyncMD5 MD5;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (HGObject *)HGObject::operator new(0x18uLL);
  HGObject::HGObject(v6);
  *(_QWORD *)v6 = off_1E652DB70;
  *((_QWORD *)v6 + 2) = a3;
  v7 = (HGSynchronizable *)HGColorConform::s_NodeListCacheLock;
  v12 = HGColorConform::s_NodeListCacheLock;
  v13 = 0;
  HGSynchronizable::Lock((HGSynchronizable *)HGColorConform::s_NodeListCacheLock);
  Mutable = (CFMutableDictionaryRef)HGColorConform::s_NodeListCache;
  if (!HGColorConform::s_NodeListCache)
  {
    Mutable = CFDictionaryCreateMutable(0, 50, MEMORY[0x1E0C9B390], 0);
    HGColorConform::s_NodeListCache = (uint64_t)Mutable;
  }
  HGSynchronizable::Unlock(v7);
  if (Mutable)
  {
    MD5 = ColorSyncProfileGetMD5(a1);
    v15 = ColorSyncProfileGetMD5(a2);
    fillBufWithAsciiHexMD5(&v12, MD5.digest);
    fillBufWithAsciiHexMD5(v14, v15.digest);
    v9 = CFStringCreateWithBytes(0, (const UInt8 *)&v12, 64, 0x600u, 0);
    if (CFDictionaryGetCount((CFDictionaryRef)HGColorConform::s_NodeListCache) == 50)
    {
      Value = CFDictionaryGetValue((CFDictionaryRef)HGColorConform::s_NodeListCache, (const void *)HGColorConform::s_LastAddedCacheKey);
      (*(void (**)(const void *))(*(_QWORD *)Value + 24))(Value);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)HGColorConform::s_NodeListCache, (const void *)HGColorConform::s_LastAddedCacheKey);
    }
    CFDictionaryAddValue((CFMutableDictionaryRef)HGColorConform::s_NodeListCache, v9, v6);
    if (HGColorConform::s_LastAddedCacheKey)
      CFRelease((CFTypeRef)HGColorConform::s_LastAddedCacheKey);
    HGColorConform::s_LastAddedCacheKey = (uint64_t)v9;
  }
  return v6;
}

void sub_1B2AD0DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AD0DC0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ***HGColorConform::DeleteNodeList(void ***result)
{
  void **v1;
  void ***v2;
  _QWORD *v3;
  unint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;

  v1 = *result;
  if (*result)
  {
    v2 = result;
    v3 = *v1;
    if (*v1 != v1[1])
    {
      v4 = 0;
      v5 = 1;
      do
      {
        v6 = (_QWORD *)v3[v4];
        if (v6)
        {
          v7 = (void *)v6[28];
          if (v7)
          {
            v6[29] = v7;
            operator delete(v7);
          }
          v8 = v6[26];
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
          MEMORY[0x1B5E29170](v6, 0x1030C40C41003B7);
          v1 = *v2;
          v3 = **v2;
        }
        v4 = v5++;
      }
      while (v4 < ((_BYTE *)v1[1] - (_BYTE *)v3) >> 3);
    }
    if (v3)
    {
      v1[1] = v3;
      operator delete(v3);
    }
    result = (void ***)MEMORY[0x1B5E29170](v1, 0x80C40D6874129);
    *v2 = 0;
  }
  return result;
}

_BYTE *fillBufWithAsciiHexMD5(_BYTE *result, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  char v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  char v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  char v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  char v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  char v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  char v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  char v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  char v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  char v60;
  char v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  char v65;
  char v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  char v70;
  char v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  char v75;
  char v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  char v80;

  v2 = *a2;
  v3 = v2 & 0xF;
  v4 = (v2 >> 4) + 55;
  if (v2 < 0xA0)
    LOBYTE(v4) = (*a2 >> 4) | 0x30;
  *result = v4;
  v5 = v2 & 0xF | 0x30;
  v6 = v3 + 55;
  if (v3 < 0xA)
    v6 = v5;
  result[1] = v6;
  v7 = a2[1];
  v8 = v7 & 0xF;
  v9 = (v7 >> 4) + 55;
  if (v7 < 0xA0)
    LOBYTE(v9) = (a2[1] >> 4) | 0x30;
  result[2] = v9;
  v10 = v7 & 0xF | 0x30;
  v11 = v8 + 55;
  if (v8 < 0xA)
    v11 = v10;
  result[3] = v11;
  v12 = a2[2];
  v13 = v12 & 0xF;
  v14 = (v12 >> 4) + 55;
  if (v12 < 0xA0)
    LOBYTE(v14) = (a2[2] >> 4) | 0x30;
  result[4] = v14;
  v15 = v12 & 0xF | 0x30;
  v16 = v13 + 55;
  if (v13 < 0xA)
    v16 = v15;
  result[5] = v16;
  v17 = a2[3];
  v18 = v17 & 0xF;
  v19 = (v17 >> 4) + 55;
  if (v17 < 0xA0)
    LOBYTE(v19) = (a2[3] >> 4) | 0x30;
  result[6] = v19;
  v20 = v17 & 0xF | 0x30;
  v21 = v18 + 55;
  if (v18 < 0xA)
    v21 = v20;
  result[7] = v21;
  v22 = a2[4];
  v23 = v22 & 0xF;
  v24 = (v22 >> 4) + 55;
  if (v22 < 0xA0)
    LOBYTE(v24) = (a2[4] >> 4) | 0x30;
  result[8] = v24;
  v25 = v22 & 0xF | 0x30;
  v26 = v23 + 55;
  if (v23 < 0xA)
    v26 = v25;
  result[9] = v26;
  v27 = a2[5];
  v28 = v27 & 0xF;
  v29 = (v27 >> 4) + 55;
  if (v27 < 0xA0)
    LOBYTE(v29) = (a2[5] >> 4) | 0x30;
  result[10] = v29;
  v30 = v27 & 0xF | 0x30;
  v31 = v28 + 55;
  if (v28 < 0xA)
    v31 = v30;
  result[11] = v31;
  v32 = a2[6];
  v33 = v32 & 0xF;
  v34 = (v32 >> 4) + 55;
  if (v32 < 0xA0)
    LOBYTE(v34) = (a2[6] >> 4) | 0x30;
  result[12] = v34;
  v35 = v32 & 0xF | 0x30;
  v36 = v33 + 55;
  if (v33 < 0xA)
    v36 = v35;
  result[13] = v36;
  v37 = a2[7];
  v38 = v37 & 0xF;
  v39 = (v37 >> 4) + 55;
  if (v37 < 0xA0)
    LOBYTE(v39) = (a2[7] >> 4) | 0x30;
  result[14] = v39;
  v40 = v37 & 0xF | 0x30;
  v41 = v38 + 55;
  if (v38 < 0xA)
    v41 = v40;
  result[15] = v41;
  v42 = a2[8];
  v43 = v42 & 0xF;
  v44 = (v42 >> 4) + 55;
  if (v42 < 0xA0)
    LOBYTE(v44) = (a2[8] >> 4) | 0x30;
  result[16] = v44;
  v45 = v42 & 0xF | 0x30;
  v46 = v43 + 55;
  if (v43 < 0xA)
    v46 = v45;
  result[17] = v46;
  v47 = a2[9];
  v48 = v47 & 0xF;
  v49 = (v47 >> 4) + 55;
  if (v47 < 0xA0)
    LOBYTE(v49) = (a2[9] >> 4) | 0x30;
  result[18] = v49;
  v50 = v47 & 0xF | 0x30;
  v51 = v48 + 55;
  if (v48 < 0xA)
    v51 = v50;
  result[19] = v51;
  v52 = a2[10];
  v53 = v52 & 0xF;
  v54 = (v52 >> 4) + 55;
  if (v52 < 0xA0)
    LOBYTE(v54) = (a2[10] >> 4) | 0x30;
  result[20] = v54;
  v55 = v52 & 0xF | 0x30;
  v56 = v53 + 55;
  if (v53 < 0xA)
    v56 = v55;
  result[21] = v56;
  v57 = a2[11];
  v58 = v57 & 0xF;
  v59 = (v57 >> 4) + 55;
  if (v57 < 0xA0)
    LOBYTE(v59) = (a2[11] >> 4) | 0x30;
  result[22] = v59;
  v60 = v57 & 0xF | 0x30;
  v61 = v58 + 55;
  if (v58 < 0xA)
    v61 = v60;
  result[23] = v61;
  v62 = a2[12];
  v63 = v62 & 0xF;
  v64 = (v62 >> 4) + 55;
  if (v62 < 0xA0)
    LOBYTE(v64) = (a2[12] >> 4) | 0x30;
  result[24] = v64;
  v65 = v62 & 0xF | 0x30;
  v66 = v63 + 55;
  if (v63 < 0xA)
    v66 = v65;
  result[25] = v66;
  v67 = a2[13];
  v68 = v67 & 0xF;
  v69 = (v67 >> 4) + 55;
  if (v67 < 0xA0)
    LOBYTE(v69) = (a2[13] >> 4) | 0x30;
  result[26] = v69;
  v70 = v67 & 0xF | 0x30;
  v71 = v68 + 55;
  if (v68 < 0xA)
    v71 = v70;
  result[27] = v71;
  v72 = a2[14];
  v73 = v72 & 0xF;
  v74 = (v72 >> 4) + 55;
  if (v72 < 0xA0)
    LOBYTE(v74) = (a2[14] >> 4) | 0x30;
  result[28] = v74;
  v75 = v72 & 0xF | 0x30;
  v76 = v73 + 55;
  if (v73 < 0xA)
    v76 = v75;
  result[29] = v76;
  v77 = a2[15];
  v78 = v77 & 0xF;
  v79 = (v77 >> 4) + 55;
  if (v77 < 0xA0)
    LOBYTE(v79) = (a2[15] >> 4) | 0x30;
  result[30] = v79;
  v80 = v77 & 0xF | 0x30;
  if (v78 >= 0xA)
    v80 = v78 + 55;
  result[31] = v80;
  result[32] = 0;
  return result;
}

void HGColorConformNodeListCacheItem::~HGColorConformNodeListCacheItem(void ***this)
{
  *this = (void **)off_1E652DB70;
  HGColorConform::DeleteNodeList(this + 2);
  HGObject::~HGObject((HGObject *)this);
}

{
  void *v2;

  *this = (void **)off_1E652DB70;
  HGColorConform::DeleteNodeList(this + 2);
  HGObject::~HGObject((HGObject *)this);
  HGObject::operator delete(v2);
}

void HGColorConformLook3DLUT::SetBuffer(HGColorConformLook3DLUT *this, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = (CFTypeRef)*((_QWORD *)this + 2);
  if (v3 != cf)
  {
    if (v3)
      CFRelease(v3);
    *((_QWORD *)this + 2) = cf;
    if (cf)
      CFRetain(cf);
  }
}

void HGColorConformLook3DLUT::SetChecksum(HGColorConformLook3DLUT *this, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t *v3;
  _BYTE *v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  char v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  unint64_t v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;

  v3 = (unint64_t *)((char *)this + 64);
  v4 = (_BYTE *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 9) = v4;
  if (a3)
  {
    v8 = 0;
    while (1)
    {
      v10 = *((_QWORD *)this + 10);
      if ((unint64_t)v4 >= v10)
        break;
      *v4 = a2[v8];
      v9 = (uint64_t)(v4 + 1);
LABEL_4:
      *((_QWORD *)this + 9) = v9;
      ++v8;
      v4 = (_BYTE *)v9;
      if (v8 == a3)
        return;
    }
    v11 = *v3;
    v12 = (unint64_t)&v4[-*v3];
    v13 = v12 + 1;
    if ((uint64_t)(v12 + 1) < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = v10 - v11;
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = operator new(v15);
      v17 = (char *)v16 + v12;
      *((_BYTE *)v16 + v12) = a2[v8];
      v9 = (uint64_t)v16 + v12 + 1;
      if (v4 == (_BYTE *)v11)
      {
LABEL_24:
        *((_QWORD *)this + 8) = v17;
        *((_QWORD *)this + 9) = v9;
        *((_QWORD *)this + 10) = (char *)v16 + v15;
        if (v4)
          operator delete(v4);
        goto LABEL_4;
      }
    }
    else
    {
      v16 = 0;
      v17 = &v4[-*v3];
      *(_BYTE *)v12 = a2[v8];
      v9 = v12 + 1;
      if (v4 == (_BYTE *)v11)
        goto LABEL_24;
    }
    if (v12 < 8
      || (char *)v16 + v12 + v11 - (_QWORD)v4 > (char *)v16 + v12 - 1
      || v11 > (unint64_t)(v4 - 1)
      || v11 - (unint64_t)v16 < 0x20)
    {
      v18 = v4;
      goto LABEL_21;
    }
    if (v12 >= 0x20)
    {
      v21 = v12 & 0xFFFFFFFFFFFFFFE0;
      v22 = (char *)v16 + v12 - 16;
      v23 = (__int128 *)(v4 - 16);
      v24 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v25 = *v23;
        *(v22 - 1) = *(v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 2;
        v24 -= 32;
      }
      while (v24);
      if (v12 == v21)
        goto LABEL_23;
      if ((v12 & 0x18) == 0)
      {
        v17 -= v21;
        v18 = &v4[-v21];
LABEL_21:
        v19 = v17 - 1;
        do
        {
          v20 = *--v18;
          *v19-- = v20;
        }
        while (v18 != (_BYTE *)v11);
LABEL_23:
        v4 = (_BYTE *)*v3;
        v17 = (char *)v16;
        goto LABEL_24;
      }
    }
    else
    {
      v21 = 0;
    }
    v18 = &v4[-(v12 & 0xFFFFFFFFFFFFFFF8)];
    v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
    v26 = &v4[-v21 - v11 - 8 + (_QWORD)v16];
    v27 = (uint64_t *)&v4[-v21 - 8];
    v28 = v21 - (v12 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v29 = *v27--;
      *v26-- = v29;
      v28 += 8;
    }
    while (v28);
    if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_23;
    goto LABEL_21;
  }
}

void HGColorConformLook3DLUT::~HGColorConformLook3DLUT(HGColorConformLook3DLUT *this)
{
  const void *v2;
  void *v3;

  *(_QWORD *)this = off_1E652DBA8;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  HGObject::~HGObject(this);
}

{
  const void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_1E652DBA8;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  HGObject::~HGObject(this);
  HGObject::operator delete(v4);
}

HGObject *HGColorConformLUTData::HGColorConformLUTData(HGObject *a1, uint64_t a2, int a3)
{
  uint64_t v6;

  HGObject::HGObject(a1);
  *(_QWORD *)v6 = off_1E652DBE0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_DWORD *)(v6 + 32) = a3;
  *((_QWORD *)a1 + 3) = operator new[]();
  return a1;
}

void sub_1B2AD1620(_Unwind_Exception *a1)
{
  HGObject *v1;

  HGObject::~HGObject(v1);
  _Unwind_Resume(a1);
}

void HGColorConformLUTData::~HGColorConformLUTData(HGColorConformLUTData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E652DBE0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x1B5E2914C](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  HGObject::~HGObject(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E652DBE0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x1B5E2914C](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  HGObject::~HGObject(this);
  HGObject::operator delete(v3);
}

void HGColorConformLUTEntryFactory::~HGColorConformLUTEntryFactory(HGColorConformLUTEntryFactory *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t HGColorConformLUTEntryFactory::createLUTEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = operator new();
  HGApplyNDLUTEntry::HGApplyNDLUTEntry(v5, a2, a3);
  return v5;
}

void sub_1B2AD1738(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0xA1C40987D6AD5);
  _Unwind_Resume(a1);
}

uint64_t HGColorConformLUTInfo::HGColorConformLUTInfo(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, float a6, float a7)
{
  uint64_t v9;
  const void *v10;
  size_t v11;
  unsigned __int8 *v12;
  BOOL v13;
  int v14;

  v9 = HGApplyNDLUTInfo::HGApplyNDLUTInfo(a1, a2, a3, a5, a6, a7);
  *(_QWORD *)v9 = &off_1E652DC90;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 56) = 0;
  *(_BYTE *)(v9 + 48) = 1;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  v10 = *(const void **)a4;
  v11 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v11)
  {
    if ((v11 & 0x8000000000000000) != 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = (unsigned __int8 *)operator new(v11);
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 72) = &v12[v11];
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 64) = &v12[v11];
    v13 = 1;
    do
    {
      while (v13)
      {
        v14 = *v12++;
        v13 = v14 == 0;
        if (!--v11)
          goto LABEL_7;
      }
      v13 = 0;
      ++v12;
      --v11;
    }
    while (v11);
LABEL_7:
    *(_BYTE *)(a1 + 48) = v13;
  }
  return a1;
}

void sub_1B2AD1838(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  uint64_t v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(v1 + 40);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  _Unwind_Resume(exception_object);
}

void HGColorConformLUTInfo::~HGColorConformLUTInfo(HGColorConformLUTInfo *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E652DC90;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 5);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E652DC90;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 5);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  JUMPOUT(0x1B5E29170);
}

uint64_t HGColorConformLUTInfo::duplicate(HGColorConformLUTInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t FactoryForSerialization;
  unint64_t LUTEnd;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  char *v9;
  char *v10;
  float v11;
  float RangeOffset;
  int LUTStorageFormat;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;

  v2 = operator new();
  v3 = *((_QWORD *)this + 5);
  v18 = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  FactoryForSerialization = OZFactoryBase::getFactoryForSerialization((uint64_t)this);
  LUTEnd = PCICCTransferFunctionLUT::getLUTEnd(this);
  __p = 0;
  v16 = 0;
  v17 = 0;
  v7 = (_BYTE *)*((_QWORD *)this + 7);
  v6 = (_BYTE *)*((_QWORD *)this + 8);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if ((v8 & 0x8000000000000000) != 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - v7);
    v10 = &v9[v8];
    __p = v9;
    v17 = &v9[v8];
    memcpy(v9, v7, v8);
    v16 = v10;
  }
  v11 = PCICCTransferFunctionParametric3::getD(this);
  RangeOffset = HGApplyNDLUTInfo::getRangeOffset(this);
  LUTStorageFormat = HGApplyNDLUTInfo::getLUTStorageFormat(this);
  HGColorConformLUTInfo::HGColorConformLUTInfo(v2, &v18, FactoryForSerialization, LUTEnd, (uint64_t)&__p, LUTStorageFormat, v11, RangeOffset);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  return v2;
}

void sub_1B2AD1A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  MEMORY[0x1B5E29170](v12, 0x10B1C40693A545BLL);
  _Unwind_Resume(a1);
}

PCICCTransferFunctionLUT *HGColorConformLUTInfo::isEqual(uint64_t a1, void *lpsrc)
{
  PCICCTransferFunctionLUT *result;
  PCICCTransferFunctionLUT *v4;
  uint64_t LUTEnd;
  uint64_t FactoryForSerialization;
  int LUTStorageFormat;
  const void *v8;
  size_t v9;
  const void *v10;

  if (!lpsrc)
    return 0;
  if (result)
  {
    if (*(_BYTE *)(a1 + 48))
    {
      return 0;
    }
    else
    {
      v4 = result;
      if (!*((_BYTE *)result + 48)
        && (LUTEnd = PCICCTransferFunctionLUT::getLUTEnd((PCICCTransferFunctionLUT *)a1),
            LUTEnd == PCICCTransferFunctionLUT::getLUTEnd(v4))
        && (FactoryForSerialization = OZFactoryBase::getFactoryForSerialization(a1),
            FactoryForSerialization == OZFactoryBase::getFactoryForSerialization((uint64_t)v4))
        && (LUTStorageFormat = HGApplyNDLUTInfo::getLUTStorageFormat((HGApplyNDLUTInfo *)a1),
            LUTStorageFormat == HGApplyNDLUTInfo::getLUTStorageFormat(v4))
        && (v8 = *(const void **)(a1 + 56),
            v9 = *(_QWORD *)(a1 + 64) - (_QWORD)v8,
            v10 = (const void *)*((_QWORD *)v4 + 7),
            v9 == *((_QWORD *)v4 + 8) - (_QWORD)v10))
      {
        return (PCICCTransferFunctionLUT *)(memcmp(v8, v10, v9) == 0);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void HGColorConformLUTInfo::colorAtIndex(HGColorConformLUTInfo *this, float a2, float a3, float a4, float *a5, float *a6, float *a7, float *a8)
{
  uint64_t LUTEnd;
  unint64_t FactoryForSerialization;
  float v18;
  float v19;
  signed int v20;
  HGApplyNDLUTInfo *v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  signed int v29;
  signed int v30;
  signed int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  _WORD *v36;
  unsigned int v37;
  unsigned int v38;
  float v39;
  uint64_t v40;
  float *v41;
  float *v42;

  LUTEnd = PCICCTransferFunctionLUT::getLUTEnd(this);
  FactoryForSerialization = OZFactoryBase::getFactoryForSerialization((uint64_t)this);
  if (LUTEnd == 3)
  {
    v22 = *(_DWORD *)(*((_QWORD *)this + 5) + 32);
    v23 = a2 - HGApplyNDLUTInfo::getRangeOffset(this);
    v24 = (float)(FactoryForSerialization - 1);
    v25 = fmaxf(fminf(v23 / PCICCTransferFunctionParametric3::getD(this), 1.0), 0.0) * v24;
    v26 = a3 - HGApplyNDLUTInfo::getRangeOffset(this);
    v27 = fmaxf(fminf(v26 / PCICCTransferFunctionParametric3::getD(this), 1.0), 0.0) * v24;
    v28 = a4 - HGApplyNDLUTInfo::getRangeOffset(this);
    v29 = llroundf(v25);
    v30 = llroundf(v27);
    v31 = llroundf(fmaxf(fminf(v28 / PCICCTransferFunctionParametric3::getD(this), 1.0), 0.0) * v24);
    v32 = HGFormatUtils::bytesPerPixel(v22);
    v34 = FactoryForSerialization * v32;
    v35 = v34 * FactoryForSerialization;
    if (v22 == 25 || v22 == 19)
    {
      v36 = (_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + v29 * (unint64_t)v32 + v34 * v30 + v35 * v31);
      LOWORD(v33) = *v36;
      *(float *)&v37 = (float)v33 / 65535.0;
      *a5 = *(float *)&v37;
      LOWORD(v37) = v36[1];
      *(float *)&v38 = (float)v37 / 65535.0;
      *a6 = *(float *)&v38;
      LOWORD(v38) = v36[2];
      v39 = (float)v38 / 65535.0;
    }
    else
    {
      v42 = (float *)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + v29 * (unint64_t)v32 + v34 * v30 + v35 * v31);
      *a5 = *v42;
      *a6 = v42[1];
      v39 = v42[2];
    }
    *a7 = v39;
    *a8 = 1.0;
  }
  else
  {
    if (LUTEnd != 1)
    {
      v21 = this;
      v19 = a2;
      goto LABEL_9;
    }
    v18 = a2 - HGApplyNDLUTInfo::getRangeOffset(this);
    v19 = fmaxf(fminf(v18 / PCICCTransferFunctionParametric3::getD(this), 1.0), 0.0)
        * (float)(FactoryForSerialization - 1);
    v20 = llroundf(v19);
    if (FactoryForSerialization < v20)
    {
      v21 = this;
LABEL_9:
      HGApplyNDLUTInfo::colorAtIndex(v21, v19, a3, a4, a5, a6, a7, a8);
      return;
    }
    v40 = *(_QWORD *)(*((_QWORD *)this + 5) + 24);
    v41 = (float *)(v40 + 16 * v20);
    *a5 = *v41;
    *a6 = *(float *)(v40 + 16 * v20 + 4);
    *a7 = v41[2];
    *a8 = v41[3];
  }
}

uint64_t HGColorConformLUTInfo::HGColorConformLUTInfo(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, float a7, float a8)
{
  uint64_t v11;
  const void *v12;
  size_t v13;
  unsigned __int8 *v14;
  BOOL v15;
  int v16;

  *(_QWORD *)HGApplyNDLUTInfo::HGApplyNDLUTInfo(a1, a3, a4, a6, a7, a8) = &off_1E652DC90;
  v11 = *a2;
  *(_QWORD *)(a1 + 40) = *a2;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = *(const void **)a5;
  v13 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v13)
  {
    if ((v13 & 0x8000000000000000) != 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = (unsigned __int8 *)operator new(v13);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[v13];
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 64) = &v14[v13];
    v15 = 1;
    do
    {
      while (v15)
      {
        v16 = *v14++;
        v15 = v16 == 0;
        if (!--v13)
          goto LABEL_9;
      }
      v15 = 0;
      ++v14;
      --v13;
    }
    while (v13);
LABEL_9:
    *(_BYTE *)(a1 + 48) = v15;
  }
  return a1;
}

void sub_1B2AD1F7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  uint64_t v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(v1 + 40);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  _Unwind_Resume(exception_object);
}

void HGWhiteBalanceRAW::~HGWhiteBalanceRAW(HGNode *this)
{
  void *v1;

  HgcWhiteBalanceRAW::~HgcWhiteBalanceRAW(this);
  HGObject::operator delete(v1);
}

uint64_t HGWhiteBalanceRAW::GetDOD(HGWhiteBalanceRAW *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HGWhiteBalanceRAW::GetROI(HGWhiteBalanceRAW *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v6, v5, v7);
}

uint64_t HGColorMatrix::SetParameter(HGColorMatrix *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v7;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  v7 = (float *)((char *)this + 16 * a2 + 432);
  if (*v7 == a3
    && *((float *)this + 4 * a2 + 109) == a4
    && *((float *)this + 4 * a2 + 110) == a5
    && *((float *)this + 4 * a2 + 111) == a6)
  {
    return 0;
  }
  *v7 = a3;
  *((float *)this + 4 * a2 + 109) = a4;
  *((float *)this + 4 * a2 + 110) = a5;
  *((float *)this + 4 * a2 + 111) = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

HGNode *HGColorMatrix::GetOutput(HGColorMatrix *this, HGRenderer *a2, double a3, double a4, int32x2_t a5)
{
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  HGNode *Input;
  HGNode *v12;
  int v13;
  HGColorMatrix *v14;
  HGNode *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;

  a5.i32[0] = 925353388;
  if (HGMath::IsEqualWithinTolerance(*((float32x4_t *)this + 27), (float32x4_t)xmmword_1B304F230, a5))
  {
    v7.i32[0] = 925353388;
    if (HGMath::IsEqualWithinTolerance(*((float32x4_t *)this + 28), (float32x4_t)xmmword_1B304F240, v7))
    {
      v8.i32[0] = 925353388;
      if (HGMath::IsEqualWithinTolerance(*((float32x4_t *)this + 29), (float32x4_t)xmmword_1B304F250, v8))
      {
        v9.i32[0] = 925353388;
        if (HGMath::IsEqualWithinTolerance(*((float32x4_t *)this + 30), (float32x4_t)xmmword_1B304EFF0, v9))
          return HGRenderer::GetInput(a2, (HGNode *)this, 0);
      }
    }
  }
  if (HGRenderer::IsMergeable(a2, (HGNode *)this, 0, 0))
  {
    Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
    if (Input)
    {
      v12 = Input;
      v13 = *((_DWORD *)Input + 3);
      if (v13 == -735746938)
      {
LABEL_13:
        v16 = *((float32x4_t *)this + 27);
        v17 = *((float32x4_t *)this + 28);
        v18 = *((float32x4_t *)this + 29);
        v19 = *((float32x4_t *)this + 30);
        v20 = vaddq_f32(vmulq_laneq_f32(v19, *((float32x4_t *)v12 + 28), 3), vaddq_f32(vmulq_laneq_f32(v18, *((float32x4_t *)v12 + 28), 2), vaddq_f32(vmulq_lane_f32(v17, *(float32x2_t *)((char *)v12 + 448), 1), vmulq_n_f32(v16, COERCE_FLOAT(*((_OWORD *)v12 + 28))))));
        *((float32x4_t *)v12 + 27) = vaddq_f32(vmulq_laneq_f32(v19, *((float32x4_t *)v12 + 27), 3), vaddq_f32(vmulq_laneq_f32(v18, *((float32x4_t *)v12 + 27), 2), vaddq_f32(vmulq_lane_f32(v17, *(float32x2_t *)((char *)v12 + 432), 1), vmulq_n_f32(v16, COERCE_FLOAT(*((_OWORD *)v12 + 27))))));
        *((float32x4_t *)v12 + 28) = v20;
        v21 = vaddq_f32(vmulq_laneq_f32(v19, *((float32x4_t *)v12 + 29), 3), vaddq_f32(vmulq_laneq_f32(v18, *((float32x4_t *)v12 + 29), 2), vaddq_f32(vmulq_lane_f32(v17, *(float32x2_t *)((char *)v12 + 464), 1), vmulq_n_f32(v16, COERCE_FLOAT(*((_OWORD *)v12 + 29))))));
        v22 = vaddq_f32(vmulq_laneq_f32(v19, *((float32x4_t *)v12 + 30), 3), vaddq_f32(vmulq_laneq_f32(v18, *((float32x4_t *)v12 + 30), 2), vaddq_f32(vmulq_lane_f32(v17, *(float32x2_t *)((char *)v12 + 480), 1), vmulq_n_f32(v16, COERCE_FLOAT(*((_OWORD *)v12 + 30))))));
        *((float32x4_t *)v12 + 29) = v21;
        *((float32x4_t *)v12 + 30) = v22;
        HGColorMatrix::ParameterizeMatrix((__n128 *)v12, a2);
        return v12;
      }
      if (v13 == -735746939)
      {
        v14 = (HGColorMatrix *)*((_QWORD *)this + 51);
        if (!v14)
        {
          v14 = (HGColorMatrix *)HGObject::operator new(0x1F0uLL);
          HGColorMatrix::HGColorMatrix(v14);
          *((_QWORD *)this + 51) = v14;
          *((_DWORD *)v14 + 3) = -735746938;
        }
        *((_OWORD *)v14 + 27) = *((_OWORD *)v12 + 27);
        *((_OWORD *)v14 + 28) = *((_OWORD *)v12 + 28);
        *((_OWORD *)v14 + 29) = *((_OWORD *)v12 + 29);
        *((_OWORD *)v14 + 30) = *((_OWORD *)v12 + 30);
        v15 = HGRenderer::GetInput(a2, v12, 0);
        (*(void (**)(HGColorMatrix *, _QWORD, HGNode *))(*(_QWORD *)v14 + 120))(v14, 0, v15);
        v12 = (HGNode *)v14;
        goto LABEL_13;
      }
    }
  }
  v23 = *((_QWORD *)this + 51);
  if (v23)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 120))(v23, 0, 0);
  HGColorMatrix::ParameterizeMatrix((__n128 *)this, a2);
  return (HGNode *)this;
}

void sub_1B2AD2320(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

_OWORD *HGColorMatrix::LoadMatrix(_OWORD *result, _OWORD *a2, char a3)
{
  int32x4_t v3;
  const float *v4;
  int32x4_t v5;
  int8x16_t v6;
  __int128 v7;
  int8x16_t v8;
  __int128 v9;
  float32x2x4_t v10;

  v3 = *(int32x4_t *)a2;
  if ((a3 & 1) != 0)
  {
    v4 = (const float *)(a2 + 2);
    v10 = vld4_f32(v4);
    v5 = *((int32x4_t *)a2 + 1);
    v6 = (int8x16_t)vtrn1q_s32(v3, v5);
    *(_QWORD *)&v7 = vextq_s8(v6, v6, 8uLL).u64[0];
    v6.i64[1] = (uint64_t)v10.val[0];
    v8 = (int8x16_t)vtrn2q_s32(v3, v5);
    *(_QWORD *)&v9 = vextq_s8(v8, v8, 8uLL).u64[0];
    v8.i64[1] = (uint64_t)v10.val[1];
    result[27] = v6;
    result[28] = v8;
    *((_QWORD *)&v7 + 1) = v10.val[2];
    *((_QWORD *)&v9 + 1) = v10.val[3];
    result[29] = v7;
  }
  else
  {
    result[27] = v3;
    result[28] = a2[1];
    result[29] = a2[2];
    v9 = a2[3];
  }
  result[30] = v9;
  return result;
}

float32x4_t HGColorMatrix::MultMatrix(float32x4_t *a1, float32x4_t *a2, char a3)
{
  float32x4_t v3;
  float32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  const float *f32;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t result;
  float32x2x4_t v13;

  v3 = *a2;
  v4 = a2[1];
  if ((a3 & 1) != 0)
  {
    v5 = (int8x16_t)vtrn2q_s32((int32x4_t)v3, (int32x4_t)v4);
    v6 = (int8x16_t)vtrn1q_s32((int32x4_t)v3, (int32x4_t)v4);
    f32 = a2[2].f32;
    v13 = vld4_f32(f32);
    v3.i64[0] = v6.i64[0];
    v3.i64[1] = (uint64_t)v13.val[0];
    v4.i64[0] = v5.i64[0];
    v4.i64[1] = (uint64_t)v13.val[1];
    v8.i64[0] = vextq_s8(v6, v6, 8uLL).u64[0];
    v8.i64[1] = (uint64_t)v13.val[2];
    v9.i64[0] = vextq_s8(v5, v5, 8uLL).u64[0];
    v9.i64[1] = (uint64_t)v13.val[3];
  }
  else
  {
    v8 = a2[2];
    v9 = a2[3];
  }
  v10 = vaddq_f32(vmulq_laneq_f32(v9, a1[28], 3), vaddq_f32(vmulq_laneq_f32(v8, a1[28], 2), vaddq_f32(vmulq_lane_f32(v4, *(float32x2_t *)a1[28].f32, 1), vmulq_n_f32(v3, COERCE_FLOAT(*(_OWORD *)&a1[28])))));
  a1[27] = vaddq_f32(vmulq_laneq_f32(v9, a1[27], 3), vaddq_f32(vmulq_laneq_f32(v8, a1[27], 2), vaddq_f32(vmulq_lane_f32(v4, *(float32x2_t *)a1[27].f32, 1), vmulq_n_f32(v3, COERCE_FLOAT(*(_OWORD *)&a1[27])))));
  a1[28] = v10;
  v11 = vaddq_f32(vmulq_laneq_f32(v9, a1[29], 3), vaddq_f32(vmulq_laneq_f32(v8, a1[29], 2), vaddq_f32(vmulq_lane_f32(v4, *(float32x2_t *)a1[29].f32, 1), vmulq_n_f32(v3, COERCE_FLOAT(*(_OWORD *)&a1[29])))));
  result = vaddq_f32(vmulq_laneq_f32(v9, a1[30], 3), vaddq_f32(vmulq_laneq_f32(v8, a1[30], 2), vaddq_f32(vmulq_lane_f32(v4, *(float32x2_t *)a1[30].f32, 1), vmulq_n_f32(v3, COERCE_FLOAT(*(_OWORD *)&a1[30])))));
  a1[29] = v11;
  a1[30] = result;
  return result;
}

float32x4_t HGColorMatrix::Scale(float32x4_t *this, float a2, float a3, float32_t a4)
{
  float32x4_t v9;
  float32x4_t result;

  __asm { FMOV            V3.4S, #1.0 }
  _Q3.i64[0] = __PAIR64__(LODWORD(a3), LODWORD(a2));
  _Q3.f32[2] = a4;
  v9 = vmulq_f32(_Q3, this[28]);
  this[27] = vmulq_f32(_Q3, this[27]);
  this[28] = v9;
  result = vmulq_f32(_Q3, this[29]);
  this[29] = result;
  return result;
}

float32x4_t HGColorMatrix::Translate(float32x4_t *this, float a2, float a3, float32_t a4)
{
  float32x4_t v9;
  float32x4_t result;

  __asm { FMOV            V3.4S, #1.0 }
  _Q3.i64[0] = __PAIR64__(LODWORD(a3), LODWORD(a2));
  _Q3.f32[2] = a4;
  v9 = vaddq_f32(vmulq_laneq_f32(_Q3, this[28], 3), vaddq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B304F250, this[28], 2), vaddq_f32(vmulq_lane_f32((float32x4_t)xmmword_1B304F240, *(float32x2_t *)this[28].f32, 1), vmulq_n_f32((float32x4_t)xmmword_1B304F230, COERCE_FLOAT(*(_OWORD *)&this[28])))));
  this[27] = vaddq_f32(vmulq_laneq_f32(_Q3, this[27], 3), vaddq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B304F250, this[27], 2), vaddq_f32(vmulq_lane_f32((float32x4_t)xmmword_1B304F240, *(float32x2_t *)this[27].f32, 1), vmulq_n_f32((float32x4_t)xmmword_1B304F230, COERCE_FLOAT(*(_OWORD *)&this[27])))));
  this[28] = v9;
  result = vaddq_f32(vmulq_laneq_f32(_Q3, this[30], 3), vaddq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B304F250, this[30], 2), vaddq_f32(vmulq_lane_f32((float32x4_t)xmmword_1B304F240, *(float32x2_t *)this[30].f32, 1), vmulq_n_f32((float32x4_t)xmmword_1B304F230, COERCE_FLOAT(*(_OWORD *)&this[30])))));
  this[29] = vaddq_f32(vmulq_laneq_f32(_Q3, this[29], 3), vaddq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B304F250, this[29], 2), vaddq_f32(vmulq_lane_f32((float32x4_t)xmmword_1B304F240, *(float32x2_t *)this[29].f32, 1), vmulq_n_f32((float32x4_t)xmmword_1B304F230, COERCE_FLOAT(*(_OWORD *)&this[29])))));
  this[30] = result;
  return result;
}

uint64_t HGColorMatrix::info@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  if (a2 >= 1)
    return HGLoggerUtils::matrixPrettyString(result + 432, 4, 4, a3, a4);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  return result;
}

uint64_t c0()
{
  return 0;
}

uint64_t c1(uint64_t a1, float32x4_t *a2, int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  float32x4_t *v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  float32x4_t v15;
  unsigned int i;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int v22;
  unint64_t v23;

  v3 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 8);
    v5 = v4 - *(_DWORD *)a1;
    v6 = *(_QWORD *)(a1 + 80) + 16 * a3;
    v7 = *(float32x4_t **)(a1 + 16);
    v8 = *a2;
    v9 = (int)(*(_DWORD *)(a1 + 24) - v5);
    v10 = (int)(*(_DWORD *)(a1 + 88) - v5);
    if (v5 >= 4)
    {
      do
      {
        for (i = v5; i > 3; i -= 4)
        {
          v19 = *(float32x4_t *)(v6 + 32);
          v20 = *(float32x4_t *)(v6 + 48);
          v21 = vmulq_f32(v8, *(float32x4_t *)(v6 + 16));
          *v7 = vmulq_f32(v8, *(float32x4_t *)v6);
          v7[1] = v21;
          v7[2] = vmulq_f32(v8, v19);
          v7[3] = vmulq_f32(v8, v20);
          v7 += 4;
          v6 += 64;
        }
        if (i)
        {
          v22 = 0;
          v23 = 0;
          do
          {
            v7[v23 / 0x10] = vmulq_f32(v8, *(float32x4_t *)(v6 + v23));
            v23 += 16;
            ++v22;
          }
          while (i != v22);
          v7 = (float32x4_t *)((char *)v7 + v23);
          v6 += v23;
        }
        v7 += v9;
        v6 += 16 * v10;
        --v3;
      }
      while (v3);
    }
    else if (v5)
    {
      v11 = 16 * v9;
      v12 = 16 * v10;
      v13 = *(_DWORD *)a1 - v4;
      do
      {
        v14 = v13;
        do
        {
          v15 = *(float32x4_t *)v6;
          v6 += 16;
          *v7++ = vmulq_f32(v8, v15);
        }
        while (!__CFADD__(v14++, 1));
        v7 = (float32x4_t *)((char *)v7 + v11);
        v6 += v12;
        --v3;
      }
      while (v3);
    }
  }
  return 1;
}

uint64_t c2x(uint64_t a1, float32x4_t *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  unsigned int i;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  int v25;

  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 4);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    v6 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
    v7 = *(_QWORD *)(a1 + 80);
    v8 = *(float32x4_t **)(a1 + 16);
    v9 = *a2;
    v10 = a2[1];
    v11 = (int)(*(_DWORD *)(a1 + 24) - v6);
    v12 = (int)(*(_DWORD *)(a1 + 88) - v6);
    if (v6 < 2)
    {
      if (v6)
      {
        v24 = (float32x4_t *)(v7 + 16 * a3 + 16);
        v25 = v4 - v3;
        do
        {
          *v8 = vaddq_f32(vmulq_f32(v9, v24[-1]), vmulq_f32(v10, *v24));
          v8 += v11 + 1;
          v24 += v12 + 1;
        }
        while (!__CFADD__(v25++, 1));
      }
    }
    else
    {
      v13 = (float32x4_t *)(v7 + 16 * a3);
      v14 = 16 * v11 - 32;
      v15 = 16 * v12 - 32;
      do
      {
        v18 = 0;
        v19 = *v13;
        for (i = v6; i > 1; i -= 2)
        {
          v21 = vmulq_f32(v9, v19);
          v22 = v13[v18 + 1];
          v19 = v13[v18 + 2];
          v23 = &v8[v18];
          *v23 = vaddq_f32(v21, vmulq_f32(v10, v22));
          v23[1] = vaddq_f32(vmulq_f32(v9, v22), vmulq_f32(v10, v19));
          v18 += 2;
        }
        if (i)
        {
          v8[v18] = vaddq_f32(vmulq_f32(v9, v19), vmulq_f32(v10, v13[v18 + 1]));
          v16 = 3;
        }
        else
        {
          v16 = 2;
        }
        v17 = 16 * v16;
        v8 = (float32x4_t *)((char *)v8 + v14 + v17 + v18 * 16);
        v13 = (float32x4_t *)((char *)v13 + v15 + v17 + v18 * 16);
        --v5;
      }
      while (v5);
    }
  }
  return 2;
}

uint64_t c3x(uint64_t a1, float32x4_t *a2, int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v23;
  float32x4_t v24;
  unsigned int i;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;

  v3 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 8);
    v5 = v4 - *(_DWORD *)a1;
    v6 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * a3);
    v7 = *(float32x4_t **)(a1 + 16);
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    v11 = (int)(*(_DWORD *)(a1 + 24) - v5);
    v12 = (int)(*(_DWORD *)(a1 + 88) - v5);
    if (v5 >= 3)
    {
      do
      {
        v23 = *v6;
        v24 = v6[1];
        for (i = v5; i > 2; i -= 3)
        {
          v26 = vmulq_f32(v8, v23);
          v27 = v6[3];
          v6 += 3;
          v23 = v27;
          v28 = v6[-1];
          *v7 = vaddq_f32(vmulq_f32(v9, v24), vaddq_f32(v26, vmulq_f32(v10, v28)));
          v29 = vaddq_f32(vmulq_f32(v9, v28), vaddq_f32(vmulq_f32(v8, v24), vmulq_f32(v10, v27)));
          v24 = v6[1];
          v7[1] = v29;
          v7[2] = vaddq_f32(vmulq_f32(v9, v27), vaddq_f32(vmulq_f32(v8, v28), vmulq_f32(v10, v24)));
          v7 += 3;
        }
        if (i)
        {
          v30 = 0;
          v31 = 0;
          do
          {
            v32 = vmulq_f32(v8, v23);
            v33 = vmulq_f32(v9, v24);
            v23 = v24;
            v24 = v6[v31 + 2];
            v7[v31++] = vaddq_f32(v33, vaddq_f32(v32, vmulq_f32(v10, v24)));
            ++v30;
          }
          while (i != v30);
          v7 = (float32x4_t *)((char *)v7 + v31 * 16);
          v6 = (float32x4_t *)((char *)v6 + v31 * 16);
        }
        v7 += v11;
        v6 += v12;
        --v3;
      }
      while (v3);
    }
    else if (v5)
    {
      v13 = 16 * v11;
      v14 = 16 * v12;
      v15 = *(_DWORD *)a1 - v4;
      do
      {
        v16 = *v6;
        v17 = v6[1];
        v18 = v15;
        do
        {
          v19 = vmulq_f32(v8, v16);
          v20 = vmulq_f32(v9, v17);
          v16 = v17;
          v17 = v6[2];
          *v7++ = vaddq_f32(v20, vaddq_f32(v19, vmulq_f32(v10, v17)));
          ++v6;
        }
        while (!__CFADD__(v18++, 1));
        v7 = (float32x4_t *)((char *)v7 + v13);
        v6 = (float32x4_t *)((char *)v6 + v14);
        --v3;
      }
      while (v3);
    }
  }
  return 3;
}

uint64_t c4x(uint64_t a1, float32x4_t *a2, int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  int v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v25;
  float32x4_t v26;
  unsigned int v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;

  v3 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 8);
    v5 = v4 - *(_DWORD *)a1;
    v6 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * a3);
    v7 = *(float32x4_t **)(a1 + 16);
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    v11 = a2[3];
    v12 = (int)(*(_DWORD *)(a1 + 24) - v5);
    v13 = (int)(*(_DWORD *)(a1 + 88) - v5);
    if (v5 >= 4)
    {
      do
      {
        v25 = *v6;
        v26 = v6[1];
        v27 = v5;
        v28 = v6[2];
        do
        {
          v29 = vmulq_f32(v8, v25);
          v30 = v6[4];
          v6 += 4;
          v25 = v30;
          v31 = v6[-1];
          *v7 = vaddq_f32(vaddq_f32(v29, vmulq_f32(v10, v28)), vaddq_f32(vmulq_f32(v9, v26), vmulq_f32(v11, v31)));
          v32 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v26), vmulq_f32(v10, v31)), vaddq_f32(vmulq_f32(v9, v28), vmulq_f32(v11, v30)));
          v26 = v6[1];
          v7[1] = v32;
          v33 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v28), vmulq_f32(v10, v30)), vaddq_f32(vmulq_f32(v9, v31), vmulq_f32(v11, v26)));
          v28 = v6[2];
          v7[2] = v33;
          v7[3] = vaddq_f32(vaddq_f32(vmulq_f32(v8, v31), vmulq_f32(v10, v26)), vaddq_f32(vmulq_f32(v9, v30), vmulq_f32(v11, v28)));
          v7 += 4;
          v27 -= 4;
        }
        while (v27 > 3);
        if (v27)
        {
          v34 = 0;
          v35 = 0;
          do
          {
            v36 = vmulq_f32(v8, v25);
            v37 = vmulq_f32(v9, v26);
            v25 = v26;
            v26 = v28;
            v28 = v6[v35 + 3];
            v7[v35++] = vaddq_f32(vaddq_f32(v36, vmulq_f32(v10, v26)), vaddq_f32(v37, vmulq_f32(v11, v28)));
            ++v34;
          }
          while (v27 != v34);
          v7 = (float32x4_t *)((char *)v7 + v35 * 16);
          v6 = (float32x4_t *)((char *)v6 + v35 * 16);
        }
        v7 += v12;
        v6 += v13;
        --v3;
      }
      while (v3);
    }
    else if (v5)
    {
      v14 = 16 * v12;
      v15 = 16 * v13;
      v16 = *(_DWORD *)a1 - v4;
      do
      {
        v17 = *v6;
        v18 = v6[1];
        v19 = v16;
        v20 = v6[2];
        do
        {
          v21 = vmulq_f32(v8, v17);
          v22 = vmulq_f32(v9, v18);
          v17 = v18;
          v18 = v20;
          v20 = v6[3];
          *v7++ = vaddq_f32(vaddq_f32(v21, vmulq_f32(v10, v18)), vaddq_f32(v22, vmulq_f32(v11, v20)));
          ++v6;
        }
        while (!__CFADD__(v19++, 1));
        v7 = (float32x4_t *)((char *)v7 + v14);
        v6 = (float32x4_t *)((char *)v6 + v15);
        --v3;
      }
      while (v3);
    }
  }
  return 4;
}

uint64_t c5x(uint64_t a1, float32x4_t *a2, int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  float32x4_t *v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  unsigned int i;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t v50;
  unsigned int j;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int v56;
  float32x4_t *v57;

  v3 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 8);
    v5 = v4 - *(_DWORD *)a1;
    v6 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * a3);
    v7 = *(float32x4_t **)(a1 + 16);
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    v11 = (int)(*(_DWORD *)(a1 + 24) - v5);
    v12 = (int)(*(_DWORD *)(a1 + 88) - v5);
    if (v5 >= 3)
    {
      do
      {
        v36 = *v6;
        v37 = v6[1];
        for (i = v5; i > 2; i -= 3)
        {
          v39 = vmulq_f32(v8, v36);
          v40 = v6[3];
          v6 += 3;
          v36 = v40;
          v41 = v6[-1];
          *v7 = vaddq_f32(vmulq_f32(v9, v37), vaddq_f32(v39, vmulq_f32(v10, v41)));
          v42 = vaddq_f32(vmulq_f32(v9, v41), vaddq_f32(vmulq_f32(v8, v37), vmulq_f32(v10, v40)));
          v37 = v6[1];
          v7[1] = v42;
          v7[2] = vaddq_f32(vmulq_f32(v9, v40), vaddq_f32(vmulq_f32(v8, v41), vmulq_f32(v10, v37)));
          v7 += 3;
        }
        if (i)
        {
          v43 = 0;
          v44 = 0;
          do
          {
            v45 = vmulq_f32(v8, v36);
            v46 = vmulq_f32(v9, v37);
            v36 = v37;
            v37 = v6[v44 + 2];
            v7[v44++] = vaddq_f32(v46, vaddq_f32(v45, vmulq_f32(v10, v37)));
            ++v43;
          }
          while (i != v43);
          v7 = (float32x4_t *)((char *)v7 + v44 * 16);
          v6 = (float32x4_t *)((char *)v6 + v44 * 16);
        }
        v7 += v11;
        v6 += v12;
        --v3;
      }
      while (v3);
    }
    else if (v5)
    {
      v13 = 16 * v11;
      v14 = 16 * v12;
      v15 = *(_DWORD *)a1 - v4;
      do
      {
        v16 = *v6;
        v17 = v6[1];
        v18 = v15;
        do
        {
          v19 = vmulq_f32(v8, v16);
          v20 = vmulq_f32(v9, v17);
          v16 = v17;
          v17 = v6[2];
          *v7++ = vaddq_f32(v20, vaddq_f32(v19, vmulq_f32(v10, v17)));
          ++v6;
          v21 = __CFADD__(v18++, 1);
        }
        while (!v21);
        v7 = (float32x4_t *)((char *)v7 + v13);
        v6 = (float32x4_t *)((char *)v6 + v14);
        --v3;
      }
      while (v3);
    }
  }
  v22 = a3 + 3;
  v23 = *(_DWORD *)(a1 + 12);
  v24 = *(_DWORD *)(a1 + 4);
  v25 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  v26 = *(_QWORD *)(a1 + 80);
  v27 = *(float32x4_t **)(a1 + 16);
  v28 = a2[3];
  v29 = a2[4];
  v30 = (int)(*(_DWORD *)(a1 + 24) - v25);
  v31 = (int)(*(_DWORD *)(a1 + 88) - v25);
  if (v25 < 2)
  {
    if (v25)
    {
      v56 = v24 - v23;
      v57 = (float32x4_t *)(v26 + 16 * v22 + 16);
      do
      {
        *v27 = vaddq_f32(vmulq_f32(v29, *v57), vaddq_f32(vmulq_f32(v28, v57[-1]), *v27));
        v57 += v31 + 1;
        v27 += v30 + 1;
        v21 = __CFADD__(v56++, 1);
      }
      while (!v21);
    }
  }
  else
  {
    v32 = v23 - v24;
    v33 = (float32x4_t *)(v26 + 16 * v22);
    v34 = 16 * v30 - 32;
    v35 = 16 * v31 - 32;
    do
    {
      v49 = 0;
      v50 = *v33;
      for (j = v25; j > 1; j -= 2)
      {
        v52 = &v27[v49];
        v53 = vaddq_f32(vmulq_f32(v28, v50), v27[v49]);
        v54 = v33[v49 + 1];
        v50 = v33[v49 + 2];
        v55 = vaddq_f32(vmulq_f32(v29, v50), vaddq_f32(vmulq_f32(v28, v54), v27[v49 + 1]));
        *v52 = vaddq_f32(vmulq_f32(v29, v54), v53);
        v52[1] = v55;
        v49 += 2;
      }
      if (j)
      {
        v27[v49] = vaddq_f32(vmulq_f32(v29, v33[v49 + 1]), vaddq_f32(vmulq_f32(v28, v50), v27[v49]));
        v47 = 3;
      }
      else
      {
        v47 = 2;
      }
      v48 = 16 * v47;
      v27 = (float32x4_t *)((char *)v27 + v34 + v48 + v49 * 16);
      v33 = (float32x4_t *)((char *)v33 + v35 + v48 + v49 * 16);
      --v32;
    }
    while (v32);
  }
  return 5;
}

uint64_t c6x(uint64_t a1, float32x4_t *a2, int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  int v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v41;
  float32x4_t v42;
  unsigned int j;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int v50;
  uint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  unsigned int i;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;

  v3 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 8);
    v5 = v4 - *(_DWORD *)a1;
    v6 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * a3);
    v7 = *(float32x4_t **)(a1 + 16);
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    v11 = (int)(*(_DWORD *)(a1 + 24) - v5);
    v12 = (int)(*(_DWORD *)(a1 + 88) - v5);
    if (v5 >= 3)
    {
      do
      {
        v54 = *v6;
        v55 = v6[1];
        for (i = v5; i > 2; i -= 3)
        {
          v57 = vmulq_f32(v8, v54);
          v58 = v6[3];
          v6 += 3;
          v54 = v58;
          v59 = v6[-1];
          *v7 = vaddq_f32(vmulq_f32(v9, v55), vaddq_f32(v57, vmulq_f32(v10, v59)));
          v60 = vaddq_f32(vmulq_f32(v9, v59), vaddq_f32(vmulq_f32(v8, v55), vmulq_f32(v10, v58)));
          v55 = v6[1];
          v7[1] = v60;
          v7[2] = vaddq_f32(vmulq_f32(v9, v58), vaddq_f32(vmulq_f32(v8, v59), vmulq_f32(v10, v55)));
          v7 += 3;
        }
        if (i)
        {
          v61 = 0;
          v62 = 0;
          do
          {
            v63 = vmulq_f32(v8, v54);
            v64 = vmulq_f32(v9, v55);
            v54 = v55;
            v55 = v6[v62 + 2];
            v7[v62++] = vaddq_f32(v64, vaddq_f32(v63, vmulq_f32(v10, v55)));
            ++v61;
          }
          while (i != v61);
          v7 = (float32x4_t *)((char *)v7 + v62 * 16);
          v6 = (float32x4_t *)((char *)v6 + v62 * 16);
        }
        v7 += v11;
        v6 += v12;
        --v3;
      }
      while (v3);
    }
    else if (v5)
    {
      v13 = 16 * v11;
      v14 = 16 * v12;
      v15 = *(_DWORD *)a1 - v4;
      do
      {
        v16 = *v6;
        v17 = v6[1];
        v18 = v15;
        do
        {
          v19 = vmulq_f32(v8, v16);
          v20 = vmulq_f32(v9, v17);
          v16 = v17;
          v17 = v6[2];
          *v7++ = vaddq_f32(v20, vaddq_f32(v19, vmulq_f32(v10, v17)));
          ++v6;
          v21 = __CFADD__(v18++, 1);
        }
        while (!v21);
        v7 = (float32x4_t *)((char *)v7 + v13);
        v6 = (float32x4_t *)((char *)v6 + v14);
        --v3;
      }
      while (v3);
    }
  }
  v22 = *(_DWORD *)(a1 + 8);
  v23 = v22 - *(_DWORD *)a1;
  v24 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  v25 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * a3 + 48);
  v26 = *(float32x4_t **)(a1 + 16);
  v27 = a2[3];
  v28 = a2[4];
  v29 = a2[5];
  v30 = (int)(*(_DWORD *)(a1 + 24) - v23);
  v31 = (int)(*(_DWORD *)(a1 + 88) - v23);
  if (v23 >= 3)
  {
    do
    {
      v42 = *v25;
      v41 = v25[1];
      for (j = v23; j > 2; j -= 3)
      {
        v44 = vmulq_f32(v27, v42);
        v45 = v25[3];
        v25 += 3;
        v42 = v45;
        v46 = v25[-1];
        v47 = v26[1];
        *v26 = vaddq_f32(vaddq_f32(vmulq_f32(v28, v41), *v26), vaddq_f32(v44, vmulq_f32(v29, v46)));
        v48 = vaddq_f32(vaddq_f32(vmulq_f32(v27, v41), vmulq_f32(v29, v45)), vaddq_f32(vmulq_f32(v28, v46), v47));
        v41 = v25[1];
        v49 = vaddq_f32(vaddq_f32(vmulq_f32(v27, v46), vmulq_f32(v29, v41)), vaddq_f32(vmulq_f32(v28, v45), v26[2]));
        v26[1] = v48;
        v26[2] = v49;
        v26 += 3;
      }
      if (j)
      {
        v50 = 0;
        v51 = 0;
        do
        {
          v52 = vmulq_f32(v27, v42);
          v53 = vmulq_f32(v28, v41);
          v42 = v41;
          v41 = v25[v51 + 2];
          v26[v51] = vaddq_f32(vaddq_f32(v53, v26[v51]), vaddq_f32(v52, vmulq_f32(v29, v41)));
          ++v51;
          ++v50;
        }
        while (j != v50);
        v26 = (float32x4_t *)((char *)v26 + v51 * 16);
        v25 = (float32x4_t *)((char *)v25 + v51 * 16);
      }
      v26 += v30;
      v25 += v31;
      --v24;
    }
    while (v24);
  }
  else if (v23)
  {
    v32 = 16 * v30;
    v33 = 16 * v31;
    v34 = *(_DWORD *)a1 - v22;
    do
    {
      v35 = *v25;
      v36 = v25[1];
      v37 = v34;
      do
      {
        v38 = vmulq_f32(v27, v35);
        v39 = vmulq_f32(v28, v36);
        v35 = v36;
        v36 = v25[2];
        *v26 = vaddq_f32(vaddq_f32(v39, *v26), vaddq_f32(v38, vmulq_f32(v29, v36)));
        ++v26;
        ++v25;
        v21 = __CFADD__(v37++, 1);
      }
      while (!v21);
      v26 = (float32x4_t *)((char *)v26 + v32);
      v25 = (float32x4_t *)((char *)v25 + v33);
      --v24;
    }
    while (v24);
  }
  return 6;
}

uint64_t c7x(uint64_t a1, float32x4_t *a2, int a3)
{
  int v6;
  unsigned int v7;
  int v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v26;
  float32x4_t v27;
  unsigned int i;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;

  c4x(a1, a2, a3);
  v6 = *(_DWORD *)(a1 + 8);
  v7 = v6 - *(_DWORD *)a1;
  v8 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  v9 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * (a3 + 4));
  v10 = *(float32x4_t **)(a1 + 16);
  v11 = a2[4];
  v12 = a2[5];
  v13 = a2[6];
  v14 = (int)(*(_DWORD *)(a1 + 24) - v7);
  v15 = (int)(*(_DWORD *)(a1 + 88) - v7);
  if (v7 >= 3)
  {
    do
    {
      v27 = *v9;
      v26 = v9[1];
      for (i = v7; i > 2; i -= 3)
      {
        v29 = vmulq_f32(v11, v27);
        v30 = v9[3];
        v9 += 3;
        v27 = v30;
        v31 = v9[-1];
        v32 = v10[1];
        *v10 = vaddq_f32(vaddq_f32(vmulq_f32(v12, v26), *v10), vaddq_f32(v29, vmulq_f32(v13, v31)));
        v33 = vaddq_f32(vaddq_f32(vmulq_f32(v11, v26), vmulq_f32(v13, v30)), vaddq_f32(vmulq_f32(v12, v31), v32));
        v26 = v9[1];
        v34 = vaddq_f32(vaddq_f32(vmulq_f32(v11, v31), vmulq_f32(v13, v26)), vaddq_f32(vmulq_f32(v12, v30), v10[2]));
        v10[1] = v33;
        v10[2] = v34;
        v10 += 3;
      }
      if (i)
      {
        v35 = 0;
        v36 = 0;
        do
        {
          v37 = vmulq_f32(v11, v27);
          v38 = vmulq_f32(v12, v26);
          v27 = v26;
          v26 = v9[v36 + 2];
          v10[v36] = vaddq_f32(vaddq_f32(v38, v10[v36]), vaddq_f32(v37, vmulq_f32(v13, v26)));
          ++v36;
          ++v35;
        }
        while (i != v35);
        v10 = (float32x4_t *)((char *)v10 + v36 * 16);
        v9 = (float32x4_t *)((char *)v9 + v36 * 16);
      }
      v10 += v14;
      v9 += v15;
      --v8;
    }
    while (v8);
  }
  else if (v7)
  {
    v16 = 16 * v14;
    v17 = 16 * v15;
    v18 = *(_DWORD *)a1 - v6;
    do
    {
      v19 = *v9;
      v20 = v9[1];
      v21 = v18;
      do
      {
        v22 = vmulq_f32(v11, v19);
        v23 = vmulq_f32(v12, v20);
        v19 = v20;
        v20 = v9[2];
        *v10 = vaddq_f32(vaddq_f32(v23, *v10), vaddq_f32(v22, vmulq_f32(v13, v20)));
        ++v10;
        ++v9;
      }
      while (!__CFADD__(v21++, 1));
      v10 = (float32x4_t *)((char *)v10 + v16);
      v9 = (float32x4_t *)((char *)v9 + v17);
      --v8;
    }
    while (v8);
  }
  return 7;
}

uint64_t cadd1(uint64_t a1, float32x4_t *a2, int a3)
{
  int v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  uint64_t v20;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = (v3 - *(_DWORD *)a1);
  v5 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  v6 = *(_QWORD *)(a1 + 80) + 16 * a3;
  v7 = *(int *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(int *)(a1 + 24);
  v10 = *a2;
  if (v4 < 4)
  {
    if (v3 != *(_DWORD *)a1)
    {
      do
      {
        v20 = 0;
        do
        {
          *(float32x4_t *)(v8 + 16 * v20) = vaddq_f32(vmulq_f32(v10, *(float32x4_t *)(v6 + 16 * v20)), *(float32x4_t *)(v8 + 16 * v20));
          ++v20;
        }
        while (v4 != v20);
        v6 += 16 * v7;
        v8 += 16 * v9;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    v11 = 16 * v9;
    v12 = 16 * v7;
    do
    {
      v13 = 0;
      v14 = 32;
      do
      {
        v15 = (float32x4_t *)(v8 + v14);
        v16 = vaddq_f32(vmulq_f32(v10, *(float32x4_t *)(v6 + v14 - 16)), *(float32x4_t *)(v8 + v14 - 16));
        v17 = vaddq_f32(vmulq_f32(v10, *(float32x4_t *)(v6 + v14)), *(float32x4_t *)(v8 + v14));
        v18 = vaddq_f32(vmulq_f32(v10, *(float32x4_t *)(v6 + v14 + 16)), *(float32x4_t *)(v8 + v14 + 16));
        v15[-2] = vaddq_f32(vmulq_f32(v10, *(float32x4_t *)(v6 + v14 - 32)), *(float32x4_t *)(v8 + v14 - 32));
        v15[-1] = v16;
        *v15 = v17;
        v15[1] = v18;
        v13 -= 4;
        v14 += 64;
      }
      while ((v4 + v13) > 3);
      v19 = -v13;
      if (v4 > v19)
      {
        do
        {
          *(float32x4_t *)(v8 + 16 * v19) = vaddq_f32(vmulq_f32(v10, *(float32x4_t *)(v6 + 16 * v19)), *(float32x4_t *)(v8 + 16 * v19));
          ++v19;
        }
        while (v19 < v4);
      }
      v8 += v11;
      v6 += v12;
      --v5;
    }
    while (v5);
  }
  return 1;
}

uint64_t cadd2x(uint64_t a1, float32x4_t *a2, int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float32x4_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  unsigned int i;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int v25;
  float32x4_t *v26;

  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 4);
  v5 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(float32x4_t **)(a1 + 16);
  v8 = *a2;
  v9 = a2[1];
  v10 = (int)(*(_DWORD *)(a1 + 24) - v5);
  v11 = (int)(*(_DWORD *)(a1 + 88) - v5);
  if (v5 < 2)
  {
    if (v5)
    {
      v25 = v4 - v3;
      v26 = (float32x4_t *)(v6 + 16 * a3 + 16);
      do
      {
        *v7 = vaddq_f32(vmulq_f32(v9, *v26), vaddq_f32(vmulq_f32(v8, v26[-1]), *v7));
        v26 += v11 + 1;
        v7 += v10 + 1;
      }
      while (!__CFADD__(v25++, 1));
    }
  }
  else
  {
    v12 = v3 - v4;
    v13 = (float32x4_t *)(v6 + 16 * a3);
    v14 = 16 * v10 - 32;
    v15 = 16 * v11 - 32;
    do
    {
      v18 = 0;
      v19 = *v13;
      for (i = v5; i > 1; i -= 2)
      {
        v21 = &v7[v18];
        v22 = vaddq_f32(vmulq_f32(v8, v19), v7[v18]);
        v23 = v13[v18 + 1];
        v19 = v13[v18 + 2];
        v24 = vaddq_f32(vmulq_f32(v9, v19), vaddq_f32(vmulq_f32(v8, v23), v7[v18 + 1]));
        *v21 = vaddq_f32(vmulq_f32(v9, v23), v22);
        v21[1] = v24;
        v18 += 2;
      }
      if (i)
      {
        v7[v18] = vaddq_f32(vmulq_f32(v9, v13[v18 + 1]), vaddq_f32(vmulq_f32(v8, v19), v7[v18]));
        v16 = 3;
      }
      else
      {
        v16 = 2;
      }
      v17 = 16 * v16;
      v7 = (float32x4_t *)((char *)v7 + v14 + v17 + v18 * 16);
      v13 = (float32x4_t *)((char *)v13 + v15 + v17 + v18 * 16);
      --v12;
    }
    while (v12);
  }
  return 2;
}

uint64_t cadd3x(uint64_t a1, float32x4_t *a2, int a3)
{
  int v3;
  unsigned int v4;
  int v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v23;
  float32x4_t v24;
  unsigned int i;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 - *(_DWORD *)a1;
  v5 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  v6 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * a3);
  v7 = *(float32x4_t **)(a1 + 16);
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = (int)(*(_DWORD *)(a1 + 24) - v4);
  v12 = (int)(*(_DWORD *)(a1 + 88) - v4);
  if (v4 >= 3)
  {
    do
    {
      v24 = *v6;
      v23 = v6[1];
      for (i = v4; i > 2; i -= 3)
      {
        v26 = vmulq_f32(v8, v24);
        v27 = v6[3];
        v6 += 3;
        v24 = v27;
        v28 = v6[-1];
        v29 = v7[1];
        *v7 = vaddq_f32(vaddq_f32(vmulq_f32(v9, v23), *v7), vaddq_f32(v26, vmulq_f32(v10, v28)));
        v30 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v23), vmulq_f32(v10, v27)), vaddq_f32(vmulq_f32(v9, v28), v29));
        v23 = v6[1];
        v31 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v28), vmulq_f32(v10, v23)), vaddq_f32(vmulq_f32(v9, v27), v7[2]));
        v7[1] = v30;
        v7[2] = v31;
        v7 += 3;
      }
      if (i)
      {
        v32 = 0;
        v33 = 0;
        do
        {
          v34 = vmulq_f32(v8, v24);
          v35 = vmulq_f32(v9, v23);
          v24 = v23;
          v23 = v6[v33 + 2];
          v7[v33] = vaddq_f32(vaddq_f32(v35, v7[v33]), vaddq_f32(v34, vmulq_f32(v10, v23)));
          ++v33;
          ++v32;
        }
        while (i != v32);
        v7 = (float32x4_t *)((char *)v7 + v33 * 16);
        v6 = (float32x4_t *)((char *)v6 + v33 * 16);
      }
      v7 += v11;
      v6 += v12;
      --v5;
    }
    while (v5);
  }
  else if (v4)
  {
    v13 = 16 * v11;
    v14 = 16 * v12;
    v15 = *(_DWORD *)a1 - v3;
    do
    {
      v16 = *v6;
      v17 = v6[1];
      v18 = v15;
      do
      {
        v19 = vmulq_f32(v8, v16);
        v20 = vmulq_f32(v9, v17);
        v16 = v17;
        v17 = v6[2];
        *v7 = vaddq_f32(vaddq_f32(v20, *v7), vaddq_f32(v19, vmulq_f32(v10, v17)));
        ++v7;
        ++v6;
      }
      while (!__CFADD__(v18++, 1));
      v7 = (float32x4_t *)((char *)v7 + v13);
      v6 = (float32x4_t *)((char *)v6 + v14);
      --v5;
    }
    while (v5);
  }
  return 3;
}

uint64_t cadd4x(uint64_t a1, float32x4_t *a2, int a3)
{
  int v3;
  unsigned int v4;
  int v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  int v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v25;
  float32x4_t v26;
  unsigned int v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 - *(_DWORD *)a1;
  v5 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  v6 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * a3);
  v7 = *(float32x4_t **)(a1 + 16);
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  v12 = (int)(*(_DWORD *)(a1 + 24) - v4);
  v13 = (int)(*(_DWORD *)(a1 + 88) - v4);
  if (v4 >= 4)
  {
    do
    {
      v26 = *v6;
      v25 = v6[1];
      v27 = v4;
      v28 = v6[2];
      do
      {
        v29 = vmulq_f32(v8, v26);
        v30 = v6[4];
        v6 += 4;
        v26 = v30;
        v31 = v6[-1];
        v32 = v7[1];
        *v7 = vaddq_f32(vaddq_f32(v29, vmulq_f32(v10, v28)), vaddq_f32(vmulq_f32(v11, v31), vaddq_f32(vmulq_f32(v9, v25), *v7)));
        v33 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v25), vmulq_f32(v10, v31)), vaddq_f32(vmulq_f32(v11, v30), vaddq_f32(vmulq_f32(v9, v28), v32)));
        v25 = v6[1];
        v7[1] = v33;
        v34 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v28), vmulq_f32(v10, v30)), vaddq_f32(vmulq_f32(v11, v25), vaddq_f32(vmulq_f32(v9, v31), v7[2])));
        v28 = v6[2];
        v35 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v31), vmulq_f32(v10, v25)), vaddq_f32(vmulq_f32(v11, v28), vaddq_f32(vmulq_f32(v9, v30), v7[3])));
        v7[2] = v34;
        v7[3] = v35;
        v7 += 4;
        v27 -= 4;
      }
      while (v27 > 3);
      if (v27)
      {
        v36 = 0;
        v37 = 0;
        do
        {
          v38 = vmulq_f32(v8, v26);
          v39 = vmulq_f32(v9, v25);
          v26 = v25;
          v25 = v28;
          v28 = v6[v37 + 3];
          v7[v37] = vaddq_f32(vaddq_f32(v38, vmulq_f32(v10, v25)), vaddq_f32(vmulq_f32(v11, v28), vaddq_f32(v39, v7[v37])));
          ++v37;
          ++v36;
        }
        while (v27 != v36);
        v7 = (float32x4_t *)((char *)v7 + v37 * 16);
        v6 = (float32x4_t *)((char *)v6 + v37 * 16);
      }
      v7 += v12;
      v6 += v13;
      --v5;
    }
    while (v5);
  }
  else if (v4)
  {
    v14 = 16 * v12;
    v15 = 16 * v13;
    v16 = *(_DWORD *)a1 - v3;
    do
    {
      v17 = *v6;
      v18 = v6[1];
      v19 = v16;
      v20 = v6[2];
      do
      {
        v21 = vmulq_f32(v8, v17);
        v22 = vmulq_f32(v9, v18);
        v17 = v18;
        v18 = v20;
        v20 = v6[3];
        *v7 = vaddq_f32(vaddq_f32(v21, vmulq_f32(v10, v18)), vaddq_f32(vmulq_f32(v11, v20), vaddq_f32(v22, *v7)));
        ++v7;
        ++v6;
      }
      while (!__CFADD__(v19++, 1));
      v7 = (float32x4_t *)((char *)v7 + v14);
      v6 = (float32x4_t *)((char *)v6 + v15);
      --v5;
    }
    while (v5);
  }
  return 4;
}

uint64_t cadd5x(uint64_t a1, float32x4_t *a2, int a3)
{
  int v3;
  unsigned int v4;
  int v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  float32x4_t *v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  unsigned int i;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x4_t v52;
  unsigned int j;
  float32x4_t *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int v58;
  float32x4_t *v59;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 - *(_DWORD *)a1;
  v5 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  v6 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * a3);
  v7 = *(float32x4_t **)(a1 + 16);
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = (int)(*(_DWORD *)(a1 + 24) - v4);
  v12 = (int)(*(_DWORD *)(a1 + 88) - v4);
  if (v4 >= 3)
  {
    do
    {
      v37 = *v6;
      v36 = v6[1];
      for (i = v4; i > 2; i -= 3)
      {
        v39 = vmulq_f32(v8, v37);
        v40 = v6[3];
        v6 += 3;
        v37 = v40;
        v41 = v6[-1];
        v42 = v7[1];
        *v7 = vaddq_f32(vaddq_f32(vmulq_f32(v9, v36), *v7), vaddq_f32(v39, vmulq_f32(v10, v41)));
        v43 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v36), vmulq_f32(v10, v40)), vaddq_f32(vmulq_f32(v9, v41), v42));
        v36 = v6[1];
        v44 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v41), vmulq_f32(v10, v36)), vaddq_f32(vmulq_f32(v9, v40), v7[2]));
        v7[1] = v43;
        v7[2] = v44;
        v7 += 3;
      }
      if (i)
      {
        v45 = 0;
        v46 = 0;
        do
        {
          v47 = vmulq_f32(v8, v37);
          v48 = vmulq_f32(v9, v36);
          v37 = v36;
          v36 = v6[v46 + 2];
          v7[v46] = vaddq_f32(vaddq_f32(v48, v7[v46]), vaddq_f32(v47, vmulq_f32(v10, v36)));
          ++v46;
          ++v45;
        }
        while (i != v45);
        v7 = (float32x4_t *)((char *)v7 + v46 * 16);
        v6 = (float32x4_t *)((char *)v6 + v46 * 16);
      }
      v7 += v11;
      v6 += v12;
      --v5;
    }
    while (v5);
  }
  else if (v4)
  {
    v13 = 16 * v11;
    v14 = 16 * v12;
    v15 = *(_DWORD *)a1 - v3;
    do
    {
      v16 = *v6;
      v17 = v6[1];
      v18 = v15;
      do
      {
        v19 = vmulq_f32(v8, v16);
        v20 = vmulq_f32(v9, v17);
        v16 = v17;
        v17 = v6[2];
        *v7 = vaddq_f32(vaddq_f32(v20, *v7), vaddq_f32(v19, vmulq_f32(v10, v17)));
        ++v7;
        ++v6;
        v21 = __CFADD__(v18++, 1);
      }
      while (!v21);
      v7 = (float32x4_t *)((char *)v7 + v13);
      v6 = (float32x4_t *)((char *)v6 + v14);
      --v5;
    }
    while (v5);
  }
  v22 = a3 + 3;
  v23 = *(_DWORD *)(a1 + 12);
  v24 = *(_DWORD *)(a1 + 4);
  v25 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  v26 = *(_QWORD *)(a1 + 80);
  v27 = *(float32x4_t **)(a1 + 16);
  v28 = a2[3];
  v29 = a2[4];
  v30 = (int)(*(_DWORD *)(a1 + 24) - v25);
  v31 = (int)(*(_DWORD *)(a1 + 88) - v25);
  if (v25 < 2)
  {
    if (v25)
    {
      v58 = v24 - v23;
      v59 = (float32x4_t *)(v26 + 16 * v22 + 16);
      do
      {
        *v27 = vaddq_f32(vmulq_f32(v29, *v59), vaddq_f32(vmulq_f32(v28, v59[-1]), *v27));
        v59 += v31 + 1;
        v27 += v30 + 1;
        v21 = __CFADD__(v58++, 1);
      }
      while (!v21);
    }
  }
  else
  {
    v32 = v23 - v24;
    v33 = (float32x4_t *)(v26 + 16 * v22);
    v34 = 16 * v30 - 32;
    v35 = 16 * v31 - 32;
    do
    {
      v51 = 0;
      v52 = *v33;
      for (j = v25; j > 1; j -= 2)
      {
        v54 = &v27[v51];
        v55 = vaddq_f32(vmulq_f32(v28, v52), v27[v51]);
        v56 = v33[v51 + 1];
        v52 = v33[v51 + 2];
        v57 = vaddq_f32(vmulq_f32(v29, v52), vaddq_f32(vmulq_f32(v28, v56), v27[v51 + 1]));
        *v54 = vaddq_f32(vmulq_f32(v29, v56), v55);
        v54[1] = v57;
        v51 += 2;
      }
      if (j)
      {
        v27[v51] = vaddq_f32(vmulq_f32(v29, v33[v51 + 1]), vaddq_f32(vmulq_f32(v28, v52), v27[v51]));
        v49 = 3;
      }
      else
      {
        v49 = 2;
      }
      v50 = 16 * v49;
      v27 = (float32x4_t *)((char *)v27 + v34 + v50 + v51 * 16);
      v33 = (float32x4_t *)((char *)v33 + v35 + v50 + v51 * 16);
      --v32;
    }
    while (v32);
  }
  return 5;
}

uint64_t cadd6x(uint64_t a1, float32x4_t *a2, int a3)
{
  int v3;
  unsigned int v4;
  int v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  int v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v41;
  float32x4_t v42;
  unsigned int i;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int v50;
  uint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  unsigned int j;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 - *(_DWORD *)a1;
  v5 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  v6 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * a3);
  v7 = *(float32x4_t **)(a1 + 16);
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = (int)(*(_DWORD *)(a1 + 24) - v4);
  v12 = (int)(*(_DWORD *)(a1 + 88) - v4);
  if (v4 >= 3)
  {
    do
    {
      v42 = *v6;
      v41 = v6[1];
      for (i = v4; i > 2; i -= 3)
      {
        v44 = vmulq_f32(v8, v42);
        v45 = v6[3];
        v6 += 3;
        v42 = v45;
        v46 = v6[-1];
        v47 = v7[1];
        *v7 = vaddq_f32(vaddq_f32(vmulq_f32(v9, v41), *v7), vaddq_f32(v44, vmulq_f32(v10, v46)));
        v48 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v41), vmulq_f32(v10, v45)), vaddq_f32(vmulq_f32(v9, v46), v47));
        v41 = v6[1];
        v49 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v46), vmulq_f32(v10, v41)), vaddq_f32(vmulq_f32(v9, v45), v7[2]));
        v7[1] = v48;
        v7[2] = v49;
        v7 += 3;
      }
      if (i)
      {
        v50 = 0;
        v51 = 0;
        do
        {
          v52 = vmulq_f32(v8, v42);
          v53 = vmulq_f32(v9, v41);
          v42 = v41;
          v41 = v6[v51 + 2];
          v7[v51] = vaddq_f32(vaddq_f32(v53, v7[v51]), vaddq_f32(v52, vmulq_f32(v10, v41)));
          ++v51;
          ++v50;
        }
        while (i != v50);
        v7 = (float32x4_t *)((char *)v7 + v51 * 16);
        v6 = (float32x4_t *)((char *)v6 + v51 * 16);
      }
      v7 += v11;
      v6 += v12;
      --v5;
    }
    while (v5);
  }
  else if (v4)
  {
    v13 = 16 * v11;
    v14 = 16 * v12;
    v15 = *(_DWORD *)a1 - v3;
    do
    {
      v16 = *v6;
      v17 = v6[1];
      v18 = v15;
      do
      {
        v19 = vmulq_f32(v8, v16);
        v20 = vmulq_f32(v9, v17);
        v16 = v17;
        v17 = v6[2];
        *v7 = vaddq_f32(vaddq_f32(v20, *v7), vaddq_f32(v19, vmulq_f32(v10, v17)));
        ++v7;
        ++v6;
        v21 = __CFADD__(v18++, 1);
      }
      while (!v21);
      v7 = (float32x4_t *)((char *)v7 + v13);
      v6 = (float32x4_t *)((char *)v6 + v14);
      --v5;
    }
    while (v5);
  }
  v22 = *(_DWORD *)(a1 + 8);
  v23 = v22 - *(_DWORD *)a1;
  v24 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  v25 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * a3 + 48);
  v26 = *(float32x4_t **)(a1 + 16);
  v27 = a2[3];
  v28 = a2[4];
  v29 = a2[5];
  v30 = (int)(*(_DWORD *)(a1 + 24) - v23);
  v31 = (int)(*(_DWORD *)(a1 + 88) - v23);
  if (v23 >= 3)
  {
    do
    {
      v55 = *v25;
      v54 = v25[1];
      for (j = v23; j > 2; j -= 3)
      {
        v57 = vmulq_f32(v27, v55);
        v58 = v25[3];
        v25 += 3;
        v55 = v58;
        v59 = v25[-1];
        v60 = v26[1];
        *v26 = vaddq_f32(vaddq_f32(vmulq_f32(v28, v54), *v26), vaddq_f32(v57, vmulq_f32(v29, v59)));
        v61 = vaddq_f32(vaddq_f32(vmulq_f32(v27, v54), vmulq_f32(v29, v58)), vaddq_f32(vmulq_f32(v28, v59), v60));
        v54 = v25[1];
        v62 = vaddq_f32(vaddq_f32(vmulq_f32(v27, v59), vmulq_f32(v29, v54)), vaddq_f32(vmulq_f32(v28, v58), v26[2]));
        v26[1] = v61;
        v26[2] = v62;
        v26 += 3;
      }
      if (j)
      {
        v63 = 0;
        v64 = 0;
        do
        {
          v65 = vmulq_f32(v27, v55);
          v66 = vmulq_f32(v28, v54);
          v55 = v54;
          v54 = v25[v64 + 2];
          v26[v64] = vaddq_f32(vaddq_f32(v66, v26[v64]), vaddq_f32(v65, vmulq_f32(v29, v54)));
          ++v64;
          ++v63;
        }
        while (j != v63);
        v26 = (float32x4_t *)((char *)v26 + v64 * 16);
        v25 = (float32x4_t *)((char *)v25 + v64 * 16);
      }
      v26 += v30;
      v25 += v31;
      --v24;
    }
    while (v24);
  }
  else if (v23)
  {
    v32 = 16 * v30;
    v33 = 16 * v31;
    v34 = *(_DWORD *)a1 - v22;
    do
    {
      v35 = *v25;
      v36 = v25[1];
      v37 = v34;
      do
      {
        v38 = vmulq_f32(v27, v35);
        v39 = vmulq_f32(v28, v36);
        v35 = v36;
        v36 = v25[2];
        *v26 = vaddq_f32(vaddq_f32(v39, *v26), vaddq_f32(v38, vmulq_f32(v29, v36)));
        ++v26;
        ++v25;
        v21 = __CFADD__(v37++, 1);
      }
      while (!v21);
      v26 = (float32x4_t *)((char *)v26 + v32);
      v25 = (float32x4_t *)((char *)v25 + v33);
      --v24;
    }
    while (v24);
  }
  return 6;
}

uint64_t cadd7x(uint64_t a1, float32x4_t *a2, int a3)
{
  int v6;
  unsigned int v7;
  int v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v26;
  float32x4_t v27;
  unsigned int i;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;

  cadd4x(a1, a2, a3);
  v6 = *(_DWORD *)(a1 + 8);
  v7 = v6 - *(_DWORD *)a1;
  v8 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  v9 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * (a3 + 4));
  v10 = *(float32x4_t **)(a1 + 16);
  v11 = a2[4];
  v12 = a2[5];
  v13 = a2[6];
  v14 = (int)(*(_DWORD *)(a1 + 24) - v7);
  v15 = (int)(*(_DWORD *)(a1 + 88) - v7);
  if (v7 >= 3)
  {
    do
    {
      v27 = *v9;
      v26 = v9[1];
      for (i = v7; i > 2; i -= 3)
      {
        v29 = vmulq_f32(v11, v27);
        v30 = v9[3];
        v9 += 3;
        v27 = v30;
        v31 = v9[-1];
        v32 = v10[1];
        *v10 = vaddq_f32(vaddq_f32(vmulq_f32(v12, v26), *v10), vaddq_f32(v29, vmulq_f32(v13, v31)));
        v33 = vaddq_f32(vaddq_f32(vmulq_f32(v11, v26), vmulq_f32(v13, v30)), vaddq_f32(vmulq_f32(v12, v31), v32));
        v26 = v9[1];
        v34 = vaddq_f32(vaddq_f32(vmulq_f32(v11, v31), vmulq_f32(v13, v26)), vaddq_f32(vmulq_f32(v12, v30), v10[2]));
        v10[1] = v33;
        v10[2] = v34;
        v10 += 3;
      }
      if (i)
      {
        v35 = 0;
        v36 = 0;
        do
        {
          v37 = vmulq_f32(v11, v27);
          v38 = vmulq_f32(v12, v26);
          v27 = v26;
          v26 = v9[v36 + 2];
          v10[v36] = vaddq_f32(vaddq_f32(v38, v10[v36]), vaddq_f32(v37, vmulq_f32(v13, v26)));
          ++v36;
          ++v35;
        }
        while (i != v35);
        v10 = (float32x4_t *)((char *)v10 + v36 * 16);
        v9 = (float32x4_t *)((char *)v9 + v36 * 16);
      }
      v10 += v14;
      v9 += v15;
      --v8;
    }
    while (v8);
  }
  else if (v7)
  {
    v16 = 16 * v14;
    v17 = 16 * v15;
    v18 = *(_DWORD *)a1 - v6;
    do
    {
      v19 = *v9;
      v20 = v9[1];
      v21 = v18;
      do
      {
        v22 = vmulq_f32(v11, v19);
        v23 = vmulq_f32(v12, v20);
        v19 = v20;
        v20 = v9[2];
        *v10 = vaddq_f32(vaddq_f32(v23, *v10), vaddq_f32(v22, vmulq_f32(v13, v20)));
        ++v10;
        ++v9;
      }
      while (!__CFADD__(v21++, 1));
      v10 = (float32x4_t *)((char *)v10 + v16);
      v9 = (float32x4_t *)((char *)v9 + v17);
      --v8;
    }
    while (v8);
  }
  return 7;
}

uint64_t c2y(uint64_t a1, float32x4_t *a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  float32x4_t v5;
  float32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
    v5 = *a2;
    v6 = a2[1];
    v7 = *(int *)(a1 + 88);
    if (v4 < 2)
    {
      if (v4)
      {
        v24 = 0;
        v25 = 16 * a3;
        v26 = v25 + 16 * v7;
        do
        {
          *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v24) = vaddq_f32(vmulq_f32(v5, *(float32x4_t *)(*(_QWORD *)(a1 + 80) + v25 + 16 * v24)), vmulq_f32(v6, *(float32x4_t *)(*(_QWORD *)(a1 + 80) + v26 + 16 * v24)));
          ++v24;
        }
        while (v3 != v24);
      }
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = *(int *)(a1 + 24);
      v11 = 32 * v10;
      v12 = 16 * v10;
      v13 = 32 * v7;
      do
      {
        v14 = *(_QWORD *)(a1 + 80);
        v15 = *(float32x4_t *)(v14 + 16 * v9 + 16 * a3);
        v16 = *(_QWORD *)(a1 + 16);
        v17 = v16 + v12;
        v18 = v14 + 16 * a3;
        v19 = v14 + 16 * a3 + 32 * v7;
        v20 = v14 + 16 * a3 + 16 * v7;
        v21 = v4;
        do
        {
          v22 = *(float32x4_t *)(v20 + v8);
          v23 = vaddq_f32(vmulq_f32(v5, v15), vmulq_f32(v6, v22));
          v15 = *(float32x4_t *)(v19 + v8);
          *(float32x4_t *)(v16 + v8) = v23;
          *(float32x4_t *)(v17 + v8) = vaddq_f32(vmulq_f32(v5, v22), vmulq_f32(v6, v15));
          v21 -= 2;
          v16 += v11;
          v17 += v11;
          v18 += v13;
          v19 += v13;
          v20 += v13;
        }
        while (v21 > 1);
        if (v21)
          *(float32x4_t *)(v16 + v8) = vaddq_f32(vmulq_f32(v5, v15), vmulq_f32(v6, *(float32x4_t *)(v18 + v8 + 16 * v7)));
        ++v9;
        v8 += 16;
      }
      while (v9 != v3);
    }
  }
  return 2;
}

uint64_t c3y(uint64_t a1, float32x4_t *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t *v50;
  float32x4_t *v51;
  int v52;
  float32x4_t v53;
  float32x4_t v54;

  v3 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 4);
    v6 = v4 - v5;
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v10 = *(int *)(a1 + 24);
    v11 = *(int *)(a1 + 88);
    v12 = a3;
    if ((v4 - v5) < 3)
    {
      if (v6)
      {
        v41 = 0;
        v42 = 0;
        v43 = 16 * v10;
        v44 = v5 - v4;
        v45 = 16 * a3 + 32 * v11;
        do
        {
          v46 = *(_QWORD *)(a1 + 80);
          v47 = (float32x4_t *)(v46 + 16 * v42 + 16 * v12);
          v48 = *v47;
          v49 = v47[v11];
          v50 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v41);
          v51 = (float32x4_t *)(v46 + v45);
          v52 = v44;
          do
          {
            v53 = vmulq_f32(v7, v48);
            v54 = vmulq_f32(v8, v49);
            v48 = v49;
            v49 = *v51;
            *v50 = vaddq_f32(v54, vaddq_f32(v53, vmulq_f32(v9, *v51)));
            v50 = (float32x4_t *)((char *)v50 + v43);
            v51 += v11;
          }
          while (!__CFADD__(v52++, 1));
          ++v42;
          v41 += 16;
          v45 += 16;
        }
        while (v42 != v3);
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 48 * v10;
      v16 = 16 * v10;
      v17 = 48 * v11;
      v18 = 16 * v12 + 48 * v11;
      v19 = v18;
      do
      {
        v20 = *(_QWORD *)(a1 + 80);
        v21 = (float32x4_t *)(v20 + 16 * v14 + 16 * v12);
        v22 = *(_QWORD *)(a1 + 16);
        v23 = v21[v11];
        v24 = v22 + 32 * v10;
        v25 = v22 + v16;
        v26 = v20 + 16 * v12;
        v27 = v20 + v18 + 16 * v11;
        v28 = *v21;
        v29 = v20 + v18;
        v30 = v20 + 16 * v12 + 32 * v11;
        v31 = v20 + v19;
        v32 = v6;
        do
        {
          v33 = *(float32x4_t *)(v30 + v13);
          v34 = vaddq_f32(vmulq_f32(v7, v28), vmulq_f32(v9, v33));
          v28 = *(float32x4_t *)(v29 + v13);
          *(float32x4_t *)(v22 + v13) = vaddq_f32(vmulq_f32(v8, v23), v34);
          v35 = vaddq_f32(vmulq_f32(v8, v33), vaddq_f32(vmulq_f32(v7, v23), vmulq_f32(v9, v28)));
          v23 = *(float32x4_t *)(v27 + v13);
          *(float32x4_t *)(v25 + v13) = v35;
          v36 = v31;
          *(float32x4_t *)(v24 + v13) = vaddq_f32(vmulq_f32(v8, v28), vaddq_f32(vmulq_f32(v7, v33), vmulq_f32(v9, v23)));
          v32 -= 3;
          v22 += v15;
          v24 += v15;
          v25 += v15;
          v26 += v17;
          v27 += v17;
          v29 += v17;
          v30 += v17;
          v31 += v17;
        }
        while (v32 > 2);
        if (v32)
        {
          v37 = 0;
          v38 = v13;
          do
          {
            v39 = vmulq_f32(v7, v28);
            v40 = vmulq_f32(v8, v23);
            v28 = v23;
            v23 = *(float32x4_t *)(v36 + 32 * v11);
            *(float32x4_t *)(v22 + v38) = vaddq_f32(v40, vaddq_f32(v39, vmulq_f32(v9, v23)));
            v38 += v16;
            v36 += 16 * v11;
            ++v37;
          }
          while (v32 != v37);
        }
        ++v14;
        v13 += 16;
        v19 += 16;
      }
      while (v14 != v3);
    }
  }
  return 3;
}

uint64_t c4y(uint64_t a1, float32x4_t *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  float32x4_t *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t *v59;
  int v60;
  float32x4_t v61;
  float32x4_t v62;

  v3 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 4);
    v6 = v4 - v5;
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v10 = a2[3];
    v11 = *(int *)(a1 + 24);
    v12 = *(int *)(a1 + 88);
    v13 = a3;
    if ((v4 - v5) < 4)
    {
      if (v6)
        v47 = 2 * v12;
      else
        v47 = 0;
      if (v6)
      {
        v48 = 0;
        v49 = 0;
        v50 = 16 * v11;
        v51 = 16 * v47 + 16 * a3 + 16 * v12;
        v52 = v5 - v4;
        do
        {
          v53 = *(_QWORD *)(a1 + 80);
          v54 = (float32x4_t *)(v53 + 16 * v49 + 16 * v13);
          v55 = v54[v12];
          v56 = *v54;
          v57 = v54[2 * v12];
          v58 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v48);
          v59 = (float32x4_t *)(v53 + v51);
          v60 = v52;
          do
          {
            v61 = vmulq_f32(v7, v56);
            v62 = vmulq_f32(v8, v55);
            v56 = v55;
            v55 = v57;
            v57 = *v59;
            *v58 = vaddq_f32(vaddq_f32(v61, vmulq_f32(v9, v55)), vaddq_f32(v62, vmulq_f32(v10, *v59)));
            v58 = (float32x4_t *)((char *)v58 + v50);
            v59 += v12;
          }
          while (!__CFADD__(v60++, 1));
          ++v49;
          v48 += 16;
          v51 += 16;
        }
        while (v49 != v3);
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = 2 * v11;
      v17 = v11 << 6;
      v18 = 16 * v11;
      v19 = 16 * v16;
      v20 = v12 << 6;
      v21 = 16 * a3 + (v12 << 6);
      do
      {
        v22 = *(_QWORD *)(a1 + 80);
        v23 = (float32x4_t *)(v22 + 16 * v15 + 16 * a3);
        v24 = v23[v12];
        v25 = v23[2 * v12];
        v26 = *(_QWORD *)(a1 + 16);
        v27 = v26 + v17 - v18;
        v28 = v26 + v19;
        v29 = v26 + v18;
        v30 = v22 + 16 * a3;
        v31 = v22 + v21 + 32 * v12;
        v32 = *v23;
        v33 = v22 + v21 + 16 * v12;
        v34 = v22 + v21;
        v35 = v22 + v21 - 16 * v12;
        v36 = v26 + v17;
        v37 = v6;
        do
        {
          v38 = v36;
          v39 = *(float32x4_t *)(v35 + v14);
          v40 = vaddq_f32(vaddq_f32(vmulq_f32(v7, v32), vmulq_f32(v9, v25)), vaddq_f32(vmulq_f32(v8, v24), vmulq_f32(v10, v39)));
          v32 = *(float32x4_t *)(v34 + v14);
          *(float32x4_t *)(v26 + v14) = v40;
          v41 = vaddq_f32(vaddq_f32(vmulq_f32(v7, v24), vmulq_f32(v9, v39)), vaddq_f32(vmulq_f32(v8, v25), vmulq_f32(v10, v32)));
          v24 = *(float32x4_t *)(v33 + v14);
          *(float32x4_t *)(v29 + v14) = v41;
          v42 = vaddq_f32(vmulq_f32(v7, v25), vmulq_f32(v9, v32));
          v25 = *(float32x4_t *)(v31 + v14);
          *(float32x4_t *)(v28 + v14) = vaddq_f32(v42, vaddq_f32(vmulq_f32(v8, v39), vmulq_f32(v10, v24)));
          *(float32x4_t *)(v27 + v14) = vaddq_f32(vaddq_f32(vmulq_f32(v7, v39), vmulq_f32(v9, v24)), vaddq_f32(vmulq_f32(v8, v32), vmulq_f32(v10, v25)));
          v37 -= 4;
          v26 += v17;
          v27 += v17;
          v28 += v17;
          v29 += v17;
          v30 += v20;
          v31 += v20;
          v33 += v20;
          v34 += v20;
          v35 += v20;
          v36 += v17;
        }
        while (v37 > 3);
        if (v37)
        {
          v43 = 0;
          v44 = (float32x4_t *)(v30 + v14 + 32 * v12);
          do
          {
            v45 = vmulq_f32(v7, v32);
            v46 = vmulq_f32(v8, v24);
            v32 = v24;
            v24 = v25;
            v44 += v12;
            v25 = *v44;
            *(float32x4_t *)(v38 + v14) = vaddq_f32(vaddq_f32(v45, vmulq_f32(v9, v24)), vaddq_f32(v46, vmulq_f32(v10, *v44)));
            v38 += v18;
            ++v43;
          }
          while (v37 != v43);
        }
        ++v15;
        v14 += 16;
      }
      while (v15 != v3);
    }
  }
  return 4;
}

uint64_t c5y(uint64_t a1, float32x4_t *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  uint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  float32x4_t *v50;
  int v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v55;
  unsigned int v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v3 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 4);
    v6 = v4 - v5;
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v10 = *(int *)(a1 + 24);
    v11 = *(int *)(a1 + 88);
    if ((v4 - v5) < 3)
    {
      if (v6)
      {
        v40 = 0;
        v41 = 0;
        v42 = 16 * v10;
        v43 = v5 - v4;
        v44 = 16 * a3 + 32 * v11;
        do
        {
          v45 = *(_QWORD *)(a1 + 80);
          v46 = (float32x4_t *)(v45 + 16 * v41 + 16 * a3);
          v47 = *v46;
          v48 = v46[v11];
          v49 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v40);
          v50 = (float32x4_t *)(v45 + v44);
          v51 = v43;
          do
          {
            v52 = vmulq_f32(v7, v47);
            v53 = vmulq_f32(v8, v48);
            v47 = v48;
            v48 = *v50;
            *v49 = vaddq_f32(v53, vaddq_f32(v52, vmulq_f32(v9, *v50)));
            v49 = (float32x4_t *)((char *)v49 + v42);
            v50 += v11;
          }
          while (!__CFADD__(v51++, 1));
          ++v41;
          v40 += 16;
          v44 += 16;
        }
        while (v41 != v3);
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 48 * v10;
      v15 = 16 * v10;
      v16 = 48 * v11;
      v17 = 16 * a3 + 48 * v11;
      v18 = v17;
      do
      {
        v19 = *(_QWORD *)(a1 + 80);
        v20 = (float32x4_t *)(v19 + 16 * v13 + 16 * a3);
        v21 = *(_QWORD *)(a1 + 16);
        v22 = v20[v11];
        v23 = v21 + 32 * v10;
        v24 = v21 + v15;
        v25 = v19 + 16 * a3;
        v26 = v19 + v17 + 16 * v11;
        v27 = *v20;
        v28 = v19 + v17;
        v29 = v19 + 16 * a3 + 32 * v11;
        v30 = v19 + v18;
        v31 = v6;
        do
        {
          v32 = *(float32x4_t *)(v29 + v12);
          v33 = vaddq_f32(vmulq_f32(v7, v27), vmulq_f32(v9, v32));
          v27 = *(float32x4_t *)(v28 + v12);
          *(float32x4_t *)(v21 + v12) = vaddq_f32(vmulq_f32(v8, v22), v33);
          v34 = vaddq_f32(vmulq_f32(v8, v32), vaddq_f32(vmulq_f32(v7, v22), vmulq_f32(v9, v27)));
          v22 = *(float32x4_t *)(v26 + v12);
          *(float32x4_t *)(v24 + v12) = v34;
          v35 = v30;
          *(float32x4_t *)(v23 + v12) = vaddq_f32(vmulq_f32(v8, v27), vaddq_f32(vmulq_f32(v7, v32), vmulq_f32(v9, v22)));
          v31 -= 3;
          v21 += v14;
          v23 += v14;
          v24 += v14;
          v25 += v16;
          v26 += v16;
          v28 += v16;
          v29 += v16;
          v30 += v16;
        }
        while (v31 > 2);
        if (v31)
        {
          v36 = 0;
          v37 = v12;
          do
          {
            v38 = vmulq_f32(v7, v27);
            v39 = vmulq_f32(v8, v22);
            v27 = v22;
            v22 = *(float32x4_t *)(v35 + 32 * v11);
            *(float32x4_t *)(v21 + v37) = vaddq_f32(v39, vaddq_f32(v38, vmulq_f32(v9, v22)));
            v37 += v15;
            v35 += 16 * v11;
            ++v36;
          }
          while (v31 != v36);
        }
        ++v13;
        v12 += 16;
        v18 += 16;
      }
      while (v13 != v3);
    }
  }
  v55 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v55)
  {
    v56 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
    v57 = a2[3];
    v58 = a2[4];
    v59 = *(int *)(a1 + 88);
    v60 = 3 * (int)v59 + a3;
    if (v56 < 2)
    {
      if (v56)
      {
        v77 = 0;
        v78 = 16 * v60;
        v79 = v78 + 16 * v59;
        do
        {
          *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v77) = vaddq_f32(vmulq_f32(v58, *(float32x4_t *)(*(_QWORD *)(a1 + 80) + v79 + 16 * v77)), vaddq_f32(vmulq_f32(v57, *(float32x4_t *)(*(_QWORD *)(a1 + 80)+ v78+ 16 * v77)), *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v77)));
          ++v77;
        }
        while (v55 != v77);
      }
    }
    else
    {
      v61 = 0;
      v62 = 0;
      v63 = *(int *)(a1 + 24);
      v64 = 32 * v63;
      v65 = 16 * v63;
      v66 = 32 * v59;
      do
      {
        v67 = *(_QWORD *)(a1 + 80);
        v68 = *(float32x4_t *)(v67 + 16 * v62 + 16 * v60);
        v69 = *(_QWORD *)(a1 + 16);
        v70 = v69 + v65;
        v71 = v67 + 16 * v60;
        v72 = v67 + 32 * v59 + 16 * v60;
        v73 = v67 + 16 * v60 + 16 * v59;
        v74 = v56;
        do
        {
          v75 = *(float32x4_t *)(v73 + v61);
          v76 = vaddq_f32(vmulq_f32(v57, v68), *(float32x4_t *)(v69 + v61));
          v68 = *(float32x4_t *)(v72 + v61);
          *(float32x4_t *)(v69 + v61) = vaddq_f32(vmulq_f32(v58, v75), v76);
          *(float32x4_t *)(v70 + v61) = vaddq_f32(vmulq_f32(v58, v68), vaddq_f32(vmulq_f32(v57, v75), *(float32x4_t *)(v70 + v61)));
          v74 -= 2;
          v69 += v64;
          v70 += v64;
          v71 += v66;
          v72 += v66;
          v73 += v66;
        }
        while (v74 > 1);
        if (v74)
          *(float32x4_t *)(v69 + v61) = vaddq_f32(vmulq_f32(v58, *(float32x4_t *)(v71 + v61 + 16 * v59)), vaddq_f32(vmulq_f32(v57, v68), *(float32x4_t *)(v69 + v61)));
        ++v62;
        v61 += 16;
      }
      while (v62 != v55);
    }
  }
  return 5;
}

uint64_t c6y(uint64_t a1, float32x4_t *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  uint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  float32x4_t *v50;
  int v51;
  float32x4_t v52;
  float32x4_t v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  int v57;
  unsigned int v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t *v74;
  uint64_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  float32x4_t *v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t *v103;
  float32x4_t *v104;
  int v105;
  float32x4_t v106;
  float32x4_t v107;

  v3 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 4);
    v6 = v4 - v5;
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v10 = *(int *)(a1 + 24);
    v11 = *(int *)(a1 + 88);
    if ((v4 - v5) < 3)
    {
      if (v6)
      {
        v40 = 0;
        v41 = 0;
        v42 = 16 * v10;
        v43 = v5 - v4;
        v44 = 16 * a3 + 32 * v11;
        do
        {
          v45 = *(_QWORD *)(a1 + 80);
          v46 = (float32x4_t *)(v45 + 16 * v41 + 16 * a3);
          v47 = *v46;
          v48 = v46[v11];
          v49 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v40);
          v50 = (float32x4_t *)(v45 + v44);
          v51 = v43;
          do
          {
            v52 = vmulq_f32(v7, v47);
            v53 = vmulq_f32(v8, v48);
            v47 = v48;
            v48 = *v50;
            *v49 = vaddq_f32(v53, vaddq_f32(v52, vmulq_f32(v9, *v50)));
            v49 = (float32x4_t *)((char *)v49 + v42);
            v50 += v11;
            v54 = __CFADD__(v51++, 1);
          }
          while (!v54);
          ++v41;
          v40 += 16;
          v44 += 16;
        }
        while (v41 != v3);
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 48 * v10;
      v15 = 16 * v10;
      v16 = 48 * v11;
      v17 = 16 * a3 + 48 * v11;
      v18 = v17;
      do
      {
        v19 = *(_QWORD *)(a1 + 80);
        v20 = (float32x4_t *)(v19 + 16 * v13 + 16 * a3);
        v21 = *(_QWORD *)(a1 + 16);
        v22 = v20[v11];
        v23 = v21 + 32 * v10;
        v24 = v21 + v15;
        v25 = v19 + 16 * a3;
        v26 = v19 + v17 + 16 * v11;
        v27 = *v20;
        v28 = v19 + v17;
        v29 = v19 + 16 * a3 + 32 * v11;
        v30 = v19 + v18;
        v31 = v6;
        do
        {
          v32 = *(float32x4_t *)(v29 + v12);
          v33 = vaddq_f32(vmulq_f32(v7, v27), vmulq_f32(v9, v32));
          v27 = *(float32x4_t *)(v28 + v12);
          *(float32x4_t *)(v21 + v12) = vaddq_f32(vmulq_f32(v8, v22), v33);
          v34 = vaddq_f32(vmulq_f32(v8, v32), vaddq_f32(vmulq_f32(v7, v22), vmulq_f32(v9, v27)));
          v22 = *(float32x4_t *)(v26 + v12);
          *(float32x4_t *)(v24 + v12) = v34;
          v35 = v30;
          *(float32x4_t *)(v23 + v12) = vaddq_f32(vmulq_f32(v8, v27), vaddq_f32(vmulq_f32(v7, v32), vmulq_f32(v9, v22)));
          v31 -= 3;
          v21 += v14;
          v23 += v14;
          v24 += v14;
          v25 += v16;
          v26 += v16;
          v28 += v16;
          v29 += v16;
          v30 += v16;
        }
        while (v31 > 2);
        if (v31)
        {
          v36 = 0;
          v37 = v12;
          do
          {
            v38 = vmulq_f32(v7, v27);
            v39 = vmulq_f32(v8, v22);
            v27 = v22;
            v22 = *(float32x4_t *)(v35 + 32 * v11);
            *(float32x4_t *)(v21 + v37) = vaddq_f32(v39, vaddq_f32(v38, vmulq_f32(v9, v22)));
            v37 += v15;
            v35 += 16 * v11;
            ++v36;
          }
          while (v31 != v36);
        }
        ++v13;
        v12 += 16;
        v18 += 16;
      }
      while (v13 != v3);
    }
  }
  v55 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v55)
  {
    v56 = *(_DWORD *)(a1 + 12);
    v57 = *(_DWORD *)(a1 + 4);
    v58 = v56 - v57;
    v59 = a2[3];
    v60 = a2[4];
    v61 = a2[5];
    v62 = *(int *)(a1 + 88);
    v63 = *(int *)(a1 + 24);
    v64 = 3 * (int)v62 + a3;
    if ((v56 - v57) < 3)
    {
      if (v58)
      {
        v94 = 0;
        v95 = 0;
        v96 = 16 * v63;
        v97 = v57 - v56;
        v98 = 32 * v62 + 16 * v64;
        do
        {
          v99 = *(_QWORD *)(a1 + 80);
          v100 = (float32x4_t *)(v99 + 16 * v95 + 16 * v64);
          v101 = *v100;
          v102 = v100[v62];
          v103 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v94);
          v104 = (float32x4_t *)(v99 + v98);
          v105 = v97;
          do
          {
            v106 = vmulq_f32(v59, v101);
            v107 = vmulq_f32(v60, v102);
            v101 = v102;
            v102 = *v104;
            *v103 = vaddq_f32(vaddq_f32(v107, *v103), vaddq_f32(v106, vmulq_f32(v61, *v104)));
            v103 = (float32x4_t *)((char *)v103 + v96);
            v104 += v62;
            v54 = __CFADD__(v105++, 1);
          }
          while (!v54);
          ++v95;
          v94 += 16;
          v98 += 16;
        }
        while (v95 != v55);
      }
    }
    else
    {
      v65 = 0;
      v66 = 0;
      v67 = 48 * v63;
      v68 = 32 * v63;
      v69 = 16 * v63;
      v70 = 48 * v62;
      v71 = 48 * v62 + 16 * v64;
      v72 = v71;
      do
      {
        v73 = *(_QWORD *)(a1 + 80);
        v74 = (float32x4_t *)(v73 + 16 * v66 + 16 * v64);
        v75 = *(_QWORD *)(a1 + 16);
        v76 = v74[v62];
        v77 = v75 + v68;
        v78 = v75 + v69;
        v79 = v73 + 16 * v64;
        v80 = v73 + v71 + 16 * v62;
        v81 = *v74;
        v82 = v73 + v71;
        v83 = v73 + 16 * v64 + 32 * v62;
        v84 = v73 + v72;
        v85 = v58;
        do
        {
          v86 = v84;
          v87 = *(float32x4_t *)(v83 + v65);
          v88 = vaddq_f32(vaddq_f32(vmulq_f32(v60, v76), *(float32x4_t *)(v75 + v65)), vaddq_f32(vmulq_f32(v59, v81), vmulq_f32(v61, v87)));
          v81 = *(float32x4_t *)(v82 + v65);
          *(float32x4_t *)(v75 + v65) = v88;
          v89 = vaddq_f32(vaddq_f32(vmulq_f32(v59, v76), vmulq_f32(v61, v81)), vaddq_f32(vmulq_f32(v60, v87), *(float32x4_t *)(v78 + v65)));
          v76 = *(float32x4_t *)(v80 + v65);
          *(float32x4_t *)(v78 + v65) = v89;
          *(float32x4_t *)(v77 + v65) = vaddq_f32(vaddq_f32(vmulq_f32(v59, v87), vmulq_f32(v61, v76)), vaddq_f32(vmulq_f32(v60, v81), *(float32x4_t *)(v77 + v65)));
          v85 -= 3;
          v75 += v67;
          v77 += v67;
          v78 += v67;
          v79 += v70;
          v80 += v70;
          v82 += v70;
          v83 += v70;
          v84 += v70;
        }
        while (v85 > 2);
        if (v85)
        {
          v90 = 0;
          v91 = v65;
          do
          {
            v92 = vmulq_f32(v59, v81);
            v93 = vmulq_f32(v60, v76);
            v81 = v76;
            v76 = *(float32x4_t *)(v86 + 32 * v62);
            *(float32x4_t *)(v75 + v91) = vaddq_f32(vaddq_f32(v93, *(float32x4_t *)(v75 + v91)), vaddq_f32(v92, vmulq_f32(v61, v76)));
            v91 += v69;
            v86 += 16 * v62;
            ++v90;
          }
          while (v85 != v90);
        }
        ++v66;
        v65 += 16;
        v72 += 16;
      }
      while (v66 != v55);
    }
  }
  return 6;
}

uint64_t c7y(uint64_t a1, float32x4_t *a2, int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t *v54;
  float32x4_t *v55;
  int v56;
  float32x4_t v57;
  float32x4_t v58;

  c4y(a1, a2, a3);
  v6 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD *)(a1 + 12);
    v8 = *(_DWORD *)(a1 + 4);
    v9 = v7 - v8;
    v10 = a2[4];
    v11 = a2[5];
    v12 = a2[6];
    v13 = *(int *)(a1 + 88);
    v14 = *(int *)(a1 + 24);
    v15 = a3 + 4 * (int)v13;
    if ((v7 - v8) < 3)
    {
      if (v9)
      {
        v45 = 0;
        v46 = 0;
        v47 = 16 * v14;
        v48 = v8 - v7;
        v49 = 32 * v13 + 16 * v15;
        do
        {
          v50 = *(_QWORD *)(a1 + 80);
          v51 = (float32x4_t *)(v50 + 16 * v46 + 16 * v15);
          v52 = *v51;
          v53 = v51[v13];
          v54 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v45);
          v55 = (float32x4_t *)(v50 + v49);
          v56 = v48;
          do
          {
            v57 = vmulq_f32(v10, v52);
            v58 = vmulq_f32(v11, v53);
            v52 = v53;
            v53 = *v55;
            *v54 = vaddq_f32(vaddq_f32(v58, *v54), vaddq_f32(v57, vmulq_f32(v12, *v55)));
            v54 = (float32x4_t *)((char *)v54 + v47);
            v55 += v13;
          }
          while (!__CFADD__(v56++, 1));
          ++v46;
          v45 += 16;
          v49 += 16;
        }
        while (v46 != v6);
      }
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = 48 * v14;
      v19 = 32 * v14;
      v20 = 16 * v14;
      v21 = 48 * (_DWORD)v13;
      v22 = v21 + 16 * v15;
      v23 = v22;
      do
      {
        v24 = *(_QWORD *)(a1 + 80);
        v25 = (float32x4_t *)(v24 + 16 * v17 + 16 * v15);
        v26 = *(_QWORD *)(a1 + 16);
        v27 = v25[v13];
        v28 = v26 + v19;
        v29 = v26 + v20;
        v30 = v24 + 16 * v15;
        v31 = v24 + v22 + 16 * v13;
        v32 = *v25;
        v33 = v24 + v22;
        v34 = v24 + 16 * v15 + 32 * v13;
        v35 = v24 + v23;
        v36 = v9;
        do
        {
          v37 = v35;
          v38 = *(float32x4_t *)(v34 + v16);
          v39 = vaddq_f32(vaddq_f32(vmulq_f32(v11, v27), *(float32x4_t *)(v26 + v16)), vaddq_f32(vmulq_f32(v10, v32), vmulq_f32(v12, v38)));
          v32 = *(float32x4_t *)(v33 + v16);
          *(float32x4_t *)(v26 + v16) = v39;
          v40 = vaddq_f32(vaddq_f32(vmulq_f32(v10, v27), vmulq_f32(v12, v32)), vaddq_f32(vmulq_f32(v11, v38), *(float32x4_t *)(v29 + v16)));
          v27 = *(float32x4_t *)(v31 + v16);
          *(float32x4_t *)(v29 + v16) = v40;
          *(float32x4_t *)(v28 + v16) = vaddq_f32(vaddq_f32(vmulq_f32(v10, v38), vmulq_f32(v12, v27)), vaddq_f32(vmulq_f32(v11, v32), *(float32x4_t *)(v28 + v16)));
          v36 -= 3;
          v26 += v18;
          v28 += v18;
          v29 += v18;
          v30 += v21;
          v31 += v21;
          v33 += v21;
          v34 += v21;
          v35 += v21;
        }
        while (v36 > 2);
        if (v36)
        {
          v41 = 0;
          v42 = v16;
          do
          {
            v43 = vmulq_f32(v10, v32);
            v44 = vmulq_f32(v11, v27);
            v32 = v27;
            v27 = *(float32x4_t *)(v37 + 32 * v13);
            *(float32x4_t *)(v26 + v42) = vaddq_f32(vaddq_f32(v44, *(float32x4_t *)(v26 + v42)), vaddq_f32(v43, vmulq_f32(v12, v27)));
            v42 += v20;
            v37 += 16 * v13;
            ++v41;
          }
          while (v36 != v41);
        }
        ++v17;
        v16 += 16;
        v23 += 16;
      }
      while (v17 != v6);
    }
  }
  return 7;
}

uint64_t cadd2y(uint64_t a1, float32x4_t *a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  float32x4_t v5;
  float32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
    v5 = *a2;
    v6 = a2[1];
    v7 = *(int *)(a1 + 88);
    if (v4 < 2)
    {
      if (v4)
      {
        v24 = 0;
        v25 = 16 * a3;
        v26 = v25 + 16 * v7;
        do
        {
          *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v24) = vaddq_f32(vmulq_f32(v6, *(float32x4_t *)(*(_QWORD *)(a1 + 80) + v26 + 16 * v24)), vaddq_f32(vmulq_f32(v5, *(float32x4_t *)(*(_QWORD *)(a1 + 80)+ v25+ 16 * v24)), *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v24)));
          ++v24;
        }
        while (v3 != v24);
      }
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = *(int *)(a1 + 24);
      v11 = 32 * v10;
      v12 = 16 * v10;
      v13 = 32 * v7;
      do
      {
        v14 = *(_QWORD *)(a1 + 80);
        v15 = *(float32x4_t *)(v14 + 16 * v9 + 16 * a3);
        v16 = *(_QWORD *)(a1 + 16);
        v17 = v16 + v12;
        v18 = v14 + 16 * a3;
        v19 = v14 + 16 * a3 + 32 * v7;
        v20 = v14 + 16 * a3 + 16 * v7;
        v21 = v4;
        do
        {
          v22 = *(float32x4_t *)(v20 + v8);
          v23 = vaddq_f32(vmulq_f32(v5, v15), *(float32x4_t *)(v16 + v8));
          v15 = *(float32x4_t *)(v19 + v8);
          *(float32x4_t *)(v16 + v8) = vaddq_f32(vmulq_f32(v6, v22), v23);
          *(float32x4_t *)(v17 + v8) = vaddq_f32(vmulq_f32(v6, v15), vaddq_f32(vmulq_f32(v5, v22), *(float32x4_t *)(v17 + v8)));
          v21 -= 2;
          v16 += v11;
          v17 += v11;
          v18 += v13;
          v19 += v13;
          v20 += v13;
        }
        while (v21 > 1);
        if (v21)
          *(float32x4_t *)(v16 + v8) = vaddq_f32(vmulq_f32(v6, *(float32x4_t *)(v18 + v8 + 16 * v7)), vaddq_f32(vmulq_f32(v5, v15), *(float32x4_t *)(v16 + v8)));
        ++v9;
        v8 += 16;
      }
      while (v9 != v3);
    }
  }
  return 2;
}

uint64_t cadd3y(uint64_t a1, float32x4_t *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t *v50;
  float32x4_t *v51;
  int v52;
  float32x4_t v53;
  float32x4_t v54;

  v3 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 4);
    v6 = v4 - v5;
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v10 = *(int *)(a1 + 24);
    v11 = *(int *)(a1 + 88);
    v12 = a3;
    if ((v4 - v5) < 3)
    {
      if (v6)
      {
        v41 = 0;
        v42 = 0;
        v43 = 16 * v10;
        v44 = v5 - v4;
        v45 = 16 * a3 + 32 * v11;
        do
        {
          v46 = *(_QWORD *)(a1 + 80);
          v47 = (float32x4_t *)(v46 + 16 * v42 + 16 * v12);
          v48 = *v47;
          v49 = v47[v11];
          v50 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v41);
          v51 = (float32x4_t *)(v46 + v45);
          v52 = v44;
          do
          {
            v53 = vmulq_f32(v7, v48);
            v54 = vmulq_f32(v8, v49);
            v48 = v49;
            v49 = *v51;
            *v50 = vaddq_f32(vaddq_f32(v54, *v50), vaddq_f32(v53, vmulq_f32(v9, *v51)));
            v50 = (float32x4_t *)((char *)v50 + v43);
            v51 += v11;
          }
          while (!__CFADD__(v52++, 1));
          ++v42;
          v41 += 16;
          v45 += 16;
        }
        while (v42 != v3);
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 48 * v10;
      v16 = 16 * v10;
      v17 = 48 * v11;
      v18 = 16 * v12 + 48 * v11;
      v19 = v18;
      do
      {
        v20 = *(_QWORD *)(a1 + 80);
        v21 = (float32x4_t *)(v20 + 16 * v14 + 16 * v12);
        v22 = *(_QWORD *)(a1 + 16);
        v23 = v21[v11];
        v24 = v22 + 32 * v10;
        v25 = v22 + v16;
        v26 = v20 + 16 * v12;
        v27 = v20 + v18 + 16 * v11;
        v28 = *v21;
        v29 = v20 + v18;
        v30 = v20 + 16 * v12 + 32 * v11;
        v31 = v20 + v19;
        v32 = v6;
        do
        {
          v33 = v31;
          v34 = *(float32x4_t *)(v30 + v13);
          v35 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v23), *(float32x4_t *)(v22 + v13)), vaddq_f32(vmulq_f32(v7, v28), vmulq_f32(v9, v34)));
          v28 = *(float32x4_t *)(v29 + v13);
          *(float32x4_t *)(v22 + v13) = v35;
          v36 = vaddq_f32(vaddq_f32(vmulq_f32(v7, v23), vmulq_f32(v9, v28)), vaddq_f32(vmulq_f32(v8, v34), *(float32x4_t *)(v25 + v13)));
          v23 = *(float32x4_t *)(v27 + v13);
          *(float32x4_t *)(v25 + v13) = v36;
          *(float32x4_t *)(v24 + v13) = vaddq_f32(vaddq_f32(vmulq_f32(v7, v34), vmulq_f32(v9, v23)), vaddq_f32(vmulq_f32(v8, v28), *(float32x4_t *)(v24 + v13)));
          v32 -= 3;
          v22 += v15;
          v24 += v15;
          v25 += v15;
          v26 += v17;
          v27 += v17;
          v29 += v17;
          v30 += v17;
          v31 += v17;
        }
        while (v32 > 2);
        if (v32)
        {
          v37 = 0;
          v38 = v13;
          do
          {
            v39 = vmulq_f32(v7, v28);
            v40 = vmulq_f32(v8, v23);
            v28 = v23;
            v23 = *(float32x4_t *)(v33 + 32 * v11);
            *(float32x4_t *)(v22 + v38) = vaddq_f32(vaddq_f32(v40, *(float32x4_t *)(v22 + v38)), vaddq_f32(v39, vmulq_f32(v9, v23)));
            v38 += v16;
            v33 += 16 * v11;
            ++v37;
          }
          while (v32 != v37);
        }
        ++v14;
        v13 += 16;
        v19 += 16;
      }
      while (v14 != v3);
    }
  }
  return 3;
}

uint64_t cadd4y(uint64_t a1, float32x4_t *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  float32x4_t *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t *v59;
  int v60;
  float32x4_t v61;
  float32x4_t v62;

  v3 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 4);
    v6 = v4 - v5;
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v10 = a2[3];
    v11 = *(int *)(a1 + 24);
    v12 = *(int *)(a1 + 88);
    v13 = a3;
    if ((v4 - v5) < 4)
    {
      if (v6)
        v47 = 2 * v12;
      else
        v47 = 0;
      if (v6)
      {
        v48 = 0;
        v49 = 0;
        v50 = 16 * v11;
        v51 = 16 * v47 + 16 * a3 + 16 * v12;
        v52 = v5 - v4;
        do
        {
          v53 = *(_QWORD *)(a1 + 80);
          v54 = (float32x4_t *)(v53 + 16 * v49 + 16 * v13);
          v55 = v54[v12];
          v56 = *v54;
          v57 = v54[2 * v12];
          v58 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v48);
          v59 = (float32x4_t *)(v53 + v51);
          v60 = v52;
          do
          {
            v61 = vmulq_f32(v7, v56);
            v62 = vmulq_f32(v8, v55);
            v56 = v55;
            v55 = v57;
            v57 = *v59;
            *v58 = vaddq_f32(vaddq_f32(v61, vmulq_f32(v9, v55)), vaddq_f32(vmulq_f32(v10, *v59), vaddq_f32(v62, *v58)));
            v58 = (float32x4_t *)((char *)v58 + v50);
            v59 += v12;
          }
          while (!__CFADD__(v60++, 1));
          ++v49;
          v48 += 16;
          v51 += 16;
        }
        while (v49 != v3);
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = 2 * v11;
      v17 = v11 << 6;
      v18 = 16 * v11;
      v19 = 16 * v16;
      v20 = v12 << 6;
      v21 = 16 * a3 + (v12 << 6);
      do
      {
        v22 = *(_QWORD *)(a1 + 80);
        v23 = (float32x4_t *)(v22 + 16 * v15 + 16 * a3);
        v24 = v23[v12];
        v25 = v23[2 * v12];
        v26 = *(_QWORD *)(a1 + 16);
        v27 = v26 + v17 - v18;
        v28 = v26 + v19;
        v29 = v26 + v18;
        v30 = v22 + 16 * a3;
        v31 = v22 + v21 + 32 * v12;
        v32 = *v23;
        v33 = v22 + v21 + 16 * v12;
        v34 = v22 + v21;
        v35 = v22 + v21 - 16 * v12;
        v36 = v26 + v17;
        v37 = v6;
        do
        {
          v38 = v36;
          v39 = *(float32x4_t *)(v35 + v14);
          v40 = vaddq_f32(vaddq_f32(vmulq_f32(v7, v32), vmulq_f32(v9, v25)), vaddq_f32(vmulq_f32(v10, v39), vaddq_f32(vmulq_f32(v8, v24), *(float32x4_t *)(v26 + v14))));
          v32 = *(float32x4_t *)(v34 + v14);
          *(float32x4_t *)(v26 + v14) = v40;
          v41 = vaddq_f32(vaddq_f32(vmulq_f32(v7, v24), vmulq_f32(v9, v39)), vaddq_f32(vmulq_f32(v10, v32), vaddq_f32(vmulq_f32(v8, v25), *(float32x4_t *)(v29 + v14))));
          v24 = *(float32x4_t *)(v33 + v14);
          *(float32x4_t *)(v29 + v14) = v41;
          v42 = vaddq_f32(vaddq_f32(vmulq_f32(v7, v25), vmulq_f32(v9, v32)), vaddq_f32(vmulq_f32(v10, v24), vaddq_f32(vmulq_f32(v8, v39), *(float32x4_t *)(v28 + v14))));
          v25 = *(float32x4_t *)(v31 + v14);
          *(float32x4_t *)(v28 + v14) = v42;
          *(float32x4_t *)(v27 + v14) = vaddq_f32(vaddq_f32(vmulq_f32(v7, v39), vmulq_f32(v9, v24)), vaddq_f32(vmulq_f32(v10, v25), vaddq_f32(vmulq_f32(v8, v32), *(float32x4_t *)(v27 + v14))));
          v37 -= 4;
          v26 += v17;
          v27 += v17;
          v28 += v17;
          v29 += v17;
          v30 += v20;
          v31 += v20;
          v33 += v20;
          v34 += v20;
          v35 += v20;
          v36 += v17;
        }
        while (v37 > 3);
        if (v37)
        {
          v43 = 0;
          v44 = (float32x4_t *)(v30 + v14 + 32 * v12);
          do
          {
            v45 = vmulq_f32(v7, v32);
            v46 = vmulq_f32(v8, v24);
            v32 = v24;
            v24 = v25;
            v44 += v12;
            v25 = *v44;
            *(float32x4_t *)(v38 + v14) = vaddq_f32(vaddq_f32(v45, vmulq_f32(v9, v24)), vaddq_f32(vmulq_f32(v10, *v44), vaddq_f32(v46, *(float32x4_t *)(v38 + v14))));
            v38 += v18;
            ++v43;
          }
          while (v37 != v43);
        }
        ++v15;
        v14 += 16;
      }
      while (v15 != v3);
    }
  }
  return 4;
}

uint64_t cadd5y(uint64_t a1, float32x4_t *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  uint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  float32x4_t *v50;
  int v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v55;
  unsigned int v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v3 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 4);
    v6 = v4 - v5;
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v10 = *(int *)(a1 + 24);
    v11 = *(int *)(a1 + 88);
    if ((v4 - v5) < 3)
    {
      if (v6)
      {
        v40 = 0;
        v41 = 0;
        v42 = 16 * v10;
        v43 = v5 - v4;
        v44 = 16 * a3 + 32 * v11;
        do
        {
          v45 = *(_QWORD *)(a1 + 80);
          v46 = (float32x4_t *)(v45 + 16 * v41 + 16 * a3);
          v47 = *v46;
          v48 = v46[v11];
          v49 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v40);
          v50 = (float32x4_t *)(v45 + v44);
          v51 = v43;
          do
          {
            v52 = vmulq_f32(v7, v47);
            v53 = vmulq_f32(v8, v48);
            v47 = v48;
            v48 = *v50;
            *v49 = vaddq_f32(vaddq_f32(v53, *v49), vaddq_f32(v52, vmulq_f32(v9, *v50)));
            v49 = (float32x4_t *)((char *)v49 + v42);
            v50 += v11;
          }
          while (!__CFADD__(v51++, 1));
          ++v41;
          v40 += 16;
          v44 += 16;
        }
        while (v41 != v3);
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 48 * v10;
      v15 = 16 * v10;
      v16 = 48 * v11;
      v17 = 16 * a3 + 48 * v11;
      v18 = v17;
      do
      {
        v19 = *(_QWORD *)(a1 + 80);
        v20 = (float32x4_t *)(v19 + 16 * v13 + 16 * a3);
        v21 = *(_QWORD *)(a1 + 16);
        v22 = v20[v11];
        v23 = v21 + 32 * v10;
        v24 = v21 + v15;
        v25 = v19 + 16 * a3;
        v26 = v19 + v17 + 16 * v11;
        v27 = *v20;
        v28 = v19 + v17;
        v29 = v19 + 16 * a3 + 32 * v11;
        v30 = v19 + v18;
        v31 = v6;
        do
        {
          v32 = v30;
          v33 = *(float32x4_t *)(v29 + v12);
          v34 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v22), *(float32x4_t *)(v21 + v12)), vaddq_f32(vmulq_f32(v7, v27), vmulq_f32(v9, v33)));
          v27 = *(float32x4_t *)(v28 + v12);
          *(float32x4_t *)(v21 + v12) = v34;
          v35 = vaddq_f32(vaddq_f32(vmulq_f32(v7, v22), vmulq_f32(v9, v27)), vaddq_f32(vmulq_f32(v8, v33), *(float32x4_t *)(v24 + v12)));
          v22 = *(float32x4_t *)(v26 + v12);
          *(float32x4_t *)(v24 + v12) = v35;
          *(float32x4_t *)(v23 + v12) = vaddq_f32(vaddq_f32(vmulq_f32(v7, v33), vmulq_f32(v9, v22)), vaddq_f32(vmulq_f32(v8, v27), *(float32x4_t *)(v23 + v12)));
          v31 -= 3;
          v21 += v14;
          v23 += v14;
          v24 += v14;
          v25 += v16;
          v26 += v16;
          v28 += v16;
          v29 += v16;
          v30 += v16;
        }
        while (v31 > 2);
        if (v31)
        {
          v36 = 0;
          v37 = v12;
          do
          {
            v38 = vmulq_f32(v7, v27);
            v39 = vmulq_f32(v8, v22);
            v27 = v22;
            v22 = *(float32x4_t *)(v32 + 32 * v11);
            *(float32x4_t *)(v21 + v37) = vaddq_f32(vaddq_f32(v39, *(float32x4_t *)(v21 + v37)), vaddq_f32(v38, vmulq_f32(v9, v22)));
            v37 += v15;
            v32 += 16 * v11;
            ++v36;
          }
          while (v31 != v36);
        }
        ++v13;
        v12 += 16;
        v18 += 16;
      }
      while (v13 != v3);
    }
  }
  v55 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v55)
  {
    v56 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
    v57 = a2[3];
    v58 = a2[4];
    v59 = *(int *)(a1 + 88);
    v60 = 3 * (int)v59 + a3;
    if (v56 < 2)
    {
      if (v56)
      {
        v77 = 0;
        v78 = 16 * v60;
        v79 = v78 + 16 * v59;
        do
        {
          *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v77) = vaddq_f32(vmulq_f32(v58, *(float32x4_t *)(*(_QWORD *)(a1 + 80) + v79 + 16 * v77)), vaddq_f32(vmulq_f32(v57, *(float32x4_t *)(*(_QWORD *)(a1 + 80)+ v78+ 16 * v77)), *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v77)));
          ++v77;
        }
        while (v55 != v77);
      }
    }
    else
    {
      v61 = 0;
      v62 = 0;
      v63 = *(int *)(a1 + 24);
      v64 = 32 * v63;
      v65 = 16 * v63;
      v66 = 32 * v59;
      do
      {
        v67 = *(_QWORD *)(a1 + 80);
        v68 = *(float32x4_t *)(v67 + 16 * v62 + 16 * v60);
        v69 = *(_QWORD *)(a1 + 16);
        v70 = v69 + v65;
        v71 = v67 + 16 * v60;
        v72 = v67 + 32 * v59 + 16 * v60;
        v73 = v67 + 16 * v60 + 16 * v59;
        v74 = v56;
        do
        {
          v75 = *(float32x4_t *)(v73 + v61);
          v76 = vaddq_f32(vmulq_f32(v57, v68), *(float32x4_t *)(v69 + v61));
          v68 = *(float32x4_t *)(v72 + v61);
          *(float32x4_t *)(v69 + v61) = vaddq_f32(vmulq_f32(v58, v75), v76);
          *(float32x4_t *)(v70 + v61) = vaddq_f32(vmulq_f32(v58, v68), vaddq_f32(vmulq_f32(v57, v75), *(float32x4_t *)(v70 + v61)));
          v74 -= 2;
          v69 += v64;
          v70 += v64;
          v71 += v66;
          v72 += v66;
          v73 += v66;
        }
        while (v74 > 1);
        if (v74)
          *(float32x4_t *)(v69 + v61) = vaddq_f32(vmulq_f32(v58, *(float32x4_t *)(v71 + v61 + 16 * v59)), vaddq_f32(vmulq_f32(v57, v68), *(float32x4_t *)(v69 + v61)));
        ++v62;
        v61 += 16;
      }
      while (v62 != v55);
    }
  }
  return 5;
}

uint64_t cadd6y(uint64_t a1, float32x4_t *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  uint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  float32x4_t *v50;
  int v51;
  float32x4_t v52;
  float32x4_t v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  int v57;
  unsigned int v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t *v74;
  uint64_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  float32x4_t *v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t *v103;
  float32x4_t *v104;
  int v105;
  float32x4_t v106;
  float32x4_t v107;

  v3 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 4);
    v6 = v4 - v5;
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v10 = *(int *)(a1 + 24);
    v11 = *(int *)(a1 + 88);
    if ((v4 - v5) < 3)
    {
      if (v6)
      {
        v40 = 0;
        v41 = 0;
        v42 = 16 * v10;
        v43 = v5 - v4;
        v44 = 16 * a3 + 32 * v11;
        do
        {
          v45 = *(_QWORD *)(a1 + 80);
          v46 = (float32x4_t *)(v45 + 16 * v41 + 16 * a3);
          v47 = *v46;
          v48 = v46[v11];
          v49 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v40);
          v50 = (float32x4_t *)(v45 + v44);
          v51 = v43;
          do
          {
            v52 = vmulq_f32(v7, v47);
            v53 = vmulq_f32(v8, v48);
            v47 = v48;
            v48 = *v50;
            *v49 = vaddq_f32(vaddq_f32(v53, *v49), vaddq_f32(v52, vmulq_f32(v9, *v50)));
            v49 = (float32x4_t *)((char *)v49 + v42);
            v50 += v11;
            v54 = __CFADD__(v51++, 1);
          }
          while (!v54);
          ++v41;
          v40 += 16;
          v44 += 16;
        }
        while (v41 != v3);
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 48 * v10;
      v15 = 16 * v10;
      v16 = 48 * v11;
      v17 = 16 * a3 + 48 * v11;
      v18 = v17;
      do
      {
        v19 = *(_QWORD *)(a1 + 80);
        v20 = (float32x4_t *)(v19 + 16 * v13 + 16 * a3);
        v21 = *(_QWORD *)(a1 + 16);
        v22 = v20[v11];
        v23 = v21 + 32 * v10;
        v24 = v21 + v15;
        v25 = v19 + 16 * a3;
        v26 = v19 + v17 + 16 * v11;
        v27 = *v20;
        v28 = v19 + v17;
        v29 = v19 + 16 * a3 + 32 * v11;
        v30 = v19 + v18;
        v31 = v6;
        do
        {
          v32 = v30;
          v33 = *(float32x4_t *)(v29 + v12);
          v34 = vaddq_f32(vaddq_f32(vmulq_f32(v8, v22), *(float32x4_t *)(v21 + v12)), vaddq_f32(vmulq_f32(v7, v27), vmulq_f32(v9, v33)));
          v27 = *(float32x4_t *)(v28 + v12);
          *(float32x4_t *)(v21 + v12) = v34;
          v35 = vaddq_f32(vaddq_f32(vmulq_f32(v7, v22), vmulq_f32(v9, v27)), vaddq_f32(vmulq_f32(v8, v33), *(float32x4_t *)(v24 + v12)));
          v22 = *(float32x4_t *)(v26 + v12);
          *(float32x4_t *)(v24 + v12) = v35;
          *(float32x4_t *)(v23 + v12) = vaddq_f32(vaddq_f32(vmulq_f32(v7, v33), vmulq_f32(v9, v22)), vaddq_f32(vmulq_f32(v8, v27), *(float32x4_t *)(v23 + v12)));
          v31 -= 3;
          v21 += v14;
          v23 += v14;
          v24 += v14;
          v25 += v16;
          v26 += v16;
          v28 += v16;
          v29 += v16;
          v30 += v16;
        }
        while (v31 > 2);
        if (v31)
        {
          v36 = 0;
          v37 = v12;
          do
          {
            v38 = vmulq_f32(v7, v27);
            v39 = vmulq_f32(v8, v22);
            v27 = v22;
            v22 = *(float32x4_t *)(v32 + 32 * v11);
            *(float32x4_t *)(v21 + v37) = vaddq_f32(vaddq_f32(v39, *(float32x4_t *)(v21 + v37)), vaddq_f32(v38, vmulq_f32(v9, v22)));
            v37 += v15;
            v32 += 16 * v11;
            ++v36;
          }
          while (v31 != v36);
        }
        ++v13;
        v12 += 16;
        v18 += 16;
      }
      while (v13 != v3);
    }
  }
  v55 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v55)
  {
    v56 = *(_DWORD *)(a1 + 12);
    v57 = *(_DWORD *)(a1 + 4);
    v58 = v56 - v57;
    v59 = a2[3];
    v60 = a2[4];
    v61 = a2[5];
    v62 = *(int *)(a1 + 88);
    v63 = *(int *)(a1 + 24);
    v64 = 3 * (int)v62 + a3;
    if ((v56 - v57) < 3)
    {
      if (v58)
      {
        v94 = 0;
        v95 = 0;
        v96 = 16 * v63;
        v97 = v57 - v56;
        v98 = 32 * v62 + 16 * v64;
        do
        {
          v99 = *(_QWORD *)(a1 + 80);
          v100 = (float32x4_t *)(v99 + 16 * v95 + 16 * v64);
          v101 = *v100;
          v102 = v100[v62];
          v103 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v94);
          v104 = (float32x4_t *)(v99 + v98);
          v105 = v97;
          do
          {
            v106 = vmulq_f32(v59, v101);
            v107 = vmulq_f32(v60, v102);
            v101 = v102;
            v102 = *v104;
            *v103 = vaddq_f32(vaddq_f32(v107, *v103), vaddq_f32(v106, vmulq_f32(v61, *v104)));
            v103 = (float32x4_t *)((char *)v103 + v96);
            v104 += v62;
            v54 = __CFADD__(v105++, 1);
          }
          while (!v54);
          ++v95;
          v94 += 16;
          v98 += 16;
        }
        while (v95 != v55);
      }
    }
    else
    {
      v65 = 0;
      v66 = 0;
      v67 = 48 * v63;
      v68 = 32 * v63;
      v69 = 16 * v63;
      v70 = 48 * v62;
      v71 = 48 * v62 + 16 * v64;
      v72 = v71;
      do
      {
        v73 = *(_QWORD *)(a1 + 80);
        v74 = (float32x4_t *)(v73 + 16 * v66 + 16 * v64);
        v75 = *(_QWORD *)(a1 + 16);
        v76 = v74[v62];
        v77 = v75 + v68;
        v78 = v75 + v69;
        v79 = v73 + 16 * v64;
        v80 = v73 + v71 + 16 * v62;
        v81 = *v74;
        v82 = v73 + v71;
        v83 = v73 + 16 * v64 + 32 * v62;
        v84 = v73 + v72;
        v85 = v58;
        do
        {
          v86 = v84;
          v87 = *(float32x4_t *)(v83 + v65);
          v88 = vaddq_f32(vaddq_f32(vmulq_f32(v60, v76), *(float32x4_t *)(v75 + v65)), vaddq_f32(vmulq_f32(v59, v81), vmulq_f32(v61, v87)));
          v81 = *(float32x4_t *)(v82 + v65);
          *(float32x4_t *)(v75 + v65) = v88;
          v89 = vaddq_f32(vaddq_f32(vmulq_f32(v59, v76), vmulq_f32(v61, v81)), vaddq_f32(vmulq_f32(v60, v87), *(float32x4_t *)(v78 + v65)));
          v76 = *(float32x4_t *)(v80 + v65);
          *(float32x4_t *)(v78 + v65) = v89;
          *(float32x4_t *)(v77 + v65) = vaddq_f32(vaddq_f32(vmulq_f32(v59, v87), vmulq_f32(v61, v76)), vaddq_f32(vmulq_f32(v60, v81), *(float32x4_t *)(v77 + v65)));
          v85 -= 3;
          v75 += v67;
          v77 += v67;
          v78 += v67;
          v79 += v70;
          v80 += v70;
          v82 += v70;
          v83 += v70;
          v84 += v70;
        }
        while (v85 > 2);
        if (v85)
        {
          v90 = 0;
          v91 = v65;
          do
          {
            v92 = vmulq_f32(v59, v81);
            v93 = vmulq_f32(v60, v76);
            v81 = v76;
            v76 = *(float32x4_t *)(v86 + 32 * v62);
            *(float32x4_t *)(v75 + v91) = vaddq_f32(vaddq_f32(v93, *(float32x4_t *)(v75 + v91)), vaddq_f32(v92, vmulq_f32(v61, v76)));
            v91 += v69;
            v86 += 16 * v62;
            ++v90;
          }
          while (v85 != v90);
        }
        ++v66;
        v65 += 16;
        v72 += 16;
      }
      while (v66 != v55);
    }
  }
  return 6;
}

uint64_t cadd7y(uint64_t a1, float32x4_t *a2, int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t *v54;
  float32x4_t *v55;
  int v56;
  float32x4_t v57;
  float32x4_t v58;

  cadd4y(a1, a2, a3);
  v6 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD *)(a1 + 12);
    v8 = *(_DWORD *)(a1 + 4);
    v9 = v7 - v8;
    v10 = a2[4];
    v11 = a2[5];
    v12 = a2[6];
    v13 = *(int *)(a1 + 88);
    v14 = *(int *)(a1 + 24);
    v15 = a3 + 4 * (int)v13;
    if ((v7 - v8) < 3)
    {
      if (v9)
      {
        v45 = 0;
        v46 = 0;
        v47 = 16 * v14;
        v48 = v8 - v7;
        v49 = 32 * v13 + 16 * v15;
        do
        {
          v50 = *(_QWORD *)(a1 + 80);
          v51 = (float32x4_t *)(v50 + 16 * v46 + 16 * v15);
          v52 = *v51;
          v53 = v51[v13];
          v54 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v45);
          v55 = (float32x4_t *)(v50 + v49);
          v56 = v48;
          do
          {
            v57 = vmulq_f32(v10, v52);
            v58 = vmulq_f32(v11, v53);
            v52 = v53;
            v53 = *v55;
            *v54 = vaddq_f32(vaddq_f32(v58, *v54), vaddq_f32(v57, vmulq_f32(v12, *v55)));
            v54 = (float32x4_t *)((char *)v54 + v47);
            v55 += v13;
          }
          while (!__CFADD__(v56++, 1));
          ++v46;
          v45 += 16;
          v49 += 16;
        }
        while (v46 != v6);
      }
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = 48 * v14;
      v19 = 32 * v14;
      v20 = 16 * v14;
      v21 = 48 * (_DWORD)v13;
      v22 = v21 + 16 * v15;
      v23 = v22;
      do
      {
        v24 = *(_QWORD *)(a1 + 80);
        v25 = (float32x4_t *)(v24 + 16 * v17 + 16 * v15);
        v26 = *(_QWORD *)(a1 + 16);
        v27 = v25[v13];
        v28 = v26 + v19;
        v29 = v26 + v20;
        v30 = v24 + 16 * v15;
        v31 = v24 + v22 + 16 * v13;
        v32 = *v25;
        v33 = v24 + v22;
        v34 = v24 + 16 * v15 + 32 * v13;
        v35 = v24 + v23;
        v36 = v9;
        do
        {
          v37 = v35;
          v38 = *(float32x4_t *)(v34 + v16);
          v39 = vaddq_f32(vaddq_f32(vmulq_f32(v11, v27), *(float32x4_t *)(v26 + v16)), vaddq_f32(vmulq_f32(v10, v32), vmulq_f32(v12, v38)));
          v32 = *(float32x4_t *)(v33 + v16);
          *(float32x4_t *)(v26 + v16) = v39;
          v40 = vaddq_f32(vaddq_f32(vmulq_f32(v10, v27), vmulq_f32(v12, v32)), vaddq_f32(vmulq_f32(v11, v38), *(float32x4_t *)(v29 + v16)));
          v27 = *(float32x4_t *)(v31 + v16);
          *(float32x4_t *)(v29 + v16) = v40;
          *(float32x4_t *)(v28 + v16) = vaddq_f32(vaddq_f32(vmulq_f32(v10, v38), vmulq_f32(v12, v27)), vaddq_f32(vmulq_f32(v11, v32), *(float32x4_t *)(v28 + v16)));
          v36 -= 3;
          v26 += v18;
          v28 += v18;
          v29 += v18;
          v30 += v21;
          v31 += v21;
          v33 += v21;
          v34 += v21;
          v35 += v21;
        }
        while (v36 > 2);
        if (v36)
        {
          v41 = 0;
          v42 = v16;
          do
          {
            v43 = vmulq_f32(v10, v32);
            v44 = vmulq_f32(v11, v27);
            v32 = v27;
            v27 = *(float32x4_t *)(v37 + 32 * v13);
            *(float32x4_t *)(v26 + v42) = vaddq_f32(vaddq_f32(v44, *(float32x4_t *)(v26 + v42)), vaddq_f32(v43, vmulq_f32(v12, v27)));
            v42 += v20;
            v37 += 16 * v13;
            ++v41;
          }
          while (v36 != v41);
        }
        ++v17;
        v16 += 16;
        v23 += 16;
      }
      while (v17 != v6);
    }
  }
  return 7;
}

void HGConvolutionShader::~HGConvolutionShader(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E652E048;
  v2 = *((_QWORD *)this + 54);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1080C4057E67DB5);
  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E652E048;
  v2 = *((_QWORD *)this + 54);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1080C4057E67DB5);
  HGNode::~HGNode(this);
  HGObject::operator delete(v3);
}

uint64_t HGConvolutionShader::addRound(HGConvolutionShader *this, const HGLinearFilter2D *a2, int a3, int a4, int a5, char a6)
{
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t (**v18)();
  uint64_t (**v19)();
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t (*v33)(uint64_t, float32x4_t *, int);
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t (**v54)();
  uint64_t (**v55)();
  int v56;
  uint64_t (*v57)();
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t (**v69)();
  int v70;
  uint64_t (**v71)();
  int v72;
  uint64_t (*v73)();
  _DWORD *v74;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t (*v79)();
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v12 = *((_DWORD *)this + 110);
  v13 = *((_QWORD *)this + 54);
  if (v13)
  {
    if ((a6 & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    v13 = operator new[]();
    *((_QWORD *)this + 54) = v13;
    if ((a6 & 1) != 0)
    {
LABEL_3:
      v14 = *((_DWORD *)this + 110);
      v15 = v14;
      v16 = (_DWORD *)(v13 + 16 * v14);
      *v16 = a3;
      v16[1] = a4;
      v17 = a5;
      v18 = &cx[v17];
      v19 = &caddx[v17];
      if (!v12)
        v19 = v18;
      goto LABEL_55;
    }
  }
  v21 = *((_DWORD *)a2 + 2);
  v20 = *((_DWORD *)a2 + 3);
  if (v20 >= a4)
  {
    v14 = *((_DWORD *)this + 110);
    v50 = v20;
    v15 = v14;
    v51 = a3 - v21;
    if (a3 <= v21)
      goto LABEL_30;
  }
  else
  {
    v22 = v21 + *((_DWORD *)a2 + 4);
    v23 = v22 - 1;
    v24 = v22 - 6;
    v14 = *((_DWORD *)this + 110);
    if (v21 < v24)
    {
      v25 = v21 + 4;
      if (v24 <= v21 + 8)
        v26 = v21 + 8;
      else
        v26 = v24;
      v27 = v26 - v21 - 5;
      v28 = (v27 >> 2) + 1;
      v29 = v28 & 0x7FFFFFFE;
      v30 = 4 * (v28 & 0x7FFFFFFE);
      v31 = v25 + v30;
      v32 = v21 + v30;
      v33 = c4x;
      v34 = v20;
      while (1)
      {
        while (1)
        {
          v39 = v14;
          v40 = v13 + 16 * v14;
          *(_DWORD *)v40 = v21;
          *(_DWORD *)(v40 + 4) = v34;
          *(_QWORD *)(v40 + 8) = v33;
          v41 = v39 + 1;
          if (v25 < v24)
            break;
          v46 = v21;
          v42 = v21 + 4;
          v47 = v23 - v25;
          if (v23 - v25 <= 3)
            goto LABEL_27;
LABEL_13:
          v35 = v13 + 16 * (int)v41;
          *(_DWORD *)v35 = v42;
          *(_DWORD *)(v35 + 4) = v34;
          *(_QWORD *)(v35 + 8) = cadd3x;
          v36 = (int)v39 + 2;
          v37 = v46 + 7;
          v38 = v13 + 16 * v36;
          *(_DWORD *)v38 = v37;
          *(_DWORD *)(v38 + 4) = v34;
          *(_QWORD *)(v38 + 8) = caddx[v47 - 2];
          v14 = v36 + 1;
          ++v34;
          v33 = cadd4x;
          if (v34 == a4)
            goto LABEL_42;
        }
        v42 = v21 + 4;
        if (v27 < 4)
          goto LABEL_24;
        v41 += v29;
        v43 = v21 + 8;
        v44 = v28 & 0x7FFFFFFE;
        v45 = v13 + 20 + 16 * v39;
        do
        {
          *(_DWORD *)(v45 - 4) = v43 - 4;
          *(_DWORD *)v45 = v34;
          *(_DWORD *)(v45 + 12) = v43;
          *(_DWORD *)(v45 + 16) = v34;
          v43 += 8;
          *(_QWORD *)(v45 + 4) = cadd4x;
          *(_QWORD *)(v45 + 20) = cadd4x;
          v45 += 32;
          v44 -= 2;
        }
        while (v44);
        if (v29 != v28)
          break;
        LODWORD(v39) = v29 + v39;
        v46 = v32;
        v42 = v31;
        v47 = v23 - v31;
        if (v23 - v31 > 3)
          goto LABEL_13;
LABEL_27:
        v49 = v13 + 16 * (int)v41;
        *(_DWORD *)v49 = v42;
        *(_DWORD *)(v49 + 4) = v34;
        *(_QWORD *)(v49 + 8) = caddx[v47 + 1];
        v14 = v41 + 1;
        ++v34;
        v33 = cadd4x;
        if (v34 == a4)
          goto LABEL_42;
      }
      v42 = v31;
LABEL_24:
      v48 = v13 + 4 + 16 * v41;
      do
      {
        *(_DWORD *)(v48 - 4) = v42;
        *(_DWORD *)v48 = v34;
        *(_QWORD *)(v48 + 4) = cadd4x;
        LODWORD(v41) = v41 + 1;
        v42 += 4;
        v48 += 16;
      }
      while (v42 < v24);
      LODWORD(v39) = v41 - 1;
      v46 = v42 - 4;
      v47 = v23 - v42;
      if (v23 - v42 <= 3)
        goto LABEL_27;
      goto LABEL_13;
    }
    v56 = v23 - v21;
    if (v56 >= 4)
    {
      v57 = caddx[v56 - 2];
      v58 = v21 + 3;
      v59 = v13 + 16 * v14;
      *(_DWORD *)v59 = v21;
      *(_DWORD *)(v59 + 4) = v20;
      *(_QWORD *)(v59 + 8) = c3x;
      *(_DWORD *)(v59 + 16) = v21 + 3;
      *(_DWORD *)(v59 + 20) = v20;
      *(_QWORD *)(v59 + 24) = v57;
      v60 = v14 + 2;
      v61 = v20 + 1;
      if (v20 + 1 != a4)
      {
        if (a4 - 2 == v20)
          goto LABEL_39;
        v62 = (a4 - 2 - v20) + 1;
        v60 += 2 * (v62 & 0x1FFFFFFFELL);
        v61 += v62 & 0xFFFFFFFE;
        v63 = v13 + 16 * v14 + 48;
        v64 = v20 + 2;
        v65 = v62 & 0x1FFFFFFFELL;
        do
        {
          *(_DWORD *)(v63 - 16) = v21;
          *(_DWORD *)(v63 - 12) = v64 - 1;
          *(_DWORD *)(v63 + 16) = v21;
          *(_DWORD *)(v63 + 20) = v64;
          *(_QWORD *)(v63 - 8) = cadd3x;
          *(_QWORD *)(v63 + 24) = cadd3x;
          *(_DWORD *)v63 = v58;
          *(_DWORD *)(v63 + 4) = v64 - 1;
          *(_DWORD *)(v63 + 32) = v58;
          *(_DWORD *)(v63 + 36) = v64;
          *(_QWORD *)(v63 + 8) = v57;
          *(_QWORD *)(v63 + 40) = v57;
          v63 += 64;
          v64 += 2;
          v65 -= 2;
        }
        while (v65);
        if (v62 != (v62 & 0x1FFFFFFFELL))
        {
LABEL_39:
          v66 = v13 + 16 * v60 + 16;
          do
          {
            *(_DWORD *)(v66 - 16) = v21;
            *(_DWORD *)(v66 - 12) = v61;
            *(_DWORD *)v66 = v58;
            *(_DWORD *)(v66 + 4) = v61;
            LODWORD(v60) = v60 + 2;
            ++v61;
            *(_QWORD *)(v66 - 8) = cadd3x;
            *(_QWORD *)(v66 + 8) = v57;
            v66 += 32;
          }
          while (a4 != v61);
        }
      }
      v14 = v60;
LABEL_42:
      v50 = a4;
      v15 = v14;
      v51 = a3 - v21;
      if (a3 > v21)
        goto LABEL_43;
LABEL_30:
      v52 = (_DWORD *)(v13 + 16 * v15);
      *v52 = a3;
      v52[1] = a4;
      v53 = a5;
      v54 = &cx[v53];
      v55 = &caddx[v53];
      if (v20 >= a4)
        v19 = v54;
      else
        v19 = v55;
      goto LABEL_55;
    }
    v76 = v56 + 1;
    v77 = v13 + 16 * v14;
    *(_DWORD *)v77 = v21;
    *(_DWORD *)(v77 + 4) = v20;
    *(_QWORD *)(v77 + 8) = cx[v76];
    v15 = v14 + 1;
    v78 = v20 + 1;
    if (v20 + 1 != a4)
    {
      v79 = caddx[v76];
      if (a4 - 2 == v20)
        goto LABEL_61;
      v80 = (a4 - 2 - v20) + 1;
      v15 += v80 & 0x1FFFFFFFELL;
      v78 += v80 & 0xFFFFFFFE;
      v81 = v20 + 2;
      v82 = v13 + 16 * v14 + 20;
      v83 = v80 & 0x1FFFFFFFELL;
      do
      {
        *(_DWORD *)(v82 - 4) = v21;
        *(_DWORD *)v82 = v81 - 1;
        *(_DWORD *)(v82 + 12) = v21;
        *(_DWORD *)(v82 + 16) = v81;
        v81 += 2;
        *(_QWORD *)(v82 + 4) = v79;
        *(_QWORD *)(v82 + 20) = v79;
        v82 += 32;
        v83 -= 2;
      }
      while (v83);
      if (v80 != (v80 & 0x1FFFFFFFELL))
      {
LABEL_61:
        v84 = v13 + 16 * v15 + 4;
        do
        {
          *(_DWORD *)(v84 - 4) = v21;
          *(_DWORD *)v84 = v78;
          *(_QWORD *)(v84 + 4) = v79;
          LODWORD(v15) = v15 + 1;
          ++v78;
          v84 += 16;
        }
        while (a4 != v78);
      }
    }
    v14 = v15;
    v50 = a4;
    v15 = (int)v15;
    v51 = a3 - v21;
    if (a3 <= v21)
      goto LABEL_30;
  }
LABEL_43:
  if (v51 >= 4)
    v67 = 4;
  else
    v67 = v51;
  v68 = v13 + 16 * v15;
  *(_DWORD *)v68 = v21;
  *(_DWORD *)(v68 + 4) = v50;
  if (v20 >= a4)
    v69 = cx;
  else
    v69 = caddx;
  *(_QWORD *)(v68 + 8) = v69[v67];
  v14 = v15 + 1;
  v70 = v67 + v21;
  if (v67 + v21 < a3)
  {
    v71 = (uint64_t (**)())(v68 + 24);
    do
    {
      v72 = a3 - v70;
      if (a3 - v70 >= 4)
        v72 = 4;
      v73 = caddx[v72];
      *((_DWORD *)v71 - 2) = v70;
      *((_DWORD *)v71 - 1) = v50;
      *v71 = v73;
      v71 += 2;
      ++v14;
      v70 += v72;
    }
    while (v70 < a3);
  }
  v15 = v14;
  v74 = (_DWORD *)(v13 + 16 * v14);
  *v74 = a3;
  v74[1] = a4;
  v19 = &caddx[a5];
LABEL_55:
  *(_QWORD *)(v13 + 16 * v15 + 8) = *v19;
  *((_DWORD *)this + 110) = v14 + 1;
  return 1;
}

uint64_t HGConvolutionShader::GetDOD(HGConvolutionShader *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  if (a3)
    return 0;
  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (HGRectIsNull(*(uint64_t *)&a4.var0, *(uint64_t *)&a4.var2))
    return 0;
  v8 = HGRectMake4i(*((_DWORD *)this + 104), *((_DWORD *)this + 105), *((_DWORD *)this + 104) + *((_DWORD *)this + 102) - 1, *((_DWORD *)this + 105) + *((_DWORD *)this + 103) - 1);
  return HGRectGrow(v5, v4, v8);
}

uint64_t HGConvolutionShader::GetROI(HGConvolutionShader *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a3 == 1)
    return HGRectMake4i(0, 0, *((_DWORD *)this + 103) * *((_DWORD *)this + 102), 1u);
  if (a3)
    return 0;
  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  v6 = HGRectMake4i(*((_DWORD *)this + 104), *((_DWORD *)this + 105), *((_DWORD *)this + 104) + *((_DWORD *)this + 102) - 1, *((_DWORD *)this + 105) + *((_DWORD *)this + 103) - 1);
  return HGRectGrow(v5, v4, v6);
}

uint64_t HGConvolutionShader::compile(HGConvolutionShader *this, const HGLinearFilter2D *a2, char *a3, int a4, char a5)
{
  int v5;
  float32x4_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int8x16_t v16;
  unsigned __int8 v17;
  int v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  unsigned int v26;
  int8x16_t v27;
  unsigned __int8 v28;
  unsigned int v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int8x16_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int8x16_t v52;
  int v54;
  int v55;

  v5 = (int)a3;
  v8 = *(float32x4_t **)a2;
  *((_QWORD *)this + 53) = *(_QWORD *)a2;
  v9 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 51) = v9;
  v10 = *((_DWORD *)a2 + 2);
  v11 = *((_DWORD *)a2 + 3);
  *((_DWORD *)this + 104) = v10;
  *((_DWORD *)this + 105) = v11;
  v12 = v9;
  v55 = a4;
  if (v11 >= a4)
  {
    v14 = v10;
    v55 = v11;
    if ((int)v9 < 1)
      goto LABEL_48;
    goto LABEL_6;
  }
  v54 = (int)a3;
  v13 = v9 + v10 - 1;
  if (v10 > v13)
  {
    v8 = (float32x4_t *)((char *)v8 + (16 * (~v11 + a4) + 16) * (int)v9);
    if ((int)v9 > 0)
    {
      v14 = v10;
      v5 = (int)a3;
      goto LABEL_6;
    }
    v17 = 0;
    v14 = v10;
    v5 = (int)a3;
    if (v10 < (int)a3)
      goto LABEL_50;
    goto LABEL_67;
  }
  v14 = v10;
  while (2)
  {
    v26 = v12 - 1;
    if (v12 < 1)
    {
      v28 = 0;
    }
    else
    {
      if (v26 >= 7)
        v26 = 7;
      v27 = (int8x16_t)vceqzq_f32(*v8);
      *(int32x2_t *)v27.i8 = vpmax_s32(*(int32x2_t *)v27.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
      v28 = vpmax_s32(*(int32x2_t *)v27.i8, *(int32x2_t *)v27.i8).u32[0] == 0;
      if (v26)
      {
        v29 = v26 + 1;
        v30 = (int8x16_t)vceqzq_f32(v8[1]);
        *(int32x2_t *)v30.i8 = vpmax_s32(*(int32x2_t *)v30.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
        v28 |= 2 * (vpmax_s32(*(int32x2_t *)v30.i8, *(int32x2_t *)v30.i8).u32[0] == 0);
        if (v29 != 2)
        {
          v31 = (int8x16_t)vceqzq_f32(v8[2]);
          *(int32x2_t *)v31.i8 = vpmax_s32(*(int32x2_t *)v31.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
          v28 |= 4 * (vpmax_s32(*(int32x2_t *)v31.i8, *(int32x2_t *)v31.i8).u32[0] == 0);
          if (v29 != 3)
          {
            v32 = (int8x16_t)vceqzq_f32(v8[3]);
            *(int32x2_t *)v32.i8 = vpmax_s32(*(int32x2_t *)v32.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
            v28 |= 8 * (vpmax_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v32.i8).u32[0] == 0);
            if (v29 != 4)
            {
              v33 = (int8x16_t)vceqzq_f32(v8[4]);
              *(int32x2_t *)v33.i8 = vpmax_s32(*(int32x2_t *)v33.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL));
              v28 |= 16 * (vpmax_s32(*(int32x2_t *)v33.i8, *(int32x2_t *)v33.i8).u32[0] == 0);
              if (v29 != 5)
              {
                v34 = (int8x16_t)vceqzq_f32(v8[5]);
                *(int32x2_t *)v34.i8 = vpmax_s32(*(int32x2_t *)v34.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
                v28 |= 32 * (vpmax_s32(*(int32x2_t *)v34.i8, *(int32x2_t *)v34.i8).u32[0] == 0);
                if (v29 != 6)
                {
                  v35 = (int8x16_t)vceqzq_f32(v8[6]);
                  *(int32x2_t *)v35.i8 = vpmax_s32(*(int32x2_t *)v35.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
                  v28 |= (vpmax_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v35.i8).u32[0] == 0) << 6;
                  if (v29 != 7)
                  {
                    v36 = (int8x16_t)vceqzq_f32(v8[7]);
                    *(int32x2_t *)v36.i8 = vpmax_s32(*(int32x2_t *)v36.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
                    v28 |= (vpmax_s32(*(int32x2_t *)v36.i8, *(int32x2_t *)v36.i8).u32[0] == 0) << 7;
                  }
                }
              }
            }
          }
        }
      }
    }
    v37 = v10;
    do
    {
      if ((v28 & 1) == 0)
      {
        v39 = 1;
        if ((a5 & 1) == 0)
          HGConvolutionShader::compile(this, a2, v37, v11, 1);
        goto LABEL_42;
      }
      v39 = lut[v28 >> 1];
      if ((a5 & 1) != 0)
        goto LABEL_41;
      v40 = v14 + v12 + ~v37;
      if (v40 >= 3)
        v40 = 3;
      if (v39 <= v40)
      {
LABEL_41:
        HGConvolutionShader::addRound(this, a2, v37, v11, v39, a5 & 1);
LABEL_42:
        a5 = 1;
        goto LABEL_43;
      }
      a5 = 0;
LABEL_43:
      v14 = *((_DWORD *)a2 + 2);
      v12 = *((_DWORD *)a2 + 4);
      v41 = v39 - 1;
      v42 = v37 + v39;
      v43 = 8 - v10 + v37;
      v44 = ~v37 + v14 + v12;
      do
      {
        v28 >>= 1;
        if (v44 >= 8)
        {
          v45 = (int8x16_t)vceqzq_f32(v8[v43]);
          *(int32x2_t *)v45.i8 = vpmax_s32(*(int32x2_t *)v45.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
          v28 |= (vpmax_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v45.i8).u32[0] == 0) << 7;
        }
        ++v43;
        --v44;
        --v39;
      }
      while (v39);
      v38 = v37 + v41;
      v37 = v42;
    }
    while (v38 < v13);
    v8 += v12;
    if (++v11 != v55)
      continue;
    break;
  }
  v5 = v54;
  if (v12 < 1)
  {
LABEL_48:
    v17 = 0;
    goto LABEL_49;
  }
LABEL_6:
  v15 = v12 - 1;
  if ((v12 - 1) >= 7)
    v15 = 7;
  v16 = (int8x16_t)vceqzq_f32(*v8);
  *(int32x2_t *)v16.i8 = vpmax_s32(*(int32x2_t *)v16.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  v17 = vpmax_s32(*(int32x2_t *)v16.i8, *(int32x2_t *)v16.i8).u32[0] == 0;
  if (v15)
  {
    v18 = v15 + 1;
    v19 = (int8x16_t)vceqzq_f32(v8[1]);
    *(int32x2_t *)v19.i8 = vpmax_s32(*(int32x2_t *)v19.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
    v17 |= 2 * (vpmax_s32(*(int32x2_t *)v19.i8, *(int32x2_t *)v19.i8).u32[0] == 0);
    if (v18 != 2)
    {
      v20 = (int8x16_t)vceqzq_f32(v8[2]);
      *(int32x2_t *)v20.i8 = vpmax_s32(*(int32x2_t *)v20.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
      v17 |= 4 * (vpmax_s32(*(int32x2_t *)v20.i8, *(int32x2_t *)v20.i8).u32[0] == 0);
      if (v18 != 3)
      {
        v21 = (int8x16_t)vceqzq_f32(v8[3]);
        *(int32x2_t *)v21.i8 = vpmax_s32(*(int32x2_t *)v21.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
        v17 |= 8 * (vpmax_s32(*(int32x2_t *)v21.i8, *(int32x2_t *)v21.i8).u32[0] == 0);
        if (v18 != 4)
        {
          v22 = (int8x16_t)vceqzq_f32(v8[4]);
          *(int32x2_t *)v22.i8 = vpmax_s32(*(int32x2_t *)v22.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
          v17 |= 16 * (vpmax_s32(*(int32x2_t *)v22.i8, *(int32x2_t *)v22.i8).u32[0] == 0);
          if (v18 != 5)
          {
            v23 = (int8x16_t)vceqzq_f32(v8[5]);
            *(int32x2_t *)v23.i8 = vpmax_s32(*(int32x2_t *)v23.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
            v17 |= 32 * (vpmax_s32(*(int32x2_t *)v23.i8, *(int32x2_t *)v23.i8).u32[0] == 0);
            if (v18 != 6)
            {
              v24 = (int8x16_t)vceqzq_f32(v8[6]);
              *(int32x2_t *)v24.i8 = vpmax_s32(*(int32x2_t *)v24.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
              v17 |= (vpmax_s32(*(int32x2_t *)v24.i8, *(int32x2_t *)v24.i8).u32[0] == 0) << 6;
              if (v18 != 7)
              {
                v25 = (int8x16_t)vceqzq_f32(v8[7]);
                *(int32x2_t *)v25.i8 = vpmax_s32(*(int32x2_t *)v25.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
                v17 |= (vpmax_s32(*(int32x2_t *)v25.i8, *(int32x2_t *)v25.i8).u32[0] == 0) << 7;
                if (v10 >= v5)
                  goto LABEL_67;
LABEL_50:
                v46 = 8 - v10;
                while (2)
                {
                  if ((v17 & 1) != 0)
                  {
                    v47 = lut[v17 >> 1];
                    if ((a5 & 1) != 0)
                      goto LABEL_60;
                    v48 = v14 + v12 + ~v10;
                    if (v48 >= 3)
                      v48 = 3;
                    if (v47 <= v48)
                    {
LABEL_60:
                      HGConvolutionShader::addRound(this, a2, v10, v55, v47, a5 & 1);
                      goto LABEL_61;
                    }
                    a5 = 0;
                  }
                  else
                  {
                    v47 = 1;
                    if ((a5 & 1) == 0)
                      HGConvolutionShader::compile(this, a2, v10, v55, 1);
LABEL_61:
                    a5 = 1;
                  }
                  v14 = *((_DWORD *)a2 + 2);
                  v12 = *((_DWORD *)a2 + 4);
                  v49 = v46 + v10;
                  v50 = ~v10 + v14 + v12;
                  v51 = v47;
                  do
                  {
                    v17 >>= 1;
                    if (v50 >= 8)
                    {
                      v52 = (int8x16_t)vceqzq_f32(v8[v49]);
                      *(int32x2_t *)v52.i8 = vpmax_s32(*(int32x2_t *)v52.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
                      v17 |= (vpmax_s32(*(int32x2_t *)v52.i8, *(int32x2_t *)v52.i8).u32[0] == 0) << 7;
                    }
                    ++v49;
                    --v50;
                    --v51;
                  }
                  while (v51);
                  v10 += v47;
                  if (v10 >= v5)
                    goto LABEL_67;
                  continue;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_49:
  if (v10 < v5)
    goto LABEL_50;
LABEL_67:
  HGNode::ClearBits((HGNode *)this, (uint64_t)a2, a3);
  return 1;
}

const char *HGConvolutionShader::GetProgram(HGConvolutionShader *this, HGRenderer *a2)
{
  if (HGRenderer::GetTarget(a2, 393216) < 0x60B10)
    return 0;
  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 19) == 27)
    return "//Metal1.0     \n"
           "//LEN=00000007cf\n"
           "fragment FragmentOut fragmentFunc(VertexInOut             frag        [[ stage_in ]],\n"
           "                                  const constant float4 * hg_Params   [[ buffer(0) ]],\n"
           "                                  texture2d< half >       hg_Texture0 [[ texture(0) ]], // base image\n"
           "                                  sampler                 hg_Sampler0 [[ sampler(0) ]],\n"
           "                                  texture2d< float >      hg_Texture1 [[ texture(1) ]], // coefficents, flatt"
           "ened to 1D in x\n"
           "                                  sampler                 hg_Sampler1 [[ sampler(1) ]])\n"
           "{\n"
           "    const int16_t width {static_cast<int16_t>(hg_Params[0].x)};\n"
           "    const int16_t height {static_cast<int16_t>(hg_Params[0].y)};\n"
           "    \n"
           "    // Accumulator\n"
           "    float4 R0 {0.0, 0.0, 0.0, 0.0};\n"
           "    \n"
           "    // Coordinate Offsets\n"
           "    const float xOff {static_cast<float>(hg_Params[0].z)};\n"
           "    const float yOff {static_cast<float>(hg_Params[0].w)};\n"
           "    \n"
           "    for (int16_t j {0}; j < height; ++j)\n"
           "    {\n"
           "        for (int16_t k {0}; k < width; ++k)\n"
           "        {\n"
           "            // Coefficient index\n"
           "            const int16_t cIndex {static_cast<int16_t>(k + (j * width))};\n"
           "            \n"
           "            // Coefficient (sample the centers of the coefficient texels)\n"
           "            const float4 C0 {hg_Texture1.sample(hg_Sampler1, float2(cIndex + 0.5, 0.5))};\n"
           "            \n"
           "            // Determine sample texture coordinates centered about the current fragment\n"
           "            const float u = {frag._texCoord0.x + xOff + static_cast<float>(k)};\n"
           "            const float v = {frag._texCoord0.y + yOff + static_cast<float>(j)};\n"
           "            \n"
           "            // Retrieve sample\n"
           "            const half4 S0 {hg_Texture0.sample(hg_Sampler0, float2(u,v))};\n"
           "\n"
           "            // Accumulate\n"
           "            R0 += {C0 * static_cast<float4>(S0)};\n"
           "        }\n"
           "    }\n"
           "    \n"
           "    FragmentOut ret {R0};\n"
           "    return ret;\n"
           "}\n"
           "//MD5=8c980f69:cd21baa0:e0ab4b40:4b70610a\n"
           "//SIG=00000000:00000000:00000000:00000001:0008:0001:0000:0000:0000:0000:0002:0000:0001:02:0:0:0\n";
  return "//Metal1.0     \n"
         "//LEN=00000007d0\n"
         "fragment FragmentOut fragmentFunc(VertexInOut             frag        [[ stage_in ]],\n"
         "                                  const constant float4 * hg_Params   [[ buffer(0) ]],\n"
         "                                  texture2d< float >      hg_Texture0 [[ texture(0) ]], // base image\n"
         "                                  sampler                 hg_Sampler0 [[ sampler(0) ]],\n"
         "                                  texture2d< float >      hg_Texture1 [[ texture(1) ]], // coefficents, flatten"
         "ed to 1D in x\n"
         "                                  sampler                 hg_Sampler1 [[ sampler(1) ]])\n"
         "{\n"
         "    const int16_t width {static_cast<int16_t>(hg_Params[0].x)};\n"
         "    const int16_t height {static_cast<int16_t>(hg_Params[0].y)};\n"
         "    \n"
         "    // Accumulator\n"
         "    float4 R0 {0.0, 0.0, 0.0, 0.0};\n"
         "    \n"
         "    // Coordinate Offsets\n"
         "    const float xOff {static_cast<float>(hg_Params[0].z)};\n"
         "    const float yOff {static_cast<float>(hg_Params[0].w)};\n"
         "    \n"
         "    for (int16_t j {0}; j < height; ++j)\n"
         "    {\n"
         "        for (int16_t k {0}; k < width; ++k)\n"
         "        {\n"
         "            // Coefficient index\n"
         "            const int16_t cIndex {static_cast<int16_t>(k + (j * width))};\n"
         "            \n"
         "            // Coefficient (sample the centers of the coefficient texels)\n"
         "            const float4 C0 {hg_Texture1.sample(hg_Sampler1, float2(cIndex + 0.5, 0.5))};\n"
         "            \n"
         "            // Determine sample texture coordinates centered about the current fragment\n"
         "            const float u = {frag._texCoord0.x + xOff + static_cast<float>(k)};\n"
         "            const float v = {frag._texCoord0.y + yOff + static_cast<float>(j)};\n"
         "            \n"
         "            // Retrieve sample\n"
         "            const float4 S0 {hg_Texture0.sample(hg_Sampler0, float2(u,v))};\n"
         "\n"
         "            // Accumulate\n"
         "            R0 += {C0 * static_cast<float4>(S0)};\n"
         "        }\n"
         "    }\n"
         "    \n"
         "    FragmentOut ret {R0};\n"
         "    return ret;\n"
         "}\n"
         "//MD5=038605c0:7066b788:55c1d230:a6da0cc5\n"
         "//SIG=00000000:00000000:00000000:00000000:0008:0001:0000:0000:0000:0000:0002:0000:0001:02:0:0:0\n";
}

void HGConvolutionShader::InitProgramDescriptor(HGConvolutionShader *this, HGProgramDescriptor *a2)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  const char *v17;
  std::string v18;
  void *__p[2];
  unsigned __int8 v20;
  void *v21[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int128 v28;
  int64_t v29;

  HGMetalUtils::stringForMetalHeader((uint64_t)&v25);
  HGMetalUtils::stringForMetalVertexOutputStruct((HGMetalUtils *)1, 0, (uint64_t)v23);
  if ((v24 & 0x80u) == 0)
    v3 = v23;
  else
    v3 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v4 = v24;
  else
    v4 = (std::string::size_type)v23[1];
  v5 = std::string::append(&v25, (const std::string::value_type *)v3, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  HGMetalUtils::stringForMetalVertexShader((HGMetalUtils *)"vertexFunc", (const char *)1, 0, (uint64_t)v21);
  if ((v22 & 0x80u) == 0)
    v7 = v21;
  else
    v7 = (void **)v21[0];
  if ((v22 & 0x80u) == 0)
    v8 = v22;
  else
    v8 = (std::string::size_type)v21[1];
  v9 = std::string::append(&v26, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  HGMetalUtils::stringForMetalFragmentOutputStruct((HGMetalUtils *)1, 0, (uint64_t)__p);
  if ((v20 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v12 = v20;
  else
    v12 = (std::string::size_type)__p[1];
  v13 = std::string::append(&v27, (const std::string::value_type *)v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v18, "//Metal1.0     \n//LEN=00000007d0\nfragment FragmentOut fragmentFunc(VertexInOut             frag        [[ stage_in ]],\n                                  const constant float4 * hg_Params   [[ buffer(0) ]],\n                                  texture2d< float >      hg_Texture0 [[ texture(0) ]], // base image\n                                  sampler                 hg_Sampler0 [[ sampler(0) ]],\n                                  texture2d< float >      hg_Texture1 [[ texture(1) ]], // coefficents, flattened to 1D in x\n                                  sampler                 hg_Sampler1 [[ sampler(1) ]])\n{\n    const int16_t width {static_cast<int16_t>(hg_Params[0].x)};\n"
          "    const int16_t height {static_cast<int16_t>(hg_Params[0].y)};\n"
          "    \n"
          "    // Accumulator\n"
          "    float4 R0 {0.0, 0.0, 0.0, 0.0};\n"
          "    \n"
          "    // Coordinate Offsets\n"
          "    const float xOff {static_cast<float>(hg_Params[0].z)};\n"
          "    const float yOff {static_cast<float>(hg_Params[0].w)};\n"
          "    \n"
          "    for (int16_t j {0}; j < height; ++j)\n"
          "    {\n"
          "        for (int16_t k {0}; k < width; ++k)\n"
          "        {\n"
          "            // Coefficient index\n"
          "            const int16_t cIndex {static_cast<int16_t>(k + (j * width))};\n"
          "            \n"
          "            // Coefficient (sample the centers of the coefficient texels)\n"
          "            const float4 C0 {hg_Texture1.sample(hg_Sampler1, float2(cIndex + 0.5, 0.5))};\n"
          "            \n"
          "            // Determine sample texture coordinates centered about the current fragment\n"
          "            const float u = {frag._texCoord0.x + xOff + static_cast<float>(k)};\n"
          "            const float v = {frag._texCoord0.y + yOff + static_cast<float>(j)};\n"
          "            \n"
          "            // Retrieve sample\n"
          "            const float4 S0 {hg_Texture0.sample(hg_Sampler0, float2(u,v))};\n"
          "\n"
          "            // Accumulate\n"
          "            R0 += {C0 * static_cast<float4>(S0)};\n"
          "        }\n"
          "    }\n"
          "    \n"
          "    FragmentOut ret {R0};\n"
          "    return ret;\n"
          "}\n"
          "//MD5=038605c0:7066b788:55c1d230:a6da0cc5\n"
          "//SIG=00000000:00000000:00000000:00000000:0008:0001:0000:0000:0000:0000:0002:0000:0001:02:0:0:0\n");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v29 = v15->__r_.__value_.__r.__words[2];
  v28 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if (((char)v20 & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_32;
    }
  }
  else if (((char)v20 & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if (((char)v22 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v27.__r_.__value_.__l.__data_);
  if (((char)v22 & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v21[0]);
  if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if (((char)v24 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v26.__r_.__value_.__l.__data_);
  if (((char)v24 & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_36:
    operator delete(v25.__r_.__value_.__l.__data_);
LABEL_26:
    if (v29 >= 0)
      v17 = (const char *)&v28;
    else
      v17 = (const char *)v28;
    HGProgramDescriptor::SetShaderProgram(a2, v17);
  }
LABEL_35:
  operator delete(v23[0]);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_26;
  goto LABEL_36;
}

void sub_1B2AD78C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  if (a22 < 0)
    operator delete(__p);
  std::vector<HGBinding>::~vector[abi:ne180100]((void **)(v48 - 128));
  std::vector<HGBinding>::~vector[abi:ne180100]((void **)(v48 - 96));
  if (*(char *)(v48 - 41) < 0)
    operator delete(*(void **)(v48 - 64));
  _Unwind_Resume(a1);
}

uint64_t HGConvolutionShader::Bind(HGConvolutionShader *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 0, (float)*((int *)this + 102), (float)*((int *)this + 103), (float)*((int *)this + 104), (float)*((int *)this + 105));
  return 0;
}

uint64_t HGConvolutionShader::RenderTile(HGConvolutionShader *this, HGTile *a2)
{
  uint64_t v4;
  float32x4_t *v5;
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  float32x4_t *v26;
  int v27;
  unsigned int v28;
  int v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  float32x4_t v41;
  float32x4_t v42;
  int v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v48;
  float32x4_t v49;
  unsigned int v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t (*v63)();
  uint64_t v64;
  float32x4_t *v65;
  uint64_t v66;

  v4 = *((int *)a2 + 22);
  v5 = (float32x4_t *)*((_QWORD *)this + 53);
  if (*((_DWORD *)this + 110))
  {
    v6 = (int *)*((_QWORD *)this + 54);
    v7 = v6[1];
    v8 = (uint64_t)&v5[(v7 - *((_DWORD *)this + 105)) * *((_DWORD *)this + 102) - *((_DWORD *)this + 104)];
    v9 = v7 * v4;
    (*((void (**)(HGTile *, uint64_t, _QWORD))v6 + 1))(a2, v8 + 16 * *v6, (*v6 + v7 * v4));
    if (*((int *)this + 110) >= 2)
    {
      v10 = 0;
      v11 = 1;
      do
      {
        v12 = *((_QWORD *)this + 54) + v10;
        v13 = *(_DWORD *)(v12 + 20);
        if (v13 != *(_DWORD *)(v12 + 4))
        {
          v8 = *((_QWORD *)this + 53)
             + 16 * ((v13 - *((_DWORD *)this + 105)) * *((_DWORD *)this + 102) - *((_DWORD *)this + 104));
          v9 = v13 * v4;
        }
        (*(void (**)(HGTile *, uint64_t, _QWORD))(v12 + 24))(a2, v8 + 16 * *(int *)(v12 + 16), (*(_DWORD *)(v12 + 16) + v9));
        ++v11;
        v10 += 16;
      }
      while (v11 < *((int *)this + 110));
    }
    return 1;
  }
  v14 = *((_DWORD *)this + 104);
  v15 = *((_DWORD *)this + 105);
  LODWORD(v16) = v14 + v15 * v4;
  v17 = *((unsigned int *)this + 102);
  v18 = *((int *)this + 103);
  if ((int)v17 < 2)
  {
    if ((int)v18 < 7)
    {
      ((void (*)(HGTile *, float32x4_t *, _QWORD))cy[v18])(a2, v5, (v14 + v15 * v4));
    }
    else
    {
      c4y((uint64_t)a2, v5, v14 + v15 * v4);
      if (v18 < 0xB)
      {
        v23 = v18 - 4;
        v24 = 4;
      }
      else
      {
        v22 = v14 + v4 * (v15 + 4);
        v23 = v18 - 4;
        v24 = 4;
        do
        {
          cadd4y((uint64_t)a2, &v5[v24], v22);
          v24 += 4;
          v22 += 4 * v4;
          v23 -= 4;
        }
        while (v23 > 6);
      }
      ((void (*)(HGTile *, float32x4_t *, _QWORD))caddy[v23])(a2, &v5[v24], (v24 * v4 + v16));
    }
    return 1;
  }
  if (v17 < 7)
  {
    ((void (*)(HGTile *, float32x4_t *, _QWORD))cx[v17])(a2, v5, (v14 + v15 * v4));
    v21 = v18 - 1;
    if ((_DWORD)v18 == 1)
      return 1;
    goto LABEL_19;
  }
  c4x((uint64_t)a2, v5, v14 + v15 * v4);
  v19 = v17 - 4;
  v20 = 4;
  if (v17 >= 0xB)
  {
    do
    {
      cadd4x((uint64_t)a2, &v5[v20], v16 + v20);
      v20 += 4;
      v19 -= 4;
    }
    while (v19 > 6);
  }
  ((void (*)(HGTile *, float32x4_t *, _QWORD))caddx[v19])(a2, &v5[v20], (v20 + v16));
  v21 = v18 - 1;
  if ((_DWORD)v18 != 1)
  {
LABEL_19:
    if ((int)v17 < 7)
    {
      v63 = caddx[(int)v17];
      v64 = v17;
      v65 = &v5[v64];
      v66 = (v14 + v4 + v4 * v15);
      do
      {
        ((void (*)(HGTile *, float32x4_t *, uint64_t))v63)(a2, v65, v66);
        v65 = (float32x4_t *)((char *)v65 + v64 * 16);
        v66 = (v66 + v4);
        --v21;
      }
      while (v21);
    }
    else
    {
      v16 = (int)v16;
      do
      {
        v25 = 0;
        v16 += v4;
        v5 += v17;
        do
        {
          v26 = &v5[v25];
          v27 = *((_DWORD *)a2 + 2);
          v28 = v27 - *(_DWORD *)a2;
          v29 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
          v30 = (float32x4_t *)(*((_QWORD *)a2 + 10) + 16 * (v25 + v16));
          v31 = (float32x4_t *)*((_QWORD *)a2 + 2);
          v32 = *v26;
          v33 = v26[1];
          v34 = v26[2];
          v35 = v26[3];
          v36 = (int)(*((_DWORD *)a2 + 6) - v28);
          v37 = (int)(*((_DWORD *)a2 + 22) - v28);
          if (v28 >= 4)
          {
            do
            {
              v49 = *v30;
              v48 = v30[1];
              v50 = v28;
              v51 = v30[2];
              do
              {
                v52 = vmulq_f32(v32, v49);
                v53 = v30[4];
                v30 += 4;
                v49 = v53;
                v54 = v30[-1];
                v55 = v31[1];
                *v31 = vaddq_f32(vaddq_f32(vmulq_f32(v34, v51), v52), vaddq_f32(vmulq_f32(v35, v54), vaddq_f32(vmulq_f32(v33, v48), *v31)));
                v56 = vaddq_f32(vaddq_f32(vmulq_f32(v32, v48), vmulq_f32(v34, v54)), vaddq_f32(vmulq_f32(v35, v53), vaddq_f32(vmulq_f32(v33, v51), v55)));
                v48 = v30[1];
                v31[1] = v56;
                v57 = vaddq_f32(vaddq_f32(vmulq_f32(v32, v51), vmulq_f32(v34, v53)), vaddq_f32(vmulq_f32(v35, v48), vaddq_f32(vmulq_f32(v33, v54), v31[2])));
                v51 = v30[2];
                v58 = vaddq_f32(vaddq_f32(vmulq_f32(v32, v54), vmulq_f32(v34, v48)), vaddq_f32(vmulq_f32(v35, v51), vaddq_f32(vmulq_f32(v33, v53), v31[3])));
                v31[2] = v57;
                v31[3] = v58;
                v31 += 4;
                v50 -= 4;
              }
              while (v50 > 3);
              if (v50)
              {
                v59 = 0;
                v60 = 0;
                do
                {
                  v61 = vmulq_f32(v32, v49);
                  v62 = vmulq_f32(v33, v48);
                  v49 = v48;
                  v48 = v51;
                  v51 = v30[v60 + 3];
                  v31[v60] = vaddq_f32(vaddq_f32(vmulq_f32(v34, v48), v61), vaddq_f32(vmulq_f32(v35, v51), vaddq_f32(v62, v31[v60])));
                  ++v60;
                  ++v59;
                }
                while (v50 != v59);
                v31 = (float32x4_t *)((char *)v31 + v60 * 16);
                v30 = (float32x4_t *)((char *)v30 + v60 * 16);
              }
              v31 += v36;
              v30 += v37;
              --v29;
            }
            while (v29);
          }
          else if (v28)
          {
            v38 = 16 * v36;
            v39 = 16 * v37;
            v40 = *(_DWORD *)a2 - v27;
            do
            {
              v41 = *v30;
              v42 = v30[1];
              v43 = v40;
              v44 = v30[2];
              do
              {
                v45 = vmulq_f32(v32, v41);
                v46 = vmulq_f32(v33, v42);
                v41 = v42;
                v42 = v44;
                v44 = v30[3];
                *v31 = vaddq_f32(vaddq_f32(vmulq_f32(v34, v42), v45), vaddq_f32(vmulq_f32(v35, v44), vaddq_f32(v46, *v31)));
                ++v31;
                ++v30;
              }
              while (!__CFADD__(v43++, 1));
              v31 = (float32x4_t *)((char *)v31 + v38);
              v30 = (float32x4_t *)((char *)v30 + v39);
              --v29;
            }
            while (v29);
          }
          v25 += 4;
        }
        while ((int)v17 - (int)v25 > 6);
        ((void (*)(HGTile *, float32x4_t *, _QWORD))caddx[(int)v17 - (int)v25])(a2, &v5[(int)v25], (v25 + v16));
        --v21;
      }
      while (v21);
    }
  }
  return 1;
}

void HGConvolution::HGConvolution(HGConvolution *this)
{
  _QWORD *v2;
  HGLinearFilter2D *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E652E298;
  v3 = (HGLinearFilter2D *)(v2 + 51);
  HGLinearFilter2D::HGLinearFilter2D((HGLinearFilter2D *)(v2 + 51));
  HGLinearFilter2D::HGLinearFilter2D((HGConvolution *)((char *)this + 440));
  *(_OWORD *)((char *)this + 520) = 0u;
  HGLinearFilter2D::setType(v3, 0, 4);
  HGLinearFilter2D::setType((HGConvolution *)((char *)this + 440), 0, 4);
  *((_DWORD *)this + 118) = -1;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
}

void sub_1B2AD8014(_Unwind_Exception *a1)
{
  HGNode *v1;
  HGLinearFilter2D *v2;

  HGLinearFilter2D::~HGLinearFilter2D(v2);
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD8030(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD8044(_Unwind_Exception *a1)
{
  uint64_t v1;
  HGLinearFilter2D *v2;
  HGLinearFilter2D *v3;
  _QWORD *v4;
  uint64_t v6;

  v6 = *(_QWORD *)(v1 + 528);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (*v4)
    (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
  HGLinearFilter2D::~HGLinearFilter2D(v3);
  HGLinearFilter2D::~HGLinearFilter2D(v2);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HGConvolution::~HGConvolution(HGConvolution *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E652E298;
  v2 = *((_QWORD *)this + 63);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 62);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = *((_QWORD *)this + 61);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *((_QWORD *)this + 60);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *((_QWORD *)this + 66);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *((_QWORD *)this + 65);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  HGLinearFilter2D::~HGLinearFilter2D((HGConvolution *)((char *)this + 440));
  HGLinearFilter2D::~HGLinearFilter2D((HGConvolution *)((char *)this + 408));
  HGNode::~HGNode((HGNode *)this);
}

{
  void *v1;

  HGConvolution::~HGConvolution(this);
  HGObject::operator delete(v1);
}

uint64_t HGConvolution::SetSize(HGConvolution *this, int a2, int a3)
{
  int v4;
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t result;

  if (a2 < 1 || a3 < 1)
  {
    if (!*((_QWORD *)this + 51))
    {
LABEL_11:
      result = 0;
      *((_DWORD *)this + 128) = 1;
      return result;
    }
    HGLinearFilter2D::reset((uint64_t)this + 408, 0, 0);
  }
  else
  {
    v4 = *((_DWORD *)this + 104);
    if (*((int *)this + 128) < 2)
    {
      v5 = *((_DWORD *)this + 105);
      if (*((_DWORD *)this + 106) == a2 && *((_DWORD *)this + 107) == a3)
        goto LABEL_11;
    }
    else
    {
      v4 += *((_DWORD *)this + 112);
      v5 = *((_DWORD *)this + 113) + *((_DWORD *)this + 105);
      if (*((_DWORD *)this + 106) + *((_DWORD *)this + 114) - 1 == a2
        && *((_DWORD *)this + 107) + *((_DWORD *)this + 115) - 1 == a3)
      {
        goto LABEL_11;
      }
    }
    HGLinearFilter2D::resize((HGConvolution *)((char *)this + 408), v4, v5, a2 + v4 - 1, a3 + v5 - 1, 0);
  }
  *((_DWORD *)this + 118) = -1;
  HGNode::ClearBits((HGNode *)this, v6, v7);
  result = 1;
  *((_DWORD *)this + 128) = 1;
  return result;
}

uint64_t HGConvolution::SetParameter(int32x2_t *this, uint64_t a2, float32x4_t a3, float32_t a4, float a5, float a6, char *a7)
{
  int v8;
  unsigned __int32 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int32 v16;
  int v17;
  int v18;
  int v19;
  unsigned __int32 v20;
  uint64_t v21;
  char *v22;
  signed int v23;
  signed int v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  int32x2_t v30;
  __int32 v31;
  int8x16_t v32;
  int32x2_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  unsigned __int32 v39;

  if (!(_DWORD)a2)
  {
    v36 = a4;
    v38 = a3.f32[0];
    v13 = HGConvolution::SetSize((HGConvolution *)this, vcvtps_s32_f32(a5), vcvtps_s32_f32(a6));
    v14 = (uint64_t)rintf(v38);
    v15 = (uint64_t)rintf(v36);
    v16 = this[52].i32[0];
    if (this[64].i32[0] < 2)
    {
      v17 = v14 - v16;
      v18 = v15 - this[52].i32[1];
      v19 = v18 | (v14 - v16);
      if (!v19)
        return v19 | v13;
    }
    else
    {
      v17 = v14 - (this[56].i32[0] + v16);
      v18 = v15 - (this[56].i32[1] + this[52].i32[1]);
      v19 = v18 | v17;
      if (!(v18 | v17))
        return v19 | v13;
    }
    HGLinearFilter2D::translate(&this[51], v17, v18);
    this[59].i32[0] = -1;
    HGNode::ClearBits((HGNode *)this, v21, v22);
    v19 = 1;
    return v19 | v13;
  }
  v8 = this[64].i32[0];
  v9 = this[53].u32[0];
  if (v8 >= 2)
  {
    v10 = v9 + this[57].i32[0] - 1;
    v11 = this[53].i32[1] + this[57].i32[1] - 1;
    if ((int)(v11 * v10) < (int)a2)
      return 0xFFFFFFFFLL;
    v23 = ((int)a2 - 1) % v10;
    v24 = ((int)a2 - 1) / v11;
    v37 = a4;
    v39 = a3.i32[0];
    v34 = a5;
    v35 = a6;
    HGLinearFilter2D::convolve(this + 51, (const HGLinearFilter2D *)&this[55]);
    a5 = v34;
    a6 = v35;
    a4 = v37;
    a3.i32[0] = v39;
    this[59].i32[0] |= 0x15u;
    this[64].i32[0] = 1;
    v25 = this[52].i32[0];
    v26 = v23 - v25;
    if (v23 >= v25)
      goto LABEL_14;
    return 0xFFFFFFFFLL;
  }
  v20 = this[53].u32[1];
  if ((int)(v20 * v9) < (int)a2)
    return 0xFFFFFFFFLL;
  v23 = ((int)a2 - 1) % v9;
  v24 = ((int)a2 - 1) / v20;
  v25 = this[52].i32[0];
  v26 = v23 - v25;
  if (v23 < v25)
    return 0xFFFFFFFFLL;
LABEL_14:
  v27 = this[53].i32[0];
  if (v25 + v27 - 1 < v23)
    return 0xFFFFFFFFLL;
  v28 = this[52].i32[1];
  v29 = v24 - v28;
  if (v24 < v28)
    return 0xFFFFFFFFLL;
  if (v28 + this[53].i32[1] - 1 < v24)
    return 0xFFFFFFFFLL;
  v30 = this[51];
  a3.f32[1] = a4;
  a3.i64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  v31 = v26 + v29 * v27;
  v32 = veorq_s8((int8x16_t)vceqzq_f32(a3), (int8x16_t)vceqzq_f32(*(float32x4_t *)(*(_QWORD *)&v30 + 16 * v31)));
  v33 = vpmin_s32(*(int32x2_t *)v32.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
  if (vpmin_s32(v33, v33).u32[0])
  {
    this[59].i32[0] |= 0x11u;
    *(float32x4_t *)(*(_QWORD *)&v30 + 16 * v31) = a3;
LABEL_25:
    HGNode::ClearBits((HGNode *)this, a2, a7);
    return 1;
  }
  if (v8 >= 2)
    goto LABEL_25;
  return 0;
}

uint64_t HGConvolution::SeparableFilter2D(HGConvolution *this, const HGLinearFilter2D *a2, const HGLinearFilter2D *a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  const HGLinearFilter2D *v12;

  v6 = (char *)this + 408;
  v7 = (char *)this + 408;
  if (*((_DWORD *)a2 + 5) >= *((_DWORD *)a3 + 5))
  {
    if (HGLinearFilter2D::operator==((uint64_t)v7, (uint64_t)a3))
    {
      v10 = (char *)this + 440;
      result = HGLinearFilter2D::operator==((uint64_t)this + 440, (uint64_t)a2);
      if ((_DWORD)result)
        goto LABEL_4;
    }
    else
    {
      HGLinearFilter2D::operator=((uint64_t)v6, (uint64_t)a3);
      *((_DWORD *)this + 118) |= 0x15u;
      v10 = (char *)this + 440;
      result = HGLinearFilter2D::operator==((uint64_t)this + 440, (uint64_t)a2);
      if ((_DWORD)result)
        goto LABEL_4;
    }
    v11 = (uint64_t)v10;
    v12 = a2;
  }
  else
  {
    if (HGLinearFilter2D::operator==((uint64_t)v7, (uint64_t)a2))
    {
      v8 = (char *)this + 440;
      result = HGLinearFilter2D::operator==((uint64_t)this + 440, (uint64_t)a3);
      if ((_DWORD)result)
      {
LABEL_4:
        *((_DWORD *)this + 128) = 2;
        return result;
      }
    }
    else
    {
      HGLinearFilter2D::operator=((uint64_t)v6, (uint64_t)a2);
      *((_DWORD *)this + 118) |= 0x15u;
      v8 = (char *)this + 440;
      result = HGLinearFilter2D::operator==((uint64_t)this + 440, (uint64_t)a3);
      if ((_DWORD)result)
        goto LABEL_4;
    }
    v11 = (uint64_t)v8;
    v12 = a3;
  }
  result = HGLinearFilter2D::operator=(v11, (uint64_t)v12);
  *((_DWORD *)this + 118) |= 0x2Au;
  *((_DWORD *)this + 128) = 2;
  return result;
}

HGBitmapLoader *HGConvolution::PopulateCoeffInputForKernel(HGConvolution *this, HGGPURenderer *a2, int a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  HGBitmap *v10;
  HGBitmapLoader *v11;
  char *v12;
  HGBitmapLoader *result;

  v4 = a3;
  v5 = (char *)this + 32 * a3;
  v6 = HGRectMake4i(0, 0, *((_DWORD *)v5 + 107) * *((_DWORD *)v5 + 106), 1u);
  v8 = v7;
  v9 = *((_QWORD *)v5 + 51);
  v10 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap((uint64_t)v10, v6, v8, 28, v9);
  v11 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v11, v10);
  v12 = (char *)this + 8 * v4;
  result = (HGBitmapLoader *)*((_QWORD *)v12 + 65);
  if (result == v11)
  {
    if (v11)
      result = (HGBitmapLoader *)(*(uint64_t (**)(HGBitmapLoader *))(*(_QWORD *)v11 + 24))(v11);
  }
  else
  {
    if (result)
      result = (HGBitmapLoader *)(*(uint64_t (**)(HGBitmapLoader *))(*(_QWORD *)result + 24))(result);
    *((_QWORD *)v12 + 65) = v11;
  }
  if (v10)
    return (HGBitmapLoader *)(*(uint64_t (**)(HGBitmap *))(*(_QWORD *)v10 + 24))(v10);
  return result;
}

void sub_1B2AD8774(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

HGNode *HGConvolution::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  __n128 v5;
  unsigned __int32 *v6;
  int v7;
  char *v8;
  void (**v9)(HGNode *);
  char *v10;
  HGGPURenderer *v11;
  char *v12;
  HGGPURenderer *v13;
  char *v15;
  void (**v16)(HGNode *);
  unsigned __int32 *v17;

  Input = HGRenderer::GetInput(a2, this, 0);
  *((_DWORD *)this + 118) &= 0xFFFFFFCF;
  v6 = (unsigned __int32 *)*((_QWORD *)this + 51);
  if (!v6)
    return Input;
  v7 = *((_DWORD *)this + 128);
  if (v7 >= 2 && !*((_QWORD *)this + 55))
    return Input;
  if (!*((_QWORD *)this + 52) && *((_DWORD *)this + 106) == 1 && *((_DWORD *)this + 107) == 1)
  {
    v5.n128_u32[0] = *v6;
    if (*(float *)v6 == 0.0)
    {
      v5.n128_u32[0] = v6[1];
      if (v5.n128_f32[0] == 0.0)
      {
        v5.n128_u32[0] = v6[2];
        if (v5.n128_f32[0] == 0.0)
        {
          v5.n128_u32[0] = v6[3];
          if (v5.n128_f32[0] == 0.0)
          {
            if (v7 < 2)
              return Input;
            if (!*((_QWORD *)this + 56) && *((_DWORD *)this + 114) == 1 && *((_DWORD *)this + 115) == 1)
            {
              v17 = (unsigned __int32 *)*((_QWORD *)this + 55);
              v5.n128_u32[0] = *v17;
              if (*(float *)v17 == 0.0)
              {
                v5.n128_u32[0] = v17[1];
                if (v5.n128_f32[0] == 0.0)
                {
                  v5.n128_u32[0] = v17[2];
                  if (v5.n128_f32[0] == 0.0)
                  {
                    v5.n128_u32[0] = v17[3];
                    if (v5.n128_f32[0] == 0.0)
                      return Input;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (((*(uint64_t (**)(HGRenderer *, __n128))(*(_QWORD *)a2 + 304))(a2, v5) & 1) != 0)
  {
    v8 = (char *)*((_QWORD *)this + 60);
    if (v8)
    {
      v9 = *(void (***)(HGNode *))v8;
    }
    else
    {
      v8 = (char *)HGObject::operator new(0x1C0uLL);
      HGNode::HGNode((HGNode *)v8);
      v9 = off_1E652E048;
      *(_QWORD *)v8 = off_1E652E048;
      *((_DWORD *)v8 + 110) = 0;
      *(_OWORD *)(v8 + 408) = 0u;
      *(_OWORD *)(v8 + 424) = 0u;
      *((_DWORD *)v8 + 4) = *((_DWORD *)v8 + 4) & 0xFFFFF9FF | 0x400;
      *((_QWORD *)this + 60) = v8;
    }
    ((void (*)(char *, _QWORD, HGNode *))v9[15])(v8, 0, Input);
    if ((*((_BYTE *)this + 472) & 1) != 0)
    {
      HGConvolutionShader::compile(*((HGConvolutionShader **)this + 60), (const HGLinearFilter2D *)((char *)this + 408), (char *)(*((_DWORD *)this + 106) + *((_DWORD *)this + 104)), *((_DWORD *)this + 105) + *((_DWORD *)this + 107) - 1, 0);
      *((_DWORD *)this + 118) &= ~1u;
    }
    if (*((int *)this + 128) < 2)
    {
      return (HGNode *)*((_QWORD *)this + 60);
    }
    else
    {
      v15 = (char *)*((_QWORD *)this + 61);
      if (v15)
      {
        v16 = *(void (***)(HGNode *))v15;
      }
      else
      {
        v15 = (char *)HGObject::operator new(0x1C0uLL);
        HGNode::HGNode((HGNode *)v15);
        v16 = off_1E652E048;
        *(_QWORD *)v15 = off_1E652E048;
        *((_DWORD *)v15 + 110) = 0;
        *(_OWORD *)(v15 + 408) = 0u;
        *(_OWORD *)(v15 + 424) = 0u;
        *((_DWORD *)v15 + 4) = *((_DWORD *)v15 + 4) & 0xFFFFF9FF | 0x400;
        *((_QWORD *)this + 61) = v15;
      }
      ((void (*)(char *, _QWORD, _QWORD))v16[15])(v15, 0, *((_QWORD *)this + 60));
      if ((*((_BYTE *)this + 472) & 2) != 0)
      {
        HGConvolutionShader::compile(*((HGConvolutionShader **)this + 61), (const HGLinearFilter2D *)((char *)this + 440), (char *)(*((_DWORD *)this + 114) + *((_DWORD *)this + 112)), *((_DWORD *)this + 113) + *((_DWORD *)this + 115) - 1, 0);
        *((_DWORD *)this + 118) &= ~2u;
      }
      return (HGNode *)*((_QWORD *)this + 61);
    }
  }
  else
  {
    v10 = (char *)*((_QWORD *)this + 62);
    if (!v10)
    {
      v10 = (char *)HGObject::operator new(0x1C0uLL);
      HGNode::HGNode((HGNode *)v10);
      *(_QWORD *)v10 = off_1E652E048;
      *((_DWORD *)v10 + 110) = 0;
      *(_OWORD *)(v10 + 408) = 0u;
      *(_OWORD *)(v10 + 424) = 0u;
      *((_DWORD *)v10 + 4) = *((_DWORD *)v10 + 4) & 0xFFFFF9FF | 0x400;
      *((_QWORD *)this + 62) = v10;
    }
    if ((*((_BYTE *)this + 472) & 4) != 0)
    {
      HGConvolutionShader::compile((HGConvolutionShader *)v10, (const HGLinearFilter2D *)((char *)this + 408), (char *)(*((_DWORD *)this + 106) + *((_DWORD *)this + 104)), *((_DWORD *)this + 105) + *((_DWORD *)this + 107) - 1, 0);
      HGConvolution::PopulateCoeffInputForKernel((HGConvolution *)this, v11, 0);
      *((_DWORD *)this + 118) &= ~4u;
      v10 = (char *)*((_QWORD *)this + 62);
    }
    (*(void (**)(char *, _QWORD, HGNode *))(*(_QWORD *)v10 + 120))(v10, 0, Input);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 62) + 120))(*((_QWORD *)this + 62), 1, *((_QWORD *)this + 65));
    if (*((int *)this + 128) >= 2)
    {
      v12 = (char *)*((_QWORD *)this + 63);
      if (!v12)
      {
        v12 = (char *)HGObject::operator new(0x1C0uLL);
        HGNode::HGNode((HGNode *)v12);
        *(_QWORD *)v12 = off_1E652E048;
        *((_DWORD *)v12 + 110) = 0;
        *(_OWORD *)(v12 + 408) = 0u;
        *(_OWORD *)(v12 + 424) = 0u;
        *((_DWORD *)v12 + 4) = *((_DWORD *)v12 + 4) & 0xFFFFF9FF | 0x400;
        *((_QWORD *)this + 63) = v12;
      }
      if ((*((_BYTE *)this + 472) & 8) != 0)
      {
        HGConvolutionShader::compile((HGConvolutionShader *)v12, (const HGLinearFilter2D *)((char *)this + 440), (char *)(*((_DWORD *)this + 114) + *((_DWORD *)this + 112)), *((_DWORD *)this + 113) + *((_DWORD *)this + 115) - 1, 0);
        HGConvolution::PopulateCoeffInputForKernel((HGConvolution *)this, v13, 1);
        *((_DWORD *)this + 118) &= ~8u;
        v12 = (char *)*((_QWORD *)this + 63);
      }
      (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)v12 + 120))(v12, 0, *((_QWORD *)this + 62));
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 63) + 120))(*((_QWORD *)this + 63), 1, *((_QWORD *)this + 66));
      return (HGNode *)*((_QWORD *)this + 63);
    }
    return (HGNode *)*((_QWORD *)this + 62);
  }
}

void sub_1B2AD8CA4(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD8CB8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD8CCC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AD8CE0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HGFlipAndOffset::HGFlipAndOffset(HGFlipAndOffset *this)
{
  uint64_t v2;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v2 = off_1E652E518;
  *(_DWORD *)(v2 + 420) = 0;
  *(_QWORD *)(v2 + 408) = 0;
  *(_WORD *)(v2 + 416) = 0;
  HGNode::SetFlags((HGNode *)v2, 0, 32);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2AD8D48(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGFlipAndOffset::~HGFlipAndOffset(HGNode *this)
{
  void *v1;

  HGNode::~HGNode(this);
  HGObject::operator delete(v1);
}

uint64_t HGFlipAndOffset::info(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39[8];
  void *__p[2];
  __int128 v41;
  int v42;
  uint64_t v43[20];

  v7 = MEMORY[0x1E0DE4FE0];
  v8 = MEMORY[0x1E0DE4FE0] + 64;
  v9 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v43[0] = MEMORY[0x1E0DE4FE0] + 64;
  v38 = v10;
  *(uint64_t *)((char *)&v39[-1] + *(_QWORD *)(v10 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v39[-1] + *(_QWORD *)(v38 - 24));
  std::ios_base::init(v12, v39);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v38 = v7 + 24;
  v43[0] = v8;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x1E0DE4FB8];
  v39[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  v42 = 16;
  if (a2 >= 1)
  {
    v14 = *(char *)(a3 + 23);
    if (v14 >= 0)
      v15 = a3;
    else
      v15 = *(_QWORD *)a3;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a3 + 23);
    else
      v16 = *(_QWORD *)(a3 + 8);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"    [ [", 7);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" 0 0 ", 5);
    v19 = (_QWORD *)std::ostream::operator<<();
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"]\n", 2);
    v21 = *(char *)(a4 + 23);
    if (v21 >= 0)
      v22 = a4;
    else
      v22 = *(_QWORD *)a4;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a4 + 23);
    else
      v23 = *(_QWORD *)(a4 + 8);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"      [0 ", 9);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" 0 ", 3);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"]\n", 2);
    v28 = *(char *)(a4 + 23);
    if (v28 >= 0)
      v29 = a4;
    else
      v29 = *(_QWORD *)a4;
    if (v28 >= 0)
      v30 = *(unsigned __int8 *)(a4 + 23);
    else
      v30 = *(_QWORD *)(a4 + 8);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"      [0 0 1 0]\n", 16);
    v33 = *(char *)(a4 + 23);
    if (v33 >= 0)
      v34 = a4;
    else
      v34 = *(_QWORD *)a4;
    if (v33 >= 0)
      v35 = *(unsigned __int8 *)(a4 + 23);
    else
      v35 = *(_QWORD *)(a4 + 8);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"      [0 0 0 1] ]", 17);
  }
  std::stringbuf::str();
  v38 = *v9;
  *(uint64_t *)((char *)&v39[-1] + *(_QWORD *)(v38 - 24)) = v9[3];
  v39[0] = v13 + 16;
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](v43);
}

void sub_1B2AD8FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::ostream::~ostream();
  MEMORY[0x1B5E290BC](a10);
  _Unwind_Resume(a1);
}

uint64_t HGFlipAndOffset::SetParameter(HGFlipAndOffset *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  int v7;
  int v9;
  int v10;
  unsigned int v11;

  if ((_DWORD)a2 == 2)
  {
    if (*((_DWORD *)this + 105) != a3)
    {
      *((_DWORD *)this + 105) = a3;
      return 1;
    }
    return 0;
  }
  if ((_DWORD)a2 == 1)
  {
    v9 = a3 != 0.0;
    v10 = a4 != 0.0;
    if (*((unsigned __int8 *)this + 416) != v9 || *((unsigned __int8 *)this + 417) != v10)
    {
      *((_BYTE *)this + 416) = v9;
      *((_BYTE *)this + 417) = v10;
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    }
    return 0;
  }
  if ((_DWORD)a2)
    return 0;
  if (vabds_f32(a3, (float)(int)roundf(a3)) > 0.001)
    return 0xFFFFFFFFLL;
  v7 = llroundf(a4);
  if (vabds_f32(a4, (float)v7) > 0.001)
    return 0xFFFFFFFFLL;
  v11 = llroundf(a3);
  if (*((_DWORD *)this + 102) == v11 && *((_DWORD *)this + 103) == v7)
    return 0;
  *((_DWORD *)this + 102) = v11;
  *((_DWORD *)this + 103) = v7;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HGFlipAndOffset::GetParameter(int32x2_t *this, int a2, float32x2_t *a3)
{
  int32x2_t v4;

  if (a2 == 2)
  {
    a3->f32[0] = (float)this[52].u32[1];
    return 0;
  }
  if (a2 != 1)
  {
    if (!a2)
    {
      *a3 = vcvt_f32_s32(this[51]);
      return 0;
    }
    return 0;
  }
  v4.i32[0] = this[52].u8[0];
  v4.i32[1] = this[52].u8[1];
  __asm { FMOV            V1.2S, #1.0 }
  *a3 = (float32x2_t)vbic_s8(_D1, (int8x8_t)vceqz_s32(v4));
  return 0;
}

HGFlipAndOffset *HGFlipAndOffset::GetOutput(HGFlipAndOffset *this, HGRenderer *a2)
{
  if (*((_BYTE *)this + 416) || *((_BYTE *)this + 417))
  {
    (*(void (**)(HGFlipAndOffset *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
    *((_DWORD *)this + 4) |= 1u;
  }
  return this;
}

uint64_t HGFlipAndOffset::GetDOD(HGFlipAndOffset *this, HGRenderer *a2, int a3, HGRect a4)
{
  float v7;
  double v8;
  float v9;
  double v10;
  float v11;
  float v12;
  double v13;
  float v14;
  double v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  HGRect v26;

  if (a3)
    return HGRectNull;
  v7 = HGRectFloat(a4.var0);
  if (*((_BYTE *)this + 416))
    v11 = -1.0;
  else
    v11 = 1.0;
  v12 = HGRectScale(v7, v8, v9, v10, v11);
  v16 = HGRectTranslate(v12, v13, v14, v15, (float)*((int *)this + 102));
  *(_QWORD *)&v25 = HGRectIntegral(v17, v16, v18, v19, v20);
  *((_QWORD *)&v25 + 1) = v21;
  if (!(*(unsigned int (**)(HGFlipAndOffset *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2))
    return v25;
  v22 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  v24 = v23;
  *(_QWORD *)&v26.var0 = v22;
  *(_QWORD *)&v26.var2 = v24;
  HGRect::Grow((HGRect *)&v25, v26);
  return v25;
}

uint64_t HGFlipAndOffset::GetROI(HGFlipAndOffset *this, HGRenderer *a2, int a3, HGRect a4)
{
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;
  double v11;
  float v12;
  double v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;

  if (a3)
    return 0;
  v6 = HGRectFloat(a4.var0);
  v10 = HGRectTranslate(v6, v7, v8, v9, (float)-*((_DWORD *)this + 102));
  if (*((_BYTE *)this + 416))
    v14 = -1.0;
  else
    v14 = 1.0;
  v15 = HGRectScale(v10, v11, v12, v13, v14);
  return HGRectIntegral(v16, v15, v17, v18, v19);
}

uint64_t HGFlipAndOffset::SupportsInplaceHardwareBlending(HGFlipAndOffset *this, float a2)
{
  return 1;
}

uint64_t HGFlipAndOffset::BindTexture(HGFlipAndOffset *this, HGHandler *a2, int a3)
{
  uint64_t result;
  __n128 v6;
  __n128 v7;
  double v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v7.n128_u64[0] = -1.0;
  if (*((_BYTE *)this + 416))
    v6.n128_f64[0] = -1.0;
  else
    v6.n128_f64[0] = 1.0;
  if (!*((_BYTE *)this + 417))
    v7.n128_f64[0] = 1.0;
  (*(void (**)(HGHandler *, __n128, __n128))(*(_QWORD *)a2 + 104))(a2, v6, v7);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, (double)-*((_DWORD *)this + 102), (double)-*((_DWORD *)this + 103), 0.0);
  v8 = (*(double (**)(HGFlipAndOffset *))(*(_QWORD *)this + 288))(this);
  (*(void (**)(HGHandler *, _QWORD, double, float, float, float))(*(_QWORD *)a2 + 136))(a2, 0, v8, *(float *)&v8, *(float *)&v8, *(float *)&v8);
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v9)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 21))
    {
      (*(void (**)(HGHandler *, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 1, 0.0, 0.0, 1.0, 1.0);
      v10 = *((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55);
      v11 = *((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56);
      (*(void (**)(HGHandler *, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 2, (float)(v10 + 1) * 0.5, (float)(v11 + 1) * 0.5, (float)v10, (float)v11);
    }
    return 0;
  }
  return result;
}

uint64_t HGFlipAndOffset::IntermediateFormat(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a1 + 420);
  if ((int)v2 <= (int)a2)
    return a2;
  else
    return v2;
}

uint64_t HGFlipAndOffset::RenderTile(HGFlipAndOffset *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;

  if (*((_BYTE *)this + 416))
  {
    v2 = *((_DWORD *)a2 + 2);
    v3 = *(_DWORD *)a2;
    v4 = *((_DWORD *)a2 + 1);
    v5 = v2 - *(_DWORD *)a2;
    v6 = *((_DWORD *)a2 + 3) - v4;
    if (*((_BYTE *)this + 417))
    {
      if (v6 >= 1 && v5 >= 1)
      {
        v7 = 0;
        v8 = *((_DWORD *)a2 + 22);
        v9 = -v8;
        v10 = *((_QWORD *)a2 + 10)
            + 16 * (*((_DWORD *)a2 + 52) - v3 + (*((_DWORD *)a2 + 53) - v4) * v8)
            + 16 * v8 * (v6 - 1);
        v11 = *((_QWORD *)a2 + 2);
        v12 = 16 * (v2 - *(_DWORD *)a2);
        v13 = 16 * *((int *)a2 + 6);
        v14 = ~v3 + v2;
        do
        {
          v15 = 0;
          v16 = v14;
          do
          {
            *(_OWORD *)(v11 + v15) = *(_OWORD *)(v10 + 16 * v16);
            v15 += 16;
            --v16;
          }
          while (v12 != v15);
          v10 += 16 * v9;
          ++v7;
          v11 += v13;
        }
        while (v7 != v6);
      }
    }
    else if (v6 >= 1 && v5 >= 1)
    {
      v25 = 0;
      v26 = *((int *)a2 + 22);
      v27 = *((_QWORD *)a2 + 10) + 16 * (*((_DWORD *)a2 + 52) - v3 + (*((_DWORD *)a2 + 53) - v4) * (int)v26);
      v28 = *((_QWORD *)a2 + 2);
      v29 = 16 * (v2 - *(_DWORD *)a2);
      v30 = 16 * *((int *)a2 + 6);
      v31 = ~v3 + v2;
      do
      {
        v32 = 0;
        v33 = v31;
        do
        {
          *(_OWORD *)(v28 + v32) = *(_OWORD *)(v27 + 16 * v33);
          v32 += 16;
          --v33;
        }
        while (v29 != v32);
        v27 += 16 * v26;
        ++v25;
        v28 += v30;
      }
      while (v25 != v6);
    }
  }
  else if (*((_BYTE *)this + 417))
  {
    v17 = *((_DWORD *)a2 + 1);
    v18 = *((_DWORD *)a2 + 3) - v17;
    if (v18 >= 1)
    {
      v19 = (char *)*((_QWORD *)a2 + 2);
      v20 = *((int *)a2 + 22);
      v21 = (char *)(*((_QWORD *)a2 + 10)
                   + 16 * (*((_DWORD *)a2 + 52) - *(_DWORD *)a2 + (*((_DWORD *)a2 + 53) - v17) * (int)v20)
                   + 16 * (int)v20 * (v18 - 1));
      v22 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
      v23 = 16 * *((int *)a2 + 6);
      v24 = -16 * v20;
      do
      {
        memcpy(v19, v21, v22);
        v19 += v23;
        v21 += v24;
        --v18;
      }
      while (v18);
    }
  }
  return 0;
}

uint64_t HGPool::BasePool::BasePool(uint64_t this)
{
  unsigned __int16 v1;
  unsigned __int16 v2;

  *(_QWORD *)this = &unk_1E652E780;
  *(_DWORD *)(this + 8) = 0;
  do
  {
    v1 = __ldaxr(HGPool::BasePool::BasePool(void)::poolCounter);
    v2 = v1 + 1;
  }
  while (__stlxr(v2, HGPool::BasePool::BasePool(void)::poolCounter));
  *(_WORD *)(this + 10) = v2;
  return this;
}

void HGPool::registerPool(HGPool *this, HGPool::BasePool *a2)
{
  unint64_t v3;
  std::mutex *v4;
  char **v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  char **v29;
  char *v30;

  v3 = atomic_load(&_MergedGlobals_14);
  if (v3 != -1)
  {
    v30 = &v28;
    v29 = &v30;
    std::__call_once(&_MergedGlobals_14, &v29, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<HGPool::registerPool(HGPool::BasePool *)::$_0 &&>>);
  }
  v4 = (std::mutex *)(qword_1ED4DAAE0 + 24);
  std::mutex::lock((std::mutex *)(qword_1ED4DAAE0 + 24));
  v5 = (char **)qword_1ED4DAAE0;
  v7 = *(char **)(qword_1ED4DAAE0 + 8);
  v6 = *(_QWORD *)(qword_1ED4DAAE0 + 16);
  if ((unint64_t)v7 < v6)
  {
    *(_QWORD *)v7 = this;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_16;
  }
  v9 = *(char **)qword_1ED4DAAE0;
  v10 = (uint64_t)&v7[-*(_QWORD *)qword_1ED4DAAE0];
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + 1;
  if (v12 >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v13 = v6 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = this;
    v8 = (uint64_t)(v16 + 8);
    v18 = (char *)(v7 - v9);
    if (v7 == v9)
    {
LABEL_14:
      *v5 = v16;
      v5[1] = (char *)v8;
      v5[2] = v17;
      if (!v7)
        goto LABEL_16;
LABEL_15:
      operator delete(v7);
      goto LABEL_16;
    }
  }
  else
  {
    v15 = 0;
    v16 = (char *)(8 * v11);
    v17 = 0;
    *(_QWORD *)(8 * v11) = this;
    v8 = 8 * v11 + 8;
    v18 = (char *)(v7 - v9);
    if (v7 == v9)
      goto LABEL_14;
  }
  v19 = (unint64_t)(v18 - 8);
  if (v19 < 0x58)
    goto LABEL_30;
  if ((unint64_t)(v7 - v15 - v10) < 0x20)
    goto LABEL_30;
  v20 = (v19 >> 3) + 1;
  v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
  v22 = &v7[-v21];
  v16 -= v21;
  v23 = &v15[8 * v11 - 16];
  v24 = v7 - 16;
  v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v26 = *(_OWORD *)v24;
    *(v23 - 1) = *((_OWORD *)v24 - 1);
    *v23 = v26;
    v23 -= 2;
    v24 -= 32;
    v25 -= 4;
  }
  while (v25);
  v7 = v22;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      v27 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v16 - 1) = v27;
      v16 -= 8;
    }
    while (v7 != v9);
  }
  v7 = *v5;
  *v5 = v16;
  v5[1] = (char *)v8;
  v5[2] = v17;
  if (v7)
    goto LABEL_15;
LABEL_16:
  v5[1] = (char *)v8;
  std::mutex::unlock(v4);
}

void sub_1B2AD993C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void HGPool::unregisterPool(HGPool *this, HGPool::BasePool *a2)
{
  std::mutex *v3;
  uint64_t v4;
  HGPool **v5;
  HGPool **v6;
  int64_t v7;

  v3 = (std::mutex *)(qword_1ED4DAAE0 + 24);
  std::mutex::lock((std::mutex *)(qword_1ED4DAAE0 + 24));
  v4 = qword_1ED4DAAE0;
  v6 = *(HGPool ***)qword_1ED4DAAE0;
  v5 = *(HGPool ***)(qword_1ED4DAAE0 + 8);
  if (*(HGPool ***)qword_1ED4DAAE0 != v5)
  {
    while (*v6 != this)
    {
      if (++v6 == v5)
      {
        v6 = *(HGPool ***)(qword_1ED4DAAE0 + 8);
        break;
      }
    }
  }
  if (v6 != v5)
  {
    v7 = (char *)v5 - (char *)(v6 + 1);
    if (v5 != v6 + 1)
      memmove(v6, v6 + 1, (char *)v5 - (char *)(v6 + 1));
    *(_QWORD *)(v4 + 8) = (char *)v6 + v7;
  }
  std::mutex::unlock(v3);
}

void sub_1B2AD9AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex *v11;

  std::mutex::unlock(v11);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a11);
  _Unwind_Resume(a1);
}

uint64_t HGPool::setObserverThreadWakeInterval(uint64_t this)
{
  return this;
}

unint64_t HGPool::TotalUsageServicingPolicy::maxObjectsCount(HGPool::TotalUsageServicingPolicy *this, const HGPool::BasePool *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = (*(uint64_t (**)(HGPool::TotalUsageServicingPolicy *))(*(_QWORD *)this + 40))(this);
  v5 = (*(uint64_t (**)(HGPool::TotalUsageServicingPolicy *, const HGPool::BasePool *))(*(_QWORD *)this + 56))(this, a2);
  v6 = (*(uint64_t (**)(const HGPool::BasePool *))(*(_QWORD *)a2 + 16))(a2);
  v7 = v5 - v6;
  if (v5 < v6)
    v7 = 0;
  if (v4 >= v7)
    return v7;
  else
    return v4;
}

unint64_t HGPool::TotalUsageServicingPolicy::maxBytesUsage(HGPool::TotalUsageServicingPolicy *this, const HGPool::BasePool *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = (*(uint64_t (**)(HGPool::TotalUsageServicingPolicy *))(*(_QWORD *)this + 48))(this);
  v5 = (*(uint64_t (**)(HGPool::TotalUsageServicingPolicy *, const HGPool::BasePool *))(*(_QWORD *)this + 64))(this, a2);
  v6 = (*(uint64_t (**)(const HGPool::BasePool *))(*(_QWORD *)a2 + 24))(a2);
  v7 = v5 - v6;
  if (v5 < v6)
    v7 = 0;
  if (v4 >= v7)
    return v7;
  else
    return v4;
}

unint64_t HGPool::GroupServicingPolicy::_maxValue<(HGPool::GroupServicingPolicy::PolicyType)0>(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  const char *v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t result;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  unsigned __int8 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;

  v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
  v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  v9 = a1 + 2;
  v8 = (_QWORD *)a1[2];
  if (!v8)
    goto LABEL_12;
  v10 = a1 + 2;
  do
  {
    v11 = v8[4];
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = v8;
    else
      v13 = v8 + 1;
    if (v12)
      v10 = v8;
    v8 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 == v9 || v10[4] > a2)
LABEL_12:
    v10 = a1 + 2;
  v14 = v10[5];
  if (!v14
    || (result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, a2), v7 <= result))
  {
    v36 = v4;
    v16 = (_QWORD *)a1[1];
    if (v16 != v9)
    {
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *((_OWORD *)v16 + 2);
        v20 = (std::__shared_weak_count *)v16[6];
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
        }
        v23 = v19;
        if ((_QWORD)v19 != a2)
        {
          v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v19 + 32))(v19);
          v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
          v18 += v24;
          v17 += v25 + (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
        }
        if (!v20)
          goto LABEL_27;
        v26 = (unint64_t *)&v20->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          v28 = (_QWORD *)v16[1];
          if (!v28)
          {
            do
            {
LABEL_31:
              v29 = (_QWORD *)v16[2];
              v30 = *v29 == (_QWORD)v16;
              v16 = v29;
            }
            while (!v30);
            goto LABEL_17;
          }
        }
        else
        {
LABEL_27:
          v28 = (_QWORD *)v16[1];
          if (!v28)
            goto LABEL_31;
        }
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
LABEL_17:
        v16 = v29;
        if (v29 == v9)
          goto LABEL_35;
      }
    }
    v18 = 0;
    v17 = 0;
LABEL_35:
    v31 = atomic_load(HGLogger::_enabled);
    if ((v31 & 1) != 0)
      HGLogger::log((HGLogger *)"sp", (const char *)1, (HGLogger *)"total other objects : free=%zu, total=%zu\n", v5, v6, v18, v17);
    v32 = v17 + v36;
    v33 = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 56))(a1, a2);
    v34 = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 40))(a1, a2);
    if (v34 >= v18 && v33 >= v32)
    {
      if (v34 - v18 >= v33 - v32)
        return v33 - v32;
      else
        return v34 - v18;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1B2AD9E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::pair<HGPool::BasePool const* const,std::shared_ptr<HGPool::ServicingPolicy>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t HGPool::GroupServicingPolicy::_maxValue<(HGPool::GroupServicingPolicy::PolicyType)1>(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  const char *v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t result;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  unsigned __int8 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;

  v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2);
  v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 40))(a2);
  v9 = a1 + 2;
  v8 = (_QWORD *)a1[2];
  if (!v8)
    goto LABEL_12;
  v10 = a1 + 2;
  do
  {
    v11 = v8[4];
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = v8;
    else
      v13 = v8 + 1;
    if (v12)
      v10 = v8;
    v8 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 == v9 || v10[4] > a2)
LABEL_12:
    v10 = a1 + 2;
  v14 = v10[5];
  if (!v14
    || (result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 24))(v14, a2), v7 <= result))
  {
    v36 = v4;
    v16 = (_QWORD *)a1[1];
    if (v16 != v9)
    {
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *((_OWORD *)v16 + 2);
        v20 = (std::__shared_weak_count *)v16[6];
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
        }
        v23 = v19;
        if ((_QWORD)v19 != a2)
        {
          v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v19 + 40))(v19);
          v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
          v18 += v24;
          v17 += v25 + (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
        }
        if (!v20)
          goto LABEL_27;
        v26 = (unint64_t *)&v20->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          v28 = (_QWORD *)v16[1];
          if (!v28)
          {
            do
            {
LABEL_31:
              v29 = (_QWORD *)v16[2];
              v30 = *v29 == (_QWORD)v16;
              v16 = v29;
            }
            while (!v30);
            goto LABEL_17;
          }
        }
        else
        {
LABEL_27:
          v28 = (_QWORD *)v16[1];
          if (!v28)
            goto LABEL_31;
        }
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
LABEL_17:
        v16 = v29;
        if (v29 == v9)
          goto LABEL_35;
      }
    }
    v18 = 0;
    v17 = 0;
LABEL_35:
    v31 = atomic_load(HGLogger::_enabled);
    if ((v31 & 1) != 0)
      HGLogger::log((HGLogger *)"sp", (const char *)1, (HGLogger *)"total other objects : free=%zu, total=%zu\n", v5, v6, v18, v17);
    v32 = v17 + v36;
    v33 = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 64))(a1, a2);
    v34 = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 48))(a1, a2);
    if (v34 >= v18 && v33 >= v32)
    {
      if (v34 - v18 >= v33 - v32)
        return v33 - v32;
      else
        return v34 - v18;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1B2ADA114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::pair<HGPool::BasePool const* const,std::shared_ptr<HGPool::ServicingPolicy>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HGPool::GroupServicingPolicy::maxObjectAgeNS(HGPool::GroupServicingPolicy *this, const HGPool::BasePool *a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = (char *)this + 16;
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= (unint64_t)a2;
    if (v6 >= (unint64_t)a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || *((_QWORD *)v5 + 4) > (unint64_t)a2)
LABEL_12:
    v5 = v2;
  v9 = *((_QWORD *)v5 + 5);
  if (v9)
    return (*(uint64_t (**)(uint64_t, const HGPool::BasePool *))(*(_QWORD *)v9 + 32))(v9, a2);
  else
    return -1;
}

void HGPool::GroupServicingPolicy::addPool(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v7 = (uint64_t **)(a1 + 16);
  v6 = *(uint64_t **)(a1 + 16);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = v6[4];
        if (v9 <= (unint64_t)a2)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= (unint64_t)a2)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 16);
LABEL_8:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x38uLL);
    v8[5] = 0;
    v8[6] = 0;
    v8[4] = a2;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)(a1 + 8);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)(a1 + 8) = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v12);
    ++*(_QWORD *)(a1 + 24);
  }
  v14 = *a3;
  v13 = a3[1];
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 1);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::__shared_weak_count *)v8[6];
  v8[5] = v14;
  v8[6] = v13;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void HGPool::GroupServicingPolicy::~GroupServicingPolicy(HGPool::GroupServicingPolicy *this)
{
  *(_QWORD *)this = &off_1E652E808;
  std::__tree<std::__value_type<HGPool::BasePool const*,std::shared_ptr<HGPool::ServicingPolicy>>,std::__map_value_compare<HGPool::BasePool const*,std::__value_type<HGPool::BasePool const*,std::shared_ptr<HGPool::ServicingPolicy>>,std::less<HGPool::BasePool const*>,true>,std::allocator<std::__value_type<HGPool::BasePool const*,std::shared_ptr<HGPool::ServicingPolicy>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = &off_1E652E808;
  std::__tree<std::__value_type<HGPool::BasePool const*,std::shared_ptr<HGPool::ServicingPolicy>>,std::__map_value_compare<HGPool::BasePool const*,std::__value_type<HGPool::BasePool const*,std::shared_ptr<HGPool::ServicingPolicy>>,std::less<HGPool::BasePool const*>,true>,std::allocator<std::__value_type<HGPool::BasePool const*,std::shared_ptr<HGPool::ServicingPolicy>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  JUMPOUT(0x1B5E29170);
}

void HGPool::BasePool::~BasePool(HGPool::BasePool *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t std::pair<HGPool::BasePool const* const,std::shared_ptr<HGPool::ServicingPolicy>>::~pair(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<HGPool::registerPool(HGPool::BasePool *)::$_0 &&>>()
{
  uint64_t v0;
  std::thread v1;

  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 850045863;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)(v0 + 80) = 0;
  qword_1ED4DAAE0 = v0;
  std::thread::detach(&v1);
  std::thread::~thread(&v1);
}

void sub_1B2ADA424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::thread a10)
{
  std::thread::~thread(&a10);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::poolsObserverThreadFunction(_anonymous_namespace_ *this)
{
  HGPool *v1;
  std::mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::mutex *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  unsigned __int8 v12;
  unsigned int v13;
  std::chrono::nanoseconds __ns;

  v1 = (HGPool *)pthread_setname_np("com.apple.helium-pools");
  while (1)
  {
    if (qword_1ED4DAAE0)
    {
      HGTraceGuard::HGTraceGuard((HGTraceGuard *)&__ns, "hgpool", 2, "HGPool::logAllPools");
      v2 = (std::mutex *)(qword_1ED4DAAE0 + 24);
      std::mutex::lock((std::mutex *)(qword_1ED4DAAE0 + 24));
      v3 = *(_QWORD **)qword_1ED4DAAE0;
      v4 = *(_QWORD **)(qword_1ED4DAAE0 + 8);
      while (v3 != v4)
      {
        v5 = *v3;
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v3 + 88))(*v3))
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
        ++v3;
      }
      std::mutex::unlock(v2);
      HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&__ns);
    }
    HGPool::traceAllPools(v1);
    if (qword_1ED4DAAE0)
    {
      HGTraceGuard::HGTraceGuard((HGTraceGuard *)&__ns, "hgpool", 1, "HGPool::serviceAllPools");
      v6 = (std::mutex *)(qword_1ED4DAAE0 + 24);
      std::mutex::lock((std::mutex *)(qword_1ED4DAAE0 + 24));
      v8 = *(uint64_t **)qword_1ED4DAAE0;
      v7 = *(uint64_t **)(qword_1ED4DAAE0 + 8);
      while (v8 != v7)
      {
        v9 = *v8;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 72))(*v8))
        {
          v12 = atomic_load(HGLogger::_enabled);
          if ((v12 & 1) != 0)
            HGLogger::log((HGLogger *)"hgpool", (const char *)1, (HGLogger *)"service pool (%p)\n", v10, v11, v9);
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
        }
        ++v8;
      }
      std::mutex::unlock(v6);
      HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&__ns);
    }
    if (v13)
    {
      __ns.__rep_ = 1000000000 * v13;
      std::this_thread::sleep_for (&__ns);
    }
  }
}

void sub_1B2ADA5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2ADA5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2ADA600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex *v11;

  std::mutex::unlock(v11);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a11);
  _Unwind_Resume(a1);
}

void _ZNSt3__16threadC2IRFvvEJEvEEOT_DpOT0_(pthread_t *a1, uint64_t a2)
{
  std::__thread_struct *v4;
  int v5;
  _QWORD *v6;

  v4 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v4);
  v6 = (_QWORD *)operator new();
  *v6 = v4;
  v6[1] = a2;
  v5 = pthread_create(a1, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void)>>, v6);
  if (v5)
  {
    std::__throw_system_error(v5, "thread constructor failed");
    __break(1u);
  }
}

void sub_1B2ADA6C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B2ADA6D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_1B2ADA6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void)>>::~unique_ptr[abi:ne180100](&a9);
  std::unique_ptr<std::__thread_struct>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void)>>(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  v4 = pthread_setspecific(v2->__key_, v3);
  (*(void (**)(uint64_t))(a1 + 8))(v4);
  v5 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    v6 = MEMORY[0x1B5E28F18]();
    MEMORY[0x1B5E29170](v6, 0x20C4093837F09);
  }
  MEMORY[0x1B5E29170](a1, 0xA0C40AFF93C70);
  return 0;
}

void sub_1B2ADA79C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void)>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void)>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x1B5E28F18]();
      MEMORY[0x1B5E29170](v4, 0x20C4093837F09);
    }
    MEMORY[0x1B5E29170](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__thread_struct>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = MEMORY[0x1B5E28F18]();
    MEMORY[0x1B5E29170](v3, 0x20C4093837F09);
  }
  return a1;
}

BOOL HGMath::IsEqualWithinTolerance(float32x4_t a1, float32x4_t a2, int32x2_t a3)
{
  int8x16_t v3;

  v3 = vmvnq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(a3, 0), vabdq_f32(a1, a2)));
  *(int32x2_t *)v3.i8 = vpmin_s32(*(int32x2_t *)v3.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
  return vpmin_s32(*(int32x2_t *)v3.i8, *(int32x2_t *)v3.i8).u32[0] == 0;
}

void HGGLBlendingInfo::HGGLBlendingInfo(HGGLBlendingInfo *this, const HGBlendingInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;

  v2 = *((int *)a2 + 2);
  if (v2 > 0xC)
  {
    *(_DWORD *)this = 1;
    v3 = *((int *)a2 + 3);
    if (v3 > 0xC)
    {
LABEL_3:
      *((_DWORD *)this + 1) = 1;
      v4 = *((int *)a2 + 4);
      if (v4 > 0xC)
        goto LABEL_4;
LABEL_8:
      *((_DWORD *)this + 2) = dword_1B3524780[v4];
      v5 = *((int *)a2 + 5);
      if (v5 > 0xC)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  else
  {
    *(_DWORD *)this = dword_1B3524780[v2];
    v3 = *((int *)a2 + 3);
    if (v3 > 0xC)
      goto LABEL_3;
  }
  *((_DWORD *)this + 1) = dword_1B3524780[v3];
  v4 = *((int *)a2 + 4);
  if (v4 <= 0xC)
    goto LABEL_8;
LABEL_4:
  *((_DWORD *)this + 2) = 1;
  v5 = *((int *)a2 + 5);
  if (v5 > 0xC)
  {
LABEL_5:
    v6 = 1;
    goto LABEL_10;
  }
LABEL_9:
  v6 = dword_1B3524780[v5];
LABEL_10:
  *((_DWORD *)this + 3) = v6;
  v7 = *((_DWORD *)a2 + 6) - 1;
  if (v7 > 3)
  {
    *((_DWORD *)this + 4) = 32774;
    v8 = *((_DWORD *)a2 + 7) - 1;
    if (v8 > 3)
      goto LABEL_12;
  }
  else
  {
    *((_DWORD *)this + 4) = dword_1B35247C0[v7];
    v8 = *((_DWORD *)a2 + 7) - 1;
    if (v8 > 3)
    {
LABEL_12:
      *((_DWORD *)this + 5) = 32774;
      return;
    }
  }
  *((_DWORD *)this + 5) = dword_1B35247C0[v8];
}

uint64_t HGGLBlendingInfo::GetDstRGBFactor(HGGLBlendingInfo *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t HGGLBlendingInfo::GetDstAlphaFactor(HGGLBlendingInfo *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t HGGLBlendingInfo::GetRGBOperation(HGGLBlendingInfo *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t HGGLBlendingInfo::GetAlphaOperation(HGGLBlendingInfo *this)
{
  return *((unsigned int *)this + 5);
}

void HGOverwrite::HGOverwrite(HGOverwrite *this)
{
  HGNode *v2;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v2 = off_1E652E878;
  HGNode::SetFlags(v2, 0xFFFFFFFFLL, 1);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2ADA9F0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGOverwrite::~HGOverwrite(HGNode *this)
{
  void *v1;

  HGNode::~HGNode(this);
  HGObject::operator delete(v1);
}

char *HGOverwrite::RenderPage(HGOverwrite *this, HGPage *a2)
{
  HGGPURenderer *v4;
  int v5;
  char *Buffer;
  const char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  HGNode *Input;
  HGBitmap *NodeBitmap;
  HGBitmap *v18;
  BOOL v19;
  const char *v20;
  char *v21;
  HGRect *v23;
  HGRect v24;
  HGRect v25;
  HGRect v26;

  v4 = *(HGGPURenderer **)a2;
  v5 = (*(uint64_t (**)(HGOverwrite *))(*(_QWORD *)this + 112))(this);
  Buffer = (char *)*((_QWORD *)a2 + 1);
  if (Buffer)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)Buffer + 16))(*((_QWORD *)a2 + 1));
  }
  else
  {
    Buffer = HGGPURenderer::CreateBuffer((uint64_t)v4, *((HGRect *)a2 + 1), *((unsigned int *)a2 + 8), 0, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
    *((_QWORD *)a2 + 1) = Buffer;
  }
  (*(void (**)(HGGPURenderer *, char *))(*(_QWORD *)v4 + 144))(v4, Buffer);
  v23 = (HGRect *)a2;
  HGGPURenderer::Clear(v4, *((HGRect *)a2 + 1), v7, v8);
  if (v5 >= 1)
  {
    v9 = 0;
    v10 = v5;
    v11 = (uint64_t *)((char *)a2 + 44);
    do
    {
      v13 = *(v11 - 1);
      v14 = *v11;
      Input = HGRenderer::GetInput(v4, (HGNode *)this, v9);
      if (HGRectIsNull(v13, v14) || Input == 0)
        goto LABEL_7;
      *(_QWORD *)&v26.var0 = v13;
      *(_QWORD *)&v26.var2 = v14;
      NodeBitmap = HGGPURenderer::GetNodeBitmap(v4, Input, v26, (HGBuffer *)Buffer, 1u);
      v18 = NodeBitmap;
      if (NodeBitmap)
        v19 = NodeBitmap == (HGBitmap *)Buffer;
      else
        v19 = 1;
      if (v19)
      {
        (*(void (**)(HGGPURenderer *, char *))(*(_QWORD *)v4 + 144))(v4, Buffer);
        if (!v18)
        {
          HGGPURenderer::Clear(v4, v23[1], v20, v21);
          goto LABEL_7;
        }
      }
      else
      {
        *(_QWORD *)&v24.var0 = v13;
        *(_QWORD *)&v24.var2 = v14;
        v12 = HGGPURenderer::ConvertToGLTexture(v4, v24, NodeBitmap);
        (*(void (**)(HGGPURenderer *, char *))(*(_QWORD *)v4 + 144))(v4, Buffer);
        (*(void (**)(HGGPURenderer *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 152))(v4, 0, v12, 0, 0);
        *(_QWORD *)&v25.var0 = v13;
        *(_QWORD *)&v25.var2 = v14;
        HGGPURenderer::Rect(v4, v25);
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      }
      (*(void (**)(HGBitmap *))(*(_QWORD *)v18 + 24))(v18);
LABEL_7:
      v11 += 2;
      ++v9;
    }
    while (v10 != v9);
  }
  (*(void (**)(HGGPURenderer *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v4 + 152))(v4, 0, 0, 0, 0);
  return Buffer;
}

char *HGOverwrite::RenderPageMetal(HGOverwrite *this, HGPage *a2)
{
  HGGPURenderer *v4;
  int v5;
  char *Buffer;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  HGBitmap *v11;
  uint64_t v12;
  uint64_t v13;
  HGNode *Input;
  HGBitmap *NodeBitmap;
  char *v17;
  HGBitmap *v18;
  BOOL v19;
  HGRect *v21;
  HGRect v22;
  HGRect v23;
  HGRect v24;

  v4 = *(HGGPURenderer **)a2;
  v5 = (*(uint64_t (**)(HGOverwrite *))(*(_QWORD *)this + 112))(this);
  (*(void (**)(HGGPURenderer *, _QWORD))(*(_QWORD *)v4 + 144))(v4, 0);
  Buffer = (char *)*((_QWORD *)a2 + 1);
  if (Buffer)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)Buffer + 16))(*((_QWORD *)a2 + 1));
  }
  else
  {
    Buffer = HGGPURenderer::CreateBuffer((uint64_t)v4, *((HGRect *)a2 + 1), *((unsigned int *)a2 + 8), 1, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
    *((_QWORD *)a2 + 1) = Buffer;
  }
  v21 = (HGRect *)a2;
  HGGPURenderer::ClearMetal(v4, (HGBitmap *)Buffer, *((HGRect *)a2 + 1), v7);
  if (v5 >= 1)
  {
    v8 = 0;
    v9 = v5;
    v10 = (uint64_t *)((char *)a2 + 44);
    do
    {
      v12 = *(v10 - 1);
      v13 = *v10;
      Input = HGRenderer::GetInput(v4, (HGNode *)this, v8);
      if (HGRectIsNull(v12, v13) || Input == 0)
        goto LABEL_7;
      *(_QWORD *)&v24.var0 = v12;
      *(_QWORD *)&v24.var2 = v13;
      NodeBitmap = HGGPURenderer::GetNodeBitmap(v4, Input, v24, (HGBuffer *)Buffer, 1u);
      v18 = NodeBitmap;
      if (NodeBitmap)
        v19 = NodeBitmap == (HGBitmap *)Buffer;
      else
        v19 = 1;
      if (v19)
      {
        if (!NodeBitmap)
        {
          HGGPURenderer::ClearMetal(v4, (HGBitmap *)Buffer, v21[1], v17);
          goto LABEL_7;
        }
      }
      else
      {
        *(_QWORD *)&v22.var0 = v12;
        *(_QWORD *)&v22.var2 = v13;
        v11 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v4, v22, NodeBitmap);
        *(_QWORD *)&v23.var0 = v12;
        *(_QWORD *)&v23.var2 = v13;
        HGGPURenderer::CopyMetal(v4, (HGBitmap *)Buffer, v23, v11);
        (*(void (**)(HGBitmap *))(*(_QWORD *)v11 + 24))(v11);
      }
      (*(void (**)(HGBitmap *))(*(_QWORD *)v18 + 24))(v18);
LABEL_7:
      v10 += 2;
      ++v8;
    }
    while (v9 != v8);
  }
  return Buffer;
}

uint64_t HGOverwrite::RenderTile(HGNode *this, HGTile *a2)
{
  HGRenderer *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v3 = *(HGRenderer **)(*((_QWORD *)a2 + 42) + 152);
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  v32 = HIDWORD(*(_QWORD *)a2);
  v6 = (*(uint64_t (**)(HGNode *))(*(_QWORD *)this + 112))(this);
  v7 = v6;
  if (v6 < 1)
    goto LABEL_8;
  v8 = 0;
  v35 = 0;
  v9 = (uint64_t *)((char *)a2 + 216);
  v33 = 1;
  do
  {
    if (HGRenderer::GetInput(v3, this, v8))
    {
      v10 = *(v9 - 1);
      v11 = *v9;
      v12 = HGRectIntersection(v10, *v9, v4, v5);
      if (!HGRectIsNull(v12, v13))
      {
        v33 = 0;
        v35 |= HGRectIsEqual(v10, v11, v4, v5);
      }
    }
    ++v8;
    v9 += 2;
  }
  while (v6 != v8);
  if (v33 & 1 | ((v35 & 1) == 0))
LABEL_8:
    bzero(*((void **)a2 + 2), 16 * *((_DWORD *)a2 + 6) * (HIDWORD(v5) - (int)v32));
  v34 = v5;
  v36 = v4;
  if (v6 >= 1)
  {
    v14 = 0;
    do
    {
      if (HGRenderer::GetInput(v3, this, v14))
      {
        v15 = HGRectIntersection(*((_QWORD *)a2 + 2 * v14 + 26), *((_QWORD *)a2 + 2 * v14 + 27), v36, v34);
        v17 = v16;
        if (!HGRectIsNull(v15, v16))
        {
          v18 = HIDWORD(v17) - HIDWORD(v15);
          if (HIDWORD(v17) - HIDWORD(v15) >= 1)
          {
            v19 = v15 - v36;
            v20 = (char *)a2 + 16 * v14;
            v21 = *((_QWORD *)v20 + 10);
            v22 = *((int *)v20 + 22);
            v23 = HIDWORD(v15) - v32;
            v24 = *((int *)a2 + 6);
            v25 = 16 * ((int)v17 - (int)v15);
            v26 = 16 * v19;
            v27 = (char *)(v21 + v26 + 16 * (int)v22 * v23);
            v28 = 16 * v22;
            v29 = (char *)(*((_QWORD *)a2 + 2) + v26 + 16 * (int)v24 * v23);
            v30 = 16 * v24;
            do
            {
              memcpy(v29, v27, v25);
              v27 += v28;
              v29 += v30;
              --v18;
            }
            while (v18);
          }
        }
      }
      ++v14;
    }
    while (v14 != v7);
  }
  return 0;
}

uint64_t HGOverwrite::GetDOD(HGOverwrite *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 8)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HGOverwrite::GetROI(HGNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  signed int v15;
  signed int v16;
  signed int v17;
  HGNode *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  Input = HGRenderer::GetInput(a2, this, a3);
  DOD = HGRenderer::GetDOD(a2, Input);
  v12 = HGRectIntersection(DOD, v11, v5, v4);
  v14 = v13;
  v15 = (*(uint64_t (**)(HGNode *))(*(_QWORD *)this + 112))(this);
  v16 = a3 + 1;
  if (v16 < v15)
  {
    v17 = v15;
    do
    {
      if (HGRectIsNull(v12, v14))
        break;
      v18 = HGRenderer::GetInput(a2, this, v16);
      if (v18)
      {
        v19 = HGRenderer::GetDOD(a2, v18);
        if (HGRectContainsRect(v19, v20, v12, v14))
        {
          v12 = 0;
          v14 = 0;
        }
      }
      ++v16;
    }
    while (v17 != v16);
  }
  return v12;
}

uint64_t HGOverwrite::SetParameter(HGOverwrite *this, float a2, float a3, float a4, float a5)
{
  return 0;
}

void HGPremultiply::HGPremultiply(HGPremultiply *this)
{
  _QWORD *v2;
  HgcPremultiply *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E652EAE0;
  v3 = (HgcPremultiply *)HGObject::operator new(0x1A0uLL);
  HgcPremultiply::HgcPremultiply(v3);
  *((_QWORD *)this + 51) = v3;
}

void sub_1B2ADB180(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v2;

  HGObject::operator delete(v2);
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ADB19C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGPremultiply::~HGPremultiply(HGPremultiply *this)
{
  *(_QWORD *)this = off_1E652EAE0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 51) + 24))(*((_QWORD *)this + 51));
  HGNode::~HGNode((HGNode *)this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E652EAE0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 51) + 24))(*((_QWORD *)this + 51));
  HGNode::~HGNode((HGNode *)this);
  HGObject::operator delete(v2);
}

uint64_t HGPremultiply::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;

  Input = HGRenderer::GetInput(a2, this, 0);
  (*(void (**)(_QWORD, _QWORD, HGNode *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 0, Input);
  return *((_QWORD *)this + 51);
}

void HGUnpremultiply::HGUnpremultiply(HGUnpremultiply *this)
{
  _QWORD *v2;
  HgcUnpremultiply *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E652ED30;
  v3 = (HgcUnpremultiply *)HGObject::operator new(0x1A0uLL);
  HgcUnpremultiply::HgcUnpremultiply(v3);
  *((_QWORD *)this + 51) = v3;
}

void sub_1B2ADB2C8(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v2;

  HGObject::operator delete(v2);
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ADB2E4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGUnpremultiply::~HGUnpremultiply(HGUnpremultiply *this)
{
  *(_QWORD *)this = off_1E652ED30;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 51) + 24))(*((_QWORD *)this + 51));
  HGNode::~HGNode((HGNode *)this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E652ED30;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 51) + 24))(*((_QWORD *)this + 51));
  HGNode::~HGNode((HGNode *)this);
  HGObject::operator delete(v2);
}

uint64_t HGUnpremultiply::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;

  Input = HGRenderer::GetInput(a2, this, 0);
  (*(void (**)(_QWORD, _QWORD, HGNode *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 0, Input);
  return *((_QWORD *)this + 51);
}

void HGPremultiplyWhiteToBlack::HGPremultiplyWhiteToBlack(HGPremultiplyWhiteToBlack *this)
{
  _QWORD *v2;
  HgcPremultiplyWhiteToBlack *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E652EF80;
  v3 = (HgcPremultiplyWhiteToBlack *)HGObject::operator new(0x1A0uLL);
  HgcPremultiplyWhiteToBlack::HgcPremultiplyWhiteToBlack(v3);
  *((_QWORD *)this + 51) = v3;
}

void sub_1B2ADB410(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v2;

  HGObject::operator delete(v2);
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ADB42C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGPremultiplyWhiteToBlack::~HGPremultiplyWhiteToBlack(HGPremultiplyWhiteToBlack *this)
{
  *(_QWORD *)this = off_1E652EF80;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 51) + 24))(*((_QWORD *)this + 51));
  HGNode::~HGNode((HGNode *)this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E652EF80;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 51) + 24))(*((_QWORD *)this + 51));
  HGNode::~HGNode((HGNode *)this);
  HGObject::operator delete(v2);
}

uint64_t HGPremultiplyWhiteToBlack::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;

  Input = HGRenderer::GetInput(a2, this, 0);
  (*(void (**)(_QWORD, _QWORD, HGNode *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 0, Input);
  return *((_QWORD *)this + 51);
}

HGBitmap *HGTW::_setupSamplerWrappedBuffer(uint64_t a1, HGBitmapLoader *this, HGRect *a3, int a4, int a5, const HGEdgePolicy *a6)
{
  char *Buffer;
  HGBitmap *NodeBitmap;
  int v14;
  HGBuffer *v15;

  if (*((_DWORD *)this + 3) == 1112363084 && !HGBitmapLoader::IsBitmapPadded((HGBitmapUtils **)this, (HGBitmap *)this))
    Buffer = 0;
  else
    Buffer = HGGPURenderer::CreateBuffer(*(_QWORD *)a1, *a3, *(unsigned int *)(a1 + 32), a5, a4, 0);
  NodeBitmap = HGGPURenderer::GetNodeBitmap(*(HGGPURenderer **)a1, (HGNode *)this, *a3, (HGBuffer *)Buffer, 0);
  if (Buffer)
    (*(void (**)(char *))(*(_QWORD *)Buffer + 24))(Buffer);
  v14 = *((_DWORD *)NodeBitmap + 3);
  if ((v14 & 0x10) == 0)
  {
    v15 = (HGBuffer *)HGObject::operator new(0x80uLL);
    HGBuffer::HGBuffer(v15, *(HGRect *)((char *)NodeBitmap + 20), NodeBitmap);
LABEL_14:
    (*(void (**)(HGBitmap *))(*(_QWORD *)NodeBitmap + 24))(NodeBitmap);
    NodeBitmap = (HGBitmap *)v15;
    goto LABEL_15;
  }
  if ((v14 & 0x200) != 0)
  {
    v15 = (HGBuffer *)HGObject::operator new(0xC8uLL);
    HGGLTexture::HGGLTexture((uint64_t)v15, *(_QWORD *)((char *)NodeBitmap + 20), *(_QWORD *)((char *)NodeBitmap + 28), *((_DWORD *)NodeBitmap + 4), *(_QWORD *)a1, *((_DWORD *)NodeBitmap + 40), *((_QWORD *)NodeBitmap + 21), 1);
    goto LABEL_13;
  }
  if ((v14 & 0x100) != 0)
  {
    v15 = (HGBuffer *)HGObject::operator new(0xB8uLL);
    HGGLBuffer::HGGLBuffer((uint64_t)v15, *(_QWORD *)((char *)NodeBitmap + 20), *(_QWORD *)((char *)NodeBitmap + 28), *((_DWORD *)NodeBitmap + 4), *(_QWORD *)a1, *((_DWORD *)NodeBitmap + 38), *((_DWORD *)NodeBitmap + 39), 1);
LABEL_13:
    HGBitmap::SetStorage((HGBitmap *)v15, (HGObject *)NodeBitmap);
    goto LABEL_14;
  }
LABEL_15:
  HGBitmap::SetEdgePolicy(NodeBitmap, a6);
  return NodeBitmap;
}

void sub_1B2ADB67C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ADB690(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ADB6A4(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HGTW::HGTextureWrapClampToEdge::~HGTextureWrapClampToEdge(HGNode *this)
{
  void *v1;

  HgcTextureWrapClampToEdge::~HgcTextureWrapClampToEdge(this);
  HGObject::operator delete(v1);
}

uint64_t HGTW::HGTextureWrapClampToEdge::SetParameter@<X0>(HGTW::HGTextureWrapClampToEdge *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, int a6@<W1>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  if (a6 == 1)
  {
    result = 0;
    *((_BYTE *)this + 432) = vcvtms_s32_f32(a2) != 0;
  }
  else
  {
    if (a6)
      return 0;
    v8 = HGRectMake4f(a7, a2, a3, a4, a5);
    v10 = v9;
    if (HGRectIsEqual(v8, v9, *((_QWORD *)this + 52), *((_QWORD *)this + 53)))
    {
      return 0;
    }
    else
    {
      *((_QWORD *)this + 52) = v8;
      *((_QWORD *)this + 53) = v10;
      return 1;
    }
  }
  return result;
}

uint64_t HGTW::HGTextureWrapClampToEdge::GetDOD(HGTW::HGTextureWrapClampToEdge *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;

  v4 = &HGRectNull;
  if (a3)
    return 0;
  *(HGRect *)((char *)this + 436) = a4;
  if (!HGRectIsNull(*(uint64_t *)&a4.var0, *(uint64_t *)&a4.var2))
    v4 = (__int128 *)((char *)this + 416);
  return *(_QWORD *)v4;
}

uint64_t HGTW::HGTextureWrapClampToEdge::GetROI(HGTW::HGTextureWrapClampToEdge *this, HGRenderer *a2, int a3, HGRect a4)
{
  int32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  HGRect v10;

  if (a3)
  {
    v9 = HGRectNull;
    return HGRectNull;
  }
  else
  {
    v5 = vmax_s32(vadd_s32(*(int32x2_t *)((char *)this + 436), (int32x2_t)0x200000002), *(int32x2_t *)&a4.var2);
    *(int32x2_t *)&v9 = vmin_s32(*(int32x2_t *)&a4.var0, vadd_s32(*(int32x2_t *)((char *)this + 444), (int32x2_t)0x100000001));
    *((int32x2_t *)&v9 + 1) = v5;
    HGRect::Intersection((HGRect *)&v9, *(HGRect *)((char *)this + 436));
    v6 = HGRectMake4i(0xFFFFFFFE, 0xFFFFFFFE, 2u, 2u);
    v8 = v7;
    *(_QWORD *)&v10.var0 = v6;
    *(_QWORD *)&v10.var2 = v8;
    HGRect::Grow((HGRect *)&v9, v10);
    return v9;
  }
}

HGBitmap *HGTW::HGTextureWrapClampToEdge::RenderPage(HGNode *this, HGPage *a2)
{
  return HGTW::HGTextureWrapClampToEdge::_renderPage(this, (uint64_t)a2, 0);
}

HGBitmap *HGTW::HGTextureWrapClampToEdge::_renderPage(HGNode *a1, uint64_t a2, int a3)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 IsNull;
  _BOOL4 IsInfinite;
  BOOL v12;
  int v13;
  _BYTE v15[20];
  HGRect v16;

  Input = HGRenderer::GetInput(*(HGRenderer **)a2, a1, 0);
  DOD = HGRenderer::GetDOD(*(HGRenderer **)a2, Input);
  *(_QWORD *)&v16.var0 = HGRectIntersection(DOD, v8, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *(_QWORD *)&v16.var2 = v9;
  IsNull = HGRectIsNull(*(uint64_t *)&v16.var0, v9);
  IsInfinite = HGRectIsInfinite(*((_QWORD *)a1 + 52), *((_QWORD *)a1 + 53));
  v12 = 0;
  if (IsInfinite)
  {
    if (IsNull)
    {
LABEL_9:
      if (a3)
        return (HGBitmap *)HGNode::RenderPageMetal(a1, (HGPage *)a2);
      else
        return (HGBitmap *)HGNode::RenderPage(a1, (HGRect *)a2);
    }
  }
  else
  {
    v12 = *((_BYTE *)a1 + 432) == 0;
    if (IsNull)
      goto LABEL_9;
  }
  if (v12)
    goto LABEL_9;
  v13 = 1;
  HGEdgePolicy::HGEdgePolicy((uint64_t)v15, 1);
  if ((*((_BYTE *)Input + 17) & 0x10) == 0)
    v13 = (*((unsigned __int8 *)a1 + 17) >> 4) & 1;
  return HGTW::_setupSamplerWrappedBuffer(a2, (HGBitmapLoader *)Input, &v16, v13, a3, (const HGEdgePolicy *)v15);
}

HGBitmap *HGTW::HGTextureWrapClampToEdge::RenderPageMetal(HGNode *this, HGPage *a2)
{
  return HGTW::HGTextureWrapClampToEdge::_renderPage(this, (uint64_t)a2, 1);
}

uint64_t HGTW::HGTextureWrapClampToEdge::RenderTile(HGNode *this, HGTile *a2)
{
  HGRenderer *v4;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(HGRenderer **)(*((_QWORD *)a2 + 42) + 152);
  Input = HGRenderer::GetInput(v4, this, 0);
  DOD = HGRenderer::GetDOD(v4, Input);
  if (!HGRectContainsRect(DOD, v7, *(_QWORD *)a2, *((_QWORD *)a2 + 1)))
    return HgcTextureWrapClampToEdge::RenderTile((HgcTextureWrapClampToEdge *)this, (int32x2_t *)a2);
  v8 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v8 >= 1 && *((_DWORD *)a2 + 2) - *(_DWORD *)a2 >= 1)
  {
    v9 = 0;
    v10 = *((_QWORD *)a2 + 10);
    v11 = 16 * *((int *)a2 + 22);
    v12 = *((_QWORD *)a2 + 2);
    v13 = 16 * *((int *)a2 + 6);
    v14 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    do
    {
      v15 = 0;
      do
      {
        *(_OWORD *)(v12 + v15) = *(_OWORD *)(v10 + v15);
        v15 += 16;
      }
      while (v14 != v15);
      ++v9;
      v10 += v11;
      v12 += v13;
    }
    while (v9 != v8);
  }
  return 0;
}

void HGTW::HGTextureWrapClampToColor::~HGTextureWrapClampToColor(HGNode *this)
{
  void *v1;

  HGNode::~HGNode(this);
  HGObject::operator delete(v1);
}

uint64_t HGTW::HGTextureWrapClampToColor::SetParameter(HGTW::HGTextureWrapClampToColor *this, int a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;

  HGNode::SetParameter((HGNode *)this, a2, a3, a4, a5, a6, a7);
  if (a2 == 2)
  {
    result = 0;
    *(_QWORD *)&v14 = __PAIR64__(LODWORD(a4), LODWORD(a3));
    *((_QWORD *)&v14 + 1) = __PAIR64__(LODWORD(a6), LODWORD(a5));
    *((_OWORD *)this + 27) = v14;
  }
  else if (a2 == 1)
  {
    result = 0;
    *((_BYTE *)this + 448) = vcvtms_s32_f32(a3) != 0;
  }
  else
  {
    if (a2)
      return 0;
    v10 = HGRectMake4f(v9, a3, a4, a5, a6);
    v12 = v11;
    if (HGRectIsEqual(v10, v11, *((_QWORD *)this + 51), *((_QWORD *)this + 52)))
    {
      return 0;
    }
    else
    {
      *((_QWORD *)this + 51) = v10;
      *((_QWORD *)this + 52) = v12;
      return 1;
    }
  }
  return result;
}

uint64_t HGTW::HGTextureWrapClampToColor::GetDOD(HGTW::HGTextureWrapClampToColor *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;

  v4 = &HGRectNull;
  if (a3)
    return 0;
  if (!HGRectIsNull(*(uint64_t *)&a4.var0, *(uint64_t *)&a4.var2))
    v4 = (__int128 *)((char *)this + 408);
  return *(_QWORD *)v4;
}

uint64_t HGTW::HGTextureWrapClampToColor::GetROI(HGTW::HGTextureWrapClampToColor *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

HGBitmap *HGTW::HGTextureWrapClampToColor::RenderPage(HGNode *this, HGPage *a2)
{
  return HGTW::HGTextureWrapClampToColor::_renderPage(this, (uint64_t)a2, 0);
}

HGBitmap *HGTW::HGTextureWrapClampToColor::_renderPage(HGNode *a1, uint64_t a2, int a3)
{
  _BOOL4 v6;
  HGRenderer *v7;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 IsNull;
  _BOOL4 v14;
  PCICCTransferFunctionLUT *MetalContext;
  _BOOL4 v16;
  BOOL v17;
  int v18;
  const char *v20;
  char *Buffer;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  char *v25;
  HGRect v26;
  HGBitmap *NodeBitmap;
  HGTexture *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _BYTE v32[16];
  HGRect v33;
  char __str[4];
  __int128 v35;
  uint64_t v36;
  HGRect v37;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *((float *)a1 + 108) == 0.0
    && *((float *)a1 + 109) == 0.0
    && *((float *)a1 + 110) == 0.0
    && *((float *)a1 + 111) == 0.0;
  v7 = *(HGRenderer **)a2;
  Input = HGRenderer::GetInput(*(HGRenderer **)a2, a1, 0);
  DOD = HGRenderer::GetDOD(v7, Input);
  v11 = v10;
  *(_QWORD *)&v33.var0 = HGRectIntersection(DOD, v10, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *(_QWORD *)&v33.var2 = v12;
  IsNull = HGRectIsNull(*(uint64_t *)&v33.var0, v12);
  if (HGRectIsInfinite(*((_QWORD *)a1 + 51), *((_QWORD *)a1 + 52)))
  {
    v14 = 1;
    if (!a3)
      goto LABEL_22;
  }
  else
  {
    v14 = *((_BYTE *)a1 + 448) != 0;
    if (!a3)
      goto LABEL_22;
  }
  MetalContext = (PCICCTransferFunctionLUT *)HGGPURenderer::GetMetalContext(v7);
  if (MetalContext)
  {
    v16 = *(_BYTE *)(PCICCTransferFunctionLUT::getLUTEnd(MetalContext) + 56) && v6;
    v17 = v16 && !IsNull;
    if (v17 && v14)
    {
      HGEdgePolicy::HGEdgePolicy((uint64_t)__str, 0);
      v35 = *(_OWORD *)(*((_QWORD *)a1 + 6) + 32);
      if ((*((_BYTE *)Input + 17) & 0x10) != 0)
        v18 = 1;
      else
        v18 = (*((unsigned __int8 *)a1 + 17) >> 4) & 1;
      return HGTW::_setupSamplerWrappedBuffer(a2, (HGBitmapLoader *)Input, &v33, v18, a3, (const HGEdgePolicy *)__str);
    }
  }
LABEL_22:
  if (HGRectContainsRect(DOD, v11, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)))
    return HGGPURenderer::GetNodeBitmap(v7, Input, *(HGRect *)(a2 + 16), *(HGBuffer **)(a2 + 8), 1u);
  v20 = (const char *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)a1 + 48))(a1);
  snprintf(__str, 0x100uLL, "%s::_renderPage( [%d %d %d %d])", v20, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v32, "gpu", 1, __str);
  Buffer = *(char **)(a2 + 8);
  if (Buffer)
    (*(void (**)(_QWORD))(*(_QWORD *)Buffer + 16))(*(_QWORD *)(a2 + 8));
  else
    Buffer = HGGPURenderer::CreateBuffer((uint64_t)v7, *(HGRect *)(a2 + 16), *(unsigned int *)(a2 + 32), a3, (*((_DWORD *)a1 + 4) >> 12) & 1, *(unsigned __int8 *)(a2 + 248));
  v22 = HGRectIntersection(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 36), *(_QWORD *)(a2 + 44));
  v24 = (float *)((char *)a1 + 432);
  if (!HGRectIsNull(v22, v23))
  {
    if (*(_QWORD *)(a2 + 168))
    {
      if (!a3)
        goto LABEL_40;
    }
    else
    {
      v26 = *(HGRect *)(a2 + 36);
      if (!a3)
      {
        *(_QWORD *)(a2 + 168) = HGGPURenderer::GetNodeTexture(v7, Input, v26, 0, 1u);
LABEL_40:
        (*(void (**)(HGRenderer *, char *))(*(_QWORD *)v7 + 144))(v7, Buffer);
        HGGPURenderer::Clear(v7, *(HGRect *)(a2 + 16), v24, v29);
        (*(void (**)(HGRenderer *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 152))(v7, 0, *(_QWORD *)(a2 + 168), 0, 0);
        HGGPURenderer::Copy(v7, *(HGRect *)(*(_QWORD *)(a2 + 168) + 20), 0, v30);
LABEL_41:
        v31 = *(_QWORD *)(a2 + 168);
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
        goto LABEL_43;
      }
      NodeBitmap = HGGPURenderer::GetNodeBitmap(v7, Input, v26, 0, 1u);
      v28 = (HGTexture *)HGObject::operator new(0x80uLL);
      *(_QWORD *)&v37.var0 = *(_QWORD *)((char *)NodeBitmap + 20);
      *(_QWORD *)&v37.var2 = *(_QWORD *)((char *)NodeBitmap + 28);
      HGTexture::HGTexture(v28, v37, NodeBitmap);
      *(_QWORD *)(a2 + 168) = v28;
      (*(void (**)(HGBitmap *))(*(_QWORD *)NodeBitmap + 24))(NodeBitmap);
    }
    HGGPURenderer::ClearMetal(v7, (HGBitmap *)Buffer, *(HGRect *)(a2 + 16), v24);
    HGGPURenderer::CopyMetal(v7, (HGBitmap *)Buffer, *(HGRect *)(*(_QWORD *)(a2 + 168) + 20), *(HGBitmap **)(a2 + 168));
    goto LABEL_41;
  }
  if (a3)
  {
    HGGPURenderer::ClearMetal(v7, (HGBitmap *)Buffer, *(HGRect *)(a2 + 16), v24);
  }
  else
  {
    (*(void (**)(HGRenderer *, char *))(*(_QWORD *)v7 + 144))(v7, Buffer);
    HGGPURenderer::Clear(v7, *(HGRect *)(a2 + 16), v24, v25);
  }
LABEL_43:
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v32);
  return (HGBitmap *)Buffer;
}

void sub_1B2ADBFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  HGObject::operator delete(v15);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a15);
  _Unwind_Resume(a1);
}

void sub_1B2ADC018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2ADC02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B2ADC044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

HGBitmap *HGTW::HGTextureWrapClampToColor::RenderPageMetal(HGNode *this, HGPage *a2)
{
  return HGTW::HGTextureWrapClampToColor::_renderPage(this, (uint64_t)a2, 1);
}

uint64_t HGTW::HGTextureWrapClampToColor::RenderTile(HGNode *this, HGTile *a2)
{
  HGRenderer *v4;
  HGNode *Input;
  unint64_t DOD;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  if (*((float *)this + 108) != 0.0
    || *((float *)this + 109) != 0.0
    || *((float *)this + 110) != 0.0
    || *((float *)this + 111) != 0.0)
  {
    v4 = *(HGRenderer **)(*((_QWORD *)a2 + 42) + 152);
    Input = HGRenderer::GetInput(v4, this, 0);
    DOD = HGRenderer::GetDOD(v4, Input);
    v8 = v7;
    if (!HGRectContainsRect(DOD, v7, *(_QWORD *)a2, *((_QWORD *)a2 + 1)))
    {
      v10 = HGRectIntersection(DOD, v8, *(_QWORD *)a2, *((_QWORD *)a2 + 1));
      if (HGRectIsNull(v10, v11))
      {
        v12 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
        if (v12 >= 1 && *((_DWORD *)a2 + 2) - *(_DWORD *)a2 >= 1)
        {
          v13 = 0;
          v14 = *((_OWORD *)this + 27);
          v15 = *((_QWORD *)a2 + 2);
          v16 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
          v17 = 16 * *((int *)a2 + 6);
          do
          {
            v18 = 0;
            do
            {
              *(_OWORD *)(v15 + v18) = v14;
              v18 += 16;
            }
            while (v16 != v18);
            ++v13;
            v15 += v17;
          }
          while (v13 != v12);
        }
      }
      else
      {
        v19 = HIDWORD(DOD);
        v21 = *(_DWORD *)a2;
        v20 = *((_DWORD *)a2 + 1);
        if (v20 < SHIDWORD(DOD))
        {
          if (*((_DWORD *)a2 + 3) < SHIDWORD(DOD))
            LODWORD(v19) = *((_DWORD *)a2 + 3);
          v22 = v19 - v20;
          if (v22 >= 1)
          {
            v23 = *((_DWORD *)a2 + 2) - v21;
            if (v23 >= 1)
            {
              v24 = 0;
              v25 = *((_QWORD *)a2 + 2);
              v26 = *((_OWORD *)this + 27);
              v27 = 16 * v23;
              v28 = 16 * *((int *)a2 + 6);
              do
              {
                v29 = 0;
                do
                {
                  *(_OWORD *)(v25 + v29) = v26;
                  v29 += 16;
                }
                while (v27 != v29);
                ++v24;
                v25 += v28;
              }
              while (v24 != v22);
              v21 = *(_DWORD *)a2;
            }
          }
        }
        v30 = *((_DWORD *)a2 + 2);
        if (v21 < (int)DOD)
        {
          v31 = v30 >= (int)DOD ? DOD : *((_DWORD *)a2 + 2);
          v32 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
          if (v32 >= 1)
          {
            v33 = v31 - v21;
            if (v33 >= 1)
            {
              v34 = 0;
              v35 = *((_QWORD *)a2 + 2);
              v36 = *((_OWORD *)this + 27);
              v37 = 16 * v33;
              v38 = 16 * *((int *)a2 + 6);
              do
              {
                v39 = 0;
                do
                {
                  *(_OWORD *)(v35 + v39) = v36;
                  v39 += 16;
                }
                while (v37 != v39);
                ++v34;
                v35 += v38;
              }
              while (v34 != v32);
              v30 = *((_DWORD *)a2 + 2);
            }
          }
        }
        if (v30 > (int)v8)
        {
          v40 = *(_DWORD *)a2 <= (int)v8 ? v8 : *(_DWORD *)a2;
          v41 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
          if (v41 >= 1)
          {
            v42 = v30 - v40;
            if (v30 - v40 >= 1)
            {
              v43 = 0;
              v44 = *((_QWORD *)a2 + 2) + 16 * (v40 - *(_DWORD *)a2);
              v45 = *((_OWORD *)this + 27);
              v46 = 16 * v42;
              v47 = 16 * *((int *)a2 + 6);
              do
              {
                v48 = 0;
                do
                {
                  *(_OWORD *)(v44 + v48) = v45;
                  v48 += 16;
                }
                while (v46 != v48);
                ++v43;
                v44 += v47;
              }
              while (v43 != v41);
            }
          }
        }
        v49 = *((_DWORD *)a2 + 3);
        if (v49 > SHIDWORD(v8))
        {
          v50 = *((_DWORD *)a2 + 1);
          v51 = v50 <= SHIDWORD(v8) ? HIDWORD(v8) : *((_DWORD *)a2 + 1);
          v52 = v49 - v51;
          if (v52 >= 1 && *((_DWORD *)a2 + 2) - *(_DWORD *)a2 >= 1)
          {
            v54 = 0;
            v55 = *((int *)a2 + 6);
            v56 = *((_QWORD *)a2 + 2) + 16 * (v51 - v50) * (int)v55;
            v57 = *((_OWORD *)this + 27);
            v58 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
            do
            {
              v59 = 0;
              do
              {
                *(_OWORD *)(v56 + v59) = v57;
                v59 += 16;
              }
              while (v58 != v59);
              ++v54;
              v56 += 16 * v55;
            }
            while (v54 != v52);
          }
        }
      }
    }
  }
  return 0;
}

void HGTW::HGTextureWrapRepeat::~HGTextureWrapRepeat(HGNode *this)
{
  void *v1;

  HGNode::~HGNode(this);
  HGObject::operator delete(v1);
}

uint64_t HGTW::HGTextureWrapRepeat::SetParameter(HGTW::HGTextureWrapRepeat *this, int a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  HGNode::SetParameter((HGNode *)this, a2, a3, a4, a5, a6, a7);
  if (a2)
    return 0;
  v14 = HGRectMake4f(v13, a3, a4, a5, a6);
  v16 = v15;
  if (HGRectIsEqual(v14, v15, *((_QWORD *)this + 51), *((_QWORD *)this + 52)))
    return 0;
  *((_QWORD *)this + 51) = v14;
  *((_QWORD *)this + 52) = v16;
  return 1;
}

uint64_t HGTW::HGTextureWrapRepeat::GetDOD(HGTW::HGTextureWrapRepeat *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;

  v4 = &HGRectNull;
  if (a3)
    return 0;
  if (!HGRectIsNull(*(uint64_t *)&a4.var0, *(uint64_t *)&a4.var2))
    v4 = (__int128 *)((char *)this + 408);
  return *(_QWORD *)v4;
}

uint64_t HGTW::HGTextureWrapRepeat::GetROI(HGTW::HGTextureWrapRepeat *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  if (a3)
    return 0;
  if (*((_DWORD *)this + 10) == 1)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  if (HGRectIsNull(*(uint64_t *)&a4.var0, *(uint64_t *)&a4.var2))
    return 0;
  Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v13 = v12;
  HGTW::HGTextureWrapRepeat::_computeRoiSegments((uint64_t)this, (int)DOD, (int)v12, (int)v6, (int)v5, (char **)&v22);
  HGTW::HGTextureWrapRepeat::_computeRoiSegments((uint64_t)this, DOD >> 32, v13 >> 32, v6 >> 32, v5 >> 32, (char **)&v20);
  v15 = (void *)v22;
  v16 = v22;
  v17 = v23;
  v14 = (void *)v20;
  v18 = v20;
  v19 = v21;
  HGTW::HGTextureWrapRepeat::_buildRoiList((uint64_t)this, (int **)&v16, 0, (uint64_t **)&v22);
  v8 = *(_QWORD *)v22;
  *((_QWORD *)&v22 + 1) = v22;
  operator delete((void *)v22);
  if (v14)
    operator delete(v14);
  if (v15)
    operator delete(v15);
  return v8;
}

void sub_1B2ADC598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::pair<std::vector<HGTW::HGTextureWrapRepeat::Segment>,std::vector<HGTW::HGTextureWrapRepeat::Segment>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2ADC5AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 80);
  if (v3)
  {
    *(_QWORD *)(v1 - 72) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void HGTW::HGTextureWrapRepeat::_buildRoiList(uint64_t a1@<X0>, int **a2@<X1>, char a3@<W2>, uint64_t **a4@<X8>)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  void *__p;
  unsigned int *v31;

  HGTW::HGTextureWrapRepeat::_buildRoiSegments(a1, a2, a3, &__p);
  HGTW::HGTextureWrapRepeat::_buildRoiSegments(a1, a2 + 3, a3, (void **)&v28);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v8 = (unsigned int *)__p;
  v9 = v28;
  v10 = v29;
  v27 = v31;
  if (__p == v31)
  {
LABEL_25:
    if (!v9)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (v28 != v29)
  {
    v11 = 0;
    v26 = v28;
    while (1)
    {
      v12 = HGRectMake4i(*v8, *v9, v8[1], v9[1]);
      v14 = v12;
      v15 = v13;
      v16 = (unint64_t)a4[2];
      if ((unint64_t)v11 < v16)
      {
        *v11 = v12;
        v11[1] = v13;
        v11 += 2;
        goto LABEL_5;
      }
      v17 = *a4;
      v18 = ((char *)v11 - (char *)*a4) >> 4;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v20 = v16 - (_QWORD)v17;
      if (v20 >> 3 > v19)
        v19 = v20 >> 3;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
        v21 = 0xFFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v22 = (char *)operator new(16 * v21);
        v23 = (uint64_t *)&v22[16 * v18];
        *v23 = v14;
        v23[1] = v15;
        if (v11 == v17)
        {
LABEL_21:
          v25 = v11;
          v11 = v23 + 2;
          *a4 = v23;
          a4[1] = v23 + 2;
          a4[2] = (uint64_t *)&v22[16 * v21];
          if (!v25)
            goto LABEL_5;
          goto LABEL_22;
        }
      }
      else
      {
        v22 = 0;
        v23 = (uint64_t *)(16 * v18);
        *v23 = v14;
        v23[1] = v13;
        if (v11 == v17)
          goto LABEL_21;
      }
      v24 = v23;
      do
      {
        *((_OWORD *)v24 - 1) = *((_OWORD *)v11 - 1);
        v24 -= 2;
        v11 -= 2;
      }
      while (v11 != v17);
      v25 = *a4;
      v11 = v23 + 2;
      *a4 = v24;
      a4[1] = v23 + 2;
      a4[2] = (uint64_t *)&v22[16 * v21];
      if (!v25)
        goto LABEL_5;
LABEL_22:
      operator delete(v25);
LABEL_5:
      a4[1] = v11;
      v9 += 2;
      if (v9 == v10)
      {
        v8 += 2;
        v9 = v26;
        if (v8 == v27)
        {
          v9 = v28;
          goto LABEL_25;
        }
      }
    }
  }
  v9 = v29;
  if (v29)
LABEL_26:
    operator delete(v9);
LABEL_27:
  if (__p)
    operator delete(__p);
}

void sub_1B2ADC7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::vector<HGTW::HGTextureWrapRepeat::Segment>,std::vector<HGTW::HGTextureWrapRepeat::Segment>>::~pair(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

string_t HGTW::HGTextureWrapRepeat::GetProgram(HGTW::HGTextureWrapRepeat *this, HGRenderer *a2)
{
  _BOOL4 v4;
  double v5;
  double v6;
  uint32x4_t v7;
  string_t v8;
  double v9;
  double v10;
  uint32x4_t v11;
  string_t v13;
  string_t v14[6];

  if (HGRenderer::GetTarget(a2, 393216) <= 0x60B0F)
  {
    if (!*((_BYTE *)this + 448))
      return 0;
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
      HGString::sampleRect(0, v14);
    else
      HGString::sample2d((HGString *)0x60620, 0, 0, (HGString *)v14);
    v8 = HGString::c_str(v14, v9, v10, v11);
  }
  else
  {
    v4 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27;
    HGString::sample2d((HGString *)0x60B10, 0, v4, (HGString *)v14);
    v8 = HGString::c_str(v14, v5, v6, v7);
  }
  v13 = v8;
  HGString::~HGString((HGString *)v14);
  return v13;
}

void sub_1B2ADC984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGString::~HGString((HGString *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2ADC998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGString::~HGString((HGString *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2ADC9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGString::~HGString((HGString *)&a9);
  _Unwind_Resume(a1);
}

void HGTW::HGTextureWrapRepeat::InitProgramDescriptor(HGTW::HGTextureWrapRepeat *this, HGProgramDescriptor *a2)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  double v15;
  double v16;
  uint32x4_t v17;
  const std::string::value_type *v18;
  std::string *v19;
  __int128 v20;
  string_t v21;
  void *__p[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;
  void *v26[2];
  unsigned __int8 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  __int128 v32;
  std::string::size_type v33;

  HGMetalUtils::stringForMetalHeader((uint64_t)&v28);
  HGMetalUtils::stringForMetalVertexOutputStruct((HGMetalUtils *)1, 0, (uint64_t)v26);
  if ((v27 & 0x80u) == 0)
    v3 = v26;
  else
    v3 = (void **)v26[0];
  if ((v27 & 0x80u) == 0)
    v4 = v27;
  else
    v4 = (std::string::size_type)v26[1];
  v5 = std::string::append(&v28, (const std::string::value_type *)v3, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  HGMetalUtils::stringForMetalVertexShader((HGMetalUtils *)"vertexFunc", (const char *)1, 0, (uint64_t)v24);
  if ((v25 & 0x80u) == 0)
    v7 = v24;
  else
    v7 = (void **)v24[0];
  if ((v25 & 0x80u) == 0)
    v8 = v25;
  else
    v8 = (std::string::size_type)v24[1];
  v9 = std::string::append(&v29, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  HGMetalUtils::stringForMetalFragmentOutputStruct((HGMetalUtils *)1, 0, (uint64_t)__p);
  if ((v23 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v12 = v23;
  else
    v12 = (std::string::size_type)__p[1];
  v13 = std::string::append(&v30, (const std::string::value_type *)v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  HGString::sample2d((HGString *)0x60B10, 0, 0, (HGString *)&v21);
  v18 = HGString::c_str(&v21, v15, v16, v17);
  v19 = std::string::append(&v31, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v33 = v19->__r_.__value_.__r.__words[2];
  v32 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  HGString::~HGString((HGString *)&v21);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v31.__r_.__value_.__l.__data_);
    if (((char)v23 & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_29;
    }
  }
  else if (((char)v23 & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v30.__r_.__value_.__l.__data_);
  if (((char)v25 & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v24[0]);
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if (((char)v27 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v29.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_33:
    operator delete(v28.__r_.__value_.__l.__data_);
LABEL_26:
    HGProgramDescriptor::SetVertexFunctionName(a2, "vertexFunc");
  }
LABEL_32:
  operator delete(v26[0]);
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_26;
  goto LABEL_33;
}

void sub_1B2ADD004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (a17 < 0)
    operator delete(__p);
  std::vector<HGBinding>::~vector[abi:ne180100]((void **)(v49 - 128));
  std::vector<HGBinding>::~vector[abi:ne180100]((void **)(v49 - 96));
  if (*(char *)(v49 - 41) < 0)
    operator delete(*(void **)(v49 - 64));
  _Unwind_Resume(a1);
}

uint64_t HGTW::HGTextureWrapRepeat::BindTexture(HGTW::HGTextureWrapRepeat *this, HGHandler *a2, int a3)
{
  HGHandler::TexCoord(a2, a3, 0, 0, 0);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, *((float *)this + 110), *((float *)this + 111), 0.0);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 104))(a2, *((float *)this + 108), *((float *)this + 109), 1.0);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, *((float *)this + 106), *((float *)this + 107), 0.0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  return 0;
}

uint64_t HGTW::HGTextureWrapRepeat::Bind(HGTW::HGTextureWrapRepeat *this, HGHandler *a2)
{
  return 0;
}

HGBitmap *HGTW::HGTextureWrapRepeat::RenderPage(HGNode *this, HGPage *a2)
{
  return HGTW::HGTextureWrapRepeat::_renderPage(this, (uint64_t)a2, 0);
}

HGBitmap *HGTW::HGTextureWrapRepeat::_renderPage(HGNode *a1, uint64_t a2, int a3)
{
  HGRenderer *v6;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v9;
  uint64_t v10;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  HGTexture **v21;
  uint64_t v22;
  HGRect *v23;
  HGBitmap *NodeBitmap;
  HGBitmap *v25;
  HGTexture *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int **v29;
  uint64_t v30;
  HGRect *v31;
  char *v32;
  char *Buffer;
  void *v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[16];
  __int128 v41;
  uint64_t v42;
  void *__p[2];
  uint64_t v44;
  char __str[256];
  uint64_t v46;
  HGRect v47;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = *(HGRenderer **)a2;
  Input = HGRenderer::GetInput(*(HGRenderer **)a2, a1, 0);
  DOD = HGRenderer::GetDOD(v6, Input);
  v10 = v9;
  if (HGRectContainsRect(DOD, v9, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)))
    return HGGPURenderer::GetNodeBitmap(v6, Input, *(HGRect *)(a2 + 16), *(HGBuffer **)(a2 + 8), 1u);
  v12 = (const char *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)a1 + 48))(a1);
  snprintf(__str, 0x100uLL, "%s::_renderPage( [%d %d %d %d])", v12, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v40, "gpu", 1, __str);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  HGTW::HGTextureWrapRepeat::_computeRoiSegments((uint64_t)a1, (int)DOD, (int)v10, (int)v13, (int)v14, (char **)__p);
  HGTW::HGTextureWrapRepeat::_computeRoiSegments((uint64_t)a1, DOD >> 32, v10 >> 32, v13 >> 32, v14 >> 32, (char **)&v41);
  v35 = __p[0];
  v36 = *(_OWORD *)__p;
  v37 = v44;
  v34 = (void *)v41;
  v38 = v41;
  v39 = v42;
  HGTW::HGTextureWrapRepeat::_buildRoiList((uint64_t)a1, (int **)&v36, 1, (uint64_t **)__p);
  if (a3 == 1)
    (*(void (**)(HGRenderer *, _QWORD))(*(_QWORD *)v6 + 144))(v6, 0);
  v15 = *(char **)(a2 + 8);
  if (v15)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v15 + 16))(*(_QWORD *)(a2 + 8));
    Buffer = v15;
    v17 = __p[0];
    v16 = __p[1];
    if (__p[1] == __p[0])
      goto LABEL_18;
LABEL_9:
    v18 = 0;
    if (a3)
    {
      v19 = 1;
      do
      {
        v20 = a2 + 8 * v18;
        v22 = *(_QWORD *)(v20 + 168);
        v21 = (HGTexture **)(v20 + 168);
        if (!v22)
        {
          v23 = (HGRect *)&v17[16 * v18];
          *(HGRect *)(a2 + 16 * v18 + 36) = *v23;
          NodeBitmap = HGGPURenderer::GetNodeBitmap(v6, Input, *v23, 0, 1u);
          v25 = HGGPURenderer::ConvertToNonGLTexture(v6, NodeBitmap);
          v26 = (HGTexture *)HGObject::operator new(0x80uLL);
          *(_QWORD *)&v47.var0 = *(_QWORD *)((char *)v25 + 20);
          *(_QWORD *)&v47.var2 = *(_QWORD *)((char *)v25 + 28);
          HGTexture::HGTexture(v26, v47, v25);
          *v21 = v26;
          (*(void (**)(HGBitmap *))(*(_QWORD *)v25 + 24))(v25);
          (*(void (**)(HGBitmap *))(*(_QWORD *)NodeBitmap + 24))(NodeBitmap);
          v17 = __p[0];
          v16 = __p[1];
        }
        v18 = v19++;
      }
      while (v18 < (v16 - v17) >> 4);
    }
    else
    {
      v27 = 1;
      do
      {
        v28 = a2 + 8 * v18;
        v30 = *(_QWORD *)(v28 + 168);
        v29 = (unsigned int **)(v28 + 168);
        if (!v30)
        {
          v31 = (HGRect *)&v17[16 * v18];
          *(HGRect *)(a2 + 16 * v18 + 36) = *v31;
          *v29 = HGGPURenderer::GetNodeTexture(v6, Input, *v31, 0, 1u);
          v17 = __p[0];
          v16 = __p[1];
        }
        v18 = v27++;
      }
      while (v18 < (v16 - v17) >> 4);
    }
    goto LABEL_18;
  }
  Buffer = HGGPURenderer::CreateBuffer((uint64_t)v6, *(HGRect *)(a2 + 16), *(unsigned int *)(a2 + 32), a3, (*((_DWORD *)a1 + 4) >> 12) & 1, *(unsigned __int8 *)(a2 + 248));
  v17 = __p[0];
  v16 = __p[1];
  if (__p[1] != __p[0])
    goto LABEL_9;
LABEL_18:
  if (a3 == 1)
  {
    v32 = Buffer;
    HGTW::HGTextureWrapRepeat::_renderPageCore_Metal(a1, (_QWORD *)a2, (uint64_t *)&v36, (uint64_t **)__p, (HGBitmap *)Buffer);
  }
  else
  {
    v32 = Buffer;
    if (!a3)
      HGTW::HGTextureWrapRepeat::_renderPageCore_GL((uint64_t)a1, (HGGPURenderer **)a2, &v36, (uint64_t **)__p, (uint64_t)Buffer);
  }
  HGPage::ReleaseTextures((HGPage *)a2);
  if (!a3)
    glFlush();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v34)
    operator delete(v34);
  if (v35)
    operator delete(v35);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v40);
  return (HGBitmap *)v32;
}

void sub_1B2ADD684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  std::pair<std::vector<HGTW::HGTextureWrapRepeat::Segment>,std::vector<HGTW::HGTextureWrapRepeat::Segment>>::~pair((uint64_t)&a19);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a25);
  _Unwind_Resume(a1);
}

HGBitmap *HGTW::HGTextureWrapRepeat::RenderPageMetal(HGNode *this, HGPage *a2)
{
  return HGTW::HGTextureWrapRepeat::_renderPage(this, (uint64_t)a2, 1);
}

uint64_t HGTW::HGTextureWrapRepeat::_renderPageCore_GL(uint64_t a1, HGGPURenderer **a2, _QWORD *a3, uint64_t **a4, uint64_t a5)
{
  HGGPURenderer *v8;
  uint64_t result;
  uint64_t v10;
  _BYTE *v16;
  _BYTE *v17;
  HGHandler *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t **v30;
  _BYTE *v31;
  HGRect v32;

  v8 = *a2;
  result = (*(uint64_t (**)(HGGPURenderer *, uint64_t))(*(_QWORD *)*a2 + 144))(*a2, a5);
  v10 = *a3;
  v27 = a3[1];
  v28 = a3;
  if (*a3 != v27)
  {
    v31 = (_BYTE *)a3[4];
    if ((_BYTE *)a3[3] != v31)
    {
      __asm { FMOV            V8.2S, #1.0 }
      v30 = a4;
      while (1)
      {
        v16 = (_BYTE *)v28[3];
        if (v16 != v31)
          break;
LABEL_4:
        v10 += 20;
        if (v10 == v27)
          return result;
      }
      v17 = v16 + 16;
      while (1)
      {
        v19 = v17 - 16;
        v20 = HGRectMake4i(*(_DWORD *)v10, *((_DWORD *)v17 - 4), *(_DWORD *)(v10 + 4), *((_DWORD *)v17 - 3));
        v22 = v21;
        v23 = HGRectMake4i(*(_DWORD *)(v10 + 8), *((_DWORD *)v17 - 2), *(_DWORD *)(v10 + 12), *((_DWORD *)v17 - 1));
        v25 = v24;
        result = HGRectContainsRect(**a4, (*a4)[1], v23, v24);
        if ((_DWORD)result)
        {
          v26 = 0;
          if (!*(_BYTE *)(a1 + 448))
            goto LABEL_8;
        }
        else
        {
          result = HGRectContainsRect((*a4)[2], (*a4)[3], v23, v25);
          if ((_DWORD)result)
          {
            v26 = 1;
            if (!*(_BYTE *)(a1 + 448))
              goto LABEL_8;
          }
          else
          {
            result = HGRectContainsRect((*a4)[4], (*a4)[5], v23, v25);
            if ((_DWORD)result)
            {
              v26 = 2;
              if (!*(_BYTE *)(a1 + 448))
                goto LABEL_8;
            }
            else
            {
              result = HGRectContainsRect((*a4)[6], (*a4)[7], v23, v25);
              if ((_DWORD)result)
                v26 = 3;
              else
                v26 = 0;
              if (!*(_BYTE *)(a1 + 448))
                goto LABEL_8;
            }
          }
        }
        *(_QWORD *)(a1 + 432) = _D8;
        *(float *)(a1 + 424) = (float)-(int)v20;
        *(float *)(a1 + 428) = (float)-HIDWORD(v20);
        *(float *)(a1 + 440) = (float)(int)v23;
        *(float *)(a1 + 444) = (float)SHIDWORD(v23);
        if (*(_BYTE *)(v10 + 16))
        {
          if (!*v17)
            goto LABEL_26;
        }
        else
        {
          *(_DWORD *)(a1 + 432) = -1082130432;
          *(float *)(a1 + 440) = (float)(int)v23 + (float)(v25 - v23);
          if (!*v17)
          {
LABEL_26:
            *(_DWORD *)(a1 + 436) = -1082130432;
            *(float *)(a1 + 444) = (float)SHIDWORD(v23) + (float)(HIDWORD(v25) - HIDWORD(v23));
          }
        }
        (*(void (**)(HGGPURenderer *, _QWORD, HGGPURenderer *, _QWORD, _QWORD))(*(_QWORD *)v8 + 152))(v8, 0, a2[v26 + 21], 0, 0);
        v18 = (HGHandler *)(*(uint64_t (**)(HGGPURenderer *, _QWORD, uint64_t))(*(_QWORD *)v8 + 368))(v8, *(_QWORD *)(a1 + 64), a1);
        (*(void (**)(uint64_t, HGGPURenderer **, uint64_t, HGHandler *))(*(_QWORD *)a1 + 488))(a1, a2, v26, v18);
        *(_QWORD *)&v32.var0 = v20;
        *(_QWORD *)&v32.var2 = v22;
        HGGPURenderer::Rect(v8, v18, v32, 1);
        (*(void (**)(uint64_t, HGGPURenderer **, uint64_t, HGHandler *))(*(_QWORD *)a1 + 496))(a1, a2, v26, v18);
        result = (*(uint64_t (**)(HGGPURenderer *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 152))(v8, 0, 0, 0, 0);
LABEL_8:
        v17 += 20;
        a4 = v30;
        if (v19 + 20 == v31)
          goto LABEL_4;
      }
    }
  }
  return result;
}

void HGTW::HGTextureWrapRepeat::_renderPageCore_Metal(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t **a4, HGBitmap *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  char **v21;
  float v22;
  __int128 v23;
  uint64_t *v24;
  char *v25;
  unint64_t v26;
  unint64_t *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  _OWORD *v37;
  __int128 v38;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  _OWORD *v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  _OWORD *v59;
  __int128 v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  _OWORD *v69;
  __int128 v70;
  unint64_t v71;
  char *v72;
  __int128 v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  _OWORD *v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  void **v92;
  float v93;
  __int128 v94;
  uint64_t *v95;
  char *v96;
  char *v97;
  unint64_t *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  _OWORD *v108;
  __int128 v109;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  _OWORD *v119;
  __int128 v120;
  unint64_t v121;
  char *v122;
  __int128 v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  _OWORD *v130;
  __int128 v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  _OWORD *v140;
  __int128 v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  _OWORD *v150;
  __int128 v151;
  __int128 v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  __int128 v160;
  unint64_t v161;
  uint64_t v162;
  const void *v163;
  std::string *v164;
  std::string *v165;
  const char *v166;
  size_t v167;
  std::string::size_type v168;
  std::string *p_dst;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  __n128 v173;
  void *v174;
  void *v175;
  uint64_t v176;
  uint64_t v178;
  uint64_t v182;
  uint64_t v183;
  uint64_t v185;
  int v186;
  int v187;
  unint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  float v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  std::string __dst;
  void *v203[2];
  void *v204[2];
  __int128 v205;
  void *v206[2];
  void *__p[2];
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  v213 = 0u;
  v214 = 0u;
  v211 = 0u;
  v212 = 0u;
  v210 = 0u;
  v209 = 0u;
  *(_OWORD *)__p = 0u;
  v208 = 0u;
  v205 = 0u;
  *(_OWORD *)v206 = 0u;
  *(_OWORD *)v203 = 0u;
  *(_OWORD *)v204 = 0u;
  v5 = *a3;
  v178 = a3[1];
  if (*a3 != v178)
  {
    v183 = a3[4];
    if (a3[3] != v183)
    {
      while (1)
      {
        v6 = a3[3];
        if (v6 != v183)
          break;
LABEL_4:
        v5 += 20;
        if (v5 == v178)
          goto LABEL_239;
      }
      v182 = v5;
      while (1)
      {
        v8 = HGRectMake4i(*(_DWORD *)v5, *(_DWORD *)v6, *(_DWORD *)(v5 + 4), *(_DWORD *)(v6 + 4));
        v10 = v9;
        v11 = HGRectMake4i(*(_DWORD *)(v5 + 8), *(_DWORD *)(v6 + 8), *(_DWORD *)(v5 + 12), *(_DWORD *)(v6 + 12));
        v13 = v12;
        if (HGRectContainsRect(**a4, (*a4)[1], v11, v12))
        {
          v16 = 0;
        }
        else if (HGRectContainsRect((*a4)[2], (*a4)[3], v11, v13))
        {
          v16 = 1;
        }
        else if (HGRectContainsRect((*a4)[4], (*a4)[5], v11, v13))
        {
          v16 = 2;
        }
        else if (HGRectContainsRect((*a4)[6], (*a4)[7], v11, v13))
        {
          v16 = 3;
        }
        else
        {
          v16 = 0;
        }
        v17 = v13 & 0xFFFFFFFF00000000 | v11;
        if (*(_BYTE *)(v5 + 16))
        {
          v17 = v13;
          v18 = v11;
        }
        else
        {
          v18 = v13;
        }
        v187 = v18;
        v19 = v17 | v11 & 0xFFFFFFFF00000000;
        if (*(_BYTE *)(v6 + 16))
          v19 = v17;
        v188 = v19;
        if (*(_BYTE *)(v6 + 16))
          v20 = HIDWORD(v11);
        else
          v20 = HIDWORD(v17);
        v186 = v20;
        v21 = (char **)&v209 + 3 * v16;
        *(float *)&v14 = (float)(int)v8;
        v22 = (float)SHIDWORD(v8);
        DWORD2(v14) = 0;
        HIDWORD(v14) = 1.0;
        v23 = v14;
        *((float *)&v23 + 1) = (float)SHIDWORD(v8);
        v24 = (uint64_t *)(v21 + 1);
        v25 = v21[1];
        v27 = (unint64_t *)(v21 + 2);
        v26 = (unint64_t)v21[2];
        v198 = v14;
        if ((unint64_t)v25 < v26)
        {
          *(_OWORD *)v25 = v23;
          v28 = (char *)*v27;
          v29 = v25 + 16;
          goto LABEL_43;
        }
        v30 = *v21;
        v31 = (v25 - *v21) >> 4;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v33 = v26 - (_QWORD)v30;
        if (v33 >> 3 > v32)
          v32 = v33 >> 3;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
          v34 = 0xFFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        v195 = v22;
        if (v34)
        {
          v189 = v23;
          if (v34 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v35 = (char *)operator new(16 * v34);
          v22 = v195;
          v14 = v198;
          DWORD1(v23) = DWORD1(v189);
          v36 = &v35[16 * v31];
          *(_OWORD *)v36 = v189;
          v29 = v36 + 16;
          if (v25 == v30)
            goto LABEL_41;
        }
        else
        {
          v35 = 0;
          v36 = (char *)(16 * v31);
          v37 = (_OWORD *)(16 * v31);
          *v37 = v23;
          v29 = (char *)(v37 + 1);
          if (v25 == v30)
            goto LABEL_41;
        }
        do
        {
          v38 = *((_OWORD *)v25 - 1);
          v25 -= 16;
          DWORD1(v23) = DWORD1(v38);
          *((_OWORD *)v36 - 1) = v38;
          v36 -= 16;
        }
        while (v25 != v30);
        v25 = *v21;
LABEL_41:
        v28 = &v35[16 * v34];
        *v21 = v36;
        *v27 = (unint64_t)v28;
        if (v25)
        {
          operator delete(v25);
          v22 = v195;
          v14 = v198;
        }
LABEL_43:
        *v24 = (uint64_t)v29;
        *(float *)&v15 = (float)(int)v10;
        DWORD2(v15) = 0;
        HIDWORD(v15) = 1.0;
        v190 = v15;
        *((float *)&v15 + 1) = v22;
        v196 = v15;
        if (v29 < v28)
        {
          *(_OWORD *)v29 = v15;
          v40 = (char *)*v27;
          v41 = v29 + 16;
          goto LABEL_61;
        }
        v42 = *v21;
        v43 = (v29 - *v21) >> 4;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if ((v28 - v42) >> 3 > v44)
          v44 = (v28 - v42) >> 3;
        if ((unint64_t)(v28 - v42) >= 0x7FFFFFFFFFFFFFF0)
          v45 = 0xFFFFFFFFFFFFFFFLL;
        else
          v45 = v44;
        if (v45)
        {
          if (v45 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v46 = (char *)operator new(16 * v45);
          DWORD1(v15) = DWORD1(v196);
          v14 = v198;
          v47 = &v46[16 * v43];
          v40 = &v46[16 * v45];
          *(_OWORD *)v47 = v196;
          v41 = v47 + 16;
          if (v29 == v42)
          {
LABEL_59:
            *v21 = v47;
            *v27 = (unint64_t)v40;
LABEL_60:
            operator delete(v29);
            v14 = v198;
            goto LABEL_61;
          }
        }
        else
        {
          v47 = (char *)(16 * v43);
          v40 = 0;
          v48 = (_OWORD *)(16 * v43);
          *v48 = v15;
          v41 = (char *)(v48 + 1);
          if (v29 == v42)
            goto LABEL_59;
        }
        do
        {
          v49 = *((_OWORD *)v29 - 1);
          v29 -= 16;
          DWORD1(v23) = DWORD1(v49);
          *((_OWORD *)v47 - 1) = v49;
          v47 -= 16;
        }
        while (v29 != v42);
        v29 = *v21;
        *v21 = v47;
        *v27 = (unint64_t)v40;
        if (v29)
          goto LABEL_60;
LABEL_61:
        *v24 = (uint64_t)v41;
        *(float *)&v23 = (float)SHIDWORD(v10);
        v185 = v23;
        *((float *)&v14 + 1) = (float)SHIDWORD(v10);
        v199 = v14;
        if (v41 < v40)
        {
          *(_OWORD *)v41 = v14;
          v50 = *v27;
          v51 = v41 + 16;
          v52 = v196;
          *v24 = (uint64_t)(v41 + 16);
          if ((unint64_t)(v41 + 16) < v50)
            goto LABEL_78;
          goto LABEL_82;
        }
        v53 = *v21;
        v54 = (v41 - *v21) >> 4;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if ((v40 - v53) >> 3 > v55)
          v55 = (v40 - v53) >> 3;
        if ((unint64_t)(v40 - v53) >= 0x7FFFFFFFFFFFFFF0)
          v56 = 0xFFFFFFFFFFFFFFFLL;
        else
          v56 = v55;
        if (v56)
        {
          if (v56 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v57 = (char *)operator new(16 * v56);
          v14 = v199;
          v58 = &v57[16 * v54];
          v50 = (unint64_t)&v57[16 * v56];
          *(_OWORD *)v58 = v199;
          v51 = v58 + 16;
          if (v41 == v53)
          {
LABEL_80:
            *v21 = v58;
            *v27 = v50;
            goto LABEL_81;
          }
        }
        else
        {
          v58 = (char *)(16 * v54);
          v50 = 0;
          v59 = (_OWORD *)(16 * v54);
          *v59 = v14;
          v51 = (char *)(v59 + 1);
          if (v41 == v53)
            goto LABEL_80;
        }
        do
        {
          v60 = *((_OWORD *)v41 - 1);
          v41 -= 16;
          *((_OWORD *)v58 - 1) = v60;
          v58 -= 16;
        }
        while (v41 != v53);
        v41 = *v21;
        *v21 = v58;
        *v27 = v50;
        if (!v41)
        {
          v52 = v196;
          *v24 = (uint64_t)v51;
          if ((unint64_t)v51 < v50)
            goto LABEL_78;
          goto LABEL_82;
        }
LABEL_81:
        operator delete(v41);
        v52 = v196;
        v14 = v199;
        *v24 = (uint64_t)v51;
        if ((unint64_t)v51 < v50)
        {
LABEL_78:
          *(_OWORD *)v51 = v52;
          v61 = *v27;
          v62 = v51 + 16;
          *v24 = (uint64_t)(v51 + 16);
          if ((unint64_t)(v51 + 16) < v61)
            goto LABEL_96;
          goto LABEL_100;
        }
LABEL_82:
        v63 = *v21;
        v64 = (v51 - *v21) >> 4;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v50 - (_QWORD)v63) >> 3 > v65)
          v65 = (uint64_t)(v50 - (_QWORD)v63) >> 3;
        if (v50 - (unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
          v66 = 0xFFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
        {
          if (v66 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v67 = (char *)operator new(16 * v66);
          v14 = v199;
          v68 = &v67[16 * v64];
          v61 = (unint64_t)&v67[16 * v66];
          *(_OWORD *)v68 = v196;
          v62 = v68 + 16;
          if (v51 == v63)
          {
LABEL_98:
            *v21 = v68;
            *v27 = v61;
            goto LABEL_99;
          }
        }
        else
        {
          v68 = (char *)(16 * v64);
          v61 = 0;
          v69 = (_OWORD *)(16 * v64);
          *v69 = v52;
          v62 = (char *)(v69 + 1);
          if (v51 == v63)
            goto LABEL_98;
        }
        do
        {
          v70 = *((_OWORD *)v51 - 1);
          v51 -= 16;
          *((_OWORD *)v68 - 1) = v70;
          v68 -= 16;
        }
        while (v51 != v63);
        v51 = *v21;
        *v21 = v68;
        *v27 = v61;
        if (!v51)
        {
          *v24 = (uint64_t)v62;
          if ((unint64_t)v62 < v61)
            goto LABEL_96;
          goto LABEL_100;
        }
LABEL_99:
        operator delete(v51);
        v14 = v199;
        *v24 = (uint64_t)v62;
        if ((unint64_t)v62 < v61)
        {
LABEL_96:
          *(_OWORD *)v62 = v14;
          v71 = *v27;
          v72 = v62 + 16;
          *v24 = (uint64_t)(v62 + 16);
          v73 = v190;
          DWORD1(v14) = HIDWORD(v185);
          DWORD1(v73) = v185;
          if ((unint64_t)(v62 + 16) < v71)
            goto LABEL_114;
          goto LABEL_117;
        }
LABEL_100:
        v74 = *v21;
        v75 = (v62 - *v21) >> 4;
        v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v61 - (_QWORD)v74) >> 3 > v76)
          v76 = (uint64_t)(v61 - (_QWORD)v74) >> 3;
        if (v61 - (unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
          v77 = 0xFFFFFFFFFFFFFFFLL;
        else
          v77 = v76;
        if (v77)
        {
          if (v77 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v78 = (char *)operator new(16 * v77);
          v79 = &v78[16 * v75];
          v71 = (unint64_t)&v78[16 * v77];
          *(_OWORD *)v79 = v199;
          v72 = v79 + 16;
          if (v62 == v74)
          {
LABEL_115:
            *v21 = v79;
            *v27 = v71;
            goto LABEL_116;
          }
        }
        else
        {
          v79 = (char *)(16 * v75);
          v71 = 0;
          v80 = (_OWORD *)(16 * v75);
          *v80 = v14;
          v72 = (char *)(v80 + 1);
          if (v62 == v74)
            goto LABEL_115;
        }
        do
        {
          v81 = *((_OWORD *)v62 - 1);
          v62 -= 16;
          *((_OWORD *)v79 - 1) = v81;
          v79 -= 16;
        }
        while (v62 != v74);
        v62 = *v21;
        *v21 = v79;
        *v27 = v71;
        if (!v62)
        {
          *v24 = (uint64_t)v72;
          v73 = v190;
          DWORD1(v14) = HIDWORD(v185);
          DWORD1(v73) = v185;
          if ((unint64_t)v72 < v71)
            goto LABEL_114;
          goto LABEL_117;
        }
LABEL_116:
        operator delete(v62);
        *v24 = (uint64_t)v72;
        v73 = v190;
        DWORD1(v14) = HIDWORD(v185);
        DWORD1(v73) = v185;
        if ((unint64_t)v72 < v71)
        {
LABEL_114:
          *(_OWORD *)v72 = v73;
          v82 = (uint64_t)(v72 + 16);
          v83 = v188;
          goto LABEL_133;
        }
LABEL_117:
        v84 = *v21;
        v85 = (v72 - *v21) >> 4;
        v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v71 - (_QWORD)v84) >> 3 > v86)
          v86 = (uint64_t)(v71 - (_QWORD)v84) >> 3;
        if (v71 - (unint64_t)v84 >= 0x7FFFFFFFFFFFFFF0)
          v87 = 0xFFFFFFFFFFFFFFFLL;
        else
          v87 = v86;
        if (v87)
        {
          v191 = v73;
          if (v87 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v88 = (char *)operator new(16 * v87);
          v89 = &v88[16 * v85];
          v90 = &v88[16 * v87];
          *(_OWORD *)v89 = v191;
          v82 = (uint64_t)(v89 + 16);
          if (v72 == v84)
          {
LABEL_131:
            *v21 = v89;
            *v27 = (unint64_t)v90;
            v83 = v188;
LABEL_132:
            operator delete(v72);
            goto LABEL_133;
          }
        }
        else
        {
          v89 = (char *)(16 * v85);
          v90 = 0;
          *(_OWORD *)(16 * v85) = v73;
          v82 = 16 * v85 + 16;
          if (v72 == v84)
            goto LABEL_131;
        }
        v83 = v188;
        do
        {
          v91 = *((_OWORD *)v72 - 1);
          v72 -= 16;
          *((_OWORD *)v89 - 1) = v91;
          v89 -= 16;
        }
        while (v72 != v84);
        v72 = *v21;
        *v21 = v89;
        *v27 = (unint64_t)v90;
        if (v72)
          goto LABEL_132;
LABEL_133:
        *v24 = v82;
        v92 = &v203[3 * v16];
        *(float *)&v14 = (float)v187;
        v93 = (float)v186;
        DWORD2(v14) = 0;
        HIDWORD(v14) = 1.0;
        v94 = v14;
        *((float *)&v94 + 1) = (float)v186;
        v95 = (uint64_t *)(v92 + 1);
        v96 = (char *)v92[1];
        v98 = (unint64_t *)(v92 + 2);
        v97 = (char *)v92[2];
        v200 = v14;
        if (v96 < v97)
        {
          *(_OWORD *)v96 = v94;
          v99 = (char *)*v98;
          v100 = v96 + 16;
          goto LABEL_150;
        }
        v101 = (char *)*v92;
        v102 = (v96 - (_BYTE *)*v92) >> 4;
        v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v104 = v97 - v101;
        if (v104 >> 3 > v103)
          v103 = v104 >> 3;
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0)
          v105 = 0xFFFFFFFFFFFFFFFLL;
        else
          v105 = v103;
        if (v105)
        {
          v192 = v94;
          if (v105 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v106 = (char *)operator new(16 * v105);
          v93 = (float)v186;
          v14 = v200;
          v107 = &v106[16 * v102];
          *(_OWORD *)v107 = v192;
          v100 = v107 + 16;
          if (v96 == v101)
            goto LABEL_148;
        }
        else
        {
          v106 = 0;
          v107 = (char *)(16 * v102);
          v108 = (_OWORD *)(16 * v102);
          *v108 = v94;
          v100 = (char *)(v108 + 1);
          if (v96 == v101)
            goto LABEL_148;
        }
        do
        {
          v109 = *((_OWORD *)v96 - 1);
          v96 -= 16;
          *((_OWORD *)v107 - 1) = v109;
          v107 -= 16;
        }
        while (v96 != v101);
        v96 = (char *)*v92;
LABEL_148:
        v99 = &v106[16 * v105];
        *v92 = v107;
        *v98 = (unint64_t)v99;
        if (v96)
        {
          operator delete(v96);
          v93 = (float)v186;
          v14 = v200;
        }
LABEL_150:
        *v95 = (uint64_t)v100;
        *(float *)&v15 = (float)(int)v83;
        DWORD2(v15) = 0;
        HIDWORD(v15) = 1.0;
        v193 = v15;
        *((float *)&v15 + 1) = v93;
        v197 = v15;
        if (v100 < v99)
        {
          *(_OWORD *)v100 = v15;
          v111 = (char *)*v98;
          v112 = v100 + 16;
          goto LABEL_168;
        }
        v113 = (char *)*v92;
        v114 = (v100 - (_BYTE *)*v92) >> 4;
        v115 = v114 + 1;
        if ((unint64_t)(v114 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if ((v99 - v113) >> 3 > v115)
          v115 = (v99 - v113) >> 3;
        if ((unint64_t)(v99 - v113) >= 0x7FFFFFFFFFFFFFF0)
          v116 = 0xFFFFFFFFFFFFFFFLL;
        else
          v116 = v115;
        if (v116)
        {
          if (v116 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v117 = (char *)operator new(16 * v116);
          v14 = v200;
          v118 = &v117[16 * v114];
          v111 = &v117[16 * v116];
          *(_OWORD *)v118 = v197;
          v112 = v118 + 16;
          if (v100 == v113)
          {
LABEL_166:
            *v92 = v118;
            *v98 = (unint64_t)v111;
LABEL_167:
            operator delete(v100);
            v14 = v200;
            goto LABEL_168;
          }
        }
        else
        {
          v118 = (char *)(16 * v114);
          v111 = 0;
          v119 = (_OWORD *)(16 * v114);
          *v119 = v15;
          v112 = (char *)(v119 + 1);
          if (v100 == v113)
            goto LABEL_166;
        }
        do
        {
          v120 = *((_OWORD *)v100 - 1);
          v100 -= 16;
          *((_OWORD *)v118 - 1) = v120;
          v118 -= 16;
        }
        while (v100 != v113);
        v100 = (char *)*v92;
        *v92 = v118;
        *v98 = (unint64_t)v111;
        if (v100)
          goto LABEL_167;
LABEL_168:
        *v95 = (uint64_t)v112;
        *((float *)&v14 + 1) = (float)SHIDWORD(v83);
        v201 = v14;
        if (v112 < v111)
        {
          *(_OWORD *)v112 = v14;
          v121 = *v98;
          v122 = v112 + 16;
          v123 = v197;
          *v95 = (uint64_t)(v112 + 16);
          if ((unint64_t)(v112 + 16) < v121)
            goto LABEL_185;
          goto LABEL_189;
        }
        v124 = (char *)*v92;
        v125 = (v112 - (_BYTE *)*v92) >> 4;
        v126 = v125 + 1;
        if ((unint64_t)(v125 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if ((v111 - v124) >> 3 > v126)
          v126 = (v111 - v124) >> 3;
        if ((unint64_t)(v111 - v124) >= 0x7FFFFFFFFFFFFFF0)
          v127 = 0xFFFFFFFFFFFFFFFLL;
        else
          v127 = v126;
        if (v127)
        {
          if (v127 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v128 = (char *)operator new(16 * v127);
          v14 = v201;
          v129 = &v128[16 * v125];
          v121 = (unint64_t)&v128[16 * v127];
          *(_OWORD *)v129 = v201;
          v122 = v129 + 16;
          if (v112 == v124)
          {
LABEL_187:
            *v92 = v129;
            *v98 = v121;
            goto LABEL_188;
          }
        }
        else
        {
          v129 = (char *)(16 * v125);
          v121 = 0;
          v130 = (_OWORD *)(16 * v125);
          *v130 = v14;
          v122 = (char *)(v130 + 1);
          if (v112 == v124)
            goto LABEL_187;
        }
        do
        {
          v131 = *((_OWORD *)v112 - 1);
          v112 -= 16;
          *((_OWORD *)v129 - 1) = v131;
          v129 -= 16;
        }
        while (v112 != v124);
        v112 = (char *)*v92;
        *v92 = v129;
        *v98 = v121;
        if (!v112)
        {
          v123 = v197;
          *v95 = (uint64_t)v122;
          if ((unint64_t)v122 < v121)
            goto LABEL_185;
          goto LABEL_189;
        }
LABEL_188:
        operator delete(v112);
        v123 = v197;
        v14 = v201;
        *v95 = (uint64_t)v122;
        if ((unint64_t)v122 < v121)
        {
LABEL_185:
          *(_OWORD *)v122 = v123;
          v132 = *v98;
          v133 = v122 + 16;
          *v95 = (uint64_t)(v122 + 16);
          if ((unint64_t)(v122 + 16) < v132)
            goto LABEL_203;
          goto LABEL_206;
        }
LABEL_189:
        v134 = (char *)*v92;
        v135 = (v122 - (_BYTE *)*v92) >> 4;
        v136 = v135 + 1;
        if ((unint64_t)(v135 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v121 - (_QWORD)v134) >> 3 > v136)
          v136 = (uint64_t)(v121 - (_QWORD)v134) >> 3;
        if (v121 - (unint64_t)v134 >= 0x7FFFFFFFFFFFFFF0)
          v137 = 0xFFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          if (v137 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v138 = (char *)operator new(16 * v137);
          v14 = v201;
          v139 = &v138[16 * v135];
          v132 = (unint64_t)&v138[16 * v137];
          *(_OWORD *)v139 = v197;
          v133 = v139 + 16;
          if (v122 == v134)
          {
LABEL_204:
            *v92 = v139;
            *v98 = v132;
            goto LABEL_205;
          }
        }
        else
        {
          v139 = (char *)(16 * v135);
          v132 = 0;
          v140 = (_OWORD *)(16 * v135);
          *v140 = v123;
          v133 = (char *)(v140 + 1);
          if (v122 == v134)
            goto LABEL_204;
        }
        do
        {
          v141 = *((_OWORD *)v122 - 1);
          v122 -= 16;
          *((_OWORD *)v139 - 1) = v141;
          v139 -= 16;
        }
        while (v122 != v134);
        v122 = (char *)*v92;
        *v92 = v139;
        *v98 = v132;
        if (!v122)
        {
          *v95 = (uint64_t)v133;
          if ((unint64_t)v133 < v132)
            goto LABEL_203;
          goto LABEL_206;
        }
LABEL_205:
        operator delete(v122);
        v14 = v201;
        *v95 = (uint64_t)v133;
        if ((unint64_t)v133 < v132)
        {
LABEL_203:
          *(_OWORD *)v133 = v14;
          v142 = (char *)*v98;
          v143 = v133 + 16;
          goto LABEL_222;
        }
LABEL_206:
        v144 = (char *)*v92;
        v145 = (v133 - (_BYTE *)*v92) >> 4;
        v146 = v145 + 1;
        if ((unint64_t)(v145 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v132 - (_QWORD)v144) >> 3 > v146)
          v146 = (uint64_t)(v132 - (_QWORD)v144) >> 3;
        if (v132 - (unint64_t)v144 >= 0x7FFFFFFFFFFFFFF0)
          v147 = 0xFFFFFFFFFFFFFFFLL;
        else
          v147 = v146;
        if (v147)
        {
          if (v147 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v148 = (char *)operator new(16 * v147);
          v149 = &v148[16 * v145];
          v142 = &v148[16 * v147];
          *(_OWORD *)v149 = v201;
          v143 = v149 + 16;
          if (v133 == v144)
          {
LABEL_220:
            *v92 = v149;
            *v98 = (unint64_t)v142;
LABEL_221:
            operator delete(v133);
            goto LABEL_222;
          }
        }
        else
        {
          v149 = (char *)(16 * v145);
          v142 = 0;
          v150 = (_OWORD *)(16 * v145);
          *v150 = v14;
          v143 = (char *)(v150 + 1);
          if (v133 == v144)
            goto LABEL_220;
        }
        do
        {
          v151 = *((_OWORD *)v133 - 1);
          v133 -= 16;
          *((_OWORD *)v149 - 1) = v151;
          v149 -= 16;
        }
        while (v133 != v144);
        v133 = (char *)*v92;
        *v92 = v149;
        *v98 = (unint64_t)v142;
        if (v133)
          goto LABEL_221;
LABEL_222:
        *v95 = (uint64_t)v143;
        v152 = v193;
        *((float *)&v152 + 1) = (float)SHIDWORD(v83);
        if (v143 >= v142)
        {
          v153 = (char *)*v92;
          v154 = (v143 - (_BYTE *)*v92) >> 4;
          v155 = v154 + 1;
          if ((unint64_t)(v154 + 1) >> 60)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          if ((v142 - v153) >> 3 > v155)
            v155 = (v142 - v153) >> 3;
          if ((unint64_t)(v142 - v153) >= 0x7FFFFFFFFFFFFFF0)
            v156 = 0xFFFFFFFFFFFFFFFLL;
          else
            v156 = v155;
          if (v156)
          {
            v194 = v152;
            if (v156 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v157 = (char *)operator new(16 * v156);
            v158 = &v157[16 * v154];
            v159 = &v157[16 * v156];
            *(_OWORD *)v158 = v194;
            v7 = (uint64_t)(v158 + 16);
            if (v143 == v153)
            {
LABEL_237:
              *v92 = v158;
              *v98 = (unint64_t)v159;
LABEL_238:
              operator delete(v143);
              goto LABEL_8;
            }
          }
          else
          {
            v158 = (char *)(16 * v154);
            v159 = 0;
            *(_OWORD *)(16 * v154) = v152;
            v7 = 16 * v154 + 16;
            if (v143 == v153)
              goto LABEL_237;
          }
          do
          {
            v160 = *((_OWORD *)v143 - 1);
            v143 -= 16;
            *((_OWORD *)v158 - 1) = v160;
            v158 -= 16;
          }
          while (v143 != v153);
          v143 = (char *)*v92;
          *v92 = v158;
          *v98 = (unint64_t)v159;
          if (!v143)
            goto LABEL_8;
          goto LABEL_238;
        }
        *(_OWORD *)v143 = v152;
        v7 = (uint64_t)(v143 + 16);
LABEL_8:
        v5 = v182;
        *v95 = v7;
        v6 += 20;
        if (v6 == v183)
          goto LABEL_4;
      }
    }
  }
LABEL_239:
  v161 = 0;
  v162 = 0;
  while (*(_QWORD *)((char *)&v209 + v161) != *(_QWORD *)((char *)&v209 + v161 + 8))
  {
    v163 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 368))(*a2, a1[8]);
    if (v163)
    {
      if (v164)
      {
        v165 = v164;
        v166 = (const char *)(*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
        v167 = strlen(v166);
        if (v167 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v168 = v167;
        if (v167 >= 0x17)
        {
          v170 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v167 | 7) != 0x17)
            v170 = v167 | 7;
          v171 = v170 + 1;
          p_dst = (std::string *)operator new(v170 + 1);
          __dst.__r_.__value_.__l.__size_ = v168;
          __dst.__r_.__value_.__r.__words[2] = v171 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v167;
          p_dst = &__dst;
          if (!v167)
            goto LABEL_252;
        }
        memmove(p_dst, v166, v168);
LABEL_252:
        p_dst->__r_.__value_.__s.__data_[v168] = 0;
        HGMetalHandler::SetDebugLabel(v165, &__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        HGMetalHandler::BindBuffer((HGMetalHandler *)v165, a5);
        v172 = &a2[v162];
        HGMetalHandler::BindTexture((HGMetalTexture ***)v165, 0, (HGBitmap *)v172[21]);
        v173 = HGMetalHandler::BindTexture((HGMetalTexture ***)v165, v162, (HGBitmap *)v172[21]);
        v174 = *(void **)((char *)&v209 + v161);
        v175 = v203[v161 / 8];
        v176 = *(_QWORD *)((char *)&v209 + v161 + 8);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t, std::string *, __n128))(*a1 + 488))(a1, a2, v162, v165, v173);
        HGMetalHandler::PrimitivesDraw((uint64_t)v165, 3u, v174, (unint64_t)(v176 - (_QWORD)v174) >> 4, v175);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t, std::string *))(*a1 + 496))(a1, a2, v162, v165);
      }
    }
    ++v162;
    v161 += 24;
    if (v162 == 4)
      break;
  }
  if (__p[1])
  {
    *(void **)&v208 = __p[1];
    operator delete(__p[1]);
  }
  if (v206[0])
  {
    v206[1] = v206[0];
    operator delete(v206[0]);
  }
  if (v204[1])
  {
    *(void **)&v205 = v204[1];
    operator delete(v204[1]);
  }
  if (v203[0])
  {
    v203[1] = v203[0];
    operator delete(v203[0]);
  }
  if (*((_QWORD *)&v213 + 1))
  {
    *(_QWORD *)&v214 = *((_QWORD *)&v213 + 1);
    operator delete(*((void **)&v213 + 1));
  }
  if ((_QWORD)v212)
  {
    *((_QWORD *)&v212 + 1) = v212;
    operator delete((void *)v212);
  }
  if (*((_QWORD *)&v210 + 1))
  {
    *(_QWORD *)&v211 = *((_QWORD *)&v210 + 1);
    operator delete(*((void **)&v210 + 1));
  }
  if ((_QWORD)v209)
  {
    *((_QWORD *)&v209 + 1) = v209;
    operator delete((void *)v209);
  }
}

void sub_1B2ADEAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46)
{
  uint64_t v46;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;

  if (a35 < 0)
  {
    operator delete(__p);
    v48 = a45;
    if (!a45)
    {
LABEL_3:
      v49 = a42;
      if (!a42)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v48 = a45;
    if (!a45)
      goto LABEL_3;
  }
  operator delete(v48);
  v49 = a42;
  if (!a42)
  {
LABEL_4:
    v50 = a39;
    if (!a39)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v49);
  v50 = a39;
  if (!a39)
  {
LABEL_5:
    v51 = a36;
    if (!a36)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v50);
  v51 = a36;
  if (!a36)
  {
LABEL_6:
    v52 = *(void **)(v46 - 136);
    if (!v52)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v51);
  v52 = *(void **)(v46 - 136);
  if (!v52)
  {
LABEL_7:
    v53 = *(void **)(v46 - 160);
    if (!v53)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v46 - 128) = v52;
  operator delete(v52);
  v53 = *(void **)(v46 - 160);
  if (!v53)
  {
LABEL_8:
    v54 = *(void **)(v46 - 184);
    if (!v54)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  *(_QWORD *)(v46 - 152) = v53;
  operator delete(v53);
  v54 = *(void **)(v46 - 184);
  if (!v54)
  {
LABEL_9:
    v55 = *(void **)(v46 - 208);
    if (!v55)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  *(_QWORD *)(v46 - 176) = v54;
  operator delete(v54);
  v55 = *(void **)(v46 - 208);
  if (!v55)
LABEL_10:
    _Unwind_Resume(exception_object);
LABEL_19:
  *(_QWORD *)(v46 - 200) = v55;
  operator delete(v55);
  _Unwind_Resume(exception_object);
}

uint64_t HGTW::HGTextureWrapRepeat::RenderTile(HGNode *this, HGTile *a2)
{
  uint64_t v4;
  HGRenderer *v5;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  int *i;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  char *v37;
  char *v38[3];
  __int128 v39;

  v4 = *((_QWORD *)a2 + 42);
  v5 = *(HGRenderer **)(v4 + 152);
  Input = HGRenderer::GetInput(v5, this, 0);
  DOD = HGRenderer::GetDOD(v5, Input);
  v9 = v8;
  v10 = *(_QWORD *)a2;
  v11 = *((_QWORD *)a2 + 1);
  HGTW::HGTextureWrapRepeat::_computeRoiSegments((uint64_t)this, (int)DOD, (int)v8, (int)*(_QWORD *)a2, (int)v11, (char **)&v39);
  HGTW::HGTextureWrapRepeat::_computeRoiSegments((uint64_t)this, DOD >> 32, v9 >> 32, v10 >> 32, v11 >> 32, v38);
  v12 = v39;
  v13 = v38[0];
  v37 = v38[1];
  HGExecutionUnit::CommitStack(v4, *((_QWORD *)a2 + 2), *((int *)a2 + 6) * (*((int *)a2 + 3) - (uint64_t)*((int *)a2 + 1)));
  if ((_QWORD)v12 != *((_QWORD *)&v12 + 1) && v13 != v37)
  {
    for (i = (int *)v12; i != *((int **)&v12 + 1); i += 5)
    {
      v15 = v13;
      do
      {
        v16 = HGRectMake4i(i[2], *((_DWORD *)v15 + 2), i[3], *((_DWORD *)v15 + 3));
        *((_QWORD *)a2 + 26) = v16;
        *((_QWORD *)a2 + 27) = v17;
        *(_QWORD *)&v39 = 0;
        DWORD2(v39) = 0;
        HGRenderer::RenderInput((uint64_t)v5, v4, (uint64_t)this, 0, (uint64_t)&v39, v16, v17, 0);
        *((_OWORD *)a2 + 5) = v39;
        if (*((_BYTE *)i + 16))
        {
          v18 = i[2];
          v19 = 1;
          v20 = *((int *)a2 + 22);
          if (!v15[16])
            goto LABEL_12;
        }
        else
        {
          v18 = i[3] - 1;
          v19 = -1;
          v20 = *((int *)a2 + 22);
          if (!v15[16])
          {
LABEL_12:
            v21 = *((_DWORD *)v15 + 3) - 1;
            v22 = -1;
            v23 = *((_DWORD *)v15 + 1);
            v24 = *(int *)v15;
            if ((int)v24 >= v23)
              goto LABEL_6;
            goto LABEL_13;
          }
        }
        v21 = *((_DWORD *)v15 + 2);
        v22 = 1;
        v23 = *((_DWORD *)v15 + 1);
        v24 = *(int *)v15;
        if ((int)v24 >= v23)
          goto LABEL_6;
LABEL_13:
        LODWORD(v25) = i[1];
        if (*i < (int)v25)
        {
          v26 = *((int *)a2 + 6);
          v27 = v21;
          v28 = 16 * (v24 - *((int *)a2 + 1)) * v26 - 16 * *(int *)a2;
          v29 = 16 * v26;
          v30 = 16 * (v27 - *((int *)a2 + 53)) * v20 + 16 * v18 - 16 * *((int *)a2 + 52);
          v31 = 16 * v22 * (uint64_t)(int)v20;
          v32 = 16 * v19;
          do
          {
            v33 = *i;
            if ((int)v33 < (int)v25)
            {
              v34 = *((_QWORD *)a2 + 2) + v28;
              v35 = (_OWORD *)(*((_QWORD *)a2 + 10) + v30);
              do
              {
                *(_OWORD *)(v34 + 16 * v33++) = *v35;
                v25 = i[1];
                v35 = (_OWORD *)((char *)v35 + v32);
              }
              while (v33 < v25);
              v23 = *((_DWORD *)v15 + 1);
            }
            ++v24;
            v28 += v29;
            v30 += v31;
          }
          while (v24 < v23);
        }
LABEL_6:
        v15 += 20;
      }
      while (v15 != v37);
    }
  }
  if (v13)
    operator delete(v13);
  if ((_QWORD)v12)
    operator delete((void *)v12);
  return 0;
}

void sub_1B2ADEF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::pair<std::vector<HGTW::HGTextureWrapRepeat::Segment>,std::vector<HGTW::HGTextureWrapRepeat::Segment>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2ADEF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B2ADEF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::pair<std::vector<HGTW::HGTextureWrapRepeat::Segment>,std::vector<HGTW::HGTextureWrapRepeat::Segment>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2ADEF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::pair<std::vector<HGTW::HGTextureWrapRepeat::Segment>,std::vector<HGTW::HGTextureWrapRepeat::Segment>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HGTW::HGTextureWrapRepeat::_computeRoiSegments@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  _BOOL4 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  char **v49;

  v6 = a6;
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v7 = a3 - a2;
  v8 = (a4 - a2) % (a3 - a2);
  v9 = (a5 - a2) % (a3 - a2);
  v10 = (v8 >> 63) + (a4 - a2) / (a3 - a2);
  v11 = (v9 >> 63) + (a5 - a2) / (a3 - a2);
  if (v10 <= v11)
  {
    v12 = 0;
    v13 = ((v8 >> 63) & v7) + v8;
    v14 = ((v9 >> 63) & v7) + v9;
    v15 = v14 + a2;
    v16 = a3 + a2;
    v17 = v10;
    v46 = this;
    v47 = a2;
    v48 = a3;
    v49 = v6;
    v44 = v10;
    v45 = a3 - a2;
    v42 = v13;
    v43 = (v9 >> 63) + (a5 - a2) / (a3 - a2);
    v40 = v14 + a2;
    v41 = v14;
    v39 = a3 + a2;
    do
    {
      while (1)
      {
        v18 = v17 * v7 + a2;
        v19 = v17 == v10 ? v13 : 0;
        v20 = v18 + v19;
        v21 = v19 + a2;
        v22 = v18 + v14;
        v23 = (v17 & 1) == 0 || *(_BYTE *)(this + 449) == 0;
        v24 = v23;
        v25 = v17 == v11 ? v15 : a3;
        v26 = v17 == v11 ? v22 : v17 * v7 + a3;
        v27 = v24 ? v21 : v16 - v25;
        v28 = v24 ? v25 : v16 - v21;
        v29 = (unint64_t)v6[2];
        if ((unint64_t)v12 >= v29)
          break;
        *(_DWORD *)v12 = v20;
        *((_DWORD *)v12 + 1) = v26;
        *((_DWORD *)v12 + 2) = v27;
        *((_DWORD *)v12 + 3) = v28;
        v12[16] = v24;
        *(_WORD *)(v12 + 17) = 0;
        v12[19] = 0;
        v6[1] = v12 + 20;
        v12 += 20;
        v23 = v17++ == v11;
        if (v23)
          return this;
      }
      v30 = *v6;
      v31 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - v30) >> 2) + 1;
      if (v31 > 0xCCCCCCCCCCCCCCCLL)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v29 - (_QWORD)v30) >> 2);
      if (2 * v32 > v31)
        v31 = 2 * v32;
      if (v32 >= 0x666666666666666)
        v33 = 0xCCCCCCCCCCCCCCCLL;
      else
        v33 = v31;
      if (v33)
      {
        if (v33 > 0xCCCCCCCCCCCCCCCLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v34 = (char *)operator new(20 * v33);
      }
      else
      {
        v34 = 0;
      }
      v35 = &v34[4 * ((v12 - v30) >> 2)];
      *(_DWORD *)v35 = v20;
      *((_DWORD *)v35 + 1) = v26;
      *((_DWORD *)v35 + 2) = v27;
      *((_DWORD *)v35 + 3) = v28;
      v35[16] = v24;
      *(_WORD *)(v35 + 17) = 0;
      v35[19] = 0;
      v36 = v35;
      if (v12 == v30)
      {
        v6 = v49;
        v38 = v35 + 20;
        *v49 = v35;
        v49[1] = v35 + 20;
        v49[2] = &v34[20 * v33];
        if (!v12)
          goto LABEL_41;
      }
      else
      {
        do
        {
          v37 = *(_OWORD *)(v12 - 20);
          *((_DWORD *)v36 - 1) = *((_DWORD *)v12 - 1);
          *(_OWORD *)(v36 - 20) = v37;
          v36 -= 20;
          v12 -= 20;
        }
        while (v12 != v30);
        v6 = v49;
        v12 = *v49;
        v38 = v35 + 20;
        *v49 = v36;
        v49[1] = v35 + 20;
        v49[2] = &v34[20 * v33];
        if (!v12)
          goto LABEL_41;
      }
      operator delete(v12);
LABEL_41:
      LODWORD(a2) = v47;
      LODWORD(a3) = v48;
      LODWORD(v7) = v45;
      this = v46;
      v11 = v43;
      v10 = v44;
      v14 = v41;
      LODWORD(v13) = v42;
      v16 = v39;
      v15 = v40;
      v6[1] = v38;
      v12 = v38;
      v23 = v17++ == v43;
    }
    while (!v23);
  }
  return this;
}

void sub_1B2ADF210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;

  if (v20)
  {
    *(_QWORD *)(a20 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void HGTW::HGTextureWrapRepeat::_buildRoiSegments(uint64_t a1@<X0>, int **a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  int *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *a2;
  v6 = 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2);
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      v7 = *((_QWORD *)v5 + 1);
      v8 = operator new(8uLL);
      *a4 = v8;
      *v8 = v7;
      v9 = v8 + 1;
LABEL_23:
      a4[1] = v9;
      a4[2] = v9;
      return;
    }
    if (v6 < 3)
      return;
    v14 = v5[2];
    v15 = v5[3];
    v17 = v5[7];
    v16 = v5[8];
    if ((int)v17 >= (int)v14)
      v18 = v14;
    else
      v18 = v17;
    if ((int)v15 <= (int)v16)
      v10 = v16;
    else
      v10 = v15;
LABEL_22:
    v19 = operator new(8uLL);
    *a4 = v19;
    *v19 = v18 | (v10 << 32);
    v9 = v19 + 1;
    goto LABEL_23;
  }
  if (*(_BYTE *)(a1 + 449) || (a3 & 1) == 0)
  {
    v12 = v5[2];
    LODWORD(v10) = v5[3];
    v11 = v5[7];
    v13 = v5[8];
    goto LABEL_16;
  }
  LODWORD(v10) = v5[3];
  v11 = v5[7];
  if ((int)v10 >= v11)
  {
    v13 = v5[8];
    v12 = v5[2];
    if (v13 < v12)
      goto LABEL_26;
LABEL_16:
    if (v11 >= v12)
      v18 = v12;
    else
      v18 = v11;
    if ((int)v10 <= v13)
      v10 = v13;
    else
      v10 = v10;
    goto LABEL_22;
  }
  v12 = v5[2];
  v13 = v5[8];
LABEL_26:
  v20 = 2;
  if (v11 < v12)
    v20 = 7;
  v21 = 3;
  if (v13 < (int)v10)
    v21 = 8;
  v22 = v5[v20];
  v23 = v5[v21];
  v24 = operator new(8uLL);
  *v24 = v22 | (v23 << 32);
  a4[1] = v24 + 1;
  a4[2] = v24 + 1;
  *a4 = v24;
  v25 = operator new(0x10uLL);
  if ((int)v10 <= v13)
    v26 = v13;
  else
    v26 = v10;
  if (v12 <= v11)
    v27 = v11;
  else
    v27 = v12;
  v28 = v25 + 2;
  *v25 = *v24;
  v25[1] = v27 | (v26 << 32);
  v29 = *a4;
  *a4 = v25;
  a4[1] = v25 + 2;
  a4[2] = v25 + 2;
  if (v29)
    operator delete(v29);
  a4[1] = v28;
}

void sub_1B2ADF3EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HGTextureWrap::SetTextureWrapMode(uint64_t a1, const char *a2, char *a3)
{
  char *WrapNode;
  char *v5;

  *(_DWORD *)(a1 + 416) = (_DWORD)a2;
  WrapNode = HGTextureWrap::_createWrapNode(a1, a2, a3);
  v5 = *(char **)(a1 + 408);
  if (v5 == WrapNode)
  {
    (*(void (**)(char *))(*(_QWORD *)WrapNode + 24))(WrapNode);
    WrapNode = *(char **)(a1 + 408);
  }
  else
  {
    if (v5)
      (*(void (**)(char *))(*(_QWORD *)v5 + 24))(v5);
    *(_QWORD *)(a1 + 408) = WrapNode;
  }
  return (*(uint64_t (**)(char *, uint64_t, float, float, float, float))(*(_QWORD *)WrapNode + 96))(WrapNode, 2, *(float *)(a1 + 420), *(float *)(a1 + 424), *(float *)(a1 + 428), *(float *)(a1 + 432));
}

void sub_1B2ADF48C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void HGTextureWrap::HGTextureWrap(HGTextureWrap *this)
{
  uint64_t v1;
  char *v2;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v1 = off_1E652F908;
  *(_QWORD *)(v1 + 408) = 0;
  *(_DWORD *)(v1 + 416) = 0;
  *(_OWORD *)(v1 + 436) = HGRectInfinite;
  *(_BYTE *)(v1 + 452) = 0;
  *(_QWORD *)(v1 + 428) = 0;
  *(_QWORD *)(v1 + 420) = 0;
  HGTextureWrap::SetTextureWrapMode(v1, 0, v2);
}

void sub_1B2ADF518(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 408);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HGTextureWrap::~HGTextureWrap(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E652F908;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E652F908;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGNode::~HGNode(this);
  HGObject::operator delete(v3);
}

uint64_t HGTextureWrap::SetParameter(HGTextureWrap *this, int a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  switch(a2)
  {
    case 2:
      v8 = (uint64_t *)((char *)this + 436);
      v9 = HGRectMake4i((int)a3, (int)a4, (int)a5, (int)a6);
      v11 = v10;
      if (HGRectIsEqual(*v8, v8[1], v9, v10))
        return 0;
      *v8 = v9;
      v8[1] = v11;
      return 1;
    case 1:
      *((float *)this + 105) = a3;
      *((float *)this + 106) = a4;
      *((float *)this + 107) = a5;
      *((float *)this + 108) = a6;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 2);
    case 0:
      return HGTextureWrap::SetTextureWrapMode((uint64_t)this, (const char *)a3, a7);
    default:
      return 0;
  }
}

uint64_t HGTextureWrap::SetTextureBorderColor(HGTextureWrap *this, float *a2)
{
  *((float *)this + 105) = *a2;
  *((float *)this + 106) = a2[1];
  *((float *)this + 107) = a2[2];
  *((float *)this + 108) = a2[3];
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 2);
}

uint64_t HGTextureWrap::SetCropRect(HGTextureWrap *this, const HGRect *a2)
{
  HGRect *v3;

  v3 = (HGRect *)((char *)this + 436);
  if (HGRectIsEqual(*(_QWORD *)((char *)this + 436), *(_QWORD *)((char *)this + 444), *(_QWORD *)&a2->var0, *(_QWORD *)&a2->var2))
  {
    return 0;
  }
  *v3 = *a2;
  return 1;
}

char *HGTextureWrap::_createWrapNode(uint64_t a1, const char *a2, char *a3)
{
  char *v3;
  char *result;
  char *v5;
  char *v6;
  char *v7;

  switch((int)a2)
  {
    case 0:
      v3 = (char *)HGObject::operator new(0x1D0uLL);
      HGNode::HGNode((HGNode *)v3);
      *(_QWORD *)v3 = off_1E652F468;
      *(_OWORD *)(v3 + 408) = HGRectInfinite;
      *((_QWORD *)v3 + 54) = 0;
      *((_QWORD *)v3 + 55) = 0;
      v3[448] = 0;
      *((_DWORD *)v3 + 4) |= 0x600u;
      HGNode::SetFlags((HGNode *)v3, 0, 0x2000);
      goto LABEL_3;
    case 1:
      v3 = (char *)HGObject::operator new(0x1D0uLL);
      HgcTextureWrapClampToEdge::HgcTextureWrapClampToEdge((HgcTextureWrapClampToEdge *)v3);
      *(_QWORD *)v3 = off_1E652F218;
      *((_OWORD *)v3 + 26) = HGRectInfinite;
      v3[432] = 0;
      *((_DWORD *)v3 + 4) |= 0x20u;
      HGNode::SetFlags((HGNode *)v3, 0, 0x2000);
      HGNode::SetParameter((HGNode *)v3, 0, 0.0, 0.0, 0.0, 0.0, v5);
      HGNode::SetParameter((HGNode *)v3, 1, 0.0, 0.0, 0.0, 0.0, v6);
      goto LABEL_3;
    case 2:
      v7 = (char *)HGObject::operator new(0x1D0uLL);
      HGNode::HGNode((HGNode *)v7);
      *(_QWORD *)v7 = off_1E652F6B8;
      *(_OWORD *)(v7 + 408) = HGRectInfinite;
      *((_WORD *)v7 + 224) = 257;
      *(_OWORD *)(v7 + 424) = xmmword_1B30530B0;
      *((_QWORD *)v7 + 55) = 0;
      HGNode::SetFlags((HGNode *)v7, 0, 16);
      (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)v7 + 136))(v7, 0, 32);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v7 + 136))(v7, 0xFFFFFFFFLL, 32);
      goto LABEL_7;
    case 3:
      v7 = (char *)HGObject::operator new(0x1D0uLL);
      HGNode::HGNode((HGNode *)v7);
      *(_QWORD *)v7 = off_1E652F6B8;
      *(_OWORD *)(v7 + 408) = HGRectInfinite;
      *((_WORD *)v7 + 224) = 1;
      *(_OWORD *)(v7 + 424) = xmmword_1B30530B0;
      *((_QWORD *)v7 + 55) = 0;
      HGNode::SetFlags((HGNode *)v7, 0, 16);
      (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)v7 + 136))(v7, 0, 32);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v7 + 136))(v7, 0xFFFFFFFFLL, 32);
LABEL_7:
      *((_DWORD *)v7 + 4) |= 0x600u;
      result = v7;
      break;
    default:
      HGLogger::warning((HGLogger *)"HGTextureWrap -- invalid mode", a2, a3);
      v3 = (char *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode((HGNode *)v3);
LABEL_3:
      result = v3;
      break;
  }
  return result;
}

void sub_1B2ADF98C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ADF9A0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ADF9B4(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ADF9C8(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ADF9DC(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HGNode::~HGNode(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B2ADFA10(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v3;

  HgcTextureWrapClampToEdge::~HgcTextureWrapClampToEdge(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t HGTextureWrap::GetTextureWrapMode(HGTextureWrap *this)
{
  return *((unsigned int *)this + 104);
}

float HGTextureWrap::GetTextureBorderColor(HGTextureWrap *this, float *a2)
{
  float result;

  *a2 = *((float *)this + 105);
  a2[1] = *((float *)this + 106);
  a2[2] = *((float *)this + 107);
  result = *((float *)this + 108);
  a2[3] = result;
  return result;
}

HGNode *HGTextureWrap::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  uint64_t v5;
  char *v6;
  char *v7;
  __n128 v8;
  __n128 v9;
  HGRect v11;

  Input = HGRenderer::GetInput(a2, this, 0);
  *(_QWORD *)&v11.var0 = HGRenderer::GetDOD(a2, Input);
  *(_QWORD *)&v11.var2 = v5;
  if (!HGRect::IsInfinite(&v11))
  {
    (*(void (**)(_QWORD, _QWORD, HGNode *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 0, Input);
    HGNode::SetOutputFormatComponents(*((const char **)this + 51), (const char *)*((unsigned int *)this + 8), v6);
    HGNode::SetSupportedFormatPrecisions(*((HGNode **)this + 51), (const char *)*((unsigned int *)this + 9), v7);
    (*(void (**)(_QWORD, _QWORD, float, float, float, float))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 0, (float)*((int *)this + 109), (float)*((int *)this + 110), (float)*((int *)this + 111), (float)*((int *)this + 112));
    v8.n128_u32[0] = 1.0;
    v9.n128_u32[0] = 0;
    if (!*((_BYTE *)this + 452))
      v8.n128_f32[0] = 0.0;
    (*(void (**)(_QWORD, uint64_t, __n128, __n128, float, float))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 1, v8, v9, 0.0, 0.0);
    return (HGNode *)*((_QWORD *)this + 51);
  }
  return Input;
}

const char *HGTW::HGTextureWrapClampToEdge::label_A(HGTW::HGTextureWrapClampToEdge *this)
{
  return "HGTextureWrapClampToEdge";
}

uint64_t HGTW::HGTextureWrapClampToEdge::CanBypassTiling(HGTW::HGTextureWrapClampToEdge *this, HGRenderer *a2)
{
  return 1;
}

const char *HGTW::HGTextureWrapClampToColor::label_A(HGTW::HGTextureWrapClampToColor *this)
{
  return "HGTextureWrapClampToColor";
}

const char *HGTW::HGTextureWrapRepeat::label_A(HGTW::HGTextureWrapRepeat *this)
{
  return "HGTextureWrapRepeat";
}

const char *HGTW::HGTextureWrapRepeat::label_B(HGTW::HGTextureWrapRepeat *this)
{
  if (*((_BYTE *)this + 449))
    return "(mirror)";
  else
    return "(repeat)";
}

void HGNodeBuffer::ReadTile(HGNodeBuffer *this, char *a2, HGRect a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  v5 = *((_QWORD *)this + 17);
  v6 = *(_DWORD *)(v5 + 36);
  v7 = *(_DWORD *)(v5 + 112);
  HGExecutionUnit::RenderTile(v5, a2, *(unint64_t *)&a3.var0, *(unint64_t *)&a3.var2, *((_QWORD *)this + 16), a4);
  v8 = *((_QWORD *)this + 17);
  *(_DWORD *)(v8 + 36) = v6;
  *(_DWORD *)(v8 + 112) = v7;
}

void HGXForm::HGXForm(HGXForm *this)
{
  _QWORD *v2;
  HGTransform *v3;
  HGTransform *v4;
  HGTransform *v5;
  HGTransformUtils *v6;
  int v7;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E652FC20;
  v3 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v3);
  *((_QWORD *)this + 51) = v3;
  v4 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v4);
  *((_QWORD *)this + 52) = v4;
  v5 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v5);
  *((_QWORD *)this + 53) = v5;
  *((_DWORD *)this + 108) = 1;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = this;
  *((_QWORD *)this + 57) = this;
  *((_QWORD *)this + 58) = 1065353216;
  *((_QWORD *)this + 59) = 0;
  *(_OWORD *)((char *)this + 484) = xmmword_1B30520F0;
  *(_QWORD *)((char *)this + 500) = 1098907648;
  *((_DWORD *)this + 127) = 3;
  *((_BYTE *)this + 512) = 0;
  *((float *)this + 129) = HGTransformUtils::MinW(v6);
  *((_DWORD *)this + 130) = 0;
  v7 = *((_DWORD *)this + 4) | 0x600;
  *((_DWORD *)this + 3) = 1481003597;
  *((_DWORD *)this + 4) = v7;
}

void sub_1B2ADFCB0(_Unwind_Exception *a1)
{
  HGNode *v1;
  void *v2;
  void *v3;

  v3 = v2;
  HGObject::operator delete(v3);
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ADFCD8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGXForm::~HGXForm(HGXForm *this)
{
  HGXForm *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E652FC20;
  v2 = (HGXForm *)*((_QWORD *)this + 56);
  if (v2 != this)
  {
    (*(void (**)(HGXForm *))(*(_QWORD *)v2 + 24))(v2);
    *((_QWORD *)this + 56) = this;
  }
  v3 = *((_QWORD *)this + 51);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    *((_QWORD *)this + 51) = 0;
  }
  v4 = *((_QWORD *)this + 52);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    *((_QWORD *)this + 52) = 0;
  }
  v5 = *((_QWORD *)this + 53);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    *((_QWORD *)this + 53) = 0;
  }
  HGNode::~HGNode((HGNode *)this);
}

{
  HGXForm *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = off_1E652FC20;
  v2 = (HGXForm *)*((_QWORD *)this + 56);
  if (v2 != this)
  {
    (*(void (**)(HGXForm *))(*(_QWORD *)v2 + 24))(v2);
    *((_QWORD *)this + 56) = this;
  }
  v3 = *((_QWORD *)this + 51);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    *((_QWORD *)this + 51) = 0;
  }
  v4 = *((_QWORD *)this + 52);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    *((_QWORD *)this + 52) = 0;
  }
  v5 = *((_QWORD *)this + 53);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    *((_QWORD *)this + 53) = 0;
  }
  HGNode::~HGNode((HGNode *)this);
  HGObject::operator delete(v6);
}

uint64_t HGXForm::info@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (a2 < 1)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  else
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 584))(result);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 272))(v7);
    return HGLoggerUtils::matrixPrettyString(v8, 4, 4, a3, a4);
  }
  return result;
}

uint64_t HGXForm::SupportsInplaceHardwareBlending(HGXForm *this, float a2)
{
  return 1;
}

uint64_t HGXForm::QueueNode(HGXForm *this, HGNode *a2)
{
  uint64_t result;

  if (*((HGXForm **)this + 56) == this)
  {
    result = (*(uint64_t (**)(HGNode *, _QWORD, _QWORD))(*(_QWORD *)a2 + 120))(a2, 0, *((_QWORD *)this + 55));
  }
  else
  {
    (*(void (**)(HGNode *, _QWORD))(*(_QWORD *)a2 + 120))(a2, 0);
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 56) + 24))(*((_QWORD *)this + 56));
  }
  *((_QWORD *)this + 56) = a2;
  return result;
}

uint64_t HGXForm::SupportsEarlyConcatenation(HGXForm *this)
{
  return 1;
}

uint64_t HGXForm::AttemptEarlyConcatenation(HGXForm *this, HGNode *a2)
{
  uint64_t result;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  HGTransform *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  result = (*(uint64_t (**)(HGNode *, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
  if (*((_DWORD *)a2 + 3) == *((_DWORD *)this + 3) && result != 0)
  {
    v6 = result;
    v7 = *((float *)a2 + 126);
    v8 = *((float *)this + 126);
    if (v7 == 0.0 || v8 == 0.0)
    {
      if (v7 != 0.0
        || v8 != 0.0
        || *((_DWORD *)a2 + 108) < *((_DWORD *)this + 108)
        || *((float *)a2 + 116) != *((float *)this + 116)
        || *((_DWORD *)a2 + 117) != *((_DWORD *)this + 117)
        || *((float *)a2 + 121) != *((float *)this + 121)
        || *((float *)a2 + 122) != *((float *)this + 122))
      {
        return result;
      }
    }
    else
    {
      if (*((_DWORD *)a2 + 108) < *((_DWORD *)this + 108))
        return result;
      if (v7 < v8)
        return result;
      v9 = *((float *)a2 + 123);
      v10 = *((float *)this + 123);
      if ((float)(*((float *)a2 + 124) - v9) > (float)(*((float *)this + 124) - v10)
        || (float)(*((float *)a2 + 125) - v9) < (float)(*((float *)this + 125) - v10)
        || *((_DWORD *)a2 + 127) < *((_DWORD *)this + 127))
      {
        return result;
      }
    }
    v11 = (HGTransform *)HGObject::operator new(0x90uLL);
    HGTransform::HGTransform(v11);
    v12 = (*(uint64_t (**)(HGXForm *))(*(_QWORD *)this + 584))(this);
    (*(void (**)(HGTransform *, uint64_t))(*(_QWORD *)v11 + 96))(v11, v12);
    v13 = (*(uint64_t (**)(HGNode *))(*(_QWORD *)a2 + 584))(a2);
    (*(void (**)(HGTransform *, uint64_t))(*(_QWORD *)v11 + 200))(v11, v13);
    (*(void (**)(HGXForm *, _QWORD, uint64_t))(*(_QWORD *)this + 120))(this, 0, v6);
    (*(void (**)(HGXForm *, HGTransform *))(*(_QWORD *)this + 576))(this, v11);
    (*(void (**)(HGXForm *, float))(*(_QWORD *)this + 608))(this, *((float *)a2 + 123) + *((float *)this + 123));
    result = (*(uint64_t (**)(HGTransform *))(*(_QWORD *)v11 + 24))(v11);
    v14 = *((_DWORD *)a2 + 130);
    if (v14 <= *((_DWORD *)this + 130))
      v14 = *((_DWORD *)this + 130);
    *((_DWORD *)this + 130) = v14;
  }
  return result;
}

void sub_1B2AE0124(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

HGXForm *HGXForm::GetOutput(HGXForm *this, HGRenderer *a2)
{
  HGXForm *v4;
  void *Input;
  HGXForm *v6;
  HGTransform *v7;
  HGNode *v8;
  unsigned int v9;
  HGNode *v10;
  HGNode *v11;
  float v12;
  float v13;
  HGTransform *v14;
  HGNode *v15;
  unsigned int v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  __n128 v21;
  __n128 v22;
  uint64_t v24;
  const char *v25;
  char *v26;
  __n128 v27;
  double v28;
  double v29;
  unsigned __int8 v30;
  double v31;
  int v32;
  double v33;
  char v34;
  const char *v35;
  char *v36;
  unsigned __int8 v37;
  int v38;
  float v39;
  unsigned int i;
  unsigned int j;
  int v42;
  HGXForm *v43;
  int v44;
  int v45;
  int v46;
  double v47;
  double v48;
  HGXForm *v49;
  HGBlur *v50;
  float v51;
  float v52;
  int v53;
  float v54;
  int v55;
  float v56;
  double v57;
  double v58;
  unsigned int v59;
  double v60;
  double v61;
  double v62;
  unsigned int v63;
  double v64;
  int v65;
  int v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  unsigned __int8 v72;
  HGAnisotropicXForm *v73;
  float v74;
  float v75;
  HGConvolution *v76;
  HGXForm *v77;
  int v78;
  int v79;
  float v80;
  float v81[36];
  float v82[36];
  float v83[4];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 108) = (*(uint64_t (**)(HGXForm *))(*(_QWORD *)this + 312))(this);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 52) + 96))(*((_QWORD *)this + 52), *((_QWORD *)this + 51));
  v4 = (HGXForm *)*((_QWORD *)this + 56);
  if (v4 != this)
  {
    (*(void (**)(HGXForm *))(*(_QWORD *)v4 + 24))(v4);
    *((_QWORD *)this + 56) = this;
  }
  Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  *((_QWORD *)this + 55) = Input;
  *((_DWORD *)this + 4) &= ~0x10u;
  *((_QWORD *)this + 59) = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 52) + 184))(*((_QWORD *)this + 52));
  if (!Input)
    goto LABEL_22;
  if (*((_DWORD *)Input + 3) == *((_DWORD *)this + 3)
    && HGRenderer::IsMergeable(a2, (HGNode *)this, 0, 0)
    && *((float *)Input + 123) == 0.0
    && *((float *)Input + 124) == 0.0)
  {
    v6 = (HGXForm *)HGObject::operator new(0x210uLL);
    HGXForm::HGXForm(v6);
    v7 = (HGTransform *)HGObject::operator new(0x90uLL);
    HGTransform::HGTransform(v7);
    (*(void (**)(HGTransform *, _QWORD))(*(_QWORD *)v7 + 96))(v7, *((_QWORD *)this + 52));
    (*(void (**)(HGTransform *, _QWORD))(*(_QWORD *)v7 + 200))(v7, *((_QWORD *)Input + 52));
    v8 = HGRenderer::GetInput(a2, (HGNode *)Input, 0);
    (*(void (**)(HGXForm *, _QWORD, HGNode *))(*(_QWORD *)v6 + 120))(v6, 0, v8);
    (*(void (**)(HGXForm *, HGTransform *))(*(_QWORD *)v6 + 576))(v6, v7);
    (*(void (**)(HGXForm *, _QWORD))(*(_QWORD *)v6 + 160))(v6, *((unsigned int *)this + 108));
    (*(void (**)(HGXForm *, _QWORD, float))(*(_QWORD *)v6 + 592))(v6, *((unsigned int *)this + 117), *((float *)this + 116));
    (*(void (**)(HGXForm *, _QWORD, float, float, float, float))(*(_QWORD *)v6 + 96))(v6, 0, *((float *)this + 123), *((float *)this + 124), *((float *)this + 125), *((float *)this + 126));
    v9 = *((_DWORD *)this + 130);
    if ((signed int)v9 <= *((_DWORD *)Input + 130))
      v9 = *((_DWORD *)Input + 130);
    (*(void (**)(HGXForm *, uint64_t, float, float, float, float))(*(_QWORD *)v6 + 96))(v6, 1, (float)v9, 0.0, 0.0, 0.0);
    (*(void (**)(HGXForm *, _QWORD))(*(_QWORD *)v6 + 640))(v6, *((unsigned int *)this + 127));
    *((_QWORD *)this + 56) = v6;
    (*(void (**)(HGTransform *))(*(_QWORD *)v7 + 24))(v7);
    return v6;
  }
  if (!v10 || (v11 = v10, !HGRenderer::IsMergeable(a2, (HGNode *)this, 0, 0)))
  {
LABEL_22:
    (*(void (**)(_QWORD))(**((_QWORD **)this + 52) + 184))(*((_QWORD *)this + 52));
    v17 = *((float *)this + 123);
    if (v17 == 0.0)
    {
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 52) + 224))(*((_QWORD *)this + 52)))
        return (HGXForm *)Input;
      v17 = *((float *)this + 123);
    }
    if (v17 == 0.0
      && (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 52) + 240))(*((_QWORD *)this + 52)))
    {
      v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 52) + 272))(*((_QWORD *)this + 52));
      Input = HGObject::operator new(0x1B0uLL);
      HGFlipAndOffset::HGFlipAndOffset((HGFlipAndOffset *)Input);
      (*(void (**)(void *, _QWORD))(*(_QWORD *)Input + 160))(Input, *((unsigned int *)this + 108));
      v19 = *(double *)(v18 + 96);
      v20 = *(double *)(v18 + 104);
      (*(void (**)(void *, _QWORD, float, float, float, float))(*(_QWORD *)Input + 96))(Input, 0, v19, v20, 0.0, 0.0);
      v21.n128_u64[0] = *(_QWORD *)v18;
      v22.n128_u64[0] = -1.0;
      if (*(double *)v18 == -1.0)
        v21.n128_f32[0] = 1.0;
      else
        v21.n128_f32[0] = 0.0;
      if (*(double *)(v18 + 40) == -1.0)
        v22.n128_f32[0] = 1.0;
      else
        v22.n128_f32[0] = 0.0;
      (*(void (**)(void *, uint64_t, __n128, __n128, float, float))(*(_QWORD *)Input + 96))(Input, 1, v21, v22, 0.0, 0.0);
      (*(void (**)(void *, uint64_t, float, float, float, float))(*(_QWORD *)Input + 96))(Input, 2, (float)*((unsigned int *)this + 130), 0.0, 0.0, 0.0);
      if (*((HGXForm **)this + 56) == this)
        goto LABEL_34;
      goto LABEL_37;
    }
    if (*((float *)this + 126) > 0.0)
    {
      Input = HGObject::operator new(0x1F0uLL);
      HGAnisotropicXForm::HGAnisotropicXForm((HGAnisotropicXForm *)Input);
      (*(void (**)(void *, _QWORD))(*(_QWORD *)Input + 576))(Input, *((_QWORD *)this + 51));
      (*(void (**)(void *, _QWORD))(*(_QWORD *)Input + 160))(Input, *((unsigned int *)this + 108));
      (*(void (**)(void *, _QWORD))(*(_QWORD *)Input + 592))(Input, *((unsigned int *)this + 127));
      (*(void (**)(void *, _QWORD, float, float, float, float))(*(_QWORD *)Input + 96))(Input, 0, *((float *)this + 123), *((float *)this + 124), *((float *)this + 125), *((float *)this + 126));
      (*(void (**)(void *, uint64_t, float, float, float, float))(*(_QWORD *)Input + 96))(Input, 1, (float)*((unsigned int *)this + 130), 0.0, 0.0, 0.0);
      if (*((HGXForm **)this + 56) == this)
      {
LABEL_34:
        (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)Input + 120))(Input, 0, *((_QWORD *)this + 55));
        *((_QWORD *)this + 56) = Input;
        return (HGXForm *)Input;
      }
LABEL_37:
      (*(void (**)(void *, _QWORD))(*(_QWORD *)Input + 120))(Input, 0);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 56) + 24))(*((_QWORD *)this + 56));
      *((_QWORD *)this + 56) = Input;
      return (HGXForm *)Input;
    }
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 53) + 96))(*((_QWORD *)this + 53), *((_QWORD *)this + 52));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 53) + 168))(*((_QWORD *)this + 53));
    v83[0] = 0.0;
    v80 = 0.0;
    v24 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 53) + 272))(*((_QWORD *)this + 53));
    v27.n128_u64[0] = *(_QWORD *)(v24 + 8);
    if (v27.n128_f64[0] != 0.0)
      goto LABEL_50;
    v27.n128_u64[0] = *(_QWORD *)(v24 + 16);
    if (v27.n128_f64[0] != 0.0)
      goto LABEL_50;
    v27.n128_u64[0] = *(_QWORD *)(v24 + 24);
    if (v27.n128_f64[0] == 0.0
      && (v27.n128_u64[0] = *(_QWORD *)(v24 + 32), v27.n128_f64[0] == 0.0)
      && (v27.n128_u64[0] = *(_QWORD *)(v24 + 48), v27.n128_f64[0] == 0.0)
      && (v27.n128_u64[0] = *(_QWORD *)(v24 + 56), v27.n128_f64[0] == 0.0)
      && (v27.n128_u64[0] = *(_QWORD *)(v24 + 64), v27.n128_f64[0] == 0.0)
      && (v27.n128_u64[0] = *(_QWORD *)(v24 + 72), v27.n128_f64[0] == 0.0)
      && (v27.n128_u64[0] = *(_QWORD *)(v24 + 88), v27.n128_f64[0] == 0.0))
    {
      v28 = *(double *)(v24 + 120);
      if (v28 == 0.0)
      {
        v27.n128_u64[0] = 0x7FF0000000000000;
        v29 = INFINITY;
      }
      else
      {
        v27.n128_f64[0] = *(double *)v24 / v28;
        v29 = *(double *)(v24 + 40) / v28;
      }
      v31 = fabs(v27.n128_f64[0]);
      v33 = fabs(v29);
      v72 = atomic_load(HGLogger::_enabled);
      v32 = 1;
      if ((v72 & 1) != 0)
        HGLogger::log((HGLogger *)"xform", (const char *)1, (HGLogger *)"scalex=%.3f, scaley=%.3f (accurate)\n", v25, v26, *(_QWORD *)&v31, *(_QWORD *)&v33);
    }
    else
    {
LABEL_50:
      v30 = atomic_load(HGLogger::_enabled);
      v31 = 0.0;
      if ((v30 & 1) != 0)
        HGLogger::log((HGLogger *)"xform", (const char *)1, (HGLogger *)"scalex=%.3f, scaley=%.3f (using l_EQX and l_EQY)\n", v25, v26, 0, 0);
      v32 = 0;
      v33 = 0.0;
    }
    v27.n128_u32[0] = *((_DWORD *)this + 116);
    if (v27.n128_f32[0] > 0.0)
    {
      v34 = v32 ^ 1;
      if (*((_DWORD *)this + 117) != 6)
        v34 = 0;
      if ((v34 & 1) == 0)
      {
        HGXForm::ComputePreFilterAmount(this, v83, &v80);
        if (v83[0] > 0.0 || (v27.n128_f32[0] = v80, v80 > 0.0))
        {
          v37 = atomic_load(HGLogger::_enabled);
          if ((v37 & 1) != 0)
            HGLogger::log((HGLogger *)"xform", (const char *)1, (HGLogger *)"Prefilter = %f, l_EQX = %f, l_EQY=%f\n", v35, v36, *((float *)this + 116), v83[0], v80);
          v38 = *((_DWORD *)this + 117);
          if (!v38)
          {
            v50 = (HGBlur *)HGObject::operator new(0x220uLL);
            HGBlur::HGBlur(v50);
            v51 = v83[0];
            v52 = v80;
            (*(void (**)(HGBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v50 + 96))(v50, 0, v83[0], v80, 0.0, 0.0);
            *((_DWORD *)v50 + 106) = 1;
            HGXForm::QueueNode(this, (HGNode *)v50);
            if (!*((_DWORD *)v50 + 106))
              goto LABEL_115;
            HGTransform::HGTransform((HGTransform *)v82);
            HGBlur::GetDecimation(v50, v51);
            v54 = ldexpf(1.0, v53);
            HGBlur::GetDecimation(v50, v52);
            v56 = ldexpf(1.0, v55);
            HGTransform::Scale((HGTransform *)v82, v54, v56, 1.0);
            (*(void (**)(_QWORD, float *))(**((_QWORD **)this + 52) + 200))(*((_QWORD *)this + 52), v82);
            goto LABEL_114;
          }
          if (v38 != 6)
          {
            if (v32)
              v57 = v31;
            else
              v57 = v83[0];
            v58 = 1.0;
            v59 = -1;
            do
            {
              v60 = v58;
              v58 = v58 + v58;
              ++v59;
            }
            while (v58 <= v57);
            if (v32)
              v61 = v33;
            else
              v61 = v80;
            v62 = 1.0;
            v63 = -1;
            do
            {
              v64 = v62;
              v62 = v62 + v62;
              ++v63;
            }
            while (v62 <= v61);
            if (v59 >= v63)
              v65 = v63;
            else
              v65 = v59;
            if (v38 == 2 && v65 >= 2)
            {
              v66 = v65 + 1;
              v67 = 5;
              v68 = 2.0;
              v69 = 0.2;
            }
            else
            {
              v66 = v65;
              v69 = 0.0;
              v68 = 1.0;
              v67 = 5;
              switch(v38)
              {
                case 1:
                case 2:
                  break;
                case 3:
                  v67 = 6;
                  break;
                case 4:
                  v67 = 7;
                  break;
                case 5:
                  v67 = 2;
                  break;
                default:
                  v67 = 0;
                  break;
              }
            }
            HGTransform::HGTransform((HGTransform *)v82);
            HGTransform::Scale((HGTransform *)v82, 1.0 / v60, 1.0 / v64, 1.0);
            v73 = (HGAnisotropicXForm *)HGObject::operator new(0x1F0uLL);
            HGAnisotropicXForm::HGAnisotropicXForm(v73);
            (*(void (**)(HGAnisotropicXForm *, float *))(*(_QWORD *)v73 + 576))(v73, v82);
            (*(void (**)(HGAnisotropicXForm *, _QWORD))(*(_QWORD *)v73 + 160))(v73, 0);
            (*(void (**)(HGAnisotropicXForm *, uint64_t))(*(_QWORD *)v73 + 592))(v73, v67);
            (*(void (**)(HGAnisotropicXForm *, _QWORD, float, float, float, float))(*(_QWORD *)v73 + 96))(v73, 0, v69, (float)v65, (float)v66, v68);
            HGXForm::QueueNode(this, (HGNode *)v73);
            HGTransform::HGTransform((HGTransform *)v81);
            HGTransform::Scale((HGTransform *)v81, v60, v64, 1.0);
            (*(void (**)(_QWORD, float *))(**((_QWORD **)this + 52) + 200))(*((_QWORD *)this + 52), v81);
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 53) + 96))(*((_QWORD *)this + 53), *((_QWORD *)this + 52));
            (*(void (**)(_QWORD))(**((_QWORD **)this + 53) + 168))(*((_QWORD *)this + 53));
            v74 = v57 / v60;
            if (v74 != 1.0)
            {
              v75 = v61 / v64;
              if (v75 != 1.0)
              {
                v76 = (HGConvolution *)HGObject::operator new(0x220uLL);
                HGConvolution::HGConvolution(v76);
                HGXForm::SetConvolutionFilter(this, v76, v74, v75);
                HGXForm::QueueNode(this, (HGNode *)v76);
              }
            }
            HGTransform::~HGTransform((HGTransform *)v81);
            goto LABEL_114;
          }
          v39 = 1.0 / v31;
          for (i = 0; v39 < 0.5; v39 = v39 + v39)
            ++i;
          v27.n128_f64[0] = 1.0 / v33;
          v27.n128_f32[0] = 1.0 / v33;
          for (j = 0; v27.n128_f32[0] < 0.5; v27.n128_f32[0] = v27.n128_f32[0] + v27.n128_f32[0])
            ++j;
          if (i <= j)
            v42 = j;
          else
            v42 = i;
          v43 = (HGXForm *)*((_QWORD *)this + 55);
          if (v42 < 1)
          {
            v49 = (HGXForm *)*((_QWORD *)this + 55);
          }
          else
          {
            v44 = v42 + 1;
            v45 = j;
            v46 = i;
            do
            {
              HGTransform::HGTransform((HGTransform *)v82);
              if (v46 <= 0)
                v47 = 1.0;
              else
                v47 = 0.5;
              if (v45 <= 0)
                v48 = 1.0;
              else
                v48 = 0.5;
              HGTransform::Scale((HGTransform *)v82, v47, v48, 1.0);
              v49 = (HGXForm *)HGObject::operator new(0x210uLL);
              HGXForm::HGXForm(v49);
              (*(void (**)(HGXForm *, _QWORD, HGXForm *))(*(_QWORD *)v49 + 120))(v49, 0, v43);
              (*(void (**)(HGXForm *, float *))(*(_QWORD *)v49 + 576))(v49, v82);
              (*(void (**)(HGXForm *, uint64_t))(*(_QWORD *)v49 + 160))(v49, 1);
              (*(void (**)(HGXForm *, _QWORD, float))(*(_QWORD *)v49 + 592))(v49, 0, 0.0);
              (*(void (**)(HGXForm *, uint64_t, uint64_t))(*(_QWORD *)v49 + 136))(v49, 0xFFFFFFFFLL, 32);
              (*(void (**)(HGXForm *, _QWORD, uint64_t))(*(_QWORD *)v49 + 136))(v49, 0, 32);
              (*(void (**)(HGXForm *, uint64_t, uint64_t))(*(_QWORD *)v49 + 136))(v49, 1, 32);
              if (v43 != *((HGXForm **)this + 55))
                (*(void (**)(HGXForm *))(*(_QWORD *)v43 + 24))(v43);
              HGTransform::~HGTransform((HGTransform *)v82);
              --v44;
              --v45;
              --v46;
              v43 = v49;
            }
            while (v44 > 1);
          }
          if (v42)
          {
            *((_QWORD *)this + 56) = v49;
            HGTransform::HGTransform((HGTransform *)v82);
            v70 = ldexpf(1.0, i);
            v71 = ldexpf(1.0, j);
            HGTransform::Scale((HGTransform *)v82, v70, v71, 1.0);
            (*(void (**)(_QWORD, float *))(**((_QWORD **)this + 52) + 200))(*((_QWORD *)this + 52), v82);
LABEL_114:
            HGTransform::~HGTransform((HGTransform *)v82);
          }
        }
      }
    }
LABEL_115:
    if (*((HGXForm **)this + 56) != this)
    {
      if (!(*(unsigned int (**)(_QWORD, __n128))(**((_QWORD **)this + 52) + 224))(*((_QWORD *)this + 52), v27))
      {
        v77 = (HGXForm *)HGObject::operator new(0x210uLL);
        HGXForm::HGXForm(v77);
        (*(void (**)(HGXForm *, _QWORD))(*(_QWORD *)v77 + 576))(v77, *((_QWORD *)this + 52));
        (*(void (**)(HGXForm *, _QWORD))(*(_QWORD *)v77 + 160))(v77, *((unsigned int *)this + 108));
        (*(void (**)(HGXForm *, _QWORD, float))(*(_QWORD *)v77 + 592))(v77, 0, 0.0);
        *((_QWORD *)v77 + 57) = this;
        *((_DWORD *)v77 + 130) = *((_DWORD *)this + 130);
        if (*((HGXForm **)this + 56) == this)
        {
          (*(void (**)(HGXForm *, _QWORD, _QWORD))(*(_QWORD *)v77 + 120))(v77, 0, *((_QWORD *)this + 55));
        }
        else
        {
          (*(void (**)(HGXForm *, _QWORD))(*(_QWORD *)v77 + 120))(v77, 0);
          (*(void (**)(_QWORD))(**((_QWORD **)this + 56) + 24))(*((_QWORD *)this + 56));
        }
        *((_QWORD *)this + 56) = v77;
      }
      return (HGXForm *)*((_QWORD *)this + 56);
    }
    *((_DWORD *)this + 4) |= 0x10u;
    *((_DWORD *)this + 118) = 1;
    *((_DWORD *)this + 119) = (*(uint64_t (**)(_QWORD, __n128))(**((_QWORD **)this + 53) + 248))(*((_QWORD *)this + 53), v27);
    v78 = *((_DWORD *)this + 108);
    if (v78 == 1)
    {
      v79 = 1056964608;
    }
    else
    {
      if (!v78)
      {
        *((_DWORD *)this + 120) = 0;
        return (HGXForm *)*((_QWORD *)this + 56);
      }
      v79 = 1069547520;
    }
    *((_DWORD *)this + 120) = v79;
    return (HGXForm *)*((_QWORD *)this + 56);
  }
  (*(void (**)(HGNode *, _QWORD, float *))(*(_QWORD *)v11 + 104))(v11, 0, v81);
  (*(void (**)(HGNode *, uint64_t, float *))(*(_QWORD *)v11 + 104))(v11, 1, v82);
  if (v82[0] == 0.0)
    v12 = 1.0;
  else
    v12 = -1.0;
  if (v82[1] == 0.0)
    v13 = 1.0;
  else
    v13 = -1.0;
  Input = HGObject::operator new(0x210uLL);
  HGXForm::HGXForm((HGXForm *)Input);
  v14 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v14);
  (*(void (**)(HGTransform *))(*(_QWORD *)v14 + 56))(v14);
  (*(void (**)(HGTransform *, double, double, double))(*(_QWORD *)v14 + 144))(v14, v12, v13, 1.0);
  (*(void (**)(HGTransform *, double, double, double))(*(_QWORD *)v14 + 120))(v14, v81[0], v81[1], 0.0);
  (*(void (**)(HGTransform *, _QWORD))(*(_QWORD *)v14 + 192))(v14, *((_QWORD *)this + 52));
  v15 = HGRenderer::GetInput(a2, v11, 0);
  (*(void (**)(void *, _QWORD, HGNode *))(*(_QWORD *)Input + 120))(Input, 0, v15);
  (*(void (**)(void *, HGTransform *))(*(_QWORD *)Input + 576))(Input, v14);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)Input + 160))(Input, *((unsigned int *)this + 108));
  (*(void (**)(void *, _QWORD, float))(*(_QWORD *)Input + 592))(Input, 0, *((float *)this + 116));
  (*(void (**)(void *, _QWORD, float, float, float, float))(*(_QWORD *)Input + 96))(Input, 0, *((float *)this + 123), *((float *)this + 124), *((float *)this + 125), *((float *)this + 126));
  (*(void (**)(HGNode *, uint64_t, float *))(*(_QWORD *)v11 + 104))(v11, 2, v83);
  v16 = v83[0];
  if (*((_DWORD *)this + 130) > (signed int)v83[0])
    v16 = *((_DWORD *)this + 130);
  (*(void (**)(void *, uint64_t, float, float, float, float))(*(_QWORD *)Input + 96))(Input, 1, (float)v16, 0.0, 0.0, 0.0);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)Input + 640))(Input, *((unsigned int *)this + 127));
  *((_QWORD *)this + 56) = Input;
  (*(void (**)(HGTransform *))(*(_QWORD *)v14 + 24))(v14);
  return (HGXForm *)Input;
}

void sub_1B2AE1018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  HGObject::operator delete(v31);
  HGTransform::~HGTransform((HGTransform *)&a13);
  HGTransform::~HGTransform((HGTransform *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE103C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTransform::~HGTransform((HGTransform *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE1050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTransform::~HGTransform((HGTransform *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE1064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  HGObject::operator delete(v31);
  HGTransform::~HGTransform((HGTransform *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE1080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTransform::~HGTransform((HGTransform *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE1094(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AE10A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTransform::~HGTransform((HGTransform *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE10BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTransform::~HGTransform((HGTransform *)&a13);
  HGTransform::~HGTransform((HGTransform *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE10F0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AE1104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTransform::~HGTransform((HGTransform *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE1118(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AE112C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AE1140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  HGObject::operator delete(v31);
  HGTransform::~HGTransform((HGTransform *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTransform::~HGTransform((HGTransform *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE1170(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AE1184(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AE1198(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AE11B0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AE11C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTransform::~HGTransform((HGTransform *)&a31);
  _Unwind_Resume(a1);
}

void HGXForm::ComputePreFilterAmount(HGXForm *this, float *a2, float *a3)
{
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;

  v6 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 53) + 272))(*((_QWORD *)this + 53));
  v7 = v6[12];
  v8 = v6[13];
  v9 = v6[15];
  v10 = fmax(fabs((*v6 * v9 - v6[3] * v7) / (v9 * v9)), fabs((v6[4] * v9 - v6[3] * v8) / (v9 * v9)))
      * *((float *)this + 121);
  v11 = fmax(fabs((v6[1] * v9 - v6[7] * v7) / (v9 * v9)), fabs((v6[5] * v9 - v6[7] * v8) / (v9 * v9)))
      * *((float *)this + 122);
  v30 = exp2f(-*((float *)this + 116));
  v12 = 0.0;
  v13 = 0.0;
  if (v10 > 1.0)
  {
    v14 = 1.0 / v10;
    v15 = log2f(v14);
    v16 = floorf(v15);
    v17 = exp2f(v16);
    v18 = 0.0;
    if (v17 < 1.0)
    {
      v19 = v17 * 3.14159265;
      v13 = (float)(sqrtf(logf(v30) * -2.0) * 3.0) / v19;
    }
    v20 = exp2f(v16 + 1.0);
    if (v20 < 1.0)
    {
      v21 = v20 * 3.14159265;
      v18 = (float)(sqrtf(logf(v30) * -2.0) * 3.0) / v21;
    }
    v13 = v13 + (float)((float)(v15 - v16) * (float)(v18 - v13));
  }
  if (v11 > 1.0)
  {
    v22 = 1.0 / v11;
    v23 = log2f(v22);
    v24 = floorf(v23);
    v25 = exp2f(v24);
    v26 = 0.0;
    if (v25 < 1.0)
    {
      v27 = v25 * 3.14159265;
      v12 = (float)(sqrtf(logf(v30) * -2.0) * 3.0) / v27;
    }
    v28 = exp2f(v24 + 1.0);
    if (v28 < 1.0)
    {
      v29 = v28 * 3.14159265;
      v26 = (float)(sqrtf(logf(v30) * -2.0) * 3.0) / v29;
    }
    v12 = v12 + (float)((float)(v23 - v24) * (float)(v26 - v12));
  }
  *a2 = v13;
  *a3 = v12;
}

void HGXForm::SetConvolutionFilter(HGXForm *this, HGConvolution *a2, float a3, float a4)
{
  int v8;
  unsigned int v9;
  float v10;
  int SeparablePrefilter;
  unsigned int v12[8];
  unsigned int v13[8];

  HGLinearFilter2D::HGLinearFilter2D((HGLinearFilter2D *)v13);
  HGLinearFilter2D::HGLinearFilter2D((HGLinearFilter2D *)v12);
  v8 = *((_DWORD *)this + 117) - 1;
  if (v8 >= 5
    || (v9 = dword_1B35248C8[v8],
        v10 = exp2f(-*((float *)this + 116)),
        SeparablePrefilter = HGPrefilterUtils::GetSeparablePrefilter(v13, v9, 0, v10, a3, 0.0),
        (SeparablePrefilter | HGPrefilterUtils::GetSeparablePrefilter(v12, v9, 1, v10, a4, 0.0)) == 1))
  {
    HGConvolution::SeparableFilter2D(a2, (const HGLinearFilter2D *)v13, (const HGLinearFilter2D *)v12);
  }
  HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)v12);
  HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)v13);
}

void sub_1B2AE1564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)&a9);
  HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)&a13);
  _Unwind_Resume(a1);
}

uint64_t HGXForm::SetTransform(HGXForm *this, HGTransform *a2)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;

  v3 = **((_QWORD **)this + 51);
  if (a2)
  {
    if ((*(unsigned int (**)(void))(v3 + 232))())
    {
      return 0;
    }
    else
    {
      (*(void (**)(_QWORD, HGTransform *))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), a2);
      HGNode::ClearBits((HGNode *)this, v6, v7);
      return 1;
    }
  }
  else if ((*(unsigned int (**)(void))(v3 + 224))())
  {
    return 0;
  }
  else
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 51) + 56))(*((_QWORD *)this + 51));
    HGNode::ClearBits((HGNode *)this, v8, v9);
    return 1;
  }
}

uint64_t HGXForm::GetTransform(HGXForm *this)
{
  return *((_QWORD *)this + 51);
}

uint64_t HGXForm::SetPreFilter(uint64_t a1, uint64_t a2, char *a3, float a4)
{
  if (*(float *)(a1 + 464) == a4 && *(_DWORD *)(a1 + 468) == (_DWORD)a2)
    return 0;
  *(float *)(a1 + 464) = a4;
  *(_DWORD *)(a1 + 468) = a2;
  HGNode::ClearBits((HGNode *)a1, a2, a3);
  return 1;
}

HGXForm *HGXForm::SetFilterSize(HGXForm *this, float a2, float a3)
{
  float v3;

  if (a2 == 0.0)
    a2 = 0.00000011921;
  *((float *)this + 121) = a2;
  if (a3 == 0.0)
    v3 = 0.00000011921;
  else
    v3 = a3;
  *((float *)this + 122) = v3;
  return this;
}

uint64_t HGXForm::GetDOD(HGXForm *this, HGRenderer *a2, int a3, HGRect a4)
{
  int v4;
  uint64_t v6;

  if (a3 || !*((_DWORD *)this + 118))
    return HGNode::GetDOD((uint64_t)this, (uint64_t)a2, v4, *(uint64_t *)&a4.var0);
  v6 = *(_QWORD *)&a4.var2;
  return HGTransformUtils::GetDOD(*((HGTransformUtils **)this + 52), *(const HGTransform **)&a4.var0, a4, *((float *)this + 120), *((float *)this + 129));
}

uint64_t HGXForm::GetROI(HGXForm *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  int v9;
  uint64_t v11;
  uint64_t ROI;
  uint64_t v13;
  uint64_t v14;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v17;
  HGRenderer *v18;
  HGRect v19;
  HGRect v20;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (v8 || !*((_DWORD *)this + 118))
    return HGNode::GetROI((uint64_t)this, (uint64_t)a2, v9, *(uint64_t *)&a4.var0);
  v11 = *(_QWORD *)&a4.var2;
  ROI = HGTransformUtils::GetROI(*((HGTransformUtils **)this + 53), *(unint64_t *)&a4.var0, a4, *((float *)this + 120), *((float *)this + 129));
  v14 = v13;
  if (*((_DWORD *)this + 10) != 1)
  {
    Input = HGRenderer::GetInput(a2, *((HGNode **)this + 56), 0);
    DOD = HGRenderer::GetDOD(a2, Input);
    *(_QWORD *)&v19.var0 = HGRectIntersection(ROI, v14, DOD, v17);
    *(_QWORD *)&v19.var2 = v18;
    *(_QWORD *)&v20.var0 = v5;
    *(_QWORD *)&v20.var2 = v4;
    if (HGXForm::TestPerspective(this, v18, v19, v20))
      (*(void (**)(HGNode *, uint64_t, uint64_t))(*(_QWORD *)Input + 136))(Input, 0xFFFFFFFFLL, 2);
  }
  return ROI;
}

BOOL HGXForm::TestPerspective(HGXForm *this, HGRenderer *a2, HGRect a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  int var2;
  int var3;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v34;
  double v35;
  double v36;
  BOOL v37;
  BOOL v38;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v57;
  double v58;
  double v59;
  _BOOL4 v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  var2 = a3.var2;
  v69 = *MEMORY[0x1E0C80C00];
  var3 = a3.var3;
  v9 = (a3.var0 - 2);
  v10 = (a3.var1 - 2);
  (*(void (**)(_QWORD, float *, uint64_t, uint64_t))(**((_QWORD **)this + 52) + 216))(*((_QWORD *)this + 52), &v61, v9, v10);
  v11 = (var2 + 2);
  (*(void (**)(_QWORD, float *, uint64_t, uint64_t))(**((_QWORD **)this + 52) + 216))(*((_QWORD *)this + 52), &v63, v11, v10);
  (*(void (**)(_QWORD, float *, uint64_t, _QWORD))(**((_QWORD **)this + 52) + 216))(*((_QWORD *)this + 52), &v65, v11, (var3 + 2));
  (*(void (**)(_QWORD, float *, uint64_t, _QWORD))(**((_QWORD **)this + 52) + 216))(*((_QWORD *)this + 52), &v67, v9, (var3 + 2));
  v12 = v61;
  v13 = v62;
  v14 = v63;
  v15 = v64;
  v16 = v67;
  v17 = v68;
  v18 = v65;
  v19 = v66 - v68;
  v20 = v63 - v61;
  v21 = v65 - v67;
  v22 = v62 - v64;
  if (vabdd_f64(v20 * v19, v22 * v21) >= 0.000001)
  {
    v24 = v20 * v19 - v22 * v21;
    v23 = v13 - v17;
    v25 = ((v13 - v17) * v21 - (v12 - v16) * v19) / v24;
    v26 = v20 * v25 + v12;
    v27 = (v15 - v13) * v25 + v13;
    v28 = (double)(int)v5;
    v29 = (double)(int)v4;
    v30 = (double)SHIDWORD(v4);
    if (v27 >= (double)SHIDWORD(v5) && v26 >= v28 && v26 <= v29 && v27 <= v30)
      return 1;
    v34 = (v20 * v23 - (v15 - v13) * (v12 - v16)) / v24;
    v35 = v19 * v34 + v17;
    v36 = v21 * v34 + v16;
    v37 = v35 < (double)SHIDWORD(v5) || v36 < v28;
    v38 = v37 || v36 > v29;
    if (!v38 && v35 <= v30)
      return 1;
  }
  else
  {
    v23 = v13 - v17;
  }
  v40 = v66 - v15;
  v41 = v16 - v12;
  v42 = (v16 - v12) * v40;
  v43 = v18 - v14;
  v44 = v23 * (v18 - v14);
  if (vabdd_f64(v42, v44) < 0.000001)
    return 0;
  v46 = v42 - v44;
  v47 = (v22 * v43 - (v12 - v14) * v40) / v46;
  v48 = v17 - v13;
  v49 = v41 * v47 + v12;
  v50 = (v17 - v13) * v47 + v13;
  v51 = (double)(int)v5;
  v52 = (double)(int)v4;
  v53 = (double)SHIDWORD(v4);
  if (v50 >= (double)SHIDWORD(v5) && v49 >= v51 && v49 <= v52 && v50 <= v53)
    return 1;
  v57 = (v22 * v41 - (v12 - v14) * v48) / v46;
  v58 = v40 * v57 + v15;
  v59 = v43 * v57 + v14;
  v60 = v59 >= v51;
  if (v59 > v52)
    v60 = 0;
  if (v58 < (double)SHIDWORD(v5))
    v60 = 0;
  return v58 <= v53 && v60;
}

uint64_t HGXForm::RenderTile(HGXForm *this, HGTile *a2)
{
  HGRenderer *v4;
  HGNode *Input;
  uint64_t ROI;
  unint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int32 v13;
  float32x4_t *v14;
  uint64_t v16;
  int v17;

  if (*((_DWORD *)this + 118))
  {
    v4 = *(HGRenderer **)(*((_QWORD *)a2 + 42) + 152);
    Input = HGRenderer::GetInput(v4, (HGNode *)this, 0);
    ROI = HGRenderer::GetROI(v4, Input);
    v8 = v7;
    if (((*(uint64_t (**)(HGXForm *, _QWORD))(*(_QWORD *)this + 152))(this, 0) & 2) != 0)
    {
      HGRenderer::RenderInput((uint64_t)v4, *((_QWORD *)a2 + 42), (uint64_t)this, 0, (uint64_t)&v16, ROI, v8, 0);
      v12 = v17;
      v10 = HGObject::operator new(0x80uLL);
      HGBitmap::HGBitmap(v10, ROI, v8, 28, v16, 16 * v12);
    }
    else
    {
      v9 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)v4 + 128))(v4, 19);
      v10 = HGObject::operator new(0x90uLL);
      v11 = *((_QWORD *)a2 + 42);
      HGBuffer::HGBuffer((uint64_t)v10, ROI, v8, v9, 0);
      *v10 = off_1E652FBB8;
      v10[16] = Input;
      v10[17] = v11;
    }
    *(_DWORD *)(*((_QWORD *)a2 + 42) + 36) = *((_DWORD *)this + 108);
    v13 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)v4 + 128))(v4, 4);
    v14 = (float32x4_t *)*((_QWORD *)a2 + 42);
    v14[7].i32[0] = v13;
    HGSampler::ReadTile(v14, v10, *((_QWORD *)this + 53), *((int8x16_t **)a2 + 2), *(_QWORD *)a2, *((_QWORD *)a2 + 1), *((_DWORD *)a2 + 6) - *((_QWORD *)a2 + 1) + *(_QWORD *)a2);
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 24))(v10);
  }
  return 0;
}

void sub_1B2AE1C6C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AE1C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2AE1C88(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AE1CA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

const char *HGXForm::GetProgram(HGXForm *this, HGRenderer *a2)
{
  unsigned int Target;
  int v5;
  const char *v6;
  const char *v7;
  const char *v8;
  unsigned int v10;
  int v11;
  BOOL v12;
  const char *v13;
  const char *v14;
  double v16;
  double v17;
  uint32x4_t v18;
  string_t v19;
  string_t v20;
  double v21;
  double v22;
  uint32x4_t v23;
  string_t v24[6];

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target > 0x60B0F)
  {
    v5 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20);
    v6 = "//Metal1.0     \n"
         "//LEN=0000000328\n"
         "fragment FragmentOut fragmentFunc(VertexInOut           frag        [[ stage_in ]],\n"
         "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
         "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
         "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
         "{\n"
         "    FragmentOut out;\n"
         "    float4 opacity = float4(hg_Params[0]);\n"
         "    out.color0 = float4(0.0f);\n"
         "    if (frag._texCoord0.w > 0)\n"
         "    {\n"
         "        float2 coords = frag._texCoord0.xy / frag._texCoord0.w;\n"
         "        out.color0 = hg_Texture0.sample(hg_Sampler0, coords) * opacity;\n"
         "    }\n"
         "    return out;\n"
         "}\n"
         "//MD5=ff0a9e5f:fb2b6628:41f3111f:93dff02b\n"
         "//SIG=00000000:00000000:00000000:00000000:0002:0001:0000:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
    if (v5 == 27)
      v6 = "//Metal1.0     \n"
           "//LEN=0000000351\n"
           "fragment FragmentOut fragmentFunc(VertexInOut           frag        [[ stage_in ]],\n"
           "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
           "                                  texture2d< half >      hg_Texture0 [[ texture(0) ]],\n"
           "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
           "{\n"
           "    FragmentOut out;\n"
           "    half4 opacity = half4(hg_Params[0]);\n"
           "    half4 color = half4(0.0f);\n"
           "    if (frag._texCoord0.w > 0)\n"
           "    {\n"
           "        float2 coords = frag._texCoord0.xy / frag._texCoord0.w;\n"
           "        color = hg_Texture0.sample(hg_Sampler0, coords);\n"
           "        color *= opacity;\n"
           "    }\n"
           "    out.color0 = float4(color);\n"
           "    return out;\n"
           "}\n"
           "//MD5=d87d279d:1a15ee10:6cfaa609:bc4cd42e\n"
           "//SIG=00000000:00000000:00000000:00000001:0002:0001:0000:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    v7 = "//Metal1.0     \n"
         "//LEN=00000002c6\n"
         "fragment FragmentOut fragmentFunc(VertexInOut           frag        [[ stage_in ]],\n"
         "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
         "                                  texture2d< half >      hg_Texture0 [[ texture(0) ]],\n"
         "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
         "{\n"
         "    FragmentOut out;\n"
         "    half4 opacity = half4(hg_Params[0]);\n"
         "    half4 color = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
         "    out.color0 = float4(color * opacity);\n"
         "    return out;\n"
         "}\n"
         "//MD5=a3cb44f9:6715c139:a9f991d6:a1c11988\n"
         "//SIG=00000000:00000000:00000000:00000001:0000:0001:0000:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    if (v5 != 27)
      v7 = "//Metal1.0     \n"
           "//LEN=00000002c1\n"
           "fragment FragmentOut fragmentFunc(VertexInOut           frag        [[ stage_in ]],\n"
           "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
           "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
           "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
           "{\n"
           "    FragmentOut out;\n"
           "    float4 opacity = float4(hg_Params[0]);\n"
           "    float4 color = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
           "    out.color0 = color * opacity;\n"
           "    return out;\n"
           "}\n"
           "//MD5=b060eb93:167cbcc8:62f25ab3:18c99b04\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
    if (*((_DWORD *)this + 119))
      return v6;
    else
      return v7;
  }
  v10 = Target;
  if (Target > 0x6060F && !(*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    if (*((_BYTE *)this + 512) && *((_DWORD *)this + 118))
      return "//GLfs2.0      \n"
             "//LEN=0000000295\n"
             "#ifndef GL_ES\n"
             "#define lowp\n"
             "#define mediump\n"
             "#define highp\n"
             "#endif\n"
             "#define defaultp mediump\n"
             "uniform defaultp sampler2D hg_Texture0;\n"
             "uniform defaultp vec4 hg_ProgramLocal0;\n"
             "varying highp vec4 hg_TexCoord0;\n"
             "void main()\n"
             "{\n"
             "    defaultp vec4 r1;\n"
             "    lowp vec4 r0;\n"
             "    bvec4 b0;\n"
             "\n"
             "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
             "    b0.xy = lessThan(vec2(0.0), hg_TexCoord0.xy);\n"
             "    b0.zw = lessThan(hg_TexCoord0.xy, vec2(1.0));\n"
             "    r0 = vec4(all(b0));\n"
             "    gl_FragColor = r1*hg_ProgramLocal0*r0;\n"
             "}\n"
             "//MD5=8924dd58:af75c4ef:65163cb7:950dc52e\n"
             "//SIG=00000000:00000000:00000000:00000000:0004:0001:0000:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
    if (*((_DWORD *)this + 119))
      return "//GLfs2.0      \n"
             "//LEN=00000001f3\n"
             "#ifndef GL_ES\n"
             "#define lowp\n"
             "#define mediump\n"
             "#define highp\n"
             "#endif\n"
             "#define defaultp mediump\n"
             "uniform defaultp sampler2D hg_Texture0;\n"
             "uniform defaultp vec4 hg_ProgramLocal0;\n"
             "varying highp vec4 hg_TexCoord0;\n"
             "void main()\n"
             "{\n"
             "\n"
             "    gl_FragColor = hg_TexCoord0.w>0. ? texture2DProj(hg_Texture0, hg_TexCoord0)*hg_ProgramLocal0 : vec4(0.)"
             ";\n"
             "}\n"
             "//MD5=6da3c304:b0faeba4:dba5c887:64ab3ead\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:0001:0000:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
    if (*((_DWORD *)this + 118))
      return "//GLfs2.0      \n"
             "//LEN=00000001f6\n"
             "#ifndef GL_ES\n"
             "#define lowp\n"
             "#define mediump\n"
             "#define highp\n"
             "#endif\n"
             "#define defaultp mediump\n"
             "uniform defaultp sampler2D hg_Texture0;\n"
             "uniform defaultp vec4 hg_ProgramLocal0;\n"
             "varying highp vec4 hg_TexCoord0;\n"
             "void main()\n"
             "{\n"
             "    defaultp vec4 r0;\n"
             "\n"
             "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
             "    gl_FragColor = r0*hg_ProgramLocal0;\n"
             "}\n"
             "//MD5=67977a2c:d8a14038:8edc7643:d46e92bc\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
    HGString::sample2d((HGString *)0x60620, 0, 0, (HGString *)v24);
    v19 = HGString::c_str(v24, v21, v22, v23);
LABEL_25:
    v20 = v19;
    HGString::~HGString((HGString *)v24);
    return v20;
  }
  if (!*((_DWORD *)this + 118))
  {
    HGString::sampleRect(0, v24);
    v19 = HGString::c_str(v24, v16, v17, v18);
    goto LABEL_25;
  }
  v8 = "!!ARBfp1.0     \n"
       "##LEN=000000020e\n"
       "##                          \n"
       "##                            \n"
       "##                                \n"
       "##                                     \n"
       "##$\n"
       "OUTPUT $o0=result.color;\n"
       "ATTRIB $f0=fragment.texcoord[0];\n"
       "PARAM $p0=program.local[0];\n"
       "##%\n"
       "TEMP r0;\n"
       "##@\n"
       "RCP r0.x,$f0.w;\n"
       "MUL r0.xy,$f0,r0.xxxx;\n"
       "##0\n"
       "TEX r0,r0,texture[0],RECT;\n"
       "MUL r0,r0,$p0;\n"
       "CMP $o0,-$f0.wwww,r0,0;\n"
       "END\n"
       "##MD5=ba6baee1:6abbea5d:27d71074:2b006e3e\n"
       "##SIG=00000000:00000000:00000000:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  if (v10 > 0x6043F || v10 - 394016 < 0xF0)
    return v8;
  v11 = *((_DWORD *)this + 108);
  v12 = v11 == 0;
  if (v11)
    v13 = "!!ARBfp1.0     \n"
          "##LEN=0000000470\n"
          "##                          \n"
          "##                            \n"
          "##                                \n"
          "##                                     \n"
          "##$\n"
          "OUTPUT $o0=result.color;\n"
          "ATTRIB $f0=fragment.texcoord[0];\n"
          "ATTRIB $f1=fragment.texcoord[1];\n"
          "PARAM $p0=program.local[0];\n"
          "PARAM $p1=program.local[1];\n"
          "PARAM $p2=program.local[2];\n"
          "PARAM $p3=program.local[3];\n"
          "PARAM $c0={0.5,0.5,0,0};\n"
          "PARAM $c1={1,0,0,0};\n"
          "PARAM $c2={1,1,0,0};\n"
          "PARAM $c3={0,1,0,0};\n"
          "##%\n"
          "TEMP r0,r1,r2,r3,r4,r5,r6;\n"
          "##@\n"
          "MOV r1,$f0;\n"
          "FLR r1.xy,r1;\n"
          "ADD r1.xy,r1,$c0;\n"
          "DP4 r0.x,r1,$p1;\n"
          "DP4 r0.y,r1,$p2;\n"
          "DP4 r0.w,r1,$p3;\n"
          "RCP r6.w,r0.w;\n"
          "MUL r0.xy,r0,r6.w;\n"
          "ADD r0.xy,r0,$f1;\n"
          "SUB r5.xy,r0,$c0;\n"
          "FLR r4.xy,r5;\n"
          "ADD r0.xy,r4,$c0;\n"
          "ADD r1.xy,r0,$c1;\n"
          "ADD r2.xy,r0,$c2;\n"
          "ADD r3.xy,r0,$c3;\n"
          "SUB r4.xy,r5,r4;\n"
          "##0\n"
          "TEX r0,r0,texture[0],RECT;\n"
          "##0\n"
          "TEX r1,r1,texture[0],RECT;\n"
          "##0\n"
          "TEX r2,r2,texture[0],RECT;\n"
          "##0\n"
          "TEX r3,r3,texture[0],RECT;\n"
          "LRP r0,r4.xxxx,r1,r0;\n"
          "LRP r3,r4.xxxx,r2,r3;\n"
          "LRP r4,r4.yyyy,r3,r0;\n"
          "MUL r4,r4,$p0;\n"
          "CMP $o0,-r6.wwww,r4,0;\n"
          "END\n"
          "##MD5=e8e320ed:12e7f96c:37a47e61:fd7395c2\n"
          "##SIG=00000000:00000000:00000000:00000000:0004:0004:0007:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  else
    v13 = "!!ARBfp1.0     \n"
          "##LEN=000000030a\n"
          "##                          \n"
          "##                            \n"
          "##                                \n"
          "##                                     \n"
          "##$\n"
          "OUTPUT $o0=result.color;\n"
          "ATTRIB $f0=fragment.texcoord[0];\n"
          "ATTRIB $f1=fragment.texcoord[1];\n"
          "PARAM $p0=program.local[0];\n"
          "PARAM $p1=program.local[1];\n"
          "PARAM $p2=program.local[2];\n"
          "PARAM $p3=program.local[3];\n"
          "PARAM $c0={0.5,0.5,0,0};\n"
          "##%\n"
          "TEMP r0,r1;\n"
          "##@\n"
          "MOV r1,$f0;\n"
          "FLR r1.xy,r1;\n"
          "ADD r1.xy,r1,$c0;\n"
          "DP4 r0.x,r1,$p1;\n"
          "DP4 r0.y,r1,$p2;\n"
          "DP4 r0.w,r1,$p3;\n"
          "RCP r1.w,r0.w;\n"
          "MUL r0.xy,r0,r1.w;\n"
          "ADD r0.xy,r0,$f1;\n"
          "##0\n"
          "TEX r0,r0,texture[0],RECT;\n"
          "MUL r0,r0,$p0;\n"
          "CMP $o0,-r1.wwww,r0,0;\n"
          "END\n"
          "##MD5=bffa8b15:90b4d691:b0bcecc3:a4d117c6\n"
          "##SIG=00000000:00000000:00000000:00000000:0001:0004:0002:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  v14 = "!!ARBfp1.0     \n"
        "##LEN=0000000390\n"
        "##                          \n"
        "##                            \n"
        "##                                \n"
        "##                                     \n"
        "##$\n"
        "OUTPUT $o0=result.color;\n"
        "ATTRIB $f0=fragment.texcoord[0];\n"
        "PARAM $p0=program.local[0];\n"
        "PARAM $c0={0.5,0.5,0,0};\n"
        "PARAM $c1={1,0,0,0};\n"
        "PARAM $c2={1,1,0,0};\n"
        "PARAM $c3={0,1,0,0};\n"
        "##%\n"
        "TEMP r0,r1,r2,r3,r4,r5,r6;\n"
        "##@\n"
        "RCP r6.x,$f0.w;\n"
        "MUL r0.xy,$f0,r6.xxxx;\n"
        "SUB r5.xy,r0,$c0;\n"
        "FLR r4.xy,r5;\n"
        "ADD r0.xy,r4,$c0;\n"
        "ADD r1.xy,r0,$c1;\n"
        "ADD r2.xy,r0,$c2;\n"
        "ADD r3.xy,r0,$c3;\n"
        "SUB r4.xy,r5,r4;\n"
        "##0\n"
        "TEX r0,r0,texture[0],RECT;\n"
        "##0\n"
        "TEX r1,r1,texture[0],RECT;\n"
        "##0\n"
        "TEX r2,r2,texture[0],RECT;\n"
        "##0\n"
        "TEX r3,r3,texture[0],RECT;\n"
        "LRP r0,r4.xxxx,r1,r0;\n"
        "LRP r3,r4.xxxx,r2,r3;\n"
        "LRP r4,r4.yyyy,r3,r0;\n"
        "MUL r4,r4,$p0;\n"
        "CMP $o0,-$f0.wwww,r4,0;\n"
        "END\n"
        "##MD5=3b007a19:592e1872:2b7c0a61:288374c5\n"
        "##SIG=00000000:00000000:00000000:00000000:0004:0001:0007:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  if (v12)
    v14 = "!!ARBfp1.0     \n"
          "##LEN=000000020e\n"
          "##                          \n"
          "##                            \n"
          "##                                \n"
          "##                                     \n"
          "##$\n"
          "OUTPUT $o0=result.color;\n"
          "ATTRIB $f0=fragment.texcoord[0];\n"
          "PARAM $p0=program.local[0];\n"
          "##%\n"
          "TEMP r0;\n"
          "##@\n"
          "RCP r0.x,$f0.w;\n"
          "MUL r0.xy,$f0,r0.xxxx;\n"
          "##0\n"
          "TEX r0,r0,texture[0],RECT;\n"
          "MUL r0,r0,$p0;\n"
          "CMP $o0,-$f0.wwww,r0,0;\n"
          "END\n"
          "##MD5=ba6baee1:6abbea5d:27d71074:2b006e3e\n"
          "##SIG=00000000:00000000:00000000:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  if (v10 > 0x6030F)
    return v14;
  else
    return v13;
}

void sub_1B2AE1EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGString::~HGString((HGString *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AE1EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGString::~HGString((HGString *)&a9);
  _Unwind_Resume(a1);
}

void HGXForm::InitProgramDescriptor(HGXForm *this, HGProgramDescriptor *a2)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string *v17;
  __int128 v18;
  const char *v19;
  std::string v20;
  void *__p[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  void *v25[2];
  unsigned __int8 v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int128 v30;
  int64_t v31;

  HGMetalUtils::stringForMetalHeader((uint64_t)&v27);
  HGMetalUtils::stringForMetalVertexOutputStruct((HGMetalUtils *)1, 0, (uint64_t)v25);
  if ((v26 & 0x80u) == 0)
    v4 = v25;
  else
    v4 = (void **)v25[0];
  if ((v26 & 0x80u) == 0)
    v5 = v26;
  else
    v5 = (std::string::size_type)v25[1];
  v6 = std::string::append(&v27, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  HGMetalUtils::stringForMetalVertexShader((HGMetalUtils *)"vertexFunc", (const char *)1, 0, (uint64_t)v23);
  if ((v24 & 0x80u) == 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v9 = v24;
  else
    v9 = (std::string::size_type)v23[1];
  v10 = std::string::append(&v28, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  HGMetalUtils::stringForMetalFragmentOutputStruct((HGMetalUtils *)1, 0, (uint64_t)__p);
  if ((v22 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v22 & 0x80u) == 0)
    v13 = v22;
  else
    v13 = (std::string::size_type)__p[1];
  v14 = std::string::append(&v29, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (*((_DWORD *)this + 119))
    v16 = "//Metal1.0     \n"
          "//LEN=0000000328\n"
          "fragment FragmentOut fragmentFunc(VertexInOut           frag        [[ stage_in ]],\n"
          "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
          "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
          "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
          "{\n"
          "    FragmentOut out;\n"
          "    float4 opacity = float4(hg_Params[0]);\n"
          "    out.color0 = float4(0.0f);\n"
          "    if (frag._texCoord0.w > 0)\n"
          "    {\n"
          "        float2 coords = frag._texCoord0.xy / frag._texCoord0.w;\n"
          "        out.color0 = hg_Texture0.sample(hg_Sampler0, coords) * opacity;\n"
          "    }\n"
          "    return out;\n"
          "}\n"
          "//MD5=ff0a9e5f:fb2b6628:41f3111f:93dff02b\n"
          "//SIG=00000000:00000000:00000000:00000000:0002:0001:0000:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  else
    v16 = "//Metal1.0     \n"
          "//LEN=00000002c1\n"
          "fragment FragmentOut fragmentFunc(VertexInOut           frag        [[ stage_in ]],\n"
          "                                  const constant float4* hg_Params   [[ buffer(0) ]],\n"
          "                                  texture2d< float >     hg_Texture0 [[ texture(0) ]],\n"
          "                                  sampler                hg_Sampler0 [[ sampler(0) ]])\n"
          "{\n"
          "    FragmentOut out;\n"
          "    float4 opacity = float4(hg_Params[0]);\n"
          "    float4 color = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
          "    out.color0 = color * opacity;\n"
          "    return out;\n"
          "}\n"
          "//MD5=b060eb93:167cbcc8:62f25ab3:18c99b04\n"
          "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  v17 = std::string::append(&v20, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v31 = v17->__r_.__value_.__r.__words[2];
  v30 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if (((char)v22 & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_35;
    }
  }
  else if (((char)v22 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_25:
    if (((char)v24 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v29.__r_.__value_.__l.__data_);
  if (((char)v24 & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v23[0]);
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if (((char)v26 & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v28.__r_.__value_.__l.__data_);
  if (((char)v26 & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_39:
    operator delete(v27.__r_.__value_.__l.__data_);
LABEL_29:
    if (v31 >= 0)
      v19 = (const char *)&v30;
    else
      v19 = (const char *)v30;
    HGProgramDescriptor::SetShaderProgram(a2, v19);
  }
LABEL_38:
  operator delete(v25[0]);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_29;
  goto LABEL_39;
}

void sub_1B2AE253C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a20 < 0)
    operator delete(__p);
  std::vector<HGBinding>::~vector[abi:ne180100]((void **)(v46 - 128));
  std::vector<HGBinding>::~vector[abi:ne180100]((void **)(v46 - 96));
  if (*(char *)(v46 - 41) < 0)
    operator delete(*(void **)(v46 - 64));
  _Unwind_Resume(a1);
}

uint64_t HGXForm::Bind(HGXForm *this, HGRenderer **a2)
{
  double v4;
  double *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v4 = (*(double (**)(HGXForm *))(*(_QWORD *)this + 288))(this);
  (*((void (**)(HGRenderer **, _QWORD, double, float, float, float))*a2 + 17))(a2, 0, v4, *(float *)&v4, *(float *)&v4, *(float *)&v4);
  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2[18] + 128))(a2[18], 46))
  {
    v5 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 53) + 272))(*((_QWORD *)this + 53));
    if (HGRenderer::GetTarget(a2[18], 393216) <= 0x6030F)
    {
      HGHandler::TexCoord((HGHandler *)a2, 0, 0, 0, 0);
      v6 = *v5;
      v7 = v5[4];
      v8 = v5[8];
      v9 = v5[12];
      (*((void (**)(HGRenderer **, uint64_t, float, float, float, float))*a2 + 17))(a2, 1, v6, v7, v8, v9);
      v10 = v5[1];
      v11 = v5[5];
      v12 = v5[9];
      v13 = v5[13];
      (*((void (**)(HGRenderer **, uint64_t, float, float, float, float))*a2 + 17))(a2, 2, v10, v11, v12, v13);
      v14 = v5[3];
      v15 = v5[7];
      v16 = v5[11];
      v17 = v5[15];
      (*((void (**)(HGRenderer **, uint64_t, float, float, float, float))*a2 + 17))(a2, 3, v14, v15, v16, v17);
    }
  }
  return 0;
}

uint64_t HGXForm::BindTexture(HGXForm *this, HGRenderer **a2, int a3)
{
  unsigned int Target;
  unsigned int v7;
  const double *v8;
  const double *v9;

  if (a3)
    return 0;
  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2[18] + 128))(a2[18], 46))
  {
    Target = HGRenderer::GetTarget(a2[18], 393216);
    if (Target <= 0x6030F)
    {
      (*((void (**)(HGRenderer **, _QWORD, _QWORD))*a2 + 9))(a2, 0, 0);
      (*((void (**)(HGRenderer **, _QWORD, _QWORD))*a2 + 6))(a2, 0, 0);
      HGHandler::TexOffset((HGHandler *)a2, 1, 0, 0);
      return 0;
    }
    else
    {
      v7 = Target;
      v8 = (const double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 53) + 272))(*((_QWORD *)this + 53));
      HGHandler::TexCoord((HGHandler *)a2, 0, 0, 0, v8);
      (*((void (**)(HGRenderer **, _QWORD, _QWORD))*a2 + 9))(a2, 0, 0);
      if (v7 > 0x6043F || v7 - 394016 <= 0xEF)
      {
        (*((void (**)(HGRenderer **, _QWORD, _QWORD))*a2 + 6))(a2, *((unsigned int *)this + 108), *((unsigned int *)this + 108));
        return 0;
      }
      else
      {
        (*((void (**)(HGRenderer **, _QWORD, _QWORD))*a2 + 6))(a2, 0, 0);
        return 0;
      }
    }
  }
  else
  {
    v9 = (const double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 53) + 272))(*((_QWORD *)this + 53));
    (*((void (**)(HGRenderer **, _QWORD, _QWORD))*a2 + 9))(a2, 0, 0);
    (*((void (**)(HGRenderer **, _QWORD, _QWORD))*a2 + 6))(a2, *((unsigned int *)this + 108), *((unsigned int *)this + 108));
    HGHandler::TexCoord((HGHandler *)a2, 0, 0, 0, v9);
    (*((void (**)(HGRenderer **))*a2 + 21))(a2);
    return 0;
  }
}

uint64_t HGXForm::IntermediateFormat(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a1 + 520);
  if ((int)v2 <= (int)a2)
    return a2;
  else
    return v2;
}

uint64_t HGXForm::GetParameterCount(HGXForm *this)
{
  return 1;
}

const char *HGXForm::GetParameterName(HGXForm *this, int a2)
{
  if (a2)
    return 0;
  else
    return "bias:min:max:anisotropy";
}

uint64_t HGXForm::SetParameter(HGXForm *this, int a2, float a3, float a4, float a5, float a6)
{
  int v10;
  int v11;
  int v12;

  if (a2 != 1)
  {
    if (!a2)
    {
      v10 = (*(uint64_t (**)(HGXForm *, float))(*(_QWORD *)this + 608))(this, a3);
      v11 = (*(uint64_t (**)(HGXForm *, float))(*(_QWORD *)this + 616))(this, a4) | v10;
      v12 = (*(uint64_t (**)(HGXForm *, float))(*(_QWORD *)this + 624))(this, a5);
      return v11 | v12 | (*(unsigned int (**)(HGXForm *, float))(*(_QWORD *)this + 632))(this, a6);
    }
    return 0;
  }
  if (*((_DWORD *)this + 130) == a3)
    return 0;
  *((_DWORD *)this + 130) = a3;
  return 1;
}

float HGXForm::GetParameter(HGXForm *this, int a2, float *a3)
{
  float result;

  if (!a2)
  {
    *a3 = *((float *)this + 123);
    a3[1] = *((float *)this + 124);
    a3[2] = *((float *)this + 125);
    result = *((float *)this + 126);
    a3[3] = result;
  }
  return result;
}

uint64_t HGXForm::SetLodBias(HGXForm *this, float a2, uint64_t a3, char *a4)
{
  if (*((float *)this + 123) == a2)
    return 0;
  *((float *)this + 123) = a2;
  HGNode::ClearBits((HGNode *)this, a3, a4);
  return 1;
}

uint64_t HGXForm::SetMinLod(HGXForm *this, float a2, uint64_t a3, char *a4)
{
  if (*((float *)this + 124) == a2)
    return 0;
  *((float *)this + 124) = a2;
  HGNode::ClearBits((HGNode *)this, a3, a4);
  return 1;
}

uint64_t HGXForm::SetMaxLod(HGXForm *this, float a2, uint64_t a3, char *a4)
{
  if (*((float *)this + 125) == a2)
    return 0;
  *((float *)this + 125) = a2;
  HGNode::ClearBits((HGNode *)this, a3, a4);
  return 1;
}

uint64_t HGXForm::SetAnisotropy(HGXForm *this, float a2, uint64_t a3, char *a4)
{
  if (*((float *)this + 126) == a2)
    return 0;
  *((float *)this + 126) = a2;
  HGNode::ClearBits((HGNode *)this, a3, a4);
  return 1;
}

uint64_t HGXForm::SetLodFilter(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(_DWORD *)(a1 + 508) == (_DWORD)a2)
    return 0;
  *(_DWORD *)(a1 + 508) = a2;
  HGNode::ClearBits((HGNode *)a1, a2, a3);
  return 1;
}

uint64_t HGXForm::SetClipDistance(HGXForm *this, float a2, uint64_t a3, char *a4)
{
  if (*((float *)this + 129) == a2)
    return 0;
  *((float *)this + 129) = a2;
  HGNode::ClearBits((HGNode *)this, a3, a4);
  return 1;
}

float HGXForm::GetClipDistance(HGXForm *this)
{
  return *((float *)this + 129);
}

BOOL HGXForm::IsAnisotropic(HGXForm *this)
{
  return (*((float *)this + 123) != 0.0 || *((float *)this + 124) != 0.0) && *((float *)this + 126) > 0.0;
}

void HGNodeBuffer::~HGNodeBuffer(HGNodeBuffer *this)
{
  void *v1;

  HGBuffer::~HGBuffer(this);
  HGObject::operator delete(v1);
}

void HGHWMultiBlend::HGHWMultiBlend(HGHWMultiBlend *this)
{
  uint64_t v2;
  double v3;
  char *v4;

  HGHWBlendFlipped::HGHWBlendFlipped(this);
  *(_QWORD *)v2 = off_1E652FEF8;
  *(_QWORD *)(v2 + 544) = 0;
  *(_OWORD *)(v2 + 568) = 0u;
  *(_OWORD *)(v2 + 584) = 0u;
  *(_OWORD *)(v2 + 600) = 0u;
  *(_QWORD *)(v2 + 616) = 0;
  *(_DWORD *)(v2 + 624) = 1065353216;
  LODWORD(v3) = 0;
  HGHWBlendFlipped::SetParameter((__n128 *)v2, 2, (__n128)0, v3, 0.0, 0.0, v4);
  (*(void (**)(HGHWMultiBlend *, uint64_t, float, float, float, float))(*(_QWORD *)this + 96))(this, 5, 1.0, 0.0, 0.0, 0.0);
  (*(void (**)(HGHWMultiBlend *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 32);
  *((_DWORD *)this + 118) = 2;
  *(_OWORD *)((char *)this + 552) = HGRectInfinite;
}

void sub_1B2AE2DB4(_Unwind_Exception *a1)
{
  HGHWBlendFlipped *v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  uint64_t v7;

  v4 = v3;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  v6 = *v4;
  if (*v4)
  {
    *((_QWORD *)v1 + 72) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)v1 + 68);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  HGHWBlendFlipped::~HGHWBlendFlipped(v1);
  _Unwind_Resume(a1);
}

uint64_t HGHWMultiBlend::label_B(HGHWMultiBlend *this)
{
  return 0;
}

uint64_t HGHWMultiBlend::SetInput(HGHWMultiBlend *this, uint64_t a2, HGNode *a3)
{
  return (*(uint64_t (**)(HGHWMultiBlend *, uint64_t, HGNode *, _QWORD, float))(*(_QWORD *)this + 624))(this, a2, a3, 0, 1.0);
}

uint64_t HGHWMultiBlend::SetInput(HGHWMultiBlend *this, uint64_t a2, HGNode *a3, uint64_t a4, float a5, uint64_t a6)
{
  __int128 v12;

  __asm { FMOV            V1.4S, #1.0 }
  v12 = _Q1;
  return (*(uint64_t (**)(HGHWMultiBlend *, uint64_t, HGNode *, uint64_t, __int128 *, uint64_t, float))(*(_QWORD *)this + 640))(this, a2, a3, a4, &v12, a6, a5);
}

uint64_t HGHWMultiBlend::SetInput(HGNode *this, uint64_t a2, HGNode *a3, int a4, __int128 *a5, int a6, float a7)
{
  int v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  HGNode *v19;
  signed int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v32;

  v14 = a2 & 0xFFFFFFF8;
  v15 = (uint64_t *)((char *)this + 568);
  v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 72) - *((_QWORD *)this + 71)) >> 4);
  v17 = (int)((a2 & 0xFFFFFFF8) + 8);
  if (v17 > v16)
    std::vector<HGLayerParams>::__append((void **)this + 71, v17 - v16);
  v18 = *((_DWORD *)this + 22);
  if (v18 <= (int)a2)
  {
    if (v18 < (int)a2)
    {
      v32 = a6;
      v19 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v19);
      v20 = *((_DWORD *)this + 22);
      if (v20 < (int)a2)
      {
        do
          HGNode::SetInput(this, v20++, v19);
        while ((_DWORD)a2 != v20);
      }
      (*(void (**)(HGNode *))(*(_QWORD *)v19 + 24))(v19);
      v18 = *((_DWORD *)this + 22);
      a6 = v32;
    }
    if (v18 < (int)v17)
    {
      v21 = *v15;
      v22 = v14 + 8;
      v23 = v22 - v18;
      if (v23 < 2)
      {
        v24 = v18;
LABEL_14:
        v27 = (_DWORD *)(v21 + 48 * v24 + 8);
        do
        {
          *v27 = v24;
          v27 += 12;
          ++v24;
        }
        while (v22 != v24);
        goto LABEL_16;
      }
      v24 = (v23 & 0xFFFFFFFFFFFFFFFELL) + v18;
      v25 = (_DWORD *)(v21 + 48 * v18 + 56);
      v26 = v23 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v25 - 12) = v18;
        *v25 = v18 + 1;
        v25 += 24;
        v18 += 2;
        v26 -= 2;
      }
      while (v26);
      if (v23 != (v23 & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_14;
    }
  }
LABEL_16:
  v28 = HGNode::SetInput(this, a2, a3);
  if ((int)a2 >= 1)
  {
    (*(void (**)(HGNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, a2, 16);
    v29 = *a5;
    v30 = *((_QWORD *)this + 71) + 48 * a2;
    *(_DWORD *)v30 = a4;
    *(float *)(v30 + 4) = a7;
    *(_DWORD *)(v30 + 8) = a6;
    *(_OWORD *)(v30 + 16) = v29;
    *(_DWORD *)(v30 + 32) = 0;
  }
  return v28;
}

void sub_1B2AE3034(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t HGHWMultiBlend::SetInput(HGHWMultiBlend *this, uint64_t a2, HGNode *a3, uint64_t a4, float a5)
{
  __int128 v11;

  __asm { FMOV            V1.4S, #1.0 }
  v11 = _Q1;
  return (*(uint64_t (**)(HGHWMultiBlend *, uint64_t, HGNode *, uint64_t, __int128 *, uint64_t, float))(*(_QWORD *)this + 640))(this, a2, a3, a4, &v11, a2, a5);
}

uint64_t HGHWMultiBlend::SetInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 640))(a1, a2, a3, a4, a5, a2);
}

uint64_t HGHWMultiBlend::UpdateHWBlendStatus(uint64_t this, HGRenderer *a2)
{
  *(_BYTE *)(this + 480) = *(_DWORD *)(this + 472) != 0;
  return this;
}

HGHWMultiBlend *HGHWMultiBlend::GetOutput(HGHWMultiBlend *this, HGRenderer *a2)
{
  HGHWMultiBlend *v4;
  const char *v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  HGNode *v14;
  uint64_t DOD;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  unint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  int v38;
  uint64_t v39;
  char v40;
  unsigned __int8 v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  const char *v49;
  _QWORD *v50;
  const char *v51;
  _QWORD *v52;
  const char *v53;
  _QWORD *v54;
  const char *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  const char *BlendModeLabel;
  size_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unsigned __int8 v67;
  const char *v68;
  char *v69;
  void **v70;
  HGHWBlendFlipped *v71;
  HGHWBlendFlipped *v72;
  HGNode *v73;
  HGHWBlendFlipped *v74;
  uint64_t v75;
  HGHWMultiBlend *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  HGNode *v81;
  HGHWBlendFlipped *v82;
  HGNode *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL4 IsEqual;
  __n128 v95;
  HGHWBlendFlipped *v96;
  char v98;
  HGNode *Input;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  _QWORD *v103;
  unsigned int v104;
  void *__p[2];
  char v106;
  _DWORD *v107[2];
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[48];
  void *v111;
  char v112;
  uint64_t v113;
  _BYTE v114[23];

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v114, "multiblend", 1, "HGHWMultiBlend::GetOutput");
  if (((*(uint64_t (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2) & 1) != 0)
    goto LABEL_2;
  (*(void (**)(HGHWMultiBlend *, HGRenderer *))(*(_QWORD *)this + 592))(this, a2);
  Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  if (*((int *)this + 22) >= 2)
  {
    v6 = 0;
    v104 = 0;
    v7 = 0;
    v98 = 0;
    v103 = (_QWORD *)((char *)this + 592);
    v8 = 1;
    while (1)
    {
      v11 = *((_QWORD *)this + 71);
      v12 = v11 + 48 * v8;
      *((_DWORD *)this + 106) = *(_DWORD *)v12;
      v13 = *(float *)(v12 + 4);
      *((float *)this + 104) = v13;
      *((_OWORD *)this + 31) = *(_OWORD *)(v12 + 16);
      if (v13 == 0.0)
        goto LABEL_8;
      v14 = HGRenderer::GetInput(a2, (HGNode *)this, v8);
      DOD = HGRenderer::GetDOD(a2, v14);
      v17 = HGRectIntersection(DOD, v16, *((_QWORD *)this + 69), *((_QWORD *)this + 70));
      v19 = v18;
      if (HGRectIsNull(v17, v18))
        goto LABEL_8;
      *(_DWORD *)(*((_QWORD *)this + 71) + 48 * v8 + 32) |= 1u;
      v20 = v11 + 48 * v8;
      v22 = *(_DWORD *)(v20 + 8);
      v21 = (int *)(v20 + 8);
      if (v22)
      {
        LODWORD(__p[0]) = 0;
        v23 = *v21;
        LODWORD(__p[0]) = v23;
        v24 = *(int8x8_t *)((char *)this + 600);
        if (v24)
        {
          v25 = (uint8x8_t)vcnt_s8(v24);
          v25.i16[0] = vaddlv_u8(v25);
          if (v25.u32[0] > 1uLL)
          {
            v26 = v23;
            if (*(_QWORD *)&v24 <= v23)
              v26 = v23 % *(_QWORD *)&v24;
          }
          else
          {
            v26 = (*(_QWORD *)&v24 - 1) & v23;
          }
          v27 = *(uint64_t ***)(*v103 + 8 * v26);
          if (v27)
          {
            v28 = *v27;
            if (v28)
            {
              if (v25.u32[0] < 2uLL)
              {
                v29 = *(_QWORD *)&v24 - 1;
                while (1)
                {
                  v31 = v28[1];
                  if (v31 == v23)
                  {
                    if (*((_DWORD *)v28 + 4) == (_DWORD)v23)
                      goto LABEL_33;
                  }
                  else if ((v31 & v29) != v26)
                  {
                    goto LABEL_34;
                  }
                  v28 = (uint64_t *)*v28;
                  if (!v28)
                    goto LABEL_34;
                }
              }
              do
              {
                v30 = v28[1];
                if (v30 == v23)
                {
                  if (*((_DWORD *)v28 + 4) == (_DWORD)v23)
                  {
LABEL_33:
                    v17 = HGRectUnion(*(uint64_t *)((char *)v28 + 20), *(uint64_t *)((char *)v28 + 28), v17, v19);
                    v19 = v32;
                    break;
                  }
                }
                else
                {
                  if (v30 >= *(_QWORD *)&v24)
                    v30 %= *(_QWORD *)&v24;
                  if (v30 != v26)
                    break;
                }
                v28 = (uint64_t *)*v28;
              }
              while (v28);
            }
          }
        }
LABEL_34:
        v107[0] = __p;
        v33 = std::__hash_table<std::__hash_value_type<int,HGRect>,std::__unordered_map_hasher<int,std::__hash_value_type<int,HGRect>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,HGRect>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,HGRect>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v103, (int *)__p, (uint64_t)&std::piecewise_construct, v107);
        *(uint64_t *)((char *)v33 + 20) = v17;
        *(uint64_t *)((char *)v33 + 28) = v19;
      }
      if (HGHWBlendFlipped::IsHardwareBlendSupported(this, a2))
      {
        *(_DWORD *)(*((_QWORD *)this + 71) + 48 * v8 + 32) |= 2u;
        if (HGNode::DoInplaceHardwareBlending(v14, a2, (HGNode *)this, *((float *)this + 104)))
          *(_DWORD *)(*((_QWORD *)this + 71) + 48 * v8 + 32) |= 4u;
      }
      ++v6;
      if (v8 >= 2)
      {
        v34 = *((_QWORD *)this + 71);
        v35 = v34 + 48 * v7;
        v38 = *(_DWORD *)(v35 + 32);
        v36 = (int *)(v35 + 32);
        v37 = v38;
        if (*(v36 - 6) == *(_DWORD *)(v34 + 48 * v8 + 8))
        {
          *v36 = v37 | 8;
          v9 = (_DWORD *)(v34 + 48 * v8 + 32);
          v10 = 8;
        }
        else
        {
          if ((v37 & 2) != 0)
            goto LABEL_7;
          v39 = v34 + 48 * v8;
          v40 = *(_BYTE *)(v39 + 32);
          v9 = (_DWORD *)(v39 + 32);
          if ((v40 & 2) != 0)
            goto LABEL_7;
          *v36 = v37 | 0x10;
          v98 = 1;
          v10 = 16;
        }
        *v9 |= v10;
      }
LABEL_7:
      v7 = v8;
      v104 = v8;
LABEL_8:
      if ((uint64_t)++v8 >= *((int *)this + 22))
        goto LABEL_44;
    }
  }
  v98 = 0;
  v104 = 0;
  v6 = 0;
LABEL_44:
  v41 = atomic_load(HGLogger::_enabled);
  if ((v41 & 1) != 0 && (int)HGLogger::getLevel((HGLogger *)"multiblend", v5) >= 1)
  {
    v42 = *((_DWORD *)this + 22);
    if (v42 >= 2)
    {
      v43 = 0;
      v44 = (_DWORD *)*MEMORY[0x1E0DE4F50];
      v45 = 1;
      v102 = *(_DWORD **)(MEMORY[0x1E0DE4F50] + 64);
      v101 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v100 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        v46 = *((_QWORD *)this + 71) + v43;
        if ((*(_BYTE *)(v46 + 80) & 1) != 0)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v107);
          *(_QWORD *)&v110[*(_QWORD *)(v108 - 24)] = 3;
          v47 = (_QWORD *)std::ostream::operator<<();
          v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" : [", 4);
          if ((*(_DWORD *)(v46 + 80) & 2) != 0)
            v49 = "H";
          else
            v49 = " ";
          v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, 1);
          if ((*(_DWORD *)(v46 + 80) & 4) != 0)
            v51 = "I";
          else
            v51 = " ";
          v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, 1);
          if ((*(_DWORD *)(v46 + 80) & 8) != 0)
            v53 = "S";
          else
            v53 = " ";
          v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, 1);
          if ((*(_DWORD *)(v46 + 80) & 0x10) != 0)
            v55 = "C";
          else
            v55 = " ";
          v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"] p(", 4);
          v57 = (_QWORD *)std::ostream::operator<<();
          v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)") ", 2);
          v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"o(", 2);
          v60 = *v59;
          *(_DWORD *)((char *)v59 + *(_QWORD *)(*v59 - 24) + 8) = *(_DWORD *)((_BYTE *)v59 + *(_QWORD *)(*v59 - 24) + 8) & 0xFFFFFEFB | 4;
          *(uint64_t *)((char *)v59 + *(_QWORD *)(v60 - 24) + 16) = 2;
          v61 = (_QWORD *)std::ostream::operator<<();
          v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)") ", 2);
          BlendModeLabel = HGHWBlendFlipped::GetBlendModeLabel((HGHWBlendFlipped *)*(unsigned int *)(v46 + 48));
          v64 = strlen(BlendModeLabel);
          v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)BlendModeLabel, v64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"(", 1);
          v66 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)") ", 2);
          v67 = atomic_load(HGLogger::_enabled);
          if ((v67 & 1) != 0)
          {
            std::stringbuf::str();
            v70 = __p;
            if (v106 < 0)
              v70 = (void **)__p[0];
            HGLogger::log((HGLogger *)"multiblend", (const char *)1, (HGLogger *)"  %s\n", v68, v69, v70);
            if (v106 < 0)
              operator delete(__p[0]);
          }
          v107[0] = v44;
          *(_DWORD **)((char *)v107 + *((_QWORD *)v44 - 3)) = v102;
          v108 = v101;
          v109 = v100;
          if (v112 < 0)
            operator delete(v111);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1B5E290BC](&v113);
          v42 = *((_DWORD *)this + 22);
        }
        ++v45;
        v43 += 48;
      }
      while (v45 < v42);
    }
  }
  if (!v6)
  {
    v4 = (HGHWMultiBlend *)Input;
    goto LABEL_114;
  }
  if (v6 == 1)
  {
    v71 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
    HGHWBlendFlipped::HGHWBlendFlipped(v71);
    v72 = (HGHWBlendFlipped *)*((_QWORD *)this + 68);
    if (v72 == v71)
    {
      if (v71)
        (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v71 + 24))(v71);
    }
    else
    {
      if (v72)
        (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v72 + 24))(v72);
      *((_QWORD *)this + 68) = v71;
    }
    v83 = HGRenderer::GetInput(a2, (HGNode *)this, v104);
    (*(void (**)(_QWORD, _QWORD, HGNode *))(**((_QWORD **)this + 68) + 120))(*((_QWORD *)this + 68), 0, Input);
    (*(void (**)(_QWORD, uint64_t, HGNode *))(**((_QWORD **)this + 68) + 120))(*((_QWORD *)this + 68), 1, v83);
    v84 = *((_QWORD *)this + 71);
    (*(void (**)(_QWORD, _QWORD, float, float, float, float))(**((_QWORD **)this + 68) + 96))(*((_QWORD *)this + 68), 0, (float)*(int *)(v84 + 48 * v104), 0.0, 0.0, 0.0);
    (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 68) + 96))(*((_QWORD *)this + 68), 1, *(float *)(v84 + 48 * v104 + 4), 0.0, 0.0, 0.0);
    (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 68) + 96))(*((_QWORD *)this + 68), 2, 0.0, 0.0, 0.0, 0.0);
    v85 = HGRenderer::GetDOD(a2, Input);
    v87 = HGRectIntersection(v85, v86, *((_QWORD *)this + 69), *((_QWORD *)this + 70));
    v89 = v88;
    v90 = HGRenderer::GetDOD(a2, v83);
    v92 = HGRectIntersection(v90, v91, *((_QWORD *)this + 69), *((_QWORD *)this + 70));
    IsEqual = HGRectIsEqual(v87, v89, v92, v93);
    v95.n128_u32[0] = 1.0;
    if (!IsEqual)
      v95.n128_f32[0] = 2.0;
    (*(void (**)(_QWORD, uint64_t, __n128, float, float, float))(**((_QWORD **)this + 68) + 96))(*((_QWORD *)this + 68), 3, v95, 0.0, 0.0, 0.0);
    (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 68) + 96))(*((_QWORD *)this + 68), 4, (float)*((int *)this + 119), 0.0, 0.0, 0.0);
    (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 68) + 96))(*((_QWORD *)this + 68), 5, *((float *)this + 105), 0.0, 0.0, 0.0);
    (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 68) + 96))(*((_QWORD *)this + 68), 6, *(float *)(v84 + 48 * v104 + 16), *(float *)(v84 + 48 * v104 + 20), *(float *)(v84 + 48 * v104 + 24), *(float *)(v84 + 48 * v104 + 28));
    v4 = (HGHWMultiBlend *)*((_QWORD *)this + 68);
    goto LABEL_114;
  }
  if ((v98 & 1) == 0)
  {
LABEL_2:
    v4 = this;
    goto LABEL_114;
  }
  v73 = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  v74 = (HGHWBlendFlipped *)v73;
  if (v73)
    (*(void (**)(HGNode *))(*(_QWORD *)v73 + 16))(v73);
  if (*((int *)this + 22) < 2)
  {
    v76 = 0;
  }
  else
  {
    LODWORD(v75) = 0;
    v76 = 0;
    v77 = 1;
    v78 = 48;
    do
    {
      v79 = *((_QWORD *)this + 71);
      v80 = v79 + v78;
      if ((*(_BYTE *)(v79 + v78 + 32) & 1) != 0)
      {
        v81 = HGRenderer::GetInput(a2, (HGNode *)this, v77);
        if ((*(_BYTE *)(v80 + 32) & 0x10) != 0)
        {
          if (v76)
            (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v76 + 24))(v76);
          v82 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
          HGHWBlendFlipped::HGHWBlendFlipped(v82);
          (*(void (**)(HGHWBlendFlipped *, _QWORD, HGHWBlendFlipped *))(*(_QWORD *)v82 + 120))(v82, 0, v74);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, HGNode *))(*(_QWORD *)v82 + 120))(v82, 1, v81);
          (*(void (**)(HGHWBlendFlipped *, _QWORD, float, float, float, float))(*(_QWORD *)v82 + 96))(v82, 0, (float)*(int *)v80, 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v82 + 96))(v82, 1, *(float *)(v79 + v78 + 4), 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v82 + 96))(v82, 2, 0.0, 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v82 + 96))(v82, 3, 0.0, 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v82 + 96))(v82, 4, (float)*((int *)this + 119), 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v82 + 96))(v82, 5, *((float *)this + 105), 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v82 + 96))(v82, 6, *(float *)(v79 + v78 + 16), *(float *)(v79 + v78 + 20), *(float *)(v79 + v78 + 24), *(float *)(v79 + v78 + 28));
          if (v74 != v82)
          {
            if (v74)
              (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v74 + 24))(v74);
            v74 = v82;
            (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v82 + 16))(v82);
          }
          (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v82 + 24))(v82);
          v76 = 0;
          LODWORD(v75) = 0;
        }
        else
        {
          if (!v76)
          {
            v76 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
            HGHWMultiBlend::HGHWMultiBlend(v76);
            (*(void (**)(HGHWMultiBlend *, _QWORD, HGHWBlendFlipped *))(*(_QWORD *)v76 + 120))(v76, 0, v74);
          }
          v75 = (v75 + 1);
          (*(void (**)(HGHWMultiBlend *, uint64_t, HGNode *, _QWORD, uint64_t, _QWORD, float))(*(_QWORD *)v76 + 640))(v76, v75, v81, *(unsigned int *)(v79 + v78), v79 + v78 + 16, *(unsigned int *)(v79 + v78 + 8), *(float *)(v79 + v78 + 4));
          if (v74 == v76)
          {
            v76 = v74;
          }
          else
          {
            if (v74)
              (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v74 + 24))(v74);
            (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v76 + 16))(v76);
            v74 = v76;
          }
        }
      }
      ++v77;
      v78 += 48;
    }
    while (v77 < *((int *)this + 22));
  }
  v96 = (HGHWBlendFlipped *)*((_QWORD *)this + 68);
  v4 = v74;
  if (v96 == v74)
  {
LABEL_110:
    if (!v76)
      goto LABEL_112;
    goto LABEL_111;
  }
  if (v96)
    (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v96 + 24))(v96);
  *((_QWORD *)this + 68) = v74;
  if (v74)
  {
    (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v74 + 16))(v74);
    v4 = (HGHWMultiBlend *)*((_QWORD *)this + 68);
    goto LABEL_110;
  }
  v4 = 0;
  if (v76)
LABEL_111:
    (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v76 + 24))(v76);
LABEL_112:
  if (v74)
    (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v74 + 24))(v74);
LABEL_114:
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v114);
  return v4;
}

void sub_1B2AE3C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v27 - 112));
  _Unwind_Resume(a1);
}

uint64_t HGHWMultiBlend::GetDOD(HGHWMultiBlend *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if ((a3 & 0x80000000) != 0
    || *((_DWORD *)this + 22) <= (signed int)a3
    || a3 && *(float *)(*((_QWORD *)this + 71) + 48 * a3 + 4) == 0.0)
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)&a4.var0;
  }
}

uint64_t HGHWMultiBlend::GetROI(HGHWMultiBlend *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if ((a3 & 0x80000000) != 0
    || *((_DWORD *)this + 22) <= (signed int)a3
    || a3 && *(float *)(*((_QWORD *)this + 71) + 48 * a3 + 4) == 0.0)
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)&a4.var0;
  }
}

uint64_t HGHWMultiBlend::GetProgram(HGHWMultiBlend *this, HGRenderer *a2)
{
  return 0;
}

uint64_t HGHWMultiBlend::RenderTile(HGNode *this, HGTile *a2)
{
  uint64_t v4;
  uint64_t v5;
  HGRenderer *v6;
  char *v7;
  uint64_t v8;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isObjectRef;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int32x4_t v19;
  float *v20;
  float *v21;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*((int *)this + 22) >= 2)
  {
    v4 = 0;
    v5 = *((_QWORD *)a2 + 42);
    v6 = *(HGRenderer **)(v5 + 152);
    v7 = (char *)a2 + 96;
    v8 = 1;
    do
    {
      if (*(float *)(*((_QWORD *)this + 71) + v4 + 52) != 0.0)
      {
        Input = HGRenderer::GetInput(v6, this, v8);
        DOD = HGRenderer::GetDOD(v6, Input);
        v12 = HGRectIntersection(DOD, v11, *(_QWORD *)a2, *((_QWORD *)a2 + 1));
        if (!HGRectIsNull(v12, v13))
        {
          isObjectRef = OZChannelBase::isObjectRef((OZChannelBase *)this);
          v16 = *((_QWORD *)this + 71);
          v17 = v16 + v4;
          v18 = *(_DWORD *)(v16 + v4 + 48) & 0xFFFFFFFE;
          v19.i32[0] = *(_DWORD *)(v16 + v4 + 52);
          if (isObjectRef)
          {
            if (v18 == 36)
            {
              v20 = (float *)(v16 + v4);
              *(float *)v24.i32 = *(float *)v19.i32 * v20[16];
              v23.i32[0] = v24.i32[0];
              *(float *)&v24.i32[1] = *(float *)(v17 + 52) * v20[17];
              v23.i32[1] = v24.i32[1];
              *(float *)&v24.i32[2] = *(float *)(v17 + 52) * v20[18];
              v23.i32[2] = v24.i32[2];
              v24.i32[3] = *(_DWORD *)(v17 + 52);
              v23.i32[3] = v24.i32[3];
            }
            else
            {
              v19 = vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
              v23 = v19;
              v24 = v19;
            }
            v19.i32[0] = *((_DWORD *)this + 105);
            *(float *)v15.i32 = 1.0 / *(float *)v19.i32;
            v25 = vdupq_lane_s32(v15, 0);
            v26 = v25;
            v27 = vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
            v28 = v27;
          }
          else
          {
            if (v18 == 36)
            {
              v21 = (float *)(v16 + v4);
              *(float *)v23.i32 = *(float *)v19.i32 * v21[16];
              *(float *)&v23.i32[1] = *(float *)(v17 + 52) * v21[17];
              *(float *)&v23.i32[2] = *(float *)(v17 + 52) * v21[18];
              v23.i32[3] = *(_DWORD *)(v17 + 52);
            }
            else
            {
              v19 = vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
              v23 = v19;
            }
            v19.i32[0] = *((_DWORD *)this + 105);
            *(float *)v15.i32 = 1.0 / *(float *)v19.i32;
            v24 = vdupq_lane_s32(v15, 0);
            v25 = vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
          }
          HGRenderer::RenderInput((uint64_t)v6, v5, (uint64_t)this, v8, (uint64_t)v7, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 1);
          HGHWBlendFlipped::RenderTile((float32x2_t *)this, a2, *(_DWORD *)(*((_QWORD *)this + 71) + v4 + 48), (float *)v23.i32);
        }
      }
      ++v8;
      v4 += 48;
    }
    while (v8 < *((int *)this + 22));
  }
  return 0;
}

uint64_t HGHWMultiBlend::PageBegin(HGNode *this, HGPage *a2, int a3, HGHandler *a4)
{
  return HGNode::PageBegin(this, a2, 0, 0);
}

char *HGHWMultiBlend::RenderPage(HGHWMultiBlend *this, HGPage *a2)
{
  const char *v4;
  HGRenderer *v5;
  char *Buffer;
  unsigned int *v7;
  HGNode *Input;
  HGBitmap *NodeBitmap;
  char *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  HGNode *v17;
  uint64_t DOD;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  float v23;
  _BOOL4 v24;
  uint64_t v25;
  HGPage *v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t Program;
  unsigned int *NodeTexture;
  int v34;
  char *v35;
  int v36;
  char *v37;
  int32x4_t *v38;
  uint64_t *v39;
  HGRect v40;
  uint64_t *v41;
  HGBitmap *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int32x4_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  HGRect v50;
  uint64_t v51;
  __int128 v53;
  int v54;
  char *v55;
  _OWORD *v56;
  unsigned int v57;
  _QWORD *v58;
  int v59;
  HGBitmap *v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char v67[16];
  char __str[256];
  uint64_t v69;
  HGRect v70;
  HGRect v71;
  HGRect v72;
  HGRect v73;
  HGRect v74;
  HGRect v75;
  HGRect v76;
  HGRect v77;
  HGRect v78;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = (const char *)(*(uint64_t (**)(HGHWMultiBlend *))(*(_QWORD *)this + 48))(this);
  v63 = (uint64_t *)((char *)a2 + 24);
  v64 = (uint64_t *)((char *)a2 + 16);
  snprintf(__str, 0x100uLL, "%s::RenderPage( [%d %d %d %d])", v4, *((_DWORD *)a2 + 4), *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 6), *((_DWORD *)a2 + 7));
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v67, "gpu", 1, __str);
  v5 = *(HGRenderer **)a2;
  Buffer = (char *)*((_QWORD *)a2 + 1);
  v7 = (unsigned int *)(Buffer + 16);
  if (!Buffer)
    v7 = (unsigned int *)((char *)a2 + 32);
  v57 = *v7;
  Input = HGRenderer::GetInput(v5, (HGNode *)this, *((_DWORD *)this + 107));
  if (Buffer)
  {
    (*(void (**)(char *))(*(_QWORD *)Buffer + 16))(Buffer);
  }
  else
  {
    Buffer = HGGPURenderer::CreateBuffer((uint64_t)v5, *((HGRect *)a2 + 1), v57, 0, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
    *((_QWORD *)a2 + 1) = Buffer;
  }
  *(_QWORD *)&v75.var0 = *v64;
  *(_QWORD *)&v75.var2 = *v63;
  NodeBitmap = HGGPURenderer::GetNodeBitmap(v5, Input, v75, (HGBuffer *)Buffer, 1u);
  v10 = (char *)NodeBitmap;
  if (NodeBitmap && NodeBitmap == (HGBitmap *)Buffer)
    HGRenderer::DotLogInplaceRendering(v5, Input);
  v11 = *((_DWORD *)this + 22);
  if (v11 < 2)
  {
    v51 = 0;
    if (!Buffer)
    {
LABEL_82:
      if (v51)
        goto LABEL_83;
      goto LABEL_84;
    }
LABEL_81:
    (*(void (**)(char *))(*(_QWORD *)Buffer + 24))(Buffer);
    goto LABEL_82;
  }
  v60 = (HGBitmap *)v10;
  v61 = 0;
  v12 = 0;
  v62 = 0;
  v59 = 0;
  v54 = *((_DWORD *)this + 106);
  v53 = *((_OWORD *)this + 31);
  v13 = *((_DWORD *)this + 104);
  v55 = (char *)this + 496;
  v56 = (_OWORD *)((char *)a2 + 36);
  v58 = (_QWORD *)((char *)a2 + 168);
  v14 = 1;
  v10 = Buffer;
  do
  {
    v15 = *((_QWORD *)this + 71);
    v16 = v15 + v12;
    if (*(float *)(v15 + v12 + 52) != 0.0)
    {
      v17 = HGRenderer::GetInput(v5, (HGNode *)this, v14);
      DOD = HGRenderer::GetDOD(v5, v17);
      v20 = HGRectIntersection(DOD, v19, *v64, *v63);
      v65 = v21;
      v66 = v20;
      if (HGRectIsNull(v20, v21))
        goto LABEL_14;
      *((_DWORD *)this + 106) = *(_DWORD *)(v16 + 48);
      *((_DWORD *)this + 104) = *(_DWORD *)(v16 + 52);
      *((_OWORD *)this + 31) = *(_OWORD *)(v15 + v12 + 64);
      if ((HGHWBlendFlipped::IsHardwareBlendSupported(this, v5) & 1) != 0)
      {
        if (!v62 && v60 && v60 != (HGBitmap *)v10)
        {
          *(_QWORD *)&v70.var0 = *v64;
          *(_QWORD *)&v70.var2 = *v63;
          v61 = HGGPURenderer::ConvertToGLTexture(v5, v70, v60);
        }
        if (!v10)
        {
          v10 = HGGPURenderer::CreateBuffer((uint64_t)v5, *((HGRect *)a2 + 1), v57, 0, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
          *((_QWORD *)a2 + 1) = v10;
          v59 = *(_DWORD *)(v15 + v12 + 56);
        }
        (*(void (**)(HGRenderer *, char *))(*(_QWORD *)v5 + 144))(v5, v10);
        if (!v62 && v60 != (HGBitmap *)v10)
        {
          (*(void (**)(HGRenderer *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 152))(v5, 0, v61, 0, 0);
          *(_QWORD *)&v71.var0 = *v64;
          *(_QWORD *)&v71.var2 = *v63;
          HGGPURenderer::Copy(v5, v71, 0, v22);
          (*(void (**)(HGRenderer *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 152))(v5, 0, 0, 0, 0);
          if (v60)
            (*(void (**)(HGBitmap *))(*(_QWORD *)v60 + 24))(v60);
          v60 = 0;
        }
        v23 = *((float *)this + 104);
        v24 = v23 != 1.0;
        if (HGNode::DoInplaceHardwareBlending(v17, v5, (HGNode *)this, v23))
        {
          (*(void (**)(HGNode *))(*(_QWORD *)v17 + 240))(v17);
          if (*((_DWORD *)this + 119))
            v25 = 41;
          else
            v25 = *((unsigned int *)this + 106);
          v43 = HGBlendingInfo::Get((HGBlendingInfo *)v25);
          (*(void (**)(HGNode *, uint64_t))(*(_QWORD *)v17 + 248))(v17, v43);
          (*(void (**)(HGNode *, float))(*(_QWORD *)v17 + 280))(v17, *((float *)this + 104));
          (*(void (**)(HGNode *, char *))(*(_QWORD *)v17 + 264))(v17, v55);
          *(_QWORD *)&v78.var2 = v65;
          *(_QWORD *)&v78.var0 = v66;
          v42 = HGGPURenderer::GetNodeBitmap(v5, v17, v78, (HGBuffer *)v10, 1u);
          HGNode::DisableInplaceHardwareBlending(v17);
          HGRenderer::DotLogHWBlending(v5, v17, (HGNode *)this, 1);
          v24 = 0;
          if (!v42)
            goto LABEL_11;
        }
        else
        {
          *(_QWORD *)&v77.var2 = v65;
          *(_QWORD *)&v77.var0 = v66;
          v42 = HGGPURenderer::GetNodeBitmap(v5, v17, v77, 0, 1u);
          if (!v42)
            goto LABEL_11;
        }
        if (v42 != (HGBitmap *)v10)
        {
          *(_QWORD *)&v73.var2 = v65;
          *(_QWORD *)&v73.var0 = v66;
          v44 = HGGPURenderer::ConvertToGLTexture(v5, v73, v42);
          (*(void (**)(HGRenderer *, char *))(*(_QWORD *)v5 + 144))(v5, v10);
          (*(void (**)(HGRenderer *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 152))(v5, 0, v44, 0, 0);
          if (v24)
          {
            v45 = (*(uint64_t (**)(HGHWMultiBlend *, HGRenderer *))(*(_QWORD *)this + 600))(this, v5);
            v46 = (int32x4_t *)(*(uint64_t (**)(HGRenderer *, uint64_t, HGHWMultiBlend *))(*(_QWORD *)v5 + 376))(v5, v45, this);
            *((_BYTE *)this + 481) = 1;
            *(_QWORD *)((char *)a2 + 36) = v66;
            *(_QWORD *)((char *)a2 + 44) = v65;
            *((_QWORD *)a2 + 21) = v44;
            HGNode::PageBegin((HGNode *)this, a2, 0, v46);
            *((_BYTE *)this + 481) = 0;
          }
          else
          {
            v46 = 0;
          }
          (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)this + 240))(this);
          if (*((_DWORD *)this + 119))
            v47 = 41;
          else
            v47 = *((unsigned int *)this + 106);
          v48 = HGBlendingInfo::Get((HGBlendingInfo *)v47);
          (*(void (**)(HGHWMultiBlend *, uint64_t))(*(_QWORD *)this + 248))(this, v48);
          (*(void (**)(HGHWMultiBlend *, char *))(*(_QWORD *)this + 264))(this, v55);
          (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)this + 344))(this);
          *(_QWORD *)&v50.var2 = v65;
          *(_QWORD *)&v50.var0 = v66;
          if (v46)
          {
            HGGPURenderer::Rect(v5, (HGHandler *)v46, v50, 1);
          }
          else
          {
            *(_QWORD *)&v74.var0 = v66;
            *(_QWORD *)&v74.var2 = v65;
            HGGPURenderer::Copy(v5, v74, 0, v49);
          }
          (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)this + 352))(this);
          HGNode::DisableInplaceHardwareBlending((HGNode *)this);
          if (v46)
            (*(void (**)(HGHWMultiBlend *, HGPage *, _QWORD, int32x4_t *))(*(_QWORD *)this + 496))(this, a2, 0, v46);
          (*(void (**)(HGRenderer *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 152))(v5, 0, 0, 0, 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
          *v58 = 0;
          v58[1] = 0;
          HGRenderer::DotLogHWBlending(v5, v17, (HGNode *)this, 0);
          goto LABEL_12;
        }
LABEL_11:
        if (!v42)
        {
LABEL_13:
          ++v62;
LABEL_14:
          v11 = *((_DWORD *)this + 22);
          goto LABEL_15;
        }
LABEL_12:
        (*(void (**)(HGBitmap *))(*(_QWORD *)v42 + 24))(v42);
        goto LABEL_13;
      }
      v26 = a2;
      v27 = v15 + v12;
      v28 = *(_DWORD *)(v27 + 56);
      if (!v62)
      {
        v29 = (char *)v60;
        if (!v60)
        {
LABEL_37:
          if (v59 != v28 && v62 != 0 || v29 == v10)
          {
            (*(void (**)(HGRenderer *, _QWORD))(*(_QWORD *)v5 + 144))(v5, 0);
            (*(void (**)(HGRenderer *, char *))(*(_QWORD *)v5 + 144))(v5, v10);
            if (v61)
              (*(void (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61);
            v61 = (*(uint64_t (**)(HGRenderer *))(*(_QWORD *)v5 + 328))(v5);
            (*(void (**)(HGRenderer *, _QWORD))(*(_QWORD *)v5 + 144))(v5, 0);
            if (v10)
            {
              (*(void (**)(char *))(*(_QWORD *)v10 + 24))(v10);
              v10 = 0;
            }
          }
          Program = HGHWBlendFlipped::GetProgram(this, v5);
          *(_QWORD *)&v76.var2 = v65;
          *(_QWORD *)&v76.var0 = v66;
          NodeTexture = HGGPURenderer::GetNodeTexture(v5, v17, v76, 0, 1u);
          v34 = v59;
          v35 = v10;
          if (!v10)
          {
            v35 = HGGPURenderer::CreateBuffer((uint64_t)v5, *((HGRect *)v26 + 1), v57, 0, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)v26 + 248));
            *((_QWORD *)v26 + 1) = v35;
            v34 = *(_DWORD *)(v27 + 56);
          }
          v36 = v34;
          v37 = v35;
          (*(void (**)(HGRenderer *))(*(_QWORD *)v5 + 144))(v5);
          v38 = (int32x4_t *)(*(uint64_t (**)(HGRenderer *, uint64_t, HGHWMultiBlend *))(*(_QWORD *)v5 + 376))(v5, Program, this);
          (*(void (**)(HGRenderer *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 152))(v5, 0, v61, 0, 0);
          (*(void (**)(HGRenderer *, uint64_t, unsigned int *, _QWORD, _QWORD))(*(_QWORD *)v5 + 152))(v5, 1, NodeTexture, 0, 0);
          *v56 = *(_OWORD *)v64;
          *(_QWORD *)((char *)v26 + 52) = v66;
          *(_QWORD *)((char *)v26 + 60) = v65;
          *((_QWORD *)v26 + 21) = v61;
          *((_QWORD *)v26 + 22) = NodeTexture;
          HGNode::PageBegin((HGNode *)this, v26, 0, v38);
          v39 = v64;
          if (v59 == v28)
            v39 = &v66;
          *(_QWORD *)&v40.var0 = *v39;
          v41 = v63;
          if (v59 == v28)
            v41 = &v65;
          *(_QWORD *)&v40.var2 = *v41;
          HGGPURenderer::Rect(v5, (HGHandler *)v38, v40, 2);
          (*(void (**)(HGHWMultiBlend *, HGPage *, _QWORD, int32x4_t *))(*(_QWORD *)this + 496))(this, v26, 0, v38);
          (*(void (**)(HGRenderer *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 152))(v5, 0, 0, 0, 0);
          (*(void (**)(HGRenderer *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 152))(v5, 1, 0, 0, 0);
          (*(void (**)(unsigned int *))(*(_QWORD *)NodeTexture + 24))(NodeTexture);
          *v58 = 0;
          v58[1] = 0;
          v59 = v36;
          a2 = v26;
          v10 = v37;
          goto LABEL_13;
        }
        *(_QWORD *)&v72.var0 = *v64;
        *(_QWORD *)&v72.var2 = *v63;
        v61 = HGGPURenderer::ConvertToGLTexture(v5, v72, v60);
      }
      v29 = (char *)v60;
      goto LABEL_37;
    }
LABEL_15:
    ++v14;
    v12 += 48;
  }
  while (v14 < v11);
  *((_DWORD *)this + 106) = v54;
  *((_DWORD *)this + 104) = v13;
  *((_OWORD *)this + 31) = v53;
  if (!v62)
  {
    Buffer = v10;
    v10 = (char *)v60;
    v51 = v61;
    if (!Buffer)
      goto LABEL_82;
    goto LABEL_81;
  }
  v51 = v61;
  if (v60)
    (*(void (**)(HGBitmap *))(*(_QWORD *)v60 + 24))(v60);
  if (v61)
LABEL_83:
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
LABEL_84:
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v67);
  return v10;
}

void sub_1B2AE4A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B2AE4B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a31);
  _Unwind_Resume(a1);
}

void *HGHWMultiBlend::RenderPageMetal(HGHWMultiBlend *this, HGRect *a2)
{
  const char *v4;
  HGRenderer *v5;
  char *Buffer;
  HGRect *v7;
  HGNode *Input;
  int v9;
  HGBitmap *v10;
  const char *v11;
  char *v12;
  unsigned __int8 v13;
  HGBitmap *NodeBitmap;
  HGBitmap *v15;
  int v16;
  int v17;
  unint64_t v18;
  HGRenderer *v19;
  uint64_t v20;
  _DWORD *v21;
  float v22;
  HGNode *v23;
  uint64_t DOD;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  unint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  const char *v38;
  const char *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  HGNode *v44;
  int v45;
  signed int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  char v50;
  unsigned __int8 v51;
  signed int v52;
  HGNode *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned __int8 v64;
  BOOL v65;
  unsigned __int8 v66;
  const char *v67;
  const char *v68;
  const char *v69;
  const char *v70;
  int v71;
  int v72;
  unsigned __int8 v73;
  HGBitmap *v75;
  const char *v76;
  char *v77;
  HGBitmap *v78;
  unsigned __int8 v79;
  _QWORD *v80;
  HGBitmap *v81;
  _QWORD *v82;
  uint64_t v83;
  __n128 *v84;
  __n128 *v85;
  __n128 v86;
  char IsHardwareBlendSupported;
  const char *v88;
  char *v89;
  uint64_t v90;
  unsigned __int32 v91;
  int *v92;
  unsigned __int8 v93;
  const char *v94;
  HGBitmap *v95;
  int v96;
  unsigned __int8 v97;
  const char *v98;
  char *v99;
  HGBitmap *v102;
  HGBuffer *v103;
  float v104;
  _BOOL4 v105;
  const char *v106;
  char *v107;
  unsigned __int8 v108;
  uint64_t v109;
  HGBitmap *v110;
  BOOL v111;
  HGNode *v112;
  uint8x8_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t Program;
  uint8x8_t v117;
  unint64_t v118;
  uint64_t **v119;
  uint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  HGBitmap *v125;
  HGBitmap *v126;
  HGTexture *v127;
  HGBitmap *v128;
  HGTexture *v129;
  const void *v130;
  std::string *v131;
  const char *v132;
  char *v133;
  std::string *v134;
  unsigned __int8 v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  HGBitmap *v144;
  BOOL v145;
  const char *v146;
  char *v147;
  HGBitmap *v148;
  uint64_t v149;
  const void *v150;
  const char *v151;
  char *v152;
  std::string *v153;
  unsigned __int8 v154;
  const HGBlendingInfo *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 v158;
  uint64_t v159;
  uint64_t v160;
  const HGBlendingInfo *v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  void *v165;
  _QWORD *v166;
  void *v167;
  _QWORD *v169;
  uint64_t v170;
  int v171;
  int *p_var1;
  char *v173;
  int v174;
  __int128 v175;
  HGNode *v176;
  unsigned int var0;
  _QWORD *v178;
  HGPage *v179;
  _DWORD *v180;
  HGBitmap *v181;
  int v182;
  HGBitmap *v183;
  char *v184;
  int v185;
  HGGPURenderer *v186;
  HGBitmap *v187;
  uint64_t *p_var2;
  uint64_t v189;
  uint64_t *p_var0;
  HGNode *v191;
  std::string v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  void *v196[2];
  void *__p[2];
  int v198;
  _BYTE v199[23];
  unsigned int *v200;
  char __str[256];
  uint64_t v202;
  HGRect v203;
  HGRect v204;
  HGRect v205;
  HGRect v206;
  HGRect v207;
  HGRect v208;
  HGRect v209;
  HGRect v210;
  HGRect v211;
  HGRect v212;
  HGRect v213;

  v202 = *MEMORY[0x1E0C80C00];
  v4 = (const char *)(*(uint64_t (**)(HGHWMultiBlend *))(*(_QWORD *)this + 48))(this);
  p_var0 = (uint64_t *)&a2[1].var0;
  p_var2 = (uint64_t *)&a2[1].var2;
  snprintf(__str, 0x100uLL, "%s::RenderPageMetal( [%d %d %d %d])", v4, a2[1].var0, a2[1].var1, a2[1].var2, a2[1].var3);
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v199, "gpu", 1, __str);
  v5 = *(HGRenderer **)&a2->var0;
  Buffer = *(char **)&a2->var2;
  v7 = (HGRect *)(Buffer + 16);
  if (!Buffer)
    v7 = a2 + 2;
  var0 = v7->var0;
  Input = HGRenderer::GetInput(v5, (HGNode *)this, *((_DWORD *)this + 107));
  v186 = v5;
  v9 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)v5 + 128))(v5, 46);
  if (!Buffer || (Buffer[12] & 1) != 0)
    Buffer = HGGPURenderer::CreateBuffer((uint64_t)v5, a2[1], var0, 1, 0, LOBYTE(a2[15].var2));
  else
    (*(void (**)(char *))(*(_QWORD *)Buffer + 16))(Buffer);
  v10 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v5, (HGBitmap *)Buffer);
  v187 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBuffer::HGBuffer((HGBuffer *)v187, *(HGRect *)(Buffer + 20), v10);
  (*(void (**)(HGBitmap *))(*(_QWORD *)v10 + 24))(v10);
  v13 = atomic_load(HGLogger::_enabled);
  if ((v13 & 1) != 0)
    HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"RENDER INPUT : GetNodeBitmap(0)\n", v11, v12);
  *(_QWORD *)&v207.var0 = *p_var0;
  *(_QWORD *)&v207.var2 = *p_var2;
  NodeBitmap = HGGPURenderer::GetNodeBitmap(v186, Input, v207, (HGBuffer *)v187, 1u);
  v15 = NodeBitmap;
  if (NodeBitmap && NodeBitmap == v187)
    HGRenderer::DotLogInplaceRendering(v186, Input);
  v183 = v15;
  v184 = Buffer;
  v174 = *((_DWORD *)this + 106);
  v175 = *((_OWORD *)this + 31);
  v16 = *((_DWORD *)this + 104);
  *(_OWORD *)v196 = 0u;
  *(_OWORD *)__p = 0u;
  v198 = 1065353216;
  v17 = *((_DWORD *)this + 22);
  v191 = (HGNode *)this;
  if (v17 >= 2)
  {
    v171 = v9;
    v181 = 0;
    v185 = 0;
    v182 = 0;
    v178 = &a2[10].var2;
    v179 = (HGPage *)a2;
    p_var1 = &a2[2].var1;
    v173 = (char *)this + 496;
    v18 = 1;
    v19 = v186;
    while (1)
    {
      v189 = *((_QWORD *)v191 + 71);
      v20 = v189 + 48 * v18;
      v22 = *(float *)(v20 + 4);
      v21 = (_DWORD *)(v20 + 4);
      if (v22 != 0.0)
      {
        v23 = HGRenderer::GetInput(v19, v191, v18);
        DOD = HGRenderer::GetDOD(v19, v23);
        v26 = HGRectIntersection(DOD, v25, *p_var0, *p_var2);
        v194 = v27;
        v195 = v26;
        if (!HGRectIsNull(v26, v27))
        {
          v180 = (_DWORD *)(v189 + 48 * v18);
          if (!v196[1])
            goto LABEL_35;
          v30 = (uint8x8_t)vcnt_s8((int8x8_t)v196[1]);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            v31 = v18;
            if (v196[1] <= (void *)v18)
              v31 = v18 % (unint64_t)v196[1];
          }
          else
          {
            v31 = ((unint64_t)v196[1] + 0x7FFFFFFF) & v18;
          }
          v32 = (uint64_t **)*((_QWORD *)v196[0] + v31);
          if (!v32)
          {
LABEL_35:
            v33 = 0;
            v35 = atomic_load(HGLogger::_enabled);
            if ((v35 & 1) != 0)
              goto LABEL_43;
            goto LABEL_46;
          }
          v33 = *v32;
          if (!*v32)
            goto LABEL_42;
          if (v30.u32[0] >= 2uLL)
          {
            while (1)
            {
              v34 = v33[1];
              if (v34 == v18)
              {
                if (v18 == *((_DWORD *)v33 + 4))
                  goto LABEL_42;
              }
              else
              {
                if ((void *)v34 >= v196[1])
                  v34 %= (unint64_t)v196[1];
                if (v34 != v31)
                  goto LABEL_35;
              }
              v33 = (uint64_t *)*v33;
              if (!v33)
                goto LABEL_42;
            }
          }
          while (2)
          {
            v36 = v33[1];
            if (v36 == v18)
            {
              if (v18 == *((_DWORD *)v33 + 4))
                goto LABEL_42;
            }
            else if ((v36 & ((uint64_t)v196[1] - 1)) != v31)
            {
              v33 = 0;
LABEL_42:
              v37 = atomic_load(HGLogger::_enabled);
              if ((v37 & 1) != 0)
              {
LABEL_43:
                v38 = "NO";
                if (v33)
                  v38 = "YES";
                HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"layer #%d -- input already rendered ? %s\n", v28, v29, v18, v38);
              }
LABEL_46:
              if (!v33)
              {
                HGTraceGuard::HGTraceGuard((HGTraceGuard *)&v192, "multiblend", 1, "PreRenderInputs");
                v176 = v23;
                if (__p[1])
                {
                  v41 = __p[0];
                  if (__p[0])
                  {
                    do
                    {
                      v82 = (_QWORD *)*v41;
                      v83 = v41[3];
                      if (v83)
                        (*(void (**)(uint64_t))(*(_QWORD *)v83 + 24))(v83);
                      operator delete(v41);
                      v41 = v82;
                    }
                    while (v82);
                  }
                  __p[0] = 0;
                  v42 = (char *)v196[1];
                  if (v196[1])
                  {
                    v43 = 0;
                    do
                      *((_QWORD *)v196[0] + (_QWORD)v43++) = 0;
                    while (v42 != v43);
                  }
                  __p[1] = 0;
                }
                v193 = v18;
                v44 = v191;
                if ((uint64_t)v18 < *((int *)v191 + 22))
                {
                  v45 = 0;
                  v46 = v18;
                  do
                  {
                    v47 = *((_QWORD *)v44 + 71);
                    v48 = v47 + 48 * v46;
                    v50 = *(_BYTE *)(v48 + 32);
                    v49 = (unsigned int *)(v48 + 32);
                    if ((v50 & 1) == 0)
                    {
                      v51 = atomic_load(HGLogger::_enabled);
                      if ((v51 & 1) != 0)
                        HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"layer #%d -- null layer\n", v39, v40, v193);
                      goto LABEL_55;
                    }
                    v52 = v46;
                    v53 = HGRenderer::GetInput(v186, v44, v46);
                    v54 = HGRenderer::GetDOD(v186, v53);
                    v56 = HGRectIntersection(v54, v55, *p_var0, *p_var2);
                    v58 = v57;
                    if (HGRectIsNull(v56, v57))
                    {
                      v59 = atomic_load(HGLogger::_enabled);
                      if ((v59 & 1) != 0)
                        HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"layer #%d -- null ROI\n", v39, v40, v193);
                      goto LABEL_55;
                    }
                    v60 = v193;
                    v61 = *v49;
                    v62 = *(_DWORD *)(v47 + 48 * v52 + 8);
                    if (v18 == v193 && (v61 & 8) != 0)
                    {
                      v63 = 1;
                      v64 = atomic_load(HGLogger::_enabled);
                      if ((v64 & 1) != 0)
                        goto LABEL_73;
                    }
                    else
                    {
                      if (v62)
                        v65 = v62 == v45;
                      else
                        v65 = 0;
                      v63 = v65;
                      v66 = atomic_load(HGLogger::_enabled);
                      if ((v66 & 1) != 0)
                      {
LABEL_73:
                        v67 = "N";
                        if (v18 == v193)
                          v68 = "Y";
                        else
                          v68 = "N";
                        if ((v61 & 2) != 0)
                          v69 = "Y";
                        else
                          v69 = "N";
                        if (v63)
                          v70 = "Y";
                        else
                          v70 = "N";
                        if ((v61 & 4) != 0)
                          v67 = "Y";
                        HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"next layer #%d -- newGroup(%s), hardware(%s), sharedPass(%s), inplace(%s)\n", v39, v40, v193, v68, v69, v70, v67);
                      }
                    }
                    v71 = (v61 >> 1) & 1;
                    if (v18 == v60)
                      v71 = 1;
                    v72 = v71 | v63;
                    v73 = atomic_load(HGLogger::_enabled);
                    if (v72 != 1 || (v61 & 4) != 0)
                    {
                      if ((v73 & 1) != 0)
                        HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"  break. done rendering inputs (total = %lu).\n", v39, v40, __p[1]);
                      break;
                    }
                    if ((v73 & 1) != 0)
                      HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"  RENDER INPUT : GetNodeBitmap(%d)\n", v39, v40, v193);
                    *(_QWORD *)&v208.var0 = v56;
                    *(_QWORD *)&v208.var2 = v58;
                    v75 = HGGPURenderer::GetNodeBitmap(v186, v53, v208, 0, 1u);
                    *(_QWORD *)&v203.var0 = v56;
                    *(_QWORD *)&v203.var2 = v58;
                    v78 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v186, v203, v75);
                    v79 = atomic_load(HGLogger::_enabled);
                    if ((v79 & 1) != 0)
                      HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"    result bitmap : %p [%d %d %d %d]\n", v76, v77, v75, *((unsigned int *)v75 + 5), *((unsigned int *)v75 + 6), *((unsigned int *)v75 + 7), *((unsigned int *)v75 + 8));
                    if (v78)
                      (*(void (**)(HGBitmap *))(*(_QWORD *)v78 + 16))(v78);
                    v200 = &v193;
                    v80 = std::__hash_table<std::__hash_value_type<int,HGRef<HGBitmap>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,HGRef<HGBitmap>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,HGRef<HGBitmap>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,HGRef<HGBitmap>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v196, (int *)&v193, (uint64_t)&std::piecewise_construct, &v200);
                    v81 = (HGBitmap *)v80[3];
                    if (v81 == v78)
                    {
                      if (v78)
                        (*(void (**)(HGBitmap *))(*(_QWORD *)v78 + 24))(v78);
                    }
                    else
                    {
                      if (v81)
                        (*(void (**)(HGBitmap *))(*(_QWORD *)v81 + 24))(v81);
                      v80[3] = v78;
                    }
                    (*(void (**)(HGBitmap *))(*(_QWORD *)v78 + 24))(v78);
                    (*(void (**)(HGBitmap *))(*(_QWORD *)v75 + 24))(v75);
                    v45 = v62;
LABEL_55:
                    v46 = v193 + 1;
                    v193 = v46;
                    v44 = v191;
                  }
                  while (v46 < *((_DWORD *)v191 + 22));
                }
                HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&v192);
                v19 = v186;
                v23 = v176;
              }
              *((_DWORD *)v191 + 106) = *v180;
              *((_DWORD *)v191 + 104) = *v21;
              v84 = (__n128 *)(v189 + 48 * v18);
              v86 = v84[1];
              v85 = v84 + 1;
              *((__n128 *)v191 + 31) = v86;
              IsHardwareBlendSupported = HGHWBlendFlipped::IsHardwareBlendSupported((HGHWBlendFlipped *)v191, v19);
              v90 = v189 + 48 * v18;
              v86.n128_u32[0] = *(_DWORD *)(v90 + 8);
              v92 = (int *)(v90 + 8);
              v91 = v86.n128_u32[0];
              if ((IsHardwareBlendSupported & 1) != 0)
              {
                v93 = atomic_load(HGLogger::_enabled);
                if ((v93 & 1) != 0)
                {
                  v94 = "NO";
                  if (v182 == v91)
                    v94 = "YES";
                  HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"  RENDER LAYER %d -- hw blending (same pass = %s)\n", v88, v89, v18, v94);
                }
                if (v185)
                {
LABEL_120:
                  v95 = v187;
                }
                else
                {
                  v95 = v187;
                  if (v183 && v183 != v187)
                  {
                    v181 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v19, v183);
                    goto LABEL_120;
                  }
                }
                if (v184)
                {
                  v96 = v182;
                  v187 = v95;
                  if (v185)
                    goto LABEL_156;
LABEL_152:
                  if (v183 != v95)
                  {
                    *(_QWORD *)&v209.var0 = *p_var0;
                    *(_QWORD *)&v209.var2 = *p_var2;
                    HGGPURenderer::CopyMetal(v19, v95, v209, v181);
                    if (v183)
                      (*(void (**)(HGBitmap *))(*(_QWORD *)v183 + 24))(v183);
                    v183 = 0;
                  }
                }
                else
                {
                  v184 = HGGPURenderer::CreateBuffer((uint64_t)v19, *((HGRect *)v179 + 1), var0, 1, 0, *((unsigned __int8 *)v179 + 248));
                  if (v187)
                    (*(void (**)(HGBitmap *))(*(_QWORD *)v187 + 24))(v187);
                  v102 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v19, (HGBitmap *)v184);
                  v103 = (HGBuffer *)HGObject::operator new(0x80uLL);
                  HGBuffer::HGBuffer(v103, *(HGRect *)(v184 + 20), v102);
                  (*(void (**)(HGBitmap *))(*(_QWORD *)v102 + 24))(v102);
                  v96 = *v92;
                  v95 = (HGBitmap *)v103;
                  v187 = (HGBitmap *)v103;
                  if (!v185)
                    goto LABEL_152;
                }
LABEL_156:
                v104 = *((float *)v191 + 104);
                v105 = v104 != 1.0;
                if (HGNode::DoInplaceHardwareBlending(v23, v19, v191, v104))
                {
                  v108 = atomic_load(HGLogger::_enabled);
                  if ((v108 & 1) != 0)
                    HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"  great! using in-place input rendering as well!\n", v106, v107);
                  (*(void (**)(HGNode *))(*(_QWORD *)v23 + 240))(v23);
                  v109 = HGBlendingInfo::Get((HGBlendingInfo *)*v180);
                  (*(void (**)(HGNode *, uint64_t))(*(_QWORD *)v23 + 248))(v23, v109);
                  (*(void (**)(HGNode *, float))(*(_QWORD *)v23 + 280))(v23, *((float *)v191 + 104));
                  (*(void (**)(HGNode *, char *))(*(_QWORD *)v23 + 264))(v23, v173);
                  *(_QWORD *)&v210.var2 = v194;
                  *(_QWORD *)&v210.var0 = v195;
                  v110 = HGGPURenderer::GetNodeBitmap(v19, v23, v210, (HGBuffer *)v187, 1u);
                  HGNode::DisableInplaceHardwareBlending(v23);
                  HGRenderer::DotLogHWBlending(v19, v23, v191, 1);
                  v105 = 0;
                  if (v110)
                    v111 = v110 == v187;
                  else
                    v111 = 1;
                  if (v111)
                    goto LABEL_164;
LABEL_234:
                  *(_QWORD *)&v205.var2 = v194;
                  *(_QWORD *)&v205.var0 = v195;
                  v148 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v19, v205, v110);
                  if (v105)
                  {
                    v149 = (*(uint64_t (**)(HGNode *, HGRenderer *))(*(_QWORD *)v191 + 608))(v191, v19);
                    if (v149
                      && (v150 = (const void *)(*(uint64_t (**)(_QWORD, uint64_t, HGNode *))(**(_QWORD **)v179 + 376))(*(_QWORD *)v179, v149, v191)) != 0)
                    {
                      if (v153)
                      {
                        v154 = atomic_load(HGLogger::_enabled);
                        if ((v154 & 1) != 0)
                          HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"  hw blend render pass -- with opacity\n", v151, v152);
                        *((_BYTE *)&v192.__r_.__value_.__s + 23) = 13;
                        strcpy((char *)&v192, "mblendInplace");
                        HGMetalHandler::SetDebugLabel(v153, &v192);
                        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v192.__r_.__value_.__l.__data_);
                        HGMetalHandler::EnableBlending((uint64_t)v153);
                        v155 = (const HGBlendingInfo *)HGBlendingInfo::Get((HGBlendingInfo *)*v180);
                        HGMetalHandler::SetBlendingInfo((HGMetalHandler *)v153, v155);
                        HGMetalHandler::SetBlendingColor((__n128 *)v153, v85);
                        (*(void (**)(std::string *, _QWORD, float, float, float, float))(v153->__r_.__value_.__r.__words[0]
                                                                                                  + 136))(v153, 0, *((float *)v191 + 104), *((float *)v191 + 104), *((float *)v191 + 104), *((float *)v191 + 104));
                        HGMetalHandler::BindBuffer((HGMetalHandler *)v153, v187);
                        HGMetalHandler::BindTexture((HGMetalTexture ***)v153, 0, v148);
                        v156 = v194;
                        v157 = v195;
                        *(_QWORD *)&v206.var0 = v195;
                        *(_QWORD *)&v206.var2 = v194;
                        HGMetalHandler::InitTextureUnit((HGMetalHandler *)v153, v206, 0);
                        (*(void (**)(std::string *, _QWORD, _QWORD))(v153->__r_.__value_.__r.__words[0] + 72))(v153, 0, 0);
                        (*(void (**)(std::string *, _QWORD, _QWORD))(v153->__r_.__value_.__r.__words[0] + 48))(v153, 0, 0);
                        HGHandler::TexCoord((HGHandler *)v153, 0, 0, 0, 0);
                        if (!v171)
                          (*(void (**)(std::string *))(v153->__r_.__value_.__r.__words[0] + 168))(v153);
                        (*(void (**)(std::string *))(v153->__r_.__value_.__r.__words[0] + 40))(v153);
                        (*(void (**)(std::string *, uint64_t, uint64_t, uint64_t))(v153->__r_.__value_.__r.__words[0]
                                                                                         + 192))(v153, v157, v156, 1);
                      }
                    }
                    else
                    {
                      v153 = 0;
                    }
                    (*(void (**)(HGNode *, HGPage *, _QWORD, std::string *))(*(_QWORD *)v191 + 496))(v191, v179, 0, v153);
                    (*(void (**)(HGBitmap *))(*(_QWORD *)v148 + 24))(v148);
                  }
                  else
                  {
                    v158 = atomic_load(HGLogger::_enabled);
                    if ((v158 & 1) != 0)
                      HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"  hw blend render pass -- no opacity\n", v146, v147);
                    v160 = v194;
                    v159 = v195;
                    v161 = (const HGBlendingInfo *)HGBlendingInfo::Get((HGBlendingInfo *)*v180);
                    *(_QWORD *)&v213.var0 = v159;
                    *(_QWORD *)&v213.var2 = v160;
                    HGGPURenderer::CopyMetal(v19, v187, v213, (char *)v148, v161, v85, 1);
                    (*(void (**)(HGBitmap *))(*(_QWORD *)v148 + 24))(v148);
                  }
                  *v178 = 0;
                  v178[1] = 0;
                  HGRenderer::DotLogHWBlending(v19, v23, v191, 0);
                  goto LABEL_251;
                }
                v112 = v23;
                if (!v196[1])
                  goto LABEL_230;
                v113 = (uint8x8_t)vcnt_s8((int8x8_t)v196[1]);
                v113.i16[0] = vaddlv_u8(v113);
                if (v113.u32[0] > 1uLL)
                {
                  v114 = v18;
                  if (v196[1] <= (void *)v18)
                    v114 = v18 % (unint64_t)v196[1];
                }
                else
                {
                  v114 = ((unint64_t)v196[1] + 0x7FFFFFFF) & v18;
                }
                v140 = (uint64_t **)*((_QWORD *)v196[0] + v114);
                if (!v140 || (v141 = *v140) == 0)
                {
LABEL_230:
                  *(_QWORD *)&v212.var2 = v194;
                  *(_QWORD *)&v212.var0 = v195;
                  v144 = HGGPURenderer::GetNodeBitmap(v19, v112, v212, 0, 1u);
                  v110 = v144;
                  v23 = v112;
                  if (v144)
                    v145 = v144 == v187;
                  else
                    v145 = 1;
                  if (!v145)
                    goto LABEL_234;
                  goto LABEL_164;
                }
                if (v113.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v143 = v141[1];
                    if (v143 == v18)
                    {
                      if (v18 == *((_DWORD *)v141 + 4))
                        goto LABEL_254;
                    }
                    else if ((v143 & ((uint64_t)v196[1] - 1)) != v114)
                    {
                      goto LABEL_230;
                    }
                    v141 = (uint64_t *)*v141;
                    if (!v141)
                      goto LABEL_230;
                  }
                }
                while (1)
                {
                  v142 = v141[1];
                  if (v142 == v18)
                  {
                    if (v18 == *((_DWORD *)v141 + 4))
                    {
LABEL_254:
                      v163 = v141[3];
                      if (!v163)
                        goto LABEL_15;
                      (*(void (**)(uint64_t))(*(_QWORD *)v163 + 16))(v163);
                      v110 = (HGBitmap *)v141[3];
                      v23 = v112;
                      if (v110)
                        v164 = v110 == v187;
                      else
                        v164 = 1;
                      if (!v164)
                        goto LABEL_234;
LABEL_164:
                      if (!v110)
                      {
LABEL_15:
                        ++v185;
                        v182 = v96;
                        goto LABEL_16;
                      }
LABEL_251:
                      (*(void (**)(HGBitmap *))(*(_QWORD *)v110 + 24))(v110);
                      goto LABEL_15;
                    }
                  }
                  else
                  {
                    if ((void *)v142 >= v196[1])
                      v142 %= (unint64_t)v196[1];
                    if (v142 != v114)
                      goto LABEL_230;
                  }
                  v141 = (uint64_t *)*v141;
                  if (!v141)
                    goto LABEL_230;
                }
              }
              v97 = atomic_load(HGLogger::_enabled);
              if ((v97 & 1) != 0)
              {
                v98 = "NO";
                if (v182 == v91)
                  v98 = "YES";
                HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"BLEND LAYER %d -- shader blending (same pass = %s)\n", v88, v89, v18, v98);
              }
              if (v185 || !v183)
              {
                if (v182 != v91 && v185 != 0 || v183 == v187)
                {
                  if (v181)
                    (*(void (**)(HGBitmap *, HGBitmap *))(*(_QWORD *)v181 + 24))(v181, v183);
                  v181 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v19, v187);
                  if (v187)
                    (*(void (**)(HGBitmap *))(*(_QWORD *)v187 + 24))(v187);
                  v99 = v184;
                  if (v184)
LABEL_147:
                    (*(void (**)(char *))(*(_QWORD *)v184 + 24))(v99);
LABEL_148:
                  v187 = 0;
                  v184 = 0;
                }
              }
              else
              {
                v181 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v19, v183);
                if (v187)
                {
                  if (v187 == v183)
                  {
                    (*(void (**)(HGBitmap *))(*(_QWORD *)v187 + 24))(v187);
                    v99 = v184;
                    if (v184)
                      goto LABEL_147;
                    goto LABEL_148;
                  }
                }
                else
                {
                  v187 = 0;
                }
              }
              v115 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)v19 + 128))(v19, 32);
              (*(void (**)(HGRenderer *, uint64_t, uint64_t))(*(_QWORD *)v19 + 120))(v19, 32, 396048);
              Program = HGHWBlendFlipped::GetProgram((HGHWBlendFlipped *)v191, v19);
              (*(void (**)(HGRenderer *, uint64_t, uint64_t))(*(_QWORD *)v19 + 120))(v19, 32, v115);
              if (!v196[1])
                goto LABEL_190;
              v117 = (uint8x8_t)vcnt_s8((int8x8_t)v196[1]);
              v117.i16[0] = vaddlv_u8(v117);
              if (v117.u32[0] > 1uLL)
              {
                v118 = v18;
                if (v196[1] <= (void *)v18)
                  v118 = v18 % (unint64_t)v196[1];
              }
              else
              {
                v118 = ((unint64_t)v196[1] + 0x7FFFFFFF) & v18;
              }
              v119 = (uint64_t **)*((_QWORD *)v196[0] + v118);
              if (!v119 || (v120 = *v119) == 0)
              {
LABEL_190:
                v124 = v194;
                v123 = v195;
                *(_QWORD *)&v211.var0 = v195;
                *(_QWORD *)&v211.var2 = v194;
                v125 = HGGPURenderer::GetNodeBitmap(v19, v23, v211, 0, 1u);
                goto LABEL_191;
              }
              if (v117.u32[0] < 2uLL)
              {
                while (1)
                {
                  v122 = v120[1];
                  if (v122 == v18)
                  {
                    if (v18 == *((_DWORD *)v120 + 4))
                      goto LABEL_252;
                  }
                  else if ((v122 & ((uint64_t)v196[1] - 1)) != v118)
                  {
                    goto LABEL_190;
                  }
                  v120 = (uint64_t *)*v120;
                  if (!v120)
                    goto LABEL_190;
                }
              }
              while (1)
              {
                v121 = v120[1];
                if (v121 == v18)
                {
                  if (v18 == *((_DWORD *)v120 + 4))
                  {
LABEL_252:
                    v162 = v120[3];
                    if (v162)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v162 + 16))(v162);
                      v125 = (HGBitmap *)v120[3];
                    }
                    else
                    {
                      v125 = 0;
                    }
                    v124 = v194;
                    v123 = v195;
LABEL_191:
                    *(_QWORD *)&v204.var0 = v123;
                    *(_QWORD *)&v204.var2 = v124;
                    v126 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v19, v204, v125);
                    (*(void (**)(HGBitmap *))(*(_QWORD *)v125 + 24))(v125);
                    if (v184)
                    {
                      v96 = v182;
                      if (v181)
                        goto LABEL_193;
LABEL_197:
                      v127 = 0;
                    }
                    else
                    {
                      v184 = HGGPURenderer::CreateBuffer((uint64_t)v19, *((HGRect *)v179 + 1), var0, 1, 0, *((unsigned __int8 *)v179 + 248));
                      if (v187)
                        (*(void (**)(HGBitmap *))(*(_QWORD *)v187 + 24))(v187);
                      v128 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v19, (HGBitmap *)v184);
                      v187 = (HGBitmap *)HGObject::operator new(0x80uLL);
                      HGBuffer::HGBuffer((HGBuffer *)v187, *(HGRect *)(v184 + 20), v128);
                      (*(void (**)(HGBitmap *))(*(_QWORD *)v128 + 24))(v128);
                      v96 = *v92;
                      if (!v181)
                        goto LABEL_197;
LABEL_193:
                      v127 = (HGTexture *)HGObject::operator new(0x80uLL);
                      HGTexture::HGTexture(v127, *(HGRect *)((char *)v181 + 20), v181);
                    }
                    *v178 = v127;
                    v129 = (HGTexture *)HGObject::operator new(0x80uLL);
                    HGTexture::HGTexture(v129, *(HGRect *)((char *)v126 + 20), v126);
                    *((_QWORD *)v179 + 22) = v129;
                    v130 = (const void *)(*(uint64_t (**)(HGRenderer *, uint64_t, HGNode *))(*(_QWORD *)v19 + 376))(v19, Program, v191);
                    if (v130)
                    {
                      if (v131)
                      {
                        v134 = v131;
                        v135 = atomic_load(HGLogger::_enabled);
                        if ((v135 & 1) != 0)
                          HGLogger::log((HGLogger *)"multiblend", (const char *)2, (HGLogger *)"  dual inputs blend shader pass\n", v132, v133);
                        *((_BYTE *)&v192.__r_.__value_.__s + 23) = 13;
                        strcpy((char *)&v192, "mblend2Inputs");
                        HGMetalHandler::SetDebugLabel(v134, &v192);
                        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v192.__r_.__value_.__l.__data_);
                        HGMetalHandler::DisableBlending((uint64_t)v134);
                        (*(void (**)(std::string *, _QWORD, float, float, float, float))(v134->__r_.__value_.__r.__words[0]
                                                                                                  + 136))(v134, 0, *((float *)v191 + 104), *((float *)v191 + 104), *((float *)v191 + 104), *((float *)v191 + 104));
                        HGMetalHandler::BindBuffer((HGMetalHandler *)v134, v187);
                        HGMetalHandler::BindTexture((HGMetalTexture ***)v134, 0, (HGBitmap *)*v178);
                        HGMetalHandler::BindTexture((HGMetalTexture ***)v134, 1, *((HGBitmap **)v179 + 22));
                        *(_OWORD *)p_var1 = *(_OWORD *)p_var0;
                        *(_QWORD *)((char *)v179 + 52) = v195;
                        *(_QWORD *)((char *)v179 + 60) = v194;
                        HGNode::PageBegin(v191, v179, 0, (int32x4_t *)v134);
                        v136 = p_var0;
                        if (v182 == v91)
                          v136 = &v195;
                        v137 = *v136;
                        v138 = p_var2;
                        if (v182 == v91)
                          v138 = &v194;
                        (*(void (**)(std::string *, uint64_t, uint64_t, uint64_t))(v134->__r_.__value_.__r.__words[0]
                                                                                         + 192))(v134, v137, *v138, 2);
                        (*(void (**)(HGNode *, HGPage *, _QWORD, std::string *))(*(_QWORD *)v191 + 496))(v191, v179, 0, v134);
                      }
                    }
                    (*(void (**)(HGBitmap *))(*(_QWORD *)v126 + 24))(v126);
                    if (*v178)
                      (*(void (**)(_QWORD))(*(_QWORD *)*v178 + 24))(*v178);
                    v139 = *((_QWORD *)v179 + 22);
                    if (v139)
                      (*(void (**)(uint64_t))(*(_QWORD *)v139 + 24))(v139);
                    *v178 = 0;
                    v178[1] = 0;
                    goto LABEL_15;
                  }
                }
                else
                {
                  if ((void *)v121 >= v196[1])
                    v121 %= (unint64_t)v196[1];
                  if (v121 != v118)
                    goto LABEL_190;
                }
                v120 = (uint64_t *)*v120;
                if (!v120)
                  goto LABEL_190;
              }
            }
            v33 = (uint64_t *)*v33;
            if (!v33)
              goto LABEL_42;
            continue;
          }
        }
LABEL_16:
        v17 = *((_DWORD *)v191 + 22);
      }
      if ((uint64_t)++v18 >= v17)
        goto LABEL_263;
    }
  }
  v185 = 0;
  v181 = 0;
LABEL_263:
  *((_DWORD *)v191 + 106) = v174;
  *((_DWORD *)v191 + 104) = v16;
  *((_OWORD *)v191 + 31) = v175;
  v165 = v183;
  if (v187)
    (*(void (**)(HGBitmap *))(*(_QWORD *)v187 + 24))(v187);
  if (v185)
  {
    if (v183)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v183 + 24))(v183);
    if (!v181)
    {
      v165 = v184;
      v166 = __p[0];
      if (!__p[0])
        goto LABEL_275;
      goto LABEL_281;
    }
    (*(void (**)(HGBitmap *))(*(_QWORD *)v181 + 24))(v181);
    v165 = v184;
  }
  else
  {
    if (v184)
      (*(void (**)(char *))(*(_QWORD *)v184 + 24))(v184);
    if (v181)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v181 + 24))(v181);
  }
  v166 = __p[0];
  if (!__p[0])
    goto LABEL_275;
  do
  {
LABEL_281:
    v169 = (_QWORD *)*v166;
    v170 = v166[3];
    if (v170)
      (*(void (**)(uint64_t))(*(_QWORD *)v170 + 24))(v170);
    operator delete(v166);
    v166 = v169;
  }
  while (v169);
LABEL_275:
  v167 = v196[0];
  v196[0] = 0;
  if (v167)
    operator delete(v167);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v199);
  return v165;
}

void sub_1B2AE6064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&__p);
  std::unordered_map<int,HGRef<HGBitmap>>::~unordered_map[abi:ne180100]((uint64_t)&a46);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a52);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,HGRef<HGBitmap>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t HGHWMultiBlend::PrepareOutputNode(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(result + 552) = a3;
  *(_QWORD *)(result + 560) = a4;
  return result;
}

void HGHWMultiBlend::~HGHWMultiBlend(HGHWMultiBlend *this)
{
  void *v1;

  HGHWMultiBlend::~HGHWMultiBlend(this);
  HGObject::operator delete(v1);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E652FEF8;
  v2 = (_QWORD *)*((_QWORD *)this + 76);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 71);
  if (v5)
  {
    *((_QWORD *)this + 72) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 68);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  HGHWBlendFlipped::~HGHWBlendFlipped(this);
}

void std::vector<HGLayerParams>::__append(void **a1, unint64_t a2)
{
  _DWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _DWORD *v11;
  char *v17;
  char *v18;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)v4) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = &v4[12 * a2];
      __asm { FMOV            V0.4S, #1.0 }
      do
      {
        *(_QWORD *)v4 = 0x3F80000000000000;
        v4[2] = 0;
        *((_OWORD *)v4 + 1) = _Q0;
        v4[8] = 0;
        v4 += 12;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (_BYTE *)*a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x555555555555555)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x2AAAAAAAAAAAAAALL)
      v9 = 0x555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(48 * v9);
    }
    else
    {
      v10 = 0;
    }
    v17 = &v10[48 * v6];
    v18 = &v17[48 * a2];
    __asm { FMOV            V0.4S, #1.0 }
    v20 = v17;
    do
    {
      *(_QWORD *)v20 = 0x3F80000000000000;
      *((_DWORD *)v20 + 2) = 0;
      *((_OWORD *)v20 + 1) = _Q0;
      *((_DWORD *)v20 + 8) = 0;
      v20 += 48;
    }
    while (v20 != v18);
    v21 = &v10[48 * v9];
    v23 = (char *)*a1;
    v22 = (char *)a1[1];
    if (v22 != *a1)
    {
      do
      {
        v24 = *((_OWORD *)v22 - 3);
        v25 = *((_OWORD *)v22 - 2);
        *((_DWORD *)v17 - 4) = *((_DWORD *)v22 - 4);
        *((_OWORD *)v17 - 3) = v24;
        *((_OWORD *)v17 - 2) = v25;
        v17 -= 48;
        v22 -= 48;
      }
      while (v22 != v23);
      v22 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v21;
    if (v22)
      operator delete(v22);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<int,HGRect>,std::__unordered_map_hasher<int,std::__hash_value_type<int,HGRect>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,HGRect>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,HGRect>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *(_QWORD *)((char *)v15 + 20) = 0;
  *(_QWORD *)((char *)v15 + 28) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1B2AE67EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,HGRef<HGBitmap>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,HGRef<HGBitmap>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,HGRef<HGBitmap>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,HGRef<HGBitmap>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1B2AE6B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,HGRef<HGBitmap>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,HGRef<HGBitmap>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<int,HGRef<HGBitmap>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,HGRef<HGBitmap>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void HGLightWrapBlend::HGLightWrapBlend(HGLightWrapBlend *this)
{
  uint64_t v2;
  HGLightWrap **v3;
  HGLightWrap *v4;
  HGLightWrap *v5;
  HGHWMultiBlend *v6;
  HGHWMultiBlend *v7;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v2 = off_1E65301B0;
  *(_QWORD *)(v2 + 408) = 0x412000003F800000;
  *(_DWORD *)(v2 + 432) = 9;
  v3 = (HGLightWrap **)(v2 + 440);
  *(_QWORD *)(v2 + 440) = 0;
  *(_QWORD *)(v2 + 448) = 0;
  v4 = (HGLightWrap *)HGObject::operator new(0x1C0uLL);
  HGLightWrap::HGLightWrap(v4);
  v5 = *v3;
  if (*v3 == v4)
  {
    if (v4)
      (*(void (**)(HGLightWrap *))(*(_QWORD *)v4 + 24))(v4);
  }
  else
  {
    if (v5)
      (*(void (**)(HGLightWrap *))(*(_QWORD *)v5 + 24))(v5);
    *v3 = v4;
  }
  v6 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
  HGHWMultiBlend::HGHWMultiBlend(v6);
  v7 = (HGHWMultiBlend *)*((_QWORD *)this + 56);
  if (v7 == v6)
  {
    if (v6)
      (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v6 + 24))(v6);
  }
  else
  {
    if (v7)
      (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v7 + 24))(v7);
    *((_QWORD *)this + 56) = v6;
  }
}

void sub_1B2AE6C80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v4 = v2;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v6 = *(_QWORD *)(v1 + 448);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (*v3)
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HGLightWrapBlend::~HGLightWrapBlend(HGNode *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E65301B0;
  v2 = *((_QWORD *)this + 56);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 55);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E65301B0;
  v2 = *((_QWORD *)this + 56);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 55);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
  HGObject::operator delete(v4);
}

uint64_t HGLightWrapBlend::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  HGNode *v5;
  HGNode *v6;
  HGNode *v7;
  HGHWMultiBlend *v8;
  HGBlur *v9;
  HGGamma *v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  float v15;
  HGColorMatrix *v16;
  HGColorMatrix *v17;
  float32x4_t v18;
  HGBlur *v19;
  uint64_t v20;

  Input = HGRenderer::GetInput(a2, this, 0);
  v5 = Input;
  if (Input)
    (*(void (**)(HGNode *))(*(_QWORD *)Input + 16))(Input);
  v6 = HGRenderer::GetInput(a2, this, 1u);
  v7 = v6;
  if (v6)
    (*(void (**)(HGNode *))(*(_QWORD *)v6 + 16))(v6);
  v8 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
  HGHWMultiBlend::HGHWMultiBlend(v8);
  (*(void (**)(HGHWMultiBlend *, _QWORD, HGNode *))(*(_QWORD *)v8 + 120))(v8, 0, v5);
  (*(void (**)(HGHWMultiBlend *, uint64_t, HGNode *, _QWORD, float))(*(_QWORD *)v8 + 624))(v8, 1, v7, *((unsigned int *)this + 108), *((float *)this + 102));
  v9 = (HGBlur *)HGObject::operator new(0x220uLL);
  HGBlur::HGBlur(v9);
  (*(void (**)(HGBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v9 + 96))(v9, 0, *((float *)this + 103), *((float *)this + 103), 0.0, 0.0);
  (*(void (**)(HGBlur *, _QWORD, HGNode *))(*(_QWORD *)v9 + 120))(v9, 0, v5);
  v10 = (HGGamma *)HGObject::operator new(0x1B0uLL);
  HGGamma::HGGamma(v10);
  HGGamma::SetPremultiplyState((uint64_t)v10, 0);
  v11 = *((float *)this + 104);
  v12 = 1.0 / v11;
  v13 = v11 < 0.06;
  v14 = 16.6666667;
  if (!v13)
    v14 = v12;
  v15 = v14;
  (*(void (**)(HGGamma *, _QWORD, float, float, float, float))(*(_QWORD *)v10 + 96))(v10, 0, v15, v15, v15, 1.0);
  if (*((float *)this + 105) == 1.0)
  {
    (*(void (**)(HGGamma *, _QWORD, HGBlur *))(*(_QWORD *)v10 + 120))(v10, 0, v9);
    (*(void (**)(_QWORD, uint64_t, HGGamma *))(**((_QWORD **)this + 55) + 120))(*((_QWORD *)this + 55), 1, v10);
  }
  else
  {
    v16 = (HGColorMatrix *)HGObject::operator new(0x1F0uLL);
    HGColorMatrix::HGColorMatrix(v16);
    HGColorMatrix::Scale((float32x4_t *)v16, 1.0 / *((float *)this + 105), 1.0 / *((float *)this + 105), 1.0 / *((float *)this + 105));
    v17 = (HGColorMatrix *)HGObject::operator new(0x1F0uLL);
    HGColorMatrix::HGColorMatrix(v17);
    v18 = HGColorMatrix::Scale((float32x4_t *)v17, *((float *)this + 105), *((float *)this + 105), *((float32_t *)this + 105));
    (*(void (**)(HGColorMatrix *, _QWORD, HGBlur *, float32x4_t))(*(_QWORD *)v16 + 120))(v16, 0, v9, v18);
    (*(void (**)(HGGamma *, _QWORD, HGColorMatrix *))(*(_QWORD *)v10 + 120))(v10, 0, v16);
    (*(void (**)(HGColorMatrix *, _QWORD, HGGamma *))(*(_QWORD *)v17 + 120))(v17, 0, v10);
    (*(void (**)(_QWORD, uint64_t, HGColorMatrix *))(**((_QWORD **)this + 55) + 120))(*((_QWORD *)this + 55), 1, v17);
    (*(void (**)(HGColorMatrix *))(*(_QWORD *)v17 + 24))(v17);
    (*(void (**)(HGColorMatrix *))(*(_QWORD *)v16 + 24))(v16);
  }
  v19 = (HGBlur *)HGObject::operator new(0x220uLL);
  HGBlur::HGBlur(v19);
  (*(void (**)(HGBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v19 + 96))(v19, 0, *((float *)this + 103), *((float *)this + 103), *((float *)this + 103), *((float *)this + 103));
  (*(void (**)(HGBlur *, _QWORD, HGNode *))(*(_QWORD *)v19 + 120))(v19, 0, v7);
  (*(void (**)(_QWORD, _QWORD, HGBlur *))(**((_QWORD **)this + 55) + 120))(*((_QWORD *)this + 55), 0, v19);
  (*(void (**)(_QWORD, uint64_t, HGNode *))(**((_QWORD **)this + 55) + 120))(*((_QWORD *)this + 55), 2, v7);
  (*(void (**)(_QWORD, _QWORD, float, float, float, float))(**((_QWORD **)this + 55) + 96))(*((_QWORD *)this + 55), 0, 1.0, 1.0, 1.0, 1.0);
  (*(void (**)(_QWORD, _QWORD, HGHWMultiBlend *))(**((_QWORD **)this + 56) + 120))(*((_QWORD *)this + 56), 0, v8);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, float))(**((_QWORD **)this + 56) + 624))(*((_QWORD *)this + 56), 1, *((_QWORD *)this + 55), *((unsigned int *)this + 107), *((float *)this + 106));
  v20 = *((_QWORD *)this + 56);
  (*(void (**)(HGBlur *))(*(_QWORD *)v19 + 24))(v19);
  (*(void (**)(HGGamma *))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(HGBlur *))(*(_QWORD *)v9 + 24))(v9);
  (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v8 + 24))(v8);
  if (v7)
    (*(void (**)(HGNode *))(*(_QWORD *)v7 + 24))(v7);
  if (v5)
    (*(void (**)(HGNode *))(*(_QWORD *)v5 + 24))(v5);
  return v20;
}

void sub_1B2AE71DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  HGObject::operator delete(v7);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HGLightWrapBlend::SetParameter(HGNode *this, int a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 == 1)
  {
    *((float *)this + 102) = a3;
  }
  else if (!a2)
  {
    *((_DWORD *)this + 108) = vcvtms_u32_f32(a3);
  }
  return HGNode::SetParameter(this, a2, a3, a4, a5, a6, a7);
}

uint64_t HGLightWrapBlend::SetLightWrapParams(uint64_t result, int a2, float a3, float a4, float a5, float a6)
{
  *(float *)(result + 412) = a3;
  *(float *)(result + 416) = a4;
  *(float *)(result + 420) = a5;
  *(_DWORD *)(result + 428) = a2;
  *(float *)(result + 424) = a6;
  return result;
}

void HGUserExecUnit::HGUserExecUnit(HGUserExecUnit *this, HGRenderQueue *a2)
{
  *(_QWORD *)this = &off_1E6530418;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = ++HGUserExecUnit::_count;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 2) = 0;
}

void HGUserExecUnit::~HGUserExecUnit(HGUserExecUnit *this)
{
  JUMPOUT(0x1B5E29170);
}

HGUserExecUnit *StartUserExecUnitFunc(HGUserExecUnit *a1)
{
  HGUserExecUnit::RunLoop(a1);
  return a1;
}

HGSynchronizable *HGUserExecUnit::RunLoop(HGUserExecUnit *this)
{
  HGSynchronizable *v2;
  HGSynchronizable *v4;
  HGUserJob *v5;

  pthread_setname_np("com.apple.helium-render-queue-exec-unit-user");
  while (!HGRenderQueue::IsShuttingDown(*((HGRenderQueue **)this + 2)))
  {
    v5 = 0;
    if (HGRenderQueue::GetUserJob(*((HGRenderQueue **)this + 2), this, &v5))
    {
      *((_DWORD *)this + 2) = 2;
      HGUserJob::SetState((uint64_t)v5, 3);
      HGUserJob::CallNotifyFunc(v5);
      v4 = *(HGSynchronizable **)(*((_QWORD *)this + 2) + 472);
      HGSynchronizable::Lock(v4);
      std::list<HGGPUReadbackJob *>::remove((_QWORD *)(*((_QWORD *)this + 2) + 400), &v5);
      HGSynchronizable::Unlock(v4);
      (*(void (**)(HGUserJob *))(*(_QWORD *)v5 + 24))(v5);
      *((_DWORD *)this + 2) = 1;
    }
  }
  v2 = *(HGSynchronizable **)(*((_QWORD *)this + 2) + 472);
  HGSynchronizable::Lock(v2);
  *((_DWORD *)this + 2) = 3;
  return HGSynchronizable::Unlock(v2);
}

void sub_1B2AE7510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

uint64_t HGUserExecUnit::StartRunLoop(HGUserExecUnit *this)
{
  pthread_t *v1;
  uint64_t v2;
  pthread_attr_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = (pthread_t *)((char *)this + 32);
  if (*((_QWORD *)this + 4))
    return 0;
  pthread_attr_init(&v5);
  pthread_attr_setdetachstate(&v5, 2);
  v2 = pthread_create(v1, &v5, (void *(__cdecl *)(void *))StartUserExecUnitFunc, this);
  pthread_attr_destroy(&v5);
  return v2;
}

void HGUserJob::HGUserJob(HGUserJob *this)
{
  uint64_t v1;

  HGObject::HGObject(this);
  *(_QWORD *)v1 = off_1E6530448;
  *(_QWORD *)(v1 + 12) = 0x100000005;
  *(_OWORD *)(v1 + 20) = 0u;
  *(_OWORD *)(v1 + 36) = 0u;
  *(_OWORD *)(v1 + 52) = 0u;
  *(_DWORD *)(v1 + 68) = 0;
}

void HGUserJob::~HGUserJob(HGUserJob *this)
{
  void *v2;

  *(_QWORD *)this = off_1E6530448;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
    free(v2);
  HGObject::~HGObject(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E6530448;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
    free(v2);
  HGObject::~HGObject(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E6530448;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
    free(v2);
  HGObject::~HGObject(this);
  HGObject::operator delete(v3);
}

uint64_t HGUserJob::SetQueueID(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

uint64_t HGUserJob::SetPriority(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = a2;
  return result;
}

uint64_t HGUserJob::SetState(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t HGUserJob::SetNotifyFunc(uint64_t this, void (*a2)(HGUserJob *))
{
  *(_QWORD *)(this + 64) = a2;
  return this;
}

uint64_t HGUserJob::CallNotifyFunc(HGUserJob *this)
{
  uint64_t v2;
  void (*v3)(HGUserJob *);
  HGTiming *v4;
  uint64_t result;
  int v6;

  v2 = mach_absolute_time();
  v3 = (void (*)(HGUserJob *))*((_QWORD *)this + 8);
  if (v3)
    v3(this);
  v4 = (HGTiming *)mach_absolute_time();
  *((double *)this + 3) = HGTiming::GetMachTimeConversionFactor(v4) * (double)((unint64_t)v4 - v2);
  result = HGRenderQueue::GetDebugQueueVerboseMask(*((HGRenderQueue **)this + 7));
  if ((result & 0x200) != 0)
  {
    v6 = *((_DWORD *)this + 4);
    switch(v6)
    {
      case 0:
        result = printf("UserJob<%p>::CallNotifyFunc():kStateNoError  : %5.1f ms\n");
        break;
      case 1:
        result = printf("UserJob<%p>::CallNotifyFunc():kStateInitialized  : %5.1f ms\n");
        break;
      case 2:
        result = printf("UserJob<%p>::CallNotifyFunc():kStateQueued  : %5.1f ms\n");
        break;
      case 3:
        result = printf("UserJob<%p>::CallNotifyFunc():kStateExecuting  : %5.1f ms\n");
        break;
      case 4:
        result = printf("UserJob<%p>::CallNotifyFunc():kStateCancelled  : %5.1f ms\n");
        break;
      case 5:
        result = printf("UserJob<%p>::CallNotifyFunc():kStateFinished  : %5.1f ms\n");
        break;
      default:
        if (v6 == -1000)
        {
          result = printf("UserJob<%p>::CallNotifyFunc():kStateError  : %5.1f ms\n");
        }
        else if (v6 == -999)
        {
          result = printf("UserJob<%p>::CallNotifyFunc():kStateEnqueueFail  : %5.1f ms\n");
        }
        break;
    }
  }
  return result;
}

void HGDotGraph::HGDotGraph(HGDotGraph *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_WORD *)this + 28) = 256;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
}

void HGDotGraph::~HGDotGraph(HGDotGraph *this)
{
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  std::__tree<std::__value_type<unsigned long,HGDotGraph::Node>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,HGDotGraph::Node>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,HGDotGraph::Node>>>::destroy((uint64_t)this, *((_QWORD *)this + 1));
}

uint64_t HGDotGraph::on(HGDotGraph *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t HGDotGraph::footnode(uint64_t this, char a2)
{
  *(_BYTE *)(this + 57) = a2;
  return this;
}

void HGDotGraph::begin(HGDotGraph *this, const char *a2)
{
  FILE *v4;
  const char *v5;
  char *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  FILE *v9;

  if (*((_BYTE *)this + 56))
  {
    HGLogger::setLevel((HGLogger *)"dot", (const char *)1);
    v4 = fopen(a2, "w");
    *((_QWORD *)this + 6) = v4;
    if (!v4)
    {
      v7 = atomic_load(HGLogger::_enabled);
      if ((v7 & 1) != 0)
        HGLogger::log((HGLogger *)"dot", (const char *)1, (HGLogger *)"ERROR - invalid path for dot files : %s\n", v5, v6, a2);
      v8 = atomic_load(HGLogger::_enabled);
      if ((v8 & 1) != 0)
        HGLogger::log((HGLogger *)"dot", (const char *)1, (HGLogger *)"  Use HG_ENV_DOT_GRAPH_OUTPUT_DIR or HGRenderer::SetDotGraphOutputDir() with a valid directory.\n", v5, v6);
    }
    if (*((_BYTE *)this + 56))
    {
      v9 = (FILE *)*((_QWORD *)this + 6);
      if (v9)
      {
        fwrite("digraph rendertree\n", 0x13uLL, 1uLL, v9);
        fwrite("{\n", 2uLL, 1uLL, *((FILE **)this + 6));
      }
    }
  }
}

void HGDotGraph::end(HGDotGraph *this)
{
  FILE *v2;
  const char *p_p;
  uint64_t v4;
  FILE *v5;
  void *__p;
  char v7;
  _QWORD v8[2];
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  if (*((_BYTE *)this + 56) && *((_QWORD *)this + 6))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
    HGDotGraph::_streamAll((uint64_t)this, v9);
    v2 = (FILE *)*((_QWORD *)this + 6);
    std::stringbuf::str();
    if (v7 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    fputs(p_p, v2);
    if (v7 < 0)
      operator delete(__p);
    fwrite("}\n", 2uLL, 1uLL, *((FILE **)this + 6));
    v8[0] = *MEMORY[0x1E0DE4F50];
    v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v9[0] = v4;
    v9[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v10 < 0)
      operator delete((void *)v9[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B5E290BC](&v11);
  }
  v5 = (FILE *)*((_QWORD *)this + 6);
  if (v5)
  {
    fclose(v5);
    *((_QWORD *)this + 6) = 0;
  }
  std::__tree<std::__value_type<unsigned long,HGDotGraph::Node>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,HGDotGraph::Node>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,HGDotGraph::Node>>>::destroy((uint64_t)this, *((_QWORD *)this + 1));
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = 0;
}

void sub_1B2AE7AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2AE7B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void HGDotGraph::_streamAll(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 v22;
  void *v23;
  std::string v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *__p;
  char v30;

  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      HGDotGraph::Node::Node((uint64_t)&v22 + 8, (uint64_t)(v5 + 5));
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"_0x", 3);
      *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
      v7 = (_QWORD *)std::ostream::operator<<();
      v8 = operator<<(v7, (unsigned int *)&v22 + 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)";\n", 2);
      if (v30 < 0)
      {
        operator delete(__p);
        if ((v28 & 0x80000000) == 0)
        {
LABEL_6:
          if ((v26 & 0x80000000) == 0)
            goto LABEL_7;
          goto LABEL_12;
        }
      }
      else if ((v28 & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(v27);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_7:
        if ((v24.__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
          goto LABEL_8;
        goto LABEL_13;
      }
LABEL_12:
      operator delete((void *)v24.__r_.__value_.__r.__words[2]);
      if ((v24.__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
      {
LABEL_8:
        v9 = (_QWORD *)v5[1];
        if (v9)
          goto LABEL_14;
        goto LABEL_16;
      }
LABEL_13:
      operator delete(v23);
      v9 = (_QWORD *)v5[1];
      if (v9)
      {
        do
        {
LABEL_14:
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
        goto LABEL_3;
      }
      do
      {
LABEL_16:
        v10 = (_QWORD *)v5[2];
        v11 = *v10 == (_QWORD)v5;
        v5 = v10;
      }
      while (!v11);
LABEL_3:
      v5 = v10;
    }
    while (v10 != v4);
  }
  v12 = *(_QWORD **)(a1 + 24);
  if (v12 != (_QWORD *)(a1 + 32))
  {
    do
    {
      v22 = *((_OWORD *)v12 + 2);
      v23 = (void *)v12[6];
      if (*((char *)v12 + 79) < 0)
        std::string::__init_copy_ctor_external(&v24, (const std::string::value_type *)v12[7], v12[8]);
      else
        v24 = *(std::string *)(v12 + 7);
      v25 = *((_BYTE *)v12 + 80);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"_0x", 3);
      *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" -> _0x", 7);
      v15 = (_QWORD *)std::ostream::operator<<();
      v16 = operator<<(v15, (unsigned int *)&v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)";\n", 2);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v24.__r_.__value_.__l.__data_);
        v17 = (_QWORD *)v12[1];
        if (v17)
        {
          do
          {
LABEL_29:
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
          goto LABEL_21;
        }
      }
      else
      {
        v17 = (_QWORD *)v12[1];
        if (v17)
          goto LABEL_29;
      }
      do
      {
        v18 = (_QWORD *)v12[2];
        v11 = *v18 == (_QWORD)v12;
        v12 = v18;
      }
      while (!v11);
LABEL_21:
      v12 = v18;
    }
    while (v18 != (_QWORD *)(a1 + 32));
  }
  if (*(_BYTE *)(a1 + 57))
  {
    v19 = (char *)operator new(0x38uLL);
    strcpy(v19, "https://confluence.aso.apple.com/confluence/x/yRtHCw");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"labelloc=\"b\";", 13);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"label=\"\nHelium DOT reference: ", 30);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v19, 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\";", 2);
    operator delete(v19);
  }
}

void sub_1B2AE7E44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AE7E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<unsigned long const,HGDotGraph::Node>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AE7E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *HGDotGraph::node(uint64_t *result, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v7;
  char *v8;
  uint64_t **v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;

  if (*((_BYTE *)result + 56))
  {
    v7 = result;
    v9 = (uint64_t **)(result + 1);
    v8 = (char *)result[1];
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          v10 = v8;
          v11 = *((_QWORD *)v8 + 4);
          if (v11 <= a2)
            break;
          v8 = *(char **)v10;
          v9 = (uint64_t **)v10;
          if (!*(_QWORD *)v10)
            goto LABEL_9;
        }
        if (v11 >= a2)
          break;
        v8 = (char *)*((_QWORD *)v10 + 1);
        if (!v8)
        {
          v9 = (uint64_t **)(v10 + 8);
          goto LABEL_9;
        }
      }
    }
    else
    {
      v10 = (char *)(result + 1);
LABEL_9:
      v12 = v10;
      v10 = (char *)operator new(0x98uLL);
      *((_QWORD *)v10 + 4) = a2;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 120) = 0u;
      *(_OWORD *)(v10 + 136) = 0u;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = v12;
      *v9 = (uint64_t *)v10;
      v13 = *(_QWORD *)*v7;
      v14 = (uint64_t *)v10;
      if (v13)
      {
        *v7 = v13;
        v14 = *v9;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v14);
      ++v7[2];
    }
    *((_DWORD *)v10 + 10) = a4;
    if (a3)
      JUMPOUT(0x1B5E28D80);
  }
  return result;
}

uint64_t *HGDotGraph::dashed(uint64_t *this, unint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t **v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;

  if (*((_BYTE *)this + 56))
  {
    v3 = (uint64_t)this;
    v5 = (uint64_t **)(this + 1);
    v4 = (unint64_t *)this[1];
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          v6 = (char *)v4;
          v7 = v4[4];
          if (v7 <= a2)
            break;
          v4 = *(unint64_t **)v6;
          v5 = (uint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_9;
        }
        if (v7 >= a2)
          break;
        v4 = (unint64_t *)*((_QWORD *)v6 + 1);
        if (!v4)
        {
          v5 = (uint64_t **)(v6 + 8);
          goto LABEL_9;
        }
      }
    }
    else
    {
      v6 = (char *)(this + 1);
LABEL_9:
      v8 = v6;
      v6 = (char *)operator new(0x98uLL);
      *((_QWORD *)v6 + 4) = a2;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_OWORD *)(v6 + 56) = 0u;
      *(_OWORD *)(v6 + 72) = 0u;
      *(_OWORD *)(v6 + 88) = 0u;
      *(_OWORD *)(v6 + 104) = 0u;
      *(_OWORD *)(v6 + 120) = 0u;
      *(_OWORD *)(v6 + 136) = 0u;
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = v8;
      *v5 = (uint64_t *)v6;
      v9 = **(_QWORD **)v3;
      v10 = (uint64_t *)v6;
      if (v9)
      {
        *(_QWORD *)v3 = v9;
        v10 = *v5;
      }
      this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 8), v10);
      ++*(_QWORD *)(v3 + 16);
    }
    v6[149] = 1;
  }
  return this;
}

uint64_t HGDotGraph::outline(uint64_t this, unint64_t a2, const char *a3)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;

  if (*(_BYTE *)(this + 56))
  {
    v4 = this;
    v6 = (uint64_t **)(this + 8);
    v5 = *(unint64_t **)(this + 8);
    if (v5)
    {
      do
      {
        while (1)
        {
          v7 = (char *)v5;
          v8 = v5[4];
          if (v8 <= a2)
            break;
          v5 = *(unint64_t **)v7;
          v6 = (uint64_t **)v7;
          if (!*(_QWORD *)v7)
            goto LABEL_9;
        }
        if (v8 >= a2)
          goto LABEL_12;
        v5 = (unint64_t *)*((_QWORD *)v7 + 1);
      }
      while (v5);
      v6 = (uint64_t **)(v7 + 8);
    }
    else
    {
      v7 = (char *)(this + 8);
    }
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x98uLL);
    *((_QWORD *)v7 + 4) = a2;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = **(_QWORD **)v4;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *(_QWORD *)v4 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 8), v11);
    ++*(_QWORD *)(v4 + 16);
LABEL_12:
    v7[148] = 1;
    JUMPOUT(0x1B5E28D80);
  }
  return this;
}

uint64_t HGDotGraph::filled(uint64_t this, unint64_t a2, const char *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;

  if (*(_BYTE *)(this + 56))
  {
    v4 = this;
    v6 = (uint64_t **)(this + 8);
    v5 = *(uint64_t **)(this + 8);
    if (v5)
    {
      do
      {
        while (1)
        {
          v7 = (uint64_t **)v5;
          v8 = v5[4];
          if (v8 <= a2)
            break;
          v5 = *v7;
          v6 = v7;
          if (!*v7)
            goto LABEL_9;
        }
        if (v8 >= a2)
          goto LABEL_14;
        v5 = v7[1];
      }
      while (v5);
      v6 = v7 + 1;
    }
    else
    {
      v7 = (uint64_t **)(this + 8);
    }
LABEL_9:
    v9 = v7;
    v10 = (char *)operator new(0x98uLL);
    *((_QWORD *)v10 + 4) = a2;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v9;
    *v6 = (uint64_t *)v10;
    v11 = **(_QWORD **)v4;
    v12 = (uint64_t *)v10;
    if (v11)
    {
      *(_QWORD *)v4 = v11;
      v12 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 8), v12);
    ++*(_QWORD *)(v4 + 16);
LABEL_14:
    JUMPOUT(0x1B5E28D80);
  }
  return this;
}

uint64_t HGDotGraph::fontColor(uint64_t this, unint64_t a2, const char *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;

  if (a3)
  {
    v3 = this;
    if (*(_BYTE *)(this + 56))
    {
      v6 = (uint64_t **)(this + 8);
      v5 = *(uint64_t **)(this + 8);
      if (v5)
      {
        do
        {
          while (1)
          {
            v7 = (uint64_t **)v5;
            v8 = v5[4];
            if (v8 <= a2)
              break;
            v5 = *v7;
            v6 = v7;
            if (!*v7)
              goto LABEL_10;
          }
          if (v8 >= a2)
            goto LABEL_15;
          v5 = v7[1];
        }
        while (v5);
        v6 = v7 + 1;
      }
      else
      {
        v7 = (uint64_t **)(this + 8);
      }
LABEL_10:
      v9 = v7;
      v10 = (char *)operator new(0x98uLL);
      *((_QWORD *)v10 + 4) = a2;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 120) = 0u;
      *(_OWORD *)(v10 + 136) = 0u;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = v9;
      *v6 = (uint64_t *)v10;
      v11 = **(_QWORD **)v3;
      v12 = (uint64_t *)v10;
      if (v11)
      {
        *(_QWORD *)v3 = v11;
        v12 = *v6;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 8), v12);
      ++*(_QWORD *)(v3 + 16);
LABEL_15:
      JUMPOUT(0x1B5E28D80);
    }
  }
  return this;
}

uint64_t *HGDotGraph::fontSize(uint64_t *this, unint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t *v6;
  uint64_t **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;

  if (a3)
  {
    v3 = (uint64_t)this;
    if (*((_BYTE *)this + 56))
    {
      v7 = (uint64_t **)(this + 1);
      v6 = (unint64_t *)this[1];
      if (v6)
      {
        while (1)
        {
          while (1)
          {
            v8 = (char *)v6;
            v9 = v6[4];
            if (v9 <= a2)
              break;
            v6 = *(unint64_t **)v8;
            v7 = (uint64_t **)v8;
            if (!*(_QWORD *)v8)
              goto LABEL_10;
          }
          if (v9 >= a2)
            break;
          v6 = (unint64_t *)*((_QWORD *)v8 + 1);
          if (!v6)
          {
            v7 = (uint64_t **)(v8 + 8);
            goto LABEL_10;
          }
        }
      }
      else
      {
        v8 = (char *)(this + 1);
LABEL_10:
        v10 = v8;
        v8 = (char *)operator new(0x98uLL);
        *((_QWORD *)v8 + 4) = a2;
        *(_OWORD *)(v8 + 40) = 0u;
        *(_OWORD *)(v8 + 56) = 0u;
        *(_OWORD *)(v8 + 72) = 0u;
        *(_OWORD *)(v8 + 88) = 0u;
        *(_OWORD *)(v8 + 104) = 0u;
        *(_OWORD *)(v8 + 120) = 0u;
        *(_OWORD *)(v8 + 136) = 0u;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v10;
        *v7 = (uint64_t *)v8;
        v11 = **(_QWORD **)v3;
        v12 = (uint64_t *)v8;
        if (v11)
        {
          *(_QWORD *)v3 = v11;
          v12 = *v7;
        }
        this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 8), v12);
        ++*(_QWORD *)(v3 + 16);
      }
      *((_DWORD *)v8 + 36) = a3;
    }
  }
  return this;
}

uint64_t *HGDotGraph::record(uint64_t *this, unint64_t a2, const char *a3)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;

  if (*((_BYTE *)this + 56))
  {
    v5 = (uint64_t)this;
    v7 = (uint64_t **)(this + 1);
    v6 = (unint64_t *)this[1];
    if (v6)
    {
      while (1)
      {
        while (1)
        {
          v8 = (char *)v6;
          v9 = v6[4];
          if (v9 <= a2)
            break;
          v6 = *(unint64_t **)v8;
          v7 = (uint64_t **)v8;
          if (!*(_QWORD *)v8)
            goto LABEL_9;
        }
        if (v9 >= a2)
          break;
        v6 = (unint64_t *)*((_QWORD *)v8 + 1);
        if (!v6)
        {
          v7 = (uint64_t **)(v8 + 8);
          goto LABEL_9;
        }
      }
    }
    else
    {
      v8 = (char *)(this + 1);
LABEL_9:
      v10 = v8;
      v8 = (char *)operator new(0x98uLL);
      *((_QWORD *)v8 + 4) = a2;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_OWORD *)(v8 + 56) = 0u;
      *(_OWORD *)(v8 + 72) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      *(_OWORD *)(v8 + 104) = 0u;
      *(_OWORD *)(v8 + 120) = 0u;
      *(_OWORD *)(v8 + 136) = 0u;
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = v10;
      *v7 = (uint64_t *)v8;
      v11 = **(_QWORD **)v5;
      v12 = (uint64_t *)v8;
      if (v11)
      {
        *(_QWORD *)v5 = v11;
        v12 = *v7;
      }
      this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 8), v12);
      ++*(_QWORD *)(v5 + 16);
    }
    *((_DWORD *)v8 + 10) = 4;
    if (a3)
      JUMPOUT(0x1B5E28D80);
  }
  return this;
}

uint64_t *HGDotGraph::link(uint64_t *this, unint64_t a2, unint64_t a3, const char *a4, char a5)
{
  uint64_t v9;
  unint64_t *v10;
  uint64_t **v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;

  if (!*((_BYTE *)this + 56))
    return this;
  v9 = (uint64_t)this;
  v11 = (uint64_t **)(this + 4);
  v10 = (unint64_t *)this[4];
  if (v10)
  {
    while (1)
    {
      v12 = v10;
      v13 = v10[4];
      if (v13 > a2)
        goto LABEL_4;
      if (v13 < a2)
      {
LABEL_9:
        v10 = (unint64_t *)v12[1];
        if (!v10)
        {
          v11 = (uint64_t **)(v12 + 1);
          goto LABEL_11;
        }
      }
      else
      {
        v14 = v12[5];
        if (v14 <= a3)
        {
          if (v14 >= a3)
            goto LABEL_14;
          goto LABEL_9;
        }
LABEL_4:
        v10 = (unint64_t *)*v12;
        v11 = (uint64_t **)v12;
        if (!*v12)
          goto LABEL_11;
      }
    }
  }
  v12 = this + 4;
LABEL_11:
  v15 = v12;
  v12 = operator new(0x58uLL);
  v12[4] = a2;
  v12[5] = a3;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  v12[10] = 0;
  *v12 = 0;
  v12[1] = 0;
  v12[2] = v15;
  *v11 = v12;
  v16 = **(_QWORD **)(v9 + 24);
  v17 = v12;
  if (v16)
  {
    *(_QWORD *)(v9 + 24) = v16;
    v17 = *v11;
  }
  this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v9 + 32), v17);
  ++*(_QWORD *)(v9 + 40);
LABEL_14:
  *((_BYTE *)v12 + 80) = a5;
  if (a4)
    JUMPOUT(0x1B5E28D80);
  return this;
}

uint64_t *HGDotGraph::linkStyle(uint64_t *result, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;

  if (!*((_BYTE *)result + 56))
    return result;
  v9 = result;
  v11 = (uint64_t **)(result + 4);
  v10 = (uint64_t *)result[4];
  if (v10)
  {
    while (1)
    {
      v12 = (uint64_t **)v10;
      v13 = v10[4];
      if (v13 > (unint64_t)a2)
        goto LABEL_4;
      if (v13 < (unint64_t)a2)
      {
LABEL_9:
        v10 = v12[1];
        if (!v10)
        {
          v11 = v12 + 1;
          goto LABEL_11;
        }
      }
      else
      {
        v14 = v12[5];
        if (v14 <= a3)
        {
          if (v14 >= a3)
            goto LABEL_14;
          goto LABEL_9;
        }
LABEL_4:
        v10 = *v12;
        v11 = v12;
        if (!*v12)
          goto LABEL_11;
      }
    }
  }
  v12 = (uint64_t **)(result + 4);
LABEL_11:
  v15 = (uint64_t *)v12;
  v12 = (uint64_t **)operator new(0x58uLL);
  v12[4] = a2;
  v12[5] = a3;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  v12[10] = 0;
  *v12 = 0;
  v12[1] = 0;
  v12[2] = v15;
  *v11 = (uint64_t *)v12;
  v16 = *(_QWORD *)v9[3];
  v17 = (uint64_t *)v12;
  if (v16)
  {
    v9[3] = v16;
    v17 = *v11;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v9[4], v17);
  ++v9[5];
LABEL_14:
  if (a4)
    *((_DWORD *)v12 + 12) = a5;
  else
    *((_DWORD *)v12 + 13) = a5;
  return result;
}

uint64_t HGDotGraph::beginRank(uint64_t this)
{
  if (*(_BYTE *)(this + 56))
  {
    if (*(_QWORD *)(this + 48))
      JUMPOUT(0x1B5E28D80);
  }
  return this;
}

std::string *HGDotGraph::rank(std::string *this, const void *a2)
{
  std::string *v2;
  std::string *v3;
  char __str[32];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (this[2].__r_.__value_.__s.__data_[8])
  {
    v2 = this;
    if (this[2].__r_.__value_.__r.__words[0])
    {
      snprintf(__str, 0x20uLL, "_%p", a2);
      v3 = (std::string *)((char *)v2 + 64);
      std::string::append(v3, __str);
      return std::string::append(v3, " ");
    }
  }
  return this;
}

uint64_t HGDotGraph::endRank(uint64_t this)
{
  uint64_t v1;
  const char **v2;
  const char *v3;

  if (*(_BYTE *)(this + 56))
  {
    v1 = this;
    if (*(_QWORD *)(this + 48))
    {
      v2 = (const char **)(this + 64);
      std::string::append((std::string *)(this + 64), "}\n");
      if (*(char *)(v1 + 87) < 0)
        v3 = *v2;
      else
        v3 = (const char *)(v1 + 64);
      return fputs(v3, *(FILE **)(v1 + 48));
    }
  }
  return this;
}

_QWORD *operator<<(_QWORD *a1, unsigned int *a2)
{
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" [shape=", 8);
  v5 = strlen(operator<<(std::ostream &,HGDotGraph::Node const&)::shapeStrings[*a2]);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)operator<<(std::ostream &,HGDotGraph::Node const&)::shapeStrings[*a2], v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"]", 1);
  if (*((char *)a2 + 55) >= 0)
    v7 = *((unsigned __int8 *)a2 + 55);
  else
    v7 = *((_QWORD *)a2 + 5);
  if (*((_BYTE *)a2 + 108) || *((_BYTE *)a2 + 109) || v7)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" [style=\"", 9);
    if (*((_BYTE *)a2 + 108))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"bold,", 5);
    if (*((_BYTE *)a2 + 109))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"dashed,", 7);
    if (v7)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"filled,", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"]", 2);
  }
  v8 = *((unsigned __int8 *)a2 + 31);
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)a2 + 2);
  if (v8)
  {
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" [color=\"", 9);
    v10 = *((char *)a2 + 31);
    if (v10 >= 0)
      v11 = (uint64_t)(a2 + 2);
    else
      v11 = *((_QWORD *)a2 + 1);
    if (v10 >= 0)
      v12 = *((unsigned __int8 *)a2 + 31);
    else
      v12 = *((_QWORD *)a2 + 2);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\"]", 2);
  }
  v14 = *((unsigned __int8 *)a2 + 55);
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)a2 + 5);
  if (v14)
  {
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" [fillcolor=\"", 13);
    v16 = *((char *)a2 + 55);
    if (v16 >= 0)
      v17 = (uint64_t)(a2 + 8);
    else
      v17 = *((_QWORD *)a2 + 4);
    if (v16 >= 0)
      v18 = *((unsigned __int8 *)a2 + 55);
    else
      v18 = *((_QWORD *)a2 + 5);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"]", 2);
  }
  v20 = *((unsigned __int8 *)a2 + 79);
  if ((v20 & 0x80u) != 0)
    v20 = *((_QWORD *)a2 + 8);
  if (v20)
  {
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" [fontcolor=\"", 13);
    v22 = *((char *)a2 + 79);
    if (v22 >= 0)
      v23 = (uint64_t)(a2 + 14);
    else
      v23 = *((_QWORD *)a2 + 7);
    if (v22 >= 0)
      v24 = *((unsigned __int8 *)a2 + 79);
    else
      v24 = *((_QWORD *)a2 + 8);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\"]", 2);
  }
  if (a2[26])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" [fontsize=", 11);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"]", 1);
  }
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" [label=\"", 9);
  v30 = *((_QWORD *)a2 + 10);
  v29 = a2 + 20;
  v28 = v30;
  v31 = *((char *)v29 + 23);
  if (v31 >= 0)
    v32 = (uint64_t)v29;
  else
    v32 = v28;
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)v29 + 23);
  else
    v33 = *((_QWORD *)v29 + 1);
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v32, v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\"]", 2);
  return a1;
}

{
  unsigned int v4;
  int v5;
  BOOL v6;
  const char *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v5 = *a2;
  v4 = a2[1];
  if (*a2)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = " [dir=both]";
LABEL_8:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v7, 11);
    goto LABEL_9;
  }
  if (!(v5 | v4))
  {
    v7 = " [dir=none]";
    goto LABEL_8;
  }
  if (!v5 && v4)
  {
    v7 = " [dir=back]";
    goto LABEL_8;
  }
LABEL_9:
  if (*a2)
  {
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" [arrowhead=", 12);
    v9 = strlen(operator<<(std::ostream &,HGDotGraph::Edge const&)::arrowStrings[*a2]);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)operator<<(std::ostream &,HGDotGraph::Edge const&)::arrowStrings[*a2], v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  }
  if (a2[1])
  {
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" [arrowtail=", 12);
    v12 = strlen(operator<<(std::ostream &,HGDotGraph::Edge const&)::arrowStrings[a2[1]]);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)operator<<(std::ostream &,HGDotGraph::Edge const&)::arrowStrings[a2[1]], v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]", 1);
  }
  if (*((_BYTE *)a2 + 32))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" [style=dotted]", 15);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" [headlabel=\"", 13);
  v17 = *((_QWORD *)a2 + 1);
  v16 = a2 + 2;
  v15 = v17;
  v18 = *((char *)v16 + 23);
  if (v18 >= 0)
    v19 = (uint64_t)v16;
  else
    v19 = v15;
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v16 + 23);
  else
    v20 = *((_QWORD *)v16 + 1);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\"]", 2);
  return a1;
}

uint64_t std::pair<unsigned long const,HGDotGraph::Node>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t HGDotGraph::Node::Node(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  int v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v5 = (std::string *)(a1 + 32);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    v5 = (std::string *)(a1 + 32);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 32);
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
LABEL_6:
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v7;
  }
  v8 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  v10 = *(_DWORD *)(a2 + 104);
  *(_WORD *)(a1 + 108) = *(_WORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v10;
  return a1;
}

void sub_1B2AE8EE0(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[79] < 0)
  {
    operator delete(*v4);
    if ((v1[55] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[31] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((v1[55] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<unsigned long,HGDotGraph::Node>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,HGDotGraph::Node>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,HGDotGraph::Node>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,HGDotGraph::Node>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,HGDotGraph::Node>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,HGDotGraph::Node>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned long,HGDotGraph::Node>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,HGDotGraph::Node>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,HGDotGraph::Node>>>::destroy(a1, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 143) < 0)
    {
      operator delete(*(void **)(a2 + 120));
      if ((*(char *)(a2 + 119) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(a2 + 95) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_10;
      }
    }
    else if ((*(char *)(a2 + 119) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a2 + 96));
    if ((*(char *)(a2 + 95) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a2 + 71) & 0x80000000) == 0)
      {
LABEL_6:
        operator delete((void *)a2);
        return;
      }
      goto LABEL_11;
    }
LABEL_10:
    operator delete(*(void **)(a2 + 72));
    if ((*(char *)(a2 + 71) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_11:
    operator delete(*(void **)(a2 + 48));
    operator delete((void *)a2);
  }
}

void std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,HGDotGraph::Edge>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[79] < 0)
      operator delete(*((void **)a2 + 7));
    operator delete(a2);
  }
}

void HGGamutMap::HGGamutMap(HGGamutMap *this)
{
  uint64_t v1;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v1 = off_1E65304E0;
  *(_QWORD *)(v1 + 456) = 0;
  *(_DWORD *)(v1 + 464) = 0;
  *(_BYTE *)(v1 + 468) = 0;
  *(_QWORD *)(v1 + 416) = 0;
  *(_QWORD *)(v1 + 424) = 0;
  *(_QWORD *)(v1 + 408) = 0;
  *(_DWORD *)(v1 + 432) = 0;
  *(_OWORD *)(v1 + 436) = xmmword_1B3524940;
}

void HGGamutMap::~HGGamutMap(CGColorSpaceRef *this)
{
  CGColorSpaceRef v2;

  *this = (CGColorSpaceRef)off_1E65304E0;
  CGColorSpaceRelease(this[51]);
  CGColorSpaceRelease(this[52]);
  v2 = this[57];
  if (v2)
    (*(void (**)(CGColorSpaceRef))(*(_QWORD *)v2 + 24))(v2);
  HGNode::~HGNode((HGNode *)this);
}

{
  CGColorSpaceRef v2;
  void *v3;

  *this = (CGColorSpaceRef)off_1E65304E0;
  CGColorSpaceRelease(this[51]);
  CGColorSpaceRelease(this[52]);
  v2 = this[57];
  if (v2)
    (*(void (**)(CGColorSpaceRef))(*(_QWORD *)v2 + 24))(v2);
  HGNode::~HGNode((HGNode *)this);
  HGObject::operator delete(v3);
}

void HGGamutMap::SetConversion(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  *(_DWORD *)(a1 + 424) = 1;
  *(_DWORD *)(a1 + 428) = a2;
  *(_DWORD *)(a1 + 436) = a3;
  *(_DWORD *)(a1 + 444) = a4;
  *(_DWORD *)(a1 + 432) = a5;
  *(_DWORD *)(a1 + 440) = a6;
  *(_DWORD *)(a1 + 448) = a7;
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 408));
  *(_QWORD *)(a1 + 408) = 0;
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 416));
  *(_QWORD *)(a1 + 416) = 0;
}

HGNode *HGGamutMap::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *result;
  HGNode *v4;
  HgcGamutDebug *v5;
  HgcGamutDebug *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  HGColorConform *v10;
  char *v11;
  uint64_t v12;
  HgcGamutMap *v13;
  HgcGamutMap *v14;

  result = HGRenderer::GetInput(a2, this, 0);
  v4 = result;
  if (*((_BYTE *)this + 468))
  {
    v5 = (HgcGamutDebug *)HGObject::operator new(0x1A0uLL);
    HgcGamutDebug::HgcGamutDebug(v5);
    v6 = (HgcGamutDebug *)*((_QWORD *)this + 57);
    if (v6 == v5)
    {
      (*(void (**)(HgcGamutDebug *))(*(_QWORD *)v5 + 24))(v5);
      v5 = (HgcGamutDebug *)*((_QWORD *)this + 57);
    }
    else
    {
      if (v6)
        (*(void (**)(HgcGamutDebug *))(*(_QWORD *)v6 + 24))(v6);
      *((_QWORD *)this + 57) = v5;
    }
    (*(void (**)(HgcGamutDebug *, _QWORD, HGNode *))(*(_QWORD *)v5 + 120))(v5, 0, v4);
    return (HGNode *)*((_QWORD *)this + 57);
  }
  v7 = *((_QWORD *)this + 51);
  if (v7)
  {
    v8 = *((_QWORD *)this + 52);
    if (v8)
    {
      if (v7 == v8)
        goto LABEL_15;
LABEL_16:
      if (result)
        (*(void (**)(HGNode *))(*(_QWORD *)result + 16))(result);
      v10 = (HGColorConform *)HGObject::operator new(0x320uLL);
      HGColorConform::HGColorConform(v10);
      (*(void (**)(HGColorConform *, _QWORD, HGNode *))(*(_QWORD *)v10 + 120))(v10, 0, v4);
      v12 = *((unsigned int *)this + 106);
      if ((_DWORD)v12)
      {
        if ((_DWORD)v12 == 1)
          HGColorConform::SetConversion((uint64_t)v10, *((_DWORD *)this + 107), *((_DWORD *)this + 109), *((_DWORD *)this + 111), *((_DWORD *)this + 108), *((_DWORD *)this + 110), *((_DWORD *)this + 112));
        else
          HGColorConform::SetConversion((uint64_t)v10, v12, v11);
      }
      else
      {
        HGColorConform::SetConversion((HGNode *)v10, *((CGColorSpace **)this + 51), *((CGColorSpace **)this + 52));
      }
      v13 = (HgcGamutMap *)HGObject::operator new(0x1A0uLL);
      HgcGamutMap::HgcGamutMap(v13);
      v14 = (HgcGamutMap *)*((_QWORD *)this + 57);
      if (v14 == v13)
      {
        (*(void (**)(HgcGamutMap *))(*(_QWORD *)v13 + 24))(v13);
        v13 = (HgcGamutMap *)*((_QWORD *)this + 57);
      }
      else
      {
        if (v14)
          (*(void (**)(HgcGamutMap *))(*(_QWORD *)v14 + 24))(v14);
        *((_QWORD *)this + 57) = v13;
      }
      (*(void (**)(HgcGamutMap *, _QWORD, HGColorConform *))(*(_QWORD *)v13 + 120))(v13, 0, v10);
      (*(void (**)(_QWORD, uint64_t, HGNode *))(**((_QWORD **)this + 57) + 120))(*((_QWORD *)this + 57), 1, v4);
      (*(void (**)(_QWORD, _QWORD, float, float, float, float))(**((_QWORD **)this + 57) + 96))(*((_QWORD *)this + 57), 0, *((float *)this + 116), *((float *)this + 116), *((float *)this + 116), 1.0);
      v9 = *((_QWORD *)this + 57);
      (*(void (**)(HGColorConform *))(*(_QWORD *)v10 + 24))(v10);
      if (v4)
        (*(void (**)(HGNode *))(*(_QWORD *)v4 + 24))(v4);
      return (HGNode *)v9;
    }
  }
  if (!*((_DWORD *)this + 106))
    return result;
  if (v7 != *((_QWORD *)this + 52))
    goto LABEL_16;
LABEL_15:
  if (*((_DWORD *)this + 106))
    goto LABEL_16;
  return result;
}

void sub_1B2AE93F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void HGRenderContext::HGRenderContext(HGRenderContext *this)
{
  _QWORD *v2;
  HGSynchronizable *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  HGObject::HGObject(this);
  *v2 = off_1E6530748;
  v2[2] = 0;
  v2[3] = 0;
  v2[14] = 0;
  v2[15] = 0;
  v2[16] = 0;
  v3 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v3);
  *((_QWORD *)this + 7) = v3;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = 1;
  *((_DWORD *)this + 10) = 2;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 10) = 0x10000001BLL;
  *((_DWORD *)this + 22) = 0;
  *((_BYTE *)this + 92) = 1;
  *((_OWORD *)this + 6) = xmmword_1B3524970;
}

void sub_1B2AE95AC(_Unwind_Exception *a1)
{
  HGObject *v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v7;

  v5 = v3;
  MEMORY[0x1B5E29170](v5, 0x10A1C40BBCAB520);
  v7 = *v4;
  if (*v4)
  {
    *((_QWORD *)v1 + 15) = v7;
    operator delete(v7);
  }
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100](v2);
  HGObject::~HGObject(v1);
  _Unwind_Resume(a1);
}

void HGRenderContext::~HGRenderContext(HGRenderContext *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = off_1E6530748;
  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    if (!*(_BYTE *)(v2 + 8))
      HGSynchronizable::Unlock(*(HGSynchronizable **)v2);
    MEMORY[0x1B5E29170](v2, 0x1020C405F07FB98);
  }
  v3 = *((_QWORD *)this + 7);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 15) = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v5)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    HGObject::~HGObject(this);
  }
  else
  {
LABEL_13:
    HGObject::~HGObject(this);
  }
}

_opaque_pthread_t *HGRenderContext::Lock(_opaque_pthread_t *this)
{
  uint64_t v1;
  uint64_t v2;
  HGSynchronizable *v3;

  if (!*(_QWORD *)&this->__opaque[48])
  {
    v1 = (uint64_t)this;
    v2 = operator new();
    v3 = *(HGSynchronizable **)(v1 + 56);
    *(_QWORD *)v2 = v3;
    *(_BYTE *)(v2 + 8) = 0;
    this = HGSynchronizable::Lock(v3);
    *(_QWORD *)(v1 + 64) = v2;
  }
  return this;
}

void sub_1B2AE9730(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t HGRenderContext::Unlock(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 64);
  if (v1)
  {
    v2 = this;
    if (!*(_BYTE *)(v1 + 8))
      HGSynchronizable::Unlock(*(HGSynchronizable **)v1);
    this = MEMORY[0x1B5E29170](v1, 0x1020C405F07FB98);
    *(_QWORD *)(v2 + 64) = 0;
  }
  return this;
}

BOOL HGRenderContext::IsCPU(HGRenderContext *this)
{
  return *((_DWORD *)this + 9) == 0;
}

BOOL HGRenderContext::IsGPU(HGRenderContext *this)
{
  return *((_DWORD *)this + 9) == 1;
}

uint64_t HGRenderContext::SetWorkMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

uint64_t HGRenderContext::GetType(HGRenderContext *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t HGRenderContext::GetRenderer(HGRenderContext *this)
{
  return *((_QWORD *)this + 9);
}

void HGRenderContext::PushRenderTime(HGRenderContext *this, float a2)
{
  uint64_t v4;
  void **v5;
  float *v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  float *v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  float *v25;
  uint64_t v26;
  __int128 v27;
  int v28;

  v4 = *((_QWORD *)this + 14);
  v6 = (float *)*((_QWORD *)this + 15);
  v5 = (void **)((char *)this + 112);
  if (*((_QWORD *)this + 13) < (unint64_t)(((uint64_t)v6 - v4) >> 2))
  {
    v7 = (size_t)v6 - v4 - 4;
    if (v7)
      memmove(*((void **)this + 14), (const void *)(v4 + 4), v7);
    v6 = (float *)(v4 + v7);
    *((_QWORD *)this + 15) = v6;
  }
  v8 = *((_QWORD *)this + 16);
  if ((unint64_t)v6 < v8)
  {
    *v6 = a2;
    v9 = (uint64_t)(v6 + 1);
    goto LABEL_28;
  }
  v10 = (float *)*v5;
  v11 = (char *)v6 - (_BYTE *)*v5;
  v12 = v11 >> 2;
  v13 = (v11 >> 2) + 1;
  if (v13 >> 62)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v14 = v8 - (_QWORD)v10;
  if (v14 >> 1 > v13)
    v13 = v14 >> 1;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
    v15 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = operator new(4 * v15);
    v17 = (float *)&v16[4 * v12];
    v18 = &v16[4 * v15];
    *v17 = a2;
    v9 = (uint64_t)(v17 + 1);
    v19 = (char *)v6 - (char *)v10;
    if (v6 == v10)
      goto LABEL_26;
  }
  else
  {
    v16 = 0;
    v17 = (float *)(4 * v12);
    v18 = 0;
    *(float *)(4 * v12) = a2;
    v9 = 4 * v12 + 4;
    v19 = (char *)v6 - (char *)v10;
    if (v6 == v10)
      goto LABEL_26;
  }
  v20 = v19 - 4;
  if (v20 < 0x2C)
  {
    v21 = v6;
    goto LABEL_25;
  }
  if ((unint64_t)((char *)v6 - v16 - v11) < 0x20)
  {
    v21 = v6;
    do
    {
LABEL_25:
      v28 = *((_DWORD *)v21-- - 1);
      *((_DWORD *)v17-- - 1) = v28;
    }
    while (v21 != v10);
    goto LABEL_26;
  }
  v22 = (v20 >> 2) + 1;
  v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
  v21 = &v6[v23 / 0xFFFFFFFFFFFFFFFCLL];
  v17 = (float *)((char *)v17 - v23);
  v24 = &v16[4 * v12 - 16];
  v25 = v6 - 4;
  v26 = v22 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v27 = *(_OWORD *)v25;
    *(v24 - 1) = *((_OWORD *)v25 - 1);
    *v24 = v27;
    v24 -= 2;
    v25 -= 8;
    v26 -= 8;
  }
  while (v26);
  if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_25;
LABEL_26:
  *((_QWORD *)this + 14) = v17;
  *((_QWORD *)this + 15) = v9;
  *((_QWORD *)this + 16) = v18;
  if (v10)
    operator delete(v10);
LABEL_28:
  *((_QWORD *)this + 15) = v9;
}

void HGRenderContext::DumpHistogram(HGRenderContext *this)
{
  float *v2;
  float *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  float32x4_t *v9;
  float64x2_t v10;
  unint64_t v11;
  float32x4_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  unint64_t v21;
  double v22;
  float64x2_t v23;
  float32x2_t *v24;
  float64x2_t v25;
  unint64_t v26;
  float32x4_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  float *v37;
  float v38;
  double v39;
  double v40;
  double v41;
  uint64_t *i;
  int v43;
  uint64_t **v44;
  uint64_t **v45;
  uint64_t *v46;
  int v47;
  _DWORD *v48;
  uint64_t *v49;
  uint64_t **v50;
  int v51;
  int v52;
  int v53;
  uint64_t *v54;
  uint64_t **v55;
  BOOL v56;
  double v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;

  if (!*((_BYTE *)this + 92))
    return;
  v3 = (float *)*((_QWORD *)this + 14);
  v2 = (float *)*((_QWORD *)this + 15);
  v4 = v2 - v3;
  v5 = *((_QWORD *)this + 12);
  v6 = v4 - v5;
  if (v4 < v5)
    return;
  if (v4 > v5)
  {
    v7 = 0.0;
    v8 = *((_QWORD *)this + 12);
    if (v6 < 8)
      goto LABEL_9;
    v8 = v5 + (v6 & 0xFFFFFFFFFFFFFFF8);
    v9 = (float32x4_t *)&v3[v5 + 4];
    v10 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
    v11 = v6 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v12 = v9[-1];
      v13 = vcvtq_f64_f32(*(float32x2_t *)v12.f32);
      v14 = vmulq_f64(vcvt_hight_f64_f32(v12), v10);
      v15 = vmulq_f64(v13, v10);
      v16 = vmulq_f64(vcvt_hight_f64_f32(*v9), v10);
      v17 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v9->f32), v10);
      v7 = v7 + v15.f64[0] + v15.f64[1] + v14.f64[0] + v14.f64[1] + v17.f64[0] + v17.f64[1] + v16.f64[0] + v16.f64[1];
      v9 += 2;
      v11 -= 8;
    }
    while (v11);
    if (v6 != (v6 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_9:
      v18 = v4 - v8;
      v19 = &v3[v8];
      do
      {
        v20 = *v19++;
        v7 = v7 + v20 * 1000.0;
        --v18;
      }
      while (v18);
    }
    v39 = (double)v6;
    v41 = v7 / (double)v6;
    v40 = 0.0;
    if (v6 < 8)
      goto LABEL_15;
    v21 = v5 + (v6 & 0xFFFFFFFFFFFFFFF8);
    v22 = v41;
    v23 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v41, 0);
    v24 = (float32x2_t *)&v3[v5 + 4];
    v25 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
    v26 = v6 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v27 = *(float32x4_t *)v24[-2].f32;
      v28 = vsubq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v27.f32), v25), v23);
      v29 = vsubq_f64(vmulq_f64(vcvt_hight_f64_f32(v27), v25), v23);
      v30 = vsubq_f64(vmulq_f64(vcvtq_f64_f32(*v24), v25), v23);
      v31 = vsubq_f64(vmulq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v24->f32), v25), v23);
      v32 = vmulq_f64(v29, v29);
      v33 = vmulq_f64(v28, v28);
      v34 = vmulq_f64(v31, v31);
      v35 = vmulq_f64(v30, v30);
      v40 = v40 + v33.f64[0] + v33.f64[1] + v32.f64[0] + v32.f64[1] + v35.f64[0] + v35.f64[1] + v34.f64[0] + v34.f64[1];
      v24 += 4;
      v26 -= 8;
    }
    while (v26);
    v5 = v21;
    v41 = v22;
    if (v6 != (v6 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_15:
      v36 = v4 - v5;
      v37 = &v3[v5];
      do
      {
        v38 = *v37++;
        v40 = v40 + (v38 * 1000.0 - v41) * (v38 * 1000.0 - v41);
        --v36;
      }
      while (v36);
    }
  }
  else
  {
    v39 = (double)v6;
    v40 = 0.0;
    v41 = 0.0 / (double)v6;
  }
  v59 = 0;
  v60 = 0;
  v58 = &v59;
  v57 = v41;
  if (v3 == v2)
    goto LABEL_46;
  for (i = 0; ; i = v59)
  {
    v43 = (int)(*v3 * 1000.0);
    v44 = &v59;
    v45 = &v59;
    if (i)
      break;
LABEL_26:
    v48 = operator new(0x28uLL);
    v48[7] = v43;
    v48[8] = 0;
    *(_QWORD *)v48 = 0;
    *((_QWORD *)v48 + 1) = 0;
    *((_QWORD *)v48 + 2) = v45;
    *v44 = (uint64_t *)v48;
    v49 = (uint64_t *)v48;
    if (*v58)
    {
      v58 = (uint64_t **)*v58;
      v49 = *v44;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v59, v49);
    ++v60;
    ++v48[8];
    if (++v3 == v2)
      goto LABEL_32;
LABEL_31:
    ;
  }
  v46 = i;
  while (1)
  {
    while (1)
    {
      v45 = (uint64_t **)v46;
      v47 = *((_DWORD *)v46 + 7);
      if (v47 <= v43)
        break;
      v46 = *v45;
      v44 = v45;
      if (!*v45)
        goto LABEL_26;
    }
    if (v47 >= v43)
      break;
    v46 = v45[1];
    if (!v46)
    {
      v44 = v45 + 1;
      goto LABEL_26;
    }
  }
  ++*((_DWORD *)v45 + 8);
  if (++v3 != v2)
    goto LABEL_31;
LABEL_32:
  v50 = v58;
  if (v58 == &v59)
  {
LABEL_46:
    v52 = 0;
    goto LABEL_47;
  }
  v51 = 0;
  v52 = 0;
  do
  {
    if (*((_DWORD *)v50 + 8) > v51)
    {
      v52 = *((_DWORD *)v50 + 7);
      v51 = *((_DWORD *)v50 + 8);
    }
    printf("[%d]", *((_DWORD *)v50 + 7));
    if (*((int *)v50 + 8) >= 1)
    {
      v53 = 0;
      do
      {
        putchar(42);
        ++v53;
      }
      while (v53 < *((_DWORD *)v50 + 8));
    }
    putchar(10);
    v54 = v50[1];
    if (v54)
    {
      do
      {
        v55 = (uint64_t **)v54;
        v54 = (uint64_t *)*v54;
      }
      while (v54);
    }
    else
    {
      do
      {
        v55 = (uint64_t **)v50[2];
        v56 = *v55 == (uint64_t *)v50;
        v50 = v55;
      }
      while (!v56);
    }
    v50 = v55;
  }
  while (v55 != &v59);
LABEL_47:
  printf("Num renders: %lu  Average: %.1f ms  Std Deviation: %.1f  Mode: %d\n\n", (uint64_t)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 2, v57, sqrt(v40 / v39), v52);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v58, v59);
}

void sub_1B2AE9DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  va_list va;

  va_start(va, a8);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)va, v8);
  _Unwind_Resume(a1);
}

void HGRenderExecUnit::HGRenderExecUnit(HGRenderExecUnit *this, HGRenderContext *a2, HGRenderQueue *a3, int a4)
{
  uint64_t v6;
  HGSynchronizable *v7;
  const void *v8;
  PVRenderJob *v9;
  uint64_t FrameStats;
  HGGPUComputeDevice *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char __str[512];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E65307A0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 2) = a4;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 6) = a2;
  (*(void (**)(HGRenderContext *))(*(_QWORD *)a2 + 16))(a2);
  v6 = *(_QWORD *)(*((_QWORD *)this + 6) + 72);
  *((_QWORD *)this + 7) = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  *((_QWORD *)this + 9) = 0;
  v7 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v7);
  *((_QWORD *)this + 8) = a3;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 10) = v7;
  *((_QWORD *)this + 11) = 0;
  HGRenderer::SetOwningRenderQueue(*((_QWORD *)this + 7), a3);
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 304))(*((_QWORD *)this + 7)) & 1) != 0)
  {
    snprintf(__str, 0x200uLL, "CPURenderUnit[cpu][%d]");
  }
  else
  {
    v8 = (const void *)*((_QWORD *)this + 6);
    if (v8)
    {
      if (v9)
      {
        FrameStats = PVRenderJob::GetFrameStats(v9);
        v11 = *(HGGPUComputeDevice **)FrameStats;
        v12 = *(std::__shared_weak_count **)(FrameStats + 8);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        HGGPUComputeDevice::GetGLVirtualScreen(v11);
        if (v12)
        {
          v15 = (unint64_t *)&v12->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
    snprintf(__str, 0x200uLL, "GPURenderUnit[vs%d][%d]");
  }
  *((_QWORD *)this + 2) = strdup(__str);
}

void sub_1B2AE9FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v5;
  void *v7;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v4 + 120) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void HGRenderExecUnit::~HGRenderExecUnit(HGRenderExecUnit *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_1E65307A0;
  v2 = *((_QWORD *)this + 7);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
    free(v4);
  v5 = *((_QWORD *)this + 9);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 10);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (void *)*((_QWORD *)this + 14);
  if (v7)
  {
    *((_QWORD *)this + 15) = v7;
    operator delete(v7);
  }
}

{
  HGRenderExecUnit::~HGRenderExecUnit(this);
  JUMPOUT(0x1B5E29170);
}

BOOL HGRenderExecUnit::IsGPU(HGRenderExecUnit *this)
{
  return *((_DWORD *)this + 10) == 0;
}

BOOL HGRenderExecUnit::IsCPU(HGRenderExecUnit *this)
{
  return *((_DWORD *)this + 10) == 1;
}

BOOL HGRenderExecUnit::CanPerformJobType(uint64_t a1, int a2)
{
  int v3;
  _BOOL8 result;

  v3 = HGPixelBufferObj::format(*(HGPixelBufferObj **)(a1 + 48));
  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 7:
    case 8:
      result = (v3 & 0xFFFFFFFD) == 0;
      break;
    case 2:
    case 3:
      result = (v3 - 1) < 2;
      break;
    case 4:
    case 5:
    case 6:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

HGSynchronizable *HGRenderExecUnit::AddEnqueuedRenderJob(HGRenderExecUnit *this, HGRenderJob *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  HGSynchronizable *v26;

  v26 = (HGSynchronizable *)*((_QWORD *)this + 10);
  HGSynchronizable::Lock(v26);
  v5 = (char *)*((_QWORD *)this + 15);
  v4 = *((_QWORD *)this + 16);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_14;
  }
  v8 = (char *)*((_QWORD *)this + 14);
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = (uint64_t)(v14 + 8);
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
    {
LABEL_12:
      *((_QWORD *)this + 14) = v14;
      *((_QWORD *)this + 15) = v7;
      *((_QWORD *)this + 16) = v15;
      if (!v5)
        goto LABEL_14;
LABEL_13:
      operator delete(v6);
      goto LABEL_14;
    }
  }
  else
  {
    v13 = 0;
    v14 = (char *)(8 * v9);
    v15 = 0;
    *(_QWORD *)(8 * v9) = a2;
    v7 = 8 * v9 + 8;
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_12;
  }
  v18 = (unint64_t)(v16 - 8);
  if (v18 < 0x58)
    goto LABEL_28;
  if ((unint64_t)(v8 - v13) < 0x20)
    goto LABEL_28;
  v19 = (v18 >> 3) + 1;
  v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  v6 = &v5[-v20];
  v14 -= v20;
  v21 = &v13[8 * v9 - 16];
  v22 = v5 - 16;
  v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *(_OWORD *)v22;
    *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
    *(_OWORD *)v21 = v24;
    v21 -= 32;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_28:
    do
    {
      v25 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *((_QWORD *)v14 - 1) = v25;
      v14 -= 8;
    }
    while (v6 != v8);
  }
  v6 = (char *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v14;
  *((_QWORD *)this + 15) = v7;
  *((_QWORD *)this + 16) = v15;
  if (v6)
    goto LABEL_13;
LABEL_14:
  *((_QWORD *)this + 15) = v7;
  return HGSynchronizable::Unlock(v26);
}

void sub_1B2AEA324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

uint64_t HGRenderExecUnit::RemoveEnqueuedRenderJob(HGRenderExecUnit *this, HGRenderJob *a2)
{
  HGSynchronizable *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int64_t v11;

  v4 = (HGSynchronizable *)*((_QWORD *)this + 10);
  HGSynchronizable::Lock(v4);
  v6 = (char *)*((_QWORD *)this + 14);
  v5 = (char *)*((_QWORD *)this + 15);
  if (v6 == v5)
  {
LABEL_5:
    v8 = 0;
  }
  else
  {
    v7 = 0;
    while (*(HGRenderJob **)&v6[v7] != a2)
    {
      v7 += 8;
      if (&v6[v7] == v5)
        goto LABEL_5;
    }
    v9 = &v6[v7];
    v10 = &v6[v7 + 8];
    v11 = v5 - v10;
    if (v5 != v10)
      memmove(&v6[v7], v10, v5 - v10);
    *((_QWORD *)this + 15) = &v9[v11];
    v8 = 1;
  }
  HGSynchronizable::Unlock(v4);
  return v8;
}

BOOL HGRenderExecUnit::HasEnqueuedRenderJob(HGRenderExecUnit *this, HGRenderJob *a2)
{
  HGSynchronizable *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  HGRenderJob *v8;
  _BOOL8 v9;
  BOOL v10;

  v4 = (HGSynchronizable *)*((_QWORD *)this + 10);
  HGSynchronizable::Lock(v4);
  v6 = *((_QWORD *)this + 14);
  v5 = *((_QWORD *)this + 15);
  if (v6 == v5)
  {
    v9 = 0;
  }
  else
  {
    v7 = v6 + 8;
    do
    {
      v8 = *(HGRenderJob **)(v7 - 8);
      v9 = v8 == a2;
      v10 = v8 == a2 || v7 == v5;
      v7 += 8;
    }
    while (!v10);
  }
  HGSynchronizable::Unlock(v4);
  return v9;
}

uint64_t HGRenderExecUnit::NumEnqueuedRenderJobs(HGRenderExecUnit *this)
{
  HGSynchronizable *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = (HGSynchronizable *)*((_QWORD *)this + 10);
  HGSynchronizable::Lock(v2);
  v5 = (char *)this + 112;
  v3 = *((_QWORD *)this + 14);
  v4 = *((_QWORD *)v5 + 1);
  HGSynchronizable::Unlock(v2);
  return (v4 - v3) >> 3;
}

HGRenderExecUnit *StartRenderExecUnitFunc(HGRenderExecUnit *a1)
{
  HGRenderExecUnit::RunLoop(a1);
  return a1;
}

HGSynchronizable *HGRenderExecUnit::RunLoop(HGRenderExecUnit *this)
{
  _DWORD *v2;
  PVRenderJob *v3;
  HGGLContext **v4;
  uint64_t FrameStats;
  HGGPUComputeDevice *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  HGSynchronizable *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  PC_Sp_counted_base *var0;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  PC_Sp_counted_base *v27;
  int v28;
  uint64_t v29;
  PC_Sp_counted_base *v30;
  PC_Sp_counted_base *v31;
  int v32;
  uint64_t v33;
  HGGPUComputeDevice *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  int v41;
  dispatch_qos_class_t v42;
  dispatch_block_t v43;
  HGRenderNode *v44;
  uint64_t v45;
  HGSynchronizable *v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  HGPixelBufferObj *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  HGSynchronizable *v56;
  const char *v57;
  double v58;
  const char *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  PC_Sp_counted_base *v63;
  BOOL HasCPUBufferDestinationsOnly;
  int v65;
  uint64_t v66;
  uint64_t v67;
  PC_Sp_counted_base *v68;
  PC_Sp_counted_base *v69;
  uint64_t v70;
  const char *v71;
  char *v72;
  uint64_t v73;
  PC_Sp_counted_base *v74;
  uint64_t v75;
  const void *v76;
  HGGLContext **v77;
  uint64_t v78;
  HGGPUComputeDevice *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  int GLVirtualScreen;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  TXParagraphStyleFolder_Factory *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  const char *v93;
  double v94;
  const char *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  HGRenderJob *v99;
  int v100;
  uint64_t v101;
  _opaque_pthread_t *v102;
  _opaque_pthread_t *v103;
  thread_inspect_t v104;
  uint64_t v105;
  HGGPUComputeDevice *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  NSObject *v110;
  unint64_t *v111;
  unint64_t v112;
  int v113;
  dispatch_qos_class_t v114;
  dispatch_block_t v115;
  HGTiming *v116;
  double v117;
  PC_Sp_counted_base *v118;
  HGRenderContext *v119;
  float v120;
  const char *v121;
  double v122;
  const char *UserName;
  HGSynchronizable *v124;
  uint64_t v125;
  HGSynchronizable *v126;
  HGSynchronizable *v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  _opaque_pthread_t *v132;
  _opaque_pthread_t *v133;
  uint64_t v134;
  HGGPUComputeDevice *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  int v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  TXParagraphStyleFolder_Factory *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  int v147;
  int *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  const char *v152;
  double v153;
  const char *v154;
  int v155;
  int v156;
  uint64_t NumJobsInRenderQueue;
  std::__shared_weak_count *v158;
  const char *v159;
  double v160;
  const char *v161;
  unint64_t *v162;
  unint64_t v163;
  NSObject *v164;
  NSObject *v165;
  int v166;
  unsigned int v167;
  _BOOL4 v168;
  _QWORD block[6];
  _QWORD v170[6];
  BOOLean_t get_default;
  id v172;
  PCSharedCount v173;
  PCSharedCount v174;
  mach_msg_type_number_t policy_infoCnt[2];
  std::__shared_weak_count *v176;
  char __str[8];
  std::__shared_weak_count *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 10) == 1)
  {
    snprintf(__str, 0x200uLL, "com.apple.helium.rq.cpu-ru%d", *((_DWORD *)this + 2));
    pthread_setname_np(__str);
  }
  else
  {
    v2 = (_DWORD *)*((_QWORD *)this + 6);
    if (v3)
    {
      v4 = (HGGLContext **)v3;
      FrameStats = PVRenderJob::GetFrameStats(v3);
      v6 = *(HGGPUComputeDevice **)FrameStats;
      v7 = *(std::__shared_weak_count **)(FrameStats + 8);
      *(_QWORD *)policy_infoCnt = *(_QWORD *)FrameStats;
      v176 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      HGGPUComputeDevice::GetGLVirtualScreen(v6);
      HGGPURenderContext::GetGLContext(v4, (HGGLContextPtr *)&v174);
      v173.var0 = v174.var0;
      HGGLSetCurrentContext(&v173.var0);
      PCSharedCount::PCSharedCount(&v173);
      PCSharedCount::PCSharedCount(&v174);
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v2 = (_DWORD *)*((_QWORD *)this + 6);
    }
    if (v2[10] == 1)
      snprintf(__str, 0x200uLL, "com.apple.helium.rq.gpu-cu%d.vs%d");
    else
      snprintf(__str, 0x200uLL, "com.apple.helium.rq.gpu-ru%d.vs%d");
    pthread_setname_np(__str);
  }
  v12 = dispatch_group_create();
  if (!HGRenderQueue::IsShuttingDown(*((HGRenderQueue **)this + 8)))
  {
    while (1)
    {
      v174.var0 = 0;
      if (HGRenderQueue::GetRenderJob(*((HGRenderQueue **)this + 8), this, (HGRenderJob **)&v174))
        break;
LABEL_193:
      if (HGRenderQueue::IsShuttingDown(*((HGRenderQueue **)this + 8)))
        goto LABEL_18;
    }
    HGAutoReleasePoolScopeGuard::HGAutoReleasePoolScopeGuard((HGAutoReleasePoolScopeGuard *)&v172);
    HGRenderContext::Lock(*((_opaque_pthread_t **)this + 6));
    *((_QWORD *)v174.var0 + 29) = *((_QWORD *)this + 6);
    v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 7) + 128))(*((_QWORD *)this + 7), 15);
    v16 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 7) + 128))(*((_QWORD *)this + 7), 30);
    v17 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 7) + 128))(*((_QWORD *)this + 7), 22);
    v18 = *((_QWORD *)this + 6);
    var0 = v174.var0;
    v21 = *(_QWORD *)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
    if (v20)
    {
      v22 = (unint64_t *)(v20 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)var0 + 9);
    *((_QWORD *)var0 + 8) = v21;
    *((_QWORD *)var0 + 9) = v20;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v174.var0;
    v28 = *((_DWORD *)v174.var0 + 3);
    switch(v28)
    {
      case 0:
      case 1:
        v29 = *((_QWORD *)this + 7);
        if (v28 == 1 && *((_QWORD *)v174.var0 + 22))
          v29 = *((_QWORD *)v174.var0 + 22);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 120))(v29, 22, *((unsigned __int8 *)v174.var0 + 196));
        v30 = v174.var0;
        if (*((_DWORD *)v174.var0 + 69))
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 30);
          v30 = v174.var0;
        }
        if (*((_DWORD *)v30 + 68))
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 15);
          v30 = v174.var0;
        }
        if (*((_DWORD *)v30 + 70))
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 16);
          v30 = v174.var0;
        }
        if (*((_BYTE *)v30 + 197))
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 40, 1);
        if (*((_DWORD *)this + 10))
        {
          v167 = 0;
          goto LABEL_101;
        }
        v167 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 128))(v29, 43);
        v60 = *((_DWORD *)v174.var0 + 25);
        if (v60 == 2 && v167 != 1)
        {
          v61 = 1;
LABEL_90:
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 43, v61);
          goto LABEL_91;
        }
        if (v60 == 1 && v167)
        {
          v61 = 0;
          goto LABEL_90;
        }
LABEL_91:
        if (*((_DWORD *)v174.var0 + 34))
          v62 = 28;
        else
          v62 = 27;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 20, v62);
        v63 = v174.var0;
        if ((*(_DWORD *)(*((_QWORD *)this + 8) + 60) & 0x80000000) == 0 && *((_DWORD *)v174.var0 + 25) != 1)
        {
          HasCPUBufferDestinationsOnly = HGRenderJob::HasCPUBufferDestinationsOnly((HGRenderJob *)v174.var0);
          v63 = v174.var0;
          if (!HasCPUBufferDestinationsOnly && !*((_BYTE *)v174.var0 + 197))
          {
            (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 120))(v29, 42, *(unsigned int *)(*((_QWORD *)this + 8) + 60));
            v63 = v174.var0;
          }
        }
        if (*((_DWORD *)v63 + 71))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 47);
LABEL_101:
        v65 = *((_DWORD *)v174.var0 + 33) - 1;
        if (v65 <= 2)
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 120))(v29, 19, dword_1B35249C4[v65]);
        v66 = mach_absolute_time();
        v67 = v66;
        v68 = v174.var0;
        *((_QWORD *)v174.var0 + 18) = v66;
        if ((*(_BYTE *)(*((_QWORD *)this + 8) + 70) & 2) != 0)
        {
          if (*((_DWORD *)this + 10))
          {
            printf("Executing CPU Render Job <%p>:                %llu\n", v68, v66);
          }
          else
          {
            v78 = PVRenderJob::GetFrameStats(*((PVRenderJob **)this + 6));
            v79 = *(HGGPUComputeDevice **)v78;
            v80 = *(std::__shared_weak_count **)(v78 + 8);
            *(_QWORD *)__str = *(_QWORD *)v78;
            v178 = v80;
            if (v80)
            {
              v81 = (unint64_t *)&v80->__shared_owners_;
              do
                v82 = __ldxr(v81);
              while (__stxr(v82 + 1, v81));
            }
            GLVirtualScreen = HGGPUComputeDevice::GetGLVirtualScreen(v79);
            printf("Executing GPU Render Job <%p>:                %llu   vs%i\n", v174.var0, v67, GLVirtualScreen);
            if (v80)
            {
              v84 = (unint64_t *)&v80->__shared_owners_;
              do
                v85 = __ldaxr(v84);
              while (__stlxr(v85 - 1, v84));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
          }
        }
        kdebug_trace();
        v69 = v174.var0;
        if (*((_DWORD *)this + 10) == 1)
        {
          *((_DWORD *)v174.var0 + 5) = 1;
          HGRenderJob::SetState((uint64_t)v69, 4);
          HGRenderJob::CallNotifyFunc((HGRenderJob *)v174.var0);
          v70 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 128))(v29, 6);
          v73 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 7) + 128))(*((_QWORD *)this + 7), 5);
          v74 = v174.var0;
          if (*((int *)v174.var0 + 24) >= 1)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 5);
            v74 = v174.var0;
          }
          v75 = *((unsigned int *)v74 + 28);
          if (v75 <= 4)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 6);
          HGRenderExecUnit::ExecuteRenderCPU(this, (HGRenderJob *)v174.var0, v75, v71, v72);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 6, v70);
          if (*((int *)v174.var0 + 24) >= 1)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 5, v73);
          v166 = 0;
          v168 = 0;
        }
        else
        {
          *((_DWORD *)v174.var0 + 5) = 2;
          HGRenderJob::SetState((uint64_t)v69, 4);
          HGRenderJob::CallNotifyFunc((HGRenderJob *)v174.var0);
          v76 = (const void *)*((_QWORD *)this + 6);
          if (v76)
          else
            v77 = 0;
          HGGPURenderContext::GetGLContextPriority(v77);
          v98 = HGGPURenderContext::SetGLContextPriority(v77);
          v99 = (HGRenderJob *)v174.var0;
          v100 = *((_DWORD *)v174.var0 + 28);
          if (v100 == 5)
          {
            v101 = *((_QWORD *)v174.var0 + 15);
            v168 = v101 != 0;
            if (v101)
            {
              policy_infoCnt[0] = 0;
              v102 = pthread_self();
              pthread_getschedparam(v102, (int *)policy_infoCnt, (sched_param *)__str);
              v166 = *(_DWORD *)__str;
              *(_DWORD *)__str = *((_QWORD *)v174.var0 + 15);
              v103 = pthread_self();
              pthread_setschedparam(v103, policy_infoCnt[0], (const sched_param *)__str);
              v99 = (HGRenderJob *)v174.var0;
            }
            else
            {
              v166 = 0;
            }
            HGRenderExecUnit::ExecuteRenderGPU(this, v99);
          }
          else
          {
            if (v100 == 4)
            {
              v104 = MEMORY[0x1B5E29B3C](v98);
              policy_infoCnt[0] = 4;
              get_default = 0;
              thread_policy_get(v104, 2u, (thread_policy_t)__str, policy_infoCnt, &get_default);
              thread_policy_set(v104, 2u, (thread_policy_t)__str, policy_infoCnt[0]);
              mach_port_deallocate(*MEMORY[0x1E0C83DA0], v104);
              HGRenderExecUnit::ExecuteRenderGPU(this, (HGRenderJob *)v174.var0);
            }
            else if (v100)
            {
              if (!*((_QWORD *)this + 9))
              {
                v164 = v12;
                v105 = PVRenderJob::GetFrameStats((PVRenderJob *)v77);
                v106 = *(HGGPUComputeDevice **)v105;
                v107 = *(std::__shared_weak_count **)(v105 + 8);
                *(_QWORD *)policy_infoCnt = *(_QWORD *)v105;
                v176 = v107;
                if (v107)
                {
                  v108 = (unint64_t *)&v107->__shared_owners_;
                  do
                    v109 = __ldxr(v108);
                  while (__stxr(v109 + 1, v108));
                }
                HGGPUComputeDevice::GetGLVirtualScreen(v106);
                if (*(_DWORD *)(*((_QWORD *)this + 6) + 40) == 1)
                  snprintf(__str, 0x200uLL, "com.apple.helium.rq.gpu-cu%d.vs%d.gcd");
                else
                  snprintf(__str, 0x200uLL, "com.apple.helium.rq.gpu-ru%d.vs%d.gcd");
                v110 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
                *((_QWORD *)this + 9) = dispatch_queue_create(__str, v110);
                if (v107)
                {
                  v111 = (unint64_t *)&v107->__shared_owners_;
                  do
                    v112 = __ldaxr(v111);
                  while (__stlxr(v112 - 1, v111));
                  if (!v112)
                  {
                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                    std::__shared_weak_count::__release_weak(v107);
                  }
                }
                v100 = *((_DWORD *)v174.var0 + 28);
                v12 = v164;
              }
              v170[0] = MEMORY[0x1E0C809B0];
              if (v100 == 3)
                v113 = 25;
              else
                v113 = 21;
              v170[1] = 0x40000000;
              if (v100 == 1)
                v114 = QOS_CLASS_UTILITY;
              else
                v114 = v113;
              v170[2] = ___ZN16HGRenderExecUnit7RunLoopEv_block_invoke;
              v170[3] = &__block_descriptor_tmp_4;
              v170[4] = v99;
              v170[5] = this;
              v115 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_DETACHED, v114, 0, v170);
              dispatch_group_async(v12, *((dispatch_queue_t *)this + 9), v115);
              dispatch_group_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
              _Block_release(v115);
            }
            else
            {
              HGRenderExecUnit::ExecuteRenderGPU(this, (HGRenderJob *)v174.var0);
            }
            v166 = 0;
            v168 = 0;
          }
          HGGPURenderContext::SetGLContextPriority(v77);
        }
        v116 = (HGTiming *)mach_absolute_time();
        v117 = HGTiming::GetMachTimeConversionFactor(v116) * (double)((unint64_t)v116 - v67);
        v118 = v174.var0;
        *((double *)v174.var0 + 19) = v117;
        if ((*(_BYTE *)(*((_QWORD *)this + 8) + 70) & 2) != 0)
        {
          if (*((_DWORD *)this + 10))
          {
            printf("Completed CPU Render Job <%p>:                %llu  %5.1f ms\n", v118, v116, v117 * 1000.0);
          }
          else
          {
            v134 = PVRenderJob::GetFrameStats(*((PVRenderJob **)this + 6));
            v135 = *(HGGPUComputeDevice **)v134;
            v136 = *(std::__shared_weak_count **)(v134 + 8);
            *(_QWORD *)__str = *(_QWORD *)v134;
            v178 = v136;
            if (v136)
            {
              v137 = (unint64_t *)&v136->__shared_owners_;
              do
                v138 = __ldxr(v137);
              while (__stxr(v138 + 1, v137));
            }
            v139 = HGGPUComputeDevice::GetGLVirtualScreen(v135);
            printf("Completed GPU Render Job <%p>:                %llu  %5.1f ms  vs%i\n", v174.var0, v116, *((double *)v174.var0 + 19) * 1000.0, v139);
            if (v136)
            {
              v140 = (unint64_t *)&v136->__shared_owners_;
              do
                v141 = __ldaxr(v140);
              while (__stlxr(v141 - 1, v140));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
          }
        }
        kdebug_trace();
        v119 = (HGRenderContext *)*((_QWORD *)this + 6);
        if (*((_BYTE *)v119 + 92))
        {
          v120 = *((double *)v174.var0 + 19);
          HGRenderContext::PushRenderTime(v119, v120);
        }
        if ((*(_BYTE *)(*((_QWORD *)this + 8) + 68) & 8) == 0)
          goto LABEL_174;
        if (*((_DWORD *)this + 10))
        {
          v121 = (const char *)*((_QWORD *)this + 2);
          v122 = *((double *)v174.var0 + 19);
          UserName = HGRenderJob::GetUserName((HGRenderJob *)v174.var0);
          printf("%s : kRenderFinished    :  time: %5.1f (ms)  attached: -  '%s'\n", v121, v122 * 1000.0, UserName);
        }
        else
        {
          v142 = PVRenderJob::GetFrameStats(*((PVRenderJob **)this + 6));
          v143 = *(TXParagraphStyleFolder_Factory **)v142;
          v144 = *(std::__shared_weak_count **)(v142 + 8);
          *(_QWORD *)__str = v143;
          v178 = v144;
          if (v144)
          {
            v145 = (unint64_t *)&v144->__shared_owners_;
            do
              v146 = __ldxr(v145);
            while (__stxr(v146 + 1, v145));
          }
          v147 = TXParagraphStyleFolder_Factory::version(v143);
          v148 = &dword_1ED4DAAEC;
          if (v147)
            v148 = _MergedGlobals_15;
          do
            v149 = __ldaxr((unsigned int *)v148);
          while (__stlxr(v149 + 1, (unsigned int *)v148));
          v165 = v12;
          v150 = atomic_load((unsigned int *)_MergedGlobals_15);
          if (v150 && (v151 = atomic_load((unsigned int *)&dword_1ED4DAAEC)) != 0)
          {
            v152 = (const char *)*((_QWORD *)this + 2);
            v153 = *((double *)v174.var0 + 19);
            v154 = HGRenderJob::GetUserName((HGRenderJob *)v174.var0);
            v155 = _MergedGlobals_15[0];
            v156 = dword_1ED4DAAEC;
            NumJobsInRenderQueue = HGRenderQueue::GetNumJobsInRenderQueue(*((HGRenderQueue **)this + 8));
            printf("%s : kRenderFinished    :  time: %5.1f (ms)  attached: %d  '%s'  gpu split: %d:%d  num enqueued: %zu\n", v152, v153 * 1000.0, v147, v154, v155, v156, NumJobsInRenderQueue);
            v12 = v165;
            v158 = v178;
            if (!v178)
              goto LABEL_174;
          }
          else
          {
            v159 = (const char *)*((_QWORD *)this + 2);
            v160 = *((double *)v174.var0 + 19);
            v161 = HGRenderJob::GetUserName((HGRenderJob *)v174.var0);
            printf("%s : kRenderFinished    :  time: %5.1f (ms)  attached: %d  '%s'\n", v159, v160 * 1000.0, v147, v161);
            v158 = v178;
            if (!v178)
              goto LABEL_174;
          }
          v162 = (unint64_t *)&v158->__shared_owners_;
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
          }
        }
LABEL_174:
        v124 = *(HGSynchronizable **)(*((_QWORD *)this + 8) + 344);
        *(_QWORD *)__str = v124;
        LOBYTE(v178) = 0;
        HGSynchronizable::Lock(v124);
        std::list<HGGPUReadbackJob *>::remove((_QWORD *)(*((_QWORD *)this + 8) + 136), &v174);
        HGSynchronizable::Unlock(v124);
        v125 = *((_QWORD *)this + 8);
        if (*(_BYTE *)(v125 + 72) && !*((_DWORD *)this + 10))
        {
          v127 = *(HGSynchronizable **)(v125 + 128);
          *(_QWORD *)__str = v127;
          LOBYTE(v178) = 0;
          HGSynchronizable::Lock(v127);
          HGSynchronizable::NotifyAll(v127);
          HGSynchronizable::Unlock(v127);
        }
        else if (*(_BYTE *)(v125 + 73) && *((_DWORD *)this + 10) == 1)
        {
          v126 = *(HGSynchronizable **)(v125 + 120);
          *(_QWORD *)__str = v126;
          LOBYTE(v178) = 0;
          HGSynchronizable::Lock(v126);
          HGSynchronizable::NotifyAll(v126);
          HGSynchronizable::Unlock(v126);
        }
        v128 = *((_DWORD *)v174.var0 + 27);
        if (v128 == -1000 || v128 == 6)
        {
          HGRenderJob::CallNotifyFunc((HGRenderJob *)v174.var0);
          v129 = *((_QWORD *)v174.var0 + 38);
          if (*((_QWORD *)v174.var0 + 39) != v129)
          {
            v130 = 0;
            do
            {
              v131 = *(char **)(v129 + 8 * v130);
              HGRenderNode::CallNotifyFunc(v131);
              HGRenderNode::NotifyRenderJobFinished((HGRenderJob **)v131);
              ++v130;
              v129 = *((_QWORD *)v174.var0 + 38);
            }
            while (v130 < (*((_QWORD *)v174.var0 + 39) - v129) >> 3);
          }
        }
        else
        {
          HGRenderJob::SetState((uint64_t)v174.var0, 7);
          HGRenderJob::CallNotifyFunc((HGRenderJob *)v174.var0);
          HGRenderExecUnit::FinalizeRenderNodes(this, (HGRenderJob *)v174.var0);
        }
        if (v168)
        {
          policy_infoCnt[0] = 0;
          v132 = pthread_self();
          pthread_getschedparam(v132, (int *)policy_infoCnt, (sched_param *)__str);
          *(_DWORD *)__str = v166;
          v133 = pthread_self();
          pthread_setschedparam(v133, policy_infoCnt[0], (const sched_param *)__str);
        }
        (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v174.var0 + 24))(v174.var0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 15, v15);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 30, v16);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 120))(v29, 40, 0);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 120))(v29, 19, *(unsigned int *)(*((_QWORD *)this + 6) + 80));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(v29, 22, v17);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 120))(v29, 47, 0);
        if (!*((_DWORD *)this + 10))
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 120))(v29, 43, v167);
        ++*((_QWORD *)this + 11);
LABEL_192:
        *((_DWORD *)this + 6) = 2;
        HGRenderContext::Unlock(*((_QWORD *)this + 6));
        HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&v172);
        goto LABEL_193;
      case 2:
        v44 = (HGRenderNode *)**((_QWORD **)v174.var0 + 38);
        HGRenderExecUnit::ExecuteCopyCPUBitmapToGPUTexture((uint64_t)this, v44);
        v45 = *((_QWORD *)this + 8);
        if (*(_BYTE *)(v45 + 77))
        {
          v46 = *(HGSynchronizable **)(v45 + 344);
          *(_QWORD *)__str = v46;
          LOBYTE(v178) = 0;
          HGSynchronizable::Lock(v46);
          std::list<HGGPUReadbackJob *>::remove((_QWORD *)(*((_QWORD *)this + 8) + 136), &v174);
          HGSynchronizable::Unlock(v46);
        }
        HGRenderNode::CallNotifyFunc((const char *)v44);
        HGRenderNode::NotifyRenderJobFinished((HGRenderJob **)v44);
        (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v174.var0 + 24))(v174.var0);
        goto LABEL_192;
      case 3:
        v47 = (char *)**((_QWORD **)v174.var0 + 38);
        HGRenderNode::CallNotifyFunc(v47);
        HGRenderNode::NotifyRenderJobFinished((HGRenderJob **)v47);
        (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v174.var0 + 24))(v174.var0);
        goto LABEL_192;
      case 4:
        goto LABEL_83;
      case 5:
        v48 = (uint64_t *)*((_QWORD *)v174.var0 + 38);
        v49 = *v48;
        v50 = *(HGPixelBufferObj **)(*v48 + 136);
        if (v50)
        {
          HGRenderQueue::ReleasePBOToSharedPool(*((HGRenderQueue **)this + 8), v50);
          v27 = v174.var0;
          v51 = (uint64_t *)*((_QWORD *)v174.var0 + 38);
          *(_QWORD *)(*v51 + 136) = 0;
          v49 = *v51;
        }
        v52 = *(_QWORD *)(v49 + 16);
        if (v52)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
          v27 = v174.var0;
          v53 = (uint64_t *)*((_QWORD *)v174.var0 + 38);
          *(_QWORD *)(*v53 + 16) = 0;
          v49 = *v53;
        }
        v54 = *(_QWORD *)(v49 + 24);
        if (!v54)
          goto LABEL_83;
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
LABEL_76:
        v27 = v174.var0;
        *(_QWORD *)(**((_QWORD **)v174.var0 + 38) + 24) = 0;
LABEL_83:
        (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v27 + 24))(v27);
        goto LABEL_192;
      case 6:
        v55 = *(_QWORD *)(**((_QWORD **)v174.var0 + 38) + 24);
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
        goto LABEL_76;
      case 7:
      case 8:
        kdebug_trace();
        HGRenderJob::SetState((uint64_t)v174.var0, 4);
        v31 = v174.var0;
        v32 = *((_DWORD *)v174.var0 + 29);
        if (v32)
        {
          if (!*((_QWORD *)this + 9))
          {
            if (HGRenderContext::IsCPU(*((HGRenderContext **)this + 6)))
              snprintf(__str, 0x200uLL, "com.apple.helium.rq.cpu-render-unit%d.gcd", *((_DWORD *)this + 2));
            v33 = PVRenderJob::GetFrameStats(*((PVRenderJob **)this + 6));
            v34 = *(HGGPUComputeDevice **)v33;
            v35 = *(std::__shared_weak_count **)(v33 + 8);
            *(_QWORD *)policy_infoCnt = *(_QWORD *)v33;
            v176 = v35;
            if (v35)
            {
              v36 = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldxr(v36);
              while (__stxr(v37 + 1, v36));
            }
            HGGPUComputeDevice::GetGLVirtualScreen(v34);
            if (*(_DWORD *)(*((_QWORD *)this + 6) + 40) == 1)
              snprintf(__str, 0x200uLL, "com.apple.helium.rq.gpu-cu%d.vs%d.gcd");
            else
              snprintf(__str, 0x200uLL, "com.apple.helium.rq.gpu-ru%d.vs%d.gcd");
            if (v35)
            {
              v38 = (unint64_t *)&v35->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            v40 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
            *((_QWORD *)this + 9) = dispatch_queue_create(__str, v40);
            v32 = *((_DWORD *)v174.var0 + 29);
          }
          block[0] = MEMORY[0x1E0C809B0];
          if (v32 == 3)
            v41 = 25;
          else
            v41 = 21;
          block[1] = 0x40000000;
          if (v32 == 1)
            v42 = QOS_CLASS_UTILITY;
          else
            v42 = v41;
          block[2] = ___ZN16HGRenderExecUnit7RunLoopEv_block_invoke_2;
          block[3] = &__block_descriptor_tmp_16;
          block[4] = v31;
          block[5] = this;
          v43 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_DETACHED, v42, 0, block);
          dispatch_group_async(v12, *((dispatch_queue_t *)this + 9), v43);
          dispatch_group_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
          _Block_release(v43);
        }
        else
        {
          HGRenderJob::CallNotifyFunc((HGRenderJob *)v174.var0);
        }
        v56 = *(HGSynchronizable **)(*((_QWORD *)this + 8) + 344);
        *(_QWORD *)__str = v56;
        LOBYTE(v178) = 0;
        HGSynchronizable::Lock(v56);
        std::list<HGGPUReadbackJob *>::remove((_QWORD *)(*((_QWORD *)this + 8) + 160), &v174);
        HGSynchronizable::Unlock(v56);
        if ((*(_BYTE *)(*((_QWORD *)this + 8) + 68) & 8) != 0)
        {
          if (*((_DWORD *)this + 10))
          {
            v57 = (const char *)*((_QWORD *)this + 2);
            v58 = *((double *)v174.var0 + 20);
            v59 = HGRenderJob::GetUserName((HGRenderJob *)v174.var0);
            printf("%s : kCustomJobFinished :  time: %5.1f (ms)  attached: -  '%s'  job <%p>\n", v57, v58 * 1000.0, v59, v174.var0);
          }
          else
          {
            v86 = PVRenderJob::GetFrameStats(*((PVRenderJob **)this + 6));
            v87 = *(TXParagraphStyleFolder_Factory **)v86;
            v88 = *(std::__shared_weak_count **)(v86 + 8);
            *(_QWORD *)__str = *(_QWORD *)v86;
            v178 = v88;
            if (v88)
            {
              v89 = (unint64_t *)&v88->__shared_owners_;
              do
                v90 = __ldxr(v89);
              while (__stxr(v90 + 1, v89));
            }
            v91 = TXParagraphStyleFolder_Factory::version(v87);
            v92 = 3;
            if (v91)
              v92 = 2;
            ++_MergedGlobals_15[v92];
            v93 = (const char *)*((_QWORD *)this + 2);
            v94 = *((double *)v174.var0 + 20);
            v95 = HGRenderJob::GetUserName((HGRenderJob *)v174.var0);
            printf("%s : kCustomJobFinished :  time: %5.1f (ms)  attached: %d  '%s'  count: %d/%d  job <%p>\n", v93, v94 * 1000.0, v91, v95, dword_1ED4DAAF0, *(_DWORD *)algn_1ED4DAAF4, v174.var0);
            if (v88)
            {
              v96 = (unint64_t *)&v88->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
          }
        }
        kdebug_trace();
        v27 = v174.var0;
        if (*((_DWORD *)v174.var0 + 3) == 8)
        {
          HGSynchronizable::NotifyAll(*((HGSynchronizable **)v174.var0 + 37));
          v27 = v174.var0;
        }
        goto LABEL_83;
      default:
        goto LABEL_192;
    }
  }
LABEL_18:
  dispatch_release(v12);
  v13 = *(HGSynchronizable **)(*((_QWORD *)this + 8) + 344);
  HGSynchronizable::Lock(v13);
  *((_DWORD *)this + 6) = 5;
  return HGSynchronizable::Unlock(v13);
}

void sub_1B2AEB81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,PCSharedCount a33,PCSharedCount a34,char a35,uint64_t a36,char a37)
{
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEB93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEB950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEB96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEB984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEB9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEB9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEB9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEB9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEB9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBA2C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B2AEBA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,HGSynchronizable *a37)
{
  HGSynchronizer::~HGSynchronizer(&a37);
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

void sub_1B2AEBB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&a32);
  _Unwind_Resume(a1);
}

uint64_t HGRenderExecUnit::StartRunLoop(HGRenderExecUnit *this)
{
  pthread_t *v1;
  uint64_t v2;
  size_t v5;
  pthread_attr_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = (pthread_t *)((char *)this + 32);
  if (*((_QWORD *)this + 4))
    return 0;
  v5 = 0;
  pthread_attr_init(&v6);
  pthread_attr_getstacksize(&v6, &v5);
  if (!(v5 >> 20))
    pthread_attr_setstacksize(&v6, 0x100000uLL);
  pthread_attr_setdetachstate(&v6, 2);
  v2 = pthread_create(v1, &v6, (void *(__cdecl *)(void *))StartRenderExecUnitFunc, this);
  pthread_attr_destroy(&v6);
  return v2;
}

void HGRenderExecUnit::ExecuteRenderGPU(HGRenderExecUnit *this, HGRenderJob *a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  HGRenderer *v7;
  uint64_t v8;
  HGBitmap *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  HGGLContext *v60;
  uint64_t v61;
  HGComputeDeviceManager *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  int v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *Buffer;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  HGGLContext *v93;
  uint64_t v94;
  HGComputeDeviceManager *VirtualScreen;
  void (***v96)(HGGPUComputeDevice *__hidden);
  void (**v97)(HGGPUComputeDevice *__hidden);
  int v98;
  unint64_t *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  HGRenderExecUnit *v105;
  void *v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  void *__p[2];
  __int128 v113;
  uint64_t v114;
  id v115;

  HGAutoReleasePoolScopeGuard::HGAutoReleasePoolScopeGuard((HGAutoReleasePoolScopeGuard *)&v115);
  v4 = (uint64_t *)*((_QWORD *)a2 + 38);
  v5 = *((_QWORD *)a2 + 39) - (_QWORD)v4;
  v6 = v5 >> 3;
  v7 = (HGRenderer *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 3) == 1 && *((_QWORD *)a2 + 22))
    v7 = (HGRenderer *)*((_QWORD *)a2 + 22);
  if ((_DWORD)v6 == 1)
  {
    v8 = *v4;
    HGRenderNode::SetRenderer(*v4, v7);
    if (*(_DWORD *)(v8 + 60) == 1 && !*(_QWORD *)(v8 + 24))
    {
      v9 = (HGBitmap *)HGObject::operator new(0x80uLL);
      HGBitmap::HGBitmap(v9, *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), *(unsigned int *)(v8 + 48));
      HGRenderNode::SetBitmap((HGRenderNode *)v8, v9);
      *(_DWORD *)(v8 + 64) = 1;
      (*(void (**)(HGBitmap *))(*(_QWORD *)v9 + 24))(v9);
    }
    v10 = *(_QWORD *)(v8 + 24);
    if (v10)
    {
      (*(void (**)(HGRenderer *, uint64_t, _QWORD))(*(_QWORD *)v7 + 64))(v7, v10, *(_QWORD *)(v8 + 16));
      if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)v7 + 128))(v7, 13))
      {
        HGRenderNode::SetState(v8, 8);
        (*(void (**)(HGRenderer *, uint64_t, _QWORD))(*(_QWORD *)v7 + 120))(v7, 13, 0);
      }
      else
      {
        *(_BYTE *)(v8 + 96) = 0;
        *(_DWORD *)(v8 + 56) = 9;
        if ((*(_BYTE *)(*(_QWORD *)(v8 + 24) + 12) & 0x30) != 0)
          *(_DWORD *)(v8 + 64) = 4;
      }
      goto LABEL_182;
    }
    v44 = *(_DWORD *)(v8 + 60) - 3;
    if (v44 > 3)
      v45 = 0;
    else
      v45 = dword_1B35249F0[v44];
    v114 = 0;
    *(_OWORD *)__p = 0u;
    v113 = 0u;
    HGRendererOutput::HGRendererOutput((uint64_t)__p, *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), *(_DWORD *)(v8 + 48), v45);
    HGRenderer::RenderNode(v7, (const HGRendererOutput *)__p, (char *)1, &v111);
    if (v111)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v111 + 16))(v111);
      v46 = v111;
    }
    else
    {
      v46 = 0;
    }
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)v7 + 128))(v7, 13))
    {
      HGRenderNode::SetState(v8, 8);
      (*(void (**)(HGRenderer *, uint64_t, _QWORD))(*(_QWORD *)v7 + 120))(v7, 13, 0);
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
      goto LABEL_180;
    }
    if (!v46)
    {
      v91 = -999;
LABEL_179:
      *(_DWORD *)(v8 + 56) = v91;
      goto LABEL_180;
    }
    if ((~*(_DWORD *)(v46 + 12) & 0x110) == 0)
    {
      v86 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)v7 + 104))(v7, v46);
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
      v46 = v86;
    }
    *(_QWORD *)(v8 + 24) = v46;
    if (*(_DWORD *)(v8 + 60) == 3 && (*(_BYTE *)(v46 + 12) & 1) != 0)
    {
      v87 = *(unsigned int *)(v8 + 48);
      if (*(_DWORD *)(v46 + 16) != (_DWORD)v87)
      {
        Buffer = HGGPURenderer::CreateBuffer((uint64_t)v7, *(HGRect *)(v46 + 20), v87, 0, 0, 0);
        HGGPURenderer::BufferCopyOpenGL(v7, (HGBuffer *)Buffer, *(HGRect *)(*(_QWORD *)(v8 + 24) + 20), *(HGBitmap **)(v8 + 24));
        v46 = HGGPURenderer::ConvertToGLTexture(v7, *(HGRect *)(Buffer + 20), (HGBitmap *)Buffer);
        (*(void (**)(char *))(*(_QWORD *)Buffer + 24))(Buffer);
        (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 24) + 24))(*(_QWORD *)(v8 + 24));
        *(_QWORD *)(v8 + 24) = v46;
      }
    }
    *(_BYTE *)(v8 + 96) = 0;
    *(_DWORD *)(v8 + 56) = 9;
    v89 = *(_DWORD *)(v46 + 12);
    if ((v89 & 0x31) == 0)
    {
      *(_DWORD *)(v8 + 64) = 1;
      goto LABEL_176;
    }
    if ((v89 & 1) != 0)
    {
      v90 = 6;
    }
    else if ((v89 & 0x20) != 0)
    {
      v90 = 5;
    }
    else
    {
      if ((v89 & 0x10) == 0)
      {
LABEL_172:
        if ((*(_DWORD *)(v8 + 60) - 1) <= 1 || (v92 = *(_QWORD *)(v8 + 72)) != 0 && !*(_DWORD *)(v92 + 8))
        {
          *(_BYTE *)(v8 + 96) = 1;
          *(_DWORD *)(v8 + 56) = 4;
        }
LABEL_176:
        v93 = *(HGGLContext **)(v8 + 88);
        if (v93)
        {
          if (*(_DWORD *)(v8 + 64) == 1)
          {
LABEL_178:
            *(_BYTE *)(v8 + 96) = 1;
            v91 = 3;
            goto LABEL_179;
          }
          v94 = *(_QWORD *)(v8 + 72);
          if (!v94)
          {
            VirtualScreen = (HGComputeDeviceManager *)HGGLContext::getVirtualScreen(v93);
            HGComputeDeviceManager::GetGPUComputeDeviceForCGLVirtualScreen(VirtualScreen, &v106);
            std::shared_ptr<HGComputeDevice const>::operator=[abi:ne180100]<HGGPUComputeDevice const,void>((_QWORD *)(v8 + 72), (uint64_t *)&v106);
            std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&v106);
            v94 = *(_QWORD *)(v8 + 72);
          }
        }
        else
        {
          v94 = *(_QWORD *)(v8 + 72);
          if (!v94 || *(_DWORD *)(v94 + 8) != 1)
          {
LABEL_180:
            if (v111)
              (*(void (**)(uint64_t))(*(_QWORD *)v111 + 24))(v111);
            goto LABEL_182;
          }
          if (*(_DWORD *)(v8 + 64) == 1)
            goto LABEL_178;
        }
        v96 = (void (***)(HGGPUComputeDevice *__hidden))*((_QWORD *)a2 + 8);
        if ((void (***)(HGGPUComputeDevice *__hidden))v94 != v96)
        {
          *(_BYTE *)(v8 + 96) = 1;
          if (v96 && *v96 == off_1E6523A60)
          {
            v99 = (unint64_t *)*((_QWORD *)a2 + 9);
            v106 = v96;
            v107 = (char *)v99;
            if (v99)
            {
              v100 = v99 + 1;
              do
                v101 = __ldxr(v100);
              while (__stxr(v101 + 1, v100));
              v94 = *(_QWORD *)(v8 + 72);
            }
          }
          else
          {
            v96 = 0;
            v106 = 0;
            v107 = 0;
          }
          if (v94 && *(void (***)(HGGPUComputeDevice *__hidden))v94 == off_1E6523A60)
          {
            v102 = *(std::__shared_weak_count **)(v8 + 80);
            v109 = v94;
            v110 = v102;
            if (v102)
            {
              p_shared_owners = (unint64_t *)&v102->__shared_owners_;
              do
                v104 = __ldxr(p_shared_owners);
              while (__stxr(v104 + 1, p_shared_owners));
            }
          }
          else
          {
            v94 = 0;
            v109 = 0;
            v110 = 0;
          }
          if (*(_BYTE *)(*((_QWORD *)this + 8) + 78)
            && (v97 = v96[17]) != 0
            && v97 == *(void (***)(HGGPUComputeDevice *__hidden))(v94 + 136)
            && (*(_BYTE *)(*(_QWORD *)(v8 + 24) + 12) & 0x21) != 0)
          {
            v98 = 6;
          }
          else
          {
            v98 = 5;
          }
          *(_DWORD *)(v8 + 56) = v98;
          std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&v109);
          std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&v106);
        }
        goto LABEL_180;
      }
      v90 = 3;
    }
    *(_DWORD *)(v8 + 64) = v90;
    goto LABEL_172;
  }
  if ((int)v6 < 2)
    goto LABEL_182;
  v105 = this;
  v106 = 0;
  v11 = 0;
  v107 = 0;
  v108 = 0;
  v12 = (v5 >> 3);
  do
  {
    v16 = *(_QWORD *)(*((_QWORD *)a2 + 38) + 8 * v11);
    HGRenderNode::SetRenderer(v16, v7);
    if (*(_QWORD *)(v16 + 24))
    {
      v114 = 0;
      *(_OWORD *)__p = 0u;
      v113 = 0u;
      HGRendererOutput::HGRendererOutput((HGRendererOutput *)__p, *(HGNode **)(v16 + 16), *(HGBitmap **)(v16 + 24));
      v19 = v107;
      if ((unint64_t)v107 < v108)
        goto LABEL_13;
      v20 = (char *)v106;
      v21 = 0xCCCCCCCCCCCCCCCDLL * ((v107 - (_BYTE *)v106) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0x666666666666666)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      if (0x999999999999999ALL * ((uint64_t)(v108 - (_QWORD)v106) >> 3) > v22)
        v22 = 0x999999999999999ALL * ((uint64_t)(v108 - (_QWORD)v106) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v108 - (_QWORD)v106) >> 3) >= 0x333333333333333)
        v23 = 0x666666666666666;
      else
        v23 = v22;
      if (v23)
      {
        if (v23 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v24 = (char *)operator new(40 * v23);
      }
      else
      {
        v24 = 0;
      }
      v29 = &v24[8 * ((v107 - (_BYTE *)v106) >> 3)];
      v30 = v113;
      *(_OWORD *)v29 = *(_OWORD *)__p;
      *((_OWORD *)v29 + 1) = v30;
      *((_QWORD *)v29 + 4) = v114;
      v31 = &v24[40 * v21];
      if (v19 != v20)
      {
        do
        {
          v32 = *(_OWORD *)(v19 - 40);
          v33 = *(_OWORD *)(v19 - 24);
          *((_QWORD *)v31 - 1) = *((_QWORD *)v19 - 1);
          *(_OWORD *)(v31 - 24) = v33;
          *(_OWORD *)(v31 - 40) = v32;
          v31 -= 40;
          v19 -= 40;
        }
        while (v19 != v20);
LABEL_46:
        v19 = v20;
      }
    }
    else
    {
      v25 = *(_DWORD *)(v16 + 60) - 1;
      if (v25 >= 6)
        v26 = 0;
      else
        v26 = dword_1B35249D0[v25];
      v114 = 0;
      *(_OWORD *)__p = 0u;
      v113 = 0u;
      HGRendererOutput::HGRendererOutput((uint64_t)__p, *(_QWORD *)(v16 + 16), *(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40), *(_DWORD *)(v16 + 48), v26);
      v19 = v107;
      if ((unint64_t)v107 < v108)
      {
LABEL_13:
        v13 = *(_OWORD *)__p;
        v14 = v113;
        *((_QWORD *)v19 + 4) = v114;
        *(_OWORD *)v19 = v13;
        *((_OWORD *)v19 + 1) = v14;
        v15 = v19 + 40;
        goto LABEL_14;
      }
      v20 = (char *)v106;
      v27 = 0xCCCCCCCCCCCCCCCDLL * ((v107 - (_BYTE *)v106) >> 3);
      v28 = v27 + 1;
      if (v27 + 1 > 0x666666666666666)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      if (0x999999999999999ALL * ((uint64_t)(v108 - (_QWORD)v106) >> 3) > v28)
        v28 = 0x999999999999999ALL * ((uint64_t)(v108 - (_QWORD)v106) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v108 - (_QWORD)v106) >> 3) >= 0x333333333333333)
        v23 = 0x666666666666666;
      else
        v23 = v28;
      if (v23)
      {
        if (v23 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v24 = (char *)operator new(40 * v23);
      }
      else
      {
        v24 = 0;
      }
      v29 = &v24[8 * ((v107 - (_BYTE *)v106) >> 3)];
      v34 = v113;
      *(_OWORD *)v29 = *(_OWORD *)__p;
      *((_OWORD *)v29 + 1) = v34;
      *((_QWORD *)v29 + 4) = v114;
      v31 = &v24[40 * v27];
      if (v19 != v20)
      {
        do
        {
          v35 = *(_OWORD *)(v19 - 40);
          v36 = *(_OWORD *)(v19 - 24);
          *((_QWORD *)v31 - 1) = *((_QWORD *)v19 - 1);
          *(_OWORD *)(v31 - 24) = v36;
          *(_OWORD *)(v31 - 40) = v35;
          v31 -= 40;
          v19 -= 40;
        }
        while (v19 != v20);
        goto LABEL_46;
      }
    }
    v37 = &v24[40 * v23];
    v15 = v29 + 40;
    v106 = v31;
    v107 = v29 + 40;
    v108 = (unint64_t)v37;
    if (v19)
      operator delete(v19);
LABEL_14:
    v107 = v15;
    ++v11;
  }
  while (v11 != v12);
  HGRenderer::RenderNodes(v7, (const char *)&v106, (char *)1, v17, v18, __p);
  if (!(*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)v7 + 128))(v7, 13))
  {
    v47 = 0;
    while (1)
    {
      v49 = *(_QWORD *)(*((_QWORD *)a2 + 38) + 8 * v47);
      v50 = __p[0];
      v51 = *((_QWORD *)__p[0] + v47);
      if (!v51)
      {
        v48 = -999;
LABEL_72:
        *(_DWORD *)(v49 + 56) = v48;
        goto LABEL_73;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
      v52 = v50[v47];
      v53 = *(_QWORD *)(v49 + 24);
      if (v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
      if ((~*(_DWORD *)(v52 + 12) & 0x110) == 0)
      {
        v54 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)v7 + 104))(v7, v52);
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
        v52 = v54;
      }
      *(_QWORD *)(v49 + 24) = v52;
      if (*(_DWORD *)(v49 + 60) == 3 && (*(_BYTE *)(v52 + 12) & 1) != 0)
      {
        v55 = *(unsigned int *)(v49 + 48);
        if (*(_DWORD *)(v52 + 16) != (_DWORD)v55)
        {
          v56 = HGGPURenderer::CreateBuffer((uint64_t)v7, *(HGRect *)(v52 + 20), v55, 0, 0, 0);
          HGGPURenderer::BufferCopyOpenGL(v7, (HGBuffer *)v56, *(HGRect *)(*(_QWORD *)(v49 + 24) + 20), *(HGBitmap **)(v49 + 24));
          v52 = HGGPURenderer::ConvertToGLTexture(v7, *(HGRect *)(v56 + 20), (HGBitmap *)v56);
          (*(void (**)(char *))(*(_QWORD *)v56 + 24))(v56);
          (*(void (**)(_QWORD))(**(_QWORD **)(v49 + 24) + 24))(*(_QWORD *)(v49 + 24));
          *(_QWORD *)(v49 + 24) = v52;
        }
      }
      *(_BYTE *)(v49 + 96) = 0;
      *(_DWORD *)(v49 + 56) = 9;
      v57 = *(_DWORD *)(v52 + 12);
      if ((v57 & 0x31) == 0)
      {
        *(_DWORD *)(v49 + 64) = 1;
        goto LABEL_96;
      }
      if ((v57 & 1) != 0)
        break;
      if ((v57 & 0x20) != 0)
      {
        v58 = 5;
        goto LABEL_91;
      }
      if ((v57 & 0x10) != 0)
      {
        v58 = 3;
LABEL_91:
        *(_DWORD *)(v49 + 64) = v58;
      }
      if ((*(_DWORD *)(v49 + 60) - 1) <= 1 || (v59 = *(_QWORD *)(v49 + 72)) != 0 && !*(_DWORD *)(v59 + 8))
      {
        *(_BYTE *)(v49 + 96) = 1;
        *(_DWORD *)(v49 + 56) = 4;
      }
LABEL_96:
      v60 = *(HGGLContext **)(v49 + 88);
      if (v60)
      {
        if (*(_DWORD *)(v49 + 64) == 1)
          goto LABEL_98;
        v61 = *(_QWORD *)(v49 + 72);
        if (!v61)
        {
          v62 = (HGComputeDeviceManager *)HGGLContext::getVirtualScreen(v60);
          HGComputeDeviceManager::GetGPUComputeDeviceForCGLVirtualScreen(v62, &v109);
          v64 = v109;
          v63 = v110;
          if (v110)
          {
            v65 = (unint64_t *)&v110->__shared_owners_;
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          v67 = *(std::__shared_weak_count **)(v49 + 80);
          *(_QWORD *)(v49 + 72) = v64;
          *(_QWORD *)(v49 + 80) = v63;
          if (v67)
          {
            v68 = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          v70 = v110;
          if (v110)
          {
            v71 = (unint64_t *)&v110->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          v61 = *(_QWORD *)(v49 + 72);
        }
      }
      else
      {
        v61 = *(_QWORD *)(v49 + 72);
        if (!v61 || *(_DWORD *)(v61 + 8) != 1)
          goto LABEL_73;
        if (*(_DWORD *)(v49 + 64) == 1)
        {
LABEL_98:
          *(_BYTE *)(v49 + 96) = 1;
          v48 = 3;
          goto LABEL_72;
        }
      }
      v73 = *((_QWORD *)a2 + 8);
      if (v61 != v73)
      {
        *(_BYTE *)(v49 + 96) = 1;
        if (!v73)
          goto LABEL_122;
        if (*(void (***)(HGGPUComputeDevice *__hidden))v73 == off_1E6523A60)
        {
          v74 = (std::__shared_weak_count *)*((_QWORD *)a2 + 9);
          if (v74)
          {
            v82 = (unint64_t *)&v74->__shared_owners_;
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
            v61 = *(_QWORD *)(v49 + 72);
          }
        }
        else
        {
          v73 = 0;
LABEL_122:
          v74 = 0;
        }
        if (v61)
        {
          if (*(void (***)(HGGPUComputeDevice *__hidden))v61 != off_1E6523A60)
          {
            v61 = 0;
            goto LABEL_126;
          }
          v75 = *(std::__shared_weak_count **)(v49 + 80);
          if (v75)
          {
            v84 = (unint64_t *)&v75->__shared_owners_;
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
        }
        else
        {
LABEL_126:
          v75 = 0;
        }
        if (*(_BYTE *)(*((_QWORD *)v105 + 8) + 78)
          && (v76 = *(_QWORD *)(v73 + 136)) != 0
          && v76 == *(_QWORD *)(v61 + 136)
          && (*(_BYTE *)(*(_QWORD *)(v49 + 24) + 12) & 0x21) != 0)
        {
          v77 = 6;
        }
        else
        {
          v77 = 5;
        }
        *(_DWORD *)(v49 + 56) = v77;
        if (v75)
        {
          v78 = (unint64_t *)&v75->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        if (v74)
        {
          v80 = (unint64_t *)&v74->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
      }
LABEL_73:
      if (++v47 == v12)
        goto LABEL_53;
    }
    v58 = 6;
    goto LABEL_91;
  }
  v38 = 0;
  do
  {
    HGRenderNode::SetState(*(_QWORD *)(*((_QWORD *)a2 + 38) + v38), 8);
    v38 += 8;
  }
  while (8 * v12 != v38);
  (*(void (**)(HGRenderer *, uint64_t, _QWORD))(*(_QWORD *)v7 + 120))(v7, 13, 0);
LABEL_53:
  v39 = (char *)__p[0];
  if (__p[0])
  {
    v40 = (char *)__p[1];
    v41 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v43 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        v42 = v43;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
      }
      while (v40 != v39);
      v41 = __p[0];
    }
    __p[1] = v39;
    operator delete(v41);
  }
  if (v106)
  {
    v107 = (char *)v106;
    operator delete(v106);
  }
LABEL_182:
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard(&v115);
}

void sub_1B2AEC8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  HGAutoReleasePoolScopeGuard::~HGAutoReleasePoolScopeGuard((id *)(v17 - 88));
  _Unwind_Resume(a1);
}

void HGRenderExecUnit::ExecuteRenderCPU(HGRenderExecUnit *this, HGRenderJob *a2, uint64_t a3, const char *a4, char *a5)
{
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  HGRenderer *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  __int128 v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  HGCVBitmap *v18;
  _OWORD *v19;
  _OWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  HGCVBitmap *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  _OWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  __int128 v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  HGCVBitmap *v54;
  char *v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  HGCVBitmap *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  void *v77;
  int v78;
  HGCVBitmap *v79;
  void *v80;
  char *v81;
  char *v82;
  void *__p[2];
  __int128 v84;
  uint64_t v85;

  v6 = (uint64_t *)*((_QWORD *)a2 + 38);
  v7 = *((_QWORD *)a2 + 39) - (_QWORD)v6;
  v8 = v7 >> 3;
  v9 = (HGRenderer *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 3) == 1 && *((_QWORD *)a2 + 22))
    v9 = (HGRenderer *)*((_QWORD *)a2 + 22);
  if ((_DWORD)v8 == 1)
  {
    v10 = *v6;
    HGRenderNode::SetRenderer(*v6, v9);
    v11 = *(_QWORD *)(v10 + 24);
    if (v11)
    {
      (*(void (**)(HGRenderer *, uint64_t, _QWORD))(*(_QWORD *)v9 + 64))(v9, v11, *(_QWORD *)(v10 + 16));
      if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)v9 + 128))(v9, 13))
      {
        HGRenderNode::SetState(v10, 8);
        (*(void (**)(HGRenderer *, uint64_t, _QWORD))(*(_QWORD *)v9 + 120))(v9, 13, 0);
      }
      else
      {
        *(_BYTE *)(v10 + 96) = 0;
        *(_DWORD *)(v10 + 56) = 9;
        *(_DWORD *)(v10 + 64) = *(_DWORD *)(v10 + 60);
      }
      return;
    }
    if (*(_DWORD *)(v10 + 60) == 6)
    {
      HGCVBitmap::create(*(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40), *(_DWORD *)(v10 + 48), __p);
      if (__p[0])
      {
        (*(void (**)(void *))(*(_QWORD *)__p[0] + 16))(__p[0]);
        v54 = (HGCVBitmap *)__p[0];
      }
      else
      {
        v54 = 0;
      }
      HGCVBitmap::lock(v54, 0);
      (*(void (**)(HGRenderer *, HGCVBitmap *, _QWORD))(*(_QWORD *)v9 + 64))(v9, v54, *(_QWORD *)(v10 + 16));
      HGCVBitmap::unlock(v54, 0);
      if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)v9 + 128))(v9, 13))
      {
        HGRenderNode::SetState(v10, 8);
        (*(void (**)(HGRenderer *, uint64_t, _QWORD))(*(_QWORD *)v9 + 120))(v9, 13, 0);
        (*(void (**)(HGCVBitmap *))(*(_QWORD *)v54 + 24))(v54);
        v70 = *(_QWORD *)(v10 + 72);
        if (!v70)
          goto LABEL_129;
      }
      else
      {
        *(_QWORD *)(v10 + 24) = v54;
        *(_DWORD *)(v10 + 64) = 6;
        v70 = *(_QWORD *)(v10 + 72);
        if (!v70)
        {
LABEL_129:
          if (!*(_QWORD *)(v10 + 88))
          {
            *(_BYTE *)(v10 + 96) = 0;
            *(_DWORD *)(v10 + 56) = 9;
            v77 = __p[0];
            if (!__p[0])
              return;
LABEL_134:
            (*(void (**)(void *))(*(_QWORD *)v77 + 24))(v77);
            return;
          }
          LOBYTE(v76) = 1;
LABEL_131:
          *(_BYTE *)(v10 + 96) = v76;
          *(_DWORD *)(v10 + 56) = 3;
          v77 = __p[0];
          if (!__p[0])
            return;
          goto LABEL_134;
        }
      }
      v76 = *(_DWORD *)(v70 + 8);
      if (v76 == 1)
        goto LABEL_131;
      goto LABEL_129;
    }
    v85 = 0;
    *(_OWORD *)__p = 0u;
    v84 = 0u;
    HGRendererOutput::HGRendererOutput((uint64_t)__p, *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40), *(_DWORD *)(v10 + 48), 0);
    HGRenderer::RenderNode(v9, (const HGRendererOutput *)__p, (char *)1, &v80);
    if (v80)
    {
      (*(void (**)(void *))(*(_QWORD *)v80 + 16))(v80);
      v60 = v80;
    }
    else
    {
      v60 = 0;
    }
    *(_QWORD *)(v10 + 24) = v60;
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)v9 + 128))(v9, 13))
    {
      HGRenderNode::SetState(v10, 8);
      (*(void (**)(HGRenderer *, uint64_t, _QWORD))(*(_QWORD *)v9 + 120))(v9, 13, 0);
      v71 = *(_QWORD *)(v10 + 24);
      if (v71)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71);
        *(_QWORD *)(v10 + 24) = 0;
      }
      v72 = v80;
      if (!v80)
        return;
LABEL_138:
      (*(void (**)(void *))(*(_QWORD *)v72 + 24))(v72);
      return;
    }
    if (*(_QWORD *)(v10 + 24))
    {
      *(_DWORD *)(v10 + 64) = 1;
      if (*(_DWORD *)(v10 + 60) != 1)
      {
        v73 = *(_QWORD *)(v10 + 72);
        if (v73)
        {
          v74 = *(_DWORD *)(v73 + 8);
          if (v74 == 1)
            goto LABEL_126;
        }
        if (*(_QWORD *)(v10 + 88))
        {
          LOBYTE(v74) = 1;
LABEL_126:
          *(_BYTE *)(v10 + 96) = v74;
          v75 = 3;
          goto LABEL_137;
        }
      }
      *(_BYTE *)(v10 + 96) = 0;
      v75 = 9;
    }
    else
    {
      v75 = -999;
    }
LABEL_137:
    *(_DWORD *)(v10 + 56) = v75;
    v72 = v80;
    if (!v80)
      return;
    goto LABEL_138;
  }
  if ((int)v8 < 2)
    return;
  v78 = *(unsigned __int8 *)(*v6 + 52);
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v12 = (v7 >> 3);
  if ((v7 >> 3))
  {
    for (i = 0; i != v12; ++i)
    {
      v17 = *(_QWORD *)(*((_QWORD *)a2 + 38) + 8 * i);
      HGRenderNode::SetRenderer(v17, v9);
      v18 = *(HGCVBitmap **)(v17 + 24);
      if (v18)
      {
        if ((*((_BYTE *)v18 + 12) & 1) != 0)
        {
          HGCVBitmap::lock(v18, 0);
          v18 = *(HGCVBitmap **)(v17 + 24);
        }
        (*(void (**)(HGCVBitmap *))(*(_QWORD *)v18 + 16))(v18);
        v85 = 0;
        *(_OWORD *)__p = 0u;
        v84 = 0u;
        HGRendererOutput::HGRendererOutput((HGRendererOutput *)__p, *(HGNode **)(v17 + 16), *(HGBitmap **)(v17 + 24));
        v19 = v81;
        if (v81 >= v82)
        {
          v20 = v80;
          v21 = 0xCCCCCCCCCCCCCCCDLL * ((v81 - (_BYTE *)v80) >> 3);
          v22 = v21 + 1;
          if (v21 + 1 > 0x666666666666666)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((v82 - (_BYTE *)v80) >> 3) > v22)
            v22 = 0x999999999999999ALL * ((v82 - (_BYTE *)v80) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((v82 - (_BYTE *)v80) >> 3) >= 0x333333333333333)
            v23 = 0x666666666666666;
          else
            v23 = v22;
          if (v23)
          {
            if (v23 > 0x666666666666666)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v24 = (char *)operator new(40 * v23);
          }
          else
          {
            v24 = 0;
          }
          v28 = &v24[40 * v21];
          v29 = v84;
          *(_OWORD *)v28 = *(_OWORD *)__p;
          *((_OWORD *)v28 + 1) = v29;
          *((_QWORD *)v28 + 4) = v85;
          v30 = v28;
          if (v19 != v20)
          {
            do
            {
              v31 = *(_OWORD *)((char *)v19 - 40);
              v32 = *(_OWORD *)((char *)v19 - 24);
              *((_QWORD *)v30 - 1) = *((_QWORD *)v19 - 1);
              *(_OWORD *)(v30 - 24) = v32;
              *(_OWORD *)(v30 - 40) = v31;
              v30 -= 40;
              v19 = (_OWORD *)((char *)v19 - 40);
            }
            while (v19 != v20);
            goto LABEL_59;
          }
          goto LABEL_60;
        }
      }
      else
      {
        if (*(_DWORD *)(v17 + 60) == 6)
        {
          HGCVBitmap::create(*(_QWORD *)(v17 + 32), *(_QWORD *)(v17 + 40), *(_DWORD *)(v17 + 48), &v79);
          if (v79)
          {
            (*(void (**)(HGCVBitmap *))(*(_QWORD *)v79 + 16))(v79);
            v25 = v79;
          }
          else
          {
            v25 = 0;
          }
          HGCVBitmap::lock(v25, 0);
          v85 = 0;
          *(_OWORD *)__p = 0u;
          v84 = 0u;
          HGRendererOutput::HGRendererOutput((HGRendererOutput *)__p, *(HGNode **)(v17 + 16), (HGBitmap *)v25);
          v33 = v81;
          if (v81 >= v82)
          {
            v37 = v80;
            v38 = 0xCCCCCCCCCCCCCCCDLL * ((v81 - (_BYTE *)v80) >> 3);
            v39 = v38 + 1;
            if (v38 + 1 > 0x666666666666666)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((v82 - (_BYTE *)v80) >> 3) > v39)
              v39 = 0x999999999999999ALL * ((v82 - (_BYTE *)v80) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((v82 - (_BYTE *)v80) >> 3) >= 0x333333333333333)
              v40 = 0x666666666666666;
            else
              v40 = v39;
            if (v40)
            {
              if (v40 > 0x666666666666666)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v41 = (char *)operator new(40 * v40);
            }
            else
            {
              v41 = 0;
            }
            v45 = &v41[40 * v38];
            v46 = v84;
            *(_OWORD *)v45 = *(_OWORD *)__p;
            *((_OWORD *)v45 + 1) = v46;
            *((_QWORD *)v45 + 4) = v85;
            v47 = v45;
            if (v33 != v37)
            {
              do
              {
                v48 = *(_OWORD *)((char *)v33 - 40);
                v49 = *(_OWORD *)((char *)v33 - 24);
                *((_QWORD *)v47 - 1) = *((_QWORD *)v33 - 1);
                *(_OWORD *)(v47 - 24) = v49;
                *(_OWORD *)(v47 - 40) = v48;
                v47 -= 40;
                v33 = (_OWORD *)((char *)v33 - 40);
              }
              while (v33 != v37);
              v33 = v37;
            }
            v36 = v45 + 40;
            v80 = v47;
            v81 = v45 + 40;
            v82 = &v41[40 * v40];
            if (v33)
              operator delete(v33);
          }
          else
          {
            v34 = *(_OWORD *)__p;
            v35 = v84;
            *((_QWORD *)v81 + 4) = v85;
            *v33 = v34;
            v33[1] = v35;
            v36 = (char *)v33 + 40;
          }
          v81 = v36;
          if (v79)
            (*(void (**)(HGCVBitmap *))(*(_QWORD *)v79 + 24))(v79);
          continue;
        }
        v85 = 0;
        *(_OWORD *)__p = 0u;
        v84 = 0u;
        HGRendererOutput::HGRendererOutput((uint64_t)__p, *(_QWORD *)(v17 + 16), *(_QWORD *)(v17 + 32), *(_QWORD *)(v17 + 40), *(_DWORD *)(v17 + 48), 0);
        v19 = v81;
        if (v81 >= v82)
        {
          v20 = v80;
          v26 = 0xCCCCCCCCCCCCCCCDLL * ((v81 - (_BYTE *)v80) >> 3);
          v27 = v26 + 1;
          if (v26 + 1 > 0x666666666666666)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((v82 - (_BYTE *)v80) >> 3) > v27)
            v27 = 0x999999999999999ALL * ((v82 - (_BYTE *)v80) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((v82 - (_BYTE *)v80) >> 3) >= 0x333333333333333)
            v23 = 0x666666666666666;
          else
            v23 = v27;
          if (v23)
          {
            if (v23 > 0x666666666666666)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v24 = (char *)operator new(40 * v23);
          }
          else
          {
            v24 = 0;
          }
          v28 = &v24[40 * v26];
          v42 = v84;
          *(_OWORD *)v28 = *(_OWORD *)__p;
          *((_OWORD *)v28 + 1) = v42;
          *((_QWORD *)v28 + 4) = v85;
          v30 = v28;
          if (v19 != v20)
          {
            do
            {
              v43 = *(_OWORD *)((char *)v19 - 40);
              v44 = *(_OWORD *)((char *)v19 - 24);
              *((_QWORD *)v30 - 1) = *((_QWORD *)v19 - 1);
              *(_OWORD *)(v30 - 24) = v44;
              *(_OWORD *)(v30 - 40) = v43;
              v30 -= 40;
              v19 = (_OWORD *)((char *)v19 - 40);
            }
            while (v19 != v20);
LABEL_59:
            v19 = v20;
          }
LABEL_60:
          v16 = v28 + 40;
          v80 = v30;
          v81 = v28 + 40;
          v82 = &v24[40 * v23];
          if (v19)
            operator delete(v19);
          goto LABEL_12;
        }
      }
      v14 = *(_OWORD *)__p;
      v15 = v84;
      *((_QWORD *)v19 + 4) = v85;
      *v19 = v14;
      v19[1] = v15;
      v16 = (char *)v19 + 40;
LABEL_12:
      v81 = v16;
    }
  }
  HGRenderer::RenderNodes(v9, (const char *)&v80, (char *)(v78 != 0), a4, a5, __p);
  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)v9 + 128))(v9, 13))
  {
    if (v12)
    {
      v50 = 0;
      v51 = 8 * v12;
      v52 = 8;
      do
      {
        HGRenderNode::SetState(*(_QWORD *)(*((_QWORD *)a2 + 38) + v50), 8);
        v53 = *(_QWORD *)((char *)v80 + v52);
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
        v50 += 8;
        v52 += 40;
      }
      while (v51 != v50);
    }
    (*(void (**)(HGRenderer *, uint64_t, _QWORD))(*(_QWORD *)v9 + 120))(v9, 13, 0);
    goto LABEL_80;
  }
  if (v12)
  {
    v61 = 0;
    v62 = 8 * v12;
    v63 = 8;
    do
    {
      v64 = *(_QWORD *)(*((_QWORD *)a2 + 38) + v61);
      v65 = *(_QWORD *)(v64 + 24);
      if (v65)
        (*(void (**)(_QWORD))(*(_QWORD *)v65 + 24))(*(_QWORD *)(v64 + 24));
      v66 = (char *)__p[0];
      v67 = *(HGCVBitmap **)((char *)__p[0] + v61);
      if (v67)
      {
        (*(void (**)(HGCVBitmap *))(*(_QWORD *)v67 + 16))(v67);
        v67 = *(HGCVBitmap **)&v66[v61];
      }
      *(_QWORD *)(v64 + 24) = v67;
      v68 = *(_QWORD *)((char *)v80 + v63);
      if (v68)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v68 + 24))(*(_QWORD *)((char *)v80 + v63));
        v67 = *(HGCVBitmap **)(v64 + 24);
      }
      if ((*((_BYTE *)v67 + 12) & 1) != 0)
      {
        HGCVBitmap::unlock(v67, 0);
        *(_DWORD *)(v64 + 64) = 6;
        *(_BYTE *)(v64 + 96) = 0;
        *(_DWORD *)(v64 + 56) = 9;
        if (!v65)
        {
LABEL_105:
          if (*(_DWORD *)(v64 + 60) != 1
            && ((v69 = *(_QWORD *)(v64 + 72)) != 0 && *(_DWORD *)(v69 + 8) == 1 || *(_QWORD *)(v64 + 88)))
          {
            *(_BYTE *)(v64 + 96) = 1;
            *(_DWORD *)(v64 + 56) = 3;
          }
        }
      }
      else
      {
        *(_DWORD *)(v64 + 64) = 1;
        *(_BYTE *)(v64 + 96) = 0;
        *(_DWORD *)(v64 + 56) = 9;
        if (!v65)
          goto LABEL_105;
      }
      v61 += 8;
      v63 += 40;
    }
    while (v62 != v61);
  }
LABEL_80:
  v55 = (char *)__p[0];
  if (__p[0])
  {
    v56 = (char *)__p[1];
    v57 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v59 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        v58 = v59;
        if (v59)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 24))(v58);
      }
      while (v56 != v55);
      v57 = __p[0];
    }
    __p[1] = v55;
    operator delete(v57);
  }
  if (v80)
  {
    v81 = (char *)v80;
    operator delete(v80);
  }
}

void sub_1B2AED3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN16HGRenderExecUnit7RunLoopEv_block_invoke(uint64_t a1)
{
  HGRenderExecUnit::ExecuteRenderGPU(*(HGRenderExecUnit **)(a1 + 40), *(HGRenderJob **)(a1 + 32));
}

void HGRenderExecUnit::FinalizeRenderNodes(HGRenderExecUnit *this, HGRenderJob *a2)
{
  HGGPURenderer *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  HGRenderJob *v11;
  uint64_t v12;
  const void *v13;
  PVRenderJob *v14;
  uint64_t *FrameStats;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  HGGLContext **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  HGGLContext *v23;
  int VirtualScreen;
  PCSharedCount v25;
  PCSharedCount v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v4 = (HGGPURenderer *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 3) == 1 && *((_QWORD *)a2 + 22))
    v4 = (HGGPURenderer *)*((_QWORD *)a2 + 22);
  v5 = *((_QWORD *)a2 + 39) - *((_QWORD *)a2 + 38);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = v5 >> 3;
    do
    {
      v9 = *(_QWORD *)(*((_QWORD *)a2 + 38) + 8 * v6);
      if (*(_BYTE *)(v9 + 96))
      {
        v10 = *(_DWORD *)(v9 + 56);
        if ((v10 - 4) < 2)
        {
          v13 = (const void *)*((_QWORD *)this + 6);
          if (v13)
          {
            if (v14)
            {
              FrameStats = (uint64_t *)PVRenderJob::GetFrameStats(v14);
              v16 = (std::__shared_weak_count *)FrameStats[1];
              v27 = *FrameStats;
              v28 = v16;
              if (v16)
              {
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v18 = __ldxr(p_shared_owners);
                while (__stxr(v18 + 1, p_shared_owners));
              }
              HGGPURenderer::GetCurrentContext(v4, (uint64_t *)&v26);
              v19 = (HGGLContext **)HGObject::operator new(0x30uLL);
              v25.var0 = v26.var0;
              HGGPUReadbackJob::HGGPUReadbackJob(v19, &v27, &v25, v9);
              PCSharedCount::PCSharedCount(&v25);
              HGRenderQueue::EnqueueGPUReadbackJob(*((HGRenderQueue **)this + 8), v19);
              (*((void (**)(HGGLContext **))*v19 + 3))(v19);
              PCSharedCount::PCSharedCount(&v26);
              v20 = v28;
              if (v28)
              {
                v21 = (unint64_t *)&v28->__shared_owners_;
                do
                  v22 = __ldaxr(v21);
                while (__stlxr(v22 - 1, v21));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
              }
            }
          }
          goto LABEL_7;
        }
        if (v10 == 6)
        {
          v11 = (HGRenderJob *)HGObject::operator new(0x160uLL);
          HGRenderJob::HGRenderJob(v11);
          HGRenderJob::AddRenderNodeInternal(v11, (HGRenderNode *)v9);
          HGUserJob::SetPriority((uint64_t)v11, 3);
          HGUserJob::SetState((uint64_t)v11, 6);
          HGRenderJob::SetComputeDevice((uint64_t)v11, (uint64_t *)(v9 + 72));
          HGRenderJob::SetPriority((uint64_t)v11, 11);
LABEL_28:
          HGRenderNode::CallNotifyFunc((const char *)v9);
          if (HGRenderQueue::EnqueueRenderJob(*((HGRenderQueue **)this + 8), v11))
          {
            *(_DWORD *)(v9 + 56) = -997;
            HGRenderNode::CallNotifyFunc((const char *)v9);
            HGRenderNode::NotifyRenderJobFinished((HGRenderJob **)v9);
          }
          (*(void (**)(HGRenderJob *))(*(_QWORD *)v11 + 24))(v11);
          goto LABEL_7;
        }
        if (v10 == 3)
        {
          v11 = (HGRenderJob *)HGObject::operator new(0x160uLL);
          HGRenderJob::HGRenderJob(v11);
          HGRenderJob::AddRenderNodeInternal(v11, (HGRenderNode *)v9);
          HGUserJob::SetPriority((uint64_t)v11, 2);
          HGUserJob::SetState((uint64_t)v11, 2);
          HGRenderJob::SetPriority((uint64_t)v11, 11);
          v12 = *(_QWORD *)(v9 + 72);
          if (v12 && *(_DWORD *)(v12 + 8) == 1)
          {
            HGRenderJob::SetComputeDevice((uint64_t)v11, (uint64_t *)(v9 + 72));
          }
          else
          {
            v23 = *(HGGLContext **)(v9 + 88);
            if (v23)
            {
              VirtualScreen = HGGLContext::getVirtualScreen(v23);
              HGRenderJob::SetVirtualScreen(v11, VirtualScreen);
            }
          }
          goto LABEL_28;
        }
      }
      else
      {
        HGRenderNode::CallNotifyFunc((const char *)v9);
        HGRenderNode::NotifyRenderJobFinished((HGRenderJob **)v9);
      }
LABEL_7:
      v6 = ++v7;
    }
    while (v8 > v7);
  }
}

void sub_1B2AED744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10, char a11)
{
  void *v11;

  PCSharedCount::PCSharedCount((PCSharedCount *)&a9);
  HGObject::operator delete(v11);
  PCSharedCount::PCSharedCount(&a10);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1B2AED770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2AED784(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AED798(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AED7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10, char a11)
{
  PCSharedCount::PCSharedCount(&a10);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t HGRenderExecUnit::ExecuteCopyCPUBitmapToGPUTexture(uint64_t this, HGRenderNode *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  HGPBOBitmap *v13;
  uint64_t v14;
  HGTiming *v15;
  double v16;
  const void *v17;
  HGGLTexture *v18;
  _BOOL4 v19;
  HGMetalContext *GLTexture;
  int v21;
  __n128 v22;
  HGMetalTexture *MetalContext;
  HGTiming *v24;
  uint64_t v25;
  float32x2_t v26;
  const char *v27;
  const char *v28;
  double v29;
  double v30;
  double v31;
  int v32;
  const char *UserName;
  uint64_t v34;
  float32x2_t v35;
  const char *v36;
  double v37;
  double v38;
  double v39;
  int v40;
  const char *v41;
  int v42;
  int v43;
  HGMetalContext *v44;
  HGRect v45;

  v3 = this;
  if (!*((_QWORD *)a2 + 3))
  {
    if (!*((_QWORD *)a2 + 17))
      return this;
    v11 = mach_absolute_time();
    v12 = v11;
    if ((*(_BYTE *)(*(_QWORD *)(v3 + 64) + 70) & 2) != 0)
      printf("Executing PBO-to-GPU Buffer Copy Job <%p>:    %llu\n", *((const void **)a2 + 24), v11);
    kdebug_trace();
    v13 = (HGPBOBitmap *)HGObject::operator new(0x88uLL);
    HGPBOBitmap::HGPBOBitmap(v13, *((HGPixelBufferObj **)a2 + 17));
    v14 = (*(uint64_t (**)(_QWORD, HGPBOBitmap *))(**(_QWORD **)(v3 + 56) + 104))(*(_QWORD *)(v3 + 56), v13);
    (*(void (**)(HGPBOBitmap *))(*(_QWORD *)v13 + 24))(v13);
    v15 = (HGTiming *)mach_absolute_time();
    v16 = HGTiming::GetMachTimeConversionFactor(v15) * (double)((unint64_t)v15 - v12);
    *((double *)a2 + 15) = v16;
    *((double *)a2 + 13) = *((double *)a2 + 13) + v16;
    if ((*(_BYTE *)(*(_QWORD *)(v3 + 64) + 70) & 2) != 0)
      printf("Completed PBO-to-GPU Buffer Copy Job <%p>:    %llu  %5.1f ms\n", *((const void **)a2 + 24), v15, v16 * 1000.0);
    this = kdebug_trace();
    if (v14)
    {
      v17 = (const void *)*((_QWORD *)a2 + 3);
      if (v17)
      {
        HGRenderQueue::EnqueueDeleteHGGLTexture(*(HGRenderQueue **)(v3 + 64), v18);
      }
      *((_QWORD *)a2 + 3) = v14;
      *((_DWORD *)a2 + 14) = 9;
      *((_DWORD *)a2 + 16) = 3;
      HGPixelBufferObj::ReleaseDataPtr(*((HGPixelBufferObj **)a2 + 17));
      this = (uint64_t)HGRenderQueue::ReleasePBOToSharedPool(*(HGRenderQueue **)(v3 + 64), *((HGPixelBufferObj **)a2 + 17));
      *((_QWORD *)a2 + 17) = 0;
      if ((*(_BYTE *)(*(_QWORD *)(v3 + 64) + 70) & 4) == 0)
        return this;
    }
    else
    {
      *((_DWORD *)a2 + 14) = -997;
      if ((*(_BYTE *)(*(_QWORD *)(v3 + 64) + 70) & 4) == 0)
        return this;
    }
    v25 = *((_QWORD *)a2 + 24);
    v26 = vcvt_f32_f64(vmulq_f64(*((float64x2_t *)a2 + 7), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL)));
    v27 = *(const char **)(v3 + 16);
    if (*((_DWORD *)a2 + 14) == -997)
      v28 = "kXGPUCopy *ERROR*  ";
    else
      v28 = "kXGPUCopyFinished  ";
    v29 = vaddv_f32(v26);
    v30 = v26.f32[0];
    v31 = v26.f32[1];
    v32 = *(_DWORD *)(v25 + 184);
    UserName = HGRenderJob::GetUserName((HGRenderJob *)v25);
    return printf("%s : %s: from vs=%d   time: %5.1f (ms)  download time: %5.1f (ms)  upload time: %5.1f (ms) '%s'\n", v27, v28, v32, v29, v30, v31, UserName);
  }
  v4 = mach_absolute_time();
  v6 = v4;
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 64) + 70) & 2) != 0)
    printf("Executing CPU-to-GPU Buffer Copy Job <%p>:    %llu\n", *((const void **)a2 + 24), v4);
  v7 = *((_QWORD *)a2 + 3);
  v8 = *(void **)(v3 + 56);
  if (v8)
  v9 = *((_DWORD *)a2 + 15);
  if (v9)
  {
    if (v9 == 3 || v9 == 6 && *(_DWORD *)(*((_QWORD *)a2 + 24) + 100) == 1)
    {
      v10 = v9 == 6;
      goto LABEL_23;
    }
    v19 = v9 == 6;
  }
  else
  {
    v19 = 0;
    v10 = 0;
    if (*(_DWORD *)(*((_QWORD *)a2 + 24) + 100) == 1)
    {
LABEL_23:
      GLTexture = (HGMetalContext *)HGGPURenderer::GetGLTexture((HGGPURenderer *)v8, (HGBitmap *)v7, v5);
      mach_absolute_time();
      *((_QWORD *)a2 + 15) = 0;
      v21 = 1;
      v22.n128_u64[0] = 0;
      v19 = v10;
      if ((*(_BYTE *)(*(_QWORD *)(v3 + 64) + 70) & 2) == 0)
        goto LABEL_43;
LABEL_30:
      if (((v21 ^ 1) & 1) != 0 || !v19)
      {
        if (((v19 | v21 ^ 1) & 1) != 0)
        {
          if (((v21 | !v19) & 1) != 0)
            printf("Completed CPU-to-GPU Buffer Copy Job <%p>: MTLTexture    :  %llu  %5.1f ms\n");
          else
            printf("Completed CPU-to-GPU Buffer Copy Job <%p>: MTL-IOSurface :  %llu  %5.1f ms\n");
        }
        else
        {
          printf("Completed CPU-to-GPU Buffer Copy Job <%p>: GLTexture     :  %llu  %5.1f ms\n");
        }
      }
      else
      {
        printf("Completed CPU-to-GPU Buffer Copy Job <%p>: GL-IOSurface  :  %llu  %5.1f ms\n");
      }
      goto LABEL_43;
    }
  }
  MetalContext = (HGMetalTexture *)HGGPURenderer::GetMetalContext((HGGPURenderer *)v8);
  *(_QWORD *)&v45.var0 = *(_QWORD *)(v7 + 28);
  *(_QWORD *)&v45.var2 = 1;
  HGMetalTexture::createFromBitmap(MetalContext, (HGMetalContext *)0xD, *(HGBitmap **)(v7 + 20), v45, v7, 1, &v44);
  if (v44)
  {
    (*(void (**)(HGMetalContext *))(*(_QWORD *)v44 + 16))(v44);
    GLTexture = v44;
    if (v44)
      (*(void (**)(HGMetalContext *))(*(_QWORD *)v44 + 24))(v44);
  }
  else
  {
    GLTexture = 0;
  }
  v24 = (HGTiming *)mach_absolute_time();
  v22.n128_f64[0] = HGTiming::GetMachTimeConversionFactor(v24);
  v21 = 0;
  v22.n128_f64[0] = v22.n128_f64[0] * (double)((unint64_t)v24 - v6);
  *((_QWORD *)a2 + 15) = v22.n128_u64[0];
  *((double *)a2 + 13) = *((double *)a2 + 13) + v22.n128_f64[0];
  v22.n128_f64[0] = v22.n128_f64[0] * 1000.0;
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 64) + 70) & 2) != 0)
    goto LABEL_30;
LABEL_43:
  if (*((_DWORD *)a2 + 14) == 5 && (*(_BYTE *)(*(_QWORD *)(v3 + 64) + 70) & 4) != 0)
  {
    v34 = *((_QWORD *)a2 + 24);
    v35 = vcvt_f32_f64(vmulq_f64(*((float64x2_t *)a2 + 7), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL)));
    v36 = *(const char **)(v3 + 16);
    v37 = vaddv_f32(v35);
    v38 = v35.f32[0];
    v39 = v35.f32[1];
    v40 = *(_DWORD *)(v34 + 184);
    v41 = HGRenderJob::GetUserName((HGRenderJob *)v34);
    printf("%s : %s: from vs=%d   time: %5.1f (ms)  download time: %5.1f (ms)  upload time: %5.1f (ms) '%s'\n", v36, "kXGPUCopyFinished  ", v40, v37, v38, v39, v41);
  }
  this = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v7 + 24))(v7, v22);
  if (GLTexture)
  {
    *((_QWORD *)a2 + 3) = GLTexture;
    *((_DWORD *)a2 + 14) = 9;
    v42 = *((_DWORD *)GLTexture + 3);
    if ((v42 & 1) != 0)
    {
      v43 = 6;
    }
    else if ((v42 & 0x20) != 0)
    {
      v43 = 5;
    }
    else
    {
      if ((v42 & 0x10) == 0)
        return this;
      v43 = 3;
    }
    *((_DWORD *)a2 + 16) = v43;
  }
  else
  {
    *((_QWORD *)a2 + 3) = 0;
    *((_DWORD *)a2 + 14) = -997;
  }
  return this;
}

void sub_1B2AEDCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN16HGRenderExecUnit7RunLoopEv_block_invoke_2(uint64_t a1)
{
  return HGRenderJob::CallNotifyFunc(*(HGRenderJob **)(a1 + 32));
}

_QWORD *std::shared_ptr<HGComputeDevice const>::operator=[abi:ne180100]<HGGPUComputeDevice const,void>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = result;
  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)result[1];
  *result = v4;
  result[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return v2;
    }
  }
  return result;
}

void HGRenderJob::HGRenderJob(HGRenderJob *this)
{
  uint64_t v2;
  HGSynchronizable *v3;

  HGObject::HGObject((HGObject *)this);
  *(_QWORD *)v2 = off_1E6530810;
  *(_DWORD *)(v2 + 12) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = 1;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = xmmword_1B3524A00;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0xFFFFFFFFLL;
  *(_DWORD *)(v2 + 136) = 1;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_QWORD *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 192) = -9999;
  *(_DWORD *)(v2 + 196) = -16777215;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_QWORD *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_QWORD *)(v2 + 344) = 0;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  v3 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v3);
  *((_QWORD *)this + 36) = v3;
}

void sub_1B2AEDEA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;

  v4 = v3;
  MEMORY[0x1B5E29170](v4, 0x10A1C40BBCAB520);
  v6 = *(void **)(v1 + 328);
  if (v6)
  {
    *(_QWORD *)(v1 + 336) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v1 + 304);
  if (v7)
  {
    *(_QWORD *)(v1 + 312) = v7;
    operator delete(v7);
  }
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100](v1 + 80);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100](v1 + 64);
  std::vector<std::shared_ptr<HGComputeDevice const>>::~vector[abi:ne180100]((void **)(v1 + 40));
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100](v2);
  HGObject::~HGObject((HGObject *)v1);
  _Unwind_Resume(a1);
}

void HGRenderJob::~HGRenderJob(HGRenderJob *this)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  *(_QWORD *)this = off_1E6530810;
  v2 = *((_QWORD *)this + 39);
  if (v2 != *((_QWORD *)this + 38))
  {
    v3 = 0;
    v4 = 1;
    v2 = *((_QWORD *)this + 38);
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 24))(*(_QWORD *)(v2 + 8 * v3));
      v3 = v4;
      v2 = *((_QWORD *)this + 38);
      ++v4;
    }
    while (v3 < (*((_QWORD *)this + 39) - v2) >> 3);
  }
  *((_QWORD *)this + 39) = v2;
  *((_QWORD *)this + 31) = 0;
  v5 = *((_QWORD *)this + 36);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (void *)*((_QWORD *)this + 27);
  if (v6)
    free(v6);
  v7 = *((_QWORD *)this + 37);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (void *)*((_QWORD *)this + 41);
  if (v8)
  {
    *((_QWORD *)this + 42) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 38);
  if (v9)
  {
    *((_QWORD *)this + 39) = v9;
    operator delete(v9);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if (v16)
  {
    v17 = *((_QWORD *)this + 6);
    v18 = (void *)*((_QWORD *)this + 5);
    if (v17 != v16)
    {
      do
      {
        v19 = *(std::__shared_weak_count **)(v17 - 8);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v17 -= 16;
      }
      while (v17 != v16);
      v18 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v16;
    operator delete(v18);
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v22)
    goto LABEL_39;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    HGObject::~HGObject((HGObject *)this);
  }
  else
  {
LABEL_39:
    HGObject::~HGObject((HGObject *)this);
  }
}

{
  void *v1;

  HGRenderJob::~HGRenderJob(this);
  HGObject::operator delete(v1);
}

const char *HGRenderJob::GetTypeLabel(HGRenderJob *this)
{
  uint64_t v1;

  v1 = *((int *)this + 3);
  if (v1 > 8)
    return "?????? unknown job type ???????";
  else
    return off_1E6530850[v1];
}

void HGRenderJob::AddRenderNode(HGRenderJob *this, HGRenderNode *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  HGRenderer *v25;

  (*(void (**)(HGRenderNode *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (char *)*((_QWORD *)this + 39);
  v4 = *((_QWORD *)this + 40);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = (char *)*((_QWORD *)this + 38);
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = (uint64_t)(v14 + 8);
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (char *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_30;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_30;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 -= v19;
    v20 = &v13[8 * v9 - 16];
    v21 = (__int128 *)(v5 - 16);
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    v6 = (char *)*((_QWORD *)this + 38);
  }
LABEL_21:
  *((_QWORD *)this + 38) = v14;
  *((_QWORD *)this + 39) = v7;
  *((_QWORD *)this + 40) = v15;
  if (v6)
    operator delete(v6);
LABEL_23:
  *((_QWORD *)this + 39) = v7;
  *((_QWORD *)this + 31) = (v7 - *((_QWORD *)this + 38)) >> 3;
  v25 = (HGRenderer *)*((_QWORD *)this + 22);
  if (v25)
    HGRenderNode::SetRenderer((uint64_t)a2, v25);
}

void HGRenderJob::AddRenderNodeInternal(HGRenderJob *this, HGRenderNode *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  HGRenderer *v25;

  (*(void (**)(HGRenderNode *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (char *)*((_QWORD *)this + 39);
  v4 = *((_QWORD *)this + 40);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = (char *)*((_QWORD *)this + 38);
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = (uint64_t)(v14 + 8);
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (char *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_30;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_30;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 -= v19;
    v20 = &v13[8 * v9 - 16];
    v21 = (__int128 *)(v5 - 16);
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    v6 = (char *)*((_QWORD *)this + 38);
  }
LABEL_21:
  *((_QWORD *)this + 38) = v14;
  *((_QWORD *)this + 39) = v7;
  *((_QWORD *)this + 40) = v15;
  if (v6)
    operator delete(v6);
LABEL_23:
  *((_QWORD *)this + 39) = v7;
  v25 = (HGRenderer *)*((_QWORD *)this + 22);
  if (v25)
    HGRenderNode::SetRenderer((uint64_t)a2, v25);
}

void HGRenderJob::SetComputeDevice(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t HGRenderJob::SetGPUGraphicsAPI(uint64_t result, int a2)
{
  *(_DWORD *)(result + 100) = a2;
  return result;
}

uint64_t HGRenderJob::SetPriority(uint64_t result, int a2)
{
  *(_DWORD *)(result + 104) = a2;
  return result;
}

uint64_t HGRenderJob::SetRenderThreadPriority(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  return result;
}

uint64_t HGRenderJob::SetCustomJobThreadPriority(uint64_t result, int a2)
{
  *(_DWORD *)(result + 116) = a2;
  return result;
}

uint64_t HGRenderJob::SetGLContextPriority(uint64_t result, int a2)
{
  *(_DWORD *)(result + 128) = a2;
  return result;
}

uint64_t HGRenderJob::SetProcessingBufferPrecision(uint64_t result, int a2)
{
  *(_DWORD *)(result + 132) = a2;
  return result;
}

uint64_t HGRenderJob::SetMetalShaderPrecision(uint64_t result, int a2)
{
  *(_DWORD *)(result + 136) = a2;
  return result;
}

HGRenderJob *HGRenderJob::SetRenderer(HGRenderJob *this, HGRenderer *a2)
{
  HGRenderJob *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;

  v3 = this;
  *((_QWORD *)this + 22) = a2;
  v4 = *((_QWORD *)this + 38);
  if (*((_QWORD *)this + 39) != v4)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      this = (HGRenderJob *)HGRenderNode::SetRenderer(*(_QWORD *)(v4 + 8 * v5), a2);
      v5 = v6;
      v4 = *((_QWORD *)v3 + 38);
      ++v6;
    }
    while (v5 < (*((_QWORD *)v3 + 39) - v4) >> 3);
  }
  if (a2)
  {
    this = (HGRenderJob *)(*(uint64_t (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2);
    if ((_DWORD)this)
      v7 = 1;
    else
      v7 = 2;
    *((_DWORD *)v3 + 4) = v7;
  }
  return this;
}

HGRenderJob *HGRenderJob::SetVirtualScreen(HGRenderJob *this, int a2)
{
  if ((a2 & 0x80000000) == 0)
    *((_DWORD *)this + 47) = 1 << a2;
  return this;
}

HGRenderJob *HGRenderJob::SetGraphConcatenationFlag(HGRenderJob *this, char a2)
{
  *((_BYTE *)this + 196) = a2;
  return this;
}

uint64_t HGRenderJob::SetState(uint64_t result, int a2)
{
  *(_DWORD *)(result + 108) = a2;
  return result;
}

HGRenderJob *HGRenderJob::SetUserTag(HGRenderJob *this, uint64_t a2)
{
  *((_QWORD *)this + 25) = a2;
  return this;
}

HGRenderJob *HGRenderJob::SetUserData(HGRenderJob *this, void *a2)
{
  *((_QWORD *)this + 26) = a2;
  return this;
}

void HGRenderJob::SetUserName(HGRenderJob *this, const char *__s1)
{
  void *v4;

  v4 = (void *)*((_QWORD *)this + 27);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 27) = 0;
  }
  if (__s1)
    *((_QWORD *)this + 27) = strdup(__s1);
}

HGRenderJob *HGRenderJob::SetNotifyFunc(HGRenderJob *this, void (*a2)(HGRenderJob *))
{
  *((_QWORD *)this + 30) = a2;
  return this;
}

HGRenderJob *HGRenderJob::SetDumpHeliumGraphLevel(HGRenderJob *this, int a2)
{
  *((_DWORD *)this + 68) = a2;
  return this;
}

HGRenderJob *HGRenderJob::SetDumpHeliumDotGraphLevel(HGRenderJob *this, int a2)
{
  *((_DWORD *)this + 69) = a2;
  return this;
}

uint64_t HGRenderJob::GetState(HGRenderJob *this)
{
  return *((unsigned int *)this + 27);
}

uint64_t HGRenderJob::GetUserTag(HGRenderJob *this)
{
  return *((_QWORD *)this + 25);
}

uint64_t HGRenderJob::GetUserData(HGRenderJob *this)
{
  return *((_QWORD *)this + 26);
}

const char *HGRenderJob::GetUserName(HGRenderJob *this)
{
  if (*((_QWORD *)this + 27))
    return (const char *)*((_QWORD *)this + 27);
  else
    return "";
}

uint64_t HGRenderJob::GetRenderNodeList(HGRenderJob *this)
{
  return (uint64_t)this + 304;
}

uint64_t HGRenderJob::GetRenderer(HGRenderJob *this)
{
  return *((_QWORD *)this + 22);
}

uint64_t HGRenderJob::GetRenderContext(HGRenderJob *this)
{
  return *((_QWORD *)this + 29);
}

uint64_t HGRenderJob::CallNotifyFunc(HGRenderJob *this)
{
  uint64_t v2;
  void (*v3)(HGRenderJob *);
  HGTiming *v4;
  double v5;
  HGSynchronizable *v6;
  uint64_t result;
  int v8;

  v2 = mach_absolute_time();
  v3 = (void (*)(HGRenderJob *))*((_QWORD *)this + 30);
  if (v3)
    v3(this);
  v4 = (HGTiming *)mach_absolute_time();
  v5 = HGTiming::GetMachTimeConversionFactor(v4) * (double)((unint64_t)v4 - v2);
  v6 = (HGSynchronizable *)*((_QWORD *)this + 36);
  HGSynchronizable::Lock(v6);
  *((double *)this + 20) = v5 + *((double *)this + 20);
  HGSynchronizable::Unlock(v6);
  result = HGRenderQueue::GetDebugQueueVerboseMask(*((HGRenderQueue **)this + 28));
  if ((result & 0x200) != 0)
  {
    v8 = *((_DWORD *)this + 27);
    if (v8 < 0)
    {
      switch(v8)
      {
        case -1000:
          return printf("RenderJob<%p>::CallNotifyFunc():kStateError  : %5.1f ms\n");
        case -999:
          return printf("RenderJob<%p>::CallNotifyFunc():kStateEnqueueFail  : %5.1f ms\n");
        case -998:
          return printf("RenderJob<%p>::CallNotifyFunc():kStateBufferCopyFail  : %5.1f ms\n");
      }
    }
    else
    {
      switch(v8)
      {
        case 0:
          result = printf("RenderJob<%p>::CallNotifyFunc():kStateNoError  : %5.1f ms\n");
          break;
        case 1:
          result = printf("RenderJob<%p>::CallNotifyFunc():kStateInitialized  : %5.1f ms\n");
          break;
        case 2:
          result = printf("RenderJob<%p>::CallNotifyFunc():kStateQueued  : %5.1f ms\n");
          break;
        case 3:
          result = printf("RenderJob<%p>::CallNotifyFunc():kStateDequeued  : %5.1f ms\n");
          break;
        case 4:
          result = printf("RenderJob<%p>::CallNotifyFunc():kStateExecuting  : %5.1f ms\n");
          break;
        case 5:
          result = printf("RenderJob<%p>::CallNotifyFunc():kStatePaused  : %5.1f ms\n");
          break;
        case 6:
          result = printf("RenderJob<%p>::CallNotifyFunc():kStateCancelled  : %5.1f ms\n");
          break;
        case 7:
          result = printf("RenderJob<%p>::CallNotifyFunc():kStateRenderFinished  : %5.1f ms\n");
          break;
        case 8:
          result = printf("RenderJob<%p>::CallNotifyFunc():kStateFinished  : %5.1f ms\n");
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

HGSynchronizable *HGRenderJob::AddNotifyTime(HGRenderJob *this, double a2)
{
  HGSynchronizable *v4;

  v4 = (HGSynchronizable *)*((_QWORD *)this + 36);
  HGSynchronizable::Lock(v4);
  *((double *)this + 20) = *((double *)this + 20) + a2;
  return HGSynchronizable::Unlock(v4);
}

uint64_t HGRenderJob::IsRequestedVirtualScreen(HGRenderJob *this, int a2)
{
  if (a2 < 0)
    return 0;
  else
    return (*((_DWORD *)this + 47) >> a2) & 1;
}

BOOL HGRenderJob::UsesOnlyGPUResource(HGRenderJob *this)
{
  int v1;
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;

  v1 = *((_DWORD *)this + 4);
  if ((v1 - 2) < 4)
    return 1;
  if (v1 != 6)
    return 0;
  v3 = *((_QWORD *)this + 3);
  if (v3 && *(_DWORD *)(v3 + 8) == 1)
    return 1;
  if (*((_QWORD *)this + 10))
    return 1;
  v5 = *((_QWORD *)this + 5);
  v4 = *((_QWORD *)this + 6);
  if (v5 == v4)
    return 0;
  v6 = v5 + 16;
  do
  {
    v7 = *(_DWORD *)(*(_QWORD *)(v6 - 16) + 8);
    result = v7 != 0;
    if (v7)
      v8 = v6 == v4;
    else
      v8 = 1;
    v6 += 16;
  }
  while (!v8);
  return result;
}

BOOL HGRenderJob::UsesOnlyCPUResource(HGRenderJob *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL8 result;
  BOOL v8;

  v1 = *((_DWORD *)this + 4);
  if (v1 == 1)
    return 1;
  if (v1 != 6)
    return 0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (!*(_DWORD *)(v2 + 8))
      return 1;
  }
  v4 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 6);
  if (v4 == v3)
    return 0;
  v5 = v4 + 16;
  do
  {
    v6 = *(_DWORD *)(*(_QWORD *)(v5 - 16) + 8);
    result = v6 == 0;
    if (v6)
      v8 = 1;
    else
      v8 = v5 == v3;
    v5 += 16;
  }
  while (!v8);
  return result;
}

uint64_t HGRenderJob::SpecifiesComputeDevices(HGRenderJob *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (*((_DWORD *)this + 4) == 6)
  {
    if (v1)
      return 1;
    if (*((_QWORD *)this + 10))
      return 1;
    if (*((_QWORD *)this + 5) != *((_QWORD *)this + 6))
      return 1;
  }
  else
  {
    if (v1)
      return 1;
    if (*((_QWORD *)this + 10))
      return 1;
    if (*((_QWORD *)this + 5) != *((_QWORD *)this + 6))
      return 1;
  }
  return 0;
}

BOOL HGRenderJob::HasCPUBufferDestinationsOnly(HGRenderJob *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 result;
  BOOL v6;

  v2 = *((_QWORD *)this + 38);
  v1 = *((_QWORD *)this + 39);
  if (v2 == v1)
    return 1;
  v3 = v2 + 8;
  do
  {
    v4 = *(_DWORD *)(*(_QWORD *)(v3 - 8) + 60);
    result = v4 == 1;
    v6 = v4 != 1 || v3 == v1;
    v3 += 8;
  }
  while (!v6);
  return result;
}

HGSynchronizable *HGRenderJob::RenderNodeCallback(HGRenderJob *this, HGRenderNode *a2)
{
  HGSynchronizable *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (HGSynchronizable *)*((_QWORD *)this + 36);
  HGSynchronizable::Lock(v3);
  v4 = *((_QWORD *)this + 31);
  v5 = *((_QWORD *)this + 32) + 1;
  *((_QWORD *)this + 32) = v5;
  if (v5 == v4)
  {
    if (*((_DWORD *)this + 27) == 7)
      *((_DWORD *)this + 27) = 8;
    HGRenderJob::CallNotifyFunc(this);
    if (*((_DWORD *)this + 3) == 1)
      HGSynchronizable::NotifyAll(*((HGSynchronizable **)this + 37));
  }
  return HGSynchronizable::Unlock(v3);
}

void sub_1B2AEEB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

unsigned int HGPrefilterUtils::GetPrefilterRadius(unsigned int a1, float a2, float a3)
{
  if (a1 > 3)
    return 0;
  else
    return vcvtps_s32_f32((float)(log10f(a2) / -0.30103) * (float)(flt_1B3524A40[a1] * a3));
}

uint64_t HGPrefilterUtils::GetSeparablePrefilter(unsigned int *a1, unsigned int a2, char a3, float a4, float a5, float a6)
{
  const char *v11;
  char *v12;
  double v13;
  float v14;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t v19;
  float v20;
  int v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  const char *v25;
  HGLinearFilter *Level;
  const char *v27;
  char *v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  float v31;
  int v32;
  int32x2_t v33;
  __int32 v34;
  int8x16_t v35;
  int v36;
  int32x2_t v37;
  __int32 v38;
  int8x16_t v39;
  int v40;
  int32x2_t v41;
  __int32 v42;
  int8x16_t v43;
  const char *v49;
  const char *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  _BYTE v56[32];

  *(float *)&v13 = log10f(a4);
  if (a2 >= 4)
  {
    v17 = atomic_load(HGLogger::_enabled);
    if ((v17 & 1) != 0)
      HGLogger::log((HGLogger *)"prefilter", (const char *)1, (HGLogger *)"WARNING: Invalid filter kernel", v11, v12, v13);
    goto LABEL_12;
  }
  v14 = *(float *)&v13 / -0.30103;
  if ((float)(*(float *)&v13 / -0.30103) <= 0.0 || a5 <= 1.0)
  {
    v16 = atomic_load(HGLogger::_enabled);
    if ((v16 & 1) != 0)
      HGLogger::log((HGLogger *)"prefilter", (const char *)1, (HGLogger *)"WARNING: Invalid filter coefficients", v11, v12);
LABEL_12:
    HGLinearFilter2D::HGLinearFilter2D((HGLinearFilter2D *)v56, 0);
    HGLinearFilter2D::operator=((uint64_t)a1, (uint64_t)v56);
    HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)v56);
    return 0;
  }
  v19 = (int)a2;
  v20 = *(float *)((char *)&unk_1B3524A30 + v19 * 4);
  v21 = vcvtps_s32_f32(v14 * (float)(flt_1B3524A40[v19] * a5));
  v22 = 2 * v21;
  v23 = a6 != 0.0;
  if (a6 == 0.0)
    v24 = (v22 + 1);
  else
    v24 = (v22 + 2);
  HGLinearFilter2D::reset((uint64_t)a1, 0, 0);
  Level = (HGLinearFilter *)HGLogger::getLevel((HGLogger *)"prefilter", v25);
  if ((_DWORD)Level)
  {
    v29 = atomic_load(HGLogger::_enabled);
    if ((v29 & 1) != 0)
      HGLogger::log((HGLogger *)"prefilter", (const char *)1, (HGLogger *)"downsample_factor_x=%f num_taps=%d\n", v27, v28, a5, v24);
    v30 = atomic_load(HGLogger::_enabled);
    if ((v30 & 1) != 0)
      HGLogger::log((HGLogger *)"prefilter", (const char *)1, (HGLogger *)"downsample_factor_x=%f coeffx[%d]={\n", v27, v28, a5, v24);
  }
  if ((v21 & 0x80000000) == 0)
  {
    v31 = v14 * a5;
    if (a2 == 2)
    {
      v36 = v23 - v21;
      do
      {
        *(float *)v37.i32 = HGLinearFilter::bicubic(Level, (float)((float)v21 - a6) / v31, 0.0, 0.75);
        v38 = v37.i32[0];
        v39 = HGLinearFilter2D::set((HGLinearFilter2D *)a1, v21, 0, v37, 4);
        v39.i32[0] = v38;
        HGLinearFilter2D::set((HGLinearFilter2D *)a1, v36, 0, *(int32x2_t *)v39.i8, 4);
        --v21;
        ++v36;
      }
      while (v21 != -1);
    }
    else if (a2 == 3)
    {
      v32 = v23 - v21;
      do
      {
        *(float *)v33.i32 = HGLinearFilter::rect(Level, (float)((float)v21 - a6) / v31, 0.0, 0.0);
        v34 = v33.i32[0];
        v35 = HGLinearFilter2D::set((HGLinearFilter2D *)a1, v21, 0, v33, 4);
        v35.i32[0] = v34;
        HGLinearFilter2D::set((HGLinearFilter2D *)a1, v32, 0, *(int32x2_t *)v35.i8, 4);
        --v21;
        ++v32;
      }
      while (v21 != -1);
    }
    else
    {
      v40 = v23 - v21;
      do
      {
        HGLinearFilter::lanczos(Level, (float)((float)v21 - a6) / v31, v20, 0.0);
        v42 = v41.i32[0];
        v43 = HGLinearFilter2D::set((HGLinearFilter2D *)a1, v21, 0, v41, 4);
        v43.i32[0] = v42;
        HGLinearFilter2D::set((HGLinearFilter2D *)a1, v40, 0, *(int32x2_t *)v43.i8, 4);
        --v21;
        ++v40;
      }
      while (v21 != -1);
    }
  }
  __asm { FMOV            V0.4S, #1.0 }
  HGLinearFilter2D::normalize((uint64_t)a1, 4u, _Q0);
  if (HGLogger::getLevel((HGLogger *)"prefilter", v49))
  {
    v52 = a1[2];
    v53 = a1[4];
    if ((int)v52 <= (int)(v52 + v53 - 1))
    {
      do
      {
        v55 = atomic_load(HGLogger::_enabled);
        if ((v55 & 1) != 0)
          HGLogger::log((HGLogger *)"prefilter", (const char *)1, (HGLogger *)"[%d] = %f\n", v50, v51, v52, *(float *)(*(_QWORD *)a1 + 16 * (int)(v52 - (a1[2] + a1[4] * a1[3]))));
        v52 = (v52 + 1);
        --v53;
      }
      while (v53);
    }
    v54 = atomic_load(HGLogger::_enabled);
    if ((v54 & 1) != 0)
      HGLogger::log((HGLogger *)"prefilter", (const char *)1, (HGLogger *)"}\n", v50, v51);
  }
  if ((a3 & 1) != 0)
    HGLinearFilter2D::transpose((int32x2_t *)a1);
  return 1;
}

void sub_1B2AEEF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)va);
  _Unwind_Resume(a1);
}

void sub_1B2AEEF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGLinearFilter2D::~HGLinearFilter2D((HGLinearFilter2D *)va);
  _Unwind_Resume(a1);
}

void HGRenderNode::HGRenderNode(HGRenderNode *this)
{
  uint64_t v1;

  HGObject::HGObject(this);
  *(_QWORD *)v1 = off_1E65308A8;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 48) = 24;
  *(_BYTE *)(v1 + 52) = 0;
  *(_QWORD *)(v1 + 56) = 1;
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 96) = 0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_QWORD *)(v1 + 200) = 0;
}

void HGRenderNode::~HGRenderNode(HGRenderNode *this)
{
  HGRenderQueue *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  HGPixelBufferObj *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  *(_QWORD *)this = off_1E65308A8;
  v2 = (HGRenderQueue *)*((_QWORD *)this + 25);
  if (v2
    && *((_QWORD *)this + 23)
    && (*((_QWORD *)this + 2) || *((_QWORD *)this + 3) || *((_QWORD *)this + 17))
    && *((_DWORD *)this + 14) != 8)
  {
    HGRenderQueue::EnqueueDeleteRenderNode(v2, this);
  }
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = (void *)*((_QWORD *)this + 20);
  if (v5)
    free(v5);
  v6 = (HGPixelBufferObj *)*((_QWORD *)this + 17);
  if (v6)
  {
    HGPixelBufferObj::ReleaseDataPtr(v6);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 17) + 24))(*((_QWORD *)this + 17));
  }
  v7 = *((_QWORD *)this + 25);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = *((_QWORD *)this + 11);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v9)
    goto LABEL_24;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    HGObject::~HGObject(this);
  }
  else
  {
LABEL_24:
    HGObject::~HGObject(this);
  }
}

{
  void *v1;

  HGRenderNode::~HGRenderNode(this);
  HGObject::operator delete(v1);
}

uint64_t HGRenderNode::SetNode(HGRenderNode *this, HGNode *a2)
{
  uint64_t result;

  if (a2)
    (*(void (**)(HGNode *))(*(_QWORD *)a2 + 16))(a2);
  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *((_QWORD *)this + 2) = a2;
  return result;
}

uint64_t HGRenderNode::SetBitmap(HGRenderNode *this, HGBitmap *a2)
{
  uint64_t result;

  if (a2)
    (*(void (**)(HGBitmap *))(*(_QWORD *)a2 + 16))(a2);
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *((_QWORD *)this + 3) = a2;
  return result;
}

uint64_t HGRenderNode::SetFormat(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

HGRect *HGRenderNode::SetROI(HGRect *this, HGRect a2)
{
  this[2] = a2;
  return this;
}

uint64_t HGRenderNode::SetFullROIFlag(uint64_t this, char a2)
{
  *(_BYTE *)(this + 52) = a2;
  return this;
}

uint64_t HGRenderNode::SetState(uint64_t result, int a2)
{
  *(_DWORD *)(result + 56) = a2;
  return result;
}

uint64_t HGRenderNode::SetRenderer(uint64_t this, HGRenderer *a2)
{
  *(_QWORD *)(this + 184) = a2;
  return this;
}

uint64_t HGRenderNode::SetRenderQueue(HGRenderNode *this, HGRenderQueue *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 25);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *((_QWORD *)this + 25) = a2;
  return (*(uint64_t (**)(HGRenderQueue *))(*(_QWORD *)a2 + 16))(a2);
}

uint64_t HGRenderNode::SetDestination(uint64_t result, int a2)
{
  *(_DWORD *)(result + 60) = a2;
  return result;
}

uint64_t HGRenderNode::SetUserTag(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 144) = a2;
  return this;
}

void HGRenderNode::SetUserName(HGRenderNode *this, const char *__s)
{
  void *v4;
  size_t v5;
  char *v6;

  v4 = (void *)*((_QWORD *)this + 20);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 20) = 0;
  }
  if (__s)
  {
    v5 = strlen(__s);
    v6 = (char *)malloc_type_malloc(v5 + 1, 0x674E99C9uLL);
    *((_QWORD *)this + 20) = v6;
    strcpy(v6, __s);
  }
}

uint64_t HGRenderNode::SetNotifyFunc(uint64_t this, void (*a2)(HGRenderNode *))
{
  *(_QWORD *)(this + 168) = a2;
  return this;
}

uint64_t HGRenderNode::GetState(HGRenderNode *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t HGRenderNode::GetRenderer(HGRenderNode *this)
{
  return *((_QWORD *)this + 23);
}

const char *HGRenderNode::CallNotifyFunc(const char *this)
{
  const char *v1;
  uint64_t v2;
  HGTiming *v3;
  double v4;
  int v5;

  if (*((_QWORD *)this + 21))
  {
    v1 = this;
    v2 = mach_absolute_time();
    (*((void (**)(const char *))v1 + 21))(v1);
    v3 = (HGTiming *)mach_absolute_time();
    v4 = HGTiming::GetMachTimeConversionFactor(v3) * (double)((unint64_t)v3 - v2);
    HGRenderJob::AddNotifyTime(*((HGRenderJob **)v1 + 24), v4);
    this = (const char *)HGRenderQueue::GetDebugQueueVerboseMask(*((HGRenderQueue **)v1 + 25));
    if (((unsigned __int16)this & 0x200) != 0)
    {
      v5 = *((_DWORD *)v1 + 14);
      switch(v5)
      {
        case 0:
          this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateNoError  : %5.1f ms\n");
          break;
        case 1:
          this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateInitialized  : %5.1f ms\n");
          break;
        case 2:
          this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateFinalizingBuffers  : %5.1f ms\n");
          break;
        case 3:
          this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateAsyncGPUUpload  : %5.1f ms\n");
          break;
        case 4:
          this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateAsyncGPUReadback  : %5.1f ms\n");
          break;
        case 5:
          this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateAsyncXGPUBufferCopy  : %5.1f ms\n");
          break;
        case 6:
          this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateAsyncXGMIBufferCopy  : %5.1f ms\n");
          break;
        case 7:
          this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateJobDequeued  : %5.1f ms\n");
          break;
        case 8:
          this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateCancelled  : %5.1f ms\n");
          break;
        case 9:
          this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateFinished  : %5.1f ms\n");
          break;
        default:
          this = "RenderNode<%p>::CallNotifyFunc():kStateError  : %5.1f ms\n";
          switch(v5)
          {
            case -1000:
              goto LABEL_19;
            case -999:
              this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateRenderError  : %5.1f ms\n");
              break;
            case -998:
              this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateBufferSetupError  : %5.1f ms\n");
              break;
            case -997:
              this = (const char *)printf("RenderNode<%p>::CallNotifyFunc():kStateBufferCopyError  : %5.1f ms\n");
              break;
            case -996:
              this = "RenderNode<%p>::CallNotifyFunc():kStateBufferDeleteError  : %5.1f ms\n";
LABEL_19:
              this = (const char *)printf(this, v1, v4 * 1000.0);
              break;
            default:
              return this;
          }
          break;
      }
    }
  }
  return this;
}

uint64_t HGRenderNode::NotifyRenderJobFinished(HGRenderJob **this)
{
  HGRenderJob::RenderNodeCallback(this[24], (HGRenderNode *)this);
  return (*(uint64_t (**)(HGRenderJob *))(*(_QWORD *)this[24] + 24))(this[24]);
}

void HGRenderQueue::HGRenderQueue(HGRenderQueue *this)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;
  _QWORD **v6;
  HGSynchronizable *v7;
  HGSynchronizable *v8;
  HGSynchronizable *v9;
  HGSynchronizable *v10;
  HGSynchronizable *v11;
  HGSynchronizable *v12;
  HGSynchronizable *v13;
  HGSynchronizable *v14;
  TXParagraphStyleFolder_Factory *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  int v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  int v28;
  _DWORD *v29;
  _QWORD *v30;
  uint64_t *v31;
  HGSynchronizable *v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t **v35;
  int v36;
  _DWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  _QWORD **v40;
  _QWORD **v41;

  HGObject::HGObject((HGObject *)this);
  *(_QWORD *)v2 = off_1E65308F8;
  *(_DWORD *)(v2 + 12) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = 1;
  *(_WORD *)(v2 + 41) = 0;
  *(_BYTE *)(v2 + 43) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 56) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v2 + 64) = 1;
  *(_DWORD *)(v2 + 68) = dword_1ED4DAAFC;
  *(_DWORD *)(v2 + 72) = 65793;
  *(_WORD *)(v2 + 76) = 0;
  *(_BYTE *)(v2 + 78) = 1;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 96) = v2 + 96;
  *(_QWORD *)(v2 + 104) = v2 + 96;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 136) = v2 + 136;
  *(_QWORD *)(v2 + 144) = v2 + 136;
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = v2 + 160;
  *(_QWORD *)(v2 + 168) = v2 + 160;
  *(_QWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 208) = 0;
  v3 = (uint64_t **)(v2 + 208);
  *(_QWORD *)(v2 + 232) = 0;
  v4 = (uint64_t **)(v2 + 232);
  *(_QWORD *)(v2 + 200) = v2 + 208;
  v40 = (_QWORD **)(v2 + 200);
  v41 = (_QWORD **)(v2 + 224);
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 224) = v2 + 232;
  *(_QWORD *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 248) = v2 + 256;
  *(_QWORD *)(v2 + 264) = 0;
  *(_QWORD *)(v2 + 280) = 0;
  v5 = (uint64_t **)(v2 + 280);
  *(_QWORD *)(v2 + 272) = v2 + 280;
  v6 = (_QWORD **)(v2 + 272);
  *(_QWORD *)(v2 + 288) = 0;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_QWORD *)(v2 + 368) = v2 + 368;
  *(_QWORD *)(v2 + 376) = v2 + 368;
  *(_QWORD *)(v2 + 384) = 0;
  *(_QWORD *)(v2 + 400) = v2 + 400;
  *(_QWORD *)(v2 + 408) = v2 + 400;
  *(_QWORD *)(v2 + 464) = 0;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_QWORD *)(v2 + 480) = v2 + 480;
  *(_QWORD *)(v2 + 488) = v2 + 480;
  *(_QWORD *)(v2 + 496) = 0;
  *(_OWORD *)(v2 + 512) = xmmword_1B3524A80;
  *(_QWORD *)(v2 + 528) = 3;
  *(_OWORD *)(v2 + 536) = 0u;
  *(_OWORD *)(v2 + 552) = 0u;
  *(_OWORD *)(v2 + 568) = 0u;
  *(_QWORD *)(v2 + 592) = v2 + 592;
  *(_QWORD *)(v2 + 600) = v2 + 592;
  *(_QWORD *)(v2 + 624) = 0;
  *(_QWORD *)(v2 + 632) = 0;
  *(_QWORD *)(v2 + 608) = 0;
  *(_QWORD *)(v2 + 616) = v2 + 624;
  *(_OWORD *)(v2 + 712) = 0u;
  *(_OWORD *)(v2 + 728) = 0u;
  *(_OWORD *)(v2 + 680) = 0u;
  *(_OWORD *)(v2 + 696) = 0u;
  *(_OWORD *)(v2 + 648) = 0u;
  *(_OWORD *)(v2 + 664) = 0u;
  v7 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v7);
  *((_QWORD *)this + 15) = v7;
  v8 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v8);
  *((_QWORD *)this + 16) = v8;
  v9 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v9);
  *((_QWORD *)this + 49) = v9;
  v10 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v10);
  *((_QWORD *)this + 43) = v10;
  v11 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v11);
  *((_QWORD *)this + 59) = v11;
  v12 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v12);
  *((_QWORD *)this + 73) = v12;
  v13 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v13);
  *((_QWORD *)this + 63) = v13;
  v14 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v14);
  *((_QWORD *)this + 80) = v14;
  v16 = TXParagraphStyleFolder_Factory::version(v15);
  *((_QWORD *)this + 23) = v16;
  if ((v16 & 0x80000000) == 0)
  {
    v17 = -1;
    while (1)
    {
      v18 = *v4;
      v19 = v4;
      v20 = v4;
      if (*v4)
      {
        while (1)
        {
          while (1)
          {
            v20 = (uint64_t **)v18;
            v21 = *((_DWORD *)v18 + 7);
            if (v17 >= v21)
              break;
            v18 = *v20;
            v19 = v20;
            if (!*v20)
              goto LABEL_11;
          }
          if (v21 >= v17)
            break;
          v18 = v20[1];
          if (!v18)
          {
            v19 = v20 + 1;
            goto LABEL_11;
          }
        }
        *((_BYTE *)v20 + 32) = 0;
        v25 = *v3;
        v26 = v3;
        v27 = v3;
        if (*v3)
          goto LABEL_18;
      }
      else
      {
LABEL_11:
        v22 = operator new(0x28uLL);
        v22[7] = v17;
        *((_BYTE *)v22 + 32) = 0;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
        *((_QWORD *)v22 + 2) = v20;
        *v19 = (uint64_t *)v22;
        v23 = (_QWORD *)**v41;
        v24 = (uint64_t *)v22;
        if (v23)
        {
          *v41 = v23;
          v24 = *v19;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 29), v24);
        ++*((_QWORD *)this + 30);
        *((_BYTE *)v22 + 32) = 0;
        v25 = *v3;
        v26 = v3;
        v27 = v3;
        if (*v3)
        {
          while (1)
          {
LABEL_18:
            while (1)
            {
              v27 = (uint64_t **)v25;
              v28 = *((_DWORD *)v25 + 7);
              if (v17 >= v28)
                break;
              v25 = *v27;
              v26 = v27;
              if (!*v27)
                goto LABEL_22;
            }
            if (v28 >= v17)
              break;
            v25 = v27[1];
            if (!v25)
            {
              v26 = v27 + 1;
              goto LABEL_22;
            }
          }
          v29 = v27;
          goto LABEL_26;
        }
      }
LABEL_22:
      v29 = operator new(0x28uLL);
      v29[7] = v17;
      *((_BYTE *)v29 + 32) = 0;
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = 0;
      *((_QWORD *)v29 + 2) = v27;
      *v26 = (uint64_t *)v29;
      v30 = (_QWORD *)**v40;
      v31 = (uint64_t *)v29;
      if (v30)
      {
        *v40 = v30;
        v31 = *v26;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 26), v31);
      ++*((_QWORD *)this + 27);
LABEL_26:
      *((_BYTE *)v29 + 32) = 0;
      v32 = (HGSynchronizable *)operator new();
      HGSynchronizable::HGSynchronizable(v32);
      v33 = *v5;
      v34 = v5;
      v35 = v5;
      if (*v5)
      {
        while (1)
        {
          while (1)
          {
            v35 = (uint64_t **)v33;
            v36 = *((_DWORD *)v33 + 8);
            if (v17 >= v36)
              break;
            v33 = *v35;
            v34 = v35;
            if (!*v35)
              goto LABEL_33;
          }
          if (v36 >= v17)
            break;
          v33 = v35[1];
          if (!v33)
          {
            v34 = v35 + 1;
            goto LABEL_33;
          }
        }
        v35[5] = (uint64_t *)v32;
        if (++v17 >= *((_DWORD *)this + 46))
          break;
      }
      else
      {
LABEL_33:
        v37 = operator new(0x30uLL);
        v37[8] = v17;
        *((_QWORD *)v37 + 5) = 0;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
        *((_QWORD *)v37 + 2) = v35;
        *v34 = (uint64_t *)v37;
        v38 = (_QWORD *)**v6;
        v39 = (uint64_t *)v37;
        if (v38)
        {
          *v6 = v38;
          v39 = *v34;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 35), v39);
        ++*((_QWORD *)this + 36);
        *((_QWORD *)v37 + 5) = v32;
        if (++v17 >= *((_DWORD *)this + 46))
          break;
      }
    }
  }
  if (qword_1ED4DAB00 != -1)
    dispatch_once(&qword_1ED4DAB00, &__block_literal_global_61);
  *((_QWORD *)this + 93) = dispatch_group_create();
  *((_DWORD *)this + 17) = dword_1ED4DAAFC;
  *((_WORD *)this + 42) = _MergedGlobals_16;
  *((_QWORD *)this + 11) = mach_absolute_time();
}

void sub_1B2AEFA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17, uint64_t *a18, uint64_t a19, uint64_t a20)
{
  HGObject *v20;
  uint64_t v21;
  uint64_t v22;

  std::deque<HGRef<HGGLContext>>::~deque[abi:ne180100]((uint64_t)v20 + 696);
  std::deque<HGNode *>::~deque[abi:ne180100](v21 + 416);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v21 + 384, *((_QWORD **)v20 + 78));
  std::list<HGGPUReadbackJob *>::~list(a10);
  std::deque<HGNode *>::~deque[abi:ne180100](v21 + 304);
  std::list<HGGPUReadbackJob *>::~list(a11);
  std::deque<HGNode *>::~deque[abi:ne180100]((uint64_t)v20 + 424);
  std::list<HGGPUReadbackJob *>::~list(a12);
  std::list<HGGPUReadbackJob *>::~list(a13);
  std::deque<HGNode *>::~deque[abi:ne180100](a14);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v22, *((_QWORD **)v20 + 35));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a15, *((_QWORD **)v20 + 32));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a20, *((_QWORD **)v20 + 29));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a19, *((_QWORD **)v20 + 26));
  std::list<HGGPUReadbackJob *>::~list(a16);
  std::list<HGGPUReadbackJob *>::~list(a17);
  std::list<HGGPUReadbackJob *>::~list(a18);
  HGObject::~HGObject(v20);
  _Unwind_Resume(a1);
}

uint64_t ___ZN13HGRenderQueueC2Ev_block_invoke()
{
  const __CFString *v0;
  int AppIntegerValue;
  int AppBooleanValue;
  uint64_t result;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  v0 = (const __CFString *)*MEMORY[0x1E0C9B248];
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("HGRenderQueueDebugFlags"), (CFStringRef)*MEMORY[0x1E0C9B248], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    dword_1ED4DAAFC = AppIntegerValue;
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("HGRenderQueueDebugDumpBuffers"), v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    LOBYTE(_MergedGlobals_16) = AppBooleanValue != 0;
  keyExistsAndHasValidFormat = 0;
  result = CFPreferencesGetAppBooleanValue(CFSTR("HGRenderQueueDebugAlwaysBuffer"), v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    HIBYTE(_MergedGlobals_16) = (_DWORD)result != 0;
  return result;
}

uint64_t *std::list<HGGPUReadbackJob *>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void HGRenderQueue::~HGRenderQueue(HGRenderQueue *this)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  TXParagraphStyleFolder_Factory *v25;
  int v26;
  uint64_t **v27;
  int i;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  char *v37;
  uint64_t j;
  uint64_t v39;
  char *v40;
  uint64_t k;
  uint64_t v42;
  char *v43;
  uint64_t m;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  dispatch_time_t v49;
  HGRenderQueue *v50;
  uint64_t v51;
  uint64_t v52;
  HGRenderQueue *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  HGRenderQueue *v58;
  uint64_t v59;
  uint64_t v60;
  HGRenderQueue *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  HGRenderQueue *v66;
  uint64_t v67;
  uint64_t v68;
  HGRenderQueue *v69;
  HGRenderQueue *v70;
  uint64_t v71;
  uint64_t v72;
  HGRenderQueue *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;

  *(_QWORD *)this = off_1E65308F8;
  if ((*((_BYTE *)this + 70) & 0x10) != 0)
  {
    v2 = *((_QWORD *)this + 13);
    if ((HGRenderQueue *)v2 != (HGRenderQueue *)((char *)this + 96))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        v5 = v2 + 8;
        v2 = *(_QWORD *)(v2 + 8);
        v6 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 24);
        if (v6 == 1)
          ++v4;
        if (v6 == 3)
          ++v3;
      }
      while ((HGRenderQueue *)v2 != (HGRenderQueue *)((char *)this + 96));
      if (v3 | v4)
      {
        printf("HGRenderQueue::~HGRenderQueue: Warning: Not all RenderExecUnits are in shutdown state: Executing: %d  Waiting: %d\n", v3, v4);
        puts("First call HGRenderQueue::Shutdown() before deleting");
      }
    }
    v7 = *((_QWORD *)this + 61);
    if ((HGRenderQueue *)v7 != (HGRenderQueue *)((char *)this + 480))
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = v7 + 8;
        v7 = *(_QWORD *)(v7 + 8);
        v11 = *(_DWORD *)(*(_QWORD *)(v10 + 8) + 12);
        if (v11 == 2)
          v12 = v8 + 1;
        else
          v12 = v8;
        if (v11 == 1)
          ++v9;
        else
          v8 = v12;
      }
      while ((HGRenderQueue *)v7 != (HGRenderQueue *)((char *)this + 480));
      if (v8 | v9)
      {
        printf("HGRenderQueue::~HGRenderQueue: Warning: Not all PBODownloadExecUnits are in shutdown state: Executing: %d  Waiting: %d\n", v8, v9);
        puts("First call HGRenderQueue::Shutdown() before deleting");
      }
    }
    v13 = *((_QWORD *)this + 47);
    if ((HGRenderQueue *)v13 != (HGRenderQueue *)((char *)this + 368))
    {
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = v13 + 8;
        v13 = *(_QWORD *)(v13 + 8);
        v17 = *(_DWORD *)(*(_QWORD *)(v16 + 8) + 8);
        if (v17 == 1)
          ++v15;
        if (v17 == 2)
          ++v14;
      }
      while ((HGRenderQueue *)v13 != (HGRenderQueue *)((char *)this + 368));
      if (v14 | v15)
      {
        printf("HGRenderQueue::~HGRenderQueue: Warning: Not all UserExecUnits are in shutdown state: Executing: %d  Waiting: %d\n", v14, v15);
        puts("First call HGRenderQueue::Shutdown() before deleting");
      }
    }
  }
  v18 = *((_QWORD *)this + 63);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 15);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 16);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 49);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 43);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 59);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 80);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = (TXParagraphStyleFolder_Factory *)*((_QWORD *)this + 73);
  if (v25)
    v25 = (TXParagraphStyleFolder_Factory *)(*(uint64_t (**)(TXParagraphStyleFolder_Factory *))(*(_QWORD *)v25 + 8))(v25);
  v26 = TXParagraphStyleFolder_Factory::version(v25);
  if ((v26 & 0x80000000) == 0)
  {
    v27 = (uint64_t **)((char *)this + 280);
    for (i = -1; i != v26; ++i)
    {
      v29 = *v27;
      v30 = (uint64_t **)((char *)this + 280);
      v31 = (uint64_t **)((char *)this + 280);
      if (*v27)
      {
        while (1)
        {
          while (1)
          {
            v31 = (uint64_t **)v29;
            v32 = *((_DWORD *)v29 + 8);
            if (i >= v32)
              break;
            v29 = *v31;
            v30 = v31;
            if (!*v31)
              goto LABEL_57;
          }
          if (v32 >= i)
            break;
          v29 = v31[1];
          if (!v29)
          {
            v30 = v31 + 1;
            goto LABEL_57;
          }
        }
        v36 = v31[5];
        if (!v36)
          continue;
      }
      else
      {
LABEL_57:
        v33 = operator new(0x30uLL);
        v33[8] = i;
        *((_QWORD *)v33 + 5) = 0;
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
        *((_QWORD *)v33 + 2) = v31;
        *v30 = (uint64_t *)v33;
        v34 = **((_QWORD **)this + 34);
        v35 = (uint64_t *)v33;
        if (v34)
        {
          *((_QWORD *)this + 34) = v34;
          v35 = *v30;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 35), v35);
        ++*((_QWORD *)this + 36);
        v36 = (uint64_t *)*((_QWORD *)v33 + 5);
        if (!v36)
          continue;
      }
      (*(void (**)(uint64_t *))(*v36 + 8))(v36);
    }
  }
  v37 = (char *)this + 96;
  for (j = *((_QWORD *)this + 13); (char *)j != v37; j = *(_QWORD *)(j + 8))
  {
    v39 = *(_QWORD *)(j + 16);
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  }
  v40 = (char *)this + 480;
  for (k = *((_QWORD *)this + 61); (char *)k != v40; k = *(_QWORD *)(k + 8))
  {
    v42 = *(_QWORD *)(k + 16);
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  v43 = (char *)this + 368;
  for (m = *((_QWORD *)this + 47); (char *)m != v43; m = *(_QWORD *)(m + 8))
  {
    v45 = *(_QWORD *)(m + 16);
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  if (*((_QWORD *)this + 86))
  {
    v46 = 0;
    do
    {
      v47 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 82)
                                  + (((v46 + *((_QWORD *)this + 85)) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v46 + *((_QWORD *)this + 85)) & 0x1FF));
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
      ++v46;
    }
    while (*((_QWORD *)this + 86) > v46);
  }
  v48 = *((_QWORD *)this + 93);
  v49 = dispatch_time(0, 10000000000);
  if (dispatch_group_wait(v48, v49))
    puts("HGRenderQueue::~HGRenderQueue: Warning: dispatch_group _getRenderJobSynchronizer is non zero after waiting 10s, might crash");
  dispatch_release(*((dispatch_object_t *)this + 93));
  std::deque<HGRef<HGGLContext>>::~deque[abi:ne180100]((uint64_t)this + 696);
  std::deque<HGNode *>::~deque[abi:ne180100]((uint64_t)this + 648);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 616, *((_QWORD **)this + 78));
  if (*((_QWORD *)this + 76))
  {
    v50 = (HGRenderQueue *)*((_QWORD *)this + 75);
    v51 = *((_QWORD *)this + 74);
    v52 = *(_QWORD *)v50;
    *(_QWORD *)(v52 + 8) = *(_QWORD *)(v51 + 8);
    **(_QWORD **)(v51 + 8) = v52;
    *((_QWORD *)this + 76) = 0;
    if (v50 != (HGRenderQueue *)((char *)this + 592))
    {
      do
      {
        v53 = (HGRenderQueue *)*((_QWORD *)v50 + 1);
        operator delete(v50);
        v50 = v53;
      }
      while (v53 != (HGRenderQueue *)((char *)this + 592));
    }
  }
  std::deque<HGNode *>::~deque[abi:ne180100]((uint64_t)this + 536);
  if (*((_QWORD *)this + 62))
  {
    v55 = *((_QWORD *)this + 60);
    v54 = (char *)*((_QWORD *)this + 61);
    v56 = *(_QWORD *)v54;
    *(_QWORD *)(v56 + 8) = *(_QWORD *)(v55 + 8);
    **(_QWORD **)(v55 + 8) = v56;
    *((_QWORD *)this + 62) = 0;
    if (v54 != v40)
    {
      do
      {
        v57 = (char *)*((_QWORD *)v54 + 1);
        operator delete(v54);
        v54 = v57;
      }
      while (v57 != v40);
    }
  }
  std::deque<HGNode *>::~deque[abi:ne180100]((uint64_t)this + 424);
  if (*((_QWORD *)this + 52))
  {
    v59 = *((_QWORD *)this + 50);
    v58 = (HGRenderQueue *)*((_QWORD *)this + 51);
    v60 = *(_QWORD *)v58;
    *(_QWORD *)(v60 + 8) = *(_QWORD *)(v59 + 8);
    **(_QWORD **)(v59 + 8) = v60;
    *((_QWORD *)this + 52) = 0;
    if (v58 != (HGRenderQueue *)((char *)this + 400))
    {
      do
      {
        v61 = (HGRenderQueue *)*((_QWORD *)v58 + 1);
        operator delete(v58);
        v58 = v61;
      }
      while (v61 != (HGRenderQueue *)((char *)this + 400));
    }
  }
  if (*((_QWORD *)this + 48))
  {
    v63 = *((_QWORD *)this + 46);
    v62 = (char *)*((_QWORD *)this + 47);
    v64 = *(_QWORD *)v62;
    *(_QWORD *)(v64 + 8) = *(_QWORD *)(v63 + 8);
    **(_QWORD **)(v63 + 8) = v64;
    *((_QWORD *)this + 48) = 0;
    if (v62 != v43)
    {
      do
      {
        v65 = (char *)*((_QWORD *)v62 + 1);
        operator delete(v62);
        v62 = v65;
      }
      while (v65 != v43);
    }
  }
  std::deque<HGNode *>::~deque[abi:ne180100]((uint64_t)this + 296);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 248, *((_QWORD **)this + 32));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 224, *((_QWORD **)this + 29));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  if (*((_QWORD *)this + 22))
  {
    v67 = *((_QWORD *)this + 20);
    v66 = (HGRenderQueue *)*((_QWORD *)this + 21);
    v68 = *(_QWORD *)v66;
    *(_QWORD *)(v68 + 8) = *(_QWORD *)(v67 + 8);
    **(_QWORD **)(v67 + 8) = v68;
    *((_QWORD *)this + 22) = 0;
    if (v66 != (HGRenderQueue *)((char *)this + 160))
    {
      do
      {
        v69 = (HGRenderQueue *)*((_QWORD *)v66 + 1);
        operator delete(v66);
        v66 = v69;
      }
      while (v69 != (HGRenderQueue *)((char *)this + 160));
    }
  }
  if (*((_QWORD *)this + 19))
  {
    v71 = *((_QWORD *)this + 17);
    v70 = (HGRenderQueue *)*((_QWORD *)this + 18);
    v72 = *(_QWORD *)v70;
    *(_QWORD *)(v72 + 8) = *(_QWORD *)(v71 + 8);
    **(_QWORD **)(v71 + 8) = v72;
    *((_QWORD *)this + 19) = 0;
    if (v70 != (HGRenderQueue *)((char *)this + 136))
    {
      do
      {
        v73 = (HGRenderQueue *)*((_QWORD *)v70 + 1);
        operator delete(v70);
        v70 = v73;
      }
      while (v73 != (HGRenderQueue *)((char *)this + 136));
    }
  }
  if (*((_QWORD *)this + 14))
  {
    v75 = *((_QWORD *)this + 12);
    v74 = (char *)*((_QWORD *)this + 13);
    v76 = *(_QWORD *)v74;
    *(_QWORD *)(v76 + 8) = *(_QWORD *)(v75 + 8);
    **(_QWORD **)(v75 + 8) = v76;
    *((_QWORD *)this + 14) = 0;
    if (v74 != v37)
    {
      do
      {
        v77 = (char *)*((_QWORD *)v74 + 1);
        operator delete(v74);
        v74 = v77;
      }
      while (v77 != v37);
    }
  }
  HGObject::~HGObject((HGObject *)this);
}

{
  void *v1;

  HGRenderQueue::~HGRenderQueue(this);
  HGObject::operator delete(v1);
}

uint64_t HGRenderQueue::AddRenderContext(HGRenderQueue *this, HGRenderContext *a2)
{
  uint64_t v4;
  HGRenderExecUnit *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  PVRenderJob *v10;
  HGGLContext **v11;
  uint64_t *FrameStats;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  PCSharedCount v29;
  PCSharedCount v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  HGSynchronizable *v33;
  char v34;

  v33 = (HGSynchronizable *)*((_QWORD *)this + 43);
  v34 = 0;
  HGSynchronizable::Lock(v33);
  v4 = 0;
  if (*((_DWORD *)this + 4) == 3)
    goto LABEL_32;
  if (!*((_QWORD *)a2 + 9))
  {
    v4 = 0;
    goto LABEL_32;
  }
  v5 = (HGRenderExecUnit *)operator new();
  HGRenderExecUnit::HGRenderExecUnit(v5, a2, this, *((_DWORD *)this + 28));
  *((_DWORD *)a2 + 8) = 2;
  *((_QWORD *)a2 + 6) = this;
  v6 = operator new(0x18uLL);
  v7 = (char *)this + 96;
  v6[1] = (char *)this + 96;
  v6[2] = v5;
  v8 = *((_QWORD *)this + 12);
  *v6 = v8;
  *(_QWORD *)(v8 + 8) = v6;
  *((_QWORD *)this + 12) = v6;
  v9 = *((_QWORD *)this + 14) + 1;
  *((_QWORD *)this + 14) = v9;
  *((_QWORD *)this + 3) = v9;
  if (HGRenderContext::IsCPU(a2))
  {
    *((_BYTE *)this + 42) = 1;
    *((_DWORD *)v5 + 10) = 1;
  }
  else
  {
    *((_BYTE *)this + 41) = 1;
    *((_DWORD *)v5 + 10) = 0;
    if (v10)
    {
      v11 = (HGGLContext **)v10;
      FrameStats = (uint64_t *)PVRenderJob::GetFrameStats(v10);
      v13 = (std::__shared_weak_count *)FrameStats[1];
      v31 = *FrameStats;
      v32 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      HGGPURenderContext::GetGLContext(v11, (HGGLContextPtr *)&v30);
      if (*((_QWORD *)this + 64))
      {
        v16 = 0;
        do
        {
          v17 = operator new();
          v29.var0 = v30.var0;
          HGGPUReadbackExecUnit::HGGPUReadbackExecUnit(v17, &v31, &v29, this);
          PCSharedCount::PCSharedCount(&v29);
          v18 = *((_QWORD *)this + 62);
          *(_DWORD *)(v17 + 8) = v18;
          v19 = operator new(0x18uLL);
          v19[1] = (char *)this + 480;
          v19[2] = v17;
          v20 = *((_QWORD *)this + 60);
          *v19 = v20;
          *(_QWORD *)(v20 + 8) = v19;
          *((_QWORD *)this + 60) = v19;
          *((_QWORD *)this + 62) = v18 + 1;
          ++v16;
        }
        while (v16 < *((_QWORD *)this + 64));
      }
      PCSharedCount::PCSharedCount(&v30);
      v21 = v32;
      if (v32)
      {
        v22 = (unint64_t *)&v32->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  v24 = *((_QWORD *)this + 13);
  if ((char *)v24 == v7)
  {
    v26 = 0;
    v25 = 0;
    if ((*((_BYTE *)this + 71) & 0x20) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  v25 = 0;
  v26 = 0;
  do
  {
    v27 = v24 + 8;
    v24 = *(_QWORD *)(v24 + 8);
    if (*(_DWORD *)(*(_QWORD *)(v27 + 8) + 40) == 1)
      ++v26;
    else
      ++v25;
  }
  while ((char *)v24 != v7);
  if ((*((_BYTE *)this + 71) & 0x20) != 0)
  {
LABEL_27:
    puts("HGRenderQueue::AddRenderContext()");
    printf("Num cpu contexts = %d\n", v26);
    printf("Num gpu contexts = %d\n", v25);
    (*(void (**)(HGRenderContext *))(*(_QWORD *)a2 + 40))(a2);
  }
LABEL_28:
  if (*((_BYTE *)this + 85))
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 9) + 120))(*((_QWORD *)a2 + 9), 9, 1);
  if (!*((_BYTE *)this + 84))
  {
    v4 = 1;
    if (v34)
      return v4;
    goto LABEL_32;
  }
  v4 = 1;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 9) + 120))(*((_QWORD *)a2 + 9), 31, 1);
  if (!v34)
LABEL_32:
    HGSynchronizable::Unlock(v33);
  return v4;
}

void sub_1B2AF05E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)va);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va1);
  _Unwind_Resume(a1);
}

void sub_1B2AF0600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF064C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCSharedCount a11, PCSharedCount a12, char a13, uint64_t a14, HGSynchronizable *a15)
{
  uint64_t v15;

  PCSharedCount::PCSharedCount(&a11);
  MEMORY[0x1B5E29170](v15, 0x10E1C404D8AC037);
  PCSharedCount::PCSharedCount(&a12);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  HGSynchronizer::~HGSynchronizer(&a15);
  _Unwind_Resume(a1);
}

HGSynchronizable *HGRenderQueue::SetRunMode(uint64_t a1, int a2)
{
  HGSynchronizable *v4;

  v4 = *(HGSynchronizable **)(a1 + 344);
  HGSynchronizable::Lock(v4);
  *(_DWORD *)(a1 + 12) = a2;
  return HGSynchronizable::Unlock(v4);
}

HGSynchronizable *HGRenderQueue::SetPreferredResource(uint64_t a1, int a2)
{
  HGSynchronizable *v4;

  v4 = *(HGSynchronizable **)(a1 + 344);
  HGSynchronizable::Lock(v4);
  *(_DWORD *)(a1 + 20) = a2;
  return HGSynchronizable::Unlock(v4);
}

HGRenderQueue *HGRenderQueue::SetSerializeRendersFlag(HGRenderQueue *this, char a2)
{
  *((_BYTE *)this + 73) = a2;
  *((_BYTE *)this + 72) = a2;
  return this;
}

HGRenderQueue *HGRenderQueue::SetRelaxRenderSerializationForPriorityInversionsFlag(HGRenderQueue *this, char a2)
{
  *((_BYTE *)this + 74) = a2;
  return this;
}

HGRenderQueue *HGRenderQueue::SetDebugQueueVerboseMask(HGRenderQueue *this, int a2)
{
  *((_DWORD *)this + 17) = a2;
  return this;
}

uint64_t HGRenderQueue::GetDebugQueueVerboseMask(HGRenderQueue *this)
{
  return *((unsigned int *)this + 17);
}

HGSynchronizable *HGRenderQueue::SetSerializeGPUReadbacksFlag(HGRenderQueue *this, char a2)
{
  HGSynchronizable *v4;

  v4 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v4);
  *((_BYTE *)this + 76) = a2;
  return HGSynchronizable::Unlock(v4);
}

HGSynchronizable *HGRenderQueue::SetNumGPUReadbackExecUnitsPerGPURenderer(HGRenderQueue *this, uint64_t a2)
{
  HGSynchronizable *v4;

  v4 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v4);
  *((_QWORD *)this + 64) = a2;
  return HGSynchronizable::Unlock(v4);
}

HGSynchronizable *HGRenderQueue::SetNumPBOsPerGPUReadbackExecUnit(HGRenderQueue *this, uint64_t a2)
{
  HGSynchronizable *v4;

  v4 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v4);
  *((_QWORD *)this + 65) = a2;
  return HGSynchronizable::Unlock(v4);
}

HGSynchronizable *HGRenderQueue::SetGPUReadbackQueueThrottleSize(HGRenderQueue *this, uint64_t a2)
{
  HGSynchronizable *v4;

  v4 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v4);
  *((_QWORD *)this + 66) = a2;
  return HGSynchronizable::Unlock(v4);
}

HGSynchronizable *HGRenderQueue::Start(HGRenderQueue *this)
{
  HGSynchronizable *v2;
  int v3;
  HGSynchronizable *result;
  HGSynchronizable *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t j;
  uint64_t v9;
  uint64_t k;
  uint64_t v11;
  HGSynchronizable *v12;
  HGSynchronizable *v13;
  HGSynchronizable *v14;
  HGSynchronizable *v15;

  v2 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v2);
  v3 = *((_DWORD *)this + 4);
  result = HGSynchronizable::Unlock(v2);
  if (v3 != 3)
  {
    v5 = (HGSynchronizable *)*((_QWORD *)this + 43);
    HGSynchronizable::Lock(v5);
    *((_DWORD *)this + 4) = 1;
    for (i = *((_QWORD *)this + 13); (HGRenderQueue *)i != (HGRenderQueue *)((char *)this + 96); i = *(_QWORD *)(i + 8))
    {
      v7 = *(_QWORD *)(i + 16);
      if (!*(_DWORD *)(v7 + 24))
      {
        HGRenderExecUnit::StartRunLoop(*(HGRenderExecUnit **)(i + 16));
        *(_DWORD *)(v7 + 24) = 1;
      }
    }
    for (j = *((_QWORD *)this + 47); (HGRenderQueue *)j != (HGRenderQueue *)((char *)this + 368); j = *(_QWORD *)(j + 8))
    {
      v9 = *(_QWORD *)(j + 16);
      if (!*(_DWORD *)(v9 + 8))
      {
        HGUserExecUnit::StartRunLoop(*(HGUserExecUnit **)(j + 16));
        *(_DWORD *)(v9 + 8) = 1;
      }
    }
    for (k = *((_QWORD *)this + 61); (HGRenderQueue *)k != (HGRenderQueue *)((char *)this + 480); k = *(_QWORD *)(k + 8))
    {
      v11 = *(_QWORD *)(k + 16);
      if (!*(_DWORD *)(v11 + 12))
      {
        HGGPUReadbackExecUnit::StartRunLoop(*(HGGPUReadbackExecUnit **)(k + 16));
        *(_DWORD *)(v11 + 12) = 1;
      }
    }
    HGSynchronizable::Unlock(v5);
    v12 = (HGSynchronizable *)*((_QWORD *)this + 16);
    HGSynchronizable::Lock(v12);
    HGSynchronizable::NotifyAll(v12);
    HGSynchronizable::Unlock(v12);
    v13 = (HGSynchronizable *)*((_QWORD *)this + 15);
    HGSynchronizable::Lock(v13);
    HGSynchronizable::NotifyAll(v13);
    HGSynchronizable::Unlock(v13);
    v14 = (HGSynchronizable *)*((_QWORD *)this + 49);
    HGSynchronizable::Lock(v14);
    HGSynchronizable::NotifyAll(v14);
    HGSynchronizable::Unlock(v14);
    v15 = (HGSynchronizable *)*((_QWORD *)this + 63);
    HGSynchronizable::Lock(v15);
    HGSynchronizable::NotifyAll(v15);
    return HGSynchronizable::Unlock(v15);
  }
  return result;
}

void sub_1B2AF0A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF0A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF0A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF0A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF0A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF0A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF0AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

BOOL HGRenderQueue::IsShuttingDown(HGRenderQueue *this)
{
  HGRenderQueue *v1;
  HGSynchronizable *v2;

  v1 = this;
  v2 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v2);
  LODWORD(v1) = *((_DWORD *)v1 + 4);
  HGSynchronizable::Unlock(v2);
  return (_DWORD)v1 == 3;
}

HGSynchronizable *HGRenderQueue::Pause(HGRenderQueue *this)
{
  HGSynchronizable *v2;

  v2 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v2);
  if (*((_DWORD *)this + 4) != 3)
    *((_DWORD *)this + 4) = 2;
  return HGSynchronizable::Unlock(v2);
}

HGSynchronizable *HGRenderQueue::Restart(HGRenderQueue *this)
{
  HGSynchronizable *v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;
  uint64_t k;
  uint64_t v9;
  HGSynchronizable *result;
  HGSynchronizable *v11;
  HGSynchronizable *v12;
  HGSynchronizable *v13;
  HGSynchronizable *v14;

  v2 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v2);
  v3 = *((_DWORD *)this + 4);
  if (v3 != 3)
  {
    for (i = *((_QWORD *)this + 13); (HGRenderQueue *)i != (HGRenderQueue *)((char *)this + 96); i = *(_QWORD *)(i + 8))
    {
      v5 = *(_QWORD *)(i + 16);
      if (!*(_DWORD *)(v5 + 24))
      {
        HGRenderExecUnit::StartRunLoop(*(HGRenderExecUnit **)(i + 16));
        *(_DWORD *)(v5 + 24) = 1;
      }
    }
    for (j = *((_QWORD *)this + 47); (HGRenderQueue *)j != (HGRenderQueue *)((char *)this + 368); j = *(_QWORD *)(j + 8))
    {
      v7 = *(_QWORD *)(j + 16);
      if (!*(_DWORD *)(v7 + 8))
      {
        HGUserExecUnit::StartRunLoop(*(HGUserExecUnit **)(j + 16));
        *(_DWORD *)(v7 + 8) = 1;
      }
    }
    for (k = *((_QWORD *)this + 61); (HGRenderQueue *)k != (HGRenderQueue *)((char *)this + 480); k = *(_QWORD *)(k + 8))
    {
      v9 = *(_QWORD *)(k + 16);
      if (!*(_DWORD *)(v9 + 12))
      {
        HGGPUReadbackExecUnit::StartRunLoop(*(HGGPUReadbackExecUnit **)(k + 16));
        *(_DWORD *)(v9 + 12) = 1;
      }
    }
    *((_DWORD *)this + 4) = 1;
  }
  result = HGSynchronizable::Unlock(v2);
  if (v3 != 3)
  {
    v11 = (HGSynchronizable *)*((_QWORD *)this + 16);
    HGSynchronizable::Lock(v11);
    HGSynchronizable::NotifyAll(v11);
    HGSynchronizable::Unlock(v11);
    v12 = (HGSynchronizable *)*((_QWORD *)this + 15);
    HGSynchronizable::Lock(v12);
    HGSynchronizable::NotifyAll(v12);
    HGSynchronizable::Unlock(v12);
    v13 = (HGSynchronizable *)*((_QWORD *)this + 49);
    HGSynchronizable::Lock(v13);
    HGSynchronizable::NotifyAll(v13);
    HGSynchronizable::Unlock(v13);
    v14 = (HGSynchronizable *)*((_QWORD *)this + 63);
    HGSynchronizable::Lock(v14);
    HGSynchronizable::NotifyAll(v14);
    return HGSynchronizable::Unlock(v14);
  }
  return result;
}

void sub_1B2AF0D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF0D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF0D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF0D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF0D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF0D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF0D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

HGSynchronizable *HGRenderQueue::Drain(HGRenderQueue *this)
{
  HGSynchronizable *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  HGSynchronizable *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  HGSynchronizable *v13;
  HGSynchronizable *v14;
  HGSynchronizable *v15;
  uint64_t v16;
  uint64_t v17;
  HGSynchronizable *v18;
  HGSynchronizable *v19;
  uint64_t v20;
  uint64_t v21;
  HGSynchronizable *v22;
  uint64_t v23;
  char v24;
  HGSynchronizable *v25;
  int v27;

  v2 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v2);
  v27 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = 0;
  HGSynchronizable::Unlock(v2);
  v3 = mach_absolute_time();
  v4 = (char *)this + 96;
  v5 = (char *)this + 368;
  v6 = (char *)this + 480;
  do
  {
    v7 = (HGSynchronizable *)*((_QWORD *)this + 43);
    HGSynchronizable::Lock(v7);
    v8 = *((_QWORD *)this + 42);
    HGSynchronizable::Unlock(v7);
    v9 = v8 == 0;
    if (v8)
    {
      v10 = *((_QWORD *)this + 13);
      if ((char *)v10 == v4)
      {
LABEL_10:
        v13 = (HGSynchronizable *)*((_QWORD *)this + 16);
        HGSynchronizable::Lock(v13);
        HGSynchronizable::NotifyAll(v13);
        HGSynchronizable::Unlock(v13);
        v14 = (HGSynchronizable *)*((_QWORD *)this + 15);
        HGSynchronizable::Lock(v14);
        HGSynchronizable::NotifyAll(v14);
        HGSynchronizable::Unlock(v14);
      }
      else
      {
        while (1)
        {
          v11 = *(_DWORD *)(*(_QWORD *)(v10 + 16) + 24);
          if (v11 != 4 && v11 != 1)
            break;
          v10 = *(_QWORD *)(v10 + 8);
          if ((char *)v10 == v4)
            goto LABEL_10;
        }
      }
    }
    v15 = (HGSynchronizable *)*((_QWORD *)this + 59);
    HGSynchronizable::Lock(v15);
    v16 = *((_QWORD *)this + 58);
    HGSynchronizable::Unlock(v15);
    if (v16)
    {
      v17 = *((_QWORD *)this + 47);
      if ((char *)v17 == v5)
      {
LABEL_15:
        v18 = (HGSynchronizable *)*((_QWORD *)this + 49);
        HGSynchronizable::Lock(v18);
        HGSynchronizable::NotifyAll(v18);
        HGSynchronizable::Unlock(v18);
      }
      else
      {
        while (*(_DWORD *)(*(_QWORD *)(v17 + 16) + 8) == 1)
        {
          v17 = *(_QWORD *)(v17 + 8);
          if ((char *)v17 == v5)
            goto LABEL_15;
        }
      }
      v9 = 0;
    }
    v19 = (HGSynchronizable *)*((_QWORD *)this + 73);
    HGSynchronizable::Lock(v19);
    v20 = *((_QWORD *)this + 72);
    HGSynchronizable::Unlock(v19);
    if (v20)
    {
      v21 = *((_QWORD *)this + 61);
      if ((char *)v21 == v6)
      {
LABEL_21:
        v22 = (HGSynchronizable *)*((_QWORD *)this + 63);
        HGSynchronizable::Lock(v22);
        HGSynchronizable::NotifyAll(v22);
        HGSynchronizable::Unlock(v22);
      }
      else
      {
        while (*(_DWORD *)(*(_QWORD *)(v21 + 16) + 12) == 1)
        {
          v21 = *(_QWORD *)(v21 + 8);
          if ((char *)v21 == v6)
            goto LABEL_21;
        }
      }
      v9 = 0;
    }
    v23 = mach_absolute_time();
    if (qword_1ED4DAB18 != -1)
      dispatch_once(&qword_1ED4DAB18, &__block_literal_global_86);
    v24 = *(double *)&qword_1ED4DAB10 * (double)(v23 - v3) >= 5.0 || v9;
  }
  while ((v24 & 1) == 0);
  v25 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v25);
  *((_DWORD *)this + 14) = v27;
  return HGSynchronizable::Unlock(v25);
}

void sub_1B2AF1010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF1028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF1040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF1058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

uint64_t HGRenderQueue::GetNumJobsInRenderQueue(HGRenderQueue *this)
{
  HGSynchronizable *v2;
  uint64_t v3;

  v2 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v2);
  v3 = *((_QWORD *)this + 42);
  HGSynchronizable::Unlock(v2);
  return v3;
}

void HGRenderQueue::Shutdown(HGRenderQueue *this)
{
  HGSynchronizable *v2;
  HGSynchronizable *v3;
  int v4;
  HGSynchronizable *v5;
  HGSynchronizable *v6;
  HGSynchronizable *v7;
  HGSynchronizable *v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  HGSynchronizable *v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  HGSynchronizable *v17;
  uint64_t v18;
  HGSynchronizable *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  HGPixelBufferObj *v24;
  PVRenderJob *v25;
  uint64_t FrameStats;
  std::__shared_weak_count *v27;
  TXParagraphStyleFolder_Factory *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;

  v2 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v2);
  v3 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v3);
  v4 = *((_DWORD *)this + 4);
  HGSynchronizable::Unlock(v3);
  if (v4)
    *((_DWORD *)this + 4) = 3;
  HGSynchronizable::Unlock(v2);
  if (v4)
  {
    v5 = (HGSynchronizable *)*((_QWORD *)this + 16);
    HGSynchronizable::Lock(v5);
    HGSynchronizable::NotifyAll(v5);
    HGSynchronizable::Unlock(v5);
    v6 = (HGSynchronizable *)*((_QWORD *)this + 15);
    HGSynchronizable::Lock(v6);
    HGSynchronizable::NotifyAll(v6);
    HGSynchronizable::Unlock(v6);
    v7 = (HGSynchronizable *)*((_QWORD *)this + 49);
    HGSynchronizable::Lock(v7);
    HGSynchronizable::NotifyAll(v7);
    HGSynchronizable::Unlock(v7);
    v8 = (HGSynchronizable *)*((_QWORD *)this + 63);
    HGSynchronizable::Lock(v8);
    HGSynchronizable::NotifyAll(v8);
    HGSynchronizable::Unlock(v8);
    v9 = (char *)this + 96;
    v10 = (char *)this + 368;
    v11 = (char *)this + 480;
    do
    {
      v13 = (HGSynchronizable *)*((_QWORD *)this + 43);
      HGSynchronizable::Lock(v13);
      v14 = *((_QWORD *)this + 13);
      if ((char *)v14 == v9)
      {
LABEL_12:
        v16 = 1;
        v12 = 1;
      }
      else
      {
        while (1)
        {
          v15 = *(_DWORD *)(*(_QWORD *)(v14 + 16) + 24);
          v16 = v15 == 5;
          if (v15 != 5)
            break;
          v14 = *(_QWORD *)(v14 + 8);
          if ((char *)v14 == v9)
            goto LABEL_12;
        }
        v12 = 0;
      }
      HGSynchronizable::Unlock(v13);
      if (v16)
      {
        v17 = (HGSynchronizable *)*((_QWORD *)this + 59);
        HGSynchronizable::Lock(v17);
        v18 = *((_QWORD *)this + 47);
        if ((char *)v18 != v10)
        {
          while (*(_DWORD *)(*(_QWORD *)(v18 + 16) + 8) == 3)
          {
            v18 = *(_QWORD *)(v18 + 8);
            if ((char *)v18 == v10)
              goto LABEL_19;
          }
          v12 = 0;
        }
LABEL_19:
        HGSynchronizable::Unlock(v17);
      }
      if (v12)
      {
        v19 = (HGSynchronizable *)*((_QWORD *)this + 43);
        HGSynchronizable::Lock(v19);
        v20 = *((_QWORD *)this + 61);
        if ((char *)v20 != v11)
        {
          while (*(_DWORD *)(*(_QWORD *)(v20 + 16) + 12) == 3)
          {
            v20 = *(_QWORD *)(v20 + 8);
            if ((char *)v20 == v11)
              goto LABEL_6;
          }
          v12 = 0;
        }
LABEL_6:
        HGSynchronizable::Unlock(v19);
      }
    }
    while (!v12);
    if ((*((_BYTE *)this + 70) & 0x20) != 0)
    {
      v21 = *((_QWORD *)this + 13);
      if ((char *)v21 != v9)
      {
        v22 = 0;
        do
        {
          v23 = *(_QWORD *)(v21 + 16);
          v24 = *(HGPixelBufferObj **)(v23 + 48);
          if (*((_QWORD *)v24 + 15) != *((_QWORD *)v24 + 14)
            && (HGPixelBufferObj::format(v24) == 2
             || !HGPixelBufferObj::format(*(HGPixelBufferObj **)(v23 + 48))))
          {
            if (HGRenderContext::IsGPU(*(HGRenderContext **)(v23 + 48)))
            {
              v25 = *(PVRenderJob **)(v23 + 48);
              if (v25)
              FrameStats = PVRenderJob::GetFrameStats(v25);
              v28 = *(TXParagraphStyleFolder_Factory **)FrameStats;
              v27 = *(std::__shared_weak_count **)(FrameStats + 8);
              if (v27)
              {
                p_shared_owners = (unint64_t *)&v27->__shared_owners_;
                do
                  v30 = __ldxr(p_shared_owners);
                while (__stxr(v30 + 1, p_shared_owners));
              }
              TXParagraphStyleFolder_Factory::version(v28);
              HGGPUComputeDevice::GetGLVirtualScreen(v28);
              if (v27)
              {
                v31 = (unint64_t *)&v27->__shared_owners_;
                do
                  v32 = __ldaxr(v31);
                while (__stlxr(v32 - 1, v31));
                if (!v32)
                {
                  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                  std::__shared_weak_count::__release_weak(v27);
                }
              }
              printf("\nRender Times Histogram [ms]: GPU Render Context[%i]: vs=%d, attached=%d\n");
            }
            else
            {
              printf("\nRender Times Histogram [ms]: CPU Render Context[%i]\n");
            }
            HGRenderContext::DumpHistogram(*(HGRenderContext **)(v23 + 48));
          }
          ++v22;
          v21 = *(_QWORD *)(v21 + 8);
        }
        while ((char *)v21 != v9);
      }
    }
  }
}

void sub_1B2AF13F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF140C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF1424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF143C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF1458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF146C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

HGSynchronizable *HGRenderQueue::DumpRenderJobQueues(HGRenderQueue *this)
{
  HGSynchronizable *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t j;

  v2 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v2);
  printf("Queued RenderJobs: [");
  v3 = *((_QWORD *)this + 38);
  if (*((_QWORD *)this + 39) != v3)
  {
    v4 = *((_QWORD *)this + 41);
    v5 = (_QWORD *)(v3 + 8 * (v4 >> 9));
    v6 = *v5 + 8 * (v4 & 0x1FF);
    v7 = *(_QWORD *)(v3 + (((*((_QWORD *)this + 42) + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*((_QWORD *)this + 42) + v4) & 0x1FF);
    while (v6 != v7)
    {
      v8 = *(int *)(*(_QWORD *)v6 + 12);
      if (v8 <= 7 && ((0xBDu >> v8) & 1) != 0)
        printf(off_1E6530A18[v8]);
      v6 += 8;
      if (v6 - *v5 == 4096)
      {
        v9 = v5[1];
        ++v5;
        v6 = v9;
      }
    }
  }
  putchar(93);
  printf(" : Active RenderJobs: [");
  for (i = *((_QWORD *)this + 18); (HGRenderQueue *)i != (HGRenderQueue *)((char *)this + 136); i = *(_QWORD *)(i + 8))
  {
    if (*(_QWORD *)(i + 16))
      printf("REN,");
  }
  for (j = *((_QWORD *)this + 21); (HGRenderQueue *)j != (HGRenderQueue *)((char *)this + 160); j = *(_QWORD *)(j + 8))
  {
    if (*(_QWORD *)(j + 16))
      printf("CUS,");
  }
  puts("]");
  return HGSynchronizable::Unlock(v2);
}

uint64_t HGRenderQueue::EnqueueRenderJob(HGRenderQueue *this, HGRenderJob *a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  HGGPUComputeDevice *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  HGGPUComputeDevice *v19;
  BOOL v20;
  HGGPUComputeDevice *v21;
  char *v22;
  HGGPUComputeDevice **v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64x2_t v32;
  unint64_t v33;
  unint64_t v34;
  int64x2_t v35;
  const double *v36;
  int8x16_t v37;
  uint64_t v38;
  int8x16_t v39;
  const double *v40;
  unsigned __int128 v41;
  const double *v42;
  unsigned __int128 v43;
  const double *v44;
  unsigned __int128 v45;
  const double *v46;
  unsigned __int128 v47;
  const double *v48;
  unsigned __int128 v49;
  const double *v50;
  unsigned __int128 v51;
  const double *v52;
  unsigned __int128 v53;
  const double *v54;
  int32x4_t v55;
  unsigned __int128 v56;
  const double *v57;
  int16x8_t v58;
  unsigned __int128 v59;
  unsigned __int128 v60;
  int8x16_t v61;
  const double *v62;
  unsigned __int128 v63;
  const double *v64;
  unsigned __int128 v65;
  const double *v66;
  unsigned __int128 v67;
  int8x16_t v68;
  const double *v69;
  int16x8_t v70;
  unsigned __int128 v71;
  const double *v72;
  int16x8_t v73;
  unsigned __int128 v74;
  const double *v75;
  unsigned __int128 v76;
  uint64_t v77;
  HGGPUComputeDevice **v78;
  int8x8_t v79;
  int64x2_t v80;
  const double *v81;
  uint64_t v82;
  const double *v83;
  unsigned __int128 v84;
  unsigned __int128 v85;
  const double *v86;
  unsigned __int128 v87;
  const double *v88;
  unsigned __int128 v89;
  HGGPUComputeDevice *v90;
  unint64_t v91;
  const double *v92;
  int8x16_t v93;
  uint64_t v94;
  int8x16_t v95;
  const double *v96;
  unsigned __int128 v97;
  const double *v98;
  unsigned __int128 v99;
  const double *v100;
  unsigned __int128 v101;
  const double *v102;
  unsigned __int128 v103;
  const double *v104;
  unsigned __int128 v105;
  const double *v106;
  unsigned __int128 v107;
  const double *v108;
  unsigned __int128 v109;
  const double *v110;
  int32x4_t v111;
  unsigned __int128 v112;
  const double *v113;
  int16x8_t v114;
  unsigned __int128 v115;
  unsigned __int128 v116;
  int8x16_t v117;
  const double *v118;
  unsigned __int128 v119;
  const double *v120;
  unsigned __int128 v121;
  const double *v122;
  unsigned __int128 v123;
  int8x16_t v124;
  const double *v125;
  int16x8_t v126;
  unsigned __int128 v127;
  const double *v128;
  int16x8_t v129;
  unsigned __int128 v130;
  const double *v131;
  unsigned __int128 v132;
  uint64_t v133;
  HGGPUComputeDevice **v134;
  int8x8_t v135;
  const double *v136;
  uint64_t v137;
  const double *v138;
  unsigned __int128 v139;
  unsigned __int128 v140;
  const double *v141;
  unsigned __int128 v142;
  const double *v143;
  unsigned __int128 v144;
  HGGPUComputeDevice *v145;
  char v146;
  unint64_t *v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t FrameStats;
  HGGPUComputeDevice *v155;
  std::__shared_weak_count *v156;
  unint64_t *p_shared_owners;
  unint64_t v158;
  int GLVirtualScreen;
  int IsRequestedVirtualScreen;
  char v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  PVRenderJob *v165;
  uint64_t v166;
  HGGPUComputeDevice *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  PVRenderJob *v171;
  uint64_t v172;
  HGGPUComputeDevice *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  HGGLContext *v177;
  int v178;
  int VirtualScreen;
  HGGPUComputeDevice *v181;
  std::__shared_weak_count *v182;

  v4 = *((_DWORD *)a2 + 3);
  v5 = v4 == 8 || v4 == 1;
  if (v5 && !*((_QWORD *)a2 + 37))
    return 4294966304;
  if (!*((_QWORD *)this + 14))
    return 4294966296;
  (*(void (**)(HGRenderJob *))(*(_QWORD *)a2 + 16))(a2);
  v6 = *((_QWORD *)a2 + 38);
  if (*((_QWORD *)a2 + 39) != v6)
  {
    v7 = 0;
    do
    {
      HGRenderNode::SetRenderQueue(*(HGRenderNode **)(v6 + 8 * v7++), this);
      v6 = *((_QWORD *)a2 + 38);
    }
    while (v7 < (*((_QWORD *)a2 + 39) - v6) >> 3);
  }
  v8 = (char *)this + 96;
  v9 = *((_QWORD *)a2 + 22);
  if (!v9)
  {
    if (!HGRenderJob::SpecifiesComputeDevices(a2))
    {
      if (*((_DWORD *)a2 + 4) == 1)
      {
        v151 = *((_QWORD *)this + 13);
        if ((char *)v151 == v8)
        {
LABEL_84:
          v12 = 4294966299;
          goto LABEL_129;
        }
        while (*(_DWORD *)(*(_QWORD *)(v151 + 16) + 40) != 1)
        {
          v151 = *(_QWORD *)(v151 + 8);
          if ((char *)v151 == v8)
            goto LABEL_84;
        }
      }
      else
      {
        if (HGRenderJob::UsesOnlyGPUResource(a2))
        {
          v152 = *((_QWORD *)this + 13);
          v12 = 4294966300;
          if ((char *)v152 == v8)
            goto LABEL_129;
          while (1)
          {
            v153 = *(_QWORD *)(v152 + 16);
            if (HGRenderContext::IsGPU(*(HGRenderContext **)(v153 + 48)))
            {
              if (*((_DWORD *)a2 + 47))
              {
                FrameStats = PVRenderJob::GetFrameStats(*(PVRenderJob **)(v153 + 48));
                v155 = *(HGGPUComputeDevice **)FrameStats;
                v156 = *(std::__shared_weak_count **)(FrameStats + 8);
                v181 = *(HGGPUComputeDevice **)FrameStats;
                v182 = v156;
                if (v156)
                {
                  p_shared_owners = (unint64_t *)&v156->__shared_owners_;
                  do
                    v158 = __ldxr(p_shared_owners);
                  while (__stxr(v158 + 1, p_shared_owners));
                }
                GLVirtualScreen = HGGPUComputeDevice::GetGLVirtualScreen(v155);
                IsRequestedVirtualScreen = HGRenderJob::IsRequestedVirtualScreen(a2, GLVirtualScreen);
                v161 = IsRequestedVirtualScreen;
                if (IsRequestedVirtualScreen)
                  v12 = HGRenderQueue::EnqueueRenderJobWithPriority(this, a2);
                if (v156)
                {
                  v162 = (unint64_t *)&v156->__shared_owners_;
                  do
                    v163 = __ldaxr(v162);
                  while (__stlxr(v163 - 1, v162));
                  if (!v163)
                  {
                    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                    std::__shared_weak_count::__release_weak(v156);
                  }
                }
                if ((v161 & 1) != 0)
                  goto LABEL_128;
              }
              else
              {
                if (*((_DWORD *)a2 + 3) != 2)
                  goto LABEL_127;
                v164 = **((_QWORD **)a2 + 38);
                if (*(_QWORD *)(v164 + 72))
                {
                  v165 = *(PVRenderJob **)(v153 + 48);
                  if (v165)
                  v166 = PVRenderJob::GetFrameStats(v165);
                  v167 = *(HGGPUComputeDevice **)v166;
                  v168 = *(std::__shared_weak_count **)(v166 + 8);
                  v181 = *(HGGPUComputeDevice **)v166;
                  v182 = v168;
                  if (v168)
                  {
                    v169 = (unint64_t *)&v168->__shared_owners_;
                    do
                      v170 = __ldxr(v169);
                    while (__stxr(v170 + 1, v169));
                  }
                  if (v167 == *(HGGPUComputeDevice **)(v164 + 72))
                  {
                    v12 = HGRenderQueue::EnqueueRenderJobWithPriority(this, a2);
                    std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&v181);
                    if (!(_DWORD)v12)
                      goto LABEL_130;
LABEL_129:
                    *((_QWORD *)a2 + 28) = this;
                    HGRenderJob::SetState((uint64_t)a2, -999);
                    HGRenderJob::CallNotifyFunc(a2);
                    goto LABEL_130;
                  }
                  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&v181);
                }
                else if (*(_QWORD *)(v164 + 88))
                {
                  v171 = *(PVRenderJob **)(v153 + 48);
                  if (v171)
                  v172 = PVRenderJob::GetFrameStats(v171);
                  v173 = *(HGGPUComputeDevice **)v172;
                  v174 = *(std::__shared_weak_count **)(v172 + 8);
                  v181 = v173;
                  v182 = v174;
                  if (v174)
                  {
                    v175 = (unint64_t *)&v174->__shared_owners_;
                    do
                      v176 = __ldxr(v175);
                    while (__stxr(v176 + 1, v175));
                  }
                  v177 = *(HGGLContext **)(v164 + 88);
                  if (v177)
                  {
                    (*(void (**)(HGGLContext *))(*(_QWORD *)v177 + 16))(v177);
                    v173 = v181;
                  }
                  v178 = HGGPUComputeDevice::GetGLVirtualScreen(v173);
                  VirtualScreen = HGGLContext::getVirtualScreen(v177);
                  if (v178 == VirtualScreen)
                    v12 = HGRenderQueue::EnqueueRenderJobWithPriority(this, a2);
                  if (v177)
                    (*(void (**)(HGGLContext *))(*(_QWORD *)v177 + 24))(v177);
                  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&v181);
                  if (v178 == VirtualScreen)
                    goto LABEL_128;
                }
              }
            }
            v152 = *(_QWORD *)(v152 + 8);
            if ((char *)v152 == v8)
              goto LABEL_128;
          }
        }
        if (*((_DWORD *)a2 + 4))
        {
          v12 = 0;
          goto LABEL_130;
        }
      }
      goto LABEL_127;
    }
    v13 = *((_QWORD *)this + 13);
    v12 = 4294966298;
    if ((char *)v13 == v8)
      goto LABEL_129;
    while (1)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 48);
      v15 = *(HGGPUComputeDevice **)(v14 + 16);
      v16 = *(std::__shared_weak_count **)(v14 + 24);
      v181 = v15;
      v182 = v16;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = (HGGPUComputeDevice *)*((_QWORD *)a2 + 3);
      if (v19)
        v20 = v19 == v15;
      else
        v20 = 0;
      if (v20)
      {
LABEL_67:
        v12 = HGRenderQueue::EnqueueRenderJobWithPriority(this, a2);
        v146 = 1;
        if (v16)
          goto LABEL_70;
        goto LABEL_74;
      }
      v21 = (HGGPUComputeDevice *)*((_QWORD *)a2 + 10);
      v23 = (HGGPUComputeDevice **)*((_QWORD *)a2 + 5);
      v22 = (char *)*((_QWORD *)a2 + 6);
      if (v21 && v21 == v15)
      {
        if (v23 == (HGGPUComputeDevice **)v22)
          goto LABEL_67;
        v24 = v22 - (char *)v23 - 16;
        if (v24 < 0x80)
        {
          LOBYTE(v25) = 0;
          goto LABEL_51;
        }
        v27 = v24 >> 4;
        v28 = (v24 >> 4) + 1;
        if (v24 >= 0x200)
        {
          if ((v28 & 0x1F) != 0)
            v34 = v28 & 0x1F;
          else
            v34 = 32;
          v29 = v28 - v34;
          v35 = vdupq_n_s64((unint64_t)v15);
          v36 = (const double *)(v23 + 32);
          v37 = 0uLL;
          v38 = v28;
          v39 = 0uLL;
          do
          {
            v40 = v36 - 32;
            v41 = (unsigned __int128)vld2q_f64(v40);
            v42 = v36 - 28;
            v43 = (unsigned __int128)vld2q_f64(v42);
            v44 = v36 - 24;
            v45 = (unsigned __int128)vld2q_f64(v44);
            v46 = v36 - 20;
            v47 = (unsigned __int128)vld2q_f64(v46);
            v48 = v36 - 16;
            v49 = (unsigned __int128)vld2q_f64(v48);
            v50 = v36 - 12;
            v51 = (unsigned __int128)vld2q_f64(v50);
            v52 = v36 - 8;
            v53 = (unsigned __int128)vld2q_f64(v52);
            v54 = v36 - 4;
            v55 = (int32x4_t)vceqq_s64(v35, (int64x2_t)v47);
            v56 = (unsigned __int128)vld2q_f64(v54);
            v57 = v36;
            v58 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v35, (int64x2_t)v45), v55);
            v59 = (unsigned __int128)vld2q_f64(v57);
            v57 += 4;
            v60 = (unsigned __int128)vld2q_f64(v57);
            v61 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v35, (int64x2_t)v41), (int32x4_t)vceqq_s64(v35, (int64x2_t)v43)), v58);
            v62 = v36 + 8;
            v63 = (unsigned __int128)vld2q_f64(v62);
            v64 = v36 + 12;
            v65 = (unsigned __int128)vld2q_f64(v64);
            v66 = v36 + 16;
            v67 = (unsigned __int128)vld2q_f64(v66);
            v68 = vuzp1q_s8(v61, (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v35, (int64x2_t)v49), (int32x4_t)vceqq_s64(v35, (int64x2_t)v51)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v35, (int64x2_t)v53), (int32x4_t)vceqq_s64(v35, (int64x2_t)v56))));
            v69 = v36 + 20;
            v70 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v35, (int64x2_t)v63), (int32x4_t)vceqq_s64(v35, (int64x2_t)v65));
            v71 = (unsigned __int128)vld2q_f64(v69);
            v72 = v36 + 24;
            v73 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v35, (int64x2_t)v59), (int32x4_t)vceqq_s64(v35, (int64x2_t)v60));
            v74 = (unsigned __int128)vld2q_f64(v72);
            v75 = v36 + 28;
            v76 = (unsigned __int128)vld2q_f64(v75);
            v37 = vorrq_s8(v68, v37);
            v39 = vorrq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16(v73, v70), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v35, (int64x2_t)v67), (int32x4_t)vceqq_s64(v35, (int64x2_t)v71)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v35, (int64x2_t)v74), (int32x4_t)vceqq_s64(v35, (int64x2_t)v76)))), v39);
            v36 += 64;
            v38 -= 32;
          }
          while (v34 != v38);
          v25 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v37, v39), 7uLL))) & 1;
          if (v34 < 9)
          {
            v23 += 2 * v29;
            do
            {
LABEL_51:
              v90 = *v23;
              v23 += 2;
              LOBYTE(v25) = (v15 == v90) | v25;
            }
            while (v23 != (HGGPUComputeDevice **)v22);
            goto LABEL_66;
          }
        }
        else
        {
          v25 = 0;
          v29 = 0;
        }
        v77 = v28 & 7;
        if ((v28 & 7) == 0)
          v77 = 8;
        v78 = &v23[2 * (v28 - v77)];
        v79 = vdup_n_s8(v25);
        v80 = vdupq_n_s64((unint64_t)v15);
        v81 = (const double *)&v23[2 * v29];
        v82 = ~v27 + v29 + v77;
        do
        {
          v83 = v81;
          v84 = (unsigned __int128)vld2q_f64(v83);
          v83 += 4;
          v85 = (unsigned __int128)vld2q_f64(v83);
          v86 = v81 + 8;
          v87 = (unsigned __int128)vld2q_f64(v86);
          v88 = v81 + 12;
          v89 = (unsigned __int128)vld2q_f64(v88);
          v79 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v80, (int64x2_t)v84), (int32x4_t)vceqq_s64(v80, (int64x2_t)v85)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v80, (int64x2_t)v87), (int32x4_t)vceqq_s64(v80, (int64x2_t)v89)))), v79);
          v81 += 16;
          v82 += 8;
        }
        while (v82);
        LOBYTE(v25) = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v79, 7uLL))) & 1;
        v23 = v78;
        goto LABEL_51;
      }
      if (v23 == (HGGPUComputeDevice **)v22)
        goto LABEL_69;
      v26 = v22 - (char *)v23 - 16;
      if (v26 >= 0x80)
      {
        v30 = v26 >> 4;
        v31 = (v26 >> 4) + 1;
        v32 = vdupq_n_s64((unint64_t)v15);
        if (v26 < 0x200)
        {
          v25 = 0;
          v33 = 0;
LABEL_60:
          v133 = v31 & 7;
          if ((v31 & 7) == 0)
            v133 = 8;
          v134 = &v23[2 * (v31 - v133)];
          v135 = vdup_n_s8(v25);
          v136 = (const double *)&v23[2 * v33];
          v137 = ~v30 + v33 + v133;
          do
          {
            v138 = v136;
            v139 = (unsigned __int128)vld2q_f64(v138);
            v138 += 4;
            v140 = (unsigned __int128)vld2q_f64(v138);
            v141 = v136 + 8;
            v142 = (unsigned __int128)vld2q_f64(v141);
            v143 = v136 + 12;
            v144 = (unsigned __int128)vld2q_f64(v143);
            v135 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v32, (int64x2_t)v139), (int32x4_t)vceqq_s64(v32, (int64x2_t)v140)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v32, (int64x2_t)v142), (int32x4_t)vceqq_s64(v32, (int64x2_t)v144)))), v135);
            v136 += 16;
            v137 += 8;
          }
          while (v137);
          LOBYTE(v25) = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v135, 7uLL))) & 1;
          v23 = v134;
          goto LABEL_65;
        }
        if ((v31 & 0x1F) != 0)
          v91 = v31 & 0x1F;
        else
          v91 = 32;
        v33 = v31 - v91;
        v92 = (const double *)(v23 + 32);
        v93 = 0uLL;
        v94 = v31;
        v95 = 0uLL;
        do
        {
          v96 = v92 - 32;
          v97 = (unsigned __int128)vld2q_f64(v96);
          v98 = v92 - 28;
          v99 = (unsigned __int128)vld2q_f64(v98);
          v100 = v92 - 24;
          v101 = (unsigned __int128)vld2q_f64(v100);
          v102 = v92 - 20;
          v103 = (unsigned __int128)vld2q_f64(v102);
          v104 = v92 - 16;
          v105 = (unsigned __int128)vld2q_f64(v104);
          v106 = v92 - 12;
          v107 = (unsigned __int128)vld2q_f64(v106);
          v108 = v92 - 8;
          v109 = (unsigned __int128)vld2q_f64(v108);
          v110 = v92 - 4;
          v111 = (int32x4_t)vceqq_s64(v32, (int64x2_t)v103);
          v112 = (unsigned __int128)vld2q_f64(v110);
          v113 = v92;
          v114 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v32, (int64x2_t)v101), v111);
          v115 = (unsigned __int128)vld2q_f64(v113);
          v113 += 4;
          v116 = (unsigned __int128)vld2q_f64(v113);
          v117 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v32, (int64x2_t)v97), (int32x4_t)vceqq_s64(v32, (int64x2_t)v99)), v114);
          v118 = v92 + 8;
          v119 = (unsigned __int128)vld2q_f64(v118);
          v120 = v92 + 12;
          v121 = (unsigned __int128)vld2q_f64(v120);
          v122 = v92 + 16;
          v123 = (unsigned __int128)vld2q_f64(v122);
          v124 = vuzp1q_s8(v117, (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v32, (int64x2_t)v105), (int32x4_t)vceqq_s64(v32, (int64x2_t)v107)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v32, (int64x2_t)v109), (int32x4_t)vceqq_s64(v32, (int64x2_t)v112))));
          v125 = v92 + 20;
          v126 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v32, (int64x2_t)v119), (int32x4_t)vceqq_s64(v32, (int64x2_t)v121));
          v127 = (unsigned __int128)vld2q_f64(v125);
          v128 = v92 + 24;
          v129 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v32, (int64x2_t)v115), (int32x4_t)vceqq_s64(v32, (int64x2_t)v116));
          v130 = (unsigned __int128)vld2q_f64(v128);
          v131 = v92 + 28;
          v132 = (unsigned __int128)vld2q_f64(v131);
          v93 = vorrq_s8(v124, v93);
          v95 = vorrq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16(v129, v126), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v32, (int64x2_t)v123), (int32x4_t)vceqq_s64(v32, (int64x2_t)v127)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v32, (int64x2_t)v130), (int32x4_t)vceqq_s64(v32, (int64x2_t)v132)))), v95);
          v92 += 64;
          v94 -= 32;
        }
        while (v91 != v94);
        v25 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v93, v95), 7uLL))) & 1;
        if (v91 >= 9)
          goto LABEL_60;
        v23 += 2 * v33;
      }
      else
      {
        LOBYTE(v25) = 0;
      }
      do
      {
LABEL_65:
        v145 = *v23;
        v23 += 2;
        LOBYTE(v25) = (v15 == v145) | v25;
      }
      while (v23 != (HGGPUComputeDevice **)v22);
LABEL_66:
      if ((v25 & 1) != 0)
        goto LABEL_67;
LABEL_69:
      v146 = 0;
      if (v16)
      {
LABEL_70:
        v147 = (unint64_t *)&v16->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
LABEL_74:
      if ((v146 & 1) == 0)
      {
        v13 = *(_QWORD *)(v13 + 8);
        if ((char *)v13 != v8)
          continue;
      }
      goto LABEL_128;
    }
  }
  v10 = *((_QWORD *)this + 13);
  if ((char *)v10 == v8)
  {
LABEL_15:
    v12 = 4294966297;
    goto LABEL_129;
  }
  while (1)
  {
    v11 = *(_QWORD *)(v10 + 16);
    if (*(_QWORD *)(v11 + 56) == v9)
      break;
    v10 = *(_QWORD *)(v10 + 8);
    if ((char *)v10 == v8)
      goto LABEL_15;
  }
  if (!*((_DWORD *)a2 + 3))
  {
    HGRenderExecUnit::AddEnqueuedRenderJob(*(HGRenderExecUnit **)(v10 + 16), a2);
    if ((*((_BYTE *)this + 69) & 4) != 0)
    {
      v149 = *(_DWORD *)(v11 + 8);
      v150 = HGRenderExecUnit::NumEnqueuedRenderJobs((HGRenderExecUnit *)v11);
      printf("RenderUnit<%d> Enqueue: Count: %lu\n", v149, v150);
    }
  }
LABEL_127:
  v12 = HGRenderQueue::EnqueueRenderJobWithPriority(this, a2);
LABEL_128:
  if ((_DWORD)v12)
    goto LABEL_129;
LABEL_130:
  (*(void (**)(HGRenderJob *))(*(_QWORD *)a2 + 24))(a2);
  return v12;
}

void sub_1B2AF1F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF1F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HGRenderQueue::EnqueueRenderJobWithPriority(HGRenderQueue *this, HGRenderJob *a2)
{
  HGSynchronizable *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  HGRenderJob *v15;
  const char *TypeLabel;
  const char *UserName;
  HGRenderJob *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  HGSynchronizable *v26;
  int v27;
  int v28;
  HGSynchronizable *v29;
  HGSynchronizable *v30;
  HGSynchronizable *v31;
  char v32;
  HGRenderJob *v33;

  v33 = a2;
  if ((*((_DWORD *)a2 + 4) - 3) <= 2)
  {
    if (qword_1ED4DAB08 != -1)
      dispatch_once(&qword_1ED4DAB08, &__block_literal_global_28);
    *((_DWORD *)a2 + 4) = 2;
  }
  if (*((_DWORD *)a2 + 3) != 4)
  {
    (*(void (**)(HGRenderJob *))(*(_QWORD *)a2 + 16))(a2);
    HGRenderJob::SetState((uint64_t)a2, 2);
    *((_QWORD *)a2 + 28) = this;
    HGRenderJob::CallNotifyFunc(a2);
  }
  v4 = (HGSynchronizable *)*((_QWORD *)this + 43);
  v31 = v4;
  v32 = 0;
  HGSynchronizable::Lock(v4);
  v5 = *((_DWORD *)this + 4);
  if (v5 != 3)
  {
    v6 = *((_QWORD *)this + 41);
    v7 = *((_QWORD *)this + 38);
    v8 = v7 + 8 * (v6 >> 9);
    if (*((_QWORD *)this + 39) == v7)
    {
      v9 = 0;
      v12 = 0;
      v10 = (int *)((char *)this + 336);
    }
    else
    {
      v9 = *(_QWORD *)v8 + 8 * (*((_QWORD *)this + 41) & 0x1FFLL);
      v10 = (int *)((char *)this + 336);
      v11 = *(_QWORD *)(v7 + (((*((_QWORD *)this + 42) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*((_QWORD *)this + 42) + v6) & 0x1FF);
      if (v9 == v11)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        while (*((_DWORD *)a2 + 26) <= *(_DWORD *)(*(_QWORD *)v9 + 104))
        {
          v9 += 8;
          if (v9 - *(_QWORD *)v8 == 4096)
          {
            v13 = *(_QWORD *)(v8 + 8);
            v8 += 8;
            v9 = v13;
          }
          ++v12;
          if (v9 == v11)
          {
            v9 = v11;
            break;
          }
        }
      }
    }
    std::deque<HGRenderJob *>::insert((_QWORD *)this + 37, (char *)v8, v9, (char *)&v33);
    if ((*((_BYTE *)this + 69) & 4) != 0)
    {
      v14 = *v10;
      v15 = v33;
      TypeLabel = HGRenderJob::GetTypeLabel(v33);
      UserName = HGRenderJob::GetUserName(v33);
      printf("EnqueueJob: %p  Type: %s  Queue[%d,%d] '%s'\n", v15, TypeLabel, v12, v14, UserName);
    }
    v18 = v33;
    if (*((_DWORD *)v33 + 3) <= 1u)
    {
      v19 = *((_QWORD *)v33 + 38);
      if (*((_QWORD *)v33 + 39) != v19)
      {
        v20 = 0;
        v21 = 1;
        do
        {
          *(_QWORD *)(*(_QWORD *)(v19 + 8 * v20) + 192) = v18;
          (*(void (**)(HGRenderJob *))(*(_QWORD *)v18 + 16))(v18);
          v20 = v21;
          v18 = v33;
          v19 = *((_QWORD *)v33 + 38);
          ++v21;
        }
        while (v20 < (*((_QWORD *)v33 + 39) - v19) >> 3);
      }
      if ((*((_BYTE *)this + 69) & 8) != 0 && *((_BYTE *)this + 352))
      {
        *((_BYTE *)this + 352) = 0;
        v22 = mach_absolute_time();
        v23 = *((_QWORD *)this + 45);
        if (qword_1ED4DAB18 != -1)
          dispatch_once(&qword_1ED4DAB18, &__block_literal_global_86);
        v24 = *(double *)&qword_1ED4DAB10 * (double)(v22 - v23) * 1000.0;
        printf("RenderJobQueue Empty Time (ms): %5.1f\n", v24);
      }
    }
  }
  HGSynchronizable::Unlock(v4);
  if (v5 == 3)
    return 4294966305;
  v26 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v26);
  v27 = *((_DWORD *)this + 4);
  HGSynchronizable::Unlock(v26);
  if (v27 != 2)
  {
    if (HGRenderJob::UsesOnlyGPUResource(v33))
    {
      v31 = (HGSynchronizable *)*((_QWORD *)this + 16);
      v32 = 0;
      HGSynchronizable::Lock(v31);
      HGSynchronizable::NotifyAll(v31);
      HGSynchronizable::Unlock(v31);
      return 0;
    }
    if (HGRenderJob::UsesOnlyCPUResource(v33))
    {
      v31 = (HGSynchronizable *)*((_QWORD *)this + 15);
      v32 = 0;
      HGSynchronizable::Lock(v31);
      HGSynchronizable::NotifyAll(v31);
      HGSynchronizable::Unlock(v31);
      return 0;
    }
    v28 = *((_DWORD *)this + 5);
    if (v28 == 2)
    {
      if (*((_BYTE *)this + 42))
      {
        v31 = (HGSynchronizable *)*((_QWORD *)this + 15);
        v32 = 0;
        HGSynchronizable::Lock(v31);
        HGSynchronizable::NotifyAll(v31);
        HGSynchronizer::~HGSynchronizer(&v31);
        if ((unint64_t)HGRenderQueue::GetNumJobsInRenderQueue(this) < 2)
          return 0;
        v30 = (HGSynchronizable *)*((_QWORD *)this + 16);
        v31 = v30;
        v32 = 0;
        HGSynchronizable::Lock(v30);
        HGSynchronizable::NotifyAll(v30);
        goto LABEL_44;
      }
    }
    else if (v28 == 1 && *((_BYTE *)this + 41))
    {
      v31 = (HGSynchronizable *)*((_QWORD *)this + 16);
      v32 = 0;
      HGSynchronizable::Lock(v31);
      HGSynchronizable::NotifyAll(v31);
      HGSynchronizer::~HGSynchronizer(&v31);
      if ((unint64_t)HGRenderQueue::GetNumJobsInRenderQueue(this) < 2)
        return 0;
      v29 = (HGSynchronizable *)*((_QWORD *)this + 15);
      v31 = v29;
      v32 = 0;
      HGSynchronizable::Lock(v29);
      HGSynchronizable::NotifyAll(v29);
LABEL_44:
      HGSynchronizer::~HGSynchronizer(&v31);
      return 0;
    }
    v31 = (HGSynchronizable *)*((_QWORD *)this + 16);
    v32 = 0;
    HGSynchronizable::Lock(v31);
    HGSynchronizable::NotifyAll(v31);
    HGSynchronizable::Unlock(v31);
    v31 = (HGSynchronizable *)*((_QWORD *)this + 15);
    v32 = 0;
    HGSynchronizable::Lock(v31);
    HGSynchronizable::NotifyAll(v31);
    HGSynchronizable::Unlock(v31);
  }
  return 0;
}

void sub_1B2AF2400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF2414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF2428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF243C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF2454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF246C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF2484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF2498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF24B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF24C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF24DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF24F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN13HGRenderQueue28EnqueueRenderJobWithPriorityEP11HGRenderJob_block_invoke()
{
  return printf("HGRenderQueue does not support kResourceGPU_AuxOnly or kResourceGPU_PreferAux or kResourceGPU_AttachedOnly");
}

_QWORD *std::deque<HGRenderJob *>::insert(_QWORD *a1, char *a2, uint64_t a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *result;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;

  v6 = a1[4];
  v7 = a1[1];
  v8 = a1[2];
  v9 = (char *)(v7 + 8 * (v6 >> 9));
  if (v8 == v7)
  {
    v10 = 0;
    if (a3)
    {
LABEL_3:
      v11 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v9) << 6) - ((v10 - *(_QWORD *)v9) >> 3);
      v12 = a1[5];
      v13 = v12 - v11;
      if (v11 < v12 - v11)
        goto LABEL_4;
LABEL_14:
      if (v8 == v7)
        v22 = 0;
      else
        v22 = ((v8 - v7) << 6) - 1;
      if (v22 == v12 + v6)
      {
        std::deque<HGRenderJob *>::__add_back_capacity((uint64_t)a1);
        v12 = a1[5];
        v13 = v12 - v11;
      }
      if (v12 == v11)
      {
        *(_QWORD *)(*(_QWORD *)(a1[1] + (((a1[4] + v11) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[4] + v11) & 0x1FF)) = *(_QWORD *)a4;
        a1[5] = v11 + 1;
        v23 = a1[4];
        v24 = a1[1];
        result = (_QWORD *)(v24 + 8 * (v23 >> 9));
        if (a1[2] != v24)
          goto LABEL_55;
        goto LABEL_47;
      }
      v63 = a4;
      v26 = a1[4] + v12;
      v27 = a1[1];
      v28 = (char *)(v27 + 8 * (v26 >> 9));
      v29 = *(_QWORD *)v28 + 8 * (v26 & 0x1FF);
      if (a1[2] == v27)
        v30 = 0;
      else
        v30 = (char *)v29;
      v31 = (uint64_t)&v30[-*(_QWORD *)v28];
      v32 = v31 >> 3;
      if (v31 < 9)
      {
        v51 = 512 - v32;
        v34 = &v28[-8 * (v51 >> 9)];
        v35 = (char *)(*(_QWORD *)v34 + 8 * (~(_WORD)v51 & 0x1FF));
        if (v35 != a4)
          goto LABEL_44;
      }
      else
      {
        v33 = v32 - 1;
        v34 = &v28[8 * (v33 >> 9)];
        v35 = (char *)(*(_QWORD *)v34 + 8 * (v33 & 0x1FF));
        if (v35 != a4)
          goto LABEL_44;
      }
      v63 = v30;
      a4 = v30;
LABEL_44:
      *(_QWORD *)v30 = *(_QWORD *)v35;
      a1[5] = v12 + 1;
      if (v13 >= 2)
      {
        v55 = ((uint64_t)&v30[-*(_QWORD *)v28] >> 3) - v13;
        if (v55 < 1)
        {
          v61 = 511 - v55;
          v56 = &v28[-8 * (v61 >> 9)];
          v57 = (char *)(*(_QWORD *)v56 + 8 * (~(_WORD)v61 & 0x1FF));
        }
        else
        {
          v56 = &v28[8 * ((unint64_t)v55 >> 9)];
          v57 = (char *)(*(_QWORD *)v56 + 8 * (v55 & 0x1FF));
        }
        v28 = std::deque<HGRenderJob *>::__move_backward_and_check((uint64_t)a1, v56, v57, v34, v35, v28, v30, (unint64_t *)&v63);
        v30 = v62;
        v52 = *(_QWORD *)v63;
        if (v62 != *(char **)v28)
        {
LABEL_46:
          *((_QWORD *)v30 - 1) = v52;
          v23 = a1[4];
          v53 = a1[1];
          result = (_QWORD *)(v53 + 8 * (v23 >> 9));
          if (a1[2] != v53)
            goto LABEL_55;
          goto LABEL_47;
        }
      }
      else
      {
        v52 = *(_QWORD *)a4;
        if (v30 != *(char **)v28)
          goto LABEL_46;
      }
      v30 = (char *)(*((_QWORD *)v28 - 1) + 4096);
      goto LABEL_46;
    }
  }
  else
  {
    v10 = *(_QWORD *)v9 + 8 * (a1[4] & 0x1FFLL);
    if (a3 != v10)
      goto LABEL_3;
  }
  v11 = 0;
  v12 = a1[5];
  v13 = v12;
  if (!v12)
    goto LABEL_14;
LABEL_4:
  if (v6)
  {
    if (v11)
      goto LABEL_6;
  }
  else
  {
    std::deque<HGRenderJob *>::__add_front_capacity((uint64_t)a1);
    if (v11)
    {
LABEL_6:
      v63 = a4;
      v14 = a1[4];
      v15 = a1[1];
      v16 = (char *)(v15 + 8 * (v14 >> 9));
      v17 = *(_QWORD *)v16;
      if (a1[2] == v15)
        v18 = 0;
      else
        v18 = (char *)(*(_QWORD *)v16 + 8 * (a1[4] & 0x1FFLL));
      v19 = (uint64_t)&v18[-v17];
      v20 = (uint64_t)&v18[-v17] >> 3;
      if (v19 < 9)
      {
        v21 = (char *)(*(_QWORD *)&v16[-8 * ((unint64_t)(512 - v20) >> 9)] + 8 * (~(512 - (_WORD)v20) & 0x1FF));
        if (v18 != a4)
          goto LABEL_38;
      }
      else
      {
        v21 = (char *)(*(_QWORD *)&v16[((unint64_t)(v20 - 1) >> 6) & 0x3FFFFFFFFFFFFF8]
                     + 8 * ((v20 - 1) & 0x1FF));
        if (v18 != a4)
          goto LABEL_38;
      }
      v63 = v21;
      a4 = v21;
LABEL_38:
      *(_QWORD *)v21 = *(_QWORD *)v18;
      v42 = a1[5] + 1;
      a1[4] = v14 - 1;
      a1[5] = v42;
      if (v11 < 2)
        goto LABEL_54;
      v43 = (uint64_t)&v18[-*(_QWORD *)v16];
      v44 = v43 >> 3;
      if (v43 < -7)
      {
        v45 = &v16[-8 * ((unint64_t)(510 - v44) >> 9)];
        v46 = (char *)(*(_QWORD *)v45 + 8 * (~(510 - (_WORD)v44) & 0x1FF));
        v47 = v44 + v11;
        if (v47 < 1)
          goto LABEL_41;
      }
      else
      {
        v45 = &v16[8 * ((unint64_t)(v44 + 1) >> 9)];
        v46 = (char *)(*(_QWORD *)v45 + 8 * ((v44 + 1) & 0x1FF));
        v47 = v44 + v11;
        if (v47 < 1)
        {
LABEL_41:
          v48 = 511 - v47;
          v49 = &v16[-8 * (v48 >> 9)];
          v50 = (char *)(*(_QWORD *)v49 + 8 * (~(_WORD)v48 & 0x1FF));
LABEL_53:
          std::deque<HGRenderJob *>::__move_and_check((int)a1, v45, v46, v49, v50, v16, v18, (unint64_t *)&v63);
          v18 = v58;
          a4 = v63;
LABEL_54:
          *(_QWORD *)v18 = *(_QWORD *)a4;
          v23 = a1[4];
          v59 = a1[1];
          result = (_QWORD *)(v59 + 8 * (v23 >> 9));
          if (a1[2] != v59)
            goto LABEL_55;
          goto LABEL_47;
        }
      }
      v49 = &v16[8 * ((unint64_t)v47 >> 9)];
      v50 = (char *)(*(_QWORD *)v49 + 8 * (v47 & 0x1FF));
      goto LABEL_53;
    }
  }
  v36 = a1[4];
  v37 = a1[1];
  v38 = (_QWORD *)(v37 + 8 * (v36 >> 9));
  if (a1[2] == v37)
    v39 = 0;
  else
    v39 = *v38 + 8 * (a1[4] & 0x1FFLL);
  if (v39 == *v38)
    v39 = *(v38 - 1) + 4096;
  *(_QWORD *)(v39 - 8) = *(_QWORD *)a4;
  v40 = a1[5] + 1;
  a1[4] = v36 - 1;
  a1[5] = v40;
  v23 = a1[4];
  v41 = a1[1];
  result = (_QWORD *)(v41 + 8 * (v23 >> 9));
  if (a1[2] != v41)
  {
LABEL_55:
    v54 = *result + 8 * (v23 & 0x1FF);
    if (!v11)
      return result;
    goto LABEL_56;
  }
LABEL_47:
  v54 = 0;
  if (!v11)
    return result;
LABEL_56:
  v60 = v11 + ((v54 - *result) >> 3);
  if (v60 < 1)
    result -= (unint64_t)(511 - v60) >> 9;
  else
    result += (unint64_t)v60 >> 9;
  return result;
}

uint64_t HGRenderQueue::CancelAllQueuedRenderJobs(HGRenderQueue *this)
{
  HGSynchronizable *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  char *v6;
  uint64_t v7;
  char *v8;
  HGRenderJob **v9;
  unint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  HGRenderExecUnit *v14;
  int v15;
  uint64_t v16;
  HGRenderJob *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  void **v27;
  void **v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *__p[2];
  __int128 v39;
  __int128 v40;

  v39 = 0u;
  v40 = 0u;
  *(_OWORD *)__p = 0u;
  v2 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v2);
  v3 = *((_QWORD *)this + 38);
  v4 = *((_QWORD *)this + 39);
  v5 = (void **)(v3 + 8 * (*((_QWORD *)this + 41) >> 9));
  if (v4 == v3)
    v6 = 0;
  else
    v6 = (char *)*v5 + 8 * (*((_QWORD *)this + 41) & 0x1FFLL);
  v7 = 0;
  v8 = (char *)this + 96;
LABEL_5:
  v9 = (HGRenderJob **)v6;
  while (v4 != v3)
  {
    v10 = *((_QWORD *)this + 42) + *((_QWORD *)this + 41);
    if (v9 == (HGRenderJob **)(*(_QWORD *)(v3 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF)))
      goto LABEL_32;
LABEL_10:
    v11 = *((_DWORD *)*v9 + 3);
    if (v11 == 7)
      goto LABEL_21;
    if (!v11)
    {
      if (*((_QWORD *)*v9 + 22))
      {
        v13 = *((_QWORD *)this + 13);
        if ((char *)v13 != v8)
        {
          while (!HGRenderExecUnit::HasEnqueuedRenderJob(*(HGRenderExecUnit **)(v13 + 16), *v9))
          {
            v13 = *(_QWORD *)(v13 + 8);
            if ((char *)v13 == v8)
              goto LABEL_21;
          }
          HGRenderExecUnit::RemoveEnqueuedRenderJob(*(HGRenderExecUnit **)(v13 + 16), *v9);
          if ((*((_BYTE *)this + 69) & 4) != 0)
          {
            v14 = *(HGRenderExecUnit **)(v13 + 16);
            v15 = *((_DWORD *)v14 + 2);
            v16 = HGRenderExecUnit::NumEnqueuedRenderJobs(v14);
            printf("RenderUnit<%d> Dequeue: Count: %lu\n", v15, v16);
          }
        }
      }
LABEL_21:
      v17 = *v9;
      HGRenderJob::SetState((uint64_t)v17, 6);
      v18 = *((_QWORD *)v17 + 38);
      if (*((_QWORD *)v17 + 39) == v18)
      {
        HGRenderJob::CallNotifyFunc(v17);
      }
      else
      {
        v19 = 0;
        v20 = 1;
        do
        {
          v21 = *(char **)(v18 + 8 * v19);
          HGRenderNode::SetState((uint64_t)v21, 8);
          HGRenderNode::CallNotifyFunc(v21);
          HGRenderNode::NotifyRenderJobFinished((HGRenderJob **)v21);
          v19 = v20;
          v18 = *((_QWORD *)v17 + 38);
          ++v20;
        }
        while (v19 < (*((_QWORD *)v17 + 39) - v18) >> 3);
      }
      v22 = (char *)__p[1];
      if ((void *)v39 == __p[1])
        v23 = 0;
      else
        v23 = (((_QWORD)v39 - (unint64_t)__p[1]) << 6) - 1;
      v24 = *((_QWORD *)&v40 + 1);
      v25 = *((_QWORD *)&v40 + 1) + v40;
      if (v23 == *((_QWORD *)&v40 + 1) + (_QWORD)v40)
      {
        std::deque<HGRenderJob *>::__add_back_capacity((uint64_t)__p);
        v24 = *((_QWORD *)&v40 + 1);
        v22 = (char *)__p[1];
        v25 = v40 + *((_QWORD *)&v40 + 1);
      }
      *(_QWORD *)(*(_QWORD *)&v22[(v25 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v25 & 0x1FF)) = v17;
      *((_QWORD *)&v40 + 1) = v24 + 1;
      v5 = std::deque<Pipeline *>::erase((int64x2_t *)((char *)this + 296), (char *)v5, v6);
      v6 = v26;
      v7 = (v7 + 1);
      v3 = *((_QWORD *)this + 38);
      v4 = *((_QWORD *)this + 39);
      goto LABEL_5;
    }
    ++v9;
    v6 += 8;
    if ((char *)*v5 + 4096 == v6)
    {
      v12 = (char *)v5[1];
      ++v5;
      v6 = v12;
      goto LABEL_5;
    }
  }
  if (v9)
    goto LABEL_10;
LABEL_32:
  HGSynchronizable::Unlock(v2);
  v27 = (void **)__p[1];
  v28 = (void **)v39;
  if (*((_QWORD *)&v40 + 1))
  {
    v29 = (char *)__p[1] + 8 * ((unint64_t)v40 >> 9);
    if ((void *)v39 == __p[1])
      v30 = 0;
    else
      v30 = (char *)(*(_QWORD *)v29 + 8 * (v40 & 0x1FF));
    while (1)
    {
      v27 = (void **)__p[1];
      v28 = (void **)v39;
      if ((void *)v39 == __p[1])
      {
        if (!v30)
          break;
      }
      else if ((char *)(*(_QWORD *)((char *)__p[1]
                                   + (((*((_QWORD *)&v40 + 1) + (_QWORD)v40) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v40 + 1) + v40) & 0x1FF)) == v30)
      {
        break;
      }
      v32 = *(_QWORD *)v30;
      if (*(_QWORD *)(*(_QWORD *)v30 + 176))
      {
        *(_DWORD *)(v32 + 12) = 4;
        *(_DWORD *)(v32 + 104) = 10;
        HGRenderQueue::EnqueueRenderJob(this, (HGRenderJob *)v32);
      }
      else
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v32 + 24))(*(_QWORD *)v30);
      }
      v29 = (char *)std::deque<Pipeline *>::erase((int64x2_t *)__p, v29, v30);
      v30 = v31;
    }
  }
  *((_QWORD *)&v40 + 1) = 0;
  v33 = (char *)v28 - (char *)v27;
  if ((unint64_t)((char *)v28 - (char *)v27) >= 0x11)
  {
    do
    {
      operator delete(*v27);
      v28 = (void **)v39;
      v27 = (void **)((char *)__p[1] + 8);
      __p[1] = v27;
      v33 = v39 - (_QWORD)v27;
    }
    while ((_QWORD)v39 - (_QWORD)v27 > 0x10uLL);
  }
  v34 = v33 >> 3;
  if (v34 == 1)
  {
    v35 = 256;
LABEL_51:
    *(_QWORD *)&v40 = v35;
  }
  else if (v34 == 2)
  {
    v35 = 512;
    goto LABEL_51;
  }
  if (v27 != v28)
  {
    do
    {
      v36 = *v27++;
      operator delete(v36);
    }
    while (v27 != v28);
    if ((void *)v39 != __p[1])
      *(_QWORD *)&v39 = v39 + (((unint64_t)__p[1] - v39 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  return v7;
}

void sub_1B2AF2DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  HGSynchronizable *v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, HGSynchronizable *);
  v6 = va_arg(va1, _QWORD);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  std::deque<HGNode *>::~deque[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t HGRenderQueue::CancelAllActiveRenderJobs(HGRenderQueue *this, int a2)
{
  HGSynchronizable *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  HGSynchronizable *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  HGSynchronizable *v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  HGSynchronizable *v18;
  uint64_t v19;
  int v20;
  timespec __rmtp;
  timespec __rqtp;

  v4 = (HGSynchronizable *)*((_QWORD *)this + 43);
  __rqtp.tv_sec = (__darwin_time_t)v4;
  LOBYTE(__rqtp.tv_nsec) = 0;
  HGSynchronizable::Lock(v4);
  v5 = (char *)this + 136;
  v6 = *((_QWORD *)this + 18);
  if ((HGRenderQueue *)v6 == (HGRenderQueue *)((char *)this + 136))
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    do
    {
      v8 = *(_QWORD *)(v6 + 16);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 176) + 120))(*(_QWORD *)(v8 + 176), 13, 1);
      *(_DWORD *)(v8 + 108) = 6;
      v7 = (v7 + 1);
      v6 = *(_QWORD *)(v6 + 8);
    }
    while ((char *)v6 != v5);
  }
  HGSynchronizable::Unlock(v4);
  v9 = (HGSynchronizable *)*((_QWORD *)this + 43);
  __rqtp.tv_sec = (__darwin_time_t)v9;
  LOBYTE(__rqtp.tv_nsec) = 0;
  HGSynchronizable::Lock(v9);
  v10 = (char *)this + 160;
  v11 = *((_QWORD *)this + 21);
  if ((HGRenderQueue *)v11 != (HGRenderQueue *)((char *)this + 160))
  {
    do
    {
      v12 = *(_QWORD *)(v11 + 16);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v12 + 176) + 120))(*(_QWORD *)(v12 + 176), 13, 1);
      *(_DWORD *)(v12 + 108) = 6;
      v7 = (v7 + 1);
      v11 = *(_QWORD *)(v11 + 8);
    }
    while ((char *)v11 != v10);
  }
  HGSynchronizable::Unlock(v9);
  if (a2)
  {
    LOBYTE(v13) = 0;
LABEL_11:
    v14 = (HGSynchronizable *)*((_QWORD *)this + 43);
    HGSynchronizable::Lock(v14);
    v15 = *((_QWORD *)this + 18);
    if ((char *)v15 == v5)
    {
LABEL_14:
      v17 = 1;
    }
    else
    {
      while (1)
      {
        v16 = *(_DWORD *)(*(_QWORD *)(v15 + 16) + 108);
        v17 = v16 != 6;
        if (v16 == 6)
          break;
        v15 = *(_QWORD *)(v15 + 8);
        if ((char *)v15 == v5)
          goto LABEL_14;
      }
    }
    HGSynchronizable::Unlock(v14);
    if (v13)
    {
LABEL_16:
      v13 = 1;
      goto LABEL_23;
    }
    while (1)
    {
      v18 = (HGSynchronizable *)*((_QWORD *)this + 43);
      HGSynchronizable::Lock(v18);
      v19 = *((_QWORD *)this + 21);
      if ((char *)v19 == v10)
      {
LABEL_21:
        v13 = 1;
      }
      else
      {
        while (1)
        {
          v20 = *(_DWORD *)(*(_QWORD *)(v19 + 16) + 108);
          v13 = v20 != 6;
          if (v20 == 6)
            break;
          v19 = *(_QWORD *)(v19 + 8);
          if ((char *)v19 == v10)
            goto LABEL_21;
        }
      }
      HGSynchronizable::Unlock(v18);
LABEL_23:
      if (v17 && v13)
        break;
      __rqtp = (timespec)xmmword_1B3524A90;
      nanosleep(&__rqtp, &__rmtp);
      if (!v17)
        goto LABEL_11;
      v17 = 1;
      if (v13)
        goto LABEL_16;
    }
  }
  return v7;
}

void sub_1B2AF3030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF3044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

uint64_t HGRenderQueue::CancelAllRenderJobs(HGRenderQueue *this, int a2)
{
  int v4;

  v4 = HGRenderQueue::CancelAllQueuedRenderJobs(this);
  return HGRenderQueue::CancelAllActiveRenderJobs(this, a2) + v4;
}

uint64_t HGRenderQueue::CancelRenderJob(HGRenderQueue *this, HGRenderJob *a2)
{
  HGSynchronizable *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  HGRenderExecUnit *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  HGSynchronizable *v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  char *v33;

  v4 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v4);
  v5 = *((_QWORD *)this + 38);
  if (*((_QWORD *)this + 39) != v5)
  {
    v6 = *((_QWORD *)this + 41);
    v7 = v5 + 8 * (v6 >> 9);
    v8 = (char *)(*(_QWORD *)v7 + 8 * (v6 & 0x1FF));
    v9 = *(_QWORD *)(v5 + (((*((_QWORD *)this + 42) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*((_QWORD *)this + 42) + v6) & 0x1FF);
    if (v8 != (char *)v9)
    {
      while (*(HGRenderJob **)v8 != a2)
      {
        v8 += 8;
        if (&v8[-*(_QWORD *)v7] == (char *)4096)
        {
          v10 = *(char **)(v7 + 8);
          v7 += 8;
          v8 = v10;
        }
        if (v8 == (char *)v9)
          goto LABEL_8;
      }
      std::deque<Pipeline *>::erase((int64x2_t *)((char *)this + 296), (char *)v7, v8);
      HGRenderJob::SetState((uint64_t)a2, 6);
      v13 = *((_DWORD *)a2 + 3);
      if (v13)
      {
        if (v13 == 8)
        {
LABEL_15:
          HGSynchronizable::NotifyAll(*((HGSynchronizable **)a2 + 37));
LABEL_29:
          (*(void (**)(HGRenderJob *))(*(_QWORD *)a2 + 24))(a2);
          goto LABEL_30;
        }
      }
      else
      {
        if (*((_QWORD *)a2 + 22))
        {
          v14 = *((_QWORD *)this + 13);
          if ((HGRenderQueue *)v14 != (HGRenderQueue *)((char *)this + 96))
          {
            while (!HGRenderExecUnit::HasEnqueuedRenderJob(*(HGRenderExecUnit **)(v14 + 16), *(HGRenderJob **)v8))
            {
              v14 = *(_QWORD *)(v14 + 8);
              if ((HGRenderQueue *)v14 == (HGRenderQueue *)((char *)this + 96))
                goto LABEL_23;
            }
            HGRenderExecUnit::RemoveEnqueuedRenderJob(*(HGRenderExecUnit **)(v14 + 16), *(HGRenderJob **)v8);
            if ((*((_BYTE *)this + 69) & 4) != 0)
            {
              v15 = *(HGRenderExecUnit **)(v14 + 16);
              v16 = *((_DWORD *)v15 + 2);
              v17 = HGRenderExecUnit::NumEnqueuedRenderJobs(v15);
              printf("RenderUnit<%d> Dequeue: Count: %lu\n", v16, v17);
            }
          }
        }
LABEL_23:
        if (*((_DWORD *)a2 + 3) == 8)
          goto LABEL_15;
      }
      v18 = *((_QWORD *)a2 + 38);
      if (*((_QWORD *)a2 + 39) == v18)
      {
        HGRenderJob::CallNotifyFunc(a2);
      }
      else
      {
        v19 = 0;
        v20 = 1;
        do
        {
          v21 = *(char **)(v18 + 8 * v19);
          HGRenderNode::SetState((uint64_t)v21, 7);
          HGRenderNode::CallNotifyFunc(v21);
          HGRenderNode::NotifyRenderJobFinished((HGRenderJob **)v21);
          v19 = v20;
          v18 = *((_QWORD *)a2 + 38);
          ++v20;
        }
        while (v19 < (*((_QWORD *)a2 + 39) - v18) >> 3);
      }
      goto LABEL_29;
    }
  }
LABEL_8:
  v11 = *((_QWORD *)this + 18);
  if ((HGRenderQueue *)v11 == (HGRenderQueue *)((char *)this + 136))
  {
LABEL_11:
    v12 = 1;
    goto LABEL_31;
  }
  while (*(HGRenderJob **)(v11 + 16) != a2)
  {
    v11 = *(_QWORD *)(v11 + 8);
    if ((HGRenderQueue *)v11 == (HGRenderQueue *)((char *)this + 136))
      goto LABEL_11;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 22) + 120))(*((_QWORD *)a2 + 22), 13, 1);
  HGRenderJob::SetState((uint64_t)a2, 6);
LABEL_30:
  v12 = 0;
LABEL_31:
  HGSynchronizable::Unlock(v4);
  if (v12)
  {
    v22 = (HGSynchronizable *)*((_QWORD *)this + 73);
    HGSynchronizable::Lock(v22);
    v23 = *((_QWORD *)this + 68);
    v24 = (void **)(v23 + 8 * (*((_QWORD *)this + 71) >> 9));
    v25 = *((_QWORD *)this + 69);
    if (v25 == v23)
      v26 = 0;
    else
      v26 = (char *)*v24 + 8 * (*((_QWORD *)this + 71) & 0x1FFLL);
    v27 = 0;
LABEL_37:
    v28 = v26;
    while (1)
    {
      if (v25 == v23)
      {
        if (!v28)
        {
LABEL_46:
          HGSynchronizable::Unlock(v22);
          return v27;
        }
      }
      else
      {
        v29 = *((_QWORD *)this + 72) + *((_QWORD *)this + 71);
        if (v28 == (char *)(*(_QWORD *)(v23 + ((v29 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v29 & 0x1FF)))
          goto LABEL_46;
      }
      v30 = *(_QWORD **)v28;
      if (*(HGRenderJob **)(*(_QWORD *)(*(_QWORD *)v28 + 40) + 192) == a2)
      {
        v24 = std::deque<Pipeline *>::erase((int64x2_t *)((char *)this + 536), (char *)v24, v26);
        v26 = v32;
        HGRenderJob::SetState((uint64_t)a2, 6);
        v33 = (char *)v30[5];
        HGRenderNode::SetState((uint64_t)v33, 8);
        HGRenderNode::CallNotifyFunc(v33);
        HGRenderNode::NotifyRenderJobFinished((HGRenderJob **)v33);
        (*(void (**)(_QWORD *))(*v30 + 24))(v30);
        v23 = *((_QWORD *)this + 68);
        v25 = *((_QWORD *)this + 69);
        v27 = 1;
        goto LABEL_37;
      }
      v28 += 8;
      v26 += 8;
      if ((char *)*v24 + 4096 == v26)
      {
        v31 = (char *)v24[1];
        ++v24;
        v26 = v31;
        goto LABEL_37;
      }
    }
  }
  return 1;
}

void sub_1B2AF3418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF342C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF3440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF3454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF346C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF3480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF3498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2AF34AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

uint64_t HGRenderQueue::ExecuteRenderJob(HGRenderQueue *this, HGRenderJob *a2)
{
  int v2;
  uint64_t v6;
  int VirtualScreen;
  HGSynchronizable *v9;
  uint64_t v10;
  uint64_t v11;
  PCSharedCount v12;
  HGGLContext *v13;

  v2 = *((_DWORD *)a2 + 3);
  if (v2 != 8 && v2 != 1)
    return 4294966304;
  v6 = *((_QWORD *)a2 + 22);
  if (v6)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 304))(v6) & 1) != 0)
    {
      *((_DWORD *)a2 + 4) = 1;
    }
    else
    {
      *((_DWORD *)a2 + 4) = 2;
      HGGPURenderer::GetCurrentContext(*((HGGPURenderer **)a2 + 22), (uint64_t *)&v12);
      HGGLContext::Share((uint64_t *)&v12, (HGObject **)&v13);
      PCSharedCount::PCSharedCount(&v12);
      VirtualScreen = HGGLContext::getVirtualScreen(v13);
      HGRenderJob::SetVirtualScreen(a2, VirtualScreen);
      if (v13)
        (*(void (**)(HGGLContext *))(*(_QWORD *)v13 + 24))(v13);
    }
  }
  v9 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v9);
  *((_QWORD *)a2 + 37) = v9;
  v10 = operator new();
  *(_QWORD *)v10 = v9;
  *(_BYTE *)(v10 + 8) = 0;
  HGSynchronizable::Lock(v9);
  v11 = HGRenderQueue::EnqueueRenderJob(this, a2);
  HGSynchronizable::Wait(*(HGSynchronizable **)v10);
  if (!*(_BYTE *)(v10 + 8))
    HGSynchronizable::Unlock(*(HGSynchronizable **)v10);
  MEMORY[0x1B5E29170](v10, 0x1020C405F07FB98);
  return v11;
}

void sub_1B2AF3628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCSharedCount a9)
{
  PCSharedCount::PCSharedCount(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF3640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t HGRenderQueue::GetNumActiveCPURenderJobs(HGRenderQueue *this)
{
  HGSynchronizable *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v2);
  v3 = (char *)this + 136;
  v4 = *((_QWORD *)this + 18);
  if ((HGRenderQueue *)v4 == (HGRenderQueue *)((char *)this + 136))
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v5 += (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 16) + 176) + 304))(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 176));
      v4 = *(_QWORD *)(v4 + 8);
    }
    while ((char *)v4 != v3);
  }
  HGSynchronizable::Unlock(v2);
  return v5;
}

void sub_1B2AF3730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

uint64_t HGRenderQueue::GetNumActiveGPURenderJobs(uint64_t a1, int a2, int a3)
{
  HGSynchronizable *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(HGSynchronizable **)(a1 + 344);
  HGSynchronizable::Lock(v6);
  v7 = a1 + 136;
  v8 = *(_QWORD *)(a1 + 144);
  if (v8 == a1 + 136)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(v8 + 16);
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 176) + 304))(*(_QWORD *)(v10 + 176)) & 1) == 0
        && *(_DWORD *)(v10 + 104) >= a3
        && *(_DWORD *)(v10 + 184) == a2)
      {
        ++v9;
      }
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != v7);
  }
  HGSynchronizable::Unlock(v6);
  return v9;
}

void sub_1B2AF3808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

uint64_t HGRenderQueue::GetNumActiveGPUCustomRenderJobs(HGRenderQueue *this, int a2)
{
  HGGLContext *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  PCSharedCount v10;
  HGGLContext *v11[2];
  char v12;

  v4 = (HGGLContext *)*((_QWORD *)this + 43);
  v11[1] = v4;
  v12 = 0;
  HGSynchronizable::Lock((HGSynchronizable *)v4);
  v5 = (char *)this + 160;
  v6 = *((_QWORD *)this + 21);
  if ((HGRenderQueue *)v6 == (HGRenderQueue *)((char *)this + 160))
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v6 + 16);
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 176) + 304))(*(_QWORD *)(v8 + 176)) & 1) == 0)
      {
        HGGPURenderer::GetContext(*(_QWORD *)(v8 + 176), 24, (uint64_t *)&v10);
        HGGLContext::Share((uint64_t *)&v10, (HGObject **)v11);
        PCSharedCount::PCSharedCount(&v10);
        if (HGGLContext::getVirtualScreen(v11[0]) == a2)
          ++v7;
        if (v11[0])
          (*(void (**)(HGGLContext *))(*(_QWORD *)v11[0] + 24))(v11[0]);
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while ((char *)v6 != v5);
  }
  HGSynchronizable::Unlock((HGSynchronizable *)v4);
  return v7;
}

void sub_1B2AF3908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

HGSynchronizable *HGRenderQueue::SetMinJobExecPriority(HGRenderQueue *this, int a2)
{
  HGSynchronizable *v4;
  int v5;
  HGSynchronizable *result;
  HGSynchronizable *v7;
  HGSynchronizable *v8;

  v4 = (HGSynchronizable *)*((_QWORD *)this + 43);
  HGSynchronizable::Lock(v4);
  v5 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = a2;
  result = HGSynchronizable::Unlock(v4);
  if (v5 > a2)
  {
    v7 = (HGSynchronizable *)*((_QWORD *)this + 16);
    HGSynchronizable::Lock(v7);
    HGSynchronizable::NotifyAll(v7);
    HGSynchronizable::Unlock(v7);
    v8 = (HGSynchronizable *)*((_QWORD *)this + 15);
    HGSynchronizable::Lock(v8);
    HGSynchronizable::NotifyAll(v8);
    return HGSynchronizable::Unlock(v8);
  }
  return result;
}

void sub_1B2AF39FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2AF3A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

uint64_t HGRenderQueue::EnqueueDeleteRenderNode(HGRenderQueue *this, HGRenderNode *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  HGRenderNode *v7;
  HGRenderJob *v8;
  HGRenderNode *v9;
  HGRenderJob *v10;
  HGPixelBufferObj *v11;

  v4 = *((_QWORD *)a2 + 23);
  if (v4)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 304))(v4) ^ 1;
    v6 = *((_QWORD *)a2 + 3);
    if (!v6)
      goto LABEL_3;
  }
  else
  {
    v5 = 0;
    v6 = *((_QWORD *)a2 + 3);
    if (!v6)
    {
LABEL_3:
      if (!v5)
        goto LABEL_16;
      goto LABEL_14;
    }
  }
  if ((*(_BYTE *)(v6 + 12) & 0x10) == 0 || !*(_QWORD *)(v6 + 128))
  {
    v6 = 0;
    if (!v5)
      goto LABEL_16;
    goto LABEL_14;
  }
  v7 = (HGRenderNode *)HGObject::operator new(0xD0uLL);
  HGRenderNode::HGRenderNode(v7);
  *((_QWORD *)v7 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v5 && *((_QWORD *)a2 + 23) == *(_QWORD *)(v6 + 128))
  {
    *((_QWORD *)v7 + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
  }
  v8 = (HGRenderJob *)HGObject::operator new(0x160uLL);
  HGRenderJob::HGRenderJob(v8);
  HGUserJob::SetPriority((uint64_t)v8, 5);
  HGRenderJob::SetRenderer(v8, *(HGRenderer **)(v6 + 128));
  HGRenderJob::AddRenderNodeInternal(v8, v7);
  HGRenderJob::SetPriority((uint64_t)v8, 12);
  v6 = HGRenderQueue::EnqueueRenderJob(this, v8);
  (*(void (**)(HGRenderJob *))(*(_QWORD *)v8 + 24))(v8);
  (*(void (**)(HGRenderNode *))(*(_QWORD *)v7 + 24))(v7);
  if (v5)
  {
LABEL_14:
    if (*((_QWORD *)a2 + 2))
    {
      v9 = (HGRenderNode *)HGObject::operator new(0xD0uLL);
      HGRenderNode::HGRenderNode(v9);
      *((_QWORD *)v9 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = 0;
      v10 = (HGRenderJob *)HGObject::operator new(0x160uLL);
      HGRenderJob::HGRenderJob(v10);
      HGUserJob::SetPriority((uint64_t)v10, 5);
      HGRenderJob::SetRenderer(v10, *((HGRenderer **)a2 + 23));
      HGRenderJob::AddRenderNodeInternal(v10, v9);
      HGRenderJob::SetPriority((uint64_t)v10, 12);
      v6 = HGRenderQueue::EnqueueRenderJob(this, v10);
      (*(void (**)(HGRenderJob *))(*(_QWORD *)v10 + 24))(v10);
      (*(void (**)(HGRenderNode *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
LABEL_16:
  v11 = (HGPixelBufferObj *)*((_QWORD *)a2 + 17);
  if (v11)
  {
    HGRenderQueue::ReleasePBOToSharedPool(this, v11);
    *((_QWORD *)a2 + 17) = 0;
  }
  return v6;
}

void sub_1B2AF3C08(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2AF3C20(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

